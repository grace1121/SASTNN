,id,code,label
812,812,,1
44,44,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.search Import java.rmi.Remote InterfaceDeclaration Modifier public /**
 * Marker interface to enable subclasses of {@link org.apache.lucene.search.Searchable} to be used via
 * Java RMI. Classes implementing this interface can be used as a RMI -
 * ""remote object"".
 * <p>
 * {@link RMIRemoteSearchable} extends {@link org.apache.lucene.search.Searchable} and can transparently
 * be used as a such.
 * <p>
 * Example usage:
 * 
 * <pre>
 *   RMIRemoteSearchable remoteObject = ...;
 *   String remoteObjectName = ...;
 *   Naming.rebind (remoteObjectName, remoteObject);
 *   Searchable luceneSearchable = (Searchable) Naming.lookup (remoteObjectName);
 * </pre>
 * 
 * </p>
 * </p>
 * 
 *  @version $Id:$
 */ RMIRemoteSearchable ReferenceType Searchable ReferenceType Remote",0
41,41,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import org.apache.lucene.index.IndexReader ClassDeclaration Modifier public abstract /**
 * <p>Expert: Collectors are primarily meant to be used to
 * gather raw results from a search, and implement sorting
 * or custom result filtering, collation, etc. </p>
 *
 * <p>Lucene's core collectors are derived from Collector.
 * Likely your application can use one of these classes, or
 * subclass {@link TopDocsCollector}, instead of
 * implementing Collector directly:
 *
 * <ul>
 *      
 *   <li>{@link TopDocsCollector} is an abstract base class
 *   that assumes you will retrieve the top N docs,
 *   according to some criteria, after collection is
 *   done.  </li>
 *
 *   <li>{@link TopScoreDocCollector} is a concrete subclass
 *   {@link TopDocsCollector} and sorts according to score +
 *   docID.  This is used internally by the {@link
 *   IndexSearcher} search methods that do not take an
 *   explicit {@link Sort}. It is likely the most frequently
 *   used collector.</li>
 *
 *   <li>{@link TopFieldCollector} subclasses {@link
 *   TopDocsCollector} and sorts according to a specified
 *   {@link Sort} object (sort by field).  This is used
 *   internally by the {@link IndexSearcher} search methods
 *   that take an explicit {@link Sort}.
 *
 *   <li>{@link TimeLimitingCollector}, which wraps any other
 *   Collector and aborts the search if it's taken too much
 *   time.</li>
 *
 *   <li>{@link PositiveScoresOnlyCollector} wraps any other
 *   Collector and prevents collection of hits whose score
 *   is &lt;= 0.0</li>
 *
 * </ul>
 *
 * <p>Collector decouples the score from the collected doc:
 * the score computation is skipped entirely if it's not
 * needed.  Collectors that do need the score should
 * implement the {@link #setScorer} method, to hold onto the
 * passed {@link Scorer} instance, and call {@link
 * Scorer#score()} within the collect method to compute the
 * current hit's score.  If your collector may request the
 * score for a single hit multiple times, you should use
 * {@link ScoreCachingWrappingScorer}. </p>
 * 
 * <p><b>NOTE:</b> The doc that is passed to the collect
 * method is relative to the current reader. If your
 * collector needs to resolve this to the docID space of the
 * Multi*Reader, you must re-base it by recording the
 * docBase from the most recent setNextReader call.  Here's
 * a simple example showing how to collect docIDs into a
 * BitSet:</p>
 * 
 * <pre>
 * Searcher searcher = new IndexSearcher(indexReader);
 * final BitSet bits = new BitSet(indexReader.maxDoc());
 * searcher.search(query, new Collector() {
 *   private int docBase;
 * 
 *   <em>// ignore scorer</em>
 *   public void setScorer(Scorer scorer) {
 *   }
 *
 *   <em>// accept docs out of order (for a BitSet it doesn't matter)</em>
 *   public boolean acceptsDocsOutOfOrder() {
 *     return true;
 *   }
 * 
 *   public void collect(int doc) {
 *     bits.set(doc + docBase);
 *   }
 * 
 *   public void setNextReader(IndexReader reader, int docBase) {
 *     this.docBase = docBase;
 *   }
 * });
 * </pre>
 *
 * <p>Not all collectors will need to rebase the docID.  For
 * example, a collector that simply counts the total number
 * of hits would skip it.</p>
 * 
 * <p><b>NOTE:</b> Prior to 2.9, Lucene silently filtered
 * out hits with score <= 0.  As of 2.9, the core Collectors
 * no longer do that.  It's very unusual to have such hits
 * (a negative query boost, or function query returning
 * negative custom scores, could cause it to happen).  If
 * you need that behavior, use {@link
 * PositiveScoresOnlyCollector}.</p>
 *
 * <p><b>NOTE:</b> This API is experimental and might change
 * in incompatible ways in the next release.</p>
 * 
 * @since 2.9
 */ Collector MethodDeclaration /**
   * Called before successive calls to {@link #collect(int)}. Implementations
   * that need the score of the current document (passed-in to
   * {@link #collect(int)}), should save the passed-in Scorer and call
   * scorer.score() when needed.
   */ Modifier public abstract setScorer FormalParameter ReferenceType Scorer scorer IOException MethodDeclaration /**
   * Called once for every document matching a query, with the unbased document
   * number.
   * 
   * <p>
   * Note: This is called in an inner search loop. For good search performance,
   * implementations of this method should not call {@link Searcher#doc(int)} or
   * {@link org.apache.lucene.index.IndexReader#document(int)} on every hit.
   * Doing so can slow searches by an order of magnitude or more.
   */ Modifier public abstract collect FormalParameter BasicType int doc IOException MethodDeclaration /**
   * Called before collecting from each IndexReader. All doc ids in
   * {@link #collect(int)} will correspond to reader.
   * 
   * Add docBase to the current IndexReaders internal document id to re-base ids
   * in {@link #collect(int)}.
   * 
   * @param reader
   *          next IndexReader
   * @param docBase
   */ Modifier public abstract setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException MethodDeclaration /**
   * Returns true iff this {@link Collector} can accept documents given to
   * {@link #collect(int)} out of order.
   * <p>
   * NOTE: some collectors can work in either mode, with a more efficient
   * implementation for in-order docs collection. If your collector can work in
   * either mode, it is recommended that you create two variants of it, since
   * some queries work much faster if out-of-order collection is supported by a
   * {@link Collector}.
   */ Modifier public abstract BasicType boolean acceptsDocsOutOfOrder",0
209,209,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.IOException Import java.io.Closeable Import org.apache.lucene.index.IndexFileNameFilter ClassDeclaration Modifier public abstract /** A Directory is a flat list of files.  Files may be written once, when they
 * are created.  Once a file is created it may only be opened for read, or
 * deleted.  Random access is permitted both when reading and writing.
 *
 * <p> Java's i/o APIs not used directly, but rather all i/o is
 * through this API.  This permits things such as: <ul>
 * <li> implementation of RAM-based indices;
 * <li> implementation indices stored in a database, via JDBC;
 * <li> implementation of an index as a single file;
 * </ul>
 *
 * Directory locking is implemented by an instance of {@link
 * LockFactory}, and can be changed for each Directory
 * instance using {@link #setLockFactory}.
 *
 */ Directory FieldDeclaration Modifier protected volatile BasicType boolean VariableDeclarator isOpen Literal true FieldDeclaration /** Holds the LockFactory instance (implements locking for
   * this Directory instance). */ Modifier protected ReferenceType LockFactory VariableDeclarator lockFactory MethodDeclaration /** Returns an array of strings, one for each file in the
   *  directory.
   * @throws IOException
   */ Modifier public abstract ReferenceType String listAll IOException MethodDeclaration /** Returns true iff a file with the given name exists. */ Modifier public abstract BasicType boolean fileExists FormalParameter ReferenceType String name IOException MethodDeclaration /** Returns the time the named file was last modified. */ Modifier public abstract BasicType long fileModified FormalParameter ReferenceType String name IOException MethodDeclaration /** Set the modified time of an existing file to now. */ Modifier public abstract touchFile FormalParameter ReferenceType String name IOException MethodDeclaration /** Removes an existing file in the directory. */ Modifier public abstract deleteFile FormalParameter ReferenceType String name IOException MethodDeclaration /** Returns the length of a file in the directory. */ Modifier public abstract BasicType long fileLength FormalParameter ReferenceType String name IOException MethodDeclaration /** Creates a new, empty file in the directory with the given name.
      Returns a stream writing this file. */ Modifier public abstract ReferenceType IndexOutput createOutput FormalParameter ReferenceType String name IOException MethodDeclaration /** Ensure that any writes to this file are moved to
   *  stable storage.  Lucene uses this to properly commit
   *  changes to the index, to prevent a machine/OS crash
   *  from corrupting the index. */ Modifier public sync FormalParameter ReferenceType String name IOException MethodDeclaration /** Returns a stream reading an existing file. */ Modifier public abstract ReferenceType IndexInput openInput FormalParameter ReferenceType String name IOException MethodDeclaration /** Returns a stream reading an existing file, with the
   * specified read buffer size.  The particular Directory
   * implementation may ignore the buffer size.  Currently
   * the only Directory implementations that respect this
   * parameter are {@link FSDirectory} and {@link
   * org.apache.lucene.index.CompoundFileReader}.
  */ Modifier public ReferenceType IndexInput openInput FormalParameter ReferenceType String name FormalParameter BasicType int bufferSize IOException ReturnStatement MethodInvocation MemberReference name openInput MethodDeclaration /** Construct a {@link Lock}.
   * @param name the name of the lock file
   */ Modifier public ReferenceType Lock makeLock FormalParameter ReferenceType String name ReturnStatement MethodInvocation lockFactory MemberReference name makeLock MethodDeclaration /**
   * Attempt to clear (forcefully unlock and remove) the
   * specified lock.  Only call this at a time when you are
   * certain this lock is no longer in use.
   * @param name name of the lock to be cleared.
   */ Modifier public clearLock FormalParameter ReferenceType String name IOException IfStatement BinaryOperation != MemberReference lockFactory Literal null BlockStatement StatementExpression MethodInvocation lockFactory MemberReference name clearLock End MethodDeclaration /** Closes the store. */ Modifier public abstract close IOException MethodDeclaration /**
   * Set the LockFactory that this Directory instance should
   * use for its locking implementation.  Each * instance of
   * LockFactory should only be used for one directory (ie,
   * do not share a single instance across multiple
   * Directories).
   *
   * @param lockFactory instance of {@link LockFactory}.
   */ Modifier public setLockFactory FormalParameter ReferenceType LockFactory lockFactory AssertStatement BinaryOperation != MemberReference lockFactory Literal null StatementExpression Assignment This MemberReference lockFactory MemberReference lockFactory = StatementExpression MethodInvocation lockFactory This MethodInvocation getLockID setLockPrefix MethodDeclaration /**
   * Get the LockFactory that this Directory instance is
   * using for its locking implementation.  Note that this
   * may be null for Directory implementations that provide
   * their own locking implementation.
   */ Modifier public ReferenceType LockFactory getLockFactory ReturnStatement This MemberReference lockFactory MethodDeclaration /**
   * Return a string identifier that uniquely differentiates
   * this Directory instance from other Directory instances.
   * This ID should be the same if two Directory instances
   * (even in different JVMs and/or on different machines)
   * are considered ""the same index"".  This is how locking
   * ""scopes"" to the right index.
   */ Modifier public ReferenceType String getLockID ReturnStatement This MethodInvocation toString MethodDeclaration /**
   * Copy contents of a directory src to a directory dest.
   * If a file in src already exists in dest then the
   * one in dest will be blindly overwritten.
   *
   * <p><b>NOTE:</b> the source directory cannot change
   * while this method is running.  Otherwise the results
   * are undefined and you could easily hit a
   * FileNotFoundException.
   *
   * <p><b>NOTE:</b> this method only copies files that look
   * like index files (ie, have extensions matching the
   * known extensions of index files).
   *
   * @param src source directory
   * @param dest destination directory
   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory
   * @throws IOException
   */ Modifier public static copy FormalParameter ReferenceType Directory src FormalParameter ReferenceType Directory dest FormalParameter BasicType boolean closeDirSrc IOException LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator files MethodInvocation src listAll LocalVariableDeclaration ReferenceType IndexFileNameFilter VariableDeclarator filter MethodInvocation IndexFileNameFilter getFilter LocalVariableDeclaration BasicType byte VariableDeclarator buf ArrayCreator BasicType byte MemberReference BufferedIndexOutput BUFFER_SIZE ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement IfStatement MethodInvocation ! filter Literal null MemberReference ArraySelector MemberReference i files accept ContinueStatement End LocalVariableDeclaration ReferenceType IndexOutput VariableDeclarator os Literal null LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator is Literal null TryStatement StatementExpression Assignment MemberReference os MethodInvocation dest MemberReference ArraySelector MemberReference i files createOutput = StatementExpression Assignment MemberReference is MethodInvocation src MemberReference ArraySelector MemberReference i files openInput = LocalVariableDeclaration BasicType long VariableDeclarator len MethodInvocation is length LocalVariableDeclaration BasicType long VariableDeclarator readCount Literal 0 WhileStatement BinaryOperation < MemberReference readCount MemberReference len BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator toRead TernaryExpression BinaryOperation > BinaryOperation + MemberReference readCount MemberReference BufferedIndexOutput BUFFER_SIZE MemberReference len Cast BasicType int BinaryOperation - MemberReference len MemberReference readCount MemberReference BufferedIndexOutput BUFFER_SIZE StatementExpression MethodInvocation is MemberReference buf Literal 0 MemberReference toRead readBytes StatementExpression MethodInvocation os MemberReference buf MemberReference toRead writeBytes StatementExpression Assignment MemberReference readCount MemberReference toRead += End TryStatement IfStatement BinaryOperation != MemberReference os Literal null StatementExpression MethodInvocation os close End IfStatement BinaryOperation != MemberReference is Literal null StatementExpression MethodInvocation is close End End IfStatement MemberReference closeDirSrc StatementExpression MethodInvocation src close End MethodDeclaration /**
   * @throws AlreadyClosedException if this Directory is closed
   */ Modifier final protected ensureOpen AlreadyClosedException IfStatement MemberReference ! isOpen ThrowStatement ClassCreator ReferenceType AlreadyClosedException Literal ""this Directory is closed"" End ReferenceType Closeable",0
473,473,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.search.function Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.FieldCache Import java.io.IOException ClassDeclaration Modifier public /**
 * Expert: obtains the ordinal of the field value from the default Lucene 
 * {@link org.apache.lucene.search.FieldCache FieldCache} using getStringIndex()
 * and reverses the order.
 * <p>
 * The native lucene index order is used to assign an ordinal value for each field value.
 * <p>
 * Field values (terms) are lexicographically ordered by unicode value, and numbered starting at 1.
 * <br>
 * Example of reverse ordinal (rord):
 * <br>If there were only three field values: ""apple"",""banana"",""pear""
 * <br>then rord(""apple"")=3, rord(""banana"")=2, ord(""pear"")=1
 * <p>
 * WARNING: 
 * rord() depends on the position in an index and can thus change 
 * when other documents are inserted or deleted,
 * or if a MultiSearcher is used. 
 * 
 * <p><font color=""#FF0000"">
 * WARNING: The status of the <b>search.function</b> package is experimental. 
 * The APIs introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 *
 * <p><b>NOTE</b>: with the switch in 2.9 to segment-based
 * searching, if {@link #getValues} is invoked with a
 * composite (multi-segment) reader, this can easily cause
 * double RAM usage for the values in the FieldCache.  It's
 * best to switch your application to pass only atomic
 * (single segment) readers to this API.</p>
 */ ReverseOrdFieldSource FieldDeclaration Modifier public ReferenceType String VariableDeclarator field ConstructorDeclaration Modifier public /** 
   * Contructor for a certain field.
   * @param field field whose values reverse order is used.  
   */ ReverseOrdFieldSource FormalParameter ReferenceType String field StatementExpression Assignment This MemberReference field MemberReference field = MethodDeclaration Modifier public Annotation Override ReferenceType String description ReturnStatement BinaryOperation + BinaryOperation + Literal ""rord("" MemberReference field Literal ')' MethodDeclaration Modifier public Annotation Override ReferenceType DocValues getValues FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration Modifier final ReferenceType FieldCache ReferenceType StringIndex VariableDeclarator sindex MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field getStringIndex LocalVariableDeclaration Modifier final BasicType int VariableDeclarator arr MemberReference sindex order LocalVariableDeclaration Modifier final BasicType int VariableDeclarator end MemberReference sindex.lookup length ReturnStatement ClassCreator ReferenceType DocValues MethodDeclaration Modifier public Annotation Override BasicType float floatVal FormalParameter BasicType int doc ReturnStatement Cast BasicType float BinaryOperation - MemberReference end MemberReference ArraySelector MemberReference doc arr MethodDeclaration Modifier public Annotation Override BasicType int intVal FormalParameter BasicType int doc ReturnStatement BinaryOperation - MemberReference end MemberReference ArraySelector MemberReference doc arr MethodDeclaration Modifier public Annotation Override ReferenceType String strVal FormalParameter BasicType int doc ReturnStatement MethodInvocation Integer MethodInvocation MemberReference doc intVal toString MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter BasicType int doc ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation description Literal '=' MethodInvocation MemberReference doc strVal MethodDeclaration Annotation Override ReferenceType Object getInnerArray ReturnStatement MemberReference arr MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation != MethodInvocation o getClass ClassReference ReferenceType ReverseOrdFieldSource ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ReverseOrdFieldSource VariableDeclarator other Cast ReferenceType ReverseOrdFieldSource MemberReference o ReturnStatement This MemberReference field MethodInvocation MemberReference other field equals FieldDeclaration Modifier private final static BasicType int VariableDeclarator hcode ClassReference MethodInvocation hashCode ReferenceType ReverseOrdFieldSource MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement BinaryOperation + MemberReference hcode MethodInvocation field hashCode ReferenceType ValueSource",0
512,512,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geohash Import java.util.HashMap Import java.util.Map ClassDeclaration Modifier public /**
 * Based on http://en.wikipedia.org/wiki/Geohash
 *
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ GeoHashUtils FieldDeclaration Modifier private static BasicType char VariableDeclarator _base32 ArrayInitializer Literal '0' Literal '1' Literal '2' Literal '3' Literal '4' Literal '5' Literal '6' Literal '7' Literal '8' Literal '9' Literal 'b' Literal 'c' Literal 'd' Literal 'e' Literal 'f' Literal 'g' Literal 'h' Literal 'j' Literal 'k' Literal 'm' Literal 'n' Literal 'p' Literal 'q' Literal 'r' Literal 's' Literal 't' Literal 'u' Literal 'v' Literal 'w' Literal 'x' Literal 'y' Literal 'z' FieldDeclaration Modifier private final static ReferenceType Map TypeArgument ReferenceType Character TypeArgument ReferenceType Integer VariableDeclarator _decodemap ClassCreator ReferenceType HashMap TypeArgument ReferenceType Character TypeArgument ReferenceType Integer LocalVariableDeclaration BasicType int VariableDeclarator sz MemberReference _base32 length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sz MemberReference ++ i BlockStatement StatementExpression MethodInvocation _decodemap MemberReference ArraySelector MemberReference i _base32 MemberReference i put End FieldDeclaration Modifier private static BasicType int VariableDeclarator precision Literal 12 FieldDeclaration Modifier private static BasicType int VariableDeclarator bits ArrayInitializer Literal 16 Literal 8 Literal 4 Literal 2 Literal 1 MethodDeclaration Modifier public static main FormalParameter ReferenceType String args LocalVariableDeclaration ReferenceType GeoHashUtils VariableDeclarator ghf ClassCreator ReferenceType GeoHashUtils LocalVariableDeclaration ReferenceType String VariableDeclarator gc1 MethodInvocation ghf Literal 30 Literal - 90.0 encode LocalVariableDeclaration ReferenceType String VariableDeclarator gc2 MethodInvocation ghf Literal 51.4797 Literal - 0.0124 encode StatementExpression MethodInvocation System.out MemberReference gc1 println StatementExpression MethodInvocation System.out MemberReference gc2 println LocalVariableDeclaration BasicType double VariableDeclarator gd1 MethodInvocation ghf MemberReference gc1 decode LocalVariableDeclaration BasicType double VariableDeclarator gd2 MethodInvocation ghf MemberReference gc2 decode StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + MemberReference ArraySelector Literal 0 gd1 Literal "", "" MemberReference ArraySelector Literal 1 gd1 println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + MemberReference ArraySelector Literal 0 gd2 Literal "", "" MemberReference ArraySelector Literal 1 gd2 println MethodDeclaration Modifier public static ReferenceType String encode FormalParameter BasicType double latitude FormalParameter BasicType double longitude LocalVariableDeclaration BasicType double VariableDeclarator lat_interval ArrayInitializer Literal - 90.0 Literal 90.0 LocalVariableDeclaration BasicType double VariableDeclarator lon_interval ArrayInitializer Literal - 180.0 Literal 180.0 LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator geohash ClassCreator ReferenceType StringBuilder LocalVariableDeclaration BasicType boolean VariableDeclarator is_even Literal true LocalVariableDeclaration BasicType int VariableDeclarator bit Literal 0 VariableDeclarator ch Literal 0 WhileStatement BinaryOperation < MethodInvocation geohash length MemberReference precision BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator mid Literal 0.0 IfStatement MemberReference is_even BlockStatement StatementExpression Assignment MemberReference mid BinaryOperation / BinaryOperation + MemberReference ArraySelector Literal 0 lon_interval MemberReference ArraySelector Literal 1 lon_interval Literal 2 = IfStatement BinaryOperation > MemberReference longitude MemberReference mid BlockStatement StatementExpression Assignment MemberReference ch MemberReference ArraySelector MemberReference bit bits |= StatementExpression Assignment MemberReference ArraySelector Literal 0 lon_interval MemberReference mid = BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 1 lon_interval MemberReference mid = End BlockStatement StatementExpression Assignment MemberReference mid BinaryOperation / BinaryOperation + MemberReference ArraySelector Literal 0 lat_interval MemberReference ArraySelector Literal 1 lat_interval Literal 2 = IfStatement BinaryOperation > MemberReference latitude MemberReference mid BlockStatement StatementExpression Assignment MemberReference ch MemberReference ArraySelector MemberReference bit bits |= StatementExpression Assignment MemberReference ArraySelector Literal 0 lat_interval MemberReference mid = BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 1 lat_interval MemberReference mid = End End StatementExpression Assignment MemberReference is_even TernaryExpression MemberReference is_even Literal false Literal true = IfStatement BinaryOperation < MemberReference bit Literal 4 BlockStatement StatementExpression MemberReference ++ bit BlockStatement StatementExpression MethodInvocation geohash MemberReference ArraySelector MemberReference ch _base32 append StatementExpression Assignment MemberReference bit Literal 0 = StatementExpression Assignment MemberReference ch Literal 0 = End End ReturnStatement MethodInvocation geohash toString MethodDeclaration Modifier public static BasicType double decode FormalParameter ReferenceType String geohash LocalVariableDeclaration BasicType double VariableDeclarator ge MethodInvocation MemberReference geohash decode_exactly LocalVariableDeclaration BasicType double VariableDeclarator lat VariableDeclarator lon VariableDeclarator lat_err VariableDeclarator lon_err StatementExpression Assignment MemberReference lat MemberReference ArraySelector Literal 0 ge = StatementExpression Assignment MemberReference lon MemberReference ArraySelector Literal 1 ge = StatementExpression Assignment MemberReference lat_err MemberReference ArraySelector Literal 2 ge = StatementExpression Assignment MemberReference lon_err MemberReference ArraySelector Literal 3 ge = LocalVariableDeclaration BasicType double VariableDeclarator lat_precision BinaryOperation - MethodInvocation Math Literal 1 MethodInvocation Math MethodInvocation - Math MemberReference lat_err log10 round max Literal 1 LocalVariableDeclaration BasicType double VariableDeclarator lon_precision BinaryOperation - MethodInvocation Math Literal 1 MethodInvocation Math MethodInvocation - Math MemberReference lon_err log10 round max Literal 1 StatementExpression Assignment MemberReference lat MethodInvocation MemberReference lat MemberReference lat_precision getPrecision = StatementExpression Assignment MemberReference lon MethodInvocation MemberReference lon MemberReference lon_precision getPrecision = ReturnStatement ArrayCreator BasicType double ArrayInitializer MemberReference lat MemberReference lon MethodDeclaration Modifier public static BasicType double decode_exactly FormalParameter ReferenceType String geohash LocalVariableDeclaration BasicType double VariableDeclarator lat_interval ArrayInitializer Literal - 90.0 Literal 90.0 LocalVariableDeclaration BasicType double VariableDeclarator lon_interval ArrayInitializer Literal - 180.0 Literal 180.0 LocalVariableDeclaration BasicType double VariableDeclarator lat_err Literal 90.0 LocalVariableDeclaration BasicType double VariableDeclarator lon_err Literal 180.0 LocalVariableDeclaration BasicType boolean VariableDeclarator is_even Literal true LocalVariableDeclaration BasicType int VariableDeclarator sz MethodInvocation geohash length LocalVariableDeclaration BasicType int VariableDeclarator bsz MemberReference bits length LocalVariableDeclaration BasicType double VariableDeclarator latitude VariableDeclarator longitude ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sz MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator cd MethodInvocation _decodemap MethodInvocation geohash MemberReference i charAt get ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator z Literal 0 BinaryOperation < MemberReference z MemberReference bsz MemberReference ++ z BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator mask MemberReference ArraySelector MemberReference z bits IfStatement MemberReference is_even BlockStatement StatementExpression Assignment MemberReference lon_err Literal 2 /= IfStatement BinaryOperation != BinaryOperation & MemberReference cd MemberReference mask Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 0 lon_interval BinaryOperation / BinaryOperation + MemberReference ArraySelector Literal 0 lon_interval MemberReference ArraySelector Literal 1 lon_interval Literal 2 = BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 1 lon_interval BinaryOperation / BinaryOperation + MemberReference ArraySelector Literal 0 lon_interval MemberReference ArraySelector Literal 1 lon_interval Literal 2 = End BlockStatement StatementExpression Assignment MemberReference lat_err Literal 2 /= IfStatement BinaryOperation != BinaryOperation & MemberReference cd MemberReference mask Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 0 lat_interval BinaryOperation / BinaryOperation + MemberReference ArraySelector Literal 0 lat_interval MemberReference ArraySelector Literal 1 lat_interval Literal 2 = BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 1 lat_interval BinaryOperation / BinaryOperation + MemberReference ArraySelector Literal 0 lat_interval MemberReference ArraySelector Literal 1 lat_interval Literal 2 = End End StatementExpression Assignment MemberReference is_even TernaryExpression MemberReference is_even Literal false Literal true = End End StatementExpression Assignment MemberReference latitude BinaryOperation / BinaryOperation + MemberReference ArraySelector Literal 0 lat_interval MemberReference ArraySelector Literal 1 lat_interval Literal 2 = StatementExpression Assignment MemberReference longitude BinaryOperation / BinaryOperation + MemberReference ArraySelector Literal 0 lon_interval MemberReference ArraySelector Literal 1 lon_interval Literal 2 = ReturnStatement ArrayCreator BasicType double ArrayInitializer MemberReference latitude MemberReference longitude MemberReference lat_err MemberReference lon_err MethodDeclaration Modifier static BasicType double getPrecision FormalParameter BasicType double x FormalParameter BasicType double precision LocalVariableDeclaration BasicType double VariableDeclarator base MethodInvocation Math Literal 10 MemberReference - precision pow LocalVariableDeclaration BasicType double VariableDeclarator diff BinaryOperation % MemberReference x MemberReference base ReturnStatement BinaryOperation - MemberReference x MemberReference diff",1
906,906,,0
575,575,,1
527,527,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier abstract FormatPostingsPositionsConsumer MethodDeclaration /** Add a new position & payload.  If payloadLength > 0
   *  you must read those bytes from the IndexInput. */ Modifier abstract addPosition FormalParameter BasicType int position FormalParameter BasicType byte payload FormalParameter BasicType int payloadOffset FormalParameter BasicType int payloadLength IOException MethodDeclaration /** Called when we are done adding positions & payloads */ Modifier abstract finish IOException",0
85,85,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor Import org.apache.lucene.util.Attribute InterfaceDeclaration Modifier public /**
 * This attribute is used by {@link GroupQueryNodeProcessor} processor and must
 * be defined in the {@link QueryConfigHandler}. This attribute tells the
 * processor which is the default boolean operator when no operator is defined
 * between terms. <br/>
 *
 */ DefaultOperatorAttribute EnumDeclaration Modifier public static Operator EnumBody EnumConstantDeclaration AND EnumConstantDeclaration OR MethodDeclaration Modifier public setOperator FormalParameter ReferenceType Operator operator MethodDeclaration Modifier public ReferenceType Operator getOperator ReferenceType Attribute",0
118,118,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.BufferedReader Import java.io.File Import java.io.FileReader Import java.io.IOException Import java.io.Reader Import java.util.HashMap Import java.util.HashSet ClassDeclaration Modifier public /**
 * Loader for text files that represent a list of stopwords.
 */ WordlistLoader MethodDeclaration /**
   * Loads a text file and adds every line as an entry to a HashSet (omitting
   * leading and trailing whitespace). Every line of the file should contain only
   * one word. The words need to be in lowercase if you make use of an
   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
   *
   * @param wordfile File containing the wordlist
   * @return A HashSet with the file's words
   */ Modifier public static ReferenceType HashSet TypeArgument ReferenceType String getWordSet FormalParameter ReferenceType File wordfile IOException LocalVariableDeclaration ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType HashSet TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType FileReader VariableDeclarator reader Literal null TryStatement StatementExpression Assignment MemberReference reader ClassCreator ReferenceType FileReader MemberReference wordfile = StatementExpression Assignment MemberReference result MethodInvocation MemberReference reader getWordSet = IfStatement BinaryOperation != MemberReference reader Literal null StatementExpression MethodInvocation reader close End ReturnStatement MemberReference result MethodDeclaration /**
   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting
   * leading and trailing whitespace). Every line of the file should contain only
   * one word. The words need to be in lowercase if you make use of an
   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
   *
   * @param wordfile File containing the wordlist
   * @param comment The comment string to ignore
   * @return A HashSet with the file's words
   */ Modifier public static ReferenceType HashSet TypeArgument ReferenceType String getWordSet FormalParameter ReferenceType File wordfile FormalParameter ReferenceType String comment IOException LocalVariableDeclaration ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType HashSet TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType FileReader VariableDeclarator reader Literal null TryStatement StatementExpression Assignment MemberReference reader ClassCreator ReferenceType FileReader MemberReference wordfile = StatementExpression Assignment MemberReference result MethodInvocation MemberReference reader MemberReference comment getWordSet = IfStatement BinaryOperation != MemberReference reader Literal null StatementExpression MethodInvocation reader close End ReturnStatement MemberReference result MethodDeclaration /**
   * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting
   * leading and trailing whitespace). Every line of the Reader should contain only
   * one word. The words need to be in lowercase if you make use of an
   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
   *
   * @param reader Reader containing the wordlist
   * @return A HashSet with the reader's words
   */ Modifier public static ReferenceType HashSet TypeArgument ReferenceType String getWordSet FormalParameter ReferenceType Reader reader IOException LocalVariableDeclaration ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType HashSet TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br Literal null TryStatement IfStatement BinaryOperation instanceof MemberReference reader ReferenceType BufferedReader BlockStatement StatementExpression Assignment MemberReference br Cast ReferenceType BufferedReader MemberReference reader = BlockStatement StatementExpression Assignment MemberReference br ClassCreator ReferenceType BufferedReader MemberReference reader = End LocalVariableDeclaration ReferenceType String VariableDeclarator word Literal null WhileStatement BinaryOperation != Assignment MemberReference word MethodInvocation br readLine = Literal null BlockStatement StatementExpression MethodInvocation result MethodInvocation word trim add End IfStatement BinaryOperation != MemberReference br Literal null StatementExpression MethodInvocation br close End ReturnStatement MemberReference result MethodDeclaration /**
   * Reads lines from a Reader and adds every non-comment line as an entry to a HashSet (omitting
   * leading and trailing whitespace). Every line of the Reader should contain only
   * one word. The words need to be in lowercase if you make use of an
   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
   *
   * @param reader Reader containing the wordlist
   * @param comment The string representing a comment.
   * @return A HashSet with the reader's words
   */ Modifier public static ReferenceType HashSet TypeArgument ReferenceType String getWordSet FormalParameter ReferenceType Reader reader FormalParameter ReferenceType String comment IOException LocalVariableDeclaration ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType HashSet TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br Literal null TryStatement IfStatement BinaryOperation instanceof MemberReference reader ReferenceType BufferedReader BlockStatement StatementExpression Assignment MemberReference br Cast ReferenceType BufferedReader MemberReference reader = BlockStatement StatementExpression Assignment MemberReference br ClassCreator ReferenceType BufferedReader MemberReference reader = End LocalVariableDeclaration ReferenceType String VariableDeclarator word Literal null WhileStatement BinaryOperation != Assignment MemberReference word MethodInvocation br readLine = Literal null BlockStatement IfStatement BinaryOperation == MethodInvocation word MemberReference comment startsWith Literal false BlockStatement StatementExpression MethodInvocation result MethodInvocation word trim add End End IfStatement BinaryOperation != MemberReference br Literal null StatementExpression MethodInvocation br close End ReturnStatement MemberReference result MethodDeclaration /**
   * Reads a stem dictionary. Each line contains:
   * <pre>word<b>\t</b>stem</pre>
   * (i.e. two tab seperated words)
   *
   * @return stem dictionary that overrules the stemming algorithm
   * @throws IOException 
   */ Modifier public static ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String getStemDict FormalParameter ReferenceType File wordstemfile IOException IfStatement BinaryOperation == MemberReference wordstemfile Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""wordstemfile may not be null"" End LocalVariableDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br Literal null LocalVariableDeclaration ReferenceType FileReader VariableDeclarator fr Literal null TryStatement StatementExpression Assignment MemberReference fr ClassCreator ReferenceType FileReader MemberReference wordstemfile = StatementExpression Assignment MemberReference br ClassCreator ReferenceType BufferedReader MemberReference fr = LocalVariableDeclaration ReferenceType String VariableDeclarator line WhileStatement BinaryOperation != Assignment MemberReference line MethodInvocation br readLine = Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator wordstem MethodInvocation line Literal ""\t"" Literal 2 split StatementExpression MethodInvocation result MemberReference ArraySelector Literal 0 wordstem MemberReference ArraySelector Literal 1 wordstem put End IfStatement BinaryOperation != MemberReference fr Literal null StatementExpression MethodInvocation fr close End IfStatement BinaryOperation != MemberReference br Literal null StatementExpression MethodInvocation br close End ReturnStatement MemberReference result",0
471,471,"CompilationUnit PackageDeclaration org.apache.lucene.wordnet Import java.io.IOException Import java.io.InputStream Import java.nio.ByteBuffer Import java.nio.charset.Charset Import java.util.ArrayList Import java.util.Arrays Import java.util.HashMap Import java.util.Iterator Import java.util.Map Import java.util.TreeMap Import java.util.TreeSet ClassDeclaration Modifier public /**
 * Loads the <a target=""_blank"" 
 * href=""http://www.cogsci.princeton.edu/~wn/"">WordNet </a> prolog file <a
 * href=""http://www.cogsci.princeton.edu/2.0/WNprolog-2.0.tar.gz"">wn_s.pl </a>
 * into a thread-safe main-memory hash map that can be used for fast
 * high-frequency lookups of synonyms for any given (lowercase) word string.
 * <p>
 * There holds: If B is a synonym for A (A -> B) then A is also a synonym for B (B -> A).
 * There does not necessarily hold: A -> B, B -> C then A -> C.
 * <p>
 * Loading typically takes some 1.5 secs, so should be done only once per
 * (server) program execution, using a singleton pattern. Once loaded, a
 * synonym lookup via {@link #getSynonyms(String)}takes constant time O(1).
 * A loaded default synonym map consumes about 10 MB main memory.
 * An instance is immutable, hence thread-safe.
 * <p>
 * This implementation borrows some ideas from the Lucene Syns2Index demo that 
 * Dave Spencer originally contributed to Lucene. Dave's approach
 * involved a persistent Lucene index which is suitable for occasional
 * lookups or very large synonym tables, but considered unsuitable for 
 * high-frequency lookups of medium size synonym tables.
 * <p>
 * Example Usage:
 * <pre>
 * String[] words = new String[] { ""hard"", ""woods"", ""forest"", ""wolfish"", ""xxxx""};
 * SynonymMap map = new SynonymMap(new FileInputStream(""samples/fulltext/wn_s.pl""));
 * for (int i = 0; i &lt; words.length; i++) {
 *     String[] synonyms = map.getSynonyms(words[i]);
 *     System.out.println(words[i] + "":"" + java.util.Arrays.asList(synonyms).toString());
 * }
 * 
 * Example output:
 * hard:[arduous, backbreaking, difficult, fermented, firmly, grueling, gruelling, heavily, heavy, intemperately, knockout, laborious, punishing, severe, severely, strong, toilsome, tough]
 * woods:[forest, wood]
 * forest:[afforest, timber, timberland, wood, woodland, woods]
 * wolfish:[edacious, esurient, rapacious, ravening, ravenous, voracious, wolflike]
 * xxxx:[]
 * </pre>
 *
 * @see <a target=""_blank""
 *      href=""http://www.cogsci.princeton.edu/~wn/man/prologdb.5WN.html"">prologdb
 *      man page </a>
 * @see <a target=""_blank"" href=""http://www.hostmon.com/rfc/advanced.jsp"">Dave's synonym demo site</a>
 */ SynonymMap FieldDeclaration /** the index data; Map<String word, String[] synonyms> */ Modifier private final ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator table FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator EMPTY ArrayCreator ReferenceType String Literal 0 FieldDeclaration Modifier private final static BasicType boolean VariableDeclarator DEBUG Literal false ConstructorDeclaration Modifier public /**
   * Constructs an instance, loading WordNet synonym data from the given input
   * stream. Finally closes the stream. The words in the stream must be in
   * UTF-8 or a compatible subset (for example ASCII, MacRoman, etc.).
   * 
   * @param input
   *            the stream to read from (null indicates an empty synonym map)
   * @throws IOException
   *             if an error occured while reading the stream.
   */ SynonymMap FormalParameter ReferenceType InputStream input IOException StatementExpression Assignment This MemberReference table TernaryExpression BinaryOperation == MemberReference input Literal null ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String Literal 0 MethodInvocation MethodInvocation MemberReference input toByteArray read = MethodDeclaration /**
   * Returns the synonym set for the given word, sorted ascending.
   * 
   * @param word
   *            the word to lookup (must be in lowercase).
   * @return the synonyms; a set of zero or more words, sorted ascending, each
   *         word containing lowercase characters that satisfy
   *         <code>Character.isLetter()</code>.
   */ Modifier public ReferenceType String getSynonyms FormalParameter ReferenceType String word LocalVariableDeclaration ReferenceType String VariableDeclarator synonyms MethodInvocation table MemberReference word get IfStatement BinaryOperation == MemberReference synonyms Literal null ReturnStatement MemberReference EMPTY End LocalVariableDeclaration ReferenceType String VariableDeclarator copy ArrayCreator ReferenceType String MemberReference synonyms length StatementExpression MethodInvocation System MemberReference synonyms Literal 0 MemberReference copy Literal 0 MemberReference synonyms length arraycopy ReturnStatement MemberReference copy MethodDeclaration /**
   * Returns a String representation of the index data for debugging purposes.
   * 
   * @return a String representation
   */ Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buf ClassCreator ReferenceType StringBuilder LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType String VariableDeclarator iter ClassCreator MethodInvocation keySet MethodInvocation iterator ReferenceType TreeMap TypeArgument ReferenceType String TypeArgument ReferenceType String MemberReference table LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator f0 Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator f1 Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator f2 Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator f3 Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator word MethodInvocation iter next StatementExpression MethodInvocation buf BinaryOperation + MemberReference word Literal "":"" append LocalVariableDeclaration ReferenceType String VariableDeclarator synonyms MethodInvocation MemberReference word getSynonyms StatementExpression MethodInvocation buf MethodInvocation Arrays MemberReference synonyms asList append StatementExpression MethodInvocation buf Literal ""\n"" append StatementExpression Assignment MemberReference count MemberReference synonyms length += IfStatement BinaryOperation == MemberReference synonyms length Literal 0 StatementExpression MemberReference ++ f0 End IfStatement BinaryOperation == MemberReference synonyms length Literal 1 StatementExpression MemberReference ++ f1 End IfStatement BinaryOperation == MemberReference synonyms length Literal 2 StatementExpression MemberReference ++ f2 End IfStatement BinaryOperation == MemberReference synonyms length Literal 3 StatementExpression MemberReference ++ f3 End End StatementExpression MethodInvocation buf BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\n\nkeys="" MethodInvocation table size Literal "", synonyms="" MemberReference count Literal "", f0="" MemberReference f0 Literal "", f1="" MemberReference f1 Literal "", f2="" MemberReference f2 Literal "", f3="" MemberReference f3 append ReturnStatement MethodInvocation buf toString MethodDeclaration /**
   * Analyzes/transforms the given word on input stream loading. This default implementation simply
   * lowercases the word. Override this method with a custom stemming
   * algorithm or similar, if desired.
   * 
   * @param word
   *            the word to analyze
   * @return the same word, or a different word (or null to indicate that the
   *         word should be ignored)
   */ Modifier protected ReferenceType String analyze FormalParameter ReferenceType String word ReturnStatement MethodInvocation word toLowerCase MethodDeclaration Modifier private static BasicType boolean isValid FormalParameter ReferenceType String str ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MethodInvocation str length BinaryOperation >= MemberReference -- i Literal 0 BlockStatement IfStatement MethodInvocation ! Character MethodInvocation str MemberReference i charAt isLetter ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String read FormalParameter BasicType byte data LocalVariableDeclaration BasicType int VariableDeclarator WORDS Cast BasicType int BinaryOperation / Literal 76401 Literal 0.7 LocalVariableDeclaration BasicType int VariableDeclarator GROUPS Cast BasicType int BinaryOperation / Literal 88022 Literal 0.7 LocalVariableDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType ArrayList TypeArgument ReferenceType Integer VariableDeclarator word2Groups ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType ArrayList TypeArgument ReferenceType Integer MemberReference WORDS LocalVariableDeclaration ReferenceType HashMap TypeArgument ReferenceType Integer TypeArgument ReferenceType ArrayList TypeArgument ReferenceType String VariableDeclarator group2Words ClassCreator ReferenceType HashMap TypeArgument ReferenceType Integer TypeArgument ReferenceType ArrayList TypeArgument ReferenceType String MemberReference GROUPS LocalVariableDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator internedWords ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String MemberReference WORDS LocalVariableDeclaration ReferenceType Charset VariableDeclarator charset MethodInvocation Charset Literal ""UTF-8"" forName LocalVariableDeclaration BasicType int VariableDeclarator lastNum Literal - 1 LocalVariableDeclaration ReferenceType Integer VariableDeclarator lastGroup Literal null LocalVariableDeclaration BasicType int VariableDeclarator len MemberReference data length LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 WhileStatement BinaryOperation < MemberReference i MemberReference len BlockStatement WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference len BinaryOperation != MemberReference ArraySelector MemberReference i data Literal '(' StatementExpression MemberReference ++ i End IfStatement BinaryOperation >= MemberReference i MemberReference len BreakStatement End StatementExpression MemberReference ++ i LocalVariableDeclaration BasicType int VariableDeclarator num Literal 0 WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference len BinaryOperation != MemberReference ArraySelector MemberReference i data Literal ',' BlockStatement StatementExpression Assignment MemberReference num BinaryOperation + BinaryOperation * Literal 10 MemberReference num BinaryOperation - MemberReference ArraySelector MemberReference i data Literal 48 = StatementExpression MemberReference ++ i End StatementExpression MemberReference ++ i WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference len BinaryOperation != MemberReference ArraySelector MemberReference i data Literal '\'' StatementExpression MemberReference ++ i End StatementExpression MemberReference ++ i LocalVariableDeclaration BasicType int VariableDeclarator start MemberReference i DoStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference len BinaryOperation != MemberReference ArraySelector MemberReference i data Literal ',' BlockStatement WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference len BinaryOperation != MemberReference ArraySelector MemberReference i data Literal '\'' StatementExpression MemberReference ++ i End StatementExpression MemberReference ++ i End IfStatement BinaryOperation >= MemberReference i MemberReference len BreakStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator word MethodInvocation charset MethodInvocation toString MethodInvocation ByteBuffer MemberReference data MemberReference start BinaryOperation - BinaryOperation - MemberReference i MemberReference start Literal 1 wrap decode IfStatement MethodInvocation ! MemberReference word isValid ContinueStatement End StatementExpression Assignment MemberReference word MethodInvocation MemberReference word analyze = IfStatement BinaryOperation || BinaryOperation == MemberReference word Literal null BinaryOperation == MethodInvocation word length Literal 0 ContinueStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator w MethodInvocation internedWords MemberReference word get IfStatement BinaryOperation == MemberReference w Literal null BlockStatement StatementExpression Assignment MemberReference word ClassCreator ReferenceType String MemberReference word = StatementExpression MethodInvocation internedWords MemberReference word MemberReference word put BlockStatement StatementExpression Assignment MemberReference word MemberReference w = End LocalVariableDeclaration ReferenceType Integer VariableDeclarator group MemberReference lastGroup IfStatement BinaryOperation != MemberReference num MemberReference lastNum BlockStatement StatementExpression Assignment MemberReference group MethodInvocation Integer MemberReference num valueOf = StatementExpression Assignment MemberReference lastGroup MemberReference group = StatementExpression Assignment MemberReference lastNum MemberReference num = End LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType Integer VariableDeclarator groups MethodInvocation word2Groups MemberReference word get IfStatement BinaryOperation == MemberReference groups Literal null BlockStatement StatementExpression Assignment MemberReference groups ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Integer Literal 1 = StatementExpression MethodInvocation word2Groups MemberReference word MemberReference groups put End StatementExpression MethodInvocation groups MemberReference group add LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType String VariableDeclarator words MethodInvocation group2Words MemberReference group get IfStatement BinaryOperation == MemberReference words Literal null BlockStatement StatementExpression Assignment MemberReference words ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String Literal 1 = StatementExpression MethodInvocation group2Words MemberReference group MemberReference words put End StatementExpression MethodInvocation words MemberReference word add End LocalVariableDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator word2Syns MethodInvocation MemberReference word2Groups MemberReference group2Words createIndex StatementExpression Assignment MemberReference word2Groups Literal null = StatementExpression Assignment MemberReference group2Words Literal null = ReturnStatement MethodInvocation MemberReference word2Syns MemberReference internedWords optimize MethodDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String createIndex FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType ArrayList TypeArgument ReferenceType Integer word2Groups FormalParameter ReferenceType Map TypeArgument ReferenceType Integer TypeArgument ReferenceType ArrayList TypeArgument ReferenceType String group2Words LocalVariableDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator word2Syns ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Map ReferenceType Entry TypeArgument ReferenceType String TypeArgument ReferenceType ArrayList TypeArgument ReferenceType Integer VariableDeclarator entry MethodInvocation word2Groups entrySet BlockStatement LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType Integer VariableDeclarator group MethodInvocation entry getValue LocalVariableDeclaration ReferenceType String VariableDeclarator word MethodInvocation entry getKey LocalVariableDeclaration ReferenceType TreeSet TypeArgument ReferenceType String VariableDeclarator synonyms ClassCreator ReferenceType TreeSet TypeArgument ReferenceType String ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MethodInvocation group size BinaryOperation >= MemberReference -- i Literal 0 BlockStatement LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType String VariableDeclarator words MethodInvocation group2Words MethodInvocation group MemberReference i get get ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j MethodInvocation words size BinaryOperation >= MemberReference -- j Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator synonym MethodInvocation words MemberReference j get IfStatement BinaryOperation != MemberReference synonym MemberReference word BlockStatement StatementExpression MethodInvocation synonyms MemberReference synonym add End End End LocalVariableDeclaration BasicType int VariableDeclarator size MethodInvocation synonyms size IfStatement BinaryOperation > MemberReference size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator syns ArrayCreator ReferenceType String MemberReference size IfStatement BinaryOperation == MemberReference size Literal 1 StatementExpression Assignment MemberReference ArraySelector Literal 0 syns MethodInvocation synonyms first = StatementExpression MethodInvocation synonyms MemberReference syns toArray End StatementExpression MethodInvocation word2Syns MemberReference word MemberReference syns put End End ReturnStatement MemberReference word2Syns MethodDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String optimize FormalParameter ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String word2Syns FormalParameter ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String internedWords IfStatement MemberReference DEBUG BlockStatement StatementExpression MethodInvocation System.err Literal ""before gc"" println ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 10 MemberReference ++ i StatementExpression MethodInvocation System gc End StatementExpression MethodInvocation System.err Literal ""after gc"" println End LocalVariableDeclaration BasicType int VariableDeclarator len Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator size MethodInvocation word2Syns size LocalVariableDeclaration ReferenceType String VariableDeclarator allSynonyms ArrayCreator ReferenceType String MemberReference size LocalVariableDeclaration ReferenceType String VariableDeclarator words ArrayCreator ReferenceType String MemberReference size LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Map ReferenceType Entry TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator iter MethodInvocation word2Syns MethodInvocation iterator entrySet ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference size MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator entry MethodInvocation iter next StatementExpression Assignment MemberReference ArraySelector MemberReference j allSynonyms MethodInvocation entry getValue = StatementExpression Assignment MemberReference ArraySelector MemberReference j words MethodInvocation entry getKey = StatementExpression Assignment MemberReference len MemberReference ArraySelector MemberReference j MethodInvocation length words += End LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buf ClassCreator ReferenceType StringBuilder MemberReference len ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference size MemberReference ++ j StatementExpression MethodInvocation buf MemberReference ArraySelector MemberReference j words append End LocalVariableDeclaration ReferenceType String VariableDeclarator allWords ClassCreator ReferenceType String MethodInvocation buf toString StatementExpression Assignment MemberReference buf Literal null = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator p Literal 0 VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference size MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator word MemberReference ArraySelector MemberReference j words StatementExpression MethodInvocation internedWords MemberReference word MethodInvocation allWords MemberReference p BinaryOperation + MemberReference p MethodInvocation word length substring put StatementExpression Assignment MemberReference p MethodInvocation word length += End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference size MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator syns MemberReference ArraySelector MemberReference j allSynonyms ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator k MemberReference syns length BinaryOperation >= MemberReference -- k Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference k syns MethodInvocation internedWords MemberReference ArraySelector MemberReference k syns get = End StatementExpression MethodInvocation word2Syns MemberReference ArraySelector MemberReference j words remove StatementExpression MethodInvocation word2Syns MethodInvocation internedWords MemberReference ArraySelector MemberReference j words get MemberReference syns put End IfStatement MemberReference DEBUG BlockStatement StatementExpression Assignment MemberReference words Literal null = StatementExpression Assignment MemberReference allSynonyms Literal null = StatementExpression Assignment MemberReference internedWords Literal null = StatementExpression Assignment MemberReference allWords Literal null = StatementExpression MethodInvocation System.err Literal ""before gc"" println ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 10 MemberReference ++ i StatementExpression MethodInvocation System gc End StatementExpression MethodInvocation System.err Literal ""after gc"" println End ReturnStatement MemberReference word2Syns MethodDeclaration Modifier private static BasicType byte toByteArray FormalParameter ReferenceType InputStream input IOException TryStatement LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation Math Literal 256 MethodInvocation input available max LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte MemberReference len LocalVariableDeclaration BasicType byte VariableDeclarator output ArrayCreator BasicType byte MemberReference len StatementExpression Assignment MemberReference len Literal 0 = LocalVariableDeclaration BasicType int VariableDeclarator n WhileStatement BinaryOperation >= Assignment MemberReference n MethodInvocation input MemberReference buffer read = Literal 0 BlockStatement IfStatement BinaryOperation > BinaryOperation + MemberReference len MemberReference n MemberReference output length BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator tmp ArrayCreator BasicType byte MethodInvocation Math BinaryOperation << MemberReference output length Literal 1 BinaryOperation + MemberReference len MemberReference n max StatementExpression MethodInvocation System MemberReference output Literal 0 MemberReference tmp Literal 0 MemberReference len arraycopy StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference tmp MemberReference len MemberReference n arraycopy StatementExpression Assignment MemberReference buffer MemberReference output = StatementExpression Assignment MemberReference output MemberReference tmp = BlockStatement StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference output MemberReference len MemberReference n arraycopy End StatementExpression Assignment MemberReference len MemberReference n += End IfStatement BinaryOperation == MemberReference len MemberReference output length ReturnStatement MemberReference output End StatementExpression Assignment MemberReference buffer Literal null = StatementExpression Assignment MemberReference buffer ArrayCreator BasicType byte MemberReference len = StatementExpression MethodInvocation System MemberReference output Literal 0 MemberReference buffer Literal 0 MemberReference len arraycopy ReturnStatement MemberReference buffer IfStatement BinaryOperation != MemberReference input Literal null StatementExpression MethodInvocation input close End",0
594,594,,1
571,571,,0
727,727,,0
425,425,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geometry ClassDeclaration Modifier public /**
 * Represents lat/lngs as fixed point numbers translated so that all
 * world coordinates are in the first quadrant.  The same fixed point
 * scale as is used for FixedLatLng is employed.
 *
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ CartesianPoint FieldDeclaration Modifier private BasicType int VariableDeclarator x FieldDeclaration Modifier private BasicType int VariableDeclarator y ConstructorDeclaration Modifier public CartesianPoint FormalParameter BasicType int x FormalParameter BasicType int y StatementExpression Assignment This MemberReference x MemberReference x = StatementExpression Assignment This MemberReference y MemberReference y = MethodDeclaration Modifier public BasicType int getX ReturnStatement MemberReference x MethodDeclaration Modifier public BasicType int getY ReturnStatement MemberReference y MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Point("" MemberReference x Literal "","" MemberReference y Literal "")"" MethodDeclaration /**
   * Return a new point translated in the x and y dimensions
   */ Modifier public ReferenceType CartesianPoint translate FormalParameter BasicType int deltaX FormalParameter BasicType int deltaY ReturnStatement ClassCreator ReferenceType CartesianPoint BinaryOperation + This MemberReference x MemberReference deltaX BinaryOperation + This MemberReference y MemberReference deltaY MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result Literal 1 StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result MemberReference x = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result MemberReference y = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference obj Literal null ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType CartesianPoint VariableDeclarator other Cast ReferenceType CartesianPoint MemberReference obj IfStatement BinaryOperation != MemberReference x MemberReference other x ReturnStatement Literal false End IfStatement BinaryOperation != MemberReference y MemberReference other y ReturnStatement Literal false End ReturnStatement Literal true",0
779,779,,1
20,20,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.tier.projections ClassDeclaration Modifier public /**
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ CartesianTierPlotter FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator DEFALT_FIELD_PREFIX Literal ""_tier_"" FieldDeclaration Modifier final BasicType int VariableDeclarator tierLevel FieldDeclaration BasicType int VariableDeclarator tierLength FieldDeclaration BasicType int VariableDeclarator tierBoxes FieldDeclaration BasicType int VariableDeclarator tierVerticalPosDivider FieldDeclaration Modifier final ReferenceType IProjector VariableDeclarator projector FieldDeclaration Modifier final ReferenceType String VariableDeclarator fieldPrefix FieldDeclaration ReferenceType Double VariableDeclarator idd MethodInvocation Double Literal 180 valueOf ConstructorDeclaration Modifier public CartesianTierPlotter FormalParameter BasicType int tierLevel FormalParameter ReferenceType IProjector projector FormalParameter ReferenceType String fieldPrefix StatementExpression Assignment This MemberReference tierLevel MemberReference tierLevel = StatementExpression Assignment This MemberReference projector MemberReference projector = StatementExpression Assignment This MemberReference fieldPrefix MemberReference fieldPrefix = StatementExpression MethodInvocation setTierLength StatementExpression MethodInvocation setTierBoxes StatementExpression MethodInvocation setTierVerticalPosDivider MethodDeclaration Modifier private setTierLength StatementExpression Assignment This MemberReference tierLength Cast BasicType int MethodInvocation Math Literal 2 This MemberReference tierLevel pow = MethodDeclaration Modifier private setTierBoxes StatementExpression Assignment This MemberReference tierBoxes Cast BasicType int MethodInvocation Math This MemberReference tierLength Literal 2 pow = MethodDeclaration /**
   * Get nearest max power of 10 greater than
   * the tierlen
   * e.g
   * tierId of 13 has tierLen 8192
   * nearest max power of 10 greater than tierLen 
   * would be 10,000
   */ Modifier private setTierVerticalPosDivider StatementExpression Assignment MemberReference tierVerticalPosDivider MethodInvocation Double MethodInvocation intValue MethodInvocation Math MethodInvocation Math MethodInvocation Integer MethodInvocation doubleValue This MemberReference tierLength valueOf log10 ceil valueOf = StatementExpression Assignment MemberReference tierVerticalPosDivider Cast BasicType int MethodInvocation Math Literal 10 MemberReference tierVerticalPosDivider pow = MethodDeclaration Modifier public BasicType double getTierVerticalPosDivider ReturnStatement MemberReference tierVerticalPosDivider MethodDeclaration /**
   * TierBoxId is latitude box id + longitude box id
   * where latitude box id, and longitude box id are transposed in to position
   * coordinates.
   * 
   * @param latitude
   * @param longitude
   */ Modifier public BasicType double getTierBoxId FormalParameter BasicType double latitude FormalParameter BasicType double longitude LocalVariableDeclaration BasicType double VariableDeclarator coords MethodInvocation projector MemberReference latitude MemberReference longitude coords LocalVariableDeclaration BasicType double VariableDeclarator id BinaryOperation + MethodInvocation MemberReference ArraySelector Literal 0 coords getBoxId BinaryOperation / MethodInvocation MemberReference ArraySelector Literal 1 coords getBoxId MemberReference tierVerticalPosDivider ReturnStatement MemberReference id MethodDeclaration Modifier private BasicType double getBoxId FormalParameter BasicType double coord ReturnStatement MethodInvocation Math BinaryOperation / MemberReference coord BinaryOperation / MemberReference idd This MemberReference tierLength floor MethodDeclaration Modifier private Annotation SuppressWarnings Literal ""unused"" BasicType double getBoxId FormalParameter BasicType double coord FormalParameter BasicType int tierLen ReturnStatement MethodInvocation Math BinaryOperation / MemberReference coord BinaryOperation / MemberReference idd MemberReference tierLen floor MethodDeclaration /**
   * get the string name representing current tier
   * _localTier&lt;tiedId&gt;
   */ Modifier public ReferenceType String getTierFieldName ReturnStatement BinaryOperation + MemberReference fieldPrefix This MemberReference tierLevel MethodDeclaration /**
   * get the string name representing tierId
   * _localTier&lt;tierId&gt;
   * @param tierId
   */ Modifier public ReferenceType String getTierFieldName FormalParameter BasicType int tierId ReturnStatement BinaryOperation + MemberReference fieldPrefix MemberReference tierId MethodDeclaration /**
   * Find the tier with the best fit for a bounding box
   * Best fit is defined as the ceiling of
   *  log2 (circumference of earth / distance) 
   *  distance is defined as the smallest box fitting
   *  the corner between a radius and a bounding box.
   *  
   *  Distances less than a mile return 15, finer granularity is
   *  in accurate
   */ Modifier public BasicType int bestFit FormalParameter BasicType double miles LocalVariableDeclaration BasicType int VariableDeclarator circ Literal 28892 LocalVariableDeclaration BasicType double VariableDeclarator r BinaryOperation / MemberReference miles Literal 2.0 LocalVariableDeclaration BasicType double VariableDeclarator corner BinaryOperation - MemberReference r MethodInvocation Math BinaryOperation / MethodInvocation Math MemberReference r Literal 2 pow Literal 2.0d sqrt LocalVariableDeclaration BasicType double VariableDeclarator times BinaryOperation / MemberReference circ MemberReference corner LocalVariableDeclaration BasicType int VariableDeclarator bestFit BinaryOperation + Cast BasicType int MethodInvocation Math MethodInvocation MemberReference times log2 ceil Literal 1 IfStatement BinaryOperation > MemberReference bestFit Literal 15 BlockStatement ReturnStatement Literal 15 End ReturnStatement MemberReference bestFit MethodDeclaration /**
   * a log to the base 2 formula
   * <code>Math.log(value) / Math.log(2)</code>
   * @param value
   */ Modifier public BasicType double log2 FormalParameter BasicType double value ReturnStatement BinaryOperation / MethodInvocation Math MemberReference value log MethodInvocation Math Literal 2 log",0
726,726,,1
922,922,,0
478,478,"CompilationUnit PackageDeclaration org.apache.lucene.store.instantiated Import java.io.IOException Import java.io.PrintStream Import java.io.StringReader Import java.io.Closeable Import java.util.ArrayList Import java.util.Arrays Import java.util.Collections Import java.util.Comparator Import java.util.HashMap Import java.util.HashSet Import java.util.Iterator Import java.util.LinkedHashMap Import java.util.LinkedList Import java.util.List Import java.util.Map Import java.util.Set Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.document.Document Import org.apache.lucene.document.Field Import org.apache.lucene.document.Fieldable Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermVectorOffsetInfo Import org.apache.lucene.search.DefaultSimilarity Import org.apache.lucene.search.Similarity Import org.apache.lucene.util.StringHelper Import org.apache.lucene.util.AttributeImpl ClassDeclaration Modifier public /**
 * This class, similar to {@link org.apache.lucene.index.IndexWriter}, has no locking mechanism.
 * <p>
 * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader} is navigating
 * the same instances in memory as this writer is updating so searchers active while
 * you are committing are bound to throw exceptions.
 * <p>
 * Consider using InstantiatedIndex as if it was immutable.
 *
 * @see org.apache.lucene.index.IndexWriter 
 */ InstantiatedIndexWriter FieldDeclaration Modifier private ReferenceType PrintStream VariableDeclarator infoStream Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator maxFieldLength MemberReference IndexWriter DEFAULT_MAX_FIELD_LENGTH FieldDeclaration Modifier private final ReferenceType InstantiatedIndex VariableDeclarator index FieldDeclaration Modifier private final ReferenceType Analyzer VariableDeclarator analyzer FieldDeclaration Modifier private ReferenceType Similarity VariableDeclarator similarity MethodInvocation Similarity getDefault FieldDeclaration Modifier private transient ReferenceType Set TypeArgument ReferenceType String VariableDeclarator fieldNameBuffer FieldDeclaration /**
   * linked to ensure chronological order
   */ Modifier private ReferenceType Map TypeArgument ReferenceType InstantiatedDocument TypeArgument ReferenceType Map TypeArgument ReferenceType FieldSetting TypeArgument ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory VariableDeclarator termDocumentInformationFactoryByDocument ClassCreator ReferenceType LinkedHashMap TypeArgument ReferenceType InstantiatedDocument TypeArgument ReferenceType Map TypeArgument ReferenceType FieldSetting TypeArgument ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory Literal 2000 FieldDeclaration Modifier private ReferenceType Set TypeArgument ReferenceType InstantiatedDocument VariableDeclarator unflushedDocuments ClassCreator ReferenceType HashSet TypeArgument ReferenceType InstantiatedDocument ConstructorDeclaration Modifier public InstantiatedIndexWriter FormalParameter ReferenceType InstantiatedIndex index IOException StatementExpression ExplicitConstructorInvocation MemberReference index Literal null ConstructorDeclaration Modifier public InstantiatedIndexWriter FormalParameter ReferenceType InstantiatedIndex index FormalParameter ReferenceType Analyzer analyzer IOException StatementExpression ExplicitConstructorInvocation MemberReference index MemberReference analyzer Literal false ConstructorDeclaration Modifier public InstantiatedIndexWriter FormalParameter ReferenceType InstantiatedIndex index FormalParameter ReferenceType Analyzer analyzer FormalParameter BasicType boolean create IOException StatementExpression Assignment This MemberReference index MemberReference index = StatementExpression Assignment This MemberReference analyzer MemberReference analyzer = StatementExpression Assignment MemberReference fieldNameBuffer ClassCreator ReferenceType HashSet TypeArgument ReferenceType String = IfStatement MemberReference create BlockStatement StatementExpression This MemberReference index MethodInvocation initialize End FieldDeclaration Modifier private BasicType int VariableDeclarator mergeFactor Literal 2500 MethodDeclaration /**
   * The sweetspot for this implementation is somewhere around 2500 at 2K text large documents.
   * <p/>
   * Benchmark output:
   * <pre>
   *  ------------> Report sum by Prefix (MAddDocs) and Round (8 about 8 out of 160153)
   *  Operation      round  mrg buf cmpnd   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem
   *  MAddDocs_20000     0   10  10  true        1        20000         81,4      245,68   200 325 152    268 156 928
   *  MAddDocs_20000 -   1 1000  10  true -  -   1 -  -   20000 -  -   494,1 -  -  40,47 - 247 119 072 -  347 025 408
   *  MAddDocs_20000     2   10 100  true        1        20000        104,8      190,81   233 895 552    363 720 704
   *  MAddDocs_20000 -   3 2000 100  true -  -   1 -  -   20000 -  -   527,2 -  -  37,94 - 266 136 448 -  378 273 792
   *  MAddDocs_20000     4   10  10 false        1        20000        103,2      193,75   222 089 792    378 273 792
   *  MAddDocs_20000 -   5 3000  10 false -  -   1 -  -   20000 -  -   545,2 -  -  36,69 - 237 917 152 -  378 273 792
   *  MAddDocs_20000     6   10 100 false        1        20000        102,7      194,67   237 018 976    378 273 792
   *  MAddDocs_20000 -   7 4000 100 false -  -   1 -  -   20000 -  -   535,8 -  -  37,33 - 309 680 640 -  501 968 896
   * </pre>
   *
   * @see org.apache.lucene.index.IndexWriter#setMergeFactor(int)
   */ Modifier public setMergeFactor FormalParameter BasicType int mergeFactor StatementExpression Assignment This MemberReference mergeFactor MemberReference mergeFactor = MethodDeclaration /**
   * @see org.apache.lucene.index.IndexWriter#getMergeFactor()
   */ Modifier public BasicType int getMergeFactor ReturnStatement MemberReference mergeFactor MethodDeclaration /**
   * If non-null, information about merges and a message when
   * maxFieldLength is reached could be printed to this -- currently
   * not yet implemented.
   */ Modifier public setInfoStream FormalParameter ReferenceType PrintStream infoStream StatementExpression Assignment This MemberReference infoStream MemberReference infoStream = MethodDeclaration Modifier public abort IOException MethodDeclaration Modifier public addIndexes FormalParameter ReferenceType IndexReader readers ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Not implemented"" MethodDeclaration Modifier public ReferenceType PrintStream getInfoStream ReturnStatement MemberReference infoStream MethodDeclaration /**
   * Flushes all changes to an index and closes all associated files.
   */ Modifier public close IOException StatementExpression MethodInvocation commit MethodDeclaration /**
   * Returns the number of documents currently in this index.
   */ Modifier public BasicType int docCount ReturnStatement BinaryOperation + MethodInvocation index MemberReference length getDocumentsByNumber MethodInvocation unflushedDocuments size MethodDeclaration /**
   * Locks the index and commits the buffered documents.
   */ Modifier public commit IOException LocalVariableDeclaration BasicType boolean VariableDeclarator orderedTermsDirty Literal false LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType InstantiatedTerm VariableDeclarator dirtyTerms ClassCreator ReferenceType HashSet TypeArgument ReferenceType InstantiatedTerm Literal 1000 LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType FieldSetting VariableDeclarator fieldSettingsByFieldName ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType FieldSetting ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator fieldName MemberReference fieldNameBuffer BlockStatement StatementExpression MethodInvocation fieldSettingsByFieldName MemberReference fieldName ClassCreator ReferenceType FieldSetting MemberReference fieldName put End LocalVariableDeclaration ReferenceType InstantiatedDocument VariableDeclarator documentsByNumber ArrayCreator ReferenceType InstantiatedDocument BinaryOperation + MethodInvocation index MemberReference length getDocumentsByNumber MethodInvocation termDocumentInformationFactoryByDocument size StatementExpression MethodInvocation System MethodInvocation index getDocumentsByNumber Literal 0 MemberReference documentsByNumber Literal 0 MethodInvocation index MemberReference length getDocumentsByNumber arraycopy LocalVariableDeclaration BasicType int VariableDeclarator documentNumber MethodInvocation index MemberReference length getDocumentsByNumber LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType InstantiatedTerm VariableDeclarator orderedTerms ClassCreator ReferenceType ArrayList TypeArgument ReferenceType InstantiatedTerm BinaryOperation + MethodInvocation index MemberReference length getOrderedTerms Literal 5000 ForStatement EnhancedForControl VariableDeclaration ReferenceType InstantiatedTerm VariableDeclarator instantiatedTerm MethodInvocation index getOrderedTerms BlockStatement StatementExpression MethodInvocation orderedTerms MemberReference instantiatedTerm add End LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument BasicType byte VariableDeclarator normsByFieldNameAndDocumentNumber ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument BasicType byte MethodInvocation index MethodInvocation size getTermsByFieldAndText LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator fieldNames ClassCreator ReferenceType HashSet TypeArgument ReferenceType String Literal 20 StatementExpression MethodInvocation fieldNames MethodInvocation index MethodInvocation keySet getNormsByFieldNameAndDocumentNumber addAll StatementExpression MethodInvocation fieldNames MemberReference fieldNameBuffer addAll ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator field MethodInvocation index MethodInvocation keySet getTermsByFieldAndText BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator norms ArrayCreator BasicType byte BinaryOperation + MethodInvocation index MemberReference length getDocumentsByNumber MethodInvocation termDocumentInformationFactoryByDocument size LocalVariableDeclaration BasicType byte VariableDeclarator oldNorms MethodInvocation index MethodInvocation MemberReference field get getNormsByFieldNameAndDocumentNumber IfStatement BinaryOperation != MemberReference oldNorms Literal null BlockStatement StatementExpression MethodInvocation System MemberReference oldNorms Literal 0 MemberReference norms Literal 0 MemberReference oldNorms length arraycopy StatementExpression MethodInvocation Arrays MemberReference norms MemberReference oldNorms length MemberReference norms length MethodInvocation DefaultSimilarity Literal 1.0f encodeNorm fill BlockStatement StatementExpression MethodInvocation Arrays MemberReference norms Literal 0 MemberReference norms length MethodInvocation DefaultSimilarity Literal 1.0f encodeNorm fill End StatementExpression MethodInvocation normsByFieldNameAndDocumentNumber MemberReference field MemberReference norms put StatementExpression MethodInvocation fieldNames MemberReference field remove End ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator field MemberReference fieldNames BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator norms ArrayCreator BasicType byte BinaryOperation + MethodInvocation index MemberReference length getDocumentsByNumber MethodInvocation termDocumentInformationFactoryByDocument size StatementExpression MethodInvocation Arrays MemberReference norms Literal 0 MemberReference norms length MethodInvocation DefaultSimilarity Literal 1.0f encodeNorm fill StatementExpression MethodInvocation normsByFieldNameAndDocumentNumber MemberReference field MemberReference norms put End StatementExpression MethodInvocation fieldNames clear StatementExpression MethodInvocation index MemberReference normsByFieldNameAndDocumentNumber setNormsByFieldNameAndDocumentNumber ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType InstantiatedDocument TypeArgument ReferenceType Map TypeArgument ReferenceType FieldSetting TypeArgument ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory VariableDeclarator eDocumentTermDocInfoByTermTextAndField MethodInvocation termDocumentInformationFactoryByDocument entrySet BlockStatement LocalVariableDeclaration ReferenceType InstantiatedDocument VariableDeclarator document MethodInvocation eDocumentTermDocInfoByTermTextAndField getKey StatementExpression MethodInvocation document MemberReference ++ documentNumber setDocumentNumber StatementExpression Assignment MemberReference ArraySelector MethodInvocation document getDocumentNumber documentsByNumber MemberReference document = LocalVariableDeclaration BasicType int VariableDeclarator numFieldsWithTermVectorsInDocument Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator termsInDocument Literal 0 ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType FieldSetting TypeArgument ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory VariableDeclarator eFieldTermDocInfoFactoriesByTermText MethodInvocation eDocumentTermDocInfoByTermTextAndField MethodInvocation entrySet getValue BlockStatement IfStatement MethodInvocation eFieldTermDocInfoFactoriesByTermText MemberReference storeTermVector getKey BlockStatement StatementExpression Assignment MemberReference numFieldsWithTermVectorsInDocument MethodInvocation eFieldTermDocInfoFactoriesByTermText MethodInvocation size getValue += End StatementExpression Assignment MemberReference termsInDocument MethodInvocation eFieldTermDocInfoFactoriesByTermText MethodInvocation size getValue += IfStatement BinaryOperation && MethodInvocation eFieldTermDocInfoFactoriesByTermText MemberReference indexed getKey MethodInvocation ! eFieldTermDocInfoFactoriesByTermText MemberReference omitNorms getKey BlockStatement LocalVariableDeclaration BasicType float VariableDeclarator norm MethodInvocation eFieldTermDocInfoFactoriesByTermText MemberReference boost getKey StatementExpression Assignment MemberReference norm MethodInvocation document MethodInvocation getBoost getDocument *= StatementExpression Assignment MemberReference norm MethodInvocation similarity MethodInvocation eFieldTermDocInfoFactoriesByTermText MemberReference fieldName getKey MethodInvocation eFieldTermDocInfoFactoriesByTermText MemberReference fieldLength getKey lengthNorm *= StatementExpression Assignment MethodInvocation normsByFieldNameAndDocumentNumber ArraySelector MethodInvocation document getDocumentNumber MethodInvocation eFieldTermDocInfoFactoriesByTermText MemberReference fieldName getKey get MethodInvocation Similarity MemberReference norm encodeNorm = BlockStatement StatementExpression MethodInvocation System currentTimeMillis End End LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType InstantiatedTerm TypeArgument ReferenceType InstantiatedTermDocumentInformation VariableDeclarator informationByTermOfCurrentDocument ClassCreator ReferenceType HashMap TypeArgument ReferenceType InstantiatedTerm TypeArgument ReferenceType InstantiatedTermDocumentInformation MemberReference termsInDocument LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType FieldSetting VariableDeclarator documentFieldSettingsByFieldName ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType FieldSetting MethodInvocation eDocumentTermDocInfoByTermTextAndField MethodInvocation size getValue ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType FieldSetting TypeArgument ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory VariableDeclarator eFieldSetting_TermDocInfoFactoriesByTermText MethodInvocation eDocumentTermDocInfoByTermTextAndField MethodInvocation entrySet getValue BlockStatement StatementExpression MethodInvocation documentFieldSettingsByFieldName MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MemberReference fieldName getKey MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText getKey put ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory VariableDeclarator eTermText_TermDocInfoFactory MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MethodInvocation entrySet getValue BlockStatement LocalVariableDeclaration ReferenceType InstantiatedTerm VariableDeclarator term LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType InstantiatedTerm VariableDeclarator termsByText MethodInvocation index MethodInvocation MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MemberReference fieldName getKey get getTermsByFieldAndText IfStatement BinaryOperation == MemberReference termsByText Literal null BlockStatement StatementExpression Assignment MemberReference termsByText ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType InstantiatedTerm Literal 1000 = StatementExpression MethodInvocation index MethodInvocation MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MemberReference fieldName getKey MemberReference termsByText put getTermsByFieldAndText StatementExpression Assignment MemberReference term ClassCreator ReferenceType InstantiatedTerm MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MemberReference fieldName getKey MethodInvocation eTermText_TermDocInfoFactory getKey = StatementExpression MethodInvocation termsByText MethodInvocation eTermText_TermDocInfoFactory getKey MemberReference term put LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation Collections MemberReference orderedTerms MemberReference term MemberReference InstantiatedTerm comparator binarySearch StatementExpression Assignment MemberReference pos BinaryOperation - Literal - 1 MemberReference pos = StatementExpression MethodInvocation orderedTerms MemberReference pos MemberReference term add StatementExpression Assignment MemberReference orderedTermsDirty Literal true = BlockStatement StatementExpression Assignment MemberReference term MethodInvocation termsByText MethodInvocation eTermText_TermDocInfoFactory getKey get = IfStatement BinaryOperation == MemberReference term Literal null BlockStatement StatementExpression Assignment MemberReference term ClassCreator ReferenceType InstantiatedTerm MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MemberReference fieldName getKey MethodInvocation eTermText_TermDocInfoFactory getKey = StatementExpression MethodInvocation termsByText MethodInvocation eTermText_TermDocInfoFactory getKey MemberReference term put LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation Collections MemberReference orderedTerms MemberReference term MemberReference InstantiatedTerm comparator binarySearch StatementExpression Assignment MemberReference pos BinaryOperation - Literal - 1 MemberReference pos = StatementExpression MethodInvocation orderedTerms MemberReference pos MemberReference term add StatementExpression Assignment MemberReference orderedTermsDirty Literal true = End End LocalVariableDeclaration BasicType int VariableDeclarator positions ArrayCreator BasicType int MethodInvocation eTermText_TermDocInfoFactory MemberReference termPositions MethodInvocation size getValue ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference positions length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i positions MethodInvocation eTermText_TermDocInfoFactory MemberReference termPositions MethodInvocation MemberReference i get getValue = End LocalVariableDeclaration BasicType byte VariableDeclarator payloads ArrayCreator BasicType byte MethodInvocation eTermText_TermDocInfoFactory MemberReference payloads MethodInvocation size getValue ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference payloads length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i payloads MethodInvocation eTermText_TermDocInfoFactory MemberReference payloads MethodInvocation MemberReference i get getValue = End LocalVariableDeclaration ReferenceType InstantiatedTermDocumentInformation VariableDeclarator info ClassCreator ReferenceType InstantiatedTermDocumentInformation MemberReference term MemberReference document MemberReference positions MemberReference payloads LocalVariableDeclaration ReferenceType InstantiatedTermDocumentInformation VariableDeclarator associatedDocuments IfStatement BinaryOperation != MethodInvocation term getAssociatedDocuments Literal null BlockStatement StatementExpression Assignment MemberReference associatedDocuments ArrayCreator ReferenceType InstantiatedTermDocumentInformation BinaryOperation + MethodInvocation term MemberReference length getAssociatedDocuments Literal 1 = StatementExpression MethodInvocation System MethodInvocation term getAssociatedDocuments Literal 0 MemberReference associatedDocuments Literal 0 MethodInvocation term MemberReference length getAssociatedDocuments arraycopy BlockStatement StatementExpression Assignment MemberReference associatedDocuments ArrayCreator ReferenceType InstantiatedTermDocumentInformation Literal 1 = End StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference associatedDocuments length Literal 1 associatedDocuments MemberReference info = StatementExpression MethodInvocation term MemberReference associatedDocuments setAssociatedDocuments StatementExpression MethodInvocation informationByTermOfCurrentDocument MemberReference term MemberReference info put StatementExpression MethodInvocation dirtyTerms MemberReference term add End IfStatement MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MemberReference storeOffsetWithTermVector getKey BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType InstantiatedTerm TypeArgument ReferenceType InstantiatedTermDocumentInformation VariableDeclarator e MethodInvocation informationByTermOfCurrentDocument entrySet BlockStatement IfStatement MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MemberReference fieldName MethodInvocation MethodInvocation e MethodInvocation field getKey equals getKey BlockStatement LocalVariableDeclaration ReferenceType TermDocumentInformationFactory VariableDeclarator factory MethodInvocation eFieldSetting_TermDocInfoFactoriesByTermText MethodInvocation MethodInvocation e MethodInvocation text getKey get getValue StatementExpression MethodInvocation e MethodInvocation MethodInvocation factory.termOffsets ArrayCreator ReferenceType TermVectorOffsetInfo MethodInvocation factory.termOffsets size toArray setTermOffsets getValue End End End End LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType List TypeArgument ReferenceType InstantiatedTermDocumentInformation VariableDeclarator termDocumentInformationsByField ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType List TypeArgument ReferenceType InstantiatedTermDocumentInformation ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType InstantiatedTerm TypeArgument ReferenceType InstantiatedTermDocumentInformation VariableDeclarator eTerm_TermDocumentInformation MethodInvocation informationByTermOfCurrentDocument entrySet BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType InstantiatedTermDocumentInformation VariableDeclarator termDocumentInformations MethodInvocation termDocumentInformationsByField MethodInvocation eTerm_TermDocumentInformation MethodInvocation field getKey get IfStatement BinaryOperation == MemberReference termDocumentInformations Literal null BlockStatement StatementExpression Assignment MemberReference termDocumentInformations ClassCreator ReferenceType ArrayList TypeArgument ReferenceType InstantiatedTermDocumentInformation = StatementExpression MethodInvocation termDocumentInformationsByField MethodInvocation eTerm_TermDocumentInformation MethodInvocation field getKey MemberReference termDocumentInformations put End StatementExpression MethodInvocation termDocumentInformations MethodInvocation eTerm_TermDocumentInformation getValue add End ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType String TypeArgument ReferenceType List TypeArgument ReferenceType InstantiatedTermDocumentInformation VariableDeclarator eField_TermDocInfos MethodInvocation termDocumentInformationsByField entrySet BlockStatement StatementExpression MethodInvocation Collections MethodInvocation eField_TermDocInfos getValue ClassCreator ReferenceType Comparator TypeArgument ReferenceType InstantiatedTermDocumentInformation MethodDeclaration Modifier public BasicType int compare FormalParameter ReferenceType InstantiatedTermDocumentInformation instantiatedTermDocumentInformation FormalParameter ReferenceType InstantiatedTermDocumentInformation instantiatedTermDocumentInformation1 ReturnStatement MethodInvocation instantiatedTermDocumentInformation MethodInvocation getTerm MethodInvocation MethodInvocation instantiatedTermDocumentInformation1 MethodInvocation getTerm getTerm compareTo getTerm sort IfStatement MethodInvocation documentFieldSettingsByFieldName MemberReference storeTermVector MethodInvocation eField_TermDocInfos getKey get BlockStatement IfStatement BinaryOperation == MethodInvocation document getVectorSpace Literal null BlockStatement StatementExpression MethodInvocation document ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType List TypeArgument ReferenceType InstantiatedTermDocumentInformation MethodInvocation documentFieldSettingsByFieldName size setVectorSpace End StatementExpression MethodInvocation document MethodInvocation MethodInvocation eField_TermDocInfos getKey MethodInvocation eField_TermDocInfos getValue put getVectorSpace End End StatementExpression MethodInvocation fieldSettingsByFieldName MemberReference documentFieldSettingsByFieldName putAll End ForStatement EnhancedForControl VariableDeclaration ReferenceType InstantiatedTerm VariableDeclarator term MemberReference dirtyTerms BlockStatement StatementExpression MethodInvocation Arrays MethodInvocation term getAssociatedDocuments MemberReference InstantiatedTermDocumentInformation documentNumberComparator sort End StatementExpression MethodInvocation index MemberReference documentsByNumber setDocumentsByNumber StatementExpression MethodInvocation index MethodInvocation orderedTerms ArrayCreator ReferenceType InstantiatedTerm MethodInvocation orderedTerms size toArray setOrderedTerms ForStatement EnhancedForControl VariableDeclaration ReferenceType FieldSetting VariableDeclarator fieldSetting MethodInvocation fieldSettingsByFieldName values BlockStatement StatementExpression MethodInvocation index MethodInvocation MemberReference fieldSetting merge getFieldSettings End IfStatement MemberReference orderedTermsDirty BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation index MemberReference length getOrderedTerms MemberReference ++ i BlockStatement StatementExpression MethodInvocation index ArraySelector MemberReference i MethodInvocation MemberReference i setTermIndex getOrderedTerms End End LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator indexDeleter MethodInvocation index indexReaderFactory IfStatement BinaryOperation > MethodInvocation unflushedDeletions size Literal 0 BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Term VariableDeclarator term MemberReference unflushedDeletions BlockStatement StatementExpression MethodInvocation indexDeleter MemberReference term deleteDocuments End StatementExpression MethodInvocation unflushedDeletions clear End StatementExpression MethodInvocation unflushedDocuments clear StatementExpression MethodInvocation termDocumentInformationFactoryByDocument clear StatementExpression MethodInvocation fieldNameBuffer clear StatementExpression MethodInvocation index MethodInvocation System currentTimeMillis setVersion StatementExpression MethodInvocation indexDeleter close MethodDeclaration /**
   * Adds a document to this index.  If the document contains more than
   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
   * discarded.
   */ Modifier public addDocument FormalParameter ReferenceType Document doc IOException StatementExpression MethodInvocation MemberReference doc MethodInvocation getAnalyzer addDocument MethodDeclaration /**
   * Adds a document to this index, using the provided analyzer instead of the
   * value of {@link #getAnalyzer()}.  If the document contains more than
   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
   * discarded.
   *
   * @param doc
   * @param analyzer
   * @throws IOException
   */ Modifier public addDocument FormalParameter ReferenceType Document doc FormalParameter ReferenceType Analyzer analyzer IOException StatementExpression MethodInvocation ClassCreator ReferenceType InstantiatedDocument MemberReference doc MemberReference analyzer addDocument MethodDeclaration /**
   * Tokenizes a document and adds it to the buffer.
   * Try to do all calculations in this method rather than in commit, as this is a non locking method.
   * Remember, this index implementation expects unlimited memory for maximum speed.
   *
   * @param document
   * @param analyzer
   * @throws IOException
   */ Modifier protected addDocument FormalParameter ReferenceType InstantiatedDocument document FormalParameter ReferenceType Analyzer analyzer IOException IfStatement BinaryOperation != MethodInvocation document getDocumentNumber Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Document number already set! Are you trying to add a document that already is bound to this or another index?"" End LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType FieldSetting VariableDeclarator fieldSettingsByFieldName ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType FieldSetting ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field Cast ReferenceType List TypeArgument ReferenceType Fieldable MethodInvocation document MethodInvocation getFields getDocument BlockStatement LocalVariableDeclaration ReferenceType FieldSetting VariableDeclarator fieldSetting MethodInvocation fieldSettingsByFieldName MethodInvocation field name get IfStatement BinaryOperation == MemberReference fieldSetting Literal null BlockStatement StatementExpression Assignment MemberReference fieldSetting ClassCreator ReferenceType FieldSetting = StatementExpression Assignment MemberReference fieldSetting fieldName MethodInvocation StringHelper MethodInvocation field name intern = StatementExpression MethodInvocation fieldSettingsByFieldName MemberReference fieldSetting fieldName MemberReference fieldSetting put StatementExpression MethodInvocation fieldNameBuffer MemberReference fieldSetting fieldName add End StatementExpression Assignment MemberReference fieldSetting boost MethodInvocation field getBoost *= IfStatement MethodInvocation field getOmitNorms BlockStatement StatementExpression Assignment MemberReference fieldSetting omitNorms Literal true = End IfStatement MethodInvocation field isIndexed BlockStatement StatementExpression Assignment MemberReference fieldSetting indexed Literal true = End IfStatement MethodInvocation field isTokenized BlockStatement StatementExpression Assignment MemberReference fieldSetting tokenized Literal true = End IfStatement MethodInvocation field isStored BlockStatement StatementExpression Assignment MemberReference fieldSetting stored Literal true = End IfStatement MethodInvocation field isBinary BlockStatement StatementExpression Assignment MemberReference fieldSetting isBinary Literal true = End IfStatement MethodInvocation field isTermVectorStored BlockStatement StatementExpression Assignment MemberReference fieldSetting storeTermVector Literal true = End IfStatement MethodInvocation field isStorePositionWithTermVector BlockStatement StatementExpression Assignment MemberReference fieldSetting storePositionWithTermVector Literal true = End IfStatement MethodInvocation field isStoreOffsetWithTermVector BlockStatement StatementExpression Assignment MemberReference fieldSetting storeOffsetWithTermVector Literal true = End End LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType Fieldable TypeArgument ReferenceType LinkedList TypeArgument ReferenceType Token VariableDeclarator tokensByField ClassCreator ReferenceType LinkedHashMap TypeArgument ReferenceType Fieldable TypeArgument ReferenceType LinkedList TypeArgument ReferenceType Token Literal 20 ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Fieldable VariableDeclarator it Cast ReferenceType Iterator TypeArgument ReferenceType Fieldable MethodInvocation document MethodInvocation getFields MethodInvocation iterator getDocument MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Fieldable VariableDeclarator field MethodInvocation it next LocalVariableDeclaration ReferenceType FieldSetting VariableDeclarator fieldSetting MethodInvocation fieldSettingsByFieldName MethodInvocation field name get IfStatement MethodInvocation field isIndexed BlockStatement LocalVariableDeclaration ReferenceType LinkedList TypeArgument ReferenceType Token VariableDeclarator tokens ClassCreator ReferenceType LinkedList TypeArgument ReferenceType Token StatementExpression MethodInvocation tokensByField MemberReference field MemberReference tokens put IfStatement MethodInvocation field isTokenized BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator termCounter Literal 0 LocalVariableDeclaration Modifier final ReferenceType TokenStream VariableDeclarator tokenStream IfStatement BinaryOperation != MethodInvocation field tokenStreamValue Literal null BlockStatement StatementExpression Assignment MemberReference tokenStream MethodInvocation field tokenStreamValue = BlockStatement StatementExpression Assignment MemberReference tokenStream MethodInvocation analyzer MethodInvocation field name ClassCreator ReferenceType StringReader MethodInvocation field stringValue tokenStream = End StatementExpression MethodInvocation tokenStream reset WhileStatement MethodInvocation tokenStream incrementToken BlockStatement LocalVariableDeclaration Modifier final ReferenceType Token VariableDeclarator token ClassCreator ReferenceType Token ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType AttributeImpl VariableDeclarator atts MethodInvocation tokenStream getAttributeImplsIterator MethodInvocation atts hasNext BlockStatement LocalVariableDeclaration Modifier final ReferenceType AttributeImpl VariableDeclarator att MethodInvocation atts next TryStatement StatementExpression MethodInvocation att MemberReference token copyTo CatchClause CatchClauseParameter Exception e End StatementExpression MethodInvocation tokens MemberReference token add StatementExpression MemberReference ++ fieldSetting fieldLength IfStatement BinaryOperation > MemberReference fieldSetting fieldLength MemberReference maxFieldLength BlockStatement BreakStatement End End StatementExpression MethodInvocation tokenStream end StatementExpression MethodInvocation tokenStream close BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fieldVal MethodInvocation field stringValue LocalVariableDeclaration ReferenceType Token VariableDeclarator token ClassCreator ReferenceType Token Literal 0 MethodInvocation fieldVal length Literal ""untokenized"" StatementExpression MethodInvocation token MemberReference fieldVal setTermBuffer StatementExpression MethodInvocation tokens MemberReference token add StatementExpression MemberReference ++ fieldSetting fieldLength End End IfStatement MethodInvocation ! field isStored BlockStatement StatementExpression MethodInvocation it remove End End LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType FieldSetting TypeArgument ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory VariableDeclarator termDocumentInformationFactoryByTermTextAndFieldSetting ClassCreator ReferenceType HashMap TypeArgument ReferenceType FieldSetting TypeArgument ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory StatementExpression MethodInvocation termDocumentInformationFactoryByDocument MemberReference document MemberReference termDocumentInformationFactoryByTermTextAndFieldSetting put ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType Fieldable TypeArgument ReferenceType LinkedList TypeArgument ReferenceType Token VariableDeclarator eField_Tokens MethodInvocation tokensByField entrySet BlockStatement LocalVariableDeclaration ReferenceType FieldSetting VariableDeclarator fieldSetting MethodInvocation fieldSettingsByFieldName MethodInvocation eField_Tokens MethodInvocation name getKey get LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory VariableDeclarator termDocumentInformationFactoryByTermText MethodInvocation termDocumentInformationFactoryByTermTextAndFieldSetting MethodInvocation fieldSettingsByFieldName MethodInvocation eField_Tokens MethodInvocation name getKey get get IfStatement BinaryOperation == MemberReference termDocumentInformationFactoryByTermText Literal null BlockStatement StatementExpression Assignment MemberReference termDocumentInformationFactoryByTermText ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType TermDocumentInformationFactory = StatementExpression MethodInvocation termDocumentInformationFactoryByTermTextAndFieldSetting MethodInvocation fieldSettingsByFieldName MethodInvocation eField_Tokens MethodInvocation name getKey get MemberReference termDocumentInformationFactoryByTermText put End LocalVariableDeclaration BasicType int VariableDeclarator lastOffset Literal 0 IfStatement BinaryOperation > MemberReference fieldSetting position Literal 0 BlockStatement StatementExpression Assignment MemberReference fieldSetting position MethodInvocation analyzer MemberReference fieldSetting fieldName getPositionIncrementGap += End ForStatement EnhancedForControl VariableDeclaration ReferenceType Token VariableDeclarator token MethodInvocation eField_Tokens getValue BlockStatement LocalVariableDeclaration ReferenceType TermDocumentInformationFactory VariableDeclarator termDocumentInformationFactory MethodInvocation termDocumentInformationFactoryByTermText MethodInvocation token term get IfStatement BinaryOperation == MemberReference termDocumentInformationFactory Literal null BlockStatement StatementExpression Assignment MemberReference termDocumentInformationFactory ClassCreator ReferenceType TermDocumentInformationFactory = StatementExpression MethodInvocation termDocumentInformationFactoryByTermText MethodInvocation token term MemberReference termDocumentInformationFactory put End StatementExpression Assignment MemberReference fieldSetting position BinaryOperation - MethodInvocation token getPositionIncrement Literal 1 += StatementExpression MethodInvocation termDocumentInformationFactory.termPositions MemberReference ++ fieldSetting position add IfStatement BinaryOperation && BinaryOperation != MethodInvocation token getPayload Literal null BinaryOperation > MethodInvocation token MethodInvocation length getPayload Literal 0 BlockStatement StatementExpression MethodInvocation termDocumentInformationFactory.payloads MethodInvocation token MethodInvocation toByteArray getPayload add StatementExpression Assignment MemberReference fieldSetting storePayloads Literal true = BlockStatement StatementExpression MethodInvocation termDocumentInformationFactory.payloads Literal null add End IfStatement MethodInvocation eField_Tokens MethodInvocation isStoreOffsetWithTermVector getKey BlockStatement StatementExpression MethodInvocation termDocumentInformationFactory.termOffsets ClassCreator ReferenceType TermVectorOffsetInfo BinaryOperation + MemberReference fieldSetting offset MethodInvocation token startOffset BinaryOperation + MemberReference fieldSetting offset MethodInvocation token endOffset add StatementExpression Assignment MemberReference lastOffset BinaryOperation + MemberReference fieldSetting offset MethodInvocation token endOffset = End End IfStatement MethodInvocation eField_Tokens MethodInvocation isStoreOffsetWithTermVector getKey BlockStatement StatementExpression Assignment MemberReference fieldSetting offset BinaryOperation + MemberReference lastOffset Literal 1 = End End StatementExpression MethodInvocation unflushedDocuments MemberReference document add IfStatement BinaryOperation >= MethodInvocation unflushedDocuments size MethodInvocation getMergeFactor BlockStatement StatementExpression MethodInvocation commit End FieldDeclaration Modifier private ReferenceType Set TypeArgument ReferenceType Term VariableDeclarator unflushedDeletions ClassCreator ReferenceType HashSet TypeArgument ReferenceType Term MethodDeclaration Modifier public deleteDocuments FormalParameter ReferenceType Term term IOException StatementExpression MethodInvocation unflushedDeletions MemberReference term add MethodDeclaration Modifier public deleteDocuments FormalParameter ReferenceType Term terms IOException ForStatement EnhancedForControl VariableDeclaration ReferenceType Term VariableDeclarator term MemberReference terms BlockStatement StatementExpression MethodInvocation MemberReference term deleteDocuments End MethodDeclaration Modifier public updateDocument FormalParameter ReferenceType Term term FormalParameter ReferenceType Document doc IOException StatementExpression MethodInvocation MemberReference term MemberReference doc MethodInvocation getAnalyzer updateDocument MethodDeclaration Modifier public updateDocument FormalParameter ReferenceType Term term FormalParameter ReferenceType Document doc FormalParameter ReferenceType Analyzer analyzer IOException StatementExpression MethodInvocation MemberReference term deleteDocuments StatementExpression MethodInvocation MemberReference doc MemberReference analyzer addDocument MethodDeclaration Modifier public BasicType int getMaxFieldLength ReturnStatement MemberReference maxFieldLength MethodDeclaration Modifier public setMaxFieldLength FormalParameter BasicType int maxFieldLength StatementExpression Assignment This MemberReference maxFieldLength MemberReference maxFieldLength = MethodDeclaration Modifier public ReferenceType Similarity getSimilarity ReturnStatement MemberReference similarity MethodDeclaration Modifier public setSimilarity FormalParameter ReferenceType Similarity similarity StatementExpression Assignment This MemberReference similarity MemberReference similarity = MethodDeclaration Modifier public ReferenceType Analyzer getAnalyzer ReturnStatement MemberReference analyzer ClassDeclaration Modifier private TermDocumentInformationFactory FieldDeclaration Modifier private ReferenceType LinkedList TypeArgument BasicType byte VariableDeclarator payloads ClassCreator ReferenceType LinkedList TypeArgument BasicType byte FieldDeclaration Modifier private ReferenceType LinkedList TypeArgument ReferenceType Integer VariableDeclarator termPositions ClassCreator ReferenceType LinkedList TypeArgument ReferenceType Integer FieldDeclaration Modifier private ReferenceType LinkedList TypeArgument ReferenceType TermVectorOffsetInfo VariableDeclarator termOffsets ClassCreator ReferenceType LinkedList TypeArgument ReferenceType TermVectorOffsetInfo ClassDeclaration Modifier static FieldSetting FieldDeclaration BasicType float VariableDeclarator boost Literal 1 FieldDeclaration BasicType int VariableDeclarator position Literal 0 FieldDeclaration BasicType int VariableDeclarator offset FieldDeclaration BasicType int VariableDeclarator fieldLength Literal 0 FieldDeclaration BasicType boolean VariableDeclarator omitNorms Literal false FieldDeclaration BasicType boolean VariableDeclarator isBinary Literal false ConstructorDeclaration Modifier private FieldSetting ConstructorDeclaration Modifier private FieldSetting FormalParameter ReferenceType String fieldName StatementExpression SuperConstructorInvocation MemberReference fieldName ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType store ReferenceType instantiated ReferenceType FieldSetting ReferenceType Closeable",0
186,186,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.surround.query Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermEnum Import org.apache.lucene.index.IndexReader Import java.io.IOException Import java.util.regex.Pattern Import java.util.regex.Matcher ClassDeclaration Modifier public SrndTruncQuery ConstructorDeclaration Modifier public SrndTruncQuery FormalParameter ReferenceType String truncated FormalParameter BasicType char unlimited FormalParameter BasicType char mask StatementExpression SuperConstructorInvocation Literal false StatementExpression Assignment This MemberReference truncated MemberReference truncated = StatementExpression Assignment This MemberReference unlimited MemberReference unlimited = StatementExpression Assignment This MemberReference mask MemberReference mask = StatementExpression MethodInvocation truncatedToPrefixAndPattern FieldDeclaration Modifier private final ReferenceType String VariableDeclarator truncated FieldDeclaration Modifier private final BasicType char VariableDeclarator unlimited FieldDeclaration Modifier private final BasicType char VariableDeclarator mask FieldDeclaration Modifier private ReferenceType String VariableDeclarator prefix FieldDeclaration Modifier private ReferenceType Pattern VariableDeclarator pattern MethodDeclaration Modifier public ReferenceType String getTruncated ReturnStatement MemberReference truncated MethodDeclaration Modifier public Annotation Override ReferenceType String toStringUnquoted ReturnStatement MethodInvocation getTruncated MethodDeclaration Modifier protected BasicType boolean matchingChar FormalParameter BasicType char c ReturnStatement BinaryOperation && BinaryOperation != MemberReference c MemberReference unlimited BinaryOperation != MemberReference c MemberReference mask MethodDeclaration Modifier protected appendRegExpForChar FormalParameter BasicType char c FormalParameter ReferenceType StringBuilder re IfStatement BinaryOperation == MemberReference c MemberReference unlimited StatementExpression MethodInvocation re Literal "".*"" append IfStatement BinaryOperation == MemberReference c MemberReference mask StatementExpression MethodInvocation re Literal ""."" append StatementExpression MethodInvocation re MemberReference c append End End MethodDeclaration Modifier protected truncatedToPrefixAndPattern LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 WhileStatement BinaryOperation && BinaryOperation < MemberReference i MethodInvocation truncated length MethodInvocation MethodInvocation truncated MemberReference i charAt matchingChar BlockStatement StatementExpression MemberReference ++ i End StatementExpression Assignment MemberReference prefix MethodInvocation truncated Literal 0 MemberReference i substring = LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator re ClassCreator ReferenceType StringBuilder WhileStatement BinaryOperation < MemberReference i MethodInvocation truncated length BlockStatement StatementExpression MethodInvocation MethodInvocation truncated MemberReference i charAt MemberReference re appendRegExpForChar StatementExpression MemberReference ++ i End StatementExpression Assignment MemberReference pattern MethodInvocation Pattern MethodInvocation re toString compile = MethodDeclaration Modifier public Annotation Override visitMatchingTerms FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType String fieldName FormalParameter ReferenceType MatchingTermVisitor mtv IOException LocalVariableDeclaration BasicType boolean VariableDeclarator expanded Literal false LocalVariableDeclaration BasicType int VariableDeclarator prefixLength MethodInvocation prefix length LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator enumerator MethodInvocation reader ClassCreator ReferenceType Term MemberReference fieldName MemberReference prefix terms LocalVariableDeclaration ReferenceType Matcher VariableDeclarator matcher MethodInvocation pattern Literal """" matcher TryStatement DoStatement MethodInvocation enumerator next BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator term MethodInvocation enumerator term IfStatement BinaryOperation != MemberReference term Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation term text IfStatement BinaryOperation || MethodInvocation text MemberReference prefix startsWith MethodInvocation term field BlockStatement BreakStatement BlockStatement StatementExpression MethodInvocation matcher MethodInvocation text MemberReference prefixLength substring reset IfStatement MethodInvocation matcher matches BlockStatement StatementExpression MethodInvocation mtv MemberReference term visitMatchingTerm StatementExpression Assignment MemberReference expanded Literal true = End End End End StatementExpression MethodInvocation enumerator close StatementExpression MethodInvocation matcher reset IfStatement MemberReference ! expanded BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""No terms in "" MemberReference fieldName Literal "" field for: "" MethodInvocation toString println End ReferenceType SimpleTerm",0
178,178,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import org.apache.lucene.util.AttributeSource Import org.apache.lucene.util.NumericUtils Import org.apache.lucene.document.NumericField Import org.apache.lucene.search.NumericRangeQuery Import org.apache.lucene.search.NumericRangeFilter Import org.apache.lucene.search.SortField Import org.apache.lucene.search.FieldCache Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.analysis.tokenattributes.TypeAttribute Import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute ClassDeclaration Modifier public final /**
 * <b>Expert:</b> This class provides a {@link TokenStream}
 * for indexing numeric values that can be used by {@link
 * NumericRangeQuery} or {@link NumericRangeFilter}.
 *
 * <p>Note that for simple usage, {@link NumericField} is
 * recommended.  {@link NumericField} disables norms and
 * term freqs, as they are not usually needed during
 * searching.  If you need to change these settings, you
 * should use this class.
 *
 * <p>See {@link NumericField} for capabilities of fields
 * indexed numerically.</p>
 *
 * <p>Here's an example usage, for an <code>int</code> field:
 *
 * <pre>
 *  Field field = new Field(name, new NumericTokenStream(precisionStep).setIntValue(value));
 *  field.setOmitNorms(true);
 *  field.setOmitTermFreqAndPositions(true);
 *  document.add(field);
 * </pre>
 *
 * <p>For optimal performance, re-use the TokenStream and Field instance
 * for more than one document:
 *
 * <pre>
 *  NumericTokenStream stream = new NumericTokenStream(precisionStep);
 *  Field field = new Field(name, stream);
 *  field.setOmitNorms(true);
 *  field.setOmitTermFreqAndPositions(true);
 *  Document document = new Document();
 *  document.add(field);
 *
 *  for(all documents) {
 *    stream.setIntValue(value)
 *    writer.addDocument(document);
 *  }
 * </pre>
 *
 * <p>This stream is not intended to be used in analyzers;
 * it's more for iterating the different precisions during
 * indexing a specific numeric value.</p>

 * <p><b>NOTE</b>: as token streams are only consumed once
 * the document is added to the index, if you index more
 * than one numeric field, use a separate <code>NumericTokenStream</code>
 * instance for each.</p>
 *
 * <p>See {@link NumericRangeQuery} for more details on the
 * <a
 * href=""../search/NumericRangeQuery.html#precisionStepDesc""><code>precisionStep</code></a>
 * parameter as well as how numeric fields work under the hood.</p>
 *
 * <p><font color=""red""><b>NOTE:</b> This API is experimental and
 * might change in incompatible ways in the next release.</font>
 *
 * @since 2.9
 */ NumericTokenStream FieldDeclaration /** The full precision token gets this token type assigned. */ Modifier public final static ReferenceType String VariableDeclarator TOKEN_TYPE_FULL_PREC Literal ""fullPrecNumeric"" FieldDeclaration /** The lower precision tokens gets this token type assigned. */ Modifier public final static ReferenceType String VariableDeclarator TOKEN_TYPE_LOWER_PREC Literal ""lowerPrecNumeric"" ConstructorDeclaration Modifier public /**
   * Creates a token stream for numeric values using the default <code>precisionStep</code>
   * {@link NumericUtils#PRECISION_STEP_DEFAULT} (4). The stream is not yet initialized,
   * before using set a value using the various set<em>???</em>Value() methods.
   */ NumericTokenStream StatementExpression ExplicitConstructorInvocation MemberReference NumericUtils PRECISION_STEP_DEFAULT ConstructorDeclaration Modifier public /**
   * Creates a token stream for numeric values with the specified
   * <code>precisionStep</code>. The stream is not yet initialized,
   * before using set a value using the various set<em>???</em>Value() methods.
   */ NumericTokenStream FormalParameter Modifier final BasicType int precisionStep StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference precisionStep MemberReference precisionStep = IfStatement BinaryOperation < MemberReference precisionStep Literal 1 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""precisionStep must be >=1"" End ConstructorDeclaration Modifier public /**
   * Expert: Creates a token stream for numeric values with the specified
   * <code>precisionStep</code> using the given {@link AttributeSource}.
   * The stream is not yet initialized,
   * before using set a value using the various set<em>???</em>Value() methods.
   */ NumericTokenStream FormalParameter ReferenceType AttributeSource source FormalParameter Modifier final BasicType int precisionStep StatementExpression SuperConstructorInvocation MemberReference source StatementExpression Assignment This MemberReference precisionStep MemberReference precisionStep = IfStatement BinaryOperation < MemberReference precisionStep Literal 1 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""precisionStep must be >=1"" End ConstructorDeclaration Modifier public /**
   * Expert: Creates a token stream for numeric values with the specified
   * <code>precisionStep</code> using the given
   * {@link org.apache.lucene.util.AttributeSource.AttributeFactory}.
   * The stream is not yet initialized,
   * before using set a value using the various set<em>???</em>Value() methods.
   */ NumericTokenStream FormalParameter ReferenceType AttributeFactory factory FormalParameter Modifier final BasicType int precisionStep StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference precisionStep MemberReference precisionStep = IfStatement BinaryOperation < MemberReference precisionStep Literal 1 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""precisionStep must be >=1"" End MethodDeclaration /**
   * Initializes the token stream with the supplied <code>long</code> value.
   * @param value the value, for which this TokenStream should enumerate tokens.
   * @return this instance, because of this you can use it the following way:
   * <code>new Field(name, new NumericTokenStream(precisionStep).setLongValue(value))</code>
   */ Modifier public ReferenceType NumericTokenStream setLongValue FormalParameter Modifier final BasicType long value StatementExpression Assignment This MemberReference value MemberReference value = StatementExpression Assignment MemberReference valSize Literal 64 = StatementExpression Assignment MemberReference shift Literal 0 = ReturnStatement This MethodDeclaration /**
   * Initializes the token stream with the supplied <code>int</code> value.
   * @param value the value, for which this TokenStream should enumerate tokens.
   * @return this instance, because of this you can use it the following way:
   * <code>new Field(name, new NumericTokenStream(precisionStep).setIntValue(value))</code>
   */ Modifier public ReferenceType NumericTokenStream setIntValue FormalParameter Modifier final BasicType int value StatementExpression Assignment This MemberReference value Cast BasicType long MemberReference value = StatementExpression Assignment MemberReference valSize Literal 32 = StatementExpression Assignment MemberReference shift Literal 0 = ReturnStatement This MethodDeclaration /**
   * Initializes the token stream with the supplied <code>double</code> value.
   * @param value the value, for which this TokenStream should enumerate tokens.
   * @return this instance, because of this you can use it the following way:
   * <code>new Field(name, new NumericTokenStream(precisionStep).setDoubleValue(value))</code>
   */ Modifier public ReferenceType NumericTokenStream setDoubleValue FormalParameter Modifier final BasicType double value StatementExpression Assignment This MemberReference value MethodInvocation NumericUtils MemberReference value doubleToSortableLong = StatementExpression Assignment MemberReference valSize Literal 64 = StatementExpression Assignment MemberReference shift Literal 0 = ReturnStatement This MethodDeclaration /**
   * Initializes the token stream with the supplied <code>float</code> value.
   * @param value the value, for which this TokenStream should enumerate tokens.
   * @return this instance, because of this you can use it the following way:
   * <code>new Field(name, new NumericTokenStream(precisionStep).setFloatValue(value))</code>
   */ Modifier public ReferenceType NumericTokenStream setFloatValue FormalParameter Modifier final BasicType float value StatementExpression Assignment This MemberReference value Cast BasicType long MethodInvocation NumericUtils MemberReference value floatToSortableInt = StatementExpression Assignment MemberReference valSize Literal 32 = StatementExpression Assignment MemberReference shift Literal 0 = ReturnStatement This MethodDeclaration Modifier public Annotation Override reset IfStatement BinaryOperation == MemberReference valSize Literal 0 ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""call set???Value() before usage"" End StatementExpression Assignment MemberReference shift Literal 0 = MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken IfStatement BinaryOperation == MemberReference valSize Literal 0 ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""call set???Value() before usage"" End IfStatement BinaryOperation >= MemberReference shift MemberReference valSize ReturnStatement Literal false End StatementExpression MethodInvocation clearAttributes LocalVariableDeclaration Modifier final BasicType char VariableDeclarator buffer SwitchStatement MemberReference valSize SwitchStatementCase Literal 64 StatementExpression Assignment MemberReference buffer MethodInvocation termAtt MemberReference NumericUtils BUF_SIZE_LONG resizeTermBuffer = StatementExpression MethodInvocation termAtt MethodInvocation NumericUtils MemberReference value MemberReference shift MemberReference buffer longToPrefixCoded setTermLength BreakStatement SwitchStatementCase Literal 32 StatementExpression Assignment MemberReference buffer MethodInvocation termAtt MemberReference NumericUtils BUF_SIZE_INT resizeTermBuffer = StatementExpression MethodInvocation termAtt MethodInvocation NumericUtils Cast BasicType int MemberReference value MemberReference shift MemberReference buffer intToPrefixCoded setTermLength BreakStatement SwitchStatementCase ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""valSize must be 32 or 64"" End StatementExpression MethodInvocation typeAtt TernaryExpression BinaryOperation == MemberReference shift Literal 0 MemberReference TOKEN_TYPE_FULL_PREC MemberReference TOKEN_TYPE_LOWER_PREC setType StatementExpression MethodInvocation posIncrAtt TernaryExpression BinaryOperation == MemberReference shift Literal 0 Literal 1 Literal 0 setPositionIncrement StatementExpression Assignment MemberReference shift MemberReference precisionStep += ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration Modifier final ReferenceType StringBuilder VariableDeclarator sb ClassCreator MethodInvocation MemberReference valSize append ReferenceType StringBuilder Literal ""(numeric,valSize="" StatementExpression MethodInvocation sb MethodInvocation MemberReference precisionStep append MethodInvocation Literal ')' append Literal "",precisionStep="" append ReturnStatement MethodInvocation sb toString FieldDeclaration Modifier private final ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute FieldDeclaration Modifier private final ReferenceType TypeAttribute VariableDeclarator typeAtt MethodInvocation ClassReference ReferenceType TypeAttribute addAttribute FieldDeclaration Modifier private final ReferenceType PositionIncrementAttribute VariableDeclarator posIncrAtt MethodInvocation ClassReference ReferenceType PositionIncrementAttribute addAttribute FieldDeclaration Modifier private BasicType int VariableDeclarator shift Literal 0 VariableDeclarator valSize Literal 0 FieldDeclaration Modifier private final BasicType int VariableDeclarator precisionStep FieldDeclaration Modifier private BasicType long VariableDeclarator value Literal 0L ReferenceType TokenStream",0
566,566,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.util.Map Import java.util.WeakHashMap Import java.util.concurrent.locks.ReentrantLock Import org.apache.lucene.index.IndexReader Import org.apache.lucene.util.OpenBitSetDISI ClassDeclaration Modifier public /**
 * Wraps another filter's result and caches it.  The purpose is to allow
 * filters to simply filter, and then wrap with this class to add caching.
 */ CachingWrapperFilter FieldDeclaration ReferenceType Filter VariableDeclarator filter FieldDeclaration /**
   * A transient Filter cache (package private because of test)
   */ Modifier transient ReferenceType Map TypeArgument ReferenceType IndexReader TypeArgument ReferenceType DocIdSet VariableDeclarator cache FieldDeclaration Modifier private final ReferenceType ReentrantLock VariableDeclarator lock ClassCreator ReferenceType ReentrantLock ConstructorDeclaration Modifier public /**
   * @param filter Filter to cache results of
   */ CachingWrapperFilter FormalParameter ReferenceType Filter filter StatementExpression Assignment This MemberReference filter MemberReference filter = MethodDeclaration /** Provide the DocIdSet to be cached, using the DocIdSet provided
   *  by the wrapped Filter.
   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}
   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into
   *  an {@link OpenBitSetDISI}.
   */ Modifier protected ReferenceType DocIdSet docIdSetToCache FormalParameter ReferenceType DocIdSet docIdSet FormalParameter ReferenceType IndexReader reader IOException IfStatement MethodInvocation docIdSet isCacheable BlockStatement ReturnStatement MemberReference docIdSet BlockStatement LocalVariableDeclaration Modifier final ReferenceType DocIdSetIterator VariableDeclarator it MethodInvocation docIdSet iterator ReturnStatement TernaryExpression BinaryOperation == MemberReference it Literal null MemberReference DocIdSet EMPTY_DOCIDSET ClassCreator ReferenceType OpenBitSetDISI MemberReference it MethodInvocation reader maxDoc End MethodDeclaration Modifier public Annotation Override ReferenceType DocIdSet getDocIdSet FormalParameter ReferenceType IndexReader reader IOException StatementExpression MethodInvocation lock lock TryStatement IfStatement BinaryOperation == MemberReference cache Literal null BlockStatement StatementExpression Assignment MemberReference cache ClassCreator ReferenceType WeakHashMap TypeArgument ReferenceType IndexReader TypeArgument ReferenceType DocIdSet = End LocalVariableDeclaration Modifier final ReferenceType DocIdSet VariableDeclarator cached MethodInvocation cache MemberReference reader get IfStatement BinaryOperation != MemberReference cached Literal null ReturnStatement MemberReference cached End StatementExpression MethodInvocation lock unlock LocalVariableDeclaration Modifier final ReferenceType DocIdSet VariableDeclarator docIdSet MethodInvocation MethodInvocation filter MemberReference reader getDocIdSet MemberReference reader docIdSetToCache IfStatement BinaryOperation != MemberReference docIdSet Literal null BlockStatement StatementExpression MethodInvocation lock lock TryStatement StatementExpression MethodInvocation cache MemberReference reader MemberReference docIdSet put StatementExpression MethodInvocation lock unlock End ReturnStatement MemberReference docIdSet MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""CachingWrapperFilter("" MemberReference filter Literal "")"" MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation instanceof MemberReference o ReferenceType CachingWrapperFilter ReturnStatement Literal false End ReturnStatement This MemberReference filter MethodInvocation Cast ReferenceType CachingWrapperFilter MemberReference o equals MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement BinaryOperation ^ MethodInvocation filter hashCode Literal 0x1117BF25 ReferenceType Filter",0
655,655,,0
889,889,,0
748,748,,0
633,633,,0
149,149,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.surround.query Import java.util.List Import java.util.Iterator Import org.apache.lucene.search.Query Import org.apache.lucene.search.BooleanClause Import java.io.IOException ClassDeclaration Modifier public OrQuery ConstructorDeclaration Modifier public OrQuery FormalParameter ReferenceType List TypeArgument ReferenceType SrndQuery queries FormalParameter BasicType boolean infix FormalParameter ReferenceType String opName StatementExpression SuperConstructorInvocation MemberReference queries MemberReference infix MemberReference opName MethodDeclaration Modifier public Annotation Override ReferenceType Query makeLuceneQueryFieldNoBoost FormalParameter ReferenceType String fieldName FormalParameter ReferenceType BasicQueryFactory qf ReturnStatement MethodInvocation SrndBooleanQuery MethodInvocation MemberReference fieldName MemberReference qf makeLuceneSubQueriesField MemberReference BooleanClause.Occur SHOULD makeBooleanQuery MethodDeclaration Modifier public ReferenceType String distanceSubQueryNotAllowed LocalVariableDeclaration ReferenceType Iterator VariableDeclarator sqi MethodInvocation getSubQueriesIterator WhileStatement MethodInvocation sqi hasNext BlockStatement LocalVariableDeclaration ReferenceType SrndQuery VariableDeclarator leq Cast ReferenceType SrndQuery MethodInvocation sqi next IfStatement BinaryOperation instanceof MemberReference leq ReferenceType DistanceSubQuery BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator m Cast ReferenceType DistanceSubQuery MemberReference leq IfStatement BinaryOperation != MemberReference m Literal null BlockStatement ReturnStatement MemberReference m End BlockStatement ReturnStatement BinaryOperation + Literal ""subquery not allowed: "" MethodInvocation leq toString End End ReturnStatement Literal null MethodDeclaration Modifier public addSpanQueries FormalParameter ReferenceType SpanNearClauseFactory sncf IOException LocalVariableDeclaration ReferenceType Iterator VariableDeclarator sqi MethodInvocation getSubQueriesIterator WhileStatement MethodInvocation sqi hasNext BlockStatement StatementExpression Cast ReferenceType DistanceSubQuery MethodInvocation sqi next End ReferenceType ComposedQuery ReferenceType DistanceSubQuery",1
372,372,"CompilationUnit PackageDeclaration org.apache.lucene.index ClassDeclaration Modifier final /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ FreqProxTermsWriterPerThread FieldDeclaration Modifier final ReferenceType TermsHashPerThread VariableDeclarator termsHashPerThread FieldDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocState VariableDeclarator docState ConstructorDeclaration Modifier public FreqProxTermsWriterPerThread FormalParameter ReferenceType TermsHashPerThread perThread StatementExpression Assignment MemberReference docState MemberReference perThread docState = StatementExpression Assignment MemberReference termsHashPerThread MemberReference perThread = MethodDeclaration Modifier public Annotation Override ReferenceType TermsHashConsumerPerField addField FormalParameter ReferenceType TermsHashPerField termsHashPerField FormalParameter ReferenceType FieldInfo fieldInfo ReturnStatement ClassCreator ReferenceType FreqProxTermsWriterPerField MemberReference termsHashPerField This MemberReference fieldInfo MethodDeclaration Annotation Override startDocument MethodDeclaration Annotation Override ReferenceType DocumentsWriter ReferenceType DocWriter finishDocument ReturnStatement Literal null MethodDeclaration Modifier public Annotation Override abort ReferenceType TermsHashConsumerPerThread",0
169,169,"CompilationUnit PackageDeclaration org.apache.lucene.search.vectorhighlight Import java.util.ArrayList Import java.util.LinkedList Import java.util.List Import org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap Import org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo ClassDeclaration Modifier public /**
 * FieldPhraseList has a list of WeightedPhraseInfo that is used by FragListBuilder
 * to create a FieldFragList object.
 */ FieldPhraseList FieldDeclaration ReferenceType LinkedList TypeArgument ReferenceType WeightedPhraseInfo VariableDeclarator phraseList ClassCreator ReferenceType LinkedList TypeArgument ReferenceType WeightedPhraseInfo ConstructorDeclaration Modifier public /**
   * a constructor.
   * 
   * @param fieldTermStack FieldTermStack object
   * @param fieldQuery FieldQuery object
   */ FieldPhraseList FormalParameter ReferenceType FieldTermStack fieldTermStack FormalParameter ReferenceType FieldQuery fieldQuery LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator field MethodInvocation fieldTermStack getFieldName LocalVariableDeclaration ReferenceType LinkedList TypeArgument ReferenceType TermInfo VariableDeclarator phraseCandidate ClassCreator ReferenceType LinkedList TypeArgument ReferenceType TermInfo LocalVariableDeclaration ReferenceType QueryPhraseMap VariableDeclarator currMap Literal null LocalVariableDeclaration ReferenceType QueryPhraseMap VariableDeclarator nextMap Literal null WhileStatement MethodInvocation ! fieldTermStack isEmpty BlockStatement StatementExpression MethodInvocation phraseCandidate clear LocalVariableDeclaration ReferenceType TermInfo VariableDeclarator ti MethodInvocation fieldTermStack pop StatementExpression Assignment MemberReference currMap MethodInvocation fieldQuery MemberReference field MethodInvocation ti getText getFieldTermMap = IfStatement BinaryOperation == MemberReference currMap Literal null ContinueStatement End StatementExpression MethodInvocation phraseCandidate MemberReference ti add WhileStatement Literal true BlockStatement StatementExpression Assignment MemberReference ti MethodInvocation fieldTermStack pop = StatementExpression Assignment MemberReference nextMap Literal null = IfStatement BinaryOperation != MemberReference ti Literal null StatementExpression Assignment MemberReference nextMap MethodInvocation currMap MethodInvocation ti getText getTermMap = End IfStatement BinaryOperation || BinaryOperation == MemberReference ti Literal null BinaryOperation == MemberReference nextMap Literal null BlockStatement IfStatement BinaryOperation != MemberReference ti Literal null StatementExpression MethodInvocation fieldTermStack MemberReference ti push End IfStatement MethodInvocation currMap MemberReference phraseCandidate isValidTermOrPhrase BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType WeightedPhraseInfo MemberReference phraseCandidate MethodInvocation currMap getBoost MethodInvocation currMap getTermOrPhraseNumber addIfNoOverlap BlockStatement WhileStatement BinaryOperation > MethodInvocation phraseCandidate size Literal 1 BlockStatement StatementExpression MethodInvocation fieldTermStack MethodInvocation phraseCandidate removeLast push StatementExpression Assignment MemberReference currMap MethodInvocation fieldQuery MemberReference field MemberReference phraseCandidate searchPhrase = IfStatement BinaryOperation != MemberReference currMap Literal null BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType WeightedPhraseInfo MemberReference phraseCandidate MethodInvocation currMap getBoost MethodInvocation currMap getTermOrPhraseNumber addIfNoOverlap BreakStatement End End End BreakStatement BlockStatement StatementExpression MethodInvocation phraseCandidate MemberReference ti add StatementExpression Assignment MemberReference currMap MemberReference nextMap = End End End MethodDeclaration addIfNoOverlap FormalParameter ReferenceType WeightedPhraseInfo wpi ForStatement EnhancedForControl VariableDeclaration ReferenceType WeightedPhraseInfo VariableDeclarator existWpi MemberReference phraseList BlockStatement IfStatement MethodInvocation existWpi MemberReference wpi isOffsetOverlap ReturnStatement End End StatementExpression MethodInvocation phraseList MemberReference wpi add ClassDeclaration Modifier public static WeightedPhraseInfo FieldDeclaration ReferenceType String VariableDeclarator text FieldDeclaration ReferenceType List TypeArgument ReferenceType Toffs VariableDeclarator termsOffsets FieldDeclaration BasicType float VariableDeclarator boost FieldDeclaration BasicType int VariableDeclarator seqnum ConstructorDeclaration Modifier public WeightedPhraseInfo FormalParameter ReferenceType LinkedList TypeArgument ReferenceType TermInfo terms FormalParameter BasicType float boost StatementExpression ExplicitConstructorInvocation MemberReference terms MemberReference boost Literal 0 ConstructorDeclaration Modifier public WeightedPhraseInfo FormalParameter ReferenceType LinkedList TypeArgument ReferenceType TermInfo terms FormalParameter BasicType float boost FormalParameter BasicType int number StatementExpression Assignment This MemberReference boost MemberReference boost = StatementExpression Assignment This MemberReference seqnum MemberReference number = StatementExpression Assignment MemberReference termsOffsets ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Toffs MethodInvocation terms size = LocalVariableDeclaration ReferenceType TermInfo VariableDeclarator ti MethodInvocation terms Literal 0 get StatementExpression MethodInvocation termsOffsets ClassCreator ReferenceType Toffs MethodInvocation ti getStartOffset MethodInvocation ti getEndOffset add IfStatement BinaryOperation == MethodInvocation terms size Literal 1 BlockStatement StatementExpression Assignment MemberReference text MethodInvocation ti getText = ReturnStatement End LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation sb MethodInvocation ti getText append LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation ti getPosition ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MethodInvocation terms size MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ti MethodInvocation terms MemberReference i get = StatementExpression MethodInvocation sb MethodInvocation ti getText append IfStatement BinaryOperation == BinaryOperation - MethodInvocation ti getPosition MemberReference pos Literal 1 BlockStatement LocalVariableDeclaration ReferenceType Toffs VariableDeclarator to MethodInvocation termsOffsets BinaryOperation - MethodInvocation termsOffsets size Literal 1 get StatementExpression MethodInvocation to MethodInvocation ti getEndOffset setEndOffset BlockStatement StatementExpression MethodInvocation termsOffsets ClassCreator ReferenceType Toffs MethodInvocation ti getStartOffset MethodInvocation ti getEndOffset add End StatementExpression Assignment MemberReference pos MethodInvocation ti getPosition = End StatementExpression Assignment MemberReference text MethodInvocation sb toString = MethodDeclaration Modifier public BasicType int getStartOffset ReturnStatement MethodInvocation termsOffsets MemberReference startOffset Literal 0 get MethodDeclaration Modifier public BasicType int getEndOffset ReturnStatement MethodInvocation termsOffsets MemberReference endOffset BinaryOperation - MethodInvocation termsOffsets size Literal 1 get MethodDeclaration Modifier public BasicType boolean isOffsetOverlap FormalParameter ReferenceType WeightedPhraseInfo other LocalVariableDeclaration BasicType int VariableDeclarator so MethodInvocation getStartOffset LocalVariableDeclaration BasicType int VariableDeclarator eo MethodInvocation getEndOffset LocalVariableDeclaration BasicType int VariableDeclarator oso MethodInvocation other getStartOffset LocalVariableDeclaration BasicType int VariableDeclarator oeo MethodInvocation other getEndOffset IfStatement BinaryOperation && BinaryOperation <= MemberReference so MemberReference oso BinaryOperation < MemberReference oso MemberReference eo ReturnStatement Literal true End IfStatement BinaryOperation && BinaryOperation < MemberReference so MemberReference oeo BinaryOperation <= MemberReference oeo MemberReference eo ReturnStatement Literal true End IfStatement BinaryOperation && BinaryOperation <= MemberReference oso MemberReference so BinaryOperation < MemberReference so MemberReference oeo ReturnStatement Literal true End IfStatement BinaryOperation && BinaryOperation < MemberReference oso MemberReference eo BinaryOperation <= MemberReference eo MemberReference oeo ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation sb MethodInvocation Literal '(' append MethodInvocation MemberReference boost append MethodInvocation Literal "")("" append MemberReference text append ForStatement EnhancedForControl VariableDeclaration ReferenceType Toffs VariableDeclarator to MemberReference termsOffsets BlockStatement StatementExpression MethodInvocation sb MemberReference to append End StatementExpression MethodInvocation sb Literal ')' append ReturnStatement MethodInvocation sb toString ClassDeclaration Modifier public static Toffs FieldDeclaration BasicType int VariableDeclarator startOffset FieldDeclaration BasicType int VariableDeclarator endOffset ConstructorDeclaration Modifier public Toffs FormalParameter BasicType int startOffset FormalParameter BasicType int endOffset StatementExpression Assignment This MemberReference startOffset MemberReference startOffset = StatementExpression Assignment This MemberReference endOffset MemberReference endOffset = MethodDeclaration setEndOffset FormalParameter BasicType int endOffset StatementExpression Assignment This MemberReference endOffset MemberReference endOffset = MethodDeclaration Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation sb MethodInvocation MemberReference startOffset append MethodInvocation Literal ',' append MethodInvocation MemberReference endOffset append MethodInvocation Literal ')' append Literal '(' append ReturnStatement MethodInvocation sb toString",0
794,794,,1
447,447,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.Serializable Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.util.ArrayUtil ClassDeclaration Modifier public /**
 *  A Payload is metadata that can be stored together with each occurrence 
 *  of a term. This metadata is stored inline in the posting list of the
 *  specific term.  
 *  <p>
 *  To store payloads in the index a {@link TokenStream} has to be used that
 *  produces payload data.
 *  <p>
 *  Use {@link TermPositions#getPayloadLength()} and {@link TermPositions#getPayload(byte[], int)}
 *  to retrieve the payloads from the index.<br>
 *
 */ Payload FieldDeclaration /** the byte array containing the payload data */ Modifier protected BasicType byte VariableDeclarator data FieldDeclaration /** the offset within the byte array */ Modifier protected BasicType int VariableDeclarator offset FieldDeclaration /** the length of the payload data */ Modifier protected BasicType int VariableDeclarator length ConstructorDeclaration Modifier public /** Creates an empty payload and does not allocate a byte array. */ Payload ConstructorDeclaration Modifier public /**
   * Creates a new payload with the the given array as data.
   * A reference to the passed-in array is held, i. e. no 
   * copy is made.
   * 
   * @param data the data of this payload
   */ Payload FormalParameter BasicType byte data StatementExpression ExplicitConstructorInvocation MemberReference data Literal 0 MemberReference data length ConstructorDeclaration Modifier public /**
   * Creates a new payload with the the given array as data. 
   * A reference to the passed-in array is held, i. e. no 
   * copy is made.
   * 
   * @param data the data of this payload
   * @param offset the offset in the data byte array
   * @param length the length of the data
   */ Payload FormalParameter BasicType byte data FormalParameter BasicType int offset FormalParameter BasicType int length IfStatement BinaryOperation || BinaryOperation < MemberReference offset Literal 0 BinaryOperation > BinaryOperation + MemberReference offset MemberReference length MemberReference data length BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException End StatementExpression Assignment This MemberReference data MemberReference data = StatementExpression Assignment This MemberReference offset MemberReference offset = StatementExpression Assignment This MemberReference length MemberReference length = MethodDeclaration /**
   * Sets this payloads data. 
   * A reference to the passed-in array is held, i. e. no 
   * copy is made.
   */ Modifier public setData FormalParameter BasicType byte data StatementExpression MethodInvocation MemberReference data Literal 0 MemberReference data length setData MethodDeclaration /**
   * Sets this payloads data. 
   * A reference to the passed-in array is held, i. e. no 
   * copy is made.
   */ Modifier public setData FormalParameter BasicType byte data FormalParameter BasicType int offset FormalParameter BasicType int length StatementExpression Assignment This MemberReference data MemberReference data = StatementExpression Assignment This MemberReference offset MemberReference offset = StatementExpression Assignment This MemberReference length MemberReference length = MethodDeclaration /**
   * Returns a reference to the underlying byte array
   * that holds this payloads data.
   */ Modifier public BasicType byte getData ReturnStatement This MemberReference data MethodDeclaration /**
   * Returns the offset in the underlying byte array 
   */ Modifier public BasicType int getOffset ReturnStatement This MemberReference offset MethodDeclaration /**
   * Returns the length of the payload data. 
   */ Modifier public BasicType int length ReturnStatement This MemberReference length MethodDeclaration /**
   * Returns the byte at the given index.
   */ Modifier public BasicType byte byteAt FormalParameter BasicType int index IfStatement BinaryOperation && BinaryOperation <= Literal 0 MemberReference index BinaryOperation < MemberReference index This MemberReference length BlockStatement ReturnStatement This MemberReference data ArraySelector BinaryOperation + This MemberReference offset MemberReference index End ThrowStatement ClassCreator ReferenceType ArrayIndexOutOfBoundsException MemberReference index MethodDeclaration /**
   * Allocates a new byte array, copies the payload data into it and returns it. 
   */ Modifier public BasicType byte toByteArray LocalVariableDeclaration BasicType byte VariableDeclarator retArray ArrayCreator BasicType byte This MemberReference length StatementExpression MethodInvocation System This MemberReference data This MemberReference offset MemberReference retArray Literal 0 This MemberReference length arraycopy ReturnStatement MemberReference retArray MethodDeclaration /**
   * Copies the payload data to a byte array.
   * 
   * @param target the target byte array
   * @param targetOffset the offset in the target byte array
   */ Modifier public copyTo FormalParameter BasicType byte target FormalParameter BasicType int targetOffset IfStatement BinaryOperation > This MemberReference length BinaryOperation + MemberReference target length MemberReference targetOffset BlockStatement ThrowStatement ClassCreator ReferenceType ArrayIndexOutOfBoundsException End StatementExpression MethodInvocation System This MemberReference data This MemberReference offset MemberReference target MemberReference targetOffset This MemberReference length arraycopy MethodDeclaration /**
   * Clones this payload by creating a copy of the underlying
   * byte array.
   */ Modifier public Annotation Override ReferenceType Object clone TryStatement LocalVariableDeclaration ReferenceType Payload VariableDeclarator clone Cast ReferenceType Payload SuperMethodInvocation clone IfStatement BinaryOperation && BinaryOperation == MemberReference offset Literal 0 BinaryOperation == MemberReference length MemberReference data length BlockStatement StatementExpression Assignment MemberReference clone data Cast BasicType byte MethodInvocation data clone = BlockStatement StatementExpression Assignment MemberReference clone data This MethodInvocation toByteArray = StatementExpression Assignment MemberReference clone offset Literal 0 = End ReturnStatement MemberReference clone CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj This ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType Payload BlockStatement LocalVariableDeclaration ReferenceType Payload VariableDeclarator other Cast ReferenceType Payload MemberReference obj IfStatement BinaryOperation == MemberReference length MemberReference other length BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference length MemberReference ++ i IfStatement BinaryOperation != MemberReference ArraySelector BinaryOperation + MemberReference offset MemberReference i data MemberReference other ArraySelector BinaryOperation + MemberReference other offset MemberReference i data ReturnStatement Literal false End End ReturnStatement Literal true ReturnStatement Literal false End ReturnStatement Literal false End MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement MethodInvocation ArrayUtil MemberReference data MemberReference offset BinaryOperation + MemberReference offset MemberReference length hashCode ReferenceType Serializable ReferenceType Cloneable",1
751,751,,1
272,272,CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier final FormatPostingsTermsWriter FieldDeclaration Modifier final ReferenceType FormatPostingsFieldsWriter VariableDeclarator parent FieldDeclaration Modifier final ReferenceType FormatPostingsDocsWriter VariableDeclarator docsWriter FieldDeclaration Modifier final ReferenceType TermInfosWriter VariableDeclarator termsOut FieldDeclaration ReferenceType FieldInfo VariableDeclarator fieldInfo ConstructorDeclaration FormatPostingsTermsWriter FormalParameter ReferenceType SegmentWriteState state FormalParameter ReferenceType FormatPostingsFieldsWriter parent IOException StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference parent MemberReference parent = StatementExpression Assignment MemberReference termsOut MemberReference parent termsOut = StatementExpression Assignment MemberReference docsWriter ClassCreator ReferenceType FormatPostingsDocsWriter MemberReference state This = MethodDeclaration setField FormalParameter ReferenceType FieldInfo fieldInfo StatementExpression Assignment This MemberReference fieldInfo MemberReference fieldInfo = StatementExpression MethodInvocation docsWriter MemberReference fieldInfo setField FieldDeclaration BasicType char VariableDeclarator currentTerm FieldDeclaration BasicType int VariableDeclarator currentTermStart FieldDeclaration BasicType long VariableDeclarator freqStart FieldDeclaration BasicType long VariableDeclarator proxStart MethodDeclaration /** Adds a new term in this field */ Annotation Override ReferenceType FormatPostingsDocsConsumer addTerm FormalParameter BasicType char text FormalParameter BasicType int start StatementExpression Assignment MemberReference currentTerm MemberReference text = StatementExpression Assignment MemberReference currentTermStart MemberReference start = StatementExpression Assignment MemberReference freqStart MethodInvocation docsWriter.out getFilePointer = IfStatement BinaryOperation != MemberReference docsWriter.posWriter out Literal null StatementExpression Assignment MemberReference proxStart MethodInvocation docsWriter.posWriter.out getFilePointer = End StatementExpression MethodInvocation parent.skipListWriter resetSkip ReturnStatement MemberReference docsWriter MethodDeclaration /** Called when we are done adding terms to this field */ Annotation Override finish MethodDeclaration close IOException StatementExpression MethodInvocation docsWriter close ReferenceType FormatPostingsTermsConsumer,1
402,402,"CompilationUnit PackageDeclaration org.apache.lucene.search.regex Import org.apache.regexp.RE Import org.apache.regexp.RegexpTunnel ClassDeclaration Modifier public /**
 * Implementation tying <a href=""http://jakarta.apache.org/regexp"">Jakarta Regexp</a>
 * to RegexQuery.  Thanks to some internals of Jakarta Regexp, this
 * has a solid {@link #prefix} implementation.
 */ JakartaRegexpCapabilities FieldDeclaration Modifier private ReferenceType RE VariableDeclarator regexp FieldDeclaration Modifier private BasicType int VariableDeclarator flags MemberReference RE MATCH_NORMAL FieldDeclaration /**
   * Flag to specify normal, case-sensitive matching behaviour. This is the default.
   */ Modifier public final static BasicType int VariableDeclarator FLAG_MATCH_NORMAL MemberReference RE MATCH_NORMAL FieldDeclaration /**
   * Flag to specify that matching should be case-independent (folded)
   */ Modifier public final static BasicType int VariableDeclarator FLAG_MATCH_CASEINDEPENDENT MemberReference RE MATCH_CASEINDEPENDENT ConstructorDeclaration Modifier public /**
   * Constructs a RegexCapabilities with the default MATCH_NORMAL match style.
   */ JakartaRegexpCapabilities ConstructorDeclaration Modifier public /**
   * Constructs a RegexCapabilities with the provided match flags.
   * Multiple flags should be ORed together.
   * 
   * @param flags The matching style
   */ JakartaRegexpCapabilities FormalParameter BasicType int flags StatementExpression Assignment This MemberReference flags MemberReference flags = MethodDeclaration Modifier public compile FormalParameter ReferenceType String pattern StatementExpression Assignment MemberReference regexp ClassCreator ReferenceType RE MemberReference pattern This MemberReference flags = MethodDeclaration Modifier public BasicType boolean match FormalParameter ReferenceType String string ReturnStatement MethodInvocation regexp MemberReference string match MethodDeclaration Modifier public ReferenceType String prefix LocalVariableDeclaration BasicType char VariableDeclarator prefix MethodInvocation RegexpTunnel MemberReference regexp getPrefix ReturnStatement TernaryExpression BinaryOperation == MemberReference prefix Literal null Literal null ClassCreator ReferenceType String MemberReference prefix MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation == This MemberReference o ReturnStatement Literal true End IfStatement BinaryOperation || BinaryOperation == MemberReference o Literal null BinaryOperation != MethodInvocation getClass MethodInvocation o getClass ReturnStatement Literal false End LocalVariableDeclaration Modifier final ReferenceType JakartaRegexpCapabilities VariableDeclarator that Cast ReferenceType JakartaRegexpCapabilities MemberReference o IfStatement TernaryExpression BinaryOperation != MemberReference regexp Literal null MethodInvocation ! regexp MemberReference that regexp equals BinaryOperation != MemberReference that regexp Literal null ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement TernaryExpression BinaryOperation != MemberReference regexp Literal null MethodInvocation regexp hashCode Literal 0 ReferenceType RegexCapabilities",1
339,339,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import org.apache.lucene.queryParser.core.config.FieldConfig Import org.apache.lucene.queryParser.core.config.FieldConfigListener Import org.apache.lucene.queryParser.core.config.QueryConfigHandler ClassDeclaration Modifier public /**
 * This listener listens for every field configuration request and assign a
 * {@link BoostAttribute} to the equivalent {@link FieldConfig} based on a
 * defined map: fieldName -> boostValue store in {@link FieldBoostMapAttribute}
 * in the {@link FieldBoostMapAttribute}.
 * 
 * @see BoostAttribute
 * @see FieldBoostMapAttribute
 * @see FieldConfig
 * @see FieldConfigListener
 */ FieldBoostMapFCListener FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal - 5929802948798314067L FieldDeclaration Modifier private ReferenceType QueryConfigHandler VariableDeclarator config Literal null ConstructorDeclaration Modifier public FieldBoostMapFCListener FormalParameter ReferenceType QueryConfigHandler config StatementExpression Assignment This MemberReference config MemberReference config = MethodDeclaration Modifier public buildFieldConfig FormalParameter ReferenceType FieldConfig fieldConfig IfStatement This MemberReference config MethodInvocation ClassReference ReferenceType FieldBoostMapAttribute hasAttribute BlockStatement LocalVariableDeclaration ReferenceType FieldBoostMapAttribute VariableDeclarator fieldBoostMapAttr This MemberReference config MethodInvocation ClassReference ReferenceType FieldBoostMapAttribute getAttribute LocalVariableDeclaration ReferenceType BoostAttribute VariableDeclarator boostAttr MethodInvocation fieldConfig ClassReference ReferenceType BoostAttribute addAttribute LocalVariableDeclaration ReferenceType Float VariableDeclarator boost MethodInvocation fieldBoostMapAttr MethodInvocation MethodInvocation fieldConfig getFieldName get getFieldBoostMap IfStatement BinaryOperation != MemberReference boost Literal null BlockStatement StatementExpression MethodInvocation boostAttr MethodInvocation boost floatValue setBoost End End ReferenceType FieldConfigListener",0
371,371,"CompilationUnit PackageDeclaration org.apache.lucene.search.function Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.function.DocValues Import java.io.IOException Import java.io.Serializable ClassDeclaration Modifier public abstract /**
 * Expert: source of values for basic function queries.
 * <P>At its default/simplest form, values - one per doc - are used as the score of that doc.
 * <P>Values are instantiated as 
 * {@link org.apache.lucene.search.function.DocValues DocValues} for a particular reader.
 * <P>ValueSource implementations differ in RAM requirements: it would always be a factor
 * of the number of documents, but for each document the number of bytes can be 1, 2, 4, or 8. 
 *
 * <p><font color=""#FF0000"">
 * WARNING: The status of the <b>search.function</b> package is experimental. 
 * The APIs introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 *
 *
 */ ValueSource MethodDeclaration /**
   * Return the DocValues used by the function query.
   * @param reader the IndexReader used to read these values.
   * If any caching is involved, that caching would also be IndexReader based.  
   * @throws IOException for any error.
   */ Modifier public abstract ReferenceType DocValues getValues FormalParameter ReferenceType IndexReader reader IOException MethodDeclaration /** 
   * description of field, used in explain() 
   */ Modifier public abstract ReferenceType String description MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement MethodInvocation description MethodDeclaration /**
   * Needed for possible caching of query results - used by {@link ValueSourceQuery#equals(Object)}.
   * @see Object#equals(Object)
   */ Modifier public abstract Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o MethodDeclaration /**
   * Needed for possible caching of query results - used by {@link ValueSourceQuery#hashCode()}.
   * @see Object#hashCode()
   */ Modifier public abstract Annotation Override BasicType int hashCode ReferenceType Serializable",0
311,311,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import java.util.Locale Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor Import org.apache.lucene.util.AttributeImpl ClassDeclaration Modifier public /**
 * This attribute is used by processor {@link ParametricRangeQueryNodeProcessor}
 * and must be defined in the {@link QueryConfigHandler}. This attribute tells
 * the processor what is the default {@link Locale} used to parse a date. <br/>
 * 
 * @see org.apache.lucene.queryParser.standard.config.LocaleAttribute
 */ LocaleAttributeImpl FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal - 6804760312720049526L FieldDeclaration Modifier private ReferenceType Locale VariableDeclarator locale MethodInvocation Locale getDefault ConstructorDeclaration Modifier public LocaleAttributeImpl StatementExpression Assignment MemberReference locale MethodInvocation Locale getDefault = MethodDeclaration Modifier public setLocale FormalParameter ReferenceType Locale locale StatementExpression Assignment This MemberReference locale MemberReference locale = MethodDeclaration Modifier public ReferenceType Locale getLocale ReturnStatement This MemberReference locale MethodDeclaration Modifier public Annotation Override clear ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override copyTo FormalParameter ReferenceType AttributeImpl target ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object other IfStatement BinaryOperation instanceof MemberReference other ReferenceType LocaleAttributeImpl BlockStatement LocalVariableDeclaration ReferenceType LocaleAttributeImpl VariableDeclarator localeAttr Cast ReferenceType LocaleAttributeImpl MemberReference other IfStatement BinaryOperation || BinaryOperation == MemberReference localeAttr locale This MemberReference locale BinaryOperation && BinaryOperation && BinaryOperation != This MemberReference locale Literal null BinaryOperation != MemberReference localeAttr locale Literal null This MemberReference locale MethodInvocation MemberReference localeAttr locale equals BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement TernaryExpression BinaryOperation == This MemberReference locale Literal null Literal 0 This MemberReference locale MethodInvocation hashCode MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""<localeAttribute locale="" This MemberReference locale Literal ""/>"" ReferenceType AttributeImpl ReferenceType LocaleAttribute",0
177,177,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.document.Document Import org.apache.lucene.document.FieldSelector Import org.apache.lucene.search.Similarity Import org.apache.lucene.store  Import java.io.File Import java.io.FileOutputStream Import java.io.IOException Import java.io.Closeable Import java.util.Arrays Import java.util.Collection Import java.util.Map ClassDeclaration Modifier public abstract /** IndexReader is an abstract class, providing an interface for accessing an
 index.  Search of an index is done entirely through this abstract interface,
 so that any subclass which implements it is searchable.

 <p> Concrete subclasses of IndexReader are usually constructed with a call to
 one of the static <code>open()</code> methods, e.g. {@link
 #open(Directory, boolean)}.

 <p> For efficiency, in this API documents are often referred to via
 <i>document numbers</i>, non-negative integers which each name a unique
 document in the index.  These document numbers are ephemeral--they may change
 as documents are added to and deleted from an index.  Clients should thus not
 rely on a given document having the same number between sessions.

 <p> An IndexReader can be opened on a directory for which an IndexWriter is
 opened already, but it cannot be used to delete documents from the index then.

 <p>
 <b>NOTE</b>: for backwards API compatibility, several methods are not listed 
 as abstract, but have no useful implementations in this base class and 
 instead always throw UnsupportedOperationException.  Subclasses are 
 strongly encouraged to override these methods, but in many cases may not 
 need to.
 </p>

 <p>

 <b>NOTE</b>: as of 2.4, it's possible to open a read-only
 IndexReader using the static open methods that accept the 
 boolean readOnly parameter.  Such a reader has better 
 concurrency as it's not necessary to synchronize on the 
 isDeleted method.  You must specify false if you want to 
 make changes with the resulting IndexReader.
 </p>

 <a name=""thread-safety""></a><p><b>NOTE</b>: {@link
 <code>IndexReader</code>} instances are completely thread
 safe, meaning multiple threads can call any of its methods,
 concurrently.  If your application requires external
 synchronization, you should <b>not</b> synchronize on the
 <code>IndexReader</code> instance; use your own
 (non-Lucene) objects instead.
*/ IndexReader ClassDeclaration Modifier public final static /**
   * Constants describing field properties, for example used for
   * {@link IndexReader#getFieldNames(FieldOption)}.
   */ FieldOption FieldDeclaration Modifier private ReferenceType String VariableDeclarator option ConstructorDeclaration Modifier private FieldOption ConstructorDeclaration Modifier private FieldOption FormalParameter ReferenceType String option StatementExpression Assignment This MemberReference option MemberReference option = MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement This MemberReference option FieldDeclaration /** All fields */ Modifier public final static ReferenceType FieldOption VariableDeclarator ALL ClassCreator ReferenceType FieldOption Literal ""ALL"" FieldDeclaration /** All indexed fields */ Modifier public final static ReferenceType FieldOption VariableDeclarator INDEXED ClassCreator ReferenceType FieldOption Literal ""INDEXED"" FieldDeclaration /** All fields that store payloads */ Modifier public final static ReferenceType FieldOption VariableDeclarator STORES_PAYLOADS ClassCreator ReferenceType FieldOption Literal ""STORES_PAYLOADS"" FieldDeclaration /** All fields that omit tf */ Modifier public final static ReferenceType FieldOption VariableDeclarator OMIT_TERM_FREQ_AND_POSITIONS ClassCreator ReferenceType FieldOption Literal ""OMIT_TERM_FREQ_AND_POSITIONS"" FieldDeclaration /** All fields which are not indexed */ Modifier public final static ReferenceType FieldOption VariableDeclarator UNINDEXED ClassCreator ReferenceType FieldOption Literal ""UNINDEXED"" FieldDeclaration /** All fields which are indexed with termvectors enabled */ Modifier public final static ReferenceType FieldOption VariableDeclarator INDEXED_WITH_TERMVECTOR ClassCreator ReferenceType FieldOption Literal ""INDEXED_WITH_TERMVECTOR"" FieldDeclaration /** All fields which are indexed but don't have termvectors enabled */ Modifier public final static ReferenceType FieldOption VariableDeclarator INDEXED_NO_TERMVECTOR ClassCreator ReferenceType FieldOption Literal ""INDEXED_NO_TERMVECTOR"" FieldDeclaration /** All fields with termvectors enabled. Please note that only standard termvector fields are returned */ Modifier public final static ReferenceType FieldOption VariableDeclarator TERMVECTOR ClassCreator ReferenceType FieldOption Literal ""TERMVECTOR"" FieldDeclaration /** All fields with termvectors with position values enabled */ Modifier public final static ReferenceType FieldOption VariableDeclarator TERMVECTOR_WITH_POSITION ClassCreator ReferenceType FieldOption Literal ""TERMVECTOR_WITH_POSITION"" FieldDeclaration /** All fields with termvectors with offset values enabled */ Modifier public final static ReferenceType FieldOption VariableDeclarator TERMVECTOR_WITH_OFFSET ClassCreator ReferenceType FieldOption Literal ""TERMVECTOR_WITH_OFFSET"" FieldDeclaration /** All fields with termvectors with offset values and position values enabled */ Modifier public final static ReferenceType FieldOption VariableDeclarator TERMVECTOR_WITH_POSITION_OFFSET ClassCreator ReferenceType FieldOption Literal ""TERMVECTOR_WITH_POSITION_OFFSET"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator closed FieldDeclaration Modifier protected BasicType boolean VariableDeclarator hasChanges FieldDeclaration Modifier private BasicType int VariableDeclarator refCount FieldDeclaration Modifier static BasicType int VariableDeclarator DEFAULT_TERMS_INDEX_DIVISOR Literal 1 MethodDeclaration /** Expert: returns the current refCount for this reader */ Modifier public synchronized BasicType int getRefCount ReturnStatement MemberReference refCount MethodDeclaration /**
   * Expert: increments the refCount of this IndexReader
   * instance.  RefCounts are used to determine when a
   * reader can be closed safely, i.e. as soon as there are
   * no more references.  Be sure to always call a
   * corresponding {@link #decRef}, in a finally clause;
   * otherwise the reader may never be closed.  Note that
   * {@link #close} simply calls decRef(), which means that
   * the IndexReader will not really be closed until {@link
   * #decRef} has been called for all outstanding
   * references.
   *
   * @see #decRef
   */ Modifier public synchronized incRef AssertStatement BinaryOperation > MemberReference refCount Literal 0 StatementExpression MethodInvocation ensureOpen StatementExpression MemberReference ++ refCount MethodDeclaration /**
   * Expert: decreases the refCount of this IndexReader
   * instance.  If the refCount drops to 0, then pending
   * changes (if any) are committed to the index and this
   * reader is closed.
   * 
   * @throws IOException in case an IOException occurs in commit() or doClose()
   *
   * @see #incRef
   */ Modifier public synchronized decRef IOException AssertStatement BinaryOperation > MemberReference refCount Literal 0 StatementExpression MethodInvocation ensureOpen IfStatement BinaryOperation == MemberReference refCount Literal 1 BlockStatement StatementExpression MethodInvocation commit StatementExpression MethodInvocation doClose End StatementExpression MemberReference -- refCount ConstructorDeclaration Modifier protected IndexReader StatementExpression Assignment MemberReference refCount Literal 1 = MethodDeclaration /**
   * @throws AlreadyClosedException if this IndexReader is closed
   */ Modifier final protected ensureOpen AlreadyClosedException IfStatement BinaryOperation <= MemberReference refCount Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType AlreadyClosedException Literal ""this IndexReader is closed"" End MethodDeclaration /** Returns a IndexReader reading the index in the given
   *  Directory, with readOnly=true.
   * @param directory the index directory
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType IndexReader open FormalParameter Modifier final ReferenceType Directory directory CorruptIndexException IOException ReturnStatement MethodInvocation MemberReference directory Literal null Literal null Literal true MemberReference DEFAULT_TERMS_INDEX_DIVISOR open MethodDeclaration /** Returns an IndexReader reading the index in the given
   *  Directory.  You should pass readOnly=true, since it
   *  gives much better concurrent performance, unless you
   *  intend to do write operations (delete documents or
   *  change norms) with the reader.
   * @param directory the index directory
   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType IndexReader open FormalParameter Modifier final ReferenceType Directory directory FormalParameter BasicType boolean readOnly CorruptIndexException IOException ReturnStatement MethodInvocation MemberReference directory Literal null Literal null MemberReference readOnly MemberReference DEFAULT_TERMS_INDEX_DIVISOR open MethodDeclaration /** Expert: returns an IndexReader reading the index in the given
   *  {@link IndexCommit}.  You should pass readOnly=true, since it
   *  gives much better concurrent performance, unless you
   *  intend to do write operations (delete documents or
   *  change norms) with the reader.
   * @param commit the commit point to open
   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType IndexReader open FormalParameter Modifier final ReferenceType IndexCommit commit FormalParameter BasicType boolean readOnly CorruptIndexException IOException ReturnStatement MethodInvocation MethodInvocation commit getDirectory Literal null MemberReference commit MemberReference readOnly MemberReference DEFAULT_TERMS_INDEX_DIVISOR open MethodDeclaration /** Expert: returns an IndexReader reading the index in
   *  the given Directory, with a custom {@link
   *  IndexDeletionPolicy}.  You should pass readOnly=true,
   *  since it gives much better concurrent performance,
   *  unless you intend to do write operations (delete
   *  documents or change norms) with the reader.
   * @param directory the index directory
   * @param deletionPolicy a custom deletion policy (only used
   *  if you use this reader to perform deletes or to set
   *  norms); see {@link IndexWriter} for details.
   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType IndexReader open FormalParameter Modifier final ReferenceType Directory directory FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter BasicType boolean readOnly CorruptIndexException IOException ReturnStatement MethodInvocation MemberReference directory MemberReference deletionPolicy Literal null MemberReference readOnly MemberReference DEFAULT_TERMS_INDEX_DIVISOR open MethodDeclaration /** Expert: returns an IndexReader reading the index in
   *  the given Directory, with a custom {@link
   *  IndexDeletionPolicy}.  You should pass readOnly=true,
   *  since it gives much better concurrent performance,
   *  unless you intend to do write operations (delete
   *  documents or change norms) with the reader.
   * @param directory the index directory
   * @param deletionPolicy a custom deletion policy (only used
   *  if you use this reader to perform deletes or to set
   *  norms); see {@link IndexWriter} for details.
   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader
   * @param termInfosIndexDivisor Subsamples which indexed
   *  terms are loaded into RAM. This has the same effect as {@link
   *  IndexWriter#setTermIndexInterval} except that setting
   *  must be done at indexing time while this setting can be
   *  set per reader.  When set to N, then one in every
   *  N*termIndexInterval terms in the index is loaded into
   *  memory.  By setting this to a value > 1 you can reduce
   *  memory usage, at the expense of higher latency when
   *  loading a TermInfo.  The default value is 1.  Set this
   *  to -1 to skip loading the terms index entirely.
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType IndexReader open FormalParameter Modifier final ReferenceType Directory directory FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter BasicType boolean readOnly FormalParameter BasicType int termInfosIndexDivisor CorruptIndexException IOException ReturnStatement MethodInvocation MemberReference directory MemberReference deletionPolicy Literal null MemberReference readOnly MemberReference termInfosIndexDivisor open MethodDeclaration /** Expert: returns an IndexReader reading the index in
   *  the given Directory, using a specific commit and with
   *  a custom {@link IndexDeletionPolicy}.  You should pass
   *  readOnly=true, since it gives much better concurrent
   *  performance, unless you intend to do write operations
   *  (delete documents or change norms) with the reader.
   * @param commit the specific {@link IndexCommit} to open;
   * see {@link IndexReader#listCommits} to list all commits
   * in a directory
   * @param deletionPolicy a custom deletion policy (only used
   *  if you use this reader to perform deletes or to set
   *  norms); see {@link IndexWriter} for details.
   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType IndexReader open FormalParameter Modifier final ReferenceType IndexCommit commit FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter BasicType boolean readOnly CorruptIndexException IOException ReturnStatement MethodInvocation MethodInvocation commit getDirectory MemberReference deletionPolicy MemberReference commit MemberReference readOnly MemberReference DEFAULT_TERMS_INDEX_DIVISOR open MethodDeclaration /** Expert: returns an IndexReader reading the index in
   *  the given Directory, using a specific commit and with
   *  a custom {@link IndexDeletionPolicy}.  You should pass
   *  readOnly=true, since it gives much better concurrent
   *  performance, unless you intend to do write operations
   *  (delete documents or change norms) with the reader.
   * @param commit the specific {@link IndexCommit} to open;
   * see {@link IndexReader#listCommits} to list all commits
   * in a directory
   * @param deletionPolicy a custom deletion policy (only used
   *  if you use this reader to perform deletes or to set
   *  norms); see {@link IndexWriter} for details.
   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader
   * @param termInfosIndexDivisor Subsamples which indexed
   *  terms are loaded into RAM. This has the same effect as {@link
   *  IndexWriter#setTermIndexInterval} except that setting
   *  must be done at indexing time while this setting can be
   *  set per reader.  When set to N, then one in every
   *  N*termIndexInterval terms in the index is loaded into
   *  memory.  By setting this to a value > 1 you can reduce
   *  memory usage, at the expense of higher latency when
   *  loading a TermInfo.  The default value is 1.  Set this
   *  to -1 to skip loading the terms index entirely.
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType IndexReader open FormalParameter Modifier final ReferenceType IndexCommit commit FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter BasicType boolean readOnly FormalParameter BasicType int termInfosIndexDivisor CorruptIndexException IOException ReturnStatement MethodInvocation MethodInvocation commit getDirectory MemberReference deletionPolicy MemberReference commit MemberReference readOnly MemberReference termInfosIndexDivisor open MethodDeclaration Modifier private static ReferenceType IndexReader open FormalParameter Modifier final ReferenceType Directory directory FormalParameter Modifier final ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter Modifier final ReferenceType IndexCommit commit FormalParameter Modifier final BasicType boolean readOnly FormalParameter BasicType int termInfosIndexDivisor CorruptIndexException IOException ReturnStatement MethodInvocation DirectoryReader MemberReference directory MemberReference deletionPolicy MemberReference commit MemberReference readOnly MemberReference termInfosIndexDivisor open MethodDeclaration /**
   * Refreshes an IndexReader if the index has changed since this instance 
   * was (re)opened. 
   * <p>
   * Opening an IndexReader is an expensive operation. This method can be used
   * to refresh an existing IndexReader to reduce these costs. This method 
   * tries to only load segments that have changed or were created after the 
   * IndexReader was (re)opened.
   * <p>
   * If the index has not changed since this instance was (re)opened, then this
   * call is a NOOP and returns this instance. Otherwise, a new instance is 
   * returned. The old instance is <b>not</b> closed and remains usable.<br>
   * <p>   
   * If the reader is reopened, even though they share
   * resources internally, it's safe to make changes
   * (deletions, norms) with the new reader.  All shared
   * mutable state obeys ""copy on write"" semantics to ensure
   * the changes are not seen by other readers.
   * <p>
   * You can determine whether a reader was actually reopened by comparing the
   * old instance with the instance returned by this method: 
   * <pre>
   * IndexReader reader = ... 
   * ...
   * IndexReader newReader = r.reopen();
   * if (newReader != reader) {
   * ...     // reader was reopened
   *   reader.close(); 
   * }
   * reader = newReader;
   * ...
   * </pre>
   *
   * Be sure to synchronize that code so that other threads,
   * if present, can never use reader after it has been
   * closed and before it's switched to newReader.
   *
   * <p><b>NOTE</b>: If this reader is a near real-time
   * reader (obtained from {@link IndexWriter#getReader()},
   * reopen() will simply call writer.getReader() again for
   * you, though this may change in the future.
   * 
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public synchronized ReferenceType IndexReader reopen CorruptIndexException IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support reopen()."" MethodDeclaration /** Just like {@link #reopen()}, except you can change the
   *  readOnly of the original reader.  If the index is
   *  unchanged but readOnly is different then a new reader
   *  will be returned. */ Modifier public synchronized ReferenceType IndexReader reopen FormalParameter BasicType boolean openReadOnly CorruptIndexException IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support reopen()."" MethodDeclaration /** Expert: reopen this reader on a specific commit point.
   *  This always returns a readOnly reader.  If the
   *  specified commit point matches what this reader is
   *  already on, and this reader is already readOnly, then
   *  this same instance is returned; if it is not already
   *  readOnly, a readOnly clone is returned. */ Modifier public synchronized ReferenceType IndexReader reopen FormalParameter Modifier final ReferenceType IndexCommit commit CorruptIndexException IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support reopen(IndexCommit)."" MethodDeclaration /**
   * Efficiently clones the IndexReader (sharing most
   * internal state).
   * <p>
   * On cloning a reader with pending changes (deletions,
   * norms), the original reader transfers its write lock to
   * the cloned reader.  This means only the cloned reader
   * may make further changes to the index, and commit the
   * changes to the index on close, but the old reader still
   * reflects all changes made up until it was cloned.
   * <p>
   * Like {@link #reopen()}, it's safe to make changes to
   * either the original or the cloned reader: all shared
   * mutable state obeys ""copy on write"" semantics to ensure
   * the changes are not seen by other readers.
   * <p>
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public synchronized Annotation Override ReferenceType Object clone ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not implement clone()"" MethodDeclaration /**
   * Clones the IndexReader and optionally changes readOnly.  A readOnly 
   * reader cannot open a writeable reader.  
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public synchronized ReferenceType IndexReader clone FormalParameter BasicType boolean openReadOnly CorruptIndexException IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not implement clone()"" MethodDeclaration /** 
   * Returns the directory associated with this index.  The Default 
   * implementation returns the directory specified by subclasses when 
   * delegating to the IndexReader(Directory) constructor, or throws an 
   * UnsupportedOperationException if one was not specified.
   * @throws UnsupportedOperationException if no directory
   */ Modifier public ReferenceType Directory directory StatementExpression MethodInvocation ensureOpen ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support this method."" MethodDeclaration /**
   * Returns the time the index in the named directory was last modified. 
   * Do not use this to check whether the reader is still up-to-date, use
   * {@link #isCurrent()} instead. 
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static BasicType long lastModified FormalParameter Modifier final ReferenceType Directory directory2 CorruptIndexException IOException ReturnStatement Cast ReferenceType Long ClassCreator MethodInvocation run ReferenceType SegmentInfos ReferenceType FindSegmentsFile MemberReference directory2 MethodDeclaration Modifier public Annotation Override ReferenceType Object doBody FormalParameter ReferenceType String segmentFileName IOException ReturnStatement MethodInvocation Long MethodInvocation directory2 MemberReference segmentFileName fileModified valueOf MethodDeclaration /**
   * Reads version number from segments files. The version number is
   * initialized with a timestamp and then increased by one for each change of
   * the index.
   * 
   * @param directory where the index resides.
   * @return version number.
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static BasicType long getCurrentVersion FormalParameter ReferenceType Directory directory CorruptIndexException IOException ReturnStatement MethodInvocation SegmentInfos MemberReference directory readCurrentVersion MethodDeclaration /**
   * Reads commitUserData, previously passed to {@link
   * IndexWriter#commit(Map)}, from current index
   * segments file.  This will return null if {@link
   * IndexWriter#commit(Map)} has never been called for
   * this index.
   * 
   * @param directory where the index resides.
   * @return commit userData.
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   *
   * @see #getCommitUserData()
   */ Modifier public static ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String getCommitUserData FormalParameter ReferenceType Directory directory CorruptIndexException IOException ReturnStatement MethodInvocation SegmentInfos MemberReference directory readCurrentUserData MethodDeclaration /**
   * Version number when this IndexReader was opened. Not
   * implemented in the IndexReader base class.
   *
   * <p>If this reader is based on a Directory (ie, was
   * created by calling {@link #open}, or {@link #reopen} on
   * a reader based on a Directory), then this method
   * returns the version recorded in the commit that the
   * reader opened.  This version is advanced every time
   * {@link IndexWriter#commit} is called.</p>
   *
   * <p>If instead this reader is a near real-time reader
   * (ie, obtained by a call to {@link
   * IndexWriter#getReader}, or by calling {@link #reopen}
   * on a near real-time reader), then this method returns
   * the version of the last commit done by the writer.
   * Note that even as further changes are made with the
   * writer, the version will not changed until a commit is
   * completed.  Thus, you should not rely on this method to
   * determine when a near real-time reader should be
   * opened.  Use {@link #isCurrent} instead.</p>
   *
   * @throws UnsupportedOperationException unless overridden in subclass
   */ Modifier public BasicType long getVersion ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support this method."" MethodDeclaration /**
   * Retrieve the String userData optionally passed to
   * IndexWriter#commit.  This will return null if {@link
   * IndexWriter#commit(Map)} has never been called for
   * this index.
   *
   * @see #getCommitUserData(Directory)
   */ Modifier public ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String getCommitUserData ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support this method."" MethodDeclaration /**
   * Check whether any new changes have occurred to the
   * index since this reader was opened.
   *
   * <p>If this reader is based on a Directory (ie, was
   * created by calling {@link #open}, or {@link #reopen} on
   * a reader based on a Directory), then this method checks
   * if any further commits (see {@link IndexWriter#commit}
   * have occurred in that directory).</p>
   *
   * <p>If instead this reader is a near real-time reader
   * (ie, obtained by a call to {@link
   * IndexWriter#getReader}, or by calling {@link #reopen}
   * on a near real-time reader), then this method checks if
   * either a new commmit has occurred, or any new
   * uncommitted changes have taken place via the writer.
   * Note that even if the writer has only performed
   * merging, this method will still return false.</p>
   *
   * <p>In any event, if this returns false, you should call
   * {@link #reopen} to get a new reader that sees the
   * changes.</p>
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException           if there is a low-level IO error
   * @throws UnsupportedOperationException unless overridden in subclass
   */ Modifier public BasicType boolean isCurrent CorruptIndexException IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support this method."" MethodDeclaration /**
   * Checks is the index is optimized (if it has a single segment and 
   * no deletions).  Not implemented in the IndexReader base class.
   * @return <code>true</code> if the index is optimized; <code>false</code> otherwise
   * @throws UnsupportedOperationException unless overridden in subclass
   */ Modifier public BasicType boolean isOptimized ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support this method."" MethodDeclaration /**
   * Return an array of term frequency vectors for the specified document.
   * The array contains a vector for each vectorized field in the document.
   * Each vector contains terms and frequencies for all terms in a given vectorized field.
   * If no such fields existed, the method returns null. The term vectors that are
   * returned may either be of type {@link TermFreqVector}
   * or of type {@link TermPositionVector} if
   * positions or offsets have been stored.
   * 
   * @param docNumber document for which term frequency vectors are returned
   * @return array of term frequency vectors. May be null if no term vectors have been
   *  stored for the specified document.
   * @throws IOException if index cannot be accessed
   * @see org.apache.lucene.document.Field.TermVector
   */ Modifier public abstract ReferenceType TermFreqVector getTermFreqVectors FormalParameter BasicType int docNumber IOException MethodDeclaration /**
   * Return a term frequency vector for the specified document and field. The
   * returned vector contains terms and frequencies for the terms in
   * the specified field of this document, if the field had the storeTermVector
   * flag set. If termvectors had been stored with positions or offsets, a 
   * {@link TermPositionVector} is returned.
   * 
   * @param docNumber document for which the term frequency vector is returned
   * @param field field for which the term frequency vector is returned.
   * @return term frequency vector May be null if field does not exist in the specified
   * document or term vector was not stored.
   * @throws IOException if index cannot be accessed
   * @see org.apache.lucene.document.Field.TermVector
   */ Modifier public abstract ReferenceType TermFreqVector getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType String field IOException MethodDeclaration /**
   * Load the Term Vector into a user-defined data structure instead of relying on the parallel arrays of
   * the {@link TermFreqVector}.
   * @param docNumber The number of the document to load the vector for
   * @param field The name of the field to load
   * @param mapper The {@link TermVectorMapper} to process the vector.  Must not be null
   * @throws IOException if term vectors cannot be accessed or if they do not exist on the field and doc. specified.
   * 
   */ Modifier public abstract getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType String field FormalParameter ReferenceType TermVectorMapper mapper IOException MethodDeclaration /**
   * Map all the term vectors for all fields in a Document
   * @param docNumber The number of the document to load the vector for
   * @param mapper The {@link TermVectorMapper} to process the vector.  Must not be null
   * @throws IOException if term vectors cannot be accessed or if they do not exist on the field and doc. specified.
   */ Modifier public abstract getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType TermVectorMapper mapper IOException MethodDeclaration /**
   * Returns <code>true</code> if an index exists at the specified directory.
   * If the directory does not exist or if there is no index in it.
   * @param  directory the directory to check for an index
   * @return <code>true</code> if an index exists; <code>false</code> otherwise
   * @throws IOException if there is a problem with accessing the index
   */ Modifier public static BasicType boolean indexExists FormalParameter ReferenceType Directory directory IOException ReturnStatement BinaryOperation != MethodInvocation SegmentInfos MemberReference directory getCurrentSegmentGeneration Literal - 1 MethodDeclaration /** Returns the number of documents in this index. */ Modifier public abstract BasicType int numDocs MethodDeclaration /** Returns one greater than the largest possible document number.
   * This may be used to, e.g., determine how big to allocate an array which
   * will have an element for every document number in an index.
   */ Modifier public abstract BasicType int maxDoc MethodDeclaration /** Returns the number of deleted documents. */ Modifier public BasicType int numDeletedDocs ReturnStatement BinaryOperation - MethodInvocation maxDoc MethodInvocation numDocs MethodDeclaration /**
   * Returns the stored fields of the <code>n</code><sup>th</sup>
   * <code>Document</code> in this index.
   * <p>
   * <b>NOTE:</b> for performance reasons, this method does not check if the
   * requested document is deleted, and therefore asking for a deleted document
   * may yield unspecified results. Usually this is not required, however you
   * can call {@link #isDeleted(int)} with the requested document ID to verify
   * the document is not deleted.
   * 
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public ReferenceType Document document FormalParameter BasicType int n CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation MemberReference n Literal null document MethodDeclaration /**
   * Get the {@link org.apache.lucene.document.Document} at the <code>n</code>
   * <sup>th</sup> position. The {@link FieldSelector} may be used to determine
   * what {@link org.apache.lucene.document.Field}s to load and how they should
   * be loaded. <b>NOTE:</b> If this Reader (more specifically, the underlying
   * <code>FieldsReader</code>) is closed before the lazy
   * {@link org.apache.lucene.document.Field} is loaded an exception may be
   * thrown. If you want the value of a lazy
   * {@link org.apache.lucene.document.Field} to be available after closing you
   * must explicitly load it or fetch the Document again with a new loader.
   * <p>
   * <b>NOTE:</b> for performance reasons, this method does not check if the
   * requested document is deleted, and therefore asking for a deleted document
   * may yield unspecified results. Usually this is not required, however you
   * can call {@link #isDeleted(int)} with the requested document ID to verify
   * the document is not deleted.
   * 
   * @param n Get the document at the <code>n</code><sup>th</sup> position
   * @param fieldSelector The {@link FieldSelector} to use to determine what
   *        Fields should be loaded on the Document. May be null, in which case
   *        all Fields will be loaded.
   * @return The stored fields of the
   *         {@link org.apache.lucene.document.Document} at the nth position
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   * @see org.apache.lucene.document.Fieldable
   * @see org.apache.lucene.document.FieldSelector
   * @see org.apache.lucene.document.SetBasedFieldSelector
   * @see org.apache.lucene.document.LoadFirstFieldSelector
   */ Modifier public abstract ReferenceType Document document FormalParameter BasicType int n FormalParameter ReferenceType FieldSelector fieldSelector CorruptIndexException IOException MethodDeclaration /** Returns true if document <i>n</i> has been deleted */ Modifier public abstract BasicType boolean isDeleted FormalParameter BasicType int n MethodDeclaration /** Returns true if any documents have been deleted */ Modifier public abstract BasicType boolean hasDeletions MethodDeclaration /** Returns true if there are norms stored for this field. */ Modifier public BasicType boolean hasNorms FormalParameter ReferenceType String field IOException StatementExpression MethodInvocation ensureOpen ReturnStatement BinaryOperation != MethodInvocation MemberReference field norms Literal null MethodDeclaration /** Returns the byte-encoded normalization factor for the named field of
   * every document.  This is used by the search code to score documents.
   *
   * @see org.apache.lucene.document.Field#setBoost(float)
   */ Modifier public abstract BasicType byte norms FormalParameter ReferenceType String field IOException MethodDeclaration /** Reads the byte-encoded normalization factor for the named field of every
   *  document.  This is used by the search code to score documents.
   *
   * @see org.apache.lucene.document.Field#setBoost(float)
   */ Modifier public abstract norms FormalParameter ReferenceType String field FormalParameter BasicType byte bytes FormalParameter BasicType int offset IOException MethodDeclaration /** Expert: Resets the normalization factor for the named field of the named
   * document.  The norm represents the product of the field's {@link
   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,
   * int) length normalization}.  Thus, to preserve the length normalization
   * values when resetting this, one should base the new value upon the old.
   *
   * <b>NOTE:</b> If this field does not store norms, then
   * this method call will silently do nothing.
   *
   * @see #norms(String)
   * @see Similarity#decodeNorm(byte)
   * @throws StaleReaderException if the index has changed
   *  since this reader was opened
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if there is a low-level IO error
   */ Modifier public synchronized setNorm FormalParameter BasicType int doc FormalParameter ReferenceType String field FormalParameter BasicType byte value StaleReaderException CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation acquireWriteLock StatementExpression Assignment MemberReference hasChanges Literal true = StatementExpression MethodInvocation MemberReference doc MemberReference field MemberReference value doSetNorm MethodDeclaration /** Implements setNorm in subclass.*/ Modifier protected abstract doSetNorm FormalParameter BasicType int doc FormalParameter ReferenceType String field FormalParameter BasicType byte value CorruptIndexException IOException MethodDeclaration /** Expert: Resets the normalization factor for the named field of the named
   * document.
   *
   * @see #norms(String)
   * @see Similarity#decodeNorm(byte)
   * 
   * @throws StaleReaderException if the index has changed
   *  since this reader was opened
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if there is a low-level IO error
   */ Modifier public setNorm FormalParameter BasicType int doc FormalParameter ReferenceType String field FormalParameter BasicType float value StaleReaderException CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation MemberReference doc MemberReference field MethodInvocation Similarity MemberReference value encodeNorm setNorm MethodDeclaration /** Returns an enumeration of all the terms in the index. The
   * enumeration is ordered by Term.compareTo(). Each term is greater
   * than all that precede it in the enumeration. Note that after
   * calling terms(), {@link TermEnum#next()} must be called
   * on the resulting enumeration before calling other methods such as
   * {@link TermEnum#term()}.
   * @throws IOException if there is a low-level IO error
   */ Modifier public abstract ReferenceType TermEnum terms IOException MethodDeclaration /** Returns an enumeration of all terms starting at a given term. If
   * the given term does not exist, the enumeration is positioned at the
   * first term greater than the supplied term. The enumeration is
   * ordered by Term.compareTo(). Each term is greater than all that
   * precede it in the enumeration.
   * @throws IOException if there is a low-level IO error
   */ Modifier public abstract ReferenceType TermEnum terms FormalParameter ReferenceType Term t IOException MethodDeclaration /** Returns the number of documents containing the term <code>t</code>.
   * @throws IOException if there is a low-level IO error
   */ Modifier public abstract BasicType int docFreq FormalParameter ReferenceType Term t IOException MethodDeclaration /** Returns an enumeration of all the documents which contain
   * <code>term</code>. For each document, the document number, the frequency of
   * the term in that document is also provided, for use in
   * search scoring.  If term is null, then all non-deleted
   * docs are returned with freq=1.
   * Thus, this method implements the mapping:
   * <p><ul>
   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>
   * </ul>
   * <p>The enumeration is ordered by document number.  Each document number
   * is greater than all that precede it in the enumeration.
   * @throws IOException if there is a low-level IO error
   */ Modifier public ReferenceType TermDocs termDocs FormalParameter ReferenceType Term term IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator termDocs MethodInvocation termDocs StatementExpression MethodInvocation termDocs MemberReference term seek ReturnStatement MemberReference termDocs MethodDeclaration /** Returns an unpositioned {@link TermDocs} enumerator.
   * @throws IOException if there is a low-level IO error
   */ Modifier public abstract ReferenceType TermDocs termDocs IOException MethodDeclaration /** Returns an enumeration of all the documents which contain
   * <code>term</code>.  For each document, in addition to the document number
   * and frequency of the term in that document, a list of all of the ordinal
   * positions of the term in the document is available.  Thus, this method
   * implements the mapping:
   *
   * <p><ul>
   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,
   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...
   * pos<sub>freq-1</sub>&gt;
   * &gt;<sup>*</sup>
   * </ul>
   * <p> This positional information facilitates phrase and proximity searching.
   * <p>The enumeration is ordered by document number.  Each document number is
   * greater than all that precede it in the enumeration.
   * @throws IOException if there is a low-level IO error
   */ Modifier public ReferenceType TermPositions termPositions FormalParameter ReferenceType Term term IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType TermPositions VariableDeclarator termPositions MethodInvocation termPositions StatementExpression MethodInvocation termPositions MemberReference term seek ReturnStatement MemberReference termPositions MethodDeclaration /** Returns an unpositioned {@link TermPositions} enumerator.
   * @throws IOException if there is a low-level IO error
   */ Modifier public abstract ReferenceType TermPositions termPositions IOException MethodDeclaration /** Deletes the document numbered <code>docNum</code>.  Once a document is
   * deleted it will not appear in TermDocs or TermPostitions enumerations.
   * Attempts to read its field with the {@link #document}
   * method will result in an error.  The presence of this document may still be
   * reflected in the {@link #docFreq} statistic, though
   * this will be corrected eventually as the index is further modified.
   *
   * @throws StaleReaderException if the index has changed
   * since this reader was opened
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if there is a low-level IO error
   */ Modifier public synchronized deleteDocument FormalParameter BasicType int docNum StaleReaderException CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation acquireWriteLock StatementExpression Assignment MemberReference hasChanges Literal true = StatementExpression MethodInvocation MemberReference docNum doDelete MethodDeclaration /** Implements deletion of the document numbered <code>docNum</code>.
   * Applications should call {@link #deleteDocument(int)} or {@link #deleteDocuments(Term)}.
   */ Modifier protected abstract doDelete FormalParameter BasicType int docNum CorruptIndexException IOException MethodDeclaration /** Deletes all documents that have a given <code>term</code> indexed.
   * This is useful if one uses a document field to hold a unique ID string for
   * the document.  Then to delete such a document, one merely constructs a
   * term with the appropriate field and the unique ID string as its text and
   * passes it to this method.
   * See {@link #deleteDocument(int)} for information about when this deletion will 
   * become effective.
   *
   * @return the number of documents deleted
   * @throws StaleReaderException if the index has changed
   *  since this reader was opened
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if there is a low-level IO error
   */ Modifier public BasicType int deleteDocuments FormalParameter ReferenceType Term term StaleReaderException CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator docs MethodInvocation MemberReference term termDocs IfStatement BinaryOperation == MemberReference docs Literal null ReturnStatement Literal 0 End LocalVariableDeclaration BasicType int VariableDeclarator n Literal 0 TryStatement WhileStatement MethodInvocation docs next BlockStatement StatementExpression MethodInvocation MethodInvocation docs doc deleteDocument StatementExpression MemberReference ++ n End StatementExpression MethodInvocation docs close ReturnStatement MemberReference n MethodDeclaration /** Undeletes all documents currently marked as deleted in this index.
   *
   * @throws StaleReaderException if the index has changed
   *  since this reader was opened
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public synchronized undeleteAll StaleReaderException CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation acquireWriteLock StatementExpression Assignment MemberReference hasChanges Literal true = StatementExpression MethodInvocation doUndeleteAll MethodDeclaration /** Implements actual undeleteAll() in subclass. */ Modifier protected abstract doUndeleteAll CorruptIndexException IOException MethodDeclaration /** Does nothing by default. Subclasses that require a write lock for
   *  index modifications must implement this method. */ Modifier protected synchronized acquireWriteLock IOException MethodDeclaration /**
   * 
   * @throws IOException
   */ Modifier public final synchronized flush IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation commit MethodDeclaration /**
   * @param commitUserData Opaque Map (String -> String)
   *  that's recorded into the segments file in the index,
   *  and retrievable by {@link
   *  IndexReader#getCommitUserData}.
   * @throws IOException
   */ Modifier public final synchronized flush FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String commitUserData IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation MemberReference commitUserData commit MethodDeclaration /**
   * Commit changes resulting from delete, undeleteAll, or
   * setNorm operations
   *
   * If an exception is hit, then either no changes or all
   * changes will have been committed to the index
   * (transactional semantics).
   * @throws IOException if there is a low-level IO error
   */ Modifier final protected synchronized commit IOException StatementExpression MethodInvocation Literal null commit MethodDeclaration /**
   * Commit changes resulting from delete, undeleteAll, or
   * setNorm operations
   *
   * If an exception is hit, then either no changes or all
   * changes will have been committed to the index
   * (transactional semantics).
   * @throws IOException if there is a low-level IO error
   */ Modifier public final synchronized commit FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String commitUserData IOException IfStatement MemberReference hasChanges BlockStatement StatementExpression MethodInvocation MemberReference commitUserData doCommit End StatementExpression Assignment MemberReference hasChanges Literal false = MethodDeclaration /** Implements commit.  NOTE: subclasses should override
   *  this.  In 3.0 this will become an abstract method. */ Modifier protected abstract doCommit FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String commitUserData IOException MethodDeclaration /**
   * Closes files associated with this index.
   * Also saves any new deletions to disk.
   * No other methods should be called after this has been called.
   * @throws IOException if there is a low-level IO error
   */ Modifier public final synchronized close IOException IfStatement MemberReference ! closed BlockStatement StatementExpression MethodInvocation decRef StatementExpression Assignment MemberReference closed Literal true = End MethodDeclaration /** Implements close. */ Modifier protected abstract doClose IOException MethodDeclaration /**
   * Get a list of unique field names that exist in this index and have the specified
   * field option information.
   * @param fldOption specifies which field option should be available for the returned fields
   * @return Collection of Strings indicating the names of the fields.
   * @see IndexReader.FieldOption
   */ Modifier public abstract ReferenceType Collection TypeArgument ReferenceType String getFieldNames FormalParameter ReferenceType FieldOption fldOption MethodDeclaration /**
   * Expert: return the IndexCommit that this reader has
   * opened.  This method is only implemented by those
   * readers that correspond to a Directory with its own
   * segments_N file.
   *
   * <p><b>WARNING</b>: this API is new and experimental and
   * may suddenly change.</p>
   */ Modifier public ReferenceType IndexCommit getIndexCommit IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This reader does not support this method."" MethodDeclaration /**
   * Prints the filename and size of each file within a given compound file.
   * Add the -extract flag to extract files to the current working directory.
   * In order to make the extracted version of the index work, you have to copy
   * the segments file from the compound index into the directory where the extracted files are stored.
   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;
   */ Modifier public static main FormalParameter ReferenceType String args LocalVariableDeclaration ReferenceType String VariableDeclarator filename Literal null LocalVariableDeclaration BasicType boolean VariableDeclarator extract Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference args length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""-extract"" equals args BlockStatement StatementExpression Assignment MemberReference extract Literal true = IfStatement BinaryOperation == MemberReference filename Literal null BlockStatement StatementExpression Assignment MemberReference filename MemberReference ArraySelector MemberReference i args = End End End IfStatement BinaryOperation == MemberReference filename Literal null BlockStatement StatementExpression MethodInvocation System.out Literal ""Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>"" println ReturnStatement End LocalVariableDeclaration ReferenceType Directory VariableDeclarator dir Literal null LocalVariableDeclaration ReferenceType CompoundFileReader VariableDeclarator cfr Literal null TryStatement LocalVariableDeclaration ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MemberReference filename LocalVariableDeclaration ReferenceType String VariableDeclarator dirname MethodInvocation file MethodInvocation getParent getAbsoluteFile StatementExpression Assignment MemberReference filename MethodInvocation file getName = StatementExpression Assignment MemberReference dir MethodInvocation FSDirectory ClassCreator ReferenceType File MemberReference dirname open = StatementExpression Assignment MemberReference cfr ClassCreator ReferenceType CompoundFileReader MemberReference dir MemberReference filename = LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation cfr listAll StatementExpression MethodInvocation Arrays MemberReference files sort ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator len MethodInvocation cfr MemberReference ArraySelector MemberReference i files fileLength IfStatement MemberReference extract BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""extract "" MemberReference ArraySelector MemberReference i files Literal "" with "" MemberReference len Literal "" bytes to local directory..."" println LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator ii MethodInvocation cfr MemberReference ArraySelector MemberReference i files openInput LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator f ClassCreator ReferenceType FileOutputStream MemberReference ArraySelector MemberReference i files LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte Literal 1024 LocalVariableDeclaration BasicType int VariableDeclarator chunk MemberReference buffer length WhileStatement BinaryOperation > MemberReference len Literal 0 BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator bufLen Cast BasicType int MethodInvocation Math MemberReference chunk MemberReference len min StatementExpression MethodInvocation ii MemberReference buffer Literal 0 MemberReference bufLen readBytes StatementExpression MethodInvocation f MemberReference buffer Literal 0 MemberReference bufLen write StatementExpression Assignment MemberReference len MemberReference bufLen -= End StatementExpression MethodInvocation f close StatementExpression MethodInvocation ii close StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + MemberReference ArraySelector MemberReference i files Literal "": "" MemberReference len Literal "" bytes"" println End End CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation ioe printStackTrace TryStatement IfStatement BinaryOperation != MemberReference dir Literal null StatementExpression MethodInvocation dir close End IfStatement BinaryOperation != MemberReference cfr Literal null StatementExpression MethodInvocation cfr close End CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation ioe printStackTrace MethodDeclaration /** Returns all commit points that exist in the Directory.
   *  Normally, because the default is {@link
   *  KeepOnlyLastCommitDeletionPolicy}, there would be only
   *  one commit point.  But if you're using a custom {@link
   *  IndexDeletionPolicy} then there could be many commits.
   *  Once you have a given commit, you can open a reader on
   *  it by calling {@link IndexReader#open(IndexCommit,boolean)}
   *  There must be at least one commit in
   *  the Directory, else this method throws {@link
   *  java.io.IOException}.  Note that if a commit is in
   *  progress while this method is running, that commit
   *  may or may not be returned array.  */ Modifier public static ReferenceType Collection TypeArgument ReferenceType IndexCommit listCommits FormalParameter ReferenceType Directory dir IOException ReturnStatement MethodInvocation DirectoryReader MemberReference dir listCommits MethodDeclaration /** Expert: returns the sequential sub readers that this
   *  reader is logically composed of.  For example,
   *  IndexSearcher uses this API to drive searching by one
   *  sub reader at a time.  If this reader is not composed
   *  of sequential child readers, it should return null.
   *  If this method returns an empty array, that means this
   *  reader is a null reader (for example a MultiReader
   *  that has no sub readers).
   *  <p>
   *  NOTE: You should not try using sub-readers returned by
   *  this method to make any changes (setNorm, deleteDocument,
   *  etc.). While this might succeed for one composite reader
   *  (like MultiReader), it will most likely lead to index
   *  corruption for other readers (like DirectoryReader obtained
   *  through {@link #open}. Use the parent reader directly. */ Modifier public ReferenceType IndexReader getSequentialSubReaders ReturnStatement Literal null MethodDeclaration /** Expert */ Modifier public ReferenceType Object getFieldCacheKey ReturnStatement This MethodDeclaration /** Returns the number of unique terms (across all fields)
   *  in this reader.
   *
   *  This method returns long, even though internally
   *  Lucene cannot handle more than 2^31 unique terms, for
   *  a possible future when this limitation is removed.
   *
   *  @throws UnsupportedOperationException if this count
   *  cannot be easily determined (eg Multi*Readers).
   *  Instead, you should call {@link
   *  #getSequentialSubReaders} and ask each sub reader for
   *  its unique term count. */ Modifier public BasicType long getUniqueTermCount IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""this reader does not implement getUniqueTermCount()"" ReferenceType Cloneable ReferenceType Closeable",0
155,155,"CompilationUnit PackageDeclaration org.apache.lucene.util.cache Import java.util.LinkedHashMap Import java.util.Map ClassDeclaration Modifier public /**
 * Simple LRU cache implementation that uses a LinkedHashMap.
 * This cache is not synchronized, use {@link Cache#synchronizedCache(Cache)}
 * if needed.
 * 
 */ SimpleLRUCache FieldDeclaration Modifier private final static BasicType float VariableDeclarator LOADFACTOR Literal 0.75f ConstructorDeclaration Modifier public /**
   * Creates a last-recently-used cache with the specified size. 
   */ SimpleLRUCache FormalParameter Modifier final BasicType int cacheSize StatementExpression SuperConstructorInvocation ClassCreator ReferenceType LinkedHashMap TypeArgument ReferenceType K TypeArgument ReferenceType V BinaryOperation + Cast BasicType int MethodInvocation Math BinaryOperation / MemberReference cacheSize MemberReference LOADFACTOR ceil Literal 1 MemberReference LOADFACTOR Literal true MethodDeclaration Modifier protected Annotation Override BasicType boolean removeEldestEntry FormalParameter ReferenceType Map ReferenceType Entry TypeArgument ReferenceType K TypeArgument ReferenceType V eldest ReturnStatement BinaryOperation > MethodInvocation size MemberReference cacheSize TypeParameter K TypeParameter V ReferenceType SimpleMapCache TypeArgument ReferenceType K TypeArgument ReferenceType V",0
767,767,,1
163,163,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.IOException Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.util.ArrayUtil ClassDeclaration Modifier public final /**
 * This class converts alphabetic, numeric, and symbolic Unicode characters
 * which are not in the first 127 ASCII characters (the ""Basic Latin"" Unicode
 * block) into their ASCII equivalents, if one exists.
 *
 * Characters from the following Unicode blocks are converted; however, only
 * those characters with reasonable ASCII alternatives are converted:
 *
 * <ul>
 *   <li>C1 Controls and Latin-1 Supplement: <a href=""http://www.unicode.org/charts/PDF/U0080.pdf"">http://www.unicode.org/charts/PDF/U0080.pdf</a>
 *   <li>Latin Extended-A: <a href=""http://www.unicode.org/charts/PDF/U0100.pdf"">http://www.unicode.org/charts/PDF/U0100.pdf</a>
 *   <li>Latin Extended-B: <a href=""http://www.unicode.org/charts/PDF/U0180.pdf"">http://www.unicode.org/charts/PDF/U0180.pdf</a>
 *   <li>Latin Extended Additional: <a href=""http://www.unicode.org/charts/PDF/U1E00.pdf"">http://www.unicode.org/charts/PDF/U1E00.pdf</a>
 *   <li>Latin Extended-C: <a href=""http://www.unicode.org/charts/PDF/U2C60.pdf"">http://www.unicode.org/charts/PDF/U2C60.pdf</a>
 *   <li>Latin Extended-D: <a href=""http://www.unicode.org/charts/PDF/UA720.pdf"">http://www.unicode.org/charts/PDF/UA720.pdf</a>
 *   <li>IPA Extensions: <a href=""http://www.unicode.org/charts/PDF/U0250.pdf"">http://www.unicode.org/charts/PDF/U0250.pdf</a>
 *   <li>Phonetic Extensions: <a href=""http://www.unicode.org/charts/PDF/U1D00.pdf"">http://www.unicode.org/charts/PDF/U1D00.pdf</a>
 *   <li>Phonetic Extensions Supplement: <a href=""http://www.unicode.org/charts/PDF/U1D80.pdf"">http://www.unicode.org/charts/PDF/U1D80.pdf</a>
 *   <li>General Punctuation: <a href=""http://www.unicode.org/charts/PDF/U2000.pdf"">http://www.unicode.org/charts/PDF/U2000.pdf</a>
 *   <li>Superscripts and Subscripts: <a href=""http://www.unicode.org/charts/PDF/U2070.pdf"">http://www.unicode.org/charts/PDF/U2070.pdf</a>
 *   <li>Enclosed Alphanumerics: <a href=""http://www.unicode.org/charts/PDF/U2460.pdf"">http://www.unicode.org/charts/PDF/U2460.pdf</a>
 *   <li>Dingbats: <a href=""http://www.unicode.org/charts/PDF/U2700.pdf"">http://www.unicode.org/charts/PDF/U2700.pdf</a>
 *   <li>Supplemental Punctuation: <a href=""http://www.unicode.org/charts/PDF/U2E00.pdf"">http://www.unicode.org/charts/PDF/U2E00.pdf</a>
 *   <li>Alphabetic Presentation Forms: <a href=""http://www.unicode.org/charts/PDF/UFB00.pdf"">http://www.unicode.org/charts/PDF/UFB00.pdf</a>
 *   <li>Halfwidth and Fullwidth Forms: <a href=""http://www.unicode.org/charts/PDF/UFF00.pdf"">http://www.unicode.org/charts/PDF/UFF00.pdf</a>
 * </ul>
 *  
 * See: <a href=""http://en.wikipedia.org/wiki/Latin_characters_in_Unicode"">http://en.wikipedia.org/wiki/Latin_characters_in_Unicode</a>
 *
 * The set of character conversions supported by this class is a superset of
 * those supported by Lucene's {@link ISOLatin1AccentFilter} which strips
 * accents from Latin1 characters.  For example, '&agrave;' will be replaced by
 * 'a'.
 */ ASCIIFoldingFilter ConstructorDeclaration Modifier public ASCIIFoldingFilter FormalParameter ReferenceType TokenStream input StatementExpression SuperConstructorInvocation MemberReference input StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = FieldDeclaration Modifier private BasicType char VariableDeclarator output ArrayCreator BasicType char Literal 512 FieldDeclaration Modifier private BasicType int VariableDeclarator outputPos FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken IOException IfStatement MethodInvocation input incrementToken BlockStatement LocalVariableDeclaration Modifier final BasicType char VariableDeclarator buffer MethodInvocation termAtt termBuffer LocalVariableDeclaration Modifier final BasicType int VariableDeclarator length MethodInvocation termAtt termLength ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final BasicType char VariableDeclarator c MemberReference ArraySelector MemberReference i buffer IfStatement BinaryOperation >= MemberReference c Literal '' BlockStatement StatementExpression MethodInvocation MemberReference buffer MemberReference length foldToASCII StatementExpression MethodInvocation termAtt MemberReference output Literal 0 MemberReference outputPos setTermBuffer BreakStatement End End ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration /**
   * Converts characters above ASCII to their ASCII equivalents.  For example,
   * accents are removed from accented characters.
   * @param input The string to fold
   * @param length The number of characters in the input string
   */ Modifier public foldToASCII FormalParameter BasicType char input FormalParameter BasicType int length LocalVariableDeclaration Modifier final BasicType int VariableDeclarator maxSizeNeeded BinaryOperation * Literal 4 MemberReference length IfStatement BinaryOperation < MemberReference output length MemberReference maxSizeNeeded BlockStatement StatementExpression Assignment MemberReference output ArrayCreator BasicType char MethodInvocation ArrayUtil MemberReference maxSizeNeeded getNextSize = End StatementExpression Assignment MemberReference outputPos Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator pos Literal 0 BinaryOperation < MemberReference pos MemberReference length MemberReference ++ pos BlockStatement LocalVariableDeclaration Modifier final BasicType char VariableDeclarator c MemberReference ArraySelector MemberReference pos input IfStatement BinaryOperation < MemberReference c Literal '' BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output MemberReference c = BlockStatement SwitchStatement MemberReference c SwitchStatementCase Literal 'À' Literal 'Á' Literal 'Â' Literal 'Ã' Literal 'Ä' Literal 'Å' Literal 'Ā' Literal 'Ă' Literal 'Ą' Literal 'Ə' Literal 'Ǎ' Literal 'Ǟ' Literal 'Ǡ' Literal 'Ǻ' Literal 'Ȁ' Literal 'Ȃ' Literal 'Ȧ' Literal 'Ⱥ' Literal 'ᴀ' Literal 'Ḁ' Literal 'Ạ' Literal 'Ả' Literal 'Ấ' Literal 'Ầ' Literal 'Ẩ' Literal 'Ẫ' Literal 'Ậ' Literal 'Ắ' Literal 'Ằ' Literal 'Ẳ' Literal 'Ẵ' Literal 'Ặ' Literal 'Ⓐ' Literal 'Ａ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'A' = BreakStatement SwitchStatementCase Literal 'à' Literal 'á' Literal 'â' Literal 'ã' Literal 'ä' Literal 'å' Literal 'ā' Literal 'ă' Literal 'ą' Literal 'ǎ' Literal 'ǟ' Literal 'ǡ' Literal 'ǻ' Literal 'ȁ' Literal 'ȃ' Literal 'ȧ' Literal 'ɐ' Literal 'ə' Literal 'ɚ' Literal 'ᶏ' Literal 'ᶕ' Literal 'ḁ' Literal 'ẚ' Literal 'ạ' Literal 'ả' Literal 'ấ' Literal 'ầ' Literal 'ẩ' Literal 'ẫ' Literal 'ậ' Literal 'ắ' Literal 'ằ' Literal 'ẳ' Literal 'ẵ' Literal 'ặ' Literal 'ₐ' Literal 'ₔ' Literal 'ⓐ' Literal 'ⱥ' Literal 'Ɐ' Literal 'ａ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = BreakStatement SwitchStatementCase Literal 'Ꜳ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'A' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'A' = BreakStatement SwitchStatementCase Literal 'Æ' Literal 'Ǣ' Literal 'Ǽ' Literal 'ᴁ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'A' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'E' = BreakStatement SwitchStatementCase Literal 'Ꜵ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'A' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'O' = BreakStatement SwitchStatementCase Literal 'Ꜷ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'A' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'U' = BreakStatement SwitchStatementCase Literal 'Ꜹ' Literal 'Ꜻ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'A' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'V' = BreakStatement SwitchStatementCase Literal 'Ꜽ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'A' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'Y' = BreakStatement SwitchStatementCase Literal '⒜' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ꜳ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = BreakStatement SwitchStatementCase Literal 'æ' Literal 'ǣ' Literal 'ǽ' Literal 'ᴂ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'e' = BreakStatement SwitchStatementCase Literal 'ꜵ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'o' = BreakStatement SwitchStatementCase Literal 'ꜷ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'u' = BreakStatement SwitchStatementCase Literal 'ꜹ' Literal 'ꜻ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'v' = BreakStatement SwitchStatementCase Literal 'ꜽ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'a' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'y' = BreakStatement SwitchStatementCase Literal 'Ɓ' Literal 'Ƃ' Literal 'Ƀ' Literal 'ʙ' Literal 'ᴃ' Literal 'Ḃ' Literal 'Ḅ' Literal 'Ḇ' Literal 'Ⓑ' Literal 'Ｂ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'B' = BreakStatement SwitchStatementCase Literal 'ƀ' Literal 'ƃ' Literal 'ɓ' Literal 'ᵬ' Literal 'ᶀ' Literal 'ḃ' Literal 'ḅ' Literal 'ḇ' Literal 'ⓑ' Literal 'ｂ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'b' = BreakStatement SwitchStatementCase Literal '⒝' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'b' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ç' Literal 'Ć' Literal 'Ĉ' Literal 'Ċ' Literal 'Č' Literal 'Ƈ' Literal 'Ȼ' Literal 'ʗ' Literal 'ᴄ' Literal 'Ḉ' Literal 'Ⓒ' Literal 'Ｃ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'C' = BreakStatement SwitchStatementCase Literal 'ç' Literal 'ć' Literal 'ĉ' Literal 'ċ' Literal 'č' Literal 'ƈ' Literal 'ȼ' Literal 'ɕ' Literal 'ḉ' Literal 'ↄ' Literal 'ⓒ' Literal 'Ꜿ' Literal 'ꜿ' Literal 'ｃ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'c' = BreakStatement SwitchStatementCase Literal '⒞' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'c' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ð' Literal 'Ď' Literal 'Đ' Literal 'Ɖ' Literal 'Ɗ' Literal 'Ƌ' Literal 'ᴅ' Literal 'ᴆ' Literal 'Ḋ' Literal 'Ḍ' Literal 'Ḏ' Literal 'Ḑ' Literal 'Ḓ' Literal 'Ⓓ' Literal 'Ꝺ' Literal 'Ｄ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'D' = BreakStatement SwitchStatementCase Literal 'ð' Literal 'ď' Literal 'đ' Literal 'ƌ' Literal 'ȡ' Literal 'ɖ' Literal 'ɗ' Literal 'ᵭ' Literal 'ᶁ' Literal 'ᶑ' Literal 'ḋ' Literal 'ḍ' Literal 'ḏ' Literal 'ḑ' Literal 'ḓ' Literal 'ⓓ' Literal 'ꝺ' Literal 'ｄ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'd' = BreakStatement SwitchStatementCase Literal 'Ǆ' Literal 'Ǳ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'D' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'Z' = BreakStatement SwitchStatementCase Literal 'ǅ' Literal 'ǲ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'D' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'z' = BreakStatement SwitchStatementCase Literal '⒟' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'd' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ȸ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'd' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'b' = BreakStatement SwitchStatementCase Literal 'ǆ' Literal 'ǳ' Literal 'ʣ' Literal 'ʥ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'd' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'z' = BreakStatement SwitchStatementCase Literal 'È' Literal 'É' Literal 'Ê' Literal 'Ë' Literal 'Ē' Literal 'Ĕ' Literal 'Ė' Literal 'Ę' Literal 'Ě' Literal 'Ǝ' Literal 'Ɛ' Literal 'Ȅ' Literal 'Ȇ' Literal 'Ȩ' Literal 'Ɇ' Literal 'ᴇ' Literal 'Ḕ' Literal 'Ḗ' Literal 'Ḙ' Literal 'Ḛ' Literal 'Ḝ' Literal 'Ẹ' Literal 'Ẻ' Literal 'Ẽ' Literal 'Ế' Literal 'Ề' Literal 'Ể' Literal 'Ễ' Literal 'Ệ' Literal 'Ⓔ' Literal 'ⱻ' Literal 'Ｅ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'E' = BreakStatement SwitchStatementCase Literal 'è' Literal 'é' Literal 'ê' Literal 'ë' Literal 'ē' Literal 'ĕ' Literal 'ė' Literal 'ę' Literal 'ě' Literal 'ǝ' Literal 'ȅ' Literal 'ȇ' Literal 'ȩ' Literal 'ɇ' Literal 'ɘ' Literal 'ɛ' Literal 'ɜ' Literal 'ɝ' Literal 'ɞ' Literal 'ʚ' Literal 'ᴈ' Literal 'ᶒ' Literal 'ᶓ' Literal 'ᶔ' Literal 'ḕ' Literal 'ḗ' Literal 'ḙ' Literal 'ḛ' Literal 'ḝ' Literal 'ẹ' Literal 'ẻ' Literal 'ẽ' Literal 'ế' Literal 'ề' Literal 'ể' Literal 'ễ' Literal 'ệ' Literal 'ₑ' Literal 'ⓔ' Literal 'ⱸ' Literal 'ｅ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'e' = BreakStatement SwitchStatementCase Literal '⒠' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'e' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ƒ' Literal 'Ḟ' Literal 'Ⓕ' Literal 'ꜰ' Literal 'Ꝼ' Literal 'ꟻ' Literal 'Ｆ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'F' = BreakStatement SwitchStatementCase Literal 'ƒ' Literal 'ᵮ' Literal 'ᶂ' Literal 'ḟ' Literal 'ẛ' Literal 'ⓕ' Literal 'ꝼ' Literal 'ｆ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = BreakStatement SwitchStatementCase Literal '⒡' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ﬀ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = BreakStatement SwitchStatementCase Literal 'ﬃ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'i' = BreakStatement SwitchStatementCase Literal 'ﬄ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = BreakStatement SwitchStatementCase Literal 'ﬁ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'i' = BreakStatement SwitchStatementCase Literal 'ﬂ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'f' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = BreakStatement SwitchStatementCase Literal 'Ĝ' Literal 'Ğ' Literal 'Ġ' Literal 'Ģ' Literal 'Ɠ' Literal 'Ǥ' Literal 'ǥ' Literal 'Ǧ' Literal 'ǧ' Literal 'Ǵ' Literal 'ɢ' Literal 'ʛ' Literal 'Ḡ' Literal 'Ⓖ' Literal 'Ᵹ' Literal 'Ꝿ' Literal 'Ｇ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'G' = BreakStatement SwitchStatementCase Literal 'ĝ' Literal 'ğ' Literal 'ġ' Literal 'ģ' Literal 'ǵ' Literal 'ɠ' Literal 'ɡ' Literal 'ᵷ' Literal 'ᵹ' Literal 'ᶃ' Literal 'ḡ' Literal 'ⓖ' Literal 'ꝿ' Literal 'ｇ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'g' = BreakStatement SwitchStatementCase Literal '⒢' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'g' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ĥ' Literal 'Ħ' Literal 'Ȟ' Literal 'ʜ' Literal 'Ḣ' Literal 'Ḥ' Literal 'Ḧ' Literal 'Ḩ' Literal 'Ḫ' Literal 'Ⓗ' Literal 'Ⱨ' Literal 'Ⱶ' Literal 'Ｈ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'H' = BreakStatement SwitchStatementCase Literal 'ĥ' Literal 'ħ' Literal 'ȟ' Literal 'ɥ' Literal 'ɦ' Literal 'ʮ' Literal 'ʯ' Literal 'ḣ' Literal 'ḥ' Literal 'ḧ' Literal 'ḩ' Literal 'ḫ' Literal 'ẖ' Literal 'ⓗ' Literal 'ⱨ' Literal 'ⱶ' Literal 'ｈ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'h' = BreakStatement SwitchStatementCase Literal 'Ƕ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'H' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'V' = BreakStatement SwitchStatementCase Literal '⒣' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'h' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ƕ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'h' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'v' = BreakStatement SwitchStatementCase Literal 'Ì' Literal 'Í' Literal 'Î' Literal 'Ï' Literal 'Ĩ' Literal 'Ī' Literal 'Ĭ' Literal 'Į' Literal 'İ' Literal 'Ɩ' Literal 'Ɨ' Literal 'Ǐ' Literal 'Ȉ' Literal 'Ȋ' Literal 'ɪ' Literal 'ᵻ' Literal 'Ḭ' Literal 'Ḯ' Literal 'Ỉ' Literal 'Ị' Literal 'Ⓘ' Literal 'ꟾ' Literal 'Ｉ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'I' = BreakStatement SwitchStatementCase Literal 'ì' Literal 'í' Literal 'î' Literal 'ï' Literal 'ĩ' Literal 'ī' Literal 'ĭ' Literal 'į' Literal 'ı' Literal 'ǐ' Literal 'ȉ' Literal 'ȋ' Literal 'ɨ' Literal 'ᴉ' Literal 'ᵢ' Literal 'ᵼ' Literal 'ᶖ' Literal 'ḭ' Literal 'ḯ' Literal 'ỉ' Literal 'ị' Literal 'ⁱ' Literal 'ⓘ' Literal 'ｉ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'i' = BreakStatement SwitchStatementCase Literal 'Ĳ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'I' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'J' = BreakStatement SwitchStatementCase Literal '⒤' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'i' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ĳ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'i' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'j' = BreakStatement SwitchStatementCase Literal 'Ĵ' Literal 'Ɉ' Literal 'ᴊ' Literal 'Ⓙ' Literal 'Ｊ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'J' = BreakStatement SwitchStatementCase Literal 'ĵ' Literal 'ǰ' Literal 'ȷ' Literal 'ɉ' Literal 'ɟ' Literal 'ʄ' Literal 'ʝ' Literal 'ⓙ' Literal 'ⱼ' Literal 'ｊ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'j' = BreakStatement SwitchStatementCase Literal '⒥' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'j' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ķ' Literal 'Ƙ' Literal 'Ǩ' Literal 'ᴋ' Literal 'Ḱ' Literal 'Ḳ' Literal 'Ḵ' Literal 'Ⓚ' Literal 'Ⱪ' Literal 'Ꝁ' Literal 'Ꝃ' Literal 'Ꝅ' Literal 'Ｋ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'K' = BreakStatement SwitchStatementCase Literal 'ķ' Literal 'ƙ' Literal 'ǩ' Literal 'ʞ' Literal 'ᶄ' Literal 'ḱ' Literal 'ḳ' Literal 'ḵ' Literal 'ⓚ' Literal 'ⱪ' Literal 'ꝁ' Literal 'ꝃ' Literal 'ꝅ' Literal 'ｋ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'k' = BreakStatement SwitchStatementCase Literal '⒦' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'k' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ĺ' Literal 'Ļ' Literal 'Ľ' Literal 'Ŀ' Literal 'Ł' Literal 'Ƚ' Literal 'ʟ' Literal 'ᴌ' Literal 'Ḷ' Literal 'Ḹ' Literal 'Ḻ' Literal 'Ḽ' Literal 'Ⓛ' Literal 'Ⱡ' Literal 'Ɫ' Literal 'Ꝇ' Literal 'Ꝉ' Literal 'Ꞁ' Literal 'Ｌ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'L' = BreakStatement SwitchStatementCase Literal 'ĺ' Literal 'ļ' Literal 'ľ' Literal 'ŀ' Literal 'ł' Literal 'ƚ' Literal 'ȴ' Literal 'ɫ' Literal 'ɬ' Literal 'ɭ' Literal 'ᶅ' Literal 'ḷ' Literal 'ḹ' Literal 'ḻ' Literal 'ḽ' Literal 'ⓛ' Literal 'ⱡ' Literal 'ꝇ' Literal 'ꝉ' Literal 'ꞁ' Literal 'ｌ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = BreakStatement SwitchStatementCase Literal 'Ǉ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'L' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'J' = BreakStatement SwitchStatementCase Literal 'Ỻ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'L' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'L' = BreakStatement SwitchStatementCase Literal 'ǈ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'L' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'j' = BreakStatement SwitchStatementCase Literal '⒧' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ǉ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'j' = BreakStatement SwitchStatementCase Literal 'ỻ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = BreakStatement SwitchStatementCase Literal 'ʪ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 's' = BreakStatement SwitchStatementCase Literal 'ʫ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'l' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'z' = BreakStatement SwitchStatementCase Literal 'Ɯ' Literal 'ᴍ' Literal 'Ḿ' Literal 'Ṁ' Literal 'Ṃ' Literal 'Ⓜ' Literal 'Ɱ' Literal 'ꟽ' Literal 'ꟿ' Literal 'Ｍ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'M' = BreakStatement SwitchStatementCase Literal 'ɯ' Literal 'ɰ' Literal 'ɱ' Literal 'ᵯ' Literal 'ᶆ' Literal 'ḿ' Literal 'ṁ' Literal 'ṃ' Literal 'ⓜ' Literal 'ｍ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'm' = BreakStatement SwitchStatementCase Literal '⒨' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'm' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ñ' Literal 'Ń' Literal 'Ņ' Literal 'Ň' Literal 'Ŋ' Literal 'Ɲ' Literal 'Ǹ' Literal 'Ƞ' Literal 'ɴ' Literal 'ᴎ' Literal 'Ṅ' Literal 'Ṇ' Literal 'Ṉ' Literal 'Ṋ' Literal 'Ⓝ' Literal 'Ｎ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'N' = BreakStatement SwitchStatementCase Literal 'ñ' Literal 'ń' Literal 'ņ' Literal 'ň' Literal 'ŉ' Literal 'ŋ' Literal 'ƞ' Literal 'ǹ' Literal 'ȵ' Literal 'ɲ' Literal 'ɳ' Literal 'ᵰ' Literal 'ᶇ' Literal 'ṅ' Literal 'ṇ' Literal 'ṉ' Literal 'ṋ' Literal 'ⁿ' Literal 'ⓝ' Literal 'ｎ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'n' = BreakStatement SwitchStatementCase Literal 'Ǌ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'N' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'J' = BreakStatement SwitchStatementCase Literal 'ǋ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'N' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'j' = BreakStatement SwitchStatementCase Literal '⒩' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'n' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ǌ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'n' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'j' = BreakStatement SwitchStatementCase Literal 'Ò' Literal 'Ó' Literal 'Ô' Literal 'Õ' Literal 'Ö' Literal 'Ø' Literal 'Ō' Literal 'Ŏ' Literal 'Ő' Literal 'Ɔ' Literal 'Ɵ' Literal 'Ơ' Literal 'Ǒ' Literal 'Ǫ' Literal 'Ǭ' Literal 'Ǿ' Literal 'Ȍ' Literal 'Ȏ' Literal 'Ȫ' Literal 'Ȭ' Literal 'Ȯ' Literal 'Ȱ' Literal 'ᴏ' Literal 'ᴐ' Literal 'Ṍ' Literal 'Ṏ' Literal 'Ṑ' Literal 'Ṓ' Literal 'Ọ' Literal 'Ỏ' Literal 'Ố' Literal 'Ồ' Literal 'Ổ' Literal 'Ỗ' Literal 'Ộ' Literal 'Ớ' Literal 'Ờ' Literal 'Ở' Literal 'Ỡ' Literal 'Ợ' Literal 'Ⓞ' Literal 'Ꝋ' Literal 'Ꝍ' Literal 'Ｏ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'O' = BreakStatement SwitchStatementCase Literal 'ò' Literal 'ó' Literal 'ô' Literal 'õ' Literal 'ö' Literal 'ø' Literal 'ō' Literal 'ŏ' Literal 'ő' Literal 'ơ' Literal 'ǒ' Literal 'ǫ' Literal 'ǭ' Literal 'ǿ' Literal 'ȍ' Literal 'ȏ' Literal 'ȫ' Literal 'ȭ' Literal 'ȯ' Literal 'ȱ' Literal 'ɔ' Literal 'ɵ' Literal 'ᴖ' Literal 'ᴗ' Literal 'ᶗ' Literal 'ṍ' Literal 'ṏ' Literal 'ṑ' Literal 'ṓ' Literal 'ọ' Literal 'ỏ' Literal 'ố' Literal 'ồ' Literal 'ổ' Literal 'ỗ' Literal 'ộ' Literal 'ớ' Literal 'ờ' Literal 'ở' Literal 'ỡ' Literal 'ợ' Literal 'ₒ' Literal 'ⓞ' Literal 'ⱺ' Literal 'ꝋ' Literal 'ꝍ' Literal 'ｏ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'o' = BreakStatement SwitchStatementCase Literal 'Œ' Literal 'ɶ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'O' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'E' = BreakStatement SwitchStatementCase Literal 'Ꝏ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'O' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'O' = BreakStatement SwitchStatementCase Literal 'Ȣ' Literal 'ᴕ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'O' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'U' = BreakStatement SwitchStatementCase Literal '⒪' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'o' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'œ' Literal 'ᴔ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'o' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'e' = BreakStatement SwitchStatementCase Literal 'ꝏ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'o' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'o' = BreakStatement SwitchStatementCase Literal 'ȣ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'o' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'u' = BreakStatement SwitchStatementCase Literal 'Ƥ' Literal 'ᴘ' Literal 'Ṕ' Literal 'Ṗ' Literal 'Ⓟ' Literal 'Ᵽ' Literal 'Ꝑ' Literal 'Ꝓ' Literal 'Ꝕ' Literal 'Ｐ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'P' = BreakStatement SwitchStatementCase Literal 'ƥ' Literal 'ᵱ' Literal 'ᵽ' Literal 'ᶈ' Literal 'ṕ' Literal 'ṗ' Literal 'ⓟ' Literal 'ꝑ' Literal 'ꝓ' Literal 'ꝕ' Literal 'ꟼ' Literal 'ｐ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'p' = BreakStatement SwitchStatementCase Literal '⒫' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'p' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ɋ' Literal 'Ⓠ' Literal 'Ꝗ' Literal 'Ꝙ' Literal 'Ｑ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'Q' = BreakStatement SwitchStatementCase Literal 'ĸ' Literal 'ɋ' Literal 'ʠ' Literal 'ⓠ' Literal 'ꝗ' Literal 'ꝙ' Literal 'ｑ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'q' = BreakStatement SwitchStatementCase Literal '⒬' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'q' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ȹ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'q' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'p' = BreakStatement SwitchStatementCase Literal 'Ŕ' Literal 'Ŗ' Literal 'Ř' Literal 'Ȑ' Literal 'Ȓ' Literal 'Ɍ' Literal 'ʀ' Literal 'ʁ' Literal 'ᴙ' Literal 'ᴚ' Literal 'Ṙ' Literal 'Ṛ' Literal 'Ṝ' Literal 'Ṟ' Literal 'Ⓡ' Literal 'Ɽ' Literal 'Ꝛ' Literal 'Ꞃ' Literal 'Ｒ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'R' = BreakStatement SwitchStatementCase Literal 'ŕ' Literal 'ŗ' Literal 'ř' Literal 'ȑ' Literal 'ȓ' Literal 'ɍ' Literal 'ɼ' Literal 'ɽ' Literal 'ɾ' Literal 'ɿ' Literal 'ᵣ' Literal 'ᵲ' Literal 'ᵳ' Literal 'ᶉ' Literal 'ṙ' Literal 'ṛ' Literal 'ṝ' Literal 'ṟ' Literal 'ⓡ' Literal 'ꝛ' Literal 'ꞃ' Literal 'ｒ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'r' = BreakStatement SwitchStatementCase Literal '⒭' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'r' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ś' Literal 'Ŝ' Literal 'Ş' Literal 'Š' Literal 'Ș' Literal 'Ṡ' Literal 'Ṣ' Literal 'Ṥ' Literal 'Ṧ' Literal 'Ṩ' Literal 'Ⓢ' Literal 'ꜱ' Literal 'ꞅ' Literal 'Ｓ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'S' = BreakStatement SwitchStatementCase Literal 'ś' Literal 'ŝ' Literal 'ş' Literal 'š' Literal 'ſ' Literal 'ș' Literal 'ȿ' Literal 'ʂ' Literal 'ᵴ' Literal 'ᶊ' Literal 'ṡ' Literal 'ṣ' Literal 'ṥ' Literal 'ṧ' Literal 'ṩ' Literal 'ẜ' Literal 'ẝ' Literal 'ⓢ' Literal 'Ꞅ' Literal 'ｓ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 's' = BreakStatement SwitchStatementCase Literal 'ẞ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'S' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'S' = BreakStatement SwitchStatementCase Literal '⒮' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 's' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ß' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 's' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 's' = BreakStatement SwitchStatementCase Literal 'ﬆ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 's' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 't' = BreakStatement SwitchStatementCase Literal 'Ţ' Literal 'Ť' Literal 'Ŧ' Literal 'Ƭ' Literal 'Ʈ' Literal 'Ț' Literal 'Ⱦ' Literal 'ᴛ' Literal 'Ṫ' Literal 'Ṭ' Literal 'Ṯ' Literal 'Ṱ' Literal 'Ⓣ' Literal 'Ꞇ' Literal 'Ｔ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'T' = BreakStatement SwitchStatementCase Literal 'ţ' Literal 'ť' Literal 'ŧ' Literal 'ƫ' Literal 'ƭ' Literal 'ț' Literal 'ȶ' Literal 'ʇ' Literal 'ʈ' Literal 'ᵵ' Literal 'ṫ' Literal 'ṭ' Literal 'ṯ' Literal 'ṱ' Literal 'ẗ' Literal 'ⓣ' Literal 'ⱦ' Literal 'ｔ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 't' = BreakStatement SwitchStatementCase Literal 'Þ' Literal 'Ꝧ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'T' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'H' = BreakStatement SwitchStatementCase Literal 'Ꜩ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'T' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'Z' = BreakStatement SwitchStatementCase Literal '⒯' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 't' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ʨ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 't' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'c' = BreakStatement SwitchStatementCase Literal 'þ' Literal 'ᵺ' Literal 'ꝧ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 't' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'h' = BreakStatement SwitchStatementCase Literal 'ʦ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 't' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 's' = BreakStatement SwitchStatementCase Literal 'ꜩ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 't' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'z' = BreakStatement SwitchStatementCase Literal 'Ù' Literal 'Ú' Literal 'Û' Literal 'Ü' Literal 'Ũ' Literal 'Ū' Literal 'Ŭ' Literal 'Ů' Literal 'Ű' Literal 'Ų' Literal 'Ư' Literal 'Ǔ' Literal 'Ǖ' Literal 'Ǘ' Literal 'Ǚ' Literal 'Ǜ' Literal 'Ȕ' Literal 'Ȗ' Literal 'Ʉ' Literal 'ᴜ' Literal 'ᵾ' Literal 'Ṳ' Literal 'Ṵ' Literal 'Ṷ' Literal 'Ṹ' Literal 'Ṻ' Literal 'Ụ' Literal 'Ủ' Literal 'Ứ' Literal 'Ừ' Literal 'Ử' Literal 'Ữ' Literal 'Ự' Literal 'Ⓤ' Literal 'Ｕ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'U' = BreakStatement SwitchStatementCase Literal 'ù' Literal 'ú' Literal 'û' Literal 'ü' Literal 'ũ' Literal 'ū' Literal 'ŭ' Literal 'ů' Literal 'ű' Literal 'ų' Literal 'ư' Literal 'ǔ' Literal 'ǖ' Literal 'ǘ' Literal 'ǚ' Literal 'ǜ' Literal 'ȕ' Literal 'ȗ' Literal 'ʉ' Literal 'ᵤ' Literal 'ᶙ' Literal 'ṳ' Literal 'ṵ' Literal 'ṷ' Literal 'ṹ' Literal 'ṻ' Literal 'ụ' Literal 'ủ' Literal 'ứ' Literal 'ừ' Literal 'ử' Literal 'ữ' Literal 'ự' Literal 'ⓤ' Literal 'ｕ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'u' = BreakStatement SwitchStatementCase Literal '⒰' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'u' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ᵫ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'u' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'e' = BreakStatement SwitchStatementCase Literal 'Ʋ' Literal 'Ʌ' Literal 'ᴠ' Literal 'Ṽ' Literal 'Ṿ' Literal 'Ỽ' Literal 'Ⓥ' Literal 'Ꝟ' Literal 'Ꝩ' Literal 'Ｖ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'V' = BreakStatement SwitchStatementCase Literal 'ʋ' Literal 'ʌ' Literal 'ᵥ' Literal 'ᶌ' Literal 'ṽ' Literal 'ṿ' Literal 'ⓥ' Literal 'ⱱ' Literal 'ⱴ' Literal 'ꝟ' Literal 'ｖ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'v' = BreakStatement SwitchStatementCase Literal 'Ꝡ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'V' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'Y' = BreakStatement SwitchStatementCase Literal '⒱' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'v' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'ꝡ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'v' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'y' = BreakStatement SwitchStatementCase Literal 'Ŵ' Literal 'Ƿ' Literal 'ᴡ' Literal 'Ẁ' Literal 'Ẃ' Literal 'Ẅ' Literal 'Ẇ' Literal 'Ẉ' Literal 'Ⓦ' Literal 'Ⱳ' Literal 'Ｗ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'W' = BreakStatement SwitchStatementCase Literal 'ŵ' Literal 'ƿ' Literal 'ʍ' Literal 'ẁ' Literal 'ẃ' Literal 'ẅ' Literal 'ẇ' Literal 'ẉ' Literal 'ẘ' Literal 'ⓦ' Literal 'ⱳ' Literal 'ｗ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'w' = BreakStatement SwitchStatementCase Literal '⒲' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'w' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ẋ' Literal 'Ẍ' Literal 'Ⓧ' Literal 'Ｘ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'X' = BreakStatement SwitchStatementCase Literal 'ᶍ' Literal 'ẋ' Literal 'ẍ' Literal 'ₓ' Literal 'ⓧ' Literal 'ｘ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'x' = BreakStatement SwitchStatementCase Literal '⒳' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'x' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ý' Literal 'Ŷ' Literal 'Ÿ' Literal 'Ƴ' Literal 'Ȳ' Literal 'Ɏ' Literal 'ʏ' Literal 'Ẏ' Literal 'Ỳ' Literal 'Ỵ' Literal 'Ỷ' Literal 'Ỹ' Literal 'Ỿ' Literal 'Ⓨ' Literal 'Ｙ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'Y' = BreakStatement SwitchStatementCase Literal 'ý' Literal 'ÿ' Literal 'ŷ' Literal 'ƴ' Literal 'ȳ' Literal 'ɏ' Literal 'ʎ' Literal 'ẏ' Literal 'ẙ' Literal 'ỳ' Literal 'ỵ' Literal 'ỷ' Literal 'ỹ' Literal 'ỿ' Literal 'ⓨ' Literal 'ｙ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'y' = BreakStatement SwitchStatementCase Literal '⒴' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'y' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal 'Ź' Literal 'Ż' Literal 'Ž' Literal 'Ƶ' Literal 'Ȝ' Literal 'Ȥ' Literal 'ᴢ' Literal 'Ẑ' Literal 'Ẓ' Literal 'Ẕ' Literal 'Ⓩ' Literal 'Ⱬ' Literal 'Ꝣ' Literal 'Ｚ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'Z' = BreakStatement SwitchStatementCase Literal 'ź' Literal 'ż' Literal 'ž' Literal 'ƶ' Literal 'ȝ' Literal 'ȥ' Literal 'ɀ' Literal 'ʐ' Literal 'ʑ' Literal 'ᵶ' Literal 'ᶎ' Literal 'ẑ' Literal 'ẓ' Literal 'ẕ' Literal 'ⓩ' Literal 'ⱬ' Literal 'ꝣ' Literal 'ｚ' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'z' = BreakStatement SwitchStatementCase Literal '⒵' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal 'z' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⁰' Literal '₀' Literal '⓪' Literal '⓿' Literal '０' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '0' = BreakStatement SwitchStatementCase Literal '¹' Literal '₁' Literal '①' Literal '⓵' Literal '❶' Literal '➀' Literal '➊' Literal '１' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = BreakStatement SwitchStatementCase Literal '⒈' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑴' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '²' Literal '₂' Literal '②' Literal '⓶' Literal '❷' Literal '➁' Literal '➋' Literal '２' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = BreakStatement SwitchStatementCase Literal '⒉' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑵' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '³' Literal '₃' Literal '③' Literal '⓷' Literal '❸' Literal '➂' Literal '➌' Literal '３' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '3' = BreakStatement SwitchStatementCase Literal '⒊' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '3' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑶' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '3' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⁴' Literal '₄' Literal '④' Literal '⓸' Literal '❹' Literal '➃' Literal '➍' Literal '４' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '4' = BreakStatement SwitchStatementCase Literal '⒋' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '4' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑷' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '4' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⁵' Literal '₅' Literal '⑤' Literal '⓹' Literal '❺' Literal '➄' Literal '➎' Literal '５' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '5' = BreakStatement SwitchStatementCase Literal '⒌' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '5' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑸' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '5' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⁶' Literal '₆' Literal '⑥' Literal '⓺' Literal '❻' Literal '➅' Literal '➏' Literal '６' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '6' = BreakStatement SwitchStatementCase Literal '⒍' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '6' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑹' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '6' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⁷' Literal '₇' Literal '⑦' Literal '⓻' Literal '❼' Literal '➆' Literal '➐' Literal '７' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '7' = BreakStatement SwitchStatementCase Literal '⒎' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '7' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑺' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '7' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⁸' Literal '₈' Literal '⑧' Literal '⓼' Literal '❽' Literal '➇' Literal '➑' Literal '８' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '8' = BreakStatement SwitchStatementCase Literal '⒏' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '8' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑻' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '8' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⁹' Literal '₉' Literal '⑨' Literal '⓽' Literal '❾' Literal '➈' Literal '➒' Literal '９' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '9' = BreakStatement SwitchStatementCase Literal '⒐' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '9' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑼' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '9' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑩' Literal '⓾' Literal '❿' Literal '➉' Literal '➓' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '0' = BreakStatement SwitchStatementCase Literal '⒑' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '0' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑽' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '0' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑪' Literal '⓫' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = BreakStatement SwitchStatementCase Literal '⒒' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑾' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑫' Literal '⓬' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = BreakStatement SwitchStatementCase Literal '⒓' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⑿' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑬' Literal '⓭' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '3' = BreakStatement SwitchStatementCase Literal '⒔' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '3' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⒀' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '3' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑭' Literal '⓮' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '4' = BreakStatement SwitchStatementCase Literal '⒕' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '4' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⒁' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '4' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑮' Literal '⓯' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '5' = BreakStatement SwitchStatementCase Literal '⒖' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '5' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⒂' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '5' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑯' Literal '⓰' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '6' = BreakStatement SwitchStatementCase Literal '⒗' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '6' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⒃' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '6' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑰' Literal '⓱' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '7' = BreakStatement SwitchStatementCase Literal '⒘' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '7' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⒄' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '7' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑱' Literal '⓲' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '8' = BreakStatement SwitchStatementCase Literal '⒙' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '8' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⒅' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '8' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑲' Literal '⓳' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '9' = BreakStatement SwitchStatementCase Literal '⒚' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '9' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⒆' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '1' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '9' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⑳' Literal '⓴' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '0' = BreakStatement SwitchStatementCase Literal '⒛' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '0' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⒇' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '2' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '0' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '«' Literal '»' Literal '“' Literal '”' Literal '„' Literal '″' Literal '‶' Literal '❝' Literal '❞' Literal '❮' Literal '❯' Literal '＂' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '""' = BreakStatement SwitchStatementCase Literal '‘' Literal '’' Literal '‚' Literal '‛' Literal '′' Literal '‵' Literal '‹' Literal '›' Literal '❛' Literal '❜' Literal '＇' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '\'' = BreakStatement SwitchStatementCase Literal '‐' Literal '‑' Literal '‒' Literal '–' Literal '—' Literal '⁻' Literal '₋' Literal '－' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '-' = BreakStatement SwitchStatementCase Literal '⁅' Literal '❲' Literal '［' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '[' = BreakStatement SwitchStatementCase Literal '⁆' Literal '❳' Literal '］' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ']' = BreakStatement SwitchStatementCase Literal '⁽' Literal '₍' Literal '❨' Literal '❪' Literal '（' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = BreakStatement SwitchStatementCase Literal '⸨' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '(' = BreakStatement SwitchStatementCase Literal '⁾' Literal '₎' Literal '❩' Literal '❫' Literal '）' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '⸩' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ')' = BreakStatement SwitchStatementCase Literal '❬' Literal '❰' Literal '＜' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '<' = BreakStatement SwitchStatementCase Literal '❭' Literal '❱' Literal '＞' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '>' = BreakStatement SwitchStatementCase Literal '❴' Literal '｛' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '{' = BreakStatement SwitchStatementCase Literal '❵' Literal '｝' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '}' = BreakStatement SwitchStatementCase Literal '⁺' Literal '₊' Literal '＋' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '+' = BreakStatement SwitchStatementCase Literal '⁼' Literal '₌' Literal '＝' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '=' = BreakStatement SwitchStatementCase Literal '！' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '!' = BreakStatement SwitchStatementCase Literal '‼' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '!' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '!' = BreakStatement SwitchStatementCase Literal '⁉' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '!' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '?' = BreakStatement SwitchStatementCase Literal '＃' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '#' = BreakStatement SwitchStatementCase Literal '＄' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '$' = BreakStatement SwitchStatementCase Literal '⁒' Literal '％' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '%' = BreakStatement SwitchStatementCase Literal '＆' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '&' = BreakStatement SwitchStatementCase Literal '⁎' Literal '＊' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '*' = BreakStatement SwitchStatementCase Literal '，' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ',' = BreakStatement SwitchStatementCase Literal '．' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '.' = BreakStatement SwitchStatementCase Literal '⁄' Literal '／' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '/' = BreakStatement SwitchStatementCase Literal '：' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ':' = BreakStatement SwitchStatementCase Literal '⁏' Literal '；' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal ';' = BreakStatement SwitchStatementCase Literal '？' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '?' = BreakStatement SwitchStatementCase Literal '⁇' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '?' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '?' = BreakStatement SwitchStatementCase Literal '⁈' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '?' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '!' = BreakStatement SwitchStatementCase Literal '＠' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '@' = BreakStatement SwitchStatementCase Literal '＼' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '\\' = BreakStatement SwitchStatementCase Literal '‸' Literal '＾' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '^' = BreakStatement SwitchStatementCase Literal '＿' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '_' = BreakStatement SwitchStatementCase Literal '⁓' Literal '～' StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output Literal '~' = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputPos output MemberReference c = BreakStatement End End End ReferenceType TokenFilter",0
582,582,,0
431,431,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.builders Import java.util.LinkedList Import java.util.List Import java.util.TreeMap Import org.apache.lucene.index.Term Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.builders.QueryTreeBuilder Import org.apache.lucene.queryParser.core.nodes.FieldQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode Import org.apache.lucene.search.MultiPhraseQuery Import org.apache.lucene.search.TermQuery ClassDeclaration Modifier public /**
 * Builds a {@link MultiPhraseQuery} object from a {@link MultiPhraseQueryNode}
 * object.
 */ MultiPhraseQueryNodeBuilder ConstructorDeclaration Modifier public MultiPhraseQueryNodeBuilder MethodDeclaration Modifier public ReferenceType MultiPhraseQuery build FormalParameter ReferenceType QueryNode queryNode QueryNodeException LocalVariableDeclaration ReferenceType MultiPhraseQueryNode VariableDeclarator phraseNode Cast ReferenceType MultiPhraseQueryNode MemberReference queryNode LocalVariableDeclaration ReferenceType MultiPhraseQuery VariableDeclarator phraseQuery ClassCreator ReferenceType MultiPhraseQuery LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator children MethodInvocation phraseNode getChildren IfStatement BinaryOperation != MemberReference children Literal null BlockStatement LocalVariableDeclaration ReferenceType TreeMap TypeArgument ReferenceType Integer TypeArgument ReferenceType List TypeArgument ReferenceType Term VariableDeclarator positionTermMap ClassCreator ReferenceType TreeMap TypeArgument ReferenceType Integer TypeArgument ReferenceType List TypeArgument ReferenceType Term ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNode VariableDeclarator child MemberReference children BlockStatement LocalVariableDeclaration ReferenceType FieldQueryNode VariableDeclarator termNode Cast ReferenceType FieldQueryNode MemberReference child LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator termQuery Cast ReferenceType TermQuery MethodInvocation termNode MemberReference QueryTreeBuilder QUERY_TREE_BUILDER_TAGID getTag LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Term VariableDeclarator termList MethodInvocation positionTermMap MethodInvocation termNode getPositionIncrement get IfStatement BinaryOperation == MemberReference termList Literal null BlockStatement StatementExpression Assignment MemberReference termList ClassCreator ReferenceType LinkedList TypeArgument ReferenceType Term = StatementExpression MethodInvocation positionTermMap MethodInvocation termNode getPositionIncrement MemberReference termList put End StatementExpression MethodInvocation termList MethodInvocation termQuery getTerm add End ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator positionIncrement MethodInvocation positionTermMap keySet BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Term VariableDeclarator termList MethodInvocation positionTermMap MemberReference positionIncrement get StatementExpression MethodInvocation phraseQuery MethodInvocation termList ArrayCreator ReferenceType Term MethodInvocation termList size toArray MemberReference positionIncrement add End End ReturnStatement MemberReference phraseQuery ReferenceType StandardQueryBuilder",0
741,741,,1
337,337,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ HungarianStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal ""cs"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dzs"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""gy"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ly"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ny"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ty"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""zs"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""á"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""é"" Literal - 1 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""bb"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""cc"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dd"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ff"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""gg"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""jj"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""kk"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ll"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mm"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nn"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""pp"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""rr"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ccs"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ss"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""zzs"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tt"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""vv"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ggy"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""lly"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nny"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tty"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ssz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""zz"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_3 ArrayInitializer ClassCreator ReferenceType Among Literal ""al"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""el"" Literal - 1 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_4 ArrayInitializer ClassCreator ReferenceType Among Literal ""ba"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ra"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""be"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""re"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ig"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nak"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nek"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""val"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""vel"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ul"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nál"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nél"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ból"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ról"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tól"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""bõl"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""rõl"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tõl"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ül"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""n"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""an"" Literal 19 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ban"" Literal 20 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""en"" Literal 19 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ben"" Literal 22 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""képpen"" Literal 22 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""on"" Literal 19 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ön"" Literal 19 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""képp"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""kor"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""t"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""at"" Literal 29 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""et"" Literal 29 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ként"" Literal 29 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""anként"" Literal 32 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""enként"" Literal 32 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""onként"" Literal 32 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ot"" Literal 29 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ért"" Literal 29 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""öt"" Literal 29 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""hez"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""hoz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""höz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""vá"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""vé"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_5 ArrayInitializer ClassCreator ReferenceType Among Literal ""án"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""én"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ánként"" Literal - 1 Literal 3 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_6 ArrayInitializer ClassCreator ReferenceType Among Literal ""stul"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""astul"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ástul"" Literal 0 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""stül"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""estül"" Literal 3 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""éstül"" Literal 3 Literal 4 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_7 ArrayInitializer ClassCreator ReferenceType Among Literal ""á"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""é"" Literal - 1 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_8 ArrayInitializer ClassCreator ReferenceType Among Literal ""k"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""ak"" Literal 0 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ek"" Literal 0 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ok"" Literal 0 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""ák"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ék"" Literal 0 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ök"" Literal 0 Literal 3 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_9 ArrayInitializer ClassCreator ReferenceType Among Literal ""éi"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""áéi"" Literal 0 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ééi"" Literal 0 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""é"" Literal - 1 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""ké"" Literal 3 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""aké"" Literal 4 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eké"" Literal 4 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""oké"" Literal 4 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""áké"" Literal 4 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""éké"" Literal 4 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""öké"" Literal 4 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""éé"" Literal 3 Literal 8 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_10 ArrayInitializer ClassCreator ReferenceType Among Literal ""a"" Literal - 1 Literal 18 Literal """" This ClassCreator ReferenceType Among Literal ""ja"" Literal 0 Literal 17 Literal """" This ClassCreator ReferenceType Among Literal ""d"" Literal - 1 Literal 16 Literal """" This ClassCreator ReferenceType Among Literal ""ad"" Literal 2 Literal 13 Literal """" This ClassCreator ReferenceType Among Literal ""ed"" Literal 2 Literal 13 Literal """" This ClassCreator ReferenceType Among Literal ""od"" Literal 2 Literal 13 Literal """" This ClassCreator ReferenceType Among Literal ""ád"" Literal 2 Literal 14 Literal """" This ClassCreator ReferenceType Among Literal ""éd"" Literal 2 Literal 15 Literal """" This ClassCreator ReferenceType Among Literal ""öd"" Literal 2 Literal 13 Literal """" This ClassCreator ReferenceType Among Literal ""e"" Literal - 1 Literal 18 Literal """" This ClassCreator ReferenceType Among Literal ""je"" Literal 9 Literal 17 Literal """" This ClassCreator ReferenceType Among Literal ""nk"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""unk"" Literal 11 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ánk"" Literal 11 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""énk"" Literal 11 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ünk"" Literal 11 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""uk"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""juk"" Literal 16 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""ájuk"" Literal 17 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""ük"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""jük"" Literal 19 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""éjük"" Literal 20 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""m"" Literal - 1 Literal 12 Literal """" This ClassCreator ReferenceType Among Literal ""am"" Literal 22 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""em"" Literal 22 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""om"" Literal 22 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""ám"" Literal 22 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""ém"" Literal 22 Literal 11 Literal """" This ClassCreator ReferenceType Among Literal ""o"" Literal - 1 Literal 18 Literal """" This ClassCreator ReferenceType Among Literal ""á"" Literal - 1 Literal 19 Literal """" This ClassCreator ReferenceType Among Literal ""é"" Literal - 1 Literal 20 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_11 ArrayInitializer ClassCreator ReferenceType Among Literal ""id"" Literal - 1 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""aid"" Literal 0 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""jaid"" Literal 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""eid"" Literal 0 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""jeid"" Literal 3 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""áid"" Literal 0 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""éid"" Literal 0 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""i"" Literal - 1 Literal 15 Literal """" This ClassCreator ReferenceType Among Literal ""ai"" Literal 7 Literal 14 Literal """" This ClassCreator ReferenceType Among Literal ""jai"" Literal 8 Literal 11 Literal """" This ClassCreator ReferenceType Among Literal ""ei"" Literal 7 Literal 14 Literal """" This ClassCreator ReferenceType Among Literal ""jei"" Literal 10 Literal 11 Literal """" This ClassCreator ReferenceType Among Literal ""ái"" Literal 7 Literal 12 Literal """" This ClassCreator ReferenceType Among Literal ""éi"" Literal 7 Literal 13 Literal """" This ClassCreator ReferenceType Among Literal ""itek"" Literal - 1 Literal 24 Literal """" This ClassCreator ReferenceType Among Literal ""eitek"" Literal 14 Literal 21 Literal """" This ClassCreator ReferenceType Among Literal ""jeitek"" Literal 15 Literal 20 Literal """" This ClassCreator ReferenceType Among Literal ""éitek"" Literal 14 Literal 23 Literal """" This ClassCreator ReferenceType Among Literal ""ik"" Literal - 1 Literal 29 Literal """" This ClassCreator ReferenceType Among Literal ""aik"" Literal 18 Literal 26 Literal """" This ClassCreator ReferenceType Among Literal ""jaik"" Literal 19 Literal 25 Literal """" This ClassCreator ReferenceType Among Literal ""eik"" Literal 18 Literal 26 Literal """" This ClassCreator ReferenceType Among Literal ""jeik"" Literal 21 Literal 25 Literal """" This ClassCreator ReferenceType Among Literal ""áik"" Literal 18 Literal 27 Literal """" This ClassCreator ReferenceType Among Literal ""éik"" Literal 18 Literal 28 Literal """" This ClassCreator ReferenceType Among Literal ""ink"" Literal - 1 Literal 20 Literal """" This ClassCreator ReferenceType Among Literal ""aink"" Literal 25 Literal 17 Literal """" This ClassCreator ReferenceType Among Literal ""jaink"" Literal 26 Literal 16 Literal """" This ClassCreator ReferenceType Among Literal ""eink"" Literal 25 Literal 17 Literal """" This ClassCreator ReferenceType Among Literal ""jeink"" Literal 28 Literal 16 Literal """" This ClassCreator ReferenceType Among Literal ""áink"" Literal 25 Literal 18 Literal """" This ClassCreator ReferenceType Among Literal ""éink"" Literal 25 Literal 19 Literal """" This ClassCreator ReferenceType Among Literal ""aitok"" Literal - 1 Literal 21 Literal """" This ClassCreator ReferenceType Among Literal ""jaitok"" Literal 32 Literal 20 Literal """" This ClassCreator ReferenceType Among Literal ""áitok"" Literal - 1 Literal 22 Literal """" This ClassCreator ReferenceType Among Literal ""im"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""aim"" Literal 35 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""jaim"" Literal 36 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eim"" Literal 35 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""jeim"" Literal 38 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""áim"" Literal 35 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""éim"" Literal 35 Literal 3 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 1 Literal 17 Literal 52 Literal 14 FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 MethodDeclaration Modifier private copy_from FormalParameter ReferenceType HungarianStemmer other StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference I_p1 MemberReference limit = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 in_grouping BlockStatement BreakStatement lab1 End WhileStatement golab2 Literal true BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 out_grouping BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = BreakStatement golab2 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor End DoStatement lab4 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement BinaryOperation == MethodInvocation MemberReference a_0 Literal 8 find_among Literal 0 BlockStatement BreakStatement lab5 End BreakStatement lab4 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = BreakStatement lab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 out_grouping BlockStatement ReturnStatement Literal false End WhileStatement golab6 Literal true BlockStatement DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 in_grouping BlockStatement BreakStatement lab7 End BreakStatement golab6 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R1 IfStatement BinaryOperation <= MemberReference I_p1 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_v_ending LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_1 Literal 2 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_double LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation == MethodInvocation MemberReference a_2 Literal 23 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_undouble IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference ket MemberReference cursor = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation - MemberReference cursor Literal 1 IfStatement BinaryOperation || BinaryOperation > MemberReference limit_backward MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference c = StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_instrum LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_3 Literal 2 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_double BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! r_double BlockStatement ReturnStatement Literal false End BreakStatement End StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_undouble BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_case StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement BinaryOperation == MethodInvocation MemberReference a_4 Literal 44 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_v_ending BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_case_special LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_5 Literal 3 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_case_other LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_6 Literal 6 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_factive LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_7 Literal 2 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_double BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! r_double BlockStatement ReturnStatement Literal false End BreakStatement End StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_undouble BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_plural LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_8 Literal 7 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 5 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 6 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 7 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_owned LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_9 Literal 12 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 5 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 6 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 7 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 8 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 9 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_sing_owner LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_10 Literal 31 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 5 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 6 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 7 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 8 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 9 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 10 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 11 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 12 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 13 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 14 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 15 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 16 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 17 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 18 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 19 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 20 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_plur_owner LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_11 Literal 42 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 5 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 6 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 7 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 8 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 9 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 10 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 11 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 12 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 13 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 14 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 15 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 16 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 17 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 18 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 19 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 20 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 21 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 22 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 23 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 24 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 25 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 26 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 27 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 28 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 29 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_instrum BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_case BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_case_special BlockStatement BreakStatement lab3 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! r_case_other BlockStatement BreakStatement lab4 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! r_factive BlockStatement BreakStatement lab5 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! r_owned BlockStatement BreakStatement lab6 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! r_sing_owner BlockStatement BreakStatement lab7 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! r_plur_owner BlockStatement BreakStatement lab8 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = StatementExpression Assignment MemberReference v_10 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! r_plural BlockStatement BreakStatement lab9 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = ReturnStatement Literal true ReferenceType SnowballProgram",0
928,928,,1
831,831,,1
834,834,,1
131,131,"CompilationUnit PackageDeclaration org.apache.lucene.search.regex Import org.apache.lucene.search.FilteredTermEnum Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import java.io.IOException ClassDeclaration Modifier public /**
 * Subclass of FilteredTermEnum for enumerating all terms that match the
 * specified regular expression term using the specified regular expression
 * implementation.
 * <p>
 * Term enumerations are always ordered by Term.compareTo().  Each term in
 * the enumeration is greater than all that precede it.
 */ RegexTermEnum FieldDeclaration Modifier private ReferenceType String VariableDeclarator field Literal """" FieldDeclaration Modifier private ReferenceType String VariableDeclarator pre Literal """" FieldDeclaration Modifier private BasicType boolean VariableDeclarator endEnum Literal false FieldDeclaration Modifier private ReferenceType RegexCapabilities VariableDeclarator regexImpl ConstructorDeclaration Modifier public RegexTermEnum FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType Term term FormalParameter ReferenceType RegexCapabilities regexImpl IOException StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference field MethodInvocation term field = LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation term text StatementExpression Assignment This MemberReference regexImpl MemberReference regexImpl = StatementExpression MethodInvocation regexImpl MemberReference text compile StatementExpression Assignment MemberReference pre MethodInvocation regexImpl prefix = IfStatement BinaryOperation == MemberReference pre Literal null StatementExpression Assignment MemberReference pre Literal """" = End StatementExpression MethodInvocation MethodInvocation reader ClassCreator ReferenceType Term MethodInvocation term field MemberReference pre terms setEnum MethodDeclaration Modifier final protected Annotation Override BasicType boolean termCompare FormalParameter ReferenceType Term term IfStatement BinaryOperation == MemberReference field MethodInvocation term field BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator searchText MethodInvocation term text IfStatement MethodInvocation searchText MemberReference pre startsWith BlockStatement ReturnStatement MethodInvocation regexImpl MemberReference searchText match End End StatementExpression Assignment MemberReference endEnum Literal true = ReturnStatement Literal false MethodDeclaration Modifier public final Annotation Override BasicType float difference ReturnStatement Literal 1.0f MethodDeclaration Modifier public final Annotation Override BasicType boolean endEnum ReturnStatement MemberReference endEnum MethodDeclaration Modifier public Annotation Override close IOException StatementExpression SuperMethodInvocation close StatementExpression Assignment MemberReference field Literal null = ReferenceType FilteredTermEnum",0
669,669,,0
414,414,"CompilationUnit PackageDeclaration org.apache.lucene.wikipedia.analysis Import org.apache.lucene.analysis.tokenattributes.TermAttribute ClassDeclaration /**
 * This class is a scanner generated by 
 * <a href=""http://www.jflex.de/"">JFlex</a> 1.4.1
 * on 4/15/08 4:31 AM from the specification file
 * <tt>/mnt2/mike/src/lucene.clean/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.jflex</tt>
 */ WikipediaTokenizerImpl FieldDeclaration /** This character denotes the end of file */ Modifier public final static BasicType int VariableDeclarator YYEOF Literal - 1 FieldDeclaration /** initial size of the lookahead buffer */ Modifier private final static BasicType int VariableDeclarator ZZ_BUFFERSIZE Literal 16384 FieldDeclaration /** lexical states */ Modifier public final static BasicType int VariableDeclarator DOUBLE_BRACE_STATE Literal 8 FieldDeclaration Modifier public final static BasicType int VariableDeclarator INTERNAL_LINK_STATE Literal 2 FieldDeclaration Modifier public final static BasicType int VariableDeclarator TWO_SINGLE_QUOTES_STATE Literal 4 FieldDeclaration Modifier public final static BasicType int VariableDeclarator CATEGORY_STATE Literal 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator FIVE_SINGLE_QUOTES_STATE Literal 6 FieldDeclaration Modifier public final static BasicType int VariableDeclarator STRING Literal 9 FieldDeclaration Modifier public final static BasicType int VariableDeclarator YYINITIAL Literal 0 FieldDeclaration Modifier public final static BasicType int VariableDeclarator DOUBLE_EQUALS_STATE Literal 7 FieldDeclaration Modifier public final static BasicType int VariableDeclarator THREE_SINGLE_QUOTES_STATE Literal 5 FieldDeclaration Modifier public final static BasicType int VariableDeclarator EXTERNAL_LINK_STATE Literal 3 FieldDeclaration /** 
   * Translates characters to character classes
   */ Modifier private final static ReferenceType String VariableDeclarator ZZ_CMAP_PACKED BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\11\0\1\24\1\23\1\0\1\24\1\22\22\0\1\24\1\0\1\12"" Literal ""\1\53\2\0\1\3\1\1\4\0\1\14\1\5\1\2\1\10\12\16"" Literal ""\1\27\1\0\1\7\1\11\1\13\1\53\1\4\2\15\1\30\5\15"" Literal ""\1\41\21\15\1\25\1\0\1\26\1\0\1\6\1\0\1\31\1\43"" Literal ""\2\15\1\33\1\40\1\34\1\50\1\41\4\15\1\42\1\35\1\51"" Literal ""\1\15\1\36\1\52\1\32\3\15\1\44\1\37\1\15\1\45\1\47"" Literal ""\1\46\102\0\27\15\1\0\37\15\1\0ը\15\12\17\206\15\12\17"" Literal ""ɬ\15\12\17\166\15\12\17\166\15\12\17\166\15\12\17\166\15\12\17"" Literal ""\167\15\11\17\166\15\12\17\166\15\12\17\166\15\12\17\340\15\12\17"" Literal ""\166\15\12\17Ŧ\15\12\17\266\15Ā\15฀\15၀\0Ő\21\140\0"" Literal ""\20\21Ā\0\200\21\200\0ᧀ\21\100\0刀\21ఀ\0⮰\20⅐\0"" Literal ""Ȁ\21ѥ\0\73\21\75\15\43\0"" FieldDeclaration /** 
   * Translates characters to character classes
   */ Modifier private final static BasicType char VariableDeclarator ZZ_CMAP MethodInvocation MemberReference ZZ_CMAP_PACKED zzUnpackCMap FieldDeclaration /** 
   * Translates DFA states to action switch labels.
   */ Modifier private final static BasicType int VariableDeclarator ZZ_ACTION MethodInvocation zzUnpackAction FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator ZZ_ACTION_PACKED_0 BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\12\0\4\1\4\2\1\3\1\1\1\4\1\1\2\5"" Literal ""\1\6\2\5\1\7\1\5\2\10\1\11\1\12\1\11"" Literal ""\1\13\1\14\1\10\1\15\1\16\1\15\1\17\1\20"" Literal ""\1\10\1\21\1\10\4\22\1\23\1\22\1\24\1\25"" Literal ""\1\26\3\0\1\27\14\0\1\30\1\31\1\32\1\33"" Literal ""\1\11\1\0\1\34\1\35\1\0\1\36\1\0\1\37"" Literal ""\3\0\1\40\1\41\2\42\1\41\2\43\2\0\1\42"" Literal ""\1\0\14\42\1\41\3\0\1\11\1\44\3\0\1\45"" Literal ""\1\46\5\0\1\47\4\0\1\47\2\0\2\47\2\0"" Literal ""\1\11\5\0\1\31\1\41\1\42\1\50\3\0\1\11"" Literal ""\2\0\1\51\30\0\1\52\2\0\1\53\1\54\1\55"" MethodDeclaration Modifier private static BasicType int zzUnpackAction LocalVariableDeclaration BasicType int VariableDeclarator result ArrayCreator BasicType int Literal 183 LocalVariableDeclaration BasicType int VariableDeclarator offset Literal 0 StatementExpression Assignment MemberReference offset MethodInvocation MemberReference ZZ_ACTION_PACKED_0 MemberReference offset MemberReference result zzUnpackAction = ReturnStatement MemberReference result MethodDeclaration Modifier private static BasicType int zzUnpackAction FormalParameter ReferenceType String packed FormalParameter BasicType int offset FormalParameter BasicType int result LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator j MemberReference offset LocalVariableDeclaration BasicType int VariableDeclarator l MethodInvocation packed length WhileStatement BinaryOperation < MemberReference i MemberReference l BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator count MethodInvocation packed MemberReference ++ i charAt LocalVariableDeclaration BasicType int VariableDeclarator value MethodInvocation packed MemberReference ++ i charAt DoStatement BinaryOperation > MemberReference -- count Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j result MemberReference value = End End ReturnStatement MemberReference j FieldDeclaration /** 
   * Translates a state to a row index in the transition table
   */ Modifier private final static BasicType int VariableDeclarator ZZ_ROWMAP MethodInvocation zzUnpackRowMap FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator ZZ_ROWMAP_PACKED_0 BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\0\0\0\54\0\130\0\204\0\260\0\334\0Ĉ\0Ĵ"" Literal ""\0Š\0ƌ\0Ƹ\0Ǥ\0Ȑ\0ȼ\0ɨ\0ʔ"" Literal ""\0ˀ\0ˬ\0Ƹ\0̘\0̈́\0Ͱ\0Ƹ\0Μ"" Literal ""\0ψ\0ϴ\0Р\0ь\0Ѹ\0Ƹ\0Μ\0Ҥ"" Literal ""\0Ƹ\0Ӑ\0Ӽ\0Ԩ\0Ք\0ր\0֬\0ט"" Literal ""\0؄\0ذ\0ٜ\0ڈ\0ڴ\0Ƹ\0۠\0Μ"" Literal ""\0܌\0ܸ\0ݤ\0ސ\0Ƹ\0Ƹ\0޼\0ߨ"" Literal ""\0ࠔ\0Ƹ\0ࡀ\0࡬\0࢘\0ࣄ\0ࣰ\0ज"" Literal ""\0ै\0ॴ\0ঠ\0ৌ\0৸\0ਤ\0੐\0੼"" Literal ""\0Ƹ\0Ƹ\0ન\0૔\0଀\0଀\0ବ\0୘"" Literal ""\0஄\0ர\0௜\0ఈ\0ఴ\0ౠ\0ಌ\0ಸ"" Literal ""\0೤\0ഐ\0࢘\0഼\0൨\0ඔ\0ව\0෬"" Literal ""\0ธ\0ไ\0๰\0ຜ\0່\0໴\0༠\0ཌ"" Literal ""\0ླྀ\0ྤ\0࿐\0࿼\0ဨ\0ၔ\0ႀ\0Ⴌ"" Literal ""\0ი\0Ƹ\0ᄄ\0ᄰ\0ᅜ\0ᆈ\0Ƹ\0ᆴ"" Literal ""\0ᇠ\0ሌ\0ሸ\0ቤ\0ነ\0ኼ\0የ\0ጔ"" Literal ""\0ፀ\0፬\0᎘\0Ꮔ\0࡬\0৸\0Ᏸ\0ᐜ"" Literal ""\0ᑈ\0ᑴ\0ᒠ\0ᓌ\0ᓸ\0ᔤ\0Ƹ\0ᕐ"" Literal ""\0ᕼ\0ᖨ\0ᗔ\0ᘀ\0ᘬ\0ᙘ\0ᚄ\0ᚰ"" Literal ""\0Ƹ\0ᛜ\0ᜈ\0᜴\0ᝠ\0ឌ\0ី\0៤"" Literal ""\0᠐\0ᠼ\0ᡨ\0ᢔ\0ᣀ\0ᣬ\0ᤘ\0᥄"" Literal ""\0ᥰ\0ᦜ\0ᧈ\0᧴\0ᨠ\0ᩌ\0᩸\0᪤"" Literal ""\0᫐\0᫼\0ᬨ\0᭔\0Ƹ\0Ƹ\0Ƹ"" MethodDeclaration Modifier private static BasicType int zzUnpackRowMap LocalVariableDeclaration BasicType int VariableDeclarator result ArrayCreator BasicType int Literal 183 LocalVariableDeclaration BasicType int VariableDeclarator offset Literal 0 StatementExpression Assignment MemberReference offset MethodInvocation MemberReference ZZ_ROWMAP_PACKED_0 MemberReference offset MemberReference result zzUnpackRowMap = ReturnStatement MemberReference result MethodDeclaration Modifier private static BasicType int zzUnpackRowMap FormalParameter ReferenceType String packed FormalParameter BasicType int offset FormalParameter BasicType int result LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator j MemberReference offset LocalVariableDeclaration BasicType int VariableDeclarator l MethodInvocation packed length WhileStatement BinaryOperation < MemberReference i MemberReference l BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator high BinaryOperation << MethodInvocation packed MemberReference ++ i charAt Literal 16 StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j result BinaryOperation | MemberReference high MethodInvocation packed MemberReference ++ i charAt = End ReturnStatement MemberReference j FieldDeclaration /** 
   * The transition table of the DFA
   */ Modifier private final static BasicType int VariableDeclarator ZZ_TRANS MethodInvocation zzUnpackTrans FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator ZZ_TRANS_PACKED_0 BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\1\13\1\14\5\13\1\15\1\13\1\16\3\13\1\17"" Literal ""\1\20\1\21\1\22\1\23\1\24\2\13\1\25\2\13"" Literal ""\15\17\1\26\2\13\3\17\1\13\7\27\1\30\5\27"" Literal ""\4\31\1\27\1\32\3\27\1\33\1\27\15\31\3\27"" Literal ""\3\31\10\27\1\30\5\27\4\34\1\27\1\32\3\27"" Literal ""\1\35\1\27\15\34\3\27\3\34\1\27\7\36\1\37"" Literal ""\5\36\4\40\1\36\1\32\2\27\1\36\1\41\1\36"" Literal ""\15\40\3\36\1\42\2\40\2\36\1\43\5\36\1\37"" Literal ""\5\36\4\44\1\36\1\45\2\36\1\46\2\36\15\44"" Literal ""\3\36\3\44\10\36\1\37\5\36\4\47\1\36\1\45"" Literal ""\2\36\1\46\2\36\15\47\3\36\3\47\10\36\1\37"" Literal ""\5\36\4\47\1\36\1\45\2\36\1\50\2\36\15\47"" Literal ""\3\36\3\47\10\36\1\37\1\36\1\51\3\36\4\52"" Literal ""\1\36\1\45\5\36\15\52\3\36\3\52\10\36\1\53"" Literal ""\5\36\4\54\1\36\1\45\5\36\15\54\1\36\1\55"" Literal ""\1\36\3\54\1\36\1\56\1\57\5\56\1\60\1\56"" Literal ""\1\61\3\56\4\62\1\56\1\63\2\56\1\64\2\56"" Literal ""\15\62\2\56\1\65\3\62\1\56\55\0\1\66\62\0"" Literal ""\1\67\4\0\4\70\7\0\6\70\1\71\6\70\3\0"" Literal ""\3\70\12\0\1\72\43\0\1\73\1\74\1\75\1\76"" Literal ""\2\77\1\0\1\100\3\0\1\100\1\17\1\20\1\21"" Literal ""\1\22\7\0\15\17\3\0\3\17\3\0\1\101\1\0"" Literal ""\1\102\2\103\1\0\1\104\3\0\1\104\3\20\1\22"" Literal ""\7\0\15\20\3\0\3\20\2\0\1\73\1\105\1\75"" Literal ""\1\76\2\103\1\0\1\104\3\0\1\104\1\21\1\20"" Literal ""\1\21\1\22\7\0\15\21\3\0\3\21\3\0\1\106"" Literal ""\1\0\1\102\2\77\1\0\1\100\3\0\1\100\4\22"" Literal ""\7\0\15\22\3\0\3\22\24\0\1\13\55\0\1\107"" Literal ""\73\0\1\110\16\0\1\67\4\0\4\70\7\0\15\70"" Literal ""\3\0\3\70\16\0\4\31\7\0\15\31\3\0\3\31"" Literal ""\24\0\1\27\56\0\1\111\42\0\4\34\7\0\15\34"" Literal ""\3\0\3\34\27\0\1\112\42\0\4\40\7\0\15\40"" Literal ""\3\0\3\40\16\0\4\40\7\0\2\40\1\113\12\40"" Literal ""\3\0\3\40\2\0\1\114\67\0\4\44\7\0\15\44"" Literal ""\3\0\3\44\24\0\1\36\55\0\1\115\43\0\4\47"" Literal ""\7\0\15\47\3\0\3\47\26\0\1\116\37\0\1\111"" Literal ""\57\0\4\52\7\0\15\52\3\0\3\52\11\0\1\117"" Literal ""\4\0\4\70\7\0\15\70\3\0\3\70\16\0\4\54"" Literal ""\7\0\15\54\3\0\3\54\47\0\1\111\6\0\1\120"" Literal ""\63\0\1\121\57\0\4\62\7\0\15\62\3\0\3\62"" Literal ""\24\0\1\56\55\0\1\122\43\0\4\70\7\0\15\70"" Literal ""\3\0\3\70\14\0\1\36\1\0\4\123\1\0\3\124"" Literal ""\3\0\15\123\3\0\3\123\14\0\1\36\1\0\4\123"" Literal ""\1\0\3\124\3\0\3\123\1\125\11\123\3\0\3\123"" Literal ""\16\0\1\126\1\0\1\126\10\0\15\126\3\0\3\126"" Literal ""\16\0\1\127\1\130\1\131\1\132\7\0\15\127\3\0"" Literal ""\3\127\16\0\1\133\1\0\1\133\10\0\15\133\3\0"" Literal ""\3\133\16\0\1\134\1\135\1\134\1\135\7\0\15\134"" Literal ""\3\0\3\134\16\0\1\136\2\137\1\140\7\0\15\136"" Literal ""\3\0\3\136\16\0\1\100\2\141\10\0\15\100\3\0"" Literal ""\3\100\16\0\1\142\2\143\1\144\7\0\15\142\3\0"" Literal ""\3\142\16\0\4\135\7\0\15\135\3\0\3\135\16\0"" Literal ""\1\145\2\146\1\147\7\0\15\145\3\0\3\145\16\0"" Literal ""\1\150\2\151\1\152\7\0\15\150\3\0\3\150\16\0"" Literal ""\1\153\1\143\1\154\1\144\7\0\15\153\3\0\3\153"" Literal ""\16\0\1\155\2\130\1\132\7\0\15\155\3\0\3\155"" Literal ""\30\0\1\156\1\157\64\0\1\160\27\0\4\40\7\0"" Literal ""\2\40\1\161\12\40\3\0\3\40\2\0\1\162\101\0"" Literal ""\1\163\1\164\40\0\4\70\7\0\6\70\1\165\6\70"" Literal ""\3\0\3\70\2\0\1\166\63\0\1\167\71\0\1\170"" Literal ""\1\171\34\0\1\172\1\0\1\36\1\0\4\123\1\0"" Literal ""\3\124\3\0\15\123\3\0\3\123\16\0\4\173\1\0"" Literal ""\3\124\3\0\15\173\3\0\3\173\12\0\1\172\1\0"" Literal ""\1\36\1\0\4\123\1\0\3\124\3\0\10\123\1\174"" Literal ""\4\123\3\0\3\123\2\0\1\73\13\0\1\126\1\0"" Literal ""\1\126\10\0\15\126\3\0\3\126\3\0\1\175\1\0"" Literal ""\1\102\2\176\6\0\1\127\1\130\1\131\1\132\7\0"" Literal ""\15\127\3\0\3\127\3\0\1\177\1\0\1\102\2\200"" Literal ""\1\0\1\201\3\0\1\201\3\130\1\132\7\0\15\130"" Literal ""\3\0\3\130\3\0\1\202\1\0\1\102\2\200\1\0"" Literal ""\1\201\3\0\1\201\1\131\1\130\1\131\1\132\7\0"" Literal ""\15\131\3\0\3\131\3\0\1\203\1\0\1\102\2\176"" Literal ""\6\0\4\132\7\0\15\132\3\0\3\132\3\0\1\204"" Literal ""\2\0\1\204\7\0\1\134\1\135\1\134\1\135\7\0"" Literal ""\15\134\3\0\3\134\3\0\1\204\2\0\1\204\7\0"" Literal ""\4\135\7\0\15\135\3\0\3\135\3\0\1\176\1\0"" Literal ""\1\102\2\176\6\0\1\136\2\137\1\140\7\0\15\136"" Literal ""\3\0\3\136\3\0\1\200\1\0\1\102\2\200\1\0"" Literal ""\1\201\3\0\1\201\3\137\1\140\7\0\15\137\3\0"" Literal ""\3\137\3\0\1\176\1\0\1\102\2\176\6\0\4\140"" Literal ""\7\0\15\140\3\0\3\140\3\0\1\201\2\0\2\201"" Literal ""\1\0\1\201\3\0\1\201\3\141\10\0\15\141\3\0"" Literal ""\3\141\3\0\1\106\1\0\1\102\2\77\1\0\1\100"" Literal ""\3\0\1\100\1\142\2\143\1\144\7\0\15\142\3\0"" Literal ""\3\142\3\0\1\101\1\0\1\102\2\103\1\0\1\104"" Literal ""\3\0\1\104\3\143\1\144\7\0\15\143\3\0\3\143"" Literal ""\3\0\1\106\1\0\1\102\2\77\1\0\1\100\3\0"" Literal ""\1\100\4\144\7\0\15\144\3\0\3\144\3\0\1\77"" Literal ""\1\0\1\102\2\77\1\0\1\100\3\0\1\100\1\145"" Literal ""\2\146\1\147\7\0\15\145\3\0\3\145\3\0\1\103"" Literal ""\1\0\1\102\2\103\1\0\1\104\3\0\1\104\3\146"" Literal ""\1\147\7\0\15\146\3\0\3\146\3\0\1\77\1\0"" Literal ""\1\102\2\77\1\0\1\100\3\0\1\100\4\147\7\0"" Literal ""\15\147\3\0\3\147\3\0\1\100\2\0\2\100\1\0"" Literal ""\1\100\3\0\1\100\1\150\2\151\1\152\7\0\15\150"" Literal ""\3\0\3\150\3\0\1\104\2\0\2\104\1\0\1\104"" Literal ""\3\0\1\104\3\151\1\152\7\0\15\151\3\0\3\151"" Literal ""\3\0\1\100\2\0\2\100\1\0\1\100\3\0\1\100"" Literal ""\4\152\7\0\15\152\3\0\3\152\3\0\1\205\1\0"" Literal ""\1\102\2\77\1\0\1\100\3\0\1\100\1\153\1\143"" Literal ""\1\154\1\144\7\0\15\153\3\0\3\153\3\0\1\206"" Literal ""\1\0\1\102\2\103\1\0\1\104\3\0\1\104\1\154"" Literal ""\1\143\1\154\1\144\7\0\15\154\3\0\3\154\3\0"" Literal ""\1\203\1\0\1\102\2\176\6\0\1\155\2\130\1\132"" Literal ""\7\0\15\155\3\0\3\155\31\0\1\157\54\0\1\207"" Literal ""\64\0\1\210\26\0\4\40\7\0\15\40\3\0\1\40"" Literal ""\1\211\1\40\31\0\1\164\54\0\1\212\35\0\1\36"" Literal ""\1\0\4\123\1\0\3\124\3\0\3\123\1\213\11\123"" Literal ""\3\0\3\123\2\0\1\214\102\0\1\171\54\0\1\215"" Literal ""\34\0\1\216\52\0\1\172\3\0\4\173\7\0\15\173"" Literal ""\3\0\3\173\12\0\1\172\1\0\1\217\1\0\4\123"" Literal ""\1\0\3\124\3\0\15\123\3\0\3\123\16\0\1\220"" Literal ""\1\132\1\220\1\132\7\0\15\220\3\0\3\220\16\0"" Literal ""\4\140\7\0\15\140\3\0\3\140\16\0\4\144\7\0"" Literal ""\15\144\3\0\3\144\16\0\4\147\7\0\15\147\3\0"" Literal ""\3\147\16\0\4\152\7\0\15\152\3\0\3\152\16\0"" Literal ""\1\221\1\144\1\221\1\144\7\0\15\221\3\0\3\221"" Literal ""\16\0\4\132\7\0\15\132\3\0\3\132\16\0\4\222"" Literal ""\7\0\15\222\3\0\3\222\33\0\1\223\61\0\1\224"" Literal ""\30\0\4\40\6\0\1\225\15\40\3\0\2\40\1\226"" Literal ""\33\0\1\227\32\0\1\172\1\0\1\36\1\0\4\123"" Literal ""\1\0\3\124\3\0\10\123\1\230\4\123\3\0\3\123"" Literal ""\2\0\1\231\104\0\1\232\36\0\4\233\7\0\15\233"" Literal ""\3\0\3\233\3\0\1\175\1\0\1\102\2\176\6\0"" Literal ""\1\220\1\132\1\220\1\132\7\0\15\220\3\0\3\220"" Literal ""\3\0\1\205\1\0\1\102\2\77\1\0\1\100\3\0"" Literal ""\1\100\1\221\1\144\1\221\1\144\7\0\15\221\3\0"" Literal ""\3\221\3\0\1\204\2\0\1\204\7\0\4\222\7\0"" Literal ""\15\222\3\0\3\222\34\0\1\234\55\0\1\235\26\0"" Literal ""\1\236\60\0\4\40\6\0\1\225\15\40\3\0\3\40"" Literal ""\34\0\1\237\31\0\1\172\1\0\1\111\1\0\4\123"" Literal ""\1\0\3\124\3\0\15\123\3\0\3\123\34\0\1\240"" Literal ""\32\0\1\241\2\0\4\233\7\0\15\233\3\0\3\233"" Literal ""\35\0\1\242\62\0\1\243\20\0\1\244\77\0\1\245"" Literal ""\53\0\1\246\32\0\1\36\1\0\4\173\1\0\3\124"" Literal ""\3\0\15\173\3\0\3\173\36\0\1\247\53\0\1\250"" Literal ""\33\0\4\251\7\0\15\251\3\0\3\251\36\0\1\252"" Literal ""\53\0\1\253\54\0\1\254\61\0\1\255\11\0\1\256"" Literal ""\12\0\4\251\7\0\15\251\3\0\3\251\37\0\1\257"" Literal ""\53\0\1\260\54\0\1\261\22\0\1\13\62\0\4\262"" Literal ""\7\0\15\262\3\0\3\262\40\0\1\263\53\0\1\264"" Literal ""\43\0\1\265\26\0\2\262\1\0\2\262\1\0\2\262"" Literal ""\2\0\5\262\7\0\15\262\3\0\4\262\27\0\1\266"" Literal ""\53\0\1\267\24\0"" MethodDeclaration Modifier private static BasicType int zzUnpackTrans LocalVariableDeclaration BasicType int VariableDeclarator result ArrayCreator BasicType int Literal 7040 LocalVariableDeclaration BasicType int VariableDeclarator offset Literal 0 StatementExpression Assignment MemberReference offset MethodInvocation MemberReference ZZ_TRANS_PACKED_0 MemberReference offset MemberReference result zzUnpackTrans = ReturnStatement MemberReference result MethodDeclaration Modifier private static BasicType int zzUnpackTrans FormalParameter ReferenceType String packed FormalParameter BasicType int offset FormalParameter BasicType int result LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator j MemberReference offset LocalVariableDeclaration BasicType int VariableDeclarator l MethodInvocation packed length WhileStatement BinaryOperation < MemberReference i MemberReference l BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator count MethodInvocation packed MemberReference ++ i charAt LocalVariableDeclaration BasicType int VariableDeclarator value MethodInvocation packed MemberReference ++ i charAt StatementExpression MemberReference -- value DoStatement BinaryOperation > MemberReference -- count Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j result MemberReference value = End End ReturnStatement MemberReference j FieldDeclaration Modifier private final static BasicType int VariableDeclarator ZZ_UNKNOWN_ERROR Literal 0 FieldDeclaration Modifier private final static BasicType int VariableDeclarator ZZ_NO_MATCH Literal 1 FieldDeclaration Modifier private final static BasicType int VariableDeclarator ZZ_PUSHBACK_2BIG Literal 2 FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator ZZ_ERROR_MSG ArrayInitializer Literal ""Unkown internal scanner error"" Literal ""Error: could not match input"" Literal ""Error: pushback value was too large"" FieldDeclaration /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */ Modifier private final static BasicType int VariableDeclarator ZZ_ATTRIBUTE MethodInvocation zzUnpackAttribute FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator ZZ_ATTRIBUTE_PACKED_0 BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\12\0\1\11\7\1\1\11\3\1\1\11\6\1\1\11"" Literal ""\2\1\1\11\14\1\1\11\6\1\2\11\3\0\1\11"" Literal ""\14\0\2\1\2\11\1\1\1\0\2\1\1\0\1\1"" Literal ""\1\0\1\1\3\0\7\1\2\0\1\1\1\0\15\1"" Literal ""\3\0\1\1\1\11\3\0\1\1\1\11\5\0\1\1"" Literal ""\4\0\1\1\2\0\2\1\2\0\1\1\5\0\1\11"" Literal ""\3\1\3\0\1\1\2\0\1\11\30\0\1\1\2\0"" Literal ""\3\11"" MethodDeclaration Modifier private static BasicType int zzUnpackAttribute LocalVariableDeclaration BasicType int VariableDeclarator result ArrayCreator BasicType int Literal 183 LocalVariableDeclaration BasicType int VariableDeclarator offset Literal 0 StatementExpression Assignment MemberReference offset MethodInvocation MemberReference ZZ_ATTRIBUTE_PACKED_0 MemberReference offset MemberReference result zzUnpackAttribute = ReturnStatement MemberReference result MethodDeclaration Modifier private static BasicType int zzUnpackAttribute FormalParameter ReferenceType String packed FormalParameter BasicType int offset FormalParameter BasicType int result LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator j MemberReference offset LocalVariableDeclaration BasicType int VariableDeclarator l MethodInvocation packed length WhileStatement BinaryOperation < MemberReference i MemberReference l BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator count MethodInvocation packed MemberReference ++ i charAt LocalVariableDeclaration BasicType int VariableDeclarator value MethodInvocation packed MemberReference ++ i charAt DoStatement BinaryOperation > MemberReference -- count Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j result MemberReference value = End End ReturnStatement MemberReference j FieldDeclaration /** the input device */ Modifier private ReferenceType java ReferenceType io ReferenceType Reader VariableDeclarator zzReader FieldDeclaration /** the current state of the DFA */ Modifier private BasicType int VariableDeclarator zzState FieldDeclaration /** the current lexical state */ Modifier private BasicType int VariableDeclarator zzLexicalState MemberReference YYINITIAL FieldDeclaration /** this buffer contains the current text to be matched and is
      the source of the yytext() string */ Modifier private BasicType char VariableDeclarator zzBuffer ArrayCreator BasicType char MemberReference ZZ_BUFFERSIZE FieldDeclaration /** the textposition at the last accepting state */ Modifier private BasicType int VariableDeclarator zzMarkedPos FieldDeclaration /** the textposition at the last state to be included in yytext */ Modifier private BasicType int VariableDeclarator zzPushbackPos FieldDeclaration /** the current text position in the buffer */ Modifier private BasicType int VariableDeclarator zzCurrentPos FieldDeclaration /** startRead marks the beginning of the yytext() string in the buffer */ Modifier private BasicType int VariableDeclarator zzStartRead FieldDeclaration /** endRead marks the last character in the buffer, that has been read
      from input */ Modifier private BasicType int VariableDeclarator zzEndRead FieldDeclaration /** number of newlines encountered up to the start of the matched text */ Modifier private BasicType int VariableDeclarator yyline FieldDeclaration /** the number of characters up to the start of the matched text */ Modifier private BasicType int VariableDeclarator yychar FieldDeclaration /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */ Modifier private BasicType int VariableDeclarator yycolumn FieldDeclaration /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */ Modifier private BasicType boolean VariableDeclarator zzAtBOL Literal true FieldDeclaration /** zzAtEOF == true <=> the scanner is at the EOF */ Modifier private BasicType boolean VariableDeclarator zzAtEOF FieldDeclaration Modifier public final static BasicType int VariableDeclarator ALPHANUM MemberReference WikipediaTokenizer ALPHANUM_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator APOSTROPHE MemberReference WikipediaTokenizer APOSTROPHE_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator ACRONYM MemberReference WikipediaTokenizer ACRONYM_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator COMPANY MemberReference WikipediaTokenizer COMPANY_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator EMAIL MemberReference WikipediaTokenizer EMAIL_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator HOST MemberReference WikipediaTokenizer HOST_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator NUM MemberReference WikipediaTokenizer NUM_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator CJ MemberReference WikipediaTokenizer CJ_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator INTERNAL_LINK MemberReference WikipediaTokenizer INTERNAL_LINK_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator EXTERNAL_LINK MemberReference WikipediaTokenizer EXTERNAL_LINK_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator CITATION MemberReference WikipediaTokenizer CITATION_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator CATEGORY MemberReference WikipediaTokenizer CATEGORY_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator BOLD MemberReference WikipediaTokenizer BOLD_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator ITALICS MemberReference WikipediaTokenizer ITALICS_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator BOLD_ITALICS MemberReference WikipediaTokenizer BOLD_ITALICS_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator HEADING MemberReference WikipediaTokenizer HEADING_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator SUB_HEADING MemberReference WikipediaTokenizer SUB_HEADING_ID FieldDeclaration Modifier public final static BasicType int VariableDeclarator EXTERNAL_LINK_URL MemberReference WikipediaTokenizer EXTERNAL_LINK_URL_ID FieldDeclaration Modifier private BasicType int VariableDeclarator currentTokType FieldDeclaration Modifier private BasicType int VariableDeclarator numBalanced Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator positionInc Literal 1 FieldDeclaration Modifier private BasicType int VariableDeclarator numLinkToks Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator numWikiTokensSeen Literal 0 FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator TOKEN_TYPES MemberReference WikipediaTokenizer TOKEN_TYPES MethodDeclaration /**
Returns the number of tokens seen inside a category or link, etc.
@return the number of tokens seen inside the context of wiki syntax.
**/ Modifier public final BasicType int getNumWikiTokensSeen ReturnStatement MemberReference numWikiTokensSeen MethodDeclaration Modifier public final BasicType int yychar ReturnStatement MemberReference yychar MethodDeclaration Modifier public final BasicType int getPositionIncrement ReturnStatement MemberReference positionInc MethodDeclaration /**
 * Fills Lucene token with the current token text.
 */ Modifier final getText FormalParameter ReferenceType TermAttribute t StatementExpression MethodInvocation t MemberReference zzBuffer MemberReference zzStartRead BinaryOperation - MemberReference zzMarkedPos MemberReference zzStartRead setTermBuffer MethodDeclaration Modifier final BasicType int setText FormalParameter ReferenceType StringBuilder buffer LocalVariableDeclaration BasicType int VariableDeclarator length BinaryOperation - MemberReference zzMarkedPos MemberReference zzStartRead StatementExpression MethodInvocation buffer MemberReference zzBuffer MemberReference zzStartRead MemberReference length append ReturnStatement MemberReference length ConstructorDeclaration /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */ WikipediaTokenizerImpl FormalParameter ReferenceType java ReferenceType io ReferenceType Reader in StatementExpression Assignment This MemberReference zzReader MemberReference in = ConstructorDeclaration /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */ WikipediaTokenizerImpl FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream in StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType java ReferenceType io ReferenceType InputStreamReader MemberReference in MethodDeclaration /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */ Modifier private static BasicType char zzUnpackCMap FormalParameter ReferenceType String packed LocalVariableDeclaration BasicType char VariableDeclarator map ArrayCreator BasicType char Literal 0x10000 LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator j Literal 0 WhileStatement BinaryOperation < MemberReference i Literal 230 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator count MethodInvocation packed MemberReference ++ i charAt LocalVariableDeclaration BasicType char VariableDeclarator value MethodInvocation packed MemberReference ++ i charAt DoStatement BinaryOperation > MemberReference -- count Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j map MemberReference value = End End ReturnStatement MemberReference map MethodDeclaration /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */ Modifier private BasicType boolean zzRefill java.io.IOException IfStatement BinaryOperation > MemberReference zzStartRead Literal 0 BlockStatement StatementExpression MethodInvocation System MemberReference zzBuffer MemberReference zzStartRead MemberReference zzBuffer Literal 0 BinaryOperation - MemberReference zzEndRead MemberReference zzStartRead arraycopy StatementExpression Assignment MemberReference zzEndRead MemberReference zzStartRead -= StatementExpression Assignment MemberReference zzCurrentPos MemberReference zzStartRead -= StatementExpression Assignment MemberReference zzMarkedPos MemberReference zzStartRead -= StatementExpression Assignment MemberReference zzPushbackPos MemberReference zzStartRead -= StatementExpression Assignment MemberReference zzStartRead Literal 0 = End IfStatement BinaryOperation >= MemberReference zzCurrentPos MemberReference zzBuffer length BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator newBuffer ArrayCreator BasicType char BinaryOperation * MemberReference zzCurrentPos Literal 2 StatementExpression MethodInvocation System MemberReference zzBuffer Literal 0 MemberReference newBuffer Literal 0 MemberReference zzBuffer length arraycopy StatementExpression Assignment MemberReference zzBuffer MemberReference newBuffer = End LocalVariableDeclaration BasicType int VariableDeclarator numRead MethodInvocation zzReader MemberReference zzBuffer MemberReference zzEndRead BinaryOperation - MemberReference zzBuffer length MemberReference zzEndRead read IfStatement BinaryOperation < MemberReference numRead Literal 0 BlockStatement ReturnStatement Literal true BlockStatement StatementExpression Assignment MemberReference zzEndRead MemberReference numRead += ReturnStatement Literal false End MethodDeclaration /**
   * Closes the input stream.
   */ Modifier public final yyclose java.io.IOException StatementExpression Assignment MemberReference zzAtEOF Literal true = StatementExpression Assignment MemberReference zzEndRead MemberReference zzStartRead = IfStatement BinaryOperation != MemberReference zzReader Literal null StatementExpression MethodInvocation zzReader close End MethodDeclaration /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */ Modifier public final yyreset FormalParameter ReferenceType java ReferenceType io ReferenceType Reader reader StatementExpression Assignment MemberReference zzReader MemberReference reader = StatementExpression Assignment MemberReference zzAtBOL Literal true = StatementExpression Assignment MemberReference zzAtEOF Literal false = StatementExpression Assignment MemberReference zzEndRead Assignment MemberReference zzStartRead Literal 0 = = StatementExpression Assignment MemberReference zzCurrentPos Assignment MemberReference zzMarkedPos Assignment MemberReference zzPushbackPos Literal 0 = = = StatementExpression Assignment MemberReference yyline Assignment MemberReference yychar Assignment MemberReference yycolumn Literal 0 = = = StatementExpression Assignment MemberReference zzLexicalState MemberReference YYINITIAL = MethodDeclaration /**
   * Returns the current lexical state.
   */ Modifier public final BasicType int yystate ReturnStatement MemberReference zzLexicalState MethodDeclaration /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */ Modifier public final yybegin FormalParameter BasicType int newState StatementExpression Assignment MemberReference zzLexicalState MemberReference newState = MethodDeclaration /**
   * Returns the text matched by the current regular expression.
   */ Modifier public final ReferenceType String yytext ReturnStatement ClassCreator ReferenceType String MemberReference zzBuffer MemberReference zzStartRead BinaryOperation - MemberReference zzMarkedPos MemberReference zzStartRead MethodDeclaration /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */ Modifier public final BasicType char yycharat FormalParameter BasicType int pos ReturnStatement MemberReference ArraySelector BinaryOperation + MemberReference zzStartRead MemberReference pos zzBuffer MethodDeclaration /**
   * Returns the length of the matched text region.
   */ Modifier public final BasicType int yylength ReturnStatement BinaryOperation - MemberReference zzMarkedPos MemberReference zzStartRead MethodDeclaration /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that ""Can't Possibly Happen"".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */ Modifier private zzScanError FormalParameter BasicType int errorCode LocalVariableDeclaration ReferenceType String VariableDeclarator message TryStatement StatementExpression Assignment MemberReference message MemberReference ArraySelector MemberReference errorCode ZZ_ERROR_MSG = CatchClause CatchClauseParameter ArrayIndexOutOfBoundsException e StatementExpression Assignment MemberReference message MemberReference ArraySelector MemberReference ZZ_UNKNOWN_ERROR ZZ_ERROR_MSG = ThrowStatement ClassCreator ReferenceType Error MemberReference message MethodDeclaration /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */ Modifier public yypushback FormalParameter BasicType int number IfStatement BinaryOperation > MemberReference number MethodInvocation yylength StatementExpression MethodInvocation MemberReference ZZ_PUSHBACK_2BIG zzScanError End StatementExpression Assignment MemberReference zzMarkedPos MemberReference number -= MethodDeclaration /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */ Modifier public BasicType int getNextToken java.io.IOException LocalVariableDeclaration BasicType int VariableDeclarator zzInput LocalVariableDeclaration BasicType int VariableDeclarator zzAction LocalVariableDeclaration BasicType int VariableDeclarator zzCurrentPosL LocalVariableDeclaration BasicType int VariableDeclarator zzMarkedPosL LocalVariableDeclaration BasicType int VariableDeclarator zzEndReadL MemberReference zzEndRead LocalVariableDeclaration BasicType char VariableDeclarator zzBufferL MemberReference zzBuffer LocalVariableDeclaration BasicType char VariableDeclarator zzCMapL MemberReference ZZ_CMAP LocalVariableDeclaration BasicType int VariableDeclarator zzTransL MemberReference ZZ_TRANS LocalVariableDeclaration BasicType int VariableDeclarator zzRowMapL MemberReference ZZ_ROWMAP LocalVariableDeclaration BasicType int VariableDeclarator zzAttrL MemberReference ZZ_ATTRIBUTE WhileStatement Literal true BlockStatement StatementExpression Assignment MemberReference zzMarkedPosL MemberReference zzMarkedPos = StatementExpression Assignment MemberReference yychar BinaryOperation - MemberReference zzMarkedPosL MemberReference zzStartRead += StatementExpression Assignment MemberReference zzAction Literal - 1 = StatementExpression Assignment MemberReference zzCurrentPosL Assignment MemberReference zzCurrentPos Assignment MemberReference zzStartRead MemberReference zzMarkedPosL = = = StatementExpression Assignment MemberReference zzState MemberReference zzLexicalState = BlockStatement zzForAction WhileStatement Literal true BlockStatement IfStatement BinaryOperation < MemberReference zzCurrentPosL MemberReference zzEndReadL StatementExpression Assignment MemberReference zzInput MemberReference ArraySelector MemberReference ++ zzCurrentPosL zzBufferL = IfStatement MemberReference zzAtEOF BlockStatement StatementExpression Assignment MemberReference zzInput MemberReference YYEOF = BreakStatement zzForAction BlockStatement StatementExpression Assignment MemberReference zzCurrentPos MemberReference zzCurrentPosL = StatementExpression Assignment MemberReference zzMarkedPos MemberReference zzMarkedPosL = LocalVariableDeclaration BasicType boolean VariableDeclarator eof MethodInvocation zzRefill StatementExpression Assignment MemberReference zzCurrentPosL MemberReference zzCurrentPos = StatementExpression Assignment MemberReference zzMarkedPosL MemberReference zzMarkedPos = StatementExpression Assignment MemberReference zzBufferL MemberReference zzBuffer = StatementExpression Assignment MemberReference zzEndReadL MemberReference zzEndRead = IfStatement MemberReference eof BlockStatement StatementExpression Assignment MemberReference zzInput MemberReference YYEOF = BreakStatement zzForAction BlockStatement StatementExpression Assignment MemberReference zzInput MemberReference ArraySelector MemberReference ++ zzCurrentPosL zzBufferL = End End End LocalVariableDeclaration BasicType int VariableDeclarator zzNext MemberReference ArraySelector BinaryOperation + MemberReference ArraySelector MemberReference zzState zzRowMapL MemberReference ArraySelector MemberReference zzInput zzCMapL zzTransL IfStatement BinaryOperation == MemberReference zzNext Literal - 1 BreakStatement zzForAction End StatementExpression Assignment MemberReference zzState MemberReference zzNext = LocalVariableDeclaration BasicType int VariableDeclarator zzAttributes MemberReference ArraySelector MemberReference zzState zzAttrL IfStatement BinaryOperation == BinaryOperation & MemberReference zzAttributes Literal 1 Literal 1 BlockStatement StatementExpression Assignment MemberReference zzAction MemberReference zzState = StatementExpression Assignment MemberReference zzMarkedPosL MemberReference zzCurrentPosL = IfStatement BinaryOperation == BinaryOperation & MemberReference zzAttributes Literal 8 Literal 8 BreakStatement zzForAction End End End StatementExpression Assignment MemberReference zzMarkedPos MemberReference zzMarkedPosL = SwitchStatement TernaryExpression BinaryOperation < MemberReference zzAction Literal 0 MemberReference zzAction MemberReference ArraySelector MemberReference zzAction ZZ_ACTION SwitchStatementCase Literal 8 BlockStatement SwitchStatementCase Literal 46 BreakStatement SwitchStatementCase Literal 28 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference INTERNAL_LINK = StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression MethodInvocation MemberReference INTERNAL_LINK_STATE yybegin SwitchStatementCase Literal 47 BreakStatement SwitchStatementCase Literal 3 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = ReturnStatement MemberReference CJ SwitchStatementCase Literal 48 BreakStatement SwitchStatementCase Literal 30 BlockStatement StatementExpression Assignment MemberReference numBalanced Literal 0 = StatementExpression Assignment MemberReference currentTokType MemberReference ALPHANUM = StatementExpression MethodInvocation MemberReference YYINITIAL yybegin SwitchStatementCase Literal 49 BreakStatement SwitchStatementCase Literal 10 BlockStatement StatementExpression Assignment MemberReference numLinkToks Literal 0 = StatementExpression Assignment MemberReference positionInc Literal 0 = StatementExpression MethodInvocation MemberReference YYINITIAL yybegin SwitchStatementCase Literal 50 BreakStatement SwitchStatementCase Literal 41 BlockStatement StatementExpression Assignment MemberReference numBalanced Literal 0 = StatementExpression Assignment MemberReference currentTokType MemberReference ALPHANUM = StatementExpression MethodInvocation MemberReference YYINITIAL yybegin SwitchStatementCase Literal 51 BreakStatement SwitchStatementCase Literal 7 BlockStatement StatementExpression MethodInvocation MemberReference INTERNAL_LINK_STATE yybegin StatementExpression MemberReference ++ numWikiTokensSeen ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 52 BreakStatement SwitchStatementCase Literal 23 BlockStatement StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference positionInc Literal 1 = StatementExpression MethodInvocation MemberReference DOUBLE_EQUALS_STATE yybegin SwitchStatementCase Literal 53 BreakStatement SwitchStatementCase Literal 38 BlockStatement StatementExpression Assignment MemberReference numBalanced Literal 0 = StatementExpression Assignment MemberReference currentTokType MemberReference ALPHANUM = StatementExpression MethodInvocation MemberReference YYINITIAL yybegin SwitchStatementCase Literal 54 BreakStatement SwitchStatementCase Literal 17 BlockStatement StatementExpression MethodInvocation MemberReference DOUBLE_BRACE_STATE yybegin StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 55 BreakStatement SwitchStatementCase Literal 24 BlockStatement StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference positionInc Literal 1 = StatementExpression Assignment MemberReference currentTokType MemberReference INTERNAL_LINK = StatementExpression MethodInvocation MemberReference INTERNAL_LINK_STATE yybegin SwitchStatementCase Literal 56 BreakStatement SwitchStatementCase Literal 14 BlockStatement StatementExpression MethodInvocation MemberReference STRING yybegin StatementExpression MemberReference ++ numWikiTokensSeen ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 57 BreakStatement SwitchStatementCase Literal 5 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = SwitchStatementCase Literal 58 BreakStatement SwitchStatementCase Literal 43 BlockStatement StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference positionInc Literal 1 = StatementExpression Assignment MemberReference currentTokType MemberReference CATEGORY = StatementExpression MethodInvocation MemberReference CATEGORY_STATE yybegin SwitchStatementCase Literal 59 BreakStatement SwitchStatementCase Literal 26 BlockStatement StatementExpression MethodInvocation MemberReference YYINITIAL yybegin SwitchStatementCase Literal 60 BreakStatement SwitchStatementCase Literal 20 BlockStatement StatementExpression Assignment MemberReference numBalanced Literal 0 = StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference currentTokType MemberReference EXTERNAL_LINK = StatementExpression MethodInvocation MemberReference EXTERNAL_LINK_STATE yybegin SwitchStatementCase Literal 61 BreakStatement SwitchStatementCase Literal 1 BlockStatement StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference positionInc Literal 1 = SwitchStatementCase Literal 62 BreakStatement SwitchStatementCase Literal 40 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = ReturnStatement MemberReference EMAIL SwitchStatementCase Literal 63 BreakStatement SwitchStatementCase Literal 25 BlockStatement StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference positionInc Literal 1 = StatementExpression Assignment MemberReference currentTokType MemberReference CITATION = StatementExpression MethodInvocation MemberReference DOUBLE_BRACE_STATE yybegin SwitchStatementCase Literal 64 BreakStatement SwitchStatementCase Literal 39 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = ReturnStatement MemberReference ACRONYM SwitchStatementCase Literal 65 BreakStatement SwitchStatementCase Literal 9 BlockStatement IfStatement BinaryOperation == MemberReference numLinkToks Literal 0 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 0 = BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = End StatementExpression MemberReference ++ numWikiTokensSeen StatementExpression Assignment MemberReference currentTokType MemberReference EXTERNAL_LINK = StatementExpression MethodInvocation MemberReference EXTERNAL_LINK_STATE yybegin StatementExpression MemberReference ++ numLinkToks ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 66 BreakStatement SwitchStatementCase Literal 22 BlockStatement StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference positionInc Literal 1 = IfStatement BinaryOperation == MemberReference numBalanced Literal 0 BlockStatement StatementExpression MemberReference ++ numBalanced StatementExpression MethodInvocation MemberReference TWO_SINGLE_QUOTES_STATE yybegin BlockStatement StatementExpression Assignment MemberReference numBalanced Literal 0 = End SwitchStatementCase Literal 67 BreakStatement SwitchStatementCase Literal 31 BlockStatement StatementExpression Assignment MemberReference numBalanced Literal 0 = StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference currentTokType MemberReference INTERNAL_LINK = StatementExpression MethodInvocation MemberReference INTERNAL_LINK_STATE yybegin SwitchStatementCase Literal 68 BreakStatement SwitchStatementCase Literal 15 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference SUB_HEADING = StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression MethodInvocation MemberReference STRING yybegin SwitchStatementCase Literal 69 BreakStatement SwitchStatementCase Literal 18 BlockStatement SwitchStatementCase Literal 70 BreakStatement SwitchStatementCase Literal 42 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = StatementExpression MemberReference ++ numWikiTokensSeen StatementExpression MethodInvocation MemberReference EXTERNAL_LINK_STATE yybegin ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 71 BreakStatement SwitchStatementCase Literal 21 BlockStatement StatementExpression MethodInvocation MemberReference STRING yybegin ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 72 BreakStatement SwitchStatementCase Literal 37 BlockStatement StatementExpression Assignment MemberReference numBalanced Literal 0 = StatementExpression Assignment MemberReference currentTokType MemberReference ALPHANUM = StatementExpression MethodInvocation MemberReference YYINITIAL yybegin SwitchStatementCase Literal 73 BreakStatement SwitchStatementCase Literal 33 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = ReturnStatement MemberReference HOST SwitchStatementCase Literal 74 BreakStatement SwitchStatementCase Literal 45 BlockStatement StatementExpression Assignment MemberReference numBalanced Literal 0 = StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference currentTokType MemberReference CATEGORY = StatementExpression MethodInvocation MemberReference CATEGORY_STATE yybegin SwitchStatementCase Literal 75 BreakStatement SwitchStatementCase Literal 36 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference BOLD_ITALICS = StatementExpression MethodInvocation MemberReference FIVE_SINGLE_QUOTES_STATE yybegin SwitchStatementCase Literal 76 BreakStatement SwitchStatementCase Literal 13 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference EXTERNAL_LINK = StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression MethodInvocation MemberReference EXTERNAL_LINK_STATE yybegin SwitchStatementCase Literal 77 BreakStatement SwitchStatementCase Literal 16 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference HEADING = StatementExpression MethodInvocation MemberReference DOUBLE_EQUALS_STATE yybegin StatementExpression MemberReference ++ numWikiTokensSeen ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 78 BreakStatement SwitchStatementCase Literal 12 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference ITALICS = StatementExpression MemberReference ++ numWikiTokensSeen StatementExpression MethodInvocation MemberReference STRING yybegin ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 79 BreakStatement SwitchStatementCase Literal 6 BlockStatement StatementExpression MethodInvocation MemberReference CATEGORY_STATE yybegin StatementExpression MemberReference ++ numWikiTokensSeen ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 80 BreakStatement SwitchStatementCase Literal 32 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = ReturnStatement MemberReference APOSTROPHE SwitchStatementCase Literal 81 BreakStatement SwitchStatementCase Literal 19 BlockStatement StatementExpression MethodInvocation MemberReference STRING yybegin StatementExpression MemberReference ++ numWikiTokensSeen ReturnStatement MemberReference currentTokType SwitchStatementCase Literal 82 BreakStatement SwitchStatementCase Literal 34 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = ReturnStatement MemberReference NUM SwitchStatementCase Literal 83 BreakStatement SwitchStatementCase Literal 44 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference CATEGORY = StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression MethodInvocation MemberReference CATEGORY_STATE yybegin SwitchStatementCase Literal 84 BreakStatement SwitchStatementCase Literal 2 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = ReturnStatement MemberReference ALPHANUM SwitchStatementCase Literal 85 BreakStatement SwitchStatementCase Literal 35 BlockStatement StatementExpression Assignment MemberReference positionInc Literal 1 = ReturnStatement MemberReference COMPANY SwitchStatementCase Literal 86 BreakStatement SwitchStatementCase Literal 11 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference BOLD = StatementExpression MethodInvocation MemberReference THREE_SINGLE_QUOTES_STATE yybegin SwitchStatementCase Literal 87 BreakStatement SwitchStatementCase Literal 29 BlockStatement StatementExpression Assignment MemberReference currentTokType MemberReference INTERNAL_LINK = StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression MethodInvocation MemberReference INTERNAL_LINK_STATE yybegin SwitchStatementCase Literal 88 BreakStatement SwitchStatementCase Literal 4 BlockStatement StatementExpression Assignment MemberReference numWikiTokensSeen Literal 0 = StatementExpression Assignment MemberReference positionInc Literal 1 = StatementExpression Assignment MemberReference currentTokType MemberReference EXTERNAL_LINK_URL = StatementExpression MethodInvocation MemberReference EXTERNAL_LINK_STATE yybegin SwitchStatementCase Literal 89 BreakStatement SwitchStatementCase Literal 27 BlockStatement StatementExpression Assignment MemberReference numLinkToks Literal 0 = StatementExpression MethodInvocation MemberReference YYINITIAL yybegin SwitchStatementCase Literal 90 BreakStatement SwitchStatementCase IfStatement BinaryOperation && BinaryOperation == MemberReference zzInput MemberReference YYEOF BinaryOperation == MemberReference zzStartRead MemberReference zzCurrentPos BlockStatement StatementExpression Assignment MemberReference zzAtEOF Literal true = ReturnStatement MemberReference YYEOF BlockStatement StatementExpression MethodInvocation MemberReference ZZ_NO_MATCH zzScanError End End End",0
95,95,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.Reader Import org.apache.lucene.util.AttributeSource ClassDeclaration Modifier public /** A LetterTokenizer is a tokenizer that divides text at non-letters.  That's
  to say, it defines tokens as maximal strings of adjacent letters, as defined
  by java.lang.Character.isLetter() predicate.

  Note: this does a decent job for most European languages, but does a terrible
  job for some Asian languages, where words are not separated by spaces. */ LetterTokenizer ConstructorDeclaration Modifier public /** Construct a new LetterTokenizer. */ LetterTokenizer FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in ConstructorDeclaration Modifier public /** Construct a new LetterTokenizer using a given {@link AttributeSource}. */ LetterTokenizer FormalParameter ReferenceType AttributeSource source FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference source MemberReference in ConstructorDeclaration Modifier public /** Construct a new LetterTokenizer using a given {@link org.apache.lucene.util.AttributeSource.AttributeFactory}. */ LetterTokenizer FormalParameter ReferenceType AttributeFactory factory FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference factory MemberReference in MethodDeclaration /** Collects only characters which satisfy
   * {@link Character#isLetter(char)}.*/ Modifier protected Annotation Override BasicType boolean isTokenChar FormalParameter BasicType char c ReturnStatement MethodInvocation Character MemberReference c isLetter ReferenceType CharTokenizer",0
609,609,,0
165,165,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import java.util.ArrayList Import java.util.Collection Import java.util.List Import org.apache.lucene.document.Document Import org.apache.lucene.index.IndexReader.FieldOption Import org.apache.lucene.index.MergePolicy.MergeAbortedException Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexInput Import org.apache.lucene.store.IndexOutput ClassDeclaration Modifier final /**
 * The SegmentMerger class combines two or more Segments, represented by an IndexReader ({@link #add},
 * into a single Segment.  After adding the appropriate readers, call the merge method to combine the 
 * segments.
 *<P> 
 * If the compoundFile flag is set, then the segments will be merged into a compound file.
 *   
 * 
 * @see #merge
 * @see #add
 */ SegmentMerger FieldDeclaration /** norms header placeholder */ Modifier final static BasicType byte VariableDeclarator NORMS_HEADER ArrayCreator BasicType byte ArrayInitializer Literal 'N' Literal 'R' Literal 'M' Literal - 1 FieldDeclaration Modifier private ReferenceType Directory VariableDeclarator directory FieldDeclaration Modifier private ReferenceType String VariableDeclarator segment FieldDeclaration Modifier private BasicType int VariableDeclarator termIndexInterval MemberReference IndexWriter DEFAULT_TERM_INDEX_INTERVAL FieldDeclaration Modifier private ReferenceType List TypeArgument ReferenceType IndexReader VariableDeclarator readers ClassCreator ReferenceType ArrayList TypeArgument ReferenceType IndexReader FieldDeclaration Modifier private ReferenceType FieldInfos VariableDeclarator fieldInfos FieldDeclaration Modifier private BasicType int VariableDeclarator mergedDocs FieldDeclaration Modifier private final ReferenceType CheckAbort VariableDeclarator checkAbort FieldDeclaration Modifier private BasicType boolean VariableDeclarator mergeDocStores FieldDeclaration /** Maximum number of contiguous documents to bulk-copy
      when merging stored fields */ Modifier private final static BasicType int VariableDeclarator MAX_RAW_MERGE_DOCS Literal 4192 ConstructorDeclaration /** This ctor used only by test code.
   * 
   * @param dir The Directory to merge the other segments into
   * @param name The name of the new segment
   */ SegmentMerger FormalParameter ReferenceType Directory dir FormalParameter ReferenceType String name StatementExpression Assignment MemberReference directory MemberReference dir = StatementExpression Assignment MemberReference segment MemberReference name = StatementExpression Assignment MemberReference checkAbort ClassCreator ReferenceType CheckAbort Literal null Literal null MethodDeclaration Modifier public Annotation Override work FormalParameter BasicType double units MergeAbortedException = ConstructorDeclaration SegmentMerger FormalParameter ReferenceType IndexWriter writer FormalParameter ReferenceType String name FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge StatementExpression Assignment MemberReference directory MethodInvocation writer getDirectory = StatementExpression Assignment MemberReference segment MemberReference name = IfStatement BinaryOperation != MemberReference merge Literal null BlockStatement StatementExpression Assignment MemberReference checkAbort ClassCreator ReferenceType CheckAbort MemberReference merge MemberReference directory = BlockStatement StatementExpression Assignment MemberReference checkAbort ClassCreator ReferenceType CheckAbort Literal null Literal null MethodDeclaration Modifier public Annotation Override work FormalParameter BasicType double units MergeAbortedException = End StatementExpression Assignment MemberReference termIndexInterval MethodInvocation writer getTermIndexInterval = MethodDeclaration BasicType boolean hasProx ReturnStatement MethodInvocation fieldInfos hasProx MethodDeclaration /**
   * Add an IndexReader to the collection of readers that are to be merged
   * @param reader
   */ Modifier final add FormalParameter ReferenceType IndexReader reader StatementExpression MethodInvocation readers MemberReference reader add MethodDeclaration /**
   * 
   * @param i The index of the reader to return
   * @return The ith reader to be merged
   */ Modifier final ReferenceType IndexReader segmentReader FormalParameter BasicType int i ReturnStatement MethodInvocation readers MemberReference i get MethodDeclaration /**
   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor
   * @return The number of documents that were merged
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier final BasicType int merge CorruptIndexException IOException ReturnStatement MethodInvocation Literal true merge MethodDeclaration /**
   * Merges the readers specified by the {@link #add} method
   * into the directory passed to the constructor.
   * @param mergeDocStores if false, we will not merge the
   * stored fields nor vectors files
   * @return The number of documents that were merged
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier final BasicType int merge FormalParameter BasicType boolean mergeDocStores CorruptIndexException IOException StatementExpression Assignment This MemberReference mergeDocStores MemberReference mergeDocStores = StatementExpression Assignment MemberReference mergedDocs MethodInvocation mergeFields = StatementExpression MethodInvocation mergeTerms StatementExpression MethodInvocation mergeNorms IfStatement BinaryOperation && MemberReference mergeDocStores MethodInvocation fieldInfos hasVectors StatementExpression MethodInvocation mergeVectors End ReturnStatement MemberReference mergedDocs MethodDeclaration /**
   * close all IndexReaders that have been added.
   * Should not be called before merge().
   * @throws IOException
   */ Modifier final closeReaders IOException ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType IndexReader VariableDeclarator reader MemberReference readers BlockStatement StatementExpression MethodInvocation reader close End MethodDeclaration Modifier final ReferenceType List TypeArgument ReferenceType String createCompoundFile FormalParameter ReferenceType String fileName IOException LocalVariableDeclaration ReferenceType CompoundFileWriter VariableDeclarator cfsWriter ClassCreator ReferenceType CompoundFileWriter MemberReference directory MemberReference fileName MemberReference checkAbort LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator files ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String BinaryOperation + MemberReference IndexFileNames.COMPOUND_EXTENSIONS length Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference IndexFileNames.COMPOUND_EXTENSIONS length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator ext MemberReference IndexFileNames ArraySelector MemberReference i COMPOUND_EXTENSIONS IfStatement BinaryOperation && MethodInvocation ext MemberReference IndexFileNames PROX_EXTENSION equals MethodInvocation ! hasProx ContinueStatement End IfStatement BinaryOperation || MemberReference mergeDocStores BinaryOperation && MethodInvocation ! ext MemberReference IndexFileNames FIELDS_EXTENSION equals MethodInvocation ! ext MemberReference IndexFileNames FIELDS_INDEX_EXTENSION equals StatementExpression MethodInvocation files BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference ext add End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation fieldInfos size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation fieldInfos MemberReference i fieldInfo IfStatement BinaryOperation && MemberReference fi isIndexed MemberReference ! fi omitNorms BlockStatement StatementExpression MethodInvocation files BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames NORMS_EXTENSION add BreakStatement End End IfStatement BinaryOperation && MethodInvocation fieldInfos hasVectors MemberReference mergeDocStores BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference IndexFileNames.VECTOR_EXTENSIONS length MemberReference ++ i BlockStatement StatementExpression MethodInvocation files BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames ArraySelector MemberReference i VECTOR_EXTENSIONS add End End ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator file MemberReference files BlockStatement StatementExpression MethodInvocation cfsWriter MemberReference file addFile End StatementExpression MethodInvocation cfsWriter close ReturnStatement MemberReference files MethodDeclaration Modifier private addIndexed FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType FieldInfos fInfos FormalParameter ReferenceType Collection TypeArgument ReferenceType String names FormalParameter BasicType boolean storeTermVectors FormalParameter BasicType boolean storePositionWithTermVector FormalParameter BasicType boolean storeOffsetWithTermVector FormalParameter BasicType boolean storePayloads FormalParameter BasicType boolean omitTFAndPositions IOException ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator field MemberReference names BlockStatement StatementExpression MethodInvocation fInfos MemberReference field Literal true MemberReference storeTermVectors MemberReference storePositionWithTermVector MemberReference storeOffsetWithTermVector MethodInvocation ! reader MemberReference field hasNorms MemberReference storePayloads MemberReference omitTFAndPositions add End FieldDeclaration Modifier private ReferenceType SegmentReader VariableDeclarator matchingSegmentReaders FieldDeclaration Modifier private BasicType int VariableDeclarator rawDocLengths FieldDeclaration Modifier private BasicType int VariableDeclarator rawDocLengths2 MethodDeclaration Modifier private setMatchingSegmentReaders LocalVariableDeclaration BasicType int VariableDeclarator numReaders MethodInvocation readers size StatementExpression Assignment MemberReference matchingSegmentReaders ArrayCreator ReferenceType SegmentReader MemberReference numReaders = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numReaders MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator reader MethodInvocation readers MemberReference i get IfStatement BinaryOperation instanceof MemberReference reader ReferenceType SegmentReader BlockStatement LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator segmentReader Cast ReferenceType SegmentReader MemberReference reader LocalVariableDeclaration BasicType boolean VariableDeclarator same Literal true LocalVariableDeclaration ReferenceType FieldInfos VariableDeclarator segmentFieldInfos MethodInvocation segmentReader fieldInfos LocalVariableDeclaration BasicType int VariableDeclarator numFieldInfos MethodInvocation segmentFieldInfos size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation && MemberReference same BinaryOperation < MemberReference j MemberReference numFieldInfos MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference same MethodInvocation fieldInfos MethodInvocation MethodInvocation segmentFieldInfos MemberReference j fieldName equals MemberReference j fieldName = End IfStatement MemberReference same BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i matchingSegmentReaders MemberReference segmentReader = End End End StatementExpression Assignment MemberReference rawDocLengths ArrayCreator BasicType int MemberReference MAX_RAW_MERGE_DOCS = StatementExpression Assignment MemberReference rawDocLengths2 ArrayCreator BasicType int MemberReference MAX_RAW_MERGE_DOCS = MethodDeclaration /**
   * 
   * @return The number of documents in all of the readers
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier private final BasicType int mergeFields CorruptIndexException IOException IfStatement MemberReference ! mergeDocStores BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentReader VariableDeclarator sr Cast ReferenceType SegmentReader MethodInvocation readers BinaryOperation - MethodInvocation readers size Literal 1 get StatementExpression Assignment MemberReference fieldInfos Cast ReferenceType FieldInfos MethodInvocation sr.core.fieldInfos clone = BlockStatement StatementExpression Assignment MemberReference fieldInfos ClassCreator ReferenceType FieldInfos = End ForStatement EnhancedForControl VariableDeclaration ReferenceType IndexReader VariableDeclarator reader MemberReference readers BlockStatement IfStatement BinaryOperation instanceof MemberReference reader ReferenceType SegmentReader BlockStatement LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator segmentReader Cast ReferenceType SegmentReader MemberReference reader LocalVariableDeclaration ReferenceType FieldInfos VariableDeclarator readerFieldInfos MethodInvocation segmentReader fieldInfos LocalVariableDeclaration BasicType int VariableDeclarator numReaderFieldInfos MethodInvocation readerFieldInfos size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference numReaderFieldInfos MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation readerFieldInfos MemberReference j fieldInfo StatementExpression MethodInvocation fieldInfos MemberReference fi name MemberReference fi isIndexed MemberReference fi storeTermVector MemberReference fi storePositionWithTermVector MemberReference fi storeOffsetWithTermVector MethodInvocation ! reader MemberReference fi name hasNorms MemberReference fi storePayloads MemberReference fi omitTermFreqAndPositions add End BlockStatement StatementExpression MethodInvocation MemberReference reader MemberReference fieldInfos MethodInvocation reader MemberReference FieldOption TERMVECTOR_WITH_POSITION_OFFSET getFieldNames Literal true Literal true Literal true Literal false Literal false addIndexed StatementExpression MethodInvocation MemberReference reader MemberReference fieldInfos MethodInvocation reader MemberReference FieldOption TERMVECTOR_WITH_POSITION getFieldNames Literal true Literal true Literal false Literal false Literal false addIndexed StatementExpression MethodInvocation MemberReference reader MemberReference fieldInfos MethodInvocation reader MemberReference FieldOption TERMVECTOR_WITH_OFFSET getFieldNames Literal true Literal false Literal true Literal false Literal false addIndexed StatementExpression MethodInvocation MemberReference reader MemberReference fieldInfos MethodInvocation reader MemberReference FieldOption TERMVECTOR getFieldNames Literal true Literal false Literal false Literal false Literal false addIndexed StatementExpression MethodInvocation MemberReference reader MemberReference fieldInfos MethodInvocation reader MemberReference FieldOption OMIT_TERM_FREQ_AND_POSITIONS getFieldNames Literal false Literal false Literal false Literal false Literal true addIndexed StatementExpression MethodInvocation MemberReference reader MemberReference fieldInfos MethodInvocation reader MemberReference FieldOption STORES_PAYLOADS getFieldNames Literal false Literal false Literal false Literal true Literal false addIndexed StatementExpression MethodInvocation MemberReference reader MemberReference fieldInfos MethodInvocation reader MemberReference FieldOption INDEXED getFieldNames Literal false Literal false Literal false Literal false Literal false addIndexed StatementExpression MethodInvocation fieldInfos MethodInvocation reader MemberReference FieldOption UNINDEXED getFieldNames Literal false add End End StatementExpression MethodInvocation fieldInfos MemberReference directory BinaryOperation + MemberReference segment Literal "".fnm"" write LocalVariableDeclaration BasicType int VariableDeclarator docCount Literal 0 StatementExpression MethodInvocation setMatchingSegmentReaders IfStatement MemberReference mergeDocStores BlockStatement LocalVariableDeclaration Modifier final ReferenceType FieldsWriter VariableDeclarator fieldsWriter ClassCreator ReferenceType FieldsWriter MemberReference directory MemberReference segment MemberReference fieldInfos TryStatement LocalVariableDeclaration BasicType int VariableDeclarator idx Literal 0 ForStatement EnhancedForControl VariableDeclaration ReferenceType IndexReader VariableDeclarator reader MemberReference readers BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentReader VariableDeclarator matchingSegmentReader MemberReference ArraySelector MemberReference ++ idx matchingSegmentReaders LocalVariableDeclaration ReferenceType FieldsReader VariableDeclarator matchingFieldsReader Literal null IfStatement BinaryOperation != MemberReference matchingSegmentReader Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType FieldsReader VariableDeclarator fieldsReader MethodInvocation matchingSegmentReader getFieldsReader IfStatement BinaryOperation && BinaryOperation != MemberReference fieldsReader Literal null MethodInvocation fieldsReader canReadRawDocs BlockStatement StatementExpression Assignment MemberReference matchingFieldsReader MemberReference fieldsReader = End End IfStatement MethodInvocation reader hasDeletions BlockStatement StatementExpression Assignment MemberReference docCount MethodInvocation MemberReference fieldsWriter MemberReference reader MemberReference matchingFieldsReader copyFieldsWithDeletions += BlockStatement StatementExpression Assignment MemberReference docCount MethodInvocation MemberReference fieldsWriter MemberReference reader MemberReference matchingFieldsReader copyFieldsNoDeletions += End End StatementExpression MethodInvocation fieldsWriter close LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames FIELDS_INDEX_EXTENSION LocalVariableDeclaration Modifier final BasicType long VariableDeclarator fdxFileLength MethodInvocation directory MemberReference fileName fileLength IfStatement BinaryOperation != BinaryOperation + Literal 4 BinaryOperation * Cast BasicType long MemberReference docCount Literal 8 MemberReference fdxFileLength ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""mergeFields produced an invalid result: docCount is "" MemberReference docCount Literal "" but fdx file size is "" MemberReference fdxFileLength Literal "" file="" MemberReference fileName Literal "" file exists?="" MethodInvocation directory MemberReference fileName fileExists Literal ""; now aborting this merge to prevent index corruption"" End ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType IndexReader VariableDeclarator reader MemberReference readers BlockStatement StatementExpression Assignment MemberReference docCount MethodInvocation reader numDocs += End End ReturnStatement MemberReference docCount MethodDeclaration Modifier private BasicType int copyFieldsWithDeletions FormalParameter Modifier final ReferenceType FieldsWriter fieldsWriter FormalParameter Modifier final ReferenceType IndexReader reader FormalParameter Modifier final ReferenceType FieldsReader matchingFieldsReader IOException MergeAbortedException CorruptIndexException LocalVariableDeclaration BasicType int VariableDeclarator docCount Literal 0 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator maxDoc MethodInvocation reader maxDoc IfStatement BinaryOperation != MemberReference matchingFieldsReader Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference maxDoc BlockStatement IfStatement MethodInvocation reader MemberReference j isDeleted BlockStatement StatementExpression MemberReference ++ j ContinueStatement End LocalVariableDeclaration BasicType int VariableDeclarator start MemberReference j VariableDeclarator numDocs Literal 0 DoStatement BinaryOperation < MemberReference numDocs MemberReference MAX_RAW_MERGE_DOCS BlockStatement StatementExpression MemberReference ++ j StatementExpression MemberReference ++ numDocs IfStatement BinaryOperation >= MemberReference j MemberReference maxDoc BreakStatement End IfStatement MethodInvocation reader MemberReference j isDeleted BlockStatement StatementExpression MemberReference ++ j BreakStatement End End LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator stream MethodInvocation matchingFieldsReader MemberReference rawDocLengths MemberReference start MemberReference numDocs rawDocs StatementExpression MethodInvocation fieldsWriter MemberReference stream MemberReference rawDocLengths MemberReference numDocs addRawDocuments StatementExpression Assignment MemberReference docCount MemberReference numDocs += StatementExpression MethodInvocation checkAbort BinaryOperation * Literal 300 MemberReference numDocs work End BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference maxDoc MemberReference ++ j BlockStatement IfStatement MethodInvocation reader MemberReference j isDeleted BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation reader MemberReference j document StatementExpression MethodInvocation fieldsWriter MemberReference doc addDocument StatementExpression MemberReference ++ docCount StatementExpression MethodInvocation checkAbort Literal 300 work End End ReturnStatement MemberReference docCount MethodDeclaration Modifier private BasicType int copyFieldsNoDeletions FormalParameter Modifier final ReferenceType FieldsWriter fieldsWriter FormalParameter Modifier final ReferenceType IndexReader reader FormalParameter Modifier final ReferenceType FieldsReader matchingFieldsReader IOException MergeAbortedException CorruptIndexException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator maxDoc MethodInvocation reader maxDoc LocalVariableDeclaration BasicType int VariableDeclarator docCount Literal 0 IfStatement BinaryOperation != MemberReference matchingFieldsReader Literal null BlockStatement WhileStatement BinaryOperation < MemberReference docCount MemberReference maxDoc BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation Math MemberReference MAX_RAW_MERGE_DOCS BinaryOperation - MemberReference maxDoc MemberReference docCount min LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator stream MethodInvocation matchingFieldsReader MemberReference rawDocLengths MemberReference docCount MemberReference len rawDocs StatementExpression MethodInvocation fieldsWriter MemberReference stream MemberReference rawDocLengths MemberReference len addRawDocuments StatementExpression Assignment MemberReference docCount MemberReference len += StatementExpression MethodInvocation checkAbort BinaryOperation * Literal 300 MemberReference len work End BlockStatement ForStatement ForControl BinaryOperation < MemberReference docCount MemberReference maxDoc MemberReference ++ docCount BlockStatement LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation reader MemberReference docCount document StatementExpression MethodInvocation fieldsWriter MemberReference doc addDocument StatementExpression MethodInvocation checkAbort Literal 300 work End End ReturnStatement MemberReference docCount MethodDeclaration /**
   * Merge the TermVectors from each of the segments into the new one.
   * @throws IOException
   */ Modifier private final mergeVectors IOException LocalVariableDeclaration ReferenceType TermVectorsWriter VariableDeclarator termVectorsWriter ClassCreator ReferenceType TermVectorsWriter MemberReference directory MemberReference segment MemberReference fieldInfos TryStatement LocalVariableDeclaration BasicType int VariableDeclarator idx Literal 0 ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType IndexReader VariableDeclarator reader MemberReference readers BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentReader VariableDeclarator matchingSegmentReader MemberReference ArraySelector MemberReference ++ idx matchingSegmentReaders LocalVariableDeclaration ReferenceType TermVectorsReader VariableDeclarator matchingVectorsReader Literal null IfStatement BinaryOperation != MemberReference matchingSegmentReader Literal null BlockStatement LocalVariableDeclaration ReferenceType TermVectorsReader VariableDeclarator vectorsReader MethodInvocation matchingSegmentReader getTermVectorsReaderOrig IfStatement BinaryOperation && BinaryOperation != MemberReference vectorsReader Literal null MethodInvocation vectorsReader canReadRawDocs BlockStatement StatementExpression Assignment MemberReference matchingVectorsReader MemberReference vectorsReader = End End IfStatement MethodInvocation reader hasDeletions BlockStatement StatementExpression MethodInvocation MemberReference termVectorsWriter MemberReference matchingVectorsReader MemberReference reader copyVectorsWithDeletions BlockStatement StatementExpression MethodInvocation MemberReference termVectorsWriter MemberReference matchingVectorsReader MemberReference reader copyVectorsNoDeletions End End StatementExpression MethodInvocation termVectorsWriter close LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION LocalVariableDeclaration Modifier final BasicType long VariableDeclarator tvxSize MethodInvocation directory MemberReference fileName fileLength IfStatement BinaryOperation != BinaryOperation + Literal 4 BinaryOperation * Cast BasicType long MemberReference mergedDocs Literal 16 MemberReference tvxSize ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""mergeVectors produced an invalid result: mergedDocs is "" MemberReference mergedDocs Literal "" but tvx size is "" MemberReference tvxSize Literal "" file="" MemberReference fileName Literal "" file exists?="" MethodInvocation directory MemberReference fileName fileExists Literal ""; now aborting this merge to prevent index corruption"" End MethodDeclaration Modifier private copyVectorsWithDeletions FormalParameter Modifier final ReferenceType TermVectorsWriter termVectorsWriter FormalParameter Modifier final ReferenceType TermVectorsReader matchingVectorsReader FormalParameter Modifier final ReferenceType IndexReader reader IOException MergeAbortedException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator maxDoc MethodInvocation reader maxDoc IfStatement BinaryOperation != MemberReference matchingVectorsReader Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator docNum Literal 0 BinaryOperation < MemberReference docNum MemberReference maxDoc BlockStatement IfStatement MethodInvocation reader MemberReference docNum isDeleted BlockStatement StatementExpression MemberReference ++ docNum ContinueStatement End LocalVariableDeclaration BasicType int VariableDeclarator start MemberReference docNum VariableDeclarator numDocs Literal 0 DoStatement BinaryOperation < MemberReference numDocs MemberReference MAX_RAW_MERGE_DOCS BlockStatement StatementExpression MemberReference ++ docNum StatementExpression MemberReference ++ numDocs IfStatement BinaryOperation >= MemberReference docNum MemberReference maxDoc BreakStatement End IfStatement MethodInvocation reader MemberReference docNum isDeleted BlockStatement StatementExpression MemberReference ++ docNum BreakStatement End End StatementExpression MethodInvocation matchingVectorsReader MemberReference rawDocLengths MemberReference rawDocLengths2 MemberReference start MemberReference numDocs rawDocs StatementExpression MethodInvocation termVectorsWriter MemberReference matchingVectorsReader MemberReference rawDocLengths MemberReference rawDocLengths2 MemberReference numDocs addRawDocuments StatementExpression MethodInvocation checkAbort BinaryOperation * Literal 300 MemberReference numDocs work End BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator docNum Literal 0 BinaryOperation < MemberReference docNum MemberReference maxDoc MemberReference ++ docNum BlockStatement IfStatement MethodInvocation reader MemberReference docNum isDeleted BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator vectors MethodInvocation reader MemberReference docNum getTermFreqVectors StatementExpression MethodInvocation termVectorsWriter MemberReference vectors addAllDocVectors StatementExpression MethodInvocation checkAbort Literal 300 work End End MethodDeclaration Modifier private copyVectorsNoDeletions FormalParameter Modifier final ReferenceType TermVectorsWriter termVectorsWriter FormalParameter Modifier final ReferenceType TermVectorsReader matchingVectorsReader FormalParameter Modifier final ReferenceType IndexReader reader IOException MergeAbortedException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator maxDoc MethodInvocation reader maxDoc IfStatement BinaryOperation != MemberReference matchingVectorsReader Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator docCount Literal 0 WhileStatement BinaryOperation < MemberReference docCount MemberReference maxDoc BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation Math MemberReference MAX_RAW_MERGE_DOCS BinaryOperation - MemberReference maxDoc MemberReference docCount min StatementExpression MethodInvocation matchingVectorsReader MemberReference rawDocLengths MemberReference rawDocLengths2 MemberReference docCount MemberReference len rawDocs StatementExpression MethodInvocation termVectorsWriter MemberReference matchingVectorsReader MemberReference rawDocLengths MemberReference rawDocLengths2 MemberReference len addRawDocuments StatementExpression Assignment MemberReference docCount MemberReference len += StatementExpression MethodInvocation checkAbort BinaryOperation * Literal 300 MemberReference len work End BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator docNum Literal 0 BinaryOperation < MemberReference docNum MemberReference maxDoc MemberReference ++ docNum BlockStatement LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator vectors MethodInvocation reader MemberReference docNum getTermFreqVectors StatementExpression MethodInvocation termVectorsWriter MemberReference vectors addAllDocVectors StatementExpression MethodInvocation checkAbort Literal 300 work End End FieldDeclaration Modifier private ReferenceType SegmentMergeQueue VariableDeclarator queue Literal null MethodDeclaration Modifier private final mergeTerms CorruptIndexException IOException LocalVariableDeclaration ReferenceType SegmentWriteState VariableDeclarator state ClassCreator ReferenceType SegmentWriteState Literal null MemberReference directory MemberReference segment Literal null MemberReference mergedDocs Literal 0 MemberReference termIndexInterval LocalVariableDeclaration Modifier final ReferenceType FormatPostingsFieldsConsumer VariableDeclarator consumer ClassCreator ReferenceType FormatPostingsFieldsWriter MemberReference state MemberReference fieldInfos TryStatement StatementExpression Assignment MemberReference queue ClassCreator ReferenceType SegmentMergeQueue MethodInvocation readers size = StatementExpression MethodInvocation MemberReference consumer mergeTermInfos StatementExpression MethodInvocation consumer finish IfStatement BinaryOperation != MemberReference queue Literal null StatementExpression MethodInvocation queue close End FieldDeclaration BasicType boolean VariableDeclarator omitTermFreqAndPositions MethodDeclaration Modifier private final mergeTermInfos FormalParameter Modifier final ReferenceType FormatPostingsFieldsConsumer consumer CorruptIndexException IOException LocalVariableDeclaration BasicType int VariableDeclarator base Literal 0 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator readerCount MethodInvocation readers size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference readerCount MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator reader MethodInvocation readers MemberReference i get LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator termEnum MethodInvocation reader terms LocalVariableDeclaration ReferenceType SegmentMergeInfo VariableDeclarator smi ClassCreator ReferenceType SegmentMergeInfo MemberReference base MemberReference termEnum MemberReference reader LocalVariableDeclaration BasicType int VariableDeclarator docMap MethodInvocation smi getDocMap IfStatement BinaryOperation != MemberReference docMap Literal null BlockStatement IfStatement BinaryOperation == MemberReference docMaps Literal null BlockStatement StatementExpression Assignment MemberReference docMaps ArrayCreator BasicType int MemberReference readerCount = StatementExpression Assignment MemberReference delCounts ArrayCreator BasicType int MemberReference readerCount = End StatementExpression Assignment MemberReference ArraySelector MemberReference i docMaps MemberReference docMap = StatementExpression Assignment MemberReference ArraySelector MemberReference i delCounts BinaryOperation - MethodInvocation smi.reader maxDoc MethodInvocation smi.reader numDocs = End StatementExpression Assignment MemberReference base MethodInvocation reader numDocs += AssertStatement BinaryOperation == MethodInvocation reader numDocs BinaryOperation - MethodInvocation reader maxDoc MemberReference smi delCount IfStatement MethodInvocation smi next StatementExpression MethodInvocation queue MemberReference smi add StatementExpression MethodInvocation smi close End End LocalVariableDeclaration ReferenceType SegmentMergeInfo VariableDeclarator match ArrayCreator ReferenceType SegmentMergeInfo MethodInvocation readers size LocalVariableDeclaration ReferenceType String VariableDeclarator currentField Literal null LocalVariableDeclaration ReferenceType FormatPostingsTermsConsumer VariableDeclarator termsConsumer Literal null WhileStatement BinaryOperation > MethodInvocation queue size Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator matchSize Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference ++ matchSize match MethodInvocation queue pop = LocalVariableDeclaration ReferenceType Term VariableDeclarator term MemberReference ArraySelector Literal 0 MemberReference term match LocalVariableDeclaration ReferenceType SegmentMergeInfo VariableDeclarator top MethodInvocation queue top WhileStatement BinaryOperation && BinaryOperation != MemberReference top Literal null BinaryOperation == MethodInvocation term MemberReference top term compareTo Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ matchSize match MethodInvocation queue pop = StatementExpression Assignment MemberReference top MethodInvocation queue top = End IfStatement BinaryOperation != MemberReference currentField MemberReference term field BlockStatement StatementExpression Assignment MemberReference currentField MemberReference term field = IfStatement BinaryOperation != MemberReference termsConsumer Literal null StatementExpression MethodInvocation termsConsumer finish End LocalVariableDeclaration Modifier final ReferenceType FieldInfo VariableDeclarator fieldInfo MethodInvocation fieldInfos MemberReference currentField fieldInfo StatementExpression Assignment MemberReference termsConsumer MethodInvocation consumer MemberReference fieldInfo addField = StatementExpression Assignment MemberReference omitTermFreqAndPositions MemberReference fieldInfo omitTermFreqAndPositions = End LocalVariableDeclaration BasicType int VariableDeclarator df MethodInvocation MemberReference termsConsumer MemberReference match MemberReference matchSize appendPostings StatementExpression MethodInvocation checkAbort BinaryOperation / MemberReference df Literal 3.0 work WhileStatement BinaryOperation > MemberReference matchSize Literal 0 BlockStatement LocalVariableDeclaration ReferenceType SegmentMergeInfo VariableDeclarator smi MemberReference ArraySelector MemberReference -- matchSize match IfStatement MethodInvocation smi next StatementExpression MethodInvocation queue MemberReference smi add StatementExpression MethodInvocation smi close End End End FieldDeclaration Modifier private BasicType byte VariableDeclarator payloadBuffer FieldDeclaration Modifier private BasicType int VariableDeclarator docMaps MethodDeclaration BasicType int getDocMaps ReturnStatement MemberReference docMaps FieldDeclaration Modifier private BasicType int VariableDeclarator delCounts MethodDeclaration BasicType int getDelCounts ReturnStatement MemberReference delCounts MethodDeclaration /** Process postings from multiple segments all positioned on the
   *  same term. Writes out merged entries into freqOutput and
   *  the proxOutput streams.
   *
   * @param smis array of segments
   * @param n number of cells in the array actually occupied
   * @return number of documents across all segments where this term was found
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier private final BasicType int appendPostings FormalParameter Modifier final ReferenceType FormatPostingsTermsConsumer termsConsumer FormalParameter ReferenceType SegmentMergeInfo smis FormalParameter BasicType int n CorruptIndexException IOException LocalVariableDeclaration Modifier final ReferenceType FormatPostingsDocsConsumer VariableDeclarator docConsumer MethodInvocation termsConsumer MemberReference ArraySelector Literal 0 MemberReference term MemberReference text smis addTerm LocalVariableDeclaration BasicType int VariableDeclarator df Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference n MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType SegmentMergeInfo VariableDeclarator smi MemberReference ArraySelector MemberReference i smis LocalVariableDeclaration ReferenceType TermPositions VariableDeclarator postings MethodInvocation smi getPositions AssertStatement BinaryOperation != MemberReference postings Literal null LocalVariableDeclaration BasicType int VariableDeclarator base MemberReference smi base LocalVariableDeclaration BasicType int VariableDeclarator docMap MethodInvocation smi getDocMap StatementExpression MethodInvocation postings MemberReference smi termEnum seek WhileStatement MethodInvocation postings next BlockStatement StatementExpression MemberReference ++ df LocalVariableDeclaration BasicType int VariableDeclarator doc MethodInvocation postings doc IfStatement BinaryOperation != MemberReference docMap Literal null StatementExpression Assignment MemberReference doc MemberReference ArraySelector MemberReference doc docMap = End StatementExpression Assignment MemberReference doc MemberReference base += LocalVariableDeclaration Modifier final BasicType int VariableDeclarator freq MethodInvocation postings freq LocalVariableDeclaration Modifier final ReferenceType FormatPostingsPositionsConsumer VariableDeclarator posConsumer MethodInvocation docConsumer MemberReference doc MemberReference freq addDoc IfStatement MemberReference ! omitTermFreqAndPositions BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference freq MemberReference ++ j BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator position MethodInvocation postings nextPosition LocalVariableDeclaration Modifier final BasicType int VariableDeclarator payloadLength MethodInvocation postings getPayloadLength IfStatement BinaryOperation > MemberReference payloadLength Literal 0 BlockStatement IfStatement BinaryOperation || BinaryOperation == MemberReference payloadBuffer Literal null BinaryOperation < MemberReference payloadBuffer length MemberReference payloadLength StatementExpression Assignment MemberReference payloadBuffer ArrayCreator BasicType byte MemberReference payloadLength = End StatementExpression MethodInvocation postings MemberReference payloadBuffer Literal 0 getPayload End StatementExpression MethodInvocation posConsumer MemberReference position MemberReference payloadBuffer Literal 0 MemberReference payloadLength addPosition End StatementExpression MethodInvocation posConsumer finish End End End StatementExpression MethodInvocation docConsumer finish ReturnStatement MemberReference df MethodDeclaration Modifier private mergeNorms IOException LocalVariableDeclaration BasicType byte VariableDeclarator normBuffer Literal null LocalVariableDeclaration ReferenceType IndexOutput VariableDeclarator output Literal null TryStatement LocalVariableDeclaration BasicType int VariableDeclarator numFieldInfos MethodInvocation fieldInfos size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numFieldInfos MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation fieldInfos MemberReference i fieldInfo IfStatement BinaryOperation && MemberReference fi isIndexed MemberReference ! fi omitNorms BlockStatement IfStatement BinaryOperation == MemberReference output Literal null BlockStatement StatementExpression Assignment MemberReference output MethodInvocation directory BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames NORMS_EXTENSION createOutput = StatementExpression MethodInvocation output MemberReference NORMS_HEADER MemberReference NORMS_HEADER length writeBytes End ForStatement EnhancedForControl VariableDeclaration ReferenceType IndexReader VariableDeclarator reader MemberReference readers BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator maxDoc MethodInvocation reader maxDoc IfStatement BinaryOperation || BinaryOperation == MemberReference normBuffer Literal null BinaryOperation < MemberReference normBuffer length MemberReference maxDoc BlockStatement StatementExpression Assignment MemberReference normBuffer ArrayCreator BasicType byte MemberReference maxDoc = End StatementExpression MethodInvocation reader MemberReference fi name MemberReference normBuffer Literal 0 norms IfStatement MethodInvocation ! reader hasDeletions BlockStatement StatementExpression MethodInvocation output MemberReference normBuffer MemberReference maxDoc writeBytes BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator k Literal 0 BinaryOperation < MemberReference k MemberReference maxDoc MemberReference ++ k BlockStatement IfStatement MethodInvocation ! reader MemberReference k isDeleted BlockStatement StatementExpression MethodInvocation output MemberReference ArraySelector MemberReference k normBuffer writeByte End End End StatementExpression MethodInvocation checkAbort MemberReference maxDoc work End End End IfStatement BinaryOperation != MemberReference output Literal null BlockStatement StatementExpression MethodInvocation output close End ClassDeclaration Modifier static CheckAbort FieldDeclaration Modifier private BasicType double VariableDeclarator workCount FieldDeclaration Modifier private ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge FieldDeclaration Modifier private ReferenceType Directory VariableDeclarator dir ConstructorDeclaration Modifier public CheckAbort FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge FormalParameter ReferenceType Directory dir StatementExpression Assignment This MemberReference merge MemberReference merge = StatementExpression Assignment This MemberReference dir MemberReference dir = MethodDeclaration /**
     * Records the fact that roughly units amount of work
     * have been done since this method was last called.
     * When adding time-consuming code into SegmentMerger,
     * you should test different values for units to ensure
     * that the time in between calls to merge.checkAborted
     * is up to ~ 1 second.
     */ Modifier public work FormalParameter BasicType double units MergePolicy.MergeAbortedException StatementExpression Assignment MemberReference workCount MemberReference units += IfStatement BinaryOperation >= MemberReference workCount Literal 10000.0 BlockStatement StatementExpression MethodInvocation merge MemberReference dir checkAborted StatementExpression Assignment MemberReference workCount Literal 0 = End",0
844,844,,1
629,629,,1
491,491,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ SwedishStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal ""a"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""arna"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erna"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""heterna"" Literal 2 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""orna"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ad"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""e"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ade"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ande"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""arne"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""are"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aste"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""en"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""anden"" Literal 12 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aren"" Literal 12 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""heten"" Literal 12 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ern"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ar"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""er"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""heter"" Literal 18 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""or"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""s"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""as"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""arnas"" Literal 22 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ernas"" Literal 22 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ornas"" Literal 22 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""es"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ades"" Literal 26 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""andes"" Literal 26 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ens"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""arens"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""hetens"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erns"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""at"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""andet"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""het"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ast"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""dd"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""gd"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nn"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dt"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""gt"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""kt"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tt"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""ig"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""lig"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""els"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""fullt"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""löst"" Literal - 1 Literal 2 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 1 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 24 Literal 0 Literal 32 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_s_ending ArrayInitializer Literal 119 Literal 127 Literal 149 FieldDeclaration Modifier private BasicType int VariableDeclarator I_x FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 MethodDeclaration Modifier private copy_from FormalParameter ReferenceType SwedishStemmer other StatementExpression Assignment MemberReference I_x MemberReference other I_x = StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference I_p1 MemberReference limit = StatementExpression Assignment MemberReference v_1 MemberReference cursor = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation + MemberReference cursor Literal 3 IfStatement BinaryOperation || BinaryOperation > Literal 0 MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference c = StatementExpression Assignment MemberReference I_x MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference v_1 = WhileStatement golab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 246 in_grouping BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = BreakStatement golab0 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab2 Literal true BlockStatement DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 246 out_grouping BlockStatement BreakStatement lab3 End BreakStatement golab2 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement BinaryOperation < MemberReference I_p1 MemberReference I_x BlockStatement BreakStatement lab4 End StatementExpression Assignment MemberReference I_p1 MemberReference I_x = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_main_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 37 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! MemberReference g_s_ending Literal 98 Literal 121 in_grouping_b BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_consonant_pair LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation == MethodInvocation MemberReference a_1 Literal 7 find_among_b Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_other_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_2 Literal 5 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""lös"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""full"" slice_from BreakStatement End StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_main_suffix BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_consonant_pair BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_other_suffix BlockStatement BreakStatement lab3 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = ReturnStatement Literal true ReferenceType SnowballProgram",1
100,100,"CompilationUnit PackageDeclaration org.apache.lucene.search.highlight Import java.io.IOException Import java.util.HashSet Import java.util.Iterator Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.FilteredQuery Import org.apache.lucene.search.Query Import org.apache.lucene.util.StringHelper ClassDeclaration Modifier public final /**
 * Utility class used to extract the terms used in a query, plus any weights.
 * This class will not find terms for MultiTermQuery, TermRangeQuery and PrefixQuery classes
 * so the caller must pass a rewritten query (see Query.rewrite) to obtain a list of 
 * expanded terms. 
 * 
 */ QueryTermExtractor MethodDeclaration /**
	 * Extracts all terms texts of a given Query into an array of WeightedTerms
	 *
	 * @param query      Query to extract term texts from
	 * @return an array of the terms used in a query, plus their weights.
	 */ Modifier public final static ReferenceType WeightedTerm getTerms FormalParameter ReferenceType Query query ReturnStatement MethodInvocation MemberReference query Literal false getTerms MethodDeclaration /**
	 * Extracts all terms texts of a given Query into an array of WeightedTerms
	 *
	 * @param query      Query to extract term texts from
	 * @param reader used to compute IDF which can be used to a) score selected fragments better 
	 * b) use graded highlights eg changing intensity of font color
	 * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based
	 * @return an array of the terms used in a query, plus their weights.
	 */ Modifier public final static ReferenceType WeightedTerm getIdfWeightedTerms FormalParameter ReferenceType Query query FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType String fieldName LocalVariableDeclaration ReferenceType WeightedTerm VariableDeclarator terms MethodInvocation MemberReference query Literal false MemberReference fieldName getTerms LocalVariableDeclaration BasicType int VariableDeclarator totalNumDocs MethodInvocation reader numDocs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference terms length MemberReference ++ i BlockStatement TryStatement LocalVariableDeclaration BasicType int VariableDeclarator docFreq MethodInvocation reader ClassCreator ReferenceType Term MemberReference fieldName MemberReference ArraySelector MemberReference i MemberReference term terms docFreq IfStatement BinaryOperation < MemberReference totalNumDocs MemberReference docFreq BlockStatement StatementExpression Assignment MemberReference docFreq MemberReference totalNumDocs = End LocalVariableDeclaration BasicType float VariableDeclarator idf Cast BasicType float BinaryOperation + MethodInvocation Math BinaryOperation / Cast BasicType float MemberReference totalNumDocs Cast BasicType double BinaryOperation + MemberReference docFreq Literal 1 log Literal 1.0 StatementExpression Assignment MemberReference ArraySelector MemberReference i MemberReference weight terms MemberReference idf *= CatchClause CatchClauseParameter IOException e End ReturnStatement MemberReference terms MethodDeclaration /**
	 * Extracts all terms texts of a given Query into an array of WeightedTerms
	 *
	 * @param query      Query to extract term texts from
	 * @param prohibited <code>true</code> to extract ""prohibited"" terms, too
	 * @param fieldName  The fieldName used to filter query terms
   * @return an array of the terms used in a query, plus their weights.
   */ Modifier public final static ReferenceType WeightedTerm getTerms FormalParameter ReferenceType Query query FormalParameter BasicType boolean prohibited FormalParameter ReferenceType String fieldName LocalVariableDeclaration ReferenceType HashSet TypeArgument ReferenceType WeightedTerm VariableDeclarator terms ClassCreator ReferenceType HashSet TypeArgument ReferenceType WeightedTerm IfStatement BinaryOperation != MemberReference fieldName Literal null BlockStatement StatementExpression Assignment MemberReference fieldName MethodInvocation StringHelper MemberReference fieldName intern = End StatementExpression MethodInvocation MemberReference query MemberReference terms MemberReference prohibited MemberReference fieldName getTerms ReturnStatement MethodInvocation terms ArrayCreator ReferenceType WeightedTerm Literal 0 toArray MethodDeclaration /**
	 * Extracts all terms texts of a given Query into an array of WeightedTerms
	 *
	 * @param query      Query to extract term texts from
	 * @param prohibited <code>true</code> to extract ""prohibited"" terms, too
   * @return an array of the terms used in a query, plus their weights.
   */ Modifier public final static ReferenceType WeightedTerm getTerms FormalParameter ReferenceType Query query FormalParameter BasicType boolean prohibited ReturnStatement MethodInvocation MemberReference query MemberReference prohibited Literal null getTerms MethodDeclaration Modifier private final static getTerms FormalParameter ReferenceType Query query FormalParameter ReferenceType HashSet TypeArgument ReferenceType WeightedTerm terms FormalParameter BasicType boolean prohibited FormalParameter ReferenceType String fieldName TryStatement IfStatement BinaryOperation instanceof MemberReference query ReferenceType BooleanQuery StatementExpression MethodInvocation Cast ReferenceType BooleanQuery MemberReference query MemberReference terms MemberReference prohibited MemberReference fieldName getTermsFromBooleanQuery IfStatement BinaryOperation instanceof MemberReference query ReferenceType FilteredQuery StatementExpression MethodInvocation Cast ReferenceType FilteredQuery MemberReference query MemberReference terms MemberReference prohibited MemberReference fieldName getTermsFromFilteredQuery BlockStatement LocalVariableDeclaration ReferenceType HashSet TypeArgument ReferenceType Term VariableDeclarator nonWeightedTerms ClassCreator ReferenceType HashSet TypeArgument ReferenceType Term StatementExpression MethodInvocation query MemberReference nonWeightedTerms extractTerms ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Term VariableDeclarator iter MethodInvocation nonWeightedTerms iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator term MethodInvocation iter next IfStatement BinaryOperation || BinaryOperation == MemberReference fieldName Literal null BinaryOperation == MethodInvocation term field MemberReference fieldName BlockStatement StatementExpression MethodInvocation terms ClassCreator ReferenceType WeightedTerm MethodInvocation query getBoost MethodInvocation term text add End End End End CatchClause CatchClauseParameter UnsupportedOperationException ignore MethodDeclaration /**
	 * extractTerms is currently the only query-independent means of introspecting queries but it only reveals
	 * a list of terms for that query - not the boosts each individual term in that query may or may not have.
	 * ""Container"" queries such as BooleanQuery should be unwrapped to get at the boost info held
	 * in each child element. 
	 * Some discussion around this topic here:
	 * http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208
	 * Unfortunately there seemed to be limited interest in requiring all Query objects to implement
	 * something common which would allow access to child queries so what follows here are query-specific
	 * implementations for accessing embedded query elements. 
	 */ Modifier private final static getTermsFromBooleanQuery FormalParameter ReferenceType BooleanQuery query FormalParameter ReferenceType HashSet TypeArgument ReferenceType WeightedTerm terms FormalParameter BasicType boolean prohibited FormalParameter ReferenceType String fieldName LocalVariableDeclaration ReferenceType BooleanClause VariableDeclarator queryClauses MethodInvocation query getClauses ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference queryClauses length MemberReference ++ i BlockStatement IfStatement BinaryOperation || MemberReference prohibited BinaryOperation != MemberReference ArraySelector MemberReference i MethodInvocation getOccur queryClauses MemberReference BooleanClause.Occur MUST_NOT StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i MethodInvocation getQuery queryClauses MemberReference terms MemberReference prohibited MemberReference fieldName getTerms End End MethodDeclaration Modifier private static getTermsFromFilteredQuery FormalParameter ReferenceType FilteredQuery query FormalParameter ReferenceType HashSet TypeArgument ReferenceType WeightedTerm terms FormalParameter BasicType boolean prohibited FormalParameter ReferenceType String fieldName StatementExpression MethodInvocation MethodInvocation query getQuery MemberReference terms MemberReference prohibited MemberReference fieldName getTerms",1
193,193,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.io.IOException Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.index.IndexReader ClassDeclaration Modifier public /**
 * Close index reader.
 * <br>Other side effects: index reader in perfRunData is nullified.
 * <br>This would cause read related tasks to reopen their own reader. 
 */ CloseReaderTask ConstructorDeclaration Modifier public CloseReaderTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType int doLogic IOException LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator reader MethodInvocation MethodInvocation getIndexReader getRunData StatementExpression MethodInvocation MethodInvocation Literal null setIndexReader getRunData IfStatement BinaryOperation != MethodInvocation reader getRefCount Literal 1 BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + Literal ""WARNING: CloseReader: reference count is currently "" MethodInvocation reader getRefCount println End StatementExpression MethodInvocation reader decRef ReturnStatement Literal 1 ReferenceType PerfTask",0
135,135,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.benchmark.quality.trec Import java.io.BufferedReader Import java.io.IOException Import java.util.ArrayList Import java.util.Arrays Import java.util.HashMap Import org.apache.lucene.benchmark.quality.QualityQuery ClassDeclaration Modifier public /**
 * Read TREC topics.
 * <p>
 * Expects this topic format -
 * <pre>
 *   &lt;top&gt;
 *   &lt;num&gt; Number: nnn
 *     
 *   &lt;title&gt; title of the topic
 *     
 *   &lt;desc&gt; Description:
 *   description of the topic
 *     
 *   &lt;narr&gt; Narrative:
 *   ""story"" composed by assessors.
 *    
 *   &lt;/top&gt;
 * </pre>
 * Comment lines starting with '#' are ignored.
 */ TrecTopicsReader FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator newline MethodInvocation System Literal ""line.separator"" getProperty ConstructorDeclaration Modifier public /**
   *  Constructor for Trec's TopicsReader
   */ TrecTopicsReader StatementExpression SuperConstructorInvocation MethodDeclaration /**
   * Read quality queries from trec format topics file.
   * @param reader where queries are read from.
   * @return the result quality queries.
   * @throws IOException if cannot read the queries.
   */ Modifier public ReferenceType QualityQuery readQueries FormalParameter ReferenceType BufferedReader reader IOException LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType QualityQuery VariableDeclarator res ClassCreator ReferenceType ArrayList TypeArgument ReferenceType QualityQuery LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb TryStatement WhileStatement BinaryOperation != Literal null Assignment MemberReference sb MethodInvocation MemberReference reader Literal ""<top>"" Literal null Literal false Literal false read = BlockStatement LocalVariableDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator fields ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String StatementExpression Assignment MemberReference sb MethodInvocation MemberReference reader Literal ""<num>"" Literal null Literal true Literal false read = LocalVariableDeclaration BasicType int VariableDeclarator k MethodInvocation sb Literal "":"" indexOf LocalVariableDeclaration ReferenceType String VariableDeclarator id MethodInvocation sb MethodInvocation trim BinaryOperation + MemberReference k Literal 1 substring StatementExpression Assignment MemberReference sb MethodInvocation MemberReference reader Literal ""<title>"" Literal null Literal true Literal false read = StatementExpression Assignment MemberReference k MethodInvocation sb Literal "">"" indexOf = LocalVariableDeclaration ReferenceType String VariableDeclarator title MethodInvocation sb MethodInvocation trim BinaryOperation + MemberReference k Literal 1 substring StatementExpression Assignment MemberReference sb MethodInvocation MemberReference reader Literal ""<desc>"" Literal null Literal false Literal false read = StatementExpression Assignment MemberReference sb MethodInvocation MemberReference reader Literal ""<narr>"" Literal null Literal false Literal true read = LocalVariableDeclaration ReferenceType String VariableDeclarator descripion MethodInvocation sb MethodInvocation trim toString StatementExpression MethodInvocation fields Literal ""title"" MemberReference title put StatementExpression MethodInvocation fields Literal ""description"" MemberReference descripion put LocalVariableDeclaration ReferenceType QualityQuery VariableDeclarator topic ClassCreator ReferenceType QualityQuery MemberReference id MemberReference fields StatementExpression MethodInvocation res MemberReference topic add StatementExpression MethodInvocation MemberReference reader Literal ""</top>"" Literal null Literal false Literal false read End StatementExpression MethodInvocation reader close LocalVariableDeclaration ReferenceType QualityQuery VariableDeclarator qq MethodInvocation res ArrayCreator ReferenceType QualityQuery Literal 0 toArray StatementExpression MethodInvocation Arrays MemberReference qq sort ReturnStatement MemberReference qq MethodDeclaration Modifier private ReferenceType StringBuffer read FormalParameter ReferenceType BufferedReader reader FormalParameter ReferenceType String prefix FormalParameter ReferenceType StringBuffer sb FormalParameter BasicType boolean collectMatchLine FormalParameter BasicType boolean collectAll IOException StatementExpression Assignment MemberReference sb TernaryExpression BinaryOperation == MemberReference sb Literal null ClassCreator ReferenceType StringBuffer MemberReference sb = LocalVariableDeclaration ReferenceType String VariableDeclarator sep Literal """" WhileStatement Literal true BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation reader readLine IfStatement BinaryOperation == MemberReference line Literal null BlockStatement ReturnStatement Literal null End IfStatement MethodInvocation line MemberReference prefix startsWith BlockStatement IfStatement MemberReference collectMatchLine BlockStatement StatementExpression MethodInvocation sb BinaryOperation + MemberReference sep MemberReference line append StatementExpression Assignment MemberReference sep MemberReference newline = End BreakStatement End IfStatement MemberReference collectAll BlockStatement StatementExpression MethodInvocation sb BinaryOperation + MemberReference sep MemberReference line append StatementExpression Assignment MemberReference sep MemberReference newline = End End ReturnStatement MemberReference sb",0
14,14,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util  ClassDeclaration Modifier public /**
 * Store a sorted collection of {@link org.apache.lucene.index.TermVectorEntry}s.  Collects all term information
 * into a single, SortedSet.
 * <br/>
 * NOTE: This Mapper ignores all Field information for the Document.  This means that if you are using offset/positions you will not
 * know what Fields they correlate with.
 *  <br/>
 * This is not thread-safe  
 */ SortedTermVectorMapper FieldDeclaration Modifier private ReferenceType SortedSet TypeArgument ReferenceType TermVectorEntry VariableDeclarator currentSet FieldDeclaration Modifier private ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType TermVectorEntry VariableDeclarator termToTVE ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType TermVectorEntry FieldDeclaration Modifier private BasicType boolean VariableDeclarator storeOffsets FieldDeclaration Modifier private BasicType boolean VariableDeclarator storePositions FieldDeclaration /**
   * Stand-in name for the field in {@link TermVectorEntry}.
   */ Modifier public final static ReferenceType String VariableDeclarator ALL Literal ""_ALL_"" ConstructorDeclaration Modifier public /**
   *
   * @param comparator A Comparator for sorting {@link TermVectorEntry}s
   */ SortedTermVectorMapper FormalParameter ReferenceType Comparator TypeArgument ReferenceType TermVectorEntry comparator StatementExpression ExplicitConstructorInvocation Literal false Literal false MemberReference comparator ConstructorDeclaration Modifier public SortedTermVectorMapper FormalParameter BasicType boolean ignoringPositions FormalParameter BasicType boolean ignoringOffsets FormalParameter ReferenceType Comparator TypeArgument ReferenceType TermVectorEntry comparator StatementExpression SuperConstructorInvocation MemberReference ignoringPositions MemberReference ignoringOffsets StatementExpression Assignment MemberReference currentSet ClassCreator ReferenceType TreeSet TypeArgument ReferenceType TermVectorEntry MemberReference comparator = MethodDeclaration /**
   *
   * @param term The term to map
   * @param frequency The frequency of the term
   * @param offsets Offset information, may be null
   * @param positions Position information, may be null
   */ Modifier public Annotation Override map FormalParameter ReferenceType String term FormalParameter BasicType int frequency FormalParameter ReferenceType TermVectorOffsetInfo offsets FormalParameter BasicType int positions LocalVariableDeclaration ReferenceType TermVectorEntry VariableDeclarator entry MethodInvocation termToTVE MemberReference term get IfStatement BinaryOperation == MemberReference entry Literal null BlockStatement StatementExpression Assignment MemberReference entry ClassCreator ReferenceType TermVectorEntry MemberReference ALL MemberReference term MemberReference frequency TernaryExpression BinaryOperation == MemberReference storeOffsets Literal true MemberReference offsets Literal null TernaryExpression BinaryOperation == MemberReference storePositions Literal true MemberReference positions Literal null = StatementExpression MethodInvocation termToTVE MemberReference term MemberReference entry put StatementExpression MethodInvocation currentSet MemberReference entry add BlockStatement StatementExpression MethodInvocation entry BinaryOperation + MethodInvocation entry getFrequency MemberReference frequency setFrequency IfStatement MemberReference storeOffsets BlockStatement LocalVariableDeclaration ReferenceType TermVectorOffsetInfo VariableDeclarator existingOffsets MethodInvocation entry getOffsets IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference existingOffsets Literal null BinaryOperation != MemberReference offsets Literal null BinaryOperation > MemberReference offsets length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType TermVectorOffsetInfo VariableDeclarator newOffsets ArrayCreator ReferenceType TermVectorOffsetInfo BinaryOperation + MemberReference existingOffsets length MemberReference offsets length StatementExpression MethodInvocation System MemberReference existingOffsets Literal 0 MemberReference newOffsets Literal 0 MemberReference existingOffsets length arraycopy StatementExpression MethodInvocation System MemberReference offsets Literal 0 MemberReference newOffsets MemberReference existingOffsets length MemberReference offsets length arraycopy StatementExpression MethodInvocation entry MemberReference newOffsets setOffsets IfStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference existingOffsets Literal null BinaryOperation != MemberReference offsets Literal null BinaryOperation > MemberReference offsets length Literal 0 BlockStatement StatementExpression MethodInvocation entry MemberReference offsets setOffsets End End End IfStatement MemberReference storePositions BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator existingPositions MethodInvocation entry getPositions IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference existingPositions Literal null BinaryOperation != MemberReference positions Literal null BinaryOperation > MemberReference positions length Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator newPositions ArrayCreator BasicType int BinaryOperation + MemberReference existingPositions length MemberReference positions length StatementExpression MethodInvocation System MemberReference existingPositions Literal 0 MemberReference newPositions Literal 0 MemberReference existingPositions length arraycopy StatementExpression MethodInvocation System MemberReference positions Literal 0 MemberReference newPositions MemberReference existingPositions length MemberReference positions length arraycopy StatementExpression MethodInvocation entry MemberReference newPositions setPositions IfStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference existingPositions Literal null BinaryOperation != MemberReference positions Literal null BinaryOperation > MemberReference positions length Literal 0 BlockStatement StatementExpression MethodInvocation entry MemberReference positions setPositions End End End End MethodDeclaration Modifier public Annotation Override setExpectations FormalParameter ReferenceType String field FormalParameter BasicType int numTerms FormalParameter BasicType boolean storeOffsets FormalParameter BasicType boolean storePositions StatementExpression Assignment This MemberReference storeOffsets MemberReference storeOffsets = StatementExpression Assignment This MemberReference storePositions MemberReference storePositions = MethodDeclaration /**
   * The TermVectorEntrySet.  A SortedSet of {@link TermVectorEntry} objects.  Sort is by the comparator passed into the constructor.
   *<br/>
   * This set will be empty until after the mapping process takes place.
   *
   * @return The SortedSet of {@link TermVectorEntry}.
   */ Modifier public ReferenceType SortedSet TypeArgument ReferenceType TermVectorEntry getTermVectorEntrySet ReturnStatement MemberReference currentSet ReferenceType TermVectorMapper",1
903,903,,1
30,30,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import org.apache.lucene.benchmark.byTask.PerfRunData ClassDeclaration Modifier public /**
 * Set a performance test configuration property.
 * A property may have a single value, or a sequence of values, separated by "":"". 
 * If a sequence of values is specified, each time a new round starts, 
 * the next (cyclic) value is taken.  
 * <br>Other side effects: none.
 * <br>Takes mandatory param: ""name,value"" pair. 
 * @see org.apache.lucene.benchmark.byTask.tasks.NewRoundTask
 */ SetPropTask ConstructorDeclaration Modifier public SetPropTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType String VariableDeclarator value MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception IfStatement BinaryOperation || BinaryOperation == MemberReference name Literal null BinaryOperation == MemberReference value Literal null BlockStatement ThrowStatement ClassCreator ReferenceType Exception BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation getName Literal "" - undefined name or value: name="" MemberReference name Literal "" value="" MemberReference value End StatementExpression MethodInvocation MethodInvocation getConfig MethodInvocation MemberReference name MemberReference value set getRunData ReturnStatement Literal 0 MethodDeclaration /**
   * Set the params (property name and value).
   * @param params property name and value separated by ','.
   */ Modifier public Annotation Override setParams FormalParameter ReferenceType String params StatementExpression SuperMethodInvocation MemberReference params setParams LocalVariableDeclaration BasicType int VariableDeclarator k MethodInvocation params Literal "","" indexOf StatementExpression Assignment MemberReference name MethodInvocation params MethodInvocation trim Literal 0 MemberReference k substring = StatementExpression Assignment MemberReference value MethodInvocation params MethodInvocation trim BinaryOperation + MemberReference k Literal 1 substring = MethodDeclaration Modifier public Annotation Override BasicType boolean supportsParams ReturnStatement Literal true ReferenceType PerfTask",1
801,801,,1
289,289,"CompilationUnit PackageDeclaration org.apache.lucene.document Import java.io.Reader Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.NumericTokenStream Import org.apache.lucene.util.NumericUtils Import org.apache.lucene.search.NumericRangeQuery Import org.apache.lucene.search.NumericRangeFilter Import org.apache.lucene.search.SortField Import org.apache.lucene.search.FieldCache ClassDeclaration Modifier public final /**
 * <p>This class provides a {@link Field} that enables indexing
 * of numeric values for efficient range filtering and
 * sorting.  Here's an example usage, adding an int value:
 * <pre>
 *  document.add(new NumericField(name).setIntValue(value));
 * </pre>
 *
 * For optimal performance, re-use the
 * <code>NumericField</code> and {@link Document} instance for more than
 * one document:
 *
 * <pre>
 *  NumericField field = new NumericField(name);
 *  Document document = new Document();
 *  document.add(field);
 *
 *  for(all documents) {
 *    ...
 *    field.setIntValue(value)
 *    writer.addDocument(document);
 *    ...
 *  }
 * </pre>
 *
 * <p>The java native types <code>int</code>, <code>long</code>,
 * <code>float</code> and <code>double</code> are
 * directly supported.  However, any value that can be
 * converted into these native types can also be indexed.
 * For example, date/time values represented by a
 * {@link java.util.Date} can be translated into a long
 * value using the {@link java.util.Date#getTime} method.  If you
 * don't need millisecond precision, you can quantize the
 * value, either by dividing the result of
 * {@link java.util.Date#getTime} or using the separate getters
 * (for year, month, etc.) to construct an <code>int</code> or
 * <code>long</code> value.</p>
 *
 * <p>To perform range querying or filtering against a
 * <code>NumericField</code>, use {@link NumericRangeQuery} or {@link
 * NumericRangeFilter}.  To sort according to a
 * <code>NumericField</code>, use the normal numeric sort types, eg
 * {@link SortField#INT}. <code>NumericField</code> values
 * can also be loaded directly from {@link FieldCache}.</p>
 *
 * <p>By default, a <code>NumericField</code>'s value is not stored but
 * is indexed for range filtering and sorting.  You can use
 * the {@link #NumericField(String,Field.Store,boolean)}
 * constructor if you need to change these defaults.</p>
 *
 * <p>You may add the same field name as a <code>NumericField</code> to
 * the same document more than once.  Range querying and
 * filtering will be the logical OR of all values; so a range query
 * will hit all documents that have at least one value in
 * the range. However sort behavior is not defined.  If you need to sort,
 * you should separately index a single-valued <code>NumericField</code>.</p>
 *
 * <p>A <code>NumericField</code> will consume somewhat more disk space
 * in the index than an ordinary single-valued field.
 * However, for a typical index that includes substantial
 * textual content per document, this increase will likely
 * be in the noise. </p>
 *
 * <p>Within Lucene, each numeric value is indexed as a
 * <em>trie</em> structure, where each term is logically
 * assigned to larger and larger pre-defined brackets (which
 * are simply lower-precision representations of the value).
 * The step size between each successive bracket is called the
 * <code>precisionStep</code>, measured in bits.  Smaller
 * <code>precisionStep</code> values result in larger number
 * of brackets, which consumes more disk space in the index
 * but may result in faster range search performance.  The
 * default value, 4, was selected for a reasonable tradeoff
 * of disk space consumption versus performance.  You can
 * use the expert constructor {@link
 * #NumericField(String,int,Field.Store,boolean)} if you'd
 * like to change the value.  Note that you must also
 * specify a congruent value when creating {@link
 * NumericRangeQuery} or {@link NumericRangeFilter}.
 * For low cardinality fields larger precision steps are good.
 * If the cardinality is &lt; 100, it is fair
 * to use {@link Integer#MAX_VALUE}, which produces one
 * term per value.
 *
 * <p>For more information on the internals of numeric trie
 * indexing, including the <a
 * href=""../search/NumericRangeQuery.html#precisionStepDesc""><code>precisionStep</code></a>
 * configuration, see {@link NumericRangeQuery}. The format of
 * indexed values is described in {@link NumericUtils}.
 *
 * <p>If you only need to sort by numeric value, and never
 * run range querying/filtering, you can index using a
 * <code>precisionStep</code> of {@link Integer#MAX_VALUE}.
 * This will minimize disk space consumed. </p>
 *
 * <p>More advanced users can instead use {@link
 * NumericTokenStream} directly, when indexing numbers. This
 * class is a wrapper around this token stream type for
 * easier, more intuitive usage.</p>
 *
 * <p><b>NOTE:</b> This class is only used during
 * indexing. When retrieving the stored field value from a
 * {@link Document} instance after search, you will get a
 * conventional {@link Fieldable} instance where the numeric
 * values are returned as {@link String}s (according to
 * <code>toString(value)</code> of the used data type).
 *
 * <p><font color=""red""><b>NOTE:</b> This API is
 * experimental and might change in incompatible ways in the
 * next release.</font>
 *
 * @since 2.9
 */ NumericField FieldDeclaration Modifier private final ReferenceType NumericTokenStream VariableDeclarator tokenStream ConstructorDeclaration Modifier public /**
   * Creates a field for numeric values using the default <code>precisionStep</code>
   * {@link NumericUtils#PRECISION_STEP_DEFAULT} (4). The instance is not yet initialized with
   * a numeric value, before indexing a document containing this field,
   * set a value using the various set<em>???</em>Value() methods.
   * This constructor creates an indexed, but not stored field.
   * @param name the field name
   */ NumericField FormalParameter ReferenceType String name StatementExpression ExplicitConstructorInvocation MemberReference name MemberReference NumericUtils PRECISION_STEP_DEFAULT MemberReference Field.Store NO Literal true ConstructorDeclaration Modifier public /**
   * Creates a field for numeric values using the default <code>precisionStep</code>
   * {@link NumericUtils#PRECISION_STEP_DEFAULT} (4). The instance is not yet initialized with
   * a numeric value, before indexing a document containing this field,
   * set a value using the various set<em>???</em>Value() methods.
   * @param name the field name
   * @param store if the field should be stored in plain text form
   *  (according to <code>toString(value)</code> of the used data type)
   * @param index if the field should be indexed using {@link NumericTokenStream}
   */ NumericField FormalParameter ReferenceType String name FormalParameter ReferenceType Field ReferenceType Store store FormalParameter BasicType boolean index StatementExpression ExplicitConstructorInvocation MemberReference name MemberReference NumericUtils PRECISION_STEP_DEFAULT MemberReference store MemberReference index ConstructorDeclaration Modifier public /**
   * Creates a field for numeric values with the specified
   * <code>precisionStep</code>. The instance is not yet initialized with
   * a numeric value, before indexing a document containing this field,
   * set a value using the various set<em>???</em>Value() methods.
   * This constructor creates an indexed, but not stored field.
   * @param name the field name
   * @param precisionStep the used <a href=""../search/NumericRangeQuery.html#precisionStepDesc"">precision step</a>
   */ NumericField FormalParameter ReferenceType String name FormalParameter BasicType int precisionStep StatementExpression ExplicitConstructorInvocation MemberReference name MemberReference precisionStep MemberReference Field.Store NO Literal true ConstructorDeclaration Modifier public /**
   * Creates a field for numeric values with the specified
   * <code>precisionStep</code>. The instance is not yet initialized with
   * a numeric value, before indexing a document containing this field,
   * set a value using the various set<em>???</em>Value() methods.
   * @param name the field name
   * @param precisionStep the used <a href=""../search/NumericRangeQuery.html#precisionStepDesc"">precision step</a>
   * @param store if the field should be stored in plain text form
   *  (according to <code>toString(value)</code> of the used data type)
   * @param index if the field should be indexed using {@link NumericTokenStream}
   */ NumericField FormalParameter ReferenceType String name FormalParameter BasicType int precisionStep FormalParameter ReferenceType Field ReferenceType Store store FormalParameter BasicType boolean index StatementExpression SuperConstructorInvocation MemberReference name MemberReference store TernaryExpression MemberReference index MemberReference Field.Index ANALYZED_NO_NORMS MemberReference Field.Index NO MemberReference Field.TermVector NO StatementExpression MethodInvocation Literal true setOmitTermFreqAndPositions StatementExpression Assignment MemberReference tokenStream ClassCreator ReferenceType NumericTokenStream MemberReference precisionStep = MethodDeclaration /** Returns a {@link NumericTokenStream} for indexing the numeric value. */ Modifier public ReferenceType TokenStream tokenStreamValue ReturnStatement TernaryExpression MethodInvocation isIndexed MemberReference tokenStream Literal null MethodDeclaration /** Returns always <code>null</code> for numeric fields */ Modifier public Annotation Override BasicType byte getBinaryValue FormalParameter BasicType byte result ReturnStatement Literal null MethodDeclaration /** Returns always <code>null</code> for numeric fields */ Modifier public ReferenceType Reader readerValue ReturnStatement Literal null MethodDeclaration /** Returns the numeric value as a string (how it is stored, when {@link Field.Store#YES} is chosen). */ Modifier public ReferenceType String stringValue ReturnStatement TernaryExpression BinaryOperation == MemberReference fieldsData Literal null Literal null MethodInvocation fieldsData toString MethodDeclaration /** Returns the current numeric value as a subclass of {@link Number}, <code>null</code> if not yet initialized. */ Modifier public ReferenceType Number getNumericValue ReturnStatement Cast ReferenceType Number MemberReference fieldsData MethodDeclaration /**
   * Initializes the field with the supplied <code>long</code> value.
   * @param value the numeric value
   * @return this instance, because of this you can use it the following way:
   * <code>document.add(new NumericField(name, precisionStep).setLongValue(value))</code>
   */ Modifier public ReferenceType NumericField setLongValue FormalParameter Modifier final BasicType long value StatementExpression MethodInvocation tokenStream MemberReference value setLongValue StatementExpression Assignment MemberReference fieldsData MethodInvocation Long MemberReference value valueOf = ReturnStatement This MethodDeclaration /**
   * Initializes the field with the supplied <code>int</code> value.
   * @param value the numeric value
   * @return this instance, because of this you can use it the following way:
   * <code>document.add(new NumericField(name, precisionStep).setIntValue(value))</code>
   */ Modifier public ReferenceType NumericField setIntValue FormalParameter Modifier final BasicType int value StatementExpression MethodInvocation tokenStream MemberReference value setIntValue StatementExpression Assignment MemberReference fieldsData MethodInvocation Integer MemberReference value valueOf = ReturnStatement This MethodDeclaration /**
   * Initializes the field with the supplied <code>double</code> value.
   * @param value the numeric value
   * @return this instance, because of this you can use it the following way:
   * <code>document.add(new NumericField(name, precisionStep).setDoubleValue(value))</code>
   */ Modifier public ReferenceType NumericField setDoubleValue FormalParameter Modifier final BasicType double value StatementExpression MethodInvocation tokenStream MemberReference value setDoubleValue StatementExpression Assignment MemberReference fieldsData MethodInvocation Double MemberReference value valueOf = ReturnStatement This MethodDeclaration /**
   * Initializes the field with the supplied <code>float</code> value.
   * @param value the numeric value
   * @return this instance, because of this you can use it the following way:
   * <code>document.add(new NumericField(name, precisionStep).setFloatValue(value))</code>
   */ Modifier public ReferenceType NumericField setFloatValue FormalParameter Modifier final BasicType float value StatementExpression MethodInvocation tokenStream MemberReference value setFloatValue StatementExpression Assignment MemberReference fieldsData MethodInvocation Float MemberReference value valueOf = ReturnStatement This ReferenceType AbstractField",1
644,644,,1
886,886,,0
191,191,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.processors Import java.util.List Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.nodes.FieldQueryNode Import org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl Import org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode Import org.apache.lucene.search.MatchAllDocsQuery ClassDeclaration Modifier public /**
 * This processor converts every {@link WildcardQueryNode} that is ""*:*"" to
 * {@link MatchAllDocsQueryNode}.
 * 
 * @see MatchAllDocsQueryNode
 * @see MatchAllDocsQuery
 */ MatchAllDocsQueryNodeProcessor ConstructorDeclaration Modifier public MatchAllDocsQueryNodeProcessor MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode postProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException IfStatement BinaryOperation instanceof MemberReference node ReferenceType FieldQueryNode BlockStatement LocalVariableDeclaration ReferenceType FieldQueryNode VariableDeclarator fqn Cast ReferenceType FieldQueryNode MemberReference node IfStatement BinaryOperation && MethodInvocation fqn MethodInvocation toString MethodInvocation Literal ""*"" equals getField MethodInvocation fqn MethodInvocation toString MethodInvocation Literal ""*"" equals getText BlockStatement ReturnStatement ClassCreator ReferenceType MatchAllDocsQueryNode End End ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode preProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType List TypeArgument ReferenceType QueryNode setChildrenOrder FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children QueryNodeException ReturnStatement MemberReference children ReferenceType QueryNodeProcessorImpl",0
531,531,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ FinnishStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal ""pa"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""sti"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""kaan"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""han"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""kin"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""hän"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""kään"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ko"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""pä"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""kö"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""lla"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""na"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ssa"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ta"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""lta"" Literal 3 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sta"" Literal 3 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""llä"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nä"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ssä"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tä"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ltä"" Literal 3 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""stä"" Literal 3 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_3 ArrayInitializer ClassCreator ReferenceType Among Literal ""lle"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ine"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_4 ArrayInitializer ClassCreator ReferenceType Among Literal ""nsa"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""mme"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""nne"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ni"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""si"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""an"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""en"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""än"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""nsä"" Literal - 1 Literal 3 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_5 ArrayInitializer ClassCreator ReferenceType Among Literal ""aa"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ee"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ii"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""oo"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""uu"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ää"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""öö"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_6 ArrayInitializer ClassCreator ReferenceType Among Literal ""a"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""lla"" Literal 0 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""na"" Literal 0 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ssa"" Literal 0 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ta"" Literal 0 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""lta"" Literal 4 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sta"" Literal 4 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tta"" Literal 4 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""lle"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ine"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ksi"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""n"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""han"" Literal 11 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""den"" Literal 11 Literal - 1 Literal ""r_VI"" This ClassCreator ReferenceType Among Literal ""seen"" Literal 11 Literal - 1 Literal ""r_LONG"" This ClassCreator ReferenceType Among Literal ""hen"" Literal 11 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""tten"" Literal 11 Literal - 1 Literal ""r_VI"" This ClassCreator ReferenceType Among Literal ""hin"" Literal 11 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""siin"" Literal 11 Literal - 1 Literal ""r_VI"" This ClassCreator ReferenceType Among Literal ""hon"" Literal 11 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""hän"" Literal 11 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""hön"" Literal 11 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ä"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""llä"" Literal 22 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nä"" Literal 22 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ssä"" Literal 22 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tä"" Literal 22 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ltä"" Literal 26 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""stä"" Literal 26 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ttä"" Literal 26 Literal 9 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_7 ArrayInitializer ClassCreator ReferenceType Among Literal ""eja"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mma"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""imma"" Literal 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mpa"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""impa"" Literal 3 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mmi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""immi"" Literal 5 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mpi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""impi"" Literal 7 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ejä"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mmä"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""immä"" Literal 10 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mpä"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""impä"" Literal 12 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_8 ArrayInitializer ClassCreator ReferenceType Among Literal ""i"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""j"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_9 ArrayInitializer ClassCreator ReferenceType Among Literal ""mma"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""imma"" Literal 0 Literal - 1 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_AEI ArrayInitializer Literal 17 Literal 1 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 8 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_V1 ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 1 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 8 Literal 0 Literal 32 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_V2 ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 8 Literal 0 Literal 32 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_particle_end ArrayInitializer Literal 17 Literal 97 Literal 24 Literal 1 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 8 Literal 0 Literal 32 FieldDeclaration Modifier private BasicType boolean VariableDeclarator B_ending_removed FieldDeclaration Modifier private ReferenceType StringBuilder VariableDeclarator S_x ClassCreator ReferenceType StringBuilder FieldDeclaration Modifier private BasicType int VariableDeclarator I_p2 FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 MethodDeclaration Modifier private copy_from FormalParameter ReferenceType FinnishStemmer other StatementExpression Assignment MemberReference B_ending_removed MemberReference other B_ending_removed = StatementExpression Assignment MemberReference S_x MemberReference other S_x = StatementExpression Assignment MemberReference I_p2 MemberReference other I_p2 = StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference I_p1 MemberReference limit = StatementExpression Assignment MemberReference I_p2 MemberReference limit = WhileStatement golab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 in_grouping BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = BreakStatement golab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab2 Literal true BlockStatement DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 out_grouping BlockStatement BreakStatement lab3 End BreakStatement golab2 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = WhileStatement golab4 Literal true BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 in_grouping BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = BreakStatement golab4 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab6 Literal true BlockStatement DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 out_grouping BlockStatement BreakStatement lab7 End BreakStatement golab6 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p2 MemberReference cursor = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R2 IfStatement BinaryOperation <= MemberReference I_p2 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_particle_etc LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 10 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! MemberReference g_particle_end Literal 97 Literal 246 in_grouping_b BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End BreakStatement End StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_possessive LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_4 Literal 9 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""k"" eq_s_b BlockStatement BreakStatement lab0 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 3 Literal ""kse"" eq_s_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation Literal ""ksi"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 4 IfStatement BinaryOperation == MethodInvocation MemberReference a_1 Literal 6 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 5 IfStatement BinaryOperation == MethodInvocation MemberReference a_2 Literal 6 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 6 IfStatement BinaryOperation == MethodInvocation MemberReference a_3 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_LONG IfStatement BinaryOperation == MethodInvocation MemberReference a_5 Literal 7 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_VI IfStatement MethodInvocation ! Literal 1 Literal ""i"" eq_s_b BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! MemberReference g_V2 Literal 97 Literal 246 in_grouping_b BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_case_ending LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_6 Literal 30 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! Literal 1 Literal ""a"" eq_s_b BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! Literal 1 Literal ""e"" eq_s_b BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 3 IfStatement MethodInvocation ! Literal 1 Literal ""i"" eq_s_b BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 4 IfStatement MethodInvocation ! Literal 1 Literal ""o"" eq_s_b BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 5 IfStatement MethodInvocation ! Literal 1 Literal ""ä"" eq_s_b BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 6 IfStatement MethodInvocation ! Literal 1 Literal ""ö"" eq_s_b BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 7 StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_LONG BlockStatement BreakStatement lab2 End BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = IfStatement MethodInvocation ! Literal 2 Literal ""ie"" eq_s_b BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab0 End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference bra MemberReference cursor = End BreakStatement SwitchStatementCase Literal 8 IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 in_grouping_b BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 out_grouping_b BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 9 IfStatement MethodInvocation ! Literal 1 Literal ""e"" eq_s_b BlockStatement ReturnStatement Literal false End BreakStatement End StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference B_ending_removed Literal true = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_other_endings LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p2 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p2 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_7 Literal 14 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""po"" eq_s_b BlockStatement BreakStatement lab0 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement End StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_i_plural LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement BinaryOperation == MethodInvocation MemberReference a_8 Literal 2 find_among_b Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_t_plural LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""t"" eq_s_b BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 in_grouping_b BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p2 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p2 = StatementExpression Assignment MemberReference v_5 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_9 Literal 2 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_5 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_5 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""po"" eq_s_b BlockStatement BreakStatement lab0 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = BreakStatement End StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_tidy LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! r_LONG BlockStatement BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab0 End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_AEI Literal 97 Literal 228 in_grouping_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 out_grouping_b BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation slice_del End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""j"" eq_s_b BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference bra MemberReference cursor = DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""o"" eq_s_b BlockStatement BreakStatement lab4 End BreakStatement lab3 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = IfStatement MethodInvocation ! Literal 1 Literal ""u"" eq_s_b BlockStatement BreakStatement lab2 End End StatementExpression MethodInvocation slice_del End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""o"" eq_s_b BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""j"" eq_s_b BlockStatement BreakStatement lab5 End StatementExpression MethodInvocation slice_del End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = WhileStatement golab6 Literal true BlockStatement StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_V1 Literal 97 Literal 246 out_grouping_b BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement golab6 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor End StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference S_x MethodInvocation MemberReference S_x slice_to = IfStatement MethodInvocation ! MemberReference S_x eq_v_b BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference B_ending_removed Literal false = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_particle_etc BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_possessive BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_case_ending BlockStatement BreakStatement lab3 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! r_other_endings BlockStatement BreakStatement lab4 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = DoStatement lab5 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement IfStatement MemberReference ! B_ending_removed BlockStatement BreakStatement lab6 End StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! r_i_plural BlockStatement BreakStatement lab7 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! r_t_plural BlockStatement BreakStatement lab8 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = End StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! r_tidy BlockStatement BreakStatement lab9 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = ReturnStatement Literal true ReferenceType SnowballProgram",0
399,399,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.snowball Import org.apache.lucene.analysis  Import org.apache.lucene.analysis.standard  Import org.apache.lucene.util.Version Import java.io.IOException Import java.io.Reader Import java.util.Set ClassDeclaration Modifier public /** Filters {@link StandardTokenizer} with {@link StandardFilter}, {@link
 * LowerCaseFilter}, {@link StopFilter} and {@link SnowballFilter}.
 *
 * Available stemmers are listed in org.tartarus.snowball.ext.  The name of a
 * stemmer is the part of the class name before ""Stemmer"", e.g., the stemmer in
 * {@link org.tartarus.snowball.ext.EnglishStemmer} is named ""English"".
 *
 * <p><b>NOTE</b>: This class uses the same {@link Version}
 * dependent settings as {@link StandardAnalyzer}.</p>
 */ SnowballAnalyzer FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType Set TypeArgument ? VariableDeclarator stopSet FieldDeclaration Modifier private final ReferenceType Version VariableDeclarator matchVersion ConstructorDeclaration Modifier public /** Builds the named analyzer with no stop words. */ SnowballAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression MethodInvocation ClassReference ReferenceType SnowballAnalyzer setOverridesTokenStreamMethod StatementExpression Assignment This MemberReference matchVersion MemberReference matchVersion = ConstructorDeclaration Modifier public /** Builds the named analyzer with the given stop words. */ SnowballAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType String name FormalParameter ReferenceType String stopWords StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MemberReference name StatementExpression Assignment MemberReference stopSet MethodInvocation StopFilter MemberReference stopWords makeStopSet = MethodDeclaration /** Constructs a {@link StandardTokenizer} filtered by a {@link
      StandardFilter}, a {@link LowerCaseFilter}, a {@link StopFilter},
      and a {@link SnowballFilter} */ Modifier public Annotation Override ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator result ClassCreator ReferenceType StandardTokenizer MemberReference matchVersion MemberReference reader StatementExpression Assignment MemberReference result ClassCreator ReferenceType StandardFilter MemberReference result = StatementExpression Assignment MemberReference result ClassCreator ReferenceType LowerCaseFilter MemberReference result = IfStatement BinaryOperation != MemberReference stopSet Literal null StatementExpression Assignment MemberReference result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference result MemberReference stopSet = End StatementExpression Assignment MemberReference result ClassCreator ReferenceType SnowballFilter MemberReference result MemberReference name = ReturnStatement MemberReference result ClassDeclaration Modifier private SavedStreams FieldDeclaration ReferenceType Tokenizer VariableDeclarator source FieldDeclaration ReferenceType TokenStream VariableDeclarator result MethodDeclaration /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a 
   * {@link StandardFilter}, a {@link LowerCaseFilter}, 
   * a {@link StopFilter}, and a {@link SnowballFilter} */ Modifier public Annotation Override ReferenceType TokenStream reusableTokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader IOException IfStatement MemberReference overridesTokenStreamMethod BlockStatement ReturnStatement MethodInvocation MemberReference fieldName MemberReference reader tokenStream End LocalVariableDeclaration ReferenceType SavedStreams VariableDeclarator streams Cast ReferenceType SavedStreams MethodInvocation getPreviousTokenStream IfStatement BinaryOperation == MemberReference streams Literal null BlockStatement StatementExpression Assignment MemberReference streams ClassCreator ReferenceType SavedStreams = StatementExpression Assignment MemberReference streams source ClassCreator ReferenceType StandardTokenizer MemberReference matchVersion MemberReference reader = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType StandardFilter MemberReference streams source = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType LowerCaseFilter MemberReference streams result = IfStatement BinaryOperation != MemberReference stopSet Literal null StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference streams result MemberReference stopSet = End StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType SnowballFilter MemberReference streams result MemberReference name = StatementExpression MethodInvocation MemberReference streams setPreviousTokenStream BlockStatement StatementExpression MethodInvocation streams.source MemberReference reader reset End ReturnStatement MemberReference streams result ReferenceType Analyzer",0
778,778,,0
789,789,,0
720,720,,1
216,216,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.payloads Import org.apache.lucene.index.Payload ClassDeclaration Modifier public /**
 *  Encode a character array Float as a {@link org.apache.lucene.index.Payload}.
 * <p/>
 * @see org.apache.lucene.analysis.payloads.PayloadHelper#encodeFloat(float, byte[], int)
 *
 **/ FloatEncoder MethodDeclaration Modifier public ReferenceType Payload encode FormalParameter BasicType char buffer FormalParameter BasicType int offset FormalParameter BasicType int length LocalVariableDeclaration ReferenceType Payload VariableDeclarator result ClassCreator ReferenceType Payload LocalVariableDeclaration BasicType float VariableDeclarator payload MethodInvocation Float ClassCreator ReferenceType String MemberReference buffer MemberReference offset MemberReference length parseFloat LocalVariableDeclaration BasicType byte VariableDeclarator bytes MethodInvocation PayloadHelper MemberReference payload encodeFloat StatementExpression MethodInvocation result MemberReference bytes setData ReturnStatement MemberReference result ReferenceType AbstractEncoder ReferenceType PayloadEncoder",1
782,782,,1
356,356,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ DanishStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal ""hed"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ethed"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ered"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""e"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erede"" Literal 3 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ende"" Literal 3 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erende"" Literal 5 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ene"" Literal 3 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erne"" Literal 3 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ere"" Literal 3 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""en"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""heden"" Literal 10 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eren"" Literal 10 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""er"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""heder"" Literal 13 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erer"" Literal 13 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""s"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""heds"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""es"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""endes"" Literal 18 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erendes"" Literal 19 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""enes"" Literal 18 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ernes"" Literal 18 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eres"" Literal 18 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ens"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""hedens"" Literal 24 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erens"" Literal 24 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ers"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ets"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erets"" Literal 28 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""et"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eret"" Literal 30 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""gd"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dt"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""gt"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""kt"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""ig"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""lig"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""elig"" Literal 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""els"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""løst"" Literal - 1 Literal 2 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 1 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 48 Literal 0 Literal 128 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_s_ending ArrayInitializer Literal 239 Literal 254 Literal 42 Literal 3 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 16 FieldDeclaration Modifier private BasicType int VariableDeclarator I_x FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 FieldDeclaration Modifier private ReferenceType StringBuilder VariableDeclarator S_ch ClassCreator ReferenceType StringBuilder MethodDeclaration Modifier private copy_from FormalParameter ReferenceType DanishStemmer other StatementExpression Assignment MemberReference I_x MemberReference other I_x = StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression Assignment MemberReference S_ch MemberReference other S_ch = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference I_p1 MemberReference limit = StatementExpression Assignment MemberReference v_1 MemberReference cursor = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation + MemberReference cursor Literal 3 IfStatement BinaryOperation || BinaryOperation > Literal 0 MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference c = StatementExpression Assignment MemberReference I_x MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference v_1 = WhileStatement golab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 248 in_grouping BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = BreakStatement golab0 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab2 Literal true BlockStatement DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 248 out_grouping BlockStatement BreakStatement lab3 End BreakStatement golab2 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement BinaryOperation < MemberReference I_p1 MemberReference I_x BlockStatement BreakStatement lab4 End StatementExpression Assignment MemberReference I_p1 MemberReference I_x = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_main_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 32 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! MemberReference g_s_ending Literal 97 Literal 229 in_grouping_b BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_consonant_pair LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_3 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement BinaryOperation == MethodInvocation MemberReference a_1 Literal 4 find_among_b Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_3 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_3 = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_other_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 2 Literal ""st"" eq_s_b BlockStatement BreakStatement lab0 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! Literal 2 Literal ""ig"" eq_s_b BlockStatement BreakStatement lab0 End StatementExpression MethodInvocation slice_del End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_3 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_2 Literal 5 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_3 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_3 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_consonant_pair BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""løs"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_undouble LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 248 out_grouping_b BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference S_ch MethodInvocation MemberReference S_ch slice_to = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = IfStatement MethodInvocation ! MemberReference S_ch eq_v_b BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_main_suffix BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_consonant_pair BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_other_suffix BlockStatement BreakStatement lab3 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! r_undouble BlockStatement BreakStatement lab4 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = ReturnStatement Literal true ReferenceType SnowballProgram",0
217,217,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.IOException Import org.apache.lucene.analysis.tokenattributes.TermAttribute ClassDeclaration Modifier public final /**
 * Removes words that are too long or too short from the stream.
 */ LengthFilter FieldDeclaration Modifier final BasicType int VariableDeclarator min FieldDeclaration Modifier final BasicType int VariableDeclarator max FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt ConstructorDeclaration Modifier public /**
   * Build a filter that removes words that are too long or too
   * short from the text.
   */ LengthFilter FormalParameter ReferenceType TokenStream in FormalParameter BasicType int min FormalParameter BasicType int max StatementExpression SuperConstructorInvocation MemberReference in StatementExpression Assignment This MemberReference min MemberReference min = StatementExpression Assignment This MemberReference max MemberReference max = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = MethodDeclaration /**
   * Returns the next input Token whose term() is the right len
   */ Modifier public final Annotation Override BasicType boolean incrementToken IOException WhileStatement MethodInvocation input incrementToken BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation termAtt termLength IfStatement BinaryOperation && BinaryOperation >= MemberReference len MemberReference min BinaryOperation <= MemberReference len MemberReference max BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false ReferenceType TokenFilter",0
201,201,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser Import java.io  ClassDeclaration Modifier public final /** An efficient implementation of JavaCC's CharStream interface.  <p>Note that
 * this does not do line-number counting, but instead keeps track of the
 * character position of the token in the input, as required by Lucene's {@link
 * org.apache.lucene.analysis.Token} API. 
 * */ FastCharStream FieldDeclaration BasicType char VariableDeclarator buffer Literal null FieldDeclaration BasicType int VariableDeclarator bufferLength Literal 0 FieldDeclaration BasicType int VariableDeclarator bufferPosition Literal 0 FieldDeclaration BasicType int VariableDeclarator tokenStart Literal 0 FieldDeclaration BasicType int VariableDeclarator bufferStart Literal 0 FieldDeclaration ReferenceType Reader VariableDeclarator input ConstructorDeclaration Modifier public /** Constructs from a Reader. */ FastCharStream FormalParameter ReferenceType Reader r StatementExpression Assignment MemberReference input MemberReference r = MethodDeclaration Modifier public final BasicType char readChar IOException IfStatement BinaryOperation >= MemberReference bufferPosition MemberReference bufferLength StatementExpression MethodInvocation refill End ReturnStatement MemberReference ArraySelector MemberReference ++ bufferPosition buffer MethodDeclaration Modifier private final refill IOException LocalVariableDeclaration BasicType int VariableDeclarator newPosition BinaryOperation - MemberReference bufferLength MemberReference tokenStart IfStatement BinaryOperation == MemberReference tokenStart Literal 0 BlockStatement IfStatement BinaryOperation == MemberReference buffer Literal null BlockStatement StatementExpression Assignment MemberReference buffer ArrayCreator BasicType char Literal 2048 = IfStatement BinaryOperation == MemberReference bufferLength MemberReference buffer length BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator newBuffer ArrayCreator BasicType char BinaryOperation * MemberReference buffer length Literal 2 StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference newBuffer Literal 0 MemberReference bufferLength arraycopy StatementExpression Assignment MemberReference buffer MemberReference newBuffer = End End BlockStatement StatementExpression MethodInvocation System MemberReference buffer MemberReference tokenStart MemberReference buffer Literal 0 MemberReference newPosition arraycopy End StatementExpression Assignment MemberReference bufferLength MemberReference newPosition = StatementExpression Assignment MemberReference bufferPosition MemberReference newPosition = StatementExpression Assignment MemberReference bufferStart MemberReference tokenStart += StatementExpression Assignment MemberReference tokenStart Literal 0 = LocalVariableDeclaration BasicType int VariableDeclarator charsRead MethodInvocation input MemberReference buffer MemberReference newPosition BinaryOperation - MemberReference buffer length MemberReference newPosition read IfStatement BinaryOperation == MemberReference charsRead Literal - 1 ThrowStatement ClassCreator ReferenceType IOException Literal ""read past eof"" StatementExpression Assignment MemberReference bufferLength MemberReference charsRead += End MethodDeclaration Modifier public final BasicType char BeginToken IOException StatementExpression Assignment MemberReference tokenStart MemberReference bufferPosition = ReturnStatement MethodInvocation readChar MethodDeclaration Modifier public final backup FormalParameter BasicType int amount StatementExpression Assignment MemberReference bufferPosition MemberReference amount -= MethodDeclaration Modifier public final ReferenceType String GetImage ReturnStatement ClassCreator ReferenceType String MemberReference buffer MemberReference tokenStart BinaryOperation - MemberReference bufferPosition MemberReference tokenStart MethodDeclaration Modifier public final BasicType char GetSuffix FormalParameter BasicType int len LocalVariableDeclaration BasicType char VariableDeclarator value ArrayCreator BasicType char MemberReference len StatementExpression MethodInvocation System MemberReference buffer BinaryOperation - MemberReference bufferPosition MemberReference len MemberReference value Literal 0 MemberReference len arraycopy ReturnStatement MemberReference value MethodDeclaration Modifier public final Done TryStatement StatementExpression MethodInvocation input close CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation System.err BinaryOperation + BinaryOperation + Literal ""Caught: "" MemberReference e Literal ""; ignoring."" println MethodDeclaration Modifier public final BasicType int getColumn ReturnStatement BinaryOperation + MemberReference bufferStart MemberReference bufferPosition MethodDeclaration Modifier public final BasicType int getLine ReturnStatement Literal 1 MethodDeclaration Modifier public final BasicType int getEndColumn ReturnStatement BinaryOperation + MemberReference bufferStart MemberReference bufferPosition MethodDeclaration Modifier public final BasicType int getEndLine ReturnStatement Literal 1 MethodDeclaration Modifier public final BasicType int getBeginColumn ReturnStatement BinaryOperation + MemberReference bufferStart MemberReference tokenStart MethodDeclaration Modifier public final BasicType int getBeginLine ReturnStatement Literal 1 ReferenceType CharStream",0
894,894,,0
449,449,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.IOException Import java.io.Reader Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.util.AttributeSource ClassDeclaration Modifier public final /**
 * Emits the entire input as a single token.
 */ KeywordTokenizer FieldDeclaration Modifier private final static BasicType int VariableDeclarator DEFAULT_BUFFER_SIZE Literal 256 FieldDeclaration Modifier private BasicType boolean VariableDeclarator done FieldDeclaration Modifier private BasicType int VariableDeclarator finalOffset FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt ConstructorDeclaration Modifier public KeywordTokenizer FormalParameter ReferenceType Reader input StatementExpression ExplicitConstructorInvocation MemberReference input MemberReference DEFAULT_BUFFER_SIZE ConstructorDeclaration Modifier public KeywordTokenizer FormalParameter ReferenceType Reader input FormalParameter BasicType int bufferSize StatementExpression SuperConstructorInvocation MemberReference input StatementExpression MethodInvocation MemberReference bufferSize init ConstructorDeclaration Modifier public KeywordTokenizer FormalParameter ReferenceType AttributeSource source FormalParameter ReferenceType Reader input FormalParameter BasicType int bufferSize StatementExpression SuperConstructorInvocation MemberReference source MemberReference input StatementExpression MethodInvocation MemberReference bufferSize init ConstructorDeclaration Modifier public KeywordTokenizer FormalParameter ReferenceType AttributeFactory factory FormalParameter ReferenceType Reader input FormalParameter BasicType int bufferSize StatementExpression SuperConstructorInvocation MemberReference factory MemberReference input StatementExpression MethodInvocation MemberReference bufferSize init MethodDeclaration Modifier private init FormalParameter BasicType int bufferSize StatementExpression Assignment This MemberReference done Literal false = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression MethodInvocation termAtt MemberReference bufferSize resizeTermBuffer MethodDeclaration Modifier public final Annotation Override BasicType boolean incrementToken IOException IfStatement MemberReference ! done BlockStatement StatementExpression MethodInvocation clearAttributes StatementExpression Assignment MemberReference done Literal true = LocalVariableDeclaration BasicType int VariableDeclarator upto Literal 0 LocalVariableDeclaration BasicType char VariableDeclarator buffer MethodInvocation termAtt termBuffer WhileStatement Literal true BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator length MethodInvocation input MemberReference buffer MemberReference upto BinaryOperation - MemberReference buffer length MemberReference upto read IfStatement BinaryOperation == MemberReference length Literal - 1 BreakStatement End StatementExpression Assignment MemberReference upto MemberReference length += IfStatement BinaryOperation == MemberReference upto MemberReference buffer length StatementExpression Assignment MemberReference buffer MethodInvocation termAtt BinaryOperation + Literal 1 MemberReference buffer length resizeTermBuffer = End End StatementExpression MethodInvocation termAtt MemberReference upto setTermLength StatementExpression Assignment MemberReference finalOffset MethodInvocation MemberReference upto correctOffset = StatementExpression MethodInvocation offsetAtt MethodInvocation Literal 0 correctOffset MemberReference finalOffset setOffset ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration Modifier public final Annotation Override end StatementExpression MethodInvocation offsetAtt MemberReference finalOffset MemberReference finalOffset setOffset MethodDeclaration Modifier public Annotation Override reset FormalParameter ReferenceType Reader input IOException StatementExpression SuperMethodInvocation MemberReference input reset StatementExpression Assignment This MemberReference done Literal false = ReferenceType Tokenizer",1
9,9,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis.cn.smart.hhmm Import java.io.UnsupportedEncodingException ClassDeclaration Modifier abstract /**
 * <p>
 * SmartChineseAnalyzer abstract dictionary implementation.
 * </p>
 * <p>
 * Contains methods for dealing with GB2312 encoding.
 * </p>
 * <p><font color=""#FF0000"">
 * WARNING: The status of the analyzers/smartcn <b>analysis.cn.smart</b> package is experimental. 
 * The APIs and file formats introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 * </p>
 */ AbstractDictionary FieldDeclaration /**
   * First Chinese Character in GB2312 (15 * 94)
   * Characters in GB2312 are arranged in a grid of 94 * 94, 0-14 are unassigned or punctuation.
   */ Modifier public final static BasicType int VariableDeclarator GB2312_FIRST_CHAR Literal 1410 FieldDeclaration /**
   * Last Chinese Character in GB2312 (87 * 94). 
   * Characters in GB2312 are arranged in a grid of 94 * 94, 88-94 are unassigned.
   */ Modifier public final static BasicType int VariableDeclarator GB2312_CHAR_NUM BinaryOperation * Literal 87 Literal 94 FieldDeclaration /**
   * Dictionary data contains 6768 Chinese characters with frequency statistics.
   */ Modifier public final static BasicType int VariableDeclarator CHAR_NUM_IN_FILE Literal 6768 MethodDeclaration /**
   * <p>
   * Transcode from GB2312 ID to Unicode
   * </p>
   * <p>
   * GB2312 is divided into a 94 * 94 grid, containing 7445 characters consisting of 6763 Chinese characters and 682 symbols.
   * Some regions are unassigned (reserved).
   * </p>
   * 
   * @param ccid GB2312 id
   * @return unicode String
   */ Modifier public ReferenceType String getCCByGB2312Id FormalParameter BasicType int ccid IfStatement BinaryOperation || BinaryOperation < MemberReference ccid Literal 0 BinaryOperation > MemberReference ccid MemberReference WordDictionary GB2312_CHAR_NUM ReturnStatement Literal """" End LocalVariableDeclaration BasicType int VariableDeclarator cc1 BinaryOperation + BinaryOperation / MemberReference ccid Literal 94 Literal 161 LocalVariableDeclaration BasicType int VariableDeclarator cc2 BinaryOperation + BinaryOperation % MemberReference ccid Literal 94 Literal 161 LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte Literal 2 StatementExpression Assignment MemberReference ArraySelector Literal 0 buffer Cast BasicType byte MemberReference cc1 = StatementExpression Assignment MemberReference ArraySelector Literal 1 buffer Cast BasicType byte MemberReference cc2 = TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator cchar ClassCreator ReferenceType String MemberReference buffer Literal ""GB2312"" ReturnStatement MemberReference cchar CatchClause CatchClauseParameter UnsupportedEncodingException e ReturnStatement Literal """" MethodDeclaration /**
   * Transcode from Unicode to GB2312
   * 
   * @param ch input character in Unicode, or character in Basic Latin range.
   * @return position in GB2312
   */ Modifier public BasicType short getGB2312Id FormalParameter BasicType char ch TryStatement LocalVariableDeclaration BasicType byte VariableDeclarator buffer MethodInvocation Character MethodInvocation Literal ""GB2312"" getBytes MemberReference ch toString IfStatement BinaryOperation != MemberReference buffer length Literal 2 BlockStatement ReturnStatement Literal - 1 End LocalVariableDeclaration BasicType int VariableDeclarator b0 BinaryOperation - Cast BasicType int BinaryOperation & MemberReference ArraySelector Literal 0 buffer Literal 0x0FF Literal 161 LocalVariableDeclaration BasicType int VariableDeclarator b1 BinaryOperation - Cast BasicType int BinaryOperation & MemberReference ArraySelector Literal 1 buffer Literal 0x0FF Literal 161 ReturnStatement Cast BasicType short BinaryOperation + BinaryOperation * MemberReference b0 Literal 94 MemberReference b1 CatchClause CatchClauseParameter UnsupportedEncodingException e StatementExpression MethodInvocation e printStackTrace ReturnStatement Literal - 1 MethodDeclaration /**
   * 32-bit FNV Hash Function
   * 
   * @param c input character
   * @return hashcode
   */ Modifier public BasicType long hash1 FormalParameter BasicType char c LocalVariableDeclaration Modifier final BasicType long VariableDeclarator p Literal 1099511628211L LocalVariableDeclaration BasicType long VariableDeclarator hash Literal 0xcbf29ce484222325L StatementExpression Assignment MemberReference hash BinaryOperation * BinaryOperation ^ MemberReference hash BinaryOperation & MemberReference c Literal 0x00FF MemberReference p = StatementExpression Assignment MemberReference hash BinaryOperation * BinaryOperation ^ MemberReference hash BinaryOperation >> MemberReference c Literal 8 MemberReference p = StatementExpression Assignment MemberReference hash BinaryOperation << MemberReference hash Literal 13 += StatementExpression Assignment MemberReference hash BinaryOperation >> MemberReference hash Literal 7 ^= StatementExpression Assignment MemberReference hash BinaryOperation << MemberReference hash Literal 3 += StatementExpression Assignment MemberReference hash BinaryOperation >> MemberReference hash Literal 17 ^= StatementExpression Assignment MemberReference hash BinaryOperation << MemberReference hash Literal 5 += ReturnStatement MemberReference hash MethodDeclaration /**
   * 32-bit FNV Hash Function
   * 
   * @param carray character array
   * @return hashcode
   */ Modifier public BasicType long hash1 FormalParameter BasicType char carray LocalVariableDeclaration Modifier final BasicType long VariableDeclarator p Literal 1099511628211L LocalVariableDeclaration BasicType long VariableDeclarator hash Literal 0xcbf29ce484222325L ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference carray length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator d MemberReference ArraySelector MemberReference i carray StatementExpression Assignment MemberReference hash BinaryOperation * BinaryOperation ^ MemberReference hash BinaryOperation & MemberReference d Literal 0x00FF MemberReference p = StatementExpression Assignment MemberReference hash BinaryOperation * BinaryOperation ^ MemberReference hash BinaryOperation >> MemberReference d Literal 8 MemberReference p = End ReturnStatement MemberReference hash MethodDeclaration /**
   * djb2 hash algorithm，this algorithm (k=33) was first reported by dan
   * bernstein many years ago in comp.lang.c. another version of this algorithm
   * (now favored by bernstein) uses xor: hash(i) = hash(i - 1) * 33 ^ str[i];
   * the magic of number 33 (why it works better than many other constants,
   * prime or not) has never been adequately explained.
   * 
   * @param c character
   * @return hashcode
   */ Modifier public BasicType int hash2 FormalParameter BasicType char c LocalVariableDeclaration BasicType int VariableDeclarator hash Literal 5381 StatementExpression Assignment MemberReference hash BinaryOperation & BinaryOperation + BinaryOperation + BinaryOperation << MemberReference hash Literal 5 MemberReference hash MemberReference c Literal 0x00FF = StatementExpression Assignment MemberReference hash BinaryOperation >> BinaryOperation + BinaryOperation + BinaryOperation << MemberReference hash Literal 5 MemberReference hash MemberReference c Literal 8 = ReturnStatement MemberReference hash MethodDeclaration /**
   * djb2 hash algorithm，this algorithm (k=33) was first reported by dan
   * bernstein many years ago in comp.lang.c. another version of this algorithm
   * (now favored by bernstein) uses xor: hash(i) = hash(i - 1) * 33 ^ str[i];
   * the magic of number 33 (why it works better than many other constants,
   * prime or not) has never been adequately explained.
   * 
   * @param carray character array
   * @return hashcode
   */ Modifier public BasicType int hash2 FormalParameter BasicType char carray LocalVariableDeclaration BasicType int VariableDeclarator hash Literal 5381 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference carray length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator d MemberReference ArraySelector MemberReference i carray StatementExpression Assignment MemberReference hash BinaryOperation & BinaryOperation + BinaryOperation + BinaryOperation << MemberReference hash Literal 5 MemberReference hash MemberReference d Literal 0x00FF = StatementExpression Assignment MemberReference hash BinaryOperation >> BinaryOperation + BinaryOperation + BinaryOperation << MemberReference hash Literal 5 MemberReference hash MemberReference d Literal 8 = End ReturnStatement MemberReference hash",1
592,592,,0
876,876,,1
369,369,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.util.ArrayList Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.BooleanClause.Occur Import org.apache.lucene.util.OpenBitSet Import org.apache.lucene.util.OpenBitSetDISI ClassDeclaration Modifier public /**
 * A container Filter that allows Boolean composition of Filters.
 * Filters are allocated into one of three logical constructs;
 * SHOULD, MUST NOT, MUST
 * The results Filter BitSet is constructed as follows:
 * SHOULD Filters are OR'd together
 * The resulting Filter is NOT'd with the NOT Filters
 * The resulting Filter is AND'd with the MUST Filters
 */ BooleanFilter FieldDeclaration ReferenceType ArrayList TypeArgument ReferenceType Filter VariableDeclarator shouldFilters Literal null FieldDeclaration ReferenceType ArrayList TypeArgument ReferenceType Filter VariableDeclarator notFilters Literal null FieldDeclaration ReferenceType ArrayList TypeArgument ReferenceType Filter VariableDeclarator mustFilters Literal null MethodDeclaration Modifier private ReferenceType DocIdSetIterator getDISI FormalParameter ReferenceType ArrayList TypeArgument ReferenceType Filter filters FormalParameter BasicType int index FormalParameter ReferenceType IndexReader reader IOException ReturnStatement MethodInvocation filters MethodInvocation MemberReference reader getDocIdSet MethodInvocation iterator MemberReference index get MethodDeclaration /**
   * Returns the a DocIdSetIterator representing the Boolean composition
   * of the filters that have been added.
   */ Modifier public Annotation Override ReferenceType DocIdSet getDocIdSet FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration ReferenceType OpenBitSetDISI VariableDeclarator res Literal null IfStatement BinaryOperation != MemberReference shouldFilters Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation shouldFilters size MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference res Literal null BlockStatement StatementExpression Assignment MemberReference res ClassCreator ReferenceType OpenBitSetDISI MethodInvocation MemberReference shouldFilters MemberReference i MemberReference reader getDISI MethodInvocation reader maxDoc = BlockStatement LocalVariableDeclaration ReferenceType DocIdSet VariableDeclarator dis MethodInvocation shouldFilters MethodInvocation MemberReference reader getDocIdSet MemberReference i get IfStatement BinaryOperation instanceof MemberReference dis ReferenceType OpenBitSet BlockStatement StatementExpression MethodInvocation res Cast ReferenceType OpenBitSet MemberReference dis or BlockStatement StatementExpression MethodInvocation res MethodInvocation MemberReference shouldFilters MemberReference i MemberReference reader getDISI inPlaceOr End End End End IfStatement BinaryOperation != MemberReference notFilters Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation notFilters size MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference res Literal null BlockStatement StatementExpression Assignment MemberReference res ClassCreator ReferenceType OpenBitSetDISI MethodInvocation MemberReference notFilters MemberReference i MemberReference reader getDISI MethodInvocation reader maxDoc = StatementExpression MethodInvocation res Literal 0 MethodInvocation reader maxDoc flip BlockStatement LocalVariableDeclaration ReferenceType DocIdSet VariableDeclarator dis MethodInvocation notFilters MethodInvocation MemberReference reader getDocIdSet MemberReference i get IfStatement BinaryOperation instanceof MemberReference dis ReferenceType OpenBitSet BlockStatement StatementExpression MethodInvocation res Cast ReferenceType OpenBitSet MemberReference dis andNot BlockStatement StatementExpression MethodInvocation res MethodInvocation MemberReference notFilters MemberReference i MemberReference reader getDISI inPlaceNot End End End End IfStatement BinaryOperation != MemberReference mustFilters Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation mustFilters size MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference res Literal null BlockStatement StatementExpression Assignment MemberReference res ClassCreator ReferenceType OpenBitSetDISI MethodInvocation MemberReference mustFilters MemberReference i MemberReference reader getDISI MethodInvocation reader maxDoc = BlockStatement LocalVariableDeclaration ReferenceType DocIdSet VariableDeclarator dis MethodInvocation mustFilters MethodInvocation MemberReference reader getDocIdSet MemberReference i get IfStatement BinaryOperation instanceof MemberReference dis ReferenceType OpenBitSet BlockStatement StatementExpression MethodInvocation res Cast ReferenceType OpenBitSet MemberReference dis and BlockStatement StatementExpression MethodInvocation res MethodInvocation MemberReference mustFilters MemberReference i MemberReference reader getDISI inPlaceAnd End End End End IfStatement BinaryOperation != MemberReference res Literal null ReturnStatement MethodInvocation MemberReference res MethodInvocation reader maxDoc finalResult End ReturnStatement MemberReference DocIdSet EMPTY_DOCIDSET MethodDeclaration /** Provide a SortedVIntList when it is definitely smaller
   * than an OpenBitSet.
   * @deprecated Either use CachingWrapperFilter, or
   * switch to a different DocIdSet implementation yourself.
   * This method will be removed in Lucene 4.0 
   */ Modifier final protected ReferenceType DocIdSet finalResult FormalParameter ReferenceType OpenBitSetDISI result FormalParameter BasicType int maxDocs ReturnStatement MemberReference result MethodDeclaration /**
  * Adds a new FilterClause to the Boolean Filter container
  * @param filterClause A FilterClause object containing a Filter and an Occur parameter
  */ Modifier public add FormalParameter ReferenceType FilterClause filterClause IfStatement MethodInvocation filterClause MethodInvocation MemberReference Occur MUST equals getOccur BlockStatement IfStatement BinaryOperation == MemberReference mustFilters Literal null BlockStatement StatementExpression Assignment MemberReference mustFilters ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Filter = End StatementExpression MethodInvocation mustFilters MethodInvocation filterClause getFilter add End IfStatement MethodInvocation filterClause MethodInvocation MemberReference Occur SHOULD equals getOccur BlockStatement IfStatement BinaryOperation == MemberReference shouldFilters Literal null BlockStatement StatementExpression Assignment MemberReference shouldFilters ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Filter = End StatementExpression MethodInvocation shouldFilters MethodInvocation filterClause getFilter add End IfStatement MethodInvocation filterClause MethodInvocation MemberReference Occur MUST_NOT equals getOccur BlockStatement IfStatement BinaryOperation == MemberReference notFilters Literal null BlockStatement StatementExpression Assignment MemberReference notFilters ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Filter = End StatementExpression MethodInvocation notFilters MethodInvocation filterClause getFilter add End MethodDeclaration Modifier private BasicType boolean equalFilters FormalParameter ReferenceType ArrayList TypeArgument ReferenceType Filter filters1 FormalParameter ReferenceType ArrayList TypeArgument ReferenceType Filter filters2 ReturnStatement BinaryOperation || BinaryOperation == MemberReference filters1 MemberReference filters2 BinaryOperation && BinaryOperation != MemberReference filters1 Literal null MethodInvocation filters1 MemberReference filters2 equals MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation || BinaryOperation == MemberReference obj Literal null BinaryOperation != MethodInvocation obj getClass This MethodInvocation getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType BooleanFilter VariableDeclarator other Cast ReferenceType BooleanFilter MemberReference obj ReturnStatement BinaryOperation && BinaryOperation && MethodInvocation MemberReference notFilters MemberReference other notFilters equalFilters MethodInvocation MemberReference mustFilters MemberReference other mustFilters equalFilters MethodInvocation MemberReference shouldFilters MemberReference other shouldFilters equalFilters MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator hash Literal 7 StatementExpression Assignment MemberReference hash BinaryOperation + BinaryOperation * Literal 31 MemberReference hash TernaryExpression BinaryOperation == Literal null MemberReference mustFilters Literal 0 MethodInvocation mustFilters hashCode = StatementExpression Assignment MemberReference hash BinaryOperation + BinaryOperation * Literal 31 MemberReference hash TernaryExpression BinaryOperation == Literal null MemberReference notFilters Literal 0 MethodInvocation notFilters hashCode = StatementExpression Assignment MemberReference hash BinaryOperation + BinaryOperation * Literal 31 MemberReference hash TernaryExpression BinaryOperation == Literal null MemberReference shouldFilters Literal 0 MethodInvocation shouldFilters hashCode = ReturnStatement MemberReference hash MethodDeclaration /** Prints a user-readable version of this query. */ Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation buffer Literal ""BooleanFilter("" append StatementExpression MethodInvocation MemberReference shouldFilters Literal """" MemberReference buffer appendFilters StatementExpression MethodInvocation MemberReference mustFilters Literal ""+"" MemberReference buffer appendFilters StatementExpression MethodInvocation MemberReference notFilters Literal ""-"" MemberReference buffer appendFilters StatementExpression MethodInvocation buffer Literal "")"" append ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier private appendFilters FormalParameter ReferenceType ArrayList TypeArgument ReferenceType Filter filters FormalParameter ReferenceType String occurString FormalParameter ReferenceType StringBuilder buffer IfStatement BinaryOperation != MemberReference filters Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation filters size MemberReference ++ i BlockStatement StatementExpression MethodInvocation buffer Literal ' ' append StatementExpression MethodInvocation buffer MemberReference occurString append StatementExpression MethodInvocation buffer MethodInvocation filters MethodInvocation toString MemberReference i get append End End ReferenceType Filter",0
26,26,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util.Comparator ClassDeclaration Modifier public /**
 * Compares {@link org.apache.lucene.index.TermVectorEntry}s first by frequency and then by
 * the term (case-sensitive)
 *
 **/ TermVectorEntryFreqSortedComparator MethodDeclaration Modifier public BasicType int compare FormalParameter ReferenceType TermVectorEntry entry FormalParameter ReferenceType TermVectorEntry entry1 LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 StatementExpression Assignment MemberReference result BinaryOperation - MethodInvocation entry1 getFrequency MethodInvocation entry getFrequency = IfStatement BinaryOperation == MemberReference result Literal 0 BlockStatement StatementExpression Assignment MemberReference result MethodInvocation entry MethodInvocation MethodInvocation entry1 getTerm compareTo getTerm = IfStatement BinaryOperation == MemberReference result Literal 0 BlockStatement StatementExpression Assignment MemberReference result MethodInvocation entry MethodInvocation MethodInvocation entry1 getField compareTo getField = End End ReturnStatement MemberReference result ReferenceType Comparator TypeArgument ReferenceType TermVectorEntry",1
871,871,,1
541,541,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.document.Document Import org.apache.lucene.index.DocumentsWriter.IndexingChain Import org.apache.lucene.search.Similarity Import org.apache.lucene.search.Query Import org.apache.lucene.store.Directory Import org.apache.lucene.store.Lock Import org.apache.lucene.store.LockObtainFailedException Import org.apache.lucene.store.AlreadyClosedException Import org.apache.lucene.store.BufferedIndexInput Import org.apache.lucene.util.Constants Import org.apache.lucene.util.ThreadInterruptedException Import java.io.IOException Import java.io.Closeable Import java.io.PrintStream Import java.util.List Import java.util.Collection Import java.util.ArrayList Import java.util.HashMap Import java.util.Set Import java.util.HashSet Import java.util.LinkedList Import java.util.Iterator Import java.util.Map ClassDeclaration Modifier public /**
  An <code>IndexWriter</code> creates and maintains an index.

  <p>The <code>create</code> argument to the {@link
  #IndexWriter(Directory, Analyzer, boolean, MaxFieldLength) constructor} determines 
  whether a new index is created, or whether an existing index is
  opened.  Note that you can open an index with <code>create=true</code>
  even while readers are using the index.  The old readers will 
  continue to search the ""point in time"" snapshot they had opened, 
  and won't see the newly created index until they re-open.  There are
  also {@link #IndexWriter(Directory, Analyzer, MaxFieldLength) constructors}
  with no <code>create</code> argument which will create a new index
  if there is not already an index at the provided path and otherwise 
  open the existing index.</p>

  <p>In either case, documents are added with {@link #addDocument(Document)
  addDocument} and removed with {@link #deleteDocuments(Term)} or {@link
  #deleteDocuments(Query)}. A document can be updated with {@link
  #updateDocument(Term, Document) updateDocument} (which just deletes
  and then adds the entire document). When finished adding, deleting 
  and updating documents, {@link #close() close} should be called.</p>

  <a name=""flush""></a>
  <p>These changes are buffered in memory and periodically
  flushed to the {@link Directory} (during the above method
  calls).  A flush is triggered when there are enough
  buffered deletes (see {@link #setMaxBufferedDeleteTerms})
  or enough added documents since the last flush, whichever
  is sooner.  For the added documents, flushing is triggered
  either by RAM usage of the documents (see {@link
  #setRAMBufferSizeMB}) or the number of added documents.
  The default is to flush when RAM usage hits 16 MB.  For
  best indexing speed you should flush by RAM usage with a
  large RAM buffer.  Note that flushing just moves the
  internal buffered state in IndexWriter into the index, but
  these changes are not visible to IndexReader until either
  {@link #commit()} or {@link #close} is called.  A flush may
  also trigger one or more segment merges which by default
  run with a background thread so as not to block the
  addDocument calls (see <a href=""#mergePolicy"">below</a>
  for changing the {@link MergeScheduler}).</p>

  <p>If an index will not have more documents added for a while and optimal search
  performance is desired, then either the full {@link #optimize() optimize}
  method or partial {@link #optimize(int)} method should be
  called before the index is closed.</p>

  <p>Opening an <code>IndexWriter</code> creates a lock file for the directory in use. Trying to open
  another <code>IndexWriter</code> on the same directory will lead to a
  {@link LockObtainFailedException}. The {@link LockObtainFailedException}
  is also thrown if an IndexReader on the same directory is used to delete documents
  from the index.</p>
  
  <a name=""deletionPolicy""></a>
  <p>Expert: <code>IndexWriter</code> allows an optional
  {@link IndexDeletionPolicy} implementation to be
  specified.  You can use this to control when prior commits
  are deleted from the index.  The default policy is {@link
  KeepOnlyLastCommitDeletionPolicy} which removes all prior
  commits as soon as a new commit is done (this matches
  behavior before 2.2).  Creating your own policy can allow
  you to explicitly keep previous ""point in time"" commits
  alive in the index for some time, to allow readers to
  refresh to the new commit without having the old commit
  deleted out from under them.  This is necessary on
  filesystems like NFS that do not support ""delete on last
  close"" semantics, which Lucene's ""point in time"" search
  normally relies on. </p>

  <a name=""mergePolicy""></a> <p>Expert:
  <code>IndexWriter</code> allows you to separately change
  the {@link MergePolicy} and the {@link MergeScheduler}.
  The {@link MergePolicy} is invoked whenever there are
  changes to the segments in the index.  Its role is to
  select which merges to do, if any, and return a {@link
  MergePolicy.MergeSpecification} describing the merges.  It
  also selects merges to do for optimize().  (The default is
  {@link LogByteSizeMergePolicy}.  Then, the {@link
  MergeScheduler} is invoked with the requested merges and
  it decides when and how to run the merges.  The default is
  {@link ConcurrentMergeScheduler}. </p>

  <a name=""OOME""></a><p><b>NOTE</b>: if you hit an
  OutOfMemoryError then IndexWriter will quietly record this
  fact and block all future segment commits.  This is a
  defensive measure in case any internal state (buffered
  documents and deletions) were corrupted.  Any subsequent
  calls to {@link #commit()} will throw an
  IllegalStateException.  The only course of action is to
  call {@link #close()}, which internally will call {@link
  #rollback()}, to undo any changes to the index since the
  last commit.  You can also just call {@link #rollback()}
  directly.</p>

  <a name=""thread-safety""></a><p><b>NOTE</b>: {@link
  <code>IndexWriter</code>} instances are completely thread
  safe, meaning multiple threads can call any of its
  methods, concurrently.  If your application requires
  external synchronization, you should <b>not</b>
  synchronize on the <code>IndexWriter</code> instance as
  this may cause deadlock; use your own (non-Lucene) objects
  instead. </p>
  
  <p><b>NOTE</b>: If you call
  <code>Thread.interrupt()</code> on a thread that's within
  IndexWriter, IndexWriter will try to catch this (eg, if
  it's in a wait() or Thread.sleep()), and will then throw
  the unchecked exception {@link ThreadInterruptedException}
  and <b>clear</b> the interrupt status on the thread.</p>
*/ IndexWriter FieldDeclaration /**
   * Default value for the write lock timeout (1,000).
   * @see #setDefaultWriteLockTimeout
   */ Modifier public static BasicType long VariableDeclarator WRITE_LOCK_TIMEOUT Literal 1000 FieldDeclaration Modifier private BasicType long VariableDeclarator writeLockTimeout MemberReference WRITE_LOCK_TIMEOUT FieldDeclaration /**
   * Name of the write lock in the index.
   */ Modifier public final static ReferenceType String VariableDeclarator WRITE_LOCK_NAME Literal ""write.lock"" FieldDeclaration /**
   * Value to denote a flush trigger is disabled
   */ Modifier public final static BasicType int VariableDeclarator DISABLE_AUTO_FLUSH Literal - 1 FieldDeclaration /**
   * Disabled by default (because IndexWriter flushes by RAM usage
   * by default). Change using {@link #setMaxBufferedDocs(int)}.
   */ Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_BUFFERED_DOCS MemberReference DISABLE_AUTO_FLUSH FieldDeclaration /**
   * Default value is 16 MB (which means flush when buffered
   * docs consume 16 MB RAM).  Change using {@link #setRAMBufferSizeMB}.
   */ Modifier public final static BasicType double VariableDeclarator DEFAULT_RAM_BUFFER_SIZE_MB Literal 16.0 FieldDeclaration /**
   * Disabled by default (because IndexWriter flushes by RAM usage
   * by default). Change using {@link #setMaxBufferedDeleteTerms(int)}.
   */ Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_BUFFERED_DELETE_TERMS MemberReference DISABLE_AUTO_FLUSH FieldDeclaration /**
   * Default value is 10,000. Change using {@link #setMaxFieldLength(int)}.
   */ Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_FIELD_LENGTH Literal 10000 FieldDeclaration /**
   * Default value is 128. Change using {@link #setTermIndexInterval(int)}.
   */ Modifier public final static BasicType int VariableDeclarator DEFAULT_TERM_INDEX_INTERVAL Literal 128 FieldDeclaration /**
   * Absolute hard maximum length for a term.  If a term
   * arrives from the analyzer longer than this length, it
   * is skipped and a message is printed to infoStream, if
   * set (see {@link #setInfoStream}).
   */ Modifier public final static BasicType int VariableDeclarator MAX_TERM_LENGTH MemberReference DocumentsWriter MAX_TERM_LENGTH FieldDeclaration Modifier private final static BasicType int VariableDeclarator MERGE_READ_BUFFER_SIZE Literal 4096 FieldDeclaration Modifier private static ReferenceType Object VariableDeclarator MESSAGE_ID_LOCK ClassCreator ReferenceType Object FieldDeclaration Modifier private static BasicType int VariableDeclarator MESSAGE_ID Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator messageID Literal - 1 FieldDeclaration Modifier private volatile BasicType boolean VariableDeclarator hitOOM FieldDeclaration Modifier private ReferenceType Directory VariableDeclarator directory FieldDeclaration Modifier private ReferenceType Analyzer VariableDeclarator analyzer FieldDeclaration Modifier private ReferenceType Similarity VariableDeclarator similarity MethodInvocation Similarity getDefault FieldDeclaration Modifier private volatile BasicType long VariableDeclarator changeCount FieldDeclaration Modifier private BasicType long VariableDeclarator lastCommitChangeCount FieldDeclaration Modifier private ReferenceType SegmentInfos VariableDeclarator rollbackSegmentInfos FieldDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType SegmentInfo TypeArgument ReferenceType Integer VariableDeclarator rollbackSegments FieldDeclaration Modifier volatile ReferenceType SegmentInfos VariableDeclarator pendingCommit FieldDeclaration Modifier volatile BasicType long VariableDeclarator pendingCommitChangeCount FieldDeclaration Modifier private ReferenceType SegmentInfos VariableDeclarator localRollbackSegmentInfos FieldDeclaration Modifier private BasicType int VariableDeclarator localFlushedDocCount FieldDeclaration Modifier private ReferenceType SegmentInfos VariableDeclarator segmentInfos ClassCreator ReferenceType SegmentInfos FieldDeclaration Modifier private ReferenceType DocumentsWriter VariableDeclarator docWriter FieldDeclaration Modifier private ReferenceType IndexFileDeleter VariableDeclarator deleter FieldDeclaration Modifier private ReferenceType Set TypeArgument ReferenceType SegmentInfo VariableDeclarator segmentsToOptimize ClassCreator ReferenceType HashSet TypeArgument ReferenceType SegmentInfo FieldDeclaration Modifier private ReferenceType Lock VariableDeclarator writeLock FieldDeclaration Modifier private BasicType int VariableDeclarator termIndexInterval MemberReference DEFAULT_TERM_INDEX_INTERVAL FieldDeclaration Modifier private BasicType boolean VariableDeclarator closed FieldDeclaration Modifier private BasicType boolean VariableDeclarator closing FieldDeclaration Modifier private ReferenceType HashSet TypeArgument ReferenceType SegmentInfo VariableDeclarator mergingSegments ClassCreator ReferenceType HashSet TypeArgument ReferenceType SegmentInfo FieldDeclaration Modifier private ReferenceType MergePolicy VariableDeclarator mergePolicy ClassCreator ReferenceType LogByteSizeMergePolicy This FieldDeclaration Modifier private ReferenceType MergeScheduler VariableDeclarator mergeScheduler ClassCreator ReferenceType ConcurrentMergeScheduler FieldDeclaration Modifier private ReferenceType LinkedList TypeArgument ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator pendingMerges ClassCreator ReferenceType LinkedList TypeArgument ReferenceType MergePolicy ReferenceType OneMerge FieldDeclaration Modifier private ReferenceType Set TypeArgument ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator runningMerges ClassCreator ReferenceType HashSet TypeArgument ReferenceType MergePolicy ReferenceType OneMerge FieldDeclaration Modifier private ReferenceType List TypeArgument ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator mergeExceptions ClassCreator ReferenceType ArrayList TypeArgument ReferenceType MergePolicy ReferenceType OneMerge FieldDeclaration Modifier private BasicType long VariableDeclarator mergeGen FieldDeclaration Modifier private BasicType boolean VariableDeclarator stopMerges FieldDeclaration Modifier private BasicType int VariableDeclarator flushCount FieldDeclaration Modifier private BasicType int VariableDeclarator flushDeletesCount FieldDeclaration Modifier private BasicType int VariableDeclarator readCount FieldDeclaration Modifier private ReferenceType Thread VariableDeclarator writeThread FieldDeclaration Modifier final ReferenceType ReaderPool VariableDeclarator readerPool ClassCreator ReferenceType ReaderPool FieldDeclaration Modifier private BasicType int VariableDeclarator upgradeCount FieldDeclaration Modifier private volatile BasicType boolean VariableDeclarator poolReaders MethodDeclaration /**
   * Expert: returns a readonly reader, covering all
   * committed as well as un-committed changes to the index.
   * This provides ""near real-time"" searching, in that
   * changes made during an IndexWriter session can be
   * quickly made available for searching without closing
   * the writer nor calling {@link #commit}.
   *
   * <p>Note that this is functionally equivalent to calling
   * {#commit} and then using {@link IndexReader#open} to
   * open a new reader.  But the turarnound time of this
   * method should be faster since it avoids the potentially
   * costly {@link #commit}.<p>
   *
   * <p>It's <i>near</i> real-time because there is no hard
   * guarantee on how quickly you can get a new reader after
   * making changes with IndexWriter.  You'll have to
   * experiment in your situation to determine if it's
   * fast enough.  As this is a new and experimental
   * feature, please report back on your findings so we can
   * learn, improve and iterate.</p>
   *
   * <p>The resulting reader supports {@link
   * IndexReader#reopen}, but that call will simply forward
   * back to this method (though this may change in the
   * future).</p>
   *
   * <p>The very first time this method is called, this
   * writer instance will make every effort to pool the
   * readers that it opens for doing merges, applying
   * deletes, etc.  This means additional resources (RAM,
   * file descriptors, CPU time) will be consumed.</p>
   *
   * <p>For lower latency on reopening a reader, you should
   * call {@link #setMergedSegmentWarmer} to
   * pre-warm a newly merged segment before it's committed
   * to the index.  This is important for minimizing
   * index-to-search delay after a large merge.  </p>
   *
   * <p>If an addIndexes* call is running in another thread,
   * then this reader will only search those segments from
   * the foreign index that have been successfully copied
   * over, so far</p>.
   *
   * <p><b>NOTE</b>: Once the writer is closed, any
   * outstanding readers may continue to be used.  However,
   * if you attempt to reopen any of those readers, you'll
   * hit an {@link AlreadyClosedException}.</p>
   *
   * <p><b>NOTE:</b> This API is experimental and might
   * change in incompatible ways in the next release.</p>
   *
   * @return IndexReader that covers entire index plus all
   * changes made so far by this IndexWriter instance
   *
   * @throws IOException
   */ Modifier public ReferenceType IndexReader getReader IOException ReturnStatement MethodInvocation MemberReference IndexReader DEFAULT_TERMS_INDEX_DIVISOR getReader MethodDeclaration /** Expert: like {@link #getReader}, except you can
   *  specify which termInfosIndexDivisor should be used for
   *  any newly opened readers.
   * @param termInfosIndexDivisor Subsamples which indexed
   *  terms are loaded into RAM. This has the same effect as {@link
   *  IndexWriter#setTermIndexInterval} except that setting
   *  must be done at indexing time while this setting can be
   *  set per reader.  When set to N, then one in every
   *  N*termIndexInterval terms in the index is loaded into
   *  memory.  By setting this to a value > 1 you can reduce
   *  memory usage, at the expense of higher latency when
   *  loading a TermInfo.  The default value is 1.  Set this
   *  to -1 to skip loading the terms index entirely. */ Modifier public ReferenceType IndexReader getReader FormalParameter BasicType int termInfosIndexDivisor IOException IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation Literal ""flush at getReader"" message End StatementExpression Assignment MemberReference poolReaders Literal true = StatementExpression MethodInvocation Literal true Literal true Literal true flush SynchronizedStatement This ReturnStatement ClassCreator ReferenceType ReadOnlyDirectoryReader This MemberReference segmentInfos MemberReference termInfosIndexDivisor ClassDeclaration /** Holds shared SegmentReader instances. IndexWriter uses
   *  SegmentReaders for 1) applying deletes, 2) doing
   *  merges, 3) handing out a real-time reader.  This pool
   *  reuses instances of the SegmentReaders in all these
   *  places if it is in ""near real-time mode"" (getReader()
   *  has been called on this instance). */ ReaderPool FieldDeclaration Modifier private final ReferenceType Map TypeArgument ReferenceType SegmentInfo TypeArgument ReferenceType SegmentReader VariableDeclarator readerMap ClassCreator ReferenceType HashMap TypeArgument ReferenceType SegmentInfo TypeArgument ReferenceType SegmentReader MethodDeclaration /** Forcefully clear changes for the specified segments,
     *  and remove from the pool.   This is called on successful merge. */ Modifier synchronized clear FormalParameter ReferenceType SegmentInfos infos IOException IfStatement BinaryOperation == MemberReference infos Literal null BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType SegmentInfo TypeArgument ReferenceType SegmentReader VariableDeclarator ent MethodInvocation readerMap entrySet BlockStatement StatementExpression Assignment MethodInvocation ent MemberReference hasChanges getValue Literal false = End BlockStatement ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MemberReference infos BlockStatement IfStatement MethodInvocation readerMap MemberReference info containsKey BlockStatement StatementExpression Assignment MethodInvocation readerMap MemberReference hasChanges MemberReference info get Literal false = End End End MethodDeclaration Modifier public synchronized BasicType boolean infoIsLive FormalParameter ReferenceType SegmentInfo info LocalVariableDeclaration BasicType int VariableDeclarator idx MethodInvocation segmentInfos MemberReference info indexOf AssertStatement BinaryOperation != MemberReference idx Literal - 1 AssertStatement BinaryOperation == MethodInvocation segmentInfos MemberReference idx get MemberReference info ReturnStatement Literal true MethodDeclaration Modifier public synchronized ReferenceType SegmentInfo mapToLive FormalParameter ReferenceType SegmentInfo info LocalVariableDeclaration BasicType int VariableDeclarator idx MethodInvocation segmentInfos MemberReference info indexOf IfStatement BinaryOperation != MemberReference idx Literal - 1 BlockStatement StatementExpression Assignment MemberReference info MethodInvocation segmentInfos MemberReference idx get = End ReturnStatement MemberReference info MethodDeclaration /**
     * Release the segment reader (i.e. decRef it and close if there
     * are no more references.
     * @param sr
     * @throws IOException
     */ Modifier public synchronized release FormalParameter ReferenceType SegmentReader sr IOException StatementExpression MethodInvocation MemberReference sr Literal false release MethodDeclaration /**
     * Release the segment reader (i.e. decRef it and close if there
     * are no more references.
     * @param sr
     * @throws IOException
     */ Modifier public synchronized release FormalParameter ReferenceType SegmentReader sr FormalParameter BasicType boolean drop IOException LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator pooled MethodInvocation readerMap MethodInvocation sr getSegmentInfo containsKey AssertStatement BinaryOperation | MemberReference ! pooled BinaryOperation == MethodInvocation readerMap MethodInvocation sr getSegmentInfo get MemberReference sr StatementExpression MethodInvocation sr decRef IfStatement BinaryOperation && MemberReference pooled BinaryOperation || MemberReference drop BinaryOperation && MemberReference ! poolReaders BinaryOperation == MethodInvocation sr getRefCount Literal 1 BlockStatement StatementExpression MethodInvocation readerMap MethodInvocation sr getSegmentInfo remove AssertStatement BinaryOperation || MemberReference ! sr hasChanges MethodInvocation Thread This IndexWriter holdsLock LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation sr close StatementExpression Assignment MemberReference success Literal true = IfStatement BinaryOperation && MemberReference ! success MemberReference sr hasChanges BlockStatement StatementExpression Assignment MemberReference sr hasChanges Literal false = TryStatement StatementExpression MethodInvocation sr close CatchClause CatchClauseParameter Throwable ignore End End MethodDeclaration /** Remove all our references to readers, and commits
     *  any pending changes. */ Modifier synchronized close IOException LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Map ReferenceType Entry TypeArgument ReferenceType SegmentInfo TypeArgument ReferenceType SegmentReader VariableDeclarator iter MethodInvocation readerMap MethodInvocation iterator entrySet WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType SegmentInfo TypeArgument ReferenceType SegmentReader VariableDeclarator ent MethodInvocation iter next LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator sr MethodInvocation ent getValue IfStatement MemberReference sr hasChanges BlockStatement AssertStatement MethodInvocation MethodInvocation sr getSegmentInfo infoIsLive StatementExpression MethodInvocation sr startCommit LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation sr Literal null doCommit StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation sr rollbackCommit End End StatementExpression MethodInvocation iter remove StatementExpression MethodInvocation sr decRef End MethodDeclaration /**
     * Commit all segment reader in the pool.
     * @throws IOException
     */ Modifier synchronized commit IOException ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType SegmentInfo TypeArgument ReferenceType SegmentReader VariableDeclarator ent MethodInvocation readerMap entrySet BlockStatement LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator sr MethodInvocation ent getValue IfStatement MemberReference sr hasChanges BlockStatement AssertStatement MethodInvocation MethodInvocation sr getSegmentInfo infoIsLive StatementExpression MethodInvocation sr startCommit LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation sr Literal null doCommit StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation sr rollbackCommit End End End MethodDeclaration /**
     * Returns a ref to a clone.  NOTE: this clone is not
     * enrolled in the pool, so you should simply close()
     * it when you're done (ie, do not call release()).
     */ Modifier public synchronized ReferenceType SegmentReader getReadOnlyClone FormalParameter ReferenceType SegmentInfo info FormalParameter BasicType boolean doOpenStores FormalParameter BasicType int termInfosIndexDivisor IOException LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator sr MethodInvocation MemberReference info MemberReference doOpenStores MemberReference BufferedIndexInput BUFFER_SIZE MemberReference termInfosIndexDivisor get TryStatement ReturnStatement Cast ReferenceType SegmentReader MethodInvocation sr Literal true clone StatementExpression MethodInvocation sr decRef MethodDeclaration /**
     * Obtain a SegmentReader from the readerPool.  The reader
     * must be returned by calling {@link #release(SegmentReader)}
     * @see #release(SegmentReader)
     * @param info
     * @param doOpenStores
     * @throws IOException
     */ Modifier public synchronized ReferenceType SegmentReader get FormalParameter ReferenceType SegmentInfo info FormalParameter BasicType boolean doOpenStores IOException ReturnStatement MethodInvocation MemberReference info MemberReference doOpenStores MemberReference BufferedIndexInput BUFFER_SIZE MemberReference IndexReader DEFAULT_TERMS_INDEX_DIVISOR get MethodDeclaration /**
     * Obtain a SegmentReader from the readerPool.  The reader
     * must be returned by calling {@link #release(SegmentReader)}
     * 
     * @see #release(SegmentReader)
     * @param info
     * @param doOpenStores
     * @param readBufferSize
     * @param termsIndexDivisor
     * @throws IOException
     */ Modifier public synchronized ReferenceType SegmentReader get FormalParameter ReferenceType SegmentInfo info FormalParameter BasicType boolean doOpenStores FormalParameter BasicType int readBufferSize FormalParameter BasicType int termsIndexDivisor IOException IfStatement MemberReference poolReaders BlockStatement StatementExpression Assignment MemberReference readBufferSize MemberReference BufferedIndexInput BUFFER_SIZE = End LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator sr MethodInvocation readerMap MemberReference info get IfStatement BinaryOperation == MemberReference sr Literal null BlockStatement StatementExpression Assignment MemberReference sr MethodInvocation SegmentReader Literal false MemberReference info dir MemberReference info MemberReference readBufferSize MemberReference doOpenStores MemberReference termsIndexDivisor get = StatementExpression MethodInvocation readerMap MemberReference info MemberReference sr put BlockStatement IfStatement MemberReference doOpenStores BlockStatement StatementExpression MethodInvocation sr openDocStores End IfStatement BinaryOperation && BinaryOperation != MemberReference termsIndexDivisor Literal - 1 MethodInvocation ! sr termsIndexLoaded BlockStatement StatementExpression MethodInvocation sr MemberReference termsIndexDivisor loadTermsIndex End End StatementExpression MethodInvocation sr incRef ReturnStatement MemberReference sr MethodDeclaration Modifier public synchronized ReferenceType SegmentReader getIfExists FormalParameter ReferenceType SegmentInfo info IOException LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator sr MethodInvocation readerMap MemberReference info get IfStatement BinaryOperation != MemberReference sr Literal null BlockStatement StatementExpression MethodInvocation sr incRef End ReturnStatement MemberReference sr MethodDeclaration /**
   * Obtain the number of deleted docs for a pooled reader.
   * If the reader isn't being pooled, the segmentInfo's 
   * delCount is returned.
   */ Modifier public BasicType int numDeletedDocs FormalParameter ReferenceType SegmentInfo info IOException LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator reader MethodInvocation readerPool MemberReference info getIfExists TryStatement IfStatement BinaryOperation != MemberReference reader Literal null BlockStatement ReturnStatement MethodInvocation reader numDeletedDocs BlockStatement ReturnStatement MethodInvocation info getDelCount End IfStatement BinaryOperation != MemberReference reader Literal null BlockStatement StatementExpression MethodInvocation readerPool MemberReference reader release End MethodDeclaration Modifier synchronized acquireWrite AssertStatement BinaryOperation != MemberReference writeThread MethodInvocation Thread currentThread WhileStatement BinaryOperation || BinaryOperation != MemberReference writeThread Literal null BinaryOperation > MemberReference readCount Literal 0 StatementExpression MethodInvocation doWait End StatementExpression MethodInvocation ensureOpen StatementExpression Assignment MemberReference writeThread MethodInvocation Thread currentThread = MethodDeclaration Modifier synchronized releaseWrite AssertStatement BinaryOperation == MethodInvocation Thread currentThread MemberReference writeThread StatementExpression Assignment MemberReference writeThread Literal null = StatementExpression MethodInvocation notifyAll MethodDeclaration Modifier synchronized acquireRead LocalVariableDeclaration Modifier final ReferenceType Thread VariableDeclarator current MethodInvocation Thread currentThread WhileStatement BinaryOperation && BinaryOperation != MemberReference writeThread Literal null BinaryOperation != MemberReference writeThread MemberReference current StatementExpression MethodInvocation doWait End StatementExpression MemberReference ++ readCount MethodDeclaration Modifier synchronized upgradeReadToWrite AssertStatement BinaryOperation > MemberReference readCount Literal 0 StatementExpression MemberReference ++ upgradeCount WhileStatement BinaryOperation || BinaryOperation > MemberReference readCount MemberReference upgradeCount BinaryOperation != MemberReference writeThread Literal null BlockStatement StatementExpression MethodInvocation doWait End StatementExpression Assignment MemberReference writeThread MethodInvocation Thread currentThread = StatementExpression MemberReference -- readCount StatementExpression MemberReference -- upgradeCount MethodDeclaration Modifier synchronized releaseRead StatementExpression MemberReference -- readCount AssertStatement BinaryOperation >= MemberReference readCount Literal 0 StatementExpression MethodInvocation notifyAll MethodDeclaration Modifier final synchronized BasicType boolean isOpen FormalParameter BasicType boolean includePendingClose ReturnStatement BinaryOperation || MemberReference closed BinaryOperation && MemberReference includePendingClose MemberReference closing MethodDeclaration /**
   * Used internally to throw an {@link
   * AlreadyClosedException} if this IndexWriter has been
   * closed.
   * @throws AlreadyClosedException if this IndexWriter is
   */ Modifier final protected synchronized ensureOpen FormalParameter BasicType boolean includePendingClose AlreadyClosedException IfStatement MethodInvocation ! MemberReference includePendingClose isOpen BlockStatement ThrowStatement ClassCreator ReferenceType AlreadyClosedException Literal ""this IndexWriter is closed"" End MethodDeclaration Modifier final protected synchronized ensureOpen AlreadyClosedException StatementExpression MethodInvocation Literal true ensureOpen MethodDeclaration /**
   * Prints a message to the infoStream (if non-null),
   * prefixed with the identifying information for this
   * writer and the thread that's calling it.
   */ Modifier public message FormalParameter ReferenceType String message IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation infoStream BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""IW "" MemberReference messageID Literal "" ["" MethodInvocation Thread MethodInvocation getName currentThread Literal ""]: "" MemberReference message println End MethodDeclaration Modifier private synchronized setMessageID FormalParameter ReferenceType PrintStream infoStream IfStatement BinaryOperation && BinaryOperation != MemberReference infoStream Literal null BinaryOperation == MemberReference messageID Literal - 1 BlockStatement SynchronizedStatement MemberReference MESSAGE_ID_LOCK StatementExpression Assignment MemberReference messageID MemberReference ++ MESSAGE_ID = End StatementExpression Assignment This MemberReference infoStream MemberReference infoStream = MethodDeclaration /**
   * Casts current mergePolicy to LogMergePolicy, and throws
   * an exception if the mergePolicy is not a LogMergePolicy.
   */ Modifier private ReferenceType LogMergePolicy getLogMergePolicy IfStatement BinaryOperation instanceof MemberReference mergePolicy ReferenceType LogMergePolicy ReturnStatement Cast ReferenceType LogMergePolicy MemberReference mergePolicy ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""this method can only be called when the merge policy is the default LogMergePolicy"" End MethodDeclaration /** <p>Get the current setting of whether newly flushed
   *  segments will use the compound file format.  Note that
   *  this just returns the value previously set with
   *  setUseCompoundFile(boolean), or the default value
   *  (true).  You cannot use this to query the status of
   *  previously flushed segments.</p>
   *
   *  <p>Note that this method is a convenience method: it
   *  just calls mergePolicy.getUseCompoundFile as long as
   *  mergePolicy is an instance of {@link LogMergePolicy}.
   *  Otherwise an IllegalArgumentException is thrown.</p>
   *
   *  @see #setUseCompoundFile(boolean)
   */ Modifier public BasicType boolean getUseCompoundFile ReturnStatement MethodInvocation MethodInvocation getUseCompoundFile getLogMergePolicy MethodDeclaration /** <p>Setting to turn on usage of a compound file. When on,
   *  multiple files for each segment are merged into a
   *  single file when a new segment is flushed.</p>
   *
   *  <p>Note that this method is a convenience method: it
   *  just calls mergePolicy.setUseCompoundFile as long as
   *  mergePolicy is an instance of {@link LogMergePolicy}.
   *  Otherwise an IllegalArgumentException is thrown.</p>
   */ Modifier public setUseCompoundFile FormalParameter BasicType boolean value StatementExpression MethodInvocation MethodInvocation MemberReference value setUseCompoundFile getLogMergePolicy StatementExpression MethodInvocation MethodInvocation MemberReference value setUseCompoundDocStore getLogMergePolicy MethodDeclaration /** Expert: Set the Similarity implementation used by this IndexWriter.
   *
   * @see Similarity#setDefault(Similarity)
   */ Modifier public setSimilarity FormalParameter ReferenceType Similarity similarity StatementExpression MethodInvocation ensureOpen StatementExpression Assignment This MemberReference similarity MemberReference similarity = StatementExpression MethodInvocation docWriter MemberReference similarity setSimilarity MethodDeclaration /** Expert: Return the Similarity implementation used by this IndexWriter.
   *
   * <p>This defaults to the current value of {@link Similarity#getDefault()}.
   */ Modifier public ReferenceType Similarity getSimilarity StatementExpression MethodInvocation ensureOpen ReturnStatement This MemberReference similarity MethodDeclaration /** Expert: Set the interval between indexed terms.  Large values cause less
   * memory to be used by IndexReader, but slow random-access to terms.  Small
   * values cause more memory to be used by an IndexReader, and speed
   * random-access to terms.
   *
   * This parameter determines the amount of computation required per query
   * term, regardless of the number of documents that contain that term.  In
   * particular, it is the maximum number of other terms that must be
   * scanned before a term is located and its frequency and position information
   * may be processed.  In a large index with user-entered query terms, query
   * processing time is likely to be dominated not by term lookup but rather
   * by the processing of frequency and positional data.  In a small index
   * or when many uncommon query terms are generated (e.g., by wildcard
   * queries) term lookup may become a dominant cost.
   *
   * In particular, <code>numUniqueTerms/interval</code> terms are read into
   * memory by an IndexReader, and, on average, <code>interval/2</code> terms
   * must be scanned for each random term access.
   *
   * @see #DEFAULT_TERM_INDEX_INTERVAL
   */ Modifier public setTermIndexInterval FormalParameter BasicType int interval StatementExpression MethodInvocation ensureOpen StatementExpression Assignment This MemberReference termIndexInterval MemberReference interval = MethodDeclaration /** Expert: Return the interval between indexed terms.
   *
   * @see #setTermIndexInterval(int)
   */ Modifier public BasicType int getTermIndexInterval StatementExpression MethodInvocation Literal false ensureOpen ReturnStatement MemberReference termIndexInterval ConstructorDeclaration Modifier public /**
   * Constructs an IndexWriter for the index in <code>d</code>.
   * Text will be analyzed with <code>a</code>.  If <code>create</code>
   * is true, then a new, empty index will be created in
   * <code>d</code>, replacing the index already there, if any.
   *
   * @param d the index directory
   * @param a the analyzer to use
   * @param create <code>true</code> to create the index or overwrite
   *  the existing one; <code>false</code> to append to the existing
   *  index
   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified
   *   via the MaxFieldLength constructor.
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if the directory cannot be read/written to, or
   *  if it does not exist and <code>create</code> is
   *  <code>false</code> or if there is any other low-level
   *  IO error
   */ IndexWriter FormalParameter ReferenceType Directory d FormalParameter ReferenceType Analyzer a FormalParameter BasicType boolean create FormalParameter ReferenceType MaxFieldLength mfl CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation MemberReference d MemberReference a MemberReference create Literal null MethodInvocation mfl getLimit Literal null Literal null init ConstructorDeclaration Modifier public /**
   * Constructs an IndexWriter for the index in
   * <code>d</code>, first creating it if it does not
   * already exist.  Text will be analyzed with
   * <code>a</code>.
   *
   * @param d the index directory
   * @param a the analyzer to use
   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified
   *   via the MaxFieldLength constructor.
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if the directory cannot be
   *  read/written to or if there is any other low-level
   *  IO error
   */ IndexWriter FormalParameter ReferenceType Directory d FormalParameter ReferenceType Analyzer a FormalParameter ReferenceType MaxFieldLength mfl CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation MemberReference d MemberReference a Literal null MethodInvocation mfl getLimit Literal null Literal null init ConstructorDeclaration Modifier public /**
   * Expert: constructs an IndexWriter with a custom {@link
   * IndexDeletionPolicy}, for the index in <code>d</code>,
   * first creating it if it does not already exist.  Text
   * will be analyzed with <code>a</code>.
   *
   * @param d the index directory
   * @param a the analyzer to use
   * @param deletionPolicy see <a href=""#deletionPolicy"">above</a>
   * @param mfl whether or not to limit field lengths
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if the directory cannot be
   *  read/written to or if there is any other low-level
   *  IO error
   */ IndexWriter FormalParameter ReferenceType Directory d FormalParameter ReferenceType Analyzer a FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter ReferenceType MaxFieldLength mfl CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation MemberReference d MemberReference a MemberReference deletionPolicy MethodInvocation mfl getLimit Literal null Literal null init ConstructorDeclaration Modifier public /**
   * Expert: constructs an IndexWriter with a custom {@link
   * IndexDeletionPolicy}, for the index in <code>d</code>.
   * Text will be analyzed with <code>a</code>.  If
   * <code>create</code> is true, then a new, empty index
   * will be created in <code>d</code>, replacing the index
   * already there, if any.
   *
   * @param d the index directory
   * @param a the analyzer to use
   * @param create <code>true</code> to create the index or overwrite
   *  the existing one; <code>false</code> to append to the existing
   *  index
   * @param deletionPolicy see <a href=""#deletionPolicy"">above</a>
   * @param mfl {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}, whether or not to limit field lengths.  Value is in number of terms/tokens
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if the directory cannot be read/written to, or
   *  if it does not exist and <code>create</code> is
   *  <code>false</code> or if there is any other low-level
   *  IO error
   */ IndexWriter FormalParameter ReferenceType Directory d FormalParameter ReferenceType Analyzer a FormalParameter BasicType boolean create FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter ReferenceType MaxFieldLength mfl CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation MemberReference d MemberReference a MemberReference create MemberReference deletionPolicy MethodInvocation mfl getLimit Literal null Literal null init ConstructorDeclaration /**
   * Expert: constructs an IndexWriter with a custom {@link
   * IndexDeletionPolicy} and {@link IndexingChain}, 
   * for the index in <code>d</code>.
   * Text will be analyzed with <code>a</code>.  If
   * <code>create</code> is true, then a new, empty index
   * will be created in <code>d</code>, replacing the index
   * already there, if any.
   *
   * @param d the index directory
   * @param a the analyzer to use
   * @param create <code>true</code> to create the index or overwrite
   *  the existing one; <code>false</code> to append to the existing
   *  index
   * @param deletionPolicy see <a href=""#deletionPolicy"">above</a>
   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.
   * @param indexingChain the {@link DocConsumer} chain to be used to 
   *  process documents
   * @param commit which commit to open
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if the directory cannot be read/written to, or
   *  if it does not exist and <code>create</code> is
   *  <code>false</code> or if there is any other low-level
   *  IO error
   */ IndexWriter FormalParameter ReferenceType Directory d FormalParameter ReferenceType Analyzer a FormalParameter BasicType boolean create FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter ReferenceType MaxFieldLength mfl FormalParameter ReferenceType IndexingChain indexingChain FormalParameter ReferenceType IndexCommit commit CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation MemberReference d MemberReference a MemberReference create MemberReference deletionPolicy MethodInvocation mfl getLimit MemberReference indexingChain MemberReference commit init ConstructorDeclaration Modifier public /**
   * Expert: constructs an IndexWriter on specific commit
   * point, with a custom {@link IndexDeletionPolicy}, for
   * the index in <code>d</code>.  Text will be analyzed
   * with <code>a</code>.
   *
   * <p> This is only meaningful if you've used a {@link
   * IndexDeletionPolicy} in that past that keeps more than
   * just the last commit.
   * 
   * <p>This operation is similar to {@link #rollback()},
   * except that method can only rollback what's been done
   * with the current instance of IndexWriter since its last
   * commit, whereas this method can rollback to an
   * arbitrary commit point from the past, assuming the
   * {@link IndexDeletionPolicy} has preserved past
   * commits.
   *
   * @param d the index directory
   * @param a the analyzer to use
   * @param deletionPolicy see <a href=""#deletionPolicy"">above</a>
   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.
   * @param commit which commit to open
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if the directory cannot be read/written to, or
   *  if it does not exist and <code>create</code> is
   *  <code>false</code> or if there is any other low-level
   *  IO error
   */ IndexWriter FormalParameter ReferenceType Directory d FormalParameter ReferenceType Analyzer a FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter ReferenceType MaxFieldLength mfl FormalParameter ReferenceType IndexCommit commit CorruptIndexException LockObtainFailedException IOException StatementExpression MethodInvocation MemberReference d MemberReference a Literal false MemberReference deletionPolicy MethodInvocation mfl getLimit Literal null MemberReference commit init MethodDeclaration Modifier private init FormalParameter ReferenceType Directory d FormalParameter ReferenceType Analyzer a FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter BasicType int maxFieldLength FormalParameter ReferenceType IndexingChain indexingChain FormalParameter ReferenceType IndexCommit commit CorruptIndexException LockObtainFailedException IOException IfStatement MethodInvocation IndexReader MemberReference d indexExists BlockStatement StatementExpression MethodInvocation MemberReference d MemberReference a Literal false MemberReference deletionPolicy MemberReference maxFieldLength MemberReference indexingChain MemberReference commit init BlockStatement StatementExpression MethodInvocation MemberReference d MemberReference a Literal true MemberReference deletionPolicy MemberReference maxFieldLength MemberReference indexingChain MemberReference commit init End MethodDeclaration Modifier private init FormalParameter ReferenceType Directory d FormalParameter ReferenceType Analyzer a FormalParameter Modifier final BasicType boolean create FormalParameter ReferenceType IndexDeletionPolicy deletionPolicy FormalParameter BasicType int maxFieldLength FormalParameter ReferenceType IndexingChain indexingChain FormalParameter ReferenceType IndexCommit commit CorruptIndexException LockObtainFailedException IOException StatementExpression Assignment MemberReference directory MemberReference d = StatementExpression Assignment MemberReference analyzer MemberReference a = StatementExpression MethodInvocation MemberReference defaultInfoStream setMessageID StatementExpression Assignment This MemberReference maxFieldLength MemberReference maxFieldLength = IfStatement BinaryOperation == MemberReference indexingChain Literal null StatementExpression Assignment MemberReference indexingChain MemberReference DocumentsWriter DefaultIndexingChain = End IfStatement MemberReference create BlockStatement StatementExpression MethodInvocation directory MemberReference WRITE_LOCK_NAME clearLock End LocalVariableDeclaration ReferenceType Lock VariableDeclarator writeLock MethodInvocation directory MemberReference WRITE_LOCK_NAME makeLock IfStatement MethodInvocation ! writeLock MemberReference writeLockTimeout obtain ThrowStatement ClassCreator ReferenceType LockObtainFailedException BinaryOperation + Literal ""Index locked for write: "" MemberReference writeLock End StatementExpression Assignment This MemberReference writeLock MemberReference writeLock = TryStatement IfStatement MemberReference create BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator doCommit TryStatement StatementExpression MethodInvocation segmentInfos MemberReference directory read StatementExpression MethodInvocation segmentInfos clear StatementExpression Assignment MemberReference doCommit Literal false = CatchClause CatchClauseParameter IOException e StatementExpression Assignment MemberReference doCommit Literal true = IfStatement MemberReference doCommit BlockStatement StatementExpression MethodInvocation segmentInfos MemberReference directory commit StatementExpression MethodInvocation synced MethodInvocation segmentInfos MemberReference directory Literal true files addAll BlockStatement StatementExpression MemberReference ++ changeCount End BlockStatement StatementExpression MethodInvocation segmentInfos MemberReference directory read IfStatement BinaryOperation != MemberReference commit Literal null BlockStatement IfStatement BinaryOperation != MethodInvocation commit getDirectory MemberReference directory ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""IndexCommit's directory doesn't match my directory"" End LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator oldInfos ClassCreator ReferenceType SegmentInfos StatementExpression MethodInvocation oldInfos MemberReference directory MethodInvocation commit getSegmentsFileName read StatementExpression MethodInvocation segmentInfos MemberReference oldInfos replace StatementExpression MemberReference ++ changeCount IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""init: loaded commit \"""" MethodInvocation commit getSegmentsFileName Literal ""\"""" message End End StatementExpression MethodInvocation synced MethodInvocation segmentInfos MemberReference directory Literal true files addAll End StatementExpression MethodInvocation MemberReference segmentInfos setRollbackSegmentInfos StatementExpression Assignment MemberReference docWriter ClassCreator ReferenceType DocumentsWriter MemberReference directory This MemberReference indexingChain = StatementExpression MethodInvocation docWriter MemberReference infoStream setInfoStream StatementExpression MethodInvocation docWriter MemberReference maxFieldLength setMaxFieldLength StatementExpression Assignment MemberReference deleter ClassCreator ReferenceType IndexFileDeleter MemberReference directory TernaryExpression BinaryOperation == MemberReference deletionPolicy Literal null ClassCreator ReferenceType KeepOnlyLastCommitDeletionPolicy MemberReference deletionPolicy MemberReference segmentInfos MemberReference infoStream MemberReference docWriter = IfStatement MemberReference deleter startingCommitDeleted StatementExpression MemberReference ++ changeCount End StatementExpression MethodInvocation pushMaxBufferedDocs IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""init: create="" MemberReference create message StatementExpression MethodInvocation messageState End CatchClause CatchClauseParameter IOException e StatementExpression This MemberReference writeLock MethodInvocation release StatementExpression Assignment This MemberReference writeLock Literal null = ThrowStatement MemberReference e MethodDeclaration Modifier private synchronized setRollbackSegmentInfos FormalParameter ReferenceType SegmentInfos infos StatementExpression Assignment MemberReference rollbackSegmentInfos Cast ReferenceType SegmentInfos MethodInvocation infos clone = AssertStatement MethodInvocation ! rollbackSegmentInfos MemberReference directory hasExternalSegments StatementExpression Assignment MemberReference rollbackSegments ClassCreator ReferenceType HashMap TypeArgument ReferenceType SegmentInfo TypeArgument ReferenceType Integer = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation rollbackSegmentInfos size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i StatementExpression MethodInvocation rollbackSegments MethodInvocation rollbackSegmentInfos MemberReference i info MethodInvocation Integer MemberReference i valueOf put End MethodDeclaration /**
   * Expert: set the merge policy used by this writer.
   */ Modifier public setMergePolicy FormalParameter ReferenceType MergePolicy mp StatementExpression MethodInvocation ensureOpen IfStatement BinaryOperation == MemberReference mp Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""MergePolicy must be non-null"" End IfStatement BinaryOperation != MemberReference mergePolicy MemberReference mp StatementExpression MethodInvocation mergePolicy close End StatementExpression Assignment MemberReference mergePolicy MemberReference mp = StatementExpression MethodInvocation pushMaxBufferedDocs IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""setMergePolicy "" MemberReference mp message End MethodDeclaration /**
   * Expert: returns the current MergePolicy in use by this writer.
   * @see #setMergePolicy
   */ Modifier public ReferenceType MergePolicy getMergePolicy StatementExpression MethodInvocation ensureOpen ReturnStatement MemberReference mergePolicy MethodDeclaration /**
   * Expert: set the merge scheduler used by this writer.
   */ Modifier public synchronized setMergeScheduler FormalParameter ReferenceType MergeScheduler mergeScheduler CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen IfStatement BinaryOperation == MemberReference mergeScheduler Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""MergeScheduler must be non-null"" End IfStatement BinaryOperation != This MemberReference mergeScheduler MemberReference mergeScheduler BlockStatement StatementExpression MethodInvocation Literal true finishMerges StatementExpression This MemberReference mergeScheduler MethodInvocation close End StatementExpression Assignment This MemberReference mergeScheduler MemberReference mergeScheduler = IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""setMergeScheduler "" MemberReference mergeScheduler message End MethodDeclaration /**
   * Expert: returns the current MergePolicy in use by this
   * writer.
   * @see #setMergePolicy
   */ Modifier public ReferenceType MergeScheduler getMergeScheduler StatementExpression MethodInvocation ensureOpen ReturnStatement MemberReference mergeScheduler MethodDeclaration /** <p>Determines the largest segment (measured by
   * document count) that may be merged with other segments.
   * Small values (e.g., less than 10,000) are best for
   * interactive indexing, as this limits the length of
   * pauses while indexing to a few seconds.  Larger values
   * are best for batched indexing and speedier
   * searches.</p>
   *
   * <p>The default value is {@link Integer#MAX_VALUE}.</p>
   *
   * <p>Note that this method is a convenience method: it
   * just calls mergePolicy.setMaxMergeDocs as long as
   * mergePolicy is an instance of {@link LogMergePolicy}.
   * Otherwise an IllegalArgumentException is thrown.</p>
   *
   * <p>The default merge policy ({@link
   * LogByteSizeMergePolicy}) also allows you to set this
   * limit by net size (in MB) of the segment, using {@link
   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>
   */ Modifier public setMaxMergeDocs FormalParameter BasicType int maxMergeDocs StatementExpression MethodInvocation MethodInvocation MemberReference maxMergeDocs setMaxMergeDocs getLogMergePolicy MethodDeclaration /**
   * <p>Returns the largest segment (measured by document
   * count) that may be merged with other segments.</p>
   *
   * <p>Note that this method is a convenience method: it
   * just calls mergePolicy.getMaxMergeDocs as long as
   * mergePolicy is an instance of {@link LogMergePolicy}.
   * Otherwise an IllegalArgumentException is thrown.</p>
   *
   * @see #setMaxMergeDocs
   */ Modifier public BasicType int getMaxMergeDocs ReturnStatement MethodInvocation MethodInvocation getMaxMergeDocs getLogMergePolicy MethodDeclaration /**
   * The maximum number of terms that will be indexed for a single field in a
   * document.  This limits the amount of memory required for indexing, so that
   * collections with very large files will not crash the indexing process by
   * running out of memory.  This setting refers to the number of running terms,
   * not to the number of different terms.<p/>
   * <strong>Note:</strong> this silently truncates large documents, excluding from the
   * index all terms that occur further in the document.  If you know your source
   * documents are large, be sure to set this value high enough to accomodate
   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit
   * is your memory, but you should anticipate an OutOfMemoryError.<p/>
   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms
   * will be indexed for a field.
   */ Modifier public setMaxFieldLength FormalParameter BasicType int maxFieldLength StatementExpression MethodInvocation ensureOpen StatementExpression Assignment This MemberReference maxFieldLength MemberReference maxFieldLength = StatementExpression MethodInvocation docWriter MemberReference maxFieldLength setMaxFieldLength IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""setMaxFieldLength "" MemberReference maxFieldLength message End MethodDeclaration /**
   * Returns the maximum number of terms that will be
   * indexed for a single field in a document.
   * @see #setMaxFieldLength
   */ Modifier public BasicType int getMaxFieldLength StatementExpression MethodInvocation ensureOpen ReturnStatement MemberReference maxFieldLength MethodDeclaration /** Determines the minimal number of documents required
   * before the buffered in-memory documents are flushed as
   * a new Segment.  Large values generally gives faster
   * indexing.
   *
   * <p>When this is set, the writer will flush every
   * maxBufferedDocs added documents.  Pass in {@link
   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due
   * to number of buffered documents.  Note that if flushing
   * by RAM usage is also enabled, then the flush will be
   * triggered by whichever comes first.</p>
   *
   * <p>Disabled by default (writer flushes by RAM usage).</p>
   *
   * @throws IllegalArgumentException if maxBufferedDocs is
   * enabled but smaller than 2, or it disables maxBufferedDocs
   * when ramBufferSize is already disabled
   * @see #setRAMBufferSizeMB
   */ Modifier public setMaxBufferedDocs FormalParameter BasicType int maxBufferedDocs StatementExpression MethodInvocation ensureOpen IfStatement BinaryOperation && BinaryOperation != MemberReference maxBufferedDocs MemberReference DISABLE_AUTO_FLUSH BinaryOperation < MemberReference maxBufferedDocs Literal 2 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""maxBufferedDocs must at least be 2 when enabled"" End IfStatement BinaryOperation && BinaryOperation == MemberReference maxBufferedDocs MemberReference DISABLE_AUTO_FLUSH BinaryOperation == MethodInvocation getRAMBufferSizeMB MemberReference DISABLE_AUTO_FLUSH ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""at least one of ramBufferSize and maxBufferedDocs must be enabled"" End StatementExpression MethodInvocation docWriter MemberReference maxBufferedDocs setMaxBufferedDocs StatementExpression MethodInvocation pushMaxBufferedDocs IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""setMaxBufferedDocs "" MemberReference maxBufferedDocs message End MethodDeclaration /**
   * If we are flushing by doc count (not by RAM usage), and
   * using LogDocMergePolicy then push maxBufferedDocs down
   * as its minMergeDocs, to keep backwards compatibility.
   */ Modifier private pushMaxBufferedDocs IfStatement BinaryOperation != MethodInvocation docWriter getMaxBufferedDocs MemberReference DISABLE_AUTO_FLUSH BlockStatement LocalVariableDeclaration Modifier final ReferenceType MergePolicy VariableDeclarator mp MemberReference mergePolicy IfStatement BinaryOperation instanceof MemberReference mp ReferenceType LogDocMergePolicy BlockStatement LocalVariableDeclaration ReferenceType LogDocMergePolicy VariableDeclarator lmp Cast ReferenceType LogDocMergePolicy MemberReference mp LocalVariableDeclaration Modifier final BasicType int VariableDeclarator maxBufferedDocs MethodInvocation docWriter getMaxBufferedDocs IfStatement BinaryOperation != MethodInvocation lmp getMinMergeDocs MemberReference maxBufferedDocs BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""now push maxBufferedDocs "" MemberReference maxBufferedDocs Literal "" to LogDocMergePolicy"" message End StatementExpression MethodInvocation lmp MemberReference maxBufferedDocs setMinMergeDocs End End End MethodDeclaration /**
   * Returns the number of buffered added documents that will
   * trigger a flush if enabled.
   * @see #setMaxBufferedDocs
   */ Modifier public BasicType int getMaxBufferedDocs StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation docWriter getMaxBufferedDocs MethodDeclaration /** Determines the amount of RAM that may be used for
   * buffering added documents and deletions before they are
   * flushed to the Directory.  Generally for faster
   * indexing performance it's best to flush by RAM usage
   * instead of document count and use as large a RAM buffer
   * as you can.
   *
   * <p>When this is set, the writer will flush whenever
   * buffered documents and deletions use this much RAM.
   * Pass in {@link #DISABLE_AUTO_FLUSH} to prevent
   * triggering a flush due to RAM usage.  Note that if
   * flushing by document count is also enabled, then the
   * flush will be triggered by whichever comes first.</p>
   *
   * <p> <b>NOTE</b>: the account of RAM usage for pending
   * deletions is only approximate.  Specifically, if you
   * delete by Query, Lucene currently has no way to measure
   * the RAM usage if individual Queries so the accounting
   * will under-estimate and you should compensate by either
   * calling commit() periodically yourself, or by using
   * {@link #setMaxBufferedDeleteTerms} to flush by count
   * instead of RAM usage (each buffered delete Query counts
   * as one).
   *
   * <p> <b>NOTE</b>: because IndexWriter uses
   * <code>int</code>s when managing its internal storage,
   * the absolute maximum value for this setting is somewhat
   * less than 2048 MB.  The precise limit depends on
   * various factors, such as how large your documents are,
   * how many fields have norms, etc., so it's best to set
   * this value comfortably under 2048.</p>
   *
   * <p> The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.</p>
   * 
   * @throws IllegalArgumentException if ramBufferSize is
   * enabled but non-positive, or it disables ramBufferSize
   * when maxBufferedDocs is already disabled
   */ Modifier public setRAMBufferSizeMB FormalParameter BasicType double mb IfStatement BinaryOperation > MemberReference mb Literal 2048.0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""ramBufferSize "" MemberReference mb Literal "" is too large; should be comfortably less than 2048"" End IfStatement BinaryOperation && BinaryOperation != MemberReference mb MemberReference DISABLE_AUTO_FLUSH BinaryOperation <= MemberReference mb Literal 0.0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""ramBufferSize should be > 0.0 MB when enabled"" End IfStatement BinaryOperation && BinaryOperation == MemberReference mb MemberReference DISABLE_AUTO_FLUSH BinaryOperation == MethodInvocation getMaxBufferedDocs MemberReference DISABLE_AUTO_FLUSH ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""at least one of ramBufferSize and maxBufferedDocs must be enabled"" End StatementExpression MethodInvocation docWriter MemberReference mb setRAMBufferSizeMB IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""setRAMBufferSizeMB "" MemberReference mb message End MethodDeclaration /**
   * Returns the value set by {@link #setRAMBufferSizeMB} if enabled.
   */ Modifier public BasicType double getRAMBufferSizeMB ReturnStatement MethodInvocation docWriter getRAMBufferSizeMB MethodDeclaration /**
   * <p>Determines the minimal number of delete terms required before the buffered
   * in-memory delete terms are applied and flushed. If there are documents
   * buffered in memory at the time, they are merged and a new segment is
   * created.</p>

   * <p>Disabled by default (writer flushes by RAM usage).</p>
   * 
   * @throws IllegalArgumentException if maxBufferedDeleteTerms
   * is enabled but smaller than 1
   * @see #setRAMBufferSizeMB
   */ Modifier public setMaxBufferedDeleteTerms FormalParameter BasicType int maxBufferedDeleteTerms StatementExpression MethodInvocation ensureOpen IfStatement BinaryOperation && BinaryOperation != MemberReference maxBufferedDeleteTerms MemberReference DISABLE_AUTO_FLUSH BinaryOperation < MemberReference maxBufferedDeleteTerms Literal 1 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""maxBufferedDeleteTerms must at least be 1 when enabled"" End StatementExpression MethodInvocation docWriter MemberReference maxBufferedDeleteTerms setMaxBufferedDeleteTerms IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""setMaxBufferedDeleteTerms "" MemberReference maxBufferedDeleteTerms message End MethodDeclaration /**
   * Returns the number of buffered deleted terms that will
   * trigger a flush if enabled.
   * @see #setMaxBufferedDeleteTerms
   */ Modifier public BasicType int getMaxBufferedDeleteTerms StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation docWriter getMaxBufferedDeleteTerms MethodDeclaration /** Determines how often segment indices are merged by addDocument().  With
   * smaller values, less RAM is used while indexing, and searches on
   * unoptimized indices are faster, but indexing speed is slower.  With larger
   * values, more RAM is used during indexing, and while searches on unoptimized
   * indices are slower, indexing is faster.  Thus larger values (> 10) are best
   * for batch index creation, and smaller values (< 10) for indices that are
   * interactively maintained.
   *
   * <p>Note that this method is a convenience method: it
   * just calls mergePolicy.setMergeFactor as long as
   * mergePolicy is an instance of {@link LogMergePolicy}.
   * Otherwise an IllegalArgumentException is thrown.</p>
   *
   * <p>This must never be less than 2.  The default value is 10.
   */ Modifier public setMergeFactor FormalParameter BasicType int mergeFactor StatementExpression MethodInvocation MethodInvocation MemberReference mergeFactor setMergeFactor getLogMergePolicy MethodDeclaration /**
   * <p>Returns the number of segments that are merged at
   * once and also controls the total number of segments
   * allowed to accumulate in the index.</p>
   *
   * <p>Note that this method is a convenience method: it
   * just calls mergePolicy.getMergeFactor as long as
   * mergePolicy is an instance of {@link LogMergePolicy}.
   * Otherwise an IllegalArgumentException is thrown.</p>
   *
   * @see #setMergeFactor
   */ Modifier public BasicType int getMergeFactor ReturnStatement MethodInvocation MethodInvocation getMergeFactor getLogMergePolicy MethodDeclaration /** If non-null, this will be the default infoStream used
   * by a newly instantiated IndexWriter.
   * @see #setInfoStream
   */ Modifier public static setDefaultInfoStream FormalParameter ReferenceType PrintStream infoStream StatementExpression Assignment MemberReference IndexWriter defaultInfoStream MemberReference infoStream = MethodDeclaration /**
   * Returns the current default infoStream for newly
   * instantiated IndexWriters.
   * @see #setDefaultInfoStream
   */ Modifier public static ReferenceType PrintStream getDefaultInfoStream ReturnStatement MemberReference IndexWriter defaultInfoStream MethodDeclaration /** If non-null, information about merges, deletes and a
   * message when maxFieldLength is reached will be printed
   * to this.
   */ Modifier public setInfoStream FormalParameter ReferenceType PrintStream infoStream StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation MemberReference infoStream setMessageID StatementExpression MethodInvocation docWriter MemberReference infoStream setInfoStream StatementExpression MethodInvocation deleter MemberReference infoStream setInfoStream IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation messageState End MethodDeclaration Modifier private messageState StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""setInfoStream: dir="" MemberReference directory Literal "" mergePolicy="" MemberReference mergePolicy Literal "" mergeScheduler="" MemberReference mergeScheduler Literal "" ramBufferSizeMB="" MethodInvocation docWriter getRAMBufferSizeMB Literal "" maxBufferedDocs="" MethodInvocation docWriter getMaxBufferedDocs Literal "" maxBuffereDeleteTerms="" MethodInvocation docWriter getMaxBufferedDeleteTerms Literal "" maxFieldLength="" MemberReference maxFieldLength Literal "" index="" MethodInvocation segString message MethodDeclaration /**
   * Returns the current infoStream in use by this writer.
   * @see #setInfoStream
   */ Modifier public ReferenceType PrintStream getInfoStream StatementExpression MethodInvocation ensureOpen ReturnStatement MemberReference infoStream MethodDeclaration /** Returns true if verbosing is enabled (i.e., infoStream != null). */ Modifier public BasicType boolean verbose ReturnStatement BinaryOperation != MemberReference infoStream Literal null MethodDeclaration /**
   * Sets the maximum time to wait for a write lock (in milliseconds) for this instance of IndexWriter.  @see
   * @see #setDefaultWriteLockTimeout to change the default value for all instances of IndexWriter.
   */ Modifier public setWriteLockTimeout FormalParameter BasicType long writeLockTimeout StatementExpression MethodInvocation ensureOpen StatementExpression Assignment This MemberReference writeLockTimeout MemberReference writeLockTimeout = MethodDeclaration /**
   * Returns allowed timeout when acquiring the write lock.
   * @see #setWriteLockTimeout
   */ Modifier public BasicType long getWriteLockTimeout StatementExpression MethodInvocation ensureOpen ReturnStatement MemberReference writeLockTimeout MethodDeclaration /**
   * Sets the default (for any instance of IndexWriter) maximum time to wait for a write lock (in
   * milliseconds).
   */ Modifier public static setDefaultWriteLockTimeout FormalParameter BasicType long writeLockTimeout StatementExpression Assignment MemberReference IndexWriter WRITE_LOCK_TIMEOUT MemberReference writeLockTimeout = MethodDeclaration /**
   * Returns default write lock timeout for newly
   * instantiated IndexWriters.
   * @see #setDefaultWriteLockTimeout
   */ Modifier public static BasicType long getDefaultWriteLockTimeout ReturnStatement MemberReference IndexWriter WRITE_LOCK_TIMEOUT MethodDeclaration /**
   * Commits all changes to an index and closes all
   * associated files.  Note that this may be a costly
   * operation, so, try to re-use a single writer instead of
   * closing and opening a new one.  See {@link #commit()} for
   * caveats about write caching done by some IO devices.
   *
   * <p> If an Exception is hit during close, eg due to disk
   * full or some other reason, then both the on-disk index
   * and the internal state of the IndexWriter instance will
   * be consistent.  However, the close will not be complete
   * even though part of it (flushing buffered documents)
   * may have succeeded, so the write lock will still be
   * held.</p>
   * 
   * <p> If you can correct the underlying cause (eg free up
   * some disk space) then you can call close() again.
   * Failing that, if you want to force the write lock to be
   * released (dangerous, because you may then lose buffered
   * docs in the IndexWriter instance) then you can do
   * something like this:</p>
   *
   * <pre>
   * try {
   *   writer.close();
   * } finally {
   *   if (IndexWriter.isLocked(directory)) {
   *     IndexWriter.unlock(directory);
   *   }
   * }
   * </pre>
   *
   * after which, you must be certain not to use the writer
   * instance anymore.</p>
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer, again.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public close CorruptIndexException IOException StatementExpression MethodInvocation Literal true close MethodDeclaration /**
   * Closes the index with or without waiting for currently
   * running merges to finish.  This is only meaningful when
   * using a MergeScheduler that runs merges in background
   * threads.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer, again.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * <p><b>NOTE</b>: it is dangerous to always call
   * close(false), especially when IndexWriter is not open
   * for very long, because this can result in ""merge
   * starvation"" whereby long merges will never have a
   * chance to finish.  This will cause too many segments in
   * your index over time.</p>
   *
   * @param waitForMerges if true, this call will block
   * until all merges complete; else, it will ask all
   * running merges to abort, wait until those merges have
   * finished (which should be at most a few seconds), and
   * then return.
   */ Modifier public close FormalParameter BasicType boolean waitForMerges CorruptIndexException IOException IfStatement MethodInvocation shouldClose BlockStatement IfStatement MemberReference hitOOM StatementExpression MethodInvocation rollbackInternal StatementExpression MethodInvocation MemberReference waitForMerges closeInternal End End MethodDeclaration Modifier private synchronized BasicType boolean shouldClose WhileStatement Literal true BlockStatement IfStatement MemberReference ! closed BlockStatement IfStatement MemberReference ! closing BlockStatement StatementExpression Assignment MemberReference closing Literal true = ReturnStatement Literal true BlockStatement StatementExpression MethodInvocation doWait End ReturnStatement Literal false End End MethodDeclaration Modifier private closeInternal FormalParameter BasicType boolean waitForMerges CorruptIndexException IOException StatementExpression MethodInvocation docWriter pauseAllThreads TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""now flush at close"" message End StatementExpression MethodInvocation docWriter close IfStatement MemberReference ! hitOOM BlockStatement StatementExpression MethodInvocation MemberReference waitForMerges Literal true Literal true flush End IfStatement MemberReference waitForMerges StatementExpression MethodInvocation mergeScheduler This merge End StatementExpression MethodInvocation mergePolicy close StatementExpression MethodInvocation MemberReference waitForMerges finishMerges StatementExpression Assignment MemberReference stopMerges Literal true = StatementExpression MethodInvocation mergeScheduler close IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""now call final commit()"" message End IfStatement MemberReference ! hitOOM BlockStatement StatementExpression MethodInvocation Literal 0 commit End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""at close: "" MethodInvocation segString message End SynchronizedStatement This StatementExpression MethodInvocation readerPool close StatementExpression Assignment MemberReference docWriter Literal null = StatementExpression MethodInvocation deleter close IfStatement BinaryOperation != MemberReference writeLock Literal null BlockStatement StatementExpression MethodInvocation writeLock release StatementExpression Assignment MemberReference writeLock Literal null = End SynchronizedStatement This StatementExpression Assignment MemberReference closed Literal true = CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""closeInternal"" handleOOM SynchronizedStatement This StatementExpression Assignment MemberReference closing Literal false = StatementExpression MethodInvocation notifyAll IfStatement MemberReference ! closed BlockStatement IfStatement BinaryOperation != MemberReference docWriter Literal null StatementExpression MethodInvocation docWriter resumeAllThreads End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception while closing"" message End End MethodDeclaration /** Tells the docWriter to close its currently open shared
   *  doc stores (stored fields & vectors files).
   *  Return value specifices whether new doc store files are compound or not.
   */ Modifier private synchronized BasicType boolean flushDocStores IOException LocalVariableDeclaration BasicType boolean VariableDeclarator useCompoundDocStore Literal false LocalVariableDeclaration ReferenceType String VariableDeclarator docStoreSegment LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression Assignment MemberReference docStoreSegment MethodInvocation docWriter closeDocStore = StatementExpression Assignment MemberReference success Literal true = IfStatement BinaryOperation && MemberReference ! success BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation Literal ""hit exception closing doc store segment"" message End StatementExpression Assignment MemberReference useCompoundDocStore MethodInvocation mergePolicy MemberReference segmentInfos useCompoundDocStore = IfStatement BinaryOperation && BinaryOperation && MemberReference useCompoundDocStore BinaryOperation != MemberReference docStoreSegment Literal null BinaryOperation != MethodInvocation docWriter MethodInvocation size closedFiles Literal 0 BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""create compound file "" MemberReference docStoreSegment Literal ""."" MemberReference IndexFileNames COMPOUND_FILE_STORE_EXTENSION message End StatementExpression Assignment MemberReference success Literal false = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numSegments MethodInvocation segmentInfos size LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator compoundFileName BinaryOperation + BinaryOperation + MemberReference docStoreSegment Literal ""."" MemberReference IndexFileNames COMPOUND_FILE_STORE_EXTENSION TryStatement LocalVariableDeclaration ReferenceType CompoundFileWriter VariableDeclarator cfsWriter ClassCreator ReferenceType CompoundFileWriter MemberReference directory MemberReference compoundFileName ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator file MethodInvocation docWriter closedFiles BlockStatement StatementExpression MethodInvocation cfsWriter MemberReference file addFile End StatementExpression MethodInvocation cfsWriter close StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""hit exception building compound file doc store for segment "" MemberReference docStoreSegment message End StatementExpression MethodInvocation deleter MemberReference compoundFileName deleteFile StatementExpression MethodInvocation docWriter abort End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType SegmentInfo VariableDeclarator si MethodInvocation segmentInfos MemberReference i info IfStatement BinaryOperation && BinaryOperation != MethodInvocation si getDocStoreOffset Literal - 1 MethodInvocation si MethodInvocation MemberReference docStoreSegment equals getDocStoreSegment StatementExpression MethodInvocation si Literal true setDocStoreIsCompoundFile End End StatementExpression MethodInvocation checkpoint StatementExpression MethodInvocation deleter MethodInvocation docWriter closedFiles deleteNewFiles End ReturnStatement MemberReference useCompoundDocStore MethodDeclaration /** Returns the Directory used by this index. */ Modifier public ReferenceType Directory getDirectory StatementExpression MethodInvocation Literal false ensureOpen ReturnStatement MemberReference directory MethodDeclaration /** Returns the analyzer used by this index. */ Modifier public ReferenceType Analyzer getAnalyzer StatementExpression MethodInvocation ensureOpen ReturnStatement MemberReference analyzer MethodDeclaration /** Returns total number of docs in this index, including
   *  docs not yet flushed (still in the RAM buffer),
   *  not counting deletions.
   *  @see #numDocs */ Modifier public synchronized BasicType int maxDoc LocalVariableDeclaration BasicType int VariableDeclarator count IfStatement BinaryOperation != MemberReference docWriter Literal null StatementExpression Assignment MemberReference count MethodInvocation docWriter getNumDocsInRAM = StatementExpression Assignment MemberReference count Literal 0 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation segmentInfos size MemberReference ++ i StatementExpression Assignment MemberReference count MethodInvocation segmentInfos MemberReference docCount MemberReference i info += End ReturnStatement MemberReference count MethodDeclaration /** Returns total number of docs in this index, including
   *  docs not yet flushed (still in the RAM buffer), and
   *  including deletions.  <b>NOTE:</b> buffered deletions
   *  are not counted.  If you really need these to be
   *  counted you should call {@link #commit()} first.
   *  @see #numDocs */ Modifier public synchronized BasicType int numDocs IOException LocalVariableDeclaration BasicType int VariableDeclarator count IfStatement BinaryOperation != MemberReference docWriter Literal null StatementExpression Assignment MemberReference count MethodInvocation docWriter getNumDocsInRAM = StatementExpression Assignment MemberReference count Literal 0 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation segmentInfos size MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation segmentInfos MemberReference i info StatementExpression Assignment MemberReference count BinaryOperation - MemberReference info docCount MethodInvocation info getDelCount += End ReturnStatement MemberReference count MethodDeclaration Modifier public synchronized BasicType boolean hasDeletions IOException StatementExpression MethodInvocation ensureOpen IfStatement MethodInvocation docWriter hasDeletes ReturnStatement Literal true End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation segmentInfos size MemberReference ++ i IfStatement MethodInvocation segmentInfos MethodInvocation hasDeletions MemberReference i info ReturnStatement Literal true End End ReturnStatement Literal false FieldDeclaration /**
   * The maximum number of terms that will be indexed for a single field in a
   * document.  This limits the amount of memory required for indexing, so that
   * collections with very large files will not crash the indexing process by
   * running out of memory.<p/>
   * Note that this effectively truncates large documents, excluding from the
   * index terms that occur further in the document.  If you know your source
   * documents are large, be sure to set this value high enough to accommodate
   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit
   * is your memory, but you should anticipate an OutOfMemoryError.<p/>
   * By default, no more than 10,000 terms will be indexed for a field.
   *
   * @see MaxFieldLength
   */ Modifier private BasicType int VariableDeclarator maxFieldLength MethodDeclaration /**
   * Adds a document to this index.  If the document contains more than
   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
   * discarded.
   *
   * <p> Note that if an Exception is hit (for example disk full)
   * then the index will be consistent, but this document
   * may not have been added.  Furthermore, it's possible
   * the index will have one segment in non-compound format
   * even when using compound files (when a merge has
   * partially succeeded).</p>
   *
   * <p> This method periodically flushes pending documents
   * to the Directory (see <a href=""#flush"">above</a>), and
   * also periodically triggers segment merges in the index
   * according to the {@link MergePolicy} in use.</p>
   *
   * <p>Merges temporarily consume space in the
   * directory. The amount of space required is up to 1X the
   * size of all segments being merged, when no
   * readers/searchers are open against the index, and up to
   * 2X the size of all segments being merged when
   * readers/searchers are open against the index (see
   * {@link #optimize()} for details). The sequence of
   * primitive merge operations performed is governed by the
   * merge policy.
   *
   * <p>Note that each term in the document can be no longer
   * than 16383 characters, otherwise an
   * IllegalArgumentException will be thrown.</p>
   *
   * <p>Note that it's possible to create an invalid Unicode
   * string in java if a UTF16 surrogate pair is malformed.
   * In this case, the invalid characters are silently
   * replaced with the Unicode replacement character
   * U+FFFD.</p>
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public addDocument FormalParameter ReferenceType Document doc CorruptIndexException IOException StatementExpression MethodInvocation MemberReference doc MemberReference analyzer addDocument MethodDeclaration /**
   * Adds a document to this index, using the provided analyzer instead of the
   * value of {@link #getAnalyzer()}.  If the document contains more than
   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
   * discarded.
   *
   * <p>See {@link #addDocument(Document)} for details on
   * index and IndexWriter state after an Exception, and
   * flushing/merging temporary free space requirements.</p>
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public addDocument FormalParameter ReferenceType Document doc FormalParameter ReferenceType Analyzer analyzer CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration BasicType boolean VariableDeclarator doFlush Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement TryStatement StatementExpression Assignment MemberReference doFlush MethodInvocation docWriter MemberReference doc MemberReference analyzer addDocument = StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception adding document"" message End SynchronizedStatement This IfStatement BinaryOperation != MemberReference docWriter Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType Collection TypeArgument ReferenceType String VariableDeclarator files MethodInvocation docWriter abortedFiles IfStatement BinaryOperation != MemberReference files Literal null StatementExpression MethodInvocation deleter MemberReference files deleteNewFiles End End End IfStatement MemberReference doFlush StatementExpression MethodInvocation Literal true Literal false Literal false flush End CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""addDocument"" handleOOM MethodDeclaration /**
   * Deletes the document(s) containing <code>term</code>.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @param term the term to identify the documents to be deleted
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public deleteDocuments FormalParameter ReferenceType Term term CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen TryStatement LocalVariableDeclaration BasicType boolean VariableDeclarator doFlush MethodInvocation docWriter MemberReference term bufferDeleteTerm IfStatement MemberReference doFlush StatementExpression MethodInvocation Literal true Literal false Literal false flush End CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""deleteDocuments(Term)"" handleOOM MethodDeclaration /**
   * Deletes the document(s) containing any of the
   * terms. All deletes are flushed at the same time.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @param terms array of terms to identify the documents
   * to be deleted
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public deleteDocuments FormalParameter ReferenceType Term terms  CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen TryStatement LocalVariableDeclaration BasicType boolean VariableDeclarator doFlush MethodInvocation docWriter MemberReference terms bufferDeleteTerms IfStatement MemberReference doFlush StatementExpression MethodInvocation Literal true Literal false Literal false flush End CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""deleteDocuments(Term..)"" handleOOM MethodDeclaration /**
   * Deletes the document(s) matching the provided query.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @param query the query to identify the documents to be deleted
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public deleteDocuments FormalParameter ReferenceType Query query CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration BasicType boolean VariableDeclarator doFlush MethodInvocation docWriter MemberReference query bufferDeleteQuery IfStatement MemberReference doFlush StatementExpression MethodInvocation Literal true Literal false Literal false flush End MethodDeclaration /**
   * Deletes the document(s) matching any of the provided queries.
   * All deletes are flushed at the same time.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @param queries array of queries to identify the documents
   * to be deleted
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public deleteDocuments FormalParameter ReferenceType Query queries  CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration BasicType boolean VariableDeclarator doFlush MethodInvocation docWriter MemberReference queries bufferDeleteQueries IfStatement MemberReference doFlush StatementExpression MethodInvocation Literal true Literal false Literal false flush End MethodDeclaration /**
   * Updates a document by first deleting the document(s)
   * containing <code>term</code> and then adding the new
   * document.  The delete and then add are atomic as seen
   * by a reader on the same index (flush may happen only after
   * the add).
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @param term the term to identify the document(s) to be
   * deleted
   * @param doc the document to be added
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public updateDocument FormalParameter ReferenceType Term term FormalParameter ReferenceType Document doc CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation MemberReference term MemberReference doc MethodInvocation getAnalyzer updateDocument MethodDeclaration /**
   * Updates a document by first deleting the document(s)
   * containing <code>term</code> and then adding the new
   * document.  The delete and then add are atomic as seen
   * by a reader on the same index (flush may happen only after
   * the add).
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @param term the term to identify the document(s) to be
   * deleted
   * @param doc the document to be added
   * @param analyzer the analyzer to use when analyzing the document
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public updateDocument FormalParameter ReferenceType Term term FormalParameter ReferenceType Document doc FormalParameter ReferenceType Analyzer analyzer CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen TryStatement LocalVariableDeclaration BasicType boolean VariableDeclarator doFlush Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression Assignment MemberReference doFlush MethodInvocation docWriter MemberReference term MemberReference doc MemberReference analyzer updateDocument = StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception updating document"" message End SynchronizedStatement This LocalVariableDeclaration Modifier final ReferenceType Collection TypeArgument ReferenceType String VariableDeclarator files MethodInvocation docWriter abortedFiles IfStatement BinaryOperation != MemberReference files Literal null StatementExpression MethodInvocation deleter MemberReference files deleteNewFiles End End IfStatement MemberReference doFlush StatementExpression MethodInvocation Literal true Literal false Literal false flush End CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""updateDocument"" handleOOM MethodDeclaration Modifier final synchronized BasicType int getSegmentCount ReturnStatement MethodInvocation segmentInfos size MethodDeclaration Modifier final synchronized BasicType int getNumBufferedDocuments ReturnStatement MethodInvocation docWriter getNumDocsInRAM MethodDeclaration Modifier final synchronized BasicType int getDocCount FormalParameter BasicType int i IfStatement BinaryOperation && BinaryOperation >= MemberReference i Literal 0 BinaryOperation < MemberReference i MethodInvocation segmentInfos size BlockStatement ReturnStatement MethodInvocation segmentInfos MemberReference docCount MemberReference i info BlockStatement ReturnStatement Literal - 1 End MethodDeclaration Modifier final synchronized BasicType int getFlushCount ReturnStatement MemberReference flushCount MethodDeclaration Modifier final synchronized BasicType int getFlushDeletesCount ReturnStatement MemberReference flushDeletesCount MethodDeclaration Modifier final ReferenceType String newSegmentName SynchronizedStatement MemberReference segmentInfos StatementExpression MemberReference ++ changeCount ReturnStatement BinaryOperation + Literal ""_"" MethodInvocation Integer MemberReference ++ segmentInfos counter MemberReference Character MAX_RADIX toString FieldDeclaration /** If non-null, information about merges will be printed to this.
   */ Modifier private ReferenceType PrintStream VariableDeclarator infoStream Literal null FieldDeclaration Modifier private static ReferenceType PrintStream VariableDeclarator defaultInfoStream Literal null MethodDeclaration /**
   * Requests an ""optimize"" operation on an index, priming the index
   * for the fastest available search. Traditionally this has meant
   * merging all segments into a single segment as is done in the
   * default merge policy, but individual merge policies may implement
   * optimize in different ways.
   *
   * <p>It is recommended that this method be called upon completion of indexing.  In
   * environments with frequent updates, optimize is best done during low volume times, if at all. 
   * 
   * </p>
   * <p>See http://www.gossamer-threads.com/lists/lucene/java-dev/47895 for more discussion. </p>
   *
   * <p>Note that optimize requires 2X the index size free
   * space in your Directory.  For example, if your index
   * size is 10 MB then you need 20 MB free for optimize to
   * complete.</p>
   *
   * <p>If some but not all readers re-open while an
   * optimize is underway, this will cause > 2X temporary
   * space to be consumed as those new readers will then
   * hold open the partially optimized segments at that
   * time.  It is best not to re-open readers while optimize
   * is running.</p>
   *
   * <p>The actual temporary usage could be much less than
   * these figures (it depends on many factors).</p>
   *
   * <p>In general, once the optimize completes, the total size of the
   * index will be less than the size of the starting index.
   * It could be quite a bit smaller (if there were many
   * pending deletes) or just slightly smaller.</p>
   *
   * <p>If an Exception is hit during optimize(), for example
   * due to disk full, the index will not be corrupt and no
   * documents will have been lost.  However, it may have
   * been partially optimized (some segments were merged but
   * not all), and it's possible that one of the segments in
   * the index will be in non-compound format even when
   * using compound file format.  This will occur when the
   * Exception is hit during conversion of the segment into
   * compound format.</p>
   *
   * <p>This call will optimize those segments present in
   * the index when the call started.  If other threads are
   * still adding documents and flushing segments, those
   * newly created segments will not be optimized unless you
   * call optimize again.</p>
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   * @see LogMergePolicy#findMergesForOptimize
  */ Modifier public optimize CorruptIndexException IOException StatementExpression MethodInvocation Literal true optimize MethodDeclaration /**
   * Optimize the index down to <= maxNumSegments.  If
   * maxNumSegments==1 then this is the same as {@link
   * #optimize()}.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @param maxNumSegments maximum number of segments left
   * in the index after optimization finishes
   */ Modifier public optimize FormalParameter BasicType int maxNumSegments CorruptIndexException IOException StatementExpression MethodInvocation MemberReference maxNumSegments Literal true optimize MethodDeclaration /** Just like {@link #optimize()}, except you can specify
   *  whether the call should block until the optimize
   *  completes.  This is only meaningful with a
   *  {@link MergeScheduler} that is able to run merges in
   *  background threads.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   */ Modifier public optimize FormalParameter BasicType boolean doWait CorruptIndexException IOException StatementExpression MethodInvocation Literal 1 MemberReference doWait optimize MethodDeclaration /** Just like {@link #optimize(int)}, except you can
   *  specify whether the call should block until the
   *  optimize completes.  This is only meaningful with a
   *  {@link MergeScheduler} that is able to run merges in
   *  background threads.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   */ Modifier public optimize FormalParameter BasicType int maxNumSegments FormalParameter BasicType boolean doWait CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen IfStatement BinaryOperation < MemberReference maxNumSegments Literal 1 ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""maxNumSegments must be >= 1; got "" MemberReference maxNumSegments End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""optimize: index now "" MethodInvocation segString message End StatementExpression MethodInvocation Literal true Literal false Literal true flush SynchronizedStatement This StatementExpression MethodInvocation resetMergeExceptions StatementExpression Assignment MemberReference segmentsToOptimize ClassCreator ReferenceType HashSet TypeArgument ReferenceType SegmentInfo = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numSegments MethodInvocation segmentInfos size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i StatementExpression MethodInvocation segmentsToOptimize MethodInvocation segmentInfos MemberReference i info add End ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MemberReference pendingMerges BlockStatement StatementExpression Assignment MemberReference merge optimize Literal true = StatementExpression Assignment MemberReference merge maxNumSegmentsOptimize MemberReference maxNumSegments = End ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MemberReference runningMerges BlockStatement StatementExpression Assignment MemberReference merge optimize Literal true = StatementExpression Assignment MemberReference merge maxNumSegmentsOptimize MemberReference maxNumSegments = End StatementExpression MethodInvocation MemberReference maxNumSegments Literal true maybeMerge IfStatement MemberReference doWait BlockStatement SynchronizedStatement This WhileStatement Literal true BlockStatement IfStatement MemberReference hitOOM BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""this writer hit an OutOfMemoryError; cannot complete optimize"" End IfStatement BinaryOperation > MethodInvocation mergeExceptions size Literal 0 BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation mergeExceptions size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MethodInvocation mergeExceptions MemberReference i get IfStatement MemberReference merge optimize BlockStatement LocalVariableDeclaration ReferenceType IOException VariableDeclarator err ClassCreator ReferenceType IOException BinaryOperation + Literal ""background merge hit exception: "" MethodInvocation merge MemberReference directory segString LocalVariableDeclaration Modifier final ReferenceType Throwable VariableDeclarator t MethodInvocation merge getException IfStatement BinaryOperation != MemberReference t Literal null StatementExpression MethodInvocation err MemberReference t initCause End ThrowStatement MemberReference err End End End IfStatement MethodInvocation optimizeMergesPending StatementExpression MethodInvocation doWait BreakStatement End End StatementExpression MethodInvocation ensureOpen End MethodDeclaration /** Returns true if any merges in pendingMerges or
   *  runningMerges are optimization merges. */ Modifier private synchronized BasicType boolean optimizeMergesPending ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MemberReference pendingMerges BlockStatement IfStatement MemberReference merge optimize ReturnStatement Literal true End End ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MemberReference runningMerges BlockStatement IfStatement MemberReference merge optimize ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /** Just like {@link #expungeDeletes()}, except you can
   *  specify whether the call should block until the
   *  operation completes.  This is only meaningful with a
   *  {@link MergeScheduler} that is able to run merges in
   *  background threads.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   */ Modifier public expungeDeletes FormalParameter BasicType boolean doWait CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""expungeDeletes: index now "" MethodInvocation segString message End LocalVariableDeclaration ReferenceType MergePolicy ReferenceType MergeSpecification VariableDeclarator spec SynchronizedStatement This StatementExpression Assignment MemberReference spec MethodInvocation mergePolicy MemberReference segmentInfos findMergesToExpungeDeletes = IfStatement BinaryOperation != MemberReference spec Literal null BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numMerges MethodInvocation spec.merges size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numMerges MemberReference ++ i StatementExpression MethodInvocation MethodInvocation spec.merges MemberReference i get registerMerge End End StatementExpression MethodInvocation mergeScheduler This merge IfStatement BinaryOperation && BinaryOperation != MemberReference spec Literal null MemberReference doWait BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numMerges MethodInvocation spec.merges size SynchronizedStatement This LocalVariableDeclaration BasicType boolean VariableDeclarator running Literal true WhileStatement MemberReference running BlockStatement IfStatement MemberReference hitOOM BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""this writer hit an OutOfMemoryError; cannot complete expungeDeletes"" End StatementExpression Assignment MemberReference running Literal false = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numMerges MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MethodInvocation spec.merges MemberReference i get IfStatement BinaryOperation || MethodInvocation pendingMerges MemberReference merge contains MethodInvocation runningMerges MemberReference merge contains StatementExpression Assignment MemberReference running Literal true = End LocalVariableDeclaration ReferenceType Throwable VariableDeclarator t MethodInvocation merge getException IfStatement BinaryOperation != MemberReference t Literal null BlockStatement LocalVariableDeclaration ReferenceType IOException VariableDeclarator ioe ClassCreator ReferenceType IOException BinaryOperation + Literal ""background merge hit exception: "" MethodInvocation merge MemberReference directory segString StatementExpression MethodInvocation ioe MemberReference t initCause ThrowStatement MemberReference ioe End End IfStatement MemberReference running StatementExpression MethodInvocation doWait End End End MethodDeclaration /** Expunges all deletes from the index.  When an index
   *  has many document deletions (or updates to existing
   *  documents), it's best to either call optimize or
   *  expungeDeletes to remove all unused data in the index
   *  associated with the deleted documents.  To see how
   *  many deletions you have pending in your index, call
   *  {@link IndexReader#numDeletedDocs}
   *  This saves disk space and memory usage while
   *  searching.  expungeDeletes should be somewhat faster
   *  than optimize since it does not insist on reducing the
   *  index to a single segment (though, this depends on the
   *  {@link MergePolicy}; see {@link
   *  MergePolicy#findMergesToExpungeDeletes}.). Note that
   *  this call does not first commit any buffered
   *  documents, so you must do so yourself if necessary.
   *  See also {@link #expungeDeletes(boolean)}
   *
   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   *  you should immediately close the writer.  See <a
   *  href=""#OOME"">above</a> for details.</p>
   */ Modifier public expungeDeletes CorruptIndexException IOException StatementExpression MethodInvocation Literal true expungeDeletes MethodDeclaration /**
   * Expert: asks the mergePolicy whether any merges are
   * necessary now and if so, runs the requested merges and
   * then iterate (test again if merges are needed) until no
   * more merges are returned by the mergePolicy.
   *
   * Explicit calls to maybeMerge() are usually not
   * necessary. The most common case is when merge policy
   * parameters have changed.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   */ Modifier public final maybeMerge CorruptIndexException IOException StatementExpression MethodInvocation Literal false maybeMerge MethodDeclaration Modifier private final maybeMerge FormalParameter BasicType boolean optimize CorruptIndexException IOException StatementExpression MethodInvocation Literal 1 MemberReference optimize maybeMerge MethodDeclaration Modifier private final maybeMerge FormalParameter BasicType int maxNumSegmentsOptimize FormalParameter BasicType boolean optimize CorruptIndexException IOException StatementExpression MethodInvocation MemberReference maxNumSegmentsOptimize MemberReference optimize updatePendingMerges StatementExpression MethodInvocation mergeScheduler This merge MethodDeclaration Modifier private synchronized updatePendingMerges FormalParameter BasicType int maxNumSegmentsOptimize FormalParameter BasicType boolean optimize CorruptIndexException IOException AssertStatement BinaryOperation || MemberReference ! optimize BinaryOperation > MemberReference maxNumSegmentsOptimize Literal 0 IfStatement MemberReference stopMerges ReturnStatement End IfStatement MemberReference hitOOM BlockStatement ReturnStatement End LocalVariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType MergeSpecification VariableDeclarator spec IfStatement MemberReference optimize BlockStatement StatementExpression Assignment MemberReference spec MethodInvocation mergePolicy MemberReference segmentInfos MemberReference maxNumSegmentsOptimize MemberReference segmentsToOptimize findMergesForOptimize = IfStatement BinaryOperation != MemberReference spec Literal null BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numMerges MethodInvocation spec.merges size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numMerges MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MethodInvocation spec.merges MemberReference i get StatementExpression Assignment MemberReference merge optimize Literal true = StatementExpression Assignment MemberReference merge maxNumSegmentsOptimize MemberReference maxNumSegmentsOptimize = End End StatementExpression Assignment MemberReference spec MethodInvocation mergePolicy MemberReference segmentInfos findMerges = End IfStatement BinaryOperation != MemberReference spec Literal null BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numMerges MethodInvocation spec.merges size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numMerges MemberReference ++ i StatementExpression MethodInvocation MethodInvocation spec.merges MemberReference i get registerMerge End End MethodDeclaration /** Expert: the {@link MergeScheduler} calls this method
   *  to retrieve the next merge requested by the
   *  MergePolicy */ Modifier synchronized ReferenceType MergePolicy ReferenceType OneMerge getNextMerge IfStatement BinaryOperation == MethodInvocation pendingMerges size Literal 0 ReturnStatement Literal null BlockStatement LocalVariableDeclaration ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MethodInvocation pendingMerges removeFirst StatementExpression MethodInvocation runningMerges MemberReference merge add ReturnStatement MemberReference merge End MethodDeclaration /** Like getNextMerge() except only returns a merge if it's
   *  external. */ Modifier private synchronized ReferenceType MergePolicy ReferenceType OneMerge getNextExternalMerge IfStatement BinaryOperation == MethodInvocation pendingMerges size Literal 0 ReturnStatement Literal null BlockStatement LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator it MethodInvocation pendingMerges iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MethodInvocation it next IfStatement MemberReference merge isExternal BlockStatement StatementExpression MethodInvocation it remove StatementExpression MethodInvocation runningMerges MemberReference merge add ReturnStatement MemberReference merge End End ReturnStatement Literal null End MethodDeclaration Modifier private synchronized startTransaction FormalParameter BasicType boolean haveReadLock IOException LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""now start transaction"" message End AssertStatement BinaryOperation == MethodInvocation docWriter getNumBufferedDeleteTerms Literal 0 BinaryOperation + Literal ""calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms="" MethodInvocation docWriter getNumBufferedDeleteTerms AssertStatement BinaryOperation == MethodInvocation docWriter getNumDocsInRAM Literal 0 BinaryOperation + Literal ""calling startTransaction with buffered documents not supported: numDocsInRAM="" MethodInvocation docWriter getNumDocsInRAM StatementExpression MethodInvocation ensureOpen SynchronizedStatement This WhileStatement MemberReference stopMerges StatementExpression MethodInvocation doWait End StatementExpression Assignment MemberReference success Literal true = IfStatement BinaryOperation && MemberReference ! success MemberReference haveReadLock StatementExpression MethodInvocation releaseRead End IfStatement MemberReference haveReadLock BlockStatement StatementExpression MethodInvocation upgradeReadToWrite BlockStatement StatementExpression MethodInvocation acquireWrite End StatementExpression Assignment MemberReference success Literal false = TryStatement StatementExpression Assignment MemberReference localRollbackSegmentInfos Cast ReferenceType SegmentInfos MethodInvocation segmentInfos clone = AssertStatement MethodInvocation ! hasExternalSegments StatementExpression Assignment MemberReference localFlushedDocCount MethodInvocation docWriter getFlushedDocCount = StatementExpression MethodInvocation deleter MemberReference segmentInfos Literal false incRef StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success StatementExpression MethodInvocation finishAddIndexes End MethodDeclaration Modifier private synchronized rollbackTransaction IOException IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""now rollback transaction"" message End IfStatement BinaryOperation != MemberReference docWriter Literal null BlockStatement StatementExpression MethodInvocation docWriter MemberReference localFlushedDocCount setFlushedDocCount End StatementExpression MethodInvocation Literal false finishMerges StatementExpression MethodInvocation segmentInfos clear StatementExpression MethodInvocation segmentInfos MemberReference localRollbackSegmentInfos addAll StatementExpression Assignment MemberReference localRollbackSegmentInfos Literal null = StatementExpression MethodInvocation finishAddIndexes StatementExpression MethodInvocation deleter MemberReference segmentInfos Literal false checkpoint StatementExpression MethodInvocation deleter MemberReference segmentInfos decRef StatementExpression MethodInvocation deleter refresh StatementExpression MethodInvocation notifyAll AssertStatement MethodInvocation ! hasExternalSegments MethodDeclaration Modifier private synchronized commitTransaction IOException IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""now commit transaction"" message End StatementExpression MethodInvocation checkpoint StatementExpression MethodInvocation deleter MemberReference localRollbackSegmentInfos decRef StatementExpression Assignment MemberReference localRollbackSegmentInfos Literal null = AssertStatement MethodInvocation ! hasExternalSegments StatementExpression MethodInvocation finishAddIndexes MethodDeclaration /**
   * Close the <code>IndexWriter</code> without committing
   * any changes that have occurred since the last commit
   * (or since it was opened, if commit hasn't been called).
   * This removes any temporary files that had been created,
   * after which the state of the index will be the same as
   * it was when commit() was last called or when this
   * writer was first opened.  This also clears a previous
   * call to {@link #prepareCommit}.
   * @throws IOException if there is a low-level IO error
   */ Modifier public rollback IOException StatementExpression MethodInvocation ensureOpen IfStatement MethodInvocation shouldClose StatementExpression MethodInvocation rollbackInternal End MethodDeclaration Modifier private rollbackInternal IOException LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false StatementExpression MethodInvocation docWriter pauseAllThreads TryStatement StatementExpression MethodInvocation Literal false finishMerges StatementExpression MethodInvocation mergePolicy close StatementExpression MethodInvocation mergeScheduler close SynchronizedStatement This IfStatement BinaryOperation != MemberReference pendingCommit Literal null BlockStatement StatementExpression MethodInvocation pendingCommit MemberReference directory rollbackCommit StatementExpression MethodInvocation deleter MemberReference pendingCommit decRef StatementExpression Assignment MemberReference pendingCommit Literal null = StatementExpression MethodInvocation notifyAll End StatementExpression MethodInvocation segmentInfos clear StatementExpression MethodInvocation segmentInfos MemberReference rollbackSegmentInfos addAll AssertStatement MethodInvocation ! hasExternalSegments StatementExpression MethodInvocation docWriter abort AssertStatement MethodInvocation Literal ""rollback before checkpoint"" testPoint StatementExpression MethodInvocation deleter MemberReference segmentInfos Literal false checkpoint StatementExpression MethodInvocation deleter refresh StatementExpression MethodInvocation readerPool Literal null clear StatementExpression Assignment MemberReference lastCommitChangeCount MemberReference changeCount = StatementExpression Assignment MemberReference success Literal true = CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""rollbackInternal"" handleOOM SynchronizedStatement This IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation docWriter resumeAllThreads StatementExpression Assignment MemberReference closing Literal false = StatementExpression MethodInvocation notifyAll IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception during rollback"" message End End StatementExpression MethodInvocation Literal false closeInternal MethodDeclaration /**
   * Delete all documents in the index.
   *
   * <p>This method will drop all buffered documents and will 
   *    remove all segments from the index. This change will not be
   *    visible until a {@link #commit()} has been called. This method
   *    can be rolled back using {@link #rollback()}.</p>
   *
   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>
   *
   * <p>NOTE: this method will forcefully abort all merges
   *    in progress.  If other threads are running {@link
   *    #optimize()} or any of the addIndexes methods, they
   *    will receive {@link MergePolicy.MergeAbortedException}s.
   */ Modifier public synchronized deleteAll IOException StatementExpression MethodInvocation docWriter pauseAllThreads TryStatement StatementExpression MethodInvocation Literal false finishMerges StatementExpression MethodInvocation docWriter abort StatementExpression MethodInvocation docWriter Literal 0 setFlushedDocCount StatementExpression MethodInvocation segmentInfos clear StatementExpression MethodInvocation deleter MemberReference segmentInfos Literal false checkpoint StatementExpression MethodInvocation deleter refresh StatementExpression MethodInvocation readerPool Literal null clear StatementExpression MemberReference ++ changeCount CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""deleteAll"" handleOOM StatementExpression MethodInvocation docWriter resumeAllThreads IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation Literal ""hit exception during deleteAll"" message End MethodDeclaration Modifier private synchronized finishMerges FormalParameter BasicType boolean waitForMerges IOException IfStatement MemberReference ! waitForMerges BlockStatement StatementExpression Assignment MemberReference stopMerges Literal true = ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MemberReference pendingMerges BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""now abort pending merge "" MethodInvocation merge MemberReference directory segString message End StatementExpression MethodInvocation merge abort StatementExpression MethodInvocation MemberReference merge mergeFinish End StatementExpression MethodInvocation pendingMerges clear ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge MemberReference runningMerges BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""now abort running merge "" MethodInvocation merge MemberReference directory segString message End StatementExpression MethodInvocation merge abort End StatementExpression MethodInvocation acquireRead StatementExpression MethodInvocation releaseRead WhileStatement BinaryOperation > MethodInvocation runningMerges size Literal 0 BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""now wait for "" MethodInvocation runningMerges size Literal "" running merge to abort"" message End StatementExpression MethodInvocation doWait End StatementExpression Assignment MemberReference stopMerges Literal false = StatementExpression MethodInvocation notifyAll AssertStatement BinaryOperation == Literal 0 MethodInvocation mergingSegments size IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""all running merges have aborted"" message End BlockStatement StatementExpression MethodInvocation waitForMerges End MethodDeclaration /**
   * Wait for any currently outstanding merges to finish.
   *
   * <p>It is guaranteed that any merges started prior to calling this method 
   *    will have completed once this method completes.</p>
   */ Modifier public synchronized waitForMerges StatementExpression MethodInvocation acquireRead StatementExpression MethodInvocation releaseRead WhileStatement BinaryOperation || BinaryOperation > MethodInvocation pendingMerges size Literal 0 BinaryOperation > MethodInvocation runningMerges size Literal 0 BlockStatement StatementExpression MethodInvocation doWait End AssertStatement BinaryOperation == Literal 0 MethodInvocation mergingSegments size MethodDeclaration Modifier private synchronized checkpoint IOException StatementExpression MemberReference ++ changeCount StatementExpression MethodInvocation deleter MemberReference segmentInfos Literal false checkpoint MethodDeclaration Modifier private finishAddIndexes StatementExpression MethodInvocation releaseWrite MethodDeclaration Modifier private blockAddIndexes FormalParameter BasicType boolean includePendingClose StatementExpression MethodInvocation acquireRead LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation MemberReference includePendingClose ensureOpen StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success StatementExpression MethodInvocation releaseRead End MethodDeclaration Modifier private resumeAddIndexes StatementExpression MethodInvocation releaseRead MethodDeclaration Modifier private synchronized resetMergeExceptions StatementExpression Assignment MemberReference mergeExceptions ClassCreator ReferenceType ArrayList TypeArgument ReferenceType MergePolicy ReferenceType OneMerge = StatementExpression MemberReference ++ mergeGen MethodDeclaration Modifier private noDupDirs FormalParameter ReferenceType Directory dirs  LocalVariableDeclaration ReferenceType HashSet TypeArgument ReferenceType Directory VariableDeclarator dups ClassCreator ReferenceType HashSet TypeArgument ReferenceType Directory ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference dirs length MemberReference ++ i BlockStatement IfStatement MethodInvocation dups MemberReference ArraySelector MemberReference i dirs contains ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""Directory "" MemberReference ArraySelector MemberReference i dirs Literal "" appears more than once"" End IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i dirs MemberReference directory ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Cannot add directory to itself"" End StatementExpression MethodInvocation dups MemberReference ArraySelector MemberReference i dirs add End MethodDeclaration /**
   * Merges all segments from an array of indexes into this
   * index.
   *
   * <p>This may be used to parallelize batch indexing.  A large document
   * collection can be broken into sub-collections.  Each sub-collection can be
   * indexed in parallel, on a different thread, process or machine.  The
   * complete index can then be created by merging sub-collection indexes
   * with this method.
   *
   * <p><b>NOTE:</b> the index in each Directory must not be
   * changed (opened by a writer) while this method is
   * running.  This method does not acquire a write lock in
   * each input Directory, so it is up to the caller to
   * enforce this.
   *
   * <p><b>NOTE:</b> while this is running, any attempts to
   * add or delete documents (with another thread) will be
   * paused until this method completes.
   *
   * <p>This method is transactional in how Exceptions are
   * handled: it does not commit a new segments_N file until
   * all indexes are added.  This means if an Exception
   * occurs (for example disk full), then either no indexes
   * will have been added or they all will have been.</p>
   *
   * <p>Note that this requires temporary free space in the
   * Directory up to 2X the sum of all input indexes
   * (including the starting index).  If readers/searchers
   * are open against the starting index, then temporary
   * free space required will be higher by the size of the
   * starting index (see {@link #optimize()} for details).
   * </p>
   *
   * <p>Once this completes, the final size of the index
   * will be less than the sum of all input index sizes
   * (including the starting index).  It could be quite a
   * bit smaller (if there were many pending deletes) or
   * just slightly smaller.</p>
   * 
   * <p>
   * This requires this index not be among those to be added.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public addIndexesNoOptimize FormalParameter ReferenceType Directory dirs  CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation MemberReference dirs noDupDirs StatementExpression MethodInvocation docWriter pauseAllThreads TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""flush at addIndexesNoOptimize"" message End StatementExpression MethodInvocation Literal true Literal false Literal true flush LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false StatementExpression MethodInvocation Literal false startTransaction TryStatement LocalVariableDeclaration BasicType int VariableDeclarator docCount Literal 0 SynchronizedStatement This StatementExpression MethodInvocation ensureOpen ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference dirs length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference directory MemberReference ArraySelector MemberReference i dirs BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Cannot add this index to itself"" End LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator sis ClassCreator ReferenceType SegmentInfos StatementExpression MethodInvocation sis MemberReference ArraySelector MemberReference i dirs read ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MethodInvocation sis size MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType SegmentInfo VariableDeclarator info MethodInvocation sis MemberReference j info AssertStatement MethodInvocation ! segmentInfos MemberReference info contains BinaryOperation + BinaryOperation + BinaryOperation + Literal ""dup info dir="" MemberReference info dir Literal "" name="" MemberReference info name StatementExpression Assignment MemberReference docCount MemberReference info docCount += StatementExpression MethodInvocation segmentInfos MemberReference info add End End StatementExpression MethodInvocation docWriter MemberReference docCount updateFlushedDocCount StatementExpression MethodInvocation maybeMerge StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation resolveExternalSegments StatementExpression MethodInvocation ensureOpen StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference success BlockStatement StatementExpression MethodInvocation commitTransaction BlockStatement StatementExpression MethodInvocation rollbackTransaction End CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""addIndexesNoOptimize"" handleOOM IfStatement BinaryOperation != MemberReference docWriter Literal null BlockStatement StatementExpression MethodInvocation docWriter resumeAllThreads End MethodDeclaration Modifier private BasicType boolean hasExternalSegments ReturnStatement MethodInvocation segmentInfos MemberReference directory hasExternalSegments MethodDeclaration Modifier private resolveExternalSegments CorruptIndexException IOException LocalVariableDeclaration BasicType boolean VariableDeclarator any Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator done Literal false WhileStatement MemberReference ! done BlockStatement LocalVariableDeclaration ReferenceType SegmentInfo VariableDeclarator info Literal null LocalVariableDeclaration ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator merge Literal null SynchronizedStatement This IfStatement MemberReference stopMerges ThrowStatement ClassCreator ReferenceType MergePolicy ReferenceType MergeAbortedException Literal ""rollback() was called or addIndexes* hit an unhandled exception"" End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numSegments MethodInvocation segmentInfos size StatementExpression Assignment MemberReference done Literal true = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference info MethodInvocation segmentInfos MemberReference i info = IfStatement BinaryOperation != MemberReference info dir MemberReference directory BlockStatement StatementExpression Assignment MemberReference done Literal false = LocalVariableDeclaration Modifier final ReferenceType MergePolicy ReferenceType OneMerge VariableDeclarator newMerge ClassCreator ReferenceType MergePolicy ReferenceType OneMerge MethodInvocation segmentInfos MemberReference i BinaryOperation + Literal 1 MemberReference i range BinaryOperation && BinaryOperation instanceof MemberReference mergePolicy ReferenceType LogMergePolicy MethodInvocation getUseCompoundFile IfStatement MethodInvocation MemberReference newMerge registerMerge BlockStatement StatementExpression Assignment MemberReference merge MemberReference newMerge = StatementExpression MethodInvocation pendingMerges MemberReference merge remove StatementExpression MethodInvocation runningMerges MemberReference merge add BreakStatement End End End IfStatement BinaryOperation && MemberReference ! done BinaryOperation == MemberReference merge Literal null StatementExpression Assignment MemberReference merge MethodInvocation getNextExternalMerge = End IfStatement BinaryOperation && MemberReference ! done BinaryOperation == MemberReference merge Literal null StatementExpression MethodInvocation doWait End IfStatement BinaryOperation != MemberReference merge Literal null BlockStatement StatementExpression Assignment MemberReference any Literal true = StatementExpression MethodInvocation MemberReference merge merge End End IfStatement MemberReference any StatementExpression MethodInvocation mergeScheduler This merge End MethodDeclaration /** Merges the provided indexes into this index.
   * <p>After this completes, the index is optimized. </p>
   * <p>The provided IndexReaders are not closed.</p>
   *
   * <p><b>NOTE:</b> while this is running, any attempts to
   * add or delete documents (with another thread) will be
   * paused until this method completes.
   *
   * <p>See {@link #addIndexesNoOptimize} for
   * details on transactional semantics, temporary free
   * space required in the Directory, and non-CFS segments
   * on an Exception.</p>
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public addIndexes FormalParameter ReferenceType IndexReader readers  CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation docWriter pauseAllThreads StatementExpression MethodInvocation acquireRead TryStatement LocalVariableDeclaration ReferenceType SegmentInfo VariableDeclarator info Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator mergedName Literal null LocalVariableDeclaration ReferenceType SegmentMerger VariableDeclarator merger Literal null LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation Literal true Literal false Literal true flush StatementExpression MethodInvocation optimize StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success StatementExpression MethodInvocation releaseRead End StatementExpression MethodInvocation Literal true startTransaction TryStatement StatementExpression Assignment MemberReference mergedName MethodInvocation newSegmentName = StatementExpression Assignment MemberReference merger ClassCreator ReferenceType SegmentMerger This MemberReference mergedName Literal null = LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator sReader Literal null SynchronizedStatement This IfStatement BinaryOperation == MethodInvocation segmentInfos size Literal 1 BlockStatement StatementExpression Assignment MemberReference sReader MethodInvocation readerPool MethodInvocation segmentInfos Literal 0 info Literal true MemberReference BufferedIndexInput BUFFER_SIZE Literal - 1 get = End StatementExpression Assignment MemberReference success Literal false = TryStatement IfStatement BinaryOperation != MemberReference sReader Literal null StatementExpression MethodInvocation merger MemberReference sReader add End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference readers length MemberReference ++ i StatementExpression MethodInvocation merger MemberReference ArraySelector MemberReference i readers add End LocalVariableDeclaration BasicType int VariableDeclarator docCount MethodInvocation merger merge SynchronizedStatement This StatementExpression MethodInvocation segmentInfos clear StatementExpression Assignment MemberReference info ClassCreator ReferenceType SegmentInfo MemberReference mergedName MemberReference docCount MemberReference directory Literal false Literal true Literal - 1 Literal null Literal false MethodInvocation merger hasProx = StatementExpression MethodInvocation MemberReference info Literal ""addIndexes(IndexReader...)"" setDiagnostics StatementExpression MethodInvocation segmentInfos MemberReference info add StatementExpression MethodInvocation docWriter MemberReference docCount updateFlushedDocCount StatementExpression Assignment MemberReference success Literal true = IfStatement BinaryOperation != MemberReference sReader Literal null BlockStatement StatementExpression MethodInvocation readerPool MemberReference sReader release End IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception in addIndexes during merge"" message End StatementExpression MethodInvocation rollbackTransaction BlockStatement StatementExpression MethodInvocation commitTransaction End IfStatement BinaryOperation && BinaryOperation instanceof MemberReference mergePolicy ReferenceType LogMergePolicy MethodInvocation getUseCompoundFile BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator files Literal null SynchronizedStatement This IfStatement MethodInvocation segmentInfos MemberReference info contains BlockStatement StatementExpression Assignment MemberReference files MethodInvocation info files = StatementExpression MethodInvocation deleter MemberReference files incRef End IfStatement BinaryOperation != MemberReference files Literal null BlockStatement StatementExpression Assignment MemberReference success Literal false = StatementExpression MethodInvocation Literal false startTransaction TryStatement StatementExpression MethodInvocation merger BinaryOperation + MemberReference mergedName Literal "".cfs"" createCompoundFile SynchronizedStatement This StatementExpression MethodInvocation info Literal true setUseCompoundFile StatementExpression Assignment MemberReference success Literal true = StatementExpression MethodInvocation deleter MemberReference files decRef IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception building compound file in addIndexes during merge"" message End StatementExpression MethodInvocation rollbackTransaction BlockStatement StatementExpression MethodInvocation commitTransaction End End End CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""addIndexes(IndexReader...)"" handleOOM IfStatement BinaryOperation != MemberReference docWriter Literal null BlockStatement StatementExpression MethodInvocation docWriter resumeAllThreads End MethodDeclaration doAfterFlush IOException MethodDeclaration /** Expert: prepare for commit.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @see #prepareCommit(Map) */ Modifier public final prepareCommit CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen StatementExpression MethodInvocation Literal null prepareCommit MethodDeclaration /** <p>Expert: prepare for commit, specifying
   *  commitUserData Map (String -> String).  This does the
   *  first phase of 2-phase commit. This method does all
   *  steps necessary to commit changes since this writer
   *  was opened: flushes pending added and deleted docs,
   *  syncs the index files, writes most of next segments_N
   *  file.  After calling this you must call either {@link
   *  #commit()} to finish the commit, or {@link
   *  #rollback()} to revert the commit and undo all changes
   *  done since the writer was opened.</p>
   * 
   *  You can also just call {@link #commit(Map)} directly
   *  without prepareCommit first in which case that method
   *  will internally call prepareCommit.
   *
   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   *  you should immediately close the writer.  See <a
   *  href=""#OOME"">above</a> for details.</p>
   *
   *  @param commitUserData Opaque Map (String->String)
   *  that's recorded into the segments file in the index,
   *  and retrievable by {@link
   *  IndexReader#getCommitUserData}.  Note that when
   *  IndexWriter commits itself during {@link #close}, the
   *  commitUserData is unchanged (just carried over from
   *  the prior commit).  If this is null then the previous
   *  commitUserData is kept.  Also, the commitUserData will
   *  only ""stick"" if there are actually changes in the
   *  index to commit.
   */ Modifier public final prepareCommit FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String commitUserData CorruptIndexException IOException IfStatement MemberReference hitOOM BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""this writer hit an OutOfMemoryError; cannot commit"" End IfStatement BinaryOperation != MemberReference pendingCommit Literal null ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""prepareCommit was already called with no corresponding call to commit"" End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""prepareCommit: flush"" message End StatementExpression MethodInvocation Literal true Literal true Literal true flush StatementExpression MethodInvocation Literal 0 MemberReference commitUserData startCommit MethodDeclaration Modifier private commit FormalParameter BasicType long sizeInBytes IOException StatementExpression MethodInvocation MemberReference sizeInBytes Literal null startCommit StatementExpression MethodInvocation finishCommit MethodDeclaration /**
   * <p>Commits all pending changes (added & deleted
   * documents, optimizations, segment merges, added
   * indexes, etc.) to the index, and syncs all referenced
   * index files, such that a reader will see the changes
   * and the index updates will survive an OS or machine
   * crash or power loss.  Note that this does not wait for
   * any running background merges to finish.  This may be a
   * costly operation, so you should test the cost in your
   * application and do it only when really necessary.</p>
   *
   * <p> Note that this operation calls Directory.sync on
   * the index files.  That call should not return until the
   * file contents & metadata are on stable storage.  For
   * FSDirectory, this calls the OS's fsync.  But, beware:
   * some hardware devices may in fact cache writes even
   * during fsync, and return before the bits are actually
   * on stable storage, to give the appearance of faster
   * performance.  If you have such a device, and it does
   * not have a battery backup (for example) then on power
   * loss it may still lose data.  Lucene cannot guarantee
   * consistency on such devices.  </p>
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   *
   * @see #prepareCommit
   * @see #commit(Map)
   */ Modifier public final commit CorruptIndexException IOException StatementExpression MethodInvocation Literal null commit MethodDeclaration /** Commits all changes to the index, specifying a
   *  commitUserData Map (String -> String).  This just
   *  calls {@link #prepareCommit(Map)} (if you didn't
   *  already call it) and then {@link #finishCommit}.
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href=""#OOME"">above</a> for details.</p>
   */ Modifier public final commit FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String commitUserData CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""commit: start"" message End IfStatement BinaryOperation == MemberReference pendingCommit Literal null BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""commit: now prepare"" message End StatementExpression MethodInvocation MemberReference commitUserData prepareCommit IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""commit: already prepared"" message End End StatementExpression MethodInvocation finishCommit MethodDeclaration Modifier private final synchronized finishCommit CorruptIndexException IOException IfStatement BinaryOperation != MemberReference pendingCommit Literal null BlockStatement TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""commit: pendingCommit != null"" message End StatementExpression MethodInvocation pendingCommit MemberReference directory finishCommit IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""commit: wrote segments file \"""" MethodInvocation pendingCommit getCurrentSegmentFileName Literal ""\"""" message End StatementExpression Assignment MemberReference lastCommitChangeCount MemberReference pendingCommitChangeCount = StatementExpression MethodInvocation segmentInfos MemberReference pendingCommit updateGeneration StatementExpression MethodInvocation segmentInfos MethodInvocation pendingCommit getUserData setUserData StatementExpression MethodInvocation MemberReference pendingCommit setRollbackSegmentInfos StatementExpression MethodInvocation deleter MemberReference pendingCommit Literal true checkpoint StatementExpression MethodInvocation deleter MemberReference pendingCommit decRef StatementExpression Assignment MemberReference pendingCommit Literal null = StatementExpression MethodInvocation notifyAll IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""commit: pendingCommit == null; skip"" message End End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""commit: done"" message End MethodDeclaration /**
   * Flush all in-memory buffered udpates (adds and deletes)
   * to the Directory.
   * @param triggerMerge if true, we may merge segments (if
   *  deletes or docs were flushed) if necessary
   * @param flushDocStores if false we are allowed to keep
   *  doc stores open to share with the next segment
   * @param flushDeletes whether pending deletes should also
   *  be flushed
   */ Modifier final protected flush FormalParameter BasicType boolean triggerMerge FormalParameter BasicType boolean flushDocStores FormalParameter BasicType boolean flushDeletes CorruptIndexException IOException StatementExpression MethodInvocation Literal false ensureOpen IfStatement BinaryOperation && MethodInvocation MemberReference flushDocStores MemberReference flushDeletes doFlush MemberReference triggerMerge StatementExpression MethodInvocation maybeMerge End MethodDeclaration Modifier private final synchronized BasicType boolean doFlush FormalParameter BasicType boolean flushDocStores FormalParameter BasicType boolean flushDeletes CorruptIndexException IOException TryStatement ReturnStatement MethodInvocation MemberReference flushDocStores MemberReference flushDeletes doFlushInternal StatementExpression MethodInvocation docWriter clearFlushPending MethodDeclaration Modifier private final synchronized BasicType boolean doFlushInternal FormalParameter BasicType boolean flushDocStores FormalParameter BasicType boolean flushDeletes CorruptIndexException IOException IfStatement MemberReference hitOOM BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""this writer hit an OutOfMemoryError; cannot flush"" End StatementExpression MethodInvocation Literal false ensureOpen AssertStatement MethodInvocation Literal ""startDoFlush"" testPoint StatementExpression MemberReference ++ flushCount StatementExpression Assignment MemberReference flushDeletes MethodInvocation docWriter doApplyDeletes |= IfStatement MethodInvocation docWriter pauseAllThreads BlockStatement StatementExpression MethodInvocation docWriter resumeAllThreads ReturnStatement Literal false End TryStatement LocalVariableDeclaration ReferenceType SegmentInfo VariableDeclarator newSegment Literal null LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numDocs MethodInvocation docWriter getNumDocsInRAM LocalVariableDeclaration BasicType boolean VariableDeclarator flushDocs BinaryOperation > MemberReference numDocs Literal 0 LocalVariableDeclaration ReferenceType String VariableDeclarator docStoreSegment MethodInvocation docWriter getDocStoreSegment AssertStatement BinaryOperation || BinaryOperation != MemberReference docStoreSegment Literal null BinaryOperation == MemberReference numDocs Literal 0 BinaryOperation + BinaryOperation + BinaryOperation + Literal ""dss="" MemberReference docStoreSegment Literal "" numDocs="" MemberReference numDocs IfStatement BinaryOperation == MemberReference docStoreSegment Literal null StatementExpression Assignment MemberReference flushDocStores Literal false = End LocalVariableDeclaration BasicType int VariableDeclarator docStoreOffset MethodInvocation docWriter getDocStoreOffset LocalVariableDeclaration BasicType boolean VariableDeclarator docStoreIsCompoundFile Literal false IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""  flush: segment="" MethodInvocation docWriter getSegment Literal "" docStoreSegment="" MethodInvocation docWriter getDocStoreSegment Literal "" docStoreOffset="" MemberReference docStoreOffset Literal "" flushDocs="" MemberReference flushDocs Literal "" flushDeletes="" MemberReference flushDeletes Literal "" flushDocStores="" MemberReference flushDocStores Literal "" numDocs="" MemberReference numDocs Literal "" numBufDelTerms="" MethodInvocation docWriter getNumBufferedDeleteTerms message StatementExpression MethodInvocation BinaryOperation + Literal ""  index before flush "" MethodInvocation segString message End IfStatement BinaryOperation && MemberReference flushDocStores BinaryOperation || MemberReference ! flushDocs MethodInvocation ! docWriter MethodInvocation MethodInvocation docWriter getDocStoreSegment equals getSegment BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""  flush shared docStore segment "" MemberReference docStoreSegment message End StatementExpression Assignment MemberReference docStoreIsCompoundFile MethodInvocation flushDocStores = StatementExpression Assignment MemberReference flushDocStores Literal false = End LocalVariableDeclaration ReferenceType String VariableDeclarator segment MethodInvocation docWriter getSegment AssertStatement BinaryOperation || BinaryOperation != MemberReference segment Literal null MemberReference ! flushDocs IfStatement MemberReference flushDocs BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false LocalVariableDeclaration Modifier final BasicType int VariableDeclarator flushedDocCount TryStatement StatementExpression Assignment MemberReference flushedDocCount MethodInvocation docWriter MemberReference flushDocStores flush = StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""hit exception flushing segment "" MemberReference segment message End StatementExpression MethodInvocation deleter MemberReference segment refresh End IfStatement BinaryOperation && BinaryOperation == Literal 0 MemberReference docStoreOffset MemberReference flushDocStores BlockStatement AssertStatement BinaryOperation != MemberReference docStoreSegment Literal null AssertStatement MethodInvocation docStoreSegment MemberReference segment equals StatementExpression Assignment MemberReference docStoreOffset Literal - 1 = StatementExpression Assignment MemberReference docStoreIsCompoundFile Literal false = StatementExpression Assignment MemberReference docStoreSegment Literal null = End StatementExpression Assignment MemberReference newSegment ClassCreator ReferenceType SegmentInfo MemberReference segment MemberReference flushedDocCount MemberReference directory Literal false Literal true MemberReference docStoreOffset MemberReference docStoreSegment MemberReference docStoreIsCompoundFile MethodInvocation docWriter hasProx = StatementExpression MethodInvocation MemberReference newSegment Literal ""flush"" setDiagnostics End StatementExpression MethodInvocation docWriter pushDeletes IfStatement MemberReference flushDocs BlockStatement StatementExpression MethodInvocation segmentInfos MemberReference newSegment add StatementExpression MethodInvocation checkpoint End IfStatement BinaryOperation && MemberReference flushDocs MethodInvocation mergePolicy MemberReference segmentInfos MemberReference newSegment useCompoundFile BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation docWriter MemberReference segment createCompoundFile StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""hit exception creating compound file for newly flushed segment "" MemberReference segment message End StatementExpression MethodInvocation deleter BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames COMPOUND_FILE_EXTENSION deleteFile End StatementExpression MethodInvocation newSegment Literal true setUseCompoundFile StatementExpression MethodInvocation checkpoint End IfStatement MemberReference flushDeletes BlockStatement StatementExpression MemberReference ++ flushDeletesCount StatementExpression MethodInvocation applyDeletes End IfStatement MemberReference flushDocs StatementExpression MethodInvocation checkpoint End StatementExpression MethodInvocation doAfterFlush ReturnStatement MemberReference flushDocs CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""doFlush"" handleOOM ReturnStatement Literal false StatementExpression MethodInvocation docWriter resumeAllThreads MethodDeclaration /** Expert:  Return the total size of all index files currently cached in memory.
   * Useful for size management with flushRamDocs()
   */ Modifier public final BasicType long ramSizeInBytes StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation docWriter getRAMUsed MethodDeclaration /** Expert:  Return the number of documents currently
   *  buffered in RAM. */ Modifier public final synchronized BasicType int numRamDocs StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation docWriter getNumDocsInRAM MethodDeclaration Modifier private BasicType int ensureContiguousMerge FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge LocalVariableDeclaration BasicType int VariableDeclarator first MethodInvocation segmentInfos MethodInvocation merge.segments Literal 0 info indexOf IfStatement BinaryOperation == MemberReference first Literal - 1 ThrowStatement ClassCreator ReferenceType MergePolicy ReferenceType MergeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""could not find segment "" MethodInvocation merge.segments MemberReference name Literal 0 info Literal "" in current index "" MethodInvocation segString MemberReference directory End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numSegments MethodInvocation segmentInfos size LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numSegmentsToMerge MethodInvocation merge.segments size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegmentsToMerge MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation merge.segments MemberReference i info IfStatement BinaryOperation || BinaryOperation >= BinaryOperation + MemberReference first MemberReference i MemberReference numSegments MethodInvocation ! segmentInfos MethodInvocation MemberReference info equals BinaryOperation + MemberReference first MemberReference i info BlockStatement IfStatement BinaryOperation == MethodInvocation segmentInfos MemberReference info indexOf Literal - 1 ThrowStatement ClassCreator ReferenceType MergePolicy ReferenceType MergeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""MergePolicy selected a segment ("" MemberReference info name Literal "") that is not in the current index "" MethodInvocation segString MemberReference directory ThrowStatement ClassCreator ReferenceType MergePolicy ReferenceType MergeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""MergePolicy selected non-contiguous segments to merge ("" MethodInvocation merge MemberReference directory segString Literal "" vs "" MethodInvocation segString Literal ""), which IndexWriter (currently) cannot handle"" MemberReference directory End End End ReturnStatement MemberReference first MethodDeclaration /** Carefully merges deletes for the segments we just
   *  merged.  This is tricky because, although merging will
   *  clear all deletes (compacts the documents), new
   *  deletes may have been flushed to the segments since
   *  the merge was started.  This method ""carries over""
   *  such new deletes onto the newly merged segment, and
   *  saves the resulting deletes file (incrementing the
   *  delete generation for merge.info).  If no deletes were
   *  flushed, no new deletes file is saved. */ Modifier private synchronized commitMergedDeletes FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge FormalParameter ReferenceType SegmentReader mergeReader IOException AssertStatement MethodInvocation Literal ""startCommitMergeDeletes"" testPoint LocalVariableDeclaration Modifier final ReferenceType SegmentInfos VariableDeclarator sourceSegments MemberReference merge segments IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""commitMergeDeletes "" MethodInvocation merge MemberReference directory segString message End LocalVariableDeclaration BasicType int VariableDeclarator docUpto Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator delCount Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation sourceSegments size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType SegmentInfo VariableDeclarator info MethodInvocation sourceSegments MemberReference i info LocalVariableDeclaration BasicType int VariableDeclarator docCount MemberReference info docCount LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator previousReader MemberReference merge ArraySelector MemberReference i readersClone LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator currentReader MemberReference merge ArraySelector MemberReference i readers IfStatement MethodInvocation previousReader hasDeletions BlockStatement IfStatement BinaryOperation > MethodInvocation currentReader numDeletedDocs MethodInvocation previousReader numDeletedDocs BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference docCount MemberReference ++ j BlockStatement IfStatement MethodInvocation previousReader MemberReference j isDeleted AssertStatement MethodInvocation currentReader MemberReference j isDeleted BlockStatement IfStatement MethodInvocation currentReader MemberReference j isDeleted BlockStatement StatementExpression MethodInvocation mergeReader MemberReference docUpto doDelete StatementExpression MemberReference ++ delCount End StatementExpression MemberReference ++ docUpto End End BlockStatement StatementExpression Assignment MemberReference docUpto BinaryOperation - MemberReference docCount MethodInvocation previousReader numDeletedDocs += End IfStatement MethodInvocation currentReader hasDeletions BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference docCount MemberReference ++ j BlockStatement IfStatement MethodInvocation currentReader MemberReference j isDeleted BlockStatement StatementExpression MethodInvocation mergeReader MemberReference docUpto doDelete StatementExpression MemberReference ++ delCount End StatementExpression MemberReference ++ docUpto End StatementExpression Assignment MemberReference docUpto MemberReference info docCount += End End End AssertStatement BinaryOperation == MethodInvocation mergeReader numDeletedDocs MemberReference delCount StatementExpression Assignment MemberReference mergeReader hasChanges BinaryOperation >= MemberReference delCount Literal 0 = MethodDeclaration Modifier private synchronized BasicType boolean commitMerge FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge FormalParameter ReferenceType SegmentMerger merger FormalParameter BasicType int mergedDocCount FormalParameter ReferenceType SegmentReader mergedReader IOException AssertStatement MethodInvocation Literal ""startCommitMerge"" testPoint IfStatement MemberReference hitOOM BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""this writer hit an OutOfMemoryError; cannot complete merge"" End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""commitMerge: "" MethodInvocation merge MemberReference directory segString Literal "" index="" MethodInvocation segString message End AssertStatement MemberReference merge registerDone IfStatement MethodInvocation merge isAborted BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""commitMerge: skipping merge "" MethodInvocation merge MemberReference directory segString Literal "": it was aborted"" message End StatementExpression MethodInvocation deleter MemberReference merge.info name refresh ReturnStatement Literal false End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator start MethodInvocation MemberReference merge ensureContiguousMerge StatementExpression MethodInvocation MemberReference merge MemberReference mergedReader commitMergedDeletes StatementExpression MethodInvocation docWriter MemberReference segmentInfos MethodInvocation merger getDocMaps MethodInvocation merger getDelCounts MemberReference merge MemberReference mergedDocCount remapDeletes LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator mergeDocStoreSegment MethodInvocation merge.info getDocStoreSegment IfStatement BinaryOperation && BinaryOperation != MemberReference mergeDocStoreSegment Literal null MethodInvocation ! merge.info getDocStoreIsCompoundFile BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation segmentInfos size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation segmentInfos MemberReference i info LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator docStoreSegment MethodInvocation info getDocStoreSegment IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference docStoreSegment Literal null MethodInvocation docStoreSegment MemberReference mergeDocStoreSegment equals MethodInvocation info getDocStoreIsCompoundFile BlockStatement StatementExpression MethodInvocation merge.info Literal true setDocStoreIsCompoundFile BreakStatement End End End StatementExpression MethodInvocation merge.info MethodInvocation merger hasProx setHasProx StatementExpression MethodInvocation segmentInfos MethodInvocation clear MemberReference start BinaryOperation + MemberReference start MethodInvocation merge.segments size subList AssertStatement MethodInvocation ! segmentInfos MemberReference merge info contains StatementExpression MethodInvocation segmentInfos MemberReference start MemberReference merge info add StatementExpression MethodInvocation checkpoint StatementExpression MethodInvocation readerPool MemberReference merge segments clear IfStatement MemberReference merge optimize StatementExpression MethodInvocation segmentsToOptimize MemberReference merge info add End ReturnStatement Literal true MethodDeclaration Modifier private synchronized decrefMergeSegments FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge IOException AssertStatement MemberReference merge increfDone StatementExpression Assignment MemberReference merge increfDone Literal false = MethodDeclaration Modifier private final handleMergeException FormalParameter ReferenceType Throwable t FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge IOException IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""handleMergeException: merge="" MethodInvocation merge MemberReference directory segString Literal "" exc="" MemberReference t message End StatementExpression MethodInvocation merge MemberReference t setException StatementExpression MethodInvocation MemberReference merge addMergeException IfStatement BinaryOperation instanceof MemberReference t ReferenceType MergePolicy ReferenceType MergeAbortedException BlockStatement IfStatement MemberReference merge isExternal ThrowStatement Cast ReferenceType MergePolicy ReferenceType MergeAbortedException MemberReference t End IfStatement BinaryOperation instanceof MemberReference t ReferenceType IOException ThrowStatement Cast ReferenceType IOException MemberReference t IfStatement BinaryOperation instanceof MemberReference t ReferenceType RuntimeException ThrowStatement Cast ReferenceType RuntimeException MemberReference t IfStatement BinaryOperation instanceof MemberReference t ReferenceType Error ThrowStatement Cast ReferenceType Error MemberReference t ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference t End End End End MethodDeclaration /**
   * Merges the indicated segments, replacing them in the stack with a
   * single segment.
   */ Modifier final merge FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge CorruptIndexException IOException LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement TryStatement TryStatement StatementExpression MethodInvocation MemberReference merge mergeInit IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""now merge\n  merge="" MethodInvocation merge MemberReference directory segString Literal ""\n  merge="" MemberReference merge Literal ""\n  index="" MethodInvocation segString message End StatementExpression MethodInvocation MemberReference merge mergeMiddle StatementExpression MethodInvocation MemberReference merge mergeSuccess StatementExpression Assignment MemberReference success Literal true = CatchClause CatchClauseParameter Throwable t StatementExpression MethodInvocation MemberReference t MemberReference merge handleMergeException SynchronizedStatement This StatementExpression MethodInvocation MemberReference merge mergeFinish IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception during merge"" message End IfStatement BinaryOperation && BinaryOperation != MemberReference merge info Literal null MethodInvocation ! segmentInfos MemberReference merge info contains StatementExpression MethodInvocation deleter MemberReference merge.info name refresh End End IfStatement BinaryOperation && BinaryOperation && BinaryOperation && MemberReference success MethodInvocation ! merge isAborted MemberReference ! closed MemberReference ! closing StatementExpression MethodInvocation MemberReference merge maxNumSegmentsOptimize MemberReference merge optimize updatePendingMerges End CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""merge"" handleOOM MethodDeclaration /** Hook that's called when the specified merge is complete. */ mergeSuccess FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge MethodDeclaration /** Checks whether this merge involves any segments
   *  already participating in a merge.  If not, this merge
   *  is ""registered"", meaning we record that its segments
   *  are now participating in a merge, and true is
   *  returned.  Else (the merge conflicts) false is
   *  returned. */ Modifier final synchronized BasicType boolean registerMerge FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge MergePolicy.MergeAbortedException IfStatement MemberReference merge registerDone ReturnStatement Literal true End IfStatement MemberReference stopMerges BlockStatement StatementExpression MethodInvocation merge abort ThrowStatement ClassCreator ReferenceType MergePolicy ReferenceType MergeAbortedException BinaryOperation + Literal ""merge is aborted: "" MethodInvocation merge MemberReference directory segString End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator count MethodInvocation merge.segments size LocalVariableDeclaration BasicType boolean VariableDeclarator isExternal Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation merge.segments MemberReference i info IfStatement MethodInvocation mergingSegments MemberReference info contains ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation segmentInfos MemberReference info indexOf Literal - 1 ReturnStatement Literal false End IfStatement BinaryOperation != MemberReference info dir MemberReference directory StatementExpression Assignment MemberReference isExternal Literal true = End End StatementExpression MethodInvocation MemberReference merge ensureContiguousMerge StatementExpression MethodInvocation pendingMerges MemberReference merge add IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""add merge to pendingMerges: "" MethodInvocation merge MemberReference directory segString Literal "" [total "" MethodInvocation pendingMerges size Literal "" pending]"" message End StatementExpression Assignment MemberReference merge mergeGen MemberReference mergeGen = StatementExpression Assignment MemberReference merge isExternal MemberReference isExternal = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i StatementExpression MethodInvocation mergingSegments MethodInvocation merge.segments MemberReference i info add End StatementExpression Assignment MemberReference merge registerDone Literal true = ReturnStatement Literal true MethodDeclaration /** Does initial setup for a merge, which is fast but holds
   *  the synchronized lock on IndexWriter instance.  */ Modifier final synchronized mergeInit FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge IOException LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation MemberReference merge _mergeInit StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation MemberReference merge mergeFinish End MethodDeclaration Modifier private final synchronized _mergeInit FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge IOException AssertStatement MethodInvocation Literal ""startMergeInit"" testPoint AssertStatement MemberReference merge registerDone AssertStatement BinaryOperation || MemberReference ! merge optimize BinaryOperation > MemberReference merge maxNumSegmentsOptimize Literal 0 IfStatement MemberReference hitOOM BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""this writer hit an OutOfMemoryError; cannot merge"" End IfStatement BinaryOperation != MemberReference merge info Literal null ReturnStatement End IfStatement MethodInvocation merge isAborted ReturnStatement End StatementExpression MethodInvocation applyDeletes LocalVariableDeclaration Modifier final ReferenceType SegmentInfos VariableDeclarator sourceSegments MemberReference merge segments LocalVariableDeclaration Modifier final BasicType int VariableDeclarator end MethodInvocation sourceSegments size LocalVariableDeclaration ReferenceType Directory VariableDeclarator lastDir MemberReference directory LocalVariableDeclaration ReferenceType String VariableDeclarator lastDocStoreSegment Literal null LocalVariableDeclaration BasicType int VariableDeclarator next Literal - 1 LocalVariableDeclaration BasicType boolean VariableDeclarator mergeDocStores Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator doFlushDocStore Literal false LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator currentDocStoreSegment MethodInvocation docWriter getDocStoreSegment ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference end MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType SegmentInfo VariableDeclarator si MethodInvocation sourceSegments MemberReference i info IfStatement MethodInvocation si hasDeletions StatementExpression Assignment MemberReference mergeDocStores Literal true = End IfStatement BinaryOperation == Literal - 1 MethodInvocation si getDocStoreOffset StatementExpression Assignment MemberReference mergeDocStores Literal true = End LocalVariableDeclaration ReferenceType String VariableDeclarator docStoreSegment MethodInvocation si getDocStoreSegment IfStatement BinaryOperation == MemberReference docStoreSegment Literal null StatementExpression Assignment MemberReference mergeDocStores Literal true = IfStatement BinaryOperation == MemberReference lastDocStoreSegment Literal null StatementExpression Assignment MemberReference lastDocStoreSegment MemberReference docStoreSegment = IfStatement MethodInvocation ! lastDocStoreSegment MemberReference docStoreSegment equals StatementExpression Assignment MemberReference mergeDocStores Literal true = End End End IfStatement BinaryOperation == Literal - 1 MemberReference next StatementExpression Assignment MemberReference next BinaryOperation + MethodInvocation si getDocStoreOffset MemberReference si docCount = IfStatement BinaryOperation != MemberReference next MethodInvocation si getDocStoreOffset StatementExpression Assignment MemberReference mergeDocStores Literal true = StatementExpression Assignment MemberReference next BinaryOperation + MethodInvocation si getDocStoreOffset MemberReference si docCount = End End IfStatement BinaryOperation != MemberReference lastDir MemberReference si dir StatementExpression Assignment MemberReference mergeDocStores Literal true = End IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MethodInvocation si getDocStoreOffset Literal - 1 BinaryOperation != MemberReference currentDocStoreSegment Literal null MethodInvocation si MethodInvocation MemberReference currentDocStoreSegment equals getDocStoreSegment BlockStatement StatementExpression Assignment MemberReference doFlushDocStore Literal true = End End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator docStoreOffset LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator docStoreSegment LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator docStoreIsCompoundFile IfStatement MemberReference mergeDocStores BlockStatement StatementExpression Assignment MemberReference docStoreOffset Literal - 1 = StatementExpression Assignment MemberReference docStoreSegment Literal null = StatementExpression Assignment MemberReference docStoreIsCompoundFile Literal false = BlockStatement LocalVariableDeclaration ReferenceType SegmentInfo VariableDeclarator si MethodInvocation sourceSegments Literal 0 info StatementExpression Assignment MemberReference docStoreOffset MethodInvocation si getDocStoreOffset = StatementExpression Assignment MemberReference docStoreSegment MethodInvocation si getDocStoreSegment = StatementExpression Assignment MemberReference docStoreIsCompoundFile MethodInvocation si getDocStoreIsCompoundFile = End IfStatement BinaryOperation && MemberReference mergeDocStores MemberReference doFlushDocStore BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""now flush at merge"" message End StatementExpression MethodInvocation Literal true Literal false doFlush End StatementExpression Assignment MemberReference merge increfDone Literal true = StatementExpression Assignment MemberReference merge mergeDocStores MemberReference mergeDocStores = StatementExpression Assignment MemberReference merge info ClassCreator ReferenceType SegmentInfo MethodInvocation newSegmentName Literal 0 MemberReference directory Literal false Literal true MemberReference docStoreOffset MemberReference docStoreSegment MemberReference docStoreIsCompoundFile Literal false = LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator details ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String StatementExpression MethodInvocation details Literal ""optimize"" BinaryOperation + MemberReference merge optimize Literal """" put StatementExpression MethodInvocation details Literal ""mergeFactor"" BinaryOperation + MemberReference end Literal """" put StatementExpression MethodInvocation details Literal ""mergeDocStores"" BinaryOperation + MemberReference mergeDocStores Literal """" put StatementExpression MethodInvocation MemberReference merge info Literal ""merge"" MemberReference details setDiagnostics StatementExpression MethodInvocation mergingSegments MemberReference merge info add MethodDeclaration Modifier private setDiagnostics FormalParameter ReferenceType SegmentInfo info FormalParameter ReferenceType String source StatementExpression MethodInvocation MemberReference info MemberReference source Literal null setDiagnostics MethodDeclaration Modifier private setDiagnostics FormalParameter ReferenceType SegmentInfo info FormalParameter ReferenceType String source FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String details LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator diagnostics ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String StatementExpression MethodInvocation diagnostics Literal ""source"" MemberReference source put StatementExpression MethodInvocation diagnostics Literal ""lucene.version"" MemberReference Constants LUCENE_VERSION put StatementExpression MethodInvocation diagnostics Literal ""os"" BinaryOperation + MemberReference Constants OS_NAME Literal """" put StatementExpression MethodInvocation diagnostics Literal ""os.arch"" BinaryOperation + MemberReference Constants OS_ARCH Literal """" put StatementExpression MethodInvocation diagnostics Literal ""os.version"" BinaryOperation + MemberReference Constants OS_VERSION Literal """" put StatementExpression MethodInvocation diagnostics Literal ""java.version"" BinaryOperation + MemberReference Constants JAVA_VERSION Literal """" put StatementExpression MethodInvocation diagnostics Literal ""java.vendor"" BinaryOperation + MemberReference Constants JAVA_VENDOR Literal """" put IfStatement BinaryOperation != MemberReference details Literal null BlockStatement StatementExpression MethodInvocation diagnostics MemberReference details putAll End StatementExpression MethodInvocation info MemberReference diagnostics setDiagnostics MethodDeclaration /** Does fininishing for a merge, which is fast but holds
   *  the synchronized lock on IndexWriter instance. */ Modifier final synchronized mergeFinish FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge IOException StatementExpression MethodInvocation notifyAll IfStatement MemberReference merge increfDone StatementExpression MethodInvocation MemberReference merge decrefMergeSegments End IfStatement MemberReference merge registerDone BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentInfos VariableDeclarator sourceSegments MemberReference merge segments LocalVariableDeclaration Modifier final BasicType int VariableDeclarator end MethodInvocation sourceSegments size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference end MemberReference ++ i StatementExpression MethodInvocation mergingSegments MethodInvocation sourceSegments MemberReference i info remove End StatementExpression MethodInvocation mergingSegments MemberReference merge info remove StatementExpression Assignment MemberReference merge registerDone Literal false = End StatementExpression MethodInvocation runningMerges MemberReference merge remove MethodDeclaration /** Does the actual (time-consuming) work of the merge,
   *  but without holding synchronized lock on IndexWriter
   *  instance */ Modifier private final BasicType int mergeMiddle FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge CorruptIndexException IOException StatementExpression MethodInvocation merge MemberReference directory checkAborted LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator mergedName MemberReference merge.info name LocalVariableDeclaration ReferenceType SegmentMerger VariableDeclarator merger Literal null LocalVariableDeclaration BasicType int VariableDeclarator mergedDocCount Literal 0 LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator sourceSegments MemberReference merge segments LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numSegments MethodInvocation sourceSegments size IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""merging "" MethodInvocation merge MemberReference directory segString message End StatementExpression Assignment MemberReference merger ClassCreator ReferenceType SegmentMerger This MemberReference mergedName MemberReference merge = StatementExpression Assignment MemberReference merge readers ArrayCreator ReferenceType SegmentReader MemberReference numSegments = StatementExpression Assignment MemberReference merge readersClone ArrayCreator ReferenceType SegmentReader MemberReference numSegments = LocalVariableDeclaration BasicType boolean VariableDeclarator mergeDocStores Literal false LocalVariableDeclaration Modifier final ReferenceType Set TypeArgument ReferenceType String VariableDeclarator dss ClassCreator ReferenceType HashSet TypeArgument ReferenceType String LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement LocalVariableDeclaration BasicType int VariableDeclarator totDocCount Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation sourceSegments MemberReference i info LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator reader Assignment MemberReference merge ArraySelector MemberReference i readers MethodInvocation readerPool MemberReference info MemberReference merge mergeDocStores MemberReference MERGE_READ_BUFFER_SIZE Literal - 1 get = LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator clone Assignment MemberReference merge ArraySelector MemberReference i readersClone Cast ReferenceType SegmentReader MethodInvocation reader Literal true clone = StatementExpression MethodInvocation merger MemberReference clone add IfStatement MethodInvocation clone hasDeletions BlockStatement StatementExpression Assignment MemberReference mergeDocStores Literal true = End IfStatement BinaryOperation != MethodInvocation info getDocStoreOffset Literal - 1 BlockStatement StatementExpression MethodInvocation dss MethodInvocation info getDocStoreSegment add End StatementExpression Assignment MemberReference totDocCount MethodInvocation clone numDocs += End IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""merge: total "" MemberReference totDocCount Literal "" docs"" message End StatementExpression MethodInvocation merge MemberReference directory checkAborted IfStatement BinaryOperation && MemberReference mergeDocStores MemberReference ! merge mergeDocStores BlockStatement StatementExpression Assignment MemberReference merge mergeDocStores Literal true = SynchronizedStatement This IfStatement MethodInvocation dss MethodInvocation docWriter getDocStoreSegment contains BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""now flush at mergeMiddle"" message End StatementExpression MethodInvocation Literal true Literal false doFlush End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i BlockStatement StatementExpression MemberReference merge ArraySelector MemberReference i MethodInvocation openDocStores readersClone End SynchronizedStatement This StatementExpression MethodInvocation merge.info Literal - 1 Literal null Literal false setDocStore End StatementExpression Assignment MemberReference mergedDocCount Assignment MemberReference merge.info docCount MethodInvocation merger MemberReference merge mergeDocStores merge = = AssertStatement BinaryOperation == MemberReference mergedDocCount MemberReference totDocCount LocalVariableDeclaration Modifier final ReferenceType SegmentReader VariableDeclarator mergedReader MethodInvocation readerPool MemberReference merge info Literal false MemberReference BufferedIndexInput BUFFER_SIZE Literal - 1 get TryStatement IfStatement BinaryOperation && MemberReference poolReaders BinaryOperation != MemberReference mergedSegmentWarmer Literal null BlockStatement StatementExpression MethodInvocation mergedSegmentWarmer MemberReference mergedReader warm End IfStatement MethodInvocation ! MemberReference merge MemberReference merger MemberReference mergedDocCount MemberReference mergedReader commitMerge ReturnStatement Literal 0 End SynchronizedStatement This StatementExpression MethodInvocation readerPool MemberReference mergedReader release StatementExpression Assignment MemberReference success Literal true = SynchronizedStatement This IfStatement MemberReference ! success BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference merge ArraySelector MemberReference i readers Literal null BlockStatement TryStatement StatementExpression MethodInvocation readerPool MemberReference merge ArraySelector MemberReference i readers Literal true release CatchClause CatchClauseParameter Throwable t End IfStatement BinaryOperation != MemberReference merge ArraySelector MemberReference i readersClone Literal null BlockStatement TryStatement StatementExpression MemberReference merge ArraySelector MemberReference i MethodInvocation close readersClone CatchClause CatchClauseParameter Throwable t AssertStatement BinaryOperation == MemberReference merge ArraySelector MemberReference i MethodInvocation getRefCount readersClone Literal 0 End End BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference merge ArraySelector MemberReference i readers Literal null BlockStatement StatementExpression MethodInvocation readerPool MemberReference merge ArraySelector MemberReference i readers Literal true release End IfStatement BinaryOperation != MemberReference merge ArraySelector MemberReference i readersClone Literal null BlockStatement StatementExpression MemberReference merge ArraySelector MemberReference i MethodInvocation close readersClone AssertStatement BinaryOperation == MemberReference merge ArraySelector MemberReference i MethodInvocation getRefCount readersClone Literal 0 End End End SynchronizedStatement This StatementExpression MethodInvocation deleter MemberReference segmentInfos Literal false checkpoint StatementExpression MethodInvocation MemberReference merge decrefMergeSegments IfStatement MemberReference merge useCompoundFile BlockStatement StatementExpression Assignment MemberReference success Literal false = LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator compoundFileName BinaryOperation + BinaryOperation + MemberReference mergedName Literal ""."" MemberReference IndexFileNames COMPOUND_FILE_EXTENSION TryStatement StatementExpression MethodInvocation merger MemberReference compoundFileName createCompoundFile StatementExpression Assignment MemberReference success Literal true = CatchClause CatchClauseParameter IOException ioe SynchronizedStatement This IfStatement MethodInvocation merge isAborted BlockStatement StatementExpression Assignment MemberReference success Literal true = StatementExpression MethodInvocation MemberReference ioe MemberReference merge handleMergeException End CatchClause CatchClauseParameter Throwable t StatementExpression MethodInvocation MemberReference t MemberReference merge handleMergeException IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception creating compound file during merge"" message End SynchronizedStatement This StatementExpression MethodInvocation deleter MemberReference compoundFileName deleteFile End IfStatement MethodInvocation merge isAborted BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""abort merge after building CFS"" message End StatementExpression MethodInvocation deleter MemberReference compoundFileName deleteFile ReturnStatement Literal 0 End SynchronizedStatement This IfStatement BinaryOperation || BinaryOperation == MethodInvocation segmentInfos MemberReference merge info indexOf Literal - 1 MethodInvocation merge isAborted BlockStatement StatementExpression MethodInvocation deleter MemberReference compoundFileName deleteFile BlockStatement StatementExpression MethodInvocation merge.info Literal true setUseCompoundFile StatementExpression MethodInvocation checkpoint End End ReturnStatement MemberReference mergedDocCount MethodDeclaration Modifier synchronized addMergeException FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge AssertStatement BinaryOperation != MethodInvocation merge getException Literal null IfStatement BinaryOperation && MethodInvocation ! mergeExceptions MemberReference merge contains BinaryOperation == MemberReference mergeGen MemberReference merge mergeGen StatementExpression MethodInvocation mergeExceptions MemberReference merge add End MethodDeclaration Modifier private final synchronized BasicType boolean applyDeletes CorruptIndexException IOException AssertStatement MethodInvocation Literal ""startApplyDeletes"" testPoint LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator rollback Cast ReferenceType SegmentInfos MethodInvocation segmentInfos clone LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator changed TryStatement StatementExpression Assignment MemberReference changed MethodInvocation docWriter MemberReference segmentInfos applyDeletes = StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception flushing deletes"" message End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation rollback size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator newDelFileName MethodInvocation segmentInfos MethodInvocation getDelFileName MemberReference i info LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator delFileName MethodInvocation rollback MethodInvocation getDelFileName MemberReference i info IfStatement BinaryOperation && BinaryOperation != MemberReference newDelFileName Literal null MethodInvocation ! newDelFileName MemberReference delFileName equals StatementExpression MethodInvocation deleter MemberReference newDelFileName deleteFile End End StatementExpression MethodInvocation segmentInfos clear StatementExpression MethodInvocation segmentInfos MemberReference rollback addAll End IfStatement MemberReference changed StatementExpression MethodInvocation checkpoint End ReturnStatement MemberReference changed MethodDeclaration Modifier final synchronized BasicType int getBufferedDeleteTermsSize ReturnStatement MethodInvocation docWriter MethodInvocation size getBufferedDeleteTerms MethodDeclaration Modifier final synchronized BasicType int getNumBufferedDeleteTerms ReturnStatement MethodInvocation docWriter getNumBufferedDeleteTerms MethodDeclaration ReferenceType SegmentInfo newestSegment ReturnStatement MethodInvocation segmentInfos BinaryOperation - MethodInvocation segmentInfos size Literal 1 info MethodDeclaration Modifier public synchronized ReferenceType String segString ReturnStatement MethodInvocation MemberReference segmentInfos segString MethodDeclaration Modifier private synchronized ReferenceType String segString FormalParameter ReferenceType SegmentInfos infos LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder LocalVariableDeclaration Modifier final BasicType int VariableDeclarator count MethodInvocation infos size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation buffer Literal ' ' append End LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation infos MemberReference i info StatementExpression MethodInvocation buffer MethodInvocation info MemberReference directory segString append IfStatement BinaryOperation != MemberReference info dir MemberReference directory StatementExpression MethodInvocation buffer Literal ""**"" append End End ReturnStatement MethodInvocation buffer toString FieldDeclaration Modifier private ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator synced ClassCreator ReferenceType HashSet TypeArgument ReferenceType String FieldDeclaration Modifier private ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator syncing ClassCreator ReferenceType HashSet TypeArgument ReferenceType String MethodDeclaration Modifier private BasicType boolean startSync FormalParameter ReferenceType String fileName FormalParameter ReferenceType Collection TypeArgument ReferenceType String pending SynchronizedStatement MemberReference synced IfStatement MethodInvocation ! synced MemberReference fileName contains BlockStatement IfStatement MethodInvocation ! syncing MemberReference fileName contains BlockStatement StatementExpression MethodInvocation syncing MemberReference fileName add ReturnStatement Literal true BlockStatement StatementExpression MethodInvocation pending MemberReference fileName add ReturnStatement Literal false End ReturnStatement Literal false End MethodDeclaration Modifier private finishSync FormalParameter ReferenceType String fileName FormalParameter BasicType boolean success SynchronizedStatement MemberReference synced AssertStatement MethodInvocation syncing MemberReference fileName contains StatementExpression MethodInvocation syncing MemberReference fileName remove IfStatement MemberReference success StatementExpression MethodInvocation synced MemberReference fileName add End StatementExpression MethodInvocation synced notifyAll MethodDeclaration /** Blocks until all files in syncing are sync'd */ Modifier private BasicType boolean waitForAllSynced FormalParameter ReferenceType Collection TypeArgument ReferenceType String syncing IOException SynchronizedStatement MemberReference synced LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType String VariableDeclarator it MethodInvocation syncing iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName MethodInvocation it next WhileStatement MethodInvocation ! synced MemberReference fileName contains BlockStatement IfStatement MethodInvocation ! syncing MemberReference fileName contains ReturnStatement Literal false TryStatement StatementExpression MethodInvocation synced wait CatchClause CatchClauseParameter InterruptedException ie ThrowStatement ClassCreator ReferenceType ThreadInterruptedException MemberReference ie End End End ReturnStatement Literal true MethodDeclaration Modifier private synchronized doWait TryStatement StatementExpression MethodInvocation Literal 1000 wait CatchClause CatchClauseParameter InterruptedException ie ThrowStatement ClassCreator ReferenceType ThreadInterruptedException MemberReference ie MethodDeclaration /** Walk through all files referenced by the current
   *  segmentInfos and ask the Directory to sync each file,
   *  if it wasn't already.  If that succeeds, then we
   *  prepare a new segments_N file but do not fully commit
   *  it. */ Modifier private startCommit FormalParameter BasicType long sizeInBytes FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String commitUserData IOException AssertStatement MethodInvocation Literal ""startStartCommit"" testPoint IfStatement MemberReference hitOOM BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""this writer hit an OutOfMemoryError; cannot commit"" End TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""startCommit(): start sizeInBytes="" MemberReference sizeInBytes message End LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator toSync Literal null LocalVariableDeclaration Modifier final BasicType long VariableDeclarator myChangeCount SynchronizedStatement This StatementExpression MethodInvocation Literal false blockAddIndexes AssertStatement MethodInvocation ! hasExternalSegments TryStatement AssertStatement BinaryOperation <= MemberReference lastCommitChangeCount MemberReference changeCount IfStatement BinaryOperation == MemberReference changeCount MemberReference lastCommitChangeCount BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""  skip startCommit(): no changes pending"" message End ReturnStatement End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""startCommit index="" MethodInvocation MemberReference segmentInfos segString Literal "" changeCount="" MemberReference changeCount message End StatementExpression MethodInvocation readerPool commit StatementExpression Assignment MemberReference toSync Cast ReferenceType SegmentInfos MethodInvocation segmentInfos clone = IfStatement BinaryOperation != MemberReference commitUserData Literal null StatementExpression MethodInvocation toSync MemberReference commitUserData setUserData End StatementExpression MethodInvocation deleter MemberReference toSync Literal false incRef StatementExpression Assignment MemberReference myChangeCount MemberReference changeCount = LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType String VariableDeclarator files MethodInvocation toSync MemberReference directory Literal false files ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName MemberReference files BlockStatement AssertStatement MethodInvocation directory MemberReference fileName fileExists BinaryOperation + BinaryOperation + Literal ""file "" MemberReference fileName Literal "" does not exist"" End StatementExpression MethodInvocation resumeAddIndexes AssertStatement MethodInvocation Literal ""midStartCommit"" testPoint LocalVariableDeclaration BasicType boolean VariableDeclarator setPending Literal false TryStatement WhileStatement Literal true BlockStatement LocalVariableDeclaration Modifier final ReferenceType Collection TypeArgument ReferenceType String VariableDeclarator pending ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType String VariableDeclarator it MethodInvocation toSync MethodInvocation iterator MemberReference directory Literal false files WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName MethodInvocation it next IfStatement MethodInvocation MemberReference fileName MemberReference pending startSync BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement AssertStatement MethodInvocation directory MemberReference fileName fileExists BinaryOperation + BinaryOperation + BinaryOperation + Literal ""file '"" MemberReference fileName Literal ""' does not exist dir="" MemberReference directory IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""now sync "" MemberReference fileName message End StatementExpression MethodInvocation directory MemberReference fileName sync StatementExpression Assignment MemberReference success Literal true = StatementExpression MethodInvocation MemberReference fileName MemberReference success finishSync End End IfStatement MethodInvocation MemberReference pending waitForAllSynced BreakStatement End End AssertStatement MethodInvocation Literal ""midStartCommit2"" testPoint SynchronizedStatement This WhileStatement Literal true BlockStatement IfStatement BinaryOperation <= MemberReference myChangeCount MemberReference lastCommitChangeCount BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation Literal ""sync superseded by newer infos"" message End BreakStatement IfStatement BinaryOperation == MemberReference pendingCommit Literal null BlockStatement IfStatement BinaryOperation > MethodInvocation segmentInfos getGeneration MethodInvocation toSync getGeneration StatementExpression MethodInvocation toSync MemberReference segmentInfos updateGeneration End LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement TryStatement StatementExpression MethodInvocation toSync MemberReference directory prepareCommit StatementExpression MethodInvocation segmentInfos MemberReference toSync updateGeneration AssertStatement BinaryOperation == MemberReference pendingCommit Literal null StatementExpression Assignment MemberReference setPending Literal true = StatementExpression Assignment MemberReference pendingCommit MemberReference toSync = StatementExpression Assignment MemberReference pendingCommitChangeCount MemberReference myChangeCount = StatementExpression Assignment MemberReference success Literal true = IfStatement BinaryOperation && MemberReference ! success BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""hit exception committing segments file"" message End BreakStatement BlockStatement StatementExpression MethodInvocation doWait End End End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation Literal ""done all syncs"" message End AssertStatement MethodInvocation Literal ""midStartCommitSuccess"" testPoint SynchronizedStatement This IfStatement MemberReference ! setPending StatementExpression MethodInvocation deleter MemberReference toSync decRef End CatchClause CatchClauseParameter OutOfMemoryError oom StatementExpression MethodInvocation MemberReference oom Literal ""startCommit"" handleOOM AssertStatement MethodInvocation Literal ""finishStartCommit"" testPoint MethodDeclaration /**
   * Returns <code>true</code> iff the index in the named directory is
   * currently locked.
   * @param directory the directory to check for a lock
   * @throws IOException if there is a low-level IO error
   */ Modifier public static BasicType boolean isLocked FormalParameter ReferenceType Directory directory IOException ReturnStatement MethodInvocation directory MethodInvocation isLocked MemberReference WRITE_LOCK_NAME makeLock MethodDeclaration /**
   * Forcibly unlocks the index in the named directory.
   * <P>
   * Caution: this should only be used by failure recovery code,
   * when it is known that no other process nor thread is in fact
   * currently accessing this index.
   */ Modifier public static unlock FormalParameter ReferenceType Directory directory IOException StatementExpression MethodInvocation directory MethodInvocation release MemberReference IndexWriter WRITE_LOCK_NAME makeLock ClassDeclaration Modifier public final static /**
   * Specifies maximum field length (in number of tokens/terms) in {@link IndexWriter} constructors.
   * {@link #setMaxFieldLength(int)} overrides the value set by
   * the constructor.
   */ MaxFieldLength FieldDeclaration Modifier private BasicType int VariableDeclarator limit FieldDeclaration Modifier private ReferenceType String VariableDeclarator name ConstructorDeclaration Modifier private /**
     * Private type-safe-enum-pattern constructor.
     * 
     * @param name instance name
     * @param limit maximum field length
     */ MaxFieldLength FormalParameter ReferenceType String name FormalParameter BasicType int limit StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment This MemberReference limit MemberReference limit = ConstructorDeclaration Modifier public /**
     * Public constructor to allow users to specify the maximum field size limit.
     * 
     * @param limit The maximum field length
     */ MaxFieldLength FormalParameter BasicType int limit StatementExpression ExplicitConstructorInvocation Literal ""User-specified"" MemberReference limit MethodDeclaration Modifier public BasicType int getLimit ReturnStatement MemberReference limit MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + MemberReference name Literal "":"" MemberReference limit FieldDeclaration /** Sets the maximum field length to {@link Integer#MAX_VALUE}. */ Modifier public final static ReferenceType MaxFieldLength VariableDeclarator UNLIMITED ClassCreator ReferenceType MaxFieldLength Literal ""UNLIMITED"" MemberReference Integer MAX_VALUE FieldDeclaration /**
     *  Sets the maximum field length to 
     * {@link #DEFAULT_MAX_FIELD_LENGTH} 
     * */ Modifier public final static ReferenceType MaxFieldLength VariableDeclarator LIMITED ClassCreator ReferenceType MaxFieldLength Literal ""LIMITED"" MemberReference DEFAULT_MAX_FIELD_LENGTH ClassDeclaration Modifier public static abstract /** If {@link #getReader} has been called (ie, this writer
   *  is in near real-time mode), then after a merge
   *  completes, this class can be invoked to warm the
   *  reader on the newly merged segment, before the merge
   *  commits.  This is not required for near real-time
   *  search, but will reduce search latency on opening a
   *  new near real-time reader after a merge completes.
   *
   * <p><b>NOTE:</b> This API is experimental and might
   * change in incompatible ways in the next release.</p>
   *
   * <p><b>NOTE</b>: warm is called before any deletes have
   * been carried over to the merged segment. */ IndexReaderWarmer MethodDeclaration Modifier public abstract warm FormalParameter ReferenceType IndexReader reader IOException FieldDeclaration Modifier private ReferenceType IndexReaderWarmer VariableDeclarator mergedSegmentWarmer MethodDeclaration /** Set the merged segment warmer.  See {@link
   *  IndexReaderWarmer}. */ Modifier public setMergedSegmentWarmer FormalParameter ReferenceType IndexReaderWarmer warmer StatementExpression Assignment MemberReference mergedSegmentWarmer MemberReference warmer = MethodDeclaration /** Returns the current merged segment warmer.  See {@link
   *  IndexReaderWarmer}. */ Modifier public ReferenceType IndexReaderWarmer getMergedSegmentWarmer ReturnStatement MemberReference mergedSegmentWarmer MethodDeclaration Modifier private handleOOM FormalParameter ReferenceType OutOfMemoryError oom FormalParameter ReferenceType String location IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""hit OutOfMemoryError inside "" MemberReference location message End StatementExpression Assignment MemberReference hitOOM Literal true = ThrowStatement MemberReference oom MethodDeclaration BasicType boolean testPoint FormalParameter ReferenceType String name ReturnStatement Literal true MethodDeclaration Modifier synchronized BasicType boolean nrtIsCurrent FormalParameter ReferenceType SegmentInfos infos IfStatement MethodInvocation ! infos MemberReference segmentInfos equals BlockStatement ReturnStatement Literal false BlockStatement ReturnStatement MethodInvocation ! docWriter anyChanges End MethodDeclaration Modifier synchronized BasicType boolean isClosed ReturnStatement MemberReference closed ReferenceType Closeable",0
532,532,"CompilationUnit PackageDeclaration org.apache.lucene.search.regex Import java.util.regex.Pattern ClassDeclaration Modifier public /**
 * An implementation tying Java's built-in java.util.regex to RegexQuery.
 *
 * Note that because this implementation currently only returns null from
 * {@link #prefix} that queries using this implementation will enumerate and
 * attempt to {@link #match} each term for the specified field in the index.
 */ JavaUtilRegexCapabilities FieldDeclaration Modifier private ReferenceType Pattern VariableDeclarator pattern FieldDeclaration Modifier private BasicType int VariableDeclarator flags Literal 0 FieldDeclaration Modifier public final static BasicType int VariableDeclarator FLAG_CANON_EQ MemberReference Pattern CANON_EQ FieldDeclaration Modifier public final static BasicType int VariableDeclarator FLAG_CASE_INSENSITIVE MemberReference Pattern CASE_INSENSITIVE FieldDeclaration Modifier public final static BasicType int VariableDeclarator FLAG_COMMENTS MemberReference Pattern COMMENTS FieldDeclaration Modifier public final static BasicType int VariableDeclarator FLAG_DOTALL MemberReference Pattern DOTALL FieldDeclaration Modifier public final static BasicType int VariableDeclarator FLAG_LITERAL MemberReference Pattern LITERAL FieldDeclaration Modifier public final static BasicType int VariableDeclarator FLAG_MULTILINE MemberReference Pattern MULTILINE FieldDeclaration Modifier public final static BasicType int VariableDeclarator FLAG_UNICODE_CASE MemberReference Pattern UNICODE_CASE FieldDeclaration Modifier public final static BasicType int VariableDeclarator FLAG_UNIX_LINES MemberReference Pattern UNIX_LINES ConstructorDeclaration Modifier public /**
   * Default constructor that uses java.util.regex.Pattern 
   * with its default flags.
   */ JavaUtilRegexCapabilities StatementExpression Assignment This MemberReference flags Literal 0 = ConstructorDeclaration Modifier public /**
   * Constructor that allows for the modification of the flags that
   * the java.util.regex.Pattern will use to compile the regular expression.
   * This gives the user the ability to fine-tune how the regular expression 
   * to match the functionality that they need. 
   * The {@link java.util.regex.Pattern Pattern} class supports specifying 
   * these fields via the regular expression text itself, but this gives the caller
   * another option to modify the behavior. Useful in cases where the regular expression text
   * cannot be modified, or if doing so is undesired.
   * 
   * @param flags The flags that are ORed together.
   */ JavaUtilRegexCapabilities FormalParameter BasicType int flags StatementExpression Assignment This MemberReference flags MemberReference flags = MethodDeclaration Modifier public compile FormalParameter ReferenceType String pattern StatementExpression Assignment This MemberReference pattern MethodInvocation Pattern MemberReference pattern This MemberReference flags compile = MethodDeclaration Modifier public BasicType boolean match FormalParameter ReferenceType String string ReturnStatement MethodInvocation pattern MethodInvocation matches MemberReference string matcher MethodDeclaration Modifier public ReferenceType String prefix ReturnStatement Literal null MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation == This MemberReference o ReturnStatement Literal true End IfStatement BinaryOperation || BinaryOperation == MemberReference o Literal null BinaryOperation != MethodInvocation getClass MethodInvocation o getClass ReturnStatement Literal false End LocalVariableDeclaration Modifier final ReferenceType JavaUtilRegexCapabilities VariableDeclarator that Cast ReferenceType JavaUtilRegexCapabilities MemberReference o IfStatement TernaryExpression BinaryOperation != MemberReference pattern Literal null MethodInvocation ! pattern MemberReference that pattern equals BinaryOperation != MemberReference that pattern Literal null ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement TernaryExpression BinaryOperation != MemberReference pattern Literal null MethodInvocation pattern hashCode Literal 0 ReferenceType RegexCapabilities",0
719,719,,1
560,560,CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier final DocFieldConsumersPerThread FieldDeclaration Modifier final ReferenceType DocFieldConsumerPerThread VariableDeclarator one FieldDeclaration Modifier final ReferenceType DocFieldConsumerPerThread VariableDeclarator two FieldDeclaration Modifier final ReferenceType DocFieldConsumers VariableDeclarator parent FieldDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocState VariableDeclarator docState ConstructorDeclaration Modifier public DocFieldConsumersPerThread FormalParameter ReferenceType DocFieldProcessorPerThread docFieldProcessorPerThread FormalParameter ReferenceType DocFieldConsumers parent FormalParameter ReferenceType DocFieldConsumerPerThread one FormalParameter ReferenceType DocFieldConsumerPerThread two StatementExpression Assignment This MemberReference parent MemberReference parent = StatementExpression Assignment This MemberReference one MemberReference one = StatementExpression Assignment This MemberReference two MemberReference two = StatementExpression Assignment MemberReference docState MemberReference docFieldProcessorPerThread docState = MethodDeclaration Modifier public Annotation Override startDocument IOException StatementExpression MethodInvocation one startDocument StatementExpression MethodInvocation two startDocument MethodDeclaration Modifier public Annotation Override abort TryStatement StatementExpression MethodInvocation one abort StatementExpression MethodInvocation two abort MethodDeclaration Modifier public Annotation Override ReferenceType DocumentsWriter ReferenceType DocWriter finishDocument IOException LocalVariableDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocWriter VariableDeclarator oneDoc MethodInvocation one finishDocument LocalVariableDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocWriter VariableDeclarator twoDoc MethodInvocation two finishDocument IfStatement BinaryOperation == MemberReference oneDoc Literal null ReturnStatement MemberReference twoDoc IfStatement BinaryOperation == MemberReference twoDoc Literal null ReturnStatement MemberReference oneDoc BlockStatement LocalVariableDeclaration ReferenceType DocFieldConsumers ReferenceType PerDoc VariableDeclarator both MethodInvocation parent getPerDoc StatementExpression Assignment MemberReference both docID MemberReference docState docID = AssertStatement BinaryOperation == MemberReference oneDoc docID MemberReference docState docID AssertStatement BinaryOperation == MemberReference twoDoc docID MemberReference docState docID StatementExpression Assignment MemberReference both one MemberReference oneDoc = StatementExpression Assignment MemberReference both two MemberReference twoDoc = ReturnStatement MemberReference both End End MethodDeclaration Modifier public Annotation Override ReferenceType DocFieldConsumerPerField addField FormalParameter ReferenceType FieldInfo fi ReturnStatement ClassCreator ReferenceType DocFieldConsumersPerField This MethodInvocation one MemberReference fi addField MethodInvocation two MemberReference fi addField ReferenceType DocFieldConsumerPerThread,0
429,429,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.FileNotFoundException ClassDeclaration Modifier public /**
 * This exception is thrown when you try to list a
 * non-existent directory.
 */ NoSuchDirectoryException ConstructorDeclaration Modifier public NoSuchDirectoryException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ReferenceType FileNotFoundException",0
448,448,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard Import java.text.Collator Import java.util.HashMap Import java.util.List Import java.util.Locale Import java.util.Map Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.document.DateTools Import org.apache.lucene.document.DateTools.Resolution Import org.apache.lucene.queryParser.ParseException Import org.apache.lucene.queryParser.QueryParser Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.config.FieldConfig Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.parser.SyntaxParser Import org.apache.lucene.queryParser.core.processors.QueryNodeProcessor Import org.apache.lucene.queryParser.standard.builders.StandardQueryBuilder Import org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder Import org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttribute Import org.apache.lucene.queryParser.standard.config.AnalyzerAttribute Import org.apache.lucene.queryParser.standard.config.DateResolutionAttribute Import org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute Import org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttribute Import org.apache.lucene.queryParser.standard.config.LocaleAttribute Import org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttribute Import org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttribute Import org.apache.lucene.queryParser.standard.config.PositionIncrementsAttribute Import org.apache.lucene.queryParser.standard.config.RangeCollatorAttribute Import org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler Import org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser Import org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline Import org.apache.lucene.search.FuzzyQuery Import org.apache.lucene.search.MultiTermQuery Import org.apache.lucene.search.Query ClassDeclaration Modifier public /**
 * This class performs the query parsing using the new query parser
 * implementation, but keeps the old {@link QueryParser} API. <br/>
 * <br/>
 * This class should be used when the new query parser features are and the old
 * {@link QueryParser} API are needed at the same time. <br/>
 * 
 * @deprecated this class will be removed soon, it's a temporary class to be
 *             used along the transition from the old query parser to the new
 *             one
 */ QueryParserWrapper EnumDeclaration Modifier public static /**
   * The default operator for parsing queries. Use
   * {@link QueryParserWrapper#setDefaultOperator} to change it.
   */ Operator EnumBody EnumConstantDeclaration OR EnumConstantDeclaration AND FieldDeclaration /** Alternative form of QueryParser.Operator.AND */ Modifier public final static ReferenceType Operator VariableDeclarator AND_OPERATOR MemberReference Operator AND FieldDeclaration /** Alternative form of QueryParser.Operator.OR */ Modifier public final static ReferenceType Operator VariableDeclarator OR_OPERATOR MemberReference Operator OR MethodDeclaration /**
   * Returns a String where those characters that QueryParser expects to be
   * escaped are escaped by a preceding <code>\</code>.
   */ Modifier public static ReferenceType String escape FormalParameter ReferenceType String s LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation s length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation s MemberReference i charAt IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation == MemberReference c Literal '\\' BinaryOperation == MemberReference c Literal '+' BinaryOperation == MemberReference c Literal '-' BinaryOperation == MemberReference c Literal '!' BinaryOperation == MemberReference c Literal '(' BinaryOperation == MemberReference c Literal ')' BinaryOperation == MemberReference c Literal ':' BinaryOperation == MemberReference c Literal '^' BinaryOperation == MemberReference c Literal '[' BinaryOperation == MemberReference c Literal ']' BinaryOperation == MemberReference c Literal '\""' BinaryOperation == MemberReference c Literal '{' BinaryOperation == MemberReference c Literal '}' BinaryOperation == MemberReference c Literal '~' BinaryOperation == MemberReference c Literal '*' BinaryOperation == MemberReference c Literal '?' BinaryOperation == MemberReference c Literal '|' BinaryOperation == MemberReference c Literal '&' BlockStatement StatementExpression MethodInvocation sb Literal '\\' append End StatementExpression MethodInvocation sb MemberReference c append End ReturnStatement MethodInvocation sb toString FieldDeclaration Modifier private ReferenceType SyntaxParser VariableDeclarator syntaxParser ClassCreator ReferenceType StandardSyntaxParser FieldDeclaration Modifier private ReferenceType StandardQueryConfigHandler VariableDeclarator config FieldDeclaration Modifier private ReferenceType StandardQueryParser VariableDeclarator qpHelper FieldDeclaration Modifier private ReferenceType QueryNodeProcessor VariableDeclarator processorPipeline FieldDeclaration Modifier private ReferenceType StandardQueryBuilder VariableDeclarator builder ClassCreator ReferenceType StandardQueryTreeBuilder FieldDeclaration Modifier private ReferenceType String VariableDeclarator defaultField ConstructorDeclaration Modifier public QueryParserWrapper FormalParameter ReferenceType String defaultField FormalParameter ReferenceType Analyzer analyzer StatementExpression Assignment This MemberReference defaultField MemberReference defaultField = StatementExpression Assignment This MemberReference qpHelper ClassCreator ReferenceType StandardQueryParser = StatementExpression Assignment This MemberReference config Cast ReferenceType StandardQueryConfigHandler MethodInvocation qpHelper getQueryConfigHandler = StatementExpression This MemberReference qpHelper MethodInvocation MemberReference analyzer setAnalyzer StatementExpression Assignment This MemberReference processorPipeline ClassCreator ReferenceType StandardQueryNodeProcessorPipeline This MemberReference config = MethodDeclaration ReferenceType StandardQueryParser getQueryParserHelper ReturnStatement MemberReference qpHelper MethodDeclaration Modifier public ReferenceType String getField ReturnStatement This MemberReference defaultField MethodDeclaration Modifier public ReferenceType Analyzer getAnalyzer IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType AnalyzerAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType AnalyzerAttribute getAttribute MethodInvocation getAnalyzer End ReturnStatement Literal null MethodDeclaration /**
   * Sets the {@link StandardQueryBuilder} used to generate a {@link Query}
   * object from the parsed and processed query node tree.
   * 
   * @param builder the builder
   */ Modifier public setQueryBuilder FormalParameter ReferenceType StandardQueryBuilder builder StatementExpression Assignment This MemberReference builder MemberReference builder = MethodDeclaration /**
   * Sets the {@link QueryNodeProcessor} used to process the query node tree
   * generated by the
   * {@link org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser}.
   * 
   * @param processor the processor
   */ Modifier public setQueryProcessor FormalParameter ReferenceType QueryNodeProcessor processor StatementExpression Assignment This MemberReference processorPipeline MemberReference processor = StatementExpression This MemberReference processorPipeline MethodInvocation This MemberReference config setQueryConfigHandler MethodDeclaration /**
   * Sets the {@link QueryConfigHandler} used by the {@link QueryNodeProcessor}
   * set to this object.
   * 
   * @param queryConfig the query config handler
   */ Modifier public setQueryConfig FormalParameter ReferenceType StandardQueryConfigHandler queryConfig StatementExpression Assignment This MemberReference config MemberReference queryConfig = IfStatement BinaryOperation != This MemberReference processorPipeline Literal null BlockStatement StatementExpression This MemberReference processorPipeline MethodInvocation This MemberReference config setQueryConfigHandler End MethodDeclaration /**
   * Returns the query config handler used by this query parser
   * 
   * @return the query config handler
   */ Modifier public ReferenceType QueryConfigHandler getQueryConfigHandler ReturnStatement This MemberReference config MethodDeclaration /**
   * Returns {@link QueryNodeProcessor} used to process the query node tree
   * generated by the
   * {@link org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser}.
   * 
   * @return the query processor
   */ Modifier public ReferenceType QueryNodeProcessor getQueryProcessor ReturnStatement This MemberReference processorPipeline MethodDeclaration Modifier public ReferenceType ParseException generateParseException ReturnStatement Literal null MethodDeclaration Modifier public BasicType boolean getAllowLeadingWildcard IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType AllowLeadingWildcardAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType AllowLeadingWildcardAttribute getAttribute MethodInvocation isAllowLeadingWildcard End ReturnStatement Literal false MethodDeclaration Modifier public ReferenceType MultiTermQuery ReferenceType RewriteMethod getMultiTermRewriteMethod IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType MultiTermRewriteMethodAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType MultiTermRewriteMethodAttribute getAttribute MethodInvocation getMultiTermRewriteMethod End ReturnStatement MemberReference MultiTermQuery CONSTANT_SCORE_AUTO_REWRITE_DEFAULT MethodDeclaration Modifier public ReferenceType Resolution getDateResolution FormalParameter ReferenceType String fieldName IfStatement BinaryOperation != This MemberReference config Literal null BlockStatement LocalVariableDeclaration ReferenceType FieldConfig VariableDeclarator fieldConfig This MemberReference config MethodInvocation MemberReference fieldName getFieldConfig IfStatement BinaryOperation != MemberReference fieldConfig Literal null BlockStatement IfStatement This MemberReference config MethodInvocation ClassReference ReferenceType DateResolutionAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType DateResolutionAttribute getAttribute MethodInvocation getDateResolution End End End ReturnStatement Literal null MethodDeclaration Modifier public BasicType boolean getEnablePositionIncrements IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType PositionIncrementsAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType PositionIncrementsAttribute getAttribute MethodInvocation isPositionIncrementsEnabled End ReturnStatement Literal false MethodDeclaration Modifier public BasicType float getFuzzyMinSim ReturnStatement MemberReference FuzzyQuery defaultMinSimilarity MethodDeclaration Modifier public BasicType int getFuzzyPrefixLength ReturnStatement MemberReference FuzzyQuery defaultPrefixLength MethodDeclaration Modifier public ReferenceType Locale getLocale IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType LocaleAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType LocaleAttribute getAttribute MethodInvocation getLocale End ReturnStatement MethodInvocation Locale getDefault MethodDeclaration Modifier public BasicType boolean getLowercaseExpandedTerms IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType LowercaseExpandedTermsAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType LowercaseExpandedTermsAttribute getAttribute MethodInvocation isLowercaseExpandedTerms End ReturnStatement Literal true MethodDeclaration Modifier public BasicType int getPhraseSlop IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType AllowLeadingWildcardAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType DefaultPhraseSlopAttribute getAttribute MethodInvocation getDefaultPhraseSlop End ReturnStatement Literal 0 MethodDeclaration Modifier public ReferenceType Collator getRangeCollator IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType RangeCollatorAttribute hasAttribute BlockStatement ReturnStatement This MemberReference config MethodInvocation ClassReference ReferenceType RangeCollatorAttribute getAttribute MethodInvocation getRangeCollator End ReturnStatement Literal null MethodDeclaration Modifier public BasicType boolean getUseOldRangeQuery IfStatement BinaryOperation == MethodInvocation getMultiTermRewriteMethod MemberReference MultiTermQuery SCORING_BOOLEAN_QUERY_REWRITE BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier public ReferenceType Query parse FormalParameter ReferenceType String query ParseException TryStatement LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator queryTree This MemberReference syntaxParser MethodInvocation MemberReference query MethodInvocation getField parse StatementExpression Assignment MemberReference queryTree This MemberReference processorPipeline MethodInvocation MemberReference queryTree process = ReturnStatement Cast ReferenceType Query This MemberReference builder MethodInvocation MemberReference queryTree build CatchClause CatchClauseParameter QueryNodeException e ThrowStatement ClassCreator ReferenceType ParseException Literal ""parse exception"" MethodDeclaration Modifier public setAllowLeadingWildcard FormalParameter BasicType boolean allowLeadingWildcard StatementExpression This MemberReference qpHelper MethodInvocation MemberReference allowLeadingWildcard setAllowLeadingWildcard MethodDeclaration Modifier public setMultiTermRewriteMethod FormalParameter ReferenceType MultiTermQuery ReferenceType RewriteMethod method StatementExpression This MemberReference qpHelper MethodInvocation MemberReference method setMultiTermRewriteMethod MethodDeclaration Modifier public setDateResolution FormalParameter ReferenceType Resolution dateResolution StatementExpression This MemberReference qpHelper MethodInvocation MemberReference dateResolution setDateResolution FieldDeclaration Modifier private ReferenceType Map TypeArgument ReferenceType CharSequence TypeArgument ReferenceType DateTools ReferenceType Resolution VariableDeclarator dateRes ClassCreator ReferenceType HashMap TypeArgument ReferenceType CharSequence TypeArgument ReferenceType DateTools ReferenceType Resolution MethodDeclaration Modifier public setDateResolution FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Resolution dateResolution StatementExpression MethodInvocation dateRes MemberReference fieldName MemberReference dateResolution put StatementExpression This MemberReference qpHelper MethodInvocation MemberReference dateRes setDateResolution MethodDeclaration Modifier public setDefaultOperator FormalParameter ReferenceType Operator op StatementExpression This MemberReference qpHelper MethodInvocation TernaryExpression MethodInvocation OR_OPERATOR MemberReference op equals MemberReference org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute.Operator OR MemberReference org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute.Operator AND setDefaultOperator MethodDeclaration Modifier public ReferenceType Operator getDefaultOperator IfStatement BinaryOperation && BinaryOperation != This MemberReference config Literal null This MemberReference config MethodInvocation ClassReference ReferenceType DefaultOperatorAttribute hasAttribute BlockStatement ReturnStatement TernaryExpression BinaryOperation == This MemberReference config MethodInvocation ClassReference ReferenceType DefaultOperatorAttribute getAttribute MethodInvocation getOperator MemberReference org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute.Operator AND MemberReference AND_OPERATOR MemberReference OR_OPERATOR End ReturnStatement MemberReference OR_OPERATOR MethodDeclaration Modifier public setEnablePositionIncrements FormalParameter BasicType boolean enable StatementExpression This MemberReference qpHelper MethodInvocation MemberReference enable setEnablePositionIncrements MethodDeclaration Modifier public setFuzzyMinSim FormalParameter BasicType float fuzzyMinSim MethodDeclaration Modifier public setFuzzyPrefixLength FormalParameter BasicType int fuzzyPrefixLength MethodDeclaration Modifier public setLocale FormalParameter ReferenceType Locale locale StatementExpression This MemberReference qpHelper MethodInvocation MemberReference locale setLocale MethodDeclaration Modifier public setLowercaseExpandedTerms FormalParameter BasicType boolean lowercaseExpandedTerms StatementExpression This MemberReference qpHelper MethodInvocation MemberReference lowercaseExpandedTerms setLowercaseExpandedTerms MethodDeclaration Modifier public setPhraseSlop FormalParameter BasicType int phraseSlop StatementExpression This MemberReference qpHelper MethodInvocation MemberReference phraseSlop setDefaultPhraseSlop MethodDeclaration Modifier public setRangeCollator FormalParameter ReferenceType Collator rc StatementExpression This MemberReference qpHelper MethodInvocation MemberReference rc setRangeCollator MethodDeclaration Modifier public setUseOldRangeQuery FormalParameter BasicType boolean useOldRangeQuery IfStatement MemberReference useOldRangeQuery BlockStatement StatementExpression MethodInvocation MemberReference MultiTermQuery SCORING_BOOLEAN_QUERY_REWRITE setMultiTermRewriteMethod BlockStatement StatementExpression MethodInvocation MemberReference MultiTermQuery CONSTANT_SCORE_AUTO_REWRITE_DEFAULT setMultiTermRewriteMethod End MethodDeclaration Modifier protected ReferenceType Query getPrefixQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String termStr ParseException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier protected ReferenceType Query getWildcardQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String termStr ParseException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier protected ReferenceType Query getFuzzyQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String termStr FormalParameter BasicType float minSimilarity ParseException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   * @exception ParseException throw in overridden method to disallow
   */ Modifier protected ReferenceType Query getFieldQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String queryText ParseException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier protected Annotation SuppressWarnings Literal ""unchecked"" ReferenceType Query getBooleanQuery FormalParameter ReferenceType List clauses FormalParameter BasicType boolean disableCoord ParseException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   * Base implementation delegates to {@link #getFieldQuery(String,String)}.
   * This method may be overridden, for example, to return a SpanNearQuery
   * instead of a PhraseQuery.
   * 
   * @exception ParseException throw in overridden method to disallow
   */ Modifier protected ReferenceType Query getFieldQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String queryText FormalParameter BasicType int slop ParseException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   * @exception ParseException throw in overridden method to disallow
   */ Modifier protected ReferenceType Query getRangeQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String part1 FormalParameter ReferenceType String part2 FormalParameter BasicType boolean inclusive ParseException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException",1
419,419,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.util.Collections Import java.util.NoSuchElementException Import java.util.Iterator Import java.util.LinkedHashMap Import java.util.IdentityHashMap Import java.util.LinkedList Import java.util.Map Import java.util.Map.Entry Import org.apache.lucene.analysis.TokenStream ClassDeclaration Modifier public /**
 * An AttributeSource contains a list of different {@link AttributeImpl}s,
 * and methods to add and get them. There can only be a single instance
 * of an attribute in the same AttributeSource instance. This is ensured
 * by passing in the actual type of the Attribute (Class&lt;Attribute&gt;) to 
 * the {@link #addAttribute(Class)}, which then checks if an instance of
 * that type is already present. If yes, it returns the instance, otherwise
 * it creates a new instance and returns it.
 */ AttributeSource ClassDeclaration Modifier public static abstract /**
   * An AttributeFactory creates instances of {@link AttributeImpl}s.
   */ AttributeFactory MethodDeclaration /**
     * returns an {@link AttributeImpl} for the supplied {@link Attribute} interface class.
     */ Modifier public abstract ReferenceType AttributeImpl createAttributeInstance FormalParameter ReferenceType Class TypeArgument ReferenceType Attribute extends attClass FieldDeclaration /**
     * This is the default factory that creates {@link AttributeImpl}s using the
     * class name of the supplied {@link Attribute} interface class by appending <code>Impl</code> to it.
     */ Modifier public final static ReferenceType AttributeFactory VariableDeclarator DEFAULT_ATTRIBUTE_FACTORY ClassCreator ReferenceType DefaultAttributeFactory ClassDeclaration Modifier private final static DefaultAttributeFactory FieldDeclaration Modifier private final static ReferenceType IdentityHashMap TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends TypeArgument ReferenceType Class TypeArgument ReferenceType AttributeImpl extends VariableDeclarator attClassImplMap ClassCreator ReferenceType IdentityHashMap TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends TypeArgument ReferenceType Class TypeArgument ReferenceType AttributeImpl extends ConstructorDeclaration Modifier private DefaultAttributeFactory MethodDeclaration Modifier public Annotation Override ReferenceType AttributeImpl createAttributeInstance FormalParameter ReferenceType Class TypeArgument ReferenceType Attribute extends attClass TryStatement ReturnStatement MethodInvocation MethodInvocation newInstance MemberReference attClass getClassForInterface CatchClause CatchClauseParameter InstantiationException e ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Could not instantiate class "" MethodInvocation attClass getName CatchClause CatchClauseParameter IllegalAccessException e ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Could not instantiate class "" MethodInvocation attClass getName MethodDeclaration Modifier private static ReferenceType Class TypeArgument ReferenceType AttributeImpl extends getClassForInterface FormalParameter ReferenceType Class TypeArgument ReferenceType Attribute extends attClass SynchronizedStatement MemberReference attClassImplMap LocalVariableDeclaration ReferenceType Class TypeArgument ReferenceType AttributeImpl extends VariableDeclarator clazz MethodInvocation attClassImplMap MemberReference attClass get IfStatement BinaryOperation == MemberReference clazz Literal null BlockStatement TryStatement StatementExpression MethodInvocation attClassImplMap MemberReference attClass Assignment MemberReference clazz MethodInvocation Class MethodInvocation ClassReference ReferenceType AttributeImpl asSubclass BinaryOperation + MethodInvocation attClass getName Literal ""Impl"" forName = put CatchClause CatchClauseParameter ClassNotFoundException e ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Could not find implementing class for "" MethodInvocation attClass getName End ReturnStatement MemberReference clazz ReferenceType AttributeFactory FieldDeclaration Modifier private final ReferenceType Map TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends TypeArgument ReferenceType AttributeImpl VariableDeclarator attributes FieldDeclaration Modifier private final ReferenceType Map TypeArgument ReferenceType Class TypeArgument ReferenceType AttributeImpl extends TypeArgument ReferenceType AttributeImpl VariableDeclarator attributeImpls FieldDeclaration Modifier private ReferenceType AttributeFactory VariableDeclarator factory ConstructorDeclaration Modifier public /**
   * An AttributeSource using the default attribute factory {@link AttributeSource.AttributeFactory#DEFAULT_ATTRIBUTE_FACTORY}.
   */ AttributeSource StatementExpression ExplicitConstructorInvocation MemberReference AttributeFactory DEFAULT_ATTRIBUTE_FACTORY ConstructorDeclaration Modifier public /**
   * An AttributeSource that uses the same attributes as the supplied one.
   */ AttributeSource FormalParameter ReferenceType AttributeSource input IfStatement BinaryOperation == MemberReference input Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""input AttributeSource must not be null"" End StatementExpression Assignment This MemberReference attributes MemberReference input attributes = StatementExpression Assignment This MemberReference attributeImpls MemberReference input attributeImpls = StatementExpression Assignment This MemberReference factory MemberReference input factory = ConstructorDeclaration Modifier public /**
   * An AttributeSource using the supplied {@link AttributeFactory} for creating new {@link Attribute} instances.
   */ AttributeSource FormalParameter ReferenceType AttributeFactory factory StatementExpression Assignment This MemberReference attributes ClassCreator ReferenceType LinkedHashMap TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends TypeArgument ReferenceType AttributeImpl = StatementExpression Assignment This MemberReference attributeImpls ClassCreator ReferenceType LinkedHashMap TypeArgument ReferenceType Class TypeArgument ReferenceType AttributeImpl extends TypeArgument ReferenceType AttributeImpl = StatementExpression Assignment This MemberReference factory MemberReference factory = MethodDeclaration /**
   * returns the used AttributeFactory.
   */ Modifier public ReferenceType AttributeFactory getAttributeFactory ReturnStatement This MemberReference factory MethodDeclaration /** Returns a new iterator that iterates the attribute classes
   * in the same order they were added in.
   */ Modifier public ReferenceType Iterator TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends getAttributeClassesIterator ReturnStatement MethodInvocation Collections MethodInvocation iterator MethodInvocation attributes keySet unmodifiableSet MethodDeclaration /** Returns a new iterator that iterates all unique Attribute implementations.
   * This iterator may contain less entries that {@link #getAttributeClassesIterator},
   * if one instance implements more than one Attribute interface.
   */ Modifier public ReferenceType Iterator TypeArgument ReferenceType AttributeImpl getAttributeImplsIterator IfStatement MethodInvocation hasAttributes BlockStatement IfStatement BinaryOperation == MemberReference currentState Literal null BlockStatement StatementExpression MethodInvocation computeCurrentState End LocalVariableDeclaration Modifier final ReferenceType State VariableDeclarator initState MemberReference currentState ReturnStatement ClassCreator ReferenceType Iterator TypeArgument ReferenceType AttributeImpl FieldDeclaration Modifier private ReferenceType State VariableDeclarator state MemberReference initState MethodDeclaration Modifier public remove ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public ReferenceType AttributeImpl next IfStatement BinaryOperation == MemberReference state Literal null ThrowStatement ClassCreator ReferenceType NoSuchElementException End LocalVariableDeclaration Modifier final ReferenceType AttributeImpl VariableDeclarator att MemberReference state attribute StatementExpression Assignment MemberReference state MemberReference state next = ReturnStatement MemberReference att MethodDeclaration Modifier public BasicType boolean hasNext ReturnStatement BinaryOperation != MemberReference state Literal null BlockStatement ReturnStatement MethodInvocation MethodInvocation iterator TypeArgument ReferenceType AttributeImpl Collections End FieldDeclaration /** a cache that stores all interfaces for known implementation classes for performance (slow reflection) */ Modifier private final static ReferenceType IdentityHashMap TypeArgument ReferenceType Class TypeArgument ReferenceType AttributeImpl extends TypeArgument ReferenceType LinkedList TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends VariableDeclarator knownImplClasses ClassCreator ReferenceType IdentityHashMap TypeArgument ReferenceType Class TypeArgument ReferenceType AttributeImpl extends TypeArgument ReferenceType LinkedList TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends MethodDeclaration /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.
   * <p><font color=""red""><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to
   * the <code>AttributeSource</code>, because the provided attributes may already exist.
   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding
   * with this method and cast to your class.
   * The recommended way to use custom implementations is using an {@link AttributeFactory}.
   * </font></p>
   */ Modifier public addAttributeImpl FormalParameter Modifier final ReferenceType AttributeImpl att LocalVariableDeclaration Modifier final ReferenceType Class TypeArgument ReferenceType AttributeImpl extends VariableDeclarator clazz MethodInvocation att getClass IfStatement MethodInvocation attributeImpls MemberReference clazz containsKey ReturnStatement End LocalVariableDeclaration ReferenceType LinkedList TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends VariableDeclarator foundInterfaces SynchronizedStatement MemberReference knownImplClasses StatementExpression Assignment MemberReference foundInterfaces MethodInvocation knownImplClasses MemberReference clazz get = IfStatement BinaryOperation == MemberReference foundInterfaces Literal null BlockStatement StatementExpression MethodInvocation knownImplClasses MemberReference clazz Assignment MemberReference foundInterfaces ClassCreator ReferenceType LinkedList TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends = put LocalVariableDeclaration ReferenceType Class TypeArgument ? VariableDeclarator actClazz MemberReference clazz DoStatement BinaryOperation != MemberReference actClazz Literal null BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Class TypeArgument ? VariableDeclarator curInterface MethodInvocation actClazz getInterfaces BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference curInterface ClassReference ReferenceType Attribute ClassReference MethodInvocation MemberReference curInterface isAssignableFrom ReferenceType Attribute BlockStatement StatementExpression MethodInvocation foundInterfaces MethodInvocation curInterface ClassReference ReferenceType Attribute asSubclass add End End StatementExpression Assignment MemberReference actClazz MethodInvocation actClazz getSuperclass = End End ForStatement EnhancedForControl VariableDeclaration ReferenceType Class TypeArgument ReferenceType Attribute extends VariableDeclarator curInterface MemberReference foundInterfaces BlockStatement IfStatement MethodInvocation ! attributes MemberReference curInterface containsKey BlockStatement StatementExpression Assignment This MemberReference currentState Literal null = StatementExpression MethodInvocation attributes MemberReference curInterface MemberReference att put StatementExpression MethodInvocation attributeImpls MemberReference clazz MemberReference att put End End MethodDeclaration /**
   * The caller must pass in a Class&lt;? extends Attribute&gt; value.
   * This method first checks if an instance of that class is 
   * already in this AttributeSource and returns it. Otherwise a
   * new instance is created, added to this AttributeSource and returned. 
   */ Modifier public TypeParameter A ReferenceType Attribute ReferenceType A addAttribute FormalParameter ReferenceType Class TypeArgument ReferenceType A attClass LocalVariableDeclaration ReferenceType AttributeImpl VariableDeclarator attImpl MethodInvocation attributes MemberReference attClass get IfStatement BinaryOperation == MemberReference attImpl Literal null BlockStatement IfStatement BinaryOperation && MethodInvocation attClass isInterface ClassReference MethodInvocation MemberReference attClass isAssignableFrom ReferenceType Attribute BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""addAttribute() only accepts an interface that extends Attribute, but "" MethodInvocation attClass getName Literal "" does not fulfil this contract."" End StatementExpression MethodInvocation Assignment MemberReference attImpl This MemberReference factory MethodInvocation MemberReference attClass createAttributeInstance = addAttributeImpl End ReturnStatement MethodInvocation attClass MemberReference attImpl cast MethodDeclaration /** Returns true, iff this AttributeSource has any attributes */ Modifier public BasicType boolean hasAttributes ReturnStatement This ! MemberReference attributes MethodInvocation isEmpty MethodDeclaration /**
   * The caller must pass in a Class&lt;? extends Attribute&gt; value. 
   * Returns true, iff this AttributeSource contains the passed-in Attribute.
   */ Modifier public BasicType boolean hasAttribute FormalParameter ReferenceType Class TypeArgument ReferenceType Attribute extends attClass ReturnStatement This MemberReference attributes MethodInvocation MemberReference attClass containsKey MethodDeclaration /**
   * The caller must pass in a Class&lt;? extends Attribute&gt; value. 
   * Returns the instance of the passed in Attribute contained in this AttributeSource
   * 
   * @throws IllegalArgumentException if this AttributeSource does not contain the
   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers
   *         of TokenStreams, because you cannot know if a specific TokenStream really uses
   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute
   *         available. If you want to only use the attribute, if it is available (to optimize
   *         consuming), use {@link #hasAttribute}.
   */ Modifier public TypeParameter A ReferenceType Attribute ReferenceType A getAttribute FormalParameter ReferenceType Class TypeArgument ReferenceType A attClass LocalVariableDeclaration ReferenceType AttributeImpl VariableDeclarator attImpl MethodInvocation attributes MemberReference attClass get IfStatement BinaryOperation == MemberReference attImpl Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""This AttributeSource does not have the attribute '"" MethodInvocation attClass getName Literal ""'."" End ReturnStatement MethodInvocation attClass MemberReference attImpl cast ClassDeclaration Modifier public final static /**
   * This class holds the state of an AttributeSource.
   * @see #captureState
   * @see #restoreState
   */ State FieldDeclaration Modifier private ReferenceType AttributeImpl VariableDeclarator attribute FieldDeclaration Modifier private ReferenceType State VariableDeclarator next MethodDeclaration Modifier public Annotation Override ReferenceType Object clone LocalVariableDeclaration ReferenceType State VariableDeclarator clone ClassCreator ReferenceType State StatementExpression Assignment MemberReference clone attribute Cast ReferenceType AttributeImpl MethodInvocation attribute clone = IfStatement BinaryOperation != MemberReference next Literal null BlockStatement StatementExpression Assignment MemberReference clone next Cast ReferenceType State MethodInvocation next clone = End ReturnStatement MemberReference clone ReferenceType Cloneable FieldDeclaration Modifier private ReferenceType State VariableDeclarator currentState Literal null MethodDeclaration Modifier private computeCurrentState StatementExpression Assignment MemberReference currentState ClassCreator ReferenceType State = LocalVariableDeclaration ReferenceType State VariableDeclarator c MemberReference currentState LocalVariableDeclaration Modifier final ReferenceType Iterator TypeArgument ReferenceType AttributeImpl VariableDeclarator it MethodInvocation attributeImpls MethodInvocation iterator values StatementExpression Assignment MemberReference c attribute MethodInvocation it next = WhileStatement MethodInvocation it hasNext BlockStatement StatementExpression Assignment MemberReference c next ClassCreator ReferenceType State = StatementExpression Assignment MemberReference c MemberReference c next = StatementExpression Assignment MemberReference c attribute MethodInvocation it next = End MethodDeclaration /**
   * Resets all Attributes in this AttributeSource by calling
   * {@link AttributeImpl#clear()} on each Attribute implementation.
   */ Modifier public clearAttributes IfStatement MethodInvocation hasAttributes BlockStatement IfStatement BinaryOperation == MemberReference currentState Literal null BlockStatement StatementExpression MethodInvocation computeCurrentState End ForStatement ForControl VariableDeclaration ReferenceType State VariableDeclarator state MemberReference currentState BinaryOperation != MemberReference state Literal null Assignment MemberReference state MemberReference state next = BlockStatement StatementExpression MethodInvocation state.attribute clear End End MethodDeclaration /**
   * Captures the state of all Attributes. The return value can be passed to
   * {@link #restoreState} to restore the state of this or another AttributeSource.
   */ Modifier public ReferenceType State captureState IfStatement MethodInvocation ! hasAttributes BlockStatement ReturnStatement Literal null End IfStatement BinaryOperation == MemberReference currentState Literal null BlockStatement StatementExpression MethodInvocation computeCurrentState End ReturnStatement Cast ReferenceType State This MemberReference currentState MethodInvocation clone MethodDeclaration /**
   * Restores this state by copying the values of all attribute implementations
   * that this state contains into the attributes implementations of the targetStream.
   * The targetStream must contain a corresponding instance for each argument
   * contained in this state (e.g. it is not possible to restore the state of
   * an AttributeSource containing a TermAttribute into a AttributeSource using
   * a Token instance as implementation).
   * <p>
   * Note that this method does not affect attributes of the targetStream
   * that are not contained in this state. In other words, if for example
   * the targetStream contains an OffsetAttribute, but this state doesn't, then
   * the value of the OffsetAttribute remains unchanged. It might be desirable to
   * reset its value to the default, in which case the caller should first
   * call {@link TokenStream#clearAttributes()} on the targetStream.   
   */ Modifier public restoreState FormalParameter ReferenceType State state IfStatement BinaryOperation == MemberReference state Literal null ReturnStatement End DoStatement BinaryOperation != MemberReference state Literal null BlockStatement LocalVariableDeclaration ReferenceType AttributeImpl VariableDeclarator targetImpl MethodInvocation attributeImpls MethodInvocation state.attribute getClass get IfStatement BinaryOperation == MemberReference targetImpl Literal null ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""State contains an AttributeImpl that is not in this AttributeSource"" End StatementExpression MethodInvocation state.attribute MemberReference targetImpl copyTo StatementExpression Assignment MemberReference state MemberReference state next = End MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator code Literal 0 IfStatement MethodInvocation hasAttributes BlockStatement IfStatement BinaryOperation == MemberReference currentState Literal null BlockStatement StatementExpression MethodInvocation computeCurrentState End ForStatement ForControl VariableDeclaration ReferenceType State VariableDeclarator state MemberReference currentState BinaryOperation != MemberReference state Literal null Assignment MemberReference state MemberReference state next = BlockStatement StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 31 MethodInvocation state.attribute hashCode = End End ReturnStatement MemberReference code MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj This BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType AttributeSource BlockStatement LocalVariableDeclaration ReferenceType AttributeSource VariableDeclarator other Cast ReferenceType AttributeSource MemberReference obj IfStatement MethodInvocation hasAttributes BlockStatement IfStatement MethodInvocation ! other hasAttributes BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation != This MemberReference attributeImpls MethodInvocation size MethodInvocation other.attributeImpls size BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == This MemberReference currentState Literal null BlockStatement StatementExpression This MethodInvocation computeCurrentState End LocalVariableDeclaration ReferenceType State VariableDeclarator thisState This MemberReference currentState IfStatement BinaryOperation == MemberReference other currentState Literal null BlockStatement StatementExpression MethodInvocation other computeCurrentState End LocalVariableDeclaration ReferenceType State VariableDeclarator otherState MemberReference other currentState WhileStatement BinaryOperation && BinaryOperation != MemberReference thisState Literal null BinaryOperation != MemberReference otherState Literal null BlockStatement IfStatement BinaryOperation || BinaryOperation != MethodInvocation otherState.attribute getClass MethodInvocation thisState.attribute getClass MethodInvocation ! otherState.attribute MemberReference thisState attribute equals BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference thisState MemberReference thisState next = StatementExpression Assignment MemberReference otherState MemberReference otherState next = End ReturnStatement Literal true BlockStatement ReturnStatement MethodInvocation ! other hasAttributes End ReturnStatement Literal false End MethodDeclaration Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator MethodInvocation Literal '(' append ReferenceType StringBuilder IfStatement MethodInvocation hasAttributes BlockStatement IfStatement BinaryOperation == MemberReference currentState Literal null BlockStatement StatementExpression MethodInvocation computeCurrentState End ForStatement ForControl VariableDeclaration ReferenceType State VariableDeclarator state MemberReference currentState BinaryOperation != MemberReference state Literal null Assignment MemberReference state MemberReference state next = BlockStatement IfStatement BinaryOperation != MemberReference state MemberReference currentState StatementExpression MethodInvocation sb Literal ',' append End StatementExpression MethodInvocation sb MethodInvocation state.attribute toString append End End ReturnStatement MethodInvocation sb MethodInvocation toString Literal ')' append MethodDeclaration /**
   * Performs a clone of all {@link AttributeImpl} instances returned in a new
   * AttributeSource instance. This method can be used to e.g. create another TokenStream
   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)})
   */ Modifier public ReferenceType AttributeSource cloneAttributes LocalVariableDeclaration ReferenceType AttributeSource VariableDeclarator clone ClassCreator ReferenceType AttributeSource This MemberReference factory IfStatement MethodInvocation hasAttributes BlockStatement IfStatement BinaryOperation == MemberReference currentState Literal null BlockStatement StatementExpression MethodInvocation computeCurrentState End ForStatement ForControl VariableDeclaration ReferenceType State VariableDeclarator state MemberReference currentState BinaryOperation != MemberReference state Literal null Assignment MemberReference state MemberReference state next = BlockStatement StatementExpression MethodInvocation clone.attributeImpls MethodInvocation state.attribute getClass Cast ReferenceType AttributeImpl MethodInvocation state.attribute clone put End End ForStatement EnhancedForControl VariableDeclaration ReferenceType Entry TypeArgument ReferenceType Class TypeArgument ReferenceType Attribute extends TypeArgument ReferenceType AttributeImpl VariableDeclarator entry This MemberReference attributes MethodInvocation entrySet BlockStatement StatementExpression MethodInvocation clone.attributes MethodInvocation entry getKey MethodInvocation clone.attributeImpls MethodInvocation entry MethodInvocation getClass getValue get put End ReturnStatement MemberReference clone",0
580,580,,0
77,77,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.builders Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.builders.QueryTreeBuilder Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.nodes.SlopQueryNode Import org.apache.lucene.search.MultiPhraseQuery Import org.apache.lucene.search.PhraseQuery Import org.apache.lucene.search.Query ClassDeclaration Modifier public /**
 * This builder basically reads the {@link Query} object set on the
 * {@link SlopQueryNode} child using
 * {@link QueryTreeBuilder#QUERY_TREE_BUILDER_TAGID} and applies the slop value
 * defined in the {@link SlopQueryNode}.
 */ SlopQueryNodeBuilder ConstructorDeclaration Modifier public SlopQueryNodeBuilder MethodDeclaration Modifier public ReferenceType Query build FormalParameter ReferenceType QueryNode queryNode QueryNodeException LocalVariableDeclaration ReferenceType SlopQueryNode VariableDeclarator phraseSlopNode Cast ReferenceType SlopQueryNode MemberReference queryNode LocalVariableDeclaration ReferenceType Query VariableDeclarator query Cast ReferenceType Query MethodInvocation phraseSlopNode MethodInvocation MemberReference QueryTreeBuilder QUERY_TREE_BUILDER_TAGID getTag getChild IfStatement BinaryOperation instanceof MemberReference query ReferenceType PhraseQuery BlockStatement StatementExpression Cast ReferenceType PhraseQuery MemberReference query BlockStatement StatementExpression Cast ReferenceType MultiPhraseQuery MemberReference query End ReturnStatement MemberReference query ReferenceType StandardQueryBuilder",0
312,312,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.processors Import java.text.Collator Import java.text.DateFormat Import java.util.Calendar Import java.util.Date Import java.util.List Import java.util.Locale Import org.apache.lucene.document.DateField Import org.apache.lucene.document.DateTools Import org.apache.lucene.document.DateTools.Resolution Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.config.FieldConfig Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.core.nodes.ParametricQueryNode Import org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.CompareOperator Import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl Import org.apache.lucene.queryParser.standard.config.DateResolutionAttribute Import org.apache.lucene.queryParser.standard.config.LocaleAttribute Import org.apache.lucene.queryParser.standard.config.RangeCollatorAttribute Import org.apache.lucene.queryParser.standard.nodes.RangeQueryNode ClassDeclaration Modifier public /**
 * This processor converts {@link ParametricRangeQueryNode} objects to
 * {@link RangeQueryNode} objects. It reads the lower and upper bounds value
 * from the {@link ParametricRangeQueryNode} object and try to parse their
 * values using a {@link DateFormat}. If the values cannot be parsed to a date
 * value, it will only create the {@link RangeQueryNode} using the non-parsed
 * values. <br/>
 * <br/>
 * If a {@link LocaleAttribute} is defined in the {@link QueryConfigHandler} it
 * will be used to parse the date, otherwise {@link Locale#getDefault()} will be
 * used. <br/>
 * <br/>
 * If a {@link DateResolutionAttribute} is defined and the {@link Resolution} is
 * not <code>null</code> it will also be used to parse the date value. <br/>
 * <br/>
 * This processor will also try to retrieve a {@link RangeCollatorAttribute}
 * from the {@link QueryConfigHandler}. If a {@link RangeCollatorAttribute} is
 * found and the {@link Collator} is not <code>null</code>, it's set on the
 * {@link RangeQueryNode}. <br/>
 * 
 * @see RangeCollatorAttribute
 * @see DateResolutionAttribute
 * @see LocaleAttribute
 * @see RangeQueryNode
 * @see ParametricRangeQueryNode
 */ ParametricRangeQueryNodeProcessor ConstructorDeclaration Modifier public ParametricRangeQueryNodeProcessor MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode postProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException IfStatement BinaryOperation instanceof MemberReference node ReferenceType ParametricRangeQueryNode BlockStatement LocalVariableDeclaration ReferenceType ParametricRangeQueryNode VariableDeclarator parametricRangeNode Cast ReferenceType ParametricRangeQueryNode MemberReference node LocalVariableDeclaration ReferenceType ParametricQueryNode VariableDeclarator upper MethodInvocation parametricRangeNode getUpperBound LocalVariableDeclaration ReferenceType ParametricQueryNode VariableDeclarator lower MethodInvocation parametricRangeNode getLowerBound LocalVariableDeclaration ReferenceType Locale VariableDeclarator locale MethodInvocation Locale getDefault LocalVariableDeclaration ReferenceType Collator VariableDeclarator collator Literal null LocalVariableDeclaration ReferenceType DateTools ReferenceType Resolution VariableDeclarator dateRes Literal null LocalVariableDeclaration BasicType boolean VariableDeclarator inclusive Literal false IfStatement MethodInvocation MethodInvocation ClassReference ReferenceType RangeCollatorAttribute hasAttribute getQueryConfigHandler BlockStatement StatementExpression Assignment MemberReference collator MethodInvocation MethodInvocation ClassReference ReferenceType RangeCollatorAttribute getAttribute MethodInvocation getRangeCollator getQueryConfigHandler = End IfStatement MethodInvocation MethodInvocation ClassReference ReferenceType LocaleAttribute hasAttribute getQueryConfigHandler BlockStatement StatementExpression Assignment MemberReference locale MethodInvocation MethodInvocation ClassReference ReferenceType LocaleAttribute getAttribute MethodInvocation getLocale getQueryConfigHandler = End LocalVariableDeclaration ReferenceType FieldConfig VariableDeclarator fieldConfig MethodInvocation MethodInvocation MethodInvocation parametricRangeNode getField getFieldConfig getQueryConfigHandler IfStatement BinaryOperation != MemberReference fieldConfig Literal null BlockStatement IfStatement MethodInvocation fieldConfig ClassReference ReferenceType DateResolutionAttribute hasAttribute BlockStatement StatementExpression Assignment MemberReference dateRes MethodInvocation fieldConfig MethodInvocation getDateResolution ClassReference ReferenceType DateResolutionAttribute getAttribute = End End IfStatement BinaryOperation == MethodInvocation upper getOperator MemberReference CompareOperator LE BlockStatement StatementExpression Assignment MemberReference inclusive Literal true = IfStatement BinaryOperation == MethodInvocation lower getOperator MemberReference CompareOperator GE BlockStatement StatementExpression Assignment MemberReference inclusive Literal true = End End LocalVariableDeclaration ReferenceType String VariableDeclarator part1 MethodInvocation lower getTextAsString LocalVariableDeclaration ReferenceType String VariableDeclarator part2 MethodInvocation upper getTextAsString TryStatement LocalVariableDeclaration ReferenceType DateFormat VariableDeclarator df MethodInvocation DateFormat MemberReference DateFormat SHORT MemberReference locale getDateInstance StatementExpression MethodInvocation df Literal true setLenient LocalVariableDeclaration ReferenceType Date VariableDeclarator d1 MethodInvocation df MemberReference part1 parse LocalVariableDeclaration ReferenceType Date VariableDeclarator d2 MethodInvocation df MemberReference part2 parse IfStatement MemberReference inclusive BlockStatement LocalVariableDeclaration ReferenceType Calendar VariableDeclarator cal MethodInvocation Calendar MemberReference locale getInstance StatementExpression MethodInvocation cal MemberReference d2 setTime StatementExpression MethodInvocation cal MemberReference Calendar HOUR_OF_DAY Literal 23 set StatementExpression MethodInvocation cal MemberReference Calendar MINUTE Literal 59 set StatementExpression MethodInvocation cal MemberReference Calendar SECOND Literal 59 set StatementExpression MethodInvocation cal MemberReference Calendar MILLISECOND Literal 999 set StatementExpression Assignment MemberReference d2 MethodInvocation cal getTime = End IfStatement BinaryOperation == MemberReference dateRes Literal null BlockStatement StatementExpression Assignment MemberReference part1 MethodInvocation DateField MemberReference d1 dateToString = StatementExpression Assignment MemberReference part2 MethodInvocation DateField MemberReference d2 dateToString = BlockStatement StatementExpression Assignment MemberReference part1 MethodInvocation DateTools MemberReference d1 MemberReference dateRes dateToString = StatementExpression Assignment MemberReference part2 MethodInvocation DateTools MemberReference d2 MemberReference dateRes dateToString = End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation lower MemberReference part1 setText StatementExpression MethodInvocation upper MemberReference part2 setText ReturnStatement ClassCreator ReferenceType RangeQueryNode MemberReference lower MemberReference upper MemberReference collator End ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode preProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType List TypeArgument ReferenceType QueryNode setChildrenOrder FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children QueryNodeException ReturnStatement MemberReference children ReferenceType QueryNodeProcessorImpl",0
238,238,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.payloads Import java.io.IOException Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.PayloadAttribute Import org.apache.lucene.index.Payload ClassDeclaration Modifier public /**
 * Adds the {@link org.apache.lucene.analysis.Token#setStartOffset(int)}
 * and {@link org.apache.lucene.analysis.Token#setEndOffset(int)}
 * First 4 bytes are the start
 *
 **/ TokenOffsetPayloadTokenFilter FieldDeclaration Modifier protected ReferenceType OffsetAttribute VariableDeclarator offsetAtt FieldDeclaration Modifier protected ReferenceType PayloadAttribute VariableDeclarator payAtt ConstructorDeclaration Modifier public TokenOffsetPayloadTokenFilter FormalParameter ReferenceType TokenStream input StatementExpression SuperConstructorInvocation MemberReference input StatementExpression Assignment MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression Assignment MemberReference payAtt MethodInvocation ClassReference ReferenceType PayloadAttribute addAttribute = MethodDeclaration Modifier public final Annotation Override BasicType boolean incrementToken IOException IfStatement MethodInvocation input incrementToken BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator data ArrayCreator BasicType byte Literal 8 StatementExpression MethodInvocation PayloadHelper MethodInvocation offsetAtt startOffset MemberReference data Literal 0 encodeInt StatementExpression MethodInvocation PayloadHelper MethodInvocation offsetAtt endOffset MemberReference data Literal 4 encodeInt LocalVariableDeclaration ReferenceType Payload VariableDeclarator payload ClassCreator ReferenceType Payload MemberReference data StatementExpression MethodInvocation payAtt MemberReference payload setPayload ReturnStatement Literal true BlockStatement ReturnStatement Literal false End ReferenceType TokenFilter",0
299,299,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.store Import java.io.IOException ClassDeclaration Modifier public /**
 * This exception is thrown when the <code>write.lock</code>
 * could not be released.
 * @see Lock#release().
 */ LockReleaseFailedException ConstructorDeclaration Modifier public LockReleaseFailedException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ReferenceType IOException",0
236,236,"CompilationUnit PackageDeclaration org.apache.lucene.store.instantiated Import java.io.Serializable ClassDeclaration /**
 * For non package access see {@link org.apache.lucene.index.IndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)} 
 */ FieldSetting FieldDeclaration ReferenceType String VariableDeclarator fieldName FieldDeclaration BasicType boolean VariableDeclarator storeTermVector Literal false FieldDeclaration BasicType boolean VariableDeclarator storeOffsetWithTermVector Literal false FieldDeclaration BasicType boolean VariableDeclarator storePositionWithTermVector Literal false FieldDeclaration BasicType boolean VariableDeclarator storePayloads Literal false FieldDeclaration BasicType boolean VariableDeclarator stored Literal false FieldDeclaration BasicType boolean VariableDeclarator indexed Literal false FieldDeclaration BasicType boolean VariableDeclarator tokenized Literal false ConstructorDeclaration FieldSetting ConstructorDeclaration FieldSetting FormalParameter ReferenceType String fieldName StatementExpression Assignment This MemberReference fieldName MemberReference fieldName = MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation == This MemberReference o ReturnStatement Literal true End IfStatement BinaryOperation || BinaryOperation == MemberReference o Literal null BinaryOperation != MethodInvocation getClass MethodInvocation o getClass ReturnStatement Literal false End LocalVariableDeclaration Modifier final ReferenceType FieldSetting VariableDeclarator that Cast ReferenceType FieldSetting MemberReference o ReturnStatement MethodInvocation fieldName MemberReference that fieldName equals MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement MethodInvocation fieldName hashCode ReferenceType Serializable",0
405,405,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.util.Random Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.TermDocs ClassDeclaration Modifier public /**
 * Deletes a percentage of documents from an index randomly
 * over the number of documents.  The parameter, X, is in
 * percent.  EG 50 means 1/2 of all documents will be
 * deleted.
 *
 * <p><b>NOTE</b>: the param is an absolute percentage of
 * maxDoc().  This means if you delete 50%, and then delete
 * 50% again, the 2nd delete will do nothing.
 *
 * <p> Parameters:
 * <ul>
 * <li> delete.percent.rand.seed - defines the seed to
 * initialize Random (default 1717)
 * </ul>
 */ DeleteByPercentTask FieldDeclaration BasicType double VariableDeclarator percent FieldDeclaration BasicType int VariableDeclarator numDeleted Literal 0 FieldDeclaration Modifier final ReferenceType Random VariableDeclarator random ConstructorDeclaration Modifier public DeleteByPercentTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData StatementExpression Assignment MemberReference random ClassCreator ReferenceType Random MethodInvocation runData MethodInvocation Literal ""delete.percent.rand.seed"" Literal 1717 get getConfig = MethodDeclaration Modifier public Annotation Override setup Exception StatementExpression SuperMethodInvocation setup MethodDeclaration Modifier public Annotation Override setParams FormalParameter ReferenceType String params StatementExpression SuperMethodInvocation MemberReference params setParams StatementExpression Assignment MemberReference percent BinaryOperation / MethodInvocation Double MemberReference params parseDouble Literal 100 = MethodDeclaration Modifier public Annotation Override BasicType boolean supportsParams ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator r MethodInvocation MethodInvocation getIndexReader getRunData LocalVariableDeclaration BasicType int VariableDeclarator maxDoc MethodInvocation r maxDoc LocalVariableDeclaration BasicType int VariableDeclarator numDeleted Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator numToDelete BinaryOperation - Cast BasicType int BinaryOperation * MemberReference maxDoc MemberReference percent MethodInvocation r numDeletedDocs IfStatement BinaryOperation < MemberReference numToDelete Literal 0 BlockStatement StatementExpression MethodInvocation r undeleteAll StatementExpression Assignment MemberReference numToDelete Cast BasicType int BinaryOperation * MemberReference maxDoc MemberReference percent = End WhileStatement BinaryOperation < MemberReference numDeleted MemberReference numToDelete BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator delRate BinaryOperation / Cast BasicType double BinaryOperation - MemberReference numToDelete MemberReference numDeleted MethodInvocation r numDocs LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator termDocs MethodInvocation r Literal null termDocs WhileStatement BinaryOperation && MethodInvocation termDocs next BinaryOperation < MemberReference numDeleted MemberReference numToDelete BlockStatement IfStatement BinaryOperation <= MethodInvocation random nextDouble MemberReference delRate BlockStatement StatementExpression MethodInvocation r MethodInvocation termDocs doc deleteDocument StatementExpression MemberReference ++ numDeleted End End StatementExpression MethodInvocation termDocs close End StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""--> processed (delete) "" MemberReference numDeleted Literal "" docs"" println StatementExpression MethodInvocation r decRef ReturnStatement MemberReference numDeleted ReferenceType PerfTask",0
115,115,"CompilationUnit PackageDeclaration org.apache.lucene.store ClassDeclaration Modifier public /**
 * This exception is thrown when there is an attempt to
 * access something that has already been closed.
 */ AlreadyClosedException ConstructorDeclaration Modifier public AlreadyClosedException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ReferenceType IllegalStateException",0
277,277,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.feeds Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.index.Term Import org.apache.lucene.queryParser.QueryParser Import org.apache.lucene.search.Query Import org.apache.lucene.search.WildcardQuery Import org.apache.lucene.search.spans.SpanFirstQuery Import org.apache.lucene.search.spans.SpanNearQuery Import org.apache.lucene.search.spans.SpanQuery Import org.apache.lucene.search.spans.SpanTermQuery Import org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask Import org.apache.lucene.util.Version Import java.util.ArrayList Import java.util.Arrays Import java.util.List ClassDeclaration Modifier public /**
 * A QueryMaker that makes queries devised manually (by Grant Ingersoll) for
 * searching in the Reuters collection.
 */ ReutersQueryMaker FieldDeclaration Modifier private static ReferenceType String VariableDeclarator STANDARD_QUERIES ArrayInitializer Literal ""Salomon"" Literal ""Comex"" Literal ""night trading"" Literal ""Japan Sony"" Literal ""\""Sony Japan\"""" Literal ""\""food needs\""~3"" Literal ""\""World Bank\""^2 AND Nigeria"" Literal ""\""World Bank\"" -Nigeria"" Literal ""\""Ford Credit\""~5"" Literal ""airline Europe Canada destination"" BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Long term pressure by trade "" Literal ""ministers is necessary if the current Uruguay round of talks on "" Literal ""the General Agreement on Trade and Tariffs (GATT) is to "" Literal ""succeed"" MethodDeclaration Modifier private static ReferenceType Query getPrebuiltQueries FormalParameter ReferenceType String field ReturnStatement ArrayCreator ReferenceType Query ArrayInitializer ClassCreator ReferenceType SpanFirstQuery ClassCreator ReferenceType SpanTermQuery ClassCreator ReferenceType Term MemberReference field Literal ""ford"" Literal 5 ClassCreator ReferenceType SpanNearQuery ArrayCreator ReferenceType SpanQuery ArrayInitializer ClassCreator ReferenceType SpanTermQuery ClassCreator ReferenceType Term MemberReference field Literal ""night"" ClassCreator ReferenceType SpanTermQuery ClassCreator ReferenceType Term MemberReference field Literal ""trading"" Literal 4 Literal false ClassCreator ReferenceType SpanNearQuery ArrayCreator ReferenceType SpanQuery ArrayInitializer ClassCreator ReferenceType SpanFirstQuery ClassCreator ReferenceType SpanTermQuery ClassCreator ReferenceType Term MemberReference field Literal ""ford"" Literal 10 ClassCreator ReferenceType SpanTermQuery ClassCreator ReferenceType Term MemberReference field Literal ""credit"" Literal 10 Literal false ClassCreator ReferenceType WildcardQuery ClassCreator ReferenceType Term MemberReference field Literal ""fo*"" MethodDeclaration /**
   * Parse the strings containing Lucene queries.
   *
   * @param qs array of strings containing query expressions
   * @param a  analyzer to use when parsing queries
   * @return array of Lucene queries
   */ Modifier private static ReferenceType Query createQueries FormalParameter ReferenceType List TypeArgument ReferenceType Object qs FormalParameter ReferenceType Analyzer a LocalVariableDeclaration ReferenceType QueryParser VariableDeclarator qp ClassCreator ReferenceType QueryParser MemberReference Version LUCENE_CURRENT MemberReference DocMaker BODY_FIELD MemberReference a LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Object VariableDeclarator queries ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Object ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation qs size MemberReference ++ i BlockStatement TryStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator query MethodInvocation qs MemberReference i get LocalVariableDeclaration ReferenceType Query VariableDeclarator q Literal null IfStatement BinaryOperation instanceof MemberReference query ReferenceType String BlockStatement StatementExpression Assignment MemberReference q MethodInvocation qp Cast ReferenceType String MemberReference query parse = IfStatement BinaryOperation instanceof MemberReference query ReferenceType Query BlockStatement StatementExpression Assignment MemberReference q Cast ReferenceType Query MemberReference query = BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + Literal ""Unsupported Query Type: "" MemberReference query println End End IfStatement BinaryOperation != MemberReference q Literal null BlockStatement StatementExpression MethodInvocation queries MemberReference q add End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace End ReturnStatement MethodInvocation queries ArrayCreator ReferenceType Query Literal 0 toArray MethodDeclaration Modifier protected Annotation Override ReferenceType Query prepareQueries Exception LocalVariableDeclaration ReferenceType Analyzer VariableDeclarator anlzr MethodInvocation NewAnalyzerTask MethodInvocation config Literal ""analyzer"" Literal ""org.apache.lucene.analysis.standard.StandardAnalyzer"" get createAnalyzer LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Object VariableDeclarator queryList ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Object Literal 20 StatementExpression MethodInvocation queryList MethodInvocation Arrays MemberReference STANDARD_QUERIES asList addAll StatementExpression MethodInvocation queryList MethodInvocation Arrays MethodInvocation MemberReference DocMaker BODY_FIELD getPrebuiltQueries asList addAll ReturnStatement MethodInvocation MemberReference queryList MemberReference anlzr createQueries ReferenceType AbstractQueryMaker ReferenceType QueryMaker",1
259,259,"CompilationUnit PackageDeclaration org.apache.lucene.store.instantiated Import org.apache.lucene.index.Term Import java.io.Serializable Import java.util.Comparator Import java.util.Collections Import java.util.Arrays ClassDeclaration Modifier public /**
 * A term in the inverted index, coupled to the documents it occurs in.
 *
 * @see org.apache.lucene.index.Term
 */ InstantiatedTerm FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 1l FieldDeclaration Modifier public final static ReferenceType Comparator TypeArgument ReferenceType InstantiatedTerm VariableDeclarator comparator ClassCreator ReferenceType Comparator TypeArgument ReferenceType InstantiatedTerm MethodDeclaration Modifier public BasicType int compare FormalParameter ReferenceType InstantiatedTerm instantiatedTerm FormalParameter ReferenceType InstantiatedTerm instantiatedTerm1 ReturnStatement MethodInvocation instantiatedTerm MethodInvocation MethodInvocation instantiatedTerm1 getTerm compareTo getTerm FieldDeclaration Modifier public final static ReferenceType Comparator VariableDeclarator termComparator ClassCreator ReferenceType Comparator MethodDeclaration Modifier public BasicType int compare FormalParameter ReferenceType Object o FormalParameter ReferenceType Object o1 ReturnStatement Cast ReferenceType InstantiatedTerm MemberReference o FieldDeclaration Modifier private ReferenceType Term VariableDeclarator term FieldDeclaration /**
   * index of term in InstantiatedIndex
   * @see org.apache.lucene.store.instantiated.InstantiatedIndex#getOrderedTerms() */ Modifier private BasicType int VariableDeclarator termIndex MethodDeclaration /**
   * @return Term associated with this entry of the index object graph
   */ Modifier public ReferenceType Term getTerm ReturnStatement MemberReference term ConstructorDeclaration InstantiatedTerm FormalParameter ReferenceType String field FormalParameter ReferenceType String text StatementExpression Assignment This MemberReference term ClassCreator ReferenceType Term MemberReference field MemberReference text = FieldDeclaration /** Ordered by document number */ Modifier private ReferenceType InstantiatedTermDocumentInformation VariableDeclarator associatedDocuments MethodDeclaration /**
   * Meta data per document in which this term is occurring.
   * Ordered by document number.
   *
   * @return Meta data per document in which this term is occurring.
   */ Modifier public ReferenceType InstantiatedTermDocumentInformation getAssociatedDocuments ReturnStatement MemberReference associatedDocuments MethodDeclaration /**
   * Meta data per document in which this term is occurring.
   * Ordered by document number.
   *
   * @param associatedDocuments meta data per document in which this term is occurring, ordered by document number
   */ setAssociatedDocuments FormalParameter ReferenceType InstantiatedTermDocumentInformation associatedDocuments StatementExpression Assignment This MemberReference associatedDocuments MemberReference associatedDocuments = MethodDeclaration /**
   * Finds index to the first beyond the current whose document number is
   * greater than or equal to <i>target</i>, -1 if there is no such element.
   *
   * @param target the document number to match
   * @return -1 if there is no such element
   */ Modifier public BasicType int seekCeilingDocumentInformationIndex FormalParameter BasicType int target ReturnStatement MethodInvocation MemberReference target Literal 0 MethodInvocation MemberReference length getAssociatedDocuments seekCeilingDocumentInformationIndex MethodDeclaration /**
   * Finds index to the first beyond the current whose document number is
   * greater than or equal to <i>target</i>, -1 if there is no such element.
   *
   * @param target the document number to match
   * @param startOffset associated documents index start offset
   * @return -1 if there is no such element
   */ Modifier public BasicType int seekCeilingDocumentInformationIndex FormalParameter BasicType int target FormalParameter BasicType int startOffset ReturnStatement MethodInvocation MemberReference target MemberReference startOffset MethodInvocation MemberReference length getAssociatedDocuments seekCeilingDocumentInformationIndex MethodDeclaration /**
   * Finds index to the first beyond the current whose document number is
   * greater than or equal to <i>target</i>, -1 if there is no such element.
   *
   * @param target the document number to match
   * @param startOffset associated documents index start offset
   * @param endPosition associated documents index end position
   * @return -1 if there is no such element
   */ Modifier public BasicType int seekCeilingDocumentInformationIndex FormalParameter BasicType int target FormalParameter BasicType int startOffset FormalParameter BasicType int endPosition LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation MemberReference target MemberReference startOffset BinaryOperation - MemberReference endPosition MemberReference startOffset binarySearchAssociatedDocuments IfStatement BinaryOperation < MemberReference pos Literal 0 BlockStatement StatementExpression Assignment MemberReference pos BinaryOperation - Literal - 1 MemberReference pos = End IfStatement BinaryOperation <= MethodInvocation MemberReference length getAssociatedDocuments MemberReference pos BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement MemberReference pos End MethodDeclaration Modifier public BasicType int binarySearchAssociatedDocuments FormalParameter BasicType int target ReturnStatement MethodInvocation MemberReference target Literal 0 binarySearchAssociatedDocuments MethodDeclaration Modifier public BasicType int binarySearchAssociatedDocuments FormalParameter BasicType int target FormalParameter BasicType int offset ReturnStatement MethodInvocation MemberReference target MemberReference offset BinaryOperation - MemberReference associatedDocuments length MemberReference offset binarySearchAssociatedDocuments MethodDeclaration /**
   * @param target value to search for in the array
   * @param offset index of the first valid value in the array
   * @param length number of valid values in the array
   * @return index of an occurrence of key in array, or -(insertionIndex + 1) if key is not contained in array (<i>insertionIndex</i> is then the index at which key could be inserted).
   */ Modifier public BasicType int binarySearchAssociatedDocuments FormalParameter BasicType int target FormalParameter BasicType int offset FormalParameter BasicType int length IfStatement BinaryOperation == MemberReference length Literal 0 BlockStatement ReturnStatement BinaryOperation - Literal - 1 MemberReference offset End LocalVariableDeclaration BasicType int VariableDeclarator min MemberReference offset VariableDeclarator max BinaryOperation - BinaryOperation + MemberReference offset MemberReference length Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator minVal MethodInvocation ArraySelector MemberReference min MethodInvocation getDocument MethodInvocation getDocumentNumber getAssociatedDocuments LocalVariableDeclaration BasicType int VariableDeclarator maxVal MethodInvocation ArraySelector MemberReference max MethodInvocation getDocument MethodInvocation getDocumentNumber getAssociatedDocuments LocalVariableDeclaration BasicType int VariableDeclarator nPreviousSteps Literal 0 ForStatement ForControl BlockStatement IfStatement BinaryOperation <= MemberReference target MemberReference minVal ReturnStatement TernaryExpression BinaryOperation == MemberReference target MemberReference minVal MemberReference min BinaryOperation - Literal - 1 MemberReference min End IfStatement BinaryOperation >= MemberReference target MemberReference maxVal ReturnStatement TernaryExpression BinaryOperation == MemberReference target MemberReference maxVal MemberReference max BinaryOperation - Literal - 2 MemberReference max End AssertStatement BinaryOperation != MemberReference min MemberReference max LocalVariableDeclaration BasicType int VariableDeclarator pivot IfStatement BinaryOperation > MemberReference nPreviousSteps Literal 2 BlockStatement StatementExpression Assignment MemberReference pivot BinaryOperation >> BinaryOperation + MemberReference min MemberReference max Literal 1 = BlockStatement StatementExpression Assignment MemberReference pivot BinaryOperation + MemberReference min Cast BasicType int BinaryOperation * BinaryOperation / BinaryOperation - MemberReference target Cast BasicType float MemberReference minVal BinaryOperation - MemberReference maxVal Cast BasicType float MemberReference minVal BinaryOperation - MemberReference max MemberReference min = StatementExpression MemberReference ++ nPreviousSteps End LocalVariableDeclaration BasicType int VariableDeclarator pivotVal MethodInvocation ArraySelector MemberReference pivot MethodInvocation getDocument MethodInvocation getDocumentNumber getAssociatedDocuments IfStatement BinaryOperation > MemberReference target MemberReference pivotVal BlockStatement StatementExpression Assignment MemberReference min BinaryOperation + MemberReference pivot Literal 1 = StatementExpression MemberReference -- max IfStatement BinaryOperation == MemberReference target MemberReference pivotVal BlockStatement ReturnStatement MemberReference pivot BlockStatement StatementExpression MemberReference ++ min StatementExpression Assignment MemberReference max BinaryOperation - MemberReference pivot Literal 1 = End End StatementExpression Assignment MemberReference maxVal MethodInvocation ArraySelector MemberReference max MethodInvocation getDocument MethodInvocation getDocumentNumber getAssociatedDocuments = StatementExpression Assignment MemberReference minVal MethodInvocation ArraySelector MemberReference min MethodInvocation getDocument MethodInvocation getDocumentNumber getAssociatedDocuments = End MethodDeclaration /**
   * Navigates to the view of this occurrences of this term in a specific document. 
   *
   * This method is only used by InstantiatedIndex(IndexReader) and
   * should not be optimized for less CPU at the cost of more RAM.
   *
   * @param documentNumber the n:th document in the index
   * @return view of this term from specified document
   */ Modifier public ReferenceType InstantiatedTermDocumentInformation getAssociatedDocument FormalParameter BasicType int documentNumber LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation MemberReference documentNumber binarySearchAssociatedDocuments ReturnStatement TernaryExpression BinaryOperation < MemberReference pos Literal 0 Literal null MethodInvocation ArraySelector MemberReference pos getAssociatedDocuments MethodDeclaration Modifier public final ReferenceType String field ReturnStatement MethodInvocation term field MethodDeclaration Modifier public final ReferenceType String text ReturnStatement MethodInvocation term text MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement MethodInvocation term toString MethodDeclaration Modifier public BasicType int getTermIndex ReturnStatement MemberReference termIndex MethodDeclaration Modifier public setTermIndex FormalParameter BasicType int termIndex StatementExpression Assignment This MemberReference termIndex MemberReference termIndex = ReferenceType Serializable",0
452,452,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.Reader Import org.apache.lucene.util.AttributeSource ClassDeclaration Modifier public /** A WhitespaceTokenizer is a tokenizer that divides text at whitespace.
 * Adjacent sequences of non-Whitespace characters form tokens. */ WhitespaceTokenizer ConstructorDeclaration Modifier public /** Construct a new WhitespaceTokenizer. */ WhitespaceTokenizer FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in ConstructorDeclaration Modifier public /** Construct a new WhitespaceTokenizer using a given {@link AttributeSource}. */ WhitespaceTokenizer FormalParameter ReferenceType AttributeSource source FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference source MemberReference in ConstructorDeclaration Modifier public /** Construct a new WhitespaceTokenizer using a given {@link org.apache.lucene.util.AttributeSource.AttributeFactory}. */ WhitespaceTokenizer FormalParameter ReferenceType AttributeFactory factory FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference factory MemberReference in MethodDeclaration /** Collects only characters which do not satisfy
   * {@link Character#isWhitespace(char)}.*/ Modifier protected Annotation Override BasicType boolean isTokenChar FormalParameter BasicType char c ReturnStatement MethodInvocation ! Character MemberReference c isWhitespace ReferenceType CharTokenizer",1
676,676,,1
391,391,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ German2Stemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal """" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ae"" Literal 0 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""oe"" Literal 0 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""qu"" Literal 0 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""ue"" Literal 0 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ß"" Literal 0 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal """" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""U"" Literal 0 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""Y"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ä"" Literal 0 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ö"" Literal 0 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ü"" Literal 0 Literal 5 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""e"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""em"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""en"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ern"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""er"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""s"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""es"" Literal 5 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_3 ArrayInitializer ClassCreator ReferenceType Among Literal ""en"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""er"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""st"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""est"" Literal 2 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_4 ArrayInitializer ClassCreator ReferenceType Among Literal ""ig"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""lich"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_5 ArrayInitializer ClassCreator ReferenceType Among Literal ""end"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ig"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ung"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""lich"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""isch"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ik"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""heit"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""keit"" Literal - 1 Literal 4 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 1 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 8 Literal 0 Literal 32 Literal 8 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_s_ending ArrayInitializer Literal 117 Literal 30 Literal 5 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_st_ending ArrayInitializer Literal 117 Literal 30 Literal 4 FieldDeclaration Modifier private BasicType int VariableDeclarator I_x FieldDeclaration Modifier private BasicType int VariableDeclarator I_p2 FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 MethodDeclaration Modifier private copy_from FormalParameter ReferenceType German2Stemmer other StatementExpression Assignment MemberReference I_x MemberReference other I_x = StatementExpression Assignment MemberReference I_p2 MemberReference other I_p2 = StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_prelude LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 StatementExpression Assignment MemberReference v_1 MemberReference cursor = WhileStatement replab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement WhileStatement golab2 Literal true BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 in_grouping BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference bra MemberReference cursor = DoStatement lab4 Literal false BlockStatement StatementExpression Assignment MemberReference v_4 MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""u"" eq_s BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 in_grouping BlockStatement BreakStatement lab5 End StatementExpression MethodInvocation Literal ""U"" slice_from BreakStatement lab4 End StatementExpression Assignment MemberReference cursor MemberReference v_4 = IfStatement MethodInvocation ! Literal 1 Literal ""y"" eq_s BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 in_grouping BlockStatement BreakStatement lab3 End StatementExpression MethodInvocation Literal ""Y"" slice_from End StatementExpression Assignment MemberReference cursor MemberReference v_3 = BreakStatement golab2 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor End ContinueStatement replab0 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = BreakStatement replab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = WhileStatement replab6 Literal true BlockStatement StatementExpression Assignment MemberReference v_5 MemberReference cursor = DoStatement lab7 Literal false BlockStatement StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 6 find_among = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference ket MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab7 SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""ss"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""ä"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""ö"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation Literal ""ü"" slice_from BreakStatement SwitchStatementCase Literal 5 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation + MemberReference cursor Literal 2 IfStatement BinaryOperation || BinaryOperation > Literal 0 MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference cursor MemberReference c = BreakStatement SwitchStatementCase Literal 6 IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab7 End StatementExpression MemberReference ++ cursor BreakStatement End ContinueStatement replab6 End StatementExpression Assignment MemberReference cursor MemberReference v_5 = BreakStatement replab6 End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference I_p1 MemberReference limit = StatementExpression Assignment MemberReference I_p2 MemberReference limit = StatementExpression Assignment MemberReference v_1 MemberReference cursor = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation + MemberReference cursor Literal 3 IfStatement BinaryOperation || BinaryOperation > Literal 0 MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference c = StatementExpression Assignment MemberReference I_x MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference v_1 = WhileStatement golab0 Literal true BlockStatement DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 in_grouping BlockStatement BreakStatement lab1 End BreakStatement golab0 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab2 Literal true BlockStatement DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 out_grouping BlockStatement BreakStatement lab3 End BreakStatement golab2 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement BinaryOperation < MemberReference I_p1 MemberReference I_x BlockStatement BreakStatement lab4 End StatementExpression Assignment MemberReference I_p1 MemberReference I_x = End WhileStatement golab5 Literal true BlockStatement DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 in_grouping BlockStatement BreakStatement lab6 End BreakStatement golab5 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab7 Literal true BlockStatement DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 252 out_grouping BlockStatement BreakStatement lab8 End BreakStatement golab7 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p2 MemberReference cursor = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_postlude LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 WhileStatement replab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_1 Literal 6 find_among = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference ket MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab1 SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""y"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""u"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation Literal ""o"" slice_from BreakStatement SwitchStatementCase Literal 5 StatementExpression MethodInvocation Literal ""u"" slice_from BreakStatement SwitchStatementCase Literal 6 IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor BreakStatement End ContinueStatement replab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = BreakStatement replab0 End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R1 IfStatement BinaryOperation <= MemberReference I_p1 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R2 IfStatement BinaryOperation <= MemberReference I_p2 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_standard_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_2 Literal 7 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab0 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab0 End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab0 SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! MemberReference g_s_ending Literal 98 Literal 116 in_grouping_b BlockStatement BreakStatement lab0 End StatementExpression MethodInvocation slice_del BreakStatement End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_3 Literal 4 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab1 SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! MemberReference g_st_ending Literal 98 Literal 116 in_grouping_b BlockStatement BreakStatement lab1 End BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation - MemberReference cursor Literal 3 IfStatement BinaryOperation || BinaryOperation > MemberReference limit_backward MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference c = StatementExpression MethodInvocation slice_del BreakStatement End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_5 Literal 8 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R2 BlockStatement BreakStatement lab2 End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab2 SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 2 Literal ""ig"" eq_s_b BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement lab3 End StatementExpression Assignment MemberReference bra MemberReference cursor = BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""e"" eq_s_b BlockStatement BreakStatement lab4 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement lab3 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = IfStatement MethodInvocation ! r_R2 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement lab3 End StatementExpression MethodInvocation slice_del End BreakStatement SwitchStatementCase Literal 2 BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""e"" eq_s_b BlockStatement BreakStatement lab5 End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab7 Literal false BlockStatement StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""er"" eq_s_b BlockStatement BreakStatement lab8 End BreakStatement lab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = IfStatement MethodInvocation ! Literal 2 Literal ""en"" eq_s_b BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = BreakStatement lab6 End End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = BreakStatement lab6 End StatementExpression MethodInvocation slice_del End BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab9 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_4 Literal 2 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement lab9 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R2 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement lab9 End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement lab9 SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement End End BreakStatement End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_prelude BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor MemberReference v_2 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_standard_suffix BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = StatementExpression Assignment MemberReference v_4 MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_postlude BlockStatement BreakStatement lab3 End End StatementExpression Assignment MemberReference cursor MemberReference v_4 = ReturnStatement Literal true ReferenceType SnowballProgram",0
62,62,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.compound Import java.io.IOException Import java.util.Arrays Import java.util.Collection Import java.util.Iterator Import java.util.LinkedList Import java.util.Set Import org.apache.lucene.analysis.CharArraySet Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.FlagsAttribute Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.PayloadAttribute Import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.analysis.tokenattributes.TypeAttribute ClassDeclaration Modifier public abstract /**
 * Base class for decomposition token filters.
 */ CompoundWordTokenFilterBase FieldDeclaration /**
   * The default for minimal word length that gets decomposed
   */ Modifier public final static BasicType int VariableDeclarator DEFAULT_MIN_WORD_SIZE Literal 5 FieldDeclaration /**
   * The default for minimal length of subwords that get propagated to the output of this filter
   */ Modifier public final static BasicType int VariableDeclarator DEFAULT_MIN_SUBWORD_SIZE Literal 2 FieldDeclaration /**
   * The default for maximal length of subwords that get propagated to the output of this filter
   */ Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_SUBWORD_SIZE Literal 15 FieldDeclaration Modifier final protected ReferenceType CharArraySet VariableDeclarator dictionary FieldDeclaration Modifier final protected ReferenceType LinkedList VariableDeclarator tokens FieldDeclaration Modifier final protected BasicType int VariableDeclarator minWordSize FieldDeclaration Modifier final protected BasicType int VariableDeclarator minSubwordSize FieldDeclaration Modifier final protected BasicType int VariableDeclarator maxSubwordSize FieldDeclaration Modifier final protected BasicType boolean VariableDeclarator onlyLongestMatch FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt FieldDeclaration Modifier private ReferenceType FlagsAttribute VariableDeclarator flagsAtt FieldDeclaration Modifier private ReferenceType PositionIncrementAttribute VariableDeclarator posIncAtt FieldDeclaration Modifier private ReferenceType TypeAttribute VariableDeclarator typeAtt FieldDeclaration Modifier private ReferenceType PayloadAttribute VariableDeclarator payloadAtt FieldDeclaration Modifier private final ReferenceType Token VariableDeclarator wrapper ClassCreator ReferenceType Token ConstructorDeclaration Modifier protected CompoundWordTokenFilterBase FormalParameter ReferenceType TokenStream input FormalParameter ReferenceType String dictionary FormalParameter BasicType int minWordSize FormalParameter BasicType int minSubwordSize FormalParameter BasicType int maxSubwordSize FormalParameter BasicType boolean onlyLongestMatch StatementExpression ExplicitConstructorInvocation MemberReference input MethodInvocation MemberReference dictionary makeDictionary MemberReference minWordSize MemberReference minSubwordSize MemberReference maxSubwordSize MemberReference onlyLongestMatch ConstructorDeclaration Modifier protected CompoundWordTokenFilterBase FormalParameter ReferenceType TokenStream input FormalParameter ReferenceType String dictionary FormalParameter BasicType boolean onlyLongestMatch StatementExpression ExplicitConstructorInvocation MemberReference input MethodInvocation MemberReference dictionary makeDictionary MemberReference DEFAULT_MIN_WORD_SIZE MemberReference DEFAULT_MIN_SUBWORD_SIZE MemberReference DEFAULT_MAX_SUBWORD_SIZE MemberReference onlyLongestMatch ConstructorDeclaration Modifier protected CompoundWordTokenFilterBase FormalParameter ReferenceType TokenStream input FormalParameter ReferenceType Set dictionary FormalParameter BasicType boolean onlyLongestMatch StatementExpression ExplicitConstructorInvocation MemberReference input MemberReference dictionary MemberReference DEFAULT_MIN_WORD_SIZE MemberReference DEFAULT_MIN_SUBWORD_SIZE MemberReference DEFAULT_MAX_SUBWORD_SIZE MemberReference onlyLongestMatch ConstructorDeclaration Modifier protected CompoundWordTokenFilterBase FormalParameter ReferenceType TokenStream input FormalParameter ReferenceType String dictionary StatementExpression ExplicitConstructorInvocation MemberReference input MethodInvocation MemberReference dictionary makeDictionary MemberReference DEFAULT_MIN_WORD_SIZE MemberReference DEFAULT_MIN_SUBWORD_SIZE MemberReference DEFAULT_MAX_SUBWORD_SIZE Literal false ConstructorDeclaration Modifier protected CompoundWordTokenFilterBase FormalParameter ReferenceType TokenStream input FormalParameter ReferenceType Set dictionary StatementExpression ExplicitConstructorInvocation MemberReference input MemberReference dictionary MemberReference DEFAULT_MIN_WORD_SIZE MemberReference DEFAULT_MIN_SUBWORD_SIZE MemberReference DEFAULT_MAX_SUBWORD_SIZE Literal false ConstructorDeclaration Modifier protected CompoundWordTokenFilterBase FormalParameter ReferenceType TokenStream input FormalParameter ReferenceType Set dictionary FormalParameter BasicType int minWordSize FormalParameter BasicType int minSubwordSize FormalParameter BasicType int maxSubwordSize FormalParameter BasicType boolean onlyLongestMatch StatementExpression SuperConstructorInvocation MemberReference input StatementExpression Assignment This MemberReference tokens ClassCreator ReferenceType LinkedList = StatementExpression Assignment This MemberReference minWordSize MemberReference minWordSize = StatementExpression Assignment This MemberReference minSubwordSize MemberReference minSubwordSize = StatementExpression Assignment This MemberReference maxSubwordSize MemberReference maxSubwordSize = StatementExpression Assignment This MemberReference onlyLongestMatch MemberReference onlyLongestMatch = IfStatement BinaryOperation instanceof MemberReference dictionary ReferenceType CharArraySet BlockStatement StatementExpression Assignment This MemberReference dictionary Cast ReferenceType CharArraySet MemberReference dictionary = BlockStatement StatementExpression Assignment This MemberReference dictionary ClassCreator ReferenceType CharArraySet MethodInvocation dictionary size Literal false = StatementExpression MethodInvocation This MemberReference dictionary MemberReference dictionary addAllLowerCase End StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression Assignment MemberReference flagsAtt MethodInvocation ClassReference ReferenceType FlagsAttribute addAttribute = StatementExpression Assignment MemberReference posIncAtt MethodInvocation ClassReference ReferenceType PositionIncrementAttribute addAttribute = StatementExpression Assignment MemberReference typeAtt MethodInvocation ClassReference ReferenceType TypeAttribute addAttribute = StatementExpression Assignment MemberReference payloadAtt MethodInvocation ClassReference ReferenceType PayloadAttribute addAttribute = MethodDeclaration /**
   * Create a set of words from an array
   * The resulting Set does case insensitive matching
   * TODO We should look for a faster dictionary lookup approach.
   * @param dictionary 
   * @return {@link Set} of lowercased terms 
   */ Modifier public final static ReferenceType Set makeDictionary FormalParameter Modifier final ReferenceType String dictionary LocalVariableDeclaration ReferenceType CharArraySet VariableDeclarator dict ClassCreator ReferenceType CharArraySet MemberReference dictionary length Literal false StatementExpression MethodInvocation MemberReference dict MethodInvocation Arrays MemberReference dictionary asList addAllLowerCase ReturnStatement MemberReference dict MethodDeclaration Modifier private final setToken FormalParameter Modifier final ReferenceType Token token IOException StatementExpression MethodInvocation termAtt MethodInvocation token termBuffer Literal 0 MethodInvocation token termLength setTermBuffer StatementExpression MethodInvocation flagsAtt MethodInvocation token getFlags setFlags StatementExpression MethodInvocation typeAtt MethodInvocation token type setType StatementExpression MethodInvocation offsetAtt MethodInvocation token startOffset MethodInvocation token endOffset setOffset StatementExpression MethodInvocation posIncAtt MethodInvocation token getPositionIncrement setPositionIncrement StatementExpression MethodInvocation payloadAtt MethodInvocation token getPayload setPayload MethodDeclaration Modifier public final Annotation Override BasicType boolean incrementToken IOException IfStatement BinaryOperation > MethodInvocation tokens size Literal 0 BlockStatement StatementExpression MethodInvocation Cast ReferenceType Token MethodInvocation tokens removeFirst setToken ReturnStatement Literal true End IfStatement BinaryOperation == MethodInvocation input incrementToken Literal false ReturnStatement Literal false End StatementExpression MethodInvocation wrapper MethodInvocation termAtt termBuffer Literal 0 MethodInvocation termAtt termLength setTermBuffer StatementExpression MethodInvocation wrapper MethodInvocation offsetAtt startOffset setStartOffset StatementExpression MethodInvocation wrapper MethodInvocation offsetAtt endOffset setEndOffset StatementExpression MethodInvocation wrapper MethodInvocation flagsAtt getFlags setFlags StatementExpression MethodInvocation wrapper MethodInvocation typeAtt type setType StatementExpression MethodInvocation wrapper MethodInvocation posIncAtt getPositionIncrement setPositionIncrement StatementExpression MethodInvocation wrapper MethodInvocation payloadAtt getPayload setPayload StatementExpression MethodInvocation MemberReference wrapper decompose IfStatement BinaryOperation > MethodInvocation tokens size Literal 0 BlockStatement StatementExpression MethodInvocation Cast ReferenceType Token MethodInvocation tokens removeFirst setToken ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier final protected static addAllLowerCase FormalParameter ReferenceType Set target FormalParameter ReferenceType Collection col LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation col iterator WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression MethodInvocation target Cast ReferenceType String MethodInvocation iter next add End MethodDeclaration Modifier protected static BasicType char makeLowerCaseCopy FormalParameter Modifier final BasicType char buffer LocalVariableDeclaration BasicType char VariableDeclarator result ArrayCreator BasicType char MemberReference buffer length StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference result Literal 0 MemberReference buffer length arraycopy ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference buffer length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i result MethodInvocation Character MemberReference ArraySelector MemberReference i buffer toLowerCase = End ReturnStatement MemberReference result MethodDeclaration Modifier final protected ReferenceType Token createToken FormalParameter Modifier final BasicType int offset FormalParameter Modifier final BasicType int length FormalParameter Modifier final ReferenceType Token prototype LocalVariableDeclaration BasicType int VariableDeclarator newStart BinaryOperation + MethodInvocation prototype startOffset MemberReference offset LocalVariableDeclaration ReferenceType Token VariableDeclarator t MethodInvocation prototype MethodInvocation prototype termBuffer MemberReference offset MemberReference length MemberReference newStart BinaryOperation + MemberReference newStart MemberReference length clone StatementExpression MethodInvocation t Literal 0 setPositionIncrement ReturnStatement MemberReference t MethodDeclaration Modifier protected decompose FormalParameter Modifier final ReferenceType Token token StatementExpression MethodInvocation tokens Cast ReferenceType Token MethodInvocation token clone add IfStatement BinaryOperation < MethodInvocation token termLength This MemberReference minWordSize BlockStatement ReturnStatement End StatementExpression MethodInvocation MemberReference token decomposeInternal MethodDeclaration Modifier protected abstract decomposeInternal FormalParameter Modifier final ReferenceType Token token MethodDeclaration Modifier public Annotation Override reset IOException StatementExpression SuperMethodInvocation reset StatementExpression MethodInvocation tokens clear ReferenceType TokenFilter",1
553,553,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.feeds Import java.io.BufferedInputStream Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStream Import java.util.ArrayList Import java.util.Arrays Import java.util.HashMap Import java.util.Map Import org.apache.commons.compress.compressors.CompressorException Import org.apache.commons.compress.compressors.CompressorStreamFactory Import org.apache.lucene.benchmark.byTask.utils.Config ClassDeclaration Modifier public abstract /**
 * Represents content from a specified source, such as TREC, Reuters etc. A
 * {@link ContentSource} is responsible for creating {@link DocData} objects for
 * its documents to be consumed by {@link DocMaker}. It also keeps track
 * of various statistics, such as how many documents were generated, size in
 * bytes etc.
 * <p>
 * Supports the following configuration parameters:
 * <ul>
 * <li><b>content.source.forever</b> - specifies whether to generate documents
 * forever (<b>default=true</b>).
 * <li><b>content.source.verbose</b> - specifies whether messages should be
 * output by the content source (<b>default=false</b>).
 * <li><b>content.source.encoding</b> - specifies which encoding to use when
 * reading the files of that content source. Certain implementations may define
 * a default value if this parameter is not specified. (<b>default=null</b>).
 * <li><b>content.source.log.step</b> - specifies for how many documents a
 * message should be logged. If set to 0 it means no logging should occur.
 * <b>NOTE:</b> if verbose is set to false, logging should not occur even if
 * logStep is not 0 (<b>default=0</b>).
 * </ul>
 */ ContentSource FieldDeclaration Modifier private final static BasicType int VariableDeclarator BZIP Literal 0 FieldDeclaration Modifier private final static BasicType int VariableDeclarator OTHER Literal 1 FieldDeclaration Modifier private final static ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType Integer VariableDeclarator extensionToType ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Integer StatementExpression MethodInvocation extensionToType Literal "".bz2"" MethodInvocation Integer MemberReference BZIP valueOf put StatementExpression MethodInvocation extensionToType Literal "".bzip"" MethodInvocation Integer MemberReference BZIP valueOf put FieldDeclaration Modifier final protected static BasicType int VariableDeclarator BUFFER_SIZE BinaryOperation << Literal 1 Literal 16 FieldDeclaration Modifier private BasicType long VariableDeclarator bytesCount FieldDeclaration Modifier private BasicType long VariableDeclarator totalBytesCount FieldDeclaration Modifier private BasicType int VariableDeclarator docsCount FieldDeclaration Modifier private BasicType int VariableDeclarator totalDocsCount FieldDeclaration Modifier private ReferenceType Config VariableDeclarator config FieldDeclaration Modifier protected BasicType boolean VariableDeclarator forever FieldDeclaration Modifier protected BasicType int VariableDeclarator logStep FieldDeclaration Modifier protected BasicType boolean VariableDeclarator verbose FieldDeclaration Modifier protected ReferenceType String VariableDeclarator encoding FieldDeclaration Modifier private ReferenceType CompressorStreamFactory VariableDeclarator csFactory ClassCreator ReferenceType CompressorStreamFactory MethodDeclaration Modifier final protected synchronized addBytes FormalParameter BasicType long numBytes StatementExpression Assignment MemberReference bytesCount MemberReference numBytes += StatementExpression Assignment MemberReference totalBytesCount MemberReference numBytes += MethodDeclaration Modifier final protected synchronized addDoc StatementExpression MemberReference ++ docsCount StatementExpression MemberReference ++ totalDocsCount MethodDeclaration /**
   * A convenience method for collecting all the files of a content source from
   * a given directory. The collected {@link File} instances are stored in the
   * given <code>files</code>.
   */ Modifier final protected collectFiles FormalParameter ReferenceType File dir FormalParameter ReferenceType ArrayList TypeArgument ReferenceType File files IfStatement MethodInvocation ! dir canRead BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType File VariableDeclarator dirFiles MethodInvocation dir listFiles StatementExpression MethodInvocation Arrays MemberReference dirFiles sort ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference dirFiles length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator file MemberReference ArraySelector MemberReference i dirFiles IfStatement MethodInvocation file isDirectory BlockStatement StatementExpression MethodInvocation MemberReference file MemberReference files collectFiles IfStatement MethodInvocation file canRead BlockStatement StatementExpression MethodInvocation files MemberReference file add End End End MethodDeclaration /**
   * Returns an {@link InputStream} over the requested file. This method
   * attempts to identify the appropriate {@link InputStream} instance to return
   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a
   * 'bzip' {@link InputStream}).
   */ Modifier protected ReferenceType InputStream getInputStream FormalParameter ReferenceType File file IOException LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is ClassCreator ReferenceType BufferedInputStream ClassCreator ReferenceType FileInputStream MemberReference file MemberReference BUFFER_SIZE LocalVariableDeclaration ReferenceType String VariableDeclarator fileName MethodInvocation file getName LocalVariableDeclaration BasicType int VariableDeclarator idx MethodInvocation fileName Literal '.' lastIndexOf LocalVariableDeclaration BasicType int VariableDeclarator type MemberReference OTHER IfStatement BinaryOperation != MemberReference idx Literal - 1 BlockStatement LocalVariableDeclaration ReferenceType Integer VariableDeclarator typeInt MethodInvocation extensionToType MethodInvocation fileName MemberReference idx substring get IfStatement BinaryOperation != MemberReference typeInt Literal null BlockStatement StatementExpression Assignment MemberReference type MethodInvocation typeInt intValue = End End SwitchStatement MemberReference type SwitchStatementCase BZIP TryStatement StatementExpression Assignment MemberReference is MethodInvocation csFactory Literal ""bzip2"" MemberReference is createCompressorInputStream = CatchClause CatchClauseParameter CompressorException e LocalVariableDeclaration ReferenceType IOException VariableDeclarator ioe ClassCreator ReferenceType IOException MethodInvocation e getMessage StatementExpression MethodInvocation ioe MemberReference e initCause ThrowStatement MemberReference ioe BreakStatement SwitchStatementCase End ReturnStatement MemberReference is MethodDeclaration /**
   * Returns true whether it's time to log a message (depending on verbose and
   * the number of documents generated).
   */ Modifier final protected BasicType boolean shouldLog ReturnStatement BinaryOperation && BinaryOperation && MemberReference verbose BinaryOperation > MemberReference logStep Literal 0 BinaryOperation == BinaryOperation % MemberReference docsCount MemberReference logStep Literal 0 MethodDeclaration /** Called when reading from this content source is no longer required. */ Modifier public abstract close IOException MethodDeclaration /** Returns the number of bytes generated since last reset. */ Modifier public final BasicType long getBytesCount ReturnStatement MemberReference bytesCount MethodDeclaration /** Returns the number of generated documents since last reset. */ Modifier public final BasicType int getDocsCount ReturnStatement MemberReference docsCount MethodDeclaration Modifier public final ReferenceType Config getConfig ReturnStatement MemberReference config MethodDeclaration /** Returns the next {@link DocData} from the content source. */ Modifier public abstract ReferenceType DocData getNextDocData FormalParameter ReferenceType DocData docData NoMoreDataException IOException MethodDeclaration /** Returns the total number of bytes that were generated by this source. */ Modifier public final BasicType long getTotalBytesCount ReturnStatement MemberReference totalBytesCount MethodDeclaration /** Returns the total number of generated documents. */ Modifier public final BasicType int getTotalDocsCount ReturnStatement MemberReference totalDocsCount MethodDeclaration /**
   * Resets the input for this content source, so that the test would behave as
   * if it was just started, input-wise.
   * <p>
   * <b>NOTE:</b> the default implementation resets the number of bytes and
   * documents generated since the last reset, so it's important to call
   * super.resetInputs in case you override this method.
   */ Modifier public resetInputs IOException StatementExpression Assignment MemberReference bytesCount Literal 0 = StatementExpression Assignment MemberReference docsCount Literal 0 = MethodDeclaration /**
   * Sets the {@link Config} for this content source. If you override this
   * method, you must call super.setConfig.
   */ Modifier public setConfig FormalParameter ReferenceType Config config StatementExpression Assignment This MemberReference config MemberReference config = StatementExpression Assignment MemberReference forever MethodInvocation config Literal ""content.source.forever"" Literal true get = StatementExpression Assignment MemberReference logStep MethodInvocation config Literal ""content.source.log.step"" Literal 0 get = StatementExpression Assignment MemberReference verbose MethodInvocation config Literal ""content.source.verbose"" Literal false get = StatementExpression Assignment MemberReference encoding MethodInvocation config Literal ""content.source.encoding"" Literal null get =",0
657,657,,0
915,915,,0
366,366,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.search.FuzzyLikeThisQuery Import org.apache.lucene.search.Query Import org.apache.lucene.xmlparser.DOMUtils Import org.apache.lucene.xmlparser.ParserException Import org.apache.lucene.xmlparser.QueryBuilder Import org.w3c.dom.Element Import org.w3c.dom.NodeList ClassDeclaration Modifier public /**
 * 
 */ FuzzyLikeThisQueryBuilder FieldDeclaration BasicType int VariableDeclarator defaultMaxNumTerms Literal 50 FieldDeclaration BasicType float VariableDeclarator defaultMinSimilarity Literal 0.5f FieldDeclaration BasicType int VariableDeclarator defaultPrefixLength Literal 1 FieldDeclaration BasicType boolean VariableDeclarator defaultIgnoreTF Literal false FieldDeclaration Modifier private ReferenceType Analyzer VariableDeclarator analyzer ConstructorDeclaration Modifier public FuzzyLikeThisQueryBuilder FormalParameter ReferenceType Analyzer analyzer StatementExpression Assignment This MemberReference analyzer MemberReference analyzer = MethodDeclaration Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration ReferenceType NodeList VariableDeclarator nl MethodInvocation e Literal ""Field"" getElementsByTagName LocalVariableDeclaration BasicType int VariableDeclarator maxNumTerms MethodInvocation DOMUtils MemberReference e Literal ""maxNumTerms"" MemberReference defaultMaxNumTerms getAttribute LocalVariableDeclaration ReferenceType FuzzyLikeThisQuery VariableDeclarator fbq ClassCreator ReferenceType FuzzyLikeThisQuery MemberReference maxNumTerms MemberReference analyzer StatementExpression MethodInvocation fbq MethodInvocation DOMUtils MemberReference e Literal ""ignoreTF"" MemberReference defaultIgnoreTF getAttribute setIgnoreTF ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nl getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator fieldElem Cast ReferenceType Element MethodInvocation nl MemberReference i item LocalVariableDeclaration BasicType float VariableDeclarator minSimilarity MethodInvocation DOMUtils MemberReference fieldElem Literal ""minSimilarity"" MemberReference defaultMinSimilarity getAttribute LocalVariableDeclaration BasicType int VariableDeclarator prefixLength MethodInvocation DOMUtils MemberReference fieldElem Literal ""prefixLength"" MemberReference defaultPrefixLength getAttribute LocalVariableDeclaration ReferenceType String VariableDeclarator fieldName MethodInvocation DOMUtils MemberReference fieldElem Literal ""fieldName"" getAttributeWithInheritance LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation DOMUtils MemberReference fieldElem getText StatementExpression MethodInvocation fbq MemberReference value MemberReference fieldName MemberReference minSimilarity MemberReference prefixLength addTerms End StatementExpression MethodInvocation fbq MethodInvocation DOMUtils MemberReference e Literal ""boost"" Literal 1.0f getAttribute setBoost ReturnStatement MemberReference fbq ReferenceType QueryBuilder",0
926,926,,0
540,540,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.processors Import java.util.LinkedList Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.core.nodes.QueryNode ClassDeclaration Modifier public /**
 * A {@link QueryNodeProcessorPipeline} class should be used to build a query
 * node processor pipeline.
 * 
 * When a query node tree is processed using this class, it passes the query
 * node tree to each processor on the pipeline and the result from each
 * processor is passed to the next one, always following the order the
 * processors were on the pipeline.
 * 
 * When a {@link QueryConfigHandler} object is set on a
 * {@link QueryNodeProcessorPipeline}, it takes care of also setting this
 * {@link QueryConfigHandler} on all processor on pipeline.
 * 
 */ QueryNodeProcessorPipeline FieldDeclaration Modifier private ReferenceType LinkedList TypeArgument ReferenceType QueryNodeProcessor VariableDeclarator processors ClassCreator ReferenceType LinkedList TypeArgument ReferenceType QueryNodeProcessor FieldDeclaration Modifier private ReferenceType QueryConfigHandler VariableDeclarator queryConfig ConstructorDeclaration Modifier public /**
   * Constructs an empty query node processor pipeline.
   */ QueryNodeProcessorPipeline ConstructorDeclaration Modifier public /**
   * Constructs with a {@link QueryConfigHandler} object.
   */ QueryNodeProcessorPipeline FormalParameter ReferenceType QueryConfigHandler queryConfigHandler StatementExpression Assignment This MemberReference queryConfig MemberReference queryConfigHandler = MethodDeclaration /**
   * For reference about this method check:
   * {@link QueryNodeProcessor#getQueryConfigHandler()}.
   * 
   * @return QueryConfigHandler the query configuration handler to be set.
   * 
   * @see QueryNodeProcessor#setQueryConfigHandler(QueryConfigHandler)
   * @see QueryConfigHandler
   */ Modifier public ReferenceType QueryConfigHandler getQueryConfigHandler ReturnStatement This MemberReference queryConfig MethodDeclaration /**
   * For reference about this method check:
   * {@link QueryNodeProcessor#process(QueryNode)}.
   * 
   * @param queryTree
   *          the query node tree to be processed
   * 
   * @throws QueryNodeException
   *           if something goes wrong during the query node processing
   * 
   * @see QueryNode
   */ Modifier public ReferenceType QueryNode process FormalParameter ReferenceType QueryNode queryTree QueryNodeException ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNodeProcessor VariableDeclarator processor This MemberReference processors BlockStatement StatementExpression Assignment MemberReference queryTree MethodInvocation processor MemberReference queryTree process = End ReturnStatement MemberReference queryTree MethodDeclaration /**
   * Adds a processor to the pipeline, it's always added to the end of the
   * pipeline.
   * 
   * @param processor
   *          the processor to be added
   */ Modifier public addProcessor FormalParameter ReferenceType QueryNodeProcessor processor StatementExpression This MemberReference processors MethodInvocation MemberReference processor add StatementExpression MethodInvocation processor This MemberReference queryConfig setQueryConfigHandler MethodDeclaration /**
   * For reference about this method check:
   * {@link QueryNodeProcessor#setQueryConfigHandler(QueryConfigHandler)}.
   * 
   * @param queryConfigHandler
   *          the query configuration handler to be set.
   * 
   * @see QueryNodeProcessor#getQueryConfigHandler()
   * @see QueryConfigHandler
   */ Modifier public setQueryConfigHandler FormalParameter ReferenceType QueryConfigHandler queryConfigHandler StatementExpression Assignment This MemberReference queryConfig MemberReference queryConfigHandler = ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNodeProcessor VariableDeclarator processor This MemberReference processors BlockStatement StatementExpression MethodInvocation processor This MemberReference queryConfig setQueryConfigHandler End ReferenceType QueryNodeProcessor",0
878,878,,0
40,40,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.util.LinkedHashMap Import java.util.List Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.benchmark.byTask.stats.Report Import org.apache.lucene.benchmark.byTask.stats.TaskStats ClassDeclaration Modifier public /**
 * Report all statistics aggregated by name.
 * <br>Other side effects: None.
 */ RepSumByNameTask ConstructorDeclaration Modifier public RepSumByNameTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception LocalVariableDeclaration ReferenceType Report VariableDeclarator rp MethodInvocation MethodInvocation MethodInvocation getPoints MethodInvocation taskStats getRunData reportSumByName StatementExpression MethodInvocation System.out println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""------------> Report Sum By (any) Name ("" MethodInvocation rp getSize Literal "" about "" MethodInvocation rp getReported Literal "" out of "" MethodInvocation rp getOutOf Literal "")"" println StatementExpression MethodInvocation System.out MethodInvocation rp getText println StatementExpression MethodInvocation System.out println ReturnStatement Literal 0 MethodDeclaration /**
   * Report statistics as a string, aggregate for tasks named the same.
   * @return the report
   */ Modifier protected ReferenceType Report reportSumByName FormalParameter ReferenceType List TypeArgument ReferenceType TaskStats taskStats LocalVariableDeclaration BasicType int VariableDeclarator reported Literal 0 LocalVariableDeclaration ReferenceType LinkedHashMap TypeArgument ReferenceType String TypeArgument ReferenceType TaskStats VariableDeclarator p2 ClassCreator ReferenceType LinkedHashMap TypeArgument ReferenceType String TypeArgument ReferenceType TaskStats ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType TaskStats VariableDeclarator stat1 MemberReference taskStats BlockStatement IfStatement BinaryOperation >= MethodInvocation stat1 getElapsed Literal 0 BlockStatement StatementExpression MemberReference ++ reported LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation stat1 MethodInvocation getName getTask LocalVariableDeclaration ReferenceType TaskStats VariableDeclarator stat2 MethodInvocation p2 MemberReference name get IfStatement BinaryOperation == MemberReference stat2 Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference stat2 Cast ReferenceType TaskStats MethodInvocation stat1 clone = CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e StatementExpression MethodInvocation p2 MemberReference name MemberReference stat2 put BlockStatement StatementExpression MethodInvocation stat2 MemberReference stat1 add End End End ReturnStatement MethodInvocation MemberReference reported MemberReference p2 MethodInvocation taskStats size genPartialReport ReferenceType ReportTask",1
900,900,,1
597,597,,1
866,866,,1
619,619,,1
929,929,,1
401,401,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis.cn.smart.hhmm Import java.io.File Import java.io.FileInputStream Import java.io.FileNotFoundException Import java.io.FileOutputStream Import java.io.IOException Import java.io.InputStream Import java.io.ObjectInputStream Import java.io.ObjectOutputStream Import java.io.RandomAccessFile Import java.io.UnsupportedEncodingException Import java.nio.ByteBuffer Import java.nio.ByteOrder Import org.apache.lucene.analysis.cn.smart.AnalyzerProfile ClassDeclaration /**
 * SmartChineseAnalyzer Bigram dictionary.
 * <p><font color=""#FF0000"">
 * WARNING: The status of the analyzers/smartcn <b>analysis.cn.smart</b> package is experimental. 
 * The APIs and file formats introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 * </p>
 */ BigramDictionary ConstructorDeclaration Modifier private BigramDictionary FieldDeclaration Modifier public final static BasicType char VariableDeclarator WORD_SEGMENT_CHAR Literal '@' FieldDeclaration Modifier private static ReferenceType BigramDictionary VariableDeclarator singleInstance FieldDeclaration Modifier public final static BasicType int VariableDeclarator PRIME_BIGRAM_LENGTH Literal 402137 FieldDeclaration Modifier private BasicType long VariableDeclarator bigramHashTable FieldDeclaration Modifier private BasicType int VariableDeclarator frequencyTable FieldDeclaration Modifier private BasicType int VariableDeclarator max Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator repeat Literal 0 MethodDeclaration Modifier public static synchronized ReferenceType BigramDictionary getInstance IfStatement BinaryOperation == MemberReference singleInstance Literal null BlockStatement StatementExpression Assignment MemberReference singleInstance ClassCreator ReferenceType BigramDictionary = TryStatement StatementExpression MethodInvocation singleInstance load CatchClause CatchClauseParameter IOException e LocalVariableDeclaration ReferenceType String VariableDeclarator dictRoot MemberReference AnalyzerProfile ANALYSIS_DATA_DIR StatementExpression MethodInvocation singleInstance MemberReference dictRoot load CatchClause CatchClauseParameter ClassNotFoundException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e End ReturnStatement MemberReference singleInstance MethodDeclaration Modifier private BasicType boolean loadFromObj FormalParameter ReferenceType File serialObj TryStatement StatementExpression MethodInvocation ClassCreator ReferenceType FileInputStream MemberReference serialObj loadFromInputStream ReturnStatement Literal true CatchClause CatchClauseParameter FileNotFoundException e StatementExpression MethodInvocation e printStackTrace CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation e printStackTrace CatchClause CatchClauseParameter ClassNotFoundException e StatementExpression MethodInvocation e printStackTrace ReturnStatement Literal false MethodDeclaration Modifier private loadFromInputStream FormalParameter ReferenceType InputStream serialObjectInputStream IOException ClassNotFoundException LocalVariableDeclaration ReferenceType ObjectInputStream VariableDeclarator input ClassCreator ReferenceType ObjectInputStream MemberReference serialObjectInputStream StatementExpression Assignment MemberReference bigramHashTable Cast BasicType long MethodInvocation input readObject = StatementExpression Assignment MemberReference frequencyTable Cast BasicType int MethodInvocation input readObject = StatementExpression MethodInvocation input close MethodDeclaration Modifier private saveToObj FormalParameter ReferenceType File serialObj TryStatement LocalVariableDeclaration ReferenceType ObjectOutputStream VariableDeclarator output ClassCreator ReferenceType ObjectOutputStream ClassCreator ReferenceType FileOutputStream MemberReference serialObj StatementExpression MethodInvocation output MemberReference bigramHashTable writeObject StatementExpression MethodInvocation output MemberReference frequencyTable writeObject StatementExpression MethodInvocation output close CatchClause CatchClauseParameter Exception e MethodDeclaration Modifier private load IOException ClassNotFoundException LocalVariableDeclaration ReferenceType InputStream VariableDeclarator input This MethodInvocation getClass MethodInvocation Literal ""bigramdict.mem"" getResourceAsStream StatementExpression MethodInvocation MemberReference input loadFromInputStream MethodDeclaration Modifier private load FormalParameter ReferenceType String dictRoot LocalVariableDeclaration ReferenceType String VariableDeclarator bigramDictPath BinaryOperation + MemberReference dictRoot Literal ""/bigramdict.dct"" LocalVariableDeclaration ReferenceType File VariableDeclarator serialObj ClassCreator ReferenceType File BinaryOperation + MemberReference dictRoot Literal ""/bigramdict.mem"" IfStatement BinaryOperation && MethodInvocation serialObj exists MethodInvocation MemberReference serialObj loadFromObj BlockStatement BlockStatement TryStatement StatementExpression Assignment MemberReference bigramHashTable ArrayCreator BasicType long MemberReference PRIME_BIGRAM_LENGTH = StatementExpression Assignment MemberReference frequencyTable ArrayCreator BasicType int MemberReference PRIME_BIGRAM_LENGTH = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference PRIME_BIGRAM_LENGTH MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i bigramHashTable Literal 0 = StatementExpression Assignment MemberReference ArraySelector MemberReference i frequencyTable Literal 0 = End StatementExpression MethodInvocation MemberReference bigramDictPath loadFromFile CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType RuntimeException MethodInvocation e getMessage StatementExpression MethodInvocation MemberReference serialObj saveToObj End MethodDeclaration /**
   * Load the datafile into this BigramDictionary
   * 
   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)
   * @throws FileNotFoundException
   * @throws IOException
   * @throws UnsupportedEncodingException
   */ Modifier public loadFromFile FormalParameter ReferenceType String dctFilePath FileNotFoundException IOException UnsupportedEncodingException LocalVariableDeclaration BasicType int VariableDeclarator i VariableDeclarator cnt VariableDeclarator length VariableDeclarator total Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator buffer ArrayCreator BasicType int Literal 3 LocalVariableDeclaration BasicType byte VariableDeclarator intBuffer ArrayCreator BasicType byte Literal 4 LocalVariableDeclaration ReferenceType String VariableDeclarator tmpword LocalVariableDeclaration ReferenceType RandomAccessFile VariableDeclarator dctFile ClassCreator ReferenceType RandomAccessFile MemberReference dctFilePath Literal ""r"" ForStatement ForControl Assignment MemberReference i MemberReference GB2312_FIRST_CHAR = BinaryOperation < MemberReference i BinaryOperation + MemberReference GB2312_FIRST_CHAR MemberReference CHAR_NUM_IN_FILE MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator currentStr MethodInvocation MemberReference i getCCByGB2312Id StatementExpression MethodInvocation dctFile MemberReference intBuffer read StatementExpression Assignment MemberReference cnt MethodInvocation ByteBuffer MethodInvocation MemberReference ByteOrder LITTLE_ENDIAN order MethodInvocation getInt MemberReference intBuffer wrap = IfStatement BinaryOperation <= MemberReference cnt Literal 0 BlockStatement ContinueStatement End StatementExpression Assignment MemberReference total MemberReference cnt += LocalVariableDeclaration BasicType int VariableDeclarator j Literal 0 WhileStatement BinaryOperation < MemberReference j MemberReference cnt BlockStatement StatementExpression MethodInvocation dctFile MemberReference intBuffer read StatementExpression Assignment MemberReference ArraySelector Literal 0 buffer MethodInvocation ByteBuffer MethodInvocation MemberReference ByteOrder LITTLE_ENDIAN order MethodInvocation getInt MemberReference intBuffer wrap = StatementExpression MethodInvocation dctFile MemberReference intBuffer read StatementExpression Assignment MemberReference ArraySelector Literal 1 buffer MethodInvocation ByteBuffer MethodInvocation MemberReference ByteOrder LITTLE_ENDIAN order MethodInvocation getInt MemberReference intBuffer wrap = StatementExpression MethodInvocation dctFile MemberReference intBuffer read StatementExpression Assignment MemberReference length MemberReference ArraySelector Literal 1 buffer = IfStatement BinaryOperation > MemberReference length Literal 0 BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator lchBuffer ArrayCreator BasicType byte MemberReference length StatementExpression MethodInvocation dctFile MemberReference lchBuffer read StatementExpression Assignment MemberReference tmpword ClassCreator ReferenceType String MemberReference lchBuffer Literal ""GB2312"" = IfStatement BinaryOperation != MemberReference i BinaryOperation + Literal 3755 MemberReference GB2312_FIRST_CHAR BlockStatement StatementExpression Assignment MemberReference tmpword BinaryOperation + MemberReference currentStr MemberReference tmpword = End LocalVariableDeclaration BasicType char VariableDeclarator carray MethodInvocation tmpword toCharArray LocalVariableDeclaration BasicType long VariableDeclarator hashId MethodInvocation MemberReference carray hash1 LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation MemberReference hashId MemberReference carray getAvaliableIndex IfStatement BinaryOperation != MemberReference index Literal - 1 BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference index bigramHashTable Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference index bigramHashTable MemberReference hashId = End StatementExpression Assignment MemberReference ArraySelector MemberReference index frequencyTable MemberReference ArraySelector Literal 0 buffer += End End StatementExpression MemberReference ++ j End End StatementExpression MethodInvocation dctFile close MethodDeclaration Modifier private BasicType int getAvaliableIndex FormalParameter BasicType long hashId FormalParameter BasicType char carray LocalVariableDeclaration BasicType int VariableDeclarator hash1 Cast BasicType int BinaryOperation % MemberReference hashId MemberReference PRIME_BIGRAM_LENGTH LocalVariableDeclaration BasicType int VariableDeclarator hash2 BinaryOperation % MethodInvocation MemberReference carray hash2 MemberReference PRIME_BIGRAM_LENGTH IfStatement BinaryOperation < MemberReference hash1 Literal 0 StatementExpression Assignment MemberReference hash1 BinaryOperation + MemberReference PRIME_BIGRAM_LENGTH MemberReference hash1 = End IfStatement BinaryOperation < MemberReference hash2 Literal 0 StatementExpression Assignment MemberReference hash2 BinaryOperation + MemberReference PRIME_BIGRAM_LENGTH MemberReference hash2 = End LocalVariableDeclaration BasicType int VariableDeclarator index MemberReference hash1 LocalVariableDeclaration BasicType int VariableDeclarator i Literal 1 WhileStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference ArraySelector MemberReference index bigramHashTable Literal 0 BinaryOperation != MemberReference ArraySelector MemberReference index bigramHashTable MemberReference hashId BinaryOperation < MemberReference i MemberReference PRIME_BIGRAM_LENGTH BlockStatement StatementExpression Assignment MemberReference index BinaryOperation % BinaryOperation + MemberReference hash1 BinaryOperation * MemberReference i MemberReference hash2 MemberReference PRIME_BIGRAM_LENGTH = StatementExpression MemberReference ++ i End IfStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference PRIME_BIGRAM_LENGTH BinaryOperation || BinaryOperation == MemberReference ArraySelector MemberReference index bigramHashTable Literal 0 BinaryOperation == MemberReference ArraySelector MemberReference index bigramHashTable MemberReference hashId BlockStatement ReturnStatement MemberReference index ReturnStatement Literal - 1 End MethodDeclaration Modifier private BasicType int getBigramItemIndex FormalParameter BasicType char carray LocalVariableDeclaration BasicType long VariableDeclarator hashId MethodInvocation MemberReference carray hash1 LocalVariableDeclaration BasicType int VariableDeclarator hash1 Cast BasicType int BinaryOperation % MemberReference hashId MemberReference PRIME_BIGRAM_LENGTH LocalVariableDeclaration BasicType int VariableDeclarator hash2 BinaryOperation % MethodInvocation MemberReference carray hash2 MemberReference PRIME_BIGRAM_LENGTH IfStatement BinaryOperation < MemberReference hash1 Literal 0 StatementExpression Assignment MemberReference hash1 BinaryOperation + MemberReference PRIME_BIGRAM_LENGTH MemberReference hash1 = End IfStatement BinaryOperation < MemberReference hash2 Literal 0 StatementExpression Assignment MemberReference hash2 BinaryOperation + MemberReference PRIME_BIGRAM_LENGTH MemberReference hash2 = End LocalVariableDeclaration BasicType int VariableDeclarator index MemberReference hash1 LocalVariableDeclaration BasicType int VariableDeclarator i Literal 1 StatementExpression MemberReference ++ repeat WhileStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference ArraySelector MemberReference index bigramHashTable Literal 0 BinaryOperation != MemberReference ArraySelector MemberReference index bigramHashTable MemberReference hashId BinaryOperation < MemberReference i MemberReference PRIME_BIGRAM_LENGTH BlockStatement StatementExpression Assignment MemberReference index BinaryOperation % BinaryOperation + MemberReference hash1 BinaryOperation * MemberReference i MemberReference hash2 MemberReference PRIME_BIGRAM_LENGTH = StatementExpression MemberReference ++ i StatementExpression MemberReference ++ repeat IfStatement BinaryOperation > MemberReference i MemberReference max StatementExpression Assignment MemberReference max MemberReference i = End End IfStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference PRIME_BIGRAM_LENGTH BinaryOperation == MemberReference ArraySelector MemberReference index bigramHashTable MemberReference hashId BlockStatement ReturnStatement MemberReference index ReturnStatement Literal - 1 End MethodDeclaration Modifier public BasicType int getFrequency FormalParameter BasicType char carray LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation MemberReference carray getBigramItemIndex IfStatement BinaryOperation != MemberReference index Literal - 1 ReturnStatement MemberReference ArraySelector MemberReference index frequencyTable End ReturnStatement Literal 0 ReferenceType AbstractDictionary",1
385,385,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.io.IOException Import org.apache.lucene.search.DocIdSetIterator ClassDeclaration Modifier public OpenBitSetDISI ConstructorDeclaration Modifier public /** Construct an OpenBitSetDISI with its bits set
   * from the doc ids of the given DocIdSetIterator.
   * Also give a maximum size one larger than the largest doc id for which a
   * bit may ever be set on this OpenBitSetDISI.
   */ OpenBitSetDISI FormalParameter ReferenceType DocIdSetIterator disi FormalParameter BasicType int maxSize IOException StatementExpression SuperConstructorInvocation MemberReference maxSize StatementExpression MethodInvocation MemberReference disi inPlaceOr ConstructorDeclaration Modifier public /** Construct an OpenBitSetDISI with no bits set, and a given maximum size
   * one larger than the largest doc id for which a bit may ever be set
   * on this OpenBitSetDISI.
   */ OpenBitSetDISI FormalParameter BasicType int maxSize StatementExpression SuperConstructorInvocation MemberReference maxSize MethodDeclaration /**
   * Perform an inplace OR with the doc ids from a given DocIdSetIterator,
   * setting the bit for each such doc id.
   * These doc ids should be smaller than the maximum size passed to the
   * constructor.
   */ Modifier public inPlaceOr FormalParameter ReferenceType DocIdSetIterator disi IOException LocalVariableDeclaration BasicType int VariableDeclarator doc LocalVariableDeclaration BasicType long VariableDeclarator size MethodInvocation size WhileStatement BinaryOperation < Assignment MemberReference doc MethodInvocation disi nextDoc = MemberReference size BlockStatement StatementExpression MethodInvocation MemberReference doc fastSet End MethodDeclaration /**
   * Perform an inplace AND with the doc ids from a given DocIdSetIterator,
   * leaving only the bits set for which the doc ids are in common.
   * These doc ids should be smaller than the maximum size passed to the
   * constructor.
   */ Modifier public inPlaceAnd FormalParameter ReferenceType DocIdSetIterator disi IOException LocalVariableDeclaration BasicType int VariableDeclarator bitSetDoc MethodInvocation Literal 0 nextSetBit LocalVariableDeclaration BasicType int VariableDeclarator disiDoc WhileStatement BinaryOperation && BinaryOperation != MemberReference bitSetDoc Literal - 1 BinaryOperation != Assignment MemberReference disiDoc MethodInvocation disi MemberReference bitSetDoc advance = MemberReference DocIdSetIterator NO_MORE_DOCS BlockStatement StatementExpression MethodInvocation MemberReference bitSetDoc MemberReference disiDoc clear StatementExpression Assignment MemberReference bitSetDoc MethodInvocation BinaryOperation + MemberReference disiDoc Literal 1 nextSetBit = End IfStatement BinaryOperation != MemberReference bitSetDoc Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference bitSetDoc MethodInvocation size clear End MethodDeclaration /**
   * Perform an inplace NOT with the doc ids from a given DocIdSetIterator,
   * clearing all the bits for each such doc id.
   * These doc ids should be smaller than the maximum size passed to the
   * constructor.
   */ Modifier public inPlaceNot FormalParameter ReferenceType DocIdSetIterator disi IOException LocalVariableDeclaration BasicType int VariableDeclarator doc LocalVariableDeclaration BasicType long VariableDeclarator size MethodInvocation size WhileStatement BinaryOperation < Assignment MemberReference doc MethodInvocation disi nextDoc = MemberReference size BlockStatement StatementExpression MethodInvocation MemberReference doc fastClear End MethodDeclaration /**
   * Perform an inplace XOR with the doc ids from a given DocIdSetIterator,
   * flipping all the bits for each such doc id.
   * These doc ids should be smaller than the maximum size passed to the
   * constructor.
   */ Modifier public inPlaceXor FormalParameter ReferenceType DocIdSetIterator disi IOException LocalVariableDeclaration BasicType int VariableDeclarator doc LocalVariableDeclaration BasicType long VariableDeclarator size MethodInvocation size WhileStatement BinaryOperation < Assignment MemberReference doc MethodInvocation disi nextDoc = MemberReference size BlockStatement StatementExpression MethodInvocation MemberReference doc fastFlip End ReferenceType OpenBitSet",0
771,771,,1
325,325,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.BooleanFilter Import org.apache.lucene.search.Filter Import org.apache.lucene.search.FilterClause Import org.apache.lucene.xmlparser.DOMUtils Import org.apache.lucene.xmlparser.FilterBuilder Import org.apache.lucene.xmlparser.ParserException Import org.w3c.dom.Element Import org.w3c.dom.Node Import org.w3c.dom.NodeList ClassDeclaration Modifier public /**
 * 
 */ BooleanFilterBuilder FieldDeclaration Modifier private ReferenceType FilterBuilder VariableDeclarator factory ConstructorDeclaration Modifier public BooleanFilterBuilder FormalParameter ReferenceType FilterBuilder factory StatementExpression Assignment This MemberReference factory MemberReference factory = MethodDeclaration Modifier public ReferenceType Filter getFilter FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration ReferenceType BooleanFilter VariableDeclarator bf ClassCreator ReferenceType BooleanFilter LocalVariableDeclaration ReferenceType NodeList VariableDeclarator nl MethodInvocation e getChildNodes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nl getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator node MethodInvocation nl MemberReference i item IfStatement MethodInvocation node MethodInvocation Literal ""Clause"" equals getNodeName BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator clauseElem Cast ReferenceType Element MemberReference node LocalVariableDeclaration ReferenceType BooleanClause ReferenceType Occur VariableDeclarator occurs MethodInvocation BooleanQueryBuilder MemberReference clauseElem getOccursValue LocalVariableDeclaration ReferenceType Element VariableDeclarator clauseFilter MethodInvocation DOMUtils MemberReference clauseElem getFirstChildOrFail LocalVariableDeclaration ReferenceType Filter VariableDeclarator f MethodInvocation factory MemberReference clauseFilter getFilter StatementExpression MethodInvocation bf ClassCreator ReferenceType FilterClause MemberReference f MemberReference occurs add End End ReturnStatement MemberReference bf ReferenceType FilterBuilder",0
166,166,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.io.ObjectStreamException Import java.io.Serializable Import java.io.StreamCorruptedException Import java.util.HashMap Import java.util.Map ClassDeclaration Modifier public abstract Annotation SuppressWarnings Literal ""serial"" /**
 * A serializable Enum class.
 * @deprecated Use Java 5 enum, will be removed in a later Lucene 3.x release.
 */ Parameter FieldDeclaration Modifier static ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType Parameter VariableDeclarator allParameters ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Parameter FieldDeclaration Modifier private ReferenceType String VariableDeclarator name ConstructorDeclaration Modifier private Parameter ConstructorDeclaration Modifier protected Parameter FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation MemberReference name makeKey IfStatement MethodInvocation allParameters MemberReference key containsKey ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""Parameter name "" MemberReference key Literal "" already used!"" End StatementExpression MethodInvocation allParameters MemberReference key This put MethodDeclaration Modifier private ReferenceType String makeKey FormalParameter ReferenceType String name ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation getClass Literal "" "" MemberReference name MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement MemberReference name MethodDeclaration /**
   * Resolves the deserialized instance to the local reference for accurate
   * equals() and == comparisons.
   * 
   * @return a reference to Parameter as resolved in the local VM
   * @throws ObjectStreamException
   */ Modifier protected ReferenceType Object readResolve ObjectStreamException LocalVariableDeclaration ReferenceType Object VariableDeclarator par MethodInvocation allParameters MethodInvocation MemberReference name makeKey get IfStatement BinaryOperation == MemberReference par Literal null ThrowStatement ClassCreator ReferenceType StreamCorruptedException BinaryOperation + Literal ""Unknown parameter value: "" MemberReference name End ReturnStatement MemberReference par ReferenceType Serializable",0
127,127,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.stats ClassDeclaration Modifier public /**
 * Textual report of current statistics.
 */ Report FieldDeclaration Modifier private ReferenceType String VariableDeclarator text FieldDeclaration Modifier private BasicType int VariableDeclarator size FieldDeclaration Modifier private BasicType int VariableDeclarator outOf FieldDeclaration Modifier private BasicType int VariableDeclarator reported ConstructorDeclaration Modifier public Report FormalParameter ReferenceType String text FormalParameter BasicType int size FormalParameter BasicType int reported FormalParameter BasicType int outOf StatementExpression Assignment This MemberReference text MemberReference text = StatementExpression Assignment This MemberReference size MemberReference size = StatementExpression Assignment This MemberReference reported MemberReference reported = StatementExpression Assignment This MemberReference outOf MemberReference outOf = MethodDeclaration /**
   * Returns total number of stats points when this report was created.
   */ Modifier public BasicType int getOutOf ReturnStatement MemberReference outOf MethodDeclaration /**
   * Returns number of lines in the report.
   */ Modifier public BasicType int getSize ReturnStatement MemberReference size MethodDeclaration /**
   * Returns the report text.
   */ Modifier public ReferenceType String getText ReturnStatement MemberReference text MethodDeclaration /**
   * Returns number of stats points represented in this report.
   */ Modifier public BasicType int getReported ReturnStatement MemberReference reported",0
342,342,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.Reader Import java.io.IOException Import java.io.Closeable Import java.lang.reflect.Method Import org.apache.lucene.util.CloseableThreadLocal Import org.apache.lucene.store.AlreadyClosedException Import org.apache.lucene.document.Fieldable ClassDeclaration Modifier public abstract /** An Analyzer builds TokenStreams, which analyze text.  It thus represents a
 *  policy for extracting index terms from text.
 *  <p>
 *  Typical implementations first build a Tokenizer, which breaks the stream of
 *  characters from the Reader into raw Tokens.  One or more TokenFilters may
 *  then be applied to the output of the Tokenizer.
 */ Analyzer MethodDeclaration /** Creates a TokenStream which tokenizes all the text in the provided
   * Reader.  Must be able to handle null field name for
   * backward compatibility.
   */ Modifier public abstract ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader MethodDeclaration /** Creates a TokenStream that is allowed to be re-used
   *  from the previous time that the same thread called
   *  this method.  Callers that do not need to use more
   *  than one TokenStream at the same time from this
   *  analyzer should use this method for better
   *  performance.
   */ Modifier public ReferenceType TokenStream reusableTokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader IOException ReturnStatement MethodInvocation MemberReference fieldName MemberReference reader tokenStream FieldDeclaration Modifier private ReferenceType CloseableThreadLocal TypeArgument ReferenceType Object VariableDeclarator tokenStreams ClassCreator ReferenceType CloseableThreadLocal TypeArgument ReferenceType Object MethodDeclaration /** Used by Analyzers that implement reusableTokenStream
   *  to retrieve previously saved TokenStreams for re-use
   *  by the same thread. */ Modifier protected ReferenceType Object getPreviousTokenStream TryStatement ReturnStatement MethodInvocation tokenStreams get CatchClause CatchClauseParameter NullPointerException npe IfStatement BinaryOperation == MemberReference tokenStreams Literal null BlockStatement ThrowStatement ClassCreator ReferenceType AlreadyClosedException Literal ""this Analyzer is closed"" BlockStatement ThrowStatement MemberReference npe End MethodDeclaration /** Used by Analyzers that implement reusableTokenStream
   *  to save a TokenStream for later re-use by the same
   *  thread. */ Modifier protected setPreviousTokenStream FormalParameter ReferenceType Object obj TryStatement StatementExpression MethodInvocation tokenStreams MemberReference obj set CatchClause CatchClauseParameter NullPointerException npe IfStatement BinaryOperation == MemberReference tokenStreams Literal null BlockStatement ThrowStatement ClassCreator ReferenceType AlreadyClosedException Literal ""this Analyzer is closed"" BlockStatement ThrowStatement MemberReference npe End FieldDeclaration /** @deprecated */ Modifier protected BasicType boolean VariableDeclarator overridesTokenStreamMethod Literal false MethodDeclaration /** @deprecated This is only present to preserve
   *  back-compat of classes that subclass a core analyzer
   *  and override tokenStream but not reusableTokenStream */ Modifier protected setOverridesTokenStreamMethod FormalParameter ReferenceType Class TypeArgument ReferenceType Analyzer extends baseClass TryStatement LocalVariableDeclaration ReferenceType Method VariableDeclarator m This MethodInvocation getClass MethodInvocation Literal ""tokenStream"" ClassReference ReferenceType String ClassReference ReferenceType Reader getMethod StatementExpression Assignment MemberReference overridesTokenStreamMethod BinaryOperation != MethodInvocation m getDeclaringClass MemberReference baseClass = CatchClause CatchClauseParameter NoSuchMethodException nsme StatementExpression Assignment MemberReference overridesTokenStreamMethod Literal false = MethodDeclaration /**
   * Invoked before indexing a Fieldable instance if
   * terms have already been added to that field.  This allows custom
   * analyzers to place an automatic position increment gap between
   * Fieldable instances using the same field name.  The default value
   * position increment gap is 0.  With a 0 position increment gap and
   * the typical default token position increment of 1, all terms in a field,
   * including across Fieldable instances, are in successive positions, allowing
   * exact PhraseQuery matches, for instance, across Fieldable instance boundaries.
   *
   * @param fieldName Fieldable name being indexed.
   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}
   */ Modifier public BasicType int getPositionIncrementGap FormalParameter ReferenceType String fieldName ReturnStatement Literal 0 MethodDeclaration /**
   * Just like {@link #getPositionIncrementGap}, except for
   * Token offsets instead.  By default this returns 1 for
   * tokenized fields and, as if the fields were joined
   * with an extra space character, and 0 for un-tokenized
   * fields.  This method is only called if the field
   * produced at least one token for indexing.
   *
   * @param field the field just indexed
   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}
   */ Modifier public BasicType int getOffsetGap FormalParameter ReferenceType Fieldable field IfStatement MethodInvocation field isTokenized ReturnStatement Literal 1 ReturnStatement Literal 0 End MethodDeclaration /** Frees persistent resources used by this Analyzer */ Modifier public close StatementExpression MethodInvocation tokenStreams close StatementExpression Assignment MemberReference tokenStreams Literal null = ReferenceType Closeable",0
939,939,,0
875,875,,1
426,426,"CompilationUnit PackageDeclaration org.apache.lucene.search Import org.apache.lucene.util.PriorityQueue ClassDeclaration Modifier final HitQueue FieldDeclaration Modifier private BasicType boolean VariableDeclarator prePopulate ConstructorDeclaration /**
   * Creates a new instance with <code>size</code> elements. If
   * <code>prePopulate</code> is set to true, the queue will pre-populate itself
   * with sentinel objects and set its {@link #size()} to <code>size</code>. In
   * that case, you should not rely on {@link #size()} to get the number of
   * actual elements that were added to the queue, but keep track yourself.<br>
   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop
   * elements from the queue using the following code example:
   * 
   * <pre>
   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.
   * ScoreDoc top = pq.top();
   * 
   * // Add/Update one element.
   * top.score = 1.0f;
   * top.doc = 0;
   * top = (ScoreDoc) pq.updateTop();
   * int totalHits = 1;
   * 
   * // Now pop only the elements that were *truly* inserted.
   * // First, pop all the sentinel elements (there are pq.size() - totalHits).
   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();
   * 
   * // Now pop the truly added elements.
   * ScoreDoc[] results = new ScoreDoc[totalHits];
   * for (int i = totalHits - 1; i &gt;= 0; i--) {
   *   results[i] = (ScoreDoc) pq.pop();
   * }
   * </pre>
   * 
   * <p><b>NOTE</b>: This class pre-allocate a full array of
   * length <code>size</code>.
   * 
   * @param size
   *          the requested size of this queue.
   * @param prePopulate
   *          specifies whether to pre-populate the queue with sentinel values.
   * @see #getSentinelObject()
   */ HitQueue FormalParameter BasicType int size FormalParameter BasicType boolean prePopulate StatementExpression Assignment This MemberReference prePopulate MemberReference prePopulate = StatementExpression MethodInvocation MemberReference size initialize MethodDeclaration Modifier protected Annotation Override ReferenceType ScoreDoc getSentinelObject ReturnStatement TernaryExpression MemberReference ! prePopulate Literal null ClassCreator ReferenceType ScoreDoc MemberReference Integer MAX_VALUE MemberReference Float NEGATIVE_INFINITY MethodDeclaration Modifier final protected Annotation Override BasicType boolean lessThan FormalParameter ReferenceType ScoreDoc hitA FormalParameter ReferenceType ScoreDoc hitB IfStatement BinaryOperation == MemberReference hitA score MemberReference hitB score ReturnStatement BinaryOperation > MemberReference hitA doc MemberReference hitB doc ReturnStatement BinaryOperation < MemberReference hitA score MemberReference hitB score End ReferenceType PriorityQueue TypeArgument ReferenceType ScoreDoc",0
83,83,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.IOException ClassDeclaration Modifier public abstract /** A TokenFilter is a TokenStream whose input is another TokenStream.
  <p>
  This is an abstract class; subclasses must override {@link #incrementToken()}.
  @see TokenStream
  */ TokenFilter FieldDeclaration /** The source of tokens for this filter. */ Modifier final protected ReferenceType TokenStream VariableDeclarator input ConstructorDeclaration Modifier protected /** Construct a token stream filtering the given input. */ TokenFilter FormalParameter ReferenceType TokenStream input StatementExpression SuperConstructorInvocation MemberReference input StatementExpression Assignment This MemberReference input MemberReference input = MethodDeclaration /** Performs end-of-stream operations, if any, and calls then <code>end()</code> on the
   * input TokenStream.<p/> 
   * <b>NOTE:</b> Be sure to call <code>super.end()</code> first when overriding this method.*/ Modifier public Annotation Override end IOException StatementExpression MethodInvocation input end MethodDeclaration /** Close the input TokenStream. */ Modifier public Annotation Override close IOException StatementExpression MethodInvocation input close MethodDeclaration /** Reset the filter as well as the input TokenStream. */ Modifier public Annotation Override reset IOException StatementExpression MethodInvocation input reset ReferenceType TokenStream",0
600,600,,1
365,365,"CompilationUnit PackageDeclaration org.apache.lucene.search ClassDeclaration Modifier public /** Expert: Returned by low-level search implementations.
 * @see TopDocs */ ScoreDoc FieldDeclaration /** Expert: The score of this document for the query. */ Modifier public BasicType float VariableDeclarator score FieldDeclaration /** Expert: A hit document's number.
   * @see Searcher#doc(int)
   */ Modifier public BasicType int VariableDeclarator doc ConstructorDeclaration Modifier public /** Expert: Constructs a ScoreDoc. */ ScoreDoc FormalParameter BasicType int doc FormalParameter BasicType float score StatementExpression Assignment This MemberReference doc MemberReference doc = StatementExpression Assignment This MemberReference score MemberReference score = MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + Literal ""doc="" MemberReference doc Literal "" score="" MemberReference score ReferenceType java ReferenceType io ReferenceType Serializable",0
188,188,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.util.Set Import java.util.Collection Import java.util.HashSet Import java.util.Map ClassDeclaration Modifier public /**
 * Helper class for keeping Lists of Objects associated with keys. <b>WARNING: THIS CLASS IS NOT THREAD SAFE</b>
 */ MapOfSets FieldDeclaration Modifier private final ReferenceType Map TypeArgument ReferenceType K TypeArgument ReferenceType Set TypeArgument ReferenceType V VariableDeclarator theMap ConstructorDeclaration Modifier public /**
   * @param m the backing store for this object
   */ MapOfSets FormalParameter ReferenceType Map TypeArgument ReferenceType K TypeArgument ReferenceType Set TypeArgument ReferenceType V m StatementExpression Assignment MemberReference theMap MemberReference m = MethodDeclaration /**
   * @return direct access to the map backing this object.
   */ Modifier public ReferenceType Map TypeArgument ReferenceType K TypeArgument ReferenceType Set TypeArgument ReferenceType V getMap ReturnStatement MemberReference theMap MethodDeclaration /**
   * Adds val to the Set associated with key in the Map.  If key is not 
   * already in the map, a new Set will first be created.
   * @return the size of the Set associated with key once val is added to it.
   */ Modifier public BasicType int put FormalParameter ReferenceType K key FormalParameter ReferenceType V val LocalVariableDeclaration Modifier final ReferenceType Set TypeArgument ReferenceType V VariableDeclarator theSet IfStatement MethodInvocation theMap MemberReference key containsKey BlockStatement StatementExpression Assignment MemberReference theSet MethodInvocation theMap MemberReference key get = BlockStatement StatementExpression Assignment MemberReference theSet ClassCreator ReferenceType HashSet TypeArgument ReferenceType V Literal 23 = StatementExpression MethodInvocation theMap MemberReference key MemberReference theSet put End StatementExpression MethodInvocation theSet MemberReference val add ReturnStatement MethodInvocation theSet size MethodDeclaration /**
   * Adds multiple vals to the Set associated with key in the Map.  
   * If key is not 
   * already in the map, a new Set will first be created.
   * @return the size of the Set associated with key once val is added to it.
   */ Modifier public BasicType int putAll FormalParameter ReferenceType K key FormalParameter ReferenceType Collection TypeArgument ReferenceType V extends vals LocalVariableDeclaration Modifier final ReferenceType Set TypeArgument ReferenceType V VariableDeclarator theSet IfStatement MethodInvocation theMap MemberReference key containsKey BlockStatement StatementExpression Assignment MemberReference theSet MethodInvocation theMap MemberReference key get = BlockStatement StatementExpression Assignment MemberReference theSet ClassCreator ReferenceType HashSet TypeArgument ReferenceType V Literal 23 = StatementExpression MethodInvocation theMap MemberReference key MemberReference theSet put End StatementExpression MethodInvocation theSet MemberReference vals addAll ReturnStatement MethodInvocation theSet size TypeParameter K TypeParameter V",0
451,451,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.IOException Import java.util.zip.CRC32 Import java.util.zip.Checksum ClassDeclaration Modifier public /** Writes bytes through to a primary IndexOutput, computing
 *  checksum.  Note that you cannot use seek().*/ ChecksumIndexOutput FieldDeclaration ReferenceType IndexOutput VariableDeclarator main FieldDeclaration ReferenceType Checksum VariableDeclarator digest ConstructorDeclaration Modifier public ChecksumIndexOutput FormalParameter ReferenceType IndexOutput main StatementExpression Assignment This MemberReference main MemberReference main = StatementExpression Assignment MemberReference digest ClassCreator ReferenceType CRC32 = MethodDeclaration Modifier public Annotation Override writeByte FormalParameter BasicType byte b IOException StatementExpression MethodInvocation digest MemberReference b update StatementExpression MethodInvocation main MemberReference b writeByte MethodDeclaration Modifier public Annotation Override writeBytes FormalParameter BasicType byte b FormalParameter BasicType int offset FormalParameter BasicType int length IOException StatementExpression MethodInvocation digest MemberReference b MemberReference offset MemberReference length update StatementExpression MethodInvocation main MemberReference b MemberReference offset MemberReference length writeBytes MethodDeclaration Modifier public BasicType long getChecksum ReturnStatement MethodInvocation digest getValue MethodDeclaration Modifier public Annotation Override flush IOException StatementExpression MethodInvocation main flush MethodDeclaration Modifier public Annotation Override close IOException StatementExpression MethodInvocation main close MethodDeclaration Modifier public Annotation Override BasicType long getFilePointer ReturnStatement MethodInvocation main getFilePointer MethodDeclaration Modifier public Annotation Override seek FormalParameter BasicType long pos ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""not allowed"" MethodDeclaration /**
   * Starts but does not complete the commit of this file (=
   * writing of the final checksum at the end).  After this
   * is called must call {@link #finishCommit} and the
   * {@link #close} to complete the commit.
   */ Modifier public prepareCommit IOException LocalVariableDeclaration Modifier final BasicType long VariableDeclarator checksum MethodInvocation getChecksum LocalVariableDeclaration Modifier final BasicType long VariableDeclarator pos MethodInvocation main getFilePointer StatementExpression MethodInvocation main BinaryOperation - MemberReference checksum Literal 1 writeLong StatementExpression MethodInvocation main flush StatementExpression MethodInvocation main MemberReference pos seek MethodDeclaration /** See {@link #prepareCommit} */ Modifier public finishCommit IOException StatementExpression MethodInvocation main MethodInvocation getChecksum writeLong MethodDeclaration Modifier public Annotation Override BasicType long length IOException ReturnStatement MethodInvocation main length ReferenceType IndexOutput",1
94,94,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.processors Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor Import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline Import org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor Import org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder Import org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler Import org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser Import org.apache.lucene.search.Query ClassDeclaration Modifier public /**
 * This pipeline has all the processors needed to process a query node tree,
 * generated by {@link StandardSyntaxParser}, already assembled. <br/>
 * <br/>
 * The order they are assembled affects the results. <br/>
 * <br/>
 * This processor pipeline was designed to work with
 * {@link StandardQueryConfigHandler}. <br/>
 * <br/>
 * The result query node tree can be used to build a {@link Query} object using
 * {@link StandardQueryTreeBuilder}. <br/>
 * 
 * @see StandardQueryTreeBuilder
 * @see StandardQueryConfigHandler
 * @see StandardSyntaxParser
 */ StandardQueryNodeProcessorPipeline ConstructorDeclaration Modifier public StandardQueryNodeProcessorPipeline FormalParameter ReferenceType QueryConfigHandler queryConfig StatementExpression SuperConstructorInvocation MemberReference queryConfig StatementExpression MethodInvocation ClassCreator ReferenceType WildcardQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType MultiFieldQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType FuzzyQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType MatchAllDocsQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType LowercaseExpandedTermsQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType ParametricRangeQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType AllowLeadingWildcardProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType AnalyzerQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType PhraseSlopQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType GroupQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType NoChildOptimizationQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType RemoveDeletedQueryNodesProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType RemoveEmptyNonLeafQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType BooleanSingleChildOptimizationQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType DefaultPhraseSlopQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType BoostQueryNodeProcessor addProcessor StatementExpression MethodInvocation ClassCreator ReferenceType MultiTermRewriteMethodProcessor addProcessor ReferenceType QueryNodeProcessorPipeline",0
297,297,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexInput Import org.apache.lucene.store.IndexOutput Import org.apache.lucene.store.ChecksumIndexOutput Import org.apache.lucene.store.ChecksumIndexInput Import org.apache.lucene.store.NoSuchDirectoryException Import org.apache.lucene.util.ThreadInterruptedException Import java.io.FileNotFoundException Import java.io.IOException Import java.io.PrintStream Import java.util.Vector Import java.util.Arrays Import java.util.Collection Import java.util.Collections Import java.util.HashSet Import java.util.HashMap Import java.util.Map ClassDeclaration Modifier public final /**
 * A collection of segmentInfo objects with methods for operating on
 * those segments in relation to the file system.
 * 
 * <p><b>NOTE:</b> This API is new and still experimental
 * (subject to change suddenly in the next release)</p>
 */ SegmentInfos FieldDeclaration /** The file format version, a negative number. */ Modifier public final static BasicType int VariableDeclarator FORMAT Literal - 1 FieldDeclaration /** This format adds details used for lockless commits.  It differs
   * slightly from the previous format in that file names
   * are never re-used (write once).  Instead, each file is
   * written to the next generation.  For example,
   * segments_1, segments_2, etc.  This allows us to not use
   * a commit lock.  See <a
   * href=""http://lucene.apache.org/java/docs/fileformats.html"">file
   * formats</a> for details.
   */ Modifier public final static BasicType int VariableDeclarator FORMAT_LOCKLESS Literal - 2 FieldDeclaration /** This format adds a ""hasSingleNormFile"" flag into each segment info.
   * See <a href=""http://issues.apache.org/jira/browse/LUCENE-756"">LUCENE-756</a>
   * for details.
   */ Modifier public final static BasicType int VariableDeclarator FORMAT_SINGLE_NORM_FILE Literal - 3 FieldDeclaration /** This format allows multiple segments to share a single
   * vectors and stored fields file. */ Modifier public final static BasicType int VariableDeclarator FORMAT_SHARED_DOC_STORE Literal - 4 FieldDeclaration /** This format adds a checksum at the end of the file to
   *  ensure all bytes were successfully written. */ Modifier public final static BasicType int VariableDeclarator FORMAT_CHECKSUM Literal - 5 FieldDeclaration /** This format adds the deletion count for each segment.
   *  This way IndexWriter can efficiently report numDocs(). */ Modifier public final static BasicType int VariableDeclarator FORMAT_DEL_COUNT Literal - 6 FieldDeclaration /** This format adds the boolean hasProx to record if any
   *  fields in the segment store prox information (ie, have
   *  omitTermFreqAndPositions==false) */ Modifier public final static BasicType int VariableDeclarator FORMAT_HAS_PROX Literal - 7 FieldDeclaration /** This format adds optional commit userData (String) storage. */ Modifier public final static BasicType int VariableDeclarator FORMAT_USER_DATA Literal - 8 FieldDeclaration /** This format adds optional per-segment String
   *  diagnostics storage, and switches userData to Map */ Modifier public final static BasicType int VariableDeclarator FORMAT_DIAGNOSTICS Literal - 9 FieldDeclaration Modifier final static BasicType int VariableDeclarator CURRENT_FORMAT MemberReference FORMAT_DIAGNOSTICS FieldDeclaration Modifier public BasicType int VariableDeclarator counter Literal 0 FieldDeclaration /**
   * counts how often the index has been changed by adding or deleting docs.
   * starting with the current time in milliseconds forces to create unique version numbers.
   */ Modifier private BasicType long VariableDeclarator version MethodInvocation System currentTimeMillis FieldDeclaration Modifier private BasicType long VariableDeclarator generation Literal 0 FieldDeclaration Modifier private BasicType long VariableDeclarator lastGeneration Literal 0 FieldDeclaration Modifier private ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator userData MethodInvocation TypeArgument ReferenceType String TypeArgument ReferenceType String Collections FieldDeclaration /**
   * If non-null, information about loading segments_N files
   * will be printed here.  @see #setInfoStream.
   */ Modifier private static ReferenceType PrintStream VariableDeclarator infoStream MethodDeclaration Modifier public final ReferenceType SegmentInfo info FormalParameter BasicType int i ReturnStatement MethodInvocation MemberReference i get MethodDeclaration /**
   * Get the generation (N) of the current segments_N file
   * from a list of files.
   *
   * @param files -- array of file names to check
   */ Modifier public static BasicType long getCurrentSegmentGeneration FormalParameter ReferenceType String files IfStatement BinaryOperation == MemberReference files Literal null BlockStatement ReturnStatement Literal - 1 End LocalVariableDeclaration BasicType long VariableDeclarator max Literal - 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator file MemberReference ArraySelector MemberReference i files IfStatement BinaryOperation && MethodInvocation file MemberReference IndexFileNames SEGMENTS startsWith MethodInvocation ! file MemberReference IndexFileNames SEGMENTS_GEN equals BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator gen MethodInvocation MemberReference file generationFromSegmentsFileName IfStatement BinaryOperation > MemberReference gen MemberReference max BlockStatement StatementExpression Assignment MemberReference max MemberReference gen = End End End ReturnStatement MemberReference max MethodDeclaration /**
   * Get the generation (N) of the current segments_N file
   * in the directory.
   *
   * @param directory -- directory to search for the latest segments_N file
   */ Modifier public static BasicType long getCurrentSegmentGeneration FormalParameter ReferenceType Directory directory IOException TryStatement ReturnStatement MethodInvocation MethodInvocation directory listAll getCurrentSegmentGeneration CatchClause CatchClauseParameter NoSuchDirectoryException nsde ReturnStatement Literal - 1 MethodDeclaration /**
   * Get the filename of the current segments_N file
   * from a list of files.
   *
   * @param files -- array of file names to check
   */ Modifier public static ReferenceType String getCurrentSegmentFileName FormalParameter ReferenceType String files IOException ReturnStatement MethodInvocation IndexFileNames MemberReference IndexFileNames SEGMENTS Literal """" MethodInvocation MemberReference files getCurrentSegmentGeneration fileNameFromGeneration MethodDeclaration /**
   * Get the filename of the current segments_N file
   * in the directory.
   *
   * @param directory -- directory to search for the latest segments_N file
   */ Modifier public static ReferenceType String getCurrentSegmentFileName FormalParameter ReferenceType Directory directory IOException ReturnStatement MethodInvocation IndexFileNames MemberReference IndexFileNames SEGMENTS Literal """" MethodInvocation MemberReference directory getCurrentSegmentGeneration fileNameFromGeneration MethodDeclaration /**
   * Get the segments_N filename in use by this segment infos.
   */ Modifier public ReferenceType String getCurrentSegmentFileName ReturnStatement MethodInvocation IndexFileNames MemberReference IndexFileNames SEGMENTS Literal """" MemberReference lastGeneration fileNameFromGeneration MethodDeclaration /**
   * Parse the generation off the segments file name and
   * return it.
   */ Modifier public static BasicType long generationFromSegmentsFileName FormalParameter ReferenceType String fileName IfStatement MethodInvocation fileName MemberReference IndexFileNames SEGMENTS equals BlockStatement ReturnStatement Literal 0 IfStatement MethodInvocation fileName MemberReference IndexFileNames SEGMENTS startsWith BlockStatement ReturnStatement MethodInvocation Long MethodInvocation fileName BinaryOperation + Literal 1 MethodInvocation IndexFileNames.SEGMENTS length substring MemberReference Character MAX_RADIX parseLong BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""fileName \"""" MemberReference fileName Literal ""\"" is not a segments file"" End End MethodDeclaration /**
   * Get the next segments_N filename that will be written.
   */ Modifier public ReferenceType String getNextSegmentFileName LocalVariableDeclaration BasicType long VariableDeclarator nextGeneration IfStatement BinaryOperation == MemberReference generation Literal - 1 BlockStatement StatementExpression Assignment MemberReference nextGeneration Literal 1 = BlockStatement StatementExpression Assignment MemberReference nextGeneration BinaryOperation + MemberReference generation Literal 1 = End ReturnStatement MethodInvocation IndexFileNames MemberReference IndexFileNames SEGMENTS Literal """" MemberReference nextGeneration fileNameFromGeneration MethodDeclaration /**
   * Read a particular segmentFileName.  Note that this may
   * throw an IOException if a commit is in process.
   *
   * @param directory -- directory containing the segments file
   * @param segmentFileName -- segment file to load
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public final read FormalParameter ReferenceType Directory directory FormalParameter ReferenceType String segmentFileName CorruptIndexException IOException LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false StatementExpression MethodInvocation clear LocalVariableDeclaration ReferenceType ChecksumIndexInput VariableDeclarator input ClassCreator ReferenceType ChecksumIndexInput MethodInvocation directory MemberReference segmentFileName openInput StatementExpression Assignment MemberReference generation MethodInvocation MemberReference segmentFileName generationFromSegmentsFileName = StatementExpression Assignment MemberReference lastGeneration MemberReference generation = TryStatement LocalVariableDeclaration BasicType int VariableDeclarator format MethodInvocation input readInt IfStatement BinaryOperation < MemberReference format Literal 0 BlockStatement IfStatement BinaryOperation < MemberReference format MemberReference CURRENT_FORMAT ThrowStatement ClassCreator ReferenceType CorruptIndexException BinaryOperation + Literal ""Unknown format version: "" MemberReference format End StatementExpression Assignment MemberReference version MethodInvocation input readLong = StatementExpression Assignment MemberReference counter MethodInvocation input readInt = BlockStatement StatementExpression Assignment MemberReference counter MemberReference format = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MethodInvocation input readInt BinaryOperation > MemberReference i Literal 0 MemberReference -- i BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType SegmentInfo MemberReference directory MemberReference format MemberReference input add End IfStatement BinaryOperation >= MemberReference format Literal 0 BlockStatement IfStatement BinaryOperation >= MethodInvocation input getFilePointer MethodInvocation input length StatementExpression Assignment MemberReference version MethodInvocation System currentTimeMillis = StatementExpression Assignment MemberReference version MethodInvocation input readLong = End End IfStatement BinaryOperation <= MemberReference format MemberReference FORMAT_USER_DATA BlockStatement IfStatement BinaryOperation <= MemberReference format MemberReference FORMAT_DIAGNOSTICS BlockStatement StatementExpression Assignment MemberReference userData MethodInvocation input readStringStringMap = IfStatement BinaryOperation != Literal 0 MethodInvocation input readByte BlockStatement StatementExpression Assignment MemberReference userData MethodInvocation Collections Literal ""userData"" MethodInvocation input readString singletonMap = BlockStatement StatementExpression Assignment MemberReference userData MethodInvocation TypeArgument ReferenceType String TypeArgument ReferenceType String Collections = End End BlockStatement StatementExpression Assignment MemberReference userData MethodInvocation TypeArgument ReferenceType String TypeArgument ReferenceType String Collections = End IfStatement BinaryOperation <= MemberReference format MemberReference FORMAT_CHECKSUM BlockStatement LocalVariableDeclaration Modifier final BasicType long VariableDeclarator checksumNow MethodInvocation input getChecksum LocalVariableDeclaration Modifier final BasicType long VariableDeclarator checksumThen MethodInvocation input readLong IfStatement BinaryOperation != MemberReference checksumNow MemberReference checksumThen ThrowStatement ClassCreator ReferenceType CorruptIndexException Literal ""checksum mismatch in segments file"" End End StatementExpression Assignment MemberReference success Literal true = StatementExpression MethodInvocation input close IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation clear End MethodDeclaration /**
   * This version of read uses the retry logic (for lock-less
   * commits) to find the right segments file to load.
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public final read FormalParameter ReferenceType Directory directory CorruptIndexException IOException StatementExpression Assignment MemberReference generation Assignment MemberReference lastGeneration Literal - 1 = = StatementExpression ClassCreator MethodInvocation run ReferenceType FindSegmentsFile MemberReference directory MethodDeclaration Modifier protected Annotation Override ReferenceType Object doBody FormalParameter ReferenceType String segmentFileName CorruptIndexException IOException StatementExpression MethodInvocation MemberReference directory MemberReference segmentFileName read ReturnStatement Literal null FieldDeclaration ReferenceType ChecksumIndexOutput VariableDeclarator pendingSegnOutput MethodDeclaration Modifier private final write FormalParameter ReferenceType Directory directory IOException LocalVariableDeclaration ReferenceType String VariableDeclarator segmentFileName MethodInvocation getNextSegmentFileName IfStatement BinaryOperation == MemberReference generation Literal - 1 BlockStatement StatementExpression Assignment MemberReference generation Literal 1 = BlockStatement StatementExpression MemberReference ++ generation End LocalVariableDeclaration ReferenceType ChecksumIndexOutput VariableDeclarator segnOutput ClassCreator ReferenceType ChecksumIndexOutput MethodInvocation directory MemberReference segmentFileName createOutput LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation segnOutput MemberReference CURRENT_FORMAT writeInt StatementExpression MethodInvocation segnOutput MemberReference ++ version writeLong StatementExpression MethodInvocation segnOutput MemberReference counter writeInt StatementExpression MethodInvocation segnOutput MethodInvocation size writeInt ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation size MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference segnOutput write MemberReference i info End StatementExpression MethodInvocation segnOutput MemberReference userData writeStringStringMap StatementExpression MethodInvocation segnOutput prepareCommit StatementExpression Assignment MemberReference success Literal true = StatementExpression Assignment MemberReference pendingSegnOutput MemberReference segnOutput = IfStatement MemberReference ! success BlockStatement TryStatement StatementExpression MethodInvocation segnOutput close CatchClause CatchClauseParameter Throwable t TryStatement StatementExpression MethodInvocation directory MemberReference segmentFileName deleteFile CatchClause CatchClauseParameter Throwable t End MethodDeclaration /**
   * Returns a copy of this instance, also copying each
   * SegmentInfo.
   */ Modifier public Annotation Override ReferenceType Object clone LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator sis Cast ReferenceType SegmentInfos SuperMethodInvocation clone ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation sis size MemberReference ++ i BlockStatement StatementExpression MethodInvocation sis MemberReference i Cast ReferenceType SegmentInfo MethodInvocation sis MethodInvocation clone MemberReference i info set End StatementExpression Assignment MemberReference sis userData ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String MemberReference userData = ReturnStatement MemberReference sis MethodDeclaration /**
   * version number when this SegmentInfos was generated.
   */ Modifier public BasicType long getVersion ReturnStatement MemberReference version MethodDeclaration Modifier public BasicType long getGeneration ReturnStatement MemberReference generation MethodDeclaration Modifier public BasicType long getLastGeneration ReturnStatement MemberReference lastGeneration MethodDeclaration /**
   * Current version number from segments file.
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static BasicType long readCurrentVersion FormalParameter ReferenceType Directory directory CorruptIndexException IOException LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator sis ClassCreator ReferenceType SegmentInfos StatementExpression MethodInvocation sis MemberReference directory read ReturnStatement MemberReference sis version MethodDeclaration /**
   * Returns userData from latest segments file
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String readCurrentUserData FormalParameter ReferenceType Directory directory CorruptIndexException IOException LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator sis ClassCreator ReferenceType SegmentInfos StatementExpression MethodInvocation sis MemberReference directory read ReturnStatement MethodInvocation sis getUserData MethodDeclaration /** If non-null, information about retries when loading
   * the segments file will be printed to this.
   */ Modifier public static setInfoStream FormalParameter ReferenceType PrintStream infoStream StatementExpression Assignment MemberReference SegmentInfos infoStream MemberReference infoStream = FieldDeclaration Modifier private static BasicType int VariableDeclarator defaultGenFileRetryCount Literal 10 FieldDeclaration Modifier private static BasicType int VariableDeclarator defaultGenFileRetryPauseMsec Literal 50 FieldDeclaration Modifier private static BasicType int VariableDeclarator defaultGenLookaheadCount Literal 10 MethodDeclaration /**
   * Advanced: set how many times to try loading the
   * segments.gen file contents to determine current segment
   * generation.  This file is only referenced when the
   * primary method (listing the directory) fails.
   */ Modifier public static setDefaultGenFileRetryCount FormalParameter BasicType int count StatementExpression Assignment MemberReference defaultGenFileRetryCount MemberReference count = MethodDeclaration /**
   * @see #setDefaultGenFileRetryCount
   */ Modifier public static BasicType int getDefaultGenFileRetryCount ReturnStatement MemberReference defaultGenFileRetryCount MethodDeclaration /**
   * Advanced: set how many milliseconds to pause in between
   * attempts to load the segments.gen file.
   */ Modifier public static setDefaultGenFileRetryPauseMsec FormalParameter BasicType int msec StatementExpression Assignment MemberReference defaultGenFileRetryPauseMsec MemberReference msec = MethodDeclaration /**
   * @see #setDefaultGenFileRetryPauseMsec
   */ Modifier public static BasicType int getDefaultGenFileRetryPauseMsec ReturnStatement MemberReference defaultGenFileRetryPauseMsec MethodDeclaration /**
   * Advanced: set how many times to try incrementing the
   * gen when loading the segments file.  This only runs if
   * the primary (listing directory) and secondary (opening
   * segments.gen file) methods fail to find the segments
   * file.
   */ Modifier public static setDefaultGenLookaheadCount FormalParameter BasicType int count StatementExpression Assignment MemberReference defaultGenLookaheadCount MemberReference count = MethodDeclaration /**
   * @see #setDefaultGenLookaheadCount
   */ Modifier public static BasicType int getDefaultGenLookahedCount ReturnStatement MemberReference defaultGenLookaheadCount MethodDeclaration /**
   * @see #setInfoStream
   */ Modifier public static ReferenceType PrintStream getInfoStream ReturnStatement MemberReference infoStream MethodDeclaration Modifier private static message FormalParameter ReferenceType String message IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation infoStream BinaryOperation + BinaryOperation + BinaryOperation + Literal ""SIS ["" MethodInvocation Thread MethodInvocation getName currentThread Literal ""]: "" MemberReference message println End ClassDeclaration Modifier public static abstract /**
   * Utility class for executing code that needs to do
   * something with the current segments file.  This is
   * necessary with lock-less commits because from the time
   * you locate the current segments file name, until you
   * actually open it, read its contents, or check modified
   * time, etc., it could have been deleted due to a writer
   * commit finishing.
   */ FindSegmentsFile FieldDeclaration Modifier final ReferenceType Directory VariableDeclarator directory ConstructorDeclaration Modifier public FindSegmentsFile FormalParameter ReferenceType Directory directory StatementExpression Assignment This MemberReference directory MemberReference directory = MethodDeclaration Modifier public ReferenceType Object run CorruptIndexException IOException ReturnStatement MethodInvocation Literal null run MethodDeclaration Modifier public ReferenceType Object run FormalParameter ReferenceType IndexCommit commit CorruptIndexException IOException IfStatement BinaryOperation != MemberReference commit Literal null BlockStatement IfStatement BinaryOperation != MemberReference directory MethodInvocation commit getDirectory ThrowStatement ClassCreator ReferenceType IOException Literal ""the specified commit does not match the specified Directory"" End ReturnStatement MethodInvocation MethodInvocation commit getSegmentsFileName doBody End LocalVariableDeclaration ReferenceType String VariableDeclarator segmentFileName Literal null LocalVariableDeclaration BasicType long VariableDeclarator lastGen Literal - 1 LocalVariableDeclaration BasicType long VariableDeclarator gen Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator genLookaheadCount Literal 0 LocalVariableDeclaration ReferenceType IOException VariableDeclarator exc Literal null LocalVariableDeclaration BasicType boolean VariableDeclarator retry Literal false LocalVariableDeclaration BasicType int VariableDeclarator method Literal 0 WhileStatement Literal true BlockStatement IfStatement BinaryOperation == Literal 0 MemberReference method BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator files Literal null LocalVariableDeclaration BasicType long VariableDeclarator genA Literal - 1 StatementExpression Assignment MemberReference files MethodInvocation directory listAll = IfStatement BinaryOperation != MemberReference files Literal null StatementExpression Assignment MemberReference genA MethodInvocation MemberReference files getCurrentSegmentGeneration = End StatementExpression MethodInvocation BinaryOperation + Literal ""directory listing genA="" MemberReference genA message LocalVariableDeclaration BasicType long VariableDeclarator genB Literal - 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference defaultGenFileRetryCount MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator genInput Literal null TryStatement StatementExpression Assignment MemberReference genInput MethodInvocation directory MemberReference IndexFileNames SEGMENTS_GEN openInput = CatchClause CatchClauseParameter FileNotFoundException e StatementExpression MethodInvocation BinaryOperation + Literal ""segments.gen open: FileNotFoundException "" MemberReference e message BreakStatement CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation BinaryOperation + Literal ""segments.gen open: IOException "" MemberReference e message IfStatement BinaryOperation != MemberReference genInput Literal null BlockStatement TryStatement LocalVariableDeclaration BasicType int VariableDeclarator version MethodInvocation genInput readInt IfStatement BinaryOperation == MemberReference version MemberReference FORMAT_LOCKLESS BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator gen0 MethodInvocation genInput readLong LocalVariableDeclaration BasicType long VariableDeclarator gen1 MethodInvocation genInput readLong StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""fallback check: "" MemberReference gen0 Literal ""; "" MemberReference gen1 message IfStatement BinaryOperation == MemberReference gen0 MemberReference gen1 BlockStatement StatementExpression Assignment MemberReference genB MemberReference gen0 = BreakStatement End End CatchClause CatchClauseParameter IOException err2 StatementExpression MethodInvocation genInput close End TryStatement StatementExpression MethodInvocation Thread MemberReference defaultGenFileRetryPauseMsec sleep CatchClause CatchClauseParameter InterruptedException ie ThrowStatement ClassCreator ReferenceType ThreadInterruptedException MemberReference ie End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + MemberReference IndexFileNames SEGMENTS_GEN Literal "" check: genB="" MemberReference genB message IfStatement BinaryOperation > MemberReference genA MemberReference genB StatementExpression Assignment MemberReference gen MemberReference genA = StatementExpression Assignment MemberReference gen MemberReference genB = End IfStatement BinaryOperation == MemberReference gen Literal - 1 BlockStatement ThrowStatement ClassCreator ReferenceType FileNotFoundException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""no segments* file found in "" MemberReference directory Literal "": files: "" MethodInvocation Arrays MemberReference files toString End End IfStatement BinaryOperation || BinaryOperation == Literal 1 MemberReference method BinaryOperation && BinaryOperation && BinaryOperation == Literal 0 MemberReference method BinaryOperation == MemberReference lastGen MemberReference gen MemberReference retry BlockStatement StatementExpression Assignment MemberReference method Literal 1 = IfStatement BinaryOperation < MemberReference genLookaheadCount MemberReference defaultGenLookaheadCount BlockStatement StatementExpression MemberReference ++ gen StatementExpression MemberReference ++ genLookaheadCount StatementExpression MethodInvocation BinaryOperation + Literal ""look ahead increment gen to "" MemberReference gen message End End IfStatement BinaryOperation == MemberReference lastGen MemberReference gen BlockStatement IfStatement MemberReference retry BlockStatement ThrowStatement MemberReference exc BlockStatement StatementExpression Assignment MemberReference retry Literal true = End IfStatement BinaryOperation == Literal 0 MemberReference method BlockStatement StatementExpression Assignment MemberReference retry Literal false = End End StatementExpression Assignment MemberReference lastGen MemberReference gen = StatementExpression Assignment MemberReference segmentFileName MethodInvocation IndexFileNames MemberReference IndexFileNames SEGMENTS Literal """" MemberReference gen fileNameFromGeneration = TryStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator v MethodInvocation MemberReference segmentFileName doBody IfStatement BinaryOperation != MemberReference exc Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""success on "" MemberReference segmentFileName message End ReturnStatement MemberReference v CatchClause CatchClauseParameter IOException err IfStatement BinaryOperation == MemberReference exc Literal null BlockStatement StatementExpression Assignment MemberReference exc MemberReference err = End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""primary Exception on '"" MemberReference segmentFileName Literal ""': "" MemberReference err Literal ""'; will retry: retry="" MemberReference retry Literal ""; gen = "" MemberReference gen message IfStatement BinaryOperation && MemberReference ! retry BinaryOperation > MemberReference gen Literal 1 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator prevSegmentFileName MethodInvocation IndexFileNames MemberReference IndexFileNames SEGMENTS Literal """" BinaryOperation - MemberReference gen Literal 1 fileNameFromGeneration LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator prevExists StatementExpression Assignment MemberReference prevExists MethodInvocation directory MemberReference prevSegmentFileName fileExists = IfStatement MemberReference prevExists BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""fallback to prior segment file '"" MemberReference prevSegmentFileName Literal ""'"" message TryStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator v MethodInvocation MemberReference prevSegmentFileName doBody IfStatement BinaryOperation != MemberReference exc Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""success on fallback "" MemberReference prevSegmentFileName message End ReturnStatement MemberReference v CatchClause CatchClauseParameter IOException err2 StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""secondary Exception on '"" MemberReference prevSegmentFileName Literal ""': "" MemberReference err2 Literal ""'; will retry"" message End End End MethodDeclaration /**
     * Subclass must implement this.  The assumption is an
     * IOException will be thrown if something goes wrong
     * during the processing that could have been caused by
     * a writer committing.
     */ Modifier protected abstract ReferenceType Object doBody FormalParameter ReferenceType String segmentFileName CorruptIndexException IOException MethodDeclaration /**
   * Returns a new SegmentInfos containing the SegmentInfo
   * instances in the specified range first (inclusive) to
   * last (exclusive), so total number of segments returned
   * is last-first.
   */ Modifier public ReferenceType SegmentInfos range FormalParameter BasicType int first FormalParameter BasicType int last LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator infos ClassCreator ReferenceType SegmentInfos StatementExpression MethodInvocation infos SuperMethodInvocation MemberReference first MemberReference last subList addAll ReturnStatement MemberReference infos MethodDeclaration updateGeneration FormalParameter ReferenceType SegmentInfos other StatementExpression Assignment MemberReference lastGeneration MemberReference other lastGeneration = StatementExpression Assignment MemberReference generation MemberReference other generation = StatementExpression Assignment MemberReference version MemberReference other version = MethodDeclaration Modifier final rollbackCommit FormalParameter ReferenceType Directory dir IOException IfStatement BinaryOperation != MemberReference pendingSegnOutput Literal null BlockStatement TryStatement StatementExpression MethodInvocation pendingSegnOutput close CatchClause CatchClauseParameter Throwable t TryStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator segmentFileName MethodInvocation IndexFileNames MemberReference IndexFileNames SEGMENTS Literal """" MemberReference generation fileNameFromGeneration StatementExpression MethodInvocation dir MemberReference segmentFileName deleteFile CatchClause CatchClauseParameter Throwable t StatementExpression Assignment MemberReference pendingSegnOutput Literal null = End MethodDeclaration /** Call this to start a commit.  This writes the new
   *  segments file, but writes an invalid checksum at the
   *  end, so that it is not visible to readers.  Once this
   *  is called you must call {@link #finishCommit} to complete
   *  the commit or {@link #rollbackCommit} to abort it. */ Modifier final prepareCommit FormalParameter ReferenceType Directory dir IOException IfStatement BinaryOperation != MemberReference pendingSegnOutput Literal null ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""prepareCommit was already called"" End StatementExpression MethodInvocation MemberReference dir write MethodDeclaration /** Returns all file names referenced by SegmentInfo
   *  instances matching the provided Directory (ie files
   *  associated with any ""external"" segments are skipped).
   *  The returned collection is recomputed on each
   *  invocation.  */ Modifier public ReferenceType Collection TypeArgument ReferenceType String files FormalParameter ReferenceType Directory dir FormalParameter BasicType boolean includeSegmentsFile IOException LocalVariableDeclaration ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator files ClassCreator ReferenceType HashSet TypeArgument ReferenceType String IfStatement MemberReference includeSegmentsFile BlockStatement StatementExpression MethodInvocation files MethodInvocation getCurrentSegmentFileName add End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation MemberReference i info IfStatement BinaryOperation == MemberReference info dir MemberReference dir BlockStatement StatementExpression MethodInvocation files MethodInvocation MethodInvocation files MemberReference i info addAll End End ReturnStatement MemberReference files MethodDeclaration Modifier final finishCommit FormalParameter ReferenceType Directory dir IOException IfStatement BinaryOperation == MemberReference pendingSegnOutput Literal null ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""prepareCommit was not called"" End LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation pendingSegnOutput finishCommit StatementExpression MethodInvocation pendingSegnOutput close StatementExpression Assignment MemberReference pendingSegnOutput Literal null = StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success StatementExpression MethodInvocation MemberReference dir rollbackCommit End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName MethodInvocation IndexFileNames MemberReference IndexFileNames SEGMENTS Literal """" MemberReference generation fileNameFromGeneration StatementExpression Assignment MemberReference success Literal false = TryStatement StatementExpression MethodInvocation dir MemberReference fileName sync StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement TryStatement StatementExpression MethodInvocation dir MemberReference fileName deleteFile CatchClause CatchClauseParameter Throwable t End StatementExpression Assignment MemberReference lastGeneration MemberReference generation = TryStatement LocalVariableDeclaration ReferenceType IndexOutput VariableDeclarator genOutput MethodInvocation dir MemberReference IndexFileNames SEGMENTS_GEN createOutput TryStatement StatementExpression MethodInvocation genOutput MemberReference FORMAT_LOCKLESS writeInt StatementExpression MethodInvocation genOutput MemberReference generation writeLong StatementExpression MethodInvocation genOutput MemberReference generation writeLong StatementExpression MethodInvocation genOutput close CatchClause CatchClauseParameter Throwable t MethodDeclaration /** Writes & syncs to the Directory dir, taking care to
   *  remove the segments file on exception */ Modifier final commit FormalParameter ReferenceType Directory dir IOException StatementExpression MethodInvocation MemberReference dir prepareCommit StatementExpression MethodInvocation MemberReference dir finishCommit MethodDeclaration Modifier public synchronized ReferenceType String segString FormalParameter ReferenceType Directory directory LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder LocalVariableDeclaration Modifier final BasicType int VariableDeclarator count MethodInvocation size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation buffer Literal ' ' append End LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation MemberReference i info StatementExpression MethodInvocation buffer MethodInvocation info MemberReference directory segString append IfStatement BinaryOperation != MemberReference info dir MemberReference directory StatementExpression MethodInvocation buffer Literal ""**"" append End End ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String getUserData ReturnStatement MemberReference userData MethodDeclaration setUserData FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String data IfStatement BinaryOperation == MemberReference data Literal null BlockStatement StatementExpression Assignment MemberReference userData MethodInvocation TypeArgument ReferenceType String TypeArgument ReferenceType String Collections = BlockStatement StatementExpression Assignment MemberReference userData MemberReference data = End MethodDeclaration /** Replaces all segments in this instance, but keeps
   *  generation, version, counter so that future commits
   *  remain write once.
   */ replace FormalParameter ReferenceType SegmentInfos other StatementExpression MethodInvocation clear StatementExpression MethodInvocation MemberReference other addAll StatementExpression Assignment MemberReference lastGeneration MemberReference other lastGeneration = MethodDeclaration Modifier public BasicType boolean hasExternalSegments FormalParameter ReferenceType Directory dir LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numSegments MethodInvocation size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i IfStatement BinaryOperation != MethodInvocation MemberReference dir MemberReference i info MemberReference dir ReturnStatement Literal true End End ReturnStatement Literal false ReferenceType Vector TypeArgument ReferenceType SegmentInfo",0
237,237,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.feeds Import org.apache.lucene.search.Query Import org.apache.lucene.benchmark.byTask.utils.Config InterfaceDeclaration Modifier public /**
 * Create queries for the test.
 */ QueryMaker MethodDeclaration /** 
   * Create the next query, of the given size.
   * @param size the size of the query - number of terms, etc.
   * @exception if cannot make the query, or if size>0 was specified but this feature is not supported.
   */ Modifier public ReferenceType Query makeQuery FormalParameter BasicType int size Exception MethodDeclaration /** Create the next query */ Modifier public ReferenceType Query makeQuery Exception MethodDeclaration /** Set the properties 
   * @throws Exception */ Modifier public setConfig FormalParameter ReferenceType Config config Exception MethodDeclaration /** Reset inputs so that the test run would behave, input wise, as if it just started. */ Modifier public resetInputs MethodDeclaration /** Print the queries */ Modifier public ReferenceType String printQueries",0
171,171,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.document.FieldSelector Import org.apache.lucene.document.SetBasedFieldSelector Import org.apache.lucene.document.Document Import org.apache.lucene.index.IndexReader Import java.util.StringTokenizer Import java.util.Set Import java.util.HashSet Import java.util.Collections Import java.io.IOException ClassDeclaration Modifier public /**
 * Search and Traverse and Retrieve docs task using a SetBasedFieldSelector.
 *
 * <p>Note: This task reuses the reader if it is already open.
 * Otherwise a reader is opened at start and closed at the end.
 *
 * <p>Takes optional param: comma separated list of Fields to load.</p>
 * 
 * <p>Other side effects: counts additional 1 (record) for each traversed hit, 
 * and 1 more for each retrieved (non null) document.</p>
 */ SearchTravRetLoadFieldSelectorTask FieldDeclaration Modifier protected ReferenceType FieldSelector VariableDeclarator fieldSelector ConstructorDeclaration Modifier public SearchTravRetLoadFieldSelectorTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType boolean withRetrieve ReturnStatement Literal true MethodDeclaration Modifier protected Annotation Override ReferenceType Document retrieveDoc FormalParameter ReferenceType IndexReader ir FormalParameter BasicType int id IOException ReturnStatement MethodInvocation ir MemberReference id MemberReference fieldSelector document MethodDeclaration Modifier public Annotation Override setParams FormalParameter ReferenceType String params StatementExpression Assignment This MemberReference params MemberReference params = LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator fieldsToLoad ClassCreator ReferenceType HashSet TypeArgument ReferenceType String ForStatement ForControl VariableDeclaration ReferenceType StringTokenizer VariableDeclarator tokenizer ClassCreator ReferenceType StringTokenizer MemberReference params Literal "","" MethodInvocation tokenizer hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation tokenizer nextToken StatementExpression MethodInvocation fieldsToLoad MemberReference s add End StatementExpression Assignment MemberReference fieldSelector ClassCreator ReferenceType SetBasedFieldSelector MemberReference fieldsToLoad MethodInvocation TypeArgument ReferenceType String Collections = MethodDeclaration Modifier public Annotation Override BasicType boolean supportsParams ReturnStatement Literal true ReferenceType SearchTravTask",0
752,752,,1
659,659,,1
468,468,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core Import org.apache.lucene.messages.Message Import org.apache.lucene.messages.MessageImpl Import org.apache.lucene.queryParser.core.messages.QueryParserMessages Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.parser.SyntaxParser ClassDeclaration Modifier public /**
 * This should be thrown when an exception happens during the query parsing from
 * string to the query node tree.
 * 
 * @see QueryNodeException
 * @see SyntaxParser
 * @see QueryNode
 */ QueryNodeParseException FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 8197535103538766773L FieldDeclaration Modifier private ReferenceType CharSequence VariableDeclarator query FieldDeclaration Modifier private BasicType int VariableDeclarator beginColumn Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator beginLine Literal - 1 FieldDeclaration Modifier private ReferenceType String VariableDeclarator errorToken Literal """" ConstructorDeclaration Modifier public QueryNodeParseException FormalParameter ReferenceType Message message StatementExpression SuperConstructorInvocation MemberReference message ConstructorDeclaration Modifier public QueryNodeParseException FormalParameter ReferenceType Throwable throwable StatementExpression SuperConstructorInvocation MemberReference throwable ConstructorDeclaration Modifier public QueryNodeParseException FormalParameter ReferenceType Message message FormalParameter ReferenceType Throwable throwable StatementExpression SuperConstructorInvocation MemberReference message MemberReference throwable MethodDeclaration Modifier public setQuery FormalParameter ReferenceType CharSequence query StatementExpression Assignment This MemberReference query MemberReference query = StatementExpression Assignment This MemberReference message ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages INVALID_SYNTAX_CANNOT_PARSE MemberReference query Literal """" = MethodDeclaration Modifier public ReferenceType CharSequence getQuery ReturnStatement This MemberReference query MethodDeclaration /**
   * @param errorToken
   *          the errorToken in the query
   */ Modifier protected setErrorToken FormalParameter ReferenceType String errorToken StatementExpression Assignment This MemberReference errorToken MemberReference errorToken = MethodDeclaration Modifier public ReferenceType String getErrorToken ReturnStatement This MemberReference errorToken MethodDeclaration Modifier public setNonLocalizedMessage FormalParameter ReferenceType Message message StatementExpression Assignment This MemberReference message MemberReference message = MethodDeclaration /**
   * For EndOfLine and EndOfFile (""<EOF>"") parsing problems the last char in the
   * string is returned For the case where the parser is not able to figure out
   * the line and column number -1 will be returned
   * 
   * @return line where the problem was found
   */ Modifier public BasicType int getBeginLine ReturnStatement This MemberReference beginLine MethodDeclaration /**
   * For EndOfLine and EndOfFile (""<EOF>"") parsing problems the last char in the
   * string is returned For the case where the parser is not able to figure out
   * the line and column number -1 will be returned
   * 
   * @return column of the first char where the problem was found
   */ Modifier public BasicType int getBeginColumn ReturnStatement This MemberReference beginColumn MethodDeclaration /**
   * @param beginLine
   *          the beginLine to set
   */ Modifier protected setBeginLine FormalParameter BasicType int beginLine StatementExpression Assignment This MemberReference beginLine MemberReference beginLine = MethodDeclaration /**
   * @param beginColumn
   *          the beginColumn to set
   */ Modifier protected setBeginColumn FormalParameter BasicType int beginColumn StatementExpression Assignment This MemberReference beginColumn MemberReference beginColumn = ReferenceType QueryNodeException",1
455,455,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term ClassDeclaration Modifier public /**
 * Subclass of FilteredTermEnum for enumerating all terms that match the
 * specified wildcard filter term.
 * <p>
 * Term enumerations are always ordered by Term.compareTo().  Each term in
 * the enumeration is greater than all that precede it.
 */ WildcardTermEnum FieldDeclaration Modifier final ReferenceType Term VariableDeclarator searchTerm FieldDeclaration Modifier final ReferenceType String VariableDeclarator field FieldDeclaration Modifier final ReferenceType String VariableDeclarator text FieldDeclaration Modifier final ReferenceType String VariableDeclarator pre FieldDeclaration Modifier final BasicType int VariableDeclarator preLen FieldDeclaration BasicType boolean VariableDeclarator endEnum Literal false ConstructorDeclaration Modifier public /**
   * Creates a new <code>WildcardTermEnum</code>.
   * <p>
   * After calling the constructor the enumeration is already pointing to the first 
   * valid term if such a term exists.
   */ WildcardTermEnum FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType Term term IOException StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference searchTerm MemberReference term = StatementExpression Assignment MemberReference field MethodInvocation searchTerm field = LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator searchTermText MethodInvocation searchTerm text LocalVariableDeclaration Modifier final BasicType int VariableDeclarator sidx MethodInvocation searchTermText MemberReference WILDCARD_STRING indexOf LocalVariableDeclaration Modifier final BasicType int VariableDeclarator cidx MethodInvocation searchTermText MemberReference WILDCARD_CHAR indexOf LocalVariableDeclaration BasicType int VariableDeclarator idx MemberReference sidx IfStatement BinaryOperation == MemberReference idx Literal - 1 BlockStatement StatementExpression Assignment MemberReference idx MemberReference cidx = IfStatement BinaryOperation >= MemberReference cidx Literal 0 BlockStatement StatementExpression Assignment MemberReference idx MethodInvocation Math MemberReference idx MemberReference cidx min = End End StatementExpression Assignment MemberReference pre TernaryExpression BinaryOperation != MemberReference idx Literal - 1 MethodInvocation searchTerm MethodInvocation Literal 0 MemberReference idx substring text Literal """" = StatementExpression Assignment MemberReference preLen MethodInvocation pre length = StatementExpression Assignment MemberReference text MethodInvocation searchTermText MemberReference preLen substring = StatementExpression MethodInvocation MethodInvocation reader ClassCreator ReferenceType Term MethodInvocation searchTerm field MemberReference pre terms setEnum MethodDeclaration Modifier final protected Annotation Override BasicType boolean termCompare FormalParameter ReferenceType Term term IfStatement BinaryOperation == MemberReference field MethodInvocation term field BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator searchText MethodInvocation term text IfStatement MethodInvocation searchText MemberReference pre startsWith BlockStatement ReturnStatement MethodInvocation MemberReference text Literal 0 MemberReference searchText MemberReference preLen wildcardEquals End End StatementExpression Assignment MemberReference endEnum Literal true = ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType float difference ReturnStatement Literal 1.0f MethodDeclaration Modifier public final Annotation Override BasicType boolean endEnum ReturnStatement MemberReference endEnum FieldDeclaration /********************************************
   * String equality with support for wildcards
   ********************************************/ Modifier public final static BasicType char VariableDeclarator WILDCARD_STRING Literal '*' FieldDeclaration Modifier public final static BasicType char VariableDeclarator WILDCARD_CHAR Literal '?' MethodDeclaration /**
   * Determines if a word matches a wildcard pattern.
   * <small>Work released by Granta Design Ltd after originally being done on
   * company time.</small>
   */ Modifier public final static BasicType boolean wildcardEquals FormalParameter ReferenceType String pattern FormalParameter BasicType int patternIdx FormalParameter ReferenceType String string FormalParameter BasicType int stringIdx LocalVariableDeclaration BasicType int VariableDeclarator p MemberReference patternIdx ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator s MemberReference stringIdx MemberReference ++ p MemberReference ++ s BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator sEnd BinaryOperation >= MemberReference s MethodInvocation string length LocalVariableDeclaration BasicType boolean VariableDeclarator pEnd BinaryOperation >= MemberReference p MethodInvocation pattern length IfStatement MemberReference sEnd BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator justWildcardsLeft Literal true LocalVariableDeclaration BasicType int VariableDeclarator wildcardSearchPos MemberReference p WhileStatement BinaryOperation && BinaryOperation < MemberReference wildcardSearchPos MethodInvocation pattern length MemberReference justWildcardsLeft BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator wildchar MethodInvocation pattern MemberReference wildcardSearchPos charAt IfStatement BinaryOperation && BinaryOperation != MemberReference wildchar MemberReference WILDCARD_CHAR BinaryOperation != MemberReference wildchar MemberReference WILDCARD_STRING BlockStatement StatementExpression Assignment MemberReference justWildcardsLeft Literal false = BlockStatement IfStatement BinaryOperation == MemberReference wildchar MemberReference WILDCARD_CHAR BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ wildcardSearchPos End End IfStatement MemberReference justWildcardsLeft BlockStatement ReturnStatement Literal true End End IfStatement BinaryOperation || MemberReference sEnd MemberReference pEnd BlockStatement BreakStatement End IfStatement BinaryOperation == MethodInvocation pattern MemberReference p charAt MemberReference WILDCARD_CHAR BlockStatement ContinueStatement End IfStatement BinaryOperation == MethodInvocation pattern MemberReference p charAt MemberReference WILDCARD_STRING BlockStatement StatementExpression MemberReference ++ p ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MethodInvocation string length BinaryOperation >= MemberReference i MemberReference s MemberReference -- i BlockStatement IfStatement MethodInvocation MemberReference pattern MemberReference p MemberReference string MemberReference i wildcardEquals BlockStatement ReturnStatement Literal true End End BreakStatement End IfStatement BinaryOperation != MethodInvocation pattern MemberReference p charAt MethodInvocation string MemberReference s charAt BlockStatement BreakStatement End End ReturnStatement Literal false ReferenceType FilteredTermEnum",1
662,662,,0
551,551,"CompilationUnit PackageDeclaration org.apache.lucene.search.highlight ClassDeclaration Modifier public /**
 * Low-level class used to record information about a section of a document 
 * with a score.
 *
 * 
 */ TextFragment FieldDeclaration ReferenceType CharSequence VariableDeclarator markedUpText FieldDeclaration BasicType int VariableDeclarator fragNum FieldDeclaration BasicType int VariableDeclarator textStartPos FieldDeclaration BasicType int VariableDeclarator textEndPos FieldDeclaration BasicType float VariableDeclarator score ConstructorDeclaration Modifier public TextFragment FormalParameter ReferenceType CharSequence markedUpText FormalParameter BasicType int textStartPos FormalParameter BasicType int fragNum StatementExpression Assignment This MemberReference markedUpText MemberReference markedUpText = StatementExpression Assignment This MemberReference textStartPos MemberReference textStartPos = StatementExpression Assignment This MemberReference fragNum MemberReference fragNum = ConstructorDeclaration Modifier public /** 
   * @deprecated Use {@link #TextFragment(CharSequence, int, int)} instead.
   * This constructor will be removed in Lucene 4.0
   */ TextFragment FormalParameter ReferenceType StringBuffer markedUpText FormalParameter BasicType int textStartPos FormalParameter BasicType int fragNum StatementExpression Assignment This MemberReference markedUpText MemberReference markedUpText = StatementExpression Assignment This MemberReference textStartPos MemberReference textStartPos = StatementExpression Assignment This MemberReference fragNum MemberReference fragNum = MethodDeclaration setScore FormalParameter BasicType float score StatementExpression Assignment This MemberReference score MemberReference score = MethodDeclaration Modifier public BasicType float getScore ReturnStatement MemberReference score MethodDeclaration /**
	 * @param frag2 Fragment to be merged into this one
	 */ Modifier public merge FormalParameter ReferenceType TextFragment frag2 StatementExpression Assignment MemberReference textEndPos MemberReference frag2 textEndPos = StatementExpression Assignment MemberReference score MethodInvocation Math MemberReference score MemberReference frag2 score max = MethodDeclaration /**
	 * @param fragment 
	 * @return true if this fragment follows the one passed
	 */ Modifier public BasicType boolean follows FormalParameter ReferenceType TextFragment fragment ReturnStatement BinaryOperation == MemberReference textStartPos MemberReference fragment textEndPos MethodDeclaration /**
	 * @return the fragment sequence number
	 */ Modifier public BasicType int getFragNum ReturnStatement MemberReference fragNum MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement MethodInvocation markedUpText MethodInvocation toString MemberReference textStartPos MemberReference textEndPos subSequence",1
870,870,,1
276,276,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geometry.shape Import org.apache.lucene.spatial.geometry.FloatLatLng Import org.apache.lucene.spatial.geometry.LatLng ClassDeclaration Modifier public /**
 * Lat-long rect.  Instances are mutable.
 *
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ LLRect FieldDeclaration Modifier private ReferenceType LatLng VariableDeclarator ll VariableDeclarator ur ConstructorDeclaration Modifier public LLRect FormalParameter ReferenceType LatLng ll FormalParameter ReferenceType LatLng ur StatementExpression Assignment This MemberReference ll MemberReference ll = StatementExpression Assignment This MemberReference ur MemberReference ur = ConstructorDeclaration Modifier public LLRect FormalParameter ReferenceType LLRect other StatementExpression Assignment This MemberReference ll MemberReference other ll = StatementExpression Assignment This MemberReference ur MemberReference other ur = MethodDeclaration /**
   * Return the area in units of lat-lng squared.  This is a contrived unit
   * that only has value when comparing to something else.
   */ Modifier public BasicType double area ReturnStatement MethodInvocation Math BinaryOperation * BinaryOperation - MethodInvocation ll getLat MethodInvocation ur getLat BinaryOperation - MethodInvocation ll getLng MethodInvocation ur getLng abs MethodDeclaration Modifier public ReferenceType LatLng getLowerLeft ReturnStatement MemberReference ll MethodDeclaration Modifier public ReferenceType LatLng getUpperRight ReturnStatement MemberReference ur MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""{"" MemberReference ll Literal "", "" MemberReference ur Literal ""}"" MethodDeclaration Modifier public ReferenceType LatLng getMidpoint ReturnStatement MethodInvocation ll MemberReference ur calculateMidpoint MethodDeclaration /**
   * Approximates a box centered at the given point with the given width and height in miles.
   * @param center
   * @param widthMi
   * @param heightMi
   */ Modifier public static ReferenceType LLRect createBox FormalParameter ReferenceType LatLng center FormalParameter BasicType double widthMi FormalParameter BasicType double heightMi LocalVariableDeclaration BasicType double VariableDeclarator d MemberReference widthMi LocalVariableDeclaration ReferenceType LatLng VariableDeclarator ur MethodInvocation MemberReference center MemberReference d Literal 45.0 boxCorners LocalVariableDeclaration ReferenceType LatLng VariableDeclarator ll MethodInvocation MemberReference center MemberReference d Literal 225.0 boxCorners ReturnStatement ClassCreator ReferenceType LLRect MemberReference ll MemberReference ur MethodDeclaration /**
   * Returns a rectangle shape for the bounding box
   */ Modifier public ReferenceType Rectangle toRectangle ReturnStatement ClassCreator ReferenceType Rectangle MethodInvocation ll getLng MethodInvocation ll getLat MethodInvocation ur getLng MethodInvocation ur getLat MethodDeclaration Modifier private static ReferenceType LatLng boxCorners FormalParameter ReferenceType LatLng center FormalParameter BasicType double d FormalParameter BasicType double brngdeg LocalVariableDeclaration BasicType double VariableDeclarator a MethodInvocation center getLat LocalVariableDeclaration BasicType double VariableDeclarator b MethodInvocation center getLng LocalVariableDeclaration BasicType double VariableDeclarator R Literal 3963.0 LocalVariableDeclaration BasicType double VariableDeclarator brng BinaryOperation / BinaryOperation * MemberReference Math PI MemberReference brngdeg Literal 180 LocalVariableDeclaration BasicType double VariableDeclarator lat1 BinaryOperation / BinaryOperation * MemberReference Math PI MemberReference a Literal 180 LocalVariableDeclaration BasicType double VariableDeclarator lon1 BinaryOperation / BinaryOperation * MemberReference Math PI MemberReference b Literal 180 LocalVariableDeclaration BasicType double VariableDeclarator lat2 MethodInvocation Math BinaryOperation + BinaryOperation * MethodInvocation Math MemberReference lat1 sin MethodInvocation Math BinaryOperation / MemberReference d MemberReference R cos BinaryOperation * BinaryOperation * MethodInvocation Math MemberReference lat1 cos MethodInvocation Math BinaryOperation / MemberReference d MemberReference R sin MethodInvocation Math MemberReference brng cos asin LocalVariableDeclaration BasicType double VariableDeclarator lon2 BinaryOperation + MemberReference lon1 MethodInvocation Math BinaryOperation * BinaryOperation * MethodInvocation Math MemberReference brng sin MethodInvocation Math BinaryOperation / MemberReference d MemberReference R sin MethodInvocation Math MemberReference lat1 cos BinaryOperation - MethodInvocation Math BinaryOperation / MemberReference d MemberReference R cos BinaryOperation * MethodInvocation Math MemberReference lat1 sin MethodInvocation Math MemberReference lat2 sin atan2 StatementExpression Assignment MemberReference lat2 BinaryOperation / BinaryOperation * MemberReference lat2 Literal 180 MemberReference Math PI = StatementExpression Assignment MemberReference lon2 BinaryOperation / BinaryOperation * MemberReference lon2 Literal 180 MemberReference Math PI = LocalVariableDeclaration ReferenceType LatLng VariableDeclarator ll MethodInvocation MemberReference lat2 MemberReference lon2 normLng StatementExpression Assignment MemberReference ll MethodInvocation MethodInvocation ll getLat MethodInvocation ll getLng normLat = ReturnStatement MemberReference ll MethodDeclaration /**
   * Returns a normalized Lat rectangle shape for the bounding box
   * If you go over the poles, you need to flip the lng value too
   */ Modifier private static ReferenceType LatLng normLat FormalParameter BasicType double lat FormalParameter BasicType double lng IfStatement BinaryOperation > MemberReference lat Literal 90.0 BlockStatement StatementExpression Assignment MemberReference lat BinaryOperation - Literal 90.0 BinaryOperation - MemberReference lat Literal 90.0 = IfStatement BinaryOperation < MemberReference lng Literal 0 BlockStatement StatementExpression Assignment MemberReference lng BinaryOperation + MemberReference lng Literal 180 = BlockStatement StatementExpression Assignment MemberReference lng BinaryOperation - MemberReference lng Literal 180 = End IfStatement BinaryOperation < MemberReference lat Literal - 90.0 BlockStatement StatementExpression Assignment MemberReference lat BinaryOperation - Literal - 90.0 BinaryOperation + MemberReference lat Literal 90.0 = IfStatement BinaryOperation < MemberReference lng Literal 0 BlockStatement StatementExpression Assignment MemberReference lng BinaryOperation + MemberReference lng Literal 180 = BlockStatement StatementExpression Assignment MemberReference lng BinaryOperation - MemberReference lng Literal 180 = End End End LocalVariableDeclaration ReferenceType LatLng VariableDeclarator ll ClassCreator ReferenceType FloatLatLng MemberReference lat MemberReference lng ReturnStatement MemberReference ll MethodDeclaration /**
   * Returns a normalized Lng rectangle shape for the bounding box
   */ Modifier private static ReferenceType LatLng normLng FormalParameter BasicType double lat FormalParameter BasicType double lng IfStatement BinaryOperation > MemberReference lng Literal 180.0 BlockStatement StatementExpression Assignment MemberReference lng BinaryOperation * Literal - 1.0 BinaryOperation - Literal 180.0 BinaryOperation - MemberReference lng Literal 180.0 = IfStatement BinaryOperation < MemberReference lng Literal - 180.0 BlockStatement StatementExpression Assignment MemberReference lng BinaryOperation + BinaryOperation + MemberReference lng Literal 180.0 Literal 180.0 = End End LocalVariableDeclaration ReferenceType LatLng VariableDeclarator ll ClassCreator ReferenceType FloatLatLng MemberReference lat MemberReference lng ReturnStatement MemberReference ll MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result Literal 1 StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference ll Literal null Literal 0 MethodInvocation ll hashCode = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference ur Literal null Literal 0 MethodInvocation ur hashCode = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference obj Literal null ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType LLRect VariableDeclarator other Cast ReferenceType LLRect MemberReference obj IfStatement BinaryOperation == MemberReference ll Literal null BlockStatement IfStatement BinaryOperation != MemberReference other ll Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! ll MemberReference other ll equals ReturnStatement Literal false End End IfStatement BinaryOperation == MemberReference ur Literal null BlockStatement IfStatement BinaryOperation != MemberReference other ur Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! ur MemberReference other ur equals ReturnStatement Literal false End End ReturnStatement Literal true",0
501,501,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier abstract DocConsumerPerThread MethodDeclaration /** Process the document. If there is
   *  something for this document to be done in docID order,
   *  you should encapsulate that as a
   *  DocumentsWriter.DocWriter and return it.
   *  DocumentsWriter then calls finish() on this object
   *  when it's its turn. */ Modifier abstract ReferenceType DocumentsWriter ReferenceType DocWriter processDocument IOException MethodDeclaration Modifier abstract abort",0
114,114,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import org.apache.lucene.search.Filter Import org.apache.lucene.search.TermRangeFilter Import org.apache.lucene.xmlparser.DOMUtils Import org.apache.lucene.xmlparser.FilterBuilder Import org.apache.lucene.xmlparser.ParserException Import org.w3c.dom.Element ClassDeclaration Modifier public /**
 * 
 */ RangeFilterBuilder MethodDeclaration Modifier public ReferenceType Filter getFilter FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration ReferenceType String VariableDeclarator fieldName MethodInvocation DOMUtils MemberReference e Literal ""fieldName"" getAttributeWithInheritance LocalVariableDeclaration ReferenceType String VariableDeclarator lowerTerm MethodInvocation e Literal ""lowerTerm"" getAttribute LocalVariableDeclaration ReferenceType String VariableDeclarator upperTerm MethodInvocation e Literal ""upperTerm"" getAttribute LocalVariableDeclaration BasicType boolean VariableDeclarator includeLower MethodInvocation DOMUtils MemberReference e Literal ""includeLower"" Literal true getAttribute LocalVariableDeclaration BasicType boolean VariableDeclarator includeUpper MethodInvocation DOMUtils MemberReference e Literal ""includeUpper"" Literal true getAttribute ReturnStatement ClassCreator ReferenceType TermRangeFilter MemberReference fieldName MemberReference lowerTerm MemberReference upperTerm MemberReference includeLower MemberReference includeUpper ReferenceType FilterBuilder",1
461,461,CompilationUnit PackageDeclaration org.apache.lucene.queryParser.surround.query Import org.apache.lucene.index.Term Import org.apache.lucene.search.TermQuery Import org.apache.lucene.search.spans.SpanTermQuery ClassDeclaration Modifier public BasicQueryFactory ConstructorDeclaration Modifier public BasicQueryFactory FormalParameter BasicType int maxBasicQueries StatementExpression Assignment This MemberReference maxBasicQueries MemberReference maxBasicQueries = StatementExpression Assignment This MemberReference queriesMade Literal 0 = ConstructorDeclaration Modifier public BasicQueryFactory StatementExpression ExplicitConstructorInvocation Literal 1024 FieldDeclaration Modifier private BasicType int VariableDeclarator maxBasicQueries FieldDeclaration Modifier private BasicType int VariableDeclarator queriesMade MethodDeclaration Modifier public BasicType int getNrQueriesMade ReturnStatement MemberReference queriesMade MethodDeclaration Modifier public BasicType int getMaxBasicQueries ReturnStatement MemberReference maxBasicQueries MethodDeclaration Modifier private synchronized checkMax TooManyBasicQueries IfStatement BinaryOperation >= MemberReference queriesMade MemberReference maxBasicQueries ThrowStatement ClassCreator ReferenceType TooManyBasicQueries MethodInvocation getMaxBasicQueries End StatementExpression MemberReference ++ queriesMade MethodDeclaration Modifier public ReferenceType TermQuery newTermQuery FormalParameter ReferenceType Term term TooManyBasicQueries StatementExpression MethodInvocation checkMax ReturnStatement ClassCreator ReferenceType TermQuery MemberReference term MethodDeclaration Modifier public ReferenceType SpanTermQuery newSpanTermQuery FormalParameter ReferenceType Term term TooManyBasicQueries StatementExpression MethodInvocation checkMax ReturnStatement ClassCreator ReferenceType SpanTermQuery MemberReference term,0
646,646,,0
84,84,"CompilationUnit PackageDeclaration org.apache.lucene.search.spans Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.search  Import org.apache.lucene.search.Explanation.IDFExplanation Import java.io.IOException Import java.util.HashSet Import java.util.Set ClassDeclaration Modifier public /**
 * Expert-only.  Public for use by other weight implementations
 */ SpanWeight FieldDeclaration Modifier protected ReferenceType Similarity VariableDeclarator similarity FieldDeclaration Modifier protected BasicType float VariableDeclarator value FieldDeclaration Modifier protected BasicType float VariableDeclarator idf FieldDeclaration Modifier protected BasicType float VariableDeclarator queryNorm FieldDeclaration Modifier protected BasicType float VariableDeclarator queryWeight FieldDeclaration Modifier protected ReferenceType Set TypeArgument ReferenceType Term VariableDeclarator terms FieldDeclaration Modifier protected ReferenceType SpanQuery VariableDeclarator query FieldDeclaration Modifier private ReferenceType IDFExplanation VariableDeclarator idfExp ConstructorDeclaration Modifier public SpanWeight FormalParameter ReferenceType SpanQuery query FormalParameter ReferenceType Searcher searcher IOException StatementExpression Assignment This MemberReference similarity MethodInvocation query MemberReference searcher getSimilarity = StatementExpression Assignment This MemberReference query MemberReference query = StatementExpression Assignment MemberReference terms ClassCreator ReferenceType HashSet TypeArgument ReferenceType Term = StatementExpression MethodInvocation query MemberReference terms extractTerms StatementExpression Assignment MemberReference idfExp MethodInvocation similarity MemberReference terms MemberReference searcher idfExplain = StatementExpression Assignment MemberReference idf MethodInvocation idfExp getIdf = MethodDeclaration Modifier public Annotation Override ReferenceType Query getQuery ReturnStatement MemberReference query MethodDeclaration Modifier public Annotation Override BasicType float getValue ReturnStatement MemberReference value MethodDeclaration Modifier public Annotation Override BasicType float sumOfSquaredWeights IOException StatementExpression Assignment MemberReference queryWeight BinaryOperation * MemberReference idf MethodInvocation query getBoost = ReturnStatement BinaryOperation * MemberReference queryWeight MemberReference queryWeight MethodDeclaration Modifier public Annotation Override normalize FormalParameter BasicType float queryNorm StatementExpression Assignment This MemberReference queryNorm MemberReference queryNorm = StatementExpression Assignment MemberReference queryWeight MemberReference queryNorm *= StatementExpression Assignment MemberReference value BinaryOperation * MemberReference queryWeight MemberReference idf = MethodDeclaration Modifier public Annotation Override ReferenceType Scorer scorer FormalParameter ReferenceType IndexReader reader FormalParameter BasicType boolean scoreDocsInOrder FormalParameter BasicType boolean topScorer IOException ReturnStatement ClassCreator ReferenceType SpanScorer MethodInvocation query MemberReference reader getSpans This MemberReference similarity MethodInvocation reader MethodInvocation query getField norms MethodDeclaration Modifier public Annotation Override ReferenceType Explanation explain FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int doc IOException LocalVariableDeclaration ReferenceType ComplexExplanation VariableDeclarator result ClassCreator ReferenceType ComplexExplanation StatementExpression MethodInvocation result BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""weight("" MethodInvocation getQuery Literal "" in "" MemberReference doc Literal ""), product of:"" setDescription LocalVariableDeclaration ReferenceType String VariableDeclarator field Cast ReferenceType SpanQuery MethodInvocation getQuery LocalVariableDeclaration ReferenceType Explanation VariableDeclarator idfExpl ClassCreator ReferenceType Explanation MemberReference idf BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""idf("" MemberReference field Literal "": "" MethodInvocation idfExp explain Literal "")"" LocalVariableDeclaration ReferenceType Explanation VariableDeclarator queryExpl ClassCreator ReferenceType Explanation StatementExpression MethodInvocation queryExpl BinaryOperation + BinaryOperation + Literal ""queryWeight("" MethodInvocation getQuery Literal ""), product of:"" setDescription LocalVariableDeclaration ReferenceType Explanation VariableDeclarator boostExpl ClassCreator ReferenceType Explanation MethodInvocation MethodInvocation getBoost getQuery Literal ""boost"" IfStatement BinaryOperation != MethodInvocation MethodInvocation getBoost getQuery Literal 1.0f StatementExpression MethodInvocation queryExpl MemberReference boostExpl addDetail End StatementExpression MethodInvocation queryExpl MemberReference idfExpl addDetail LocalVariableDeclaration ReferenceType Explanation VariableDeclarator queryNormExpl ClassCreator ReferenceType Explanation MemberReference queryNorm Literal ""queryNorm"" StatementExpression MethodInvocation queryExpl MemberReference queryNormExpl addDetail StatementExpression MethodInvocation queryExpl BinaryOperation * BinaryOperation * MethodInvocation boostExpl getValue MethodInvocation idfExpl getValue MethodInvocation queryNormExpl getValue setValue StatementExpression MethodInvocation result MemberReference queryExpl addDetail LocalVariableDeclaration ReferenceType ComplexExplanation VariableDeclarator fieldExpl ClassCreator ReferenceType ComplexExplanation StatementExpression MethodInvocation fieldExpl BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""fieldWeight("" MemberReference field Literal "":"" MethodInvocation query MemberReference field toString Literal "" in "" MemberReference doc Literal ""), product of:"" setDescription LocalVariableDeclaration ReferenceType Explanation VariableDeclarator tfExpl Cast ReferenceType SpanScorer MethodInvocation MemberReference reader Literal true Literal false scorer StatementExpression MethodInvocation fieldExpl MemberReference tfExpl addDetail StatementExpression MethodInvocation fieldExpl MemberReference idfExpl addDetail LocalVariableDeclaration ReferenceType Explanation VariableDeclarator fieldNormExpl ClassCreator ReferenceType Explanation LocalVariableDeclaration BasicType byte VariableDeclarator fieldNorms MethodInvocation reader MemberReference field norms LocalVariableDeclaration BasicType float VariableDeclarator fieldNorm TernaryExpression BinaryOperation != MemberReference fieldNorms Literal null MethodInvocation Similarity MemberReference ArraySelector MemberReference doc fieldNorms decodeNorm Literal 1.0f StatementExpression MethodInvocation fieldNormExpl MemberReference fieldNorm setValue StatementExpression MethodInvocation fieldNormExpl BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""fieldNorm(field="" MemberReference field Literal "", doc="" MemberReference doc Literal "")"" setDescription StatementExpression MethodInvocation fieldExpl MemberReference fieldNormExpl addDetail StatementExpression MethodInvocation fieldExpl MethodInvocation Boolean MethodInvocation tfExpl isMatch valueOf setMatch StatementExpression MethodInvocation fieldExpl BinaryOperation * BinaryOperation * MethodInvocation tfExpl getValue MethodInvocation idfExpl getValue MethodInvocation fieldNormExpl getValue setValue StatementExpression MethodInvocation result MemberReference fieldExpl addDetail StatementExpression MethodInvocation result MethodInvocation fieldExpl getMatch setMatch StatementExpression MethodInvocation result BinaryOperation * MethodInvocation queryExpl getValue MethodInvocation fieldExpl getValue setValue IfStatement BinaryOperation == MethodInvocation queryExpl getValue Literal 1.0f ReturnStatement MemberReference fieldExpl End ReturnStatement MemberReference result ReferenceType Weight",0
210,210,"CompilationUnit PackageDeclaration org.apache.lucene.document Import org.apache.lucene.document.NumericField Import org.apache.lucene.search.NumericRangeQuery Import org.apache.lucene.util.NumericUtils ClassDeclaration Modifier public /**
 * Provides support for converting longs to Strings, and back again. The strings
 * are structured so that lexicographic sorting order is preserved.
 * 
 * <p>
 * That is, if l1 is less than l2 for any two longs l1 and l2, then
 * NumberTools.longToString(l1) is lexicographically less than
 * NumberTools.longToString(l2). (Similarly for ""greater than"" and ""equals"".)
 * 
 * <p>
 * This class handles <b>all</b> long values (unlike
 * {@link org.apache.lucene.document.DateField}).
 * 
 * @deprecated For new indexes use {@link NumericUtils} instead, which
 * provides a sortable binary representation (prefix encoded) of numeric
 * values.
 * To index and efficiently query numeric values use {@link NumericField}
 * and {@link NumericRangeQuery}.
 * This class is included for use with existing
 * indices and will be removed in a future release (possibly Lucene 4.0).
 */ NumberTools FieldDeclaration Modifier private final static BasicType int VariableDeclarator RADIX Literal 36 FieldDeclaration Modifier private final static BasicType char VariableDeclarator NEGATIVE_PREFIX Literal '-' FieldDeclaration Modifier private final static BasicType char VariableDeclarator POSITIVE_PREFIX Literal '0' FieldDeclaration /**
     * Equivalent to longToString(Long.MIN_VALUE)
     */ Modifier public final static ReferenceType String VariableDeclarator MIN_STRING_VALUE BinaryOperation + MemberReference NEGATIVE_PREFIX Literal ""0000000000000"" FieldDeclaration /**
     * Equivalent to longToString(Long.MAX_VALUE)
     */ Modifier public final static ReferenceType String VariableDeclarator MAX_STRING_VALUE BinaryOperation + MemberReference POSITIVE_PREFIX Literal ""1y2p0ij32e8e7"" FieldDeclaration /**
     * The length of (all) strings returned by {@link #longToString}
     */ Modifier public final static BasicType int VariableDeclarator STR_SIZE MethodInvocation MIN_STRING_VALUE length MethodDeclaration /**
     * Converts a long to a String suitable for indexing.
     */ Modifier public static ReferenceType String longToString FormalParameter BasicType long l IfStatement BinaryOperation == MemberReference l MemberReference Long MIN_VALUE BlockStatement ReturnStatement MemberReference MIN_STRING_VALUE End LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buf ClassCreator ReferenceType StringBuilder MemberReference STR_SIZE IfStatement BinaryOperation < MemberReference l Literal 0 BlockStatement StatementExpression MethodInvocation buf MemberReference NEGATIVE_PREFIX append StatementExpression Assignment MemberReference l BinaryOperation + BinaryOperation + MemberReference Long MAX_VALUE MemberReference l Literal 1 = BlockStatement StatementExpression MethodInvocation buf MemberReference POSITIVE_PREFIX append End LocalVariableDeclaration ReferenceType String VariableDeclarator num MethodInvocation Long MemberReference l MemberReference RADIX toString LocalVariableDeclaration BasicType int VariableDeclarator padLen BinaryOperation - BinaryOperation - MemberReference STR_SIZE MethodInvocation num length MethodInvocation buf length WhileStatement BinaryOperation > MemberReference -- padLen Literal 0 BlockStatement StatementExpression MethodInvocation buf Literal '0' append End StatementExpression MethodInvocation buf MemberReference num append ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * Converts a String that was returned by {@link #longToString} back to a
     * long.
     * 
     * @throws IllegalArgumentException
     *             if the input is null
     * @throws NumberFormatException
     *             if the input does not parse (it was not a String returned by
     *             longToString()).
     */ Modifier public static BasicType long stringToLong FormalParameter ReferenceType String str IfStatement BinaryOperation == MemberReference str Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""string cannot be null"" End IfStatement BinaryOperation != MethodInvocation str length MemberReference STR_SIZE BlockStatement ThrowStatement ClassCreator ReferenceType NumberFormatException Literal ""string is the wrong size"" End IfStatement MethodInvocation str MemberReference MIN_STRING_VALUE equals BlockStatement ReturnStatement MemberReference Long MIN_VALUE End LocalVariableDeclaration BasicType char VariableDeclarator prefix MethodInvocation str Literal 0 charAt LocalVariableDeclaration BasicType long VariableDeclarator l MethodInvocation Long MethodInvocation str Literal 1 substring MemberReference RADIX parseLong IfStatement BinaryOperation == MemberReference prefix MemberReference POSITIVE_PREFIX BlockStatement IfStatement BinaryOperation == MemberReference prefix MemberReference NEGATIVE_PREFIX BlockStatement StatementExpression Assignment MemberReference l BinaryOperation - BinaryOperation - MemberReference l MemberReference Long MAX_VALUE Literal 1 = BlockStatement ThrowStatement ClassCreator ReferenceType NumberFormatException Literal ""string does not begin with the correct prefix"" End End ReturnStatement MemberReference l",0
943,943,,0
243,243,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import org.apache.lucene.index  ClassDeclaration Modifier final /**
 * Position of a term in a document that takes into account the term offset within the phrase. 
 */ PhrasePositions FieldDeclaration BasicType int VariableDeclarator doc FieldDeclaration BasicType int VariableDeclarator position FieldDeclaration BasicType int VariableDeclarator count FieldDeclaration BasicType int VariableDeclarator offset FieldDeclaration ReferenceType TermPositions VariableDeclarator tp FieldDeclaration ReferenceType PhrasePositions VariableDeclarator next FieldDeclaration BasicType boolean VariableDeclarator repeats ConstructorDeclaration PhrasePositions FormalParameter ReferenceType TermPositions t FormalParameter BasicType int o StatementExpression Assignment MemberReference tp MemberReference t = StatementExpression Assignment MemberReference offset MemberReference o = MethodDeclaration Modifier final BasicType boolean next IOException IfStatement MethodInvocation ! tp next BlockStatement StatementExpression MethodInvocation tp close StatementExpression Assignment MemberReference doc MemberReference Integer MAX_VALUE = ReturnStatement Literal false End StatementExpression Assignment MemberReference doc MethodInvocation tp doc = StatementExpression Assignment MemberReference position Literal 0 = ReturnStatement Literal true MethodDeclaration Modifier final BasicType boolean skipTo FormalParameter BasicType int target IOException IfStatement MethodInvocation ! tp MemberReference target skipTo BlockStatement StatementExpression MethodInvocation tp close StatementExpression Assignment MemberReference doc MemberReference Integer MAX_VALUE = ReturnStatement Literal false End StatementExpression Assignment MemberReference doc MethodInvocation tp doc = StatementExpression Assignment MemberReference position Literal 0 = ReturnStatement Literal true MethodDeclaration Modifier final firstPosition IOException StatementExpression Assignment MemberReference count MethodInvocation tp freq = StatementExpression MethodInvocation nextPosition MethodDeclaration /**
   * Go to next location of this term current document, and set 
   * <code>position</code> as <code>location - offset</code>, so that a 
   * matching exact phrase is easily identified when all PhrasePositions 
   * have exactly the same <code>position</code>.
   */ Modifier final BasicType boolean nextPosition IOException IfStatement BinaryOperation > MemberReference -- count Literal 0 BlockStatement StatementExpression Assignment MemberReference position BinaryOperation - MethodInvocation tp nextPosition MemberReference offset = ReturnStatement Literal true ReturnStatement Literal false End",0
68,68,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.File ClassDeclaration Modifier public abstract /**
 * Base class for file system based locking implementation.
 */ FSLockFactory FieldDeclaration /**
   * Directory for the lock files.
   */ Modifier protected ReferenceType File VariableDeclarator lockDir Literal null MethodDeclaration /**
   * Set the lock directory. This method can be only called
   * once to initialize the lock directory. It is used by {@link FSDirectory}
   * to set the lock directory to itsself.
   * Subclasses can also use this method to set the directory
   * in the constructor.
   */ Modifier final protected setLockDir FormalParameter ReferenceType File lockDir IfStatement BinaryOperation != This MemberReference lockDir Literal null ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""You can set the lock directory for this factory only once."" End StatementExpression Assignment This MemberReference lockDir MemberReference lockDir = MethodDeclaration /**
   * Retrieve the lock directory.
   */ Modifier public ReferenceType File getLockDir ReturnStatement MemberReference lockDir ReferenceType LockFactory",1
853,853,,1
740,740,,0
690,690,,0
721,721,,1
24,24,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import org.apache.lucene.util.AttributeSource Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute ClassDeclaration Modifier final /** This is a DocFieldConsumer that inverts each field,
 *  separately, from a Document, and accepts a
 *  InvertedTermsConsumer to process those terms. */ DocInverterPerThread FieldDeclaration Modifier final ReferenceType DocInverter VariableDeclarator docInverter FieldDeclaration Modifier final ReferenceType InvertedDocConsumerPerThread VariableDeclarator consumer FieldDeclaration Modifier final ReferenceType InvertedDocEndConsumerPerThread VariableDeclarator endConsumer FieldDeclaration Modifier final ReferenceType SingleTokenAttributeSource VariableDeclarator singleToken ClassCreator ReferenceType SingleTokenAttributeSource ClassDeclaration Modifier static SingleTokenAttributeSource FieldDeclaration Modifier final ReferenceType TermAttribute VariableDeclarator termAttribute FieldDeclaration Modifier final ReferenceType OffsetAttribute VariableDeclarator offsetAttribute ConstructorDeclaration Modifier private SingleTokenAttributeSource StatementExpression Assignment MemberReference termAttribute MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference offsetAttribute MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = MethodDeclaration Modifier public reinit FormalParameter ReferenceType String stringValue FormalParameter BasicType int startOffset FormalParameter BasicType int endOffset StatementExpression MethodInvocation termAttribute MemberReference stringValue setTermBuffer StatementExpression MethodInvocation offsetAttribute MemberReference startOffset MemberReference endOffset setOffset ReferenceType AttributeSource FieldDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocState VariableDeclarator docState FieldDeclaration Modifier final ReferenceType FieldInvertState VariableDeclarator fieldState ClassCreator ReferenceType FieldInvertState FieldDeclaration Modifier final ReferenceType ReusableStringReader VariableDeclarator stringReader ClassCreator ReferenceType ReusableStringReader ConstructorDeclaration Modifier public DocInverterPerThread FormalParameter ReferenceType DocFieldProcessorPerThread docFieldProcessorPerThread FormalParameter ReferenceType DocInverter docInverter StatementExpression Assignment This MemberReference docInverter MemberReference docInverter = StatementExpression Assignment MemberReference docState MemberReference docFieldProcessorPerThread docState = StatementExpression Assignment MemberReference consumer MethodInvocation docInverter.consumer This addThread = StatementExpression Assignment MemberReference endConsumer MethodInvocation docInverter.endConsumer This addThread = MethodDeclaration Modifier public Annotation Override startDocument IOException StatementExpression MethodInvocation consumer startDocument StatementExpression MethodInvocation endConsumer startDocument MethodDeclaration Modifier public Annotation Override ReferenceType DocumentsWriter ReferenceType DocWriter finishDocument IOException StatementExpression MethodInvocation endConsumer finishDocument ReturnStatement MethodInvocation consumer finishDocument MethodDeclaration Annotation Override abort TryStatement StatementExpression MethodInvocation consumer abort StatementExpression MethodInvocation endConsumer abort MethodDeclaration Modifier public Annotation Override ReferenceType DocFieldConsumerPerField addField FormalParameter ReferenceType FieldInfo fi ReturnStatement ClassCreator ReferenceType DocInverterPerField This MemberReference fi ReferenceType DocFieldConsumerPerThread",0
569,569,,1
460,460,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.fa Import java.io.IOException Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute ClassDeclaration Modifier public final /**
 * A {@link TokenFilter} that applies {@link PersianNormalizer} to normalize the
 * orthography.
 * 
 */ PersianNormalizationFilter FieldDeclaration Modifier private final ReferenceType PersianNormalizer VariableDeclarator normalizer FieldDeclaration Modifier private final ReferenceType TermAttribute VariableDeclarator termAtt ConstructorDeclaration Modifier public PersianNormalizationFilter FormalParameter ReferenceType TokenStream input StatementExpression SuperConstructorInvocation MemberReference input StatementExpression Assignment MemberReference normalizer ClassCreator ReferenceType PersianNormalizer = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken IOException IfStatement MethodInvocation input incrementToken BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator newlen MethodInvocation normalizer MethodInvocation termAtt termBuffer MethodInvocation termAtt termLength normalize StatementExpression MethodInvocation termAtt MemberReference newlen setTermLength ReturnStatement Literal true End ReturnStatement Literal false ReferenceType TokenFilter",0
717,717,,1
927,927,,0
672,672,,0
755,755,,1
219,219,"CompilationUnit PackageDeclaration org.apache.lucene.demo.html ClassDeclaration Modifier public /**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */ SimpleCharStream FieldDeclaration /** Whether parser is static. */ Modifier public final static BasicType boolean VariableDeclarator staticFlag Literal false FieldDeclaration BasicType int VariableDeclarator bufsize FieldDeclaration BasicType int VariableDeclarator available FieldDeclaration BasicType int VariableDeclarator tokenBegin FieldDeclaration /** Position in buffer. */ Modifier public BasicType int VariableDeclarator bufpos Literal - 1 FieldDeclaration Modifier protected BasicType int VariableDeclarator bufline FieldDeclaration Modifier protected BasicType int VariableDeclarator bufcolumn FieldDeclaration Modifier protected BasicType int VariableDeclarator column Literal 0 FieldDeclaration Modifier protected BasicType int VariableDeclarator line Literal 1 FieldDeclaration Modifier protected BasicType boolean VariableDeclarator prevCharIsCR Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator prevCharIsLF Literal false FieldDeclaration Modifier protected ReferenceType java ReferenceType io ReferenceType Reader VariableDeclarator inputStream FieldDeclaration Modifier protected BasicType char VariableDeclarator buffer FieldDeclaration Modifier protected BasicType int VariableDeclarator maxNextCharInd Literal 0 FieldDeclaration Modifier protected BasicType int VariableDeclarator inBuf Literal 0 FieldDeclaration Modifier protected BasicType int VariableDeclarator tabSize Literal 8 MethodDeclaration Modifier protected setTabSize FormalParameter BasicType int i StatementExpression Assignment MemberReference tabSize MemberReference i = MethodDeclaration Modifier protected BasicType int getTabSize FormalParameter BasicType int i ReturnStatement MemberReference tabSize MethodDeclaration Modifier protected ExpandBuff FormalParameter BasicType boolean wrapAround LocalVariableDeclaration BasicType char VariableDeclarator newbuffer ArrayCreator BasicType char BinaryOperation + MemberReference bufsize Literal 2048 LocalVariableDeclaration BasicType int VariableDeclarator newbufline ArrayCreator BasicType int BinaryOperation + MemberReference bufsize Literal 2048 LocalVariableDeclaration BasicType int VariableDeclarator newbufcolumn ArrayCreator BasicType int BinaryOperation + MemberReference bufsize Literal 2048 TryStatement IfStatement MemberReference wrapAround BlockStatement StatementExpression MethodInvocation System MemberReference buffer MemberReference tokenBegin MemberReference newbuffer Literal 0 BinaryOperation - MemberReference bufsize MemberReference tokenBegin arraycopy StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference newbuffer BinaryOperation - MemberReference bufsize MemberReference tokenBegin MemberReference bufpos arraycopy StatementExpression Assignment MemberReference buffer MemberReference newbuffer = StatementExpression MethodInvocation System MemberReference bufline MemberReference tokenBegin MemberReference newbufline Literal 0 BinaryOperation - MemberReference bufsize MemberReference tokenBegin arraycopy StatementExpression MethodInvocation System MemberReference bufline Literal 0 MemberReference newbufline BinaryOperation - MemberReference bufsize MemberReference tokenBegin MemberReference bufpos arraycopy StatementExpression Assignment MemberReference bufline MemberReference newbufline = StatementExpression MethodInvocation System MemberReference bufcolumn MemberReference tokenBegin MemberReference newbufcolumn Literal 0 BinaryOperation - MemberReference bufsize MemberReference tokenBegin arraycopy StatementExpression MethodInvocation System MemberReference bufcolumn Literal 0 MemberReference newbufcolumn BinaryOperation - MemberReference bufsize MemberReference tokenBegin MemberReference bufpos arraycopy StatementExpression Assignment MemberReference bufcolumn MemberReference newbufcolumn = StatementExpression Assignment MemberReference maxNextCharInd Assignment MemberReference bufpos BinaryOperation - MemberReference bufsize MemberReference tokenBegin += = BlockStatement StatementExpression MethodInvocation System MemberReference buffer MemberReference tokenBegin MemberReference newbuffer Literal 0 BinaryOperation - MemberReference bufsize MemberReference tokenBegin arraycopy StatementExpression Assignment MemberReference buffer MemberReference newbuffer = StatementExpression MethodInvocation System MemberReference bufline MemberReference tokenBegin MemberReference newbufline Literal 0 BinaryOperation - MemberReference bufsize MemberReference tokenBegin arraycopy StatementExpression Assignment MemberReference bufline MemberReference newbufline = StatementExpression MethodInvocation System MemberReference bufcolumn MemberReference tokenBegin MemberReference newbufcolumn Literal 0 BinaryOperation - MemberReference bufsize MemberReference tokenBegin arraycopy StatementExpression Assignment MemberReference bufcolumn MemberReference newbufcolumn = StatementExpression Assignment MemberReference maxNextCharInd Assignment MemberReference bufpos MemberReference tokenBegin -= = End CatchClause CatchClauseParameter Throwable t ThrowStatement ClassCreator ReferenceType Error MethodInvocation t getMessage StatementExpression Assignment MemberReference bufsize Literal 2048 += StatementExpression Assignment MemberReference available MemberReference bufsize = StatementExpression Assignment MemberReference tokenBegin Literal 0 = MethodDeclaration Modifier protected FillBuff java.io.IOException IfStatement BinaryOperation == MemberReference maxNextCharInd MemberReference available BlockStatement IfStatement BinaryOperation == MemberReference available MemberReference bufsize BlockStatement IfStatement BinaryOperation > MemberReference tokenBegin Literal 2048 BlockStatement StatementExpression Assignment MemberReference bufpos Assignment MemberReference maxNextCharInd Literal 0 = = StatementExpression Assignment MemberReference available MemberReference tokenBegin = IfStatement BinaryOperation < MemberReference tokenBegin Literal 0 StatementExpression Assignment MemberReference bufpos Assignment MemberReference maxNextCharInd Literal 0 = = StatementExpression MethodInvocation Literal false ExpandBuff End End IfStatement BinaryOperation > MemberReference available MemberReference tokenBegin StatementExpression Assignment MemberReference available MemberReference bufsize = IfStatement BinaryOperation < BinaryOperation - MemberReference tokenBegin MemberReference available Literal 2048 StatementExpression MethodInvocation Literal true ExpandBuff StatementExpression Assignment MemberReference available MemberReference tokenBegin = End End End End LocalVariableDeclaration BasicType int VariableDeclarator i TryStatement IfStatement BinaryOperation == Assignment MemberReference i MethodInvocation inputStream MemberReference buffer MemberReference maxNextCharInd BinaryOperation - MemberReference available MemberReference maxNextCharInd read = Literal - 1 BlockStatement StatementExpression MethodInvocation inputStream close ThrowStatement ClassCreator ReferenceType java ReferenceType io ReferenceType IOException StatementExpression Assignment MemberReference maxNextCharInd MemberReference i += End ReturnStatement CatchClause CatchClauseParameter java.io.IOException e StatementExpression MemberReference -- bufpos StatementExpression MethodInvocation Literal 0 backup IfStatement BinaryOperation == MemberReference tokenBegin Literal - 1 StatementExpression Assignment MemberReference tokenBegin MemberReference bufpos = End ThrowStatement MemberReference e MethodDeclaration /** Start. */ Modifier public BasicType char BeginToken java.io.IOException StatementExpression Assignment MemberReference tokenBegin Literal - 1 = LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation readChar StatementExpression Assignment MemberReference tokenBegin MemberReference bufpos = ReturnStatement MemberReference c MethodDeclaration Modifier protected UpdateLineColumn FormalParameter BasicType char c StatementExpression MemberReference ++ column IfStatement MemberReference prevCharIsLF BlockStatement StatementExpression Assignment MemberReference prevCharIsLF Literal false = StatementExpression Assignment MemberReference line Assignment MemberReference column Literal 1 = += IfStatement MemberReference prevCharIsCR BlockStatement StatementExpression Assignment MemberReference prevCharIsCR Literal false = IfStatement BinaryOperation == MemberReference c Literal '\n' BlockStatement StatementExpression Assignment MemberReference prevCharIsLF Literal true = StatementExpression Assignment MemberReference line Assignment MemberReference column Literal 1 = += End End End SwitchStatement MemberReference c SwitchStatementCase Literal '\r' StatementExpression Assignment MemberReference prevCharIsCR Literal true = BreakStatement SwitchStatementCase Literal '\n' StatementExpression Assignment MemberReference prevCharIsLF Literal true = BreakStatement SwitchStatementCase Literal '\t' StatementExpression MemberReference -- column StatementExpression Assignment MemberReference column BinaryOperation - MemberReference tabSize BinaryOperation % MemberReference column MemberReference tabSize += BreakStatement SwitchStatementCase BreakStatement End StatementExpression Assignment MemberReference ArraySelector MemberReference bufpos bufline MemberReference line = StatementExpression Assignment MemberReference ArraySelector MemberReference bufpos bufcolumn MemberReference column = MethodDeclaration /** Read a character. */ Modifier public BasicType char readChar java.io.IOException IfStatement BinaryOperation > MemberReference inBuf Literal 0 BlockStatement StatementExpression MemberReference -- inBuf IfStatement BinaryOperation == MemberReference ++ bufpos MemberReference bufsize StatementExpression Assignment MemberReference bufpos Literal 0 = End ReturnStatement MemberReference ArraySelector MemberReference bufpos buffer End IfStatement BinaryOperation >= MemberReference ++ bufpos MemberReference maxNextCharInd StatementExpression MethodInvocation FillBuff End LocalVariableDeclaration BasicType char VariableDeclarator c MemberReference ArraySelector MemberReference bufpos buffer StatementExpression MethodInvocation MemberReference c UpdateLineColumn ReturnStatement MemberReference c MethodDeclaration /**
   * @deprecated
   * @see #getEndColumn
   */ Modifier public BasicType int getColumn ReturnStatement MemberReference ArraySelector MemberReference bufpos bufcolumn MethodDeclaration /**
   * @deprecated
   * @see #getEndLine
   */ Modifier public BasicType int getLine ReturnStatement MemberReference ArraySelector MemberReference bufpos bufline MethodDeclaration /** Get token end column number. */ Modifier public BasicType int getEndColumn ReturnStatement MemberReference ArraySelector MemberReference bufpos bufcolumn MethodDeclaration /** Get token end line number. */ Modifier public BasicType int getEndLine ReturnStatement MemberReference ArraySelector MemberReference bufpos bufline MethodDeclaration /** Get token beginning column number. */ Modifier public BasicType int getBeginColumn ReturnStatement MemberReference ArraySelector MemberReference tokenBegin bufcolumn MethodDeclaration /** Get token beginning line number. */ Modifier public BasicType int getBeginLine ReturnStatement MemberReference ArraySelector MemberReference tokenBegin bufline MethodDeclaration /** Backup a number of characters. */ Modifier public backup FormalParameter BasicType int amount StatementExpression Assignment MemberReference inBuf MemberReference amount += IfStatement BinaryOperation < Assignment MemberReference bufpos MemberReference amount -= Literal 0 StatementExpression Assignment MemberReference bufpos MemberReference bufsize += End ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType Reader dstream FormalParameter BasicType int startline FormalParameter BasicType int startcolumn FormalParameter BasicType int buffersize StatementExpression Assignment MemberReference inputStream MemberReference dstream = StatementExpression Assignment MemberReference line MemberReference startline = StatementExpression Assignment MemberReference column BinaryOperation - MemberReference startcolumn Literal 1 = StatementExpression Assignment MemberReference available Assignment MemberReference bufsize MemberReference buffersize = = StatementExpression Assignment MemberReference buffer ArrayCreator BasicType char MemberReference buffersize = StatementExpression Assignment MemberReference bufline ArrayCreator BasicType int MemberReference buffersize = StatementExpression Assignment MemberReference bufcolumn ArrayCreator BasicType int MemberReference buffersize = ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType Reader dstream FormalParameter BasicType int startline FormalParameter BasicType int startcolumn StatementExpression ExplicitConstructorInvocation MemberReference dstream MemberReference startline MemberReference startcolumn Literal 4096 ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType Reader dstream StatementExpression ExplicitConstructorInvocation MemberReference dstream Literal 1 Literal 1 Literal 4096 MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType Reader dstream FormalParameter BasicType int startline FormalParameter BasicType int startcolumn FormalParameter BasicType int buffersize StatementExpression Assignment MemberReference inputStream MemberReference dstream = StatementExpression Assignment MemberReference line MemberReference startline = StatementExpression Assignment MemberReference column BinaryOperation - MemberReference startcolumn Literal 1 = IfStatement BinaryOperation || BinaryOperation == MemberReference buffer Literal null BinaryOperation != MemberReference buffersize MemberReference buffer length BlockStatement StatementExpression Assignment MemberReference available Assignment MemberReference bufsize MemberReference buffersize = = StatementExpression Assignment MemberReference buffer ArrayCreator BasicType char MemberReference buffersize = StatementExpression Assignment MemberReference bufline ArrayCreator BasicType int MemberReference buffersize = StatementExpression Assignment MemberReference bufcolumn ArrayCreator BasicType int MemberReference buffersize = End StatementExpression Assignment MemberReference prevCharIsLF Assignment MemberReference prevCharIsCR Literal false = = StatementExpression Assignment MemberReference tokenBegin Assignment MemberReference inBuf Assignment MemberReference maxNextCharInd Literal 0 = = = StatementExpression Assignment MemberReference bufpos Literal - 1 = MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType Reader dstream FormalParameter BasicType int startline FormalParameter BasicType int startcolumn StatementExpression MethodInvocation MemberReference dstream MemberReference startline MemberReference startcolumn Literal 4096 ReInit MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType Reader dstream StatementExpression MethodInvocation MemberReference dstream Literal 1 Literal 1 Literal 4096 ReInit ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter ReferenceType String encoding FormalParameter BasicType int startline FormalParameter BasicType int startcolumn FormalParameter BasicType int buffersize java.io.UnsupportedEncodingException StatementExpression ExplicitConstructorInvocation TernaryExpression BinaryOperation == MemberReference encoding Literal null ClassCreator ReferenceType java ReferenceType io ReferenceType InputStreamReader MemberReference dstream ClassCreator ReferenceType java ReferenceType io ReferenceType InputStreamReader MemberReference dstream MemberReference encoding MemberReference startline MemberReference startcolumn MemberReference buffersize ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter BasicType int startline FormalParameter BasicType int startcolumn FormalParameter BasicType int buffersize StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType java ReferenceType io ReferenceType InputStreamReader MemberReference dstream MemberReference startline MemberReference startcolumn MemberReference buffersize ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter ReferenceType String encoding FormalParameter BasicType int startline FormalParameter BasicType int startcolumn java.io.UnsupportedEncodingException StatementExpression ExplicitConstructorInvocation MemberReference dstream MemberReference encoding MemberReference startline MemberReference startcolumn Literal 4096 ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter BasicType int startline FormalParameter BasicType int startcolumn StatementExpression ExplicitConstructorInvocation MemberReference dstream MemberReference startline MemberReference startcolumn Literal 4096 ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter ReferenceType String encoding java.io.UnsupportedEncodingException StatementExpression ExplicitConstructorInvocation MemberReference dstream MemberReference encoding Literal 1 Literal 1 Literal 4096 ConstructorDeclaration Modifier public /** Constructor. */ SimpleCharStream FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream StatementExpression ExplicitConstructorInvocation MemberReference dstream Literal 1 Literal 1 Literal 4096 MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter ReferenceType String encoding FormalParameter BasicType int startline FormalParameter BasicType int startcolumn FormalParameter BasicType int buffersize java.io.UnsupportedEncodingException StatementExpression MethodInvocation TernaryExpression BinaryOperation == MemberReference encoding Literal null ClassCreator ReferenceType java ReferenceType io ReferenceType InputStreamReader MemberReference dstream ClassCreator ReferenceType java ReferenceType io ReferenceType InputStreamReader MemberReference dstream MemberReference encoding MemberReference startline MemberReference startcolumn MemberReference buffersize ReInit MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter BasicType int startline FormalParameter BasicType int startcolumn FormalParameter BasicType int buffersize StatementExpression MethodInvocation ClassCreator ReferenceType java ReferenceType io ReferenceType InputStreamReader MemberReference dstream MemberReference startline MemberReference startcolumn MemberReference buffersize ReInit MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter ReferenceType String encoding java.io.UnsupportedEncodingException StatementExpression MethodInvocation MemberReference dstream MemberReference encoding Literal 1 Literal 1 Literal 4096 ReInit MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream StatementExpression MethodInvocation MemberReference dstream Literal 1 Literal 1 Literal 4096 ReInit MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter ReferenceType String encoding FormalParameter BasicType int startline FormalParameter BasicType int startcolumn java.io.UnsupportedEncodingException StatementExpression MethodInvocation MemberReference dstream MemberReference encoding MemberReference startline MemberReference startcolumn Literal 4096 ReInit MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream dstream FormalParameter BasicType int startline FormalParameter BasicType int startcolumn StatementExpression MethodInvocation MemberReference dstream MemberReference startline MemberReference startcolumn Literal 4096 ReInit MethodDeclaration /** Get token literal value. */ Modifier public ReferenceType String GetImage IfStatement BinaryOperation >= MemberReference bufpos MemberReference tokenBegin ReturnStatement ClassCreator ReferenceType String MemberReference buffer MemberReference tokenBegin BinaryOperation + BinaryOperation - MemberReference bufpos MemberReference tokenBegin Literal 1 ReturnStatement BinaryOperation + ClassCreator ReferenceType String MemberReference buffer MemberReference tokenBegin BinaryOperation - MemberReference bufsize MemberReference tokenBegin ClassCreator ReferenceType String MemberReference buffer Literal 0 BinaryOperation + MemberReference bufpos Literal 1 End MethodDeclaration /** Get the suffix. */ Modifier public BasicType char GetSuffix FormalParameter BasicType int len LocalVariableDeclaration BasicType char VariableDeclarator ret ArrayCreator BasicType char MemberReference len IfStatement BinaryOperation >= BinaryOperation + MemberReference bufpos Literal 1 MemberReference len StatementExpression MethodInvocation System MemberReference buffer BinaryOperation + BinaryOperation - MemberReference bufpos MemberReference len Literal 1 MemberReference ret Literal 0 MemberReference len arraycopy BlockStatement StatementExpression MethodInvocation System MemberReference buffer BinaryOperation - MemberReference bufsize BinaryOperation - BinaryOperation - MemberReference len MemberReference bufpos Literal 1 MemberReference ret Literal 0 BinaryOperation - BinaryOperation - MemberReference len MemberReference bufpos Literal 1 arraycopy StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference ret BinaryOperation - BinaryOperation - MemberReference len MemberReference bufpos Literal 1 BinaryOperation + MemberReference bufpos Literal 1 arraycopy End ReturnStatement MemberReference ret MethodDeclaration /** Reset buffer when finished. */ Modifier public Done StatementExpression Assignment MemberReference buffer Literal null = StatementExpression Assignment MemberReference bufline Literal null = StatementExpression Assignment MemberReference bufcolumn Literal null = MethodDeclaration /**
   * Method to adjust line and column numbers for the start of a token.
   */ Modifier public adjustBeginLineColumn FormalParameter BasicType int newLine FormalParameter BasicType int newCol LocalVariableDeclaration BasicType int VariableDeclarator start MemberReference tokenBegin LocalVariableDeclaration BasicType int VariableDeclarator len IfStatement BinaryOperation >= MemberReference bufpos MemberReference tokenBegin BlockStatement StatementExpression Assignment MemberReference len BinaryOperation + BinaryOperation + BinaryOperation - MemberReference bufpos MemberReference tokenBegin MemberReference inBuf Literal 1 = BlockStatement StatementExpression Assignment MemberReference len BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation - MemberReference bufsize MemberReference tokenBegin MemberReference bufpos Literal 1 MemberReference inBuf = End LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 VariableDeclarator j Literal 0 VariableDeclarator k Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator nextColDiff Literal 0 VariableDeclarator columnDiff Literal 0 WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference len BinaryOperation == MemberReference ArraySelector Assignment MemberReference j BinaryOperation % MemberReference start MemberReference bufsize = bufline MemberReference ArraySelector Assignment MemberReference k BinaryOperation % MemberReference ++ start MemberReference bufsize = bufline BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j bufline MemberReference newLine = StatementExpression Assignment MemberReference nextColDiff BinaryOperation - BinaryOperation + MemberReference columnDiff MemberReference ArraySelector MemberReference k bufcolumn MemberReference ArraySelector MemberReference j bufcolumn = StatementExpression Assignment MemberReference ArraySelector MemberReference j bufcolumn BinaryOperation + MemberReference newCol MemberReference columnDiff = StatementExpression Assignment MemberReference columnDiff MemberReference nextColDiff = StatementExpression MemberReference ++ i End IfStatement BinaryOperation < MemberReference i MemberReference len BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j bufline MemberReference ++ newLine = StatementExpression Assignment MemberReference ArraySelector MemberReference j bufcolumn BinaryOperation + MemberReference newCol MemberReference columnDiff = WhileStatement BinaryOperation < MemberReference ++ i MemberReference len BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector Assignment MemberReference j BinaryOperation % MemberReference start MemberReference bufsize = bufline MemberReference ArraySelector BinaryOperation % MemberReference ++ start MemberReference bufsize bufline StatementExpression Assignment MemberReference ArraySelector MemberReference j bufline MemberReference ++ newLine = StatementExpression Assignment MemberReference ArraySelector MemberReference j bufline MemberReference newLine = End End End StatementExpression Assignment MemberReference line MemberReference ArraySelector MemberReference j bufline = StatementExpression Assignment MemberReference column MemberReference ArraySelector MemberReference j bufcolumn =",0
858,858,,0
164,164,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geometry.shape ClassDeclaration Modifier public /**
 * Ellipse shape. From C++ gl.
 *
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ Ellipse FieldDeclaration Modifier private ReferenceType Point2D VariableDeclarator center FieldDeclaration /**
   * Half length of major axis
   */ Modifier private BasicType double VariableDeclarator a FieldDeclaration /**
   * Half length of minor axis
   */ Modifier private BasicType double VariableDeclarator b FieldDeclaration Modifier private BasicType double VariableDeclarator k1 VariableDeclarator k2 VariableDeclarator k3 FieldDeclaration /**
   * sin of rotation angle
   */ Modifier private BasicType double VariableDeclarator s FieldDeclaration /**
   * cos of rotation angle
   */ Modifier private BasicType double VariableDeclarator c ConstructorDeclaration Modifier public Ellipse StatementExpression Assignment MemberReference center ClassCreator ReferenceType Point2D Literal 0 Literal 0 = MethodDeclaration Modifier private BasicType double SQR FormalParameter BasicType double d ReturnStatement BinaryOperation * MemberReference d MemberReference d ConstructorDeclaration Modifier public /**
   * Constructor given bounding rectangle and a rotation.
   */ Ellipse FormalParameter ReferenceType Point2D p1 FormalParameter ReferenceType Point2D p2 FormalParameter BasicType double angle StatementExpression Assignment MemberReference center ClassCreator ReferenceType Point2D = StatementExpression MethodInvocation center BinaryOperation * BinaryOperation + MethodInvocation p1 x MethodInvocation p2 x Literal 0.5f x StatementExpression MethodInvocation center BinaryOperation * BinaryOperation + MethodInvocation p1 y MethodInvocation p2 y Literal 0.5f y LocalVariableDeclaration BasicType double VariableDeclarator angleRad MethodInvocation Math MemberReference angle toRadians StatementExpression Assignment MemberReference c MethodInvocation Math MemberReference angleRad cos = StatementExpression Assignment MemberReference s MethodInvocation Math MemberReference angleRad sin = LocalVariableDeclaration BasicType double VariableDeclarator dx BinaryOperation * MethodInvocation Math BinaryOperation - MethodInvocation p2 x MethodInvocation p1 x abs Literal 0.5 LocalVariableDeclaration BasicType double VariableDeclarator dy BinaryOperation * MethodInvocation Math BinaryOperation - MethodInvocation p2 y MethodInvocation p1 y abs Literal 0.5 IfStatement BinaryOperation >= MemberReference dx MemberReference dy BlockStatement StatementExpression Assignment MemberReference a MemberReference dx = StatementExpression Assignment MemberReference b MemberReference dy = BlockStatement StatementExpression Assignment MemberReference a MemberReference dy = StatementExpression Assignment MemberReference b MemberReference dx = End StatementExpression Assignment MemberReference k1 BinaryOperation + MethodInvocation BinaryOperation / MemberReference c MemberReference a SQR MethodInvocation BinaryOperation / MemberReference s MemberReference b SQR = StatementExpression Assignment MemberReference k2 BinaryOperation * BinaryOperation * BinaryOperation * Literal 2 MemberReference s MemberReference c BinaryOperation - BinaryOperation / Literal 1 MethodInvocation MemberReference a SQR BinaryOperation / Literal 1 MethodInvocation MemberReference b SQR = StatementExpression Assignment MemberReference k3 BinaryOperation + MethodInvocation BinaryOperation / MemberReference s MemberReference a SQR MethodInvocation BinaryOperation / MemberReference c MemberReference b SQR = MethodDeclaration /**
   * Determines if a line segment intersects the ellipse and if so finds the
   * point(s) of intersection.
   * 
   * @param seg
   *            Line segment to test for intersection
   * @param pt0
   *            OUT - intersection point (if it exists)
   * @param pt1
   *            OUT - second intersection point (if it exists)
   * 
   * @return Returns the number of intersection points (0, 1, or 2).
   */ Modifier public BasicType int intersect FormalParameter ReferenceType LineSegment seg FormalParameter ReferenceType Point2D pt0 FormalParameter ReferenceType Point2D pt1 IfStatement BinaryOperation == MemberReference pt0 Literal null StatementExpression Assignment MemberReference pt0 ClassCreator ReferenceType Point2D = End IfStatement BinaryOperation == MemberReference pt1 Literal null StatementExpression Assignment MemberReference pt1 ClassCreator ReferenceType Point2D = End LocalVariableDeclaration BasicType double VariableDeclarator x1 MethodInvocation center x LocalVariableDeclaration BasicType double VariableDeclarator y1 MethodInvocation center y LocalVariableDeclaration BasicType double VariableDeclarator u1 MethodInvocation seg.A x LocalVariableDeclaration BasicType double VariableDeclarator v1 MethodInvocation seg.A y LocalVariableDeclaration BasicType double VariableDeclarator u2 MethodInvocation seg.B x LocalVariableDeclaration BasicType double VariableDeclarator v2 MethodInvocation seg.B y LocalVariableDeclaration BasicType double VariableDeclarator dx BinaryOperation - MemberReference u2 MemberReference u1 LocalVariableDeclaration BasicType double VariableDeclarator dy BinaryOperation - MemberReference v2 MemberReference v1 LocalVariableDeclaration BasicType double VariableDeclarator q0 BinaryOperation - BinaryOperation + BinaryOperation + BinaryOperation * MemberReference k1 MethodInvocation BinaryOperation - MemberReference u1 MemberReference x1 SQR BinaryOperation * BinaryOperation * MemberReference k2 BinaryOperation - MemberReference u1 MemberReference x1 BinaryOperation - MemberReference v1 MemberReference y1 BinaryOperation * MemberReference k3 MethodInvocation BinaryOperation - MemberReference v1 MemberReference y1 SQR Literal 1 LocalVariableDeclaration BasicType double VariableDeclarator q1 BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation * BinaryOperation * BinaryOperation * Literal 2 MemberReference k1 MemberReference dx BinaryOperation - MemberReference u1 MemberReference x1 BinaryOperation * BinaryOperation * MemberReference k2 MemberReference dx BinaryOperation - MemberReference v1 MemberReference y1 BinaryOperation * BinaryOperation * MemberReference k2 MemberReference dy BinaryOperation - MemberReference u1 MemberReference x1 BinaryOperation * BinaryOperation * BinaryOperation * Literal 2 MemberReference k3 MemberReference dy BinaryOperation - MemberReference v1 MemberReference y1 LocalVariableDeclaration BasicType double VariableDeclarator q2 BinaryOperation + BinaryOperation + BinaryOperation * MemberReference k1 MethodInvocation MemberReference dx SQR BinaryOperation * BinaryOperation * MemberReference k2 MemberReference dx MemberReference dy BinaryOperation * MemberReference k3 MethodInvocation MemberReference dy SQR LocalVariableDeclaration BasicType double VariableDeclarator d BinaryOperation - MethodInvocation MemberReference q1 SQR BinaryOperation * BinaryOperation * Literal 4 MemberReference q0 MemberReference q2 IfStatement BinaryOperation < MemberReference d Literal 0 BlockStatement ReturnStatement Literal 0 End IfStatement BinaryOperation == MemberReference d Literal 0 BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator t BinaryOperation / MemberReference - q1 BinaryOperation * Literal 2 MemberReference q2 IfStatement BinaryOperation && BinaryOperation <= Literal 0 MemberReference t BinaryOperation <= MemberReference t Literal 1 BlockStatement StatementExpression MethodInvocation pt0 BinaryOperation + MemberReference u1 BinaryOperation * MemberReference t MemberReference dx x StatementExpression MethodInvocation pt0 BinaryOperation + MemberReference v1 BinaryOperation * MemberReference t MemberReference dy y ReturnStatement Literal 1 ReturnStatement Literal 0 End BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator n Literal 0 LocalVariableDeclaration BasicType double VariableDeclarator q MethodInvocation Math MemberReference d sqrt LocalVariableDeclaration BasicType double VariableDeclarator t BinaryOperation / BinaryOperation - MemberReference - q1 MemberReference q BinaryOperation * Literal 2 MemberReference q2 IfStatement BinaryOperation && BinaryOperation <= Literal 0 MemberReference t BinaryOperation <= MemberReference t Literal 1 BlockStatement StatementExpression MethodInvocation pt0 BinaryOperation + MemberReference u1 BinaryOperation * MemberReference t MemberReference dx x StatementExpression MethodInvocation pt0 BinaryOperation + MemberReference v1 BinaryOperation * MemberReference t MemberReference dy y StatementExpression MemberReference ++ n End StatementExpression Assignment MemberReference t BinaryOperation / BinaryOperation + MemberReference - q1 MemberReference q BinaryOperation * Literal 2 MemberReference q2 = IfStatement BinaryOperation && BinaryOperation <= Literal 0 MemberReference t BinaryOperation <= MemberReference t Literal 1 BlockStatement IfStatement BinaryOperation == MemberReference n Literal 0 BlockStatement StatementExpression MethodInvocation pt0 BinaryOperation + MemberReference u1 BinaryOperation * MemberReference t MemberReference dx x StatementExpression MethodInvocation pt0 BinaryOperation + MemberReference v1 BinaryOperation * MemberReference t MemberReference dy y StatementExpression MemberReference ++ n BlockStatement StatementExpression MethodInvocation pt1 BinaryOperation + MemberReference u1 BinaryOperation * MemberReference t MemberReference dx x StatementExpression MethodInvocation pt1 BinaryOperation + MemberReference v1 BinaryOperation * MemberReference t MemberReference dy y StatementExpression MemberReference ++ n End End ReturnStatement MemberReference n End MethodDeclaration Modifier public ReferenceType IntersectCase intersect FormalParameter ReferenceType Rectangle r LocalVariableDeclaration ReferenceType Point2D VariableDeclarator ul ClassCreator ReferenceType Point2D MethodInvocation r MethodInvocation x MinPt MethodInvocation r MethodInvocation y MaxPt LocalVariableDeclaration ReferenceType Point2D VariableDeclarator ur ClassCreator ReferenceType Point2D MethodInvocation r MethodInvocation x MaxPt MethodInvocation r MethodInvocation y MaxPt LocalVariableDeclaration ReferenceType Point2D VariableDeclarator ll ClassCreator ReferenceType Point2D MethodInvocation r MethodInvocation x MinPt MethodInvocation r MethodInvocation y MinPt LocalVariableDeclaration ReferenceType Point2D VariableDeclarator lr ClassCreator ReferenceType Point2D MethodInvocation r MethodInvocation x MaxPt MethodInvocation r MethodInvocation y MinPt IfStatement BinaryOperation && BinaryOperation && BinaryOperation && MethodInvocation MemberReference ul contains MethodInvocation MemberReference ur contains MethodInvocation MemberReference ll contains MethodInvocation MemberReference lr contains ReturnStatement MemberReference IntersectCase CONTAINS End LocalVariableDeclaration ReferenceType Point2D VariableDeclarator pt0 ClassCreator ReferenceType Point2D VariableDeclarator pt1 ClassCreator ReferenceType Point2D LocalVariableDeclaration ReferenceType LineSegment VariableDeclarator bottom ClassCreator ReferenceType LineSegment MemberReference ll MemberReference lr IfStatement BinaryOperation > MethodInvocation MemberReference bottom MemberReference pt0 MemberReference pt1 intersect Literal 0 ReturnStatement MemberReference IntersectCase INTERSECTS End LocalVariableDeclaration ReferenceType LineSegment VariableDeclarator top ClassCreator ReferenceType LineSegment MemberReference ul MemberReference ur IfStatement BinaryOperation > MethodInvocation MemberReference top MemberReference pt0 MemberReference pt1 intersect Literal 0 ReturnStatement MemberReference IntersectCase INTERSECTS End LocalVariableDeclaration ReferenceType LineSegment VariableDeclarator left ClassCreator ReferenceType LineSegment MemberReference ll MemberReference ul IfStatement BinaryOperation > MethodInvocation MemberReference left MemberReference pt0 MemberReference pt1 intersect Literal 0 ReturnStatement MemberReference IntersectCase INTERSECTS End LocalVariableDeclaration ReferenceType LineSegment VariableDeclarator right ClassCreator ReferenceType LineSegment MemberReference lr MemberReference ur IfStatement BinaryOperation > MethodInvocation MemberReference right MemberReference pt0 MemberReference pt1 intersect Literal 0 ReturnStatement MemberReference IntersectCase INTERSECTS End ReturnStatement TernaryExpression MethodInvocation r MemberReference center contains MemberReference IntersectCase WITHIN MemberReference IntersectCase OUTSIDE MethodDeclaration Modifier public BasicType double area ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public ReferenceType Point2D centroid ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public BasicType boolean contains FormalParameter ReferenceType Point2D pt LocalVariableDeclaration BasicType double VariableDeclarator dx BinaryOperation - MethodInvocation pt x MethodInvocation center x LocalVariableDeclaration BasicType double VariableDeclarator dy BinaryOperation - MethodInvocation pt y MethodInvocation center y LocalVariableDeclaration BasicType double VariableDeclarator eq BinaryOperation - BinaryOperation + BinaryOperation + BinaryOperation * MemberReference k1 MethodInvocation MemberReference dx SQR BinaryOperation * BinaryOperation * MemberReference k2 MemberReference dx MemberReference dy BinaryOperation * MemberReference k3 MethodInvocation MemberReference dy SQR Literal 1 ReturnStatement BinaryOperation <= MemberReference eq Literal 0 MethodDeclaration Modifier public translate FormalParameter ReferenceType Vector2D v ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType Geometry2D",0
287,287,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.text.Collator Import java.util.Locale Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.FieldCache.DoubleParser Import org.apache.lucene.search.FieldCache.LongParser Import org.apache.lucene.search.FieldCache.ByteParser Import org.apache.lucene.search.FieldCache.FloatParser Import org.apache.lucene.search.FieldCache.IntParser Import org.apache.lucene.search.FieldCache.ShortParser Import org.apache.lucene.search.FieldCache.StringIndex ClassDeclaration Modifier public abstract /**
 * Expert: a FieldComparator compares hits so as to determine their
 * sort order when collecting the top results with {@link
 * TopFieldCollector}.  The concrete public FieldComparator
 * classes here correspond to the SortField types.
 *
 * <p>This API is designed to achieve high performance
 * sorting, by exposing a tight interaction with {@link
 * FieldValueHitQueue} as it visits hits.  Whenever a hit is
 * competitive, it's enrolled into a virtual slot, which is
 * an int ranging from 0 to numHits-1.  The {@link
 * FieldComparator} is made aware of segment transitions
 * during searching in case any internal state it's tracking
 * needs to be recomputed during these transitions.</p>
 *
 * <p>A comparator must define these functions:</p>
 *
 * <ul>
 *
 *  <li> {@link #compare} Compare a hit at 'slot a'
 *       with hit 'slot b'.
 *
 *  <li> {@link #setBottom} This method is called by
 *       {@link FieldValueHitQueue} to notify the
 *       FieldComparator of the current weakest (""bottom"")
 *       slot.  Note that this slot may not hold the weakest
 *       value according to your comparator, in cases where
 *       your comparator is not the primary one (ie, is only
 *       used to break ties from the comparators before it).
 *
 *  <li> {@link #compareBottom} Compare a new hit (docID)
 *       against the ""weakest"" (bottom) entry in the queue.
 *
 *  <li> {@link #copy} Installs a new hit into the
 *       priority queue.  The {@link FieldValueHitQueue}
 *       calls this method when a new hit is competitive.
 *
 *  <li> {@link #setNextReader} Invoked
 *       when the search is switching to the next segment.
 *       You may need to update internal state of the
 *       comparator, for example retrieving new values from
 *       the {@link FieldCache}.
 *
 *  <li> {@link #value} Return the sort value stored in
 *       the specified slot.  This is only called at the end
 *       of the search, in order to populate {@link
 *       FieldDoc#fields} when returning the top results.
 * </ul>
 *
 * <b>NOTE:</b> This API is experimental and might change in
 * incompatible ways in the next release.
 */ FieldComparator MethodDeclaration /**
   * Compare hit at slot1 with hit at slot2.
   * 
   * @param slot1 first slot to compare
   * @param slot2 second slot to compare
   * @return any N < 0 if slot2's value is sorted after
   * slot1, any N > 0 if the slot2's value is sorted before
   * slot1 and 0 if they are equal
   */ Modifier public abstract BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 MethodDeclaration /**
   * Set the bottom slot, ie the ""weakest"" (sorted last)
   * entry in the queue.  When {@link #compareBottom} is
   * called, you should compare against this slot.  This
   * will always be called before {@link #compareBottom}.
   * 
   * @param slot the currently weakest (sorted last) slot in the queue
   */ Modifier public abstract setBottom FormalParameter Modifier final BasicType int slot MethodDeclaration /**
   * Compare the bottom of the queue with doc.  This will
   * only invoked after setBottom has been called.  This
   * should return the same result as {@link
   * #compare(int,int)}} as if bottom were slot1 and the new
   * document were slot 2.
   *    
   * <p>For a search that hits many results, this method
   * will be the hotspot (invoked by far the most
   * frequently).</p>
   * 
   * @param doc that was hit
   * @return any N < 0 if the doc's value is sorted after
   * the bottom entry (not competitive), any N > 0 if the
   * doc's value is sorted before the bottom entry and 0 if
   * they are equal.
   */ Modifier public abstract BasicType int compareBottom FormalParameter BasicType int doc IOException MethodDeclaration /**
   * This method is called when a new hit is competitive.
   * You should copy any state associated with this document
   * that will be required for future comparisons, into the
   * specified slot.
   * 
   * @param slot which slot to copy the hit to
   * @param doc docID relative to current reader
   */ Modifier public abstract copy FormalParameter BasicType int slot FormalParameter BasicType int doc IOException MethodDeclaration /**
   * Set a new Reader. All doc correspond to the current Reader.
   * 
   * @param reader current reader
   * @param docBase docBase of this reader 
   * @throws IOException
   * @throws IOException
   */ Modifier public abstract setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException MethodDeclaration /** Sets the Scorer to use in case a document's score is
   *  needed.
   * 
   * @param scorer Scorer instance that you should use to
   * obtain the current hit's score, if necessary. */ Modifier public setScorer FormalParameter ReferenceType Scorer scorer MethodDeclaration /**
   * Return the actual value in the slot.
   *
   * @param slot the value
   * @return value in this slot upgraded to Comparable
   */ Modifier public abstract ReferenceType Comparable value FormalParameter BasicType int slot ClassDeclaration Modifier public final static /** Parses field's values as byte (using {@link
   *  FieldCache#getBytes} and sorts by ascending value */ ByteComparator FieldDeclaration Modifier private final BasicType byte VariableDeclarator values FieldDeclaration Modifier private BasicType byte VariableDeclarator currentReaderValues FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType ByteParser VariableDeclarator parser FieldDeclaration Modifier private BasicType byte VariableDeclarator bottom ConstructorDeclaration ByteComparator FormalParameter BasicType int numHits FormalParameter ReferenceType String field FormalParameter ReferenceType FieldCache ReferenceType Parser parser StatementExpression Assignment MemberReference values ArrayCreator BasicType byte MemberReference numHits = StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference parser Cast ReferenceType ByteParser MemberReference parser = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 ReturnStatement BinaryOperation - MemberReference ArraySelector MemberReference slot1 values MemberReference ArraySelector MemberReference slot2 values MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc ReturnStatement BinaryOperation - MemberReference bottom MemberReference ArraySelector MemberReference doc currentReaderValues MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference doc currentReaderValues = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment MemberReference currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field MemberReference parser getBytes = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MethodInvocation Byte MemberReference ArraySelector MemberReference slot values valueOf ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Sorts by ascending docID */ DocComparator FieldDeclaration Modifier private final BasicType int VariableDeclarator docIDs FieldDeclaration Modifier private BasicType int VariableDeclarator docBase FieldDeclaration Modifier private BasicType int VariableDeclarator bottom ConstructorDeclaration DocComparator FormalParameter BasicType int numHits StatementExpression Assignment MemberReference docIDs ArrayCreator BasicType int MemberReference numHits = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 ReturnStatement BinaryOperation - MemberReference ArraySelector MemberReference slot1 docIDs MemberReference ArraySelector MemberReference slot2 docIDs MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc ReturnStatement BinaryOperation - MemberReference bottom BinaryOperation + MemberReference docBase MemberReference doc MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot docIDs BinaryOperation + MemberReference docBase MemberReference doc = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase StatementExpression Assignment This MemberReference docBase MemberReference docBase = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom docIDs = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MethodInvocation Integer MemberReference ArraySelector MemberReference slot docIDs valueOf ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Parses field's values as double (using {@link
   *  FieldCache#getDoubles} and sorts by ascending value */ DoubleComparator FieldDeclaration Modifier private final BasicType double VariableDeclarator values FieldDeclaration Modifier private BasicType double VariableDeclarator currentReaderValues FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType DoubleParser VariableDeclarator parser FieldDeclaration Modifier private BasicType double VariableDeclarator bottom ConstructorDeclaration DoubleComparator FormalParameter BasicType int numHits FormalParameter ReferenceType String field FormalParameter ReferenceType FieldCache ReferenceType Parser parser StatementExpression Assignment MemberReference values ArrayCreator BasicType double MemberReference numHits = StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference parser Cast ReferenceType DoubleParser MemberReference parser = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 LocalVariableDeclaration Modifier final BasicType double VariableDeclarator v1 MemberReference ArraySelector MemberReference slot1 values LocalVariableDeclaration Modifier final BasicType double VariableDeclarator v2 MemberReference ArraySelector MemberReference slot2 values IfStatement BinaryOperation > MemberReference v1 MemberReference v2 BlockStatement ReturnStatement Literal 1 IfStatement BinaryOperation < MemberReference v1 MemberReference v2 BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc LocalVariableDeclaration Modifier final BasicType double VariableDeclarator v2 MemberReference ArraySelector MemberReference doc currentReaderValues IfStatement BinaryOperation > MemberReference bottom MemberReference v2 BlockStatement ReturnStatement Literal 1 IfStatement BinaryOperation < MemberReference bottom MemberReference v2 BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference doc currentReaderValues = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment MemberReference currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field MemberReference parser getDoubles = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MethodInvocation Double MemberReference ArraySelector MemberReference slot values valueOf ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Parses field's values as float (using {@link
   *  FieldCache#getFloats} and sorts by ascending value */ FloatComparator FieldDeclaration Modifier private final BasicType float VariableDeclarator values FieldDeclaration Modifier private BasicType float VariableDeclarator currentReaderValues FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType FloatParser VariableDeclarator parser FieldDeclaration Modifier private BasicType float VariableDeclarator bottom ConstructorDeclaration FloatComparator FormalParameter BasicType int numHits FormalParameter ReferenceType String field FormalParameter ReferenceType FieldCache ReferenceType Parser parser StatementExpression Assignment MemberReference values ArrayCreator BasicType float MemberReference numHits = StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference parser Cast ReferenceType FloatParser MemberReference parser = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 LocalVariableDeclaration Modifier final BasicType float VariableDeclarator v1 MemberReference ArraySelector MemberReference slot1 values LocalVariableDeclaration Modifier final BasicType float VariableDeclarator v2 MemberReference ArraySelector MemberReference slot2 values IfStatement BinaryOperation > MemberReference v1 MemberReference v2 BlockStatement ReturnStatement Literal 1 IfStatement BinaryOperation < MemberReference v1 MemberReference v2 BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc LocalVariableDeclaration Modifier final BasicType float VariableDeclarator v2 MemberReference ArraySelector MemberReference doc currentReaderValues IfStatement BinaryOperation > MemberReference bottom MemberReference v2 BlockStatement ReturnStatement Literal 1 IfStatement BinaryOperation < MemberReference bottom MemberReference v2 BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference doc currentReaderValues = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment MemberReference currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field MemberReference parser getFloats = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MethodInvocation Float MemberReference ArraySelector MemberReference slot values valueOf ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Parses field's values as int (using {@link
   *  FieldCache#getInts} and sorts by ascending value */ IntComparator FieldDeclaration Modifier private final BasicType int VariableDeclarator values FieldDeclaration Modifier private BasicType int VariableDeclarator currentReaderValues FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType IntParser VariableDeclarator parser FieldDeclaration Modifier private BasicType int VariableDeclarator bottom ConstructorDeclaration IntComparator FormalParameter BasicType int numHits FormalParameter ReferenceType String field FormalParameter ReferenceType FieldCache ReferenceType Parser parser StatementExpression Assignment MemberReference values ArrayCreator BasicType int MemberReference numHits = StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference parser Cast ReferenceType IntParser MemberReference parser = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator v1 MemberReference ArraySelector MemberReference slot1 values LocalVariableDeclaration Modifier final BasicType int VariableDeclarator v2 MemberReference ArraySelector MemberReference slot2 values IfStatement BinaryOperation > MemberReference v1 MemberReference v2 BlockStatement ReturnStatement Literal 1 IfStatement BinaryOperation < MemberReference v1 MemberReference v2 BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc LocalVariableDeclaration Modifier final BasicType int VariableDeclarator v2 MemberReference ArraySelector MemberReference doc currentReaderValues IfStatement BinaryOperation > MemberReference bottom MemberReference v2 BlockStatement ReturnStatement Literal 1 IfStatement BinaryOperation < MemberReference bottom MemberReference v2 BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference doc currentReaderValues = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment MemberReference currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field MemberReference parser getInts = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MethodInvocation Integer MemberReference ArraySelector MemberReference slot values valueOf ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Parses field's values as long (using {@link
   *  FieldCache#getLongs} and sorts by ascending value */ LongComparator FieldDeclaration Modifier private final BasicType long VariableDeclarator values FieldDeclaration Modifier private BasicType long VariableDeclarator currentReaderValues FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType LongParser VariableDeclarator parser FieldDeclaration Modifier private BasicType long VariableDeclarator bottom ConstructorDeclaration LongComparator FormalParameter BasicType int numHits FormalParameter ReferenceType String field FormalParameter ReferenceType FieldCache ReferenceType Parser parser StatementExpression Assignment MemberReference values ArrayCreator BasicType long MemberReference numHits = StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference parser Cast ReferenceType LongParser MemberReference parser = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 LocalVariableDeclaration Modifier final BasicType long VariableDeclarator v1 MemberReference ArraySelector MemberReference slot1 values LocalVariableDeclaration Modifier final BasicType long VariableDeclarator v2 MemberReference ArraySelector MemberReference slot2 values IfStatement BinaryOperation > MemberReference v1 MemberReference v2 BlockStatement ReturnStatement Literal 1 IfStatement BinaryOperation < MemberReference v1 MemberReference v2 BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc LocalVariableDeclaration Modifier final BasicType long VariableDeclarator v2 MemberReference ArraySelector MemberReference doc currentReaderValues IfStatement BinaryOperation > MemberReference bottom MemberReference v2 BlockStatement ReturnStatement Literal 1 IfStatement BinaryOperation < MemberReference bottom MemberReference v2 BlockStatement ReturnStatement Literal - 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference doc currentReaderValues = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment MemberReference currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field MemberReference parser getLongs = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MethodInvocation Long MemberReference ArraySelector MemberReference slot values valueOf ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Sorts by descending relevance.  NOTE: if you are
   *  sorting only by descending relevance and then
   *  secondarily by ascending docID, performance is faster
   *  using {@link TopScoreDocCollector} directly (which {@link
   *  IndexSearcher#search} uses when no {@link Sort} is
   *  specified). */ RelevanceComparator FieldDeclaration Modifier private final BasicType float VariableDeclarator scores FieldDeclaration Modifier private BasicType float VariableDeclarator bottom FieldDeclaration Modifier private ReferenceType Scorer VariableDeclarator scorer ConstructorDeclaration RelevanceComparator FormalParameter BasicType int numHits StatementExpression Assignment MemberReference scores ArrayCreator BasicType float MemberReference numHits = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 LocalVariableDeclaration Modifier final BasicType float VariableDeclarator score1 MemberReference ArraySelector MemberReference slot1 scores LocalVariableDeclaration Modifier final BasicType float VariableDeclarator score2 MemberReference ArraySelector MemberReference slot2 scores ReturnStatement TernaryExpression BinaryOperation > MemberReference score1 MemberReference score2 Literal - 1 TernaryExpression BinaryOperation < MemberReference score1 MemberReference score2 Literal 1 Literal 0 MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc IOException LocalVariableDeclaration BasicType float VariableDeclarator score MethodInvocation scorer score ReturnStatement TernaryExpression BinaryOperation > MemberReference bottom MemberReference score Literal - 1 TernaryExpression BinaryOperation < MemberReference bottom MemberReference score Literal 1 Literal 0 MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc IOException StatementExpression Assignment MemberReference ArraySelector MemberReference slot scores MethodInvocation scorer score = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom scores = MethodDeclaration Modifier public Annotation Override setScorer FormalParameter ReferenceType Scorer scorer StatementExpression Assignment This MemberReference scorer ClassCreator ReferenceType ScoreCachingWrappingScorer MemberReference scorer = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MethodInvocation Float MemberReference ArraySelector MemberReference slot scores valueOf ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Parses field's values as short (using {@link
   *  FieldCache#getShorts} and sorts by ascending value */ ShortComparator FieldDeclaration Modifier private final BasicType short VariableDeclarator values FieldDeclaration Modifier private BasicType short VariableDeclarator currentReaderValues FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType ShortParser VariableDeclarator parser FieldDeclaration Modifier private BasicType short VariableDeclarator bottom ConstructorDeclaration ShortComparator FormalParameter BasicType int numHits FormalParameter ReferenceType String field FormalParameter ReferenceType FieldCache ReferenceType Parser parser StatementExpression Assignment MemberReference values ArrayCreator BasicType short MemberReference numHits = StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference parser Cast ReferenceType ShortParser MemberReference parser = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 ReturnStatement BinaryOperation - MemberReference ArraySelector MemberReference slot1 values MemberReference ArraySelector MemberReference slot2 values MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc ReturnStatement BinaryOperation - MemberReference bottom MemberReference ArraySelector MemberReference doc currentReaderValues MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference doc currentReaderValues = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment MemberReference currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field MemberReference parser getShorts = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MethodInvocation Short MemberReference ArraySelector MemberReference slot values valueOf ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Sorts by a field's value using the Collator for a
   *  given Locale.*/ StringComparatorLocale FieldDeclaration Modifier private final ReferenceType String VariableDeclarator values FieldDeclaration Modifier private ReferenceType String VariableDeclarator currentReaderValues FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier final ReferenceType Collator VariableDeclarator collator FieldDeclaration Modifier private ReferenceType String VariableDeclarator bottom ConstructorDeclaration StringComparatorLocale FormalParameter BasicType int numHits FormalParameter ReferenceType String field FormalParameter ReferenceType Locale locale StatementExpression Assignment MemberReference values ArrayCreator ReferenceType String MemberReference numHits = StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment MemberReference collator MethodInvocation Collator MemberReference locale getInstance = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val1 MemberReference ArraySelector MemberReference slot1 values LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val2 MemberReference ArraySelector MemberReference slot2 values IfStatement BinaryOperation == MemberReference val1 Literal null BlockStatement IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 0 End ReturnStatement Literal - 1 IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 1 End End ReturnStatement MethodInvocation collator MemberReference val1 MemberReference val2 compare MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val2 MemberReference ArraySelector MemberReference doc currentReaderValues IfStatement BinaryOperation == MemberReference bottom Literal null BlockStatement IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 0 End ReturnStatement Literal - 1 IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 1 End End ReturnStatement MethodInvocation collator MemberReference bottom MemberReference val2 compare MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference doc currentReaderValues = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment MemberReference currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field getStrings = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MemberReference ArraySelector MemberReference slot values ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Sorts by field's natural String sort order, using
   *  ordinals.  This is functionally equivalent to {@link
   *  StringValComparator}, but it first resolves the string
   *  to their relative ordinal positions (using the index
   *  returned by {@link FieldCache#getStringIndex}), and
   *  does most comparisons using the ordinals.  For medium
   *  to large results, this comparator will be much faster
   *  than {@link StringValComparator}.  For very small
   *  result sets it may be slower. */ StringOrdValComparator FieldDeclaration Modifier private final BasicType int VariableDeclarator ords FieldDeclaration Modifier private final ReferenceType String VariableDeclarator values FieldDeclaration Modifier private final BasicType int VariableDeclarator readerGen FieldDeclaration Modifier private BasicType int VariableDeclarator currentReaderGen Literal - 1 FieldDeclaration Modifier private ReferenceType String VariableDeclarator lookup FieldDeclaration Modifier private BasicType int VariableDeclarator order FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private BasicType int VariableDeclarator bottomSlot Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator bottomOrd FieldDeclaration Modifier private ReferenceType String VariableDeclarator bottomValue FieldDeclaration Modifier private final BasicType boolean VariableDeclarator reversed FieldDeclaration Modifier private final BasicType int VariableDeclarator sortPos ConstructorDeclaration Modifier public StringOrdValComparator FormalParameter BasicType int numHits FormalParameter ReferenceType String field FormalParameter BasicType int sortPos FormalParameter BasicType boolean reversed StatementExpression Assignment MemberReference ords ArrayCreator BasicType int MemberReference numHits = StatementExpression Assignment MemberReference values ArrayCreator ReferenceType String MemberReference numHits = StatementExpression Assignment MemberReference readerGen ArrayCreator BasicType int MemberReference numHits = StatementExpression Assignment This MemberReference sortPos MemberReference sortPos = StatementExpression Assignment This MemberReference reversed MemberReference reversed = StatementExpression Assignment This MemberReference field MemberReference field = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 IfStatement BinaryOperation == MemberReference ArraySelector MemberReference slot1 readerGen MemberReference ArraySelector MemberReference slot2 readerGen BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator cmp BinaryOperation - MemberReference ArraySelector MemberReference slot1 ords MemberReference ArraySelector MemberReference slot2 ords IfStatement BinaryOperation != MemberReference cmp Literal 0 BlockStatement ReturnStatement MemberReference cmp End End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val1 MemberReference ArraySelector MemberReference slot1 values LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val2 MemberReference ArraySelector MemberReference slot2 values IfStatement BinaryOperation == MemberReference val1 Literal null BlockStatement IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 0 End ReturnStatement Literal - 1 IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 1 End End ReturnStatement MethodInvocation val1 MemberReference val2 compareTo MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc AssertStatement BinaryOperation != MemberReference bottomSlot Literal - 1 LocalVariableDeclaration BasicType int VariableDeclarator order This MemberReference order ArraySelector MemberReference doc LocalVariableDeclaration Modifier final BasicType int VariableDeclarator cmp BinaryOperation - MemberReference bottomOrd MemberReference order IfStatement BinaryOperation != MemberReference cmp Literal 0 BlockStatement ReturnStatement MemberReference cmp End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val2 MemberReference ArraySelector MemberReference order lookup IfStatement BinaryOperation == MemberReference bottomValue Literal null BlockStatement IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 0 End ReturnStatement Literal - 1 IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 1 End End ReturnStatement MethodInvocation bottomValue MemberReference val2 compareTo MethodDeclaration Modifier private convert FormalParameter BasicType int slot StatementExpression Assignment MemberReference ArraySelector MemberReference slot readerGen MemberReference currentReaderGen = LocalVariableDeclaration BasicType int VariableDeclarator index Literal 0 LocalVariableDeclaration ReferenceType String VariableDeclarator value MemberReference ArraySelector MemberReference slot values IfStatement BinaryOperation == MemberReference value Literal null BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference slot ords Literal 0 = ReturnStatement End IfStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference sortPos Literal 0 BinaryOperation != MemberReference bottomSlot Literal - 1 BinaryOperation != MemberReference bottomSlot MemberReference slot BlockStatement AssertStatement BinaryOperation < MemberReference bottomOrd MemberReference lookup length IfStatement MemberReference reversed BlockStatement StatementExpression Assignment MemberReference index MethodInvocation MemberReference lookup MemberReference value MemberReference bottomOrd BinaryOperation - MemberReference lookup length Literal 1 binarySearch = BlockStatement StatementExpression Assignment MemberReference index MethodInvocation MemberReference lookup MemberReference value Literal 0 MemberReference bottomOrd binarySearch = End BlockStatement StatementExpression Assignment MemberReference index MethodInvocation MemberReference lookup MemberReference value binarySearch = End IfStatement BinaryOperation < MemberReference index Literal 0 BlockStatement StatementExpression Assignment MemberReference index BinaryOperation - MemberReference - index Literal 2 = End StatementExpression Assignment MemberReference ArraySelector MemberReference slot ords MemberReference index = MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc LocalVariableDeclaration Modifier final BasicType int VariableDeclarator ord MemberReference ArraySelector MemberReference doc order StatementExpression Assignment MemberReference ArraySelector MemberReference slot ords MemberReference ord = AssertStatement BinaryOperation >= MemberReference ord Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference ord lookup = StatementExpression Assignment MemberReference ArraySelector MemberReference slot readerGen MemberReference currentReaderGen = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException LocalVariableDeclaration ReferenceType StringIndex VariableDeclarator currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field getStringIndex StatementExpression MemberReference ++ currentReaderGen StatementExpression Assignment MemberReference order MemberReference currentReaderValues order = StatementExpression Assignment MemberReference lookup MemberReference currentReaderValues lookup = AssertStatement BinaryOperation > MemberReference lookup length Literal 0 IfStatement BinaryOperation != MemberReference bottomSlot Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference bottomSlot convert StatementExpression Assignment MemberReference bottomOrd MemberReference ArraySelector MemberReference bottomSlot ords = End MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment MemberReference bottomSlot MemberReference bottom = IfStatement BinaryOperation != MemberReference ArraySelector MemberReference bottom readerGen MemberReference currentReaderGen BlockStatement StatementExpression MethodInvocation MemberReference bottomSlot convert End StatementExpression Assignment MemberReference bottomOrd MemberReference ArraySelector MemberReference bottom ords = AssertStatement BinaryOperation >= MemberReference bottomOrd Literal 0 AssertStatement BinaryOperation < MemberReference bottomOrd MemberReference lookup length StatementExpression Assignment MemberReference bottomValue MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MemberReference ArraySelector MemberReference slot values MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement MemberReference values MethodDeclaration Modifier public BasicType int getBottomSlot ReturnStatement MemberReference bottomSlot MethodDeclaration Modifier public ReferenceType String getField ReturnStatement MemberReference field ReferenceType FieldComparator ClassDeclaration Modifier public final static /** Sorts by field's natural String sort order.  All
   *  comparisons are done using String.compareTo, which is
   *  slow for medium to large result sets but possibly
   *  very fast for very small results sets. */ StringValComparator FieldDeclaration Modifier private ReferenceType String VariableDeclarator values FieldDeclaration Modifier private ReferenceType String VariableDeclarator currentReaderValues FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType String VariableDeclarator bottom ConstructorDeclaration StringValComparator FormalParameter BasicType int numHits FormalParameter ReferenceType String field StatementExpression Assignment MemberReference values ArrayCreator ReferenceType String MemberReference numHits = StatementExpression Assignment This MemberReference field MemberReference field = MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter BasicType int slot1 FormalParameter BasicType int slot2 LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val1 MemberReference ArraySelector MemberReference slot1 values LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val2 MemberReference ArraySelector MemberReference slot2 values IfStatement BinaryOperation == MemberReference val1 Literal null BlockStatement IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 0 End ReturnStatement Literal - 1 IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 1 End End ReturnStatement MethodInvocation val1 MemberReference val2 compareTo MethodDeclaration Modifier public Annotation Override BasicType int compareBottom FormalParameter BasicType int doc LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator val2 MemberReference ArraySelector MemberReference doc currentReaderValues IfStatement BinaryOperation == MemberReference bottom Literal null BlockStatement IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 0 End ReturnStatement Literal - 1 IfStatement BinaryOperation == MemberReference val2 Literal null BlockStatement ReturnStatement Literal 1 End End ReturnStatement MethodInvocation bottom MemberReference val2 compareTo MethodDeclaration Modifier public Annotation Override copy FormalParameter BasicType int slot FormalParameter BasicType int doc StatementExpression Assignment MemberReference ArraySelector MemberReference slot values MemberReference ArraySelector MemberReference doc currentReaderValues = MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment MemberReference currentReaderValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference field getStrings = MethodDeclaration Modifier public Annotation Override setBottom FormalParameter Modifier final BasicType int bottom StatementExpression Assignment This MemberReference bottom MemberReference ArraySelector MemberReference bottom values = MethodDeclaration Modifier public Annotation Override ReferenceType Comparable value FormalParameter BasicType int slot ReturnStatement MemberReference ArraySelector MemberReference slot values ReferenceType FieldComparator MethodDeclaration Modifier final protected static BasicType int binarySearch FormalParameter ReferenceType String a FormalParameter ReferenceType String key ReturnStatement MethodInvocation MemberReference a MemberReference key Literal 0 BinaryOperation - MemberReference a length Literal 1 binarySearch MethodDeclaration Modifier final protected static BasicType int binarySearch FormalParameter ReferenceType String a FormalParameter ReferenceType String key FormalParameter BasicType int low FormalParameter BasicType int high WhileStatement BinaryOperation <= MemberReference low MemberReference high BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator mid BinaryOperation >>> BinaryOperation + MemberReference low MemberReference high Literal 1 LocalVariableDeclaration ReferenceType String VariableDeclarator midVal MemberReference ArraySelector MemberReference mid a LocalVariableDeclaration BasicType int VariableDeclarator cmp IfStatement BinaryOperation != MemberReference midVal Literal null BlockStatement StatementExpression Assignment MemberReference cmp MethodInvocation midVal MemberReference key compareTo = BlockStatement StatementExpression Assignment MemberReference cmp Literal - 1 = End IfStatement BinaryOperation < MemberReference cmp Literal 0 StatementExpression Assignment MemberReference low BinaryOperation + MemberReference mid Literal 1 = IfStatement BinaryOperation > MemberReference cmp Literal 0 StatementExpression Assignment MemberReference high BinaryOperation - MemberReference mid Literal 1 = ReturnStatement MemberReference mid End End End ReturnStatement BinaryOperation + MemberReference low Literal 1",1
328,328,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes Import java.util.List Import org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.CompareOperator Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax ClassDeclaration Modifier public /**
 * A {@link ParametricRangeQueryNode} represents LE, LT, GE, GT, EQ, NE query.
 * Example: date >= ""2009-10-10"" OR price = 200
 */ ParametricRangeQueryNode FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 7120958816535573935L ConstructorDeclaration Modifier public ParametricRangeQueryNode FormalParameter ReferenceType ParametricQueryNode lowerBound FormalParameter ReferenceType ParametricQueryNode upperBound IfStatement BinaryOperation && BinaryOperation != MethodInvocation upperBound getOperator MemberReference CompareOperator LE BinaryOperation != MethodInvocation upperBound getOperator MemberReference CompareOperator LT BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""upper bound should have "" MemberReference CompareOperator LE Literal "" or "" MemberReference CompareOperator LT End IfStatement BinaryOperation && BinaryOperation != MethodInvocation lowerBound getOperator MemberReference CompareOperator GE BinaryOperation != MethodInvocation lowerBound getOperator MemberReference CompareOperator GT BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""lower bound should have "" MemberReference CompareOperator GE Literal "" or "" MemberReference CompareOperator GT End IfStatement BinaryOperation || BinaryOperation != MethodInvocation upperBound getField MethodInvocation lowerBound getField BinaryOperation && BinaryOperation != MethodInvocation upperBound getField Literal null MethodInvocation ! upperBound MethodInvocation MethodInvocation lowerBound getField equals getField BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""lower and upper bounds should have the same field name!"" End StatementExpression MethodInvocation allocate StatementExpression MethodInvocation Literal false setLeaf StatementExpression MethodInvocation MemberReference lowerBound add StatementExpression MethodInvocation MemberReference upperBound add MethodDeclaration Modifier public ReferenceType ParametricQueryNode getUpperBound ReturnStatement Cast ReferenceType ParametricQueryNode MethodInvocation MethodInvocation Literal 1 get getChildren MethodDeclaration Modifier public ReferenceType ParametricQueryNode getLowerBound ReturnStatement Cast ReferenceType ParametricQueryNode MethodInvocation MethodInvocation Literal 0 get getChildren MethodDeclaration Modifier public ReferenceType CharSequence toQueryString FormalParameter ReferenceType EscapeQuerySyntax escapeSyntaxParser ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation MemberReference escapeSyntaxParser toQueryString getLowerBound Literal "" AND "" MethodInvocation MethodInvocation MemberReference escapeSyntaxParser toQueryString getUpperBound MethodDeclaration Modifier public ReferenceType CharSequence getField ReturnStatement MethodInvocation MethodInvocation getField getLowerBound MethodDeclaration Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder Literal ""<parametricRange>\n\t"" StatementExpression MethodInvocation sb MethodInvocation Literal ""\n\t"" append MethodInvocation getUpperBound append StatementExpression MethodInvocation sb MethodInvocation Literal ""\n"" append MethodInvocation getLowerBound append StatementExpression MethodInvocation sb Literal ""</parametricRange>\n"" append ReturnStatement MethodInvocation sb toString MethodDeclaration Modifier public Annotation Override ReferenceType ParametricRangeQueryNode cloneTree CloneNotSupportedException LocalVariableDeclaration ReferenceType ParametricRangeQueryNode VariableDeclarator clone Cast ReferenceType ParametricRangeQueryNode SuperMethodInvocation cloneTree ReturnStatement MemberReference clone MethodDeclaration Modifier public setField FormalParameter ReferenceType CharSequence fieldName LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator children MethodInvocation getChildren IfStatement BinaryOperation != MemberReference children Literal null BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNode VariableDeclarator child MethodInvocation getChildren BlockStatement IfStatement BinaryOperation instanceof MemberReference child ReferenceType FieldableNode BlockStatement StatementExpression Cast ReferenceType FieldableNode MemberReference child End End End ReferenceType QueryNodeImpl ReferenceType FieldableNode",0
332,332,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.util.PriorityQueue Import java.io.IOException Import java.util.Arrays Import java.util.LinkedList Import java.util.List ClassDeclaration Modifier public /**
 * Allows you to iterate over the {@link TermPositions} for multiple {@link Term}s as
 * a single {@link TermPositions}.
 *
 */ MultipleTermPositions ClassDeclaration Modifier private final static TermPositionsQueue ConstructorDeclaration TermPositionsQueue FormalParameter ReferenceType List TypeArgument ReferenceType TermPositions termPositions IOException StatementExpression MethodInvocation MethodInvocation termPositions size initialize ForStatement EnhancedForControl VariableDeclaration ReferenceType TermPositions VariableDeclarator tp MemberReference termPositions BlockStatement IfStatement MethodInvocation tp next StatementExpression MethodInvocation MemberReference tp add End End MethodDeclaration Modifier final ReferenceType TermPositions peek ReturnStatement MethodInvocation top MethodDeclaration Modifier public final Annotation Override BasicType boolean lessThan FormalParameter ReferenceType TermPositions a FormalParameter ReferenceType TermPositions b ReturnStatement BinaryOperation < MethodInvocation a doc MethodInvocation b doc ReferenceType PriorityQueue TypeArgument ReferenceType TermPositions ClassDeclaration Modifier private final static IntQueue FieldDeclaration Modifier private BasicType int VariableDeclarator _arraySize Literal 16 FieldDeclaration Modifier private BasicType int VariableDeclarator _index Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator _lastIndex Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator _array ArrayCreator BasicType int MemberReference _arraySize MethodDeclaration Modifier final add FormalParameter BasicType int i IfStatement BinaryOperation == MemberReference _lastIndex MemberReference _arraySize StatementExpression MethodInvocation growArray End StatementExpression Assignment MemberReference ArraySelector MemberReference ++ _lastIndex _array MemberReference i = MethodDeclaration Modifier final BasicType int next ReturnStatement MemberReference ArraySelector MemberReference ++ _index _array MethodDeclaration Modifier final sort StatementExpression MethodInvocation Arrays MemberReference _array MemberReference _index MemberReference _lastIndex sort MethodDeclaration Modifier final clear StatementExpression Assignment MemberReference _index Literal 0 = StatementExpression Assignment MemberReference _lastIndex Literal 0 = MethodDeclaration Modifier final BasicType int size ReturnStatement BinaryOperation - MemberReference _lastIndex MemberReference _index MethodDeclaration Modifier private growArray LocalVariableDeclaration BasicType int VariableDeclarator newArray ArrayCreator BasicType int BinaryOperation * MemberReference _arraySize Literal 2 StatementExpression MethodInvocation System MemberReference _array Literal 0 MemberReference newArray Literal 0 MemberReference _arraySize arraycopy StatementExpression Assignment MemberReference _array MemberReference newArray = StatementExpression Assignment MemberReference _arraySize Literal 2 *= FieldDeclaration Modifier private BasicType int VariableDeclarator _doc FieldDeclaration Modifier private BasicType int VariableDeclarator _freq FieldDeclaration Modifier private ReferenceType TermPositionsQueue VariableDeclarator _termPositionsQueue FieldDeclaration Modifier private ReferenceType IntQueue VariableDeclarator _posList ConstructorDeclaration Modifier public /**
   * Creates a new <code>MultipleTermPositions</code> instance.
   * 
   * @exception IOException
   */ MultipleTermPositions FormalParameter ReferenceType IndexReader indexReader FormalParameter ReferenceType Term terms IOException LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType TermPositions VariableDeclarator termPositions ClassCreator ReferenceType LinkedList TypeArgument ReferenceType TermPositions ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference terms length MemberReference ++ i StatementExpression MethodInvocation termPositions MethodInvocation indexReader MemberReference ArraySelector MemberReference i terms termPositions add End StatementExpression Assignment MemberReference _termPositionsQueue ClassCreator ReferenceType TermPositionsQueue MemberReference termPositions = StatementExpression Assignment MemberReference _posList ClassCreator ReferenceType IntQueue = MethodDeclaration Modifier public final BasicType boolean next IOException IfStatement BinaryOperation == MethodInvocation _termPositionsQueue size Literal 0 ReturnStatement Literal false End StatementExpression MethodInvocation _posList clear StatementExpression Assignment MemberReference _doc MethodInvocation _termPositionsQueue MethodInvocation doc peek = LocalVariableDeclaration ReferenceType TermPositions VariableDeclarator tp DoStatement BinaryOperation && BinaryOperation > MethodInvocation _termPositionsQueue size Literal 0 BinaryOperation == MethodInvocation _termPositionsQueue MethodInvocation doc peek MemberReference _doc BlockStatement StatementExpression Assignment MemberReference tp MethodInvocation _termPositionsQueue peek = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation tp freq MemberReference ++ i StatementExpression MethodInvocation _posList MethodInvocation tp nextPosition add End IfStatement MethodInvocation tp next StatementExpression MethodInvocation _termPositionsQueue updateTop BlockStatement StatementExpression MethodInvocation _termPositionsQueue pop StatementExpression MethodInvocation tp close End End StatementExpression MethodInvocation _posList sort StatementExpression Assignment MemberReference _freq MethodInvocation _posList size = ReturnStatement Literal true MethodDeclaration Modifier public final BasicType int nextPosition ReturnStatement MethodInvocation _posList next MethodDeclaration Modifier public final BasicType boolean skipTo FormalParameter BasicType int target IOException WhileStatement BinaryOperation && BinaryOperation != MethodInvocation _termPositionsQueue peek Literal null BinaryOperation > MemberReference target MethodInvocation _termPositionsQueue MethodInvocation doc peek BlockStatement LocalVariableDeclaration ReferenceType TermPositions VariableDeclarator tp MethodInvocation _termPositionsQueue pop IfStatement MethodInvocation tp MemberReference target skipTo StatementExpression MethodInvocation _termPositionsQueue MemberReference tp add StatementExpression MethodInvocation tp close End End ReturnStatement MethodInvocation next MethodDeclaration Modifier public final BasicType int doc ReturnStatement MemberReference _doc MethodDeclaration Modifier public final BasicType int freq ReturnStatement MemberReference _freq MethodDeclaration Modifier public final close IOException WhileStatement BinaryOperation > MethodInvocation _termPositionsQueue size Literal 0 StatementExpression MethodInvocation _termPositionsQueue MethodInvocation close pop End MethodDeclaration /**
   * Not implemented.
   * @throws UnsupportedOperationException
   */ Modifier public seek FormalParameter ReferenceType Term arg0 IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   * Not implemented.
   * @throws UnsupportedOperationException
   */ Modifier public seek FormalParameter ReferenceType TermEnum termEnum IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   * Not implemented.
   * @throws UnsupportedOperationException
   */ Modifier public BasicType int read FormalParameter BasicType int arg0 FormalParameter BasicType int arg1 IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   * Not implemented.
   * @throws UnsupportedOperationException
   */ Modifier public BasicType int getPayloadLength ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   * Not implemented.
   * @throws UnsupportedOperationException
   */ Modifier public BasicType byte getPayload FormalParameter BasicType byte data FormalParameter BasicType int offset IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   *
   * @return false
   */ Modifier public BasicType boolean isPayloadAvailable ReturnStatement Literal false ReferenceType TermPositions",0
55,55,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import org.apache.lucene.benchmark.byTask.PerfRunData ClassDeclaration Modifier public /**
 * Search and Traverse and Retrieve docs task.
 * 
 * <p>Note: This task reuses the reader if it is already open. 
 * Otherwise a reader is opened at start and closed at the end.
 * </p>
 * 
 * <p>Takes optional param: traversal size (otherwise all results are traversed).</p>
 * 
 * <p>Other side effects: counts additional 1 (record) for each traversed hit, 
 * and 1 more for each retrieved (non null) document.</p>
 */ SearchTravRetTask ConstructorDeclaration Modifier public SearchTravRetTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType boolean withRetrieve ReturnStatement Literal true ReferenceType SearchTravTask",0
487,487,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.el Import java.io.IOException Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute ClassDeclaration Modifier public final /**
 * Normalizes token text to lower case, removes some Greek diacritics,
 * and standardizes final sigma to sigma. 
 *
 */ GreekLowerCaseFilter FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt ConstructorDeclaration Modifier public GreekLowerCaseFilter FormalParameter ReferenceType TokenStream in StatementExpression SuperConstructorInvocation MemberReference in StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken IOException IfStatement MethodInvocation input incrementToken BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator chArray MethodInvocation termAtt termBuffer LocalVariableDeclaration BasicType int VariableDeclarator chLen MethodInvocation termAtt termLength ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference chLen MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i chArray Cast BasicType char MethodInvocation MemberReference ArraySelector MemberReference i chArray lowerCase = End ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier private BasicType int lowerCase FormalParameter BasicType int codepoint SwitchStatement MemberReference codepoint SwitchStatementCase Literal 'ς' ReturnStatement Literal 'σ' SwitchStatementCase Literal 'Ά' Literal 'ά' ReturnStatement Literal 'α' SwitchStatementCase Literal 'Έ' Literal 'έ' ReturnStatement Literal 'ε' SwitchStatementCase Literal 'Ή' Literal 'ή' ReturnStatement Literal 'η' SwitchStatementCase Literal 'Ί' Literal 'Ϊ' Literal 'ί' Literal 'ϊ' Literal 'ΐ' ReturnStatement Literal 'ι' SwitchStatementCase Literal 'Ύ' Literal 'Ϋ' Literal 'ύ' Literal 'ϋ' Literal 'ΰ' ReturnStatement Literal 'υ' SwitchStatementCase Literal 'Ό' Literal 'ό' ReturnStatement Literal 'ο' SwitchStatementCase Literal 'Ώ' Literal 'ώ' ReturnStatement Literal 'ω' SwitchStatementCase Literal '΢' ReturnStatement Literal 'ς' SwitchStatementCase ReturnStatement MethodInvocation Character MemberReference codepoint toLowerCase End ReferenceType TokenFilter",1
683,683,,1
585,585,,1
567,567,,0
290,290,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geometry.shape ClassDeclaration Modifier public /**
 * 2D vector
 *
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ Vector2D FieldDeclaration Modifier private BasicType double VariableDeclarator x FieldDeclaration Modifier private BasicType double VariableDeclarator y ConstructorDeclaration Modifier public /**
   * Create a vector from the origin of the coordinate system to the given
   * point
   * 
   * @param x
   * @param y
   */ Vector2D FormalParameter BasicType double x FormalParameter BasicType double y StatementExpression Assignment This MemberReference x MemberReference x = StatementExpression Assignment This MemberReference y MemberReference y = ConstructorDeclaration Modifier public /**
   * Create a vector from the origin of the coordinate system to the given
   * point
   */ Vector2D FormalParameter ReferenceType Point2D p StatementExpression ExplicitConstructorInvocation MethodInvocation p getX MethodInvocation p getY ConstructorDeclaration Modifier public /**
   * Create a vector from one point to another
   * 
   * @param from
   * @param to
   */ Vector2D FormalParameter ReferenceType Point2D from FormalParameter ReferenceType Point2D to StatementExpression ExplicitConstructorInvocation BinaryOperation - MethodInvocation to getX MethodInvocation from getX BinaryOperation - MethodInvocation to getY MethodInvocation from getY ConstructorDeclaration Modifier public Vector2D StatementExpression Assignment This MemberReference x Literal 0 = StatementExpression Assignment This MemberReference y Literal 0 = ConstructorDeclaration Modifier public Vector2D FormalParameter ReferenceType Vector2D other StatementExpression Assignment This MemberReference x MemberReference other x = StatementExpression Assignment This MemberReference y MemberReference other y = MethodDeclaration Modifier public BasicType double getX ReturnStatement MemberReference x MethodDeclaration Modifier public BasicType double getY ReturnStatement MemberReference y MethodDeclaration Modifier public setX FormalParameter BasicType double x StatementExpression Assignment This MemberReference x MemberReference x = MethodDeclaration Modifier public setY FormalParameter BasicType double y StatementExpression Assignment This MemberReference y MemberReference y = MethodDeclaration Modifier public set FormalParameter BasicType double x FormalParameter BasicType double y StatementExpression Assignment This MemberReference x MemberReference x = StatementExpression Assignment This MemberReference y MemberReference y = MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Vector2D other ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference other Literal null BinaryOperation == MemberReference x MemberReference other x BinaryOperation == MemberReference y MemberReference other y MethodDeclaration Modifier public BasicType double dot FormalParameter ReferenceType Vector2D in ReturnStatement BinaryOperation + BinaryOperation * MemberReference x MemberReference in x BinaryOperation * MemberReference y MemberReference in y MethodDeclaration /**
   * Vector length (magnitude) squared
   */ Modifier public BasicType double normSqr ReturnStatement BinaryOperation + BinaryOperation * MemberReference x MemberReference x BinaryOperation * MemberReference y MemberReference y MethodDeclaration Modifier public BasicType double norm ReturnStatement MethodInvocation Math MethodInvocation normSqr sqrt MethodDeclaration Modifier public ReferenceType Vector2D mult FormalParameter BasicType double d ReturnStatement ClassCreator ReferenceType Vector2D BinaryOperation * MemberReference x MemberReference d BinaryOperation * MemberReference y MemberReference d MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result Literal 1 LocalVariableDeclaration BasicType long VariableDeclarator temp StatementExpression Assignment MemberReference temp MethodInvocation Double MemberReference x doubleToLongBits = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result Cast BasicType int BinaryOperation ^ MemberReference temp BinaryOperation >>> MemberReference temp Literal 32 = StatementExpression Assignment MemberReference temp MethodInvocation Double MemberReference y doubleToLongBits = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result Cast BasicType int BinaryOperation ^ MemberReference temp BinaryOperation >>> MemberReference temp Literal 32 = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference obj Literal null ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType Vector2D VariableDeclarator other Cast ReferenceType Vector2D MemberReference obj IfStatement BinaryOperation != MethodInvocation Double MemberReference x doubleToLongBits MethodInvocation Double MemberReference other x doubleToLongBits ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation Double MemberReference y doubleToLongBits MethodInvocation Double MemberReference other y doubleToLongBits ReturnStatement Literal false End ReturnStatement Literal true",1
141,141,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.store.IndexOutput Import org.apache.lucene.store.RAMOutputStream Import org.apache.lucene.util.ArrayUtil Import java.io.IOException Import java.util.Collection Import java.util.Map ClassDeclaration Modifier final TermVectorsTermsWriter FieldDeclaration Modifier final ReferenceType DocumentsWriter VariableDeclarator docWriter FieldDeclaration ReferenceType TermVectorsWriter VariableDeclarator termVectorsWriter FieldDeclaration ReferenceType PerDoc VariableDeclarator docFreeList ArrayCreator ReferenceType PerDoc Literal 1 FieldDeclaration BasicType int VariableDeclarator freeCount FieldDeclaration ReferenceType IndexOutput VariableDeclarator tvx FieldDeclaration ReferenceType IndexOutput VariableDeclarator tvd FieldDeclaration ReferenceType IndexOutput VariableDeclarator tvf FieldDeclaration BasicType int VariableDeclarator lastDocID ConstructorDeclaration Modifier public TermVectorsTermsWriter FormalParameter ReferenceType DocumentsWriter docWriter StatementExpression Assignment This MemberReference docWriter MemberReference docWriter = MethodDeclaration Modifier public Annotation Override ReferenceType TermsHashConsumerPerThread addThread FormalParameter ReferenceType TermsHashPerThread termsHashPerThread ReturnStatement ClassCreator ReferenceType TermVectorsTermsWriterPerThread MemberReference termsHashPerThread This MethodDeclaration Annotation Override createPostings FormalParameter ReferenceType RawPostingList postings FormalParameter BasicType int start FormalParameter BasicType int count LocalVariableDeclaration Modifier final BasicType int VariableDeclarator end BinaryOperation + MemberReference start MemberReference count ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference start BinaryOperation < MemberReference i MemberReference end MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i postings ClassCreator ReferenceType PostingList = End MethodDeclaration Modifier synchronized Annotation Override flush FormalParameter ReferenceType Map TypeArgument ReferenceType TermsHashConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType TermsHashConsumerPerField threadsAndFields FormalParameter Modifier final ReferenceType SegmentWriteState state IOException IfStatement BinaryOperation != MemberReference tvx Literal null BlockStatement IfStatement BinaryOperation > MemberReference state numDocsInStore Literal 0 StatementExpression MethodInvocation BinaryOperation - MemberReference state numDocsInStore MethodInvocation docWriter getDocStoreOffset fill End StatementExpression MethodInvocation tvx flush StatementExpression MethodInvocation tvd flush StatementExpression MethodInvocation tvf flush End ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType TermsHashConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType TermsHashConsumerPerField VariableDeclarator entry MethodInvocation threadsAndFields entrySet BlockStatement ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType TermsHashConsumerPerField VariableDeclarator field MethodInvocation entry getValue BlockStatement LocalVariableDeclaration ReferenceType TermVectorsTermsWriterPerField VariableDeclarator perField Cast ReferenceType TermVectorsTermsWriterPerField MemberReference field StatementExpression MethodInvocation perField.termsHashPerField reset StatementExpression MethodInvocation perField shrinkHash End LocalVariableDeclaration ReferenceType TermVectorsTermsWriterPerThread VariableDeclarator perThread Cast ReferenceType TermVectorsTermsWriterPerThread MethodInvocation entry getKey StatementExpression MethodInvocation perThread.termsHashPerThread Literal true reset End MethodDeclaration Modifier synchronized Annotation Override closeDocStore FormalParameter Modifier final ReferenceType SegmentWriteState state IOException IfStatement BinaryOperation != MemberReference tvx Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation - MemberReference state numDocsInStore MethodInvocation docWriter getDocStoreOffset fill StatementExpression MethodInvocation tvx close StatementExpression MethodInvocation tvf close StatementExpression MethodInvocation tvd close StatementExpression Assignment MemberReference tvx Literal null = AssertStatement BinaryOperation != MemberReference state docStoreSegmentName Literal null LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName BinaryOperation + BinaryOperation + MemberReference state docStoreSegmentName Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION IfStatement BinaryOperation != BinaryOperation + Literal 4 BinaryOperation * Cast BasicType long MemberReference state numDocsInStore Literal 16 MethodInvocation state.directory MemberReference fileName fileLength ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""after flush: tvx size mismatch: "" MemberReference state numDocsInStore Literal "" docs vs "" MethodInvocation state.directory MemberReference fileName fileLength Literal "" length in bytes of "" MemberReference fileName Literal "" file exists?="" MethodInvocation state.directory MemberReference fileName fileExists End StatementExpression MethodInvocation state.flushedFiles BinaryOperation + BinaryOperation + MemberReference state docStoreSegmentName Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION add StatementExpression MethodInvocation state.flushedFiles BinaryOperation + BinaryOperation + MemberReference state docStoreSegmentName Literal ""."" MemberReference IndexFileNames VECTORS_FIELDS_EXTENSION add StatementExpression MethodInvocation state.flushedFiles BinaryOperation + BinaryOperation + MemberReference state docStoreSegmentName Literal ""."" MemberReference IndexFileNames VECTORS_DOCUMENTS_EXTENSION add StatementExpression MethodInvocation docWriter BinaryOperation + BinaryOperation + MemberReference state docStoreSegmentName Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION removeOpenFile StatementExpression MethodInvocation docWriter BinaryOperation + BinaryOperation + MemberReference state docStoreSegmentName Literal ""."" MemberReference IndexFileNames VECTORS_FIELDS_EXTENSION removeOpenFile StatementExpression MethodInvocation docWriter BinaryOperation + BinaryOperation + MemberReference state docStoreSegmentName Literal ""."" MemberReference IndexFileNames VECTORS_DOCUMENTS_EXTENSION removeOpenFile StatementExpression Assignment MemberReference lastDocID Literal 0 = End FieldDeclaration BasicType int VariableDeclarator allocCount MethodDeclaration Modifier synchronized ReferenceType PerDoc getPerDoc IfStatement BinaryOperation == MemberReference freeCount Literal 0 BlockStatement StatementExpression MemberReference ++ allocCount IfStatement BinaryOperation > MemberReference allocCount MemberReference docFreeList length BlockStatement AssertStatement BinaryOperation == MemberReference allocCount BinaryOperation + Literal 1 MemberReference docFreeList length StatementExpression Assignment MemberReference docFreeList ArrayCreator ReferenceType PerDoc MethodInvocation ArrayUtil MemberReference allocCount getNextSize = End ReturnStatement ClassCreator ReferenceType PerDoc ReturnStatement MemberReference ArraySelector MemberReference -- freeCount docFreeList End MethodDeclaration /** Fills in no-term-vectors for all docs we haven't seen
   *  since the last doc that had term vectors. */ fill FormalParameter BasicType int docID IOException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator docStoreOffset MethodInvocation docWriter getDocStoreOffset LocalVariableDeclaration Modifier final BasicType int VariableDeclarator end BinaryOperation + MemberReference docID MemberReference docStoreOffset IfStatement BinaryOperation < MemberReference lastDocID MemberReference end BlockStatement LocalVariableDeclaration Modifier final BasicType long VariableDeclarator tvfPosition MethodInvocation tvf getFilePointer WhileStatement BinaryOperation < MemberReference lastDocID MemberReference end BlockStatement StatementExpression MethodInvocation tvx MethodInvocation tvd getFilePointer writeLong StatementExpression MethodInvocation tvd Literal 0 writeVInt StatementExpression MethodInvocation tvx MemberReference tvfPosition writeLong StatementExpression MemberReference ++ lastDocID End End MethodDeclaration Modifier synchronized initTermVectorsWriter IOException IfStatement BinaryOperation == MemberReference tvx Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator docStoreSegment MethodInvocation docWriter getDocStoreSegment IfStatement BinaryOperation == MemberReference docStoreSegment Literal null ReturnStatement End AssertStatement BinaryOperation != MemberReference docStoreSegment Literal null StatementExpression Assignment MemberReference tvx MethodInvocation docWriter.directory BinaryOperation + BinaryOperation + MemberReference docStoreSegment Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION createOutput = StatementExpression Assignment MemberReference tvd MethodInvocation docWriter.directory BinaryOperation + BinaryOperation + MemberReference docStoreSegment Literal ""."" MemberReference IndexFileNames VECTORS_DOCUMENTS_EXTENSION createOutput = StatementExpression Assignment MemberReference tvf MethodInvocation docWriter.directory BinaryOperation + BinaryOperation + MemberReference docStoreSegment Literal ""."" MemberReference IndexFileNames VECTORS_FIELDS_EXTENSION createOutput = StatementExpression MethodInvocation tvx MemberReference TermVectorsReader FORMAT_CURRENT writeInt StatementExpression MethodInvocation tvd MemberReference TermVectorsReader FORMAT_CURRENT writeInt StatementExpression MethodInvocation tvf MemberReference TermVectorsReader FORMAT_CURRENT writeInt StatementExpression MethodInvocation docWriter BinaryOperation + BinaryOperation + MemberReference docStoreSegment Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION addOpenFile StatementExpression MethodInvocation docWriter BinaryOperation + BinaryOperation + MemberReference docStoreSegment Literal ""."" MemberReference IndexFileNames VECTORS_FIELDS_EXTENSION addOpenFile StatementExpression MethodInvocation docWriter BinaryOperation + BinaryOperation + MemberReference docStoreSegment Literal ""."" MemberReference IndexFileNames VECTORS_DOCUMENTS_EXTENSION addOpenFile StatementExpression Assignment MemberReference lastDocID Literal 0 = End MethodDeclaration Modifier synchronized finishDocument FormalParameter ReferenceType PerDoc perDoc IOException AssertStatement MethodInvocation docWriter.writer Literal ""TermVectorsTermsWriter.finishDocument start"" testPoint StatementExpression MethodInvocation initTermVectorsWriter StatementExpression MethodInvocation MemberReference perDoc docID fill StatementExpression MethodInvocation tvx MethodInvocation tvd getFilePointer writeLong StatementExpression MethodInvocation tvx MethodInvocation tvf getFilePointer writeLong StatementExpression MethodInvocation tvd MemberReference perDoc numVectorFields writeVInt IfStatement BinaryOperation > MemberReference perDoc numVectorFields Literal 0 BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference perDoc numVectorFields MemberReference ++ i StatementExpression MethodInvocation tvd MemberReference perDoc ArraySelector MemberReference i fieldNumbers writeVInt End AssertStatement BinaryOperation == Literal 0 MemberReference perDoc ArraySelector Literal 0 fieldPointers LocalVariableDeclaration BasicType long VariableDeclarator lastPos MemberReference perDoc ArraySelector Literal 0 fieldPointers ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference perDoc numVectorFields MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator pos MemberReference perDoc ArraySelector MemberReference i fieldPointers StatementExpression MethodInvocation tvd BinaryOperation - MemberReference pos MemberReference lastPos writeVLong StatementExpression Assignment MemberReference lastPos MemberReference pos = End StatementExpression MethodInvocation perDoc.tvf MemberReference tvf writeTo StatementExpression MethodInvocation perDoc.tvf reset StatementExpression Assignment MemberReference perDoc numVectorFields Literal 0 = End AssertStatement BinaryOperation == MemberReference lastDocID BinaryOperation + MemberReference perDoc docID MethodInvocation docWriter getDocStoreOffset StatementExpression MemberReference ++ lastDocID StatementExpression MethodInvocation MemberReference perDoc free AssertStatement MethodInvocation docWriter.writer Literal ""TermVectorsTermsWriter.finishDocument end"" testPoint MethodDeclaration Modifier public BasicType boolean freeRAM ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override abort IfStatement BinaryOperation != MemberReference tvx Literal null BlockStatement TryStatement StatementExpression MethodInvocation tvx close CatchClause CatchClauseParameter Throwable t StatementExpression Assignment MemberReference tvx Literal null = End IfStatement BinaryOperation != MemberReference tvd Literal null BlockStatement TryStatement StatementExpression MethodInvocation tvd close CatchClause CatchClauseParameter Throwable t StatementExpression Assignment MemberReference tvd Literal null = End IfStatement BinaryOperation != MemberReference tvf Literal null BlockStatement TryStatement StatementExpression MethodInvocation tvf close CatchClause CatchClauseParameter Throwable t StatementExpression Assignment MemberReference tvf Literal null = End StatementExpression Assignment MemberReference lastDocID Literal 0 = MethodDeclaration Modifier synchronized free FormalParameter ReferenceType PerDoc doc AssertStatement BinaryOperation < MemberReference freeCount MemberReference docFreeList length StatementExpression Assignment MemberReference ArraySelector MemberReference ++ freeCount docFreeList MemberReference doc = ClassDeclaration PerDoc FieldDeclaration ReferenceType RAMOutputStream VariableDeclarator tvf ClassCreator ReferenceType RAMOutputStream FieldDeclaration BasicType int VariableDeclarator numVectorFields FieldDeclaration BasicType int VariableDeclarator fieldNumbers ArrayCreator BasicType int Literal 1 FieldDeclaration BasicType long VariableDeclarator fieldPointers ArrayCreator BasicType long Literal 1 MethodDeclaration reset StatementExpression MethodInvocation tvf reset StatementExpression Assignment MemberReference numVectorFields Literal 0 = MethodDeclaration Annotation Override abort StatementExpression MethodInvocation reset StatementExpression MethodInvocation This free MethodDeclaration addField FormalParameter Modifier final BasicType int fieldNumber IfStatement BinaryOperation == MemberReference numVectorFields MemberReference fieldNumbers length BlockStatement StatementExpression Assignment MemberReference fieldNumbers MethodInvocation ArrayUtil MemberReference fieldNumbers grow = StatementExpression Assignment MemberReference fieldPointers MethodInvocation ArrayUtil MemberReference fieldPointers grow = End StatementExpression Assignment MemberReference ArraySelector MemberReference numVectorFields fieldNumbers MemberReference fieldNumber = StatementExpression Assignment MemberReference ArraySelector MemberReference numVectorFields fieldPointers MethodInvocation tvf getFilePointer = StatementExpression MemberReference ++ numVectorFields MethodDeclaration Modifier public Annotation Override BasicType long sizeInBytes ReturnStatement MethodInvocation tvf sizeInBytes MethodDeclaration Modifier public Annotation Override finish IOException StatementExpression MethodInvocation This finishDocument ReferenceType DocumentsWriter ReferenceType DocWriter ClassDeclaration Modifier final static PostingList FieldDeclaration BasicType int VariableDeclarator freq FieldDeclaration BasicType int VariableDeclarator lastOffset FieldDeclaration BasicType int VariableDeclarator lastPosition ReferenceType RawPostingList MethodDeclaration Annotation Override BasicType int bytesPerPosting ReturnStatement BinaryOperation + MemberReference RawPostingList BYTES_SIZE BinaryOperation * Literal 3 MemberReference DocumentsWriter INT_NUM_BYTE ReferenceType TermsHashConsumer",0
802,802,,1
760,760,,1
470,470,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.processors Import java.util.List Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.nodes.SlopQueryNode Import org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode Import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl Import org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttribute Import org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode ClassDeclaration Modifier public /**
 * This processor verifies if the attribute {@link DefaultPhraseSlopAttribute}
 * is defined in the {@link QueryConfigHandler}. If it is, it looks for every
 * {@link TokenizedPhraseQueryNode} and {@link MultiPhraseQueryNode} that does
 * not have any {@link SlopQueryNode} applied to it and creates an
 * {@link SlopQueryNode} and apply to it. The new {@link SlopQueryNode} has the
 * same slop value defined in the attribute. <br/>
 * 
 * @see SlopQueryNode
 * @see DefaultPhraseSlopAttribute
 */ DefaultPhraseSlopQueryNodeProcessor FieldDeclaration Modifier private BasicType boolean VariableDeclarator processChildren Literal true FieldDeclaration Modifier private BasicType int VariableDeclarator defaultPhraseSlop ConstructorDeclaration Modifier public DefaultPhraseSlopQueryNodeProcessor MethodDeclaration Modifier public Annotation Override ReferenceType QueryNode process FormalParameter ReferenceType QueryNode queryTree QueryNodeException LocalVariableDeclaration ReferenceType QueryConfigHandler VariableDeclarator queryConfig MethodInvocation getQueryConfigHandler IfStatement BinaryOperation != MemberReference queryConfig Literal null BlockStatement IfStatement MethodInvocation queryConfig ClassReference ReferenceType DefaultPhraseSlopAttribute hasAttribute BlockStatement StatementExpression Assignment This MemberReference defaultPhraseSlop MethodInvocation queryConfig MethodInvocation getDefaultPhraseSlop ClassReference ReferenceType DefaultPhraseSlopAttribute getAttribute = ReturnStatement SuperMethodInvocation MemberReference queryTree process End End ReturnStatement MemberReference queryTree MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode postProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException IfStatement BinaryOperation || BinaryOperation instanceof MemberReference node ReferenceType TokenizedPhraseQueryNode BinaryOperation instanceof MemberReference node ReferenceType MultiPhraseQueryNode BlockStatement ReturnStatement ClassCreator ReferenceType SlopQueryNode MemberReference node This MemberReference defaultPhraseSlop End ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode preProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException IfStatement BinaryOperation instanceof MemberReference node ReferenceType SlopQueryNode BlockStatement StatementExpression Assignment This MemberReference processChildren Literal false = End ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override processChildren FormalParameter ReferenceType QueryNode queryTree QueryNodeException IfStatement This MemberReference processChildren BlockStatement StatementExpression SuperMethodInvocation MemberReference queryTree processChildren BlockStatement StatementExpression Assignment This MemberReference processChildren Literal true = End MethodDeclaration Modifier protected Annotation Override ReferenceType List TypeArgument ReferenceType QueryNode setChildrenOrder FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children QueryNodeException ReturnStatement MemberReference children ReferenceType QueryNodeProcessorImpl",1
116,116,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.miscellaneous Import java.io.IOException Import java.io.Reader Import java.io.StringReader Import java.util.Arrays Import java.util.Locale Import java.util.Set Import java.util.regex.Matcher Import java.util.regex.Pattern Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.CharArraySet Import org.apache.lucene.analysis.StopAnalyzer Import org.apache.lucene.analysis.StopFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.util.Version ClassDeclaration Modifier public /**
 * Efficient Lucene analyzer/tokenizer that preferably operates on a String rather than a
 * {@link java.io.Reader}, that can flexibly separate text into terms via a regular expression {@link Pattern}
 * (with behaviour identical to {@link String#split(String)}),
 * and that combines the functionality of
 * {@link org.apache.lucene.analysis.LetterTokenizer},
 * {@link org.apache.lucene.analysis.LowerCaseTokenizer},
 * {@link org.apache.lucene.analysis.WhitespaceTokenizer},
 * {@link org.apache.lucene.analysis.StopFilter} into a single efficient
 * multi-purpose class.
 * <p>
 * If you are unsure how exactly a regular expression should look like, consider 
 * prototyping by simply trying various expressions on some test texts via
 * {@link String#split(String)}. Once you are satisfied, give that regex to 
 * PatternAnalyzer. Also see <a target=""_blank"" 
 * href=""http://java.sun.com/docs/books/tutorial/extra/regex/"">Java Regular Expression Tutorial</a>.
 * <p>
 * This class can be considerably faster than the ""normal"" Lucene tokenizers. 
 * It can also serve as a building block in a compound Lucene
 * {@link org.apache.lucene.analysis.TokenFilter} chain. For example as in this 
 * stemming example:
 * <pre>
 * PatternAnalyzer pat = ...
 * TokenStream tokenStream = new SnowballFilter(
 *     pat.tokenStream(""content"", ""James is running round in the woods""), 
 *     ""English""));
 * </pre>
 *
 */ PatternAnalyzer FieldDeclaration /** <code>""\\W+""</code>; Divides text at non-letters (NOT Character.isLetter(c)) */ Modifier public final static ReferenceType Pattern VariableDeclarator NON_WORD_PATTERN MethodInvocation Pattern Literal ""\\W+"" compile FieldDeclaration /** <code>""\\s+""</code>; Divides text at whitespaces (Character.isWhitespace(c)) */ Modifier public final static ReferenceType Pattern VariableDeclarator WHITESPACE_PATTERN MethodInvocation Pattern Literal ""\\s+"" compile FieldDeclaration Modifier private final static ReferenceType CharArraySet VariableDeclarator EXTENDED_ENGLISH_STOP_WORDS MethodInvocation CharArraySet ClassCreator ReferenceType CharArraySet MethodInvocation Arrays Literal ""a"" Literal ""about"" Literal ""above"" Literal ""across"" Literal ""adj"" Literal ""after"" Literal ""afterwards"" Literal ""again"" Literal ""against"" Literal ""albeit"" Literal ""all"" Literal ""almost"" Literal ""alone"" Literal ""along"" Literal ""already"" Literal ""also"" Literal ""although"" Literal ""always"" Literal ""among"" Literal ""amongst"" Literal ""an"" Literal ""and"" Literal ""another"" Literal ""any"" Literal ""anyhow"" Literal ""anyone"" Literal ""anything"" Literal ""anywhere"" Literal ""are"" Literal ""around"" Literal ""as"" Literal ""at"" Literal ""be"" Literal ""became"" Literal ""because"" Literal ""become"" Literal ""becomes"" Literal ""becoming"" Literal ""been"" Literal ""before"" Literal ""beforehand"" Literal ""behind"" Literal ""being"" Literal ""below"" Literal ""beside"" Literal ""besides"" Literal ""between"" Literal ""beyond"" Literal ""both"" Literal ""but"" Literal ""by"" Literal ""can"" Literal ""cannot"" Literal ""co"" Literal ""could"" Literal ""down"" Literal ""during"" Literal ""each"" Literal ""eg"" Literal ""either"" Literal ""else"" Literal ""elsewhere"" Literal ""enough"" Literal ""etc"" Literal ""even"" Literal ""ever"" Literal ""every"" Literal ""everyone"" Literal ""everything"" Literal ""everywhere"" Literal ""except"" Literal ""few"" Literal ""first"" Literal ""for"" Literal ""former"" Literal ""formerly"" Literal ""from"" Literal ""further"" Literal ""had"" Literal ""has"" Literal ""have"" Literal ""he"" Literal ""hence"" Literal ""her"" Literal ""here"" Literal ""hereafter"" Literal ""hereby"" Literal ""herein"" Literal ""hereupon"" Literal ""hers"" Literal ""herself"" Literal ""him"" Literal ""himself"" Literal ""his"" Literal ""how"" Literal ""however"" Literal ""i"" Literal ""ie"" Literal ""if"" Literal ""in"" Literal ""inc"" Literal ""indeed"" Literal ""into"" Literal ""is"" Literal ""it"" Literal ""its"" Literal ""itself"" Literal ""last"" Literal ""latter"" Literal ""latterly"" Literal ""least"" Literal ""less"" Literal ""ltd"" Literal ""many"" Literal ""may"" Literal ""me"" Literal ""meanwhile"" Literal ""might"" Literal ""more"" Literal ""moreover"" Literal ""most"" Literal ""mostly"" Literal ""much"" Literal ""must"" Literal ""my"" Literal ""myself"" Literal ""namely"" Literal ""neither"" Literal ""never"" Literal ""nevertheless"" Literal ""next"" Literal ""no"" Literal ""nobody"" Literal ""none"" Literal ""noone"" Literal ""nor"" Literal ""not"" Literal ""nothing"" Literal ""now"" Literal ""nowhere"" Literal ""of"" Literal ""off"" Literal ""often"" Literal ""on"" Literal ""once one"" Literal ""only"" Literal ""onto"" Literal ""or"" Literal ""other"" Literal ""others"" Literal ""otherwise"" Literal ""our"" Literal ""ours"" Literal ""ourselves"" Literal ""out"" Literal ""over"" Literal ""own"" Literal ""per"" Literal ""perhaps"" Literal ""rather"" Literal ""s"" Literal ""same"" Literal ""seem"" Literal ""seemed"" Literal ""seeming"" Literal ""seems"" Literal ""several"" Literal ""she"" Literal ""should"" Literal ""since"" Literal ""so"" Literal ""some"" Literal ""somehow"" Literal ""someone"" Literal ""something"" Literal ""sometime"" Literal ""sometimes"" Literal ""somewhere"" Literal ""still"" Literal ""such"" Literal ""t"" Literal ""than"" Literal ""that"" Literal ""the"" Literal ""their"" Literal ""them"" Literal ""themselves"" Literal ""then"" Literal ""thence"" Literal ""there"" Literal ""thereafter"" Literal ""thereby"" Literal ""therefor"" Literal ""therein"" Literal ""thereupon"" Literal ""these"" Literal ""they"" Literal ""this"" Literal ""those"" Literal ""though"" Literal ""through"" Literal ""throughout"" Literal ""thru"" Literal ""thus"" Literal ""to"" Literal ""together"" Literal ""too"" Literal ""toward"" Literal ""towards"" Literal ""under"" Literal ""until"" Literal ""up"" Literal ""upon"" Literal ""us"" Literal ""very"" Literal ""via"" Literal ""was"" Literal ""we"" Literal ""well"" Literal ""were"" Literal ""what"" Literal ""whatever"" Literal ""whatsoever"" Literal ""when"" Literal ""whence"" Literal ""whenever"" Literal ""whensoever"" Literal ""where"" Literal ""whereafter"" Literal ""whereas"" Literal ""whereat"" Literal ""whereby"" Literal ""wherefrom"" Literal ""wherein"" Literal ""whereinto"" Literal ""whereof"" Literal ""whereon"" Literal ""whereto"" Literal ""whereunto"" Literal ""whereupon"" Literal ""wherever"" Literal ""wherewith"" Literal ""whether"" Literal ""which"" Literal ""whichever"" Literal ""whichsoever"" Literal ""while"" Literal ""whilst"" Literal ""whither"" Literal ""who"" Literal ""whoever"" Literal ""whole"" Literal ""whom"" Literal ""whomever"" Literal ""whomsoever"" Literal ""whose"" Literal ""whosoever"" Literal ""why"" Literal ""will"" Literal ""with"" Literal ""within"" Literal ""without"" Literal ""would"" Literal ""xsubj"" Literal ""xcal"" Literal ""xauthor"" Literal ""xother "" Literal ""xnote"" Literal ""yet"" Literal ""you"" Literal ""your"" Literal ""yours"" Literal ""yourself"" Literal ""yourselves"" asList Literal true unmodifiableSet FieldDeclaration /**
   * A lower-casing word analyzer with English stop words (can be shared
   * freely across threads without harm); global per class loader.
   */ Modifier public final static ReferenceType PatternAnalyzer VariableDeclarator DEFAULT_ANALYZER ClassCreator ReferenceType PatternAnalyzer MemberReference Version LUCENE_CURRENT MemberReference NON_WORD_PATTERN Literal true MemberReference StopAnalyzer ENGLISH_STOP_WORDS_SET FieldDeclaration /**
   * A lower-casing word analyzer with <b>extended </b> English stop words
   * (can be shared freely across threads without harm); global per class
   * loader. The stop words are borrowed from
   * http://thomas.loc.gov/home/stopwords.html, see
   * http://thomas.loc.gov/home/all.about.inquery.html
   */ Modifier public final static ReferenceType PatternAnalyzer VariableDeclarator EXTENDED_ANALYZER ClassCreator ReferenceType PatternAnalyzer MemberReference Version LUCENE_CURRENT MemberReference NON_WORD_PATTERN Literal true MemberReference EXTENDED_ENGLISH_STOP_WORDS FieldDeclaration Modifier private final ReferenceType Pattern VariableDeclarator pattern FieldDeclaration Modifier private final BasicType boolean VariableDeclarator toLowerCase FieldDeclaration Modifier private final ReferenceType Set TypeArgument ? VariableDeclarator stopWords FieldDeclaration Modifier private final ReferenceType Version VariableDeclarator matchVersion ConstructorDeclaration Modifier public /**
   * Constructs a new instance with the given parameters.
   * 
   * @param matchVersion If >= {@link Version#LUCENE_29}, StopFilter.enablePositionIncrement is set to true
   * @param pattern
   *            a regular expression delimiting tokens
   * @param toLowerCase
   *            if <code>true</code> returns tokens after applying
   *            String.toLowerCase()
   * @param stopWords
   *            if non-null, ignores all tokens that are contained in the
   *            given stop set (after previously having applied toLowerCase()
   *            if applicable). For example, created via
   *            {@link StopFilter#makeStopSet(String[])}and/or
   *            {@link org.apache.lucene.analysis.WordlistLoader}as in
   *            <code>WordlistLoader.getWordSet(new File(""samples/fulltext/stopwords.txt"")</code>
   *            or <a href=""http://www.unine.ch/info/clef/"">other stop words
   *            lists </a>.
   */ PatternAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Pattern pattern FormalParameter BasicType boolean toLowerCase FormalParameter ReferenceType Set TypeArgument ? stopWords IfStatement BinaryOperation == MemberReference pattern Literal null ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""pattern must not be null"" End IfStatement MethodInvocation MemberReference NON_WORD_PATTERN MemberReference pattern eqPattern StatementExpression Assignment MemberReference pattern MemberReference NON_WORD_PATTERN = IfStatement MethodInvocation MemberReference WHITESPACE_PATTERN MemberReference pattern eqPattern StatementExpression Assignment MemberReference pattern MemberReference WHITESPACE_PATTERN = End End IfStatement BinaryOperation && BinaryOperation != MemberReference stopWords Literal null BinaryOperation == MethodInvocation stopWords size Literal 0 StatementExpression Assignment MemberReference stopWords Literal null = End StatementExpression Assignment This MemberReference pattern MemberReference pattern = StatementExpression Assignment This MemberReference toLowerCase MemberReference toLowerCase = StatementExpression Assignment This MemberReference stopWords MemberReference stopWords = StatementExpression Assignment This MemberReference matchVersion MemberReference matchVersion = MethodDeclaration /**
   * Creates a token stream that tokenizes the given string into token terms
   * (aka words).
   * 
   * @param fieldName
   *            the name of the field to tokenize (currently ignored).
   * @param text
   *            the string to tokenize
   * @return a new token stream
   */ Modifier public ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType String text IfStatement BinaryOperation == MemberReference text Literal null ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""text must not be null"" End LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator stream IfStatement BinaryOperation == MemberReference pattern MemberReference NON_WORD_PATTERN BlockStatement StatementExpression Assignment MemberReference stream ClassCreator ReferenceType FastStringTokenizer MemberReference text Literal true MemberReference toLowerCase MemberReference stopWords = IfStatement BinaryOperation == MemberReference pattern MemberReference WHITESPACE_PATTERN BlockStatement StatementExpression Assignment MemberReference stream ClassCreator ReferenceType FastStringTokenizer MemberReference text Literal false MemberReference toLowerCase MemberReference stopWords = BlockStatement StatementExpression Assignment MemberReference stream ClassCreator ReferenceType PatternTokenizer MemberReference text MemberReference pattern MemberReference toLowerCase = IfStatement BinaryOperation != MemberReference stopWords Literal null StatementExpression Assignment MemberReference stream ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference stream MemberReference stopWords = End End End ReturnStatement MemberReference stream MethodDeclaration /**
   * Creates a token stream that tokenizes all the text in the given Reader;
   * This implementation forwards to <code>tokenStream(String, String)</code> and is
   * less efficient than <code>tokenStream(String, String)</code>.
   * 
   * @param fieldName
   *            the name of the field to tokenize (currently ignored).
   * @param reader
   *            the reader delivering the text
   * @return a new token stream
   */ Modifier public Annotation Override ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader IfStatement BinaryOperation instanceof MemberReference reader ReferenceType FastStringReader BlockStatement ReturnStatement MethodInvocation MemberReference fieldName Cast ReferenceType FastStringReader MemberReference reader tokenStream End TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation MemberReference reader toString ReturnStatement MethodInvocation MemberReference fieldName MemberReference text tokenStream CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e MethodDeclaration /**
   * Indicates whether some other object is ""equal to"" this one.
   * 
   * @param other
   *            the reference object with which to compare.
   * @return true if equal, false otherwise
   */ Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object other IfStatement BinaryOperation == This MemberReference other ReturnStatement Literal true End IfStatement BinaryOperation && BinaryOperation == This MemberReference DEFAULT_ANALYZER BinaryOperation == MemberReference other MemberReference EXTENDED_ANALYZER ReturnStatement Literal false End IfStatement BinaryOperation && BinaryOperation == MemberReference other MemberReference DEFAULT_ANALYZER BinaryOperation == This MemberReference EXTENDED_ANALYZER ReturnStatement Literal false End IfStatement BinaryOperation instanceof MemberReference other ReferenceType PatternAnalyzer BlockStatement LocalVariableDeclaration ReferenceType PatternAnalyzer VariableDeclarator p2 Cast ReferenceType PatternAnalyzer MemberReference other ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference toLowerCase MemberReference p2 toLowerCase MethodInvocation MemberReference pattern MemberReference p2 pattern eqPattern MethodInvocation MemberReference stopWords MemberReference p2 stopWords eq End ReturnStatement Literal false MethodDeclaration /**
   * Returns a hash code value for the object.
   * 
   * @return the hash code.
   */ Modifier public Annotation Override BasicType int hashCode IfStatement BinaryOperation == This MemberReference DEFAULT_ANALYZER ReturnStatement Literal - 1218418418 End IfStatement BinaryOperation == This MemberReference EXTENDED_ANALYZER ReturnStatement Literal 1303507063 End LocalVariableDeclaration BasicType int VariableDeclarator h Literal 1 StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 31 MemberReference h MethodInvocation pattern MethodInvocation hashCode pattern = StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 31 MemberReference h MethodInvocation pattern flags = StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 31 MemberReference h TernaryExpression MemberReference toLowerCase Literal 1231 Literal 1237 = StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 31 MemberReference h TernaryExpression BinaryOperation != MemberReference stopWords Literal null MethodInvocation stopWords hashCode Literal 0 = ReturnStatement MemberReference h MethodDeclaration /** equality where o1 and/or o2 can be null */ Modifier private static BasicType boolean eq FormalParameter ReferenceType Object o1 FormalParameter ReferenceType Object o2 ReturnStatement BinaryOperation || BinaryOperation == MemberReference o1 MemberReference o2 TernaryExpression BinaryOperation != MemberReference o1 Literal null MethodInvocation o1 MemberReference o2 equals Literal false MethodDeclaration /** assumes p1 and p2 are not null */ Modifier private static BasicType boolean eqPattern FormalParameter ReferenceType Pattern p1 FormalParameter ReferenceType Pattern p2 ReturnStatement BinaryOperation || BinaryOperation == MemberReference p1 MemberReference p2 BinaryOperation && BinaryOperation == MethodInvocation p1 flags MethodInvocation p2 flags MethodInvocation p1 MethodInvocation MethodInvocation p2 pattern equals pattern MethodDeclaration /**
   * Reads until end-of-stream and returns all read chars, finally closes the stream.
   * 
   * @param input the input stream
   * @throws IOException if an I/O error occurs while reading the stream
   */ Modifier private static ReferenceType String toString FormalParameter ReferenceType Reader input IOException TryStatement LocalVariableDeclaration BasicType int VariableDeclarator len Literal 256 LocalVariableDeclaration BasicType char VariableDeclarator buffer ArrayCreator BasicType char MemberReference len LocalVariableDeclaration BasicType char VariableDeclarator output ArrayCreator BasicType char MemberReference len StatementExpression Assignment MemberReference len Literal 0 = LocalVariableDeclaration BasicType int VariableDeclarator n WhileStatement BinaryOperation >= Assignment MemberReference n MethodInvocation input MemberReference buffer read = Literal 0 BlockStatement IfStatement BinaryOperation > BinaryOperation + MemberReference len MemberReference n MemberReference output length BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator tmp ArrayCreator BasicType char MethodInvocation Math BinaryOperation << MemberReference output length Literal 1 BinaryOperation + MemberReference len MemberReference n max StatementExpression MethodInvocation System MemberReference output Literal 0 MemberReference tmp Literal 0 MemberReference len arraycopy StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference tmp MemberReference len MemberReference n arraycopy StatementExpression Assignment MemberReference buffer MemberReference output = StatementExpression Assignment MemberReference output MemberReference tmp = BlockStatement StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference output MemberReference len MemberReference n arraycopy End StatementExpression Assignment MemberReference len MemberReference n += End ReturnStatement ClassCreator ReferenceType String MemberReference output Literal 0 MemberReference len IfStatement BinaryOperation != MemberReference input Literal null StatementExpression MethodInvocation input close End ClassDeclaration Modifier private final static /**
   * The work horse; performance isn't fantastic, but it's not nearly as bad
   * as one might think - kudos to the Sun regex developers.
   */ PatternTokenizer FieldDeclaration Modifier private final ReferenceType String VariableDeclarator str FieldDeclaration Modifier private final BasicType boolean VariableDeclarator toLowerCase FieldDeclaration Modifier private ReferenceType Matcher VariableDeclarator matcher FieldDeclaration Modifier private BasicType int VariableDeclarator pos Literal 0 FieldDeclaration Modifier private final static ReferenceType Locale VariableDeclarator locale MethodInvocation Locale getDefault FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute ConstructorDeclaration Modifier public PatternTokenizer FormalParameter ReferenceType String str FormalParameter ReferenceType Pattern pattern FormalParameter BasicType boolean toLowerCase StatementExpression Assignment This MemberReference str MemberReference str = StatementExpression Assignment This MemberReference matcher MethodInvocation pattern MemberReference str matcher = StatementExpression Assignment This MemberReference toLowerCase MemberReference toLowerCase = MethodDeclaration Modifier public final Annotation Override BasicType boolean incrementToken IfStatement BinaryOperation == MemberReference matcher Literal null ReturnStatement Literal false End StatementExpression MethodInvocation clearAttributes WhileStatement Literal true BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator start MemberReference pos LocalVariableDeclaration BasicType int VariableDeclarator end LocalVariableDeclaration BasicType boolean VariableDeclarator isMatch MethodInvocation matcher find IfStatement MemberReference isMatch BlockStatement StatementExpression Assignment MemberReference end MethodInvocation matcher start = StatementExpression Assignment MemberReference pos MethodInvocation matcher end = BlockStatement StatementExpression Assignment MemberReference end MethodInvocation str length = StatementExpression Assignment MemberReference matcher Literal null = End IfStatement BinaryOperation != MemberReference start MemberReference end BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation str MemberReference start MemberReference end substring IfStatement MemberReference toLowerCase StatementExpression Assignment MemberReference text MethodInvocation text MemberReference locale toLowerCase = End StatementExpression MethodInvocation termAtt MemberReference text setTermBuffer StatementExpression MethodInvocation offsetAtt MemberReference start MemberReference end setOffset ReturnStatement Literal true End IfStatement MemberReference ! isMatch ReturnStatement Literal false End End MethodDeclaration Modifier public final Annotation Override end LocalVariableDeclaration Modifier final BasicType int VariableDeclarator finalOffset MethodInvocation str length StatementExpression This MemberReference offsetAtt MethodInvocation MemberReference finalOffset MemberReference finalOffset setOffset ReferenceType TokenStream ClassDeclaration Modifier private final static /**
   * Special-case class for best performance in common cases; this class is
   * otherwise unnecessary.
   */ FastStringTokenizer FieldDeclaration Modifier private final ReferenceType String VariableDeclarator str FieldDeclaration Modifier private BasicType int VariableDeclarator pos FieldDeclaration Modifier private final BasicType boolean VariableDeclarator isLetter FieldDeclaration Modifier private final BasicType boolean VariableDeclarator toLowerCase FieldDeclaration Modifier private final ReferenceType Set VariableDeclarator stopWords FieldDeclaration Modifier private final static ReferenceType Locale VariableDeclarator locale MethodInvocation Locale getDefault FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute ConstructorDeclaration Modifier public FastStringTokenizer FormalParameter ReferenceType String str FormalParameter BasicType boolean isLetter FormalParameter BasicType boolean toLowerCase FormalParameter ReferenceType Set stopWords StatementExpression Assignment This MemberReference str MemberReference str = StatementExpression Assignment This MemberReference isLetter MemberReference isLetter = StatementExpression Assignment This MemberReference toLowerCase MemberReference toLowerCase = StatementExpression Assignment This MemberReference stopWords MemberReference stopWords = MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken StatementExpression MethodInvocation clearAttributes LocalVariableDeclaration ReferenceType String VariableDeclarator s MemberReference str LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation s length LocalVariableDeclaration BasicType int VariableDeclarator i MemberReference pos LocalVariableDeclaration BasicType boolean VariableDeclarator letter MemberReference isLetter LocalVariableDeclaration BasicType int VariableDeclarator start Literal 0 LocalVariableDeclaration ReferenceType String VariableDeclarator text DoStatement BinaryOperation && BinaryOperation != MemberReference text Literal null MethodInvocation MemberReference text isStopWord BlockStatement StatementExpression Assignment MemberReference text Literal null = WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference len MethodInvocation ! MethodInvocation s MemberReference i charAt MemberReference letter isTokenChar BlockStatement StatementExpression MemberReference ++ i End IfStatement BinaryOperation < MemberReference i MemberReference len BlockStatement StatementExpression Assignment MemberReference start MemberReference i = WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference len MethodInvocation MethodInvocation s MemberReference i charAt MemberReference letter isTokenChar BlockStatement StatementExpression MemberReference ++ i End StatementExpression Assignment MemberReference text MethodInvocation s MemberReference start MemberReference i substring = IfStatement MemberReference toLowerCase StatementExpression Assignment MemberReference text MethodInvocation text MemberReference locale toLowerCase = End End End StatementExpression Assignment MemberReference pos MemberReference i = IfStatement BinaryOperation == MemberReference text Literal null BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation termAtt MemberReference text setTermBuffer StatementExpression MethodInvocation offsetAtt MemberReference start MemberReference i setOffset ReturnStatement Literal true MethodDeclaration Modifier public final Annotation Override end LocalVariableDeclaration Modifier final BasicType int VariableDeclarator finalOffset MethodInvocation str length StatementExpression This MemberReference offsetAtt MethodInvocation MemberReference finalOffset MemberReference finalOffset setOffset MethodDeclaration Modifier private BasicType boolean isTokenChar FormalParameter BasicType char c FormalParameter BasicType boolean isLetter ReturnStatement TernaryExpression MemberReference isLetter MethodInvocation Character MemberReference c isLetter MethodInvocation ! Character MemberReference c isWhitespace MethodDeclaration Modifier private BasicType boolean isStopWord FormalParameter ReferenceType String text ReturnStatement BinaryOperation && BinaryOperation != MemberReference stopWords Literal null MethodInvocation stopWords MemberReference text contains ReferenceType TokenStream ClassDeclaration Modifier final static /**
   * A StringReader that exposes it's contained string for fast direct access.
   * Might make sense to generalize this to CharSequence and make it public?
   */ FastStringReader FieldDeclaration Modifier private final ReferenceType String VariableDeclarator s ConstructorDeclaration FastStringReader FormalParameter ReferenceType String s StatementExpression SuperConstructorInvocation MemberReference s StatementExpression Assignment This MemberReference s MemberReference s = MethodDeclaration ReferenceType String getString ReturnStatement MemberReference s ReferenceType StringReader ReferenceType Analyzer",0
508,508,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geometry ClassDeclaration Modifier public /**
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ FloatLatLng FieldDeclaration Modifier private BasicType double VariableDeclarator lat FieldDeclaration Modifier private BasicType double VariableDeclarator lng FieldDeclaration Modifier private BasicType boolean VariableDeclarator normalized ConstructorDeclaration Modifier public FloatLatLng FormalParameter BasicType double lat FormalParameter BasicType double lng IfStatement BinaryOperation || BinaryOperation > MemberReference lat Literal 90.0 BinaryOperation < MemberReference lat Literal - 90.0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Illegal latitude value "" MemberReference lat End StatementExpression Assignment This MemberReference lat MemberReference lat = StatementExpression Assignment This MemberReference lng MemberReference lng = ConstructorDeclaration Modifier public FloatLatLng FormalParameter ReferenceType LatLng ll StatementExpression Assignment This MemberReference lat MethodInvocation ll getLat = StatementExpression Assignment This MemberReference lng MethodInvocation ll getLng = MethodDeclaration Modifier public Annotation Override ReferenceType LatLng copy ReturnStatement ClassCreator ReferenceType FloatLatLng This MethodDeclaration Modifier public Annotation Override BasicType int getFixedLat ReturnStatement MethodInvocation FixedLatLng This MemberReference lat doubleToFixed MethodDeclaration Modifier public Annotation Override BasicType int getFixedLng ReturnStatement MethodInvocation FixedLatLng This MemberReference lng doubleToFixed MethodDeclaration Modifier public Annotation Override BasicType double getLat ReturnStatement This MemberReference lat MethodDeclaration Modifier public Annotation Override BasicType double getLng ReturnStatement This MemberReference lng MethodDeclaration Modifier public Annotation Override BasicType boolean isFixedPoint ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override ReferenceType FixedLatLng toFixed ReturnStatement ClassCreator ReferenceType FixedLatLng This MethodDeclaration Modifier public Annotation Override ReferenceType FloatLatLng toFloat ReturnStatement This MethodDeclaration Modifier public Annotation Override BasicType boolean isNormalized ReturnStatement BinaryOperation || MemberReference normalized BinaryOperation && BinaryOperation >= MemberReference lng Literal - 180 BinaryOperation <= MemberReference lng Literal 180 MethodDeclaration Modifier public Annotation Override ReferenceType LatLng normalize IfStatement MethodInvocation isNormalized ReturnStatement This End LocalVariableDeclaration BasicType double VariableDeclarator delta Literal 0 IfStatement BinaryOperation < MemberReference lng Literal 0 StatementExpression Assignment MemberReference delta Literal 360 = End IfStatement BinaryOperation >= MemberReference lng Literal 0 StatementExpression Assignment MemberReference delta Literal - 360 = End LocalVariableDeclaration BasicType double VariableDeclarator newLng MemberReference lng WhileStatement BinaryOperation || BinaryOperation <= MemberReference newLng Literal - 180 BinaryOperation >= MemberReference newLng Literal 180 BlockStatement StatementExpression Assignment MemberReference newLng MemberReference delta += End LocalVariableDeclaration ReferenceType FloatLatLng VariableDeclarator ret ClassCreator ReferenceType FloatLatLng MemberReference lat MemberReference newLng StatementExpression Assignment MemberReference ret normalized Literal true = ReturnStatement MemberReference ret MethodDeclaration Modifier public Annotation Override ReferenceType LatLng calculateMidpoint FormalParameter ReferenceType LatLng other ReturnStatement ClassCreator ReferenceType FloatLatLng BinaryOperation / BinaryOperation + MemberReference lat MethodInvocation other getLat Literal 2.0 BinaryOperation / BinaryOperation + MemberReference lng MethodInvocation other getLng Literal 2.0 MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType long VariableDeclarator temp StatementExpression Assignment MemberReference temp MethodInvocation Double MemberReference lat doubleToLongBits = LocalVariableDeclaration BasicType int VariableDeclarator result BinaryOperation + MemberReference prime Cast BasicType int BinaryOperation ^ MemberReference temp BinaryOperation >>> MemberReference temp Literal 32 StatementExpression Assignment MemberReference temp MethodInvocation Double MemberReference lng doubleToLongBits = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result Cast BasicType int BinaryOperation ^ MemberReference temp BinaryOperation >>> MemberReference temp Literal 32 = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression MemberReference normalized Literal 1231 Literal 1237 = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType FloatLatLng VariableDeclarator other Cast ReferenceType FloatLatLng MemberReference obj IfStatement BinaryOperation != MethodInvocation Double MemberReference lat doubleToLongBits MethodInvocation Double MemberReference other lat doubleToLongBits ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation Double MemberReference lng doubleToLongBits MethodInvocation Double MemberReference other lng doubleToLongBits ReturnStatement Literal false End IfStatement BinaryOperation != MemberReference normalized MemberReference other normalized ReturnStatement Literal false End ReturnStatement Literal true ReferenceType LatLng",0
497,497,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import java.util.HashMap Import org.apache.lucene.search.Query Import org.apache.lucene.search.spans.SpanQuery Import org.apache.lucene.xmlparser.ParserException Import org.w3c.dom.Element ClassDeclaration Modifier public /**
 * 
 */ SpanQueryBuilderFactory FieldDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType SpanQueryBuilder VariableDeclarator builders ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType SpanQueryBuilder MethodDeclaration Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Element e ParserException ReturnStatement MethodInvocation MemberReference e getSpanQuery MethodDeclaration Modifier public addBuilder FormalParameter ReferenceType String nodeName FormalParameter ReferenceType SpanQueryBuilder builder StatementExpression MethodInvocation builders MemberReference nodeName MemberReference builder put MethodDeclaration Modifier public ReferenceType SpanQuery getSpanQuery FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration ReferenceType SpanQueryBuilder VariableDeclarator builder MethodInvocation builders MethodInvocation e getNodeName get IfStatement BinaryOperation == MemberReference builder Literal null BlockStatement ThrowStatement ClassCreator ReferenceType ParserException BinaryOperation + Literal ""No SpanQueryObjectBuilder defined for node "" MethodInvocation e getNodeName End ReturnStatement MethodInvocation builder MemberReference e getSpanQuery ReferenceType SpanQueryBuilder",0
920,920,,0
492,492,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.utils Import java.io.File Import java.io.FileWriter Import java.io.IOException Import java.util.Properties Import org.apache.lucene.benchmark.byTask.feeds.DocMaker Import org.apache.lucene.benchmark.byTask.feeds.NoMoreDataException Import org.apache.lucene.benchmark.byTask.utils.Config Import org.apache.lucene.document.Document ClassDeclaration Modifier public /**
 * Extract the downloaded Wikipedia dump into separate files for indexing.
 */ ExtractWikipedia FieldDeclaration Modifier private ReferenceType File VariableDeclarator outputDir FieldDeclaration Modifier public static BasicType int VariableDeclarator count Literal 0 FieldDeclaration Modifier final static BasicType int VariableDeclarator BASE Literal 10 FieldDeclaration Modifier protected ReferenceType DocMaker VariableDeclarator docMaker ConstructorDeclaration Modifier public ExtractWikipedia FormalParameter ReferenceType DocMaker docMaker FormalParameter ReferenceType File outputDir StatementExpression Assignment This MemberReference outputDir MemberReference outputDir = StatementExpression Assignment This MemberReference docMaker MemberReference docMaker = StatementExpression MethodInvocation System.out BinaryOperation + Literal ""Deleting all files in "" MemberReference outputDir println LocalVariableDeclaration ReferenceType File VariableDeclarator files MethodInvocation outputDir listFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation delete files End MethodDeclaration Modifier public ReferenceType File directory FormalParameter BasicType int count FormalParameter ReferenceType File directory IfStatement BinaryOperation == MemberReference directory Literal null BlockStatement StatementExpression Assignment MemberReference directory MemberReference outputDir = End LocalVariableDeclaration BasicType int VariableDeclarator base MemberReference BASE WhileStatement BinaryOperation <= MemberReference base MemberReference count BlockStatement StatementExpression Assignment MemberReference base MemberReference BASE *= End IfStatement BinaryOperation < MemberReference count MemberReference BASE BlockStatement ReturnStatement MemberReference directory End StatementExpression Assignment MemberReference directory ClassCreator ReferenceType File MemberReference directory MethodInvocation Integer BinaryOperation / MemberReference base MemberReference BASE toString = StatementExpression Assignment MemberReference directory ClassCreator ReferenceType File MemberReference directory MethodInvocation Integer BinaryOperation / MemberReference count BinaryOperation / MemberReference base MemberReference BASE toString = ReturnStatement MethodInvocation BinaryOperation % MemberReference count BinaryOperation / MemberReference base MemberReference BASE MemberReference directory directory MethodDeclaration Modifier public create FormalParameter ReferenceType String id FormalParameter ReferenceType String title FormalParameter ReferenceType String time FormalParameter ReferenceType String body LocalVariableDeclaration ReferenceType File VariableDeclarator d MethodInvocation MemberReference ++ count Literal null directory StatementExpression MethodInvocation d mkdirs LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MemberReference d BinaryOperation + MemberReference id Literal "".txt"" LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator contents ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation contents MemberReference time append StatementExpression MethodInvocation contents Literal ""\n\n"" append StatementExpression MethodInvocation contents MemberReference title append StatementExpression MethodInvocation contents Literal ""\n\n"" append StatementExpression MethodInvocation contents MemberReference body append StatementExpression MethodInvocation contents Literal ""\n"" append TryStatement LocalVariableDeclaration ReferenceType FileWriter VariableDeclarator writer ClassCreator ReferenceType FileWriter MemberReference f StatementExpression MethodInvocation writer MethodInvocation contents toString write StatementExpression MethodInvocation writer close CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference ioe MethodDeclaration Modifier public extract Exception LocalVariableDeclaration ReferenceType Document VariableDeclarator doc Literal null StatementExpression MethodInvocation System.out Literal ""Starting Extraction"" println LocalVariableDeclaration BasicType long VariableDeclarator start MethodInvocation System currentTimeMillis TryStatement WhileStatement BinaryOperation != Assignment MemberReference doc MethodInvocation docMaker makeDocument = Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation doc MemberReference DocMaker ID_FIELD get MethodInvocation doc MemberReference DocMaker TITLE_FIELD get MethodInvocation doc MemberReference DocMaker DATE_FIELD get MethodInvocation doc MemberReference DocMaker BODY_FIELD get create End CatchClause CatchClauseParameter NoMoreDataException e LocalVariableDeclaration BasicType long VariableDeclarator finish MethodInvocation System currentTimeMillis StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""Extraction took "" BinaryOperation - MemberReference finish MemberReference start Literal "" ms"" println MethodDeclaration Modifier public static main FormalParameter ReferenceType String args Exception LocalVariableDeclaration ReferenceType File VariableDeclarator wikipedia Literal null LocalVariableDeclaration ReferenceType File VariableDeclarator outputDir ClassCreator ReferenceType File Literal ""./enwiki"" LocalVariableDeclaration BasicType boolean VariableDeclarator keepImageOnlyDocs Literal true ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference args length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator arg MemberReference ArraySelector MemberReference i args IfStatement BinaryOperation || MethodInvocation arg Literal ""--input"" equals MethodInvocation arg Literal ""-i"" equals BlockStatement StatementExpression Assignment MemberReference wikipedia ClassCreator ReferenceType File MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 args = StatementExpression MemberReference ++ i IfStatement BinaryOperation || MethodInvocation arg Literal ""--output"" equals MethodInvocation arg Literal ""-o"" equals BlockStatement StatementExpression Assignment MemberReference outputDir ClassCreator ReferenceType File MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 args = StatementExpression MemberReference ++ i IfStatement BinaryOperation || MethodInvocation arg Literal ""--discardImageOnlyDocs"" equals MethodInvocation arg Literal ""-d"" equals BlockStatement StatementExpression Assignment MemberReference keepImageOnlyDocs Literal false = End End End End LocalVariableDeclaration ReferenceType DocMaker VariableDeclarator docMaker ClassCreator ReferenceType DocMaker LocalVariableDeclaration ReferenceType Properties VariableDeclarator properties ClassCreator ReferenceType Properties StatementExpression MethodInvocation properties Literal ""content.source"" Literal ""org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource"" setProperty StatementExpression MethodInvocation properties Literal ""docs.file"" MethodInvocation wikipedia getAbsolutePath setProperty StatementExpression MethodInvocation properties Literal ""content.source.forever"" Literal ""false"" setProperty StatementExpression MethodInvocation properties Literal ""keep.image.only.docs"" MethodInvocation String MemberReference keepImageOnlyDocs valueOf setProperty StatementExpression MethodInvocation docMaker ClassCreator ReferenceType Config MemberReference properties setConfig StatementExpression MethodInvocation docMaker resetInputs IfStatement BinaryOperation && BinaryOperation != MemberReference wikipedia Literal null MethodInvocation wikipedia exists BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""Extracting Wikipedia to: "" MemberReference outputDir Literal "" using EnwikiContentSource"" println StatementExpression MethodInvocation outputDir mkdirs LocalVariableDeclaration ReferenceType ExtractWikipedia VariableDeclarator extractor ClassCreator ReferenceType ExtractWikipedia MemberReference docMaker MemberReference outputDir StatementExpression MethodInvocation extractor extract BlockStatement StatementExpression MethodInvocation printUsage End MethodDeclaration Modifier private static printUsage StatementExpression MethodInvocation System.err BinaryOperation + Literal ""Usage: java -cp <...> org.apache.lucene.benchmark.utils.ExtractWikipedia --input|-i <Path to Wikipedia XML file> "" Literal ""[--output|-o <Output Path>] [--discardImageOnlyDocs|-d]"" println StatementExpression MethodInvocation System.err Literal ""--discardImageOnlyDocs tells the extractor to skip Wiki docs that contain only images"" println",1
176,176,"CompilationUnit PackageDeclaration org.apache.lucene.search.spell Import java.io.IOException Import java.util.Iterator Import org.apache.lucene.analysis.WhitespaceAnalyzer Import org.apache.lucene.document.Document Import org.apache.lucene.document.Field Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.index.Term Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.IndexSearcher Import org.apache.lucene.search.Query Import org.apache.lucene.search.ScoreDoc Import org.apache.lucene.search.TermQuery Import org.apache.lucene.store.Directory ClassDeclaration Modifier public /**
 * <p>
 *   Spell Checker class  (Main class) <br/>
 *  (initially inspired by the David Spencer code).
 * </p>
 *
 * <p>Example Usage:
 * 
 * <pre>
 *  SpellChecker spellchecker = new SpellChecker(spellIndexDirectory);
 *  // To index a field of a user index:
 *  spellchecker.indexDictionary(new LuceneDictionary(my_lucene_reader, a_field));
 *  // To index a file containing words:
 *  spellchecker.indexDictionary(new PlainTextDictionary(new File(""myfile.txt"")));
 *  String[] suggestions = spellchecker.suggestSimilar(""misspelt"", 5);
 * </pre>
 * 
 *
 * @version 1.0
 */ SpellChecker FieldDeclaration /**
   * Field name for each word in the ngram index.
   */ Modifier public final static ReferenceType String VariableDeclarator F_WORD Literal ""word"" FieldDeclaration /**
   * the spell index
   */ ReferenceType Directory VariableDeclarator spellIndex FieldDeclaration /**
   * Boost value for start and end grams
   */ Modifier private BasicType float VariableDeclarator bStart Literal 2.0f FieldDeclaration Modifier private BasicType float VariableDeclarator bEnd Literal 1.0f FieldDeclaration Modifier private ReferenceType IndexSearcher VariableDeclarator searcher FieldDeclaration Modifier private BasicType float VariableDeclarator minScore Literal 0.5f FieldDeclaration Modifier private ReferenceType StringDistance VariableDeclarator sd ConstructorDeclaration Modifier public /**
   * Use the given directory as a spell checker index. The directory
   * is created if it doesn't exist yet.
   * 
   * @param spellIndex
   * @throws IOException
   */ SpellChecker FormalParameter ReferenceType Directory spellIndex FormalParameter ReferenceType StringDistance sd IOException StatementExpression This MethodInvocation MemberReference spellIndex setSpellIndex StatementExpression This MethodInvocation MemberReference sd setStringDistance ConstructorDeclaration Modifier public SpellChecker FormalParameter ReferenceType Directory spellIndex IOException StatementExpression ExplicitConstructorInvocation MemberReference spellIndex ClassCreator ReferenceType LevensteinDistance MethodDeclaration /**
   * Use a different index as the spell checker index or re-open
   * the existing index if <code>spellIndex</code> is the same value
   * as given in the constructor.
   * 
   * @param spellIndex
   * @throws IOException
   */ Modifier public setSpellIndex FormalParameter ReferenceType Directory spellIndex IOException StatementExpression Assignment This MemberReference spellIndex MemberReference spellIndex = IfStatement MethodInvocation ! IndexReader MemberReference spellIndex indexExists BlockStatement LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator writer ClassCreator ReferenceType IndexWriter MemberReference spellIndex Literal null Literal true MemberReference IndexWriter.MaxFieldLength UNLIMITED StatementExpression MethodInvocation writer close End IfStatement BinaryOperation != MemberReference searcher Literal null BlockStatement StatementExpression MethodInvocation searcher close End StatementExpression Assignment MemberReference searcher ClassCreator ReferenceType IndexSearcher This MemberReference spellIndex Literal true = MethodDeclaration Modifier public setStringDistance FormalParameter ReferenceType StringDistance sd StatementExpression Assignment This MemberReference sd MemberReference sd = MethodDeclaration Modifier public ReferenceType StringDistance getStringDistance ReturnStatement MemberReference sd MethodDeclaration /**
   * Sets the accuracy 0 &lt; minScore &lt; 1; default 0.5
   */ Modifier public setAccuracy FormalParameter BasicType float minScore StatementExpression Assignment This MemberReference minScore MemberReference minScore = MethodDeclaration /**
   * Suggest similar words.
   * 
   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms
   * is not the same as the edit distance strategy used to calculate the best
   * matching spell-checked word from the hits that Lucene found, one usually has
   * to retrieve a couple of numSug's in order to get the true best match.
   *
   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.
   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.
   *
   * @param word the word you want a spell check done on
   * @param numSug the number of suggested words
   * @throws IOException
   * @return String[]
   */ Modifier public ReferenceType String suggestSimilar FormalParameter ReferenceType String word FormalParameter BasicType int numSug IOException ReturnStatement This MethodInvocation MemberReference word MemberReference numSug Literal null Literal null Literal false suggestSimilar MethodDeclaration /**
   * Suggest similar words (optionally restricted to a field of an index).
   * 
   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms
   * is not the same as the edit distance strategy used to calculate the best
   * matching spell-checked word from the hits that Lucene found, one usually has
   * to retrieve a couple of numSug's in order to get the true best match.
   *
   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.
   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.
   *
   * @param word the word you want a spell check done on
   * @param numSug the number of suggested words
   * @param ir the indexReader of the user index (can be null see field param)
   * @param field the field of the user index: if field is not null, the suggested
   * words are restricted to the words present in this field.
   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word
   * (only if restricted mode = (indexReader!=null and field!=null)
   * @throws IOException
   * @return String[] the sorted list of the suggest words with these 2 criteria:
   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity
   * of the suggest words in the field of the user index
   */ Modifier public ReferenceType String suggestSimilar FormalParameter ReferenceType String word FormalParameter BasicType int numSug FormalParameter ReferenceType IndexReader ir FormalParameter ReferenceType String field FormalParameter BasicType boolean morePopular IOException LocalVariableDeclaration BasicType float VariableDeclarator min This MemberReference minScore LocalVariableDeclaration Modifier final BasicType int VariableDeclarator lengthWord MethodInvocation word length LocalVariableDeclaration Modifier final BasicType int VariableDeclarator freq TernaryExpression BinaryOperation && BinaryOperation != MemberReference ir Literal null BinaryOperation != MemberReference field Literal null MethodInvocation ir ClassCreator ReferenceType Term MemberReference field MemberReference word docFreq Literal 0 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator goalFreq TernaryExpression BinaryOperation && BinaryOperation && MemberReference morePopular BinaryOperation != MemberReference ir Literal null BinaryOperation != MemberReference field Literal null MemberReference freq Literal 0 IfStatement BinaryOperation && MemberReference ! morePopular BinaryOperation > MemberReference freq Literal 0 BlockStatement ReturnStatement ArrayCreator ReferenceType String ArrayInitializer MemberReference word End LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator query ClassCreator ReferenceType BooleanQuery LocalVariableDeclaration ReferenceType String VariableDeclarator grams LocalVariableDeclaration ReferenceType String VariableDeclarator key ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ng MethodInvocation MemberReference lengthWord getMin BinaryOperation <= MemberReference ng MethodInvocation MemberReference lengthWord getMax MemberReference ++ ng BlockStatement StatementExpression Assignment MemberReference key BinaryOperation + Literal ""gram"" MemberReference ng = StatementExpression Assignment MemberReference grams MethodInvocation MemberReference word MemberReference ng formGrams = IfStatement BinaryOperation == MemberReference grams length Literal 0 BlockStatement ContinueStatement End IfStatement BinaryOperation > MemberReference bStart Literal 0 BlockStatement StatementExpression MethodInvocation MemberReference query BinaryOperation + Literal ""start"" MemberReference ng MemberReference ArraySelector Literal 0 grams MemberReference bStart add End IfStatement BinaryOperation > MemberReference bEnd Literal 0 BlockStatement StatementExpression MethodInvocation MemberReference query BinaryOperation + Literal ""end"" MemberReference ng MemberReference ArraySelector BinaryOperation - MemberReference grams length Literal 1 grams MemberReference bEnd add End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference grams length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference query MemberReference key MemberReference ArraySelector MemberReference i grams add End End LocalVariableDeclaration BasicType int VariableDeclarator maxHits BinaryOperation * Literal 10 MemberReference numSug LocalVariableDeclaration ReferenceType ScoreDoc VariableDeclarator hits MethodInvocation searcher MemberReference scoreDocs MemberReference query Literal null MemberReference maxHits search LocalVariableDeclaration ReferenceType SuggestWordQueue VariableDeclarator sugQueue ClassCreator ReferenceType SuggestWordQueue MemberReference numSug LocalVariableDeclaration BasicType int VariableDeclarator stop MethodInvocation Math MemberReference hits length MemberReference maxHits min LocalVariableDeclaration ReferenceType SuggestWord VariableDeclarator sugWord ClassCreator ReferenceType SuggestWord ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference stop MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference sugWord string MethodInvocation searcher MethodInvocation MemberReference F_WORD get MemberReference ArraySelector MemberReference i MemberReference doc hits doc = IfStatement MethodInvocation sugWord.string MemberReference word equals BlockStatement ContinueStatement End StatementExpression Assignment MemberReference sugWord score MethodInvocation sd MemberReference word MemberReference sugWord string getDistance = IfStatement BinaryOperation < MemberReference sugWord score MemberReference min BlockStatement ContinueStatement End IfStatement BinaryOperation && BinaryOperation != MemberReference ir Literal null BinaryOperation != MemberReference field Literal null BlockStatement StatementExpression Assignment MemberReference sugWord freq MethodInvocation ir ClassCreator ReferenceType Term MemberReference field MemberReference sugWord string docFreq = IfStatement BinaryOperation || BinaryOperation && MemberReference morePopular BinaryOperation > MemberReference goalFreq MemberReference sugWord freq BinaryOperation < MemberReference sugWord freq Literal 1 BlockStatement ContinueStatement End End StatementExpression MethodInvocation sugQueue MemberReference sugWord insertWithOverflow IfStatement BinaryOperation == MethodInvocation sugQueue size MemberReference numSug BlockStatement StatementExpression Assignment MemberReference min MethodInvocation sugQueue MemberReference score top = End StatementExpression Assignment MemberReference sugWord ClassCreator ReferenceType SuggestWord = End LocalVariableDeclaration ReferenceType String VariableDeclarator list ArrayCreator ReferenceType String MethodInvocation sugQueue size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation - MethodInvocation sugQueue size Literal 1 BinaryOperation >= MemberReference i Literal 0 MemberReference -- i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i list MethodInvocation sugQueue MemberReference string pop = End ReturnStatement MemberReference list MethodDeclaration /**
   * Add a clause to a boolean query.
   */ Modifier private static add FormalParameter ReferenceType BooleanQuery q FormalParameter ReferenceType String name FormalParameter ReferenceType String value FormalParameter BasicType float boost LocalVariableDeclaration ReferenceType Query VariableDeclarator tq ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference name MemberReference value StatementExpression MethodInvocation tq MemberReference boost setBoost StatementExpression MethodInvocation q ClassCreator ReferenceType BooleanClause MemberReference tq MemberReference BooleanClause.Occur SHOULD add MethodDeclaration /**
   * Add a clause to a boolean query.
   */ Modifier private static add FormalParameter ReferenceType BooleanQuery q FormalParameter ReferenceType String name FormalParameter ReferenceType String value StatementExpression MethodInvocation q ClassCreator ReferenceType BooleanClause ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference name MemberReference value MemberReference BooleanClause.Occur SHOULD add MethodDeclaration /**
   * Form all ngrams for a given word.
   * @param text the word to parse
   * @param ng the ngram length e.g. 3
   * @return an array of all ngrams in the word and note that duplicates are not removed
   */ Modifier private static ReferenceType String formGrams FormalParameter ReferenceType String text FormalParameter BasicType int ng LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation text length LocalVariableDeclaration ReferenceType String VariableDeclarator res ArrayCreator ReferenceType String BinaryOperation + BinaryOperation - MemberReference len MemberReference ng Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation + BinaryOperation - MemberReference len MemberReference ng Literal 1 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i res MethodInvocation text MemberReference i BinaryOperation + MemberReference i MemberReference ng substring = End ReturnStatement MemberReference res MethodDeclaration /**
   * Removes all terms from the spell check index.
   * @throws IOException
   */ Modifier public clearIndex IOException LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator writer ClassCreator ReferenceType IndexWriter MemberReference spellIndex Literal null Literal true MemberReference IndexWriter.MaxFieldLength UNLIMITED StatementExpression MethodInvocation writer close StatementExpression MethodInvocation searcher close StatementExpression Assignment MemberReference searcher ClassCreator ReferenceType IndexSearcher This MemberReference spellIndex Literal true = MethodDeclaration /**
   * Check whether the word exists in the index.
   * @param word
   * @throws IOException
   * @return true iff the word exists in the index
   */ Modifier public BasicType boolean exist FormalParameter ReferenceType String word IOException ReturnStatement BinaryOperation > MethodInvocation searcher ClassCreator ReferenceType Term MemberReference F_WORD MemberReference word docFreq Literal 0 MethodDeclaration /**
   * Indexes the data from the given {@link Dictionary}.
   * @param dict Dictionary to index
   * @param mergeFactor mergeFactor to use when indexing
   * @param ramMB the max amount or memory in MB to use
   * @throws IOException
   */ Modifier public indexDictionary FormalParameter ReferenceType Dictionary dict FormalParameter BasicType int mergeFactor FormalParameter BasicType int ramMB IOException LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator writer ClassCreator ReferenceType IndexWriter MemberReference spellIndex ClassCreator ReferenceType WhitespaceAnalyzer MemberReference IndexWriter.MaxFieldLength UNLIMITED StatementExpression MethodInvocation writer MemberReference mergeFactor setMergeFactor StatementExpression MethodInvocation writer MemberReference ramMB setRAMBufferSizeMB LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType String VariableDeclarator iter MethodInvocation dict getWordsIterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator word MethodInvocation iter next LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation word length IfStatement BinaryOperation < MemberReference len Literal 3 BlockStatement ContinueStatement End IfStatement This MethodInvocation MemberReference word exist BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation MemberReference word MethodInvocation MemberReference len getMin MethodInvocation MemberReference len getMax createDocument StatementExpression MethodInvocation writer MemberReference doc addDocument End StatementExpression MethodInvocation writer optimize StatementExpression MethodInvocation writer close StatementExpression MethodInvocation searcher close StatementExpression Assignment MemberReference searcher ClassCreator ReferenceType IndexSearcher This MemberReference spellIndex Literal true = MethodDeclaration /**
   * Indexes the data from the given {@link Dictionary}.
   * @param dict the dictionary to index
   * @throws IOException
   */ Modifier public indexDictionary FormalParameter ReferenceType Dictionary dict IOException StatementExpression MethodInvocation MemberReference dict Literal 300 Literal 10 indexDictionary MethodDeclaration Modifier private BasicType int getMin FormalParameter BasicType int l IfStatement BinaryOperation > MemberReference l Literal 5 BlockStatement ReturnStatement Literal 3 End IfStatement BinaryOperation == MemberReference l Literal 5 BlockStatement ReturnStatement Literal 2 End ReturnStatement Literal 1 MethodDeclaration Modifier private BasicType int getMax FormalParameter BasicType int l IfStatement BinaryOperation > MemberReference l Literal 5 BlockStatement ReturnStatement Literal 4 End IfStatement BinaryOperation == MemberReference l Literal 5 BlockStatement ReturnStatement Literal 3 End ReturnStatement Literal 2 MethodDeclaration Modifier private static ReferenceType Document createDocument FormalParameter ReferenceType String text FormalParameter BasicType int ng1 FormalParameter BasicType int ng2 LocalVariableDeclaration ReferenceType Document VariableDeclarator doc ClassCreator ReferenceType Document StatementExpression MethodInvocation doc ClassCreator ReferenceType Field MemberReference F_WORD MemberReference text MemberReference Field.Store YES MemberReference Field.Index NOT_ANALYZED add StatementExpression MethodInvocation MemberReference text MemberReference doc MemberReference ng1 MemberReference ng2 addGram ReturnStatement MemberReference doc MethodDeclaration Modifier private static addGram FormalParameter ReferenceType String text FormalParameter ReferenceType Document doc FormalParameter BasicType int ng1 FormalParameter BasicType int ng2 LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation text length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ng MemberReference ng1 BinaryOperation <= MemberReference ng MemberReference ng2 MemberReference ++ ng BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator key BinaryOperation + Literal ""gram"" MemberReference ng LocalVariableDeclaration ReferenceType String VariableDeclarator end Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation + BinaryOperation - MemberReference len MemberReference ng Literal 1 MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator gram MethodInvocation text MemberReference i BinaryOperation + MemberReference i MemberReference ng substring StatementExpression MethodInvocation doc ClassCreator ReferenceType Field MemberReference key MemberReference gram MemberReference Field.Store NO MemberReference Field.Index NOT_ANALYZED add IfStatement BinaryOperation == MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation doc ClassCreator ReferenceType Field BinaryOperation + Literal ""start"" MemberReference ng MemberReference gram MemberReference Field.Store NO MemberReference Field.Index NOT_ANALYZED add End StatementExpression Assignment MemberReference end MemberReference gram = End IfStatement BinaryOperation != MemberReference end Literal null BlockStatement StatementExpression MethodInvocation doc ClassCreator ReferenceType Field BinaryOperation + Literal ""end"" MemberReference ng MemberReference end MemberReference Field.Store NO MemberReference Field.Index NOT_ANALYZED add End End",1
413,413,"CompilationUnit PackageDeclaration org.apache.lucene.search Import org.apache.lucene.util.PriorityQueue ClassDeclaration Modifier public abstract /**
 * A base class for all collectors that return a {@link TopDocs} output. This
 * collector allows easy extension by providing a single constructor which
 * accepts a {@link PriorityQueue} as well as protected members for that
 * priority queue and a counter of the number of total hits.<br>
 * Extending classes can override {@link #topDocs(int, int)} and
 * {@link #getTotalHits()} in order to provide their own implementation.
 */ TopDocsCollector FieldDeclaration Modifier final protected static ReferenceType TopDocs VariableDeclarator EMPTY_TOPDOCS ClassCreator ReferenceType TopDocs Literal 0 ArrayCreator ReferenceType ScoreDoc Literal 0 MemberReference Float NaN FieldDeclaration /**
   * The priority queue which holds the top documents. Note that different
   * implementations of PriorityQueue give different meaning to 'top documents'.
   * HitQueue for example aggregates the top scoring documents, while other PQ
   * implementations may hold documents sorted by other criteria.
   */ Modifier protected ReferenceType PriorityQueue TypeArgument ReferenceType T VariableDeclarator pq FieldDeclaration /** The total number of documents that the collector encountered. */ Modifier protected BasicType int VariableDeclarator totalHits ConstructorDeclaration Modifier protected TopDocsCollector FormalParameter ReferenceType PriorityQueue TypeArgument ReferenceType T pq StatementExpression Assignment This MemberReference pq MemberReference pq = MethodDeclaration /**
   * Populates the results array with the ScoreDoc instaces. This can be
   * overridden in case a different ScoreDoc type should be returned.
   */ Modifier protected populateResults FormalParameter ReferenceType ScoreDoc results FormalParameter BasicType int howMany ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation - MemberReference howMany Literal 1 BinaryOperation >= MemberReference i Literal 0 MemberReference -- i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i results MethodInvocation pq pop = End MethodDeclaration /**
   * Returns a {@link TopDocs} instance containing the given results. If
   * <code>results</code> is null it means there are no results to return,
   * either because there were 0 calls to collect() or because the arguments to
   * topDocs were invalid.
   */ Modifier protected ReferenceType TopDocs newTopDocs FormalParameter ReferenceType ScoreDoc results FormalParameter BasicType int start ReturnStatement TernaryExpression BinaryOperation == MemberReference results Literal null MemberReference EMPTY_TOPDOCS ClassCreator ReferenceType TopDocs MemberReference totalHits MemberReference results MethodDeclaration /** The total number of documents that matched this query. */ Modifier public BasicType int getTotalHits ReturnStatement MemberReference totalHits MethodDeclaration /** Returns the top docs that were collected by this collector. */ Modifier public final ReferenceType TopDocs topDocs ReturnStatement MethodInvocation Literal 0 TernaryExpression BinaryOperation < MemberReference totalHits MethodInvocation pq size MemberReference totalHits MethodInvocation pq size topDocs MethodDeclaration /**
   * Returns the documents in the rage [start .. pq.size()) that were collected
   * by this collector. Note that if start >= pq.size(), an empty TopDocs is
   * returned.<br>
   * This method is convenient to call if the application always asks for the
   * last results, starting from the last 'page'.<br>
   * <b>NOTE:</b> you cannot call this method more than once for each search
   * execution. If you need to call it more than once, passing each time a
   * different <code>start</code>, you should call {@link #topDocs()} and work
   * with the returned {@link TopDocs} object, which will contain all the
   * results this search execution collected.
   */ Modifier public final ReferenceType TopDocs topDocs FormalParameter BasicType int start ReturnStatement MethodInvocation MemberReference start TernaryExpression BinaryOperation < MemberReference totalHits MethodInvocation pq size MemberReference totalHits MethodInvocation pq size topDocs MethodDeclaration /**
   * Returns the documents in the rage [start .. start+howMany) that were
   * collected by this collector. Note that if start >= pq.size(), an empty
   * TopDocs is returned, and if pq.size() - start &lt; howMany, then only the
   * available documents in [start .. pq.size()) are returned.<br>
   * This method is useful to call in case pagination of search results is
   * allowed by the search application, as well as it attempts to optimize the
   * memory used by allocating only as much as requested by howMany.<br>
   * <b>NOTE:</b> you cannot call this method more than once for each search
   * execution. If you need to call it more than once, passing each time a
   * different range, you should call {@link #topDocs()} and work with the
   * returned {@link TopDocs} object, which will contain all the results this
   * search execution collected.
   */ Modifier public final ReferenceType TopDocs topDocs FormalParameter BasicType int start FormalParameter BasicType int howMany LocalVariableDeclaration BasicType int VariableDeclarator size TernaryExpression BinaryOperation < MemberReference totalHits MethodInvocation pq size MemberReference totalHits MethodInvocation pq size IfStatement BinaryOperation || BinaryOperation || BinaryOperation < MemberReference start Literal 0 BinaryOperation >= MemberReference start MemberReference size BinaryOperation <= MemberReference howMany Literal 0 BlockStatement ReturnStatement MethodInvocation Literal null MemberReference start newTopDocs End StatementExpression Assignment MemberReference howMany MethodInvocation Math BinaryOperation - MemberReference size MemberReference start MemberReference howMany min = LocalVariableDeclaration ReferenceType ScoreDoc VariableDeclarator results ArrayCreator ReferenceType ScoreDoc MemberReference howMany ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation - BinaryOperation - MethodInvocation pq size MemberReference start MemberReference howMany BinaryOperation > MemberReference i Literal 0 MemberReference -- i BlockStatement StatementExpression MethodInvocation pq pop End StatementExpression MethodInvocation MemberReference results MemberReference howMany populateResults ReturnStatement MethodInvocation MemberReference results MemberReference start newTopDocs TypeParameter T ReferenceType ScoreDoc ReferenceType Collector",0
179,179,"CompilationUnit PackageDeclaration org.apache.lucene ClassDeclaration Modifier public final /** Lucene's package information, including version. **/ LucenePackage ConstructorDeclaration Modifier private LucenePackage MethodDeclaration /** Return Lucene's package, including version information. */ Modifier public static ReferenceType Package get ReturnStatement ClassReference MethodInvocation getPackage ReferenceType LucenePackage",0
133,133,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis.standard Import java.io.IOException Import java.io.Reader Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.Tokenizer Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.analysis.tokenattributes.TypeAttribute Import org.apache.lucene.util.AttributeSource Import org.apache.lucene.util.Version ClassDeclaration Modifier public final /** A grammar-based tokenizer constructed with JFlex
 *
 * <p> This should be a good tokenizer for most European-language documents:
 *
 * <ul>
 *   <li>Splits words at punctuation characters, removing punctuation. However, a 
 *     dot that's not followed by whitespace is considered part of a token.
 *   <li>Splits words at hyphens, unless there's a number in the token, in which case
 *     the whole token is interpreted as a product number and is not split.
 *   <li>Recognizes email addresses and internet hostnames as one token.
 * </ul>
 *
 * <p>Many applications have specific tokenizer needs.  If this tokenizer does
 * not suit your application, please consider copying this source code
 * directory to your project and maintaining your own grammar-based tokenizer.
 *
 * <a name=""version""/>
 * <p>You must specify the required {@link Version}
 * compatibility when creating StandardAnalyzer:
 * <ul>
 *   <li> As of 2.4, Tokens incorrectly identified as acronyms
 *        are corrected (see <a href=""https://issues.apache.org/jira/browse/LUCENE-1068"">LUCENE-1608</a>
 * </ul>
 */ StandardTokenizer FieldDeclaration /** A private instance of the JFlex-constructed scanner */ Modifier private final ReferenceType StandardTokenizerImpl VariableDeclarator scanner FieldDeclaration Modifier public final static BasicType int VariableDeclarator ALPHANUM Literal 0 FieldDeclaration Modifier public final static BasicType int VariableDeclarator APOSTROPHE Literal 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator ACRONYM Literal 2 FieldDeclaration Modifier public final static BasicType int VariableDeclarator COMPANY Literal 3 FieldDeclaration Modifier public final static BasicType int VariableDeclarator EMAIL Literal 4 FieldDeclaration Modifier public final static BasicType int VariableDeclarator HOST Literal 5 FieldDeclaration Modifier public final static BasicType int VariableDeclarator NUM Literal 6 FieldDeclaration Modifier public final static BasicType int VariableDeclarator CJ Literal 7 FieldDeclaration /**
   * @deprecated this solves a bug where HOSTs that end with '.' are identified
   *             as ACRONYMs.
   */ Modifier public final static BasicType int VariableDeclarator ACRONYM_DEP Literal 8 FieldDeclaration /** String token types that correspond to token type int constants */ Modifier public final static ReferenceType String VariableDeclarator TOKEN_TYPES ArrayCreator ReferenceType String ArrayInitializer Literal ""<ALPHANUM>"" Literal ""<APOSTROPHE>"" Literal ""<ACRONYM>"" Literal ""<COMPANY>"" Literal ""<EMAIL>"" Literal ""<HOST>"" Literal ""<NUM>"" Literal ""<CJ>"" Literal ""<ACRONYM_DEP>"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator replaceInvalidAcronym FieldDeclaration Modifier private BasicType int VariableDeclarator maxTokenLength MemberReference StandardAnalyzer DEFAULT_MAX_TOKEN_LENGTH MethodDeclaration /** Set the max allowed token length.  Any token longer
   *  than this is skipped. */ Modifier public setMaxTokenLength FormalParameter BasicType int length StatementExpression Assignment This MemberReference maxTokenLength MemberReference length = MethodDeclaration /** @see #setMaxTokenLength */ Modifier public BasicType int getMaxTokenLength ReturnStatement MemberReference maxTokenLength ConstructorDeclaration Modifier public /**
   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches
   * the <code>input</code> to the newly created JFlex scanner.
   *
   * @param input The input reader
   *
   * See http://issues.apache.org/jira/browse/LUCENE-1068
   */ StandardTokenizer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Reader input StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference scanner ClassCreator ReferenceType StandardTokenizerImpl MemberReference input = StatementExpression MethodInvocation MemberReference input MemberReference matchVersion init ConstructorDeclaration Modifier public /**
   * Creates a new StandardTokenizer with a given {@link AttributeSource}. 
   */ StandardTokenizer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType AttributeSource source FormalParameter ReferenceType Reader input StatementExpression SuperConstructorInvocation MemberReference source StatementExpression Assignment This MemberReference scanner ClassCreator ReferenceType StandardTokenizerImpl MemberReference input = StatementExpression MethodInvocation MemberReference input MemberReference matchVersion init ConstructorDeclaration Modifier public /**
   * Creates a new StandardTokenizer with a given {@link org.apache.lucene.util.AttributeSource.AttributeFactory} 
   */ StandardTokenizer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType AttributeFactory factory FormalParameter ReferenceType Reader input StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference scanner ClassCreator ReferenceType StandardTokenizerImpl MemberReference input = StatementExpression MethodInvocation MemberReference input MemberReference matchVersion init MethodDeclaration Modifier private init FormalParameter ReferenceType Reader input FormalParameter ReferenceType Version matchVersion IfStatement MethodInvocation matchVersion MemberReference Version LUCENE_24 onOrAfter BlockStatement StatementExpression Assignment MemberReference replaceInvalidAcronym Literal true = BlockStatement StatementExpression Assignment MemberReference replaceInvalidAcronym Literal false = End StatementExpression Assignment This MemberReference input MemberReference input = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression Assignment MemberReference posIncrAtt MethodInvocation ClassReference ReferenceType PositionIncrementAttribute addAttribute = StatementExpression Assignment MemberReference typeAtt MethodInvocation ClassReference ReferenceType TypeAttribute addAttribute = FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt FieldDeclaration Modifier private ReferenceType PositionIncrementAttribute VariableDeclarator posIncrAtt FieldDeclaration Modifier private ReferenceType TypeAttribute VariableDeclarator typeAtt MethodDeclaration Modifier public final Annotation Override BasicType boolean incrementToken IOException StatementExpression MethodInvocation clearAttributes LocalVariableDeclaration BasicType int VariableDeclarator posIncr Literal 1 WhileStatement Literal true BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator tokenType MethodInvocation scanner getNextToken IfStatement BinaryOperation == MemberReference tokenType MemberReference StandardTokenizerImpl YYEOF BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation <= MethodInvocation scanner yylength MemberReference maxTokenLength BlockStatement StatementExpression MethodInvocation posIncrAtt MemberReference posIncr setPositionIncrement StatementExpression MethodInvocation scanner MemberReference termAtt getText LocalVariableDeclaration Modifier final BasicType int VariableDeclarator start MethodInvocation scanner yychar StatementExpression MethodInvocation offsetAtt MethodInvocation MemberReference start correctOffset MethodInvocation BinaryOperation + MemberReference start MethodInvocation termAtt termLength correctOffset setOffset IfStatement BinaryOperation == MemberReference tokenType MemberReference StandardTokenizerImpl ACRONYM_DEP BlockStatement IfStatement MemberReference replaceInvalidAcronym BlockStatement StatementExpression MethodInvocation typeAtt MemberReference StandardTokenizerImpl ArraySelector MemberReference StandardTokenizerImpl HOST TOKEN_TYPES setType StatementExpression MethodInvocation termAtt BinaryOperation - MethodInvocation termAtt termLength Literal 1 setTermLength BlockStatement StatementExpression MethodInvocation typeAtt MemberReference StandardTokenizerImpl ArraySelector MemberReference StandardTokenizerImpl ACRONYM TOKEN_TYPES setType End BlockStatement StatementExpression MethodInvocation typeAtt MemberReference StandardTokenizerImpl ArraySelector MemberReference tokenType TOKEN_TYPES setType End ReturnStatement Literal true StatementExpression MemberReference ++ posIncr End End MethodDeclaration Modifier public final Annotation Override end LocalVariableDeclaration BasicType int VariableDeclarator finalOffset MethodInvocation BinaryOperation + MethodInvocation scanner yychar MethodInvocation scanner yylength correctOffset StatementExpression MethodInvocation offsetAtt MemberReference finalOffset MemberReference finalOffset setOffset MethodDeclaration Modifier public Annotation Override reset IOException StatementExpression SuperMethodInvocation reset StatementExpression MethodInvocation scanner MemberReference input yyreset MethodDeclaration Modifier public Annotation Override reset FormalParameter ReferenceType Reader reader IOException StatementExpression SuperMethodInvocation MemberReference reader reset StatementExpression MethodInvocation reset MethodDeclaration /**
   * Prior to https://issues.apache.org/jira/browse/LUCENE-1068, StandardTokenizer mischaracterized as acronyms tokens like www.abc.com
   * when they should have been labeled as hosts instead.
   * @return true if StandardTokenizer now returns these tokens as Hosts, otherwise false
   *
   * @deprecated Remove in 3.X and make true the only valid value
   */ Modifier public BasicType boolean isReplaceInvalidAcronym ReturnStatement MemberReference replaceInvalidAcronym MethodDeclaration /**
   *
   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms as HOST.
   * @deprecated Remove in 3.X and make true the only valid value
   *
   * See https://issues.apache.org/jira/browse/LUCENE-1068
   */ Modifier public setReplaceInvalidAcronym FormalParameter BasicType boolean replaceInvalidAcronym StatementExpression Assignment This MemberReference replaceInvalidAcronym MemberReference replaceInvalidAcronym = ReferenceType Tokenizer",0
666,666,,0
747,747,,0
924,924,,1
756,756,,0
722,722,,0
645,645,,0
153,153,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis.cn.smart ClassDeclaration Modifier public /**
 * Internal SmartChineseAnalyzer token type constants
 * <p><font color=""#FF0000"">
 * WARNING: The status of the analyzers/smartcn <b>analysis.cn.smart</b> package is experimental. 
 * The APIs and file formats introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 * </p>
 */ WordType FieldDeclaration /**
   * Start of a Sentence
   */ Modifier public final static BasicType int VariableDeclarator SENTENCE_BEGIN Literal 0 FieldDeclaration /**
   * End of a Sentence
   */ Modifier public final static BasicType int VariableDeclarator SENTENCE_END Literal 1 FieldDeclaration /**
   * Chinese Word 
   */ Modifier public final static BasicType int VariableDeclarator CHINESE_WORD Literal 2 FieldDeclaration /**
   * ASCII String
   */ Modifier public final static BasicType int VariableDeclarator STRING Literal 3 FieldDeclaration /**
   * ASCII Alphanumeric 
   */ Modifier public final static BasicType int VariableDeclarator NUMBER Literal 4 FieldDeclaration /**
   * Punctuation Symbol
   */ Modifier public final static BasicType int VariableDeclarator DELIMITER Literal 5 FieldDeclaration /**
   * Full-Width String
   */ Modifier public final static BasicType int VariableDeclarator FULLWIDTH_STRING Literal 6 FieldDeclaration /**
   * Full-Width Alphanumeric
   */ Modifier public final static BasicType int VariableDeclarator FULLWIDTH_NUMBER Literal 7",0
278,278,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.tier.projections ClassDeclaration Modifier public /**
 * Based on Sinusoidal Projections
 * Project a latitude / longitude on a 2D cartesian map
 *
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ SinusoidalProjector MethodDeclaration Modifier public ReferenceType String coordsAsString FormalParameter BasicType double latitude FormalParameter BasicType double longitude ReturnStatement Literal null MethodDeclaration Modifier public BasicType double coords FormalParameter BasicType double latitude FormalParameter BasicType double longitude LocalVariableDeclaration BasicType double VariableDeclarator rlat MethodInvocation Math MemberReference latitude toRadians LocalVariableDeclaration BasicType double VariableDeclarator rlong MethodInvocation Math MemberReference longitude toRadians LocalVariableDeclaration BasicType double VariableDeclarator nlat BinaryOperation * MemberReference rlong MethodInvocation Math MemberReference rlat cos LocalVariableDeclaration BasicType double VariableDeclarator r ArrayInitializer MemberReference nlat MemberReference rlong ReturnStatement MemberReference r ReferenceType IProjector",0
772,772,,1
283,283,"CompilationUnit PackageDeclaration org.apache.lucene.wordnet Import java.io.File Import java.io.IOException Import java.io.StringReader Import java.util.HashSet Import java.util.Iterator Import java.util.LinkedList Import java.util.List Import java.util.Set Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.document.Document Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.Collector Import org.apache.lucene.search.IndexSearcher Import org.apache.lucene.search.Query Import org.apache.lucene.search.ScoreDoc Import org.apache.lucene.search.Scorer Import org.apache.lucene.search.Searcher Import org.apache.lucene.search.TermQuery Import org.apache.lucene.store.FSDirectory ClassDeclaration Modifier public /**
 * Test program to look up synonyms.
 */ SynLookup ClassDeclaration Modifier final static CountingCollector FieldDeclaration Modifier public BasicType int VariableDeclarator numHits Literal 0 MethodDeclaration Modifier public Annotation Override setScorer FormalParameter ReferenceType Scorer scorer IOException MethodDeclaration Modifier public Annotation Override collect FormalParameter BasicType int doc IOException StatementExpression MemberReference ++ numHits MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase MethodDeclaration Modifier public Annotation Override BasicType boolean acceptsDocsOutOfOrder ReturnStatement Literal true ReferenceType Collector MethodDeclaration Modifier public static main FormalParameter ReferenceType String args IOException IfStatement BinaryOperation != MemberReference args length Literal 2 BlockStatement StatementExpression MethodInvocation System.out Literal ""java org.apache.lucene.wordnet.SynLookup <index path> <word>"" println End LocalVariableDeclaration ReferenceType FSDirectory VariableDeclarator directory MethodInvocation FSDirectory ClassCreator ReferenceType File MemberReference ArraySelector Literal 0 args open LocalVariableDeclaration ReferenceType IndexSearcher VariableDeclarator searcher ClassCreator ReferenceType IndexSearcher MemberReference directory Literal true LocalVariableDeclaration ReferenceType String VariableDeclarator word MemberReference ArraySelector Literal 1 args LocalVariableDeclaration ReferenceType Query VariableDeclarator query ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference Syns2Index F_WORD MemberReference word LocalVariableDeclaration ReferenceType CountingCollector VariableDeclarator countingCollector ClassCreator ReferenceType CountingCollector StatementExpression MethodInvocation searcher MemberReference query MemberReference countingCollector search IfStatement BinaryOperation == MemberReference countingCollector numHits Literal 0 BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + Literal ""No synonyms found for "" MemberReference word println BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""Synonyms found for \"""" MemberReference word Literal ""\"":"" println End LocalVariableDeclaration ReferenceType ScoreDoc VariableDeclarator hits MethodInvocation searcher MemberReference scoreDocs MemberReference query MemberReference countingCollector numHits search ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference hits length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation searcher MemberReference ArraySelector MemberReference i MemberReference doc hits doc LocalVariableDeclaration ReferenceType String VariableDeclarator values MethodInvocation doc MemberReference Syns2Index F_SYN getValues ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference values length MemberReference ++ j BlockStatement StatementExpression MethodInvocation System.out MemberReference ArraySelector MemberReference j values println End End StatementExpression MethodInvocation searcher close StatementExpression MethodInvocation directory close MethodDeclaration /**
	 * Perform synonym expansion on a query.
	 *
	 * @param query
	 * @param syns
	 * @param a
	 * @param field
	 * @param boost
	 */ Modifier public static ReferenceType Query expand FormalParameter ReferenceType String query FormalParameter ReferenceType Searcher syns FormalParameter ReferenceType Analyzer a FormalParameter Modifier final ReferenceType String field FormalParameter Modifier final BasicType float boost IOException LocalVariableDeclaration Modifier final ReferenceType Set TypeArgument ReferenceType String VariableDeclarator already ClassCreator ReferenceType HashSet TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator top ClassCreator ReferenceType LinkedList TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator ts MethodInvocation a MemberReference field ClassCreator ReferenceType StringReader MemberReference query tokenStream LocalVariableDeclaration ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation ts ClassReference ReferenceType TermAttribute addAttribute WhileStatement MethodInvocation ts incrementToken BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator word MethodInvocation termAtt term IfStatement MethodInvocation already MemberReference word add StatementExpression MethodInvocation top MemberReference word add End End LocalVariableDeclaration Modifier final ReferenceType BooleanQuery VariableDeclarator tmp ClassCreator ReferenceType BooleanQuery LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType String VariableDeclarator it MethodInvocation top iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator word MethodInvocation it next LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator tq ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference field MemberReference word StatementExpression MethodInvocation tmp MemberReference tq MemberReference BooleanClause.Occur SHOULD add StatementExpression MethodInvocation syns ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference Syns2Index F_WORD MemberReference word ClassCreator ReferenceType Collector FieldDeclaration ReferenceType IndexReader VariableDeclarator reader MethodDeclaration Modifier public Annotation Override BasicType boolean acceptsDocsOutOfOrder ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override collect FormalParameter BasicType int doc IOException LocalVariableDeclaration ReferenceType Document VariableDeclarator d MethodInvocation reader MemberReference doc document LocalVariableDeclaration ReferenceType String VariableDeclarator values MethodInvocation d MemberReference Syns2Index F_SYN getValues ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference values length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator syn MemberReference ArraySelector MemberReference j values IfStatement MethodInvocation already MemberReference syn add BlockStatement LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator tq ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference field MemberReference syn IfStatement BinaryOperation > MemberReference boost Literal 0 StatementExpression MethodInvocation tq MemberReference boost setBoost End StatementExpression MethodInvocation tmp MemberReference tq MemberReference BooleanClause.Occur SHOULD add End End MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression Assignment This MemberReference reader MemberReference reader = MethodDeclaration Modifier public Annotation Override setScorer FormalParameter ReferenceType Scorer scorer IOException search End ReturnStatement MemberReference tmp",1
308,308,"CompilationUnit PackageDeclaration org.apache.lucene.search.regex Import org.apache.lucene.index.Term Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.Query Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.TermQuery Import org.apache.lucene.search.spans.SpanOrQuery Import org.apache.lucene.search.spans.SpanQuery Import org.apache.lucene.search.spans.SpanTermQuery Import org.apache.lucene.search.spans.Spans Import org.apache.lucene.util.ToStringUtils Import java.io.IOException Import java.util.Collection Import java.util.ArrayList ClassDeclaration Modifier public /**
 * A SpanQuery version of {@link RegexQuery} allowing regular expression
 * queries to be nested within other SpanQuery subclasses.
 */ SpanRegexQuery FieldDeclaration Modifier private ReferenceType RegexCapabilities VariableDeclarator regexImpl ClassCreator ReferenceType JavaUtilRegexCapabilities FieldDeclaration Modifier private ReferenceType Term VariableDeclarator term ConstructorDeclaration Modifier public SpanRegexQuery FormalParameter ReferenceType Term term StatementExpression Assignment This MemberReference term MemberReference term = MethodDeclaration Modifier public ReferenceType Term getTerm ReturnStatement MemberReference term MethodDeclaration Modifier public Annotation Override ReferenceType Query rewrite FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration ReferenceType RegexQuery VariableDeclarator orig ClassCreator ReferenceType RegexQuery MemberReference term StatementExpression MethodInvocation orig MemberReference regexImpl setRegexImplementation StatementExpression MethodInvocation orig MemberReference RegexQuery SCORING_BOOLEAN_QUERY_REWRITE setRewriteMethod LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator bq Cast ReferenceType BooleanQuery MethodInvocation orig MemberReference reader rewrite LocalVariableDeclaration ReferenceType BooleanClause VariableDeclarator clauses MethodInvocation bq getClauses LocalVariableDeclaration ReferenceType SpanQuery VariableDeclarator sqs ArrayCreator ReferenceType SpanQuery MemberReference clauses length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference clauses length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType BooleanClause VariableDeclarator clause MemberReference ArraySelector MemberReference i clauses LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator tq Cast ReferenceType TermQuery MethodInvocation clause getQuery StatementExpression Assignment MemberReference ArraySelector MemberReference i sqs ClassCreator ReferenceType SpanTermQuery MethodInvocation tq getTerm = StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation MethodInvocation tq getBoost setBoost sqs End LocalVariableDeclaration ReferenceType SpanOrQuery VariableDeclarator query ClassCreator ReferenceType SpanOrQuery MemberReference sqs StatementExpression MethodInvocation query MethodInvocation orig getBoost setBoost ReturnStatement MemberReference query MethodDeclaration Modifier public Annotation Override ReferenceType Spans getSpans FormalParameter ReferenceType IndexReader reader IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""Query should have been rewritten"" MethodDeclaration Modifier public Annotation Override ReferenceType String getField ReturnStatement MethodInvocation term field MethodDeclaration Modifier public ReferenceType Collection TypeArgument ReferenceType Term getTerms LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType Term VariableDeclarator terms ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Term StatementExpression MethodInvocation terms MemberReference term add ReturnStatement MemberReference terms MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation == This MemberReference o ReturnStatement Literal true End IfStatement BinaryOperation || BinaryOperation == MemberReference o Literal null BinaryOperation != MethodInvocation getClass MethodInvocation o getClass ReturnStatement Literal false End LocalVariableDeclaration Modifier final ReferenceType SpanRegexQuery VariableDeclarator that Cast ReferenceType SpanRegexQuery MemberReference o IfStatement MethodInvocation ! regexImpl MemberReference that regexImpl equals ReturnStatement Literal false End IfStatement MethodInvocation ! term MemberReference that term equals ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator result StatementExpression Assignment MemberReference result MethodInvocation regexImpl hashCode = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * Literal 29 MemberReference result MethodInvocation term hashCode = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String field LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation buffer Literal ""spanRegexQuery("" append StatementExpression MethodInvocation buffer MemberReference term append StatementExpression MethodInvocation buffer Literal "")"" append StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public setRegexImplementation FormalParameter ReferenceType RegexCapabilities impl StatementExpression Assignment This MemberReference regexImpl MemberReference impl = MethodDeclaration Modifier public ReferenceType RegexCapabilities getRegexImplementation ReturnStatement MemberReference regexImpl ReferenceType SpanQuery ReferenceType RegexQueryCapable",0
608,608,,0
715,715,,0
359,359,"CompilationUnit PackageDeclaration org.apache.lucene.ant Import org.apache.lucene.document.Document Import java.io.File ClassDeclaration Modifier public /**
 *  A DocumentHandler implementation to delegate responsibility to
 *  based on a files extension.  Currently only .html and .txt
 *  files are handled, other extensions ignored.
 *
 *@since      October 28, 2001
 *TODO: Implement dynamic document type lookup
 */ FileExtensionDocumentHandler MethodDeclaration /**
     *  Gets the document attribute of the
     *  FileExtensionDocumentHandler object
     *
     *@param  file                          Description of
     *      Parameter
     *@return                               The document value
     *@exception  DocumentHandlerException  Description of
     *      Exception
     */ Modifier public ReferenceType Document getDocument FormalParameter ReferenceType File file DocumentHandlerException LocalVariableDeclaration ReferenceType Document VariableDeclarator doc Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation file getName TryStatement IfStatement MethodInvocation name Literal "".txt"" endsWith BlockStatement StatementExpression Assignment MemberReference doc MethodInvocation TextDocument MemberReference file Document = End IfStatement MethodInvocation name Literal "".html"" endsWith BlockStatement StatementExpression Assignment MemberReference doc MethodInvocation HtmlDocument MemberReference file Document = End CatchClause CatchClauseParameter java.io.IOException e ThrowStatement ClassCreator ReferenceType DocumentHandlerException MemberReference e ReturnStatement MemberReference doc ReferenceType DocumentHandler",0
313,313,"CompilationUnit PackageDeclaration org.apache.lucene.store.je Import java.io.IOException Import org.apache.lucene.store.IndexOutput ClassDeclaration Modifier public /**
 * Port of Andi Vajda's DbDirectory to Java Edition of Berkeley Database
 *
 */ JEIndexOutput FieldDeclaration /**
     * The size of data blocks, currently 16k (2^14), is determined by this
     * constant.
     */ Modifier public final static BasicType int VariableDeclarator BLOCK_SHIFT Literal 14 FieldDeclaration Modifier public final static BasicType int VariableDeclarator BLOCK_LEN BinaryOperation << Literal 1 MemberReference BLOCK_SHIFT FieldDeclaration Modifier public final static BasicType int VariableDeclarator BLOCK_MASK BinaryOperation - MemberReference BLOCK_LEN Literal 1 FieldDeclaration Modifier protected BasicType long VariableDeclarator position Literal 0L VariableDeclarator length Literal 0L FieldDeclaration Modifier protected ReferenceType JEDirectory VariableDeclarator directory FieldDeclaration Modifier protected ReferenceType Block VariableDeclarator block FieldDeclaration Modifier protected ReferenceType File VariableDeclarator file ConstructorDeclaration Modifier protected JEIndexOutput FormalParameter ReferenceType JEDirectory directory FormalParameter ReferenceType String name FormalParameter BasicType boolean create IOException StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference directory MemberReference directory = StatementExpression Assignment MemberReference file ClassCreator ReferenceType File MemberReference directory MemberReference name MemberReference create = StatementExpression Assignment MemberReference block ClassCreator ReferenceType Block MemberReference file = StatementExpression Assignment MemberReference length MethodInvocation file getLength = StatementExpression MethodInvocation MemberReference length seek StatementExpression MethodInvocation block MemberReference directory get StatementExpression MethodInvocation directory.openFiles This add MethodDeclaration Modifier public Annotation Override close IOException StatementExpression MethodInvocation flush StatementExpression MethodInvocation file MemberReference directory MemberReference length MethodInvocation System currentTimeMillis modify StatementExpression MethodInvocation directory.openFiles This remove MethodDeclaration Modifier public Annotation Override flush IOException IfStatement BinaryOperation > MemberReference length Literal 0 StatementExpression MethodInvocation block MemberReference directory put End MethodDeclaration Modifier public Annotation Override writeByte FormalParameter BasicType byte b IOException LocalVariableDeclaration BasicType int VariableDeclarator blockPos Cast BasicType int BinaryOperation & MemberReference ++ position MemberReference BLOCK_MASK StatementExpression Assignment MethodInvocation block ArraySelector MemberReference blockPos getData MemberReference b = IfStatement BinaryOperation == BinaryOperation + MemberReference blockPos Literal 1 MemberReference BLOCK_LEN BlockStatement StatementExpression MethodInvocation block MemberReference directory put StatementExpression MethodInvocation block MemberReference position seek StatementExpression MethodInvocation block MemberReference directory get End IfStatement BinaryOperation > MemberReference position MemberReference length StatementExpression Assignment MemberReference length MemberReference position = End MethodDeclaration Modifier public Annotation Override writeBytes FormalParameter BasicType byte b FormalParameter BasicType int offset FormalParameter BasicType int len IOException LocalVariableDeclaration BasicType int VariableDeclarator blockPos Cast BasicType int BinaryOperation & MemberReference position MemberReference BLOCK_MASK WhileStatement BinaryOperation >= BinaryOperation + MemberReference blockPos MemberReference len MemberReference BLOCK_LEN BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator blockLen BinaryOperation - MemberReference BLOCK_LEN MemberReference blockPos StatementExpression MethodInvocation System MemberReference b MemberReference offset MethodInvocation block getData MemberReference blockPos MemberReference blockLen arraycopy StatementExpression MethodInvocation block MemberReference directory put StatementExpression Assignment MemberReference len MemberReference blockLen -= StatementExpression Assignment MemberReference offset MemberReference blockLen += StatementExpression Assignment MemberReference position MemberReference blockLen += StatementExpression MethodInvocation block MemberReference position seek StatementExpression MethodInvocation block MemberReference directory get StatementExpression Assignment MemberReference blockPos Literal 0 = End IfStatement BinaryOperation > MemberReference len Literal 0 BlockStatement StatementExpression MethodInvocation System MemberReference b MemberReference offset MethodInvocation block getData MemberReference blockPos MemberReference len arraycopy StatementExpression Assignment MemberReference position MemberReference len += End IfStatement BinaryOperation > MemberReference position MemberReference length StatementExpression Assignment MemberReference length MemberReference position = End MethodDeclaration Modifier public Annotation Override BasicType long length IOException ReturnStatement MemberReference length MethodDeclaration Modifier public Annotation Override seek FormalParameter BasicType long pos IOException IfStatement BinaryOperation > MemberReference pos MemberReference length ThrowStatement ClassCreator ReferenceType IOException Literal ""seeking past end of file"" End IfStatement BinaryOperation == BinaryOperation >>> MemberReference pos MemberReference BLOCK_SHIFT BinaryOperation >>> MemberReference position MemberReference BLOCK_SHIFT StatementExpression Assignment MemberReference position MemberReference pos = BlockStatement StatementExpression MethodInvocation block MemberReference directory put StatementExpression MethodInvocation block MemberReference pos seek StatementExpression MethodInvocation block MemberReference directory get StatementExpression Assignment MemberReference position MemberReference pos = End MethodDeclaration Modifier public Annotation Override BasicType long getFilePointer ReturnStatement MemberReference position ReferenceType IndexOutput",0
883,883,,1
625,625,,0
689,689,,1
443,443,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax ClassDeclaration Modifier public /**
 * A {@link ParametricQueryNode} represents LE, LT, GE, GT, EQ, NE query.
 * Example: date >= ""2009-10-10"" OR price = 200
 */ ParametricQueryNode FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal - 5770038129741218116L FieldDeclaration Modifier private ReferenceType CompareOperator VariableDeclarator operator EnumDeclaration Modifier public CompareOperator EnumBody EnumConstantDeclaration LE MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement Literal ""<="" EnumConstantDeclaration LT MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement Literal ""<"" EnumConstantDeclaration GE MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement Literal "">="" EnumConstantDeclaration GT MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement Literal "">"" EnumConstantDeclaration EQ MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement Literal ""="" EnumConstantDeclaration NE MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement Literal ""!="" ConstructorDeclaration Modifier public /**
   * @param field
   *          - field name
   * @param comp
   *          - CompareOperator
   * @param value
   *          - text value
   * @param begin
   *          - position in the query string
   * @param end
   *          - position in the query string
   */ ParametricQueryNode FormalParameter ReferenceType CharSequence field FormalParameter ReferenceType CompareOperator comp FormalParameter ReferenceType CharSequence value FormalParameter BasicType int begin FormalParameter BasicType int end StatementExpression SuperConstructorInvocation MemberReference field MemberReference value MemberReference begin MemberReference end StatementExpression Assignment This MemberReference operator MemberReference comp = StatementExpression MethodInvocation Literal true setLeaf MethodDeclaration Modifier public ReferenceType CharSequence getOperand ReturnStatement MethodInvocation getText MethodDeclaration Modifier public Annotation Override ReferenceType CharSequence toQueryString FormalParameter ReferenceType EscapeQuerySyntax escapeSyntaxParser ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + This MemberReference field Literal """" This MemberReference operator MethodInvocation toString Literal ""\"""" This MemberReference text Literal ""\"""" MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<parametric field='"" This MemberReference field Literal ""' operator='"" This MemberReference operator MethodInvocation toString Literal ""' text='"" This MemberReference text Literal ""'/>"" MethodDeclaration Modifier public Annotation Override ReferenceType ParametricQueryNode cloneTree CloneNotSupportedException LocalVariableDeclaration ReferenceType ParametricQueryNode VariableDeclarator clone Cast ReferenceType ParametricQueryNode SuperMethodInvocation cloneTree StatementExpression Assignment MemberReference clone operator This MemberReference operator = ReturnStatement MemberReference clone MethodDeclaration /**
   * @return the operator
   */ Modifier public ReferenceType CompareOperator getOperator ReturnStatement This MemberReference operator ReferenceType FieldQueryNode",1
111,111,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.io.Closeable Import java.lang.ref.WeakReference Import java.util.HashMap Import java.util.Iterator Import java.util.Map ClassDeclaration Modifier public /** Java's builtin ThreadLocal has a serious flaw:
 *  it can take an arbitrarily long amount of time to
 *  dereference the things you had stored in it, even once the
 *  ThreadLocal instance itself is no longer referenced.
 *  This is because there is single, master map stored for
 *  each thread, which all ThreadLocals share, and that
 *  master map only periodically purges ""stale"" entries.
 *
 *  While not technically a memory leak, because eventually
 *  the memory will be reclaimed, it can take a long time
 *  and you can easily hit OutOfMemoryError because from the
 *  GC's standpoint the stale entries are not reclaimable.
 * 
 *  This class works around that, by only enrolling
 *  WeakReference values into the ThreadLocal, and
 *  separately holding a hard reference to each stored
 *  value.  When you call {@link #close}, these hard
 *  references are cleared and then GC is freely able to
 *  reclaim space by objects stored in it.
 *
 *  We can not rely on {@link ThreadLocal#remove()} as it
 *  only removes the value for the caller thread, whereas
 *  {@link #close} takes care of all
 *  threads.  You should not call {@link #close} until all
 *  threads are done using the instance.
 */ CloseableThreadLocal FieldDeclaration Modifier private ReferenceType ThreadLocal TypeArgument ReferenceType WeakReference TypeArgument ReferenceType T VariableDeclarator t ClassCreator ReferenceType ThreadLocal TypeArgument ReferenceType WeakReference TypeArgument ReferenceType T FieldDeclaration Modifier private ReferenceType Map TypeArgument ReferenceType Thread TypeArgument ReferenceType T VariableDeclarator hardRefs ClassCreator ReferenceType HashMap TypeArgument ReferenceType Thread TypeArgument ReferenceType T MethodDeclaration Modifier protected ReferenceType T initialValue ReturnStatement Literal null MethodDeclaration Modifier public ReferenceType T get LocalVariableDeclaration ReferenceType WeakReference TypeArgument ReferenceType T VariableDeclarator weakRef MethodInvocation t get IfStatement BinaryOperation == MemberReference weakRef Literal null BlockStatement LocalVariableDeclaration ReferenceType T VariableDeclarator iv MethodInvocation initialValue IfStatement BinaryOperation != MemberReference iv Literal null BlockStatement StatementExpression MethodInvocation MemberReference iv set ReturnStatement MemberReference iv ReturnStatement Literal null End BlockStatement ReturnStatement MethodInvocation weakRef get End MethodDeclaration Modifier public set FormalParameter ReferenceType T object StatementExpression MethodInvocation t ClassCreator ReferenceType WeakReference TypeArgument ReferenceType T MemberReference object set SynchronizedStatement MemberReference hardRefs StatementExpression MethodInvocation hardRefs MethodInvocation Thread currentThread MemberReference object put ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Thread VariableDeclarator it MethodInvocation hardRefs MethodInvocation iterator keySet MethodInvocation it hasNext BlockStatement LocalVariableDeclaration Modifier final ReferenceType Thread VariableDeclarator t MethodInvocation it next IfStatement MethodInvocation ! t isAlive StatementExpression MethodInvocation it remove End End MethodDeclaration Modifier public close StatementExpression Assignment MemberReference hardRefs Literal null = IfStatement BinaryOperation != MemberReference t Literal null BlockStatement StatementExpression MethodInvocation t remove End StatementExpression Assignment MemberReference t Literal null = TypeParameter T ReferenceType Closeable",0
790,790,,0
156,156,"CompilationUnit PackageDeclaration org.apache.lucene.search.highlight ClassDeclaration Modifier public /**
 * Formats text with different color intensity depending on the score of the
 * term using the span tag.  GradientFormatter uses a bgcolor argument to the font tag which
 * doesn't work in Mozilla, thus this class.
 *
 * @see GradientFormatter
 *
 */ SpanGradientFormatter ConstructorDeclaration Modifier public SpanGradientFormatter FormalParameter BasicType float maxScore FormalParameter ReferenceType String minForegroundColor FormalParameter ReferenceType String maxForegroundColor FormalParameter ReferenceType String minBackgroundColor FormalParameter ReferenceType String maxBackgroundColor StatementExpression SuperConstructorInvocation MemberReference maxScore MemberReference minForegroundColor MemberReference maxForegroundColor MemberReference minBackgroundColor MemberReference maxBackgroundColor MethodDeclaration Modifier public Annotation Override ReferenceType String highlightTerm FormalParameter ReferenceType String originalText FormalParameter ReferenceType TokenGroup tokenGroup IfStatement BinaryOperation == MethodInvocation tokenGroup getTotalScore Literal 0 ReturnStatement MemberReference originalText End LocalVariableDeclaration BasicType float VariableDeclarator score MethodInvocation tokenGroup getTotalScore IfStatement BinaryOperation == MemberReference score Literal 0 BlockStatement ReturnStatement MemberReference originalText End LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder BinaryOperation + MethodInvocation originalText length MemberReference EXTRA StatementExpression MethodInvocation sb Literal ""<span style=\"""" append IfStatement MemberReference highlightForeground BlockStatement StatementExpression MethodInvocation sb Literal ""color: "" append StatementExpression MethodInvocation sb MethodInvocation MemberReference score getForegroundColorString append StatementExpression MethodInvocation sb Literal ""; "" append End IfStatement MemberReference highlightBackground BlockStatement StatementExpression MethodInvocation sb Literal ""background: "" append StatementExpression MethodInvocation sb MethodInvocation MemberReference score getBackgroundColorString append StatementExpression MethodInvocation sb Literal ""; "" append End StatementExpression MethodInvocation sb Literal ""\"">"" append StatementExpression MethodInvocation sb MemberReference originalText append StatementExpression MethodInvocation sb Literal ""</span>"" append ReturnStatement MethodInvocation sb toString FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator TEMPLATE Literal ""<span style=\""background: #EEEEEE; color: #000000;\"">...</span>"" FieldDeclaration Modifier private final static BasicType int VariableDeclarator EXTRA MethodInvocation TEMPLATE length ReferenceType GradientFormatter",0
53,53,CompilationUnit PackageDeclaration org.apache.lucene.ant Import java.util.Properties InterfaceDeclaration Modifier public ConfigurableDocumentHandler MethodDeclaration configure FormalParameter ReferenceType Properties props ReferenceType DocumentHandler,0
579,579,,1
8,8,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser Import java.util.HashMap Import org.apache.lucene.search.Query Import org.w3c.dom.Element ClassDeclaration Modifier public /**
 * 
 */ QueryBuilderFactory FieldDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType QueryBuilder VariableDeclarator builders ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType QueryBuilder MethodDeclaration Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Element n ParserException LocalVariableDeclaration ReferenceType QueryBuilder VariableDeclarator builder MethodInvocation builders MethodInvocation n getNodeName get IfStatement BinaryOperation == MemberReference builder Literal null BlockStatement ThrowStatement ClassCreator ReferenceType ParserException BinaryOperation + Literal ""No QueryObjectBuilder defined for node "" MethodInvocation n getNodeName End ReturnStatement MethodInvocation builder MemberReference n getQuery MethodDeclaration Modifier public addBuilder FormalParameter ReferenceType String nodeName FormalParameter ReferenceType QueryBuilder builder StatementExpression MethodInvocation builders MemberReference nodeName MemberReference builder put MethodDeclaration Modifier public ReferenceType QueryBuilder getQueryBuilder FormalParameter ReferenceType String nodeName ReturnStatement MethodInvocation builders MemberReference nodeName get ReferenceType QueryBuilder",0
564,564,CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.builders Import java.util.List Import org.apache.lucene.messages.MessageImpl Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.builders.QueryTreeBuilder Import org.apache.lucene.queryParser.core.messages.QueryParserMessages Import org.apache.lucene.queryParser.core.nodes.AnyQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.Query Import org.apache.lucene.search.BooleanQuery.TooManyClauses ClassDeclaration Modifier public AnyQueryNodeBuilder ConstructorDeclaration Modifier public AnyQueryNodeBuilder MethodDeclaration Modifier public ReferenceType BooleanQuery build FormalParameter ReferenceType QueryNode queryNode QueryNodeException LocalVariableDeclaration ReferenceType AnyQueryNode VariableDeclarator andNode Cast ReferenceType AnyQueryNode MemberReference queryNode LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator bQuery ClassCreator ReferenceType BooleanQuery LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator children MethodInvocation andNode getChildren IfStatement BinaryOperation != MemberReference children Literal null BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNode VariableDeclarator child MemberReference children BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator obj MethodInvocation child MemberReference QueryTreeBuilder QUERY_TREE_BUILDER_TAGID getTag IfStatement BinaryOperation != MemberReference obj Literal null BlockStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator query Cast ReferenceType Query MemberReference obj TryStatement StatementExpression MethodInvocation bQuery MemberReference query MemberReference BooleanClause.Occur SHOULD add CatchClause CatchClauseParameter TooManyClauses ex ThrowStatement ClassCreator ReferenceType QueryNodeException ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages EMPTY_MESSAGE MemberReference ex End End End StatementExpression MethodInvocation bQuery MethodInvocation andNode getMinimumMatchingElements setMinimumNumberShouldMatch ReturnStatement MemberReference bQuery ReferenceType StandardQueryBuilder,0
269,269,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes Import java.util.Locale Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax.Type ClassDeclaration Modifier public /**
 * A {@link FieldQueryNode} represents a element that contains field/text tuple
 */ FieldQueryNode FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 3634521145130758265L FieldDeclaration /**
   * The term's field
   */ Modifier protected ReferenceType CharSequence VariableDeclarator field FieldDeclaration /**
   * The term's text.
   */ Modifier protected ReferenceType CharSequence VariableDeclarator text FieldDeclaration /**
   * The term's begin position.
   */ Modifier protected BasicType int VariableDeclarator begin FieldDeclaration /**
   * The term's end position.
   */ Modifier protected BasicType int VariableDeclarator end FieldDeclaration /**
   * The term's position increment.
   */ Modifier protected BasicType int VariableDeclarator positionIncrement ConstructorDeclaration Modifier public /**
   * @param field
   *          - field name
   * @param text
   *          - value
   * @param begin
   *          - position in the query string
   * @param end
   *          - position in the query string
   */ FieldQueryNode FormalParameter ReferenceType CharSequence field FormalParameter ReferenceType CharSequence text FormalParameter BasicType int begin FormalParameter BasicType int end StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference text MemberReference text = StatementExpression Assignment This MemberReference begin MemberReference begin = StatementExpression Assignment This MemberReference end MemberReference end = StatementExpression This MethodInvocation Literal true setLeaf MethodDeclaration Modifier protected ReferenceType CharSequence getTermEscaped FormalParameter ReferenceType EscapeQuerySyntax escaper ReturnStatement MethodInvocation escaper This MemberReference text MethodInvocation Locale getDefault MemberReference Type NORMAL escape MethodDeclaration Modifier protected ReferenceType CharSequence getTermEscapeQuoted FormalParameter ReferenceType EscapeQuerySyntax escaper ReturnStatement MethodInvocation escaper This MemberReference text MethodInvocation Locale getDefault MemberReference Type STRING escape MethodDeclaration Modifier public ReferenceType CharSequence toQueryString FormalParameter ReferenceType EscapeQuerySyntax escaper IfStatement MethodInvocation This MemberReference field isDefaultField BlockStatement ReturnStatement MethodInvocation MemberReference escaper getTermEscaped BlockStatement ReturnStatement BinaryOperation + BinaryOperation + This MemberReference field Literal "":"" MethodInvocation MemberReference escaper getTermEscaped End MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<field start='"" This MemberReference begin Literal ""' end='"" This MemberReference end Literal ""' field='"" This MemberReference field Literal ""' text='"" This MemberReference text Literal ""'/>"" MethodDeclaration /**
   * @return the term
   */ Modifier public ReferenceType String getTextAsString IfStatement BinaryOperation == This MemberReference text Literal null ReturnStatement Literal null ReturnStatement This MemberReference text MethodInvocation toString End MethodDeclaration /**
   * returns null if the field was not specified in the query string
   * 
   * @return the field
   */ Modifier public ReferenceType String getFieldAsString IfStatement BinaryOperation == This MemberReference field Literal null ReturnStatement Literal null ReturnStatement This MemberReference field MethodInvocation toString End MethodDeclaration Modifier public BasicType int getBegin ReturnStatement This MemberReference begin MethodDeclaration Modifier public setBegin FormalParameter BasicType int begin StatementExpression Assignment This MemberReference begin MemberReference begin = MethodDeclaration Modifier public BasicType int getEnd ReturnStatement This MemberReference end MethodDeclaration Modifier public setEnd FormalParameter BasicType int end StatementExpression Assignment This MemberReference end MemberReference end = MethodDeclaration Modifier public ReferenceType CharSequence getField ReturnStatement This MemberReference field MethodDeclaration Modifier public setField FormalParameter ReferenceType CharSequence field StatementExpression Assignment This MemberReference field MemberReference field = MethodDeclaration Modifier public BasicType int getPositionIncrement ReturnStatement This MemberReference positionIncrement MethodDeclaration Modifier public setPositionIncrement FormalParameter BasicType int pi StatementExpression Assignment This MemberReference positionIncrement MemberReference pi = MethodDeclaration /**
   * Returns the term.
   * 
   * @return The ""original"" form of the term.
   */ Modifier public ReferenceType CharSequence getText ReturnStatement This MemberReference text MethodDeclaration /**
   * @param text
   *          the text to set
   */ Modifier public setText FormalParameter ReferenceType CharSequence text StatementExpression Assignment This MemberReference text MemberReference text = MethodDeclaration Modifier public Annotation Override ReferenceType FieldQueryNode cloneTree CloneNotSupportedException LocalVariableDeclaration ReferenceType FieldQueryNode VariableDeclarator fqn Cast ReferenceType FieldQueryNode SuperMethodInvocation cloneTree StatementExpression Assignment MemberReference fqn begin This MemberReference begin = StatementExpression Assignment MemberReference fqn end This MemberReference end = StatementExpression Assignment MemberReference fqn field This MemberReference field = StatementExpression Assignment MemberReference fqn text This MemberReference text = StatementExpression Assignment MemberReference fqn positionIncrement This MemberReference positionIncrement = StatementExpression Assignment MemberReference fqn toQueryStringIgnoreFields This MemberReference toQueryStringIgnoreFields = ReturnStatement MemberReference fqn ReferenceType QueryNodeImpl ReferenceType TextableQueryNode ReferenceType FieldableNode",1
246,246,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util.Collection Import java.util.Map Import java.io.IOException ClassDeclaration Modifier abstract InvertedDocConsumer MethodDeclaration /** Add a new thread */ Modifier abstract ReferenceType InvertedDocConsumerPerThread addThread FormalParameter ReferenceType DocInverterPerThread docInverterPerThread MethodDeclaration /** Abort (called after hitting AbortException) */ Modifier abstract abort MethodDeclaration /** Flush a new segment */ Modifier abstract flush FormalParameter ReferenceType Map TypeArgument ReferenceType InvertedDocConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType InvertedDocConsumerPerField threadsAndFields FormalParameter ReferenceType SegmentWriteState state IOException MethodDeclaration /** Close doc stores */ Modifier abstract closeDocStore FormalParameter ReferenceType SegmentWriteState state IOException MethodDeclaration /** Attempt to free RAM, returning true if any RAM was
   *  freed */ Modifier abstract BasicType boolean freeRAM FieldDeclaration ReferenceType FieldInfos VariableDeclarator fieldInfos MethodDeclaration setFieldInfos FormalParameter ReferenceType FieldInfos fieldInfos StatementExpression Assignment This MemberReference fieldInfos MemberReference fieldInfos =",1
754,754,,0
225,225,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes Import java.io.Serializable Import java.util.List Import java.util.Map Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax InterfaceDeclaration Modifier public /**
 * A {@link QueryNode} is a interface implemented by all nodes on a QueryNode
 * tree.
 */ QueryNode MethodDeclaration /** convert to a query string understood by the query parser */ Modifier public ReferenceType CharSequence toQueryString FormalParameter ReferenceType EscapeQuerySyntax escapeSyntaxParser MethodDeclaration /** for printing */ Modifier public ReferenceType String toString MethodDeclaration /** get Children nodes */ Modifier public ReferenceType List TypeArgument ReferenceType QueryNode getChildren MethodDeclaration /** verify if a node is a Leaf node */ Modifier public BasicType boolean isLeaf MethodDeclaration /** verify if a node contains a tag */ Modifier public BasicType boolean containsTag FormalParameter ReferenceType CharSequence tagName MethodDeclaration /**
   * @param tagName
   * @return of stored on under that tag name
   */ Modifier public ReferenceType Object getTag FormalParameter ReferenceType CharSequence tagName MethodDeclaration Modifier public ReferenceType QueryNode getParent MethodDeclaration /**
   * Recursive clone the QueryNode tree The tags are not copied to the new tree
   * when you call the cloneTree() method
   * 
   * @return the cloned tree
   * @throws CloneNotSupportedException
   */ Modifier public ReferenceType QueryNode cloneTree CloneNotSupportedException MethodDeclaration Modifier public add FormalParameter ReferenceType QueryNode child MethodDeclaration Modifier public add FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children MethodDeclaration Modifier public set FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children MethodDeclaration /**
   * Associate the specified value with the specified tagName. If the tagName
   * already exists, the old value is replaced. The tagName and value cannot be
   * null. tagName will be converted to lowercase.
   * 
   * @param tagName
   * @param value
   */ Modifier public setTag FormalParameter ReferenceType CharSequence tagName FormalParameter ReferenceType Object value MethodDeclaration /**
   * Unset a tag. tagName will be converted to lowercase.
   * 
   * @param tagName
   */ Modifier public unsetTag FormalParameter ReferenceType CharSequence tagName MethodDeclaration Modifier public ReferenceType Map TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Object getTags ReferenceType Serializable",1
136,136,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ TurkishStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal ""m"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""n"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""miz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""niz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""muz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nuz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""müz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nüz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mız"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nız"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""leri"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ları"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""ni"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nu"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nü"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nı"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_3 ArrayInitializer ClassCreator ReferenceType Among Literal ""in"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""un"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ün"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ın"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_4 ArrayInitializer ClassCreator ReferenceType Among Literal ""a"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""e"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_5 ArrayInitializer ClassCreator ReferenceType Among Literal ""na"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ne"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_6 ArrayInitializer ClassCreator ReferenceType Among Literal ""da"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ta"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""de"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""te"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_7 ArrayInitializer ClassCreator ReferenceType Among Literal ""nda"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nde"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_8 ArrayInitializer ClassCreator ReferenceType Among Literal ""dan"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tan"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""den"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ten"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_9 ArrayInitializer ClassCreator ReferenceType Among Literal ""ndan"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nden"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_10 ArrayInitializer ClassCreator ReferenceType Among Literal ""la"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""le"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_11 ArrayInitializer ClassCreator ReferenceType Among Literal ""ca"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ce"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_12 ArrayInitializer ClassCreator ReferenceType Among Literal ""im"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""um"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""üm"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ım"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_13 ArrayInitializer ClassCreator ReferenceType Among Literal ""sin"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sun"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sün"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sın"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_14 ArrayInitializer ClassCreator ReferenceType Among Literal ""iz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""uz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""üz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ız"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_15 ArrayInitializer ClassCreator ReferenceType Among Literal ""siniz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sunuz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sünüz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sınız"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_16 ArrayInitializer ClassCreator ReferenceType Among Literal ""lar"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ler"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_17 ArrayInitializer ClassCreator ReferenceType Among Literal ""niz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nuz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nüz"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""nız"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_18 ArrayInitializer ClassCreator ReferenceType Among Literal ""dir"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tir"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dur"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tur"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dür"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tür"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dır"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tır"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_19 ArrayInitializer ClassCreator ReferenceType Among Literal ""casına"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""cesine"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_20 ArrayInitializer ClassCreator ReferenceType Among Literal ""di"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ti"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dik"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tik"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""duk"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tuk"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dük"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tük"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dık"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tık"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dim"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tim"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dum"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tum"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""düm"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tüm"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dım"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tım"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""din"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tin"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dun"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tun"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dün"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tün"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dın"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tın"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""du"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tu"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dü"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tü"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""dı"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""tı"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_21 ArrayInitializer ClassCreator ReferenceType Among Literal ""sa"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""se"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sak"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sek"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sam"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sem"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""san"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""sen"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_22 ArrayInitializer ClassCreator ReferenceType Among Literal ""miş"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""muş"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""müş"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""mış"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_23 ArrayInitializer ClassCreator ReferenceType Among Literal ""b"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""c"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""d"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ğ"" Literal - 1 Literal 4 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_vowel ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 32 Literal 8 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 1 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_U ArrayInitializer Literal 1 Literal 16 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 8 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 1 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_vowel1 ArrayInitializer Literal 1 Literal 64 Literal 16 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 1 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_vowel2 ArrayInitializer Literal 17 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 130 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_vowel3 ArrayInitializer Literal 1 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 1 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_vowel4 ArrayInitializer Literal 17 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_vowel5 ArrayInitializer Literal 65 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_vowel6 ArrayInitializer Literal 65 FieldDeclaration Modifier private BasicType boolean VariableDeclarator B_continue_stemming_noun_suffixes FieldDeclaration Modifier private BasicType int VariableDeclarator I_strlen MethodDeclaration Modifier private copy_from FormalParameter ReferenceType TurkishStemmer other StatementExpression Assignment MemberReference B_continue_stemming_noun_suffixes MemberReference other B_continue_stemming_noun_suffixes = StatementExpression Assignment MemberReference I_strlen MemberReference other I_strlen = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_check_vowel_harmony LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 LocalVariableDeclaration BasicType int VariableDeclarator v_11 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = WhileStatement golab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = BreakStatement golab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor End DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""a"" eq_s_b BlockStatement BreakStatement lab3 End WhileStatement golab4 Literal true BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel1 Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement golab4 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab3 End StatementExpression MemberReference -- cursor End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""e"" eq_s_b BlockStatement BreakStatement lab6 End WhileStatement golab7 Literal true BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel2 Literal 101 Literal 252 in_grouping_b BlockStatement BreakStatement lab8 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = BreakStatement golab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab6 End StatementExpression MemberReference -- cursor End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""ı"" eq_s_b BlockStatement BreakStatement lab9 End WhileStatement golab10 Literal true BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab11 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel3 Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab11 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = BreakStatement golab10 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab9 End StatementExpression MemberReference -- cursor End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab12 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""i"" eq_s_b BlockStatement BreakStatement lab12 End WhileStatement golab13 Literal true BlockStatement StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab14 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel4 Literal 101 Literal 105 in_grouping_b BlockStatement BreakStatement lab14 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = BreakStatement golab13 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab12 End StatementExpression MemberReference -- cursor End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab15 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""o"" eq_s_b BlockStatement BreakStatement lab15 End WhileStatement golab16 Literal true BlockStatement StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab17 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel5 Literal 111 Literal 117 in_grouping_b BlockStatement BreakStatement lab17 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = BreakStatement golab16 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab15 End StatementExpression MemberReference -- cursor End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab18 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""ö"" eq_s_b BlockStatement BreakStatement lab18 End WhileStatement golab19 Literal true BlockStatement StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab20 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel6 Literal 246 Literal 252 in_grouping_b BlockStatement BreakStatement lab20 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement golab19 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab18 End StatementExpression MemberReference -- cursor End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab21 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""u"" eq_s_b BlockStatement BreakStatement lab21 End WhileStatement golab22 Literal true BlockStatement StatementExpression Assignment MemberReference v_10 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab23 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel5 Literal 111 Literal 117 in_grouping_b BlockStatement BreakStatement lab23 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = BreakStatement golab22 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab21 End StatementExpression MemberReference -- cursor End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = IfStatement MethodInvocation ! Literal 1 Literal ""ü"" eq_s_b BlockStatement ReturnStatement Literal false End WhileStatement golab24 Literal true BlockStatement StatementExpression Assignment MemberReference v_11 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab25 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel6 Literal 246 Literal 252 in_grouping_b BlockStatement BreakStatement lab25 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_11 = BreakStatement golab24 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_11 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_suffix_with_optional_n_consonant LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""n"" eq_s_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab1 End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""n"" eq_s_b BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_suffix_with_optional_s_consonant LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""s"" eq_s_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab1 End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""s"" eq_s_b BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_suffix_with_optional_y_consonant LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""y"" eq_s_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab1 End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""y"" eq_s_b BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_suffix_with_optional_U_vowel LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_U Literal 105 Literal 305 in_grouping_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab1 End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 out_grouping_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_U Literal 105 Literal 305 in_grouping_b BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 out_grouping_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_possessives IfStatement BinaryOperation == MethodInvocation MemberReference a_0 Literal 10 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_U_vowel BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_sU IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! MemberReference g_U Literal 105 Literal 305 in_grouping_b BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_s_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_lArI IfStatement BinaryOperation == MethodInvocation MemberReference a_1 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_yU IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! MemberReference g_U Literal 105 Literal 305 in_grouping_b BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_nU IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_2 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_nUn IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_3 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_n_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_yA IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_4 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_nA IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_5 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_DA IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_6 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_ndA IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_7 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_DAn IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_8 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_ndAn IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_9 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_ylA IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_10 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_ki IfStatement MethodInvocation ! Literal 2 Literal ""ki"" eq_s_b BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_ncA IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_11 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_n_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_yUm IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_12 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_sUn IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_13 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_yUz IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_14 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_sUnUz IfStatement BinaryOperation == MethodInvocation MemberReference a_15 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_lAr IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_16 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_nUz IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_17 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_DUr IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_18 Literal 8 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_cAsInA IfStatement BinaryOperation == MethodInvocation MemberReference a_19 Literal 2 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_yDU IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_20 Literal 32 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_ysA IfStatement BinaryOperation == MethodInvocation MemberReference a_21 Literal 8 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_ymUs_ IfStatement MethodInvocation ! r_check_vowel_harmony BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation MemberReference a_22 Literal 4 find_among_b Literal 0 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_yken IfStatement MethodInvocation ! Literal 3 Literal ""ken"" eq_s_b BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_mark_suffix_with_optional_y_consonant BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_stem_nominal_verb_suffixes LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference B_continue_stemming_noun_suffixes Literal true = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_ymUs_ BlockStatement BreakStatement lab3 End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yDU BlockStatement BreakStatement lab4 End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_ysA BlockStatement BreakStatement lab5 End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement MethodInvocation ! r_mark_yken BlockStatement BreakStatement lab1 End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_cAsInA BlockStatement BreakStatement lab6 End DoStatement lab7 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sUnUz BlockStatement BreakStatement lab8 End BreakStatement lab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_lAr BlockStatement BreakStatement lab9 End BreakStatement lab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab10 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yUm BlockStatement BreakStatement lab10 End BreakStatement lab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab11 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sUn BlockStatement BreakStatement lab11 End BreakStatement lab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab12 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yUz BlockStatement BreakStatement lab12 End BreakStatement lab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = End IfStatement MethodInvocation ! r_mark_ymUs_ BlockStatement BreakStatement lab6 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab13 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_lAr BlockStatement BreakStatement lab13 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab14 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab15 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab16 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_DUr BlockStatement BreakStatement lab16 End BreakStatement lab15 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = DoStatement lab17 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yDU BlockStatement BreakStatement lab17 End BreakStatement lab15 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = DoStatement lab18 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_ysA BlockStatement BreakStatement lab18 End BreakStatement lab15 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = IfStatement MethodInvocation ! r_mark_ymUs_ BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement lab14 End End End StatementExpression Assignment MemberReference B_continue_stemming_noun_suffixes Literal false = BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab19 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_nUz BlockStatement BreakStatement lab19 End DoStatement lab20 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab21 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yDU BlockStatement BreakStatement lab21 End BreakStatement lab20 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = IfStatement MethodInvocation ! r_mark_ysA BlockStatement BreakStatement lab19 End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab22 Literal false BlockStatement DoStatement lab23 Literal false BlockStatement StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab24 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sUnUz BlockStatement BreakStatement lab24 End BreakStatement lab23 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = DoStatement lab25 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yUz BlockStatement BreakStatement lab25 End BreakStatement lab23 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = DoStatement lab26 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sUn BlockStatement BreakStatement lab26 End BreakStatement lab23 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = IfStatement MethodInvocation ! r_mark_yUm BlockStatement BreakStatement lab22 End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab27 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_ymUs_ BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = BreakStatement lab27 End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement MethodInvocation ! r_mark_DUr BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab28 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab29 Literal false BlockStatement StatementExpression Assignment MemberReference v_10 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab30 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sUnUz BlockStatement BreakStatement lab30 End BreakStatement lab29 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = DoStatement lab31 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_lAr BlockStatement BreakStatement lab31 End BreakStatement lab29 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = DoStatement lab32 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yUm BlockStatement BreakStatement lab32 End BreakStatement lab29 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = DoStatement lab33 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sUn BlockStatement BreakStatement lab33 End BreakStatement lab29 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = DoStatement lab34 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yUz BlockStatement BreakStatement lab34 End BreakStatement lab29 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = End IfStatement MethodInvocation ! r_mark_ymUs_ BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement lab28 End End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_stem_suffix_chain_before_ki LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 LocalVariableDeclaration BasicType int VariableDeclarator v_11 StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_ki BlockStatement ReturnStatement Literal false End DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_DA BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_lAr BlockStatement BreakStatement lab4 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement lab5 End End BreakStatement lab3 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = IfStatement MethodInvocation ! r_mark_possessives BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = BreakStatement lab2 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = BreakStatement lab6 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = BreakStatement lab6 End End End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_nUn BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab9 Literal false BlockStatement StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab10 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_lArI BlockStatement BreakStatement lab10 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del BreakStatement lab9 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = DoStatement lab11 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab12 Literal false BlockStatement StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab13 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_possessives BlockStatement BreakStatement lab13 End BreakStatement lab12 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = IfStatement MethodInvocation ! r_mark_sU BlockStatement BreakStatement lab11 End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab14 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement lab14 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement lab14 End End BreakStatement lab9 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = BreakStatement lab8 End End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement MethodInvocation ! r_mark_ndA BlockStatement ReturnStatement Literal false End DoStatement lab15 Literal false BlockStatement StatementExpression Assignment MemberReference v_10 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab16 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_lArI BlockStatement BreakStatement lab16 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del BreakStatement lab15 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = DoStatement lab17 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sU BlockStatement BreakStatement lab17 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_11 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab18 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_11 = BreakStatement lab18 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_11 = BreakStatement lab18 End End BreakStatement lab15 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement ReturnStatement Literal false End End End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_stem_noun_suffixes LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 LocalVariableDeclaration BasicType int VariableDeclarator v_11 LocalVariableDeclaration BasicType int VariableDeclarator v_12 LocalVariableDeclaration BasicType int VariableDeclarator v_13 LocalVariableDeclaration BasicType int VariableDeclarator v_14 LocalVariableDeclaration BasicType int VariableDeclarator v_15 LocalVariableDeclaration BasicType int VariableDeclarator v_16 LocalVariableDeclaration BasicType int VariableDeclarator v_17 LocalVariableDeclaration BasicType int VariableDeclarator v_18 LocalVariableDeclaration BasicType int VariableDeclarator v_19 LocalVariableDeclaration BasicType int VariableDeclarator v_20 LocalVariableDeclaration BasicType int VariableDeclarator v_21 LocalVariableDeclaration BasicType int VariableDeclarator v_22 LocalVariableDeclaration BasicType int VariableDeclarator v_23 LocalVariableDeclaration BasicType int VariableDeclarator v_24 LocalVariableDeclaration BasicType int VariableDeclarator v_25 LocalVariableDeclaration BasicType int VariableDeclarator v_26 LocalVariableDeclaration BasicType int VariableDeclarator v_27 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = BreakStatement lab2 End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_ncA BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement DoStatement lab5 Literal false BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lArI BlockStatement BreakStatement lab6 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = DoStatement lab7 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab8 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_possessives BlockStatement BreakStatement lab9 End BreakStatement lab8 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = IfStatement MethodInvocation ! r_mark_sU BlockStatement BreakStatement lab7 End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab10 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = BreakStatement lab10 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = BreakStatement lab10 End End BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab4 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab4 End End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab11 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab12 Literal false BlockStatement StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab13 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_ndA BlockStatement BreakStatement lab13 End BreakStatement lab12 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = IfStatement MethodInvocation ! r_mark_nA BlockStatement BreakStatement lab11 End End DoStatement lab14 Literal false BlockStatement StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab15 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_lArI BlockStatement BreakStatement lab15 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del BreakStatement lab14 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = DoStatement lab16 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sU BlockStatement BreakStatement lab16 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab17 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement lab17 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = BreakStatement lab17 End End BreakStatement lab14 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement BreakStatement lab11 End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab18 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab19 Literal false BlockStatement StatementExpression Assignment MemberReference v_10 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab20 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_ndAn BlockStatement BreakStatement lab20 End BreakStatement lab19 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = IfStatement MethodInvocation ! r_mark_nU BlockStatement BreakStatement lab18 End End DoStatement lab21 Literal false BlockStatement StatementExpression Assignment MemberReference v_11 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab22 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_sU BlockStatement BreakStatement lab22 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_12 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab23 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_12 = BreakStatement lab23 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_12 = BreakStatement lab23 End End BreakStatement lab21 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_11 = IfStatement MethodInvocation ! r_mark_lArI BlockStatement BreakStatement lab18 End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab24 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_DAn BlockStatement BreakStatement lab24 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_13 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab25 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab26 Literal false BlockStatement StatementExpression Assignment MemberReference v_14 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab27 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_possessives BlockStatement BreakStatement lab27 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_15 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab28 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_15 = BreakStatement lab28 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_15 = BreakStatement lab28 End End BreakStatement lab26 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_14 = DoStatement lab29 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_lAr BlockStatement BreakStatement lab29 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_16 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab30 Literal false BlockStatement IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_16 = BreakStatement lab30 End End BreakStatement lab26 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_14 = IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_13 = BreakStatement lab25 End End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab31 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab32 Literal false BlockStatement StatementExpression Assignment MemberReference v_17 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab33 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_nUn BlockStatement BreakStatement lab33 End BreakStatement lab32 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_17 = IfStatement MethodInvocation ! r_mark_ylA BlockStatement BreakStatement lab31 End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_18 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab34 Literal false BlockStatement DoStatement lab35 Literal false BlockStatement StatementExpression Assignment MemberReference v_19 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab36 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement BreakStatement lab36 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement BreakStatement lab36 End BreakStatement lab35 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_19 = DoStatement lab37 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab38 Literal false BlockStatement StatementExpression Assignment MemberReference v_20 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab39 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_possessives BlockStatement BreakStatement lab39 End BreakStatement lab38 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_20 = IfStatement MethodInvocation ! r_mark_sU BlockStatement BreakStatement lab37 End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_21 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab40 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_21 = BreakStatement lab40 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_21 = BreakStatement lab40 End End BreakStatement lab35 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_19 = IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_18 = BreakStatement lab34 End End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab41 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lArI BlockStatement BreakStatement lab41 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab42 Literal false BlockStatement IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement BreakStatement lab42 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab43 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab44 Literal false BlockStatement StatementExpression Assignment MemberReference v_22 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab45 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_DA BlockStatement BreakStatement lab45 End BreakStatement lab44 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_22 = DoStatement lab46 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_yU BlockStatement BreakStatement lab46 End BreakStatement lab44 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_22 = IfStatement MethodInvocation ! r_mark_yA BlockStatement BreakStatement lab43 End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_23 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab47 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab48 Literal false BlockStatement StatementExpression Assignment MemberReference v_24 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab49 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_possessives BlockStatement BreakStatement lab49 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_25 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab50 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_25 = BreakStatement lab50 End End BreakStatement lab48 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_24 = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_23 = BreakStatement lab47 End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_23 = BreakStatement lab47 End End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab51 Literal false BlockStatement StatementExpression Assignment MemberReference v_26 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab52 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_possessives BlockStatement BreakStatement lab52 End BreakStatement lab51 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_26 = IfStatement MethodInvocation ! r_mark_sU BlockStatement ReturnStatement Literal false End End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_27 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab53 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! r_mark_lAr BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_27 = BreakStatement lab53 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_stem_suffix_chain_before_ki BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_27 = BreakStatement lab53 End End End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_post_process_last_consonants LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_23 Literal 4 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""p"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""ç"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""t"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation Literal ""k"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_append_U_to_stems_ending_with_d_or_g LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 LocalVariableDeclaration BasicType int VariableDeclarator v_11 LocalVariableDeclaration BasicType int VariableDeclarator v_12 LocalVariableDeclaration BasicType int VariableDeclarator v_13 LocalVariableDeclaration BasicType int VariableDeclarator v_14 LocalVariableDeclaration BasicType int VariableDeclarator v_15 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""d"" eq_s_b BlockStatement BreakStatement lab1 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement MethodInvocation ! Literal 1 Literal ""g"" eq_s_b BlockStatement ReturnStatement Literal false End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = WhileStatement golab4 Literal true BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = BreakStatement golab4 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab3 End StatementExpression MemberReference -- cursor End DoStatement lab6 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""a"" eq_s_b BlockStatement BreakStatement lab7 End BreakStatement lab6 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = IfStatement MethodInvocation ! Literal 1 Literal ""ı"" eq_s_b BlockStatement BreakStatement lab3 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c MemberReference cursor StatementExpression MethodInvocation MemberReference cursor MemberReference cursor Literal ""ı"" insert StatementExpression Assignment MemberReference cursor MemberReference c = BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab8 Literal false BlockStatement StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = WhileStatement golab9 Literal true BlockStatement StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab10 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab10 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = BreakStatement golab9 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab8 End StatementExpression MemberReference -- cursor End DoStatement lab11 Literal false BlockStatement StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab12 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""e"" eq_s_b BlockStatement BreakStatement lab12 End BreakStatement lab11 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = IfStatement MethodInvocation ! Literal 1 Literal ""i"" eq_s_b BlockStatement BreakStatement lab8 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c MemberReference cursor StatementExpression MethodInvocation MemberReference cursor MemberReference cursor Literal ""i"" insert StatementExpression Assignment MemberReference cursor MemberReference c = BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab13 Literal false BlockStatement StatementExpression Assignment MemberReference v_10 BinaryOperation - MemberReference limit MemberReference cursor = WhileStatement golab14 Literal true BlockStatement StatementExpression Assignment MemberReference v_11 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab15 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab15 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_11 = BreakStatement golab14 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_11 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab13 End StatementExpression MemberReference -- cursor End DoStatement lab16 Literal false BlockStatement StatementExpression Assignment MemberReference v_12 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab17 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""o"" eq_s_b BlockStatement BreakStatement lab17 End BreakStatement lab16 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_12 = IfStatement MethodInvocation ! Literal 1 Literal ""u"" eq_s_b BlockStatement BreakStatement lab13 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c MemberReference cursor StatementExpression MethodInvocation MemberReference cursor MemberReference cursor Literal ""u"" insert StatementExpression Assignment MemberReference cursor MemberReference c = BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_13 BinaryOperation - MemberReference limit MemberReference cursor = WhileStatement golab18 Literal true BlockStatement StatementExpression Assignment MemberReference v_14 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab19 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping_b BlockStatement BreakStatement lab19 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_14 = BreakStatement golab18 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_14 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor End DoStatement lab20 Literal false BlockStatement StatementExpression Assignment MemberReference v_15 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab21 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""ö"" eq_s_b BlockStatement BreakStatement lab21 End BreakStatement lab20 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_15 = IfStatement MethodInvocation ! Literal 1 Literal ""ü"" eq_s_b BlockStatement ReturnStatement Literal false End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_13 = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c MemberReference cursor StatementExpression MethodInvocation MemberReference cursor MemberReference cursor Literal ""ü"" insert StatementExpression Assignment MemberReference cursor MemberReference c = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_more_than_one_syllable_word LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference v_1 MemberReference cursor = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator v_2 Literal 2 WhileStatement replab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab1 Literal false BlockStatement WhileStatement golab2 Literal true BlockStatement DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_vowel Literal 97 Literal 305 in_grouping BlockStatement BreakStatement lab3 End BreakStatement golab2 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor End StatementExpression MemberReference -- v_2 ContinueStatement replab0 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = BreakStatement replab0 End IfStatement BinaryOperation > MemberReference v_2 Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_is_reserved_word LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_4 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = WhileStatement golab2 Literal true BlockStatement DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""ad"" eq_s BlockStatement BreakStatement lab3 End BreakStatement golab2 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_strlen Literal 2 = IfStatement BinaryOperation == MemberReference I_strlen MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = BreakStatement lab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference v_4 MemberReference cursor = WhileStatement golab4 Literal true BlockStatement DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! Literal 5 Literal ""soyad"" eq_s BlockStatement BreakStatement lab5 End BreakStatement golab4 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_strlen Literal 5 = IfStatement BinaryOperation == MemberReference I_strlen MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference v_4 = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_postlude LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_is_reserved_word BlockStatement BreakStatement lab0 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_append_U_to_stems_ending_with_d_or_g BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_post_process_last_consonants BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 IfStatement MethodInvocation ! r_more_than_one_syllable_word BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_stem_nominal_verb_suffixes BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement MemberReference ! B_continue_stemming_noun_suffixes BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_stem_noun_suffixes BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = IfStatement MethodInvocation ! r_postlude BlockStatement ReturnStatement Literal false End ReturnStatement Literal true ReferenceType SnowballProgram",1
324,324,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.util.StringHelper ClassDeclaration Modifier public final /**
  A Term represents a word from text.  This is the unit of search.  It is
  composed of two elements, the text of the word, as a string, and the name of
  the field that the text occurred in, an interned string.

  Note that terms may represent more than words from text fields, but also
  things like dates, email addresses, urls, etc.  */ Term FieldDeclaration ReferenceType String VariableDeclarator field FieldDeclaration ReferenceType String VariableDeclarator text ConstructorDeclaration Modifier public /** Constructs a Term with the given field and text.
   * <p>Note that a null field or null text value results in undefined
   * behavior for most Lucene APIs that accept a Term parameter. */ Term FormalParameter ReferenceType String fld FormalParameter ReferenceType String txt StatementExpression Assignment MemberReference field MethodInvocation StringHelper MemberReference fld intern = StatementExpression Assignment MemberReference text MemberReference txt = ConstructorDeclaration Modifier public /** Constructs a Term with the given field and empty text.
   * This serves two purposes: 1) reuse of a Term with the same field.
   * 2) pattern for a query.
   * 
   * @param fld
   */ Term FormalParameter ReferenceType String fld StatementExpression ExplicitConstructorInvocation MemberReference fld Literal """" Literal true ConstructorDeclaration Term FormalParameter ReferenceType String fld FormalParameter ReferenceType String txt FormalParameter BasicType boolean intern StatementExpression Assignment MemberReference field TernaryExpression MemberReference intern MethodInvocation StringHelper MemberReference fld intern MemberReference fld = StatementExpression Assignment MemberReference text MemberReference txt = MethodDeclaration /** Returns the field of this term, an interned string.   The field indicates
    the part of a document which this term came from. */ Modifier public final ReferenceType String field ReturnStatement MemberReference field MethodDeclaration /** Returns the text of this term.  In the case of words, this is simply the
    text of the word.  In the case of dates and other types, this is an
    encoding of the object as a string.  */ Modifier public final ReferenceType String text ReturnStatement MemberReference text MethodDeclaration /**
   * Optimized construction of new Terms by reusing same field as this Term
   * - avoids field.intern() overhead 
   * @param text The text of the new term (field is implicitly same as this Term instance)
   * @return A new Term
   */ Modifier public ReferenceType Term createTerm FormalParameter ReferenceType String text ReturnStatement ClassCreator ReferenceType Term MemberReference field MemberReference text Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference obj Literal null ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType Term VariableDeclarator other Cast ReferenceType Term MemberReference obj IfStatement BinaryOperation == MemberReference field Literal null BlockStatement IfStatement BinaryOperation != MemberReference other field Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! field MemberReference other field equals ReturnStatement Literal false End End IfStatement BinaryOperation == MemberReference text Literal null BlockStatement IfStatement BinaryOperation != MemberReference other text Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! text MemberReference other text equals ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result Literal 1 StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference field Literal null Literal 0 MethodInvocation field hashCode = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference text Literal null Literal 0 MethodInvocation text hashCode = ReturnStatement MemberReference result MethodDeclaration /** Compares two terms, returning a negative integer if this
    term belongs before the argument, zero if this term is equal to the
    argument, and a positive integer if this term belongs after the argument.

    The ordering of terms is first by field, then by text.*/ Modifier public final BasicType int compareTo FormalParameter ReferenceType Term other IfStatement BinaryOperation == MemberReference field MemberReference other field ReturnStatement MethodInvocation text MemberReference other text compareTo ReturnStatement MethodInvocation field MemberReference other field compareTo End MethodDeclaration /** Resets the field and text of a Term. */ Modifier final set FormalParameter ReferenceType String fld FormalParameter ReferenceType String txt StatementExpression Assignment MemberReference field MemberReference fld = StatementExpression Assignment MemberReference text MemberReference txt = MethodDeclaration Modifier public final Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + MemberReference field Literal "":"" MemberReference text MethodDeclaration Modifier private readObject FormalParameter ReferenceType java ReferenceType io ReferenceType ObjectInputStream in java.io.IOException ClassNotFoundException StatementExpression MethodInvocation in defaultReadObject StatementExpression Assignment MemberReference field MethodInvocation StringHelper MemberReference field intern = ReferenceType Comparable TypeArgument ReferenceType Term ReferenceType java ReferenceType io ReferenceType Serializable",0
140,140,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.benchmark.byTask.feeds.DocMaker Import org.apache.lucene.document.Document Import org.apache.lucene.index.Term Import org.apache.lucene.index.IndexWriter ClassDeclaration Modifier public /**
 * Update a document, using IndexWriter.updateDocument,
 * optionally with of a certain size.
 * <br>Other side effects: none.
 * <br>Takes optional param: document size. 
 */ UpdateDocTask ConstructorDeclaration Modifier public UpdateDocTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData FieldDeclaration Modifier private BasicType int VariableDeclarator docSize Literal 0 FieldDeclaration Modifier private ReferenceType Document VariableDeclarator doc Literal null MethodDeclaration Modifier public Annotation Override setup Exception StatementExpression SuperMethodInvocation setup LocalVariableDeclaration ReferenceType DocMaker VariableDeclarator docMaker MethodInvocation MethodInvocation getDocMaker getRunData IfStatement BinaryOperation > MemberReference docSize Literal 0 BlockStatement StatementExpression Assignment MemberReference doc MethodInvocation docMaker MemberReference docSize makeDocument = BlockStatement StatementExpression Assignment MemberReference doc MethodInvocation docMaker makeDocument = End MethodDeclaration Modifier public Annotation Override tearDown Exception StatementExpression Assignment MemberReference doc Literal null = StatementExpression SuperMethodInvocation tearDown MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator docID MethodInvocation doc MemberReference DocMaker ID_FIELD get IfStatement BinaryOperation == MemberReference docID Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""document must define the docid field"" End LocalVariableDeclaration Modifier final ReferenceType IndexWriter VariableDeclarator iw MethodInvocation MethodInvocation getIndexWriter getRunData StatementExpression MethodInvocation iw ClassCreator ReferenceType Term MemberReference DocMaker ID_FIELD MemberReference docID MemberReference doc updateDocument ReturnStatement Literal 1 MethodDeclaration Modifier protected Annotation Override ReferenceType String getLogMessage FormalParameter BasicType int recsCount ReturnStatement BinaryOperation + BinaryOperation + Literal ""updated "" MemberReference recsCount Literal "" docs"" MethodDeclaration /**
   * Set the params (docSize only)
   * @param params docSize, or 0 for no limit.
   */ Modifier public Annotation Override setParams FormalParameter ReferenceType String params StatementExpression SuperMethodInvocation MemberReference params setParams StatementExpression Assignment MemberReference docSize Cast BasicType int MethodInvocation Float MemberReference params parseFloat = MethodDeclaration Modifier public Annotation Override BasicType boolean supportsParams ReturnStatement Literal true ReferenceType PerfTask",0
729,729,,1
286,286,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor Import org.apache.lucene.util.AttributeImpl ClassDeclaration Modifier public /**
 * This attribute is used by {@link AllowLeadingWildcardProcessor} processor and
 * must be defined in the {@link QueryConfigHandler}. It basically tells the
 * processor if it should allow leading wildcard. <br/>
 * 
 * @see org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttribute
 */ AllowLeadingWildcardAttributeImpl FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal - 2804763012723049527L FieldDeclaration Modifier private BasicType boolean VariableDeclarator allowLeadingWildcard Literal false MethodDeclaration Modifier public setAllowLeadingWildcard FormalParameter BasicType boolean allowLeadingWildcard StatementExpression Assignment This MemberReference allowLeadingWildcard MemberReference allowLeadingWildcard = MethodDeclaration Modifier public BasicType boolean isAllowLeadingWildcard ReturnStatement This MemberReference allowLeadingWildcard MethodDeclaration Modifier public Annotation Override clear ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override copyTo FormalParameter ReferenceType AttributeImpl target ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object other IfStatement BinaryOperation && BinaryOperation instanceof MemberReference other ReferenceType AllowLeadingWildcardAttributeImpl BinaryOperation == Cast ReferenceType AllowLeadingWildcardAttributeImpl MemberReference other This MemberReference allowLeadingWildcard BlockStatement ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement TernaryExpression This MemberReference allowLeadingWildcard Literal - 1 MemberReference Integer MAX_VALUE MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""<allowLeadingWildcard allowLeadingWildcard="" This MemberReference allowLeadingWildcard Literal ""/>"" ReferenceType AttributeImpl ReferenceType AllowLeadingWildcardAttribute",0
373,373,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geometry.shape ClassDeclaration Modifier public /**
 * Point class.  This type is mutable.
 *
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ Point2D FieldDeclaration Modifier private BasicType double VariableDeclarator x FieldDeclaration Modifier private BasicType double VariableDeclarator y ConstructorDeclaration Modifier public Point2D FormalParameter BasicType double x FormalParameter BasicType double y StatementExpression Assignment This MemberReference x MemberReference x = StatementExpression Assignment This MemberReference y MemberReference y = ConstructorDeclaration Modifier public Point2D StatementExpression Assignment This MemberReference x Literal 0 = StatementExpression Assignment This MemberReference y Literal 0 = ConstructorDeclaration Modifier public Point2D FormalParameter ReferenceType Point2D other StatementExpression Assignment This MemberReference x MemberReference other x = StatementExpression Assignment This MemberReference y MemberReference other y = MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""("" MemberReference x Literal "","" MemberReference y Literal "")"" MethodDeclaration Modifier public BasicType double getX ReturnStatement MemberReference x MethodDeclaration Modifier public BasicType double getY ReturnStatement MemberReference y MethodDeclaration Modifier public BasicType double x ReturnStatement MemberReference x MethodDeclaration Modifier public BasicType double y ReturnStatement MemberReference y MethodDeclaration Modifier public x FormalParameter BasicType double x StatementExpression Assignment This MemberReference x MemberReference x = MethodDeclaration Modifier public y FormalParameter BasicType double y StatementExpression Assignment This MemberReference y MemberReference y = MethodDeclaration Modifier public setX FormalParameter BasicType double x StatementExpression Assignment This MemberReference x MemberReference x = MethodDeclaration Modifier public setY FormalParameter BasicType double y StatementExpression Assignment This MemberReference y MemberReference y = MethodDeclaration Modifier public set FormalParameter BasicType double x FormalParameter BasicType double y StatementExpression Assignment This MemberReference x MemberReference x = StatementExpression Assignment This MemberReference y MemberReference y = MethodDeclaration Modifier public add FormalParameter ReferenceType Vector2D v StatementExpression Assignment This MemberReference x MethodInvocation v getX += StatementExpression Assignment This MemberReference y MethodInvocation v getY += MethodDeclaration Modifier public set FormalParameter ReferenceType Point2D p1 StatementExpression Assignment This MemberReference x MethodInvocation p1 getX = StatementExpression Assignment This MemberReference y MethodInvocation p1 getY = MethodDeclaration Modifier public add FormalParameter ReferenceType Point2D a StatementExpression Assignment This MemberReference x MethodInvocation a getX += StatementExpression Assignment This MemberReference y MethodInvocation a getY += MethodDeclaration Modifier public set FormalParameter ReferenceType Vector2D v StatementExpression Assignment This MemberReference x MethodInvocation v getX = StatementExpression Assignment This MemberReference y MethodInvocation v getY = MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result Literal 1 LocalVariableDeclaration BasicType long VariableDeclarator temp StatementExpression Assignment MemberReference temp MethodInvocation Double MemberReference x doubleToLongBits = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result Cast BasicType int BinaryOperation ^ MemberReference temp BinaryOperation >>> MemberReference temp Literal 32 = StatementExpression Assignment MemberReference temp MethodInvocation Double MemberReference y doubleToLongBits = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result Cast BasicType int BinaryOperation ^ MemberReference temp BinaryOperation >>> MemberReference temp Literal 32 = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference obj Literal null ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType Point2D VariableDeclarator other Cast ReferenceType Point2D MemberReference obj IfStatement BinaryOperation != MethodInvocation Double MemberReference x doubleToLongBits MethodInvocation Double MemberReference other x doubleToLongBits ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation Double MemberReference y doubleToLongBits MethodInvocation Double MemberReference other y doubleToLongBits ReturnStatement Literal false End ReturnStatement Literal true",0
658,658,,1
941,941,,1
168,168,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexOutput Import org.apache.lucene.util.StringHelper Import org.apache.lucene.util.UnicodeUtil Import java.io.IOException ClassDeclaration Modifier final TermVectorsWriter FieldDeclaration Modifier private ReferenceType IndexOutput VariableDeclarator tvx Literal null VariableDeclarator tvd Literal null VariableDeclarator tvf Literal null FieldDeclaration Modifier private ReferenceType FieldInfos VariableDeclarator fieldInfos FieldDeclaration Modifier final ReferenceType UnicodeUtil ReferenceType UTF8Result VariableDeclarator utf8Results ArrayCreator ReferenceType UnicodeUtil ReferenceType UTF8Result ArrayInitializer ClassCreator ReferenceType UnicodeUtil ReferenceType UTF8Result ClassCreator ReferenceType UnicodeUtil ReferenceType UTF8Result ConstructorDeclaration Modifier public TermVectorsWriter FormalParameter ReferenceType Directory directory FormalParameter ReferenceType String segment FormalParameter ReferenceType FieldInfos fieldInfos IOException StatementExpression Assignment MemberReference tvx MethodInvocation directory BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION createOutput = StatementExpression MethodInvocation tvx MemberReference TermVectorsReader FORMAT_CURRENT writeInt StatementExpression Assignment MemberReference tvd MethodInvocation directory BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames VECTORS_DOCUMENTS_EXTENSION createOutput = StatementExpression MethodInvocation tvd MemberReference TermVectorsReader FORMAT_CURRENT writeInt StatementExpression Assignment MemberReference tvf MethodInvocation directory BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames VECTORS_FIELDS_EXTENSION createOutput = StatementExpression MethodInvocation tvf MemberReference TermVectorsReader FORMAT_CURRENT writeInt StatementExpression Assignment This MemberReference fieldInfos MemberReference fieldInfos = MethodDeclaration /**
   * Add a complete document specified by all its term vectors. If document has no
   * term vectors, add value for tvx.
   * 
   * @param vectors
   * @throws IOException
   */ Modifier public final addAllDocVectors FormalParameter ReferenceType TermFreqVector vectors IOException StatementExpression MethodInvocation tvx MethodInvocation tvd getFilePointer writeLong StatementExpression MethodInvocation tvx MethodInvocation tvf getFilePointer writeLong IfStatement BinaryOperation != MemberReference vectors Literal null BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numFields MemberReference vectors length StatementExpression MethodInvocation tvd MemberReference numFields writeVInt LocalVariableDeclaration BasicType long VariableDeclarator fieldPointers ArrayCreator BasicType long MemberReference numFields ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numFields MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i fieldPointers MethodInvocation tvf getFilePointer = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator fieldNumber MethodInvocation fieldInfos MemberReference ArraySelector MemberReference i MethodInvocation getField vectors fieldNumber StatementExpression MethodInvocation tvd MemberReference fieldNumber writeVInt LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numTerms MemberReference ArraySelector MemberReference i MethodInvocation size vectors StatementExpression MethodInvocation tvf MemberReference numTerms writeVInt LocalVariableDeclaration Modifier final ReferenceType TermPositionVector VariableDeclarator tpVector LocalVariableDeclaration Modifier final BasicType byte VariableDeclarator bits LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator storePositions LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator storeOffsets IfStatement BinaryOperation instanceof MemberReference ArraySelector MemberReference i vectors ReferenceType TermPositionVector BlockStatement StatementExpression Assignment MemberReference tpVector Cast ReferenceType TermPositionVector MemberReference ArraySelector MemberReference i vectors = StatementExpression Assignment MemberReference storePositions BinaryOperation && BinaryOperation > MethodInvocation tpVector size Literal 0 BinaryOperation != MethodInvocation tpVector Literal 0 getTermPositions Literal null = StatementExpression Assignment MemberReference storeOffsets BinaryOperation && BinaryOperation > MethodInvocation tpVector size Literal 0 BinaryOperation != MethodInvocation tpVector Literal 0 getOffsets Literal null = StatementExpression Assignment MemberReference bits Cast BasicType byte BinaryOperation + TernaryExpression MemberReference storePositions MemberReference TermVectorsReader STORE_POSITIONS_WITH_TERMVECTOR Literal 0 TernaryExpression MemberReference storeOffsets MemberReference TermVectorsReader STORE_OFFSET_WITH_TERMVECTOR Literal 0 = BlockStatement StatementExpression Assignment MemberReference tpVector Literal null = StatementExpression Assignment MemberReference bits Literal 0 = StatementExpression Assignment MemberReference storePositions Literal false = StatementExpression Assignment MemberReference storeOffsets Literal false = End StatementExpression MethodInvocation tvf MemberReference bits writeVInt LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator terms MemberReference ArraySelector MemberReference i MethodInvocation getTerms vectors LocalVariableDeclaration Modifier final BasicType int VariableDeclarator freqs MemberReference ArraySelector MemberReference i MethodInvocation getTermFrequencies vectors LocalVariableDeclaration BasicType int VariableDeclarator utf8Upto Literal 0 StatementExpression Assignment MemberReference ArraySelector Literal 1 MemberReference length utf8Results Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference numTerms MemberReference ++ j BlockStatement StatementExpression MethodInvocation UnicodeUtil MemberReference ArraySelector MemberReference j terms Literal 0 MemberReference ArraySelector MemberReference j MethodInvocation length terms MemberReference ArraySelector MemberReference utf8Upto utf8Results UTF16toUTF8 LocalVariableDeclaration BasicType int VariableDeclarator start MethodInvocation StringHelper MemberReference ArraySelector BinaryOperation - Literal 1 MemberReference utf8Upto MemberReference result utf8Results MemberReference ArraySelector BinaryOperation - Literal 1 MemberReference utf8Upto MemberReference length utf8Results MemberReference ArraySelector MemberReference utf8Upto MemberReference result utf8Results MemberReference ArraySelector MemberReference utf8Upto MemberReference length utf8Results bytesDifference LocalVariableDeclaration BasicType int VariableDeclarator length BinaryOperation - MemberReference ArraySelector MemberReference utf8Upto MemberReference length utf8Results MemberReference start StatementExpression MethodInvocation tvf MemberReference start writeVInt StatementExpression MethodInvocation tvf MemberReference length writeVInt StatementExpression MethodInvocation tvf MemberReference ArraySelector MemberReference utf8Upto MemberReference result utf8Results MemberReference start MemberReference length writeBytes StatementExpression Assignment MemberReference utf8Upto BinaryOperation - Literal 1 MemberReference utf8Upto = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator termFreq MemberReference ArraySelector MemberReference j freqs StatementExpression MethodInvocation tvf MemberReference termFreq writeVInt IfStatement MemberReference storePositions BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator positions MethodInvocation tpVector MemberReference j getTermPositions IfStatement BinaryOperation == MemberReference positions Literal null ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""Trying to write positions that are null!"" End AssertStatement BinaryOperation == MemberReference positions length MemberReference termFreq LocalVariableDeclaration BasicType int VariableDeclarator lastPosition Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator k Literal 0 BinaryOperation < MemberReference k MemberReference positions length MemberReference ++ k BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator position MemberReference ArraySelector MemberReference k positions StatementExpression MethodInvocation tvf BinaryOperation - MemberReference position MemberReference lastPosition writeVInt StatementExpression Assignment MemberReference lastPosition MemberReference position = End End IfStatement MemberReference storeOffsets BlockStatement LocalVariableDeclaration Modifier final ReferenceType TermVectorOffsetInfo VariableDeclarator offsets MethodInvocation tpVector MemberReference j getOffsets IfStatement BinaryOperation == MemberReference offsets Literal null ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""Trying to write offsets that are null!"" End AssertStatement BinaryOperation == MemberReference offsets length MemberReference termFreq LocalVariableDeclaration BasicType int VariableDeclarator lastEndOffset Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator k Literal 0 BinaryOperation < MemberReference k MemberReference offsets length MemberReference ++ k BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator startOffset MemberReference ArraySelector MemberReference k MethodInvocation getStartOffset offsets LocalVariableDeclaration Modifier final BasicType int VariableDeclarator endOffset MemberReference ArraySelector MemberReference k MethodInvocation getEndOffset offsets StatementExpression MethodInvocation tvf BinaryOperation - MemberReference startOffset MemberReference lastEndOffset writeVInt StatementExpression MethodInvocation tvf BinaryOperation - MemberReference endOffset MemberReference startOffset writeVInt StatementExpression Assignment MemberReference lastEndOffset MemberReference endOffset = End End End End IfStatement BinaryOperation > MemberReference numFields Literal 1 BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator lastFieldPointer MemberReference ArraySelector Literal 0 fieldPointers ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference numFields MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final BasicType long VariableDeclarator fieldPointer MemberReference ArraySelector MemberReference i fieldPointers StatementExpression MethodInvocation tvd BinaryOperation - MemberReference fieldPointer MemberReference lastFieldPointer writeVLong StatementExpression Assignment MemberReference lastFieldPointer MemberReference fieldPointer = End End StatementExpression MethodInvocation tvd Literal 0 writeVInt End MethodDeclaration /**
   * Do a bulk copy of numDocs documents from reader to our
   * streams.  This is used to expedite merging, if the
   * field numbers are congruent.
   */ Modifier final addRawDocuments FormalParameter ReferenceType TermVectorsReader reader FormalParameter BasicType int tvdLengths FormalParameter BasicType int tvfLengths FormalParameter BasicType int numDocs IOException LocalVariableDeclaration BasicType long VariableDeclarator tvdPosition MethodInvocation tvd getFilePointer LocalVariableDeclaration BasicType long VariableDeclarator tvfPosition MethodInvocation tvf getFilePointer LocalVariableDeclaration BasicType long VariableDeclarator tvdStart MemberReference tvdPosition LocalVariableDeclaration BasicType long VariableDeclarator tvfStart MemberReference tvfPosition ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numDocs MemberReference ++ i BlockStatement StatementExpression MethodInvocation tvx MemberReference tvdPosition writeLong StatementExpression Assignment MemberReference tvdPosition MemberReference ArraySelector MemberReference i tvdLengths += StatementExpression MethodInvocation tvx MemberReference tvfPosition writeLong StatementExpression Assignment MemberReference tvfPosition MemberReference ArraySelector MemberReference i tvfLengths += End StatementExpression MethodInvocation tvd MethodInvocation reader getTvdStream BinaryOperation - MemberReference tvdPosition MemberReference tvdStart copyBytes StatementExpression MethodInvocation tvf MethodInvocation reader getTvfStream BinaryOperation - MemberReference tvfPosition MemberReference tvfStart copyBytes AssertStatement BinaryOperation == MethodInvocation tvd getFilePointer MemberReference tvdPosition AssertStatement BinaryOperation == MethodInvocation tvf getFilePointer MemberReference tvfPosition MethodDeclaration /** Close all streams. */ Modifier final close IOException LocalVariableDeclaration ReferenceType IOException VariableDeclarator keep Literal null IfStatement BinaryOperation != MemberReference tvx Literal null TryStatement StatementExpression MethodInvocation tvx close CatchClause CatchClauseParameter IOException e IfStatement BinaryOperation == MemberReference keep Literal null StatementExpression Assignment MemberReference keep MemberReference e = End End IfStatement BinaryOperation != MemberReference tvd Literal null TryStatement StatementExpression MethodInvocation tvd close CatchClause CatchClauseParameter IOException e IfStatement BinaryOperation == MemberReference keep Literal null StatementExpression Assignment MemberReference keep MemberReference e = End End IfStatement BinaryOperation != MemberReference tvf Literal null TryStatement StatementExpression MethodInvocation tvf close CatchClause CatchClauseParameter IOException e IfStatement BinaryOperation == MemberReference keep Literal null StatementExpression Assignment MemberReference keep MemberReference e = End End IfStatement BinaryOperation != MemberReference keep Literal null ThrowStatement Cast ReferenceType IOException MethodInvocation keep fillInStackTrace End",0
907,907,,0
157,157,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ RussianStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal ""в"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ив"" Literal 0 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ыв"" Literal 0 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""вши"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ивши"" Literal 3 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ывши"" Literal 3 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""вшись"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ившись"" Literal 6 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ывшись"" Literal 6 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""ее"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ие"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ое"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ые"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ими"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ыми"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ей"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ий"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ой"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ый"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ем"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""им"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ом"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ым"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""его"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ого"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ему"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ому"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""их"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ых"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ею"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ою"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ую"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""юю"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ая"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""яя"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""ем"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""нн"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""вш"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ивш"" Literal 2 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ывш"" Literal 2 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""щ"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ющ"" Literal 5 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ующ"" Literal 6 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_3 ArrayInitializer ClassCreator ReferenceType Among Literal ""сь"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ся"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_4 ArrayInitializer ClassCreator ReferenceType Among Literal ""ла"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ила"" Literal 0 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ыла"" Literal 0 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""на"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ена"" Literal 3 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ете"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ите"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""йте"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ейте"" Literal 7 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""уйте"" Literal 7 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ли"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""или"" Literal 10 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ыли"" Literal 10 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""й"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ей"" Literal 13 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""уй"" Literal 13 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""л"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ил"" Literal 16 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ыл"" Literal 16 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ем"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""им"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ым"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""н"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ен"" Literal 22 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ло"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ило"" Literal 24 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ыло"" Literal 24 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""но"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ено"" Literal 27 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""нно"" Literal 27 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ет"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ует"" Literal 30 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ит"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ыт"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ют"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""уют"" Literal 34 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ят"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ны"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ены"" Literal 37 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ть"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ить"" Literal 39 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ыть"" Literal 39 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ешь"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ишь"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ю"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ую"" Literal 44 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_5 ArrayInitializer ClassCreator ReferenceType Among Literal ""а"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ев"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ов"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""е"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ие"" Literal 3 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ье"" Literal 3 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""и"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""еи"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ии"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ами"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ями"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""иями"" Literal 10 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""й"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ей"" Literal 12 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ией"" Literal 13 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ий"" Literal 12 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ой"" Literal 12 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ам"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ем"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ием"" Literal 18 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ом"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ям"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""иям"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""о"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""у"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ах"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ях"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""иях"" Literal 26 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ы"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ь"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ю"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ию"" Literal 30 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ью"" Literal 30 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""я"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ия"" Literal 33 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ья"" Literal 33 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_6 ArrayInitializer ClassCreator ReferenceType Among Literal ""ост"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ость"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_7 ArrayInitializer ClassCreator ReferenceType Among Literal ""ейше"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""н"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ейш"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ь"" Literal - 1 Literal 3 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 33 Literal 65 Literal 8 Literal 232 FieldDeclaration Modifier private BasicType int VariableDeclarator I_p2 FieldDeclaration Modifier private BasicType int VariableDeclarator I_pV MethodDeclaration Modifier private copy_from FormalParameter ReferenceType RussianStemmer other StatementExpression Assignment MemberReference I_p2 MemberReference other I_p2 = StatementExpression Assignment MemberReference I_pV MemberReference other I_pV = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference I_pV MemberReference limit = StatementExpression Assignment MemberReference I_p2 MemberReference limit = StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement WhileStatement golab1 Literal true BlockStatement DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 1072 Literal 1103 in_grouping BlockStatement BreakStatement lab2 End BreakStatement golab1 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab0 End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_pV MemberReference cursor = WhileStatement golab3 Literal true BlockStatement DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 1072 Literal 1103 out_grouping BlockStatement BreakStatement lab4 End BreakStatement golab3 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab0 End StatementExpression MemberReference ++ cursor End WhileStatement golab5 Literal true BlockStatement DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 1072 Literal 1103 in_grouping BlockStatement BreakStatement lab6 End BreakStatement golab5 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab0 End StatementExpression MemberReference ++ cursor End WhileStatement golab7 Literal true BlockStatement DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 1072 Literal 1103 out_grouping BlockStatement BreakStatement lab8 End BreakStatement golab7 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab0 End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p2 MemberReference cursor = End StatementExpression Assignment MemberReference cursor MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R2 IfStatement BinaryOperation <= MemberReference I_p2 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_perfective_gerund LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 9 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""а"" eq_s_b BlockStatement BreakStatement lab1 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement MethodInvocation ! Literal 1 Literal ""я"" eq_s_b BlockStatement ReturnStatement Literal false End End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_adjective LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_1 Literal 26 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_adjectival LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 IfStatement MethodInvocation ! r_adjective BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_2 Literal 8 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement lab0 End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement lab0 SwitchStatementCase Literal 1 DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""а"" eq_s_b BlockStatement BreakStatement lab2 End BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement MethodInvocation ! Literal 1 Literal ""я"" eq_s_b BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement lab0 End End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation slice_del BreakStatement End End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_reflexive LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_3 Literal 2 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_verb LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_4 Literal 46 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""а"" eq_s_b BlockStatement BreakStatement lab1 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement MethodInvocation ! Literal 1 Literal ""я"" eq_s_b BlockStatement ReturnStatement Literal false End End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_noun LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_5 Literal 36 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_derivational LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_6 Literal 2 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_tidy_up LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_7 Literal 4 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""н"" eq_s_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""н"" eq_s_b BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! Literal 1 Literal ""н"" eq_s_b BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_pV BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_pV = StatementExpression Assignment MemberReference v_3 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_perfective_gerund BlockStatement BreakStatement lab3 End BreakStatement lab2 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! r_reflexive BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = BreakStatement lab4 End End DoStatement lab5 Literal false BlockStatement StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! r_adjectival BlockStatement BreakStatement lab6 End BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! r_verb BlockStatement BreakStatement lab7 End BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = IfStatement MethodInvocation ! r_noun BlockStatement BreakStatement lab1 End End End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""и"" eq_s_b BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = BreakStatement lab8 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del End StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! r_derivational BlockStatement BreakStatement lab9 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = StatementExpression Assignment MemberReference v_10 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab10 Literal false BlockStatement IfStatement MethodInvocation ! r_tidy_up BlockStatement BreakStatement lab10 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_10 = StatementExpression Assignment MemberReference limit_backward MemberReference v_3 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = ReturnStatement Literal true ReferenceType SnowballProgram",0
638,638,,0
250,250,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.util.List Import org.apache.lucene.index.IndexReader ClassDeclaration Modifier final BooleanScorer ClassDeclaration Modifier private final static BooleanScorerCollector FieldDeclaration Modifier private ReferenceType BucketTable VariableDeclarator bucketTable FieldDeclaration Modifier private BasicType int VariableDeclarator mask FieldDeclaration Modifier private ReferenceType Scorer VariableDeclarator scorer ConstructorDeclaration Modifier public BooleanScorerCollector FormalParameter BasicType int mask FormalParameter ReferenceType BucketTable bucketTable StatementExpression Assignment This MemberReference mask MemberReference mask = StatementExpression Assignment This MemberReference bucketTable MemberReference bucketTable = MethodDeclaration Modifier public final Annotation Override collect FormalParameter Modifier final BasicType int doc IOException LocalVariableDeclaration Modifier final ReferenceType BucketTable VariableDeclarator table MemberReference bucketTable LocalVariableDeclaration Modifier final BasicType int VariableDeclarator i BinaryOperation & MemberReference doc MemberReference BucketTable MASK LocalVariableDeclaration ReferenceType Bucket VariableDeclarator bucket MemberReference table ArraySelector MemberReference i buckets IfStatement BinaryOperation == MemberReference bucket Literal null StatementExpression Assignment MemberReference table ArraySelector MemberReference i buckets Assignment MemberReference bucket ClassCreator ReferenceType Bucket = = End IfStatement BinaryOperation != MemberReference bucket doc MemberReference doc BlockStatement StatementExpression Assignment MemberReference bucket doc MemberReference doc = StatementExpression Assignment MemberReference bucket score MethodInvocation scorer score = StatementExpression Assignment MemberReference bucket bits MemberReference mask = StatementExpression Assignment MemberReference bucket coord Literal 1 = StatementExpression Assignment MemberReference bucket next MemberReference table first = StatementExpression Assignment MemberReference table first MemberReference bucket = BlockStatement StatementExpression Assignment MemberReference bucket score MethodInvocation scorer score += StatementExpression Assignment MemberReference bucket bits MemberReference mask |= StatementExpression MemberReference ++ bucket coord End MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase MethodDeclaration Modifier public Annotation Override setScorer FormalParameter ReferenceType Scorer scorer IOException StatementExpression Assignment This MemberReference scorer MemberReference scorer = MethodDeclaration Modifier public Annotation Override BasicType boolean acceptsDocsOutOfOrder ReturnStatement Literal true ReferenceType Collector ClassDeclaration Modifier private final static BucketScorer FieldDeclaration BasicType float VariableDeclarator score FieldDeclaration BasicType int VariableDeclarator doc MemberReference NO_MORE_DOCS ConstructorDeclaration Modifier public BucketScorer StatementExpression SuperConstructorInvocation Literal null MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException ReturnStatement MemberReference NO_MORE_DOCS MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MemberReference doc MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException ReturnStatement MemberReference NO_MORE_DOCS MethodDeclaration Modifier public Annotation Override BasicType float score IOException ReturnStatement MemberReference score ReferenceType Scorer ClassDeclaration Modifier final static Bucket FieldDeclaration BasicType int VariableDeclarator doc Literal - 1 FieldDeclaration BasicType float VariableDeclarator score FieldDeclaration BasicType int VariableDeclarator bits FieldDeclaration BasicType int VariableDeclarator coord FieldDeclaration ReferenceType Bucket VariableDeclarator next ClassDeclaration Modifier final static /** A simple hash table of document scores within a range. */ BucketTable FieldDeclaration Modifier public final static BasicType int VariableDeclarator SIZE BinaryOperation << Literal 1 Literal 11 FieldDeclaration Modifier public final static BasicType int VariableDeclarator MASK BinaryOperation - MemberReference SIZE Literal 1 FieldDeclaration Modifier final ReferenceType Bucket VariableDeclarator buckets ArrayCreator ReferenceType Bucket MemberReference SIZE FieldDeclaration ReferenceType Bucket VariableDeclarator first Literal null ConstructorDeclaration Modifier public BucketTable MethodDeclaration Modifier public ReferenceType Collector newCollector FormalParameter BasicType int mask ReturnStatement ClassCreator ReferenceType BooleanScorerCollector MemberReference mask This MethodDeclaration Modifier public final BasicType int size ReturnStatement MemberReference SIZE ClassDeclaration Modifier final static SubScorer FieldDeclaration Modifier public ReferenceType Scorer VariableDeclarator scorer FieldDeclaration Modifier public BasicType boolean VariableDeclarator required Literal false FieldDeclaration Modifier public BasicType boolean VariableDeclarator prohibited Literal false FieldDeclaration Modifier public ReferenceType Collector VariableDeclarator collector FieldDeclaration Modifier public ReferenceType SubScorer VariableDeclarator next ConstructorDeclaration Modifier public SubScorer FormalParameter ReferenceType Scorer scorer FormalParameter BasicType boolean required FormalParameter BasicType boolean prohibited FormalParameter ReferenceType Collector collector FormalParameter ReferenceType SubScorer next IOException StatementExpression Assignment This MemberReference scorer MemberReference scorer = StatementExpression Assignment This MemberReference required MemberReference required = StatementExpression Assignment This MemberReference prohibited MemberReference prohibited = StatementExpression Assignment This MemberReference collector MemberReference collector = StatementExpression Assignment This MemberReference next MemberReference next = FieldDeclaration Modifier private ReferenceType SubScorer VariableDeclarator scorers Literal null FieldDeclaration Modifier private ReferenceType BucketTable VariableDeclarator bucketTable ClassCreator ReferenceType BucketTable FieldDeclaration Modifier private BasicType int VariableDeclarator maxCoord Literal 1 FieldDeclaration Modifier private final BasicType float VariableDeclarator coordFactors FieldDeclaration Modifier private BasicType int VariableDeclarator requiredMask Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator prohibitedMask Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator nextMask Literal 1 FieldDeclaration Modifier private final BasicType int VariableDeclarator minNrShouldMatch FieldDeclaration Modifier private BasicType int VariableDeclarator end FieldDeclaration Modifier private ReferenceType Bucket VariableDeclarator current FieldDeclaration Modifier private BasicType int VariableDeclarator doc Literal - 1 ConstructorDeclaration BooleanScorer FormalParameter ReferenceType Similarity similarity FormalParameter BasicType int minNrShouldMatch FormalParameter ReferenceType List TypeArgument ReferenceType Scorer optionalScorers FormalParameter ReferenceType List TypeArgument ReferenceType Scorer prohibitedScorers IOException StatementExpression SuperConstructorInvocation MemberReference similarity StatementExpression Assignment This MemberReference minNrShouldMatch MemberReference minNrShouldMatch = IfStatement BinaryOperation && BinaryOperation != MemberReference optionalScorers Literal null BinaryOperation > MethodInvocation optionalScorers size Literal 0 BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Scorer VariableDeclarator scorer MemberReference optionalScorers BlockStatement StatementExpression MemberReference ++ maxCoord IfStatement BinaryOperation != MethodInvocation scorer nextDoc MemberReference NO_MORE_DOCS BlockStatement StatementExpression Assignment MemberReference scorers ClassCreator ReferenceType SubScorer MemberReference scorer Literal false Literal false MethodInvocation bucketTable Literal 0 newCollector MemberReference scorers = End End End IfStatement BinaryOperation && BinaryOperation != MemberReference prohibitedScorers Literal null BinaryOperation > MethodInvocation prohibitedScorers size Literal 0 BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Scorer VariableDeclarator scorer MemberReference prohibitedScorers BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator mask MemberReference nextMask StatementExpression Assignment MemberReference nextMask BinaryOperation << MemberReference nextMask Literal 1 = StatementExpression Assignment MemberReference prohibitedMask MemberReference mask |= IfStatement BinaryOperation != MethodInvocation scorer nextDoc MemberReference NO_MORE_DOCS BlockStatement StatementExpression Assignment MemberReference scorers ClassCreator ReferenceType SubScorer MemberReference scorer Literal false Literal true MethodInvocation bucketTable MemberReference mask newCollector MemberReference scorers = End End End StatementExpression Assignment MemberReference coordFactors ArrayCreator BasicType float MemberReference maxCoord = LocalVariableDeclaration ReferenceType Similarity VariableDeclarator sim MethodInvocation getSimilarity ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference maxCoord MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i coordFactors MethodInvocation sim MemberReference i BinaryOperation - MemberReference maxCoord Literal 1 coord = End MethodDeclaration Modifier protected Annotation Override BasicType boolean score FormalParameter ReferenceType Collector collector FormalParameter BasicType int max FormalParameter BasicType int firstDocID IOException LocalVariableDeclaration BasicType boolean VariableDeclarator more LocalVariableDeclaration ReferenceType Bucket VariableDeclarator tmp LocalVariableDeclaration ReferenceType BucketScorer VariableDeclarator bs ClassCreator ReferenceType BucketScorer StatementExpression MethodInvocation collector MemberReference bs setScorer DoStatement BinaryOperation || BinaryOperation != MemberReference current Literal null MemberReference more BlockStatement StatementExpression Assignment MemberReference bucketTable first Literal null = WhileStatement BinaryOperation != MemberReference current Literal null BlockStatement IfStatement BinaryOperation && BinaryOperation == BinaryOperation & MemberReference current bits MemberReference prohibitedMask Literal 0 BinaryOperation == BinaryOperation & MemberReference current bits MemberReference requiredMask MemberReference requiredMask BlockStatement IfStatement BinaryOperation >= MemberReference current doc MemberReference max BlockStatement StatementExpression Assignment MemberReference tmp MemberReference current = StatementExpression Assignment MemberReference current MemberReference current next = StatementExpression Assignment MemberReference tmp next MemberReference bucketTable first = StatementExpression Assignment MemberReference bucketTable first MemberReference tmp = ContinueStatement End IfStatement BinaryOperation >= MemberReference current coord MemberReference minNrShouldMatch BlockStatement StatementExpression Assignment MemberReference bs score BinaryOperation * MemberReference current score MemberReference ArraySelector MemberReference current coord coordFactors = StatementExpression Assignment MemberReference bs doc MemberReference current doc = StatementExpression MethodInvocation collector MemberReference current doc collect End End StatementExpression Assignment MemberReference current MemberReference current next = End IfStatement BinaryOperation != MemberReference bucketTable first Literal null BlockStatement StatementExpression Assignment MemberReference current MemberReference bucketTable first = StatementExpression Assignment MemberReference bucketTable first MemberReference current next = ReturnStatement Literal true End StatementExpression Assignment MemberReference more Literal false = StatementExpression Assignment MemberReference end MemberReference BucketTable SIZE += ForStatement ForControl VariableDeclaration ReferenceType SubScorer VariableDeclarator sub MemberReference scorers BinaryOperation != MemberReference sub Literal null Assignment MemberReference sub MemberReference sub next = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator subScorerDocID MethodInvocation sub.scorer docID IfStatement BinaryOperation != MemberReference subScorerDocID MemberReference NO_MORE_DOCS BlockStatement StatementExpression Assignment MemberReference more MethodInvocation sub.scorer MemberReference sub collector MemberReference end MemberReference subScorerDocID score |= End End StatementExpression Assignment MemberReference current MemberReference bucketTable first = End ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MemberReference doc MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException LocalVariableDeclaration BasicType boolean VariableDeclarator more DoStatement BinaryOperation || BinaryOperation != MemberReference bucketTable first Literal null MemberReference more BlockStatement WhileStatement BinaryOperation != MemberReference bucketTable first Literal null BlockStatement StatementExpression Assignment MemberReference current MemberReference bucketTable first = StatementExpression Assignment MemberReference bucketTable first MemberReference current next = IfStatement BinaryOperation && BinaryOperation && BinaryOperation == BinaryOperation & MemberReference current bits MemberReference prohibitedMask Literal 0 BinaryOperation == BinaryOperation & MemberReference current bits MemberReference requiredMask MemberReference requiredMask BinaryOperation >= MemberReference current coord MemberReference minNrShouldMatch BlockStatement ReturnStatement Assignment MemberReference doc MemberReference current doc = End End StatementExpression Assignment MemberReference more Literal false = StatementExpression Assignment MemberReference end MemberReference BucketTable SIZE += ForStatement ForControl VariableDeclaration ReferenceType SubScorer VariableDeclarator sub MemberReference scorers BinaryOperation != MemberReference sub Literal null Assignment MemberReference sub MemberReference sub next = BlockStatement LocalVariableDeclaration ReferenceType Scorer VariableDeclarator scorer MemberReference sub scorer StatementExpression MethodInvocation sub.collector MemberReference scorer setScorer LocalVariableDeclaration BasicType int VariableDeclarator doc MethodInvocation scorer docID WhileStatement BinaryOperation < MemberReference doc MemberReference end BlockStatement StatementExpression MethodInvocation sub.collector MemberReference doc collect StatementExpression Assignment MemberReference doc MethodInvocation scorer nextDoc = End StatementExpression Assignment MemberReference more BinaryOperation != MemberReference doc MemberReference NO_MORE_DOCS |= End End ReturnStatement Assignment MemberReference doc MemberReference NO_MORE_DOCS = MethodDeclaration Modifier public Annotation Override BasicType float score ReturnStatement BinaryOperation * MemberReference current score MemberReference ArraySelector MemberReference current coord coordFactors MethodDeclaration Modifier public Annotation Override score FormalParameter ReferenceType Collector collector IOException StatementExpression MethodInvocation MemberReference collector MemberReference Integer MAX_VALUE MethodInvocation nextDoc score MethodDeclaration Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation buffer Literal ""boolean("" append ForStatement ForControl VariableDeclaration ReferenceType SubScorer VariableDeclarator sub MemberReference scorers BinaryOperation != MemberReference sub Literal null Assignment MemberReference sub MemberReference sub next = BlockStatement StatementExpression MethodInvocation buffer MethodInvocation sub.scorer toString append StatementExpression MethodInvocation buffer Literal "" "" append End StatementExpression MethodInvocation buffer Literal "")"" append ReturnStatement MethodInvocation buffer toString ReferenceType Scorer",0
117,117,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.IOException Import java.io.FileNotFoundException Import java.io.Serializable Import java.util.HashMap Import java.util.Set Import org.apache.lucene.util.ThreadInterruptedException ClassDeclaration Modifier public /**
 * A memory-resident {@link Directory} implementation.  Locking
 * implementation is by default the {@link SingleInstanceLockFactory}
 * but can be changed with {@link #setLockFactory}.
 */ RAMDirectory FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 1l FieldDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType RAMFile VariableDeclarator fileMap ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType RAMFile FieldDeclaration BasicType long VariableDeclarator sizeInBytes Literal 0 ConstructorDeclaration Modifier public /** Constructs an empty {@link Directory}. */ RAMDirectory StatementExpression MethodInvocation ClassCreator ReferenceType SingleInstanceLockFactory setLockFactory ConstructorDeclaration Modifier public /**
   * Creates a new <code>RAMDirectory</code> instance from a different
   * <code>Directory</code> implementation.  This can be used to load
   * a disk-based index into memory.
   * <P>
   * This should be used only with indices that can fit into memory.
   * <P>
   * Note that the resulting <code>RAMDirectory</code> instance is fully
   * independent from the original <code>Directory</code> (it is a
   * complete copy).  Any subsequent changes to the
   * original <code>Directory</code> will not be visible in the
   * <code>RAMDirectory</code> instance.
   *
   * @param dir a <code>Directory</code> value
   * @exception IOException if an error occurs
   */ RAMDirectory FormalParameter ReferenceType Directory dir IOException StatementExpression ExplicitConstructorInvocation MemberReference dir Literal false ConstructorDeclaration Modifier private RAMDirectory FormalParameter ReferenceType Directory dir FormalParameter BasicType boolean closeDir IOException StatementExpression ExplicitConstructorInvocation StatementExpression MethodInvocation Directory MemberReference dir This MemberReference closeDir copy MethodDeclaration Modifier public final synchronized Annotation Override ReferenceType String listAll StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator fileNames MethodInvocation fileMap keySet LocalVariableDeclaration ReferenceType String VariableDeclarator result ArrayCreator ReferenceType String MethodInvocation fileNames size LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName MemberReference fileNames StatementExpression Assignment MemberReference ArraySelector MemberReference ++ i result MemberReference fileName = End ReturnStatement MemberReference result MethodDeclaration /** Returns true iff the named file exists in this directory. */ Modifier public final Annotation Override BasicType boolean fileExists FormalParameter ReferenceType String name StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType RAMFile VariableDeclarator file SynchronizedStatement This StatementExpression Assignment MemberReference file MethodInvocation fileMap MemberReference name get = ReturnStatement BinaryOperation != MemberReference file Literal null MethodDeclaration /** Returns the time the named file was last modified.
   * @throws IOException if the file does not exist
   */ Modifier public final Annotation Override BasicType long fileModified FormalParameter ReferenceType String name IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType RAMFile VariableDeclarator file SynchronizedStatement This StatementExpression Assignment MemberReference file MethodInvocation fileMap MemberReference name get = IfStatement BinaryOperation == MemberReference file Literal null ThrowStatement ClassCreator ReferenceType FileNotFoundException MemberReference name End ReturnStatement MethodInvocation file getLastModified MethodDeclaration /** Set the modified time of an existing file to now.
   * @throws IOException if the file does not exist
   */ Modifier public Annotation Override touchFile FormalParameter ReferenceType String name IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType RAMFile VariableDeclarator file SynchronizedStatement This StatementExpression Assignment MemberReference file MethodInvocation fileMap MemberReference name get = IfStatement BinaryOperation == MemberReference file Literal null ThrowStatement ClassCreator ReferenceType FileNotFoundException MemberReference name End LocalVariableDeclaration BasicType long VariableDeclarator ts2 VariableDeclarator ts1 MethodInvocation System currentTimeMillis DoStatement BinaryOperation == MemberReference ts1 MemberReference ts2 BlockStatement TryStatement StatementExpression MethodInvocation Thread Literal 0 Literal 1 sleep CatchClause CatchClauseParameter InterruptedException ie ThrowStatement ClassCreator ReferenceType ThreadInterruptedException MemberReference ie StatementExpression Assignment MemberReference ts2 MethodInvocation System currentTimeMillis = End StatementExpression MethodInvocation file MemberReference ts2 setLastModified MethodDeclaration /** Returns the length in bytes of a file in the directory.
   * @throws IOException if the file does not exist
   */ Modifier public final Annotation Override BasicType long fileLength FormalParameter ReferenceType String name IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType RAMFile VariableDeclarator file SynchronizedStatement This StatementExpression Assignment MemberReference file MethodInvocation fileMap MemberReference name get = IfStatement BinaryOperation == MemberReference file Literal null ThrowStatement ClassCreator ReferenceType FileNotFoundException MemberReference name End ReturnStatement MethodInvocation file getLength MethodDeclaration /** Return total size in bytes of all files in this
   * directory.  This is currently quantized to
   * RAMOutputStream.BUFFER_SIZE. */ Modifier public final synchronized BasicType long sizeInBytes StatementExpression MethodInvocation ensureOpen ReturnStatement MemberReference sizeInBytes MethodDeclaration /** Removes an existing file in the directory.
   * @throws IOException if the file does not exist
   */ Modifier public synchronized Annotation Override deleteFile FormalParameter ReferenceType String name IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType RAMFile VariableDeclarator file MethodInvocation fileMap MemberReference name get IfStatement BinaryOperation != MemberReference file Literal null BlockStatement StatementExpression MethodInvocation fileMap MemberReference name remove StatementExpression Assignment MemberReference file directory Literal null = StatementExpression Assignment MemberReference sizeInBytes MemberReference file sizeInBytes -= ThrowStatement ClassCreator ReferenceType FileNotFoundException MemberReference name End MethodDeclaration /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */ Modifier public Annotation Override ReferenceType IndexOutput createOutput FormalParameter ReferenceType String name IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType RAMFile VariableDeclarator file ClassCreator ReferenceType RAMFile This SynchronizedStatement This LocalVariableDeclaration ReferenceType RAMFile VariableDeclarator existing MethodInvocation fileMap MemberReference name get IfStatement BinaryOperation != MemberReference existing Literal null BlockStatement StatementExpression Assignment MemberReference sizeInBytes MemberReference existing sizeInBytes -= StatementExpression Assignment MemberReference existing directory Literal null = End StatementExpression MethodInvocation fileMap MemberReference name MemberReference file put ReturnStatement ClassCreator ReferenceType RAMOutputStream MemberReference file MethodDeclaration /** Returns a stream reading an existing file. */ Modifier public Annotation Override ReferenceType IndexInput openInput FormalParameter ReferenceType String name IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType RAMFile VariableDeclarator file SynchronizedStatement This StatementExpression Assignment MemberReference file MethodInvocation fileMap MemberReference name get = IfStatement BinaryOperation == MemberReference file Literal null ThrowStatement ClassCreator ReferenceType FileNotFoundException MemberReference name End ReturnStatement ClassCreator ReferenceType RAMInputStream MemberReference file MethodDeclaration /** Closes the store to future operations, releasing associated memory. */ Modifier public Annotation Override close StatementExpression Assignment MemberReference isOpen Literal false = StatementExpression Assignment MemberReference fileMap Literal null = ReferenceType Directory ReferenceType Serializable",0
59,59,"CompilationUnit PackageDeclaration org.apache.lucene.ant Import java.io.File Import java.io.IOException Import java.text.ParseException Import java.util.Date Import java.util.HashMap Import java.util.Iterator Import java.util.Map Import java.util.Properties Import java.util.Set Import java.util.Vector Import java.lang.reflect.Constructor Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.SimpleAnalyzer Import org.apache.lucene.analysis.StopAnalyzer Import org.apache.lucene.analysis.WhitespaceAnalyzer Import org.apache.lucene.analysis.standard.StandardAnalyzer Import org.apache.lucene.document.DateTools Import org.apache.lucene.document.Document Import org.apache.lucene.document.Field Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.index.Term Import org.apache.lucene.search.IndexSearcher Import org.apache.lucene.search.ScoreDoc Import org.apache.lucene.search.Searcher Import org.apache.lucene.search.TermQuery Import org.apache.lucene.store.FSDirectory Import org.apache.lucene.util.Version Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DynamicConfigurator Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.Resource Import org.apache.tools.ant.types.ResourceCollection Import org.apache.tools.ant.types.resources.FileResource ClassDeclaration Modifier public /**
 *  Ant task to index files with Lucene
 *
 */ IndexTask FieldDeclaration /**
   *  resources
   */ Modifier protected ReferenceType Vector TypeArgument ReferenceType ResourceCollection VariableDeclarator rcs ClassCreator ReferenceType Vector TypeArgument ReferenceType ResourceCollection FieldDeclaration /**
   *  overwrite index?
   */ Modifier private BasicType boolean VariableDeclarator overwrite Literal false FieldDeclaration /**
   *  index path
   */ Modifier private ReferenceType File VariableDeclarator indexDir FieldDeclaration /**
   *  document handler classname
   */ Modifier private ReferenceType String VariableDeclarator handlerClassName ClassReference MethodInvocation getName ReferenceType FileExtensionDocumentHandler FieldDeclaration /**
   *  document handler instance
   */ Modifier private ReferenceType DocumentHandler VariableDeclarator handler FieldDeclaration /**
   *
   */ Modifier private ReferenceType String VariableDeclarator analyzerClassName ClassReference MethodInvocation getName ReferenceType StandardAnalyzer FieldDeclaration /**
   *  analyzer instance
   */ Modifier private ReferenceType Analyzer VariableDeclarator analyzer FieldDeclaration /**
   *  Lucene merge factor
   */ Modifier private BasicType int VariableDeclarator mergeFactor Literal 20 FieldDeclaration Modifier private ReferenceType HandlerConfig VariableDeclarator handlerConfig FieldDeclaration Modifier private BasicType boolean VariableDeclarator useCompoundIndex Literal true ConstructorDeclaration Modifier public /**
   *  Creates new instance
   */ IndexTask MethodDeclaration /**
   *  Specifies the directory where the index will be stored
   */ Modifier public setIndex FormalParameter ReferenceType File indexDir StatementExpression Assignment This MemberReference indexDir MemberReference indexDir = MethodDeclaration /**
   *  Sets the mergeFactor attribute of the IndexTask object
   *
   *@param  mergeFactor  The new mergeFactor value
   */ Modifier public setMergeFactor FormalParameter BasicType int mergeFactor StatementExpression Assignment This MemberReference mergeFactor MemberReference mergeFactor = MethodDeclaration /**
   *  Sets the overwrite attribute of the IndexTask object
   *
   *@param  overwrite  The new overwrite value
   */ Modifier public setOverwrite FormalParameter BasicType boolean overwrite StatementExpression Assignment This MemberReference overwrite MemberReference overwrite = MethodDeclaration /**
   * If creating a new index and this is set to true, the
   * index will be created in compound format.
   */ Modifier public setUseCompoundIndex FormalParameter BasicType boolean useCompoundIndex StatementExpression Assignment This MemberReference useCompoundIndex MemberReference useCompoundIndex = MethodDeclaration /**
   *  Sets the documentHandler attribute of the IndexTask object
   *
   *@param  classname  The new documentHandler value
   */ Modifier public setDocumentHandler FormalParameter ReferenceType String classname StatementExpression Assignment MemberReference handlerClassName MemberReference classname = MethodDeclaration /**
   * Sets the analyzer based on the builtin Lucene analyzer types.
   *
   * TODO: Enforce analyzer and analyzerClassName to be mutually exclusive
   */ Modifier public setAnalyzer FormalParameter ReferenceType AnalyzerType type StatementExpression Assignment MemberReference analyzerClassName MethodInvocation type getClassname = MethodDeclaration Modifier public setAnalyzerClassName FormalParameter ReferenceType String classname StatementExpression Assignment MemberReference analyzerClassName MemberReference classname = MethodDeclaration /**
   *  Adds a set of files (nested fileset attribute).
   *
   *@param  set  FileSet to be added
   */ Modifier public addFileset FormalParameter ReferenceType FileSet set StatementExpression MethodInvocation MemberReference set add MethodDeclaration /**
     * Add a collection of files to copy.
     * @param res a resource collection to copy.
     * @since Ant 1.7
     */ Modifier public add FormalParameter ReferenceType ResourceCollection res StatementExpression MethodInvocation rcs MemberReference res add MethodDeclaration /**
   * Sets custom properties for a configurable document handler.
   */ Modifier public addConfig FormalParameter ReferenceType HandlerConfig config BuildException IfStatement BinaryOperation != MemberReference handlerConfig Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one config element allowed"" End StatementExpression Assignment MemberReference handlerConfig MemberReference config = MethodDeclaration Modifier private final static ReferenceType Analyzer createAnalyzer FormalParameter ReferenceType String className Exception LocalVariableDeclaration Modifier final ReferenceType Class TypeArgument ReferenceType Analyzer extends VariableDeclarator clazz MethodInvocation Class MethodInvocation ClassReference ReferenceType Analyzer asSubclass MemberReference className forName TryStatement LocalVariableDeclaration ReferenceType Constructor TypeArgument ReferenceType Analyzer extends VariableDeclarator cnstr MethodInvocation clazz ClassReference ReferenceType Version getConstructor ReturnStatement MethodInvocation cnstr MemberReference Version LUCENE_CURRENT newInstance CatchClause CatchClauseParameter NoSuchMethodException nsme ReturnStatement MethodInvocation clazz newInstance MethodDeclaration /**
   *  Begins the indexing
   *
   *@exception  BuildException  If an error occurs indexing the
   *      fileset
   */ Modifier public Annotation Override execute BuildException TryStatement StatementExpression Assignment MemberReference handler MethodInvocation Class MethodInvocation ClassReference ReferenceType DocumentHandler asSubclass MethodInvocation newInstance MemberReference handlerClassName forName = StatementExpression Assignment MemberReference analyzer MethodInvocation IndexTask MemberReference analyzerClassName createAnalyzer = CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e StatementExpression MethodInvocation BinaryOperation + Literal ""Document handler = "" MethodInvocation handler getClass MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation BinaryOperation + Literal ""Analyzer = "" MethodInvocation analyzer getClass MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation instanceof MemberReference handler ReferenceType ConfigurableDocumentHandler BlockStatement StatementExpression Cast ReferenceType ConfigurableDocumentHandler MemberReference handler End TryStatement StatementExpression MethodInvocation indexDocs CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
   * Index the fileset.
   *
   *@exception  IOException if Lucene I/O exception
   *TODO: refactor!!!!!
   */ Modifier private indexDocs IOException LocalVariableDeclaration ReferenceType Date VariableDeclarator start ClassCreator ReferenceType Date LocalVariableDeclaration BasicType boolean VariableDeclarator create MemberReference overwrite IfStatement BinaryOperation && MethodInvocation indexDir mkdirs MemberReference ! overwrite BlockStatement StatementExpression Assignment MemberReference create Literal true = End LocalVariableDeclaration ReferenceType FSDirectory VariableDeclarator dir MethodInvocation FSDirectory MemberReference indexDir open TryStatement LocalVariableDeclaration ReferenceType Searcher VariableDeclarator searcher Literal null LocalVariableDeclaration BasicType boolean VariableDeclarator checkLastModified Literal false IfStatement MemberReference ! create BlockStatement TryStatement StatementExpression Assignment MemberReference searcher ClassCreator ReferenceType IndexSearcher MemberReference dir Literal true = StatementExpression Assignment MemberReference checkLastModified Literal true = CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation BinaryOperation + Literal ""IOException: "" MethodInvocation ioe getMessage log End StatementExpression MethodInvocation BinaryOperation + Literal ""checkLastModified = "" MemberReference checkLastModified MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator writer ClassCreator ReferenceType IndexWriter MemberReference dir MemberReference analyzer MemberReference create MemberReference IndexWriter.MaxFieldLength LIMITED StatementExpression MethodInvocation writer MemberReference useCompoundIndex setUseCompoundFile LocalVariableDeclaration BasicType int VariableDeclarator totalFiles Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator totalIndexed Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator totalIgnored Literal 0 TryStatement StatementExpression MethodInvocation writer MemberReference mergeFactor setMergeFactor ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation rcs size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType ResourceCollection VariableDeclarator rc MethodInvocation rcs MemberReference i elementAt IfStatement MethodInvocation rc isFilesystemOnly BlockStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator resources MethodInvocation rc iterator WhileStatement MethodInvocation resources hasNext BlockStatement LocalVariableDeclaration ReferenceType Resource VariableDeclarator r Cast ReferenceType Resource MethodInvocation resources next IfStatement BinaryOperation || MethodInvocation ! r isExists BinaryOperation instanceof MemberReference r ReferenceType FileResource BlockStatement ContinueStatement End StatementExpression MemberReference ++ totalFiles LocalVariableDeclaration ReferenceType File VariableDeclarator file Cast ReferenceType FileResource MemberReference r IfStatement BinaryOperation || MethodInvocation ! file exists MethodInvocation ! file canRead BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""File \"""" MethodInvocation file getAbsolutePath Literal ""\"" does not exist or is not readable."" End LocalVariableDeclaration BasicType boolean VariableDeclarator indexIt Literal true IfStatement MemberReference checkLastModified BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator pathTerm ClassCreator ReferenceType Term Literal ""path"" MethodInvocation file getPath LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator query ClassCreator ReferenceType TermQuery MemberReference pathTerm LocalVariableDeclaration ReferenceType ScoreDoc VariableDeclarator hits MethodInvocation searcher MemberReference scoreDocs MemberReference query Literal null Literal 1 search IfStatement BinaryOperation > MemberReference hits length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation searcher MemberReference ArraySelector Literal 0 MemberReference doc hits doc LocalVariableDeclaration ReferenceType String VariableDeclarator indexModified MethodInvocation doc MethodInvocation trim Literal ""modified"" get IfStatement BinaryOperation != MemberReference indexModified Literal null BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator lastModified Literal 0 TryStatement StatementExpression Assignment MemberReference lastModified MethodInvocation DateTools MemberReference indexModified stringToTime = CatchClause CatchClauseParameter ParseException e IfStatement BinaryOperation == MemberReference lastModified MethodInvocation file lastModified BlockStatement StatementExpression Assignment MemberReference indexIt Literal false = End End End End IfStatement MemberReference indexIt BlockStatement TryStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Indexing "" MethodInvocation file getPath MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation handler MemberReference file getDocument IfStatement BinaryOperation == MemberReference doc Literal null BlockStatement StatementExpression MemberReference ++ totalIgnored BlockStatement StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""path"" MethodInvocation file getPath MemberReference Field.Store YES MemberReference Field.Index NOT_ANALYZED add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""modified"" MethodInvocation DateTools MethodInvocation file lastModified MemberReference DateTools.Resolution MILLISECOND timeToString MemberReference Field.Store YES MemberReference Field.Index NOT_ANALYZED add StatementExpression MethodInvocation writer MemberReference doc addDocument StatementExpression MemberReference ++ totalIndexed End CatchClause CatchClauseParameter DocumentHandlerException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e End End End End StatementExpression MethodInvocation writer optimize StatementExpression MethodInvocation writer close IfStatement BinaryOperation != MemberReference searcher Literal null BlockStatement StatementExpression MethodInvocation searcher close End LocalVariableDeclaration ReferenceType Date VariableDeclarator end ClassCreator ReferenceType Date StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference totalIndexed Literal "" out of "" MemberReference totalFiles Literal "" indexed ("" MemberReference totalIgnored Literal "" ignored) in "" BinaryOperation - MethodInvocation end getTime MethodInvocation start getTime Literal "" milliseconds"" log StatementExpression MethodInvocation dir close ClassDeclaration Modifier public static HandlerConfig FieldDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties MethodDeclaration Modifier public setDynamicAttribute FormalParameter ReferenceType String attributeName FormalParameter ReferenceType String value BuildException StatementExpression MethodInvocation props MemberReference attributeName MemberReference value setProperty MethodDeclaration Modifier public ReferenceType Object createDynamicElement FormalParameter ReferenceType String elementName BuildException ThrowStatement ClassCreator ReferenceType BuildException Literal ""Sub elements not supported"" MethodDeclaration Modifier public ReferenceType Properties getProperties ReturnStatement MemberReference props ReferenceType DynamicConfigurator ClassDeclaration Modifier public static AnalyzerType FieldDeclaration Modifier private static ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator analyzerLookup ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String StatementExpression MethodInvocation analyzerLookup Literal ""simple"" ClassReference MethodInvocation getName ReferenceType SimpleAnalyzer put StatementExpression MethodInvocation analyzerLookup Literal ""standard"" ClassReference MethodInvocation getName ReferenceType StandardAnalyzer put StatementExpression MethodInvocation analyzerLookup Literal ""stop"" ClassReference MethodInvocation getName ReferenceType StopAnalyzer put StatementExpression MethodInvocation analyzerLookup Literal ""whitespace"" ClassReference MethodInvocation getName ReferenceType WhitespaceAnalyzer put MethodDeclaration /**
     * @see EnumeratedAttribute#getValues
     */ Modifier public Annotation Override ReferenceType String getValues LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator keys MethodInvocation analyzerLookup keySet ReturnStatement MethodInvocation keys ArrayCreator ReferenceType String Literal 0 toArray MethodDeclaration Modifier public ReferenceType String getClassname ReturnStatement MethodInvocation analyzerLookup MethodInvocation getValue get ReferenceType EnumeratedAttribute ReferenceType Task",0
799,799,,1
897,897,,1
940,940,,1
563,563,"CompilationUnit PackageDeclaration org.apache.lucene.document Import java.util.zip.Deflater Import java.util.zip.Inflater Import java.util.zip.DataFormatException Import java.io.ByteArrayOutputStream Import org.apache.lucene.util.UnicodeUtil ClassDeclaration Modifier public /** Simple utility class providing static methods to
 *  compress and decompress binary data for stored fields.
 *  This class uses java.util.zip.Deflater and Inflater
 *  classes to compress and decompress.
 */ CompressionTools ConstructorDeclaration Modifier private CompressionTools MethodDeclaration /** Compresses the specified byte range using the
   *  specified compressionLevel (constants are defined in
   *  java.util.zip.Deflater). */ Modifier public static BasicType byte compress FormalParameter BasicType byte value FormalParameter BasicType int offset FormalParameter BasicType int length FormalParameter BasicType int compressionLevel LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator bos ClassCreator ReferenceType ByteArrayOutputStream MemberReference length LocalVariableDeclaration ReferenceType Deflater VariableDeclarator compressor ClassCreator ReferenceType Deflater TryStatement StatementExpression MethodInvocation compressor MemberReference compressionLevel setLevel StatementExpression MethodInvocation compressor MemberReference value MemberReference offset MemberReference length setInput StatementExpression MethodInvocation compressor finish LocalVariableDeclaration Modifier final BasicType byte VariableDeclarator buf ArrayCreator BasicType byte Literal 1024 WhileStatement MethodInvocation ! compressor finished BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator count MethodInvocation compressor MemberReference buf deflate StatementExpression MethodInvocation bos MemberReference buf Literal 0 MemberReference count write End StatementExpression MethodInvocation compressor end ReturnStatement MethodInvocation bos toByteArray MethodDeclaration /** Compresses the specified byte range, with default BEST_COMPRESSION level */ Modifier public static BasicType byte compress FormalParameter BasicType byte value FormalParameter BasicType int offset FormalParameter BasicType int length ReturnStatement MethodInvocation MemberReference value MemberReference offset MemberReference length MemberReference Deflater BEST_COMPRESSION compress MethodDeclaration /** Compresses all bytes in the array, with default BEST_COMPRESSION level */ Modifier public static BasicType byte compress FormalParameter BasicType byte value ReturnStatement MethodInvocation MemberReference value Literal 0 MemberReference value length MemberReference Deflater BEST_COMPRESSION compress MethodDeclaration /** Compresses the String value, with default BEST_COMPRESSION level */ Modifier public static BasicType byte compressString FormalParameter ReferenceType String value ReturnStatement MethodInvocation MemberReference value MemberReference Deflater BEST_COMPRESSION compressString MethodDeclaration /** Compresses the String value using the specified
   *  compressionLevel (constants are defined in
   *  java.util.zip.Deflater). */ Modifier public static BasicType byte compressString FormalParameter ReferenceType String value FormalParameter BasicType int compressionLevel LocalVariableDeclaration ReferenceType UnicodeUtil ReferenceType UTF8Result VariableDeclarator result ClassCreator ReferenceType UnicodeUtil ReferenceType UTF8Result StatementExpression MethodInvocation UnicodeUtil MemberReference value Literal 0 MethodInvocation value length MemberReference result UTF16toUTF8 ReturnStatement MethodInvocation MemberReference result result Literal 0 MemberReference result length MemberReference compressionLevel compress MethodDeclaration /** Decompress the byte array previously returned by
   *  compress */ Modifier public static BasicType byte decompress FormalParameter BasicType byte value DataFormatException LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator bos ClassCreator ReferenceType ByteArrayOutputStream MemberReference value length LocalVariableDeclaration ReferenceType Inflater VariableDeclarator decompressor ClassCreator ReferenceType Inflater TryStatement StatementExpression MethodInvocation decompressor MemberReference value setInput LocalVariableDeclaration Modifier final BasicType byte VariableDeclarator buf ArrayCreator BasicType byte Literal 1024 WhileStatement MethodInvocation ! decompressor finished BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator count MethodInvocation decompressor MemberReference buf inflate StatementExpression MethodInvocation bos MemberReference buf Literal 0 MemberReference count write End StatementExpression MethodInvocation decompressor end ReturnStatement MethodInvocation bos toByteArray MethodDeclaration /** Decompress the byte array previously returned by
   *  compressString back into a String */ Modifier public static ReferenceType String decompressString FormalParameter BasicType byte value DataFormatException LocalVariableDeclaration ReferenceType UnicodeUtil ReferenceType UTF16Result VariableDeclarator result ClassCreator ReferenceType UnicodeUtil ReferenceType UTF16Result LocalVariableDeclaration Modifier final BasicType byte VariableDeclarator bytes MethodInvocation MemberReference value decompress StatementExpression MethodInvocation UnicodeUtil MemberReference bytes Literal 0 MemberReference bytes length MemberReference result UTF8toUTF16 ReturnStatement ClassCreator ReferenceType String MemberReference result result Literal 0 MemberReference result length",0
806,806,,0
732,732,,1
120,120,"CompilationUnit PackageDeclaration org.apache.lucene.document Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.util.StringHelper Import java.io.Reader Import java.io.Serializable ClassDeclaration Modifier public final /**
  A field is a section of a Document.  Each field has two parts, a name and a
  value.  Values may be free text, provided as a String or as a Reader, or they
  may be atomic keywords, which are not further processed.  Such keywords may
  be used to represent dates, urls, etc.  Fields are optionally stored in the
  index, so that they may be returned with hits on the document.
  */ Field EnumDeclaration Modifier public static /** Specifies whether and how a field should be stored. */ Store EnumBody EnumConstantDeclaration /** Store the original field value in the index. This is useful for short texts
     * like a document's title which should be displayed with the results. The
     * value is stored in its original form, i.e. no analyzer is used before it is
     * stored.
     */ YES MethodDeclaration Modifier public Annotation Override BasicType boolean isStored ReturnStatement Literal true EnumConstantDeclaration /** Do not store the field value in the index. */ NO MethodDeclaration Modifier public Annotation Override BasicType boolean isStored ReturnStatement Literal false MethodDeclaration Modifier public abstract BasicType boolean isStored EnumDeclaration Modifier public static /** Specifies whether and how a field should be indexed. */ Index EnumBody EnumConstantDeclaration /** Do not index the field value. This field can thus not be searched,
     * but one can still access its contents provided it is
     * {@link Field.Store stored}. */ NO MethodDeclaration Modifier public Annotation Override BasicType boolean isIndexed ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean isAnalyzed ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean omitNorms ReturnStatement Literal true EnumConstantDeclaration /** Index the tokens produced by running the field's
     * value through an Analyzer.  This is useful for
     * common text. */ ANALYZED MethodDeclaration Modifier public Annotation Override BasicType boolean isIndexed ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean isAnalyzed ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean omitNorms ReturnStatement Literal false EnumConstantDeclaration /** Index the field's value without using an Analyzer, so it can be searched.
     * As no analyzer is used the value will be stored as a single term. This is
     * useful for unique Ids like product numbers.
     */ NOT_ANALYZED MethodDeclaration Modifier public Annotation Override BasicType boolean isIndexed ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean isAnalyzed ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean omitNorms ReturnStatement Literal false EnumConstantDeclaration /** Expert: Index the field's value without an Analyzer,
     * and also disable the storing of norms.  Note that you
     * can also separately enable/disable norms by calling
     * {@link Field#setOmitNorms}.  No norms means that
     * index-time field and document boosting and field
     * length normalization are disabled.  The benefit is
     * less memory usage as norms take up one byte of RAM
     * per indexed field for every document in the index,
     * during searching.  Note that once you index a given
     * field <i>with</i> norms enabled, disabling norms will
     * have no effect.  In other words, for this to have the
     * above described effect on a field, all instances of
     * that field must be indexed with NOT_ANALYZED_NO_NORMS
     * from the beginning. */ NOT_ANALYZED_NO_NORMS MethodDeclaration Modifier public Annotation Override BasicType boolean isIndexed ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean isAnalyzed ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean omitNorms ReturnStatement Literal true EnumConstantDeclaration /** Expert: Index the tokens produced by running the
     *  field's value through an Analyzer, and also
     *  separately disable the storing of norms.  See
     *  {@link #NOT_ANALYZED_NO_NORMS} for what norms are
     *  and why you may want to disable them. */ ANALYZED_NO_NORMS MethodDeclaration Modifier public Annotation Override BasicType boolean isIndexed ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean isAnalyzed ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean omitNorms ReturnStatement Literal true MethodDeclaration /** Get the best representation of the index given the flags. */ Modifier public static ReferenceType Index toIndex FormalParameter BasicType boolean indexed FormalParameter BasicType boolean analyzed ReturnStatement MethodInvocation MemberReference indexed MemberReference analyzed Literal false toIndex MethodDeclaration /** Expert: Get the best representation of the index given the flags. */ Modifier public static ReferenceType Index toIndex FormalParameter BasicType boolean indexed FormalParameter BasicType boolean analyzed FormalParameter BasicType boolean omitNorms IfStatement MemberReference ! indexed BlockStatement ReturnStatement MemberReference Index NO End IfStatement MemberReference ! omitNorms BlockStatement IfStatement MemberReference analyzed BlockStatement ReturnStatement MemberReference Index ANALYZED End ReturnStatement MemberReference Index NOT_ANALYZED End IfStatement MemberReference analyzed BlockStatement ReturnStatement MemberReference Index ANALYZED_NO_NORMS End ReturnStatement MemberReference Index NOT_ANALYZED_NO_NORMS MethodDeclaration Modifier public abstract BasicType boolean isIndexed MethodDeclaration Modifier public abstract BasicType boolean isAnalyzed MethodDeclaration Modifier public abstract BasicType boolean omitNorms EnumDeclaration Modifier public static /** Specifies whether and how a field should have term vectors. */ TermVector EnumBody EnumConstantDeclaration /** Do not store term vectors. 
     */ NO MethodDeclaration Modifier public Annotation Override BasicType boolean isStored ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean withPositions ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean withOffsets ReturnStatement Literal false EnumConstantDeclaration /** Store the term vectors of each document. A term vector is a list
     * of the document's terms and their number of occurrences in that document. */ YES MethodDeclaration Modifier public Annotation Override BasicType boolean isStored ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean withPositions ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean withOffsets ReturnStatement Literal false EnumConstantDeclaration /**
     * Store the term vector + token position information
     * 
     * @see #YES
     */ WITH_POSITIONS MethodDeclaration Modifier public Annotation Override BasicType boolean isStored ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean withPositions ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean withOffsets ReturnStatement Literal false EnumConstantDeclaration /**
     * Store the term vector + Token offset information
     * 
     * @see #YES
     */ WITH_OFFSETS MethodDeclaration Modifier public Annotation Override BasicType boolean isStored ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean withPositions ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean withOffsets ReturnStatement Literal true EnumConstantDeclaration /**
     * Store the term vector + Token position and offset information
     * 
     * @see #YES
     * @see #WITH_POSITIONS
     * @see #WITH_OFFSETS
     */ WITH_POSITIONS_OFFSETS MethodDeclaration Modifier public Annotation Override BasicType boolean isStored ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean withPositions ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean withOffsets ReturnStatement Literal true MethodDeclaration /** Get the best representation of a TermVector given the flags. */ Modifier public static ReferenceType TermVector toTermVector FormalParameter BasicType boolean stored FormalParameter BasicType boolean withOffsets FormalParameter BasicType boolean withPositions IfStatement MemberReference ! stored BlockStatement ReturnStatement MemberReference TermVector NO End IfStatement MemberReference withOffsets BlockStatement IfStatement MemberReference withPositions BlockStatement ReturnStatement MemberReference Field.TermVector WITH_POSITIONS_OFFSETS End ReturnStatement MemberReference Field.TermVector WITH_OFFSETS End IfStatement MemberReference withPositions BlockStatement ReturnStatement MemberReference Field.TermVector WITH_POSITIONS End ReturnStatement MemberReference Field.TermVector YES MethodDeclaration Modifier public abstract BasicType boolean isStored MethodDeclaration Modifier public abstract BasicType boolean withPositions MethodDeclaration Modifier public abstract BasicType boolean withOffsets MethodDeclaration /** The value of the field as a String, or null.  If null, the Reader value or
   * binary value is used.  Exactly one of stringValue(),
   * readerValue(), and getBinaryValue() must be set. */ Modifier public ReferenceType String stringValue ReturnStatement TernaryExpression BinaryOperation instanceof MemberReference fieldsData ReferenceType String Cast ReferenceType String MemberReference fieldsData Literal null MethodDeclaration /** The value of the field as a Reader, or null.  If null, the String value or
   * binary value is used.  Exactly one of stringValue(),
   * readerValue(), and getBinaryValue() must be set. */ Modifier public ReferenceType Reader readerValue ReturnStatement TernaryExpression BinaryOperation instanceof MemberReference fieldsData ReferenceType Reader Cast ReferenceType Reader MemberReference fieldsData Literal null MethodDeclaration /** The TokesStream for this field to be used when indexing, or null.  If null, the Reader value
   * or String value is analyzed to produce the indexed tokens. */ Modifier public ReferenceType TokenStream tokenStreamValue ReturnStatement MemberReference tokenStream MethodDeclaration /** <p>Expert: change the value of this field.  This can
   *  be used during indexing to re-use a single Field
   *  instance to improve indexing speed by avoiding GC cost
   *  of new'ing and reclaiming Field instances.  Typically
   *  a single {@link Document} instance is re-used as
   *  well.  This helps most on small documents.</p>
   * 
   *  <p>Each Field instance should only be used once
   *  within a single {@link Document} instance.  See <a
   *  href=""http://wiki.apache.org/lucene-java/ImproveIndexingSpeed"">ImproveIndexingSpeed</a>
   *  for details.</p> */ Modifier public setValue FormalParameter ReferenceType String value IfStatement MemberReference isBinary BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""cannot set a String value on a binary field"" End StatementExpression Assignment MemberReference fieldsData MemberReference value = MethodDeclaration /** Expert: change the value of this field.  See <a href=""#setValue(java.lang.String)"">setValue(String)</a>. */ Modifier public setValue FormalParameter ReferenceType Reader value IfStatement MemberReference isBinary BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""cannot set a Reader value on a binary field"" End IfStatement MemberReference isStored BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""cannot set a Reader value on a stored field"" End StatementExpression Assignment MemberReference fieldsData MemberReference value = MethodDeclaration /** Expert: change the value of this field.  See <a href=""#setValue(java.lang.String)"">setValue(String)</a>. */ Modifier public setValue FormalParameter BasicType byte value IfStatement MemberReference ! isBinary BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""cannot set a byte[] value on a non-binary field"" End StatementExpression Assignment MemberReference fieldsData MemberReference value = StatementExpression Assignment MemberReference binaryLength MemberReference value length = StatementExpression Assignment MemberReference binaryOffset Literal 0 = MethodDeclaration /** Expert: change the value of this field.  See <a href=""#setValue(java.lang.String)"">setValue(String)</a>. */ Modifier public setValue FormalParameter BasicType byte value FormalParameter BasicType int offset FormalParameter BasicType int length IfStatement MemberReference ! isBinary BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""cannot set a byte[] value on a non-binary field"" End StatementExpression Assignment MemberReference fieldsData MemberReference value = StatementExpression Assignment MemberReference binaryLength MemberReference length = StatementExpression Assignment MemberReference binaryOffset MemberReference offset = MethodDeclaration /** Expert: sets the token stream to be used for indexing and causes isIndexed() and isTokenized() to return true.
   *  May be combined with stored values from stringValue() or getBinaryValue() */ Modifier public setTokenStream FormalParameter ReferenceType TokenStream tokenStream StatementExpression Assignment This MemberReference isIndexed Literal true = StatementExpression Assignment This MemberReference isTokenized Literal true = StatementExpression Assignment This MemberReference tokenStream MemberReference tokenStream = ConstructorDeclaration Modifier public /**
   * Create a field by specifying its name, value and how it will
   * be saved in the index. Term vectors will not be stored in the index.
   * 
   * @param name The name of the field
   * @param value The string to process
   * @param store Whether <code>value</code> should be stored in the index
   * @param index Whether the field should be indexed, and if so, if it should
   *  be tokenized before indexing 
   * @throws NullPointerException if name or value is <code>null</code>
   * @throws IllegalArgumentException if the field is neither stored nor indexed 
   */ Field FormalParameter ReferenceType String name FormalParameter ReferenceType String value FormalParameter ReferenceType Store store FormalParameter ReferenceType Index index StatementExpression ExplicitConstructorInvocation MemberReference name MemberReference value MemberReference store MemberReference index MemberReference TermVector NO ConstructorDeclaration Modifier public /**
   * Create a field by specifying its name, value and how it will
   * be saved in the index.
   * 
   * @param name The name of the field
   * @param value The string to process
   * @param store Whether <code>value</code> should be stored in the index
   * @param index Whether the field should be indexed, and if so, if it should
   *  be tokenized before indexing 
   * @param termVector Whether term vector should be stored
   * @throws NullPointerException if name or value is <code>null</code>
   * @throws IllegalArgumentException in any of the following situations:
   * <ul> 
   *  <li>the field is neither stored nor indexed</li> 
   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>
   * </ul> 
   */ Field FormalParameter ReferenceType String name FormalParameter ReferenceType String value FormalParameter ReferenceType Store store FormalParameter ReferenceType Index index FormalParameter ReferenceType TermVector termVector StatementExpression ExplicitConstructorInvocation MemberReference name Literal true MemberReference value MemberReference store MemberReference index MemberReference termVector ConstructorDeclaration Modifier public /**
   * Create a field by specifying its name, value and how it will
   * be saved in the index.
   * 
   * @param name The name of the field
   * @param internName Whether to .intern() name or not
   * @param value The string to process
   * @param store Whether <code>value</code> should be stored in the index
   * @param index Whether the field should be indexed, and if so, if it should
   *  be tokenized before indexing 
   * @param termVector Whether term vector should be stored
   * @throws NullPointerException if name or value is <code>null</code>
   * @throws IllegalArgumentException in any of the following situations:
   * <ul> 
   *  <li>the field is neither stored nor indexed</li> 
   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>
   * </ul> 
   */ Field FormalParameter ReferenceType String name FormalParameter BasicType boolean internName FormalParameter ReferenceType String value FormalParameter ReferenceType Store store FormalParameter ReferenceType Index index FormalParameter ReferenceType TermVector termVector IfStatement BinaryOperation == MemberReference name Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""name cannot be null"" End IfStatement BinaryOperation == MemberReference value Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""value cannot be null"" End IfStatement BinaryOperation && BinaryOperation == MethodInvocation name length Literal 0 BinaryOperation == MethodInvocation value length Literal 0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""name and value cannot both be empty"" End IfStatement BinaryOperation && BinaryOperation == MemberReference index MemberReference Index NO BinaryOperation == MemberReference store MemberReference Store NO ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""it doesn't make sense to have a field that "" Literal ""is neither indexed nor stored"" End IfStatement BinaryOperation && BinaryOperation == MemberReference index MemberReference Index NO BinaryOperation != MemberReference termVector MemberReference TermVector NO ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""cannot store term vector information "" Literal ""for a field that is not indexed"" End IfStatement MemberReference internName StatementExpression Assignment MemberReference name MethodInvocation StringHelper MemberReference name intern = End StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment This MemberReference fieldsData MemberReference value = StatementExpression Assignment This MemberReference isStored MethodInvocation store isStored = StatementExpression Assignment This MemberReference isIndexed MethodInvocation index isIndexed = StatementExpression Assignment This MemberReference isTokenized MethodInvocation index isAnalyzed = StatementExpression Assignment This MemberReference omitNorms MethodInvocation index omitNorms = IfStatement BinaryOperation == MemberReference index MemberReference Index NO BlockStatement StatementExpression Assignment This MemberReference omitTermFreqAndPositions Literal false = End StatementExpression Assignment This MemberReference isBinary Literal false = StatementExpression MethodInvocation MemberReference termVector setStoreTermVector ConstructorDeclaration Modifier public /**
   * Create a tokenized and indexed field that is not stored. Term vectors will
   * not be stored.  The Reader is read only when the Document is added to the index,
   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}
   * has been called.
   * 
   * @param name The name of the field
   * @param reader The reader with the content
   * @throws NullPointerException if name or reader is <code>null</code>
   */ Field FormalParameter ReferenceType String name FormalParameter ReferenceType Reader reader StatementExpression ExplicitConstructorInvocation MemberReference name MemberReference reader MemberReference TermVector NO ConstructorDeclaration Modifier public /**
   * Create a tokenized and indexed field that is not stored, optionally with 
   * storing term vectors.  The Reader is read only when the Document is added to the index,
   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}
   * has been called.
   * 
   * @param name The name of the field
   * @param reader The reader with the content
   * @param termVector Whether term vector should be stored
   * @throws NullPointerException if name or reader is <code>null</code>
   */ Field FormalParameter ReferenceType String name FormalParameter ReferenceType Reader reader FormalParameter ReferenceType TermVector termVector IfStatement BinaryOperation == MemberReference name Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""name cannot be null"" End IfStatement BinaryOperation == MemberReference reader Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""reader cannot be null"" End StatementExpression Assignment This MemberReference name MethodInvocation StringHelper MemberReference name intern = StatementExpression Assignment This MemberReference fieldsData MemberReference reader = StatementExpression Assignment This MemberReference isStored Literal false = StatementExpression Assignment This MemberReference isIndexed Literal true = StatementExpression Assignment This MemberReference isTokenized Literal true = StatementExpression Assignment This MemberReference isBinary Literal false = StatementExpression MethodInvocation MemberReference termVector setStoreTermVector ConstructorDeclaration Modifier public /**
   * Create a tokenized and indexed field that is not stored. Term vectors will
   * not be stored. This is useful for pre-analyzed fields.
   * The TokenStream is read only when the Document is added to the index,
   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}
   * has been called.
   * 
   * @param name The name of the field
   * @param tokenStream The TokenStream with the content
   * @throws NullPointerException if name or tokenStream is <code>null</code>
   */ Field FormalParameter ReferenceType String name FormalParameter ReferenceType TokenStream tokenStream StatementExpression ExplicitConstructorInvocation MemberReference name MemberReference tokenStream MemberReference TermVector NO ConstructorDeclaration Modifier public /**
   * Create a tokenized and indexed field that is not stored, optionally with 
   * storing term vectors.  This is useful for pre-analyzed fields.
   * The TokenStream is read only when the Document is added to the index,
   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}
   * has been called.
   * 
   * @param name The name of the field
   * @param tokenStream The TokenStream with the content
   * @param termVector Whether term vector should be stored
   * @throws NullPointerException if name or tokenStream is <code>null</code>
   */ Field FormalParameter ReferenceType String name FormalParameter ReferenceType TokenStream tokenStream FormalParameter ReferenceType TermVector termVector IfStatement BinaryOperation == MemberReference name Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""name cannot be null"" End IfStatement BinaryOperation == MemberReference tokenStream Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""tokenStream cannot be null"" End StatementExpression Assignment This MemberReference name MethodInvocation StringHelper MemberReference name intern = StatementExpression Assignment This MemberReference fieldsData Literal null = StatementExpression Assignment This MemberReference tokenStream MemberReference tokenStream = StatementExpression Assignment This MemberReference isStored Literal false = StatementExpression Assignment This MemberReference isIndexed Literal true = StatementExpression Assignment This MemberReference isTokenized Literal true = StatementExpression Assignment This MemberReference isBinary Literal false = StatementExpression MethodInvocation MemberReference termVector setStoreTermVector ConstructorDeclaration Modifier public /**
   * Create a stored field with binary value. Optionally the value may be compressed.
   * 
   * @param name The name of the field
   * @param value The binary value
   * @param store How <code>value</code> should be stored (compressed or not)
   * @throws IllegalArgumentException if store is <code>Store.NO</code> 
   */ Field FormalParameter ReferenceType String name FormalParameter BasicType byte value FormalParameter ReferenceType Store store StatementExpression ExplicitConstructorInvocation MemberReference name MemberReference value Literal 0 MemberReference value length MemberReference store ConstructorDeclaration Modifier public /**
   * Create a stored field with binary value. Optionally the value may be compressed.
   * 
   * @param name The name of the field
   * @param value The binary value
   * @param offset Starting offset in value where this Field's bytes are
   * @param length Number of bytes to use for this Field, starting at offset
   * @param store How <code>value</code> should be stored (compressed or not)
   * @throws IllegalArgumentException if store is <code>Store.NO</code> 
   */ Field FormalParameter ReferenceType String name FormalParameter BasicType byte value FormalParameter BasicType int offset FormalParameter BasicType int length FormalParameter ReferenceType Store store IfStatement BinaryOperation == MemberReference name Literal null ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""name cannot be null"" End IfStatement BinaryOperation == MemberReference value Literal null ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""value cannot be null"" End StatementExpression Assignment This MemberReference name MethodInvocation StringHelper MemberReference name intern = StatementExpression Assignment MemberReference fieldsData MemberReference value = IfStatement BinaryOperation == MemberReference store MemberReference Store NO ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""binary values can't be unstored"" End StatementExpression Assignment MemberReference isStored MethodInvocation store isStored = StatementExpression Assignment MemberReference isIndexed Literal false = StatementExpression Assignment MemberReference isTokenized Literal false = StatementExpression Assignment MemberReference omitTermFreqAndPositions Literal false = StatementExpression Assignment MemberReference omitNorms Literal true = StatementExpression Assignment MemberReference isBinary Literal true = StatementExpression Assignment MemberReference binaryLength MemberReference length = StatementExpression Assignment MemberReference binaryOffset MemberReference offset = StatementExpression MethodInvocation MemberReference TermVector NO setStoreTermVector ReferenceType AbstractField ReferenceType Fieldable ReferenceType Serializable",0
686,686,,1
616,616,,1
189,189,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser InterfaceDeclaration Modifier public /**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */ QueryParserConstants ConstantDeclaration /** End of File. */ BasicType int VariableDeclarator EOF Literal 0 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator _NUM_CHAR Literal 1 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator _ESCAPED_CHAR Literal 2 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator _TERM_START_CHAR Literal 3 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator _TERM_CHAR Literal 4 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator _WHITESPACE Literal 5 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator _QUOTED_CHAR Literal 6 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator AND Literal 8 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator OR Literal 9 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator NOT Literal 10 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator PLUS Literal 11 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator MINUS Literal 12 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator LPAREN Literal 13 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RPAREN Literal 14 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator COLON Literal 15 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator STAR Literal 16 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator CARAT Literal 17 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator QUOTED Literal 18 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator TERM Literal 19 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator FUZZY_SLOP Literal 20 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator PREFIXTERM Literal 21 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator WILDTERM Literal 22 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEIN_START Literal 23 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEEX_START Literal 24 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator NUMBER Literal 25 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEIN_TO Literal 26 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEIN_END Literal 27 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEIN_QUOTED Literal 28 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEIN_GOOP Literal 29 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEEX_TO Literal 30 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEEX_END Literal 31 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEEX_QUOTED Literal 32 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator RANGEEX_GOOP Literal 33 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator Boost Literal 0 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator RangeEx Literal 1 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator RangeIn Literal 2 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator DEFAULT Literal 3 ConstantDeclaration /** Literal token values. */ ReferenceType String VariableDeclarator tokenImage ArrayInitializer Literal ""<EOF>"" Literal ""<_NUM_CHAR>"" Literal ""<_ESCAPED_CHAR>"" Literal ""<_TERM_START_CHAR>"" Literal ""<_TERM_CHAR>"" Literal ""<_WHITESPACE>"" Literal ""<_QUOTED_CHAR>"" Literal ""<token of kind 7>"" Literal ""<AND>"" Literal ""<OR>"" Literal ""<NOT>"" Literal ""\""+\"""" Literal ""\""-\"""" Literal ""\""(\"""" Literal ""\"")\"""" Literal ""\"":\"""" Literal ""\""*\"""" Literal ""\""^\"""" Literal ""<QUOTED>"" Literal ""<TERM>"" Literal ""<FUZZY_SLOP>"" Literal ""<PREFIXTERM>"" Literal ""<WILDTERM>"" Literal ""\""[\"""" Literal ""\""{\"""" Literal ""<NUMBER>"" Literal ""\""TO\"""" Literal ""\""]\"""" Literal ""<RANGEIN_QUOTED>"" Literal ""<RANGEIN_GOOP>"" Literal ""\""TO\"""" Literal ""\""}\"""" Literal ""<RANGEEX_QUOTED>"" Literal ""<RANGEEX_GOOP>""",0
818,818,,0
763,763,,1
850,850,,0
923,923,,1
730,730,,0
206,206,CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier final SegmentMergeInfo FieldDeclaration ReferenceType Term VariableDeclarator term FieldDeclaration BasicType int VariableDeclarator base FieldDeclaration BasicType int VariableDeclarator ord FieldDeclaration ReferenceType TermEnum VariableDeclarator termEnum FieldDeclaration ReferenceType IndexReader VariableDeclarator reader FieldDeclaration BasicType int VariableDeclarator delCount FieldDeclaration Modifier private ReferenceType TermPositions VariableDeclarator postings FieldDeclaration Modifier private BasicType int VariableDeclarator docMap ConstructorDeclaration SegmentMergeInfo FormalParameter BasicType int b FormalParameter ReferenceType TermEnum te FormalParameter ReferenceType IndexReader r IOException StatementExpression Assignment MemberReference base MemberReference b = StatementExpression Assignment MemberReference reader MemberReference r = StatementExpression Assignment MemberReference termEnum MemberReference te = StatementExpression Assignment MemberReference term MethodInvocation te term = MethodDeclaration BasicType int getDocMap IfStatement BinaryOperation == MemberReference docMap Literal null BlockStatement StatementExpression Assignment MemberReference delCount Literal 0 = IfStatement MethodInvocation reader hasDeletions BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator maxDoc MethodInvocation reader maxDoc StatementExpression Assignment MemberReference docMap ArrayCreator BasicType int MemberReference maxDoc = LocalVariableDeclaration BasicType int VariableDeclarator j Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference maxDoc MemberReference ++ i BlockStatement IfStatement MethodInvocation reader MemberReference i isDeleted BlockStatement StatementExpression MemberReference ++ delCount StatementExpression Assignment MemberReference ArraySelector MemberReference i docMap Literal - 1 = StatementExpression Assignment MemberReference ArraySelector MemberReference i docMap MemberReference ++ j = End End End End ReturnStatement MemberReference docMap MethodDeclaration ReferenceType TermPositions getPositions IOException IfStatement BinaryOperation == MemberReference postings Literal null BlockStatement StatementExpression Assignment MemberReference postings MethodInvocation reader termPositions = End ReturnStatement MemberReference postings MethodDeclaration Modifier final BasicType boolean next IOException IfStatement MethodInvocation termEnum next BlockStatement StatementExpression Assignment MemberReference term MethodInvocation termEnum term = ReturnStatement Literal true BlockStatement StatementExpression Assignment MemberReference term Literal null = ReturnStatement Literal false End MethodDeclaration Modifier final close IOException StatementExpression MethodInvocation termEnum close IfStatement BinaryOperation != MemberReference postings Literal null BlockStatement StatementExpression MethodInvocation postings close End,0
63,63,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.IOException ClassDeclaration Modifier public /**
 * A memory-resident {@link IndexOutput} implementation.
 */ RAMOutputStream FieldDeclaration Modifier final static BasicType int VariableDeclarator BUFFER_SIZE Literal 1024 FieldDeclaration Modifier private ReferenceType RAMFile VariableDeclarator file FieldDeclaration Modifier private BasicType byte VariableDeclarator currentBuffer FieldDeclaration Modifier private BasicType int VariableDeclarator currentBufferIndex FieldDeclaration Modifier private BasicType int VariableDeclarator bufferPosition FieldDeclaration Modifier private BasicType long VariableDeclarator bufferStart FieldDeclaration Modifier private BasicType int VariableDeclarator bufferLength ConstructorDeclaration Modifier public /** Construct an empty output buffer. */ RAMOutputStream StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType RAMFile ConstructorDeclaration RAMOutputStream FormalParameter ReferenceType RAMFile f StatementExpression Assignment MemberReference file MemberReference f = StatementExpression Assignment MemberReference currentBufferIndex Literal - 1 = StatementExpression Assignment MemberReference currentBuffer Literal null = MethodDeclaration /** Copy the current contents of this buffer to the named output. */ Modifier public writeTo FormalParameter ReferenceType IndexOutput out IOException StatementExpression MethodInvocation flush LocalVariableDeclaration Modifier final BasicType long VariableDeclarator end MemberReference file length LocalVariableDeclaration BasicType long VariableDeclarator pos Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator buffer Literal 0 WhileStatement BinaryOperation < MemberReference pos MemberReference end BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator length MemberReference BUFFER_SIZE LocalVariableDeclaration BasicType long VariableDeclarator nextPos BinaryOperation + MemberReference pos MemberReference length IfStatement BinaryOperation > MemberReference nextPos MemberReference end BlockStatement StatementExpression Assignment MemberReference length Cast BasicType int BinaryOperation - MemberReference end MemberReference pos = End StatementExpression MethodInvocation out MethodInvocation file MemberReference ++ buffer getBuffer MemberReference length writeBytes StatementExpression Assignment MemberReference pos MemberReference nextPos = End MethodDeclaration /** Resets this to an empty buffer. */ Modifier public reset TryStatement StatementExpression MethodInvocation Literal 0 seek CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType RuntimeException MethodInvocation e toString StatementExpression MethodInvocation file Literal 0 setLength MethodDeclaration Modifier public Annotation Override close IOException StatementExpression MethodInvocation flush MethodDeclaration Modifier public Annotation Override seek FormalParameter BasicType long pos IOException StatementExpression MethodInvocation setFileLength IfStatement BinaryOperation || BinaryOperation < MemberReference pos MemberReference bufferStart BinaryOperation >= MemberReference pos BinaryOperation + MemberReference bufferStart MemberReference bufferLength BlockStatement StatementExpression Assignment MemberReference currentBufferIndex Cast BasicType int BinaryOperation / MemberReference pos MemberReference BUFFER_SIZE = StatementExpression MethodInvocation switchCurrentBuffer End StatementExpression Assignment MemberReference bufferPosition Cast BasicType int BinaryOperation % MemberReference pos MemberReference BUFFER_SIZE = MethodDeclaration Modifier public Annotation Override BasicType long length ReturnStatement MemberReference file length MethodDeclaration Modifier public Annotation Override writeByte FormalParameter BasicType byte b IOException IfStatement BinaryOperation == MemberReference bufferPosition MemberReference bufferLength BlockStatement StatementExpression MemberReference ++ currentBufferIndex StatementExpression MethodInvocation switchCurrentBuffer End StatementExpression Assignment MemberReference ArraySelector MemberReference ++ bufferPosition currentBuffer MemberReference b = MethodDeclaration Modifier public Annotation Override writeBytes FormalParameter BasicType byte b FormalParameter BasicType int offset FormalParameter BasicType int len IOException AssertStatement BinaryOperation != MemberReference b Literal null WhileStatement BinaryOperation > MemberReference len Literal 0 BlockStatement IfStatement BinaryOperation == MemberReference bufferPosition MemberReference bufferLength BlockStatement StatementExpression MemberReference ++ currentBufferIndex StatementExpression MethodInvocation switchCurrentBuffer End LocalVariableDeclaration BasicType int VariableDeclarator remainInBuffer BinaryOperation - MemberReference currentBuffer length MemberReference bufferPosition LocalVariableDeclaration BasicType int VariableDeclarator bytesToCopy TernaryExpression BinaryOperation < MemberReference len MemberReference remainInBuffer MemberReference len MemberReference remainInBuffer StatementExpression MethodInvocation System MemberReference b MemberReference offset MemberReference currentBuffer MemberReference bufferPosition MemberReference bytesToCopy arraycopy StatementExpression Assignment MemberReference offset MemberReference bytesToCopy += StatementExpression Assignment MemberReference len MemberReference bytesToCopy -= StatementExpression Assignment MemberReference bufferPosition MemberReference bytesToCopy += End MethodDeclaration Modifier private final switchCurrentBuffer IOException IfStatement BinaryOperation == MemberReference currentBufferIndex MethodInvocation file numBuffers BlockStatement StatementExpression Assignment MemberReference currentBuffer MethodInvocation file MemberReference BUFFER_SIZE addBuffer = BlockStatement StatementExpression Assignment MemberReference currentBuffer MethodInvocation file MemberReference currentBufferIndex getBuffer = End StatementExpression Assignment MemberReference bufferPosition Literal 0 = StatementExpression Assignment MemberReference bufferStart BinaryOperation * Cast BasicType long MemberReference BUFFER_SIZE Cast BasicType long MemberReference currentBufferIndex = StatementExpression Assignment MemberReference bufferLength MemberReference currentBuffer length = MethodDeclaration Modifier private setFileLength LocalVariableDeclaration BasicType long VariableDeclarator pointer BinaryOperation + MemberReference bufferStart MemberReference bufferPosition IfStatement BinaryOperation > MemberReference pointer MemberReference file length BlockStatement StatementExpression MethodInvocation file MemberReference pointer setLength End MethodDeclaration Modifier public Annotation Override flush IOException StatementExpression MethodInvocation file MethodInvocation System currentTimeMillis setLastModified StatementExpression MethodInvocation setFileLength MethodDeclaration Modifier public Annotation Override BasicType long getFilePointer ReturnStatement TernaryExpression BinaryOperation < MemberReference currentBufferIndex Literal 0 Literal 0 BinaryOperation + MemberReference bufferStart MemberReference bufferPosition MethodDeclaration /** Returns byte usage of all buffers. */ Modifier public BasicType long sizeInBytes ReturnStatement BinaryOperation * MethodInvocation file numBuffers MemberReference BUFFER_SIZE ReferenceType IndexOutput",0
746,746,,1
389,389,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes Import java.util.List Import org.apache.lucene.messages.MessageImpl Import org.apache.lucene.queryParser.core.QueryNodeError Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.messages.QueryParserMessages Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax ClassDeclaration Modifier public /**
 * A {@link BoostQueryNode} boosts the QueryNode tree which is under this node.
 * So, it must only and always have one child.
 * 
 * The boost value may vary from 0.0 to 1.0.
 * 
 */ BoostQueryNode FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal - 3929082630855807593L FieldDeclaration Modifier private BasicType float VariableDeclarator value Literal 0 ConstructorDeclaration Modifier public /**
   * Constructs a boost node
   * 
   * @param query
   *          the query to be boosted
   * @param value
   *          the boost value, it may vary from 0.0 to 1.0
   * 
   * @throws QueryNodeException
   */ BoostQueryNode FormalParameter ReferenceType QueryNode query FormalParameter BasicType float value QueryNodeException IfStatement BinaryOperation == MemberReference query Literal null BlockStatement ThrowStatement ClassCreator ReferenceType QueryNodeError ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages NODE_ACTION_NOT_SUPPORTED Literal ""query"" Literal ""null"" End StatementExpression Assignment This MemberReference value MemberReference value = StatementExpression MethodInvocation Literal false setLeaf StatementExpression MethodInvocation allocate StatementExpression MethodInvocation MemberReference query add MethodDeclaration /**
   * Returns the single child which this node boosts.
   * 
   * @return the single child which this node boosts
   */ Modifier public ReferenceType QueryNode getChild LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator children MethodInvocation getChildren IfStatement BinaryOperation || BinaryOperation == MemberReference children Literal null BinaryOperation == MethodInvocation children size Literal 0 BlockStatement ReturnStatement Literal null End ReturnStatement MethodInvocation children Literal 0 get MethodDeclaration /**
   * Returns the boost value. It may vary from 0.0 to 1.0.
   * 
   * @return the boost value
   */ Modifier public BasicType float getValue ReturnStatement This MemberReference value MethodDeclaration /**
   * Returns the boost value parsed to a string.
   * 
   * @return the parsed value
   */ Modifier private ReferenceType CharSequence getValueString LocalVariableDeclaration ReferenceType Float VariableDeclarator f MethodInvocation Float This MemberReference value valueOf IfStatement BinaryOperation == MemberReference f MethodInvocation f longValue ReturnStatement BinaryOperation + Literal """" MethodInvocation f longValue ReturnStatement BinaryOperation + Literal """" MemberReference f End MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<boost value='"" MethodInvocation getValueString Literal ""'>"" Literal ""\n"" MethodInvocation MethodInvocation toString getChild Literal ""\n</boost>"" MethodDeclaration Modifier public ReferenceType CharSequence toQueryString FormalParameter ReferenceType EscapeQuerySyntax escapeSyntaxParser IfStatement BinaryOperation == MethodInvocation getChild Literal null ReturnStatement Literal """" End ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation MemberReference escapeSyntaxParser toQueryString getChild Literal ""^"" MethodInvocation getValueString MethodDeclaration Modifier public Annotation Override ReferenceType QueryNode cloneTree CloneNotSupportedException LocalVariableDeclaration ReferenceType BoostQueryNode VariableDeclarator clone Cast ReferenceType BoostQueryNode SuperMethodInvocation cloneTree StatementExpression Assignment MemberReference clone value This MemberReference value = ReturnStatement MemberReference clone ReferenceType QueryNodeImpl",0
291,291,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import org.apache.lucene.index.Term Import org.apache.lucene.search.Query Import org.apache.lucene.search.TermQuery Import org.apache.lucene.xmlparser.DOMUtils Import org.apache.lucene.xmlparser.ParserException Import org.apache.lucene.xmlparser.QueryBuilder Import org.w3c.dom.Element ClassDeclaration Modifier public /**
 * 
 */ TermQueryBuilder MethodDeclaration Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration ReferenceType String VariableDeclarator field MethodInvocation DOMUtils MemberReference e Literal ""fieldName"" getAttributeWithInheritanceOrFail LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation DOMUtils MemberReference e getNonBlankTextOrFail LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator tq ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference field MemberReference value StatementExpression MethodInvocation tq MethodInvocation DOMUtils MemberReference e Literal ""boost"" Literal 1.0f getAttribute setBoost ReturnStatement MemberReference tq ReferenceType QueryBuilder",1
256,256,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier final TermsHashPerThread FieldDeclaration Modifier final ReferenceType TermsHash VariableDeclarator termsHash FieldDeclaration Modifier final ReferenceType TermsHashConsumerPerThread VariableDeclarator consumer FieldDeclaration Modifier final ReferenceType TermsHashPerThread VariableDeclarator nextPerThread FieldDeclaration Modifier final ReferenceType CharBlockPool VariableDeclarator charPool FieldDeclaration Modifier final ReferenceType IntBlockPool VariableDeclarator intPool FieldDeclaration Modifier final ReferenceType ByteBlockPool VariableDeclarator bytePool FieldDeclaration Modifier final BasicType boolean VariableDeclarator primary FieldDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocState VariableDeclarator docState FieldDeclaration Modifier final ReferenceType RawPostingList VariableDeclarator freePostings ArrayCreator ReferenceType RawPostingList Literal 256 FieldDeclaration BasicType int VariableDeclarator freePostingsCount ConstructorDeclaration Modifier public TermsHashPerThread FormalParameter ReferenceType DocInverterPerThread docInverterPerThread FormalParameter Modifier final ReferenceType TermsHash termsHash FormalParameter Modifier final ReferenceType TermsHash nextTermsHash FormalParameter Modifier final ReferenceType TermsHashPerThread primaryPerThread StatementExpression Assignment MemberReference docState MemberReference docInverterPerThread docState = StatementExpression Assignment This MemberReference termsHash MemberReference termsHash = StatementExpression Assignment This MemberReference consumer MethodInvocation termsHash.consumer This addThread = IfStatement BinaryOperation != MemberReference nextTermsHash Literal null BlockStatement StatementExpression Assignment MemberReference charPool ClassCreator ReferenceType CharBlockPool MemberReference termsHash docWriter = StatementExpression Assignment MemberReference primary Literal true = BlockStatement StatementExpression Assignment MemberReference charPool MemberReference primaryPerThread charPool = StatementExpression Assignment MemberReference primary Literal false = End StatementExpression Assignment MemberReference intPool ClassCreator ReferenceType IntBlockPool MemberReference termsHash docWriter MemberReference termsHash trackAllocations = StatementExpression Assignment MemberReference bytePool ClassCreator ReferenceType ByteBlockPool MemberReference termsHash.docWriter byteBlockAllocator MemberReference termsHash trackAllocations = IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression Assignment MemberReference nextPerThread MethodInvocation nextTermsHash MemberReference docInverterPerThread This addThread = StatementExpression Assignment MemberReference nextPerThread Literal null = End MethodDeclaration Annotation Override ReferenceType InvertedDocConsumerPerField addField FormalParameter ReferenceType DocInverterPerField docInverterPerField FormalParameter Modifier final ReferenceType FieldInfo fieldInfo ReturnStatement ClassCreator ReferenceType TermsHashPerField MemberReference docInverterPerField This MemberReference nextPerThread MemberReference fieldInfo MethodDeclaration Modifier public synchronized Annotation Override abort StatementExpression MethodInvocation Literal true reset StatementExpression MethodInvocation consumer abort IfStatement BinaryOperation != MemberReference nextPerThread Literal null StatementExpression MethodInvocation nextPerThread abort End MethodDeclaration morePostings IOException AssertStatement BinaryOperation == MemberReference freePostingsCount Literal 0 StatementExpression MethodInvocation termsHash MemberReference freePostings getPostings StatementExpression Assignment MemberReference freePostingsCount MemberReference freePostings length = AssertStatement MethodInvocation MemberReference freePostings MemberReference freePostingsCount BinaryOperation + Literal ""consumer="" MemberReference consumer noNullPostings MethodDeclaration Modifier private static BasicType boolean noNullPostings FormalParameter ReferenceType RawPostingList postings FormalParameter BasicType int count FormalParameter ReferenceType String details ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i AssertStatement BinaryOperation != MemberReference ArraySelector MemberReference i postings Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""postings["" MemberReference i Literal ""] of "" MemberReference count Literal "" is null: "" MemberReference details End ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override startDocument IOException StatementExpression MethodInvocation consumer startDocument IfStatement BinaryOperation != MemberReference nextPerThread Literal null StatementExpression MethodInvocation nextPerThread.consumer startDocument End MethodDeclaration Modifier public Annotation Override ReferenceType DocumentsWriter ReferenceType DocWriter finishDocument IOException LocalVariableDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocWriter VariableDeclarator doc MethodInvocation consumer finishDocument LocalVariableDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocWriter VariableDeclarator doc2 IfStatement BinaryOperation != MemberReference nextPerThread Literal null StatementExpression Assignment MemberReference doc2 MethodInvocation nextPerThread.consumer finishDocument = StatementExpression Assignment MemberReference doc2 Literal null = End IfStatement BinaryOperation == MemberReference doc Literal null ReturnStatement MemberReference doc2 BlockStatement StatementExpression MethodInvocation doc MemberReference doc2 setNext ReturnStatement MemberReference doc End MethodDeclaration reset FormalParameter BasicType boolean recyclePostings StatementExpression MethodInvocation intPool reset StatementExpression MethodInvocation bytePool reset IfStatement MemberReference primary StatementExpression MethodInvocation charPool reset End IfStatement MemberReference recyclePostings BlockStatement StatementExpression MethodInvocation termsHash MemberReference freePostings MemberReference freePostingsCount recyclePostings StatementExpression Assignment MemberReference freePostingsCount Literal 0 = End ReferenceType InvertedDocConsumerPerThread",0
233,233,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.net.Socket Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream ClassDeclaration Modifier public /**
 * A {@link LockFactory} that wraps another {@link
 * LockFactory} and verifies that each lock obtain/release
 * is ""correct"" (never results in two processes holding the
 * lock at the same time).  It does this by contacting an
 * external server ({@link LockVerifyServer}) to assert that
 * at most one process holds the lock at a time.  To use
 * this, you should also run {@link LockVerifyServer} on the
 * host & port matching what you pass to the constructor.
 *
 * @see LockVerifyServer
 * @see LockStressTest
 */ VerifyingLockFactory FieldDeclaration ReferenceType LockFactory VariableDeclarator lf FieldDeclaration BasicType byte VariableDeclarator id FieldDeclaration ReferenceType String VariableDeclarator host FieldDeclaration BasicType int VariableDeclarator port ClassDeclaration Modifier private CheckedLock FieldDeclaration Modifier private ReferenceType Lock VariableDeclarator lock ConstructorDeclaration Modifier public CheckedLock FormalParameter ReferenceType Lock lock StatementExpression Assignment This MemberReference lock MemberReference lock = MethodDeclaration Modifier private verify FormalParameter BasicType byte message TryStatement LocalVariableDeclaration ReferenceType Socket VariableDeclarator s ClassCreator ReferenceType Socket MemberReference host MemberReference port LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out MethodInvocation s getOutputStream StatementExpression MethodInvocation out MemberReference id write StatementExpression MethodInvocation out MemberReference message write LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation s getInputStream LocalVariableDeclaration BasicType int VariableDeclarator result MethodInvocation in read StatementExpression MethodInvocation in close StatementExpression MethodInvocation out close StatementExpression MethodInvocation s close IfStatement BinaryOperation != MemberReference result Literal 0 ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""lock was double acquired"" End CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e MethodDeclaration Modifier public synchronized Annotation Override BasicType boolean obtain FormalParameter BasicType long lockWaitTimeout LockObtainFailedException IOException LocalVariableDeclaration BasicType boolean VariableDeclarator obtained MethodInvocation lock MemberReference lockWaitTimeout obtain IfStatement MemberReference obtained StatementExpression MethodInvocation Cast BasicType byte Literal 1 verify End ReturnStatement MemberReference obtained MethodDeclaration Modifier public synchronized Annotation Override BasicType boolean obtain LockObtainFailedException IOException ReturnStatement MethodInvocation lock obtain MethodDeclaration Modifier public synchronized Annotation Override BasicType boolean isLocked IOException ReturnStatement MethodInvocation lock isLocked MethodDeclaration Modifier public synchronized Annotation Override release IOException IfStatement MethodInvocation isLocked BlockStatement StatementExpression MethodInvocation Cast BasicType byte Literal 0 verify StatementExpression MethodInvocation lock release End ReferenceType Lock ConstructorDeclaration Modifier public /**
   * @param id should be a unique id across all clients
   * @param lf the LockFactory that we are testing
   * @param host host or IP where {@link LockVerifyServer}
            is running
   * @param port the port {@link LockVerifyServer} is
            listening on
  */ VerifyingLockFactory FormalParameter BasicType byte id FormalParameter ReferenceType LockFactory lf FormalParameter ReferenceType String host FormalParameter BasicType int port IOException StatementExpression Assignment This MemberReference id MemberReference id = StatementExpression Assignment This MemberReference lf MemberReference lf = StatementExpression Assignment This MemberReference host MemberReference host = StatementExpression Assignment This MemberReference port MemberReference port = MethodDeclaration Modifier public synchronized Annotation Override ReferenceType Lock makeLock FormalParameter ReferenceType String lockName ReturnStatement ClassCreator ReferenceType CheckedLock MethodInvocation lf MemberReference lockName makeLock MethodDeclaration Modifier public synchronized Annotation Override clearLock FormalParameter ReferenceType String lockName IOException StatementExpression MethodInvocation lf MemberReference lockName clearLock ReferenceType LockFactory",0
403,403,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import java.util.Arrays Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor Import org.apache.lucene.util.AttributeImpl ClassDeclaration Modifier public /**
 * This attribute is used by {@link MultiFieldQueryNodeProcessor} processor and
 * must be defined in the {@link QueryConfigHandler}. This attribute tells the
 * processor to which fields the terms in the query should be expanded. <br/>
 * 
 * @see org.apache.lucene.queryParser.standard.config.MultiFieldAttribute
 */ MultiFieldAttributeImpl FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal - 6809760312720049526L FieldDeclaration Modifier private ReferenceType CharSequence VariableDeclarator fields ConstructorDeclaration Modifier public MultiFieldAttributeImpl MethodDeclaration Modifier public setFields FormalParameter ReferenceType CharSequence fields StatementExpression Assignment This MemberReference fields MemberReference fields = MethodDeclaration Modifier public ReferenceType CharSequence getFields ReturnStatement This MemberReference fields MethodDeclaration Modifier public Annotation Override clear ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override copyTo FormalParameter ReferenceType AttributeImpl target ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object other IfStatement BinaryOperation instanceof MemberReference other ReferenceType MultiFieldAttributeImpl BlockStatement LocalVariableDeclaration ReferenceType MultiFieldAttributeImpl VariableDeclarator fieldsAttr Cast ReferenceType MultiFieldAttributeImpl MemberReference other ReturnStatement MethodInvocation Arrays This MemberReference fields MemberReference fieldsAttr fields equals End ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement MethodInvocation Arrays This MemberReference fields hashCode MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""<fieldsAttribute fields="" MethodInvocation Arrays This MemberReference fields toString Literal ""/>"" ReferenceType AttributeImpl ReferenceType MultiFieldAttribute",0
3,3,"CompilationUnit PackageDeclaration org.apache.lucene.store.db Import java.io.IOException Import org.apache.lucene.store.IndexOutput ClassDeclaration Modifier public DbIndexOutput FieldDeclaration /**
     * The size of data blocks, currently 16k (2^14), is determined by this
     * constant.
     */ Modifier public final static BasicType int VariableDeclarator BLOCK_SHIFT Literal 14 FieldDeclaration Modifier public final static BasicType int VariableDeclarator BLOCK_LEN BinaryOperation << Literal 1 MemberReference BLOCK_SHIFT FieldDeclaration Modifier public final static BasicType int VariableDeclarator BLOCK_MASK BinaryOperation - MemberReference BLOCK_LEN Literal 1 FieldDeclaration Modifier protected BasicType long VariableDeclarator position Literal 0L VariableDeclarator length Literal 0L FieldDeclaration Modifier protected ReferenceType DbDirectory VariableDeclarator directory FieldDeclaration Modifier protected ReferenceType Block VariableDeclarator block FieldDeclaration Modifier protected ReferenceType File VariableDeclarator file ConstructorDeclaration Modifier protected DbIndexOutput FormalParameter ReferenceType DbDirectory directory FormalParameter ReferenceType String name FormalParameter BasicType boolean create IOException StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference directory MemberReference directory = StatementExpression Assignment MemberReference file ClassCreator ReferenceType File MemberReference directory MemberReference name MemberReference create = StatementExpression Assignment MemberReference block ClassCreator ReferenceType Block MemberReference file = StatementExpression Assignment MemberReference length MethodInvocation file getLength = StatementExpression MethodInvocation MemberReference length seek StatementExpression MethodInvocation block MemberReference directory get StatementExpression MethodInvocation directory.openFiles This add MethodDeclaration Modifier public Annotation Override close IOException StatementExpression MethodInvocation flush StatementExpression MethodInvocation file MemberReference directory MemberReference length MethodInvocation System currentTimeMillis modify StatementExpression MethodInvocation directory.openFiles This remove MethodDeclaration Modifier public Annotation Override flush IOException IfStatement BinaryOperation > MemberReference length Literal 0 StatementExpression MethodInvocation block MemberReference directory put End MethodDeclaration Modifier public Annotation Override writeByte FormalParameter BasicType byte b IOException LocalVariableDeclaration BasicType int VariableDeclarator blockPos Cast BasicType int BinaryOperation & MemberReference ++ position MemberReference BLOCK_MASK StatementExpression Assignment MethodInvocation block ArraySelector MemberReference blockPos getData MemberReference b = IfStatement BinaryOperation == BinaryOperation + MemberReference blockPos Literal 1 MemberReference BLOCK_LEN BlockStatement StatementExpression MethodInvocation block MemberReference directory put StatementExpression MethodInvocation block MemberReference position seek StatementExpression MethodInvocation block MemberReference directory get End IfStatement BinaryOperation > MemberReference position MemberReference length StatementExpression Assignment MemberReference length MemberReference position = End MethodDeclaration Modifier public Annotation Override writeBytes FormalParameter BasicType byte b FormalParameter BasicType int offset FormalParameter BasicType int len IOException LocalVariableDeclaration BasicType int VariableDeclarator blockPos Cast BasicType int BinaryOperation & MemberReference position MemberReference BLOCK_MASK WhileStatement BinaryOperation >= BinaryOperation + MemberReference blockPos MemberReference len MemberReference BLOCK_LEN BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator blockLen BinaryOperation - MemberReference BLOCK_LEN MemberReference blockPos StatementExpression MethodInvocation System MemberReference b MemberReference offset MethodInvocation block getData MemberReference blockPos MemberReference blockLen arraycopy StatementExpression MethodInvocation block MemberReference directory put StatementExpression Assignment MemberReference len MemberReference blockLen -= StatementExpression Assignment MemberReference offset MemberReference blockLen += StatementExpression Assignment MemberReference position MemberReference blockLen += StatementExpression MethodInvocation block MemberReference position seek StatementExpression MethodInvocation block MemberReference directory get StatementExpression Assignment MemberReference blockPos Literal 0 = End IfStatement BinaryOperation > MemberReference len Literal 0 BlockStatement StatementExpression MethodInvocation System MemberReference b MemberReference offset MethodInvocation block getData MemberReference blockPos MemberReference len arraycopy StatementExpression Assignment MemberReference position MemberReference len += End IfStatement BinaryOperation > MemberReference position MemberReference length StatementExpression Assignment MemberReference length MemberReference position = End MethodDeclaration Modifier public Annotation Override BasicType long length IOException ReturnStatement MemberReference length MethodDeclaration Modifier public Annotation Override seek FormalParameter BasicType long pos IOException IfStatement BinaryOperation > MemberReference pos MemberReference length ThrowStatement ClassCreator ReferenceType IOException Literal ""seeking past end of file"" End IfStatement BinaryOperation == BinaryOperation >>> MemberReference pos MemberReference BLOCK_SHIFT BinaryOperation >>> MemberReference position MemberReference BLOCK_SHIFT StatementExpression Assignment MemberReference position MemberReference pos = BlockStatement StatementExpression MethodInvocation block MemberReference directory put StatementExpression MethodInvocation block MemberReference pos seek StatementExpression MethodInvocation block MemberReference directory get StatementExpression Assignment MemberReference position MemberReference pos = End MethodDeclaration Modifier public Annotation Override BasicType long getFilePointer ReturnStatement MemberReference position ReferenceType IndexOutput",0
815,815,,1
624,624,,0
916,916,,0
776,776,,0
36,36,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard Import java.util.Map Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.queryParser.ParseException Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.Query ClassDeclaration Modifier public /**
 * This class behaves as the as the lucene 2.4 MultiFieldQueryParser class, but uses the new
 * query parser interface instead of the old one. <br/>
 * <br/>
 * This class should be used when the new query parser features are needed and
 * also keep at the same time the old query parser interface. <br/>
 * 
 * @deprecated this class will be removed soon, it's a temporary class to be
 *             used along the transition from the old query parser to the new
 *             one
 */ MultiFieldQueryParserWrapper ConstructorDeclaration Modifier public Annotation SuppressWarnings Literal ""unchecked"" /**
   * Creates a MultiFieldQueryParser. Allows passing of a map with term to
   * Boost, and the boost to apply to each term.
   * 
   * <p>
   * It will, when parse(String query) is called, construct a query like this
   * (assuming the query consists of two terms and you specify the two fields
   * <code>title</code> and <code>body</code>):
   * </p>
   * 
   * <code>
     * (title:term1 body:term1) (title:term2 body:term2)
     * </code>
   * 
   * <p>
   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:
   * </p>
   * 
   * <code>
     * +(title:term1 body:term1) +(title:term2 body:term2)
     * </code>
   * 
   * <p>
   * When you pass a boost (title=>5 body=>10) you can get
   * </p>
   * 
   * <code>
     * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)
     * </code>
   * 
   * <p>
   * In other words, all the query's terms must appear, but it doesn't matter in
   * what fields they appear.
   * </p>
   */ MultiFieldQueryParserWrapper FormalParameter ReferenceType String fields FormalParameter ReferenceType Analyzer analyzer FormalParameter ReferenceType Map boosts StatementExpression ExplicitConstructorInvocation MemberReference fields MemberReference analyzer LocalVariableDeclaration ReferenceType StandardQueryParser VariableDeclarator qpHelper Cast ReferenceType StandardQueryParser MethodInvocation getQueryParserHelper StatementExpression MethodInvocation qpHelper MemberReference fields setMultiFields StatementExpression MethodInvocation qpHelper MemberReference boosts setFieldsBoost ConstructorDeclaration Modifier public /**
   * Creates a MultiFieldQueryParser.
   * 
   * <p>
   * It will, when parse(String query) is called, construct a query like this
   * (assuming the query consists of two terms and you specify the two fields
   * <code>title</code> and <code>body</code>):
   * </p>
   * 
   * <code>
     * (title:term1 body:term1) (title:term2 body:term2)
     * </code>
   * 
   * <p>
   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:
   * </p>
   * 
   * <code>
     * +(title:term1 body:term1) +(title:term2 body:term2)
     * </code>
   * 
   * <p>
   * In other words, all the query's terms must appear, but it doesn't matter in
   * what fields they appear.
   * </p>
   */ MultiFieldQueryParserWrapper FormalParameter ReferenceType String fields FormalParameter ReferenceType Analyzer analyzer StatementExpression SuperConstructorInvocation Literal null MemberReference analyzer LocalVariableDeclaration ReferenceType StandardQueryParser VariableDeclarator qpHelper Cast ReferenceType StandardQueryParser MethodInvocation getQueryParserHelper StatementExpression MethodInvocation qpHelper MemberReference analyzer setAnalyzer StatementExpression MethodInvocation qpHelper MemberReference fields setMultiFields MethodDeclaration /**
   * Parses a query which searches on the fields specified.
   * <p>
   * If x fields are specified, this effectively constructs:
   * 
   * <pre>
   * &lt;code&gt;
   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)
   * &lt;/code&gt;
   * </pre>
   * 
   * @param queries
   *          Queries strings to parse
   * @param fields
   *          Fields to search on
   * @param analyzer
   *          Analyzer to use
   * @throws ParseException
   *           if query parsing fails
   * @throws IllegalArgumentException
   *           if the length of the queries array differs from the length of the
   *           fields array
   */ Modifier public static ReferenceType Query parse FormalParameter ReferenceType String queries FormalParameter ReferenceType String fields FormalParameter ReferenceType Analyzer analyzer ParseException IfStatement BinaryOperation != MemberReference queries length MemberReference fields length ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""queries.length != fields.length"" End LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator bQuery ClassCreator ReferenceType BooleanQuery ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fields length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType QueryParserWrapper VariableDeclarator qp ClassCreator ReferenceType QueryParserWrapper MemberReference ArraySelector MemberReference i fields MemberReference analyzer LocalVariableDeclaration ReferenceType Query VariableDeclarator q MethodInvocation qp MemberReference ArraySelector MemberReference i queries parse IfStatement BinaryOperation && BinaryOperation != MemberReference q Literal null BinaryOperation || BinaryOperation instanceof MemberReference q ReferenceType BooleanQuery BinaryOperation > Cast ReferenceType BooleanQuery MemberReference q Literal 0 BlockStatement StatementExpression MethodInvocation bQuery MemberReference q MemberReference BooleanClause.Occur SHOULD add End End ReturnStatement MemberReference bQuery MethodDeclaration /**
   * Parses a query, searching on the fields specified. Use this if you need to
   * specify certain fields as required, and others as prohibited.
   * <p>
   * 
   * <pre>
   * Usage:
   * &lt;code&gt;
   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};
   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,
   *                BooleanClause.Occur.MUST,
   *                BooleanClause.Occur.MUST_NOT};
   * MultiFieldQueryParser.parse(&quot;query&quot;, fields, flags, analyzer);
   * &lt;/code&gt;
   * </pre>
   *<p>
   * The code above would construct a query:
   * 
   * <pre>
   * &lt;code&gt;
   * (filename:query) +(contents:query) -(description:query)
   * &lt;/code&gt;
   * </pre>
   * 
   * @param query
   *          Query string to parse
   * @param fields
   *          Fields to search on
   * @param flags
   *          Flags describing the fields
   * @param analyzer
   *          Analyzer to use
   * @throws ParseException
   *           if query parsing fails
   * @throws IllegalArgumentException
   *           if the length of the fields array differs from the length of the
   *           flags array
   */ Modifier public static ReferenceType Query parse FormalParameter ReferenceType String query FormalParameter ReferenceType String fields FormalParameter ReferenceType BooleanClause ReferenceType Occur flags FormalParameter ReferenceType Analyzer analyzer ParseException IfStatement BinaryOperation != MemberReference fields length MemberReference flags length ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""fields.length != flags.length"" End LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator bQuery ClassCreator ReferenceType BooleanQuery ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fields length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType QueryParserWrapper VariableDeclarator qp ClassCreator ReferenceType QueryParserWrapper MemberReference ArraySelector MemberReference i fields MemberReference analyzer LocalVariableDeclaration ReferenceType Query VariableDeclarator q MethodInvocation qp MemberReference query parse IfStatement BinaryOperation && BinaryOperation != MemberReference q Literal null BinaryOperation || BinaryOperation instanceof MemberReference q ReferenceType BooleanQuery BinaryOperation > Cast ReferenceType BooleanQuery MemberReference q Literal 0 BlockStatement StatementExpression MethodInvocation bQuery MemberReference q MemberReference ArraySelector MemberReference i flags add End End ReturnStatement MemberReference bQuery MethodDeclaration /**
   * Parses a query, searching on the fields specified. Use this if you need to
   * specify certain fields as required, and others as prohibited.
   * <p>
   * 
   * <pre>
   * Usage:
   * &lt;code&gt;
   * String[] query = {&quot;query1&quot;, &quot;query2&quot;, &quot;query3&quot;};
   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};
   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,
   *                BooleanClause.Occur.MUST,
   *                BooleanClause.Occur.MUST_NOT};
   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);
   * &lt;/code&gt;
   * </pre>
   *<p>
   * The code above would construct a query:
   * 
   * <pre>
   * &lt;code&gt;
   * (filename:query1) +(contents:query2) -(description:query3)
   * &lt;/code&gt;
   * </pre>
   * 
   * @param queries
   *          Queries string to parse
   * @param fields
   *          Fields to search on
   * @param flags
   *          Flags describing the fields
   * @param analyzer
   *          Analyzer to use
   * @throws ParseException
   *           if query parsing fails
   * @throws IllegalArgumentException
   *           if the length of the queries, fields, and flags array differ
   */ Modifier public static ReferenceType Query parse FormalParameter ReferenceType String queries FormalParameter ReferenceType String fields FormalParameter ReferenceType BooleanClause ReferenceType Occur flags FormalParameter ReferenceType Analyzer analyzer ParseException IfStatement BinaryOperation && BinaryOperation == MemberReference queries length MemberReference fields length BinaryOperation == MemberReference queries length MemberReference flags length ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""queries, fields, and flags array have have different length"" End LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator bQuery ClassCreator ReferenceType BooleanQuery ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fields length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType QueryParserWrapper VariableDeclarator qp ClassCreator ReferenceType QueryParserWrapper MemberReference ArraySelector MemberReference i fields MemberReference analyzer LocalVariableDeclaration ReferenceType Query VariableDeclarator q MethodInvocation qp MemberReference ArraySelector MemberReference i queries parse IfStatement BinaryOperation && BinaryOperation != MemberReference q Literal null BinaryOperation || BinaryOperation instanceof MemberReference q ReferenceType BooleanQuery BinaryOperation > Cast ReferenceType BooleanQuery MemberReference q Literal 0 BlockStatement StatementExpression MethodInvocation bQuery MemberReference q MemberReference ArraySelector MemberReference i flags add End End ReturnStatement MemberReference bQuery ReferenceType QueryParserWrapper",1
150,150,"CompilationUnit PackageDeclaration org.apache.lucene.demo.html Import java.io  Import java.util.Properties ClassDeclaration Modifier public HTMLParser FieldDeclaration Modifier public static BasicType int VariableDeclarator SUMMARY_LENGTH Literal 200 FieldDeclaration ReferenceType StringBuffer VariableDeclarator title ClassCreator ReferenceType StringBuffer MemberReference SUMMARY_LENGTH FieldDeclaration ReferenceType StringBuffer VariableDeclarator summary ClassCreator ReferenceType StringBuffer BinaryOperation * MemberReference SUMMARY_LENGTH Literal 2 FieldDeclaration ReferenceType Properties VariableDeclarator metaTags ClassCreator ReferenceType Properties FieldDeclaration ReferenceType String VariableDeclarator currentMetaTag Literal null FieldDeclaration ReferenceType String VariableDeclarator currentMetaContent Literal null FieldDeclaration BasicType int VariableDeclarator length Literal 0 FieldDeclaration BasicType boolean VariableDeclarator titleComplete Literal false FieldDeclaration BasicType boolean VariableDeclarator inTitle Literal false FieldDeclaration BasicType boolean VariableDeclarator inMetaTag Literal false FieldDeclaration BasicType boolean VariableDeclarator inStyle Literal false FieldDeclaration BasicType boolean VariableDeclarator afterTag Literal false FieldDeclaration BasicType boolean VariableDeclarator afterSpace Literal false FieldDeclaration ReferenceType String VariableDeclarator eol MethodInvocation System Literal ""line.separator"" getProperty FieldDeclaration ReferenceType Reader VariableDeclarator pipeIn Literal null FieldDeclaration ReferenceType Writer VariableDeclarator pipeOut FieldDeclaration Modifier private ReferenceType MyPipedInputStream VariableDeclarator pipeInStream Literal null FieldDeclaration Modifier private ReferenceType PipedOutputStream VariableDeclarator pipeOutStream Literal null ClassDeclaration Modifier private MyPipedInputStream ConstructorDeclaration Modifier public MyPipedInputStream StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public MyPipedInputStream FormalParameter ReferenceType PipedOutputStream src IOException StatementExpression SuperConstructorInvocation MemberReference src MethodDeclaration Modifier public BasicType boolean full IOException ReturnStatement BinaryOperation >= This MethodInvocation available MemberReference PipedInputStream PIPE_SIZE ReferenceType PipedInputStream ConstructorDeclaration Modifier public /**
   * @deprecated Use HTMLParser(FileInputStream) instead
   */ HTMLParser FormalParameter ReferenceType File file FileNotFoundException StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType FileInputStream MemberReference file MethodDeclaration Modifier public ReferenceType String getTitle IOException InterruptedException IfStatement BinaryOperation == MemberReference pipeIn Literal null StatementExpression MethodInvocation getReader End WhileStatement Literal true BlockStatement SynchronizedStatement This IfStatement BinaryOperation || MemberReference titleComplete MethodInvocation pipeInStream full BreakStatement End StatementExpression MethodInvocation Literal 10 wait End ReturnStatement MethodInvocation title MethodInvocation trim toString MethodDeclaration Modifier public ReferenceType Properties getMetaTags IOException InterruptedException IfStatement BinaryOperation == MemberReference pipeIn Literal null StatementExpression MethodInvocation getReader End WhileStatement Literal true BlockStatement SynchronizedStatement This IfStatement BinaryOperation || MemberReference titleComplete MethodInvocation pipeInStream full BreakStatement End StatementExpression MethodInvocation Literal 10 wait End ReturnStatement MemberReference metaTags MethodDeclaration Modifier public ReferenceType String getSummary IOException InterruptedException IfStatement BinaryOperation == MemberReference pipeIn Literal null StatementExpression MethodInvocation getReader End WhileStatement Literal true BlockStatement SynchronizedStatement This IfStatement BinaryOperation || BinaryOperation >= MethodInvocation summary length MemberReference SUMMARY_LENGTH MethodInvocation pipeInStream full BreakStatement End StatementExpression MethodInvocation Literal 10 wait End IfStatement BinaryOperation > MethodInvocation summary length MemberReference SUMMARY_LENGTH StatementExpression MethodInvocation summary MemberReference SUMMARY_LENGTH setLength End LocalVariableDeclaration ReferenceType String VariableDeclarator sum MethodInvocation summary MethodInvocation trim toString LocalVariableDeclaration ReferenceType String VariableDeclarator tit MethodInvocation getTitle IfStatement BinaryOperation || MethodInvocation sum MemberReference tit startsWith MethodInvocation sum Literal """" equals ReturnStatement MemberReference tit ReturnStatement MemberReference sum End MethodDeclaration Modifier public ReferenceType Reader getReader IOException IfStatement BinaryOperation == MemberReference pipeIn Literal null BlockStatement StatementExpression Assignment MemberReference pipeInStream ClassCreator ReferenceType MyPipedInputStream = StatementExpression Assignment MemberReference pipeOutStream ClassCreator ReferenceType PipedOutputStream MemberReference pipeInStream = StatementExpression Assignment MemberReference pipeIn ClassCreator ReferenceType InputStreamReader MemberReference pipeInStream Literal ""UTF-16BE"" = StatementExpression Assignment MemberReference pipeOut ClassCreator ReferenceType OutputStreamWriter MemberReference pipeOutStream Literal ""UTF-16BE"" = LocalVariableDeclaration ReferenceType Thread VariableDeclarator thread ClassCreator ReferenceType ParserThread This StatementExpression MethodInvocation thread start End ReturnStatement MemberReference pipeIn MethodDeclaration addToSummary FormalParameter ReferenceType String text IfStatement BinaryOperation < MethodInvocation summary length MemberReference SUMMARY_LENGTH BlockStatement StatementExpression MethodInvocation summary MemberReference text append IfStatement BinaryOperation >= MethodInvocation summary length MemberReference SUMMARY_LENGTH BlockStatement SynchronizedStatement This StatementExpression MethodInvocation notifyAll End End MethodDeclaration addText FormalParameter ReferenceType String text IOException IfStatement MemberReference inStyle ReturnStatement End IfStatement MemberReference inTitle StatementExpression MethodInvocation title MemberReference text append BlockStatement StatementExpression MethodInvocation MemberReference text addToSummary IfStatement BinaryOperation && MemberReference ! titleComplete BinaryOperation == MethodInvocation title length Literal 0 BlockStatement SynchronizedStatement This StatementExpression Assignment MemberReference titleComplete Literal true = StatementExpression MethodInvocation notifyAll End End StatementExpression Assignment MemberReference length MethodInvocation text length += StatementExpression MethodInvocation pipeOut MemberReference text write StatementExpression Assignment MemberReference afterSpace Literal false = MethodDeclaration addMetaTag StatementExpression MethodInvocation metaTags MemberReference currentMetaTag MemberReference currentMetaContent setProperty StatementExpression Assignment MemberReference currentMetaTag Literal null = StatementExpression Assignment MemberReference currentMetaContent Literal null = ReturnStatement MethodDeclaration addSpace IOException IfStatement MemberReference ! afterSpace BlockStatement IfStatement MemberReference inTitle StatementExpression MethodInvocation title Literal "" "" append StatementExpression MethodInvocation Literal "" "" addToSummary End LocalVariableDeclaration ReferenceType String VariableDeclarator space TernaryExpression MemberReference afterTag MemberReference eol Literal "" "" StatementExpression Assignment MemberReference length MethodInvocation space length += StatementExpression MethodInvocation pipeOut MemberReference space write StatementExpression Assignment MemberReference afterSpace Literal true = End MethodDeclaration Modifier final public HTMLDocument ParseException IOException LocalVariableDeclaration ReferenceType Token VariableDeclarator t WhileStatement label_1 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ScriptStart TagName DeclName Comment1 Comment2 Word Entity Space Punct Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 0 jj_la1 MemberReference jj_gen = BreakStatement label_1 End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase TagName StatementExpression MethodInvocation Tag StatementExpression Assignment MemberReference afterTag Literal true = BreakStatement SwitchStatementCase DeclName StatementExpression Assignment MemberReference t MethodInvocation Decl = StatementExpression Assignment MemberReference afterTag Literal true = BreakStatement SwitchStatementCase Comment1 Comment2 StatementExpression MethodInvocation CommentTag StatementExpression Assignment MemberReference afterTag Literal true = BreakStatement SwitchStatementCase ScriptStart StatementExpression MethodInvocation ScriptTag StatementExpression Assignment MemberReference afterTag Literal true = BreakStatement SwitchStatementCase Word StatementExpression Assignment MemberReference t MethodInvocation MemberReference Word jj_consume_token = StatementExpression MethodInvocation MemberReference t image addText StatementExpression Assignment MemberReference afterTag Literal false = BreakStatement SwitchStatementCase Entity StatementExpression Assignment MemberReference t MethodInvocation MemberReference Entity jj_consume_token = StatementExpression MethodInvocation MethodInvocation Entities MemberReference t image decode addText StatementExpression Assignment MemberReference afterTag Literal false = BreakStatement SwitchStatementCase Punct StatementExpression Assignment MemberReference t MethodInvocation MemberReference Punct jj_consume_token = StatementExpression MethodInvocation MemberReference t image addText StatementExpression Assignment MemberReference afterTag Literal false = BreakStatement SwitchStatementCase Space StatementExpression MethodInvocation MemberReference Space jj_consume_token StatementExpression MethodInvocation addSpace StatementExpression Assignment MemberReference afterTag Literal false = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 1 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End End StatementExpression MethodInvocation Literal 0 jj_consume_token MethodDeclaration Modifier final public Tag ParseException IOException LocalVariableDeclaration ReferenceType Token VariableDeclarator t1 VariableDeclarator t2 LocalVariableDeclaration BasicType boolean VariableDeclarator inImg Literal false StatementExpression Assignment MemberReference t1 MethodInvocation MemberReference TagName jj_consume_token = LocalVariableDeclaration ReferenceType String VariableDeclarator tagName MethodInvocation t1.image toLowerCase IfStatement MethodInvocation Tags.WS_ELEMS MemberReference tagName contains BlockStatement StatementExpression MethodInvocation addSpace End StatementExpression Assignment MemberReference inTitle MethodInvocation tagName Literal ""<title"" equalsIgnoreCase = StatementExpression Assignment MemberReference inMetaTag MethodInvocation tagName Literal ""<META"" equalsIgnoreCase = StatementExpression Assignment MemberReference inStyle MethodInvocation tagName Literal ""<STYLE"" equalsIgnoreCase = StatementExpression Assignment MemberReference inImg MethodInvocation tagName Literal ""<img"" equalsIgnoreCase = WhileStatement label_2 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ArgName Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 2 jj_la1 MemberReference jj_gen = BreakStatement label_2 End StatementExpression Assignment MemberReference t1 MethodInvocation MemberReference ArgName jj_consume_token = SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ArgEquals StatementExpression MethodInvocation MemberReference ArgEquals jj_consume_token SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ArgValue ArgQuote1 ArgQuote2 StatementExpression Assignment MemberReference t2 MethodInvocation ArgValue = IfStatement BinaryOperation && BinaryOperation && MemberReference inImg MethodInvocation t1.image Literal ""alt"" equalsIgnoreCase BinaryOperation != MemberReference t2 Literal null StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""["" MemberReference t2 image Literal ""]"" addText End IfStatement BinaryOperation && BinaryOperation && MemberReference inMetaTag BinaryOperation || MethodInvocation t1.image Literal ""name"" equalsIgnoreCase MethodInvocation t1.image Literal ""HTTP-EQUIV"" equalsIgnoreCase BinaryOperation != MemberReference t2 Literal null BlockStatement StatementExpression Assignment MemberReference currentMetaTag MethodInvocation t2.image toLowerCase = IfStatement BinaryOperation && BinaryOperation != MemberReference currentMetaTag Literal null BinaryOperation != MemberReference currentMetaContent Literal null BlockStatement StatementExpression MethodInvocation addMetaTag End End IfStatement BinaryOperation && BinaryOperation && MemberReference inMetaTag MethodInvocation t1.image Literal ""content"" equalsIgnoreCase BinaryOperation != MemberReference t2 Literal null BlockStatement StatementExpression Assignment MemberReference currentMetaContent MethodInvocation t2.image toLowerCase = IfStatement BinaryOperation && BinaryOperation != MemberReference currentMetaTag Literal null BinaryOperation != MemberReference currentMetaContent Literal null BlockStatement StatementExpression MethodInvocation addMetaTag End End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 3 jj_la1 MemberReference jj_gen = Statement End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 4 jj_la1 MemberReference jj_gen = Statement End End StatementExpression MethodInvocation MemberReference TagEnd jj_consume_token MethodDeclaration Modifier final public ReferenceType Token ArgValue ParseException LocalVariableDeclaration ReferenceType Token VariableDeclarator t Literal null SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ArgValue StatementExpression Assignment MemberReference t MethodInvocation MemberReference ArgValue jj_consume_token = BlockStatement IfStatement Literal true ReturnStatement MemberReference t End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 5 jj_la1 MemberReference jj_gen = IfStatement MethodInvocation Literal 2 jj_2_1 BlockStatement StatementExpression MethodInvocation MemberReference ArgQuote1 jj_consume_token StatementExpression MethodInvocation MemberReference CloseQuote1 jj_consume_token BlockStatement IfStatement Literal true ReturnStatement MemberReference t End BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ArgQuote1 StatementExpression MethodInvocation MemberReference ArgQuote1 jj_consume_token StatementExpression Assignment MemberReference t MethodInvocation MemberReference Quote1Text jj_consume_token = StatementExpression MethodInvocation MemberReference CloseQuote1 jj_consume_token BlockStatement IfStatement Literal true ReturnStatement MemberReference t End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 6 jj_la1 MemberReference jj_gen = IfStatement MethodInvocation Literal 2 jj_2_2 BlockStatement StatementExpression MethodInvocation MemberReference ArgQuote2 jj_consume_token StatementExpression MethodInvocation MemberReference CloseQuote2 jj_consume_token BlockStatement IfStatement Literal true ReturnStatement MemberReference t End BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ArgQuote2 StatementExpression MethodInvocation MemberReference ArgQuote2 jj_consume_token StatementExpression Assignment MemberReference t MethodInvocation MemberReference Quote2Text jj_consume_token = StatementExpression MethodInvocation MemberReference CloseQuote2 jj_consume_token BlockStatement IfStatement Literal true ReturnStatement MemberReference t End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 7 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End End End End End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType Token Decl ParseException LocalVariableDeclaration ReferenceType Token VariableDeclarator t StatementExpression Assignment MemberReference t MethodInvocation MemberReference DeclName jj_consume_token = WhileStatement label_3 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ArgName ArgEquals ArgValue ArgQuote1 ArgQuote2 Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 8 jj_la1 MemberReference jj_gen = BreakStatement label_3 End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ArgName StatementExpression MethodInvocation MemberReference ArgName jj_consume_token BreakStatement SwitchStatementCase ArgValue ArgQuote1 ArgQuote2 StatementExpression MethodInvocation ArgValue BreakStatement SwitchStatementCase ArgEquals StatementExpression MethodInvocation MemberReference ArgEquals jj_consume_token BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 9 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End End StatementExpression MethodInvocation MemberReference TagEnd jj_consume_token BlockStatement IfStatement Literal true ReturnStatement MemberReference t End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public CommentTag ParseException SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase Comment1 StatementExpression MethodInvocation MemberReference Comment1 jj_consume_token WhileStatement label_4 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase CommentText1 Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 10 jj_la1 MemberReference jj_gen = BreakStatement label_4 End StatementExpression MethodInvocation MemberReference CommentText1 jj_consume_token End StatementExpression MethodInvocation MemberReference CommentEnd1 jj_consume_token BreakStatement SwitchStatementCase Comment2 StatementExpression MethodInvocation MemberReference Comment2 jj_consume_token WhileStatement label_5 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase CommentText2 Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 11 jj_la1 MemberReference jj_gen = BreakStatement label_5 End StatementExpression MethodInvocation MemberReference CommentText2 jj_consume_token End StatementExpression MethodInvocation MemberReference CommentEnd2 jj_consume_token BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 12 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End MethodDeclaration Modifier final public ScriptTag ParseException StatementExpression MethodInvocation MemberReference ScriptStart jj_consume_token WhileStatement label_6 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase ScriptText Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 13 jj_la1 MemberReference jj_gen = BreakStatement label_6 End StatementExpression MethodInvocation MemberReference ScriptText jj_consume_token End StatementExpression MethodInvocation MemberReference ScriptEnd jj_consume_token MethodDeclaration Modifier private BasicType boolean jj_2_1 FormalParameter BasicType int xla StatementExpression Assignment MemberReference jj_la MemberReference xla = StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos MemberReference token = = TryStatement ReturnStatement MethodInvocation ! jj_3_1 CatchClause CatchClauseParameter LookaheadSuccess ls ReturnStatement Literal true StatementExpression MethodInvocation Literal 0 MemberReference xla jj_save MethodDeclaration Modifier private BasicType boolean jj_2_2 FormalParameter BasicType int xla StatementExpression Assignment MemberReference jj_la MemberReference xla = StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos MemberReference token = = TryStatement ReturnStatement MethodInvocation ! jj_3_2 CatchClause CatchClauseParameter LookaheadSuccess ls ReturnStatement Literal true StatementExpression MethodInvocation Literal 1 MemberReference xla jj_save MethodDeclaration Modifier private BasicType boolean jj_3_1 IfStatement MethodInvocation MemberReference ArgQuote1 jj_scan_token ReturnStatement Literal true End IfStatement MethodInvocation MemberReference CloseQuote1 jj_scan_token ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration Modifier private BasicType boolean jj_3_2 IfStatement MethodInvocation MemberReference ArgQuote2 jj_scan_token ReturnStatement Literal true End IfStatement MethodInvocation MemberReference CloseQuote2 jj_scan_token ReturnStatement Literal true End ReturnStatement Literal false FieldDeclaration /** Generated Token Manager. */ Modifier public ReferenceType HTMLParserTokenManager VariableDeclarator token_source FieldDeclaration ReferenceType SimpleCharStream VariableDeclarator jj_input_stream FieldDeclaration /** Current token. */ Modifier public ReferenceType Token VariableDeclarator token FieldDeclaration /** Next token. */ Modifier public ReferenceType Token VariableDeclarator jj_nt FieldDeclaration Modifier private BasicType int VariableDeclarator jj_ntk FieldDeclaration Modifier private ReferenceType Token VariableDeclarator jj_scanpos VariableDeclarator jj_lastpos FieldDeclaration Modifier private BasicType int VariableDeclarator jj_la FieldDeclaration Modifier private BasicType int VariableDeclarator jj_gen FieldDeclaration Modifier private final BasicType int VariableDeclarator jj_la1 ArrayCreator BasicType int Literal 14 FieldDeclaration Modifier private static BasicType int VariableDeclarator jj_la1_0 StatementExpression MethodInvocation jj_la1_init_0 MethodDeclaration Modifier private static jj_la1_init_0 StatementExpression Assignment MemberReference jj_la1_0 ArrayCreator BasicType int ArrayInitializer Literal 0x2c7e Literal 0x2c7e Literal 0x10000 Literal 0x380000 Literal 0x20000 Literal 0x80000 Literal 0x100000 Literal 0x200000 Literal 0x3b0000 Literal 0x3b0000 Literal 0x8000000 Literal 0x20000000 Literal 0x30 Literal 0x4000 = FieldDeclaration Modifier private final ReferenceType JJCalls VariableDeclarator jj_2_rtns ArrayCreator ReferenceType JJCalls Literal 2 FieldDeclaration Modifier private BasicType boolean VariableDeclarator jj_rescan Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator jj_gc Literal 0 ConstructorDeclaration Modifier public /** Constructor with InputStream. */ HTMLParser FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream stream StatementExpression ExplicitConstructorInvocation MemberReference stream Literal null ConstructorDeclaration Modifier public /** Constructor with InputStream and supplied encoding */ HTMLParser FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream stream FormalParameter ReferenceType String encoding TryStatement StatementExpression Assignment MemberReference jj_input_stream ClassCreator ReferenceType SimpleCharStream MemberReference stream MemberReference encoding Literal 1 Literal 1 = CatchClause CatchClauseParameter java.io.UnsupportedEncodingException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e StatementExpression Assignment MemberReference token_source ClassCreator ReferenceType HTMLParserTokenManager MemberReference jj_input_stream = StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 14 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream stream StatementExpression MethodInvocation MemberReference stream Literal null ReInit MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream stream FormalParameter ReferenceType String encoding TryStatement StatementExpression MethodInvocation jj_input_stream MemberReference stream MemberReference encoding Literal 1 Literal 1 ReInit CatchClause CatchClauseParameter java.io.UnsupportedEncodingException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e StatementExpression MethodInvocation token_source MemberReference jj_input_stream ReInit StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 14 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End ConstructorDeclaration Modifier public /** Constructor. */ HTMLParser FormalParameter ReferenceType java ReferenceType io ReferenceType Reader stream StatementExpression Assignment MemberReference jj_input_stream ClassCreator ReferenceType SimpleCharStream MemberReference stream Literal 1 Literal 1 = StatementExpression Assignment MemberReference token_source ClassCreator ReferenceType HTMLParserTokenManager MemberReference jj_input_stream = StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 14 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType Reader stream StatementExpression MethodInvocation jj_input_stream MemberReference stream Literal 1 Literal 1 ReInit StatementExpression MethodInvocation token_source MemberReference jj_input_stream ReInit StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 14 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End ConstructorDeclaration Modifier public /** Constructor with generated Token Manager. */ HTMLParser FormalParameter ReferenceType HTMLParserTokenManager tm StatementExpression Assignment MemberReference token_source MemberReference tm = StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 14 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType HTMLParserTokenManager tm StatementExpression Assignment MemberReference token_source MemberReference tm = StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 14 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End MethodDeclaration Modifier private ReferenceType Token jj_consume_token FormalParameter BasicType int kind ParseException LocalVariableDeclaration ReferenceType Token VariableDeclarator oldToken IfStatement BinaryOperation != Assignment MemberReference oldToken MemberReference token = Literal null StatementExpression Assignment MemberReference token MemberReference token next = StatementExpression Assignment MemberReference token Assignment MemberReference token next MethodInvocation token_source getNextToken = = End StatementExpression Assignment MemberReference jj_ntk Literal - 1 = IfStatement BinaryOperation == MemberReference token kind MemberReference kind BlockStatement StatementExpression MemberReference ++ jj_gen IfStatement BinaryOperation > MemberReference ++ jj_gc Literal 100 BlockStatement StatementExpression Assignment MemberReference jj_gc Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType JJCalls VariableDeclarator c MemberReference ArraySelector MemberReference i jj_2_rtns WhileStatement BinaryOperation != MemberReference c Literal null BlockStatement IfStatement BinaryOperation < MemberReference c gen MemberReference jj_gen StatementExpression Assignment MemberReference c first Literal null = End StatementExpression Assignment MemberReference c MemberReference c next = End End End ReturnStatement MemberReference token End StatementExpression Assignment MemberReference token MemberReference oldToken = StatementExpression Assignment MemberReference jj_kind MemberReference kind = ThrowStatement MethodInvocation generateParseException ClassDeclaration Modifier private final static LookaheadSuccess ReferenceType java ReferenceType lang ReferenceType Error FieldDeclaration Modifier private final ReferenceType LookaheadSuccess VariableDeclarator jj_ls ClassCreator ReferenceType LookaheadSuccess MethodDeclaration Modifier private BasicType boolean jj_scan_token FormalParameter BasicType int kind IfStatement BinaryOperation == MemberReference jj_scanpos MemberReference jj_lastpos BlockStatement StatementExpression MemberReference -- jj_la IfStatement BinaryOperation == MemberReference jj_scanpos next Literal null BlockStatement StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos Assignment MemberReference jj_scanpos next MethodInvocation token_source getNextToken = = = BlockStatement StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos MemberReference jj_scanpos next = = End BlockStatement StatementExpression Assignment MemberReference jj_scanpos MemberReference jj_scanpos next = End IfStatement MemberReference jj_rescan BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration ReferenceType Token VariableDeclarator tok MemberReference token WhileStatement BinaryOperation && BinaryOperation != MemberReference tok Literal null BinaryOperation != MemberReference tok MemberReference jj_scanpos BlockStatement StatementExpression MemberReference ++ i StatementExpression Assignment MemberReference tok MemberReference tok next = End IfStatement BinaryOperation != MemberReference tok Literal null StatementExpression MethodInvocation MemberReference kind MemberReference i jj_add_error_token End End IfStatement BinaryOperation != MemberReference jj_scanpos kind MemberReference kind ReturnStatement Literal true End IfStatement BinaryOperation && BinaryOperation == MemberReference jj_la Literal 0 BinaryOperation == MemberReference jj_scanpos MemberReference jj_lastpos ThrowStatement MemberReference jj_ls End ReturnStatement Literal false MethodDeclaration /** Get the next Token. */ Modifier final public ReferenceType Token getNextToken IfStatement BinaryOperation != MemberReference token next Literal null StatementExpression Assignment MemberReference token MemberReference token next = StatementExpression Assignment MemberReference token Assignment MemberReference token next MethodInvocation token_source getNextToken = = End StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression MemberReference ++ jj_gen ReturnStatement MemberReference token MethodDeclaration /** Get the specific Token. */ Modifier final public ReferenceType Token getToken FormalParameter BasicType int index LocalVariableDeclaration ReferenceType Token VariableDeclarator t MemberReference token ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference index MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference t next Literal null StatementExpression Assignment MemberReference t MemberReference t next = StatementExpression Assignment MemberReference t Assignment MemberReference t next MethodInvocation token_source getNextToken = = End End ReturnStatement MemberReference t MethodDeclaration Modifier private BasicType int jj_ntk IfStatement BinaryOperation == Assignment MemberReference jj_nt MemberReference token next = Literal null ReturnStatement Assignment MemberReference jj_ntk Assignment MemberReference token next MethodInvocation token_source getNextToken = = ReturnStatement Assignment MemberReference jj_ntk MemberReference jj_nt kind = End FieldDeclaration Modifier private ReferenceType java ReferenceType util ReferenceType List TypeArgument BasicType int VariableDeclarator jj_expentries ClassCreator ReferenceType java ReferenceType util ReferenceType ArrayList TypeArgument BasicType int FieldDeclaration Modifier private BasicType int VariableDeclarator jj_expentry FieldDeclaration Modifier private BasicType int VariableDeclarator jj_kind Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator jj_lasttokens ArrayCreator BasicType int Literal 100 FieldDeclaration Modifier private BasicType int VariableDeclarator jj_endpos MethodDeclaration Modifier private jj_add_error_token FormalParameter BasicType int kind FormalParameter BasicType int pos IfStatement BinaryOperation >= MemberReference pos Literal 100 ReturnStatement End IfStatement BinaryOperation == MemberReference pos BinaryOperation + MemberReference jj_endpos Literal 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ jj_endpos jj_lasttokens MemberReference kind = IfStatement BinaryOperation != MemberReference jj_endpos Literal 0 BlockStatement StatementExpression Assignment MemberReference jj_expentry ArrayCreator BasicType int MemberReference jj_endpos = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_endpos MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_expentry MemberReference ArraySelector MemberReference i jj_lasttokens = End ForStatement jj_entries_loop ForControl VariableDeclaration ReferenceType java ReferenceType util ReferenceType Iterator VariableDeclarator it MethodInvocation jj_expentries iterator MethodInvocation it hasNext BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator oldentry Cast BasicType int MethodInvocation it next IfStatement BinaryOperation == MemberReference oldentry length MemberReference jj_expentry length BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_expentry length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i oldentry MemberReference ArraySelector MemberReference i jj_expentry BlockStatement ContinueStatement jj_entries_loop End End StatementExpression MethodInvocation jj_expentries MemberReference jj_expentry add BreakStatement jj_entries_loop End End IfStatement BinaryOperation != MemberReference pos Literal 0 StatementExpression Assignment MemberReference ArraySelector BinaryOperation - Assignment MemberReference jj_endpos MemberReference pos = Literal 1 jj_lasttokens MemberReference kind = End End End MethodDeclaration /** Generate ParseException. */ Modifier public ReferenceType ParseException generateParseException StatementExpression MethodInvocation jj_expentries clear LocalVariableDeclaration BasicType boolean VariableDeclarator la1tokens ArrayCreator BasicType boolean Literal 31 IfStatement BinaryOperation >= MemberReference jj_kind Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference jj_kind la1tokens Literal true = StatementExpression Assignment MemberReference jj_kind Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 14 MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i jj_la1 MemberReference jj_gen BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j Literal 32 MemberReference ++ j BlockStatement IfStatement BinaryOperation != BinaryOperation & MemberReference ArraySelector MemberReference i jj_la1_0 BinaryOperation << Literal 1 MemberReference j Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j la1tokens Literal true = End End End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 31 MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i la1tokens BlockStatement StatementExpression Assignment MemberReference jj_expentry ArrayCreator BasicType int Literal 1 = StatementExpression Assignment MemberReference ArraySelector Literal 0 jj_expentry MemberReference i = StatementExpression MethodInvocation jj_expentries MemberReference jj_expentry add End End StatementExpression Assignment MemberReference jj_endpos Literal 0 = StatementExpression MethodInvocation jj_rescan_token StatementExpression MethodInvocation Literal 0 Literal 0 jj_add_error_token LocalVariableDeclaration BasicType int VariableDeclarator exptokseq ArrayCreator BasicType int MethodInvocation jj_expentries size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation jj_expentries size MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i exptokseq MethodInvocation jj_expentries MemberReference i get = End ReturnStatement ClassCreator ReferenceType ParseException MemberReference token MemberReference exptokseq MemberReference tokenImage MethodDeclaration /** Enable tracing. */ Modifier final public enable_tracing MethodDeclaration /** Disable tracing. */ Modifier final public disable_tracing MethodDeclaration Modifier private jj_rescan_token StatementExpression Assignment MemberReference jj_rescan Literal true = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 2 MemberReference ++ i BlockStatement TryStatement LocalVariableDeclaration ReferenceType JJCalls VariableDeclarator p MemberReference ArraySelector MemberReference i jj_2_rtns DoStatement BinaryOperation != MemberReference p Literal null BlockStatement IfStatement BinaryOperation > MemberReference p gen MemberReference jj_gen BlockStatement StatementExpression Assignment MemberReference jj_la MemberReference p arg = StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos MemberReference p first = = SwitchStatement MemberReference i SwitchStatementCase Literal 0 StatementExpression MethodInvocation jj_3_1 BreakStatement SwitchStatementCase Literal 1 StatementExpression MethodInvocation jj_3_2 BreakStatement End End StatementExpression Assignment MemberReference p MemberReference p next = End CatchClause CatchClauseParameter LookaheadSuccess ls End StatementExpression Assignment MemberReference jj_rescan Literal false = MethodDeclaration Modifier private jj_save FormalParameter BasicType int index FormalParameter BasicType int xla LocalVariableDeclaration ReferenceType JJCalls VariableDeclarator p MemberReference ArraySelector MemberReference index jj_2_rtns WhileStatement BinaryOperation > MemberReference p gen MemberReference jj_gen BlockStatement IfStatement BinaryOperation == MemberReference p next Literal null BlockStatement StatementExpression Assignment MemberReference p Assignment MemberReference p next ClassCreator ReferenceType JJCalls = = BreakStatement End StatementExpression Assignment MemberReference p MemberReference p next = End StatementExpression Assignment MemberReference p gen BinaryOperation - BinaryOperation + MemberReference jj_gen MemberReference xla MemberReference jj_la = StatementExpression Assignment MemberReference p first MemberReference token = StatementExpression Assignment MemberReference p arg MemberReference xla = ClassDeclaration Modifier final static JJCalls FieldDeclaration BasicType int VariableDeclarator gen FieldDeclaration ReferenceType Token VariableDeclarator first FieldDeclaration BasicType int VariableDeclarator arg FieldDeclaration ReferenceType JJCalls VariableDeclarator next ReferenceType HTMLParserConstants",0
310,310,"CompilationUnit PackageDeclaration org.apache.lucene.search Import org.apache.lucene.index.Term ClassDeclaration Modifier public /**
 * A Filter that restricts search results to values that have a matching prefix in a given
 * field.
 */ PrefixFilter ConstructorDeclaration Modifier public PrefixFilter FormalParameter ReferenceType Term prefix StatementExpression SuperConstructorInvocation ClassCreator ReferenceType PrefixQuery MemberReference prefix MethodDeclaration Modifier public ReferenceType Term getPrefix ReturnStatement MethodInvocation query getPrefix MethodDeclaration /** Prints a user-readable version of this query. */ Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation buffer Literal ""PrefixFilter("" append StatementExpression MethodInvocation buffer MethodInvocation MethodInvocation toString getPrefix append StatementExpression MethodInvocation buffer Literal "")"" append ReturnStatement MethodInvocation buffer toString ReferenceType MultiTermQueryWrapperFilter TypeArgument ReferenceType PrefixQuery",0
583,583,,0
101,101,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.processors Import java.util.List Import org.apache.lucene.messages.MessageImpl Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.core.messages.QueryParserMessages Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl Import org.apache.lucene.queryParser.core.util.UnescapedCharSequence Import org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttribute Import org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode Import org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl ClassDeclaration Modifier public /**
 * This processor verifies if the attribute
 * {@link AllowLeadingWildcardAttribute} is defined in the
 * {@link QueryConfigHandler}. If it is and leading wildcard is not allowed, it
 * looks for every {@link WildcardQueryNode} contained in the query node tree
 * and throws an exception if any of them has a leading wildcard ('*' or '?'). <br/>
 * 
 * @see AllowLeadingWildcardAttribute
 */ AllowLeadingWildcardProcessor ConstructorDeclaration Modifier public AllowLeadingWildcardProcessor MethodDeclaration Modifier public Annotation Override ReferenceType QueryNode process FormalParameter ReferenceType QueryNode queryTree QueryNodeException IfStatement MethodInvocation MethodInvocation ClassReference ReferenceType AllowLeadingWildcardAttribute hasAttribute getQueryConfigHandler BlockStatement LocalVariableDeclaration ReferenceType AllowLeadingWildcardAttribute VariableDeclarator alwAttr MethodInvocation MethodInvocation ClassReference ReferenceType AllowLeadingWildcardAttribute getAttribute getQueryConfigHandler IfStatement MethodInvocation ! alwAttr isAllowLeadingWildcard BlockStatement ReturnStatement SuperMethodInvocation MemberReference queryTree process End End ReturnStatement MemberReference queryTree MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode postProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException IfStatement BinaryOperation instanceof MemberReference node ReferenceType WildcardQueryNode BlockStatement LocalVariableDeclaration ReferenceType WildcardQueryNode VariableDeclarator wildcardNode Cast ReferenceType WildcardQueryNode MemberReference node IfStatement BinaryOperation > MethodInvocation wildcardNode MethodInvocation length getText Literal 0 BlockStatement IfStatement MethodInvocation UnescapedCharSequence MethodInvocation wildcardNode getText Literal 0 wasEscaped ReturnStatement MemberReference node End SwitchStatement MethodInvocation wildcardNode MethodInvocation Literal 0 charAt getText SwitchStatementCase Literal '*' Literal '?' ThrowStatement ClassCreator ReferenceType QueryNodeException ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages LEADING_WILDCARD_NOT_ALLOWED MethodInvocation node ClassCreator ReferenceType EscapeQuerySyntaxImpl toQueryString End End End ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode preProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType List TypeArgument ReferenceType QueryNode setChildrenOrder FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children QueryNodeException ReturnStatement MemberReference children ReferenceType QueryNodeProcessorImpl",0
673,673,,0
736,736,,1
742,742,,1
300,300,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import org.apache.lucene.search.spans.SpanFirstQuery Import org.apache.lucene.search.spans.SpanQuery Import org.apache.lucene.xmlparser.DOMUtils Import org.apache.lucene.xmlparser.ParserException Import org.w3c.dom.Element ClassDeclaration Modifier public /**
 * 
 */ SpanFirstBuilder FieldDeclaration ReferenceType SpanQueryBuilder VariableDeclarator factory ConstructorDeclaration Modifier public SpanFirstBuilder FormalParameter ReferenceType SpanQueryBuilder factory StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference factory MemberReference factory = MethodDeclaration Modifier public ReferenceType SpanQuery getSpanQuery FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration BasicType int VariableDeclarator end MethodInvocation DOMUtils MemberReference e Literal ""end"" Literal 1 getAttribute LocalVariableDeclaration ReferenceType Element VariableDeclarator child MethodInvocation DOMUtils MemberReference e getFirstChildElement LocalVariableDeclaration ReferenceType SpanQuery VariableDeclarator q MethodInvocation factory MemberReference child getSpanQuery LocalVariableDeclaration ReferenceType SpanFirstQuery VariableDeclarator sfq ClassCreator ReferenceType SpanFirstQuery MemberReference q MemberReference end StatementExpression MethodInvocation sfq MethodInvocation DOMUtils MemberReference e Literal ""boost"" Literal 1.0f getAttribute setBoost ReturnStatement MemberReference sfq ReferenceType SpanBuilderBase",0
464,464,"CompilationUnit PackageDeclaration lucli Import java.io.File Import java.io.IOException Import java.io.UnsupportedEncodingException Import java.util.Iterator Import java.util.Set Import java.util.StringTokenizer Import java.util.TreeMap Import jline.ArgumentCompletor Import jline.Completor Import jline.ConsoleReader Import jline.FileNameCompletor Import jline.History Import jline.SimpleCompletor Import org.apache.lucene.queryParser.ParseException ClassDeclaration Modifier public /**
 * Main class for lucli: the Lucene Command Line Interface.
 * This class handles mostly the actual CLI part, command names, help, etc.
 */ Lucli FieldDeclaration Modifier final static ReferenceType String VariableDeclarator DEFAULT_INDEX Literal ""index"" FieldDeclaration Modifier final static ReferenceType String VariableDeclarator HISTORYFILE Literal "".lucli"" FieldDeclaration Modifier public final static BasicType int VariableDeclarator MAX_TERMS Literal 100 FieldDeclaration Modifier final static BasicType int VariableDeclarator NOCOMMAND Literal - 2 FieldDeclaration Modifier final static BasicType int VariableDeclarator UNKOWN Literal - 1 FieldDeclaration Modifier final static BasicType int VariableDeclarator INFO Literal 0 FieldDeclaration Modifier final static BasicType int VariableDeclarator SEARCH Literal 1 FieldDeclaration Modifier final static BasicType int VariableDeclarator OPTIMIZE Literal 2 FieldDeclaration Modifier final static BasicType int VariableDeclarator QUIT Literal 3 FieldDeclaration Modifier final static BasicType int VariableDeclarator HELP Literal 4 FieldDeclaration Modifier final static BasicType int VariableDeclarator COUNT Literal 5 FieldDeclaration Modifier final static BasicType int VariableDeclarator TERMS Literal 6 FieldDeclaration Modifier final static BasicType int VariableDeclarator INDEX Literal 7 FieldDeclaration Modifier final static BasicType int VariableDeclarator TOKENS Literal 8 FieldDeclaration Modifier final static BasicType int VariableDeclarator EXPLAIN Literal 9 FieldDeclaration Modifier final static BasicType int VariableDeclarator ANALYZER Literal 10 FieldDeclaration ReferenceType String VariableDeclarator historyFile FieldDeclaration ReferenceType TreeMap TypeArgument ReferenceType String TypeArgument ReferenceType Command VariableDeclarator commandMap ClassCreator ReferenceType TreeMap TypeArgument ReferenceType String TypeArgument ReferenceType Command FieldDeclaration ReferenceType LuceneMethods VariableDeclarator luceneMethods FieldDeclaration BasicType boolean VariableDeclarator enableReadline ConstructorDeclaration Modifier public /**
		Main entry point. The first argument can be a filename with an
		application initialization file.
		*/ Lucli FormalParameter ReferenceType String args IOException LocalVariableDeclaration ReferenceType String VariableDeclarator line StatementExpression Assignment MemberReference historyFile BinaryOperation + BinaryOperation + MethodInvocation System Literal ""user.home"" getProperty MemberReference File separator MemberReference HISTORYFILE = StatementExpression MethodInvocation Literal ""info"" MemberReference INFO Literal ""Display info about the current Lucene index. Example: info"" addCommand StatementExpression MethodInvocation Literal ""search"" MemberReference SEARCH Literal ""Search the current index. Example: search foo"" Literal 1 addCommand StatementExpression MethodInvocation Literal ""count"" MemberReference COUNT Literal ""Return the number of hits for a search. Example: count foo"" Literal 1 addCommand StatementExpression MethodInvocation Literal ""optimize"" MemberReference OPTIMIZE Literal ""Optimize the current index"" addCommand StatementExpression MethodInvocation Literal ""quit"" MemberReference QUIT Literal ""Quit/exit the program"" addCommand StatementExpression MethodInvocation Literal ""help"" MemberReference HELP Literal ""Display help about commands"" addCommand StatementExpression MethodInvocation Literal ""terms"" MemberReference TERMS BinaryOperation + BinaryOperation + Literal ""Show the first "" MemberReference MAX_TERMS Literal "" terms in this index. Supply a field name to only show terms in a specific field. Example: terms"" addCommand StatementExpression MethodInvocation Literal ""index"" MemberReference INDEX Literal ""Choose a different lucene index. Example index my_index"" Literal 1 addCommand StatementExpression MethodInvocation Literal ""tokens"" MemberReference TOKENS Literal ""Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo"" Literal 1 addCommand StatementExpression MethodInvocation Literal ""explain"" MemberReference EXPLAIN Literal ""Explanation that describes how the document scored against query. Example: explain foo"" Literal 1 addCommand StatementExpression MethodInvocation Literal ""analyzer"" MemberReference ANALYZER Literal ""Specifies the Analyzer class to be used. Example: analyzer org.apache.lucene.analysis.SimpleAnalyzer"" Literal 1 addCommand StatementExpression MethodInvocation MemberReference args parseArgs LocalVariableDeclaration ReferenceType ConsoleReader VariableDeclarator cr ClassCreator ReferenceType ConsoleReader StatementExpression MethodInvocation cr ClassCreator ReferenceType History ClassCreator ReferenceType File MemberReference historyFile setHistory LocalVariableDeclaration ReferenceType Completor VariableDeclarator comp ArrayCreator ReferenceType Completor ArrayInitializer ClassCreator ReferenceType SimpleCompletor MethodInvocation getCommandsAsArray ClassCreator ReferenceType FileNameCompletor StatementExpression MethodInvocation cr ClassCreator ReferenceType ArgumentCompletor MemberReference comp addCompletor StatementExpression Assignment MemberReference luceneMethods ClassCreator ReferenceType LuceneMethods MemberReference DEFAULT_INDEX = WhileStatement Literal true BlockStatement TryStatement StatementExpression Assignment MemberReference line MethodInvocation cr Literal ""lucli> "" readLine = IfStatement BinaryOperation != MemberReference line Literal null BlockStatement StatementExpression MethodInvocation MemberReference line MemberReference cr handleCommand End CatchClause CatchClauseParameter java.io.EOFException eof StatementExpression MethodInvocation System.out Literal """" println StatementExpression MethodInvocation exit CatchClause CatchClauseParameter UnsupportedEncodingException enc StatementExpression MethodInvocation enc MemberReference System err printStackTrace CatchClause CatchClauseParameter ParseException pe StatementExpression MethodInvocation pe MemberReference System err printStackTrace CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation ioe MemberReference System err printStackTrace End MethodDeclaration Modifier private ReferenceType String getCommandsAsArray LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator commandSet MethodInvocation commandMap keySet LocalVariableDeclaration ReferenceType String VariableDeclarator commands ArrayCreator ReferenceType String MethodInvocation commandMap size LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType String VariableDeclarator iter MethodInvocation commandSet iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator cmd MethodInvocation iter next StatementExpression Assignment MemberReference ArraySelector MemberReference ++ i commands MemberReference cmd = End ReturnStatement MemberReference commands MethodDeclaration Modifier public static main FormalParameter ReferenceType String args IOException StatementExpression ClassCreator ReferenceType Lucli MemberReference args MethodDeclaration Modifier private handleCommand FormalParameter ReferenceType String line FormalParameter ReferenceType ConsoleReader cr IOException ParseException LocalVariableDeclaration ReferenceType String VariableDeclarator words MethodInvocation MemberReference line tokenizeCommand IfStatement BinaryOperation == MemberReference words length Literal 0 ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator query Literal """" IfStatement MethodInvocation line MethodInvocation Literal ""#"" startsWith trim ReturnStatement End SwitchStatement MethodInvocation MemberReference ArraySelector Literal 0 words BinaryOperation - MemberReference words length Literal 1 getCommandId SwitchStatementCase INFO StatementExpression MethodInvocation luceneMethods info BreakStatement SwitchStatementCase SEARCH ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ii Literal 1 BinaryOperation < MemberReference ii MemberReference words length MemberReference ++ ii BlockStatement StatementExpression Assignment MemberReference query BinaryOperation + MemberReference ArraySelector MemberReference ii words Literal "" "" += End StatementExpression MethodInvocation luceneMethods MemberReference query Literal false Literal false MemberReference cr search BreakStatement SwitchStatementCase COUNT ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ii Literal 1 BinaryOperation < MemberReference ii MemberReference words length MemberReference ++ ii BlockStatement StatementExpression Assignment MemberReference query BinaryOperation + MemberReference ArraySelector MemberReference ii words Literal "" "" += End StatementExpression MethodInvocation luceneMethods MemberReference query count BreakStatement SwitchStatementCase QUIT StatementExpression MethodInvocation exit BreakStatement SwitchStatementCase TERMS IfStatement BinaryOperation > MemberReference words length Literal 1 StatementExpression MethodInvocation luceneMethods MemberReference ArraySelector Literal 1 words terms StatementExpression MethodInvocation luceneMethods Literal null terms End BreakStatement SwitchStatementCase INDEX LocalVariableDeclaration ReferenceType LuceneMethods VariableDeclarator newLm ClassCreator ReferenceType LuceneMethods MemberReference ArraySelector Literal 1 words TryStatement StatementExpression MethodInvocation newLm info StatementExpression Assignment MemberReference luceneMethods MemberReference newLm = CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation MethodInvocation ioe toString error BreakStatement SwitchStatementCase OPTIMIZE StatementExpression MethodInvocation luceneMethods optimize BreakStatement SwitchStatementCase TOKENS ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ii Literal 1 BinaryOperation < MemberReference ii MemberReference words length MemberReference ++ ii BlockStatement StatementExpression Assignment MemberReference query BinaryOperation + MemberReference ArraySelector MemberReference ii words Literal "" "" += End StatementExpression MethodInvocation luceneMethods MemberReference query Literal false Literal true MemberReference cr search BreakStatement SwitchStatementCase EXPLAIN ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ii Literal 1 BinaryOperation < MemberReference ii MemberReference words length MemberReference ++ ii BlockStatement StatementExpression Assignment MemberReference query BinaryOperation + MemberReference ArraySelector MemberReference ii words Literal "" "" += End StatementExpression MethodInvocation luceneMethods MemberReference query Literal true Literal false MemberReference cr search BreakStatement SwitchStatementCase ANALYZER StatementExpression MethodInvocation luceneMethods MemberReference ArraySelector Literal 1 words analyzer BreakStatement SwitchStatementCase HELP StatementExpression MethodInvocation help BreakStatement SwitchStatementCase NOCOMMAND BreakStatement SwitchStatementCase UNKOWN StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""Unknown command: "" MemberReference ArraySelector Literal 0 words Literal "". Type help to get a list of commands."" println BreakStatement End MethodDeclaration Modifier private ReferenceType String tokenizeCommand FormalParameter ReferenceType String line LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tokenizer ClassCreator ReferenceType StringTokenizer MemberReference line Literal "" \t"" LocalVariableDeclaration BasicType int VariableDeclarator size MethodInvocation tokenizer countTokens LocalVariableDeclaration ReferenceType String VariableDeclarator tokens ArrayCreator ReferenceType String MemberReference size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ii Literal 0 MethodInvocation tokenizer hasMoreTokens MemberReference ++ ii BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ii tokens MethodInvocation tokenizer nextToken = End ReturnStatement MemberReference tokens MethodDeclaration Modifier private exit StatementExpression MethodInvocation System Literal 0 exit MethodDeclaration /**
	 * Add a command to the list of commands for the interpreter for a
	 * command that doesn't take any parameters.
	 * @param name  - the name of the command
	 * @param id  - the unique id of the command
	 * @param help  - the help message for this command
	 */ Modifier private addCommand FormalParameter ReferenceType String name FormalParameter BasicType int id FormalParameter ReferenceType String help StatementExpression MethodInvocation MemberReference name MemberReference id MemberReference help Literal 0 addCommand MethodDeclaration /**
	 * Add a command to the list of commands for the interpreter.
	 * @param name  - the name of the command
	 * @param id  - the unique id of the command
	 * @param help  - the help message for this command
	 * @param params  - the minimum number of required params if any
	 */ Modifier private addCommand FormalParameter ReferenceType String name FormalParameter BasicType int id FormalParameter ReferenceType String help FormalParameter BasicType int params LocalVariableDeclaration ReferenceType Command VariableDeclarator command ClassCreator ReferenceType Command MemberReference name MemberReference id MemberReference help MemberReference params StatementExpression MethodInvocation commandMap MemberReference name MemberReference command put MethodDeclaration Modifier private BasicType int getCommandId FormalParameter ReferenceType String name FormalParameter BasicType int params StatementExpression Assignment MemberReference name MethodInvocation name toLowerCase = LocalVariableDeclaration ReferenceType Command VariableDeclarator command MethodInvocation commandMap MemberReference name get IfStatement BinaryOperation == MemberReference command Literal null BlockStatement ReturnStatement MemberReference UNKOWN BlockStatement IfStatement BinaryOperation > MemberReference command params MemberReference params BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + MemberReference command name Literal "" needs at least "" MemberReference command params Literal "" arguments."" error ReturnStatement MemberReference NOCOMMAND End ReturnStatement MemberReference command id End MethodDeclaration Modifier private help LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType String VariableDeclarator commands MethodInvocation commandMap MethodInvocation iterator keySet WhileStatement MethodInvocation commands hasNext BlockStatement LocalVariableDeclaration ReferenceType Command VariableDeclarator command MethodInvocation commandMap MethodInvocation commands next get StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\t"" MemberReference command name Literal "": "" MemberReference command help println End MethodDeclaration Modifier private error FormalParameter ReferenceType String message StatementExpression MethodInvocation System.err BinaryOperation + Literal ""Error:"" MemberReference message println MethodDeclaration Modifier private message FormalParameter ReferenceType String text StatementExpression MethodInvocation System.out MemberReference text println MethodDeclaration Modifier private parseArgs FormalParameter ReferenceType String args IfStatement BinaryOperation > MemberReference args length Literal 0 BlockStatement StatementExpression MethodInvocation usage StatementExpression MethodInvocation System Literal 1 exit End MethodDeclaration Modifier private usage StatementExpression MethodInvocation Literal ""Usage: lucli.Lucli"" message StatementExpression MethodInvocation Literal ""(currently, no parameters are supported)"" message ClassDeclaration Modifier private Command FieldDeclaration ReferenceType String VariableDeclarator name FieldDeclaration BasicType int VariableDeclarator id FieldDeclaration ReferenceType String VariableDeclarator help FieldDeclaration BasicType int VariableDeclarator params ConstructorDeclaration Command FormalParameter ReferenceType String name FormalParameter BasicType int id FormalParameter ReferenceType String help FormalParameter BasicType int params StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment This MemberReference id MemberReference id = StatementExpression Assignment This MemberReference help MemberReference help = StatementExpression Assignment This MemberReference params MemberReference params = MethodDeclaration /**
		 * Prints out a usage message for this command.
		 */ Modifier public ReferenceType String commandUsage ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference name Literal "":"" MemberReference help Literal "". Command takes "" MemberReference params Literal "" params""",0
119,119,"CompilationUnit PackageDeclaration org.apache.lucene.search.spans Import org.apache.lucene.index.IndexReader Import java.io.IOException Import java.util.ArrayList Import java.util.Arrays Import java.util.Comparator Import java.util.HashSet Import java.util.LinkedList Import java.util.List Import java.util.Collection Import java.util.Set ClassDeclaration Modifier public /** A Spans that is formed from the ordered subspans of a SpanNearQuery
 * where the subspans do not overlap and have a maximum slop between them.
 * <p>
 * The formed spans only contains minimum slop matches.<br>
 * The matching slop is computed from the distance(s) between
 * the non overlapping matching Spans.<br>
 * Successive matches are always formed from the successive Spans
 * of the SpanNearQuery.
 * <p>
 * The formed spans may contain overlaps when the slop is at least 1.
 * For example, when querying using
 * <pre>t1 t2 t3</pre>
 * with slop at least 1, the fragment:
 * <pre>t1 t2 t1 t3 t2 t3</pre>
 * matches twice:
 * <pre>t1 t2 .. t3      </pre>
 * <pre>      t1 .. t2 t3</pre>
 *
 *
 * Expert:
 * Only public for subclassing.  Most implementations should not need this class
 */ NearSpansOrdered FieldDeclaration Modifier private final BasicType int VariableDeclarator allowedSlop FieldDeclaration Modifier private BasicType boolean VariableDeclarator firstTime Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator more Literal false FieldDeclaration /** The spans in the same order as the SpanNearQuery */ Modifier private final ReferenceType Spans VariableDeclarator subSpans FieldDeclaration /** Indicates that all subSpans have same doc() */ Modifier private BasicType boolean VariableDeclarator inSameDoc Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator matchDoc Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator matchStart Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator matchEnd Literal - 1 FieldDeclaration Modifier private ReferenceType List TypeArgument BasicType byte VariableDeclarator matchPayload FieldDeclaration Modifier private final ReferenceType Spans VariableDeclarator subSpansByDoc FieldDeclaration Modifier private final ReferenceType Comparator TypeArgument ReferenceType Spans VariableDeclarator spanDocComparator ClassCreator ReferenceType Comparator TypeArgument ReferenceType Spans MethodDeclaration Modifier public BasicType int compare FormalParameter ReferenceType Spans o1 FormalParameter ReferenceType Spans o2 ReturnStatement BinaryOperation - MethodInvocation o1 doc MethodInvocation o2 doc FieldDeclaration Modifier private ReferenceType SpanNearQuery VariableDeclarator query FieldDeclaration Modifier private BasicType boolean VariableDeclarator collectPayloads Literal true ConstructorDeclaration Modifier public NearSpansOrdered FormalParameter ReferenceType SpanNearQuery spanNearQuery FormalParameter ReferenceType IndexReader reader IOException StatementExpression ExplicitConstructorInvocation MemberReference spanNearQuery MemberReference reader Literal true ConstructorDeclaration Modifier public NearSpansOrdered FormalParameter ReferenceType SpanNearQuery spanNearQuery FormalParameter ReferenceType IndexReader reader FormalParameter BasicType boolean collectPayloads IOException IfStatement BinaryOperation < MethodInvocation spanNearQuery MemberReference length getClauses Literal 2 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Less than 2 clauses: "" MemberReference spanNearQuery End StatementExpression Assignment This MemberReference collectPayloads MemberReference collectPayloads = StatementExpression Assignment MemberReference allowedSlop MethodInvocation spanNearQuery getSlop = LocalVariableDeclaration ReferenceType SpanQuery VariableDeclarator clauses MethodInvocation spanNearQuery getClauses StatementExpression Assignment MemberReference subSpans ArrayCreator ReferenceType Spans MemberReference clauses length = StatementExpression Assignment MemberReference matchPayload ClassCreator ReferenceType LinkedList TypeArgument BasicType byte = StatementExpression Assignment MemberReference subSpansByDoc ArrayCreator ReferenceType Spans MemberReference clauses length = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference clauses length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i subSpans MemberReference ArraySelector MemberReference i MethodInvocation MemberReference reader getSpans clauses = StatementExpression Assignment MemberReference ArraySelector MemberReference i subSpansByDoc MemberReference ArraySelector MemberReference i subSpans = End StatementExpression Assignment MemberReference query MemberReference spanNearQuery = MethodDeclaration Modifier public Annotation Override BasicType int doc ReturnStatement MemberReference matchDoc MethodDeclaration Modifier public Annotation Override BasicType int start ReturnStatement MemberReference matchStart MethodDeclaration Modifier public Annotation Override BasicType int end ReturnStatement MemberReference matchEnd MethodDeclaration Modifier public ReferenceType Spans getSubSpans ReturnStatement MemberReference subSpans MethodDeclaration Modifier public Annotation Override ReferenceType Collection TypeArgument BasicType byte getPayload IOException ReturnStatement MemberReference matchPayload MethodDeclaration Modifier public Annotation Override BasicType boolean isPayloadAvailable ReturnStatement BinaryOperation == MethodInvocation matchPayload isEmpty Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean next IOException IfStatement MemberReference firstTime BlockStatement StatementExpression Assignment MemberReference firstTime Literal false = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference subSpans length MemberReference ++ i BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation next subSpans BlockStatement StatementExpression Assignment MemberReference more Literal false = ReturnStatement Literal false End End StatementExpression Assignment MemberReference more Literal true = End IfStatement MemberReference collectPayloads BlockStatement StatementExpression MethodInvocation matchPayload clear End ReturnStatement MethodInvocation advanceAfterOrdered MethodDeclaration Modifier public Annotation Override BasicType boolean skipTo FormalParameter BasicType int target IOException IfStatement MemberReference firstTime BlockStatement StatementExpression Assignment MemberReference firstTime Literal false = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference subSpans length MemberReference ++ i BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation MemberReference target skipTo subSpans BlockStatement StatementExpression Assignment MemberReference more Literal false = ReturnStatement Literal false End End StatementExpression Assignment MemberReference more Literal true = IfStatement BinaryOperation && MemberReference more BinaryOperation < MemberReference ArraySelector Literal 0 MethodInvocation doc subSpans MemberReference target BlockStatement IfStatement MemberReference ArraySelector Literal 0 MethodInvocation MemberReference target skipTo subSpans BlockStatement StatementExpression Assignment MemberReference inSameDoc Literal false = BlockStatement StatementExpression Assignment MemberReference more Literal false = ReturnStatement Literal false End End End IfStatement MemberReference collectPayloads BlockStatement StatementExpression MethodInvocation matchPayload clear End ReturnStatement MethodInvocation advanceAfterOrdered MethodDeclaration /** Advances the subSpans to just after an ordered match with a minimum slop
   * that is smaller than the slop allowed by the SpanNearQuery.
   * @return true iff there is such a match.
   */ Modifier private BasicType boolean advanceAfterOrdered IOException WhileStatement BinaryOperation && MemberReference more BinaryOperation || MemberReference inSameDoc MethodInvocation toSameDoc BlockStatement IfStatement BinaryOperation && MethodInvocation stretchToOrder MethodInvocation shrinkToAfterShortestMatch BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /** Advance the subSpans to the same document */ Modifier private BasicType boolean toSameDoc IOException StatementExpression MethodInvocation Arrays MemberReference subSpansByDoc MemberReference spanDocComparator sort LocalVariableDeclaration BasicType int VariableDeclarator firstIndex Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator maxDoc MemberReference ArraySelector BinaryOperation - MemberReference subSpansByDoc length Literal 1 MethodInvocation doc subSpansByDoc WhileStatement BinaryOperation != MemberReference ArraySelector MemberReference firstIndex MethodInvocation doc subSpansByDoc MemberReference maxDoc BlockStatement IfStatement MemberReference ! ArraySelector MemberReference firstIndex MethodInvocation MemberReference maxDoc skipTo subSpansByDoc BlockStatement StatementExpression Assignment MemberReference more Literal false = StatementExpression Assignment MemberReference inSameDoc Literal false = ReturnStatement Literal false End StatementExpression Assignment MemberReference maxDoc MemberReference ArraySelector MemberReference firstIndex MethodInvocation doc subSpansByDoc = IfStatement BinaryOperation == MemberReference ++ firstIndex MemberReference subSpansByDoc length BlockStatement StatementExpression Assignment MemberReference firstIndex Literal 0 = End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference subSpansByDoc length MemberReference ++ i BlockStatement AssertStatement BinaryOperation == MemberReference ArraySelector MemberReference i MethodInvocation doc subSpansByDoc MemberReference maxDoc BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal "" NearSpansOrdered.toSameDoc() spans "" MemberReference ArraySelector Literal 0 subSpansByDoc Literal ""\n at doc "" MemberReference ArraySelector MemberReference i MethodInvocation doc subSpansByDoc Literal "", but should be at "" MemberReference maxDoc End StatementExpression Assignment MemberReference inSameDoc Literal true = ReturnStatement Literal true MethodDeclaration /** Check whether two Spans in the same document are ordered.
   * @param spans1 
   * @param spans2 
   * @return true iff spans1 starts before spans2
   *              or the spans start at the same position,
   *              and spans1 ends before spans2.
   */ Modifier final static BasicType boolean docSpansOrdered FormalParameter ReferenceType Spans spans1 FormalParameter ReferenceType Spans spans2 AssertStatement BinaryOperation == MethodInvocation spans1 doc MethodInvocation spans2 doc BinaryOperation + BinaryOperation + BinaryOperation + Literal ""doc1 "" MethodInvocation spans1 doc Literal "" != doc2 "" MethodInvocation spans2 doc LocalVariableDeclaration BasicType int VariableDeclarator start1 MethodInvocation spans1 start LocalVariableDeclaration BasicType int VariableDeclarator start2 MethodInvocation spans2 start ReturnStatement TernaryExpression BinaryOperation == MemberReference start1 MemberReference start2 BinaryOperation < MethodInvocation spans1 end MethodInvocation spans2 end BinaryOperation < MemberReference start1 MemberReference start2 MethodDeclaration /** Like {@link #docSpansOrdered(Spans,Spans)}, but use the spans
   * starts and ends as parameters.
   */ Modifier private final static BasicType boolean docSpansOrdered FormalParameter BasicType int start1 FormalParameter BasicType int end1 FormalParameter BasicType int start2 FormalParameter BasicType int end2 ReturnStatement TernaryExpression BinaryOperation == MemberReference start1 MemberReference start2 BinaryOperation < MemberReference end1 MemberReference end2 BinaryOperation < MemberReference start1 MemberReference start2 MethodDeclaration /** Order the subSpans within the same document by advancing all later spans
   * after the previous one.
   */ Modifier private BasicType boolean stretchToOrder IOException StatementExpression Assignment MemberReference matchDoc MemberReference ArraySelector Literal 0 MethodInvocation doc subSpans = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation && MemberReference inSameDoc BinaryOperation < MemberReference i MemberReference subSpans length MemberReference ++ i BlockStatement WhileStatement MethodInvocation ! MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 subSpans MemberReference ArraySelector MemberReference i subSpans docSpansOrdered BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation next subSpans BlockStatement StatementExpression Assignment MemberReference inSameDoc Literal false = StatementExpression Assignment MemberReference more Literal false = BreakStatement IfStatement BinaryOperation != MemberReference matchDoc MemberReference ArraySelector MemberReference i MethodInvocation doc subSpans BlockStatement StatementExpression Assignment MemberReference inSameDoc Literal false = BreakStatement End End End End ReturnStatement MemberReference inSameDoc MethodDeclaration /** The subSpans are ordered in the same doc, so there is a possible match.
   * Compute the slop while making the match as short as possible by advancing
   * all subSpans except the last one in reverse order.
   */ Modifier private BasicType boolean shrinkToAfterShortestMatch IOException StatementExpression Assignment MemberReference matchStart MemberReference ArraySelector BinaryOperation - MemberReference subSpans length Literal 1 MethodInvocation start subSpans = StatementExpression Assignment MemberReference matchEnd MemberReference ArraySelector BinaryOperation - MemberReference subSpans length Literal 1 MethodInvocation end subSpans = LocalVariableDeclaration ReferenceType Set TypeArgument BasicType byte VariableDeclarator possibleMatchPayloads ClassCreator ReferenceType HashSet TypeArgument BasicType byte IfStatement MemberReference ArraySelector BinaryOperation - MemberReference subSpans length Literal 1 MethodInvocation isPayloadAvailable subSpans BlockStatement StatementExpression MethodInvocation possibleMatchPayloads MemberReference ArraySelector BinaryOperation - MemberReference subSpans length Literal 1 MethodInvocation getPayload subSpans addAll End LocalVariableDeclaration ReferenceType Collection TypeArgument BasicType byte VariableDeclarator possiblePayload Literal null LocalVariableDeclaration BasicType int VariableDeclarator matchSlop Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator lastStart MemberReference matchStart LocalVariableDeclaration BasicType int VariableDeclarator lastEnd MemberReference matchEnd ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation - MemberReference subSpans length Literal 2 BinaryOperation >= MemberReference i Literal 0 MemberReference -- i BlockStatement LocalVariableDeclaration ReferenceType Spans VariableDeclarator prevSpans MemberReference ArraySelector MemberReference i subSpans IfStatement BinaryOperation && MemberReference collectPayloads MethodInvocation prevSpans isPayloadAvailable BlockStatement LocalVariableDeclaration ReferenceType Collection TypeArgument BasicType byte VariableDeclarator payload MethodInvocation prevSpans getPayload StatementExpression Assignment MemberReference possiblePayload ClassCreator ReferenceType ArrayList TypeArgument BasicType byte MethodInvocation payload size = StatementExpression MethodInvocation possiblePayload MemberReference payload addAll End LocalVariableDeclaration BasicType int VariableDeclarator prevStart MethodInvocation prevSpans start LocalVariableDeclaration BasicType int VariableDeclarator prevEnd MethodInvocation prevSpans end WhileStatement Literal true BlockStatement IfStatement MethodInvocation ! prevSpans next BlockStatement StatementExpression Assignment MemberReference inSameDoc Literal false = StatementExpression Assignment MemberReference more Literal false = BreakStatement IfStatement BinaryOperation != MemberReference matchDoc MethodInvocation prevSpans doc BlockStatement StatementExpression Assignment MemberReference inSameDoc Literal false = BreakStatement BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator ppStart MethodInvocation prevSpans start LocalVariableDeclaration BasicType int VariableDeclarator ppEnd MethodInvocation prevSpans end IfStatement MethodInvocation ! MemberReference ppStart MemberReference ppEnd MemberReference lastStart MemberReference lastEnd docSpansOrdered BlockStatement BreakStatement BlockStatement StatementExpression Assignment MemberReference prevStart MemberReference ppStart = StatementExpression Assignment MemberReference prevEnd MemberReference ppEnd = IfStatement BinaryOperation && MemberReference collectPayloads MethodInvocation prevSpans isPayloadAvailable BlockStatement LocalVariableDeclaration ReferenceType Collection TypeArgument BasicType byte VariableDeclarator payload MethodInvocation prevSpans getPayload StatementExpression Assignment MemberReference possiblePayload ClassCreator ReferenceType ArrayList TypeArgument BasicType byte MethodInvocation payload size = StatementExpression MethodInvocation possiblePayload MemberReference payload addAll End End End End End IfStatement BinaryOperation && MemberReference collectPayloads BinaryOperation != MemberReference possiblePayload Literal null BlockStatement StatementExpression MethodInvocation possibleMatchPayloads MemberReference possiblePayload addAll End AssertStatement BinaryOperation <= MemberReference prevStart MemberReference matchStart IfStatement BinaryOperation > MemberReference matchStart MemberReference prevEnd BlockStatement StatementExpression Assignment MemberReference matchSlop BinaryOperation - MemberReference matchStart MemberReference prevEnd += End StatementExpression Assignment MemberReference matchStart MemberReference prevStart = StatementExpression Assignment MemberReference lastStart MemberReference prevStart = StatementExpression Assignment MemberReference lastEnd MemberReference prevEnd = End LocalVariableDeclaration BasicType boolean VariableDeclarator match BinaryOperation <= MemberReference matchSlop MemberReference allowedSlop IfStatement BinaryOperation && BinaryOperation && MemberReference collectPayloads MemberReference match BinaryOperation > MethodInvocation possibleMatchPayloads size Literal 0 BlockStatement StatementExpression MethodInvocation matchPayload MemberReference possibleMatchPayloads addAll End ReturnStatement MemberReference match MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation getName getClass Literal ""("" MethodInvocation query toString Literal "")@"" TernaryExpression MemberReference firstTime Literal ""START"" TernaryExpression MemberReference more BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation doc Literal "":"" MethodInvocation start Literal ""-"" MethodInvocation end Literal ""END"" ReferenceType Spans",0
480,480,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.ngram Import org.apache.lucene.analysis.Tokenizer Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.util.AttributeSource Import java.io.IOException Import java.io.Reader ClassDeclaration Modifier public final /**
 * Tokenizes the input from an edge into n-grams of given size(s).
 * <p>
 * This {@link Tokenizer} create n-grams from the beginning edge or ending edge of a input token.
 * MaxGram can't be larger than 1024 because of limitation.
 * </p>
 */ EdgeNGramTokenizer FieldDeclaration Modifier public final static ReferenceType Side VariableDeclarator DEFAULT_SIDE MemberReference Side FRONT FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_GRAM_SIZE Literal 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_MIN_GRAM_SIZE Literal 1 FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt EnumDeclaration Modifier public static /** Specifies which side of the input the n-gram should be generated from */ Side EnumBody EnumConstantDeclaration /** Get the n-gram from the front of the input */ FRONT MethodDeclaration Modifier public Annotation Override ReferenceType String getLabel ReturnStatement Literal ""front"" EnumConstantDeclaration /** Get the n-gram from the end of the input */ BACK MethodDeclaration Modifier public Annotation Override ReferenceType String getLabel ReturnStatement Literal ""back"" MethodDeclaration Modifier public abstract ReferenceType String getLabel MethodDeclaration Modifier public static ReferenceType Side getSide FormalParameter ReferenceType String sideName IfStatement MethodInvocation FRONT MethodInvocation MemberReference sideName equals getLabel BlockStatement ReturnStatement MemberReference FRONT End IfStatement MethodInvocation BACK MethodInvocation MemberReference sideName equals getLabel BlockStatement ReturnStatement MemberReference BACK End ReturnStatement Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator minGram FieldDeclaration Modifier private BasicType int VariableDeclarator maxGram FieldDeclaration Modifier private BasicType int VariableDeclarator gramSize FieldDeclaration Modifier private ReferenceType Side VariableDeclarator side FieldDeclaration Modifier private BasicType boolean VariableDeclarator started Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator inLen FieldDeclaration Modifier private ReferenceType String VariableDeclarator inStr ConstructorDeclaration Modifier public /**
   * Creates EdgeNGramTokenizer that can generate n-grams in the sizes of the given range
   *
   * @param input {@link Reader} holding the input to be tokenized
   * @param side the {@link Side} from which to chop off an n-gram
   * @param minGram the smallest n-gram to generate
   * @param maxGram the largest n-gram to generate
   */ EdgeNGramTokenizer FormalParameter ReferenceType Reader input FormalParameter ReferenceType Side side FormalParameter BasicType int minGram FormalParameter BasicType int maxGram StatementExpression SuperConstructorInvocation MemberReference input StatementExpression MethodInvocation MemberReference side MemberReference minGram MemberReference maxGram init ConstructorDeclaration Modifier public /**
   * Creates EdgeNGramTokenizer that can generate n-grams in the sizes of the given range
   *
   * @param source {@link AttributeSource} to use
   * @param input {@link Reader} holding the input to be tokenized
   * @param side the {@link Side} from which to chop off an n-gram
   * @param minGram the smallest n-gram to generate
   * @param maxGram the largest n-gram to generate
   */ EdgeNGramTokenizer FormalParameter ReferenceType AttributeSource source FormalParameter ReferenceType Reader input FormalParameter ReferenceType Side side FormalParameter BasicType int minGram FormalParameter BasicType int maxGram StatementExpression SuperConstructorInvocation MemberReference source MemberReference input StatementExpression MethodInvocation MemberReference side MemberReference minGram MemberReference maxGram init ConstructorDeclaration Modifier public /**
   * Creates EdgeNGramTokenizer that can generate n-grams in the sizes of the given range
   * 
   * @param factory {@link org.apache.lucene.util.AttributeSource.AttributeFactory} to use
   * @param input {@link Reader} holding the input to be tokenized
   * @param side the {@link Side} from which to chop off an n-gram
   * @param minGram the smallest n-gram to generate
   * @param maxGram the largest n-gram to generate
   */ EdgeNGramTokenizer FormalParameter ReferenceType AttributeFactory factory FormalParameter ReferenceType Reader input FormalParameter ReferenceType Side side FormalParameter BasicType int minGram FormalParameter BasicType int maxGram StatementExpression SuperConstructorInvocation MemberReference factory MemberReference input StatementExpression MethodInvocation MemberReference side MemberReference minGram MemberReference maxGram init ConstructorDeclaration Modifier public /**
   * Creates EdgeNGramTokenizer that can generate n-grams in the sizes of the given range
   *
   * @param input {@link Reader} holding the input to be tokenized
   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram
   * @param minGram the smallest n-gram to generate
   * @param maxGram the largest n-gram to generate
   */ EdgeNGramTokenizer FormalParameter ReferenceType Reader input FormalParameter ReferenceType String sideLabel FormalParameter BasicType int minGram FormalParameter BasicType int maxGram StatementExpression ExplicitConstructorInvocation MemberReference input MethodInvocation Side MemberReference sideLabel getSide MemberReference minGram MemberReference maxGram ConstructorDeclaration Modifier public /**
   * Creates EdgeNGramTokenizer that can generate n-grams in the sizes of the given range
   *
   * @param source {@link AttributeSource} to use
   * @param input {@link Reader} holding the input to be tokenized
   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram
   * @param minGram the smallest n-gram to generate
   * @param maxGram the largest n-gram to generate
   */ EdgeNGramTokenizer FormalParameter ReferenceType AttributeSource source FormalParameter ReferenceType Reader input FormalParameter ReferenceType String sideLabel FormalParameter BasicType int minGram FormalParameter BasicType int maxGram StatementExpression ExplicitConstructorInvocation MemberReference source MemberReference input MethodInvocation Side MemberReference sideLabel getSide MemberReference minGram MemberReference maxGram ConstructorDeclaration Modifier public /**
   * Creates EdgeNGramTokenizer that can generate n-grams in the sizes of the given range
   * 
   * @param factory {@link org.apache.lucene.util.AttributeSource.AttributeFactory} to use
   * @param input {@link Reader} holding the input to be tokenized
   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram
   * @param minGram the smallest n-gram to generate
   * @param maxGram the largest n-gram to generate
   */ EdgeNGramTokenizer FormalParameter ReferenceType AttributeFactory factory FormalParameter ReferenceType Reader input FormalParameter ReferenceType String sideLabel FormalParameter BasicType int minGram FormalParameter BasicType int maxGram StatementExpression ExplicitConstructorInvocation MemberReference factory MemberReference input MethodInvocation Side MemberReference sideLabel getSide MemberReference minGram MemberReference maxGram MethodDeclaration Modifier private init FormalParameter ReferenceType Side side FormalParameter BasicType int minGram FormalParameter BasicType int maxGram IfStatement BinaryOperation == MemberReference side Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""sideLabel must be either front or back"" End IfStatement BinaryOperation < MemberReference minGram Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""minGram must be greater than zero"" End IfStatement BinaryOperation > MemberReference minGram MemberReference maxGram BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""minGram must not be greater than maxGram"" End StatementExpression Assignment This MemberReference minGram MemberReference minGram = StatementExpression Assignment This MemberReference maxGram MemberReference maxGram = StatementExpression Assignment This MemberReference side MemberReference side = StatementExpression Assignment This MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment This MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = MethodDeclaration /** Returns the next token in the stream, or null at EOS. */ Modifier public final Annotation Override BasicType boolean incrementToken IOException StatementExpression MethodInvocation clearAttributes IfStatement MemberReference ! started BlockStatement StatementExpression Assignment MemberReference started Literal true = LocalVariableDeclaration BasicType char VariableDeclarator chars ArrayCreator BasicType char Literal 1024 LocalVariableDeclaration BasicType int VariableDeclarator charsRead MethodInvocation input MemberReference chars read StatementExpression Assignment MemberReference inStr ClassCreator MethodInvocation trim ReferenceType String MemberReference chars Literal 0 MemberReference charsRead = StatementExpression Assignment MemberReference inLen MethodInvocation inStr length = StatementExpression Assignment MemberReference gramSize MemberReference minGram = End IfStatement BinaryOperation > MemberReference gramSize MemberReference inLen BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation > MemberReference gramSize MemberReference maxGram BlockStatement ReturnStatement Literal false End LocalVariableDeclaration BasicType int VariableDeclarator start TernaryExpression BinaryOperation == MemberReference side MemberReference Side FRONT Literal 0 BinaryOperation - MemberReference inLen MemberReference gramSize LocalVariableDeclaration BasicType int VariableDeclarator end BinaryOperation + MemberReference start MemberReference gramSize StatementExpression MethodInvocation termAtt MemberReference inStr MemberReference start MemberReference gramSize setTermBuffer StatementExpression MethodInvocation offsetAtt MethodInvocation MemberReference start correctOffset MethodInvocation MemberReference end correctOffset setOffset StatementExpression MemberReference ++ gramSize ReturnStatement Literal true MethodDeclaration Modifier public final Annotation Override end LocalVariableDeclaration Modifier final BasicType int VariableDeclarator finalOffset MemberReference inLen StatementExpression This MemberReference offsetAtt MethodInvocation MemberReference finalOffset MemberReference finalOffset setOffset MethodDeclaration Modifier public Annotation Override reset FormalParameter ReferenceType Reader input IOException StatementExpression SuperMethodInvocation MemberReference input reset StatementExpression MethodInvocation reset MethodDeclaration Modifier public Annotation Override reset IOException StatementExpression SuperMethodInvocation reset StatementExpression Assignment MemberReference started Literal false = ReferenceType Tokenizer",0
634,634,,1
574,574,,0
654,654,,1
933,933,,0
516,516,"CompilationUnit PackageDeclaration org.apache.lucene.search Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.util.ToStringUtils Import java.io.IOException Import java.util.Set ClassDeclaration Modifier public /**
 * A query that applies a filter to the results of another query.
 *
 * <p>Note: the bits are retrieved from the filter each time this
 * query is used in a search - use a CachingWrapperFilter to avoid
 * regenerating the bits every time.
 *
 * <p>Created: Apr 20, 2004 8:58:29 AM
 *
 * @since   1.4
 * @see     CachingWrapperFilter
 */ FilteredQuery FieldDeclaration ReferenceType Query VariableDeclarator query FieldDeclaration ReferenceType Filter VariableDeclarator filter ConstructorDeclaration Modifier public /**
   * Constructs a new query which applies a filter to the results of the original query.
   * Filter.getDocIdSet() will be called every time this query is used in a search.
   * @param query  Query to be filtered, cannot be <code>null</code>.
   * @param filter Filter to apply to query results, cannot be <code>null</code>.
   */ FilteredQuery FormalParameter ReferenceType Query query FormalParameter ReferenceType Filter filter StatementExpression Assignment This MemberReference query MemberReference query = StatementExpression Assignment This MemberReference filter MemberReference filter = MethodDeclaration /**
   * Returns a Weight that applies the filter to the enclosed query's Weight.
   * This is accomplished by overriding the Scorer returned by the Weight.
   */ Modifier public Annotation Override ReferenceType Weight createWeight FormalParameter Modifier final ReferenceType Searcher searcher IOException LocalVariableDeclaration Modifier final ReferenceType Weight VariableDeclarator weight MethodInvocation query MemberReference searcher createWeight LocalVariableDeclaration Modifier final ReferenceType Similarity VariableDeclarator similarity MethodInvocation query MemberReference searcher getSimilarity ReturnStatement ClassCreator ReferenceType Weight FieldDeclaration Modifier private BasicType float VariableDeclarator value MethodDeclaration Modifier public Annotation Override BasicType float getValue ReturnStatement MemberReference value MethodDeclaration Modifier public Annotation Override BasicType float sumOfSquaredWeights IOException ReturnStatement BinaryOperation * BinaryOperation * MethodInvocation weight sumOfSquaredWeights MethodInvocation getBoost MethodInvocation getBoost MethodDeclaration Modifier public Annotation Override normalize FormalParameter BasicType float v StatementExpression MethodInvocation weight MemberReference v normalize StatementExpression Assignment MemberReference value BinaryOperation * MethodInvocation weight getValue MethodInvocation getBoost = MethodDeclaration Modifier public Annotation Override ReferenceType Explanation explain FormalParameter ReferenceType IndexReader ir FormalParameter BasicType int i IOException LocalVariableDeclaration ReferenceType Explanation VariableDeclarator inner MethodInvocation weight MemberReference ir MemberReference i explain IfStatement BinaryOperation != MethodInvocation getBoost Literal 1 BlockStatement LocalVariableDeclaration ReferenceType Explanation VariableDeclarator preBoost MemberReference inner StatementExpression Assignment MemberReference inner ClassCreator ReferenceType Explanation BinaryOperation * MethodInvocation inner getValue MethodInvocation getBoost Literal ""product of:"" = StatementExpression MethodInvocation inner ClassCreator ReferenceType Explanation MethodInvocation getBoost Literal ""boost"" addDetail StatementExpression MethodInvocation inner MemberReference preBoost addDetail End LocalVariableDeclaration ReferenceType Filter VariableDeclarator f This FilteredQuery MemberReference filter LocalVariableDeclaration ReferenceType DocIdSet VariableDeclarator docIdSet MethodInvocation f MemberReference ir getDocIdSet LocalVariableDeclaration ReferenceType DocIdSetIterator VariableDeclarator docIdSetIterator TernaryExpression BinaryOperation == MemberReference docIdSet Literal null MethodInvocation DocIdSet.EMPTY_DOCIDSET iterator MethodInvocation docIdSet iterator IfStatement BinaryOperation == MemberReference docIdSetIterator Literal null BlockStatement StatementExpression Assignment MemberReference docIdSetIterator MethodInvocation DocIdSet.EMPTY_DOCIDSET iterator = End IfStatement BinaryOperation == MethodInvocation docIdSetIterator MemberReference i advance MemberReference i BlockStatement ReturnStatement MemberReference inner BlockStatement LocalVariableDeclaration ReferenceType Explanation VariableDeclarator result ClassCreator ReferenceType Explanation Literal 0.0f BinaryOperation + Literal ""failure to match filter: "" MethodInvocation f toString StatementExpression MethodInvocation result MemberReference inner addDetail ReturnStatement MemberReference result End MethodDeclaration Modifier public Annotation Override ReferenceType Query getQuery ReturnStatement This FilteredQuery MethodDeclaration Modifier public Annotation Override ReferenceType Scorer scorer FormalParameter ReferenceType IndexReader indexReader FormalParameter BasicType boolean scoreDocsInOrder FormalParameter BasicType boolean topScorer IOException LocalVariableDeclaration Modifier final ReferenceType Scorer VariableDeclarator scorer MethodInvocation weight MemberReference indexReader Literal true Literal false scorer IfStatement BinaryOperation == MemberReference scorer Literal null BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType DocIdSet VariableDeclarator docIdSet MethodInvocation filter MemberReference indexReader getDocIdSet IfStatement BinaryOperation == MemberReference docIdSet Literal null BlockStatement ReturnStatement Literal null End LocalVariableDeclaration Modifier final ReferenceType DocIdSetIterator VariableDeclarator docIdSetIterator MethodInvocation docIdSet iterator IfStatement BinaryOperation == MemberReference docIdSetIterator Literal null BlockStatement ReturnStatement Literal null End ReturnStatement ClassCreator ReferenceType Scorer MemberReference similarity FieldDeclaration Modifier private BasicType int VariableDeclarator doc Literal - 1 MethodDeclaration Modifier private BasicType int advanceToCommon FormalParameter BasicType int scorerDoc FormalParameter BasicType int disiDoc IOException WhileStatement BinaryOperation != MemberReference scorerDoc MemberReference disiDoc BlockStatement IfStatement BinaryOperation < MemberReference scorerDoc MemberReference disiDoc BlockStatement StatementExpression Assignment MemberReference scorerDoc MethodInvocation scorer MemberReference disiDoc advance = BlockStatement StatementExpression Assignment MemberReference disiDoc MethodInvocation docIdSetIterator MemberReference scorerDoc advance = End End ReturnStatement MemberReference scorerDoc MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException LocalVariableDeclaration BasicType int VariableDeclarator scorerDoc VariableDeclarator disiDoc ReturnStatement Assignment MemberReference doc TernaryExpression BinaryOperation && BinaryOperation && BinaryOperation != Assignment MemberReference disiDoc MethodInvocation docIdSetIterator nextDoc = MemberReference NO_MORE_DOCS BinaryOperation != Assignment MemberReference scorerDoc MethodInvocation scorer nextDoc = MemberReference NO_MORE_DOCS BinaryOperation != MethodInvocation MemberReference scorerDoc MemberReference disiDoc advanceToCommon MemberReference NO_MORE_DOCS MethodInvocation scorer docID MemberReference NO_MORE_DOCS = MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MemberReference doc MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException LocalVariableDeclaration BasicType int VariableDeclarator disiDoc VariableDeclarator scorerDoc ReturnStatement Assignment MemberReference doc TernaryExpression BinaryOperation && BinaryOperation && BinaryOperation != Assignment MemberReference disiDoc MethodInvocation docIdSetIterator MemberReference target advance = MemberReference NO_MORE_DOCS BinaryOperation != Assignment MemberReference scorerDoc MethodInvocation scorer MemberReference disiDoc advance = MemberReference NO_MORE_DOCS BinaryOperation != MethodInvocation MemberReference scorerDoc MemberReference disiDoc advanceToCommon MemberReference NO_MORE_DOCS MethodInvocation scorer docID MemberReference NO_MORE_DOCS = MethodDeclaration Modifier public Annotation Override BasicType float score IOException ReturnStatement BinaryOperation * MethodInvocation getBoost MethodInvocation scorer score MethodDeclaration /** Rewrites the wrapped query. */ Modifier public Annotation Override ReferenceType Query rewrite FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration ReferenceType Query VariableDeclarator rewritten MethodInvocation query MemberReference reader rewrite IfStatement BinaryOperation != MemberReference rewritten MemberReference query BlockStatement LocalVariableDeclaration ReferenceType FilteredQuery VariableDeclarator clone Cast ReferenceType FilteredQuery This MethodInvocation clone StatementExpression Assignment MemberReference clone query MemberReference rewritten = ReturnStatement MemberReference clone BlockStatement ReturnStatement This End MethodDeclaration Modifier public ReferenceType Query getQuery ReturnStatement MemberReference query MethodDeclaration Modifier public ReferenceType Filter getFilter ReturnStatement MemberReference filter MethodDeclaration Modifier public Annotation Override extractTerms FormalParameter ReferenceType Set TypeArgument ReferenceType Term terms StatementExpression MethodInvocation MethodInvocation MemberReference terms extractTerms getQuery MethodDeclaration /** Prints a user-readable version of this query. */ Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String s LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation buffer Literal ""filtered("" append StatementExpression MethodInvocation buffer MethodInvocation query MemberReference s toString append StatementExpression MethodInvocation buffer Literal "")->"" append StatementExpression MethodInvocation buffer MemberReference filter append StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration /** Returns true iff <code>o</code> is equal to this. */ Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation instanceof MemberReference o ReferenceType FilteredQuery BlockStatement LocalVariableDeclaration ReferenceType FilteredQuery VariableDeclarator fq Cast ReferenceType FilteredQuery MemberReference o ReturnStatement BinaryOperation && BinaryOperation && MethodInvocation query MemberReference fq query equals MethodInvocation filter MemberReference fq filter equals BinaryOperation == MethodInvocation getBoost MethodInvocation fq getBoost End ReturnStatement Literal false MethodDeclaration /** Returns a hash code value for this object. */ Modifier public Annotation Override BasicType int hashCode ReturnStatement BinaryOperation ^ MethodInvocation query hashCode BinaryOperation + MethodInvocation filter hashCode MethodInvocation Float MethodInvocation getBoost floatToRawIntBits ReferenceType Query",0
107,107,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import java.text.Collator Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor Import org.apache.lucene.search.TermRangeQuery Import org.apache.lucene.util.Attribute InterfaceDeclaration Modifier public /**
 * This attribute is used by {@link ParametricRangeQueryNodeProcessor} processor
 * and must be defined in the {@link QueryConfigHandler}. This attribute tells
 * the processor which {@link Collator} should be used for a
 * {@link TermRangeQuery} <br/>
 * 
 */ RangeCollatorAttribute MethodDeclaration Modifier public setDateResolution FormalParameter ReferenceType Collator rangeCollator MethodDeclaration Modifier public ReferenceType Collator getRangeCollator ReferenceType Attribute",0
267,267,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.fr Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.CharArraySet Import org.apache.lucene.analysis.LowerCaseFilter Import org.apache.lucene.analysis.StopFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.Tokenizer Import org.apache.lucene.analysis.WordlistLoader Import org.apache.lucene.analysis.standard.StandardFilter Import org.apache.lucene.analysis.standard.StandardTokenizer Import org.apache.lucene.analysis.standard.StandardAnalyzer Import org.apache.lucene.util.Version Import java.io.File Import java.io.IOException Import java.io.Reader Import java.util.Arrays Import java.util.HashSet Import java.util.Map Import java.util.Set ClassDeclaration Modifier public final /**
 * {@link Analyzer} for French language. 
 * <p>
 * Supports an external list of stopwords (words that
 * will not be indexed at all) and an external list of exclusions (word that will
 * not be stemmed, but indexed).
 * A default set of stopwords is used unless an alternative list is specified, but the
 * exclusion list is empty by default.
 * </p>
 *
 * <a name=""version""/>
 * <p>You must specify the required {@link Version}
 * compatibility when creating FrenchAnalyzer:
 * <ul>
 *   <li> As of 2.9, StopFilter preserves position
 *        increments
 * </ul>
 *
 * <p><b>NOTE</b>: This class uses the same {@link Version}
 * dependent settings as {@link StandardAnalyzer}.</p>
 */ FrenchAnalyzer FieldDeclaration /**
   * Extended list of typical French stopwords.
   * @deprecated use {@link #getDefaultStopSet()} instead
   */ Modifier public final static ReferenceType String VariableDeclarator FRENCH_STOP_WORDS ArrayInitializer Literal ""a"" Literal ""afin"" Literal ""ai"" Literal ""ainsi"" Literal ""après"" Literal ""attendu"" Literal ""au"" Literal ""aujourd"" Literal ""auquel"" Literal ""aussi"" Literal ""autre"" Literal ""autres"" Literal ""aux"" Literal ""auxquelles"" Literal ""auxquels"" Literal ""avait"" Literal ""avant"" Literal ""avec"" Literal ""avoir"" Literal ""c"" Literal ""car"" Literal ""ce"" Literal ""ceci"" Literal ""cela"" Literal ""celle"" Literal ""celles"" Literal ""celui"" Literal ""cependant"" Literal ""certain"" Literal ""certaine"" Literal ""certaines"" Literal ""certains"" Literal ""ces"" Literal ""cet"" Literal ""cette"" Literal ""ceux"" Literal ""chez"" Literal ""ci"" Literal ""combien"" Literal ""comme"" Literal ""comment"" Literal ""concernant"" Literal ""contre"" Literal ""d"" Literal ""dans"" Literal ""de"" Literal ""debout"" Literal ""dedans"" Literal ""dehors"" Literal ""delà"" Literal ""depuis"" Literal ""derrière"" Literal ""des"" Literal ""désormais"" Literal ""desquelles"" Literal ""desquels"" Literal ""dessous"" Literal ""dessus"" Literal ""devant"" Literal ""devers"" Literal ""devra"" Literal ""divers"" Literal ""diverse"" Literal ""diverses"" Literal ""doit"" Literal ""donc"" Literal ""dont"" Literal ""du"" Literal ""duquel"" Literal ""durant"" Literal ""dès"" Literal ""elle"" Literal ""elles"" Literal ""en"" Literal ""entre"" Literal ""environ"" Literal ""est"" Literal ""et"" Literal ""etc"" Literal ""etre"" Literal ""eu"" Literal ""eux"" Literal ""excepté"" Literal ""hormis"" Literal ""hors"" Literal ""hélas"" Literal ""hui"" Literal ""il"" Literal ""ils"" Literal ""j"" Literal ""je"" Literal ""jusqu"" Literal ""jusque"" Literal ""l"" Literal ""la"" Literal ""laquelle"" Literal ""le"" Literal ""lequel"" Literal ""les"" Literal ""lesquelles"" Literal ""lesquels"" Literal ""leur"" Literal ""leurs"" Literal ""lorsque"" Literal ""lui"" Literal ""là"" Literal ""ma"" Literal ""mais"" Literal ""malgré"" Literal ""me"" Literal ""merci"" Literal ""mes"" Literal ""mien"" Literal ""mienne"" Literal ""miennes"" Literal ""miens"" Literal ""moi"" Literal ""moins"" Literal ""mon"" Literal ""moyennant"" Literal ""même"" Literal ""mêmes"" Literal ""n"" Literal ""ne"" Literal ""ni"" Literal ""non"" Literal ""nos"" Literal ""notre"" Literal ""nous"" Literal ""néanmoins"" Literal ""nôtre"" Literal ""nôtres"" Literal ""on"" Literal ""ont"" Literal ""ou"" Literal ""outre"" Literal ""où"" Literal ""par"" Literal ""parmi"" Literal ""partant"" Literal ""pas"" Literal ""passé"" Literal ""pendant"" Literal ""plein"" Literal ""plus"" Literal ""plusieurs"" Literal ""pour"" Literal ""pourquoi"" Literal ""proche"" Literal ""près"" Literal ""puisque"" Literal ""qu"" Literal ""quand"" Literal ""que"" Literal ""quel"" Literal ""quelle"" Literal ""quelles"" Literal ""quels"" Literal ""qui"" Literal ""quoi"" Literal ""quoique"" Literal ""revoici"" Literal ""revoilà"" Literal ""s"" Literal ""sa"" Literal ""sans"" Literal ""sauf"" Literal ""se"" Literal ""selon"" Literal ""seront"" Literal ""ses"" Literal ""si"" Literal ""sien"" Literal ""sienne"" Literal ""siennes"" Literal ""siens"" Literal ""sinon"" Literal ""soi"" Literal ""soit"" Literal ""son"" Literal ""sont"" Literal ""sous"" Literal ""suivant"" Literal ""sur"" Literal ""ta"" Literal ""te"" Literal ""tes"" Literal ""tien"" Literal ""tienne"" Literal ""tiennes"" Literal ""tiens"" Literal ""toi"" Literal ""ton"" Literal ""tous"" Literal ""tout"" Literal ""toute"" Literal ""toutes"" Literal ""tu"" Literal ""un"" Literal ""une"" Literal ""va"" Literal ""vers"" Literal ""voici"" Literal ""voilà"" Literal ""vos"" Literal ""votre"" Literal ""vous"" Literal ""vu"" Literal ""vôtre"" Literal ""vôtres"" Literal ""y"" Literal ""à"" Literal ""ça"" Literal ""ès"" Literal ""été"" Literal ""être"" Literal ""ô"" FieldDeclaration /**
   * Contains the stopwords used with the {@link StopFilter}.
   */ Modifier private final ReferenceType Set TypeArgument ? VariableDeclarator stoptable FieldDeclaration /**
   * Contains words that should be indexed but not stemmed.
   */ Modifier private ReferenceType Set TypeArgument ? VariableDeclarator excltable ClassCreator ReferenceType HashSet FieldDeclaration Modifier private final ReferenceType Version VariableDeclarator matchVersion MethodDeclaration /**
   * Returns an unmodifiable instance of the default stop-words set.
   * @return an unmodifiable instance of the default stop-words set.
   */ Modifier public static ReferenceType Set TypeArgument ? getDefaultStopSet ReturnStatement MemberReference DefaultSetHolder DEFAULT_STOP_SET ClassDeclaration Modifier private static DefaultSetHolder FieldDeclaration Modifier final static ReferenceType Set TypeArgument ? VariableDeclarator DEFAULT_STOP_SET MethodInvocation CharArraySet ClassCreator ReferenceType CharArraySet MethodInvocation Arrays MemberReference FRENCH_STOP_WORDS asList Literal false unmodifiableSet ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the default stop words ({@link #FRENCH_STOP_WORDS}).
   */ FrenchAnalyzer FormalParameter ReferenceType Version matchVersion StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MemberReference DefaultSetHolder DEFAULT_STOP_SET ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words
   * 
   * @param matchVersion
   *          lucene compatibility version
   * @param stopwords
   *          a stopword set
   */ FrenchAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Set TypeArgument ? stopwords StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MemberReference stopwords MemberReference CharArraySet EMPTY_SET ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words
   * 
   * @param matchVersion
   *          lucene compatibility version
   * @param stopwords
   *          a stopword set
   * @param stemExclutionSet
   *          a stemming exclusion set
   */ FrenchAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Set TypeArgument ? stopwords FormalParameter ReferenceType Set TypeArgument ? stemExclutionSet StatementExpression Assignment This MemberReference matchVersion MemberReference matchVersion = StatementExpression Assignment This MemberReference stoptable MethodInvocation CharArraySet MethodInvocation CharArraySet MemberReference stopwords copy unmodifiableSet = StatementExpression Assignment This MemberReference excltable MethodInvocation CharArraySet MethodInvocation CharArraySet MemberReference stemExclutionSet copy unmodifiableSet = ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words.
   * @deprecated use {@link #FrenchAnalyzer(Version, Set)} instead
   */ FrenchAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType String stopwords  StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MethodInvocation StopFilter MemberReference stopwords makeStopSet ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words.
   * @throws IOException
   * @deprecated use {@link #FrenchAnalyzer(Version, Set)} instead
   */ FrenchAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType File stopwords IOException StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MethodInvocation WordlistLoader MemberReference stopwords getWordSet MethodDeclaration /**
   * Builds an exclusionlist from an array of Strings.
   * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
   */ Modifier public setStemExclusionTable FormalParameter ReferenceType String exclusionlist  StatementExpression Assignment MemberReference excltable MethodInvocation StopFilter MemberReference exclusionlist makeStopSet = StatementExpression MethodInvocation Literal null setPreviousTokenStream MethodDeclaration /**
   * Builds an exclusionlist from a Map.
   * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
   */ Modifier public setStemExclusionTable FormalParameter ReferenceType Map exclusionlist StatementExpression Assignment MemberReference excltable ClassCreator ReferenceType HashSet MethodInvocation exclusionlist keySet = StatementExpression MethodInvocation Literal null setPreviousTokenStream MethodDeclaration /**
   * Builds an exclusionlist from the words contained in the given file.
   * @throws IOException
   * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
   */ Modifier public setStemExclusionTable FormalParameter ReferenceType File exclusionlist IOException StatementExpression Assignment MemberReference excltable ClassCreator ReferenceType HashSet MethodInvocation WordlistLoader MemberReference exclusionlist getWordSet = StatementExpression MethodInvocation Literal null setPreviousTokenStream MethodDeclaration /**
   * Creates a {@link TokenStream} which tokenizes all the text in the provided
   * {@link Reader}.
   *
   * @return A {@link TokenStream} built from a {@link StandardTokenizer} 
   *         filtered with {@link StandardFilter}, {@link StopFilter}, 
   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}
   */ Modifier public final Annotation Override ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator result ClassCreator ReferenceType StandardTokenizer MemberReference matchVersion MemberReference reader StatementExpression Assignment MemberReference result ClassCreator ReferenceType StandardFilter MemberReference result = StatementExpression Assignment MemberReference result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference result MemberReference stoptable = StatementExpression Assignment MemberReference result ClassCreator ReferenceType FrenchStemFilter MemberReference result MemberReference excltable = StatementExpression Assignment MemberReference result ClassCreator ReferenceType LowerCaseFilter MemberReference result = ReturnStatement MemberReference result ClassDeclaration Modifier private SavedStreams FieldDeclaration ReferenceType Tokenizer VariableDeclarator source FieldDeclaration ReferenceType TokenStream VariableDeclarator result MethodDeclaration /**
   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the 
   * text in the provided {@link Reader}.
   *
   * @return A {@link TokenStream} built from a {@link StandardTokenizer} 
   *         filtered with {@link StandardFilter}, {@link StopFilter}, 
   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}
   */ Modifier public Annotation Override ReferenceType TokenStream reusableTokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader IOException LocalVariableDeclaration ReferenceType SavedStreams VariableDeclarator streams Cast ReferenceType SavedStreams MethodInvocation getPreviousTokenStream IfStatement BinaryOperation == MemberReference streams Literal null BlockStatement StatementExpression Assignment MemberReference streams ClassCreator ReferenceType SavedStreams = StatementExpression Assignment MemberReference streams source ClassCreator ReferenceType StandardTokenizer MemberReference matchVersion MemberReference reader = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType StandardFilter MemberReference streams source = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference streams result MemberReference stoptable = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType FrenchStemFilter MemberReference streams result MemberReference excltable = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType LowerCaseFilter MemberReference streams result = StatementExpression MethodInvocation MemberReference streams setPreviousTokenStream BlockStatement StatementExpression MethodInvocation streams.source MemberReference reader reset End ReturnStatement MemberReference streams result ReferenceType Analyzer",1
362,362,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.io.IOException Import java.util.Collection Import java.util.HashSet Import java.util.List Import java.util.Set Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.benchmark.byTask.feeds.QueryMaker Import org.apache.lucene.document.Document Import org.apache.lucene.document.Fieldable Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.TopDocs Import org.apache.lucene.search.MultiTermQuery Import org.apache.lucene.search.TopFieldCollector Import org.apache.lucene.search.ScoreDoc Import org.apache.lucene.search.Weight Import org.apache.lucene.search.IndexSearcher Import org.apache.lucene.search.Query Import org.apache.lucene.search.Sort Import org.apache.lucene.store.Directory ClassDeclaration Modifier public abstract /**
 * Read index (abstract) task.
 * Sub classes implement withSearch(), withWarm(), withTraverse() and withRetrieve()
 * methods to configure the actual action.
 * <p/>
 * <p>Note: All ReadTasks reuse the reader if it is already open.
 * Otherwise a reader is opened at start and closed at the end.
 * <p>
 * The <code>search.num.hits</code> config parameter sets
 * the top number of hits to collect during searching.  If
 * <code>print.hits.field</code> is set, then each hit is
 * printed along with the value of that field.</p>
 *
 * <p>Other side effects: none.
 */ ReadTask FieldDeclaration Modifier private final ReferenceType QueryMaker VariableDeclarator queryMaker ConstructorDeclaration Modifier public ReadTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData IfStatement MethodInvocation withSearch BlockStatement StatementExpression Assignment MemberReference queryMaker MethodInvocation getQueryMaker = BlockStatement StatementExpression Assignment MemberReference queryMaker Literal null = End MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception LocalVariableDeclaration BasicType int VariableDeclarator res Literal 0 LocalVariableDeclaration ReferenceType IndexSearcher VariableDeclarator searcher MethodInvocation MethodInvocation getIndexSearcher getRunData LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator reader LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator closeSearcher IfStatement BinaryOperation == MemberReference searcher Literal null BlockStatement LocalVariableDeclaration ReferenceType Directory VariableDeclarator dir MethodInvocation MethodInvocation getDirectory getRunData StatementExpression Assignment MemberReference reader MethodInvocation IndexReader MemberReference dir Literal true open = StatementExpression Assignment MemberReference searcher ClassCreator ReferenceType IndexSearcher MemberReference reader = StatementExpression Assignment MemberReference closeSearcher Literal true = BlockStatement StatementExpression Assignment MemberReference reader MethodInvocation searcher getIndexReader = StatementExpression Assignment MemberReference closeSearcher Literal false = End IfStatement MethodInvocation withWarm BlockStatement LocalVariableDeclaration ReferenceType Document VariableDeclarator doc Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator m Literal 0 BinaryOperation < MemberReference m MethodInvocation reader maxDoc MemberReference ++ m BlockStatement IfStatement MethodInvocation ! reader MemberReference m isDeleted BlockStatement StatementExpression Assignment MemberReference doc MethodInvocation reader MemberReference m document = StatementExpression Assignment MemberReference res TernaryExpression BinaryOperation == MemberReference doc Literal null Literal 0 Literal 1 += End End End IfStatement MethodInvocation withSearch BlockStatement StatementExpression MemberReference ++ res LocalVariableDeclaration ReferenceType Query VariableDeclarator q MethodInvocation queryMaker makeQuery LocalVariableDeclaration ReferenceType Sort VariableDeclarator sort MethodInvocation getSort LocalVariableDeclaration ReferenceType TopDocs VariableDeclarator hits LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numHits MethodInvocation numHits IfStatement BinaryOperation > MemberReference numHits Literal 0 BlockStatement IfStatement BinaryOperation != MemberReference sort Literal null BlockStatement LocalVariableDeclaration ReferenceType Weight VariableDeclarator w MethodInvocation q MemberReference searcher weight LocalVariableDeclaration ReferenceType TopFieldCollector VariableDeclarator collector MethodInvocation TopFieldCollector MemberReference sort MemberReference numHits Literal true MethodInvocation withScore MethodInvocation withMaxScore MethodInvocation ! w scoresDocsOutOfOrder create StatementExpression MethodInvocation searcher MemberReference w Literal null MemberReference collector search StatementExpression Assignment MemberReference hits MethodInvocation collector topDocs = BlockStatement StatementExpression Assignment MemberReference hits MethodInvocation searcher MemberReference q MemberReference numHits search = End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator printHitsField MethodInvocation MethodInvocation getConfig MethodInvocation Literal ""print.hits.field"" Literal null get getRunData IfStatement BinaryOperation && BinaryOperation != MemberReference printHitsField Literal null BinaryOperation > MethodInvocation printHitsField length Literal 0 BlockStatement IfStatement BinaryOperation instanceof MemberReference q ReferenceType MultiTermQuery BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + Literal ""MultiTermQuery term count = "" Cast ReferenceType MultiTermQuery MemberReference q println End StatementExpression MethodInvocation System.out BinaryOperation + Literal ""totalHits = "" MemberReference hits totalHits println StatementExpression MethodInvocation System.out BinaryOperation + Literal ""maxDoc()  = "" MethodInvocation reader maxDoc println StatementExpression MethodInvocation System.out BinaryOperation + Literal ""numDocs() = "" MethodInvocation reader numDocs println ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference hits.scoreDocs length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator docID MemberReference hits ArraySelector MemberReference i MemberReference doc scoreDocs LocalVariableDeclaration Modifier final ReferenceType Document VariableDeclarator doc MethodInvocation reader MemberReference docID document StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""  "" MemberReference i Literal "": doc="" MemberReference docID Literal "" score="" MemberReference hits ArraySelector MemberReference i MemberReference score scoreDocs Literal "" "" MemberReference printHitsField Literal "" ="" MethodInvocation doc MemberReference printHitsField get println End End IfStatement MethodInvocation withTraverse BlockStatement LocalVariableDeclaration Modifier final ReferenceType ScoreDoc VariableDeclarator scoreDocs MemberReference hits scoreDocs LocalVariableDeclaration BasicType int VariableDeclarator traversalSize MethodInvocation Math MemberReference scoreDocs length MethodInvocation traversalSize min IfStatement BinaryOperation > MemberReference traversalSize Literal 0 BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator retrieve MethodInvocation withRetrieve LocalVariableDeclaration BasicType int VariableDeclarator numHighlight MethodInvocation Math MethodInvocation numToHighlight MemberReference scoreDocs length min LocalVariableDeclaration ReferenceType Analyzer VariableDeclarator analyzer MethodInvocation MethodInvocation getAnalyzer getRunData LocalVariableDeclaration ReferenceType BenchmarkHighlighter VariableDeclarator highlighter Literal null IfStatement BinaryOperation > MemberReference numHighlight Literal 0 BlockStatement StatementExpression Assignment MemberReference highlighter MethodInvocation MemberReference q getBenchmarkHighlighter = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator m Literal 0 BinaryOperation < MemberReference m MemberReference traversalSize MemberReference ++ m BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator id MemberReference ArraySelector MemberReference m MemberReference doc scoreDocs StatementExpression MemberReference ++ res IfStatement MemberReference retrieve BlockStatement LocalVariableDeclaration ReferenceType Document VariableDeclarator document MethodInvocation MemberReference reader MemberReference id retrieveDoc StatementExpression Assignment MemberReference res TernaryExpression BinaryOperation != MemberReference document Literal null Literal 1 Literal 0 += IfStatement BinaryOperation && BinaryOperation > MemberReference numHighlight Literal 0 BinaryOperation < MemberReference m MemberReference numHighlight BlockStatement LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType String VariableDeclarator fieldsToHighlight MethodInvocation MemberReference document getFieldsToHighlight ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator field MemberReference fieldsToHighlight BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation document MemberReference field get StatementExpression Assignment MemberReference res MethodInvocation highlighter MemberReference reader MemberReference id MemberReference field MemberReference document MemberReference analyzer MemberReference text doHighlight += End End End End End End End End IfStatement MemberReference closeSearcher BlockStatement StatementExpression MethodInvocation searcher close BlockStatement StatementExpression MethodInvocation reader decRef End ReturnStatement MemberReference res MethodDeclaration Modifier protected ReferenceType Document retrieveDoc FormalParameter ReferenceType IndexReader ir FormalParameter BasicType int id IOException ReturnStatement MethodInvocation ir MemberReference id document MethodDeclaration /**
   * Return query maker used for this task.
   */ Modifier public abstract ReferenceType QueryMaker getQueryMaker MethodDeclaration /**
   * Return true if search should be performed.
   */ Modifier public abstract BasicType boolean withSearch MethodDeclaration /**
   * Return true if warming should be performed.
   */ Modifier public abstract BasicType boolean withWarm MethodDeclaration /**
   * Return true if, with search, results should be traversed.
   */ Modifier public abstract BasicType boolean withTraverse MethodDeclaration /** Whether scores should be computed (only useful with
   *  field sort) */ Modifier public BasicType boolean withScore ReturnStatement Literal true MethodDeclaration /** Whether maxScores should be computed (only useful with
   *  field sort) */ Modifier public BasicType boolean withMaxScore ReturnStatement Literal true MethodDeclaration /**
   * Specify the number of hits to traverse.  Tasks should override this if they want to restrict the number
   * of hits that are traversed when {@link #withTraverse()} is true. Must be greater than 0.
   * <p/>
   * Read task calculates the traversal as: Math.min(hits.length(), traversalSize())
   *
   * @return Integer.MAX_VALUE
   */ Modifier public BasicType int traversalSize ReturnStatement MemberReference Integer MAX_VALUE FieldDeclaration Modifier final static BasicType int VariableDeclarator DEFAULT_SEARCH_NUM_HITS Literal 10 FieldDeclaration Modifier private BasicType int VariableDeclarator numHits MethodDeclaration Modifier public Annotation Override setup Exception StatementExpression SuperMethodInvocation setup StatementExpression Assignment MemberReference numHits MethodInvocation MethodInvocation getConfig MethodInvocation Literal ""search.num.hits"" MemberReference DEFAULT_SEARCH_NUM_HITS get getRunData = MethodDeclaration /**
   * Specify the number of hits to retrieve.  Tasks should override this if they want to restrict the number
   * of hits that are collected during searching. Must be greater than 0.
   *
   * @return 10 by default, or search.num.hits config if set.
   */ Modifier public BasicType int numHits ReturnStatement MemberReference numHits MethodDeclaration /**
   * Return true if, with search & results traversing, docs should be retrieved.
   */ Modifier public abstract BasicType boolean withRetrieve MethodDeclaration /**
   * Set to the number of documents to highlight.
   *
   * @return The number of the results to highlight.  O means no docs will be highlighted.
   */ Modifier public BasicType int numToHighlight ReturnStatement Literal 0 MethodDeclaration /**
   * Return an appropriate highlighter to be used with
   * highlighting tasks
   */ Modifier protected ReferenceType BenchmarkHighlighter getBenchmarkHighlighter FormalParameter ReferenceType Query q ReturnStatement Literal null MethodDeclaration Modifier protected ReferenceType Sort getSort ReturnStatement Literal null MethodDeclaration /**
   * Define the fields to highlight.  Base implementation returns all fields
   * @param document The Document
   * @return A Collection of Field names (Strings)
   */ Modifier protected ReferenceType Collection TypeArgument ReferenceType String getFieldsToHighlight FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Fieldable VariableDeclarator fieldables MethodInvocation document getFields LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType HashSet TypeArgument ReferenceType String MethodInvocation fieldables size ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Fieldable VariableDeclarator fieldable MemberReference fieldables BlockStatement StatementExpression MethodInvocation result MethodInvocation fieldable name add End ReturnStatement MemberReference result ReferenceType PerfTask",0
783,783,,1
322,322,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.stats Import org.apache.lucene.benchmark.byTask.tasks.PerfTask ClassDeclaration Modifier public /**
 * Statistics for a task run. 
 * <br>The same task can run more than once, but, if that task records statistics, 
 * each run would create its own TaskStats.
 */ TaskStats FieldDeclaration /** task for which data was collected */ Modifier private ReferenceType PerfTask VariableDeclarator task FieldDeclaration /** round in which task run started */ Modifier private BasicType int VariableDeclarator round FieldDeclaration /** task start time */ Modifier private BasicType long VariableDeclarator start FieldDeclaration /** task elapsed time.  elapsed >= 0 indicates run completion! */ Modifier private BasicType long VariableDeclarator elapsed Literal - 1 FieldDeclaration /** max tot mem during task */ Modifier private BasicType long VariableDeclarator maxTotMem FieldDeclaration /** max used mem during task */ Modifier private BasicType long VariableDeclarator maxUsedMem FieldDeclaration /** serial run number of this task run in the perf run */ Modifier private BasicType int VariableDeclarator taskRunNum FieldDeclaration /** number of other tasks that started to run while this task was still running */ Modifier private BasicType int VariableDeclarator numParallelTasks FieldDeclaration /** number of work items done by this task.
   * For indexing that can be number of docs added.
   * For warming that can be number of scanned items, etc. 
   * For repeating tasks, this is a sum over repetitions.
   */ Modifier private BasicType int VariableDeclarator count FieldDeclaration /** Number of similar tasks aggregated into this record.   
   * Used when summing up on few runs/instances of similar tasks.
   */ Modifier private BasicType int VariableDeclarator numRuns Literal 1 ConstructorDeclaration /**
   * Create a run data for a task that is starting now.
   * To be called from Points.
   */ TaskStats FormalParameter ReferenceType PerfTask task FormalParameter BasicType int taskRunNum FormalParameter BasicType int round StatementExpression Assignment This MemberReference task MemberReference task = StatementExpression Assignment This MemberReference taskRunNum MemberReference taskRunNum = StatementExpression Assignment This MemberReference round MemberReference round = StatementExpression Assignment MemberReference maxTotMem MethodInvocation Runtime MethodInvocation totalMemory getRuntime = StatementExpression Assignment MemberReference maxUsedMem BinaryOperation - MemberReference maxTotMem MethodInvocation Runtime MethodInvocation freeMemory getRuntime = StatementExpression Assignment MemberReference start MethodInvocation System currentTimeMillis = MethodDeclaration /**
   * mark the end of a task
   */ markEnd FormalParameter BasicType int numParallelTasks FormalParameter BasicType int count StatementExpression Assignment MemberReference elapsed BinaryOperation - MethodInvocation System currentTimeMillis MemberReference start = LocalVariableDeclaration BasicType long VariableDeclarator totMem MethodInvocation Runtime MethodInvocation totalMemory getRuntime IfStatement BinaryOperation > MemberReference totMem MemberReference maxTotMem BlockStatement StatementExpression Assignment MemberReference maxTotMem MemberReference totMem = End LocalVariableDeclaration BasicType long VariableDeclarator usedMem BinaryOperation - MemberReference totMem MethodInvocation Runtime MethodInvocation freeMemory getRuntime IfStatement BinaryOperation > MemberReference usedMem MemberReference maxUsedMem BlockStatement StatementExpression Assignment MemberReference maxUsedMem MemberReference usedMem = End StatementExpression Assignment This MemberReference numParallelTasks MemberReference numParallelTasks = StatementExpression Assignment This MemberReference count MemberReference count = MethodDeclaration /**
   * @return the taskRunNum.
   */ Modifier public BasicType int getTaskRunNum ReturnStatement MemberReference taskRunNum MethodDeclaration Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator res ClassCreator ReferenceType StringBuffer MethodInvocation task getName StatementExpression MethodInvocation res Literal "" "" append StatementExpression MethodInvocation res MemberReference count append StatementExpression MethodInvocation res Literal "" "" append StatementExpression MethodInvocation res MemberReference elapsed append ReturnStatement MethodInvocation res toString MethodDeclaration /**
   * @return Returns the count.
   */ Modifier public BasicType int getCount ReturnStatement MemberReference count MethodDeclaration /**
   * @return elapsed time.
   */ Modifier public BasicType long getElapsed ReturnStatement MemberReference elapsed MethodDeclaration /**
   * @return Returns the maxTotMem.
   */ Modifier public BasicType long getMaxTotMem ReturnStatement MemberReference maxTotMem MethodDeclaration /**
   * @return Returns the maxUsedMem.
   */ Modifier public BasicType long getMaxUsedMem ReturnStatement MemberReference maxUsedMem MethodDeclaration /**
   * @return Returns the numParallelTasks.
   */ Modifier public BasicType int getNumParallelTasks ReturnStatement MemberReference numParallelTasks MethodDeclaration /**
   * @return Returns the task.
   */ Modifier public ReferenceType PerfTask getTask ReturnStatement MemberReference task MethodDeclaration /**
   * @return Returns the numRuns.
   */ Modifier public BasicType int getNumRuns ReturnStatement MemberReference numRuns MethodDeclaration /**
   * Add data from another stat, for aggregation
   * @param stat2 the added stat data.
   */ Modifier public add FormalParameter ReferenceType TaskStats stat2 StatementExpression Assignment MemberReference numRuns MethodInvocation stat2 getNumRuns += StatementExpression Assignment MemberReference elapsed MethodInvocation stat2 getElapsed += StatementExpression Assignment MemberReference maxTotMem MethodInvocation stat2 getMaxTotMem += StatementExpression Assignment MemberReference maxUsedMem MethodInvocation stat2 getMaxUsedMem += StatementExpression Assignment MemberReference count MethodInvocation stat2 getCount += IfStatement BinaryOperation != MemberReference round MemberReference stat2 round BlockStatement StatementExpression Assignment MemberReference round Literal - 1 = End MethodDeclaration Modifier public Annotation Override ReferenceType Object clone CloneNotSupportedException ReturnStatement SuperMethodInvocation clone MethodDeclaration /**
   * @return the round number.
   */ Modifier public BasicType int getRound ReturnStatement MemberReference round ReferenceType Cloneable",0
626,626,,1
467,467,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.builders Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.nodes.ParametricQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.CompareOperator Import org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttribute Import org.apache.lucene.queryParser.standard.nodes.RangeQueryNode Import org.apache.lucene.search.MultiTermQuery Import org.apache.lucene.search.TermRangeQuery ClassDeclaration Modifier public /**
 * Builds a {@link TermRangeQuery} object from a {@link RangeQueryNode} object.
 */ RangeQueryNodeBuilder ConstructorDeclaration Modifier public RangeQueryNodeBuilder MethodDeclaration Modifier public ReferenceType TermRangeQuery build FormalParameter ReferenceType QueryNode queryNode QueryNodeException LocalVariableDeclaration ReferenceType RangeQueryNode VariableDeclarator rangeNode Cast ReferenceType RangeQueryNode MemberReference queryNode LocalVariableDeclaration ReferenceType ParametricQueryNode VariableDeclarator upper MethodInvocation rangeNode getUpperBound LocalVariableDeclaration ReferenceType ParametricQueryNode VariableDeclarator lower MethodInvocation rangeNode getLowerBound LocalVariableDeclaration BasicType boolean VariableDeclarator lowerInclusive Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator upperInclusive Literal false IfStatement BinaryOperation == MethodInvocation upper getOperator MemberReference CompareOperator LE BlockStatement StatementExpression Assignment MemberReference upperInclusive Literal true = End IfStatement BinaryOperation == MethodInvocation lower getOperator MemberReference CompareOperator GE BlockStatement StatementExpression Assignment MemberReference lowerInclusive Literal true = End LocalVariableDeclaration ReferenceType String VariableDeclarator field MethodInvocation rangeNode MethodInvocation toString getField LocalVariableDeclaration ReferenceType TermRangeQuery VariableDeclarator rangeQuery ClassCreator ReferenceType TermRangeQuery MemberReference field MethodInvocation lower getTextAsString MethodInvocation upper getTextAsString MemberReference lowerInclusive MemberReference upperInclusive MethodInvocation rangeNode getCollator LocalVariableDeclaration ReferenceType MultiTermQuery ReferenceType RewriteMethod VariableDeclarator method Cast ReferenceType MultiTermQuery ReferenceType RewriteMethod MethodInvocation queryNode MemberReference MultiTermRewriteMethodAttribute TAG_ID getTag IfStatement BinaryOperation != MemberReference method Literal null BlockStatement StatementExpression MethodInvocation rangeQuery MemberReference method setRewriteMethod End ReturnStatement MemberReference rangeQuery ReferenceType StandardQueryBuilder",0
550,550,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.compound.hyphenation Import java.io.Serializable ClassDeclaration Modifier public /**
 * This class represents a hyphen. A 'full' hyphen is made of 3 parts: the
 * pre-break text, post-break text and no-break. If no line-break is generated
 * at this position, the no-break text is used, otherwise, pre-break and
 * post-break are used. Typically, pre-break is equal to the hyphen character
 * and the others are empty. However, this general scheme allows support for
 * cases in some languages where words change spelling if they're split across
 * lines, like german's 'backen' which hyphenates 'bak-ken'. BTW, this comes
 * from TeX.
 * 
 * This class has been taken from the Apache FOP project (http://xmlgraphics.apache.org/fop/). They have been slightly modified. 
 */ Hyphen FieldDeclaration Modifier public ReferenceType String VariableDeclarator preBreak FieldDeclaration Modifier public ReferenceType String VariableDeclarator noBreak FieldDeclaration Modifier public ReferenceType String VariableDeclarator postBreak ConstructorDeclaration Hyphen FormalParameter ReferenceType String pre FormalParameter ReferenceType String no FormalParameter ReferenceType String post StatementExpression Assignment MemberReference preBreak MemberReference pre = StatementExpression Assignment MemberReference noBreak MemberReference no = StatementExpression Assignment MemberReference postBreak MemberReference post = ConstructorDeclaration Hyphen FormalParameter ReferenceType String pre StatementExpression Assignment MemberReference preBreak MemberReference pre = StatementExpression Assignment MemberReference noBreak Literal null = StatementExpression Assignment MemberReference postBreak Literal null = MethodDeclaration Modifier public Annotation Override ReferenceType String toString IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == MemberReference noBreak Literal null BinaryOperation == MemberReference postBreak Literal null BinaryOperation != MemberReference preBreak Literal null MethodInvocation preBreak Literal ""-"" equals BlockStatement ReturnStatement Literal ""-"" End LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator res ClassCreator ReferenceType StringBuilder Literal ""{"" StatementExpression MethodInvocation res MemberReference preBreak append StatementExpression MethodInvocation res Literal ""}{"" append StatementExpression MethodInvocation res MemberReference postBreak append StatementExpression MethodInvocation res Literal ""}{"" append StatementExpression MethodInvocation res MemberReference noBreak append StatementExpression MethodInvocation res Literal '}' append ReturnStatement MethodInvocation res toString ReferenceType Serializable",0
547,547,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.fa ClassDeclaration Modifier public /**
 * Normalizer for Persian.
 * <p>
 * Normalization is done in-place for efficiency, operating on a termbuffer.
 * <p>
 * Normalization is defined as:
 * <ul>
 * <li>Normalization of various heh + hamza forms and heh goal to heh.
 * <li>Normalization of farsi yeh and yeh barree to arabic yeh
 * <li>Normalization of persian keheh to arabic kaf
 * </ul>
 * 
 */ PersianNormalizer FieldDeclaration Modifier public final static BasicType char VariableDeclarator YEH Literal 'ي' FieldDeclaration Modifier public final static BasicType char VariableDeclarator FARSI_YEH Literal 'ی' FieldDeclaration Modifier public final static BasicType char VariableDeclarator YEH_BARREE Literal 'ے' FieldDeclaration Modifier public final static BasicType char VariableDeclarator KEHEH Literal 'ک' FieldDeclaration Modifier public final static BasicType char VariableDeclarator KAF Literal 'ك' FieldDeclaration Modifier public final static BasicType char VariableDeclarator HAMZA_ABOVE Literal 'ٔ' FieldDeclaration Modifier public final static BasicType char VariableDeclarator HEH_YEH Literal 'ۀ' FieldDeclaration Modifier public final static BasicType char VariableDeclarator HEH_GOAL Literal 'ہ' FieldDeclaration Modifier public final static BasicType char VariableDeclarator HEH Literal 'ه' MethodDeclaration /**
   * Normalize an input buffer of Persian text
   * 
   * @param s input buffer
   * @param len length of input buffer
   * @return length of input buffer after normalization
   */ Modifier public BasicType int normalize FormalParameter BasicType char s FormalParameter BasicType int len ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference len MemberReference ++ i BlockStatement SwitchStatement MemberReference ArraySelector MemberReference i s SwitchStatementCase FARSI_YEH YEH_BARREE StatementExpression Assignment MemberReference ArraySelector MemberReference i s MemberReference YEH = BreakStatement SwitchStatementCase KEHEH StatementExpression Assignment MemberReference ArraySelector MemberReference i s MemberReference KAF = BreakStatement SwitchStatementCase HEH_YEH HEH_GOAL StatementExpression Assignment MemberReference ArraySelector MemberReference i s MemberReference HEH = BreakStatement SwitchStatementCase HAMZA_ABOVE StatementExpression Assignment MemberReference len MethodInvocation MemberReference s MemberReference i MemberReference len delete = StatementExpression MemberReference -- i BreakStatement SwitchStatementCase BreakStatement End End ReturnStatement MemberReference len MethodDeclaration /**
   * Delete a character in-place
   * 
   * @param s Input Buffer
   * @param pos Position of character to delete
   * @param len length of input buffer
   * @return length of input buffer after deletion
   */ Modifier protected BasicType int delete FormalParameter BasicType char s FormalParameter BasicType int pos FormalParameter BasicType int len IfStatement BinaryOperation < MemberReference pos MemberReference len StatementExpression MethodInvocation System MemberReference s BinaryOperation + MemberReference pos Literal 1 MemberReference s MemberReference pos BinaryOperation - BinaryOperation - MemberReference len MemberReference pos Literal 1 arraycopy End ReturnStatement BinaryOperation - MemberReference len Literal 1",0
905,905,,0
304,304,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.util.LinkedHashMap Import java.util.List Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.benchmark.byTask.stats.Report Import org.apache.lucene.benchmark.byTask.stats.TaskStats ClassDeclaration Modifier public /**
 * Report all statistics grouped/aggregated by name and round.
 * <br>Other side effects: None.
 */ RepSumByNameRoundTask ConstructorDeclaration Modifier public RepSumByNameRoundTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception LocalVariableDeclaration ReferenceType Report VariableDeclarator rp MethodInvocation MethodInvocation MethodInvocation getPoints MethodInvocation taskStats getRunData reportSumByNameRound StatementExpression MethodInvocation System.out println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""------------> Report Sum By (any) Name and Round ("" MethodInvocation rp getSize Literal "" about "" MethodInvocation rp getReported Literal "" out of "" MethodInvocation rp getOutOf Literal "")"" println StatementExpression MethodInvocation System.out MethodInvocation rp getText println StatementExpression MethodInvocation System.out println ReturnStatement Literal 0 MethodDeclaration /**
   * Report statistics as a string, aggregate for tasks named the same, and from the same round.
   * @return the report
   */ Modifier protected ReferenceType Report reportSumByNameRound FormalParameter ReferenceType List TypeArgument ReferenceType TaskStats taskStats LocalVariableDeclaration ReferenceType LinkedHashMap TypeArgument ReferenceType String TypeArgument ReferenceType TaskStats VariableDeclarator p2 ClassCreator ReferenceType LinkedHashMap TypeArgument ReferenceType String TypeArgument ReferenceType TaskStats LocalVariableDeclaration BasicType int VariableDeclarator reported Literal 0 ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType TaskStats VariableDeclarator stat1 MemberReference taskStats BlockStatement IfStatement BinaryOperation >= MethodInvocation stat1 getElapsed Literal 0 BlockStatement StatementExpression MemberReference ++ reported LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation stat1 MethodInvocation getName getTask LocalVariableDeclaration ReferenceType String VariableDeclarator rname BinaryOperation + BinaryOperation + MethodInvocation stat1 getRound Literal ""."" MemberReference name LocalVariableDeclaration ReferenceType TaskStats VariableDeclarator stat2 MethodInvocation p2 MemberReference rname get IfStatement BinaryOperation == MemberReference stat2 Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference stat2 Cast ReferenceType TaskStats MethodInvocation stat1 clone = CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e StatementExpression MethodInvocation p2 MemberReference rname MemberReference stat2 put BlockStatement StatementExpression MethodInvocation stat2 MemberReference stat1 add End End End ReturnStatement MethodInvocation MemberReference reported MemberReference p2 MethodInvocation taskStats size genPartialReport ReferenceType ReportTask",0
743,743,,0
874,874,,1
714,714,,1
857,857,,1
892,892,,0
542,542,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier public /** This is a {@link LogMergePolicy} that measures size of a
 *  segment as the number of documents (not taking deletions
 *  into account). */ LogDocMergePolicy FieldDeclaration /** Default minimum segment size.  @see setMinMergeDocs */ Modifier public final static BasicType int VariableDeclarator DEFAULT_MIN_MERGE_DOCS Literal 1000 ConstructorDeclaration Modifier public LogDocMergePolicy FormalParameter ReferenceType IndexWriter writer StatementExpression SuperConstructorInvocation MemberReference writer StatementExpression Assignment MemberReference minMergeSize MemberReference DEFAULT_MIN_MERGE_DOCS = StatementExpression Assignment MemberReference maxMergeSize MemberReference Long MAX_VALUE = MethodDeclaration Modifier protected Annotation Override BasicType long size FormalParameter ReferenceType SegmentInfo info IOException ReturnStatement MethodInvocation MemberReference info sizeDocs MethodDeclaration /** Sets the minimum size for the lowest level segments.
   * Any segments below this size are considered to be on
   * the same level (even if they vary drastically in size)
   * and will be merged whenever there are mergeFactor of
   * them.  This effectively truncates the ""long tail"" of
   * small segments that would otherwise be created into a
   * single level.  If you set this too large, it could
   * greatly increase the merging cost during indexing (if
   * you flush many small segments). */ Modifier public setMinMergeDocs FormalParameter BasicType int minMergeDocs StatementExpression Assignment MemberReference minMergeSize MemberReference minMergeDocs = MethodDeclaration /** Get the minimum size for a segment to remain
   *  un-merged.
   *  @see #setMinMergeDocs **/ Modifier public BasicType int getMinMergeDocs ReturnStatement Cast BasicType int MemberReference minMergeSize ReferenceType LogMergePolicy",0
759,759,,0
867,867,,1
378,378,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.util.ArrayUtil Import org.apache.lucene.search.Similarity ClassDeclaration Modifier final /** Taps into DocInverter, as an InvertedDocEndConsumer,
 *  which is called at the end of inverting each field.  We
 *  just look at the length for the field (docState.length)
 *  and record the norm. */ NormsWriterPerField FieldDeclaration Modifier final ReferenceType NormsWriterPerThread VariableDeclarator perThread FieldDeclaration Modifier final ReferenceType FieldInfo VariableDeclarator fieldInfo FieldDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocState VariableDeclarator docState FieldDeclaration BasicType int VariableDeclarator docIDs ArrayCreator BasicType int Literal 1 FieldDeclaration BasicType byte VariableDeclarator norms ArrayCreator BasicType byte Literal 1 FieldDeclaration BasicType int VariableDeclarator upto FieldDeclaration Modifier final ReferenceType FieldInvertState VariableDeclarator fieldState MethodDeclaration Modifier public reset StatementExpression Assignment MemberReference docIDs MethodInvocation ArrayUtil MemberReference docIDs MemberReference upto shrink = StatementExpression Assignment MemberReference norms MethodInvocation ArrayUtil MemberReference norms MemberReference upto shrink = StatementExpression Assignment MemberReference upto Literal 0 = ConstructorDeclaration Modifier public NormsWriterPerField FormalParameter Modifier final ReferenceType DocInverterPerField docInverterPerField FormalParameter Modifier final ReferenceType NormsWriterPerThread perThread FormalParameter Modifier final ReferenceType FieldInfo fieldInfo StatementExpression Assignment This MemberReference perThread MemberReference perThread = StatementExpression Assignment This MemberReference fieldInfo MemberReference fieldInfo = StatementExpression Assignment MemberReference docState MemberReference perThread docState = StatementExpression Assignment MemberReference fieldState MemberReference docInverterPerField fieldState = MethodDeclaration Annotation Override abort StatementExpression Assignment MemberReference upto Literal 0 = MethodDeclaration Modifier public BasicType int compareTo FormalParameter ReferenceType NormsWriterPerField other ReturnStatement MethodInvocation fieldInfo.name MemberReference other.fieldInfo name compareTo MethodDeclaration Annotation Override finish AssertStatement BinaryOperation == MemberReference docIDs length MemberReference norms length IfStatement BinaryOperation && MemberReference fieldInfo isIndexed MemberReference ! fieldInfo omitNorms BlockStatement IfStatement BinaryOperation <= MemberReference docIDs length MemberReference upto BlockStatement AssertStatement BinaryOperation == MemberReference docIDs length MemberReference upto StatementExpression Assignment MemberReference docIDs MethodInvocation ArrayUtil MemberReference docIDs BinaryOperation + Literal 1 MemberReference upto grow = StatementExpression Assignment MemberReference norms MethodInvocation ArrayUtil MemberReference norms BinaryOperation + Literal 1 MemberReference upto grow = End LocalVariableDeclaration Modifier final BasicType float VariableDeclarator norm MethodInvocation docState.similarity MemberReference fieldInfo name MemberReference fieldState computeNorm StatementExpression Assignment MemberReference ArraySelector MemberReference upto norms MethodInvocation Similarity MemberReference norm encodeNorm = StatementExpression Assignment MemberReference ArraySelector MemberReference upto docIDs MemberReference docState docID = StatementExpression MemberReference ++ upto End ReferenceType InvertedDocEndConsumerPerField ReferenceType Comparable TypeArgument ReferenceType NormsWriterPerField",0
154,154,"CompilationUnit PackageDeclaration org.apache.lucene.store.db Import org.apache.lucene.store.Lock ClassDeclaration Modifier public /**
 * This implementation of {@link org.apache.lucene.store.Lock Lock} is
 * trivial as {@link DbDirectory} operations are managed by the Berkeley DB
 * locking system.
 *
 */ DbLock FieldDeclaration BasicType boolean VariableDeclarator isLocked Literal false ConstructorDeclaration Modifier public DbLock MethodDeclaration Modifier public Annotation Override BasicType boolean obtain ReturnStatement Assignment MemberReference isLocked Literal true = MethodDeclaration Modifier public Annotation Override release StatementExpression Assignment MemberReference isLocked Literal false = MethodDeclaration Modifier public Annotation Override BasicType boolean isLocked ReturnStatement MemberReference isLocked ReferenceType Lock",0
938,938,,0
716,716,,0
56,56,"CompilationUnit PackageDeclaration org.apache.lucene.search Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.util.ToStringUtils Import java.io.IOException ClassDeclaration Modifier public /** Implements the wildcard search query. Supported wildcards are <code>*</code>, which
 * matches any character sequence (including the empty one), and <code>?</code>,
 * which matches any single character. Note this query can be slow, as it
 * needs to iterate over many terms. In order to prevent extremely slow WildcardQueries,
 * a Wildcard term should not start with one of the wildcards <code>*</code> or
 * <code>?</code>.
 * 
 * <p>This query uses the {@link
 * MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}
 * rewrite method.
 *
 * @see WildcardTermEnum */ WildcardQuery FieldDeclaration Modifier private BasicType boolean VariableDeclarator termContainsWildcard FieldDeclaration Modifier private BasicType boolean VariableDeclarator termIsPrefix FieldDeclaration Modifier protected ReferenceType Term VariableDeclarator term ConstructorDeclaration Modifier public WildcardQuery FormalParameter ReferenceType Term term StatementExpression Assignment This MemberReference term MemberReference term = LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation term text StatementExpression Assignment This MemberReference termContainsWildcard BinaryOperation || BinaryOperation != MethodInvocation text Literal '*' indexOf Literal - 1 BinaryOperation != MethodInvocation text Literal '?' indexOf Literal - 1 = StatementExpression Assignment This MemberReference termIsPrefix BinaryOperation && BinaryOperation && MemberReference termContainsWildcard BinaryOperation == MethodInvocation text Literal '?' indexOf Literal - 1 BinaryOperation == MethodInvocation text Literal '*' indexOf BinaryOperation - MethodInvocation text length Literal 1 = MethodDeclaration Modifier protected Annotation Override ReferenceType FilteredTermEnum getEnum FormalParameter ReferenceType IndexReader reader IOException IfStatement MemberReference termContainsWildcard ReturnStatement ClassCreator ReferenceType WildcardTermEnum MemberReference reader MethodInvocation getTerm ReturnStatement ClassCreator ReferenceType SingleTermEnum MemberReference reader MethodInvocation getTerm End MethodDeclaration /**
   * Returns the pattern term.
   */ Modifier public ReferenceType Term getTerm ReturnStatement MemberReference term MethodDeclaration Modifier public Annotation Override ReferenceType Query rewrite FormalParameter ReferenceType IndexReader reader IOException IfStatement MemberReference termIsPrefix BlockStatement LocalVariableDeclaration ReferenceType MultiTermQuery VariableDeclarator rewritten ClassCreator ReferenceType PrefixQuery MethodInvocation term MethodInvocation term MethodInvocation Literal 0 MethodInvocation term MethodInvocation Literal '*' indexOf text substring text createTerm StatementExpression MethodInvocation rewritten MethodInvocation getBoost setBoost StatementExpression MethodInvocation rewritten MethodInvocation getRewriteMethod setRewriteMethod ReturnStatement MemberReference rewritten BlockStatement ReturnStatement SuperMethodInvocation MemberReference reader rewrite End MethodDeclaration /** Prints a user-readable version of this query. */ Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String field LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder IfStatement MethodInvocation ! term MethodInvocation MemberReference field equals field BlockStatement StatementExpression MethodInvocation buffer MethodInvocation term field append StatementExpression MethodInvocation buffer Literal "":"" append End StatementExpression MethodInvocation buffer MethodInvocation term text append StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result SuperMethodInvocation hashCode StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference term Literal null Literal 0 MethodInvocation term hashCode = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement SuperMethodInvocation ! MemberReference obj equals ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType WildcardQuery VariableDeclarator other Cast ReferenceType WildcardQuery MemberReference obj IfStatement BinaryOperation == MemberReference term Literal null BlockStatement IfStatement BinaryOperation != MemberReference other term Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! term MemberReference other term equals ReturnStatement Literal false End End ReturnStatement Literal true ReferenceType MultiTermQuery",0
427,427,"CompilationUnit PackageDeclaration org.apache.lucene.store.instantiated Import java.io.IOException Import java.util.Arrays Import java.util.Collection Import java.util.HashMap Import java.util.HashSet Import java.util.Iterator Import java.util.LinkedList Import java.util.List Import java.util.Map Import java.util.Set Import org.apache.lucene.document.Document Import org.apache.lucene.document.FieldSelector Import org.apache.lucene.index.CorruptIndexException Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermDocs Import org.apache.lucene.index.TermEnum Import org.apache.lucene.index.TermFreqVector Import org.apache.lucene.index.TermPositions Import org.apache.lucene.index.TermVectorMapper Import org.apache.lucene.store.Directory ClassDeclaration Modifier public /**
 * An InstantiatedIndexReader is not a snapshot in time, it is completely in
 * sync with the latest commit to the store!
 * <p>
 * Consider using InstantiatedIndex as if it was immutable.
 */ InstantiatedIndexReader FieldDeclaration Modifier private final ReferenceType InstantiatedIndex VariableDeclarator index ConstructorDeclaration Modifier public InstantiatedIndexReader FormalParameter ReferenceType InstantiatedIndex index StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference index MemberReference index = MethodDeclaration /**
   * @return always true.
   */ Modifier public Annotation Override BasicType boolean isOptimized ReturnStatement Literal true MethodDeclaration /**
   * An InstantiatedIndexReader is not a snapshot in time, it is completely in
   * sync with the latest commit to the store!
   * 
   * @return output from {@link InstantiatedIndex#getVersion()} in associated instantiated index.
   */ Modifier public Annotation Override BasicType long getVersion ReturnStatement MethodInvocation index getVersion MethodDeclaration Modifier public Annotation Override ReferenceType Directory directory ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
   * An InstantiatedIndexReader is always current!
   * 
   * Check whether this IndexReader is still using the current (i.e., most
   * recently committed) version of the index. If a writer has committed any
   * changes to the index since this reader was opened, this will return
   * <code>false</code>, in which case you must open a new IndexReader in
   * order to see the changes. See the description of the <a
   * href=""IndexWriter.html#autoCommit""><code>autoCommit</code></a> flag
   * which controls when the {@link IndexWriter} actually commits changes to the
   * index.
   * 
   * @return always true
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   * @throws UnsupportedOperationException unless overridden in subclass
   */ Modifier public Annotation Override BasicType boolean isCurrent IOException ReturnStatement Literal true MethodDeclaration Modifier public ReferenceType InstantiatedIndex getIndex ReturnStatement MemberReference index FieldDeclaration Modifier private ReferenceType Set TypeArgument ReferenceType InstantiatedDocument VariableDeclarator deletedDocuments ClassCreator ReferenceType HashSet TypeArgument ReferenceType InstantiatedDocument FieldDeclaration Modifier private ReferenceType Set TypeArgument ReferenceType Integer VariableDeclarator deletedDocumentNumbers ClassCreator ReferenceType HashSet TypeArgument ReferenceType Integer FieldDeclaration Modifier private ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType List TypeArgument ReferenceType NormUpdate VariableDeclarator updatedNormsByFieldNameAndDocumentNumber Literal null ClassDeclaration Modifier private NormUpdate FieldDeclaration Modifier private BasicType int VariableDeclarator doc FieldDeclaration Modifier private BasicType byte VariableDeclarator value ConstructorDeclaration Modifier public NormUpdate FormalParameter BasicType int doc FormalParameter BasicType byte value StatementExpression Assignment This MemberReference doc MemberReference doc = StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration Modifier public Annotation Override BasicType int numDocs ReturnStatement BinaryOperation - BinaryOperation - MethodInvocation MethodInvocation getDocumentsByNumber MemberReference length getIndex MethodInvocation index MethodInvocation size getDeletedDocuments MethodInvocation deletedDocuments size MethodDeclaration Modifier public Annotation Override BasicType int maxDoc ReturnStatement MethodInvocation MethodInvocation getDocumentsByNumber MemberReference length getIndex MethodDeclaration Modifier public Annotation Override BasicType boolean isDeleted FormalParameter BasicType int n ReturnStatement BinaryOperation || MethodInvocation MethodInvocation getDeletedDocuments MethodInvocation MemberReference n contains getIndex MethodInvocation deletedDocumentNumbers MemberReference n contains MethodDeclaration Modifier public Annotation Override BasicType boolean hasDeletions ReturnStatement BinaryOperation || BinaryOperation > MethodInvocation MethodInvocation getDeletedDocuments MethodInvocation size getIndex Literal 0 BinaryOperation > MethodInvocation deletedDocumentNumbers size Literal 0 MethodDeclaration Modifier protected Annotation Override doDelete FormalParameter BasicType int docNum IOException IfStatement MethodInvocation ! MethodInvocation getDeletedDocuments MethodInvocation MemberReference docNum contains getIndex BlockStatement IfStatement MethodInvocation deletedDocumentNumbers MemberReference docNum add BlockStatement StatementExpression MethodInvocation deletedDocuments MethodInvocation MethodInvocation getDocumentsByNumber ArraySelector MemberReference docNum getIndex add End End MethodDeclaration Modifier protected Annotation Override doUndeleteAll IOException StatementExpression MethodInvocation deletedDocumentNumbers clear StatementExpression MethodInvocation deletedDocuments clear MethodDeclaration Modifier protected Annotation Override doCommit FormalParameter ReferenceType Map commitUserData IOException LocalVariableDeclaration BasicType boolean VariableDeclarator updated Literal false IfStatement BinaryOperation != MemberReference updatedNormsByFieldNameAndDocumentNumber Literal null BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType String TypeArgument ReferenceType List TypeArgument ReferenceType NormUpdate VariableDeclarator e MethodInvocation updatedNormsByFieldNameAndDocumentNumber entrySet BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator norms MethodInvocation MethodInvocation getNormsByFieldNameAndDocumentNumber MethodInvocation MethodInvocation e getKey get getIndex ForStatement EnhancedForControl VariableDeclaration ReferenceType NormUpdate VariableDeclarator normUpdate MethodInvocation e getValue BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference normUpdate doc norms MemberReference normUpdate value = End End StatementExpression Assignment MemberReference updatedNormsByFieldNameAndDocumentNumber Literal null = StatementExpression Assignment MemberReference updated Literal true = End IfStatement BinaryOperation > MethodInvocation deletedDocumentNumbers size Literal 0 BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Integer VariableDeclarator doc MemberReference deletedDocumentNumbers BlockStatement StatementExpression MethodInvocation MethodInvocation getDeletedDocuments MethodInvocation MemberReference doc add getIndex End StatementExpression MethodInvocation deletedDocumentNumbers clear StatementExpression MethodInvocation deletedDocuments clear StatementExpression Assignment MemberReference updated Literal true = End MethodDeclaration Modifier protected Annotation Override doClose IOException MethodDeclaration Modifier public Annotation Override ReferenceType Collection getFieldNames FormalParameter ReferenceType FieldOption fieldOption LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator fieldSet ClassCreator ReferenceType HashSet TypeArgument ReferenceType String ForStatement EnhancedForControl VariableDeclaration ReferenceType FieldSetting VariableDeclarator fi MethodInvocation index MethodInvocation values getFieldSettings BlockStatement IfStatement BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption ALL BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && MemberReference ! fi indexed BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption UNINDEXED BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && MemberReference fi storePayloads BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption STORES_PAYLOADS BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && MemberReference fi indexed BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption INDEXED BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && BinaryOperation && MemberReference fi indexed BinaryOperation == MemberReference fi storeTermVector Literal false BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption INDEXED_NO_TERMVECTOR BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == MemberReference fi storeTermVector Literal true BinaryOperation == MemberReference fi storePositionWithTermVector Literal false BinaryOperation == MemberReference fi storeOffsetWithTermVector Literal false BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption TERMVECTOR BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && BinaryOperation && MemberReference fi indexed MemberReference fi storeTermVector BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption INDEXED_WITH_TERMVECTOR BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && BinaryOperation && MemberReference fi storePositionWithTermVector BinaryOperation == MemberReference fi storeOffsetWithTermVector Literal false BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption TERMVECTOR_WITH_POSITION BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && BinaryOperation && MemberReference fi storeOffsetWithTermVector BinaryOperation == MemberReference fi storePositionWithTermVector Literal false BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption TERMVECTOR_WITH_OFFSET BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add IfStatement BinaryOperation && BinaryOperation && MemberReference fi storeOffsetWithTermVector MemberReference fi storePositionWithTermVector BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption TERMVECTOR_WITH_POSITION_OFFSET BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi fieldName add End End End End End End End End End End End ReturnStatement MemberReference fieldSet MethodDeclaration /**
   * Return the {@link org.apache.lucene.document.Document} at the <code>n</code><sup>th</sup>
   * position.
     <p>
   * <b>Warning!</b>
   * The resulting document is the actual stored document instance
   * and not a deserialized clone as retuned by an IndexReader
   * over a {@link org.apache.lucene.store.Directory}.
   * I.e., if you need to touch the document, clone it first!
   * <p>
   * This can also be seen as a feature for live changes of stored values,
   * but be careful! Adding a field with an name unknown to the index
   * or to a field with previously no stored values will make
   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}
   * out of sync, causing problems for instance when merging the
   * instantiated index to another index.
     <p>
   * This implementation ignores the field selector! All stored fields are always returned!
   * <p>
   *
   * @param n document number
   * @param fieldSelector ignored
   * @return The stored fields of the {@link org.apache.lucene.document.Document} at the nth position
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   * 
   * @see org.apache.lucene.document.Fieldable
   * @see org.apache.lucene.document.FieldSelector
   * @see org.apache.lucene.document.SetBasedFieldSelector
   * @see org.apache.lucene.document.LoadFirstFieldSelector
   */ Modifier public Annotation Override ReferenceType Document document FormalParameter BasicType int n FormalParameter ReferenceType FieldSelector fieldSelector CorruptIndexException IOException ReturnStatement MethodInvocation MemberReference n document MethodDeclaration /**
   * Returns the stored fields of the <code>n</code><sup>th</sup>
   * <code>Document</code> in this index.
   * <p>
   * <b>Warning!</b>
   * The resulting document is the actual stored document instance
   * and not a deserialized clone as retuned by an IndexReader
   * over a {@link org.apache.lucene.store.Directory}.
   * I.e., if you need to touch the document, clone it first!
   * <p>
   * This can also be seen as a feature for live changes of stored values,
   * but be careful! Adding a field with an name unknown to the index
   * or to a field with previously no stored values will make
   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}
   * out of sync, causing problems for instance when merging the
   * instantiated index to another index.
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public Annotation Override ReferenceType Document document FormalParameter BasicType int n IOException ReturnStatement TernaryExpression MethodInvocation MemberReference n isDeleted Literal null MethodInvocation MethodInvocation getDocumentsByNumber ArraySelector MemberReference n MethodInvocation getDocument getIndex MethodDeclaration /**
   * never ever touch these values. it is the true values, unless norms have
   * been touched.
   */ Modifier public Annotation Override BasicType byte norms FormalParameter ReferenceType String field IOException LocalVariableDeclaration BasicType byte VariableDeclarator norms MethodInvocation MethodInvocation getNormsByFieldNameAndDocumentNumber MethodInvocation MemberReference field get getIndex IfStatement BinaryOperation == MemberReference norms Literal null BlockStatement ReturnStatement ArrayCreator BasicType byte Literal 0 End IfStatement BinaryOperation != MemberReference updatedNormsByFieldNameAndDocumentNumber Literal null BlockStatement StatementExpression Assignment MemberReference norms MethodInvocation norms clone = LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType NormUpdate VariableDeclarator updated MethodInvocation updatedNormsByFieldNameAndDocumentNumber MemberReference field get IfStatement BinaryOperation != MemberReference updated Literal null BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType NormUpdate VariableDeclarator normUpdate MemberReference updated BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference normUpdate doc norms MemberReference normUpdate value = End End End ReturnStatement MemberReference norms MethodDeclaration Modifier public Annotation Override norms FormalParameter ReferenceType String field FormalParameter BasicType byte bytes FormalParameter BasicType int offset IOException LocalVariableDeclaration BasicType byte VariableDeclarator norms MethodInvocation MethodInvocation getNormsByFieldNameAndDocumentNumber MethodInvocation MemberReference field get getIndex IfStatement BinaryOperation == MemberReference norms Literal null BlockStatement ReturnStatement End StatementExpression MethodInvocation System MemberReference norms Literal 0 MemberReference bytes MemberReference offset MemberReference norms length arraycopy MethodDeclaration Modifier protected Annotation Override doSetNorm FormalParameter BasicType int doc FormalParameter ReferenceType String field FormalParameter BasicType byte value IOException IfStatement BinaryOperation == MemberReference updatedNormsByFieldNameAndDocumentNumber Literal null BlockStatement StatementExpression Assignment MemberReference updatedNormsByFieldNameAndDocumentNumber ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType List TypeArgument ReferenceType NormUpdate MethodInvocation MethodInvocation getNormsByFieldNameAndDocumentNumber MethodInvocation size getIndex = End LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType NormUpdate VariableDeclarator list MethodInvocation updatedNormsByFieldNameAndDocumentNumber MemberReference field get IfStatement BinaryOperation == MemberReference list Literal null BlockStatement StatementExpression Assignment MemberReference list ClassCreator ReferenceType LinkedList TypeArgument ReferenceType NormUpdate = StatementExpression MethodInvocation updatedNormsByFieldNameAndDocumentNumber MemberReference field MemberReference list put End StatementExpression MethodInvocation list ClassCreator ReferenceType NormUpdate MemberReference doc MemberReference value add MethodDeclaration Modifier public Annotation Override BasicType int docFreq FormalParameter ReferenceType Term t IOException LocalVariableDeclaration ReferenceType InstantiatedTerm VariableDeclarator term MethodInvocation MethodInvocation MemberReference t findTerm getIndex IfStatement BinaryOperation == MemberReference term Literal null BlockStatement ReturnStatement Literal 0 BlockStatement ReturnStatement MethodInvocation term MemberReference length getAssociatedDocuments End MethodDeclaration Modifier public Annotation Override ReferenceType TermEnum terms IOException ReturnStatement ClassCreator ReferenceType InstantiatedTermEnum This MethodDeclaration Modifier public Annotation Override ReferenceType TermEnum terms FormalParameter ReferenceType Term t IOException LocalVariableDeclaration ReferenceType InstantiatedTerm VariableDeclarator it MethodInvocation MethodInvocation MemberReference t findTerm getIndex IfStatement BinaryOperation != MemberReference it Literal null BlockStatement ReturnStatement ClassCreator ReferenceType InstantiatedTermEnum This MethodInvocation it getTermIndex BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator startPos MethodInvocation Arrays MethodInvocation index getOrderedTerms MemberReference t MemberReference InstantiatedTerm termComparator binarySearch IfStatement BinaryOperation < MemberReference startPos Literal 0 BlockStatement StatementExpression Assignment MemberReference startPos BinaryOperation - Literal - 1 MemberReference startPos = End ReturnStatement ClassCreator ReferenceType InstantiatedTermEnum This MemberReference startPos End MethodDeclaration Modifier public Annotation Override ReferenceType TermDocs termDocs IOException ReturnStatement ClassCreator ReferenceType InstantiatedTermDocs This MethodDeclaration Modifier public Annotation Override ReferenceType TermPositions termPositions IOException ReturnStatement ClassCreator ReferenceType InstantiatedTermPositions This MethodDeclaration Modifier public Annotation Override ReferenceType TermFreqVector getTermFreqVectors FormalParameter BasicType int docNumber IOException LocalVariableDeclaration ReferenceType InstantiatedDocument VariableDeclarator doc MethodInvocation MethodInvocation getDocumentsByNumber ArraySelector MemberReference docNumber getIndex IfStatement BinaryOperation == MethodInvocation doc getVectorSpace Literal null BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator ret ArrayCreator ReferenceType TermFreqVector MethodInvocation doc MethodInvocation size getVectorSpace LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType String VariableDeclarator it MethodInvocation doc MethodInvocation keySet MethodInvocation iterator getVectorSpace ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ret length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i ret ClassCreator ReferenceType InstantiatedTermPositionVector MethodInvocation MethodInvocation getDocumentsByNumber ArraySelector MemberReference docNumber getIndex MethodInvocation it next = End ReturnStatement MemberReference ret MethodDeclaration Modifier public Annotation Override ReferenceType TermFreqVector getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType String field IOException LocalVariableDeclaration ReferenceType InstantiatedDocument VariableDeclarator doc MethodInvocation MethodInvocation getDocumentsByNumber ArraySelector MemberReference docNumber getIndex IfStatement BinaryOperation || BinaryOperation == MethodInvocation doc getVectorSpace Literal null BinaryOperation == MethodInvocation doc MethodInvocation MemberReference field get getVectorSpace Literal null BlockStatement ReturnStatement Literal null BlockStatement ReturnStatement ClassCreator ReferenceType InstantiatedTermPositionVector MemberReference doc MemberReference field End MethodDeclaration Modifier public Annotation Override getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType String field FormalParameter ReferenceType TermVectorMapper mapper IOException LocalVariableDeclaration ReferenceType InstantiatedDocument VariableDeclarator doc MethodInvocation MethodInvocation getDocumentsByNumber ArraySelector MemberReference docNumber getIndex IfStatement BinaryOperation && BinaryOperation != MethodInvocation doc getVectorSpace Literal null BinaryOperation == MethodInvocation doc MethodInvocation MemberReference field get getVectorSpace Literal null BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType InstantiatedTermDocumentInformation VariableDeclarator tv MethodInvocation doc MethodInvocation MemberReference field get getVectorSpace StatementExpression MethodInvocation mapper MemberReference field MethodInvocation tv size Literal true Literal true setExpectations ForStatement EnhancedForControl VariableDeclaration ReferenceType InstantiatedTermDocumentInformation VariableDeclarator tdi MemberReference tv BlockStatement StatementExpression MethodInvocation mapper MethodInvocation tdi MethodInvocation text getTerm MethodInvocation tdi MemberReference length getTermPositions MethodInvocation tdi getTermOffsets MethodInvocation tdi getTermPositions map End End MethodDeclaration Modifier public Annotation Override getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType TermVectorMapper mapper IOException LocalVariableDeclaration ReferenceType InstantiatedDocument VariableDeclarator doc MethodInvocation MethodInvocation getDocumentsByNumber ArraySelector MemberReference docNumber getIndex ForStatement EnhancedForControl VariableDeclaration ReferenceType Map ReferenceType Entry TypeArgument ReferenceType String TypeArgument ReferenceType List TypeArgument ReferenceType InstantiatedTermDocumentInformation VariableDeclarator e MethodInvocation doc MethodInvocation entrySet getVectorSpace BlockStatement StatementExpression MethodInvocation mapper MethodInvocation e getKey MethodInvocation e MethodInvocation size getValue Literal true Literal true setExpectations ForStatement EnhancedForControl VariableDeclaration ReferenceType InstantiatedTermDocumentInformation VariableDeclarator tdi MethodInvocation e getValue BlockStatement StatementExpression MethodInvocation mapper MethodInvocation tdi MethodInvocation text getTerm MethodInvocation tdi MemberReference length getTermPositions MethodInvocation tdi getTermOffsets MethodInvocation tdi getTermPositions map End End ReferenceType IndexReader",0
125,125,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes Import java.util.ArrayList Import java.util.Hashtable Import java.util.List Import java.util.Map Import java.util.ResourceBundle Import org.apache.lucene.messages.NLS Import org.apache.lucene.queryParser.core.messages.QueryParserMessages ClassDeclaration Modifier public abstract /**
 * A {@link QueryNodeImpl} is the default implementation of the interface
 * {@link QueryNode}
 */ QueryNodeImpl FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 5569870883474845989L FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PLAINTEXT_FIELD_NAME Literal ""_plain"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator isLeaf Literal true FieldDeclaration Modifier private ReferenceType Hashtable TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Object VariableDeclarator tags ClassCreator ReferenceType Hashtable TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Object FieldDeclaration Modifier private ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator clauses Literal null MethodDeclaration Modifier protected allocate IfStatement BinaryOperation == This MemberReference clauses Literal null BlockStatement StatementExpression Assignment This MemberReference clauses ClassCreator ReferenceType ArrayList TypeArgument ReferenceType QueryNode = BlockStatement StatementExpression This MemberReference clauses MethodInvocation clear End MethodDeclaration Modifier public final add FormalParameter ReferenceType QueryNode child IfStatement BinaryOperation || BinaryOperation || MethodInvocation isLeaf BinaryOperation == This MemberReference clauses Literal null BinaryOperation == MemberReference child Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException MethodInvocation NLS MemberReference QueryParserMessages NODE_ACTION_NOT_SUPPORTED getLocalizedMessage End StatementExpression This MemberReference clauses MethodInvocation MemberReference child add StatementExpression Cast ReferenceType QueryNodeImpl MemberReference child MethodDeclaration Modifier public final add FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children IfStatement BinaryOperation || MethodInvocation isLeaf BinaryOperation == This MemberReference clauses Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException MethodInvocation NLS MemberReference QueryParserMessages NODE_ACTION_NOT_SUPPORTED getLocalizedMessage End ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNode VariableDeclarator child MethodInvocation getChildren BlockStatement StatementExpression MethodInvocation MemberReference child add End MethodDeclaration Modifier public BasicType boolean isLeaf ReturnStatement This MemberReference isLeaf MethodDeclaration Modifier public final set FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children IfStatement BinaryOperation || MethodInvocation isLeaf BinaryOperation == This MemberReference clauses Literal null BlockStatement LocalVariableDeclaration ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation ResourceBundle Literal ""org.apache.lucene.queryParser.messages.QueryParserMessages"" getBundle LocalVariableDeclaration ReferenceType String VariableDeclarator message MethodInvocation bundle MethodInvocation toString Literal ""Q0008E.NODE_ACTION_NOT_SUPPORTED"" getObject ThrowStatement ClassCreator ReferenceType IllegalArgumentException MemberReference message End ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNode VariableDeclarator child MemberReference children BlockStatement StatementExpression Cast ReferenceType QueryNodeImpl MemberReference child End StatementExpression MethodInvocation allocate ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNode VariableDeclarator child MemberReference children BlockStatement StatementExpression MethodInvocation MemberReference child add End MethodDeclaration Modifier public ReferenceType QueryNode cloneTree CloneNotSupportedException LocalVariableDeclaration ReferenceType QueryNodeImpl VariableDeclarator clone Cast ReferenceType QueryNodeImpl SuperMethodInvocation clone StatementExpression Assignment MemberReference clone isLeaf This MemberReference isLeaf = StatementExpression Assignment MemberReference clone tags ClassCreator ReferenceType Hashtable TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Object = IfStatement BinaryOperation != This MemberReference clauses Literal null BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator localClauses ClassCreator ReferenceType ArrayList TypeArgument ReferenceType QueryNode ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNode VariableDeclarator clause This MemberReference clauses BlockStatement StatementExpression MethodInvocation localClauses MethodInvocation clause cloneTree add End StatementExpression Assignment MemberReference clone clauses MemberReference localClauses = End ReturnStatement MemberReference clone MethodDeclaration Modifier public Annotation Override ReferenceType Object clone CloneNotSupportedException ReturnStatement MethodInvocation cloneTree MethodDeclaration Modifier protected setLeaf FormalParameter BasicType boolean isLeaf StatementExpression Assignment This MemberReference isLeaf MemberReference isLeaf = MethodDeclaration /**
   * @return a List for QueryNode object. Returns null, for nodes that do not
   *         contain children. All leaf Nodes return null.
   */ Modifier public final ReferenceType List TypeArgument ReferenceType QueryNode getChildren IfStatement BinaryOperation || MethodInvocation isLeaf BinaryOperation == This MemberReference clauses Literal null BlockStatement ReturnStatement Literal null End ReturnStatement This MemberReference clauses MethodDeclaration Modifier public setTag FormalParameter ReferenceType CharSequence tagName FormalParameter ReferenceType Object value StatementExpression This MemberReference tags MethodInvocation MethodInvocation tagName MethodInvocation toLowerCase toString MemberReference value put MethodDeclaration Modifier public unsetTag FormalParameter ReferenceType CharSequence tagName StatementExpression This MemberReference tags MethodInvocation MethodInvocation tagName MethodInvocation toLowerCase toString remove MethodDeclaration Modifier public BasicType boolean containsTag FormalParameter ReferenceType CharSequence tagName ReturnStatement This MemberReference tags MethodInvocation MethodInvocation tagName MethodInvocation toLowerCase toString containsKey MethodDeclaration Modifier public ReferenceType Object getTag FormalParameter ReferenceType CharSequence tagName ReturnStatement This MemberReference tags MethodInvocation MethodInvocation tagName MethodInvocation toLowerCase toString get FieldDeclaration Modifier private ReferenceType QueryNode VariableDeclarator parent Literal null MethodDeclaration Modifier private setParent FormalParameter ReferenceType QueryNode parent StatementExpression Assignment This MemberReference parent MemberReference parent = MethodDeclaration Modifier public ReferenceType QueryNode getParent ReturnStatement This MemberReference parent MethodDeclaration Modifier protected BasicType boolean isRoot ReturnStatement BinaryOperation == MethodInvocation getParent Literal null FieldDeclaration /**
   * If set to true the the method toQueryString will not write field names
   */ Modifier protected BasicType boolean VariableDeclarator toQueryStringIgnoreFields Literal false MethodDeclaration /**
   * This method is use toQueryString to detect if fld is the default field
   * 
   * @param fld
   *          - field name
   * @return true if fld is the default field
   */ Modifier protected BasicType boolean isDefaultField FormalParameter ReferenceType CharSequence fld IfStatement This MemberReference toQueryStringIgnoreFields ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference fld Literal null ReturnStatement Literal true End IfStatement MethodInvocation QueryNodeImpl.PLAINTEXT_FIELD_NAME MethodInvocation fld toString equals ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration /**
   * Every implementation of this class should return pseudo xml like this:
   * 
   * For FieldQueryNode: <field start='1' end='2' field='subject' text='foo'/>
   * 
   * @see org.apache.lucene.queryParser.core.nodes.QueryNode#toString()
   */ Modifier public Annotation Override ReferenceType String toString ReturnStatement SuperMethodInvocation toString MethodDeclaration /**
   * @see org.apache.lucene.queryParser.core.nodes.QueryNode#getTag(CharSequence)
   * @return a Map with all tags for this QueryNode
   */ Modifier public Annotation SuppressWarnings ElementArrayValue Literal ""unchecked"" ReferenceType Map TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Object getTags ReturnStatement Cast ReferenceType Map TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Object This MemberReference tags MethodInvocation clone ReferenceType QueryNode ReferenceType Cloneable",0
811,811,,0
382,382,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser ClassDeclaration Modifier public /**
 * This exception is thrown when parse errors are encountered.
 * You can explicitly create objects of this exception type by
 * calling the method generateParseException in the generated
 * parser.
 *
 * You can modify this class to customize your error reporting
 * mechanisms so long as you retain the public fields.
 */ ParseException ConstructorDeclaration Modifier public /**
   * This constructor is used by the method ""generateParseException""
   * in the generated parser.  Calling this constructor generates
   * a new object of this type with the fields ""currentToken"",
   * ""expectedTokenSequences"", and ""tokenImage"" set.  The boolean
   * flag ""specialConstructor"" is also set to true to indicate that
   * this constructor was used to create this object.
   * This constructor calls its super class with the empty string
   * to force the ""toString"" method of parent class ""Throwable"" to
   * print the error message in the form:
   *     ParseException: <result of getMessage>
   */ ParseException FormalParameter ReferenceType Token currentTokenVal FormalParameter BasicType int expectedTokenSequencesVal FormalParameter ReferenceType String tokenImageVal StatementExpression SuperConstructorInvocation Literal """" StatementExpression Assignment MemberReference specialConstructor Literal true = StatementExpression Assignment MemberReference currentToken MemberReference currentTokenVal = StatementExpression Assignment MemberReference expectedTokenSequences MemberReference expectedTokenSequencesVal = StatementExpression Assignment MemberReference tokenImage MemberReference tokenImageVal = ConstructorDeclaration Modifier public /**
   * The following constructors are for use by you for whatever
   * purpose you can think of.  Constructing the exception in this
   * manner makes the exception behave in the normal way - i.e., as
   * documented in the class ""Throwable"".  The fields ""errorToken"",
   * ""expectedTokenSequences"", and ""tokenImage"" do not contain
   * relevant information.  The JavaCC generated code does not use
   * these constructors.
   */ ParseException StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference specialConstructor Literal false = ConstructorDeclaration Modifier public /** Constructor with message. */ ParseException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message StatementExpression Assignment MemberReference specialConstructor Literal false = FieldDeclaration /**
   * This variable determines which constructor was used to create
   * this object and thereby affects the semantics of the
   * ""getMessage"" method (see below).
   */ Modifier protected BasicType boolean VariableDeclarator specialConstructor FieldDeclaration /**
   * This is the last token that has been consumed successfully.  If
   * this object has been created due to a parse error, the token
   * followng this token will (therefore) be the first error token.
   */ Modifier public ReferenceType Token VariableDeclarator currentToken FieldDeclaration /**
   * Each entry in this array is an array of integers.  Each array
   * of integers represents a sequence of tokens (by their ordinal
   * values) that is expected at this point of the parse.
   */ Modifier public BasicType int VariableDeclarator expectedTokenSequences FieldDeclaration /**
   * This is a reference to the ""tokenImage"" array of the generated
   * parser within which the parse error occurred.  This array is
   * defined in the generated ...Constants interface.
   */ Modifier public ReferenceType String VariableDeclarator tokenImage MethodDeclaration /**
   * This method has the standard behavior when this object has been
   * created using the standard constructors.  Otherwise, it uses
   * ""currentToken"" and ""expectedTokenSequences"" to generate a parse
   * error message and returns it.  If this object has been created
   * due to a parse error, and you do not catch it (it gets thrown
   * from the parser), then this method is called during the printing
   * of the final stack trace, and hence the correct error message
   * gets displayed.
   */ Modifier public ReferenceType String getMessage IfStatement MemberReference ! specialConstructor BlockStatement ReturnStatement SuperMethodInvocation getMessage End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator expected ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType int VariableDeclarator maxSize Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference expectedTokenSequences length MemberReference ++ i BlockStatement IfStatement BinaryOperation < MemberReference maxSize MemberReference ArraySelector MemberReference i MemberReference length expectedTokenSequences BlockStatement StatementExpression Assignment MemberReference maxSize MemberReference ArraySelector MemberReference i MemberReference length expectedTokenSequences = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference ArraySelector MemberReference i MemberReference length expectedTokenSequences MemberReference ++ j BlockStatement StatementExpression MethodInvocation expected MethodInvocation Literal ' ' append MemberReference ArraySelector MemberReference ArraySelector MemberReference i ArraySelector MemberReference j expectedTokenSequences tokenImage append End IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i ArraySelector BinaryOperation - MemberReference ArraySelector MemberReference i MemberReference length expectedTokenSequences Literal 1 expectedTokenSequences Literal 0 BlockStatement StatementExpression MethodInvocation expected Literal ""..."" append End StatementExpression MethodInvocation expected MethodInvocation Literal ""    "" append MemberReference eol append End LocalVariableDeclaration ReferenceType String VariableDeclarator retval Literal ""Encountered \"""" LocalVariableDeclaration ReferenceType Token VariableDeclarator tok MemberReference currentToken next ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference maxSize MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference i Literal 0 StatementExpression Assignment MemberReference retval Literal "" "" += End IfStatement BinaryOperation == MemberReference tok kind Literal 0 BlockStatement StatementExpression Assignment MemberReference retval MemberReference ArraySelector Literal 0 tokenImage += BreakStatement End StatementExpression Assignment MemberReference retval BinaryOperation + Literal "" "" MemberReference ArraySelector MemberReference tok kind tokenImage += StatementExpression Assignment MemberReference retval Literal "" \"""" += StatementExpression Assignment MemberReference retval MethodInvocation MemberReference tok image add_escapes += StatementExpression Assignment MemberReference retval Literal "" \"""" += StatementExpression Assignment MemberReference tok MemberReference tok next = End StatementExpression Assignment MemberReference retval BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\"" at line "" MemberReference currentToken.next beginLine Literal "", column "" MemberReference currentToken.next beginColumn += StatementExpression Assignment MemberReference retval BinaryOperation + Literal ""."" MemberReference eol += IfStatement BinaryOperation == MemberReference expectedTokenSequences length Literal 1 BlockStatement StatementExpression Assignment MemberReference retval BinaryOperation + BinaryOperation + Literal ""Was expecting:"" MemberReference eol Literal ""    "" += BlockStatement StatementExpression Assignment MemberReference retval BinaryOperation + BinaryOperation + Literal ""Was expecting one of:"" MemberReference eol Literal ""    "" += End StatementExpression Assignment MemberReference retval MethodInvocation expected toString += ReturnStatement MemberReference retval FieldDeclaration /**
   * The end of line string for this machine.
   */ Modifier protected ReferenceType String VariableDeclarator eol MethodInvocation System Literal ""line.separator"" Literal ""\n"" getProperty MethodDeclaration /**
   * Used to convert raw characters to their escaped version
   * when these raw version cannot be used as part of an ASCII
   * string literal.
   */ Modifier protected ReferenceType String add_escapes FormalParameter ReferenceType String str LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator retval ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType char VariableDeclarator ch ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation str length MemberReference ++ i BlockStatement SwitchStatement MethodInvocation str MemberReference i charAt SwitchStatementCase Literal 0 ContinueStatement SwitchStatementCase Literal '\b' StatementExpression MethodInvocation retval Literal ""\\b"" append ContinueStatement SwitchStatementCase Literal '\t' StatementExpression MethodInvocation retval Literal ""\\t"" append ContinueStatement SwitchStatementCase Literal '\n' StatementExpression MethodInvocation retval Literal ""\\n"" append ContinueStatement SwitchStatementCase Literal '\f' StatementExpression MethodInvocation retval Literal ""\\f"" append ContinueStatement SwitchStatementCase Literal '\r' StatementExpression MethodInvocation retval Literal ""\\r"" append ContinueStatement SwitchStatementCase Literal '\""' StatementExpression MethodInvocation retval Literal ""\\\"""" append ContinueStatement SwitchStatementCase Literal '\'' StatementExpression MethodInvocation retval Literal ""\\\'"" append ContinueStatement SwitchStatementCase Literal '\\' StatementExpression MethodInvocation retval Literal ""\\\\"" append ContinueStatement SwitchStatementCase IfStatement BinaryOperation || BinaryOperation < Assignment MemberReference ch MethodInvocation str MemberReference i charAt = Literal 0x20 BinaryOperation > MemberReference ch Literal 0x7e BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s BinaryOperation + Literal ""0000"" MethodInvocation Integer MemberReference ch Literal 16 toString StatementExpression MethodInvocation retval BinaryOperation + Literal ""\\u"" MethodInvocation s BinaryOperation - MethodInvocation s length Literal 4 MethodInvocation s length substring append BlockStatement StatementExpression MethodInvocation retval MemberReference ch append End ContinueStatement End End ReturnStatement MethodInvocation retval toString ReferenceType Exception",0
416,416,"CompilationUnit PackageDeclaration org.apache.lucene.document Import java.util  Import org.apache.lucene.search.ScoreDoc Import org.apache.lucene.search.Searcher Import org.apache.lucene.index.IndexReader ClassDeclaration Modifier public final /** Documents are the unit of indexing and search.
 *
 * A Document is a set of fields.  Each field has a name and a textual value.
 * A field may be {@link Fieldable#isStored() stored} with the document, in which
 * case it is returned with search hits on the document.  Thus each document
 * should typically contain one or more stored fields which uniquely identify
 * it.
 *
 * <p>Note that fields which are <i>not</i> {@link Fieldable#isStored() stored} are
 * <i>not</i> available in documents retrieved from the index, e.g. with {@link
 * ScoreDoc#doc}, {@link Searcher#doc(int)} or {@link
 * IndexReader#document(int)}.
 */ Document FieldDeclaration ReferenceType List TypeArgument ReferenceType Fieldable VariableDeclarator fields ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Fieldable FieldDeclaration Modifier private BasicType float VariableDeclarator boost Literal 1.0f ConstructorDeclaration Modifier public /** Constructs a new document with no fields. */ Document MethodDeclaration /** Sets a boost factor for hits on any field of this document.  This value
   * will be multiplied into the score of all hits on this document.
   *
   * <p>The default value is 1.0.
   * 
   * <p>Values are multiplied into the value of {@link Fieldable#getBoost()} of
   * each field in this document.  Thus, this method in effect sets a default
   * boost for the fields of this document.
   *
   * @see Fieldable#setBoost(float)
   */ Modifier public setBoost FormalParameter BasicType float boost StatementExpression Assignment This MemberReference boost MemberReference boost = MethodDeclaration /** Returns, at indexing time, the boost factor as set by {@link #setBoost(float)}. 
   *
   * <p>Note that once a document is indexed this value is no longer available
   * from the index.  At search time, for retrieved documents, this method always 
   * returns 1. This however does not mean that the boost value set at  indexing 
   * time was ignored - it was just combined with other indexing time factors and 
   * stored elsewhere, for better indexing and search performance. (For more 
   * information see the ""norm(t,d)"" part of the scoring formula in 
   * {@link org.apache.lucene.search.Similarity Similarity}.)
   *
   * @see #setBoost(float)
   */ Modifier public BasicType float getBoost ReturnStatement MemberReference boost MethodDeclaration /**
   * <p>Adds a field to a document.  Several fields may be added with
   * the same name.  In this case, if the fields are indexed, their text is
   * treated as though appended for the purposes of search.</p>
   * <p> Note that add like the removeField(s) methods only makes sense 
   * prior to adding a document to an index. These methods cannot
   * be used to change the content of an existing index! In order to achieve this,
   * a document has to be deleted from an index and a new changed version of that
   * document has to be added.</p>
   */ Modifier public final add FormalParameter ReferenceType Fieldable field StatementExpression MethodInvocation fields MemberReference field add MethodDeclaration /**
   * <p>Removes field with the specified name from the document.
   * If multiple fields exist with this name, this method removes the first field that has been added.
   * If there is no field with the specified name, the document remains unchanged.</p>
   * <p> Note that the removeField(s) methods like the add method only make sense 
   * prior to adding a document to an index. These methods cannot
   * be used to change the content of an existing index! In order to achieve this,
   * a document has to be deleted from an index and a new changed version of that
   * document has to be added.</p>
   */ Modifier public final removeField FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Fieldable VariableDeclarator it MethodInvocation fields iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Fieldable VariableDeclarator field MethodInvocation it next IfStatement MethodInvocation field MethodInvocation MemberReference name equals name BlockStatement StatementExpression MethodInvocation it remove ReturnStatement End End MethodDeclaration /**
   * <p>Removes all fields with the given name from the document.
   * If there is no field with the specified name, the document remains unchanged.</p>
   * <p> Note that the removeField(s) methods like the add method only make sense 
   * prior to adding a document to an index. These methods cannot
   * be used to change the content of an existing index! In order to achieve this,
   * a document has to be deleted from an index and a new changed version of that
   * document has to be added.</p>
   */ Modifier public final removeFields FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Fieldable VariableDeclarator it MethodInvocation fields iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Fieldable VariableDeclarator field MethodInvocation it next IfStatement MethodInvocation field MethodInvocation MemberReference name equals name BlockStatement StatementExpression MethodInvocation it remove End End MethodDeclaration /** Returns a field with the given name if any exist in this document, or
   * null.  If multiple fields exists with this name, this method returns the
   * first value added.
   * Do not use this method with lazy loaded fields.
   */ Modifier public final ReferenceType Field getField FormalParameter ReferenceType String name ReturnStatement Cast ReferenceType Field MethodInvocation MemberReference name getFieldable MethodDeclaration /** Returns a field with the given name if any exist in this document, or
   * null.  If multiple fields exists with this name, this method returns the
   * first value added.
   */ Modifier public ReferenceType Fieldable getFieldable FormalParameter ReferenceType String name ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement IfStatement MethodInvocation field MethodInvocation MemberReference name equals name ReturnStatement MemberReference field End End ReturnStatement Literal null MethodDeclaration /** Returns the string value of the field with the given name if any exist in
   * this document, or null.  If multiple fields exist with this name, this
   * method returns the first value added. If only binary fields with this name
   * exist, returns null.
   */ Modifier public final ReferenceType String get FormalParameter ReferenceType String name ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement IfStatement BinaryOperation && MethodInvocation field MethodInvocation MemberReference name equals name MethodInvocation field isBinary ReturnStatement MethodInvocation field stringValue End End ReturnStatement Literal null MethodDeclaration /** Returns a List of all the fields in a document.
   * <p>Note that fields which are <i>not</i> {@link Fieldable#isStored() stored} are
   * <i>not</i> available in documents retrieved from the
   * index, e.g. {@link Searcher#doc(int)} or {@link
   * IndexReader#document(int)}.
   */ Modifier public final ReferenceType List TypeArgument ReferenceType Fieldable getFields ReturnStatement MemberReference fields FieldDeclaration Modifier private final static ReferenceType Field VariableDeclarator NO_FIELDS ArrayCreator ReferenceType Field Literal 0 MethodDeclaration /**
   * Returns an array of {@link Field}s with the given name.
   * Do not use with lazy loaded fields.
   * This method returns an empty array when there are no
   * matching fields.  It never returns null.
   *
   * @param name the name of the field
   * @return a <code>Field[]</code> array
   */ Modifier public final ReferenceType Field getFields FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Field VariableDeclarator result ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Field ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement IfStatement MethodInvocation field MethodInvocation MemberReference name equals name BlockStatement StatementExpression MethodInvocation result Cast ReferenceType Field MemberReference field add End End IfStatement BinaryOperation == MethodInvocation result size Literal 0 ReturnStatement MemberReference NO_FIELDS End ReturnStatement MethodInvocation result ArrayCreator ReferenceType Field MethodInvocation result size toArray FieldDeclaration Modifier private final static ReferenceType Fieldable VariableDeclarator NO_FIELDABLES ArrayCreator ReferenceType Fieldable Literal 0 MethodDeclaration /**
   * Returns an array of {@link Fieldable}s with the given name.
   * This method returns an empty array when there are no
   * matching fields.  It never returns null.
   *
   * @param name the name of the field
   * @return a <code>Fieldable[]</code> array
   */ Modifier public ReferenceType Fieldable getFieldables FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Fieldable VariableDeclarator result ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Fieldable ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement IfStatement MethodInvocation field MethodInvocation MemberReference name equals name BlockStatement StatementExpression MethodInvocation result MemberReference field add End End IfStatement BinaryOperation == MethodInvocation result size Literal 0 ReturnStatement MemberReference NO_FIELDABLES End ReturnStatement MethodInvocation result ArrayCreator ReferenceType Fieldable MethodInvocation result size toArray FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NO_STRINGS ArrayCreator ReferenceType String Literal 0 MethodDeclaration /**
   * Returns an array of values of the field specified as the method parameter.
   * This method returns an empty array when there are no
   * matching fields.  It never returns null.
   * @param name the name of the field
   * @return a <code>String[]</code> of field values
   */ Modifier public final ReferenceType String getValues FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement IfStatement BinaryOperation && MethodInvocation field MethodInvocation MemberReference name equals name MethodInvocation field isBinary StatementExpression MethodInvocation result MethodInvocation field stringValue add End End IfStatement BinaryOperation == MethodInvocation result size Literal 0 ReturnStatement MemberReference NO_STRINGS End ReturnStatement MethodInvocation result ArrayCreator ReferenceType String MethodInvocation result size toArray FieldDeclaration Modifier private final static BasicType byte VariableDeclarator NO_BYTES ArrayCreator BasicType byte Literal 0 MethodDeclaration /**
  * Returns an array of byte arrays for of the fields that have the name specified
  * as the method parameter.  This method returns an empty
  * array when there are no matching fields.  It never
  * returns null.
  *
  * @param name the name of the field
  * @return a <code>byte[][]</code> of binary field values
  */ Modifier public final BasicType byte getBinaryValues FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType List TypeArgument BasicType byte VariableDeclarator result ClassCreator ReferenceType ArrayList TypeArgument BasicType byte ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement IfStatement BinaryOperation && MethodInvocation field MethodInvocation MemberReference name equals name MethodInvocation field isBinary StatementExpression MethodInvocation result MethodInvocation field getBinaryValue add End End IfStatement BinaryOperation == MethodInvocation result size Literal 0 ReturnStatement MemberReference NO_BYTES End ReturnStatement MethodInvocation result ArrayCreator BasicType byte MethodInvocation result size toArray MethodDeclaration /**
  * Returns an array of bytes for the first (or only) field that has the name
  * specified as the method parameter. This method will return <code>null</code>
  * if no binary fields with the specified name are available.
  * There may be non-binary fields with the same name.
  *
  * @param name the name of the field.
  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>
  */ Modifier public final BasicType byte getBinaryValue FormalParameter ReferenceType String name ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement IfStatement BinaryOperation && MethodInvocation field MethodInvocation MemberReference name equals name MethodInvocation field isBinary ReturnStatement MethodInvocation field getBinaryValue End End ReturnStatement Literal null MethodDeclaration /** Prints the fields of a document for human consumption. */ Modifier public final Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation buffer Literal ""Document<"" append ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation fields size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Fieldable VariableDeclarator field MethodInvocation fields MemberReference i get StatementExpression MethodInvocation buffer MethodInvocation field toString append IfStatement BinaryOperation != MemberReference i BinaryOperation - MethodInvocation fields size Literal 1 StatementExpression MethodInvocation buffer Literal "" "" append End End StatementExpression MethodInvocation buffer Literal "">"" append ReturnStatement MethodInvocation buffer toString ReferenceType java ReferenceType io ReferenceType Serializable",0
214,214,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException ClassDeclaration Modifier public abstract /**
 * Abstract decorator class of a DocIdSetIterator
 * implementation that provides on-demand filter/validation
 * mechanism on an underlying DocIdSetIterator.  See {@link
 * FilteredDocIdSet}.
 */ FilteredDocIdSetIterator FieldDeclaration Modifier protected ReferenceType DocIdSetIterator VariableDeclarator _innerIter FieldDeclaration Modifier private BasicType int VariableDeclarator doc ConstructorDeclaration Modifier public /**
   * Constructor.
   * @param innerIter Underlying DocIdSetIterator.
   */ FilteredDocIdSetIterator FormalParameter ReferenceType DocIdSetIterator innerIter IfStatement BinaryOperation == MemberReference innerIter Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""null iterator"" End StatementExpression Assignment MemberReference _innerIter MemberReference innerIter = StatementExpression Assignment MemberReference doc Literal - 1 = MethodDeclaration /**
   * Validation method to determine whether a docid should be in the result set.
   * @param doc docid to be tested
   * @return true if input docid should be in the result set, false otherwise.
   * @see #FilteredDocIdSetIterator(DocIdSetIterator).
   */ Modifier protected abstract BasicType boolean match FormalParameter BasicType int doc IOException MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MemberReference doc MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException WhileStatement BinaryOperation != Assignment MemberReference doc MethodInvocation _innerIter nextDoc = MemberReference NO_MORE_DOCS BlockStatement IfStatement MethodInvocation MemberReference doc match BlockStatement ReturnStatement MemberReference doc End End ReturnStatement MemberReference doc MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException StatementExpression Assignment MemberReference doc MethodInvocation _innerIter MemberReference target advance = IfStatement BinaryOperation != MemberReference doc MemberReference NO_MORE_DOCS BlockStatement IfStatement MethodInvocation MemberReference doc match BlockStatement ReturnStatement MemberReference doc BlockStatement WhileStatement BinaryOperation != Assignment MemberReference doc MethodInvocation _innerIter nextDoc = MemberReference NO_MORE_DOCS BlockStatement IfStatement MethodInvocation MemberReference doc match BlockStatement ReturnStatement MemberReference doc End End ReturnStatement MemberReference doc End End ReturnStatement MemberReference doc ReferenceType DocIdSetIterator",0
893,893,,0
593,593,,0
49,49,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.text.Collator Import org.apache.lucene.index.IndexReader Import org.apache.lucene.util.ToStringUtils ClassDeclaration Modifier public /**
 * A Query that matches documents within an range of terms.
 *
 * <p>This query matches the documents looking for terms that fall into the
 * supplied range according to {@link
 * String#compareTo(String)}, unless a <code>Collator</code> is provided. It is not intended
 * for numerical ranges; use {@link NumericRangeQuery} instead.
 *
 * <p>This query uses the {@link
 * MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}
 * rewrite method.
 * @since 2.9
 */ TermRangeQuery FieldDeclaration Modifier private ReferenceType String VariableDeclarator lowerTerm FieldDeclaration Modifier private ReferenceType String VariableDeclarator upperTerm FieldDeclaration Modifier private ReferenceType Collator VariableDeclarator collator FieldDeclaration Modifier private ReferenceType String VariableDeclarator field FieldDeclaration Modifier private BasicType boolean VariableDeclarator includeLower FieldDeclaration Modifier private BasicType boolean VariableDeclarator includeUpper ConstructorDeclaration Modifier public /**
   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>
   * but less/equal than <code>upperTerm</code>. 
   * 
   * <p>
   * If an endpoint is null, it is said 
   * to be ""open"". Either or both endpoints may be open.  Open endpoints may not 
   * be exclusive (you can't select all but the first or last term without 
   * explicitly specifying the term to exclude.)
   * 
   * @param field The field that holds both lower and upper terms.
   * @param lowerTerm
   *          The term text at the lower end of the range
   * @param upperTerm
   *          The term text at the upper end of the range
   * @param includeLower
   *          If true, the <code>lowerTerm</code> is
   *          included in the range.
   * @param includeUpper
   *          If true, the <code>upperTerm</code> is
   *          included in the range.
   */ TermRangeQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String lowerTerm FormalParameter ReferenceType String upperTerm FormalParameter BasicType boolean includeLower FormalParameter BasicType boolean includeUpper StatementExpression ExplicitConstructorInvocation MemberReference field MemberReference lowerTerm MemberReference upperTerm MemberReference includeLower MemberReference includeUpper Literal null ConstructorDeclaration Modifier public /** Constructs a query selecting all terms greater/equal than
   * <code>lowerTerm</code> but less/equal than <code>upperTerm</code>.
   * <p>
   * If an endpoint is null, it is said 
   * to be ""open"". Either or both endpoints may be open.  Open endpoints may not 
   * be exclusive (you can't select all but the first or last term without 
   * explicitly specifying the term to exclude.)
   * <p>
   * If <code>collator</code> is not null, it will be used to decide whether
   * index terms are within the given range, rather than using the Unicode code
   * point order in which index terms are stored.
   * <p>
   * <strong>WARNING:</strong> Using this constructor and supplying a non-null
   * value in the <code>collator</code> parameter will cause every single 
   * index Term in the Field referenced by lowerTerm and/or upperTerm to be
   * examined.  Depending on the number of index Terms in this Field, the 
   * operation could be very slow.
   *
   * @param lowerTerm The Term text at the lower end of the range
   * @param upperTerm The Term text at the upper end of the range
   * @param includeLower
   *          If true, the <code>lowerTerm</code> is
   *          included in the range.
   * @param includeUpper
   *          If true, the <code>upperTerm</code> is
   *          included in the range.
   * @param collator The collator to use to collate index Terms, to determine
   *  their membership in the range bounded by <code>lowerTerm</code> and
   *  <code>upperTerm</code>.
   */ TermRangeQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String lowerTerm FormalParameter ReferenceType String upperTerm FormalParameter BasicType boolean includeLower FormalParameter BasicType boolean includeUpper FormalParameter ReferenceType Collator collator StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference lowerTerm MemberReference lowerTerm = StatementExpression Assignment This MemberReference upperTerm MemberReference upperTerm = StatementExpression Assignment This MemberReference includeLower MemberReference includeLower = StatementExpression Assignment This MemberReference includeUpper MemberReference includeUpper = StatementExpression Assignment This MemberReference collator MemberReference collator = MethodDeclaration /** Returns the field name for this query */ Modifier public ReferenceType String getField ReturnStatement MemberReference field MethodDeclaration /** Returns the lower value of this range query */ Modifier public ReferenceType String getLowerTerm ReturnStatement MemberReference lowerTerm MethodDeclaration /** Returns the upper value of this range query */ Modifier public ReferenceType String getUpperTerm ReturnStatement MemberReference upperTerm MethodDeclaration /** Returns <code>true</code> if the lower endpoint is inclusive */ Modifier public BasicType boolean includesLower ReturnStatement MemberReference includeLower MethodDeclaration /** Returns <code>true</code> if the upper endpoint is inclusive */ Modifier public BasicType boolean includesUpper ReturnStatement MemberReference includeUpper MethodDeclaration /** Returns the collator used to determine range inclusion, if any. */ Modifier public ReferenceType Collator getCollator ReturnStatement MemberReference collator MethodDeclaration Modifier protected Annotation Override ReferenceType FilteredTermEnum getEnum FormalParameter ReferenceType IndexReader reader IOException ReturnStatement ClassCreator ReferenceType TermRangeTermEnum MemberReference reader MemberReference field MemberReference lowerTerm MemberReference upperTerm MemberReference includeLower MemberReference includeUpper MemberReference collator MethodDeclaration /** Prints a user-readable version of this query. */ Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String field LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder IfStatement MethodInvocation ! MethodInvocation MemberReference field equals getField BlockStatement StatementExpression MethodInvocation buffer MethodInvocation getField append StatementExpression MethodInvocation buffer Literal "":"" append End StatementExpression MethodInvocation buffer TernaryExpression MemberReference includeLower Literal '[' Literal '{' append StatementExpression MethodInvocation buffer TernaryExpression BinaryOperation != MemberReference lowerTerm Literal null MemberReference lowerTerm Literal ""*"" append StatementExpression MethodInvocation buffer Literal "" TO "" append StatementExpression MethodInvocation buffer TernaryExpression BinaryOperation != MemberReference upperTerm Literal null MemberReference upperTerm Literal ""*"" append StatementExpression MethodInvocation buffer TernaryExpression MemberReference includeUpper Literal ']' Literal '}' append StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result SuperMethodInvocation hashCode StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference collator Literal null Literal 0 MethodInvocation collator hashCode = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference field Literal null Literal 0 MethodInvocation field hashCode = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression MemberReference includeLower Literal 1231 Literal 1237 = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression MemberReference includeUpper Literal 1231 Literal 1237 = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference lowerTerm Literal null Literal 0 MethodInvocation lowerTerm hashCode = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference upperTerm Literal null Literal 0 MethodInvocation upperTerm hashCode = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement SuperMethodInvocation ! MemberReference obj equals ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType TermRangeQuery VariableDeclarator other Cast ReferenceType TermRangeQuery MemberReference obj IfStatement BinaryOperation == MemberReference collator Literal null BlockStatement IfStatement BinaryOperation != MemberReference other collator Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! collator MemberReference other collator equals ReturnStatement Literal false End End IfStatement BinaryOperation == MemberReference field Literal null BlockStatement IfStatement BinaryOperation != MemberReference other field Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! field MemberReference other field equals ReturnStatement Literal false End End IfStatement BinaryOperation != MemberReference includeLower MemberReference other includeLower ReturnStatement Literal false End IfStatement BinaryOperation != MemberReference includeUpper MemberReference other includeUpper ReturnStatement Literal false End IfStatement BinaryOperation == MemberReference lowerTerm Literal null BlockStatement IfStatement BinaryOperation != MemberReference other lowerTerm Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! lowerTerm MemberReference other lowerTerm equals ReturnStatement Literal false End End IfStatement BinaryOperation == MemberReference upperTerm Literal null BlockStatement IfStatement BinaryOperation != MemberReference other upperTerm Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! upperTerm MemberReference other upperTerm equals ReturnStatement Literal false End End ReturnStatement Literal true ReferenceType MultiTermQuery",0
38,38,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax ClassDeclaration Modifier public /**
 * A {@link FuzzyQueryNode} represents a element that contains
 * field/text/similarity tuple
 */ FuzzyQueryNode FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal - 1794537213032589441L FieldDeclaration Modifier private BasicType float VariableDeclarator similarity FieldDeclaration Modifier private BasicType int VariableDeclarator prefixLength ConstructorDeclaration Modifier public /**
   * @param field
   *          - Field name
   * @param term
   *          - Value
   * @param minSimilarity
   *          - similarity value
   * @param begin
   *          - position in the query string
   * @param end
   *          - position in the query string
   */ FuzzyQueryNode FormalParameter ReferenceType CharSequence field FormalParameter ReferenceType CharSequence term FormalParameter BasicType float minSimilarity FormalParameter BasicType int begin FormalParameter BasicType int end StatementExpression SuperConstructorInvocation MemberReference field MemberReference term MemberReference begin MemberReference end StatementExpression Assignment This MemberReference similarity MemberReference minSimilarity = StatementExpression MethodInvocation Literal true setLeaf MethodDeclaration Modifier public setPrefixLength FormalParameter BasicType int prefixLength StatementExpression Assignment This MemberReference prefixLength MemberReference prefixLength = MethodDeclaration Modifier public BasicType int getPrefixLength ReturnStatement This MemberReference prefixLength MethodDeclaration Modifier public Annotation Override ReferenceType CharSequence toQueryString FormalParameter ReferenceType EscapeQuerySyntax escaper IfStatement MethodInvocation This MemberReference field isDefaultField BlockStatement ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MemberReference escaper getTermEscaped Literal ""~"" This MemberReference similarity BlockStatement ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + This MemberReference field Literal "":"" MethodInvocation MemberReference escaper getTermEscaped Literal ""~"" This MemberReference similarity End MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<fuzzy field='"" This MemberReference field Literal ""' similarity='"" This MemberReference similarity Literal ""' term='"" This MemberReference text Literal ""'/>"" MethodDeclaration Modifier public setSimilarity FormalParameter BasicType float similarity StatementExpression Assignment This MemberReference similarity MemberReference similarity = MethodDeclaration Modifier public Annotation Override ReferenceType FuzzyQueryNode cloneTree CloneNotSupportedException LocalVariableDeclaration ReferenceType FuzzyQueryNode VariableDeclarator clone Cast ReferenceType FuzzyQueryNode SuperMethodInvocation cloneTree StatementExpression Assignment MemberReference clone similarity This MemberReference similarity = ReturnStatement MemberReference clone MethodDeclaration /**
   * @return the similarity
   */ Modifier public BasicType float getSimilarity ReturnStatement This MemberReference similarity ReferenceType FieldQueryNode",1
408,408,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.io.IOException Import java.io.PrintStream Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.index.IndexWriter ClassDeclaration Modifier public /**
 * Rollback the index writer.
 */ RollbackIndexTask ConstructorDeclaration Modifier public RollbackIndexTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData FieldDeclaration BasicType boolean VariableDeclarator doWait Literal true MethodDeclaration Modifier public Annotation Override BasicType int doLogic IOException LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator iw MethodInvocation MethodInvocation getIndexWriter getRunData IfStatement BinaryOperation != MemberReference iw Literal null BlockStatement LocalVariableDeclaration ReferenceType PrintStream VariableDeclarator infoStream MethodInvocation iw getInfoStream IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference infoStream Literal null BinaryOperation != MemberReference infoStream MemberReference System out BinaryOperation != MemberReference infoStream MemberReference System err BlockStatement StatementExpression MethodInvocation infoStream close End StatementExpression MethodInvocation iw rollback StatementExpression MethodInvocation MethodInvocation Literal null setIndexWriter getRunData End ReturnStatement Literal 1 ReferenceType PerfTask",0
753,753,,1
510,510,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.ngram Import java.io.IOException Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute ClassDeclaration Modifier public final /**
 * Tokenizes the input into n-grams of the given size(s).
 */ NGramTokenFilter FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_MIN_NGRAM_SIZE Literal 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_NGRAM_SIZE Literal 2 FieldDeclaration Modifier private BasicType int VariableDeclarator minGram VariableDeclarator maxGram FieldDeclaration Modifier private BasicType char VariableDeclarator curTermBuffer FieldDeclaration Modifier private BasicType int VariableDeclarator curTermLength FieldDeclaration Modifier private BasicType int VariableDeclarator curGramSize FieldDeclaration Modifier private BasicType int VariableDeclarator curPos FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt ConstructorDeclaration Modifier public /**
   * Creates NGramTokenFilter with given min and max n-grams.
   * @param input {@link TokenStream} holding the input to be tokenized
   * @param minGram the smallest n-gram to generate
   * @param maxGram the largest n-gram to generate
   */ NGramTokenFilter FormalParameter ReferenceType TokenStream input FormalParameter BasicType int minGram FormalParameter BasicType int maxGram StatementExpression SuperConstructorInvocation MemberReference input IfStatement BinaryOperation < MemberReference minGram Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""minGram must be greater than zero"" End IfStatement BinaryOperation > MemberReference minGram MemberReference maxGram BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""minGram must not be greater than maxGram"" End StatementExpression Assignment This MemberReference minGram MemberReference minGram = StatementExpression Assignment This MemberReference maxGram MemberReference maxGram = StatementExpression Assignment This MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment This MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = ConstructorDeclaration Modifier public /**
   * Creates NGramTokenFilter with default min and max n-grams.
   * @param input {@link TokenStream} holding the input to be tokenized
   */ NGramTokenFilter FormalParameter ReferenceType TokenStream input StatementExpression ExplicitConstructorInvocation MemberReference input MemberReference DEFAULT_MIN_NGRAM_SIZE MemberReference DEFAULT_MAX_NGRAM_SIZE MethodDeclaration /** Returns the next token in the stream, or null at EOS. */ Modifier public final Annotation Override BasicType boolean incrementToken IOException WhileStatement Literal true BlockStatement IfStatement BinaryOperation == MemberReference curTermBuffer Literal null BlockStatement IfStatement MethodInvocation ! input incrementToken BlockStatement ReturnStatement Literal false BlockStatement StatementExpression Assignment MemberReference curTermBuffer Cast BasicType char MethodInvocation termAtt MethodInvocation clone termBuffer = StatementExpression Assignment MemberReference curTermLength MethodInvocation termAtt termLength = StatementExpression Assignment MemberReference curGramSize MemberReference minGram = StatementExpression Assignment MemberReference curPos Literal 0 = End End WhileStatement BinaryOperation <= MemberReference curGramSize MemberReference maxGram BlockStatement WhileStatement BinaryOperation <= BinaryOperation + MemberReference curPos MemberReference curGramSize MemberReference curTermLength BlockStatement StatementExpression MethodInvocation termAtt MemberReference curTermBuffer MemberReference curPos MemberReference curGramSize setTermBuffer StatementExpression MethodInvocation offsetAtt MemberReference curPos BinaryOperation + MemberReference curPos MemberReference curGramSize setOffset StatementExpression MemberReference ++ curPos ReturnStatement Literal true End StatementExpression MemberReference ++ curGramSize StatementExpression Assignment MemberReference curPos Literal 0 = End StatementExpression Assignment MemberReference curTermBuffer Literal null = End MethodDeclaration Modifier public Annotation Override reset IOException StatementExpression SuperMethodInvocation reset StatementExpression Assignment MemberReference curTermBuffer Literal null = ReferenceType TokenFilter",0
584,584,,0
128,128,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard Import java.text.Collator Import java.util.Locale Import java.util.Map Import java.util.TooManyListenersException Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.document.DateTools Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.QueryParserHelper Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder Import org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttribute Import org.apache.lucene.queryParser.standard.config.AnalyzerAttribute Import org.apache.lucene.queryParser.standard.config.DateResolutionAttribute Import org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute Import org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttribute Import org.apache.lucene.queryParser.standard.config.FieldBoostMapAttribute Import org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttribute Import org.apache.lucene.queryParser.standard.config.FuzzyAttribute Import org.apache.lucene.queryParser.standard.config.LocaleAttribute Import org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttribute Import org.apache.lucene.queryParser.standard.config.MultiFieldAttribute Import org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttribute Import org.apache.lucene.queryParser.standard.config.PositionIncrementsAttribute Import org.apache.lucene.queryParser.standard.config.RangeCollatorAttribute Import org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler Import org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute.Operator Import org.apache.lucene.queryParser.standard.nodes.RangeQueryNode Import org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser Import org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline Import org.apache.lucene.search.FuzzyQuery Import org.apache.lucene.search.MultiTermQuery Import org.apache.lucene.search.Query ClassDeclaration Modifier public /**
 * <p>
 * This class is a helper that enables users to easily use the Lucene query
 * parser.
 * </p>
 * <p>
 * To construct a Query object from a query string, use the
 * {@link #parse(String, String)} method:
 * <ul>
 * StandardQueryParser queryParserHelper = new StandardQueryParser(); <br/>
 * Query query = queryParserHelper.parse(""a AND b"", ""defaultField"");
 * </ul>
 * <p>
 * To change any configuration before parsing the query string do, for example:
 * <p/>
 * <ul>
 * // the query config handler returned by {@link StandardQueryParser} is a
 * {@link StandardQueryConfigHandler} <br/>
 * queryParserHelper.getQueryConfigHandler().setAnalyzer(new
 * WhitespaceAnalyzer());
 * </ul>
 * <p>
 * The syntax for query strings is as follows (copied from the old QueryParser
 * javadoc):
 * <ul>
 * A Query is a series of clauses. A clause may be prefixed by:
 * <ul>
 * <li>a plus (<code>+</code>) or a minus (<code>-</code>) sign, indicating that
 * the clause is required or prohibited respectively; or
 * <li>a term followed by a colon, indicating the field to be searched. This
 * enables one to construct queries which search multiple fields.
 * </ul>
 * 
 * A clause may be either:
 * <ul>
 * <li>a term, indicating all the documents that contain this term; or
 * <li>a nested query, enclosed in parentheses. Note that this may be used with
 * a <code>+</code>/<code>-</code> prefix to require any of a set of terms.
 * </ul>
 * 
 * Thus, in BNF, the query grammar is:
 * 
 * <pre>
 *   Query  ::= ( Clause )*
 *   Clause ::= [&quot;+&quot;, &quot;-&quot;] [&lt;TERM&gt; &quot;:&quot;] ( &lt;TERM&gt; | &quot;(&quot; Query &quot;)&quot; )
 * </pre>
 * 
 * <p>
 * Examples of appropriately formatted queries can be found in the <a
 * href=""../../../../../../queryparsersyntax.html"">query syntax
 * documentation</a>.
 * </p>
 * </ul>
 * <p>
 * The text parser used by this helper is a {@link StandardSyntaxParser}.
 * <p/>
 * <p>
 * The query node processor used by this helper is a
 * {@link StandardQueryNodeProcessorPipeline}.
 * <p/>
 * <p>
 * The builder used by this helper is a {@link StandardQueryTreeBuilder}.
 * <p/>
 * 
 * @see StandardQueryParser
 * @see StandardQueryConfigHandler
 * @see StandardSyntaxParser
 * @see StandardQueryNodeProcessorPipeline
 * @see StandardQueryTreeBuilder
 */ StandardQueryParser ConstructorDeclaration Modifier public /**
   * Constructs a {@link StandardQueryParser} object.
   */ StandardQueryParser StatementExpression SuperConstructorInvocation ClassCreator ReferenceType StandardQueryConfigHandler ClassCreator ReferenceType StandardSyntaxParser ClassCreator ReferenceType StandardQueryNodeProcessorPipeline Literal null ClassCreator ReferenceType StandardQueryTreeBuilder ConstructorDeclaration Modifier public /**
   * Constructs a {@link StandardQueryParser} object and sets an
   * {@link Analyzer} to it. The same as:
   * 
   * <ul>
   * StandardQueryParser qp = new StandardQueryParser();
   * qp.getQueryConfigHandler().setAnalyzer(analyzer);
   * </ul>
   * 
   * @param analyzer
   *          the analyzer to be used by this query parser helper
   */ StandardQueryParser FormalParameter ReferenceType Analyzer analyzer StatementExpression ExplicitConstructorInvocation StatementExpression This MethodInvocation MemberReference analyzer setAnalyzer MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""<StandardQueryParser config=\"""" This MethodInvocation getQueryConfigHandler Literal ""\""/>"" MethodDeclaration /**
   * Overrides {@link QueryParserHelper#parse(String, String)} so it casts the
   * return object to {@link Query}. For more reference about this method, check
   * {@link QueryParserHelper#parse(String, String)}.
   * 
   * @param query
   *          the query string
   * @param defaultField
   *          the default field used by the text parser
   * 
   * @return the object built from the query
   * 
   * @throws QueryNodeException
   *           if something wrong happens along the three phases
   */ Modifier public Annotation Override ReferenceType Query parse FormalParameter ReferenceType String query FormalParameter ReferenceType String defaultField QueryNodeException ReturnStatement Cast ReferenceType Query SuperMethodInvocation MemberReference query MemberReference defaultField parse MethodDeclaration /**
   * Gets implicit operator setting, which will be either {@link Operator#AND}
   * or {@link Operator#OR}.
   */ Modifier public ReferenceType Operator getDefaultOperator LocalVariableDeclaration ReferenceType DefaultOperatorAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType DefaultOperatorAttribute getAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr getOperator MethodDeclaration /**
   * Sets the collator used to determine index term inclusion in ranges for
   * RangeQuerys.
   * <p/>
   * <strong>WARNING:</strong> Setting the rangeCollator to a non-null collator
   * using this method will cause every single index Term in the Field
   * referenced by lowerTerm and/or upperTerm to be examined. Depending on the
   * number of index Terms in this Field, the operation could be very slow.
   * 
   * @param collator
   *          the collator to use when constructing {@link RangeQueryNode}s
   */ Modifier public setRangeCollator FormalParameter ReferenceType Collator collator LocalVariableDeclaration ReferenceType RangeCollatorAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType RangeCollatorAttribute getAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference collator setDateResolution MethodDeclaration /**
   * @return the collator used to determine index term inclusion in ranges for
   *         RangeQuerys.
   */ Modifier public ReferenceType Collator getRangeCollator LocalVariableDeclaration ReferenceType RangeCollatorAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType RangeCollatorAttribute getAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr getRangeCollator MethodDeclaration /**
   * Sets the boolean operator of the QueryParser. In default mode (
   * {@link Operator#OR}) terms without any modifiers are considered optional:
   * for example <code>capital of Hungary</code> is equal to
   * <code>capital OR of OR Hungary</code>.<br/>
   * In {@link Operator#AND} mode terms are considered to be in conjunction: the
   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>
   */ Modifier public setDefaultOperator FormalParameter ReferenceType Operator operator LocalVariableDeclaration ReferenceType DefaultOperatorAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType DefaultOperatorAttribute getAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference operator setOperator MethodDeclaration /**
   * Set to <code>true</code> to allow leading wildcard characters.
   * <p>
   * When set, <code>*</code> or <code>?</code> are allowed as the first
   * character of a PrefixQuery and WildcardQuery. Note that this can produce
   * very slow queries on big indexes.
   * <p>
   * Default: false.
   */ Modifier public setLowercaseExpandedTerms FormalParameter BasicType boolean lowercaseExpandedTerms LocalVariableDeclaration ReferenceType LowercaseExpandedTermsAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType LowercaseExpandedTermsAttribute getAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference lowercaseExpandedTerms setLowercaseExpandedTerms MethodDeclaration /**
   * @see #setLowercaseExpandedTerms(boolean)
   */ Modifier public BasicType boolean getLowercaseExpandedTerms LocalVariableDeclaration ReferenceType LowercaseExpandedTermsAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType LowercaseExpandedTermsAttribute getAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr isLowercaseExpandedTerms MethodDeclaration /**
   * Set to <code>true</code> to allow leading wildcard characters.
   * <p>
   * When set, <code>*</code> or <code>?</code> are allowed as the first
   * character of a PrefixQuery and WildcardQuery. Note that this can produce
   * very slow queries on big indexes.
   * <p>
   * Default: false.
   */ Modifier public setAllowLeadingWildcard FormalParameter BasicType boolean allowLeadingWildcard LocalVariableDeclaration ReferenceType AllowLeadingWildcardAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType AllowLeadingWildcardAttribute getAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference allowLeadingWildcard setAllowLeadingWildcard MethodDeclaration /**
   * Set to <code>true</code> to enable position increments in result query.
   * <p>
   * When set, result phrase and multi-phrase queries will be aware of position
   * increments. Useful when e.g. a StopFilter increases the position increment
   * of the token that follows an omitted token.
   * <p>
   * Default: false.
   */ Modifier public setEnablePositionIncrements FormalParameter BasicType boolean enabled LocalVariableDeclaration ReferenceType PositionIncrementsAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType PositionIncrementsAttribute getAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference enabled setPositionIncrementsEnabled MethodDeclaration /**
   * @see #setEnablePositionIncrements(boolean)
   */ Modifier public BasicType boolean getEnablePositionIncrements LocalVariableDeclaration ReferenceType PositionIncrementsAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType PositionIncrementsAttribute getAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr isPositionIncrementsEnabled MethodDeclaration /**
   * By default, it uses
   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a
   * prefix, wildcard and range queries. This implementation is generally
   * preferable because it a) Runs faster b) Does not have the scarcity of terms
   * unduly influence score c) avoids any {@link TooManyListenersException}
   * exception. However, if your application really needs to use the
   * old-fashioned boolean queries expansion rewriting and the above points are
   * not relevant then use this change the rewrite method.
   */ Modifier public setMultiTermRewriteMethod FormalParameter ReferenceType MultiTermQuery ReferenceType RewriteMethod method LocalVariableDeclaration ReferenceType MultiTermRewriteMethodAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType MultiTermRewriteMethodAttribute getAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference method setMultiTermRewriteMethod MethodDeclaration /**
   * @see #setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery.RewriteMethod)
   */ Modifier public ReferenceType MultiTermQuery ReferenceType RewriteMethod getMultiTermRewriteMethod LocalVariableDeclaration ReferenceType MultiTermRewriteMethodAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType MultiTermRewriteMethodAttribute getAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr getMultiTermRewriteMethod MethodDeclaration Modifier public setMultiFields FormalParameter ReferenceType CharSequence fields IfStatement BinaryOperation == MemberReference fields Literal null BlockStatement StatementExpression Assignment MemberReference fields ArrayCreator ReferenceType CharSequence Literal 0 = End LocalVariableDeclaration ReferenceType MultiFieldAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType MultiFieldAttribute addAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference fields setFields MethodDeclaration /**
   * Set the prefix length for fuzzy queries. Default is 0.
   * 
   * @param fuzzyPrefixLength
   *          The fuzzyPrefixLength to set.
   */ Modifier public setFuzzyPrefixLength FormalParameter BasicType int fuzzyPrefixLength LocalVariableDeclaration ReferenceType FuzzyAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType FuzzyAttribute addAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference fuzzyPrefixLength setPrefixLength MethodDeclaration /**
   * Set locale used by date range parsing.
   */ Modifier public setLocale FormalParameter ReferenceType Locale locale LocalVariableDeclaration ReferenceType LocaleAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType LocaleAttribute addAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference locale setLocale MethodDeclaration /**
   * Returns current locale, allowing access by subclasses.
   */ Modifier public ReferenceType Locale getLocale LocalVariableDeclaration ReferenceType LocaleAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType LocaleAttribute addAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr getLocale MethodDeclaration /**
   * Sets the default slop for phrases. If zero, then exact phrase matches are
   * required. Default value is zero.
   */ Modifier public setDefaultPhraseSlop FormalParameter BasicType int defaultPhraseSlop LocalVariableDeclaration ReferenceType DefaultPhraseSlopAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType DefaultPhraseSlopAttribute addAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference defaultPhraseSlop setDefaultPhraseSlop MethodDeclaration Modifier public setAnalyzer FormalParameter ReferenceType Analyzer analyzer LocalVariableDeclaration ReferenceType AnalyzerAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType AnalyzerAttribute getAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference analyzer setAnalyzer MethodDeclaration Modifier public ReferenceType Analyzer getAnalyzer LocalVariableDeclaration ReferenceType QueryConfigHandler VariableDeclarator config This MethodInvocation getQueryConfigHandler IfStatement MethodInvocation config ClassReference ReferenceType AnalyzerAttribute hasAttribute BlockStatement LocalVariableDeclaration ReferenceType AnalyzerAttribute VariableDeclarator attr MethodInvocation config ClassReference ReferenceType AnalyzerAttribute getAttribute ReturnStatement MethodInvocation attr getAnalyzer End ReturnStatement Literal null MethodDeclaration /**
   * @see #setAllowLeadingWildcard(boolean)
   */ Modifier public BasicType boolean getAllowLeadingWildcard LocalVariableDeclaration ReferenceType AllowLeadingWildcardAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType AllowLeadingWildcardAttribute addAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr isAllowLeadingWildcard MethodDeclaration /**
   * Get the minimal similarity for fuzzy queries.
   */ Modifier public BasicType float getFuzzyMinSim LocalVariableDeclaration ReferenceType FuzzyAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType FuzzyAttribute addAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr getFuzzyMinSimilarity MethodDeclaration /**
   * Get the prefix length for fuzzy queries.
   * 
   * @return Returns the fuzzyPrefixLength.
   */ Modifier public BasicType int getFuzzyPrefixLength LocalVariableDeclaration ReferenceType FuzzyAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType FuzzyAttribute addAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr getPrefixLength MethodDeclaration /**
   * Gets the default slop for phrases.
   */ Modifier public BasicType int getPhraseSlop LocalVariableDeclaration ReferenceType DefaultPhraseSlopAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType DefaultPhraseSlopAttribute addAttribute getQueryConfigHandler ReturnStatement MethodInvocation attr getDefaultPhraseSlop MethodDeclaration /**
   * Set the minimum similarity for fuzzy queries. Default is defined on
   * {@link FuzzyQuery#defaultMinSimilarity}.
   */ Modifier public setFuzzyMinSim FormalParameter BasicType float fuzzyMinSim LocalVariableDeclaration ReferenceType FuzzyAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType FuzzyAttribute addAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference fuzzyMinSim setFuzzyMinSimilarity MethodDeclaration Modifier public setFieldsBoost FormalParameter ReferenceType Map TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Float boosts LocalVariableDeclaration ReferenceType FieldBoostMapAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType FieldBoostMapAttribute addAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference boosts setFieldBoostMap MethodDeclaration Modifier public setDateResolution FormalParameter ReferenceType DateTools ReferenceType Resolution dateResolution LocalVariableDeclaration ReferenceType DateResolutionAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType DateResolutionAttribute addAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference dateResolution setDateResolution MethodDeclaration Modifier public setDateResolution FormalParameter ReferenceType Map TypeArgument ReferenceType CharSequence TypeArgument ReferenceType DateTools ReferenceType Resolution dateRes LocalVariableDeclaration ReferenceType FieldDateResolutionMapAttribute VariableDeclarator attr MethodInvocation MethodInvocation ClassReference ReferenceType FieldDateResolutionMapAttribute addAttribute getQueryConfigHandler StatementExpression MethodInvocation attr MemberReference dateRes setFieldDateResolutionMap ReferenceType QueryParserHelper",0
27,27,"CompilationUnit PackageDeclaration org.apache.lucene.index ClassDeclaration Modifier final /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ CharBlockPool FieldDeclaration Modifier public BasicType char VariableDeclarator buffers ArrayCreator BasicType char Literal 10 FieldDeclaration BasicType int VariableDeclarator numBuffer FieldDeclaration BasicType int VariableDeclarator bufferUpto Literal - 1 FieldDeclaration Modifier public BasicType int VariableDeclarator charUpto MemberReference DocumentsWriter CHAR_BLOCK_SIZE FieldDeclaration Modifier public BasicType char VariableDeclarator buffer FieldDeclaration Modifier public BasicType int VariableDeclarator charOffset MemberReference - DocumentsWriter CHAR_BLOCK_SIZE FieldDeclaration Modifier private final ReferenceType DocumentsWriter VariableDeclarator docWriter ConstructorDeclaration Modifier public CharBlockPool FormalParameter ReferenceType DocumentsWriter docWriter StatementExpression Assignment This MemberReference docWriter MemberReference docWriter = MethodDeclaration Modifier public reset StatementExpression MethodInvocation docWriter MemberReference buffers BinaryOperation + Literal 1 MemberReference bufferUpto recycleCharBlocks StatementExpression Assignment MemberReference bufferUpto Literal - 1 = StatementExpression Assignment MemberReference charUpto MemberReference DocumentsWriter CHAR_BLOCK_SIZE = StatementExpression Assignment MemberReference charOffset MemberReference - DocumentsWriter CHAR_BLOCK_SIZE = MethodDeclaration Modifier public nextBuffer IfStatement BinaryOperation == BinaryOperation + Literal 1 MemberReference bufferUpto MemberReference buffers length BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator newBuffers ArrayCreator BasicType char Cast BasicType int BinaryOperation * MemberReference buffers length Literal 1.5 StatementExpression MethodInvocation System MemberReference buffers Literal 0 MemberReference newBuffers Literal 0 MemberReference buffers length arraycopy StatementExpression Assignment MemberReference buffers MemberReference newBuffers = End StatementExpression Assignment MemberReference buffer Assignment MemberReference ArraySelector BinaryOperation + Literal 1 MemberReference bufferUpto buffers MethodInvocation docWriter getCharBlock = = StatementExpression MemberReference ++ bufferUpto StatementExpression Assignment MemberReference charUpto Literal 0 = StatementExpression Assignment MemberReference charOffset MemberReference DocumentsWriter CHAR_BLOCK_SIZE +=",1
731,731,,1
529,529,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util.List ClassDeclaration Modifier public final /**
 * This {@link IndexDeletionPolicy} implementation that
 * keeps only the most recent commit and immediately removes
 * all prior commits after a new commit is done.  This is
 * the default deletion policy.
 */ KeepOnlyLastCommitDeletionPolicy MethodDeclaration /**
   * Deletes all commits except the most recent one.
   */ Modifier public onInit FormalParameter ReferenceType List TypeArgument ReferenceType IndexCommit extends commits StatementExpression MethodInvocation MemberReference commits onCommit MethodDeclaration /**
   * Deletes all commits except the most recent one.
   */ Modifier public onCommit FormalParameter ReferenceType List TypeArgument ReferenceType IndexCommit extends commits LocalVariableDeclaration BasicType int VariableDeclarator size MethodInvocation commits size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation - MemberReference size Literal 1 MemberReference ++ i BlockStatement StatementExpression MethodInvocation commits MethodInvocation delete MemberReference i get End ReferenceType IndexDeletionPolicy",0
410,410,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.analyzing Import java.io.IOException Import java.io.StringReader Import java.util.ArrayList Import java.util.List Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.queryParser.ParseException Import org.apache.lucene.search.Query Import org.apache.lucene.util.Version ClassDeclaration Modifier public /**
 * Overrides Lucene's default QueryParser so that Fuzzy-, Prefix-, Range-, and WildcardQuerys
 * are also passed through the given analyzer, but wild card characters (like <code>*</code>) 
 * don't get removed from the search terms.
 * 
 * <p><b>Warning:</b> This class should only be used with analyzers that do not use stopwords
 * or that add tokens. Also, several stemming analyzers are inappropriate: for example, GermanAnalyzer 
 * will turn <code>H&auml;user</code> into <code>hau</code>, but <code>H?user</code> will 
 * become <code>h?user</code> when using this parser and thus no match would be found (i.e.
 * using this parser will be no improvement over QueryParser in such cases). 
 *
 * @version $Revision$, $Date$
 */ AnalyzingQueryParser ConstructorDeclaration Modifier public /**
   * Constructs a query parser.
   * @param field    the default field for query terms.
   * @param analyzer used to find terms in the query text.
   */ AnalyzingQueryParser FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType String field FormalParameter ReferenceType Analyzer analyzer StatementExpression SuperConstructorInvocation MemberReference matchVersion MemberReference field MemberReference analyzer MethodDeclaration /**
   * Called when parser
   * parses an input term token that contains one or more wildcard
   * characters (like <code>*</code>), but is not a prefix term token (one
   * that has just a single * character at the end).
   * <p>
   * Example: will be called for <code>H?user</code> or for <code>H*user</code> 
   * but not for <code>*user</code>.
   * <p>
   * Depending on analyzer and settings, a wildcard term may (most probably will)
   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.
   * <p>
   * Overrides super class, by passing terms through analyzer.
   *
   * @param  field   Name of the field query will use.
   * @param  termStr Term token that contains one or more wild card
   *                 characters (? or *), but is not simple prefix term
   *
   * @return Resulting {@link Query} built for the term
   * @throws ParseException
   */ Modifier protected Annotation Override ReferenceType Query getWildcardQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String termStr ParseException LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator tlist ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator wlist ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String LocalVariableDeclaration BasicType boolean VariableDeclarator isWithinToken BinaryOperation && MethodInvocation ! termStr Literal ""?"" startsWith MethodInvocation ! termStr Literal ""*"" startsWith LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator tmpBuffer ClassCreator ReferenceType StringBuilder LocalVariableDeclaration BasicType char VariableDeclarator chars MethodInvocation termStr toCharArray ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation termStr length MemberReference ++ i BlockStatement IfStatement BinaryOperation || BinaryOperation == MemberReference ArraySelector MemberReference i chars Literal '?' BinaryOperation == MemberReference ArraySelector MemberReference i chars Literal '*' BlockStatement IfStatement MemberReference isWithinToken BlockStatement StatementExpression MethodInvocation tlist MethodInvocation tmpBuffer toString add StatementExpression MethodInvocation tmpBuffer Literal 0 setLength End StatementExpression Assignment MemberReference isWithinToken Literal false = BlockStatement IfStatement MemberReference ! isWithinToken BlockStatement StatementExpression MethodInvocation wlist MethodInvocation tmpBuffer toString add StatementExpression MethodInvocation tmpBuffer Literal 0 setLength End StatementExpression Assignment MemberReference isWithinToken Literal true = End StatementExpression MethodInvocation tmpBuffer MemberReference ArraySelector MemberReference i chars append End IfStatement MemberReference isWithinToken BlockStatement StatementExpression MethodInvocation tlist MethodInvocation tmpBuffer toString add BlockStatement StatementExpression MethodInvocation wlist MethodInvocation tmpBuffer toString add End LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator source MethodInvocation MethodInvocation MemberReference field ClassCreator ReferenceType StringReader MemberReference termStr tokenStream getAnalyzer LocalVariableDeclaration ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation source ClassReference ReferenceType TermAttribute addAttribute LocalVariableDeclaration BasicType int VariableDeclarator countTokens Literal 0 WhileStatement Literal true BlockStatement TryStatement IfStatement MethodInvocation ! source incrementToken BreakStatement End CatchClause CatchClauseParameter IOException e BreakStatement LocalVariableDeclaration ReferenceType String VariableDeclarator term MethodInvocation termAtt term IfStatement Literal ! MethodInvocation MemberReference term equals """" BlockStatement TryStatement StatementExpression MethodInvocation tlist MemberReference ++ countTokens MemberReference term set CatchClause CatchClauseParameter IndexOutOfBoundsException ioobe StatementExpression Assignment MemberReference countTokens Literal - 1 = End End TryStatement StatementExpression MethodInvocation source close CatchClause CatchClauseParameter IOException e IfStatement BinaryOperation != MemberReference countTokens MethodInvocation tlist size BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + BinaryOperation + Literal ""Cannot build WildcardQuery with analyzer "" MethodInvocation MethodInvocation getClass getAnalyzer Literal "" - tokens added or lost"" End IfStatement BinaryOperation == MethodInvocation tlist size Literal 0 BlockStatement ReturnStatement Literal null IfStatement BinaryOperation == MethodInvocation tlist size Literal 1 BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference wlist Literal null BinaryOperation == MethodInvocation wlist size Literal 1 BlockStatement ReturnStatement SuperMethodInvocation MemberReference field BinaryOperation + MethodInvocation tlist Literal 0 get MethodInvocation wlist MethodInvocation toString Literal 0 get getWildcardQuery BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""getWildcardQuery called without wildcard"" End BlockStatement LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation tlist size MemberReference ++ i BlockStatement StatementExpression MethodInvocation sb MethodInvocation tlist MemberReference i get append IfStatement BinaryOperation && BinaryOperation != MemberReference wlist Literal null BinaryOperation > MethodInvocation wlist size MemberReference i BlockStatement StatementExpression MethodInvocation sb MethodInvocation wlist MemberReference i get append End End ReturnStatement SuperMethodInvocation MemberReference field MethodInvocation sb toString getWildcardQuery End End MethodDeclaration /**
   * Called when parser parses an input term
   * token that uses prefix notation; that is, contains a single '*' wildcard
   * character as its last character. Since this is a special case
   * of generic wildcard term, and such a query can be optimized easily,
   * this usually results in a different query object.
   * <p>
   * Depending on analyzer and settings, a prefix term may (most probably will)
   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.
   * <p>
   * Overrides super class, by passing terms through analyzer.
   *
   * @param  field   Name of the field query will use.
   * @param  termStr Term token to use for building term for the query
   *                 (<b>without</b> trailing '*' character!)
   *
   * @return Resulting {@link Query} built for the term
   * @throws ParseException
   */ Modifier protected Annotation Override ReferenceType Query getPrefixQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String termStr ParseException LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator source MethodInvocation MethodInvocation MemberReference field ClassCreator ReferenceType StringReader MemberReference termStr tokenStream getAnalyzer LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator tlist ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation source ClassReference ReferenceType TermAttribute addAttribute WhileStatement Literal true BlockStatement TryStatement IfStatement MethodInvocation ! source incrementToken BreakStatement End CatchClause CatchClauseParameter IOException e BreakStatement StatementExpression MethodInvocation tlist MethodInvocation termAtt term add End TryStatement StatementExpression MethodInvocation source close CatchClause CatchClauseParameter IOException e IfStatement BinaryOperation == MethodInvocation tlist size Literal 1 BlockStatement ReturnStatement SuperMethodInvocation MemberReference field MethodInvocation tlist Literal 0 get getPrefixQuery BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + BinaryOperation + Literal ""Cannot build PrefixQuery with analyzer "" MethodInvocation MethodInvocation getClass getAnalyzer TernaryExpression BinaryOperation > MethodInvocation tlist size Literal 1 Literal "" - token(s) added"" Literal "" - token consumed"" End MethodDeclaration /**
   * Called when parser parses an input term token that has the fuzzy suffix (~) appended.
   * <p>
   * Depending on analyzer and settings, a fuzzy term may (most probably will)
   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.
   * <p>
   * Overrides super class, by passing terms through analyzer.
   *
   * @param field Name of the field query will use.
   * @param termStr Term token to use for building term for the query
   *
   * @return Resulting {@link Query} built for the term
   * @exception ParseException
   */ Modifier protected Annotation Override ReferenceType Query getFuzzyQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String termStr FormalParameter BasicType float minSimilarity ParseException LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator source MethodInvocation MethodInvocation MemberReference field ClassCreator ReferenceType StringReader MemberReference termStr tokenStream getAnalyzer LocalVariableDeclaration ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation source ClassReference ReferenceType TermAttribute addAttribute LocalVariableDeclaration ReferenceType String VariableDeclarator nextToken Literal null LocalVariableDeclaration BasicType boolean VariableDeclarator multipleTokens Literal false TryStatement IfStatement MethodInvocation source incrementToken BlockStatement StatementExpression Assignment MemberReference nextToken MethodInvocation termAtt term = End StatementExpression Assignment MemberReference multipleTokens MethodInvocation source incrementToken = CatchClause CatchClauseParameter IOException e StatementExpression Assignment MemberReference nextToken Literal null = TryStatement StatementExpression MethodInvocation source close CatchClause CatchClauseParameter IOException e IfStatement MemberReference multipleTokens BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + BinaryOperation + Literal ""Cannot build FuzzyQuery with analyzer "" MethodInvocation MethodInvocation getClass getAnalyzer Literal "" - tokens were added"" End ReturnStatement TernaryExpression BinaryOperation == MemberReference nextToken Literal null Literal null SuperMethodInvocation MemberReference field MemberReference nextToken MemberReference minSimilarity getFuzzyQuery MethodDeclaration /**
   * Overrides super class, by passing terms through analyzer.
   * @exception ParseException
   */ Modifier protected Annotation Override ReferenceType Query getRangeQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String part1 FormalParameter ReferenceType String part2 FormalParameter BasicType boolean inclusive ParseException LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator source MethodInvocation MethodInvocation MemberReference field ClassCreator ReferenceType StringReader MemberReference part1 tokenStream getAnalyzer LocalVariableDeclaration ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation source ClassReference ReferenceType TermAttribute addAttribute LocalVariableDeclaration BasicType boolean VariableDeclarator multipleTokens Literal false TryStatement IfStatement MethodInvocation source incrementToken BlockStatement StatementExpression Assignment MemberReference part1 MethodInvocation termAtt term = End StatementExpression Assignment MemberReference multipleTokens MethodInvocation source incrementToken = CatchClause CatchClauseParameter IOException e TryStatement StatementExpression MethodInvocation source close CatchClause CatchClauseParameter IOException e IfStatement MemberReference multipleTokens BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + BinaryOperation + Literal ""Cannot build RangeQuery with analyzer "" MethodInvocation MethodInvocation getClass getAnalyzer Literal "" - tokens were added to part1"" End StatementExpression Assignment MemberReference source MethodInvocation MethodInvocation MemberReference field ClassCreator ReferenceType StringReader MemberReference part2 tokenStream getAnalyzer = StatementExpression Assignment MemberReference termAtt MethodInvocation source ClassReference ReferenceType TermAttribute addAttribute = TryStatement IfStatement MethodInvocation source incrementToken BlockStatement StatementExpression Assignment MemberReference part2 MethodInvocation termAtt term = End StatementExpression Assignment MemberReference multipleTokens MethodInvocation source incrementToken = CatchClause CatchClauseParameter IOException e TryStatement StatementExpression MethodInvocation source close CatchClause CatchClauseParameter IOException e IfStatement MemberReference multipleTokens BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + BinaryOperation + Literal ""Cannot build RangeQuery with analyzer "" MethodInvocation MethodInvocation getClass getAnalyzer Literal "" - tokens were added to part2"" End ReturnStatement SuperMethodInvocation MemberReference field MemberReference part1 MemberReference part2 MemberReference inclusive getRangeQuery ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType queryParser ReferenceType QueryParser",0
12,12,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.IOException Import java.io.Closeable Import org.apache.lucene.document.Document Import org.apache.lucene.document.Field Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.util.Attribute Import org.apache.lucene.util.AttributeImpl Import org.apache.lucene.util.AttributeSource ClassDeclaration Modifier public abstract /**
 * A <code>TokenStream</code> enumerates the sequence of tokens, either from
 * {@link Field}s of a {@link Document} or from query text.
 * <p>
 * This is an abstract class; concrete subclasses are:
 * <ul>
 * <li>{@link Tokenizer}, a <code>TokenStream</code> whose input is a Reader; and
 * <li>{@link TokenFilter}, a <code>TokenStream</code> whose input is another
 * <code>TokenStream</code>.
 * </ul>
 * A new <code>TokenStream</code> API has been introduced with Lucene 2.9. This API
 * has moved from being {@link Token}-based to {@link Attribute}-based. While
 * {@link Token} still exists in 2.9 as a convenience class, the preferred way
 * to store the information of a {@link Token} is to use {@link AttributeImpl}s.
 * <p>
 * <code>TokenStream</code> now extends {@link AttributeSource}, which provides
 * access to all of the token {@link Attribute}s for the <code>TokenStream</code>.
 * Note that only one instance per {@link AttributeImpl} is created and reused
 * for every token. This approach reduces object creation and allows local
 * caching of references to the {@link AttributeImpl}s. See
 * {@link #incrementToken()} for further details.
 * <p>
 * <b>The workflow of the new <code>TokenStream</code> API is as follows:</b>
 * <ol>
 * <li>Instantiation of <code>TokenStream</code>/{@link TokenFilter}s which add/get
 * attributes to/from the {@link AttributeSource}.
 * <li>The consumer calls {@link TokenStream#reset()}.
 * <li>The consumer retrieves attributes from the stream and stores local
 * references to all attributes it wants to access.
 * <li>The consumer calls {@link #incrementToken()} until it returns false
 * consuming the attributes after each call.
 * <li>The consumer calls {@link #end()} so that any end-of-stream operations
 * can be performed.
 * <li>The consumer calls {@link #close()} to release any resource when finished
 * using the <code>TokenStream</code>.
 * </ol>
 * To make sure that filters and consumers know which attributes are available,
 * the attributes must be added during instantiation. Filters and consumers are
 * not required to check for availability of attributes in
 * {@link #incrementToken()}.
 * <p>
 * You can find some example code for the new API in the analysis package level
 * Javadoc.
 * <p>
 * Sometimes it is desirable to capture a current state of a <code>TokenStream</code>,
 * e.g., for buffering purposes (see {@link CachingTokenFilter},
 * {@link TeeSinkTokenFilter}). For this usecase
 * {@link AttributeSource#captureState} and {@link AttributeSource#restoreState}
 * can be used.
 */ TokenStream ConstructorDeclaration Modifier protected /**
   * A TokenStream using the default attribute factory.
   */ TokenStream StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier protected /**
   * A TokenStream that uses the same attributes as the supplied one.
   */ TokenStream FormalParameter ReferenceType AttributeSource input StatementExpression SuperConstructorInvocation MemberReference input ConstructorDeclaration Modifier protected /**
   * A TokenStream using the supplied AttributeFactory for creating new {@link Attribute} instances.
   */ TokenStream FormalParameter ReferenceType AttributeFactory factory StatementExpression SuperConstructorInvocation MemberReference factory MethodDeclaration /**
   * Consumers (i.e., {@link IndexWriter}) use this method to advance the stream to
   * the next token. Implementing classes must implement this method and update
   * the appropriate {@link AttributeImpl}s with the attributes of the next
   * token.
   * <P>
   * The producer must make no assumptions about the attributes after the method
   * has been returned: the caller may arbitrarily change it. If the producer
   * needs to preserve the state for subsequent calls, it can use
   * {@link #captureState} to create a copy of the current attribute state.
   * <p>
   * This method is called for every token of a document, so an efficient
   * implementation is crucial for good performance. To avoid calls to
   * {@link #addAttribute(Class)} and {@link #getAttribute(Class)},
   * references to all {@link AttributeImpl}s that this stream uses should be
   * retrieved during instantiation.
   * <p>
   * To ensure that filters and consumers know which attributes are available,
   * the attributes must be added during instantiation. Filters and consumers
   * are not required to check for availability of attributes in
   * {@link #incrementToken()}.
   * 
   * @return false for end of stream; true otherwise
   */ Modifier public abstract BasicType boolean incrementToken IOException MethodDeclaration /**
   * This method is called by the consumer after the last token has been
   * consumed, after {@link #incrementToken()} returned <code>false</code>
   * (using the new <code>TokenStream</code> API). Streams implementing the old API
   * should upgrade to use this feature.
   * <p/>
   * This method can be used to perform any end-of-stream operations, such as
   * setting the final offset of a stream. The final offset of a stream might
   * differ from the offset of the last token eg in case one or more whitespaces
   * followed after the last token, but a {@link WhitespaceTokenizer} was used.
   * 
   * @throws IOException
   */ Modifier public end IOException MethodDeclaration /**
   * Resets this stream to the beginning. This is an optional operation, so
   * subclasses may or may not implement this method. {@link #reset()} is not needed for
   * the standard indexing process. However, if the tokens of a
   * <code>TokenStream</code> are intended to be consumed more than once, it is
   * necessary to implement {@link #reset()}. Note that if your TokenStream
   * caches tokens and feeds them back again after a reset, it is imperative
   * that you clone the tokens when you store them away (on the first pass) as
   * well as when you return them (on future passes after {@link #reset()}).
   */ Modifier public reset IOException MethodDeclaration /** Releases resources associated with this stream. */ Modifier public close IOException ReferenceType AttributeSource ReferenceType Closeable",0
320,320,"CompilationUnit PackageDeclaration org.apache.lucene.swing.models Import java.io.IOException Import java.util.ArrayList Import javax.swing.AbstractListModel Import javax.swing.ListModel Import javax.swing.event.ListDataEvent Import javax.swing.event.ListDataListener Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.WhitespaceAnalyzer Import org.apache.lucene.document.Document Import org.apache.lucene.document.Field Import org.apache.lucene.document.Fieldable Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.queryParser.MultiFieldQueryParser Import org.apache.lucene.search.Collector Import org.apache.lucene.search.IndexSearcher Import org.apache.lucene.search.Query Import org.apache.lucene.search.ScoreDoc Import org.apache.lucene.search.Scorer Import org.apache.lucene.store.RAMDirectory Import org.apache.lucene.util.Version ClassDeclaration Modifier public /**
 * See table searcher explanation.
 *
 */ ListSearcher FieldDeclaration Modifier private ReferenceType ListModel VariableDeclarator listModel FieldDeclaration /**
     * The reference links between the decorated ListModel
     * and this list model based on search criteria
     */ Modifier private ReferenceType ArrayList TypeArgument ReferenceType Integer VariableDeclarator rowToModelIndex ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Integer FieldDeclaration /**
     * In memory lucene index
     */ Modifier private ReferenceType RAMDirectory VariableDeclarator directory FieldDeclaration /**
     * Cached lucene analyzer
     */ Modifier private ReferenceType Analyzer VariableDeclarator analyzer FieldDeclaration /**
     * Links between this list model and the decorated list model
     * are maintained through links based on row number. This is a
     * key constant to denote ""row number"" for indexing
     */ Modifier private final static ReferenceType String VariableDeclarator ROW_NUMBER Literal ""ROW_NUMBER"" FieldDeclaration /**
     * Since we only have one field, unlike lists with multiple
     * fields -- we are just using a constant to denote field name.
     * This is most likely unnecessary and should be removed at
     * a later date
     */ Modifier private final static ReferenceType String VariableDeclarator FIELD_NAME Literal ""FIELD_NAME"" FieldDeclaration /**
     * Cache the current search String. Also used internally to
     * key whether there is an active search running or not. i.e. if
     * searchString is null, there is no active search.
     */ Modifier private ReferenceType String VariableDeclarator searchString Literal null FieldDeclaration Modifier private ReferenceType ListDataListener VariableDeclarator listModelListener ConstructorDeclaration Modifier public ListSearcher FormalParameter ReferenceType ListModel newModel StatementExpression Assignment MemberReference analyzer ClassCreator ReferenceType WhitespaceAnalyzer = StatementExpression MethodInvocation MemberReference newModel setListModel StatementExpression Assignment MemberReference listModelListener ClassCreator ReferenceType ListModelHandler = StatementExpression MethodInvocation newModel MemberReference listModelListener addListDataListener StatementExpression MethodInvocation clearSearchingState MethodDeclaration Modifier private setListModel FormalParameter ReferenceType ListModel newModel IfStatement BinaryOperation != MemberReference newModel Literal null BlockStatement StatementExpression MethodInvocation newModel MemberReference listModelListener removeListDataListener End StatementExpression Assignment MemberReference listModel MemberReference newModel = IfStatement BinaryOperation != MemberReference listModel Literal null BlockStatement StatementExpression MethodInvocation listModel MemberReference listModelListener addListDataListener End StatementExpression MethodInvocation reindex StatementExpression MethodInvocation This Literal 0 MethodInvocation getSize fireContentsChanged MethodDeclaration Modifier private reindex TryStatement StatementExpression Assignment MemberReference directory ClassCreator ReferenceType RAMDirectory = LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator writer ClassCreator ReferenceType IndexWriter MemberReference directory MemberReference analyzer Literal true MemberReference IndexWriter.MaxFieldLength LIMITED ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator row Literal 0 BinaryOperation < MemberReference row MethodInvocation listModel getSize MemberReference ++ row BlockStatement LocalVariableDeclaration ReferenceType Document VariableDeclarator document ClassCreator ReferenceType Document StatementExpression MethodInvocation document ClassCreator ReferenceType Field MemberReference ROW_NUMBER BinaryOperation + Literal """" MemberReference row MemberReference Field.Store YES MemberReference Field.Index ANALYZED add StatementExpression MethodInvocation document ClassCreator ReferenceType Field MemberReference FIELD_NAME MethodInvocation String MethodInvocation toLowerCase MethodInvocation listModel MemberReference row getElementAt valueOf MemberReference Field.Store YES MemberReference Field.Index ANALYZED add StatementExpression MethodInvocation writer MemberReference document addDocument End StatementExpression MethodInvocation writer optimize StatementExpression MethodInvocation writer close CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace MethodDeclaration /**
     * Run a new search.
     *
     * @param searchString Any valid lucene search string
     */ Modifier public search FormalParameter ReferenceType String searchString IfStatement BinaryOperation || BinaryOperation == MemberReference searchString Literal null MethodInvocation searchString Literal """" equals BlockStatement StatementExpression MethodInvocation clearSearchingState StatementExpression MethodInvocation This Literal 0 MethodInvocation getSize fireContentsChanged ReturnStatement End TryStatement StatementExpression Assignment This MemberReference searchString MemberReference searchString = LocalVariableDeclaration ReferenceType IndexSearcher VariableDeclarator is ClassCreator ReferenceType IndexSearcher MemberReference directory Literal true LocalVariableDeclaration ReferenceType String VariableDeclarator fields ArrayInitializer MemberReference FIELD_NAME LocalVariableDeclaration ReferenceType MultiFieldQueryParser VariableDeclarator parser ClassCreator ReferenceType MultiFieldQueryParser MemberReference Version LUCENE_CURRENT MemberReference fields MemberReference analyzer LocalVariableDeclaration ReferenceType Query VariableDeclarator query MethodInvocation parser MemberReference searchString parse StatementExpression MethodInvocation MemberReference is MemberReference query resetSearchResults CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace StatementExpression MethodInvocation This Literal 0 MethodInvocation getSize fireContentsChanged ClassDeclaration Modifier final static CountingCollector FieldDeclaration Modifier public BasicType int VariableDeclarator numHits Literal 0 MethodDeclaration Modifier public Annotation Override setScorer FormalParameter ReferenceType Scorer scorer IOException MethodDeclaration Modifier public Annotation Override collect FormalParameter BasicType int doc IOException StatementExpression MemberReference ++ numHits MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase MethodDeclaration Modifier public Annotation Override BasicType boolean acceptsDocsOutOfOrder ReturnStatement Literal true ReferenceType Collector MethodDeclaration /**
     *
     * @param hits The new result set to set this list to.
     */ Modifier private resetSearchResults FormalParameter ReferenceType IndexSearcher searcher FormalParameter ReferenceType Query query TryStatement StatementExpression MethodInvocation rowToModelIndex clear LocalVariableDeclaration ReferenceType CountingCollector VariableDeclarator countingCollector ClassCreator ReferenceType CountingCollector StatementExpression MethodInvocation searcher MemberReference query MemberReference countingCollector search LocalVariableDeclaration ReferenceType ScoreDoc VariableDeclarator hits MethodInvocation searcher MemberReference scoreDocs MemberReference query MemberReference countingCollector numHits search ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator t Literal 0 BinaryOperation < MemberReference t MemberReference hits length MemberReference ++ t BlockStatement LocalVariableDeclaration ReferenceType Document VariableDeclarator document MethodInvocation searcher MemberReference ArraySelector MemberReference t MemberReference doc hits doc LocalVariableDeclaration ReferenceType Fieldable VariableDeclarator field MethodInvocation document MemberReference ROW_NUMBER getField StatementExpression MethodInvocation rowToModelIndex MethodInvocation Integer MethodInvocation field stringValue valueOf add End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace MethodDeclaration /**
     * @return The current lucene analyzer
     */ Modifier public ReferenceType Analyzer getAnalyzer ReturnStatement MemberReference analyzer MethodDeclaration /**
     * @param analyzer The new analyzer to use
     */ Modifier public setAnalyzer FormalParameter ReferenceType Analyzer analyzer StatementExpression Assignment This MemberReference analyzer MemberReference analyzer = StatementExpression MethodInvocation reindex IfStatement MethodInvocation isSearching BlockStatement StatementExpression MethodInvocation MemberReference searchString search End MethodDeclaration Modifier private BasicType boolean isSearching ReturnStatement BinaryOperation != MemberReference searchString Literal null MethodDeclaration Modifier private clearSearchingState StatementExpression Assignment MemberReference searchString Literal null = StatementExpression MethodInvocation rowToModelIndex clear ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator t Literal 0 BinaryOperation < MemberReference t MethodInvocation listModel getSize MemberReference ++ t BlockStatement StatementExpression MethodInvocation rowToModelIndex MemberReference t add End MethodDeclaration Modifier private BasicType int getModelRow FormalParameter BasicType int row ReturnStatement MethodInvocation rowToModelIndex MemberReference row get MethodDeclaration Modifier public BasicType int getSize ReturnStatement TernaryExpression BinaryOperation == MemberReference listModel Literal null Literal 0 MethodInvocation rowToModelIndex size MethodDeclaration Modifier public ReferenceType Object getElementAt FormalParameter BasicType int index ReturnStatement MethodInvocation listModel MethodInvocation MemberReference index getModelRow getElementAt ClassDeclaration ListModelHandler MethodDeclaration Modifier public contentsChanged FormalParameter ReferenceType ListDataEvent e StatementExpression MethodInvocation somethingChanged MethodDeclaration Modifier public intervalAdded FormalParameter ReferenceType ListDataEvent e StatementExpression MethodInvocation somethingChanged MethodDeclaration Modifier public intervalRemoved FormalParameter ReferenceType ListDataEvent e StatementExpression MethodInvocation somethingChanged MethodDeclaration Modifier private somethingChanged IfStatement MethodInvocation ! isSearching BlockStatement StatementExpression MethodInvocation clearSearchingState StatementExpression MethodInvocation reindex StatementExpression MethodInvocation This ListSearcher Literal 0 MethodInvocation getSize fireContentsChanged ReturnStatement End StatementExpression MethodInvocation reindex StatementExpression MethodInvocation MemberReference searchString search StatementExpression MethodInvocation This ListSearcher Literal 0 MethodInvocation getSize fireContentsChanged ReturnStatement ReferenceType ListDataListener ReferenceType AbstractListModel",0
822,822,,0
271,271,"CompilationUnit PackageDeclaration org.apache.lucene.ant Import org.apache.lucene.document.Document Import org.apache.lucene.document.Field Import java.io.BufferedReader Import java.io.File Import java.io.FileReader Import java.io.IOException Import java.io.StringWriter ClassDeclaration Modifier public /**
 *  A utility for making Lucene Documents from a File.
 *
 *@since      December 6, 2001
 *TODO:       Fix JavaDoc comments here
 */ TextDocument FieldDeclaration Modifier private ReferenceType String VariableDeclarator contents ConstructorDeclaration Modifier public /**
     *  Constructor for the TextDocument object
     *
     *@param  file             Description of Parameter
     *@exception  IOException  Description of Exception
     */ TextDocument FormalParameter ReferenceType File file IOException LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType FileReader MemberReference file LocalVariableDeclaration ReferenceType StringWriter VariableDeclarator sw ClassCreator ReferenceType StringWriter LocalVariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation br readLine WhileStatement BinaryOperation != MemberReference line Literal null BlockStatement StatementExpression MethodInvocation sw MemberReference line write StatementExpression Assignment MemberReference line MethodInvocation br readLine = End StatementExpression MethodInvocation br close StatementExpression Assignment MemberReference contents MethodInvocation sw toString = StatementExpression MethodInvocation sw close MethodDeclaration /**
     *  Makes a document for a File. <p>
     *
     *  The document has a single field:
     *  <ul>
     *    <li> <code>contents</code>--containing the full contents
     *    of the file, as a Text field;
     *
     *@param  f                Description of Parameter
     *@return                  Description of the Returned Value
     *@exception  IOException  Description of Exception
     */ Modifier public static ReferenceType Document Document FormalParameter ReferenceType File f IOException LocalVariableDeclaration ReferenceType TextDocument VariableDeclarator textDoc ClassCreator ReferenceType TextDocument MemberReference f LocalVariableDeclaration ReferenceType Document VariableDeclarator doc ClassCreator ReferenceType Document StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""title"" MethodInvocation f getName MemberReference Field.Store YES MemberReference Field.Index ANALYZED add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""contents"" MethodInvocation textDoc getContents MemberReference Field.Store YES MemberReference Field.Index ANALYZED add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""rawcontents"" MethodInvocation textDoc getContents MemberReference Field.Store YES MemberReference Field.Index NO add ReturnStatement MemberReference doc MethodDeclaration /**
     *@return    The contents value
     *@todo      finish this method
     */ Modifier public ReferenceType String getContents ReturnStatement MemberReference contents",1
808,808,,0
701,701,,0
711,711,,0
436,436,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.benchmark.quality.utils Import java.io.File Import java.io.IOException Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermEnum Import org.apache.lucene.store.Directory Import org.apache.lucene.store.FSDirectory Import org.apache.lucene.util.PriorityQueue ClassDeclaration Modifier public /**
 * Suggest Quality queries based on an index contents.
 * Utility class, used for making quality test benchmarks.
 */ QualityQueriesFinder FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator newline MethodInvocation System Literal ""line.separator"" getProperty FieldDeclaration Modifier private ReferenceType Directory VariableDeclarator dir ConstructorDeclaration Modifier private /**
   * Constructor over a directory containing the index.
   * @param dir directory containing the index we search for the quality test. 
   */ QualityQueriesFinder FormalParameter ReferenceType Directory dir StatementExpression Assignment This MemberReference dir MemberReference dir = MethodDeclaration /**
   * @param args {index-dir}
   * @throws IOException  if cannot access the index.
   */ Modifier public static main FormalParameter ReferenceType String args IOException IfStatement BinaryOperation < MemberReference args length Literal 1 BlockStatement StatementExpression MethodInvocation System.err Literal ""Usage: java QualityQueriesFinder <index-dir>"" println StatementExpression MethodInvocation System Literal 1 exit End LocalVariableDeclaration ReferenceType QualityQueriesFinder VariableDeclarator qqf ClassCreator ReferenceType QualityQueriesFinder MethodInvocation FSDirectory ClassCreator ReferenceType File MemberReference ArraySelector Literal 0 args open LocalVariableDeclaration ReferenceType String VariableDeclarator q MethodInvocation qqf Literal ""body"" Literal 20 bestQueries ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference q length MemberReference ++ i BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + MemberReference newline MethodInvocation MemberReference i MemberReference ArraySelector MemberReference i q Literal null Literal null formatQueryAsTrecTopic println End MethodDeclaration Modifier private ReferenceType String bestQueries FormalParameter ReferenceType String field FormalParameter BasicType int numQueries IOException LocalVariableDeclaration ReferenceType String VariableDeclarator words MethodInvocation Literal ""body"" BinaryOperation * Literal 4 MemberReference numQueries bestTerms LocalVariableDeclaration BasicType int VariableDeclarator n MemberReference words length LocalVariableDeclaration BasicType int VariableDeclarator m BinaryOperation / MemberReference n Literal 4 LocalVariableDeclaration ReferenceType String VariableDeclarator res ArrayCreator ReferenceType String MemberReference m ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference res length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i res BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference ArraySelector MemberReference i words Literal "" "" MemberReference ArraySelector BinaryOperation + MemberReference m MemberReference i words Literal ""  "" MemberReference ArraySelector BinaryOperation - BinaryOperation - BinaryOperation - MemberReference n Literal 1 MemberReference m MemberReference i words Literal "" "" MemberReference ArraySelector BinaryOperation - BinaryOperation - MemberReference n Literal 1 MemberReference i words = End ReturnStatement MemberReference res MethodDeclaration Modifier private static ReferenceType String formatQueryAsTrecTopic FormalParameter BasicType int qnum FormalParameter ReferenceType String title FormalParameter ReferenceType String description FormalParameter ReferenceType String narrative ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<top>"" MemberReference newline Literal ""<num> Number: "" MemberReference qnum MemberReference newline MemberReference newline Literal ""<title> "" TernaryExpression BinaryOperation == MemberReference title Literal null Literal """" MemberReference title MemberReference newline MemberReference newline Literal ""<desc> Description:"" MemberReference newline TernaryExpression BinaryOperation == MemberReference description Literal null Literal """" MemberReference description MemberReference newline MemberReference newline Literal ""<narr> Narrative:"" MemberReference newline TernaryExpression BinaryOperation == MemberReference narrative Literal null Literal """" MemberReference narrative MemberReference newline MemberReference newline Literal ""</top>"" MethodDeclaration Modifier private ReferenceType String bestTerms FormalParameter ReferenceType String field FormalParameter BasicType int numTerms IOException LocalVariableDeclaration ReferenceType PriorityQueue TypeArgument ReferenceType TermDf VariableDeclarator pq ClassCreator ReferenceType TermsDfQueue MemberReference numTerms LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator ir MethodInvocation IndexReader MemberReference dir Literal true open TryStatement LocalVariableDeclaration BasicType int VariableDeclarator threshold BinaryOperation / MethodInvocation ir maxDoc Literal 10 LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator terms MethodInvocation ir ClassCreator ReferenceType Term MemberReference field Literal """" terms WhileStatement MethodInvocation terms next BlockStatement IfStatement MethodInvocation ! field MethodInvocation terms MethodInvocation field term equals BlockStatement BreakStatement End LocalVariableDeclaration BasicType int VariableDeclarator df MethodInvocation terms docFreq IfStatement BinaryOperation < MemberReference df MemberReference threshold BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator ttxt MethodInvocation terms MethodInvocation text term StatementExpression MethodInvocation pq ClassCreator ReferenceType TermDf MemberReference ttxt MemberReference df insertWithOverflow End End StatementExpression MethodInvocation ir close LocalVariableDeclaration ReferenceType String VariableDeclarator res ArrayCreator ReferenceType String MethodInvocation pq size LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 WhileStatement BinaryOperation > MethodInvocation pq size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType TermDf VariableDeclarator tdf MethodInvocation pq pop StatementExpression Assignment MemberReference ArraySelector MemberReference ++ i res MemberReference tdf word = StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference i Literal "".   word:  "" MemberReference tdf df Literal ""   "" MemberReference tdf word println End ReturnStatement MemberReference res ClassDeclaration Modifier private static TermDf FieldDeclaration ReferenceType String VariableDeclarator word FieldDeclaration BasicType int VariableDeclarator df ConstructorDeclaration TermDf FormalParameter ReferenceType String word FormalParameter BasicType int freq StatementExpression Assignment This MemberReference word MemberReference word = StatementExpression Assignment This MemberReference df MemberReference freq = ClassDeclaration Modifier private static TermsDfQueue ConstructorDeclaration TermsDfQueue FormalParameter BasicType int maxSize StatementExpression MethodInvocation MemberReference maxSize initialize MethodDeclaration Modifier protected Annotation Override BasicType boolean lessThan FormalParameter ReferenceType TermDf tf1 FormalParameter ReferenceType TermDf tf2 ReturnStatement BinaryOperation < MemberReference tf1 df MemberReference tf2 df ReferenceType PriorityQueue TypeArgument ReferenceType TermDf",0
552,552,"CompilationUnit PackageDeclaration org.apache.lucene.document Import org.apache.lucene.search.PhraseQuery Import org.apache.lucene.search.spans.SpanQuery Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.util.StringHelper ClassDeclaration Modifier public abstract /**
 *
 *
 **/ AbstractField FieldDeclaration Modifier protected ReferenceType String VariableDeclarator name Literal ""body"" FieldDeclaration Modifier protected BasicType boolean VariableDeclarator storeTermVector Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator storeOffsetWithTermVector Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator storePositionWithTermVector Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator omitNorms Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator isStored Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator isIndexed Literal true FieldDeclaration Modifier protected BasicType boolean VariableDeclarator isTokenized Literal true FieldDeclaration Modifier protected BasicType boolean VariableDeclarator isBinary Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator lazy Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator omitTermFreqAndPositions Literal false FieldDeclaration Modifier protected BasicType float VariableDeclarator boost Literal 1.0f FieldDeclaration Modifier protected ReferenceType Object VariableDeclarator fieldsData Literal null FieldDeclaration Modifier protected ReferenceType TokenStream VariableDeclarator tokenStream FieldDeclaration Modifier protected BasicType int VariableDeclarator binaryLength FieldDeclaration Modifier protected BasicType int VariableDeclarator binaryOffset ConstructorDeclaration Modifier protected AbstractField ConstructorDeclaration Modifier protected AbstractField FormalParameter ReferenceType String name FormalParameter ReferenceType Field ReferenceType Store store FormalParameter ReferenceType Field ReferenceType Index index FormalParameter ReferenceType Field ReferenceType TermVector termVector IfStatement BinaryOperation == MemberReference name Literal null ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""name cannot be null"" End StatementExpression Assignment This MemberReference name MethodInvocation StringHelper MemberReference name intern = StatementExpression Assignment This MemberReference isStored MethodInvocation store isStored = StatementExpression Assignment This MemberReference isIndexed MethodInvocation index isIndexed = StatementExpression Assignment This MemberReference isTokenized MethodInvocation index isAnalyzed = StatementExpression Assignment This MemberReference omitNorms MethodInvocation index omitNorms = StatementExpression Assignment This MemberReference isBinary Literal false = StatementExpression MethodInvocation MemberReference termVector setStoreTermVector MethodDeclaration /** Sets the boost factor hits on this field.  This value will be
   * multiplied into the score of all hits on this this field of this
   * document.
   *
   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document
   * containing this field.  If a document has multiple fields with the same
   * name, all such values are multiplied together.  This product is then
   * used to compute the norm factor for the field.  By
   * default, in the {@link
   * org.apache.lucene.search.Similarity#computeNorm(String,
   * FieldInvertState)} method, the boost value is multipled
   * by the {@link
   * org.apache.lucene.search.Similarity#lengthNorm(String,
   * int)} and then
   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the
   * index.  One should attempt to ensure that this product does not overflow
   * the range of that encoding.
   *
   * @see org.apache.lucene.document.Document#setBoost(float)
   * @see org.apache.lucene.search.Similarity#computeNorm(String, org.apache.lucene.index.FieldInvertState)
   * @see org.apache.lucene.search.Similarity#encodeNorm(float)
   */ Modifier public setBoost FormalParameter BasicType float boost StatementExpression Assignment This MemberReference boost MemberReference boost = MethodDeclaration /** Returns the boost factor for hits for this field.
   *
   * <p>The default value is 1.0.
   *
   * <p>Note: this value is not stored directly with the document in the index.
   * Documents returned from {@link org.apache.lucene.index.IndexReader#document(int)} and
   * {@link org.apache.lucene.search.Searcher#doc(int)} may thus not have the same value present as when
   * this field was indexed.
   *
   * @see #setBoost(float)
   */ Modifier public BasicType float getBoost ReturnStatement MemberReference boost MethodDeclaration /** Returns the name of the field as an interned string.
   * For example ""date"", ""title"", ""body"", ...
   */ Modifier public ReferenceType String name ReturnStatement MemberReference name MethodDeclaration Modifier protected setStoreTermVector FormalParameter ReferenceType Field ReferenceType TermVector termVector StatementExpression Assignment This MemberReference storeTermVector MethodInvocation termVector isStored = StatementExpression Assignment This MemberReference storePositionWithTermVector MethodInvocation termVector withPositions = StatementExpression Assignment This MemberReference storeOffsetWithTermVector MethodInvocation termVector withOffsets = MethodDeclaration /** True iff the value of the field is to be stored in the index for return
    with search hits.  It is an error for this to be true if a field is
    Reader-valued. */ Modifier public final BasicType boolean isStored ReturnStatement MemberReference isStored MethodDeclaration /** True iff the value of the field is to be indexed, so that it may be
    searched on. */ Modifier public final BasicType boolean isIndexed ReturnStatement MemberReference isIndexed MethodDeclaration /** True iff the value of the field should be tokenized as text prior to
    indexing.  Un-tokenized fields are indexed as a single word and may not be
    Reader-valued. */ Modifier public final BasicType boolean isTokenized ReturnStatement MemberReference isTokenized MethodDeclaration /** True iff the term or terms used to index this field are stored as a term
   *  vector, available from {@link org.apache.lucene.index.IndexReader#getTermFreqVector(int,String)}.
   *  These methods do not provide access to the original content of the field,
   *  only to terms used to index it. If the original content must be
   *  preserved, use the <code>stored</code> attribute instead.
   *
   * @see org.apache.lucene.index.IndexReader#getTermFreqVector(int, String)
   */ Modifier public final BasicType boolean isTermVectorStored ReturnStatement MemberReference storeTermVector MethodDeclaration /**
   * True iff terms are stored as term vector together with their offsets 
   * (start and end position in source text).
   */ Modifier public BasicType boolean isStoreOffsetWithTermVector ReturnStatement MemberReference storeOffsetWithTermVector MethodDeclaration /**
   * True iff terms are stored as term vector together with their token positions.
   */ Modifier public BasicType boolean isStorePositionWithTermVector ReturnStatement MemberReference storePositionWithTermVector MethodDeclaration /** True iff the value of the filed is stored as binary */ Modifier public final BasicType boolean isBinary ReturnStatement MemberReference isBinary MethodDeclaration /**
   * Return the raw byte[] for the binary field.  Note that
   * you must also call {@link #getBinaryLength} and {@link
   * #getBinaryOffset} to know which range of bytes in this
   * returned array belong to the field.
   * @return reference to the Field value as byte[].
   */ Modifier public BasicType byte getBinaryValue ReturnStatement MethodInvocation Literal null getBinaryValue MethodDeclaration Modifier public BasicType byte getBinaryValue FormalParameter BasicType byte result IfStatement BinaryOperation || MemberReference isBinary BinaryOperation instanceof MemberReference fieldsData BasicType byte ReturnStatement Cast BasicType byte MemberReference fieldsData ReturnStatement Literal null End MethodDeclaration /**
   * Returns length of byte[] segment that is used as value, if Field is not binary
   * returned value is undefined
   * @return length of byte[] segment that represents this Field value
   */ Modifier public BasicType int getBinaryLength IfStatement MemberReference isBinary BlockStatement ReturnStatement MemberReference binaryLength IfStatement BinaryOperation instanceof MemberReference fieldsData BasicType byte ReturnStatement Cast BasicType byte MemberReference fieldsData ReturnStatement Literal 0 End End MethodDeclaration /**
   * Returns offset into byte[] segment that is used as value, if Field is not binary
   * returned value is undefined
   * @return index of the first character in byte[] segment that represents this Field value
   */ Modifier public BasicType int getBinaryOffset ReturnStatement MemberReference binaryOffset MethodDeclaration /** True if norms are omitted for this indexed field */ Modifier public BasicType boolean getOmitNorms ReturnStatement MemberReference omitNorms MethodDeclaration /** @see #setOmitTermFreqAndPositions */ Modifier public BasicType boolean getOmitTermFreqAndPositions ReturnStatement MemberReference omitTermFreqAndPositions MethodDeclaration /** Expert:
   *
   * If set, omit normalization factors associated with this indexed field.
   * This effectively disables indexing boosts and length normalization for this field.
   */ Modifier public setOmitNorms FormalParameter BasicType boolean omitNorms StatementExpression Assignment This MemberReference omitNorms MemberReference omitNorms = MethodDeclaration /** Expert:
   *
   * If set, omit term freq, positions and payloads from
   * postings for this field.
   *
   * <p><b>NOTE</b>: While this option reduces storage space
   * required in the index, it also means any query
   * requiring positional information, such as {@link
   * PhraseQuery} or {@link SpanQuery} subclasses will
   * silently fail to find results.
   */ Modifier public setOmitTermFreqAndPositions FormalParameter BasicType boolean omitTermFreqAndPositions StatementExpression Assignment This MemberReference omitTermFreqAndPositions MemberReference omitTermFreqAndPositions = MethodDeclaration Modifier public BasicType boolean isLazy ReturnStatement MemberReference lazy MethodDeclaration /** Prints a Field for human consumption. */ Modifier public final Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator result ClassCreator ReferenceType StringBuilder IfStatement MemberReference isStored BlockStatement StatementExpression MethodInvocation result Literal ""stored"" append End IfStatement MemberReference isIndexed BlockStatement IfStatement BinaryOperation > MethodInvocation result length Literal 0 StatementExpression MethodInvocation result Literal "","" append End StatementExpression MethodInvocation result Literal ""indexed"" append End IfStatement MemberReference isTokenized BlockStatement IfStatement BinaryOperation > MethodInvocation result length Literal 0 StatementExpression MethodInvocation result Literal "","" append End StatementExpression MethodInvocation result Literal ""tokenized"" append End IfStatement MemberReference storeTermVector BlockStatement IfStatement BinaryOperation > MethodInvocation result length Literal 0 StatementExpression MethodInvocation result Literal "","" append End StatementExpression MethodInvocation result Literal ""termVector"" append End IfStatement MemberReference storeOffsetWithTermVector BlockStatement IfStatement BinaryOperation > MethodInvocation result length Literal 0 StatementExpression MethodInvocation result Literal "","" append End StatementExpression MethodInvocation result Literal ""termVectorOffsets"" append End IfStatement MemberReference storePositionWithTermVector BlockStatement IfStatement BinaryOperation > MethodInvocation result length Literal 0 StatementExpression MethodInvocation result Literal "","" append End StatementExpression MethodInvocation result Literal ""termVectorPosition"" append End IfStatement MemberReference isBinary BlockStatement IfStatement BinaryOperation > MethodInvocation result length Literal 0 StatementExpression MethodInvocation result Literal "","" append End StatementExpression MethodInvocation result Literal ""binary"" append End IfStatement MemberReference omitNorms BlockStatement StatementExpression MethodInvocation result Literal "",omitNorms"" append End IfStatement MemberReference omitTermFreqAndPositions BlockStatement StatementExpression MethodInvocation result Literal "",omitTermFreqAndPositions"" append End IfStatement MemberReference lazy BlockStatement StatementExpression MethodInvocation result Literal "",lazy"" append End StatementExpression MethodInvocation result Literal '<' append StatementExpression MethodInvocation result MemberReference name append StatementExpression MethodInvocation result Literal ':' append IfStatement BinaryOperation && BinaryOperation != MemberReference fieldsData Literal null BinaryOperation == MemberReference lazy Literal false BlockStatement StatementExpression MethodInvocation result MemberReference fieldsData append End StatementExpression MethodInvocation result Literal '>' append ReturnStatement MethodInvocation result toString ReferenceType Fieldable",1
484,484,"CompilationUnit PackageDeclaration org.apache.lucene.search.highlight ClassDeclaration Modifier public /** Lightweight class to hold term and a weight value used for scoring this term
 */ WeightedTerm FieldDeclaration BasicType float VariableDeclarator weight FieldDeclaration ReferenceType String VariableDeclarator term ConstructorDeclaration Modifier public WeightedTerm FormalParameter BasicType float weight FormalParameter ReferenceType String term StatementExpression Assignment This MemberReference weight MemberReference weight = StatementExpression Assignment This MemberReference term MemberReference term = MethodDeclaration /**
	 * @return the term value (stemmed)
	 */ Modifier public ReferenceType String getTerm ReturnStatement MemberReference term MethodDeclaration /**
	 * @return the weight associated with this term
	 */ Modifier public BasicType float getWeight ReturnStatement MemberReference weight MethodDeclaration /**
	 * @param term the term value (stemmed)
	 */ Modifier public setTerm FormalParameter ReferenceType String term StatementExpression Assignment This MemberReference term MemberReference term = MethodDeclaration /**
	 * @param weight the weight associated with this term
	 */ Modifier public setWeight FormalParameter BasicType float weight StatementExpression Assignment This MemberReference weight MemberReference weight =",1
441,441,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.shingle Import java.io.IOException Import java.util.ArrayList Import java.util.HashSet Import java.util.Iterator Import java.util.LinkedList Import java.util.List Import java.util.NoSuchElementException Import java.util.Set Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.miscellaneous.EmptyTokenStream Import org.apache.lucene.analysis.payloads.PayloadHelper Import org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column Import org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row Import org.apache.lucene.analysis.tokenattributes.FlagsAttribute Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.PayloadAttribute Import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.analysis.tokenattributes.TypeAttribute Import org.apache.lucene.index.Payload ClassDeclaration Modifier public final /**
 * <p>A ShingleMatrixFilter constructs shingles (token n-grams) from a token stream.
 * In other words, it creates combinations of tokens as a single token.
 *
 * <p>For example, the sentence ""please divide this sentence into shingles""
 * might be tokenized into shingles ""please divide"", ""divide this"",
 * ""this sentence"", ""sentence into"", and ""into shingles"".
 *
 * <p>Using a shingle filter at index and query time can in some instances
 * be used to replace phrase queries, especially them with 0 slop.
 *
 * <p>Without a spacer character
 * it can be used to handle composition and decomposition of words
 * such as searching for ""multi dimensional"" instead of ""multidimensional"".
 * It is a rather common human problem at query time
 * in several languages, notably the northern Germanic branch.
 *
 * <p>Shingles are amongst many things also known to solve problems
 * in spell checking, language detection and document clustering.
 *
 * <p>This filter is backed by a three dimensional column oriented matrix
 * used to create permutations of the second dimension, the rows,
 * and leaves the third, the z-axis, for for multi token synonyms.
 *
 * <p>In order to use this filter you need to define a way of positioning
 * the input stream tokens in the matrix. This is done using a
 * {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenSettingsCodec}.
 * There are three simple implementations for demonstrational purposes,
 * see {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec},
 * {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec}
 * and {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec}.
 *
 * <p>Consider this token matrix:
 * <pre>
 *  Token[column][row][z-axis]{
 *    {{hello}, {greetings, and, salutations}},
 *    {{world}, {earth}, {tellus}}
 *  };
 * </pre>
 *
 * It would produce the following 2-3 gram sized shingles:
 *
 * <pre>
 * ""hello_world""
 * ""greetings_and""
 * ""greetings_and_salutations""
 * ""and_salutations""
 * ""and_salutations_world""
 * ""salutations_world""
 * ""hello_earth""
 * ""and_salutations_earth""
 * ""salutations_earth""
 * ""hello_tellus""
 * ""and_salutations_tellus""
 * ""salutations_tellus""
 *  </pre>
 *
 * <p>This implementation can be rather heap demanding
 * if (maximum shingle size - minimum shingle size) is a great number and the stream contains many columns,
 * or if each column contains a great number of rows.
 *
 * <p>The problem is that in order avoid producing duplicates
 * the filter needs to keep track of any shingle already produced and returned to the consumer.
 *
 * There is a bit of resource management to handle this
 * but it would of course be much better if the filter was written
 * so it never created the same shingle more than once in the first place.
 *
 * <p>The filter also has basic support for calculating weights for the shingles
 * based on the weights of the tokens from the input stream, output shingle size, etc.
 * See {@link #calculateShingleWeight(org.apache.lucene.analysis.Token, java.util.List, int, java.util.List, java.util.List)}.
 * <p/>
 * <b>NOTE:</b> This filter might not behave correctly if used with custom Attributes, i.e. Attributes other than
 * the ones located in org.apache.lucene.analysis.tokenattributes.
 */ ShingleMatrixFilter FieldDeclaration Modifier public static ReferenceType Character VariableDeclarator defaultSpacerCharacter MethodInvocation Character Literal '_' valueOf FieldDeclaration Modifier public static ReferenceType TokenSettingsCodec VariableDeclarator defaultSettingsCodec ClassCreator ReferenceType OneDimensionalNonWeightedTokenSettingsCodec FieldDeclaration Modifier public static BasicType boolean VariableDeclarator ignoringSinglePrefixOrSuffixShingleByDefault Literal false ClassDeclaration Modifier public static abstract /**
   * Strategy used to code and decode meta data of the tokens from the input stream
   * regarding how to position the tokens in the matrix, set and retreive weight, et c.
   */ TokenSettingsCodec MethodDeclaration /**
     * Retrieves information on how a {@link org.apache.lucene.analysis.Token} is to be inserted to a {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix}.
     * @param token
     * @return {@link ShingleMatrixFilter.TokenPositioner}
     * @throws IOException
     */ Modifier public abstract ReferenceType TokenPositioner getTokenPositioner FormalParameter ReferenceType Token token IOException MethodDeclaration /**
     * Sets information on how a {@link org.apache.lucene.analysis.Token} is to be inserted to a {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix}.
     *
     * @param token
     * @param tokenPositioner
     */ Modifier public abstract setTokenPositioner FormalParameter ReferenceType Token token FormalParameter ReferenceType ShingleMatrixFilter ReferenceType TokenPositioner tokenPositioner MethodDeclaration /**
     * Have this method return 1f in order to 'disable' weights.
     * @param token
     * @return the weight of parameter token
     */ Modifier public abstract BasicType float getWeight FormalParameter ReferenceType Token token MethodDeclaration /**
     * Have this method do nothing in order to 'disable' weights.
     * @param token
     * @param weight
     */ Modifier public abstract setWeight FormalParameter ReferenceType Token token FormalParameter BasicType float weight ClassDeclaration Modifier public static /**
   * Used to describe how a {@link org.apache.lucene.analysis.Token} is to be inserted to a {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix}.
   * @see org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenSettingsCodec#getTokenPositioner(org.apache.lucene.analysis.Token)
   * @see org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenSettingsCodec#setTokenPositioner(org.apache.lucene.analysis.Token,org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenPositioner)
   */ TokenPositioner FieldDeclaration Modifier public final static ReferenceType TokenPositioner VariableDeclarator newColumn ClassCreator ReferenceType TokenPositioner Literal 0 FieldDeclaration Modifier public final static ReferenceType TokenPositioner VariableDeclarator newRow ClassCreator ReferenceType TokenPositioner Literal 1 FieldDeclaration Modifier public final static ReferenceType TokenPositioner VariableDeclarator sameRow ClassCreator ReferenceType TokenPositioner Literal 2 FieldDeclaration Modifier private final BasicType int VariableDeclarator index ConstructorDeclaration Modifier private TokenPositioner FormalParameter BasicType int index StatementExpression Assignment This MemberReference index MemberReference index = MethodDeclaration Modifier public BasicType int getIndex ReturnStatement MemberReference index FieldDeclaration Modifier private ReferenceType TokenSettingsCodec VariableDeclarator settingsCodec FieldDeclaration Modifier private BasicType int VariableDeclarator minimumShingleSize FieldDeclaration Modifier private BasicType int VariableDeclarator maximumShingleSize FieldDeclaration Modifier private BasicType boolean VariableDeclarator ignoringSinglePrefixOrSuffixShingle Literal false FieldDeclaration Modifier private ReferenceType Character VariableDeclarator spacerCharacter MemberReference defaultSpacerCharacter FieldDeclaration Modifier private ReferenceType TokenStream VariableDeclarator input FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private ReferenceType PositionIncrementAttribute VariableDeclarator posIncrAtt FieldDeclaration Modifier private ReferenceType PayloadAttribute VariableDeclarator payloadAtt FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt FieldDeclaration Modifier private ReferenceType TypeAttribute VariableDeclarator typeAtt FieldDeclaration Modifier private ReferenceType FlagsAttribute VariableDeclarator flagsAtt FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator in_termAtt FieldDeclaration Modifier private ReferenceType PositionIncrementAttribute VariableDeclarator in_posIncrAtt FieldDeclaration Modifier private ReferenceType PayloadAttribute VariableDeclarator in_payloadAtt FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator in_offsetAtt FieldDeclaration Modifier private ReferenceType TypeAttribute VariableDeclarator in_typeAtt FieldDeclaration Modifier private ReferenceType FlagsAttribute VariableDeclarator in_flagsAtt ConstructorDeclaration Modifier public /**
   * Creates a shingle filter based on a user defined matrix.
   *
   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.
   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.
   *
   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.
   * @param minimumShingleSize minimum number of tokens in any shingle.
   * @param maximumShingleSize maximum number of tokens in any shingle.
   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.
   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.
   * @param settingsCodec codec used to read input token weight and matrix positioning.
   */ ShingleMatrixFilter FormalParameter ReferenceType Matrix matrix FormalParameter BasicType int minimumShingleSize FormalParameter BasicType int maximumShingleSize FormalParameter ReferenceType Character spacerCharacter FormalParameter BasicType boolean ignoringSinglePrefixOrSuffixShingle FormalParameter ReferenceType TokenSettingsCodec settingsCodec StatementExpression Assignment This MemberReference matrix MemberReference matrix = StatementExpression Assignment This MemberReference minimumShingleSize MemberReference minimumShingleSize = StatementExpression Assignment This MemberReference maximumShingleSize MemberReference maximumShingleSize = StatementExpression Assignment This MemberReference spacerCharacter MemberReference spacerCharacter = StatementExpression Assignment This MemberReference ignoringSinglePrefixOrSuffixShingle MemberReference ignoringSinglePrefixOrSuffixShingle = StatementExpression Assignment This MemberReference settingsCodec MemberReference settingsCodec = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference posIncrAtt MethodInvocation ClassReference ReferenceType PositionIncrementAttribute addAttribute = StatementExpression Assignment MemberReference payloadAtt MethodInvocation ClassReference ReferenceType PayloadAttribute addAttribute = StatementExpression Assignment MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression Assignment MemberReference typeAtt MethodInvocation ClassReference ReferenceType TypeAttribute addAttribute = StatementExpression Assignment MemberReference flagsAtt MethodInvocation ClassReference ReferenceType FlagsAttribute addAttribute = StatementExpression Assignment This MemberReference input ClassCreator ReferenceType EmptyTokenStream = StatementExpression Assignment MemberReference in_termAtt MethodInvocation input ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference in_posIncrAtt MethodInvocation input ClassReference ReferenceType PositionIncrementAttribute addAttribute = StatementExpression Assignment MemberReference in_payloadAtt MethodInvocation input ClassReference ReferenceType PayloadAttribute addAttribute = StatementExpression Assignment MemberReference in_offsetAtt MethodInvocation input ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression Assignment MemberReference in_typeAtt MethodInvocation input ClassReference ReferenceType TypeAttribute addAttribute = StatementExpression Assignment MemberReference in_flagsAtt MethodInvocation input ClassReference ReferenceType FlagsAttribute addAttribute = ConstructorDeclaration Modifier public /**
   * Creates a shingle filter using default settings.
   *
   * @see #defaultSpacerCharacter
   * @see #ignoringSinglePrefixOrSuffixShingleByDefault
   * @see #defaultSettingsCodec
   *
   * @param input stream from which to construct the matrix
   * @param minimumShingleSize minimum number of tokens in any shingle.
   * @param maximumShingleSize maximum number of tokens in any shingle.
   */ ShingleMatrixFilter FormalParameter ReferenceType TokenStream input FormalParameter BasicType int minimumShingleSize FormalParameter BasicType int maximumShingleSize StatementExpression ExplicitConstructorInvocation MemberReference input MemberReference minimumShingleSize MemberReference maximumShingleSize MemberReference defaultSpacerCharacter ConstructorDeclaration Modifier public /**
   * Creates a shingle filter using default settings.
   *
   * @see #ignoringSinglePrefixOrSuffixShingleByDefault
   * @see #defaultSettingsCodec
   *
   * @param input stream from which to construct the matrix
   * @param minimumShingleSize minimum number of tokens in any shingle.
   * @param maximumShingleSize maximum number of tokens in any shingle.
   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.
   */ ShingleMatrixFilter FormalParameter ReferenceType TokenStream input FormalParameter BasicType int minimumShingleSize FormalParameter BasicType int maximumShingleSize FormalParameter ReferenceType Character spacerCharacter StatementExpression ExplicitConstructorInvocation MemberReference input MemberReference minimumShingleSize MemberReference maximumShingleSize MemberReference spacerCharacter MemberReference ignoringSinglePrefixOrSuffixShingleByDefault ConstructorDeclaration Modifier public /**
   * Creates a shingle filter using the default {@link TokenSettingsCodec}.
   *
   * @see #defaultSettingsCodec
   *
   * @param input stream from which to construct the matrix
   * @param minimumShingleSize minimum number of tokens in any shingle.
   * @param maximumShingleSize maximum number of tokens in any shingle.
   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.
   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.
   */ ShingleMatrixFilter FormalParameter ReferenceType TokenStream input FormalParameter BasicType int minimumShingleSize FormalParameter BasicType int maximumShingleSize FormalParameter ReferenceType Character spacerCharacter FormalParameter BasicType boolean ignoringSinglePrefixOrSuffixShingle StatementExpression ExplicitConstructorInvocation MemberReference input MemberReference minimumShingleSize MemberReference maximumShingleSize MemberReference spacerCharacter MemberReference ignoringSinglePrefixOrSuffixShingle MemberReference defaultSettingsCodec ConstructorDeclaration Modifier public /**
   * Creates a shingle filter with ad hoc parameter settings.
   *
   * @param input stream from which to construct the matrix
   * @param minimumShingleSize minimum number of tokens in any shingle.
   * @param maximumShingleSize maximum number of tokens in any shingle.
   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.
   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.
   * @param settingsCodec codec used to read input token weight and matrix positioning.
   */ ShingleMatrixFilter FormalParameter ReferenceType TokenStream input FormalParameter BasicType int minimumShingleSize FormalParameter BasicType int maximumShingleSize FormalParameter ReferenceType Character spacerCharacter FormalParameter BasicType boolean ignoringSinglePrefixOrSuffixShingle FormalParameter ReferenceType TokenSettingsCodec settingsCodec StatementExpression Assignment This MemberReference input MemberReference input = StatementExpression Assignment This MemberReference minimumShingleSize MemberReference minimumShingleSize = StatementExpression Assignment This MemberReference maximumShingleSize MemberReference maximumShingleSize = StatementExpression Assignment This MemberReference spacerCharacter MemberReference spacerCharacter = StatementExpression Assignment This MemberReference ignoringSinglePrefixOrSuffixShingle MemberReference ignoringSinglePrefixOrSuffixShingle = StatementExpression Assignment This MemberReference settingsCodec MemberReference settingsCodec = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference posIncrAtt MethodInvocation ClassReference ReferenceType PositionIncrementAttribute addAttribute = StatementExpression Assignment MemberReference payloadAtt MethodInvocation ClassReference ReferenceType PayloadAttribute addAttribute = StatementExpression Assignment MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression Assignment MemberReference typeAtt MethodInvocation ClassReference ReferenceType TypeAttribute addAttribute = StatementExpression Assignment MemberReference flagsAtt MethodInvocation ClassReference ReferenceType FlagsAttribute addAttribute = StatementExpression Assignment MemberReference in_termAtt MethodInvocation input ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference in_posIncrAtt MethodInvocation input ClassReference ReferenceType PositionIncrementAttribute addAttribute = StatementExpression Assignment MemberReference in_payloadAtt MethodInvocation input ClassReference ReferenceType PayloadAttribute addAttribute = StatementExpression Assignment MemberReference in_offsetAtt MethodInvocation input ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression Assignment MemberReference in_typeAtt MethodInvocation input ClassReference ReferenceType TypeAttribute addAttribute = StatementExpression Assignment MemberReference in_flagsAtt MethodInvocation input ClassReference ReferenceType FlagsAttribute addAttribute = FieldDeclaration /** iterator over the current matrix row permutations */ Modifier private ReferenceType Iterator TypeArgument ReferenceType Matrix ReferenceType Column ReferenceType Row VariableDeclarator permutations FieldDeclaration /** the current permutation of tokens used to produce shingles */ Modifier private ReferenceType List TypeArgument ReferenceType Token VariableDeclarator currentPermuationTokens FieldDeclaration /** index to what row a token in currentShingleTokens represents*/ Modifier private ReferenceType List TypeArgument ReferenceType Matrix ReferenceType Column ReferenceType Row VariableDeclarator currentPermutationRows FieldDeclaration Modifier private BasicType int VariableDeclarator currentPermutationTokensStartOffset FieldDeclaration Modifier private BasicType int VariableDeclarator currentShingleLength FieldDeclaration /**
   * a set containing shingles that has been the result of a call to {@link #incrementToken()},
   * used to avoid producing the same shingle more than once.
   */ Modifier private ReferenceType Set TypeArgument ReferenceType List TypeArgument ReferenceType Token VariableDeclarator shinglesSeen ClassCreator ReferenceType HashSet TypeArgument ReferenceType List TypeArgument ReferenceType Token MethodDeclaration Modifier public Annotation Override reset IOException StatementExpression Assignment MemberReference permutations Literal null = StatementExpression MethodInvocation shinglesSeen clear StatementExpression MethodInvocation input reset FieldDeclaration Modifier private ReferenceType Matrix VariableDeclarator matrix FieldDeclaration Modifier private ReferenceType Token VariableDeclarator reusableToken ClassCreator ReferenceType Token MethodDeclaration Modifier public final Annotation Override BasicType boolean incrementToken IOException IfStatement BinaryOperation == MemberReference matrix Literal null BlockStatement StatementExpression Assignment MemberReference matrix ClassCreator ReferenceType Matrix = WhileStatement BinaryOperation && BinaryOperation < MethodInvocation matrix.columns size MemberReference maximumShingleSize MethodInvocation readColumn BlockStatement End End LocalVariableDeclaration ReferenceType Token VariableDeclarator token DoStatement BinaryOperation == MemberReference token MemberReference request_next_token BlockStatement StatementExpression Assignment MemberReference token MethodInvocation MemberReference reusableToken produceNextToken = End IfStatement BinaryOperation == MemberReference token Literal null ReturnStatement Literal false End StatementExpression MethodInvocation termAtt MethodInvocation token termBuffer Literal 0 MethodInvocation token termLength setTermBuffer StatementExpression MethodInvocation posIncrAtt MethodInvocation token getPositionIncrement setPositionIncrement StatementExpression MethodInvocation flagsAtt MethodInvocation token getFlags setFlags StatementExpression MethodInvocation offsetAtt MethodInvocation token startOffset MethodInvocation token endOffset setOffset StatementExpression MethodInvocation typeAtt MethodInvocation token type setType StatementExpression MethodInvocation payloadAtt MethodInvocation token getPayload setPayload ReturnStatement Literal true MethodDeclaration Modifier private ReferenceType Token getNextInputToken FormalParameter ReferenceType Token token IOException IfStatement MethodInvocation ! input incrementToken ReturnStatement Literal null End StatementExpression MethodInvocation token MethodInvocation in_termAtt termBuffer Literal 0 MethodInvocation in_termAtt termLength setTermBuffer StatementExpression MethodInvocation token MethodInvocation in_posIncrAtt getPositionIncrement setPositionIncrement StatementExpression MethodInvocation token MethodInvocation in_flagsAtt getFlags setFlags StatementExpression MethodInvocation token MethodInvocation in_offsetAtt startOffset MethodInvocation in_offsetAtt endOffset setOffset StatementExpression MethodInvocation token MethodInvocation in_typeAtt type setType StatementExpression MethodInvocation token MethodInvocation in_payloadAtt getPayload setPayload ReturnStatement MemberReference token MethodDeclaration Modifier private ReferenceType Token getNextToken FormalParameter ReferenceType Token token IOException IfStatement This ! MethodInvocation incrementToken ReturnStatement Literal null End StatementExpression MethodInvocation token MethodInvocation termAtt termBuffer Literal 0 MethodInvocation termAtt termLength setTermBuffer StatementExpression MethodInvocation token MethodInvocation posIncrAtt getPositionIncrement setPositionIncrement StatementExpression MethodInvocation token MethodInvocation flagsAtt getFlags setFlags StatementExpression MethodInvocation token MethodInvocation offsetAtt startOffset MethodInvocation offsetAtt endOffset setOffset StatementExpression MethodInvocation token MethodInvocation typeAtt type setType StatementExpression MethodInvocation token MethodInvocation payloadAtt getPayload setPayload ReturnStatement MemberReference token FieldDeclaration Modifier private final static ReferenceType Token VariableDeclarator request_next_token ClassCreator ReferenceType Token MethodDeclaration /**
   * This method exists in order to avoid recursive calls to the method
   * as the complexity of a fairly small matrix then easily would require
   * a gigabyte sized stack per thread.
   *
   * @param reusableToken
   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.
   * @throws IOException
   */ Modifier private ReferenceType Token produceNextToken FormalParameter Modifier final ReferenceType Token reusableToken IOException IfStatement BinaryOperation != MemberReference currentPermuationTokens Literal null BlockStatement StatementExpression MemberReference ++ currentShingleLength IfStatement BinaryOperation && BinaryOperation <= BinaryOperation + MemberReference currentShingleLength MemberReference currentPermutationTokensStartOffset MethodInvocation currentPermuationTokens size BinaryOperation <= MemberReference currentShingleLength MemberReference maximumShingleSize BlockStatement IfStatement BinaryOperation && BinaryOperation && MemberReference ignoringSinglePrefixOrSuffixShingle BinaryOperation == MemberReference currentShingleLength Literal 1 BinaryOperation || MethodInvocation currentPermutationRows MethodInvocation getColumn MethodInvocation isFirst MemberReference currentPermutationTokensStartOffset get MethodInvocation currentPermutationRows MethodInvocation getColumn MethodInvocation isLast MemberReference currentPermutationTokensStartOffset get BlockStatement ReturnStatement MethodInvocation MemberReference reusableToken getNextToken End LocalVariableDeclaration BasicType int VariableDeclarator termLength Literal 0 LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Token VariableDeclarator shingle ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Token MemberReference currentShingleLength ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference currentShingleLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Token VariableDeclarator shingleToken MethodInvocation currentPermuationTokens BinaryOperation + MemberReference i MemberReference currentPermutationTokensStartOffset get StatementExpression Assignment MemberReference termLength MethodInvocation shingleToken termLength += StatementExpression MethodInvocation shingle MemberReference shingleToken add End IfStatement BinaryOperation != MemberReference spacerCharacter Literal null BlockStatement StatementExpression Assignment MemberReference termLength BinaryOperation - MemberReference currentShingleLength Literal 1 += End IfStatement MethodInvocation ! shinglesSeen MemberReference shingle add BlockStatement ReturnStatement MemberReference request_next_token End LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder BinaryOperation + MemberReference termLength Literal 10 ForStatement EnhancedForControl VariableDeclaration ReferenceType Token VariableDeclarator shingleToken MemberReference shingle BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference spacerCharacter Literal null BinaryOperation > MethodInvocation sb length Literal 0 BlockStatement StatementExpression MethodInvocation sb MemberReference spacerCharacter append End StatementExpression MethodInvocation sb MethodInvocation shingleToken termBuffer Literal 0 MethodInvocation shingleToken termLength append End StatementExpression MethodInvocation reusableToken MethodInvocation sb toString setTermBuffer StatementExpression MethodInvocation MemberReference reusableToken MemberReference shingle MemberReference currentPermutationTokensStartOffset MemberReference currentPermutationRows MemberReference currentPermuationTokens updateToken ReturnStatement MemberReference reusableToken BlockStatement IfStatement BinaryOperation < MemberReference currentPermutationTokensStartOffset BinaryOperation - MethodInvocation currentPermuationTokens size Literal 1 BlockStatement StatementExpression MemberReference ++ currentPermutationTokensStartOffset StatementExpression Assignment MemberReference currentShingleLength BinaryOperation - MemberReference minimumShingleSize Literal 1 = ReturnStatement MemberReference request_next_token End IfStatement BinaryOperation == MemberReference permutations Literal null BlockStatement ReturnStatement Literal null End IfStatement MethodInvocation ! permutations hasNext BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference input Literal null MethodInvocation readColumn BlockStatement End LocalVariableDeclaration ReferenceType Matrix ReferenceType Column VariableDeclarator deletedColumn MethodInvocation matrix.columns Literal 0 remove LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Token VariableDeclarator deletedColumnTokens ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Token ForStatement EnhancedForControl VariableDeclaration ReferenceType Matrix ReferenceType Column ReferenceType Row VariableDeclarator row MethodInvocation deletedColumn getRows BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Token VariableDeclarator token MethodInvocation row getTokens BlockStatement StatementExpression MethodInvocation deletedColumnTokens MemberReference token add End End ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType List TypeArgument ReferenceType Token VariableDeclarator shinglesSeenIterator MethodInvocation shinglesSeen iterator MethodInvocation shinglesSeenIterator hasNext BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Token VariableDeclarator shingle MethodInvocation shinglesSeenIterator next ForStatement EnhancedForControl VariableDeclaration ReferenceType Token VariableDeclarator deletedColumnToken MemberReference deletedColumnTokens BlockStatement IfStatement MethodInvocation shingle MemberReference deletedColumnToken contains BlockStatement StatementExpression MethodInvocation shinglesSeenIterator remove BreakStatement End End End IfStatement BinaryOperation < MethodInvocation matrix.columns size MemberReference minimumShingleSize BlockStatement ReturnStatement Literal null End StatementExpression Assignment MemberReference permutations MethodInvocation matrix permutationIterator = End StatementExpression MethodInvocation nextTokensPermutation ReturnStatement MemberReference request_next_token End End IfStatement BinaryOperation == MemberReference permutations Literal null BlockStatement StatementExpression Assignment MemberReference permutations MethodInvocation matrix permutationIterator = End IfStatement MethodInvocation ! permutations hasNext BlockStatement ReturnStatement Literal null End StatementExpression MethodInvocation nextTokensPermutation ReturnStatement MemberReference request_next_token MethodDeclaration /**
   * get next permutation of row combinations,
   * creates list of all tokens in the row and
   * an index from each such token to what row they exist in.
   * finally resets the current (next) shingle size and offset.
   */ Modifier private nextTokensPermutation LocalVariableDeclaration ReferenceType Matrix ReferenceType Column ReferenceType Row VariableDeclarator rowsPermutation MethodInvocation permutations next LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Matrix ReferenceType Column ReferenceType Row VariableDeclarator currentPermutationRows ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Matrix ReferenceType Column ReferenceType Row LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Token VariableDeclarator currentPermuationTokens ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Token ForStatement EnhancedForControl VariableDeclaration ReferenceType Matrix ReferenceType Column ReferenceType Row VariableDeclarator row MemberReference rowsPermutation BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Token VariableDeclarator token MethodInvocation row getTokens BlockStatement StatementExpression MethodInvocation currentPermuationTokens MemberReference token add StatementExpression MethodInvocation currentPermutationRows MemberReference row add End End StatementExpression Assignment This MemberReference currentPermuationTokens MemberReference currentPermuationTokens = StatementExpression Assignment This MemberReference currentPermutationRows MemberReference currentPermutationRows = StatementExpression Assignment MemberReference currentPermutationTokensStartOffset Literal 0 = StatementExpression Assignment MemberReference currentShingleLength BinaryOperation - MemberReference minimumShingleSize Literal 1 = MethodDeclaration /**
   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.
   *
   * Calculates and sets type, flags, position increment, start/end offsets and weight.
   *
   * @param token Shingle token
   * @param shingle Tokens used to produce the shingle token.
   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens
   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens
   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.
   */ Modifier public updateToken FormalParameter ReferenceType Token token FormalParameter ReferenceType List TypeArgument ReferenceType Token shingle FormalParameter BasicType int currentPermutationStartOffset FormalParameter ReferenceType List TypeArgument ReferenceType Row currentPermutationRows FormalParameter ReferenceType List TypeArgument ReferenceType Token currentPermuationTokens StatementExpression MethodInvocation token ClassReference MethodInvocation getName ReferenceType ShingleMatrixFilter setType StatementExpression MethodInvocation token Literal 0 setFlags StatementExpression MethodInvocation token Literal 1 setPositionIncrement StatementExpression MethodInvocation token MethodInvocation shingle MethodInvocation startOffset Literal 0 get setStartOffset StatementExpression MethodInvocation token MethodInvocation shingle MethodInvocation endOffset BinaryOperation - MethodInvocation shingle size Literal 1 get setEndOffset StatementExpression MethodInvocation settingsCodec MemberReference token MethodInvocation MemberReference token MemberReference shingle MemberReference currentPermutationStartOffset MemberReference currentPermutationRows MemberReference currentPermuationTokens calculateShingleWeight setWeight MethodDeclaration /**
   * Evaluates the new shingle token weight.
   *
   * for (shingle part token in shingle)
   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))
   *
   * This algorithm gives a slightly greater score for longer shingles
   * and is rather penalising to great shingle token part weights.
   *
   * @param shingleToken token returned to consumer
   * @param shingle tokens the tokens used to produce the shingle token.
   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.
   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.
   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.
   * @return weight to be set for parameter shingleToken
   */ Modifier public BasicType float calculateShingleWeight FormalParameter ReferenceType Token shingleToken FormalParameter ReferenceType List TypeArgument ReferenceType Token shingle FormalParameter BasicType int currentPermutationStartOffset FormalParameter ReferenceType List TypeArgument ReferenceType Row currentPermutationRows FormalParameter ReferenceType List TypeArgument ReferenceType Token currentPermuationTokens LocalVariableDeclaration BasicType double VariableDeclarator weights ArrayCreator BasicType double MethodInvocation shingle size LocalVariableDeclaration BasicType double VariableDeclarator total Literal 0f LocalVariableDeclaration BasicType double VariableDeclarator top Literal 0d ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference weights length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i weights MethodInvocation settingsCodec MethodInvocation shingle MemberReference i get getWeight = LocalVariableDeclaration BasicType double VariableDeclarator tmp MemberReference ArraySelector MemberReference i weights IfStatement BinaryOperation > MemberReference tmp MemberReference top BlockStatement StatementExpression Assignment MemberReference top MemberReference tmp = End StatementExpression Assignment MemberReference total MemberReference tmp += End LocalVariableDeclaration BasicType double VariableDeclarator factor BinaryOperation / Literal 1d MethodInvocation Math MemberReference total sqrt LocalVariableDeclaration BasicType double VariableDeclarator weight Literal 0d ForStatement EnhancedForControl VariableDeclaration BasicType double VariableDeclarator partWeight MemberReference weights BlockStatement StatementExpression Assignment MemberReference weight BinaryOperation * MemberReference partWeight MemberReference factor += End ReturnStatement Cast BasicType float MemberReference weight FieldDeclaration Modifier private ReferenceType Token VariableDeclarator readColumnBuf MethodDeclaration /**
   * Loads one column from the token stream.
   *
   * When the last token is read from the token stream it will column.setLast(true);
   *
   * @return true if it manage to read one more column from the input token stream
   * @throws IOException if the matrix source input stream throws an exception
   */ Modifier private BasicType boolean readColumn IOException LocalVariableDeclaration ReferenceType Token VariableDeclarator token IfStatement BinaryOperation != MemberReference readColumnBuf Literal null BlockStatement StatementExpression Assignment MemberReference token MemberReference readColumnBuf = StatementExpression Assignment MemberReference readColumnBuf Literal null = BlockStatement StatementExpression Assignment MemberReference token MethodInvocation ClassCreator ReferenceType Token getNextInputToken = End IfStatement BinaryOperation == MemberReference token Literal null BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType Matrix ReferenceType Column VariableDeclarator currentReaderColumn InnerClassCreator matrix ReferenceType Column LocalVariableDeclaration ReferenceType Matrix ReferenceType Column ReferenceType Row VariableDeclarator currentReaderRow InnerClassCreator currentReaderColumn ReferenceType Row StatementExpression MethodInvocation currentReaderRow MethodInvocation MemberReference token add getTokens LocalVariableDeclaration ReferenceType TokenPositioner VariableDeclarator tokenPositioner WhileStatement BinaryOperation && BinaryOperation != Assignment MemberReference readColumnBuf MethodInvocation ClassCreator ReferenceType Token getNextInputToken = Literal null BinaryOperation != Assignment MemberReference tokenPositioner MethodInvocation settingsCodec MemberReference readColumnBuf getTokenPositioner = MemberReference TokenPositioner newColumn BlockStatement IfStatement BinaryOperation == MemberReference tokenPositioner MemberReference TokenPositioner sameRow BlockStatement StatementExpression MethodInvocation currentReaderRow MethodInvocation MemberReference readColumnBuf add getTokens BlockStatement StatementExpression Assignment MemberReference currentReaderRow InnerClassCreator currentReaderColumn ReferenceType Row = StatementExpression MethodInvocation currentReaderRow MethodInvocation MemberReference readColumnBuf add getTokens End StatementExpression Assignment MemberReference readColumnBuf Literal null = End IfStatement BinaryOperation == MemberReference readColumnBuf Literal null BlockStatement StatementExpression Assignment MemberReference readColumnBuf MethodInvocation ClassCreator ReferenceType Token getNextInputToken = IfStatement BinaryOperation == MemberReference readColumnBuf Literal null BlockStatement StatementExpression MethodInvocation currentReaderColumn Literal true setLast End End ReturnStatement Literal true ClassDeclaration Modifier public static /**
   * A column focused matrix in three dimensions:
   *
   * <pre>
   * Token[column][row][z-axis] {
   *     {{hello}, {greetings, and, salutations}},
   *     {{world}, {earth}, {tellus}}
   * };
   * </pre>
   *
   * todo consider row groups
   * to indicate that shingles is only to contain permutations with texts in that same row group.
   *
   */ Matrix FieldDeclaration Modifier private BasicType boolean VariableDeclarator columnsHasBeenCreated Literal false FieldDeclaration Modifier private ReferenceType List TypeArgument ReferenceType Column VariableDeclarator columns ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Column MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Column getColumns ReturnStatement MemberReference columns ClassDeclaration Modifier public Column FieldDeclaration Modifier private BasicType boolean VariableDeclarator last FieldDeclaration Modifier private BasicType boolean VariableDeclarator first MethodDeclaration Modifier public ReferenceType Matrix getMatrix ReturnStatement This Matrix ConstructorDeclaration Modifier public Column FormalParameter ReferenceType Token token StatementExpression ExplicitConstructorInvocation LocalVariableDeclaration ReferenceType Row VariableDeclarator row ClassCreator ReferenceType Row StatementExpression MethodInvocation row MethodInvocation MemberReference token add getTokens ConstructorDeclaration Modifier public Column SynchronizedStatement This Matrix IfStatement MemberReference ! columnsHasBeenCreated BlockStatement StatementExpression This MethodInvocation Literal true setFirst StatementExpression Assignment MemberReference columnsHasBeenCreated Literal true = End StatementExpression This Matrix MemberReference columns MethodInvocation This add FieldDeclaration Modifier private ReferenceType List TypeArgument ReferenceType Row VariableDeclarator rows ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Row MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Row getRows ReturnStatement MemberReference rows MethodDeclaration Modifier public BasicType int getIndex ReturnStatement This Matrix MemberReference columns MethodInvocation This indexOf MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Column{"" Literal ""first="" MemberReference first Literal "", last="" MemberReference last Literal "", rows="" MemberReference rows Literal '}' MethodDeclaration Modifier public BasicType boolean isFirst ReturnStatement MemberReference first MethodDeclaration Modifier public setFirst FormalParameter BasicType boolean first StatementExpression Assignment This MemberReference first MemberReference first = MethodDeclaration Modifier public setLast FormalParameter BasicType boolean last StatementExpression Assignment This MemberReference last MemberReference last = MethodDeclaration Modifier public BasicType boolean isLast ReturnStatement MemberReference last ClassDeclaration Modifier public Row MethodDeclaration Modifier public ReferenceType Column getColumn ReturnStatement This Column FieldDeclaration Modifier private ReferenceType List TypeArgument ReferenceType Token VariableDeclarator tokens ClassCreator ReferenceType LinkedList TypeArgument ReferenceType Token ConstructorDeclaration Modifier public Row StatementExpression This Column MemberReference rows MethodInvocation This add MethodDeclaration Modifier public BasicType int getIndex ReturnStatement This Column MemberReference rows MethodInvocation This indexOf MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Token getTokens ReturnStatement MemberReference tokens MethodDeclaration Modifier public setTokens FormalParameter ReferenceType List TypeArgument ReferenceType Token tokens StatementExpression Assignment This MemberReference tokens MemberReference tokens = MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Row{"" Literal ""index="" MethodInvocation getIndex Literal "", tokens="" TernaryExpression BinaryOperation == MemberReference tokens Literal null Literal null MemberReference tokens Literal '}' MethodDeclaration Modifier public ReferenceType Iterator TypeArgument ReferenceType Column ReferenceType Row permutationIterator ReturnStatement ClassCreator ReferenceType Iterator TypeArgument ReferenceType Column ReferenceType Row FieldDeclaration Modifier private BasicType int VariableDeclarator columnRowCounters ArrayCreator BasicType int MethodInvocation columns size MethodDeclaration Modifier public remove ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not implemented"" MethodDeclaration Modifier public BasicType boolean hasNext LocalVariableDeclaration BasicType int VariableDeclarator s MemberReference columnRowCounters length LocalVariableDeclaration BasicType int VariableDeclarator n MethodInvocation columns size ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference s Literal 0 BinaryOperation >= MemberReference n MemberReference s BinaryOperation < MemberReference ArraySelector BinaryOperation - MemberReference s Literal 1 columnRowCounters MethodInvocation columns MethodInvocation getRows MethodInvocation size BinaryOperation - MemberReference s Literal 1 get MethodDeclaration Modifier public ReferenceType Column ReferenceType Row next IfStatement MethodInvocation ! hasNext BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchElementException Literal ""no more elements"" End LocalVariableDeclaration ReferenceType Column ReferenceType Row VariableDeclarator rows ArrayCreator ReferenceType Column ReferenceType Row MemberReference columnRowCounters length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference columnRowCounters length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i rows MethodInvocation columns MemberReference rows MethodInvocation MemberReference ArraySelector MemberReference i columnRowCounters get MemberReference i get = End StatementExpression MethodInvocation incrementColumnRowCounters ReturnStatement MemberReference rows MethodDeclaration Modifier private incrementColumnRowCounters ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference columnRowCounters length MemberReference ++ i BlockStatement StatementExpression MemberReference ++ ArraySelector MemberReference i columnRowCounters IfStatement BinaryOperation && BinaryOperation == MemberReference ArraySelector MemberReference i columnRowCounters MethodInvocation columns MemberReference rows MethodInvocation size MemberReference i get BinaryOperation < MemberReference i BinaryOperation - MemberReference columnRowCounters length Literal 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i columnRowCounters Literal 0 = BlockStatement BreakStatement End End MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Matrix{"" Literal ""columns="" MemberReference columns Literal '}' MethodDeclaration Modifier public BasicType int getMinimumShingleSize ReturnStatement MemberReference minimumShingleSize MethodDeclaration Modifier public setMinimumShingleSize FormalParameter BasicType int minimumShingleSize StatementExpression Assignment This MemberReference minimumShingleSize MemberReference minimumShingleSize = MethodDeclaration Modifier public BasicType int getMaximumShingleSize ReturnStatement MemberReference maximumShingleSize MethodDeclaration Modifier public setMaximumShingleSize FormalParameter BasicType int maximumShingleSize StatementExpression Assignment This MemberReference maximumShingleSize MemberReference maximumShingleSize = MethodDeclaration Modifier public ReferenceType Matrix getMatrix ReturnStatement MemberReference matrix MethodDeclaration Modifier public setMatrix FormalParameter ReferenceType Matrix matrix StatementExpression Assignment This MemberReference matrix MemberReference matrix = MethodDeclaration Modifier public ReferenceType Character getSpacerCharacter ReturnStatement MemberReference spacerCharacter MethodDeclaration Modifier public setSpacerCharacter FormalParameter ReferenceType Character spacerCharacter StatementExpression Assignment This MemberReference spacerCharacter MemberReference spacerCharacter = MethodDeclaration Modifier public BasicType boolean isIgnoringSinglePrefixOrSuffixShingle ReturnStatement MemberReference ignoringSinglePrefixOrSuffixShingle MethodDeclaration Modifier public setIgnoringSinglePrefixOrSuffixShingle FormalParameter BasicType boolean ignoringSinglePrefixOrSuffixShingle StatementExpression Assignment This MemberReference ignoringSinglePrefixOrSuffixShingle MemberReference ignoringSinglePrefixOrSuffixShingle = ClassDeclaration Modifier public static /**
   * Using this codec makes a {@link ShingleMatrixFilter} act like {@link org.apache.lucene.analysis.shingle.ShingleFilter}.
   * It produces the most simple sort of shingles, ignoring token position increments, et c.
   *
   * It adds each token as a new column.
   */ OneDimensionalNonWeightedTokenSettingsCodec MethodDeclaration Modifier public Annotation Override ReferenceType TokenPositioner getTokenPositioner FormalParameter ReferenceType Token token IOException ReturnStatement MemberReference TokenPositioner newColumn MethodDeclaration Modifier public Annotation Override setTokenPositioner FormalParameter ReferenceType Token token FormalParameter ReferenceType TokenPositioner tokenPositioner MethodDeclaration Modifier public Annotation Override BasicType float getWeight FormalParameter ReferenceType Token token ReturnStatement Literal 1f MethodDeclaration Modifier public Annotation Override setWeight FormalParameter ReferenceType Token token FormalParameter BasicType float weight ReferenceType TokenSettingsCodec ClassDeclaration Modifier public static /**
   * A codec that creates a two dimensional matrix
   * by treating tokens from the input stream with 0 position increment
   * as new rows to the current column.
   */ TwoDimensionalNonWeightedSynonymTokenSettingsCodec MethodDeclaration Modifier public Annotation Override ReferenceType TokenPositioner getTokenPositioner FormalParameter ReferenceType Token token IOException IfStatement BinaryOperation == MethodInvocation token getPositionIncrement Literal 0 BlockStatement ReturnStatement MemberReference TokenPositioner newRow BlockStatement ReturnStatement MemberReference TokenPositioner newColumn End MethodDeclaration Modifier public Annotation Override setTokenPositioner FormalParameter ReferenceType Token token FormalParameter ReferenceType TokenPositioner tokenPositioner ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override BasicType float getWeight FormalParameter ReferenceType Token token ReturnStatement Literal 1f MethodDeclaration Modifier public Annotation Override setWeight FormalParameter ReferenceType Token token FormalParameter BasicType float weight ReferenceType TokenSettingsCodec ClassDeclaration Modifier public static /**
   * A full featured codec not to be used for something serious.
   *
   * It takes complete control of
   * payload for weight
   * and the bit flags for positioning in the matrix.
   *
   * Mainly exist for demonstrational purposes.
   */ SimpleThreeDimensionalTokenSettingsCodec MethodDeclaration /**
     * @param token
     * @return the token flags int value as TokenPosition
     * @throws IOException
     */ Modifier public Annotation Override ReferenceType TokenPositioner getTokenPositioner FormalParameter ReferenceType Token token IOException SwitchStatement MethodInvocation token getFlags SwitchStatementCase Literal 0 ReturnStatement MemberReference TokenPositioner newColumn SwitchStatementCase Literal 1 ReturnStatement MemberReference TokenPositioner newRow SwitchStatementCase Literal 2 ReturnStatement MemberReference TokenPositioner sameRow End ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""Unknown matrix positioning of token "" MemberReference token MethodDeclaration /**
     * Sets the TokenPositioner as token flags int value.
     *
     * @param token
     * @param tokenPositioner
     */ Modifier public Annotation Override setTokenPositioner FormalParameter ReferenceType Token token FormalParameter ReferenceType TokenPositioner tokenPositioner StatementExpression MethodInvocation token MethodInvocation tokenPositioner getIndex setFlags MethodDeclaration /**
     * Returns a 32 bit float from the payload, or 1f it null.
     *
     * @param token
     * @return 32 bit float
     */ Modifier public Annotation Override BasicType float getWeight FormalParameter ReferenceType Token token IfStatement BinaryOperation || BinaryOperation == MethodInvocation token getPayload Literal null BinaryOperation == MethodInvocation token MethodInvocation getData getPayload Literal null BlockStatement ReturnStatement Literal 1f BlockStatement ReturnStatement MethodInvocation PayloadHelper MethodInvocation token MethodInvocation getData getPayload decodeFloat End MethodDeclaration /**
     * Stores a 32 bit float in the payload, or set it to null if 1f;
     * @param token
     * @param weight
     */ Modifier public Annotation Override setWeight FormalParameter ReferenceType Token token FormalParameter BasicType float weight IfStatement BinaryOperation == MemberReference weight Literal 1f BlockStatement StatementExpression MethodInvocation token Literal null setPayload BlockStatement StatementExpression MethodInvocation token ClassCreator ReferenceType Payload MethodInvocation PayloadHelper MemberReference weight encodeFloat setPayload End ReferenceType TokenSettingsCodec ReferenceType TokenStream",1
180,180,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.util.Iterator Import java.util.Set Import java.util.TreeSet Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermDocs Import org.apache.lucene.util.OpenBitSet ClassDeclaration Modifier public /**
 * Constructs a filter for docs matching any of the terms added to this class. 
 * Unlike a RangeFilter this can be used for filtering on multiple terms that are not necessarily in 
 * a sequence. An example might be a collection of primary keys from a database query result or perhaps 
 * a choice of ""category"" labels picked by the end user. As a filter, this is much faster than the 
 * equivalent query (a BooleanQuery with many ""should"" TermQueries)
 *
 */ TermsFilter FieldDeclaration ReferenceType Set TypeArgument ReferenceType Term VariableDeclarator terms ClassCreator ReferenceType TreeSet TypeArgument ReferenceType Term MethodDeclaration /**
	 * Adds a term to the list of acceptable terms   
	 * @param term
	 */ Modifier public addTerm FormalParameter ReferenceType Term term StatementExpression MethodInvocation terms MemberReference term add MethodDeclaration Modifier public Annotation Override ReferenceType DocIdSet getDocIdSet FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration ReferenceType OpenBitSet VariableDeclarator result ClassCreator ReferenceType OpenBitSet MethodInvocation reader maxDoc LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator td MethodInvocation reader termDocs TryStatement ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Term VariableDeclarator iter MethodInvocation terms iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator term MethodInvocation iter next StatementExpression MethodInvocation td MemberReference term seek WhileStatement MethodInvocation td next BlockStatement StatementExpression MethodInvocation result MethodInvocation td doc set End End StatementExpression MethodInvocation td close ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation || BinaryOperation == MemberReference obj Literal null BinaryOperation != MethodInvocation obj getClass This MethodInvocation getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType TermsFilter VariableDeclarator test Cast ReferenceType TermsFilter MemberReference obj ReturnStatement BinaryOperation || BinaryOperation == MemberReference terms MemberReference test terms BinaryOperation && BinaryOperation != MemberReference terms Literal null MethodInvocation terms MemberReference test terms equals MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator hash Literal 9 ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Term VariableDeclarator iter MethodInvocation terms iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator term MethodInvocation iter next StatementExpression Assignment MemberReference hash BinaryOperation + BinaryOperation * Literal 31 MemberReference hash MethodInvocation term hashCode = End ReturnStatement MemberReference hash ReferenceType Filter",0
375,375,"CompilationUnit PackageDeclaration org.apache.lucene.search.function Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.FieldCache Import org.apache.lucene.search.function.DocValues Import java.io.IOException ClassDeclaration Modifier public /**
 * Expert: obtains float field values from the 
 * {@link org.apache.lucene.search.FieldCache FieldCache}
 * using <code>getFloats()</code> and makes those values 
 * available as other numeric types, casting as needed.
 * 
 * <p><font color=""#FF0000"">
 * WARNING: The status of the <b>search.function</b> package is experimental. 
 * The APIs introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 * 
 * @see org.apache.lucene.search.function.FieldCacheSource for requirements 
 * on the field.
 *
 * <p><b>NOTE</b>: with the switch in 2.9 to segment-based
 * searching, if {@link #getValues} is invoked with a
 * composite (multi-segment) reader, this can easily cause
 * double RAM usage for the values in the FieldCache.  It's
 * best to switch your application to pass only atomic
 * (single segment) readers to this API.  Alternatively, for
 * a short-term fix, you could wrap your ValueSource using
 * {@link MultiValueSource}, which costs more CPU per lookup
 * but will not consume double the FieldCache RAM.</p>
 */ FloatFieldSource FieldDeclaration Modifier private ReferenceType FieldCache ReferenceType FloatParser VariableDeclarator parser ConstructorDeclaration Modifier public /**
   * Create a cached float field source with default string-to-float parser. 
   */ FloatFieldSource FormalParameter ReferenceType String field StatementExpression ExplicitConstructorInvocation MemberReference field Literal null ConstructorDeclaration Modifier public /**
   * Create a cached float field source with a specific string-to-float parser. 
   */ FloatFieldSource FormalParameter ReferenceType String field FormalParameter ReferenceType FieldCache ReferenceType FloatParser parser StatementExpression SuperConstructorInvocation MemberReference field StatementExpression Assignment This MemberReference parser MemberReference parser = MethodDeclaration Modifier public Annotation Override ReferenceType String description ReturnStatement BinaryOperation + BinaryOperation + Literal ""float("" SuperMethodInvocation description Literal ')' MethodDeclaration Modifier public Annotation Override ReferenceType DocValues getCachedFieldValues FormalParameter ReferenceType FieldCache cache FormalParameter ReferenceType String field FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration Modifier final BasicType float VariableDeclarator arr MethodInvocation cache MemberReference reader MemberReference field MemberReference parser getFloats ReturnStatement ClassCreator ReferenceType DocValues MethodDeclaration Modifier public Annotation Override BasicType float floatVal FormalParameter BasicType int doc ReturnStatement MemberReference ArraySelector MemberReference doc arr MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter BasicType int doc ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation description Literal '=' MemberReference ArraySelector MemberReference doc arr MethodDeclaration Annotation Override ReferenceType Object getInnerArray ReturnStatement MemberReference arr MethodDeclaration Modifier public Annotation Override BasicType boolean cachedFieldSourceEquals FormalParameter ReferenceType FieldCacheSource o IfStatement BinaryOperation != MethodInvocation o getClass ClassReference ReferenceType FloatFieldSource BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType FloatFieldSource VariableDeclarator other Cast ReferenceType FloatFieldSource MemberReference o ReturnStatement TernaryExpression BinaryOperation == This MemberReference parser Literal null BinaryOperation == MemberReference other parser Literal null BinaryOperation == This MemberReference parser MethodInvocation getClass MethodInvocation other.parser getClass MethodDeclaration Modifier public Annotation Override BasicType int cachedFieldSourceHashCode ReturnStatement TernaryExpression BinaryOperation == MemberReference parser Literal null ClassReference MethodInvocation hashCode ReferenceType Float MethodInvocation parser MethodInvocation hashCode getClass ReferenceType FieldCacheSource",0
476,476,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.tokenattributes Import java.io.Serializable Import org.apache.lucene.util.ArrayUtil Import org.apache.lucene.util.AttributeImpl ClassDeclaration Modifier public /**
 * The term text of a Token.
 */ TermAttributeImpl FieldDeclaration Modifier private static BasicType int VariableDeclarator MIN_BUFFER_SIZE Literal 10 FieldDeclaration Modifier private BasicType char VariableDeclarator termBuffer FieldDeclaration Modifier private BasicType int VariableDeclarator termLength MethodDeclaration /** Returns the Token's term text.
   * 
   * This method has a performance penalty
   * because the text is stored internally in a char[].  If
   * possible, use {@link #termBuffer()} and {@link
   * #termLength()} directly instead.  If you really need a
   * String, use this method, which is nothing more than
   * a convenience call to <b>new String(token.termBuffer(), 0, token.termLength())</b>
   */ Modifier public ReferenceType String term StatementExpression MethodInvocation initTermBuffer ReturnStatement ClassCreator ReferenceType String MemberReference termBuffer Literal 0 MemberReference termLength MethodDeclaration /** Copies the contents of buffer, starting at offset for
   *  length characters, into the termBuffer array.
   *  @param buffer the buffer to copy
   *  @param offset the index in the buffer of the first character to copy
   *  @param length the number of characters to copy
   */ Modifier public setTermBuffer FormalParameter BasicType char buffer FormalParameter BasicType int offset FormalParameter BasicType int length StatementExpression MethodInvocation MemberReference length growTermBuffer StatementExpression MethodInvocation System MemberReference buffer MemberReference offset MemberReference termBuffer Literal 0 MemberReference length arraycopy StatementExpression Assignment MemberReference termLength MemberReference length = MethodDeclaration /** Copies the contents of buffer into the termBuffer array.
   *  @param buffer the buffer to copy
   */ Modifier public setTermBuffer FormalParameter ReferenceType String buffer LocalVariableDeclaration BasicType int VariableDeclarator length MethodInvocation buffer length StatementExpression MethodInvocation MemberReference length growTermBuffer StatementExpression MethodInvocation buffer Literal 0 MemberReference length MemberReference termBuffer Literal 0 getChars StatementExpression Assignment MemberReference termLength MemberReference length = MethodDeclaration /** Copies the contents of buffer, starting at offset and continuing
   *  for length characters, into the termBuffer array.
   *  @param buffer the buffer to copy
   *  @param offset the index in the buffer of the first character to copy
   *  @param length the number of characters to copy
   */ Modifier public setTermBuffer FormalParameter ReferenceType String buffer FormalParameter BasicType int offset FormalParameter BasicType int length AssertStatement BinaryOperation <= MemberReference offset MethodInvocation buffer length AssertStatement BinaryOperation <= BinaryOperation + MemberReference offset MemberReference length MethodInvocation buffer length StatementExpression MethodInvocation MemberReference length growTermBuffer StatementExpression MethodInvocation buffer MemberReference offset BinaryOperation + MemberReference offset MemberReference length MemberReference termBuffer Literal 0 getChars StatementExpression Assignment MemberReference termLength MemberReference length = MethodDeclaration /** Returns the internal termBuffer character array which
   *  you can then directly alter.  If the array is too
   *  small for your token, use {@link
   *  #resizeTermBuffer(int)} to increase it.  After
   *  altering the buffer be sure to call {@link
   *  #setTermLength} to record the number of valid
   *  characters that were placed into the termBuffer. */ Modifier public BasicType char termBuffer StatementExpression MethodInvocation initTermBuffer ReturnStatement MemberReference termBuffer MethodDeclaration /** Grows the termBuffer to at least size newSize, preserving the
   *  existing content. Note: If the next operation is to change
   *  the contents of the term buffer use
   *  {@link #setTermBuffer(char[], int, int)},
   *  {@link #setTermBuffer(String)}, or
   *  {@link #setTermBuffer(String, int, int)}
   *  to optimally combine the resize with the setting of the termBuffer.
   *  @param newSize minimum size of the new termBuffer
   *  @return newly created termBuffer with length >= newSize
   */ Modifier public BasicType char resizeTermBuffer FormalParameter BasicType int newSize IfStatement BinaryOperation == MemberReference termBuffer Literal null BlockStatement StatementExpression Assignment MemberReference termBuffer ArrayCreator BasicType char MethodInvocation ArrayUtil TernaryExpression BinaryOperation < MemberReference newSize MemberReference MIN_BUFFER_SIZE MemberReference MIN_BUFFER_SIZE MemberReference newSize getNextSize = BlockStatement IfStatement BinaryOperation < MemberReference termBuffer length MemberReference newSize BlockStatement LocalVariableDeclaration Modifier final BasicType char VariableDeclarator newCharBuffer ArrayCreator BasicType char MethodInvocation ArrayUtil MemberReference newSize getNextSize StatementExpression MethodInvocation System MemberReference termBuffer Literal 0 MemberReference newCharBuffer Literal 0 MemberReference termBuffer length arraycopy StatementExpression Assignment MemberReference termBuffer MemberReference newCharBuffer = End End ReturnStatement MemberReference termBuffer MethodDeclaration /** Allocates a buffer char[] of at least newSize, without preserving the existing content.
   * its always used in places that set the content 
   *  @param newSize minimum size of the buffer
   */ Modifier private growTermBuffer FormalParameter BasicType int newSize IfStatement BinaryOperation == MemberReference termBuffer Literal null BlockStatement StatementExpression Assignment MemberReference termBuffer ArrayCreator BasicType char MethodInvocation ArrayUtil TernaryExpression BinaryOperation < MemberReference newSize MemberReference MIN_BUFFER_SIZE MemberReference MIN_BUFFER_SIZE MemberReference newSize getNextSize = BlockStatement IfStatement BinaryOperation < MemberReference termBuffer length MemberReference newSize BlockStatement StatementExpression Assignment MemberReference termBuffer ArrayCreator BasicType char MethodInvocation ArrayUtil MemberReference newSize getNextSize = End End MethodDeclaration Modifier private initTermBuffer IfStatement BinaryOperation == MemberReference termBuffer Literal null BlockStatement StatementExpression Assignment MemberReference termBuffer ArrayCreator BasicType char MethodInvocation ArrayUtil MemberReference MIN_BUFFER_SIZE getNextSize = StatementExpression Assignment MemberReference termLength Literal 0 = End MethodDeclaration /** Return number of valid characters (length of the term)
   *  in the termBuffer array. */ Modifier public BasicType int termLength ReturnStatement MemberReference termLength MethodDeclaration /** Set number of valid characters (length of the term) in
   *  the termBuffer array. Use this to truncate the termBuffer
   *  or to synchronize with external manipulation of the termBuffer.
   *  Note: to grow the size of the array,
   *  use {@link #resizeTermBuffer(int)} first.
   *  @param length the truncated length
   */ Modifier public setTermLength FormalParameter BasicType int length StatementExpression MethodInvocation initTermBuffer IfStatement BinaryOperation > MemberReference length MemberReference termBuffer length ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""length "" MemberReference length Literal "" exceeds the size of the termBuffer ("" MemberReference termBuffer length Literal "")"" End StatementExpression Assignment MemberReference termLength MemberReference length = MethodDeclaration Modifier public Annotation Override BasicType int hashCode StatementExpression MethodInvocation initTermBuffer LocalVariableDeclaration BasicType int VariableDeclarator code MemberReference termLength StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 31 MethodInvocation ArrayUtil MemberReference termBuffer Literal 0 MemberReference termLength hashCode = ReturnStatement MemberReference code MethodDeclaration Modifier public Annotation Override clear StatementExpression Assignment MemberReference termLength Literal 0 = MethodDeclaration Modifier public Annotation Override ReferenceType Object clone LocalVariableDeclaration ReferenceType TermAttributeImpl VariableDeclarator t Cast ReferenceType TermAttributeImpl SuperMethodInvocation clone IfStatement BinaryOperation != MemberReference termBuffer Literal null BlockStatement StatementExpression Assignment MemberReference t termBuffer Cast BasicType char MethodInvocation termBuffer clone = End ReturnStatement MemberReference t MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object other IfStatement BinaryOperation == MemberReference other This BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference other ReferenceType TermAttribute BlockStatement StatementExpression MethodInvocation initTermBuffer LocalVariableDeclaration ReferenceType TermAttributeImpl VariableDeclarator o Cast ReferenceType TermAttributeImpl MemberReference other StatementExpression MethodInvocation o initTermBuffer IfStatement BinaryOperation != MemberReference termLength MemberReference o termLength ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference termLength MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i termBuffer MemberReference o ArraySelector MemberReference i termBuffer BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override ReferenceType String toString StatementExpression MethodInvocation initTermBuffer ReturnStatement BinaryOperation + Literal ""term="" ClassCreator ReferenceType String MemberReference termBuffer Literal 0 MemberReference termLength MethodDeclaration Modifier public Annotation Override copyTo FormalParameter ReferenceType AttributeImpl target StatementExpression MethodInvocation initTermBuffer LocalVariableDeclaration ReferenceType TermAttribute VariableDeclarator t Cast ReferenceType TermAttribute MemberReference target StatementExpression MethodInvocation t MemberReference termBuffer Literal 0 MemberReference termLength setTermBuffer ReferenceType AttributeImpl ReferenceType TermAttribute ReferenceType Cloneable ReferenceType Serializable",1
102,102,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.feeds Import java.io.BufferedReader Import java.io.File Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask Import org.apache.lucene.benchmark.byTask.utils.Config ClassDeclaration Modifier public /**
 * A {@link ContentSource} reading one line at a time as a
 * {@link org.apache.lucene.document.Document} from a single file. This saves IO
 * cost (over DirContentSource) of recursing through a directory and opening a
 * new file for every document.<br>
 * The expected format of each line is (arguments are separated by &lt;TAB&gt;):
 * <i>title, date, body</i>. If a line is read in a different format, a
 * {@link RuntimeException} will be thrown. In general, you should use this
 * content source for files that were created with {@link WriteLineDocTask}.<br>
 * <br>
 * Config properties:
 * <ul>
 * <li>docs.file=&lt;path to the file&gt;
 * <li>content.source.encoding - default to UTF-8.
 * </ul>
 */ LineDocSource FieldDeclaration Modifier private final static BasicType char VariableDeclarator SEP MemberReference WriteLineDocTask SEP FieldDeclaration Modifier private ReferenceType File VariableDeclarator file FieldDeclaration Modifier private ReferenceType BufferedReader VariableDeclarator reader MethodDeclaration Modifier private synchronized openFile TryStatement IfStatement BinaryOperation != MemberReference reader Literal null BlockStatement StatementExpression MethodInvocation reader close End LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is MethodInvocation MemberReference file getInputStream StatementExpression Assignment MemberReference reader ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference is MemberReference encoding MemberReference BUFFER_SIZE = CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e MethodDeclaration Modifier public Annotation Override close IOException IfStatement BinaryOperation != MemberReference reader Literal null BlockStatement StatementExpression MethodInvocation reader close StatementExpression Assignment MemberReference reader Literal null = End MethodDeclaration Modifier public Annotation Override ReferenceType DocData getNextDocData FormalParameter ReferenceType DocData docData NoMoreDataException IOException LocalVariableDeclaration ReferenceType String VariableDeclarator line SynchronizedStatement This StatementExpression Assignment MemberReference line MethodInvocation reader readLine = IfStatement BinaryOperation == MemberReference line Literal null BlockStatement IfStatement MemberReference ! forever BlockStatement ThrowStatement ClassCreator ReferenceType NoMoreDataException End StatementExpression MethodInvocation openFile ReturnStatement MethodInvocation MemberReference docData getNextDocData End LocalVariableDeclaration BasicType int VariableDeclarator spot MethodInvocation line MemberReference SEP indexOf IfStatement BinaryOperation == MemberReference spot Literal - 1 BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + Literal ""line: ["" MemberReference line Literal ""] is in an invalid format !"" End LocalVariableDeclaration BasicType int VariableDeclarator spot2 MethodInvocation line MemberReference SEP BinaryOperation + Literal 1 MemberReference spot indexOf IfStatement BinaryOperation == MemberReference spot2 Literal - 1 BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + Literal ""line: ["" MemberReference line Literal ""] is in an invalid format !"" End StatementExpression MethodInvocation docData clear StatementExpression MethodInvocation docData MethodInvocation line BinaryOperation + Literal 1 MemberReference spot2 MethodInvocation line length substring setBody StatementExpression MethodInvocation docData MethodInvocation line Literal 0 MemberReference spot substring setTitle StatementExpression MethodInvocation docData MethodInvocation line BinaryOperation + Literal 1 MemberReference spot MemberReference spot2 substring setDate ReturnStatement MemberReference docData MethodDeclaration Modifier public Annotation Override resetInputs IOException StatementExpression SuperMethodInvocation resetInputs StatementExpression MethodInvocation openFile MethodDeclaration Modifier public Annotation Override setConfig FormalParameter ReferenceType Config config StatementExpression SuperMethodInvocation MemberReference config setConfig LocalVariableDeclaration ReferenceType String VariableDeclarator fileName MethodInvocation config Literal ""docs.file"" Literal null get IfStatement BinaryOperation == MemberReference fileName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""docs.file must be set"" End StatementExpression Assignment MemberReference file ClassCreator MethodInvocation getAbsoluteFile ReferenceType File MemberReference fileName = IfStatement BinaryOperation == MemberReference encoding Literal null BlockStatement StatementExpression Assignment MemberReference encoding Literal ""UTF-8"" = End ReferenceType ContentSource",1
568,568,,1
896,896,,1
51,51,CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import org.apache.lucene.store.Directory ClassDeclaration Modifier final FormatPostingsFieldsWriter FieldDeclaration Modifier final ReferenceType Directory VariableDeclarator dir FieldDeclaration Modifier final ReferenceType String VariableDeclarator segment FieldDeclaration Modifier final ReferenceType TermInfosWriter VariableDeclarator termsOut FieldDeclaration Modifier final ReferenceType FieldInfos VariableDeclarator fieldInfos FieldDeclaration Modifier final ReferenceType FormatPostingsTermsWriter VariableDeclarator termsWriter FieldDeclaration Modifier final ReferenceType DefaultSkipListWriter VariableDeclarator skipListWriter FieldDeclaration Modifier final BasicType int VariableDeclarator totalNumDocs ConstructorDeclaration Modifier public FormatPostingsFieldsWriter FormalParameter ReferenceType SegmentWriteState state FormalParameter ReferenceType FieldInfos fieldInfos IOException StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference dir MemberReference state directory = StatementExpression Assignment MemberReference segment MemberReference state segmentName = StatementExpression Assignment MemberReference totalNumDocs MemberReference state numDocs = StatementExpression Assignment This MemberReference fieldInfos MemberReference fieldInfos = StatementExpression Assignment MemberReference termsOut ClassCreator ReferenceType TermInfosWriter MemberReference dir MemberReference segment MemberReference fieldInfos MemberReference state termIndexInterval = StatementExpression Assignment MemberReference skipListWriter ClassCreator ReferenceType DefaultSkipListWriter MemberReference termsOut skipInterval MemberReference termsOut maxSkipLevels MemberReference totalNumDocs Literal null Literal null = StatementExpression MethodInvocation state.flushedFiles MethodInvocation state MemberReference IndexFileNames TERMS_EXTENSION segmentFileName add StatementExpression MethodInvocation state.flushedFiles MethodInvocation state MemberReference IndexFileNames TERMS_INDEX_EXTENSION segmentFileName add StatementExpression Assignment MemberReference termsWriter ClassCreator ReferenceType FormatPostingsTermsWriter MemberReference state This = MethodDeclaration /** Add a new field */ Annotation Override ReferenceType FormatPostingsTermsConsumer addField FormalParameter ReferenceType FieldInfo field StatementExpression MethodInvocation termsWriter MemberReference field setField ReturnStatement MemberReference termsWriter MethodDeclaration /** Called when we are done adding everything. */ Annotation Override finish IOException StatementExpression MethodInvocation termsOut close StatementExpression MethodInvocation termsWriter close ReferenceType FormatPostingsFieldsConsumer,0
344,344,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.payloads Import org.apache.lucene.index.Payload ClassDeclaration Modifier public abstract /**
 * Base class for payload encoders.
 *
 **/ AbstractEncoder MethodDeclaration Modifier public ReferenceType Payload encode FormalParameter BasicType char buffer ReturnStatement MethodInvocation MemberReference buffer Literal 0 MemberReference buffer length encode ReferenceType PayloadEncoder",0
620,620,,1
525,525,CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.io.IOException Import java.util.HashMap Import java.util.Map Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.index.IndexReader ClassDeclaration Modifier public FlushReaderTask FieldDeclaration ReferenceType String VariableDeclarator userData Literal null ConstructorDeclaration Modifier public FlushReaderTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType boolean supportsParams ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override setParams FormalParameter ReferenceType String params StatementExpression SuperMethodInvocation MemberReference params setParams StatementExpression Assignment MemberReference userData MemberReference params = MethodDeclaration Modifier public Annotation Override BasicType int doLogic IOException LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator reader MethodInvocation MethodInvocation getIndexReader getRunData IfStatement BinaryOperation != MemberReference userData Literal null BlockStatement LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator map ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String StatementExpression MethodInvocation map MemberReference OpenReaderTask USER_DATA MemberReference userData put StatementExpression MethodInvocation reader MemberReference map flush BlockStatement StatementExpression MethodInvocation reader flush End StatementExpression MethodInvocation reader decRef ReturnStatement Literal 1 ReferenceType PerfTask,0
530,530,"CompilationUnit PackageDeclaration org.apache.lucene.search Import org.apache.lucene.document.Document Import org.apache.lucene.document.FieldSelector Import org.apache.lucene.index.CorruptIndexException Import org.apache.lucene.index.Term Import org.apache.lucene.index.IndexReader Import org.apache.lucene.util.ReaderUtil Import org.apache.lucene.util.DummyConcurrentLock Import java.io.IOException Import java.util.HashMap Import java.util.HashSet Import java.util.Map Import java.util.Set Import java.util.concurrent.Callable Import java.util.concurrent.locks.Lock ClassDeclaration Modifier public /** Implements search over a set of <code>Searchables</code>.
 *
 * <p>Applications usually need only call the inherited {@link #search(Query,int)}
 * or {@link #search(Query,Filter,int)} methods.
 */ MultiSearcher ClassDeclaration Modifier private static /**
   * Document Frequency cache acting as a Dummy-Searcher. This class is no
   * full-fledged Searcher, but only supports the methods necessary to
   * initialize Weights.
   */ CachedDfSource FieldDeclaration Modifier private final ReferenceType Map TypeArgument ReferenceType Term TypeArgument ReferenceType Integer VariableDeclarator dfMap FieldDeclaration Modifier private final BasicType int VariableDeclarator maxDoc ConstructorDeclaration Modifier public CachedDfSource FormalParameter ReferenceType Map TypeArgument ReferenceType Term TypeArgument ReferenceType Integer dfMap FormalParameter BasicType int maxDoc FormalParameter ReferenceType Similarity similarity StatementExpression Assignment This MemberReference dfMap MemberReference dfMap = StatementExpression Assignment This MemberReference maxDoc MemberReference maxDoc = StatementExpression MethodInvocation MemberReference similarity setSimilarity MethodDeclaration Modifier public Annotation Override BasicType int docFreq FormalParameter ReferenceType Term term LocalVariableDeclaration BasicType int VariableDeclarator df TryStatement StatementExpression Assignment MemberReference df MethodInvocation dfMap MethodInvocation intValue MemberReference term get = CatchClause CatchClauseParameter NullPointerException e ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""df for term "" MethodInvocation term text Literal "" not available"" ReturnStatement MemberReference df MethodDeclaration Modifier public Annotation Override BasicType int docFreqs FormalParameter ReferenceType Term terms LocalVariableDeclaration Modifier final BasicType int VariableDeclarator result ArrayCreator BasicType int MemberReference terms length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference terms length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i result MethodInvocation MemberReference ArraySelector MemberReference i terms docFreq = End ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType int maxDoc ReturnStatement MemberReference maxDoc MethodDeclaration Modifier public Annotation Override ReferenceType Query rewrite FormalParameter ReferenceType Query query ReturnStatement MemberReference query MethodDeclaration Modifier public Annotation Override close ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override ReferenceType Document doc FormalParameter BasicType int i ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override ReferenceType Document doc FormalParameter BasicType int i FormalParameter ReferenceType FieldSelector fieldSelector ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override ReferenceType Explanation explain FormalParameter ReferenceType Weight weight FormalParameter BasicType int doc ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override search FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Filter filter FormalParameter ReferenceType Collector results ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override ReferenceType TopDocs search FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Filter filter FormalParameter BasicType int n ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public Annotation Override ReferenceType TopFieldDocs search FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Filter filter FormalParameter BasicType int n FormalParameter ReferenceType Sort sort ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType Searcher FieldDeclaration Modifier private ReferenceType Searchable VariableDeclarator searchables FieldDeclaration Modifier private BasicType int VariableDeclarator starts FieldDeclaration Modifier private BasicType int VariableDeclarator maxDoc Literal 0 ConstructorDeclaration Modifier public /** Creates a searcher which searches <i>searchers</i>. */ MultiSearcher FormalParameter ReferenceType Searchable searchables  IOException StatementExpression Assignment This MemberReference searchables MemberReference searchables = StatementExpression Assignment MemberReference starts ArrayCreator BasicType int BinaryOperation + MemberReference searchables length Literal 1 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference searchables length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i starts MemberReference maxDoc = StatementExpression Assignment MemberReference maxDoc MemberReference ArraySelector MemberReference i MethodInvocation maxDoc searchables += End StatementExpression Assignment MemberReference ArraySelector MemberReference searchables length starts MemberReference maxDoc = MethodDeclaration /** Return the array of {@link Searchable}s this searches. */ Modifier public ReferenceType Searchable getSearchables ReturnStatement MemberReference searchables MethodDeclaration Modifier protected BasicType int getStarts ReturnStatement MemberReference starts MethodDeclaration Modifier public Annotation Override close IOException ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference searchables length MemberReference ++ i StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation close searchables End MethodDeclaration Modifier public Annotation Override BasicType int docFreq FormalParameter ReferenceType Term term IOException LocalVariableDeclaration BasicType int VariableDeclarator docFreq Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference searchables length MemberReference ++ i StatementExpression Assignment MemberReference docFreq MemberReference ArraySelector MemberReference i MethodInvocation MemberReference term docFreq searchables += End ReturnStatement MemberReference docFreq MethodDeclaration Modifier public Annotation Override ReferenceType Document doc FormalParameter BasicType int n CorruptIndexException IOException LocalVariableDeclaration BasicType int VariableDeclarator i MethodInvocation MemberReference n subSearcher ReturnStatement MemberReference ArraySelector MemberReference i MethodInvocation BinaryOperation - MemberReference n MemberReference ArraySelector MemberReference i starts doc searchables MethodDeclaration Modifier public Annotation Override ReferenceType Document doc FormalParameter BasicType int n FormalParameter ReferenceType FieldSelector fieldSelector CorruptIndexException IOException LocalVariableDeclaration BasicType int VariableDeclarator i MethodInvocation MemberReference n subSearcher ReturnStatement MemberReference ArraySelector MemberReference i MethodInvocation BinaryOperation - MemberReference n MemberReference ArraySelector MemberReference i starts MemberReference fieldSelector doc searchables MethodDeclaration /** Returns index of the searcher for document <code>n</code> in the array
   * used to construct this searcher. */ Modifier public BasicType int subSearcher FormalParameter BasicType int n ReturnStatement MethodInvocation ReaderUtil MemberReference n MemberReference starts subIndex MethodDeclaration /** Returns the document number of document <code>n</code> within its
   * sub-index. */ Modifier public BasicType int subDoc FormalParameter BasicType int n ReturnStatement BinaryOperation - MemberReference n MemberReference ArraySelector MethodInvocation MemberReference n subSearcher starts MethodDeclaration Modifier public Annotation Override BasicType int maxDoc IOException ReturnStatement MemberReference maxDoc MethodDeclaration Modifier public Annotation Override ReferenceType TopDocs search FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Filter filter FormalParameter BasicType int nDocs IOException LocalVariableDeclaration Modifier final ReferenceType HitQueue VariableDeclarator hq ClassCreator ReferenceType HitQueue MemberReference nDocs Literal false LocalVariableDeclaration BasicType int VariableDeclarator totalHits Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference searchables length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType TopDocs VariableDeclarator docs ClassCreator MethodInvocation call ReferenceType MultiSearcherCallableNoSort MemberReference DummyConcurrentLock INSTANCE MemberReference ArraySelector MemberReference i searchables MemberReference weight MemberReference filter MemberReference nDocs MemberReference hq MemberReference i MemberReference starts StatementExpression Assignment MemberReference totalHits MemberReference docs totalHits += End LocalVariableDeclaration Modifier final ReferenceType ScoreDoc VariableDeclarator scoreDocs ArrayCreator ReferenceType ScoreDoc MethodInvocation hq size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation - MethodInvocation hq size Literal 1 BinaryOperation >= MemberReference i Literal 0 MemberReference -- i StatementExpression Assignment MemberReference ArraySelector MemberReference i scoreDocs MethodInvocation hq pop = End LocalVariableDeclaration BasicType float VariableDeclarator maxScore TernaryExpression BinaryOperation == MemberReference totalHits Literal 0 MemberReference Float NEGATIVE_INFINITY MemberReference ArraySelector Literal 0 MemberReference score scoreDocs ReturnStatement ClassCreator ReferenceType TopDocs MemberReference totalHits MemberReference scoreDocs MemberReference maxScore MethodDeclaration Modifier public Annotation Override ReferenceType TopFieldDocs search FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Filter filter FormalParameter BasicType int n FormalParameter ReferenceType Sort sort IOException LocalVariableDeclaration ReferenceType FieldDocSortedHitQueue VariableDeclarator hq ClassCreator ReferenceType FieldDocSortedHitQueue MemberReference n LocalVariableDeclaration BasicType int VariableDeclarator totalHits Literal 0 LocalVariableDeclaration BasicType float VariableDeclarator maxScore MemberReference Float NEGATIVE_INFINITY ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference searchables length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType TopFieldDocs VariableDeclarator docs ClassCreator MethodInvocation call ReferenceType MultiSearcherCallableWithSort MemberReference DummyConcurrentLock INSTANCE MemberReference ArraySelector MemberReference i searchables MemberReference weight MemberReference filter MemberReference n MemberReference hq MemberReference sort MemberReference i MemberReference starts StatementExpression Assignment MemberReference totalHits MemberReference docs totalHits += StatementExpression Assignment MemberReference maxScore MethodInvocation Math MemberReference maxScore MethodInvocation docs getMaxScore max = End LocalVariableDeclaration Modifier final ReferenceType ScoreDoc VariableDeclarator scoreDocs ArrayCreator ReferenceType ScoreDoc MethodInvocation hq size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation - MethodInvocation hq size Literal 1 BinaryOperation >= MemberReference i Literal 0 MemberReference -- i StatementExpression Assignment MemberReference ArraySelector MemberReference i scoreDocs MethodInvocation hq pop = End ReturnStatement ClassCreator ReferenceType TopFieldDocs MemberReference totalHits MemberReference scoreDocs MethodInvocation hq getFields MemberReference maxScore MethodDeclaration Modifier public Annotation Override search FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Filter filter FormalParameter Modifier final ReferenceType Collector collector IOException ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference searchables length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator start MemberReference ArraySelector MemberReference i starts LocalVariableDeclaration Modifier final ReferenceType Collector VariableDeclarator hc ClassCreator ReferenceType Collector MethodDeclaration Modifier public Annotation Override setScorer FormalParameter ReferenceType Scorer scorer IOException StatementExpression MethodInvocation collector MemberReference scorer setScorer MethodDeclaration Modifier public Annotation Override collect FormalParameter BasicType int doc IOException StatementExpression MethodInvocation collector MemberReference doc collect MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression MethodInvocation collector MemberReference reader BinaryOperation + MemberReference start MemberReference docBase setNextReader MethodDeclaration Modifier public Annotation Override BasicType boolean acceptsDocsOutOfOrder ReturnStatement MethodInvocation collector acceptsDocsOutOfOrder StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation MemberReference weight MemberReference filter MemberReference hc search searchables End MethodDeclaration Modifier public Annotation Override ReferenceType Query rewrite FormalParameter ReferenceType Query original IOException LocalVariableDeclaration Modifier final ReferenceType Query VariableDeclarator queries ArrayCreator ReferenceType Query MemberReference searchables length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference searchables length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i queries MemberReference ArraySelector MemberReference i MethodInvocation MemberReference original rewrite searchables = End ReturnStatement MemberReference ArraySelector Literal 0 MethodInvocation MemberReference queries combine queries MethodDeclaration Modifier public Annotation Override ReferenceType Explanation explain FormalParameter ReferenceType Weight weight FormalParameter BasicType int doc IOException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator i MethodInvocation MemberReference doc subSearcher ReturnStatement MemberReference ArraySelector MemberReference i MethodInvocation MemberReference weight BinaryOperation - MemberReference doc MemberReference ArraySelector MemberReference i starts explain searchables MethodDeclaration /**
   * Create weight in multiple index scenario.
   * 
   * Distributed query processing is done in the following steps:
   * 1. rewrite query
   * 2. extract necessary terms
   * 3. collect dfs for these terms from the Searchables
   * 4. create query weight using aggregate dfs.
   * 5. distribute that weight to Searchables
   * 6. merge results
   *
   * Steps 1-4 are done here, 5+6 in the search() methods
   *
   * @return rewritten queries
   */ Modifier protected Annotation Override ReferenceType Weight createWeight FormalParameter ReferenceType Query original IOException LocalVariableDeclaration Modifier final ReferenceType Query VariableDeclarator rewrittenQuery MethodInvocation MemberReference original rewrite LocalVariableDeclaration Modifier final ReferenceType Set TypeArgument ReferenceType Term VariableDeclarator terms ClassCreator ReferenceType HashSet TypeArgument ReferenceType Term StatementExpression MethodInvocation rewrittenQuery MemberReference terms extractTerms LocalVariableDeclaration Modifier final ReferenceType Term VariableDeclarator allTermsArray ArrayCreator ReferenceType Term MethodInvocation terms size StatementExpression MethodInvocation terms MemberReference allTermsArray toArray LocalVariableDeclaration BasicType int VariableDeclarator aggregatedDfs ArrayCreator BasicType int MethodInvocation terms size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference searchables length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator dfs MemberReference ArraySelector MemberReference i MethodInvocation MemberReference allTermsArray docFreqs searchables ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference aggregatedDfs length MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j aggregatedDfs MemberReference ArraySelector MemberReference j dfs += End End LocalVariableDeclaration Modifier final ReferenceType HashMap TypeArgument ReferenceType Term TypeArgument ReferenceType Integer VariableDeclarator dfMap ClassCreator ReferenceType HashMap TypeArgument ReferenceType Term TypeArgument ReferenceType Integer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference allTermsArray length MemberReference ++ i BlockStatement StatementExpression MethodInvocation dfMap MemberReference ArraySelector MemberReference i allTermsArray MethodInvocation Integer MemberReference ArraySelector MemberReference i aggregatedDfs valueOf put End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numDocs MethodInvocation maxDoc LocalVariableDeclaration Modifier final ReferenceType CachedDfSource VariableDeclarator cacheSim ClassCreator ReferenceType CachedDfSource MemberReference dfMap MemberReference numDocs MethodInvocation getSimilarity ReturnStatement MethodInvocation rewrittenQuery MemberReference cacheSim weight ClassDeclaration Modifier static /**
   * A thread subclass for searching a single searchable 
   */ MultiSearcherCallableNoSort FieldDeclaration Modifier private final ReferenceType Lock VariableDeclarator lock FieldDeclaration Modifier private final ReferenceType Searchable VariableDeclarator searchable FieldDeclaration Modifier private final ReferenceType Weight VariableDeclarator weight FieldDeclaration Modifier private final ReferenceType Filter VariableDeclarator filter FieldDeclaration Modifier private final BasicType int VariableDeclarator nDocs FieldDeclaration Modifier private final BasicType int VariableDeclarator i FieldDeclaration Modifier private final ReferenceType HitQueue VariableDeclarator hq FieldDeclaration Modifier private final BasicType int VariableDeclarator starts ConstructorDeclaration Modifier public MultiSearcherCallableNoSort FormalParameter ReferenceType Lock lock FormalParameter ReferenceType Searchable searchable FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Filter filter FormalParameter BasicType int nDocs FormalParameter ReferenceType HitQueue hq FormalParameter BasicType int i FormalParameter BasicType int starts StatementExpression Assignment This MemberReference lock MemberReference lock = StatementExpression Assignment This MemberReference searchable MemberReference searchable = StatementExpression Assignment This MemberReference weight MemberReference weight = StatementExpression Assignment This MemberReference filter MemberReference filter = StatementExpression Assignment This MemberReference nDocs MemberReference nDocs = StatementExpression Assignment This MemberReference hq MemberReference hq = StatementExpression Assignment This MemberReference i MemberReference i = StatementExpression Assignment This MemberReference starts MemberReference starts = MethodDeclaration Modifier public ReferenceType TopDocs call IOException LocalVariableDeclaration Modifier final ReferenceType TopDocs VariableDeclarator docs MethodInvocation searchable MemberReference weight MemberReference filter MemberReference nDocs search LocalVariableDeclaration Modifier final ReferenceType ScoreDoc VariableDeclarator scoreDocs MemberReference docs scoreDocs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference scoreDocs length MemberReference ++ j BlockStatement LocalVariableDeclaration Modifier final ReferenceType ScoreDoc VariableDeclarator scoreDoc MemberReference ArraySelector MemberReference j scoreDocs StatementExpression Assignment MemberReference scoreDoc doc MemberReference ArraySelector MemberReference i starts += StatementExpression MethodInvocation lock lock TryStatement IfStatement BinaryOperation == MemberReference scoreDoc MethodInvocation hq MemberReference scoreDoc insertWithOverflow BreakStatement End StatementExpression MethodInvocation lock unlock End ReturnStatement MemberReference docs ReferenceType Callable TypeArgument ReferenceType TopDocs ClassDeclaration Modifier static /**
   * A thread subclass for searching a single searchable 
   */ MultiSearcherCallableWithSort FieldDeclaration Modifier private final ReferenceType Lock VariableDeclarator lock FieldDeclaration Modifier private final ReferenceType Searchable VariableDeclarator searchable FieldDeclaration Modifier private final ReferenceType Weight VariableDeclarator weight FieldDeclaration Modifier private final ReferenceType Filter VariableDeclarator filter FieldDeclaration Modifier private final BasicType int VariableDeclarator nDocs FieldDeclaration Modifier private final BasicType int VariableDeclarator i FieldDeclaration Modifier private final ReferenceType FieldDocSortedHitQueue VariableDeclarator hq FieldDeclaration Modifier private final BasicType int VariableDeclarator starts FieldDeclaration Modifier private final ReferenceType Sort VariableDeclarator sort ConstructorDeclaration Modifier public MultiSearcherCallableWithSort FormalParameter ReferenceType Lock lock FormalParameter ReferenceType Searchable searchable FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Filter filter FormalParameter BasicType int nDocs FormalParameter ReferenceType FieldDocSortedHitQueue hq FormalParameter ReferenceType Sort sort FormalParameter BasicType int i FormalParameter BasicType int starts StatementExpression Assignment This MemberReference lock MemberReference lock = StatementExpression Assignment This MemberReference searchable MemberReference searchable = StatementExpression Assignment This MemberReference weight MemberReference weight = StatementExpression Assignment This MemberReference filter MemberReference filter = StatementExpression Assignment This MemberReference nDocs MemberReference nDocs = StatementExpression Assignment This MemberReference hq MemberReference hq = StatementExpression Assignment This MemberReference i MemberReference i = StatementExpression Assignment This MemberReference starts MemberReference starts = StatementExpression Assignment This MemberReference sort MemberReference sort = MethodDeclaration Modifier public ReferenceType TopFieldDocs call IOException LocalVariableDeclaration Modifier final ReferenceType TopFieldDocs VariableDeclarator docs MethodInvocation searchable MemberReference weight MemberReference filter MemberReference nDocs MemberReference sort search ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference docs.fields length MemberReference ++ j BlockStatement IfStatement BinaryOperation == MemberReference docs ArraySelector MemberReference j MethodInvocation getType fields MemberReference SortField DOC BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j2 Literal 0 BinaryOperation < MemberReference j2 MemberReference docs.scoreDocs length MemberReference ++ j2 BlockStatement LocalVariableDeclaration ReferenceType FieldDoc VariableDeclarator fd Cast ReferenceType FieldDoc MemberReference docs ArraySelector MemberReference j2 scoreDocs StatementExpression Assignment MemberReference fd ArraySelector MemberReference j fields MethodInvocation Integer BinaryOperation + Cast ReferenceType Integer MemberReference fd ArraySelector MemberReference j fields MemberReference ArraySelector MemberReference i starts valueOf = End BreakStatement End End StatementExpression MethodInvocation lock lock TryStatement StatementExpression MethodInvocation hq MemberReference docs fields setFields StatementExpression MethodInvocation lock unlock LocalVariableDeclaration Modifier final ReferenceType ScoreDoc VariableDeclarator scoreDocs MemberReference docs scoreDocs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference scoreDocs length MemberReference ++ j BlockStatement LocalVariableDeclaration Modifier final ReferenceType FieldDoc VariableDeclarator fieldDoc Cast ReferenceType FieldDoc MemberReference ArraySelector MemberReference j scoreDocs StatementExpression Assignment MemberReference fieldDoc doc MemberReference ArraySelector MemberReference i starts += StatementExpression MethodInvocation lock lock TryStatement IfStatement BinaryOperation == MemberReference fieldDoc MethodInvocation hq MemberReference fieldDoc insertWithOverflow BreakStatement End StatementExpression MethodInvocation lock unlock End ReturnStatement MemberReference docs ReferenceType Callable TypeArgument ReferenceType TopFieldDocs ReferenceType Searcher",0
784,784,,0
546,546,CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import org.apache.lucene.index  ClassDeclaration Modifier final ExactPhraseScorer ConstructorDeclaration ExactPhraseScorer FormalParameter ReferenceType Weight weight FormalParameter ReferenceType TermPositions tps FormalParameter BasicType int offsets FormalParameter ReferenceType Similarity similarity FormalParameter BasicType byte norms StatementExpression SuperConstructorInvocation MemberReference weight MemberReference tps MemberReference offsets MemberReference similarity MemberReference norms MethodDeclaration Modifier final protected Annotation Override BasicType float phraseFreq IOException StatementExpression MethodInvocation pq clear ForStatement ForControl VariableDeclaration ReferenceType PhrasePositions VariableDeclarator pp MemberReference first BinaryOperation != MemberReference pp Literal null Assignment MemberReference pp MemberReference pp next = BlockStatement StatementExpression MethodInvocation pp firstPosition StatementExpression MethodInvocation pq MemberReference pp add End StatementExpression MethodInvocation pqToList LocalVariableDeclaration BasicType int VariableDeclarator freq Literal 0 DoStatement MethodInvocation last nextPosition BlockStatement WhileStatement BinaryOperation < MemberReference first position MemberReference last position BlockStatement DoStatement BinaryOperation < MemberReference first position MemberReference last position BlockStatement IfStatement MethodInvocation ! first nextPosition ReturnStatement MemberReference freq End End StatementExpression MethodInvocation firstToLast End StatementExpression MemberReference ++ freq End ReturnStatement MemberReference freq ReferenceType PhraseScorer,1
668,668,,0
121,121,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.lang.reflect  Import java.text.DecimalFormat Import java.util  ClassDeclaration Modifier public final /**
 * Estimates the size of a given Object using a given MemoryModel for primitive
 * size information.
 * 
 * Resource Usage: 
 * 
 * Internally uses a Map to temporally hold a reference to every
 * object seen. 
 * 
 * If checkIntered, all Strings checked will be interned, but those
 * that were not already interned will be released for GC when the
 * estimate is complete.
 */ RamUsageEstimator FieldDeclaration Modifier private ReferenceType MemoryModel VariableDeclarator memoryModel FieldDeclaration Modifier private final ReferenceType Map TypeArgument ReferenceType Object TypeArgument ReferenceType Object VariableDeclarator seen FieldDeclaration Modifier private BasicType int VariableDeclarator refSize FieldDeclaration Modifier private BasicType int VariableDeclarator arraySize FieldDeclaration Modifier private BasicType int VariableDeclarator classSize FieldDeclaration Modifier private BasicType boolean VariableDeclarator checkInterned ConstructorDeclaration Modifier public /**
   * Constructs this object with an AverageGuessMemoryModel and
   * checkInterned = true.
   */ RamUsageEstimator StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType AverageGuessMemoryModel ConstructorDeclaration Modifier public /**
   * @param checkInterned check if Strings are interned and don't add to size
   * if they are. Defaults to true but if you know the objects you are checking
   * won't likely contain many interned Strings, it will be faster to turn off
   * intern checking.
   */ RamUsageEstimator FormalParameter BasicType boolean checkInterned StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType AverageGuessMemoryModel MemberReference checkInterned ConstructorDeclaration Modifier public /**
   * @param memoryModel MemoryModel to use for primitive object sizes.
   */ RamUsageEstimator FormalParameter ReferenceType MemoryModel memoryModel StatementExpression ExplicitConstructorInvocation MemberReference memoryModel Literal true ConstructorDeclaration Modifier public /**
   * @param memoryModel MemoryModel to use for primitive object sizes.
   * @param checkInterned check if Strings are interned and don't add to size
   * if they are. Defaults to true but if you know the objects you are checking
   * won't likely contain many interned Strings, it will be faster to turn off
   * intern checking.
   */ RamUsageEstimator FormalParameter ReferenceType MemoryModel memoryModel FormalParameter BasicType boolean checkInterned StatementExpression Assignment This MemberReference memoryModel MemberReference memoryModel = StatementExpression Assignment This MemberReference checkInterned MemberReference checkInterned = StatementExpression Assignment MemberReference seen ClassCreator ReferenceType IdentityHashMap TypeArgument ReferenceType Object TypeArgument ReferenceType Object Literal 64 = StatementExpression Assignment This MemberReference refSize MethodInvocation memoryModel getReferenceSize = StatementExpression Assignment This MemberReference arraySize MethodInvocation memoryModel getArraySize = StatementExpression Assignment This MemberReference classSize MethodInvocation memoryModel getClassSize = MethodDeclaration Modifier public BasicType long estimateRamUsage FormalParameter ReferenceType Object obj LocalVariableDeclaration BasicType long VariableDeclarator size MethodInvocation MemberReference obj size StatementExpression MethodInvocation seen clear ReturnStatement MemberReference size MethodDeclaration Modifier private BasicType long size FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj Literal null BlockStatement ReturnStatement Literal 0 End IfStatement BinaryOperation && BinaryOperation && MemberReference checkInterned BinaryOperation instanceof MemberReference obj ReferenceType String BinaryOperation == MemberReference obj Cast ReferenceType String MemberReference obj BlockStatement ReturnStatement Literal 0 End IfStatement MethodInvocation seen MemberReference obj containsKey BlockStatement ReturnStatement Literal 0 End StatementExpression MethodInvocation seen MemberReference obj Literal null put LocalVariableDeclaration ReferenceType Class VariableDeclarator clazz MethodInvocation obj getClass IfStatement MethodInvocation clazz isArray BlockStatement ReturnStatement MethodInvocation MemberReference obj sizeOfArray End LocalVariableDeclaration BasicType long VariableDeclarator size Literal 0 WhileStatement BinaryOperation != MemberReference clazz Literal null BlockStatement LocalVariableDeclaration ReferenceType Field VariableDeclarator fields MethodInvocation clazz getDeclaredFields ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fields length MemberReference ++ i BlockStatement IfStatement MethodInvocation Modifier MemberReference ArraySelector MemberReference i MethodInvocation getModifiers fields isStatic BlockStatement ContinueStatement End IfStatement MemberReference ArraySelector MemberReference i MethodInvocation getType MethodInvocation isPrimitive fields BlockStatement StatementExpression Assignment MemberReference size MethodInvocation memoryModel MemberReference ArraySelector MemberReference i MethodInvocation getType fields getPrimitiveSize += BlockStatement StatementExpression Assignment MemberReference size MemberReference refSize += StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation Literal true setAccessible fields TryStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator value MemberReference ArraySelector MemberReference i MethodInvocation MemberReference obj get fields IfStatement BinaryOperation != MemberReference value Literal null BlockStatement StatementExpression Assignment MemberReference size MethodInvocation MemberReference value size += End CatchClause CatchClauseParameter IllegalAccessException ex End End StatementExpression Assignment MemberReference clazz MethodInvocation clazz getSuperclass = End StatementExpression Assignment MemberReference size MemberReference classSize += ReturnStatement MemberReference size MethodDeclaration Modifier private BasicType long sizeOfArray FormalParameter ReferenceType Object obj LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation Array MemberReference obj getLength IfStatement BinaryOperation == MemberReference len Literal 0 BlockStatement ReturnStatement Literal 0 End LocalVariableDeclaration BasicType long VariableDeclarator size MemberReference arraySize LocalVariableDeclaration ReferenceType Class VariableDeclarator arrayElementClazz MethodInvocation obj MethodInvocation getComponentType getClass IfStatement MethodInvocation arrayElementClazz isPrimitive BlockStatement StatementExpression Assignment MemberReference size BinaryOperation * MemberReference len MethodInvocation memoryModel MemberReference arrayElementClazz getPrimitiveSize += BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference len MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference size BinaryOperation + MemberReference refSize MethodInvocation MethodInvocation Array MemberReference obj MemberReference i get size += End End ReturnStatement MemberReference size FieldDeclaration Modifier private final static BasicType long VariableDeclarator ONE_KB Literal 1024 FieldDeclaration Modifier private final static BasicType long VariableDeclarator ONE_MB BinaryOperation * MemberReference ONE_KB MemberReference ONE_KB FieldDeclaration Modifier private final static BasicType long VariableDeclarator ONE_GB BinaryOperation * MemberReference ONE_KB MemberReference ONE_MB MethodDeclaration /**
   * Return good default units based on byte size.
   */ Modifier public static ReferenceType String humanReadableUnits FormalParameter BasicType long bytes FormalParameter ReferenceType DecimalFormat df LocalVariableDeclaration ReferenceType String VariableDeclarator newSizeAndUnits IfStatement BinaryOperation > BinaryOperation / MemberReference bytes MemberReference ONE_GB Literal 0 BlockStatement StatementExpression Assignment MemberReference newSizeAndUnits BinaryOperation + MethodInvocation String MethodInvocation df BinaryOperation / Cast BasicType float MemberReference bytes MemberReference ONE_GB format valueOf Literal "" GB"" = IfStatement BinaryOperation > BinaryOperation / MemberReference bytes MemberReference ONE_MB Literal 0 BlockStatement StatementExpression Assignment MemberReference newSizeAndUnits BinaryOperation + MethodInvocation String MethodInvocation df BinaryOperation / Cast BasicType float MemberReference bytes MemberReference ONE_MB format valueOf Literal "" MB"" = IfStatement BinaryOperation > BinaryOperation / MemberReference bytes MemberReference ONE_KB Literal 0 BlockStatement StatementExpression Assignment MemberReference newSizeAndUnits BinaryOperation + MethodInvocation String MethodInvocation df BinaryOperation / Cast BasicType float MemberReference bytes MemberReference ONE_KB format valueOf Literal "" KB"" = BlockStatement StatementExpression Assignment MemberReference newSizeAndUnits BinaryOperation + MethodInvocation String MemberReference bytes valueOf Literal "" bytes"" = End End End ReturnStatement MemberReference newSizeAndUnits",0
252,252,"CompilationUnit PackageDeclaration org.apache.lucene.util Import org.apache.lucene.analysis.NumericTokenStream Import org.apache.lucene.document.NumericField Import org.apache.lucene.search.NumericRangeQuery Import org.apache.lucene.search.NumericRangeFilter ClassDeclaration Modifier public final /**
 * This is a helper class to generate prefix-encoded representations for numerical values
 * and supplies converters to represent float/double values as sortable integers/longs.
 *
 * <p>To quickly execute range queries in Apache Lucene, a range is divided recursively
 * into multiple intervals for searching: The center of the range is searched only with
 * the lowest possible precision in the trie, while the boundaries are matched
 * more exactly. This reduces the number of terms dramatically.
 *
 * <p>This class generates terms to achieve this: First the numerical integer values need to
 * be converted to strings. For that integer values (32 bit or 64 bit) are made unsigned
 * and the bits are converted to ASCII chars with each 7 bit. The resulting string is
 * sortable like the original integer value. Each value is also prefixed
 * (in the first char) by the <code>shift</code> value (number of bits removed) used
 * during encoding.
 *
 * <p>To also index floating point numbers, this class supplies two methods to convert them
 * to integer values by changing their bit layout: {@link #doubleToSortableLong},
 * {@link #floatToSortableInt}. You will have no precision loss by
 * converting floating point numbers to integers and back (only that the integer form
 * is not usable). Other data types like dates can easily converted to longs or ints (e.g.
 * date to long: {@link java.util.Date#getTime}).
 *
 * <p>For easy usage, the trie algorithm is implemented for indexing inside
 * {@link NumericTokenStream} that can index <code>int</code>, <code>long</code>,
 * <code>float</code>, and <code>double</code>. For querying,
 * {@link NumericRangeQuery} and {@link NumericRangeFilter} implement the query part
 * for the same data types.
 *
 * <p>This class can also be used, to generate lexicographically sortable (according
 * {@link String#compareTo(String)}) representations of numeric data types for other
 * usages (e.g. sorting).
 *
 * <p><font color=""red""><b>NOTE:</b> This API is experimental and
 * might change in incompatible ways in the next release.</font>
 *
 * @since 2.9
 */ NumericUtils ConstructorDeclaration Modifier private NumericUtils FieldDeclaration /**
   * The default precision step used by {@link NumericField}, {@link NumericTokenStream},
   * {@link NumericRangeQuery}, and {@link NumericRangeFilter} as default
   */ Modifier public final static BasicType int VariableDeclarator PRECISION_STEP_DEFAULT Literal 4 FieldDeclaration /**
   * Expert: Longs are stored at lower precision by shifting off lower bits. The shift count is
   * stored as <code>SHIFT_START_LONG+shift</code> in the first character
   */ Modifier public final static BasicType char VariableDeclarator SHIFT_START_LONG Cast BasicType char Literal 0x20 FieldDeclaration /**
   * Expert: The maximum term length (used for <code>char[]</code> buffer size)
   * for encoding <code>long</code> values.
   * @see #longToPrefixCoded(long,int,char[])
   */ Modifier public final static BasicType int VariableDeclarator BUF_SIZE_LONG BinaryOperation + BinaryOperation / Literal 63 Literal 7 Literal 2 FieldDeclaration /**
   * Expert: Integers are stored at lower precision by shifting off lower bits. The shift count is
   * stored as <code>SHIFT_START_INT+shift</code> in the first character
   */ Modifier public final static BasicType char VariableDeclarator SHIFT_START_INT Cast BasicType char Literal 0x60 FieldDeclaration /**
   * Expert: The maximum term length (used for <code>char[]</code> buffer size)
   * for encoding <code>int</code> values.
   * @see #intToPrefixCoded(int,int,char[])
   */ Modifier public final static BasicType int VariableDeclarator BUF_SIZE_INT BinaryOperation + BinaryOperation / Literal 31 Literal 7 Literal 2 MethodDeclaration /**
   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.
   * This is method is used by {@link NumericTokenStream}.
   * @param val the numeric value
   * @param shift how many bits to strip from the right
   * @param buffer that will contain the encoded chars, must be at least of {@link #BUF_SIZE_LONG}
   * length
   * @return number of chars written to buffer
   */ Modifier public static BasicType int longToPrefixCoded FormalParameter Modifier final BasicType long val FormalParameter Modifier final BasicType int shift FormalParameter Modifier final BasicType char buffer IfStatement BinaryOperation || BinaryOperation > MemberReference shift Literal 63 BinaryOperation < MemberReference shift Literal 0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Illegal shift value, must be 0..63"" End LocalVariableDeclaration BasicType int VariableDeclarator nChars BinaryOperation + BinaryOperation / BinaryOperation - Literal 63 MemberReference shift Literal 7 Literal 1 VariableDeclarator len BinaryOperation + MemberReference nChars Literal 1 StatementExpression Assignment MemberReference ArraySelector Literal 0 buffer Cast BasicType char BinaryOperation + MemberReference SHIFT_START_LONG MemberReference shift = LocalVariableDeclaration BasicType long VariableDeclarator sortableBits BinaryOperation ^ MemberReference val Literal 0x8000000000000000L StatementExpression Assignment MemberReference sortableBits MemberReference shift >>>= WhileStatement BinaryOperation >= MemberReference nChars Literal 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference -- nChars buffer Cast BasicType char BinaryOperation & MemberReference sortableBits Literal 0x7f = StatementExpression Assignment MemberReference sortableBits Literal 7 >>>= End ReturnStatement MemberReference len MethodDeclaration /**
   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.
   * This is method is used by {@link LongRangeBuilder}.
   * @param val the numeric value
   * @param shift how many bits to strip from the right
   */ Modifier public static ReferenceType String longToPrefixCoded FormalParameter Modifier final BasicType long val FormalParameter Modifier final BasicType int shift LocalVariableDeclaration Modifier final BasicType char VariableDeclarator buffer ArrayCreator BasicType char MemberReference BUF_SIZE_LONG LocalVariableDeclaration Modifier final BasicType int VariableDeclarator len MethodInvocation MemberReference val MemberReference shift MemberReference buffer longToPrefixCoded ReturnStatement ClassCreator ReferenceType String MemberReference buffer Literal 0 MemberReference len MethodDeclaration /**
   * This is a convenience method, that returns prefix coded bits of a long without
   * reducing the precision. It can be used to store the full precision value as a
   * stored field in index.
   * <p>To decode, use {@link #prefixCodedToLong}.
   */ Modifier public static ReferenceType String longToPrefixCoded FormalParameter Modifier final BasicType long val ReturnStatement MethodInvocation MemberReference val Literal 0 longToPrefixCoded MethodDeclaration /**
   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.
   * This is method is used by {@link NumericTokenStream}.
   * @param val the numeric value
   * @param shift how many bits to strip from the right
   * @param buffer that will contain the encoded chars, must be at least of {@link #BUF_SIZE_INT}
   * length
   * @return number of chars written to buffer
   */ Modifier public static BasicType int intToPrefixCoded FormalParameter Modifier final BasicType int val FormalParameter Modifier final BasicType int shift FormalParameter Modifier final BasicType char buffer IfStatement BinaryOperation || BinaryOperation > MemberReference shift Literal 31 BinaryOperation < MemberReference shift Literal 0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Illegal shift value, must be 0..31"" End LocalVariableDeclaration BasicType int VariableDeclarator nChars BinaryOperation + BinaryOperation / BinaryOperation - Literal 31 MemberReference shift Literal 7 Literal 1 VariableDeclarator len BinaryOperation + MemberReference nChars Literal 1 StatementExpression Assignment MemberReference ArraySelector Literal 0 buffer Cast BasicType char BinaryOperation + MemberReference SHIFT_START_INT MemberReference shift = LocalVariableDeclaration BasicType int VariableDeclarator sortableBits BinaryOperation ^ MemberReference val Literal 0x80000000 StatementExpression Assignment MemberReference sortableBits MemberReference shift >>>= WhileStatement BinaryOperation >= MemberReference nChars Literal 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference -- nChars buffer Cast BasicType char BinaryOperation & MemberReference sortableBits Literal 0x7f = StatementExpression Assignment MemberReference sortableBits Literal 7 >>>= End ReturnStatement MemberReference len MethodDeclaration /**
   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.
   * This is method is used by {@link IntRangeBuilder}.
   * @param val the numeric value
   * @param shift how many bits to strip from the right
   */ Modifier public static ReferenceType String intToPrefixCoded FormalParameter Modifier final BasicType int val FormalParameter Modifier final BasicType int shift LocalVariableDeclaration Modifier final BasicType char VariableDeclarator buffer ArrayCreator BasicType char MemberReference BUF_SIZE_INT LocalVariableDeclaration Modifier final BasicType int VariableDeclarator len MethodInvocation MemberReference val MemberReference shift MemberReference buffer intToPrefixCoded ReturnStatement ClassCreator ReferenceType String MemberReference buffer Literal 0 MemberReference len MethodDeclaration /**
   * This is a convenience method, that returns prefix coded bits of an int without
   * reducing the precision. It can be used to store the full precision value as a
   * stored field in index.
   * <p>To decode, use {@link #prefixCodedToInt}.
   */ Modifier public static ReferenceType String intToPrefixCoded FormalParameter Modifier final BasicType int val ReturnStatement MethodInvocation MemberReference val Literal 0 intToPrefixCoded MethodDeclaration /**
   * Returns a long from prefixCoded characters.
   * Rightmost bits will be zero for lower precision codes.
   * This method can be used to decode e.g. a stored field.
   * @throws NumberFormatException if the supplied string is
   * not correctly prefix encoded.
   * @see #longToPrefixCoded(long)
   */ Modifier public static BasicType long prefixCodedToLong FormalParameter Modifier final ReferenceType String prefixCoded LocalVariableDeclaration Modifier final BasicType int VariableDeclarator shift BinaryOperation - MethodInvocation prefixCoded Literal 0 charAt MemberReference SHIFT_START_LONG IfStatement BinaryOperation || BinaryOperation > MemberReference shift Literal 63 BinaryOperation < MemberReference shift Literal 0 ThrowStatement ClassCreator ReferenceType NumberFormatException Literal ""Invalid shift value in prefixCoded string (is encoded value really a LONG?)"" End LocalVariableDeclaration BasicType long VariableDeclarator sortableBits Literal 0L ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 VariableDeclarator len MethodInvocation prefixCoded length BinaryOperation < MemberReference i MemberReference len MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference sortableBits Literal 7 <<= LocalVariableDeclaration Modifier final BasicType char VariableDeclarator ch MethodInvocation prefixCoded MemberReference i charAt IfStatement BinaryOperation > MemberReference ch Literal 0x7f BlockStatement ThrowStatement ClassCreator ReferenceType NumberFormatException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Invalid prefixCoded numerical value representation (char "" MethodInvocation Integer Cast BasicType int MemberReference ch toHexString Literal "" at position "" MemberReference i Literal "" is invalid)"" End StatementExpression Assignment MemberReference sortableBits Cast BasicType long MemberReference ch |= End ReturnStatement BinaryOperation ^ BinaryOperation << MemberReference sortableBits MemberReference shift Literal 0x8000000000000000L MethodDeclaration /**
   * Returns an int from prefixCoded characters.
   * Rightmost bits will be zero for lower precision codes.
   * This method can be used to decode e.g. a stored field.
   * @throws NumberFormatException if the supplied string is
   * not correctly prefix encoded.
   * @see #intToPrefixCoded(int)
   */ Modifier public static BasicType int prefixCodedToInt FormalParameter Modifier final ReferenceType String prefixCoded LocalVariableDeclaration Modifier final BasicType int VariableDeclarator shift BinaryOperation - MethodInvocation prefixCoded Literal 0 charAt MemberReference SHIFT_START_INT IfStatement BinaryOperation || BinaryOperation > MemberReference shift Literal 31 BinaryOperation < MemberReference shift Literal 0 ThrowStatement ClassCreator ReferenceType NumberFormatException Literal ""Invalid shift value in prefixCoded string (is encoded value really an INT?)"" End LocalVariableDeclaration BasicType int VariableDeclarator sortableBits Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 VariableDeclarator len MethodInvocation prefixCoded length BinaryOperation < MemberReference i MemberReference len MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference sortableBits Literal 7 <<= LocalVariableDeclaration Modifier final BasicType char VariableDeclarator ch MethodInvocation prefixCoded MemberReference i charAt IfStatement BinaryOperation > MemberReference ch Literal 0x7f BlockStatement ThrowStatement ClassCreator ReferenceType NumberFormatException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Invalid prefixCoded numerical value representation (char "" MethodInvocation Integer Cast BasicType int MemberReference ch toHexString Literal "" at position "" MemberReference i Literal "" is invalid)"" End StatementExpression Assignment MemberReference sortableBits Cast BasicType int MemberReference ch |= End ReturnStatement BinaryOperation ^ BinaryOperation << MemberReference sortableBits MemberReference shift Literal 0x80000000 MethodDeclaration /**
   * Converts a <code>double</code> value to a sortable signed <code>long</code>.
   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;
   * bit layout and then some bits are swapped, to be able to compare the result as long.
   * By this the precision is not reduced, but the value can easily used as a long.
   * @see #sortableLongToDouble
   */ Modifier public static BasicType long doubleToSortableLong FormalParameter BasicType double val LocalVariableDeclaration BasicType long VariableDeclarator f MethodInvocation Double MemberReference val doubleToRawLongBits IfStatement BinaryOperation < MemberReference f Literal 0 StatementExpression Assignment MemberReference f Literal 0x7fffffffffffffffL ^= End ReturnStatement MemberReference f MethodDeclaration /**
   * Convenience method: this just returns:
   *   longToPrefixCoded(doubleToSortableLong(val))
   */ Modifier public static ReferenceType String doubleToPrefixCoded FormalParameter BasicType double val ReturnStatement MethodInvocation MethodInvocation MemberReference val doubleToSortableLong longToPrefixCoded MethodDeclaration /**
   * Converts a sortable <code>long</code> back to a <code>double</code>.
   * @see #doubleToSortableLong
   */ Modifier public static BasicType double sortableLongToDouble FormalParameter BasicType long val IfStatement BinaryOperation < MemberReference val Literal 0 StatementExpression Assignment MemberReference val Literal 0x7fffffffffffffffL ^= End ReturnStatement MethodInvocation Double MemberReference val longBitsToDouble MethodDeclaration /**
   * Convenience method: this just returns:
   *    sortableLongToDouble(prefixCodedToLong(val))
   */ Modifier public static BasicType double prefixCodedToDouble FormalParameter ReferenceType String val ReturnStatement MethodInvocation MethodInvocation MemberReference val prefixCodedToLong sortableLongToDouble MethodDeclaration /**
   * Converts a <code>float</code> value to a sortable signed <code>int</code>.
   * The value is converted by getting their IEEE 754 floating-point &quot;float format&quot;
   * bit layout and then some bits are swapped, to be able to compare the result as int.
   * By this the precision is not reduced, but the value can easily used as an int.
   * @see #sortableIntToFloat
   */ Modifier public static BasicType int floatToSortableInt FormalParameter BasicType float val LocalVariableDeclaration BasicType int VariableDeclarator f MethodInvocation Float MemberReference val floatToRawIntBits IfStatement BinaryOperation < MemberReference f Literal 0 StatementExpression Assignment MemberReference f Literal 0x7fffffff ^= End ReturnStatement MemberReference f MethodDeclaration /**
   * Convenience method: this just returns:
   *   intToPrefixCoded(floatToSortableInt(val))
   */ Modifier public static ReferenceType String floatToPrefixCoded FormalParameter BasicType float val ReturnStatement MethodInvocation MethodInvocation MemberReference val floatToSortableInt intToPrefixCoded MethodDeclaration /**
   * Converts a sortable <code>int</code> back to a <code>float</code>.
   * @see #floatToSortableInt
   */ Modifier public static BasicType float sortableIntToFloat FormalParameter BasicType int val IfStatement BinaryOperation < MemberReference val Literal 0 StatementExpression Assignment MemberReference val Literal 0x7fffffff ^= End ReturnStatement MethodInvocation Float MemberReference val intBitsToFloat MethodDeclaration /**
   * Convenience method: this just returns:
   *    sortableIntToFloat(prefixCodedToInt(val))
   */ Modifier public static BasicType float prefixCodedToFloat FormalParameter ReferenceType String val ReturnStatement MethodInvocation MethodInvocation MemberReference val prefixCodedToInt sortableIntToFloat MethodDeclaration /**
   * Expert: Splits a long range recursively.
   * You may implement a builder that adds clauses to a
   * {@link org.apache.lucene.search.BooleanQuery} for each call to its
   * {@link LongRangeBuilder#addRange(String,String)}
   * method.
   * <p>This method is used by {@link NumericRangeQuery}.
   */ Modifier public static splitLongRange FormalParameter Modifier final ReferenceType LongRangeBuilder builder FormalParameter Modifier final BasicType int precisionStep FormalParameter Modifier final BasicType long minBound FormalParameter Modifier final BasicType long maxBound StatementExpression MethodInvocation MemberReference builder Literal 64 MemberReference precisionStep MemberReference minBound MemberReference maxBound splitRange MethodDeclaration /**
   * Expert: Splits an int range recursively.
   * You may implement a builder that adds clauses to a
   * {@link org.apache.lucene.search.BooleanQuery} for each call to its
   * {@link IntRangeBuilder#addRange(String,String)}
   * method.
   * <p>This method is used by {@link NumericRangeQuery}.
   */ Modifier public static splitIntRange FormalParameter Modifier final ReferenceType IntRangeBuilder builder FormalParameter Modifier final BasicType int precisionStep FormalParameter Modifier final BasicType int minBound FormalParameter Modifier final BasicType int maxBound StatementExpression MethodInvocation MemberReference builder Literal 32 MemberReference precisionStep Cast BasicType long MemberReference minBound Cast BasicType long MemberReference maxBound splitRange MethodDeclaration /** This helper does the splitting for both 32 and 64 bit. */ Modifier private static splitRange FormalParameter Modifier final ReferenceType Object builder FormalParameter Modifier final BasicType int valSize FormalParameter Modifier final BasicType int precisionStep FormalParameter BasicType long minBound FormalParameter BasicType long maxBound IfStatement BinaryOperation < MemberReference precisionStep Literal 1 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""precisionStep must be >=1"" End IfStatement BinaryOperation > MemberReference minBound MemberReference maxBound ReturnStatement End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator shift Literal 0 Assignment MemberReference shift MemberReference precisionStep += BlockStatement LocalVariableDeclaration Modifier final BasicType long VariableDeclarator diff BinaryOperation << Literal 1L BinaryOperation + MemberReference shift MemberReference precisionStep VariableDeclarator mask BinaryOperation << BinaryOperation - BinaryOperation << Literal 1L MemberReference precisionStep Literal 1L MemberReference shift LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator hasLower BinaryOperation != BinaryOperation & MemberReference minBound MemberReference mask Literal 0L VariableDeclarator hasUpper BinaryOperation != BinaryOperation & MemberReference maxBound MemberReference mask MemberReference mask LocalVariableDeclaration Modifier final BasicType long VariableDeclarator nextMinBound BinaryOperation & TernaryExpression MemberReference hasLower BinaryOperation + MemberReference minBound MemberReference diff MemberReference minBound MemberReference ~ mask VariableDeclarator nextMaxBound BinaryOperation & TernaryExpression MemberReference hasUpper BinaryOperation - MemberReference maxBound MemberReference diff MemberReference maxBound MemberReference ~ mask IfStatement BinaryOperation || BinaryOperation >= BinaryOperation + MemberReference shift MemberReference precisionStep MemberReference valSize BinaryOperation > MemberReference nextMinBound MemberReference nextMaxBound BlockStatement StatementExpression MethodInvocation MemberReference builder MemberReference valSize MemberReference minBound MemberReference maxBound MemberReference shift addRange BreakStatement End IfStatement MemberReference hasLower StatementExpression MethodInvocation MemberReference builder MemberReference valSize MemberReference minBound BinaryOperation | MemberReference minBound MemberReference mask MemberReference shift addRange End IfStatement MemberReference hasUpper StatementExpression MethodInvocation MemberReference builder MemberReference valSize BinaryOperation & MemberReference maxBound MemberReference ~ mask MemberReference maxBound MemberReference shift addRange End StatementExpression Assignment MemberReference minBound MemberReference nextMinBound = StatementExpression Assignment MemberReference maxBound MemberReference nextMaxBound = End MethodDeclaration /** Helper that delegates to correct range builder */ Modifier private static addRange FormalParameter Modifier final ReferenceType Object builder FormalParameter Modifier final BasicType int valSize FormalParameter BasicType long minBound FormalParameter BasicType long maxBound FormalParameter Modifier final BasicType int shift StatementExpression Assignment MemberReference maxBound BinaryOperation - BinaryOperation << Literal 1L MemberReference shift Literal 1L |= SwitchStatement MemberReference valSize SwitchStatementCase Literal 64 StatementExpression Cast ReferenceType LongRangeBuilder MemberReference builder BreakStatement SwitchStatementCase Literal 32 StatementExpression Cast ReferenceType IntRangeBuilder MemberReference builder BreakStatement SwitchStatementCase ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""valSize must be 32 or 64."" End ClassDeclaration Modifier public static abstract /**
   * Expert: Callback for {@link #splitLongRange}.
   * You need to overwrite only one of the methods.
   * <p><font color=""red""><b>NOTE:</b> This is a very low-level interface,
   * the method signatures may change in later versions.</font>
   */ LongRangeBuilder MethodDeclaration /**
     * Overwrite this method, if you like to receive the already prefix encoded range bounds.
     * You can directly build classical (inclusive) range queries from them.
     */ Modifier public addRange FormalParameter ReferenceType String minPrefixCoded FormalParameter ReferenceType String maxPrefixCoded ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
     * Overwrite this method, if you like to receive the raw long range bounds.
     * You can use this for e.g. debugging purposes (print out range bounds).
     */ Modifier public addRange FormalParameter Modifier final BasicType long min FormalParameter Modifier final BasicType long max FormalParameter Modifier final BasicType int shift StatementExpression MethodInvocation MethodInvocation MemberReference min MemberReference shift longToPrefixCoded MethodInvocation MemberReference max MemberReference shift longToPrefixCoded addRange ClassDeclaration Modifier public static abstract /**
   * Expert: Callback for {@link #splitIntRange}.
   * You need to overwrite only one of the methods.
   * <p><font color=""red""><b>NOTE:</b> This is a very low-level interface,
   * the method signatures may change in later versions.</font>
   */ IntRangeBuilder MethodDeclaration /**
     * Overwrite this method, if you like to receive the already prefix encoded range bounds.
     * You can directly build classical range (inclusive) queries from them.
     */ Modifier public addRange FormalParameter ReferenceType String minPrefixCoded FormalParameter ReferenceType String maxPrefixCoded ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
     * Overwrite this method, if you like to receive the raw int range bounds.
     * You can use this for e.g. debugging purposes (print out range bounds).
     */ Modifier public addRange FormalParameter Modifier final BasicType int min FormalParameter Modifier final BasicType int max FormalParameter Modifier final BasicType int shift StatementExpression MethodInvocation MethodInvocation MemberReference min MemberReference shift intToPrefixCoded MethodInvocation MemberReference max MemberReference shift intToPrefixCoded addRange",0
207,207,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.builders Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.builders.QueryTreeBuilder Import org.apache.lucene.queryParser.core.nodes.BooleanQueryNode Import org.apache.lucene.queryParser.core.nodes.BoostQueryNode Import org.apache.lucene.queryParser.core.nodes.FieldQueryNode Import org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode Import org.apache.lucene.queryParser.core.nodes.GroupQueryNode Import org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode Import org.apache.lucene.queryParser.core.nodes.MatchNoDocsQueryNode Import org.apache.lucene.queryParser.core.nodes.ModifierQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.nodes.SlopQueryNode Import org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode Import org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode Import org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode Import org.apache.lucene.queryParser.standard.nodes.RangeQueryNode Import org.apache.lucene.queryParser.standard.nodes.StandardBooleanQueryNode Import org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode Import org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline Import org.apache.lucene.search.Query ClassDeclaration Modifier public /**
 * This query tree builder only defines the necessary map to build a
 * {@link Query} tree object. It should be used to generate a {@link Query} tree
 * object from a query node tree processed by a
 * {@link StandardQueryNodeProcessorPipeline}. <br/>
 * 
 * @see QueryTreeBuilder
 * @see StandardQueryNodeProcessorPipeline
 */ StandardQueryTreeBuilder ConstructorDeclaration Modifier public StandardQueryTreeBuilder StatementExpression MethodInvocation ClassReference ReferenceType GroupQueryNode ClassCreator ReferenceType GroupQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType FieldQueryNode ClassCreator ReferenceType FieldQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType BooleanQueryNode ClassCreator ReferenceType BooleanQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType FuzzyQueryNode ClassCreator ReferenceType FuzzyQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType BoostQueryNode ClassCreator ReferenceType BoostQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType ModifierQueryNode ClassCreator ReferenceType ModifierQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType WildcardQueryNode ClassCreator ReferenceType WildcardQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType TokenizedPhraseQueryNode ClassCreator ReferenceType PhraseQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType MatchNoDocsQueryNode ClassCreator ReferenceType MatchNoDocsQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType PrefixWildcardQueryNode ClassCreator ReferenceType PrefixWildcardQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType RangeQueryNode ClassCreator ReferenceType RangeQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType SlopQueryNode ClassCreator ReferenceType SlopQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType StandardBooleanQueryNode ClassCreator ReferenceType StandardBooleanQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType MultiPhraseQueryNode ClassCreator ReferenceType MultiPhraseQueryNodeBuilder setBuilder StatementExpression MethodInvocation ClassReference ReferenceType MatchAllDocsQueryNode ClassCreator ReferenceType MatchAllDocsQueryNodeBuilder setBuilder MethodDeclaration Modifier public Annotation Override ReferenceType Query build FormalParameter ReferenceType QueryNode queryNode QueryNodeException ReturnStatement Cast ReferenceType Query SuperMethodInvocation MemberReference queryNode build ReferenceType QueryTreeBuilder ReferenceType StandardQueryBuilder",0
774,774,,1
437,437,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.io.IOException Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexInput Import org.apache.lucene.store.IndexOutput ClassDeclaration Modifier public final /** Optimized implementation of a vector of bits.  This is more-or-less like
  java.util.BitSet, but also includes the following:
  <ul>
  <li>a count() method, which efficiently computes the number of one bits;</li>
  <li>optimized read from and write to disk;</li>
  <li>inlinable get() method;</li>
  <li>store and load, as bit set or d-gaps, depending on sparseness;</li> 
  </ul>
  */ BitVector FieldDeclaration Modifier private BasicType byte VariableDeclarator bits FieldDeclaration Modifier private BasicType int VariableDeclarator size FieldDeclaration Modifier private BasicType int VariableDeclarator count Literal - 1 ConstructorDeclaration Modifier public /** Constructs a vector capable of holding <code>n</code> bits. */ BitVector FormalParameter BasicType int n StatementExpression Assignment MemberReference size MemberReference n = StatementExpression Assignment MemberReference bits ArrayCreator BasicType byte BinaryOperation + BinaryOperation >> MemberReference size Literal 3 Literal 1 = ConstructorDeclaration BitVector FormalParameter BasicType byte bits FormalParameter BasicType int size StatementExpression Assignment This MemberReference bits MemberReference bits = StatementExpression Assignment This MemberReference size MemberReference size = MethodDeclaration Modifier public Annotation Override ReferenceType Object clone LocalVariableDeclaration BasicType byte VariableDeclarator copyBits ArrayCreator BasicType byte MemberReference bits length StatementExpression MethodInvocation System MemberReference bits Literal 0 MemberReference copyBits Literal 0 MemberReference bits length arraycopy ReturnStatement ClassCreator ReferenceType BitVector MemberReference copyBits MemberReference size MethodDeclaration /** Sets the value of <code>bit</code> to one. */ Modifier public final set FormalParameter BasicType int bit IfStatement BinaryOperation >= MemberReference bit MemberReference size BlockStatement ThrowStatement ClassCreator ReferenceType ArrayIndexOutOfBoundsException MemberReference bit End StatementExpression Assignment MemberReference ArraySelector BinaryOperation >> MemberReference bit Literal 3 bits BinaryOperation << Literal 1 BinaryOperation & MemberReference bit Literal 7 |= StatementExpression Assignment MemberReference count Literal - 1 = MethodDeclaration /** Sets the value of <code>bit</code> to true, and
   *  returns true if bit was already set */ Modifier public final BasicType boolean getAndSet FormalParameter BasicType int bit IfStatement BinaryOperation >= MemberReference bit MemberReference size BlockStatement ThrowStatement ClassCreator ReferenceType ArrayIndexOutOfBoundsException MemberReference bit End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator pos BinaryOperation >> MemberReference bit Literal 3 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator v MemberReference ArraySelector MemberReference pos bits LocalVariableDeclaration Modifier final BasicType int VariableDeclarator flag BinaryOperation << Literal 1 BinaryOperation & MemberReference bit Literal 7 IfStatement BinaryOperation != BinaryOperation & MemberReference flag MemberReference v Literal 0 ReturnStatement Literal true BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference pos bits Cast BasicType byte BinaryOperation | MemberReference v MemberReference flag = IfStatement BinaryOperation != MemberReference count Literal - 1 StatementExpression MemberReference ++ count End ReturnStatement Literal false End MethodDeclaration /** Sets the value of <code>bit</code> to zero. */ Modifier public final clear FormalParameter BasicType int bit IfStatement BinaryOperation >= MemberReference bit MemberReference size BlockStatement ThrowStatement ClassCreator ReferenceType ArrayIndexOutOfBoundsException MemberReference bit End StatementExpression Assignment MemberReference ArraySelector BinaryOperation >> MemberReference bit Literal 3 bits BinaryOperation << Literal 1 BinaryOperation & MemberReference bit Literal 7 &= StatementExpression Assignment MemberReference count Literal - 1 = MethodDeclaration /** Returns <code>true</code> if <code>bit</code> is one and
    <code>false</code> if it is zero. */ Modifier public final BasicType boolean get FormalParameter BasicType int bit AssertStatement BinaryOperation && BinaryOperation >= MemberReference bit Literal 0 BinaryOperation < MemberReference bit MemberReference size BinaryOperation + BinaryOperation + BinaryOperation + Literal ""bit "" MemberReference bit Literal "" is out of bounds 0.."" BinaryOperation - MemberReference size Literal 1 ReturnStatement BinaryOperation != BinaryOperation & MemberReference ArraySelector BinaryOperation >> MemberReference bit Literal 3 bits BinaryOperation << Literal 1 BinaryOperation & MemberReference bit Literal 7 Literal 0 MethodDeclaration /** Returns the number of bits in this vector.  This is also one greater than
    the number of the largest valid bit number. */ Modifier public final BasicType int size ReturnStatement MemberReference size MethodDeclaration /** Returns the total number of one bits in this vector.  This is efficiently
    computed and cached, so that, if the vector is not changed, no
    recomputation is done for repeated calls. */ Modifier public final BasicType int count IfStatement BinaryOperation == MemberReference count Literal - 1 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator end MemberReference bits length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference end MemberReference ++ i StatementExpression Assignment MemberReference c MemberReference ArraySelector BinaryOperation & MemberReference ArraySelector MemberReference i bits Literal 0xFF BYTE_COUNTS += End StatementExpression Assignment MemberReference count MemberReference c = End ReturnStatement MemberReference count FieldDeclaration Modifier private final static BasicType byte VariableDeclarator BYTE_COUNTS ArrayInitializer Literal 0 Literal 1 Literal 1 Literal 2 Literal 1 Literal 2 Literal 2 Literal 3 Literal 1 Literal 2 Literal 2 Literal 3 Literal 2 Literal 3 Literal 3 Literal 4 Literal 1 Literal 2 Literal 2 Literal 3 Literal 2 Literal 3 Literal 3 Literal 4 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 1 Literal 2 Literal 2 Literal 3 Literal 2 Literal 3 Literal 3 Literal 4 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 1 Literal 2 Literal 2 Literal 3 Literal 2 Literal 3 Literal 3 Literal 4 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 4 Literal 5 Literal 5 Literal 6 Literal 5 Literal 6 Literal 6 Literal 7 Literal 1 Literal 2 Literal 2 Literal 3 Literal 2 Literal 3 Literal 3 Literal 4 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 4 Literal 5 Literal 5 Literal 6 Literal 5 Literal 6 Literal 6 Literal 7 Literal 2 Literal 3 Literal 3 Literal 4 Literal 3 Literal 4 Literal 4 Literal 5 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 4 Literal 5 Literal 5 Literal 6 Literal 5 Literal 6 Literal 6 Literal 7 Literal 3 Literal 4 Literal 4 Literal 5 Literal 4 Literal 5 Literal 5 Literal 6 Literal 4 Literal 5 Literal 5 Literal 6 Literal 5 Literal 6 Literal 6 Literal 7 Literal 4 Literal 5 Literal 5 Literal 6 Literal 5 Literal 6 Literal 6 Literal 7 Literal 5 Literal 6 Literal 6 Literal 7 Literal 6 Literal 7 Literal 7 Literal 8 MethodDeclaration /** Writes this vector to the file <code>name</code> in Directory
    <code>d</code>, in a format that can be read by the constructor {@link
    #BitVector(Directory, String)}.  */ Modifier public final write FormalParameter ReferenceType Directory d FormalParameter ReferenceType String name IOException LocalVariableDeclaration ReferenceType IndexOutput VariableDeclarator output MethodInvocation d MemberReference name createOutput TryStatement IfStatement MethodInvocation isSparse BlockStatement StatementExpression MethodInvocation MemberReference output writeDgaps BlockStatement StatementExpression MethodInvocation MemberReference output writeBits End StatementExpression MethodInvocation output close MethodDeclaration /** Write as a bit set */ Modifier private writeBits FormalParameter ReferenceType IndexOutput output IOException StatementExpression MethodInvocation output MethodInvocation size writeInt StatementExpression MethodInvocation output MethodInvocation count writeInt StatementExpression MethodInvocation output MemberReference bits MemberReference bits length writeBytes MethodDeclaration /** Write as a d-gaps list */ Modifier private writeDgaps FormalParameter ReferenceType IndexOutput output IOException StatementExpression MethodInvocation output Literal - 1 writeInt StatementExpression MethodInvocation output MethodInvocation size writeInt StatementExpression MethodInvocation output MethodInvocation count writeInt LocalVariableDeclaration BasicType int VariableDeclarator last Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator n MethodInvocation count LocalVariableDeclaration BasicType int VariableDeclarator m MemberReference bits length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation && BinaryOperation < MemberReference i MemberReference m BinaryOperation > MemberReference n Literal 0 MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i bits Literal 0 BlockStatement StatementExpression MethodInvocation output BinaryOperation - MemberReference i MemberReference last writeVInt StatementExpression MethodInvocation output MemberReference ArraySelector MemberReference i bits writeByte StatementExpression Assignment MemberReference last MemberReference i = StatementExpression Assignment MemberReference n MemberReference ArraySelector BinaryOperation & MemberReference ArraySelector MemberReference i bits Literal 0xFF BYTE_COUNTS -= End End MethodDeclaration /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */ Modifier private BasicType boolean isSparse LocalVariableDeclaration BasicType int VariableDeclarator factor Literal 10 IfStatement BinaryOperation < MemberReference bits length BinaryOperation << Literal 1 Literal 7 ReturnStatement BinaryOperation < BinaryOperation * MemberReference factor BinaryOperation + Literal 4 BinaryOperation * BinaryOperation + Literal 8 Literal 8 MethodInvocation count MethodInvocation size End IfStatement BinaryOperation < MemberReference bits length BinaryOperation << Literal 1 Literal 14 ReturnStatement BinaryOperation < BinaryOperation * MemberReference factor BinaryOperation + Literal 4 BinaryOperation * BinaryOperation + Literal 8 Literal 16 MethodInvocation count MethodInvocation size End IfStatement BinaryOperation < MemberReference bits length BinaryOperation << Literal 1 Literal 21 ReturnStatement BinaryOperation < BinaryOperation * MemberReference factor BinaryOperation + Literal 4 BinaryOperation * BinaryOperation + Literal 8 Literal 24 MethodInvocation count MethodInvocation size End IfStatement BinaryOperation < MemberReference bits length BinaryOperation << Literal 1 Literal 28 ReturnStatement BinaryOperation < BinaryOperation * MemberReference factor BinaryOperation + Literal 4 BinaryOperation * BinaryOperation + Literal 8 Literal 32 MethodInvocation count MethodInvocation size End ReturnStatement BinaryOperation < BinaryOperation * MemberReference factor BinaryOperation + Literal 4 BinaryOperation * BinaryOperation + Literal 8 Literal 40 MethodInvocation count MethodInvocation size ConstructorDeclaration Modifier public /** Constructs a bit vector from the file <code>name</code> in Directory
    <code>d</code>, as written by the {@link #write} method.
    */ BitVector FormalParameter ReferenceType Directory d FormalParameter ReferenceType String name IOException LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator input MethodInvocation d MemberReference name openInput TryStatement StatementExpression Assignment MemberReference size MethodInvocation input readInt = IfStatement BinaryOperation == MemberReference size Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference input readDgaps BlockStatement StatementExpression MethodInvocation MemberReference input readBits End StatementExpression MethodInvocation input close MethodDeclaration /** Read as a bit set */ Modifier private readBits FormalParameter ReferenceType IndexInput input IOException StatementExpression Assignment MemberReference count MethodInvocation input readInt = StatementExpression Assignment MemberReference bits ArrayCreator BasicType byte BinaryOperation + BinaryOperation >> MemberReference size Literal 3 Literal 1 = StatementExpression MethodInvocation input MemberReference bits Literal 0 MemberReference bits length readBytes MethodDeclaration /** read as a d-gaps list */ Modifier private readDgaps FormalParameter ReferenceType IndexInput input IOException StatementExpression Assignment MemberReference size MethodInvocation input readInt = StatementExpression Assignment MemberReference count MethodInvocation input readInt = StatementExpression Assignment MemberReference bits ArrayCreator BasicType byte BinaryOperation + BinaryOperation >> MemberReference size Literal 3 Literal 1 = LocalVariableDeclaration BasicType int VariableDeclarator last Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator n MethodInvocation count WhileStatement BinaryOperation > MemberReference n Literal 0 BlockStatement StatementExpression Assignment MemberReference last MethodInvocation input readVInt += StatementExpression Assignment MemberReference ArraySelector MemberReference last bits MethodInvocation input readByte = StatementExpression Assignment MemberReference n MemberReference ArraySelector BinaryOperation & MemberReference ArraySelector MemberReference last bits Literal 0xFF BYTE_COUNTS -= End MethodDeclaration /**
   * Retrieve a subset of this BitVector.
   * 
   * @param start
   *            starting index, inclusive
   * @param end
   *            ending index, exclusive
   * @return subset
   */ Modifier public ReferenceType BitVector subset FormalParameter BasicType int start FormalParameter BasicType int end IfStatement BinaryOperation || BinaryOperation || BinaryOperation < MemberReference start Literal 0 BinaryOperation > MemberReference end MethodInvocation size BinaryOperation < MemberReference end MemberReference start ThrowStatement ClassCreator ReferenceType IndexOutOfBoundsException End IfStatement BinaryOperation == MemberReference end MemberReference start ReturnStatement ClassCreator ReferenceType BitVector Literal 0 End LocalVariableDeclaration BasicType byte VariableDeclarator bits ArrayCreator BasicType byte BinaryOperation + BinaryOperation >>> BinaryOperation - BinaryOperation - MemberReference end MemberReference start Literal 1 Literal 3 Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator s BinaryOperation >>> MemberReference start Literal 3 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference bits length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator cur BinaryOperation & Literal 0xFF This MemberReference bits ArraySelector BinaryOperation + MemberReference i MemberReference s LocalVariableDeclaration BasicType int VariableDeclarator next TernaryExpression BinaryOperation >= BinaryOperation + BinaryOperation + MemberReference i MemberReference s Literal 1 This MemberReference bits MemberReference length Literal 0 BinaryOperation & Literal 0xFF This MemberReference bits ArraySelector BinaryOperation + BinaryOperation + MemberReference i MemberReference s Literal 1 StatementExpression Assignment MemberReference ArraySelector MemberReference i bits Cast BasicType byte BinaryOperation | BinaryOperation >>> MemberReference cur BinaryOperation & MemberReference start Literal 7 BinaryOperation << MemberReference next BinaryOperation - Literal 8 BinaryOperation & MemberReference start Literal 7 = End LocalVariableDeclaration BasicType int VariableDeclarator bitsToClear BinaryOperation % BinaryOperation - BinaryOperation * MemberReference bits length Literal 8 BinaryOperation - MemberReference end MemberReference start Literal 8 StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference bits length Literal 1 bits BinaryOperation << Literal 0xFF BinaryOperation - Literal 8 MemberReference bitsToClear &= ReturnStatement ClassCreator ReferenceType BitVector MemberReference bits BinaryOperation - MemberReference end MemberReference start ReferenceType Cloneable",0
664,664,,1
770,770,,1
98,98,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException ClassDeclaration Modifier public abstract /**
 * Expert: Common scoring functionality for different types of queries.
 *
 * <p>
 * A <code>Scorer</code> iterates over documents matching a
 * query in increasing order of doc Id.
 * </p>
 * <p>
 * Document scores are computed using a given <code>Similarity</code>
 * implementation.
 * </p>
 *
 * <p><b>NOTE</b>: The values Float.Nan,
 * Float.NEGATIVE_INFINITY and Float.POSITIVE_INFINITY are
 * not valid scores.  Certain collectors (eg {@link
 * TopScoreDocCollector}) will not properly collect hits
 * with these scores.
 */ Scorer FieldDeclaration Modifier private ReferenceType Similarity VariableDeclarator similarity ConstructorDeclaration Modifier protected /** Constructs a Scorer.
   * @param similarity The <code>Similarity</code> implementation used by this scorer.
   */ Scorer FormalParameter ReferenceType Similarity similarity StatementExpression Assignment This MemberReference similarity MemberReference similarity = MethodDeclaration /** Returns the Similarity implementation used by this scorer. */ Modifier public ReferenceType Similarity getSimilarity ReturnStatement This MemberReference similarity MethodDeclaration /** Scores and collects all matching documents.
   * @param collector The collector to which all matching documents are passed.
   */ Modifier public score FormalParameter ReferenceType Collector collector IOException StatementExpression MethodInvocation collector This setScorer LocalVariableDeclaration BasicType int VariableDeclarator doc WhileStatement BinaryOperation != Assignment MemberReference doc MethodInvocation nextDoc = MemberReference NO_MORE_DOCS BlockStatement StatementExpression MethodInvocation collector MemberReference doc collect End MethodDeclaration /**
   * Expert: Collects matching documents in a range. Hook for optimization.
   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}
   * was called before this method.
   * 
   * @param collector
   *          The collector to which all matching documents are passed.
   * @param max
   *          Do not score documents past this.
   * @param firstDocID
   *          The first document ID (ensures {@link #nextDoc()} is called before
   *          this method.
   * @return true if more matching documents may remain.
   */ Modifier protected BasicType boolean score FormalParameter ReferenceType Collector collector FormalParameter BasicType int max FormalParameter BasicType int firstDocID IOException StatementExpression MethodInvocation collector This setScorer LocalVariableDeclaration BasicType int VariableDeclarator doc MemberReference firstDocID WhileStatement BinaryOperation < MemberReference doc MemberReference max BlockStatement StatementExpression MethodInvocation collector MemberReference doc collect StatementExpression Assignment MemberReference doc MethodInvocation nextDoc = End ReturnStatement BinaryOperation != MemberReference doc MemberReference NO_MORE_DOCS MethodDeclaration /** Returns the score of the current document matching the query.
   * Initially invalid, until {@link #nextDoc()} or {@link #advance(int)}
   * is called the first time, or when called from within
   * {@link Collector#collect}.
   */ Modifier public abstract BasicType float score IOException ReferenceType DocIdSetIterator",0
482,482,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import org.apache.lucene.benchmark.byTask.PerfRunData ClassDeclaration Modifier public /**
 * Simply waits for the specified (via the parameter) amount
 * of time.  For example Wait(30s) waits for 30 seconds.
 * This is useful with background tasks to control how long
 * the tasks run.
 *
 *<p>You can specify h, m, or s (hours, minutes, seconds) as
 *the trailing time unit.  No unit is interpreted as
 *seconds.</p>
 */ WaitTask FieldDeclaration Modifier private BasicType double VariableDeclarator waitTimeSec ConstructorDeclaration Modifier public WaitTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override setParams FormalParameter ReferenceType String params StatementExpression SuperMethodInvocation MemberReference params setParams IfStatement BinaryOperation != MemberReference params Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator multiplier IfStatement MethodInvocation params Literal ""s"" endsWith BlockStatement StatementExpression Assignment MemberReference multiplier Literal 1 = StatementExpression Assignment MemberReference params MethodInvocation params Literal 0 BinaryOperation - MethodInvocation params length Literal 1 substring = IfStatement MethodInvocation params Literal ""m"" endsWith BlockStatement StatementExpression Assignment MemberReference multiplier Literal 60 = StatementExpression Assignment MemberReference params MethodInvocation params Literal 0 BinaryOperation - MethodInvocation params length Literal 1 substring = IfStatement MethodInvocation params Literal ""h"" endsWith BlockStatement StatementExpression Assignment MemberReference multiplier Literal 3600 = StatementExpression Assignment MemberReference params MethodInvocation params Literal 0 BinaryOperation - MethodInvocation params length Literal 1 substring = BlockStatement StatementExpression Assignment MemberReference multiplier Literal 1 = End End End StatementExpression Assignment MemberReference waitTimeSec BinaryOperation * MethodInvocation Double MemberReference params parseDouble MemberReference multiplier = BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""you must specify the wait time, eg: 10.0s, 4.5m, 2h"" End MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception StatementExpression MethodInvocation Thread Cast BasicType long BinaryOperation * Literal 1000 MemberReference waitTimeSec sleep ReturnStatement Literal 0 MethodDeclaration Modifier public Annotation Override BasicType boolean supportsParams ReturnStatement Literal true ReferenceType PerfTask",0
268,268,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.io.IOException Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.index.IndexReader ClassDeclaration Modifier public /**
* Reopens IndexReader and closes old IndexReader.
*
*/ ReopenReaderTask ConstructorDeclaration Modifier public ReopenReaderTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType int doLogic IOException LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator r MethodInvocation MethodInvocation getIndexReader getRunData LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator nr MethodInvocation r reopen IfStatement BinaryOperation != MemberReference nr MemberReference r BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference nr setIndexReader getRunData StatementExpression MethodInvocation nr decRef End StatementExpression MethodInvocation r decRef ReturnStatement Literal 1 ReferenceType PerfTask",1
148,148,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.complexPhrase Import java.io.IOException Import java.util.ArrayList Import java.util.Iterator Import java.util.List Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.queryParser.ParseException Import org.apache.lucene.queryParser.QueryParser Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.MultiTermQuery Import org.apache.lucene.search.Query Import org.apache.lucene.search.TermQuery Import org.apache.lucene.search.TermRangeQuery Import org.apache.lucene.search.spans.SpanNearQuery Import org.apache.lucene.search.spans.SpanNotQuery Import org.apache.lucene.search.spans.SpanOrQuery Import org.apache.lucene.search.spans.SpanQuery Import org.apache.lucene.search.spans.SpanTermQuery Import org.apache.lucene.util.Version ClassDeclaration Modifier public /**
 * QueryParser which permits complex phrase query syntax eg ""(john jon
 * jonathan~) peters*"".
 * <p>
 * Performs potentially multiple passes over Query text to parse any nested
 * logic in PhraseQueries. - First pass takes any PhraseQuery content between
 * quotes and stores for subsequent pass. All other query content is parsed as
 * normal - Second pass parses any stored PhraseQuery content, checking all
 * embedded clauses are referring to the same field and therefore can be
 * rewritten as Span queries. All PhraseQuery clauses are expressed as
 * ComplexPhraseQuery objects
 * </p>
 * <p>
 * This could arguably be done in one pass using a new QueryParser but here I am
 * working within the constraints of the existing parser as a base class. This
 * currently simply feeds all phrase content through an analyzer to select
 * phrase terms - any ""special"" syntax such as * ~ * etc are not given special
 * status
 * </p>
 * 
 */ ComplexPhraseQueryParser FieldDeclaration Modifier private ReferenceType ArrayList TypeArgument ReferenceType ComplexPhraseQuery VariableDeclarator complexPhrases Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator isPass2ResolvingPhrases FieldDeclaration Modifier private ReferenceType ComplexPhraseQuery VariableDeclarator currentPhraseQuery Literal null ConstructorDeclaration Modifier public ComplexPhraseQueryParser FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType String f FormalParameter ReferenceType Analyzer a StatementExpression SuperConstructorInvocation MemberReference matchVersion MemberReference f MemberReference a MethodDeclaration Modifier protected Annotation Override ReferenceType Query getFieldQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String queryText FormalParameter BasicType int slop LocalVariableDeclaration ReferenceType ComplexPhraseQuery VariableDeclarator cpq ClassCreator ReferenceType ComplexPhraseQuery MemberReference field MemberReference queryText MemberReference slop StatementExpression MethodInvocation complexPhrases MemberReference cpq add ReturnStatement MemberReference cpq MethodDeclaration Modifier public Annotation Override ReferenceType Query parse FormalParameter ReferenceType String query ParseException IfStatement MemberReference isPass2ResolvingPhrases BlockStatement LocalVariableDeclaration ReferenceType MultiTermQuery ReferenceType RewriteMethod VariableDeclarator oldMethod MethodInvocation getMultiTermRewriteMethod TryStatement StatementExpression MethodInvocation MemberReference MultiTermQuery SCORING_BOOLEAN_QUERY_REWRITE setMultiTermRewriteMethod ReturnStatement SuperMethodInvocation MemberReference query parse StatementExpression MethodInvocation MemberReference oldMethod setMultiTermRewriteMethod End StatementExpression Assignment MemberReference complexPhrases ClassCreator ReferenceType ArrayList TypeArgument ReferenceType ComplexPhraseQuery = LocalVariableDeclaration ReferenceType Query VariableDeclarator q SuperMethodInvocation MemberReference query parse StatementExpression Assignment MemberReference isPass2ResolvingPhrases Literal true = TryStatement ForStatement ForControl VariableDeclaration ReferenceType Iterator TypeArgument ReferenceType ComplexPhraseQuery VariableDeclarator iterator MethodInvocation complexPhrases iterator MethodInvocation iterator hasNext BlockStatement StatementExpression Assignment MemberReference currentPhraseQuery MethodInvocation iterator next = StatementExpression MethodInvocation currentPhraseQuery This parsePhraseElements End StatementExpression Assignment MemberReference isPass2ResolvingPhrases Literal false = ReturnStatement MemberReference q MethodDeclaration Modifier protected Annotation Override ReferenceType Query newTermQuery FormalParameter ReferenceType Term term IfStatement MemberReference isPass2ResolvingPhrases BlockStatement TryStatement StatementExpression MethodInvocation MethodInvocation term field checkPhraseClauseIsForSameField CatchClause CatchClauseParameter ParseException pe ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Error parsing complex phrase"" MemberReference pe End ReturnStatement SuperMethodInvocation MemberReference term newTermQuery MethodDeclaration Modifier private checkPhraseClauseIsForSameField FormalParameter ReferenceType String field ParseException IfStatement MethodInvocation ! field MemberReference currentPhraseQuery field equals BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Cannot have clause for field \"""" MemberReference field Literal ""\"" nested in phrase "" Literal "" for field \"""" MemberReference currentPhraseQuery field Literal ""\"""" End MethodDeclaration Modifier protected Annotation Override ReferenceType Query getWildcardQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String termStr ParseException IfStatement MemberReference isPass2ResolvingPhrases BlockStatement StatementExpression MethodInvocation MemberReference field checkPhraseClauseIsForSameField End ReturnStatement SuperMethodInvocation MemberReference field MemberReference termStr getWildcardQuery MethodDeclaration Modifier protected Annotation Override ReferenceType Query getRangeQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String part1 FormalParameter ReferenceType String part2 FormalParameter BasicType boolean inclusive ParseException IfStatement MemberReference isPass2ResolvingPhrases BlockStatement StatementExpression MethodInvocation MemberReference field checkPhraseClauseIsForSameField End ReturnStatement SuperMethodInvocation MemberReference field MemberReference part1 MemberReference part2 MemberReference inclusive getRangeQuery MethodDeclaration Modifier protected Annotation Override ReferenceType Query newRangeQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String part1 FormalParameter ReferenceType String part2 FormalParameter BasicType boolean inclusive IfStatement MemberReference isPass2ResolvingPhrases BlockStatement LocalVariableDeclaration ReferenceType TermRangeQuery VariableDeclarator rangeQuery ClassCreator ReferenceType TermRangeQuery MemberReference field MemberReference part1 MemberReference part2 MemberReference inclusive MemberReference inclusive MethodInvocation getRangeCollator StatementExpression MethodInvocation rangeQuery MemberReference MultiTermQuery SCORING_BOOLEAN_QUERY_REWRITE setRewriteMethod ReturnStatement MemberReference rangeQuery End ReturnStatement SuperMethodInvocation MemberReference field MemberReference part1 MemberReference part2 MemberReference inclusive newRangeQuery MethodDeclaration Modifier protected Annotation Override ReferenceType Query getFuzzyQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String termStr FormalParameter BasicType float minSimilarity ParseException IfStatement MemberReference isPass2ResolvingPhrases BlockStatement StatementExpression MethodInvocation MemberReference field checkPhraseClauseIsForSameField End ReturnStatement SuperMethodInvocation MemberReference field MemberReference termStr MemberReference minSimilarity getFuzzyQuery ClassDeclaration Modifier static ComplexPhraseQuery FieldDeclaration ReferenceType String VariableDeclarator field FieldDeclaration ReferenceType String VariableDeclarator phrasedQueryStringContents FieldDeclaration BasicType int VariableDeclarator slopFactor FieldDeclaration Modifier private ReferenceType Query VariableDeclarator contents ConstructorDeclaration Modifier public ComplexPhraseQuery FormalParameter ReferenceType String field FormalParameter ReferenceType String phrasedQueryStringContents FormalParameter BasicType int slopFactor StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment This MemberReference phrasedQueryStringContents MemberReference phrasedQueryStringContents = StatementExpression Assignment This MemberReference slopFactor MemberReference slopFactor = MethodDeclaration Modifier protected parsePhraseElements FormalParameter ReferenceType QueryParser qp ParseException StatementExpression Assignment MemberReference contents MethodInvocation qp MemberReference phrasedQueryStringContents parse = MethodDeclaration Modifier public Annotation Override ReferenceType Query rewrite FormalParameter ReferenceType IndexReader reader IOException IfStatement BinaryOperation instanceof MemberReference contents ReferenceType TermQuery BlockStatement ReturnStatement MemberReference contents End LocalVariableDeclaration BasicType int VariableDeclarator numNegatives Literal 0 IfStatement BinaryOperation instanceof MemberReference contents ReferenceType BooleanQuery BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unknown query type \"""" MethodInvocation contents MethodInvocation getName getClass Literal ""\"" found in phrase query string \"""" MemberReference phrasedQueryStringContents Literal ""\"""" End LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator bq Cast ReferenceType BooleanQuery MemberReference contents LocalVariableDeclaration ReferenceType BooleanClause VariableDeclarator bclauses MethodInvocation bq getClauses LocalVariableDeclaration ReferenceType SpanQuery VariableDeclarator allSpanClauses ArrayCreator ReferenceType SpanQuery MemberReference bclauses length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference bclauses length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator qc MemberReference ArraySelector MemberReference i MethodInvocation getQuery bclauses StatementExpression Assignment MemberReference qc MethodInvocation qc MemberReference reader rewrite = IfStatement MemberReference ArraySelector MemberReference i MethodInvocation getOccur MethodInvocation MemberReference BooleanClause.Occur MUST_NOT equals bclauses BlockStatement StatementExpression MemberReference ++ numNegatives End IfStatement BinaryOperation instanceof MemberReference qc ReferenceType BooleanQuery BlockStatement LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType SpanQuery VariableDeclarator sc ClassCreator ReferenceType ArrayList TypeArgument ReferenceType SpanQuery StatementExpression MethodInvocation MemberReference sc Cast ReferenceType BooleanQuery MemberReference qc addComplexPhraseClause IfStatement BinaryOperation > MethodInvocation sc size Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i allSpanClauses MethodInvocation sc Literal 0 get = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i allSpanClauses ClassCreator ReferenceType SpanTermQuery ClassCreator ReferenceType Term MemberReference field Literal ""Dummy clause because no terms found - must match nothing"" = End BlockStatement IfStatement BinaryOperation instanceof MemberReference qc ReferenceType TermQuery BlockStatement LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator tq Cast ReferenceType TermQuery MemberReference qc StatementExpression Assignment MemberReference ArraySelector MemberReference i allSpanClauses ClassCreator ReferenceType SpanTermQuery MethodInvocation tq getTerm = BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unknown query type \"""" MethodInvocation qc MethodInvocation getName getClass Literal ""\"" found in phrase query string \"""" MemberReference phrasedQueryStringContents Literal ""\"""" End End End IfStatement BinaryOperation == MemberReference numNegatives Literal 0 BlockStatement ReturnStatement ClassCreator ReferenceType SpanNearQuery MemberReference allSpanClauses MemberReference slopFactor Literal true End LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType SpanQuery VariableDeclarator positiveClauses ClassCreator ReferenceType ArrayList TypeArgument ReferenceType SpanQuery ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference allSpanClauses length MemberReference ++ j BlockStatement IfStatement MemberReference ! ArraySelector MemberReference j MethodInvocation getOccur MethodInvocation MemberReference BooleanClause.Occur MUST_NOT equals bclauses BlockStatement StatementExpression MethodInvocation positiveClauses MemberReference ArraySelector MemberReference j allSpanClauses add End End LocalVariableDeclaration ReferenceType SpanQuery VariableDeclarator includeClauses MethodInvocation positiveClauses ArrayCreator ReferenceType SpanQuery MethodInvocation positiveClauses size toArray LocalVariableDeclaration ReferenceType SpanQuery VariableDeclarator include Literal null IfStatement BinaryOperation == MemberReference includeClauses length Literal 1 BlockStatement StatementExpression Assignment MemberReference include MemberReference ArraySelector Literal 0 includeClauses = BlockStatement StatementExpression Assignment MemberReference include ClassCreator ReferenceType SpanNearQuery MemberReference includeClauses BinaryOperation + MemberReference slopFactor MemberReference numNegatives Literal true = End LocalVariableDeclaration ReferenceType SpanNearQuery VariableDeclarator exclude ClassCreator ReferenceType SpanNearQuery MemberReference allSpanClauses MemberReference slopFactor Literal true LocalVariableDeclaration ReferenceType SpanNotQuery VariableDeclarator snot ClassCreator ReferenceType SpanNotQuery MemberReference include MemberReference exclude ReturnStatement MemberReference snot MethodDeclaration Modifier private addComplexPhraseClause FormalParameter ReferenceType List TypeArgument ReferenceType SpanQuery spanClauses FormalParameter ReferenceType BooleanQuery qc LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType SpanQuery VariableDeclarator ors ClassCreator ReferenceType ArrayList TypeArgument ReferenceType SpanQuery LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType SpanQuery VariableDeclarator nots ClassCreator ReferenceType ArrayList TypeArgument ReferenceType SpanQuery LocalVariableDeclaration ReferenceType BooleanClause VariableDeclarator bclauses MethodInvocation qc getClauses ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference bclauses length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator childQuery MemberReference ArraySelector MemberReference i MethodInvocation getQuery bclauses LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType SpanQuery VariableDeclarator chosenList MemberReference ors IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i MethodInvocation getOccur bclauses MemberReference BooleanClause.Occur MUST_NOT BlockStatement StatementExpression Assignment MemberReference chosenList MemberReference nots = End IfStatement BinaryOperation instanceof MemberReference childQuery ReferenceType TermQuery BlockStatement LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator tq Cast ReferenceType TermQuery MemberReference childQuery LocalVariableDeclaration ReferenceType SpanTermQuery VariableDeclarator stq ClassCreator ReferenceType SpanTermQuery MethodInvocation tq getTerm StatementExpression MethodInvocation stq MethodInvocation tq getBoost setBoost StatementExpression MethodInvocation chosenList MemberReference stq add IfStatement BinaryOperation instanceof MemberReference childQuery ReferenceType BooleanQuery BlockStatement LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator cbq Cast ReferenceType BooleanQuery MemberReference childQuery StatementExpression MethodInvocation MemberReference chosenList MemberReference cbq addComplexPhraseClause BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Unknown query type:"" MethodInvocation childQuery MethodInvocation getName getClass End End End IfStatement BinaryOperation == MethodInvocation ors size Literal 0 BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType SpanOrQuery VariableDeclarator soq ClassCreator ReferenceType SpanOrQuery MethodInvocation ors ArrayCreator ReferenceType SpanQuery MethodInvocation ors size toArray IfStatement BinaryOperation == MethodInvocation nots size Literal 0 BlockStatement StatementExpression MethodInvocation spanClauses MemberReference soq add BlockStatement LocalVariableDeclaration ReferenceType SpanOrQuery VariableDeclarator snqs ClassCreator ReferenceType SpanOrQuery MethodInvocation nots ArrayCreator ReferenceType SpanQuery MethodInvocation nots size toArray LocalVariableDeclaration ReferenceType SpanNotQuery VariableDeclarator snq ClassCreator ReferenceType SpanNotQuery MemberReference soq MemberReference snqs StatementExpression MethodInvocation spanClauses MemberReference snq add End MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String field ReturnStatement BinaryOperation + BinaryOperation + Literal ""\"""" MemberReference phrasedQueryStringContents Literal ""\"""" MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result Literal 1 StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference field Literal null Literal 0 MethodInvocation field hashCode = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference phrasedQueryStringContents Literal null Literal 0 MethodInvocation phrasedQueryStringContents hashCode = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result MemberReference slopFactor = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference obj Literal null ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ComplexPhraseQuery VariableDeclarator other Cast ReferenceType ComplexPhraseQuery MemberReference obj IfStatement BinaryOperation == MemberReference field Literal null BlockStatement IfStatement BinaryOperation != MemberReference other field Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! field MemberReference other field equals ReturnStatement Literal false End End IfStatement BinaryOperation == MemberReference phrasedQueryStringContents Literal null BlockStatement IfStatement BinaryOperation != MemberReference other phrasedQueryStringContents Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! phrasedQueryStringContents MemberReference other phrasedQueryStringContents equals ReturnStatement Literal false End End IfStatement BinaryOperation != MemberReference slopFactor MemberReference other slopFactor ReturnStatement Literal false End ReturnStatement Literal true ReferenceType Query ReferenceType QueryParser",1
768,768,,0
793,793,,0
820,820,,0
537,537,"CompilationUnit PackageDeclaration org.apache.lucene.search.regex Import org.apache.lucene.search.MultiTermQuery Import org.apache.lucene.search.FilteredTermEnum Import org.apache.lucene.index.Term Import org.apache.lucene.index.IndexReader Import org.apache.lucene.util.ToStringUtils Import java.io.IOException ClassDeclaration Modifier public /** Implements the regular expression term search query.
 * The expressions supported depend on the regular expression implementation
 * used by way of the {@link RegexCapabilities} interface.
 *
 * @see RegexTermEnum
 */ RegexQuery FieldDeclaration Modifier private ReferenceType RegexCapabilities VariableDeclarator regexImpl ClassCreator ReferenceType JavaUtilRegexCapabilities FieldDeclaration Modifier private ReferenceType Term VariableDeclarator term ConstructorDeclaration Modifier public /** Constructs a query for terms matching <code>term</code>. */ RegexQuery FormalParameter ReferenceType Term term StatementExpression Assignment This MemberReference term MemberReference term = MethodDeclaration Modifier public ReferenceType Term getTerm ReturnStatement MemberReference term MethodDeclaration /**
   * Defines which {@link RegexCapabilities} implementation is used by this instance.
   *
   * @param impl
   */ Modifier public setRegexImplementation FormalParameter ReferenceType RegexCapabilities impl StatementExpression Assignment This MemberReference regexImpl MemberReference impl = MethodDeclaration /**
   * @return The implementation used by this instance.
   */ Modifier public ReferenceType RegexCapabilities getRegexImplementation ReturnStatement MemberReference regexImpl MethodDeclaration Modifier protected Annotation Override ReferenceType FilteredTermEnum getEnum FormalParameter ReferenceType IndexReader reader IOException ReturnStatement ClassCreator ReferenceType RegexTermEnum MemberReference reader MemberReference term MemberReference regexImpl MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String field LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder IfStatement MethodInvocation ! term MethodInvocation MemberReference field equals field BlockStatement StatementExpression MethodInvocation buffer MethodInvocation term field append StatementExpression MethodInvocation buffer Literal "":"" append End StatementExpression MethodInvocation buffer MethodInvocation term text append StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation == This MemberReference o ReturnStatement Literal true End IfStatement BinaryOperation || BinaryOperation == MemberReference o Literal null BinaryOperation != MethodInvocation getClass MethodInvocation o getClass ReturnStatement Literal false End IfStatement SuperMethodInvocation ! MemberReference o equals ReturnStatement Literal false End LocalVariableDeclaration Modifier final ReferenceType RegexQuery VariableDeclarator that Cast ReferenceType RegexQuery MemberReference o ReturnStatement MethodInvocation regexImpl MemberReference that regexImpl equals MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator result SuperMethodInvocation hashCode StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * Literal 29 MemberReference result MethodInvocation regexImpl hashCode = ReturnStatement MemberReference result ReferenceType MultiTermQuery ReferenceType RegexQueryCapable",0
682,682,,1
735,735,,0
285,285,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import java.io.File Import java.util.Date Import org.apache.lucene.search.Similarity Import org.apache.lucene.store.Directory Import org.apache.lucene.store.FSDirectory Import org.apache.lucene.util.StringHelper ClassDeclaration Modifier public /**
 * Given a directory and a list of fields, updates the fieldNorms in place for every document.
 * 
 * If Similarity class is specified, uses its lengthNorm method to set norms.
 * If -n command line argument is used, removed field norms, as if 
 * {@link org.apache.lucene.document.Field.Index}.NO_NORMS was used.
 *
 * <p>
 * NOTE: This will overwrite any length normalization or field/document boosts.
 * </p>
 *
 */ FieldNormModifier MethodDeclaration /**
   * Command Line Execution method.
   *
   * <pre>
   * Usage: FieldNormModifier /path/index &lt;package.SimilarityClassName | -n&gt; field1 field2 ...
   * </pre>
   */ Modifier public static main FormalParameter ReferenceType String args IOException IfStatement BinaryOperation < MemberReference args length Literal 3 BlockStatement StatementExpression MethodInvocation System.err Literal ""Usage: FieldNormModifier <index> <package.SimilarityClassName | -n> <field1> [field2] ..."" println StatementExpression MethodInvocation System Literal 1 exit End LocalVariableDeclaration ReferenceType Similarity VariableDeclarator s Literal null IfStatement MemberReference ! ArraySelector Literal 1 MethodInvocation Literal ""-n"" equals args BlockStatement TryStatement StatementExpression Assignment MemberReference s MethodInvocation Class MethodInvocation ClassReference ReferenceType Similarity asSubclass MethodInvocation newInstance MemberReference ArraySelector Literal 1 args forName = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation System.err BinaryOperation + Literal ""Couldn't instantiate similarity with empty constructor: "" MemberReference ArraySelector Literal 1 args println StatementExpression MethodInvocation e MemberReference System err printStackTrace StatementExpression MethodInvocation System Literal 1 exit End LocalVariableDeclaration ReferenceType Directory VariableDeclarator d MethodInvocation FSDirectory ClassCreator ReferenceType File MemberReference ArraySelector Literal 0 args open LocalVariableDeclaration ReferenceType FieldNormModifier VariableDeclarator fnm ClassCreator ReferenceType FieldNormModifier MemberReference d MemberReference s ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 2 BinaryOperation < MemberReference i MemberReference args length MemberReference ++ i BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Updating field: "" MemberReference ArraySelector MemberReference i args Literal "" "" ClassCreator MethodInvocation toString ReferenceType Date Literal "" ... "" print StatementExpression MethodInvocation fnm MemberReference ArraySelector MemberReference i args reSetNorms StatementExpression MethodInvocation System.out ClassCreator MethodInvocation toString ReferenceType Date println End StatementExpression MethodInvocation d close FieldDeclaration Modifier private ReferenceType Directory VariableDeclarator dir FieldDeclaration Modifier private ReferenceType Similarity VariableDeclarator sim ConstructorDeclaration Modifier public /**
   * Constructor for code that wishes to use this class programmatically
   * If Similarity is null, kill the field norms.
   *
   * @param d the Directory to modify
   * @param s the Similarity to use (can be null)
   */ FieldNormModifier FormalParameter ReferenceType Directory d FormalParameter ReferenceType Similarity s StatementExpression Assignment MemberReference dir MemberReference d = StatementExpression Assignment MemberReference sim MemberReference s = MethodDeclaration /**
   * Resets the norms for the specified field.
   *
   * <p>
   * Opens a new IndexReader on the Directory given to this instance,
   * modifies the norms (either using the Similarity given to this instance, or by using fake norms,
   * and closes the IndexReader.
   * </p>
   *
   * @param field the field whose norms should be reset
   */ Modifier public reSetNorms FormalParameter ReferenceType String field IOException LocalVariableDeclaration ReferenceType String VariableDeclarator fieldName MethodInvocation StringHelper MemberReference field intern LocalVariableDeclaration BasicType int VariableDeclarator termCounts ArrayCreator BasicType int Literal 0 LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator reader Literal null LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator termEnum Literal null LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator termDocs Literal null TryStatement StatementExpression Assignment MemberReference reader MethodInvocation IndexReader MemberReference dir Literal true open = StatementExpression Assignment MemberReference termCounts ArrayCreator BasicType int MethodInvocation reader maxDoc = TryStatement StatementExpression Assignment MemberReference termEnum MethodInvocation reader ClassCreator ReferenceType Term MemberReference field terms = TryStatement StatementExpression Assignment MemberReference termDocs MethodInvocation reader termDocs = DoStatement MethodInvocation termEnum next BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator term MethodInvocation termEnum term IfStatement BinaryOperation && BinaryOperation != MemberReference term Literal null MethodInvocation term MethodInvocation MemberReference fieldName equals field BlockStatement StatementExpression MethodInvocation termDocs MethodInvocation termEnum term seek WhileStatement MethodInvocation termDocs next BlockStatement StatementExpression Assignment MemberReference ArraySelector MethodInvocation termDocs doc termCounts MethodInvocation termDocs freq += End End End IfStatement BinaryOperation != Literal null MemberReference termDocs StatementExpression MethodInvocation termDocs close End IfStatement BinaryOperation != Literal null MemberReference termEnum StatementExpression MethodInvocation termEnum close End IfStatement BinaryOperation != Literal null MemberReference reader StatementExpression MethodInvocation reader close End TryStatement StatementExpression Assignment MemberReference reader MethodInvocation IndexReader MemberReference dir Literal false open = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator d Literal 0 BinaryOperation < MemberReference d MemberReference termCounts length MemberReference ++ d BlockStatement IfStatement MethodInvocation ! reader MemberReference d isDeleted BlockStatement IfStatement BinaryOperation == MemberReference sim Literal null StatementExpression MethodInvocation reader MemberReference d MemberReference fieldName MethodInvocation Similarity Literal 1.0f encodeNorm setNorm StatementExpression MethodInvocation reader MemberReference d MemberReference fieldName MethodInvocation Similarity MethodInvocation sim MemberReference fieldName MemberReference ArraySelector MemberReference d termCounts lengthNorm encodeNorm setNorm End End End IfStatement BinaryOperation != Literal null MemberReference reader StatementExpression MethodInvocation reader close End",1
126,126,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.document.Document Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.Query Import org.apache.lucene.search.vectorhighlight.FastVectorHighlighter Import org.apache.lucene.search.vectorhighlight.FieldQuery Import java.util.Set Import java.util.Collection Import java.util.HashSet Import java.util.Collections ClassDeclaration Modifier public /**
 * Search and Traverse and Retrieve docs task.  Highlight the fields in the retrieved documents by using FastVectorHighlighter.
 *
 * <p>Note: This task reuses the reader if it is already open.
 * Otherwise a reader is opened at start and closed at the end.
 * </p>
 *
 * <p>Takes optional multivalued, comma separated param string as: size[&lt;traversal size&gt;],highlight[&lt;int&gt;],maxFrags[&lt;int&gt;],mergeContiguous[&lt;boolean&gt;],fields[name1;name2;...]</p>
 * <ul>
 * <li>traversal size - The number of hits to traverse, otherwise all will be traversed</li>
 * <li>highlight - The number of the hits to highlight.  Will always be less than or equal to traversal size.  Default is Integer.MAX_VALUE (i.e. hits.length())</li>
 * <li>maxFrags - The maximum number of fragments to score by the highlighter</li>
 * <li>fragSize - The length of fragments</li>
 * <li>fields - The fields to highlight.  If not specified all fields will be highlighted (or at least attempted)</li>
 * </ul>
 * Example:
 * <pre>""SearchVecHlgtSameRdr"" SearchTravRetVectorHighlight(size[10],highlight[10],maxFrags[3],fields[body]) > : 1000
 * </pre>
 *
 * Fields must be stored and term vector offsets and positions in order must be true for this task to work.
 *
 * <p>Other side effects: counts additional 1 (record) for each traversed hit,
 * and 1 more for each retrieved (non null) document and 1 for each fragment returned.</p>
 */ SearchTravRetVectorHighlightTask FieldDeclaration Modifier protected BasicType int VariableDeclarator numToHighlight MemberReference Integer MAX_VALUE FieldDeclaration Modifier protected BasicType int VariableDeclarator maxFrags Literal 2 FieldDeclaration Modifier protected BasicType int VariableDeclarator fragSize Literal 100 FieldDeclaration Modifier protected ReferenceType Set TypeArgument ReferenceType String VariableDeclarator paramFields MethodInvocation Collections emptySet FieldDeclaration Modifier protected ReferenceType FastVectorHighlighter VariableDeclarator highlighter ConstructorDeclaration Modifier public SearchTravRetVectorHighlightTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override setup Exception StatementExpression SuperMethodInvocation setup LocalVariableDeclaration ReferenceType PerfRunData VariableDeclarator data MethodInvocation getRunData IfStatement BinaryOperation == MethodInvocation data MethodInvocation Literal ""doc.stored"" Literal false get getConfig Literal false BlockStatement ThrowStatement ClassCreator ReferenceType Exception Literal ""doc.stored must be set to true"" End IfStatement BinaryOperation == MethodInvocation data MethodInvocation Literal ""doc.term.vector.offsets"" Literal false get getConfig Literal false BlockStatement ThrowStatement ClassCreator ReferenceType Exception Literal ""doc.term.vector.offsets must be set to true"" End IfStatement BinaryOperation == MethodInvocation data MethodInvocation Literal ""doc.term.vector.positions"" Literal false get getConfig Literal false BlockStatement ThrowStatement ClassCreator ReferenceType Exception Literal ""doc.term.vector.positions must be set to true"" End MethodDeclaration Modifier public Annotation Override BasicType boolean withRetrieve ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType int numToHighlight ReturnStatement MemberReference numToHighlight MethodDeclaration Modifier protected Annotation Override ReferenceType BenchmarkHighlighter getBenchmarkHighlighter FormalParameter ReferenceType Query q StatementExpression Assignment MemberReference highlighter ClassCreator ReferenceType FastVectorHighlighter Literal false Literal false = LocalVariableDeclaration Modifier final ReferenceType FieldQuery VariableDeclarator fq MethodInvocation highlighter MemberReference q getFieldQuery ReturnStatement ClassCreator ReferenceType BenchmarkHighlighter MethodDeclaration Modifier public Annotation Override BasicType int doHighlight FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int doc FormalParameter ReferenceType String field FormalParameter ReferenceType Document document FormalParameter ReferenceType Analyzer analyzer FormalParameter ReferenceType String text Exception LocalVariableDeclaration ReferenceType String VariableDeclarator fragments MethodInvocation highlighter MemberReference fq MemberReference reader MemberReference doc MemberReference field MemberReference fragSize MemberReference maxFrags getBestFragments ReturnStatement TernaryExpression BinaryOperation != MemberReference fragments Literal null MemberReference fragments length Literal 0 MethodDeclaration Modifier protected Annotation Override ReferenceType Collection TypeArgument ReferenceType String getFieldsToHighlight FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType String VariableDeclarator result SuperMethodInvocation MemberReference document getFieldsToHighlight IfStatement BinaryOperation && BinaryOperation == MethodInvocation paramFields isEmpty Literal false BinaryOperation == MethodInvocation result isEmpty Literal false BlockStatement StatementExpression MethodInvocation result MemberReference paramFields retainAll BlockStatement StatementExpression Assignment MemberReference result MemberReference paramFields = End ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override setParams FormalParameter ReferenceType String params LocalVariableDeclaration ReferenceType String VariableDeclarator splits MethodInvocation params Literal "","" split ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference splits length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i MethodInvocation Literal ""size["" startsWith splits Literal true BlockStatement StatementExpression Assignment MemberReference traversalSize Cast BasicType int MethodInvocation Float MemberReference ArraySelector MemberReference i MethodInvocation Literal MethodInvocation length ""size["" BinaryOperation - MemberReference ArraySelector MemberReference i MethodInvocation length splits Literal 1 substring splits parseFloat = IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i MethodInvocation Literal ""highlight["" startsWith splits Literal true BlockStatement StatementExpression Assignment MemberReference numToHighlight Cast BasicType int MethodInvocation Float MemberReference ArraySelector MemberReference i MethodInvocation Literal MethodInvocation length ""highlight["" BinaryOperation - MemberReference ArraySelector MemberReference i MethodInvocation length splits Literal 1 substring splits parseFloat = IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i MethodInvocation Literal ""maxFrags["" startsWith splits Literal true BlockStatement StatementExpression Assignment MemberReference maxFrags Cast BasicType int MethodInvocation Float MemberReference ArraySelector MemberReference i MethodInvocation Literal MethodInvocation length ""maxFrags["" BinaryOperation - MemberReference ArraySelector MemberReference i MethodInvocation length splits Literal 1 substring splits parseFloat = IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i MethodInvocation Literal ""fragSize["" startsWith splits Literal true BlockStatement StatementExpression Assignment MemberReference fragSize Cast BasicType int MethodInvocation Float MemberReference ArraySelector MemberReference i MethodInvocation Literal MethodInvocation length ""fragSize["" BinaryOperation - MemberReference ArraySelector MemberReference i MethodInvocation length splits Literal 1 substring splits parseFloat = IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i MethodInvocation Literal ""fields["" startsWith splits Literal true BlockStatement StatementExpression Assignment MemberReference paramFields ClassCreator ReferenceType HashSet TypeArgument ReferenceType String = LocalVariableDeclaration ReferenceType String VariableDeclarator fieldNames MemberReference ArraySelector MemberReference i MethodInvocation Literal MethodInvocation length ""fields["" BinaryOperation - MemberReference ArraySelector MemberReference i MethodInvocation length splits Literal 1 substring splits LocalVariableDeclaration ReferenceType String VariableDeclarator fieldSplits MethodInvocation fieldNames Literal "";"" split ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference fieldSplits length MemberReference ++ j BlockStatement StatementExpression MethodInvocation paramFields MemberReference ArraySelector MemberReference j fieldSplits add End End End End End End End ReferenceType SearchTravTask",0
856,856,,1
677,677,,0
465,465,"CompilationUnit PackageDeclaration org.apache.lucene.search.vectorhighlight Import java.io.IOException Import java.util.Collections Import java.util.LinkedList Import java.util.Set Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.WhitespaceAnalyzer Import org.apache.lucene.document.Document Import org.apache.lucene.document.Field Import org.apache.lucene.document.Field.Index Import org.apache.lucene.document.Field.Store Import org.apache.lucene.document.Field.TermVector Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.index.TermFreqVector Import org.apache.lucene.index.TermPositionVector Import org.apache.lucene.index.TermVectorOffsetInfo Import org.apache.lucene.index.IndexWriter.MaxFieldLength Import org.apache.lucene.queryParser.QueryParser Import org.apache.lucene.search.Query Import org.apache.lucene.store.Directory Import org.apache.lucene.store.RAMDirectory Import org.apache.lucene.util.Version ClassDeclaration Modifier public /**
 * <code>FieldTermStack</code> is a stack that keeps query terms in the specified field
 * of the document to be highlighted.
 */ FieldTermStack FieldDeclaration Modifier private final ReferenceType String VariableDeclarator fieldName FieldDeclaration ReferenceType LinkedList TypeArgument ReferenceType TermInfo VariableDeclarator termList ClassCreator ReferenceType LinkedList TypeArgument ReferenceType TermInfo MethodDeclaration Modifier public static main FormalParameter ReferenceType String args Exception LocalVariableDeclaration ReferenceType Analyzer VariableDeclarator analyzer ClassCreator ReferenceType WhitespaceAnalyzer LocalVariableDeclaration ReferenceType QueryParser VariableDeclarator parser ClassCreator ReferenceType QueryParser MemberReference Version LUCENE_CURRENT Literal ""f"" MemberReference analyzer LocalVariableDeclaration ReferenceType Query VariableDeclarator query MethodInvocation parser Literal ""a x:b"" parse LocalVariableDeclaration ReferenceType FieldQuery VariableDeclarator fieldQuery ClassCreator ReferenceType FieldQuery MemberReference query Literal true Literal false LocalVariableDeclaration ReferenceType Directory VariableDeclarator dir ClassCreator ReferenceType RAMDirectory LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator writer ClassCreator ReferenceType IndexWriter MemberReference dir MemberReference analyzer MemberReference MaxFieldLength LIMITED LocalVariableDeclaration ReferenceType Document VariableDeclarator doc ClassCreator ReferenceType Document StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""f"" Literal ""a a a b b c a b b c d e f"" MemberReference Store YES MemberReference Index ANALYZED MemberReference TermVector WITH_POSITIONS_OFFSETS add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""f"" Literal ""b a b a f"" MemberReference Store YES MemberReference Index ANALYZED MemberReference TermVector WITH_POSITIONS_OFFSETS add StatementExpression MethodInvocation writer MemberReference doc addDocument StatementExpression MethodInvocation writer close LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator reader MethodInvocation IndexReader MemberReference dir Literal true open LocalVariableDeclaration ReferenceType FieldTermStack VariableDeclarator ftl ClassCreator ReferenceType FieldTermStack MemberReference reader Literal 0 Literal ""f"" MemberReference fieldQuery StatementExpression MethodInvocation reader close ConstructorDeclaration Modifier public /**
   * a constructor.
   * 
   * @param reader IndexReader of the index
   * @param docId document id to be highlighted
   * @param fieldName field of the document to be highlighted
   * @param fieldQuery FieldQuery object
   * @throws IOException
   */ FieldTermStack FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docId FormalParameter ReferenceType String fieldName FormalParameter Modifier final ReferenceType FieldQuery fieldQuery IOException StatementExpression Assignment This MemberReference fieldName MemberReference fieldName = LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator tfv MethodInvocation reader MemberReference docId MemberReference fieldName getTermFreqVector IfStatement BinaryOperation == MemberReference tfv Literal null ReturnStatement End LocalVariableDeclaration ReferenceType TermPositionVector VariableDeclarator tpv Literal null TryStatement StatementExpression Assignment MemberReference tpv Cast ReferenceType TermPositionVector MemberReference tfv = CatchClause CatchClauseParameter ClassCastException e ReturnStatement LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator termSet MethodInvocation fieldQuery MemberReference fieldName getTermSet IfStatement BinaryOperation == MemberReference termSet Literal null ReturnStatement End ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator term MethodInvocation tpv getTerms BlockStatement IfStatement MethodInvocation ! termSet MemberReference term contains ContinueStatement End LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation tpv MemberReference term indexOf LocalVariableDeclaration ReferenceType TermVectorOffsetInfo VariableDeclarator tvois MethodInvocation tpv MemberReference index getOffsets IfStatement BinaryOperation == MemberReference tvois Literal null ReturnStatement End LocalVariableDeclaration BasicType int VariableDeclarator poss MethodInvocation tpv MemberReference index getTermPositions IfStatement BinaryOperation == MemberReference poss Literal null ReturnStatement End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference tvois length MemberReference ++ i StatementExpression MethodInvocation termList ClassCreator ReferenceType TermInfo MemberReference term MemberReference ArraySelector MemberReference i MethodInvocation getStartOffset tvois MemberReference ArraySelector MemberReference i MethodInvocation getEndOffset tvois MemberReference ArraySelector MemberReference i poss add End End StatementExpression MethodInvocation Collections MemberReference termList sort MethodDeclaration /**
   * @return field name
   */ Modifier public ReferenceType String getFieldName ReturnStatement MemberReference fieldName MethodDeclaration /**
   * @return the top TermInfo object of the stack
   */ Modifier public ReferenceType TermInfo pop ReturnStatement MethodInvocation termList poll MethodDeclaration /**
   * @param termInfo the TermInfo object to be put on the top of the stack
   */ Modifier public push FormalParameter ReferenceType TermInfo termInfo StatementExpression MethodInvocation termList MemberReference termInfo addFirst MethodDeclaration /**
   * to know whether the stack is empty
   * 
   * @return true if the stack is empty, false if not
   */ Modifier public BasicType boolean isEmpty ReturnStatement BinaryOperation || BinaryOperation == MemberReference termList Literal null BinaryOperation == MethodInvocation termList size Literal 0 ClassDeclaration Modifier public static TermInfo FieldDeclaration Modifier final ReferenceType String VariableDeclarator text FieldDeclaration Modifier final BasicType int VariableDeclarator startOffset FieldDeclaration Modifier final BasicType int VariableDeclarator endOffset FieldDeclaration Modifier final BasicType int VariableDeclarator position ConstructorDeclaration TermInfo FormalParameter ReferenceType String text FormalParameter BasicType int startOffset FormalParameter BasicType int endOffset FormalParameter BasicType int position StatementExpression Assignment This MemberReference text MemberReference text = StatementExpression Assignment This MemberReference startOffset MemberReference startOffset = StatementExpression Assignment This MemberReference endOffset MemberReference endOffset = StatementExpression Assignment This MemberReference position MemberReference position = MethodDeclaration Modifier public ReferenceType String getText ReturnStatement MemberReference text MethodDeclaration Modifier public BasicType int getStartOffset ReturnStatement MemberReference startOffset MethodDeclaration Modifier public BasicType int getEndOffset ReturnStatement MemberReference endOffset MethodDeclaration Modifier public BasicType int getPosition ReturnStatement MemberReference position MethodDeclaration Modifier public Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation sb MethodInvocation Literal '(' append MethodInvocation MemberReference startOffset append MethodInvocation Literal ',' append MethodInvocation MemberReference endOffset append MethodInvocation Literal ',' append MethodInvocation MemberReference position append MethodInvocation Literal ')' append MemberReference text append ReturnStatement MethodInvocation sb toString MethodDeclaration Modifier public BasicType int compareTo FormalParameter ReferenceType TermInfo o ReturnStatement BinaryOperation - This MemberReference position MemberReference o position ReferenceType Comparable TypeArgument ReferenceType TermInfo",0
474,474,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.text.Collator ClassDeclaration Modifier public /**
 * A Filter that restricts search results to a range of term
 * values in a given field.
 *
 * <p>This filter matches the documents looking for terms that fall into the
 * supplied range according to {@link
 * String#compareTo(String)}, unless a <code>Collator</code> is provided. It is not intended
 * for numerical ranges; use {@link NumericRangeFilter} instead.
 *
 * <p>If you construct a large number of range filters with different ranges but on the 
 * same field, {@link FieldCacheRangeFilter} may have significantly better performance. 
 * @since 2.9
 */ TermRangeFilter ConstructorDeclaration Modifier public /**
   * @param fieldName The field this range applies to
   * @param lowerTerm The lower bound on this range
   * @param upperTerm The upper bound on this range
   * @param includeLower Does this range include the lower bound?
   * @param includeUpper Does this range include the upper bound?
   * @throws IllegalArgumentException if both terms are null or if
   *  lowerTerm is null and includeLower is true (similar for upperTerm
   *  and includeUpper)
   */ TermRangeFilter FormalParameter ReferenceType String fieldName FormalParameter ReferenceType String lowerTerm FormalParameter ReferenceType String upperTerm FormalParameter BasicType boolean includeLower FormalParameter BasicType boolean includeUpper StatementExpression SuperConstructorInvocation ClassCreator ReferenceType TermRangeQuery MemberReference fieldName MemberReference lowerTerm MemberReference upperTerm MemberReference includeLower MemberReference includeUpper ConstructorDeclaration Modifier public /**
   * <strong>WARNING:</strong> Using this constructor and supplying a non-null
   * value in the <code>collator</code> parameter will cause every single 
   * index Term in the Field referenced by lowerTerm and/or upperTerm to be
   * examined.  Depending on the number of index Terms in this Field, the 
   * operation could be very slow.
   *
   * @param lowerTerm The lower bound on this range
   * @param upperTerm The upper bound on this range
   * @param includeLower Does this range include the lower bound?
   * @param includeUpper Does this range include the upper bound?
   * @param collator The collator to use when determining range inclusion; set
   *  to null to use Unicode code point ordering instead of collation.
   * @throws IllegalArgumentException if both terms are null or if
   *  lowerTerm is null and includeLower is true (similar for upperTerm
   *  and includeUpper)
   */ TermRangeFilter FormalParameter ReferenceType String fieldName FormalParameter ReferenceType String lowerTerm FormalParameter ReferenceType String upperTerm FormalParameter BasicType boolean includeLower FormalParameter BasicType boolean includeUpper FormalParameter ReferenceType Collator collator StatementExpression SuperConstructorInvocation ClassCreator ReferenceType TermRangeQuery MemberReference fieldName MemberReference lowerTerm MemberReference upperTerm MemberReference includeLower MemberReference includeUpper MemberReference collator MethodDeclaration /**
   * Constructs a filter for field <code>fieldName</code> matching
   * less than or equal to <code>upperTerm</code>.
   */ Modifier public static ReferenceType TermRangeFilter Less FormalParameter ReferenceType String fieldName FormalParameter ReferenceType String upperTerm ReturnStatement ClassCreator ReferenceType TermRangeFilter MemberReference fieldName Literal null MemberReference upperTerm Literal false Literal true MethodDeclaration /**
   * Constructs a filter for field <code>fieldName</code> matching
   * greater than or equal to <code>lowerTerm</code>.
   */ Modifier public static ReferenceType TermRangeFilter More FormalParameter ReferenceType String fieldName FormalParameter ReferenceType String lowerTerm ReturnStatement ClassCreator ReferenceType TermRangeFilter MemberReference fieldName MemberReference lowerTerm Literal null Literal true Literal false MethodDeclaration /** Returns the field name for this filter */ Modifier public ReferenceType String getField ReturnStatement MethodInvocation query getField MethodDeclaration /** Returns the lower value of this range filter */ Modifier public ReferenceType String getLowerTerm ReturnStatement MethodInvocation query getLowerTerm MethodDeclaration /** Returns the upper value of this range filter */ Modifier public ReferenceType String getUpperTerm ReturnStatement MethodInvocation query getUpperTerm MethodDeclaration /** Returns <code>true</code> if the lower endpoint is inclusive */ Modifier public BasicType boolean includesLower ReturnStatement MethodInvocation query includesLower MethodDeclaration /** Returns <code>true</code> if the upper endpoint is inclusive */ Modifier public BasicType boolean includesUpper ReturnStatement MethodInvocation query includesUpper MethodDeclaration /** Returns the collator used to determine range inclusion, if any. */ Modifier public ReferenceType Collator getCollator ReturnStatement MethodInvocation query getCollator ReferenceType MultiTermQueryWrapperFilter TypeArgument ReferenceType TermRangeQuery",1
851,851,,1
733,733,,0
185,185,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.feeds ClassDeclaration Modifier public /**
 * Exception indicating there is no more data.
 * Thrown by Docs Makers if doc.maker.forever is false and docs sources of that maker where exhausted.
 * This is useful for iterating all document of a source, in case we don't know in advance how many docs there are.
 */ NoMoreDataException ReferenceType Exception",0
704,704,,1
212,212,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ KpStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal ""nde"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""en"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""s"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""'s"" Literal 2 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""es"" Literal 2 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ies"" Literal 4 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""aus"" Literal 2 Literal 5 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""de"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""ge"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ische"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""je"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""lijke"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""le"" Literal - 1 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""ene"" Literal - 1 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""re"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""se"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""te"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ieve"" Literal - 1 Literal 11 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""heid"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""fie"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""gie"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""atie"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""isme"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""ing"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""arij"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""erij"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""sel"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""rder"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ster"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""iteit"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""dst"" Literal - 1 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""tst"" Literal - 1 Literal 9 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_3 ArrayInitializer ClassCreator ReferenceType Among Literal ""end"" Literal - 1 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""atief"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""erig"" Literal - 1 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""achtig"" Literal - 1 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""ioneel"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""baar"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""laar"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""naar"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""raar"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""eriger"" Literal - 1 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""achtiger"" Literal - 1 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""lijker"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""tant"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""erigst"" Literal - 1 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""achtigst"" Literal - 1 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""lijkst"" Literal - 1 Literal 8 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_4 ArrayInitializer ClassCreator ReferenceType Among Literal ""ig"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iger"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""igst"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_5 ArrayInitializer ClassCreator ReferenceType Among Literal ""ft"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""kt"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""pt"" Literal - 1 Literal 3 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_6 ArrayInitializer ClassCreator ReferenceType Among Literal ""bb"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""cc"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""dd"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ff"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""gg"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""hh"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""jj"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""kk"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""ll"" Literal - 1 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""mm"" Literal - 1 Literal 10 Literal """" This ClassCreator ReferenceType Among Literal ""nn"" Literal - 1 Literal 11 Literal """" This ClassCreator ReferenceType Among Literal ""pp"" Literal - 1 Literal 12 Literal """" This ClassCreator ReferenceType Among Literal ""qq"" Literal - 1 Literal 13 Literal """" This ClassCreator ReferenceType Among Literal ""rr"" Literal - 1 Literal 14 Literal """" This ClassCreator ReferenceType Among Literal ""ss"" Literal - 1 Literal 15 Literal """" This ClassCreator ReferenceType Among Literal ""tt"" Literal - 1 Literal 16 Literal """" This ClassCreator ReferenceType Among Literal ""v"" Literal - 1 Literal 21 Literal """" This ClassCreator ReferenceType Among Literal ""vv"" Literal 16 Literal 17 Literal """" This ClassCreator ReferenceType Among Literal ""ww"" Literal - 1 Literal 18 Literal """" This ClassCreator ReferenceType Among Literal ""xx"" Literal - 1 Literal 19 Literal """" This ClassCreator ReferenceType Among Literal ""z"" Literal - 1 Literal 22 Literal """" This ClassCreator ReferenceType Among Literal ""zz"" Literal 20 Literal 20 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_7 ArrayInitializer ClassCreator ReferenceType Among Literal ""d"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""t"" Literal - 1 Literal 2 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 1 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v_WX ArrayInitializer Literal 17 Literal 65 Literal 208 Literal 1 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_AOU ArrayInitializer Literal 1 Literal 64 Literal 16 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_AIOU ArrayInitializer Literal 1 Literal 65 Literal 16 FieldDeclaration Modifier private BasicType boolean VariableDeclarator B_GE_removed FieldDeclaration Modifier private BasicType boolean VariableDeclarator B_stemmed FieldDeclaration Modifier private BasicType boolean VariableDeclarator B_Y_found FieldDeclaration Modifier private BasicType int VariableDeclarator I_p2 FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 FieldDeclaration Modifier private BasicType int VariableDeclarator I_x FieldDeclaration Modifier private ReferenceType StringBuilder VariableDeclarator S_ch ClassCreator ReferenceType StringBuilder MethodDeclaration Modifier private copy_from FormalParameter ReferenceType KpStemmer other StatementExpression Assignment MemberReference B_GE_removed MemberReference other B_GE_removed = StatementExpression Assignment MemberReference B_stemmed MemberReference other B_stemmed = StatementExpression Assignment MemberReference B_Y_found MemberReference other B_Y_found = StatementExpression Assignment MemberReference I_p2 MemberReference other I_p2 = StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression Assignment MemberReference I_x MemberReference other I_x = StatementExpression Assignment MemberReference S_ch MemberReference other S_ch = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_R1 StatementExpression Assignment MemberReference I_x MemberReference cursor = IfStatement BinaryOperation >= MemberReference I_x MemberReference I_p1 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R2 StatementExpression Assignment MemberReference I_x MemberReference cursor = IfStatement BinaryOperation >= MemberReference I_x MemberReference I_p2 BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_V LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 in_grouping_b BlockStatement BreakStatement lab1 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement MethodInvocation ! Literal 2 Literal ""ij"" eq_s_b BlockStatement ReturnStatement Literal false End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_VX LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 in_grouping_b BlockStatement BreakStatement lab1 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement MethodInvocation ! Literal 2 Literal ""ij"" eq_s_b BlockStatement ReturnStatement Literal false End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_C LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""ij"" eq_s_b BlockStatement BreakStatement lab0 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_lengthen_V LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v_WX Literal 97 Literal 121 out_grouping_b BlockStatement BreakStatement lab0 End StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_AOU Literal 97 Literal 117 in_grouping_b BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping_b BlockStatement BreakStatement lab4 End BreakStatement lab3 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = IfStatement BinaryOperation > MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement MethodInvocation ! Literal 1 Literal ""e"" eq_s_b BlockStatement BreakStatement lab0 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping_b BlockStatement BreakStatement lab6 End BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = IfStatement BinaryOperation > MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab0 End End BlockStatement StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_AIOU Literal 97 Literal 117 in_grouping_b BlockStatement BreakStatement lab7 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = BlockStatement StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement BreakStatement lab8 End StatementExpression MemberReference -- cursor IfStatement MethodInvocation ! MemberReference g_AIOU Literal 97 Literal 117 in_grouping_b BlockStatement BreakStatement lab8 End IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping_b BlockStatement BreakStatement lab8 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = End StatementExpression Assignment MemberReference S_ch MethodInvocation MemberReference S_ch slice_to = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c MemberReference cursor StatementExpression MethodInvocation MemberReference cursor MemberReference cursor MemberReference S_ch insert StatementExpression Assignment MemberReference cursor MemberReference c = End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Step_1 LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 7 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""t"" eq_s_b BlockStatement BreakStatement lab0 End IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab0 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 3 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""ie"" slice_from BreakStatement SwitchStatementCase Literal 4 DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""ar"" eq_s_b BlockStatement BreakStatement lab2 End IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab2 End IfStatement MethodInvocation ! r_C BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_lengthen_V BlockStatement BreakStatement lab2 End BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""er"" eq_s_b BlockStatement BreakStatement lab3 End IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab3 End IfStatement MethodInvocation ! r_C BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""e"" slice_from End BreakStatement SwitchStatementCase Literal 5 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_V BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""au"" slice_from BreakStatement SwitchStatementCase Literal 6 DoStatement lab4 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! Literal 3 Literal ""hed"" eq_s_b BlockStatement BreakStatement lab5 End IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation Literal ""heid"" slice_from BreakStatement lab4 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""nd"" eq_s_b BlockStatement BreakStatement lab6 End StatementExpression MethodInvocation slice_del BreakStatement lab4 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""d"" eq_s_b BlockStatement BreakStatement lab7 End IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab7 End IfStatement MethodInvocation ! r_C BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del BreakStatement lab4 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = DoStatement lab8 Literal false BlockStatement DoStatement lab9 Literal false BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab10 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""i"" eq_s_b BlockStatement BreakStatement lab10 End BreakStatement lab9 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = IfStatement MethodInvocation ! Literal 1 Literal ""j"" eq_s_b BlockStatement BreakStatement lab8 End End IfStatement MethodInvocation ! r_V BlockStatement BreakStatement lab8 End StatementExpression MethodInvocation slice_del BreakStatement lab4 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_lengthen_V BlockStatement ReturnStatement Literal false End End BreakStatement SwitchStatementCase Literal 7 StatementExpression MethodInvocation Literal ""nd"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Step_2 LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_1 Literal 11 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""'t"" eq_s_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""et"" eq_s_b BlockStatement BreakStatement lab2 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab2 End IfStatement MethodInvocation ! r_C BlockStatement BreakStatement lab2 End StatementExpression MethodInvocation slice_del BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! Literal 3 Literal ""rnt"" eq_s_b BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation Literal ""rn"" slice_from BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""t"" eq_s_b BlockStatement BreakStatement lab4 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab4 End IfStatement MethodInvocation ! r_VX BlockStatement BreakStatement lab4 End StatementExpression MethodInvocation slice_del BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! Literal 3 Literal ""ink"" eq_s_b BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation Literal ""ing"" slice_from BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""mp"" eq_s_b BlockStatement BreakStatement lab6 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation Literal ""m"" slice_from BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""'"" eq_s_b BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab7 End StatementExpression MethodInvocation slice_del BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del End BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""g"" slice_from BreakStatement SwitchStatementCase Literal 3 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""lijk"" slice_from BreakStatement SwitchStatementCase Literal 4 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""isch"" slice_from BreakStatement SwitchStatementCase Literal 5 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 6 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""t"" slice_from BreakStatement SwitchStatementCase Literal 7 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""s"" slice_from BreakStatement SwitchStatementCase Literal 8 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""r"" slice_from BreakStatement SwitchStatementCase Literal 9 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression MethodInvocation MemberReference cursor MemberReference cursor Literal ""l"" insert IfStatement MethodInvocation ! r_lengthen_V BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 10 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression MethodInvocation MemberReference cursor MemberReference cursor Literal ""en"" insert IfStatement MethodInvocation ! r_lengthen_V BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 11 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""ief"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Step_3 LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_2 Literal 14 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""eer"" slice_from BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_lengthen_V BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 3 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation Literal ""r"" slice_from BreakStatement SwitchStatementCase Literal 5 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_lengthen_V BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 6 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""aar"" slice_from BreakStatement SwitchStatementCase Literal 7 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression MethodInvocation MemberReference cursor MemberReference cursor Literal ""f"" insert IfStatement MethodInvocation ! r_lengthen_V BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 8 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression MethodInvocation MemberReference cursor MemberReference cursor Literal ""g"" insert IfStatement MethodInvocation ! r_lengthen_V BlockStatement ReturnStatement Literal false End BreakStatement SwitchStatementCase Literal 9 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""t"" slice_from BreakStatement SwitchStatementCase Literal 10 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""d"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Step_4 LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_3 Literal 16 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab1 SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation Literal ""ie"" slice_from BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation Literal ""eer"" slice_from BreakStatement SwitchStatementCase Literal 3 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 4 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End IfStatement MethodInvocation ! r_V BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation Literal ""n"" slice_from BreakStatement SwitchStatementCase Literal 5 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End IfStatement MethodInvocation ! r_V BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation Literal ""l"" slice_from BreakStatement SwitchStatementCase Literal 6 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End IfStatement MethodInvocation ! r_V BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation Literal ""r"" slice_from BreakStatement SwitchStatementCase Literal 7 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation Literal ""teer"" slice_from BreakStatement SwitchStatementCase Literal 8 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation Literal ""lijk"" slice_from BreakStatement SwitchStatementCase Literal 9 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 10 IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End IfStatement MethodInvocation ! r_C BlockStatement BreakStatement lab1 End StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_lengthen_V BlockStatement BreakStatement lab1 End BreakStatement End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_4 Literal 3 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del IfStatement MethodInvocation ! r_lengthen_V BlockStatement ReturnStatement Literal false End BreakStatement End End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Step_7 LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_5 Literal 3 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""k"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""f"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""p"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Step_6 LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_6 Literal 22 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""b"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""c"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""d"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation Literal ""f"" slice_from BreakStatement SwitchStatementCase Literal 5 StatementExpression MethodInvocation Literal ""g"" slice_from BreakStatement SwitchStatementCase Literal 6 StatementExpression MethodInvocation Literal ""h"" slice_from BreakStatement SwitchStatementCase Literal 7 StatementExpression MethodInvocation Literal ""j"" slice_from BreakStatement SwitchStatementCase Literal 8 StatementExpression MethodInvocation Literal ""k"" slice_from BreakStatement SwitchStatementCase Literal 9 StatementExpression MethodInvocation Literal ""l"" slice_from BreakStatement SwitchStatementCase Literal 10 StatementExpression MethodInvocation Literal ""m"" slice_from BreakStatement SwitchStatementCase Literal 11 StatementExpression MethodInvocation Literal ""n"" slice_from BreakStatement SwitchStatementCase Literal 12 StatementExpression MethodInvocation Literal ""p"" slice_from BreakStatement SwitchStatementCase Literal 13 StatementExpression MethodInvocation Literal ""q"" slice_from BreakStatement SwitchStatementCase Literal 14 StatementExpression MethodInvocation Literal ""r"" slice_from BreakStatement SwitchStatementCase Literal 15 StatementExpression MethodInvocation Literal ""s"" slice_from BreakStatement SwitchStatementCase Literal 16 StatementExpression MethodInvocation Literal ""t"" slice_from BreakStatement SwitchStatementCase Literal 17 StatementExpression MethodInvocation Literal ""v"" slice_from BreakStatement SwitchStatementCase Literal 18 StatementExpression MethodInvocation Literal ""w"" slice_from BreakStatement SwitchStatementCase Literal 19 StatementExpression MethodInvocation Literal ""x"" slice_from BreakStatement SwitchStatementCase Literal 20 StatementExpression MethodInvocation Literal ""z"" slice_from BreakStatement SwitchStatementCase Literal 21 StatementExpression MethodInvocation Literal ""f"" slice_from BreakStatement SwitchStatementCase Literal 22 StatementExpression MethodInvocation Literal ""s"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Step_1c LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_7 Literal 2 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! r_C BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""n"" eq_s_b BlockStatement BreakStatement lab0 End IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab0 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 BlockStatement StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""h"" eq_s_b BlockStatement BreakStatement lab1 End IfStatement MethodInvocation ! r_R1 BlockStatement BreakStatement lab1 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Lose_prefix LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! Literal 2 Literal ""ge"" eq_s BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference v_1 MemberReference cursor = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation + MemberReference cursor Literal 3 IfStatement BinaryOperation || BinaryOperation > Literal 0 MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference c = StatementExpression Assignment MemberReference cursor MemberReference v_1 = WhileStatement golab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 in_grouping BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = BreakStatement golab0 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab2 Literal true BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = BreakStatement golab2 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference B_GE_removed Literal true = StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_Lose_infix LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor WhileStatement golab0 Literal true BlockStatement DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! Literal 2 Literal ""ge"" eq_s BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference ket MemberReference cursor = BreakStatement golab0 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference v_2 MemberReference cursor = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation + MemberReference cursor Literal 3 IfStatement BinaryOperation || BinaryOperation > Literal 0 MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference c = StatementExpression Assignment MemberReference cursor MemberReference v_2 = WhileStatement golab2 Literal true BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 in_grouping BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = BreakStatement golab2 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab4 Literal true BlockStatement StatementExpression Assignment MemberReference v_4 MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference cursor MemberReference v_4 = BreakStatement golab4 End StatementExpression Assignment MemberReference cursor MemberReference v_4 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference B_GE_removed Literal true = StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_measure LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference I_p1 MemberReference cursor = StatementExpression Assignment MemberReference I_p2 MemberReference cursor = End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement WhileStatement replab2 Literal true BlockStatement DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping BlockStatement BreakStatement lab3 End ContinueStatement replab2 End BreakStatement replab2 End BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator v_4 Literal 1 WhileStatement replab4 Literal true BlockStatement StatementExpression Assignment MemberReference v_5 MemberReference cursor = DoStatement lab5 Literal false BlockStatement DoStatement lab6 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 MemberReference cursor = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""ij"" eq_s BlockStatement BreakStatement lab7 End BreakStatement lab6 End StatementExpression Assignment MemberReference cursor MemberReference v_6 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 in_grouping BlockStatement BreakStatement lab5 End End StatementExpression MemberReference -- v_4 ContinueStatement replab4 End StatementExpression Assignment MemberReference cursor MemberReference v_5 = BreakStatement replab4 End IfStatement BinaryOperation > MemberReference v_4 Literal 0 BlockStatement BreakStatement lab1 End IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = WhileStatement replab8 Literal true BlockStatement DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping BlockStatement BreakStatement lab9 End ContinueStatement replab8 End BreakStatement replab8 End BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator v_8 Literal 1 WhileStatement replab10 Literal true BlockStatement StatementExpression Assignment MemberReference v_9 MemberReference cursor = DoStatement lab11 Literal false BlockStatement DoStatement lab12 Literal false BlockStatement StatementExpression Assignment MemberReference v_10 MemberReference cursor = DoStatement lab13 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""ij"" eq_s BlockStatement BreakStatement lab13 End BreakStatement lab12 End StatementExpression Assignment MemberReference cursor MemberReference v_10 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 in_grouping BlockStatement BreakStatement lab11 End End StatementExpression MemberReference -- v_8 ContinueStatement replab10 End StatementExpression Assignment MemberReference cursor MemberReference v_9 = BreakStatement replab10 End IfStatement BinaryOperation > MemberReference v_8 Literal 0 BlockStatement BreakStatement lab1 End IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 out_grouping BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference I_p2 MemberReference cursor = End StatementExpression Assignment MemberReference cursor MemberReference v_2 = ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 LocalVariableDeclaration BasicType int VariableDeclarator v_11 LocalVariableDeclaration BasicType int VariableDeclarator v_12 LocalVariableDeclaration BasicType int VariableDeclarator v_13 LocalVariableDeclaration BasicType int VariableDeclarator v_14 LocalVariableDeclaration BasicType int VariableDeclarator v_15 LocalVariableDeclaration BasicType int VariableDeclarator v_16 LocalVariableDeclaration BasicType int VariableDeclarator v_18 LocalVariableDeclaration BasicType int VariableDeclarator v_19 LocalVariableDeclaration BasicType int VariableDeclarator v_20 StatementExpression Assignment MemberReference B_Y_found Literal false = StatementExpression Assignment MemberReference B_stemmed Literal false = StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""y"" eq_s BlockStatement BreakStatement lab0 End StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression MethodInvocation Literal ""Y"" slice_from StatementExpression Assignment MemberReference B_Y_found Literal true = End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement WhileStatement replab2 Literal true BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab3 Literal false BlockStatement WhileStatement golab4 Literal true BlockStatement StatementExpression Assignment MemberReference v_4 MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 121 in_grouping BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""y"" eq_s BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference v_4 = BreakStatement golab4 End StatementExpression Assignment MemberReference cursor MemberReference v_4 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab3 End StatementExpression MemberReference ++ cursor End StatementExpression MethodInvocation Literal ""Y"" slice_from StatementExpression Assignment MemberReference B_Y_found Literal true = ContinueStatement replab2 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = BreakStatement replab2 End End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement MethodInvocation ! r_measure BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! r_Step_1 BlockStatement BreakStatement lab6 End StatementExpression Assignment MemberReference B_stemmed Literal true = End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! r_Step_2 BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference B_stemmed Literal true = End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! r_Step_3 BlockStatement BreakStatement lab8 End StatementExpression Assignment MemberReference B_stemmed Literal true = End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! r_Step_4 BlockStatement BreakStatement lab9 End StatementExpression Assignment MemberReference B_stemmed Literal true = End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = StatementExpression Assignment MemberReference B_GE_removed Literal false = StatementExpression Assignment MemberReference v_9 MemberReference cursor = DoStatement lab10 Literal false BlockStatement StatementExpression Assignment MemberReference v_10 MemberReference cursor = IfStatement MethodInvocation ! r_Lose_prefix BlockStatement BreakStatement lab10 End StatementExpression Assignment MemberReference cursor MemberReference v_10 = IfStatement MethodInvocation ! r_measure BlockStatement BreakStatement lab10 End End StatementExpression Assignment MemberReference cursor MemberReference v_9 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_11 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab11 Literal false BlockStatement IfStatement MemberReference ! B_GE_removed BlockStatement BreakStatement lab11 End IfStatement MethodInvocation ! r_Step_1c BlockStatement BreakStatement lab11 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_11 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = StatementExpression Assignment MemberReference B_GE_removed Literal false = StatementExpression Assignment MemberReference v_12 MemberReference cursor = DoStatement lab12 Literal false BlockStatement StatementExpression Assignment MemberReference v_13 MemberReference cursor = IfStatement MethodInvocation ! r_Lose_infix BlockStatement BreakStatement lab12 End StatementExpression Assignment MemberReference cursor MemberReference v_13 = IfStatement MethodInvocation ! r_measure BlockStatement BreakStatement lab12 End End StatementExpression Assignment MemberReference cursor MemberReference v_12 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_14 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab13 Literal false BlockStatement IfStatement MemberReference ! B_GE_removed BlockStatement BreakStatement lab13 End IfStatement MethodInvocation ! r_Step_1c BlockStatement BreakStatement lab13 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_14 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_15 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab14 Literal false BlockStatement IfStatement MethodInvocation ! r_Step_7 BlockStatement BreakStatement lab14 End StatementExpression Assignment MemberReference B_stemmed Literal true = End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_15 = StatementExpression Assignment MemberReference v_16 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab15 Literal false BlockStatement DoStatement lab16 Literal false BlockStatement DoStatement lab17 Literal false BlockStatement IfStatement MemberReference ! B_stemmed BlockStatement BreakStatement lab17 End BreakStatement lab16 End IfStatement MemberReference ! B_GE_removed BlockStatement BreakStatement lab15 End End IfStatement MethodInvocation ! r_Step_6 BlockStatement BreakStatement lab15 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_16 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = StatementExpression Assignment MemberReference v_18 MemberReference cursor = DoStatement lab18 Literal false BlockStatement IfStatement MemberReference ! B_Y_found BlockStatement BreakStatement lab18 End WhileStatement replab19 Literal true BlockStatement StatementExpression Assignment MemberReference v_19 MemberReference cursor = DoStatement lab20 Literal false BlockStatement WhileStatement golab21 Literal true BlockStatement StatementExpression Assignment MemberReference v_20 MemberReference cursor = DoStatement lab22 Literal false BlockStatement StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""Y"" eq_s BlockStatement BreakStatement lab22 End StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference v_20 = BreakStatement golab21 End StatementExpression Assignment MemberReference cursor MemberReference v_20 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab20 End StatementExpression MemberReference ++ cursor End StatementExpression MethodInvocation Literal ""y"" slice_from ContinueStatement replab19 End StatementExpression Assignment MemberReference cursor MemberReference v_19 = BreakStatement replab19 End End StatementExpression Assignment MemberReference cursor MemberReference v_18 = ReturnStatement Literal true ReferenceType SnowballProgram",0
200,200,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.util.List Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.benchmark.byTask.stats.Report Import org.apache.lucene.benchmark.byTask.stats.TaskStats ClassDeclaration Modifier public /**
 * Report by-name-prefix statistics with no aggregations.
 * <br>Other side effects: None.
 */ RepSelectByPrefTask ConstructorDeclaration Modifier public RepSelectByPrefTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception LocalVariableDeclaration ReferenceType Report VariableDeclarator rp MethodInvocation MethodInvocation MethodInvocation getPoints MethodInvocation taskStats getRunData reportSelectByPrefix StatementExpression MethodInvocation System.out println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""------------> Report Select By Prefix ("" MemberReference prefix Literal "") ("" MethodInvocation rp getSize Literal "" about "" MethodInvocation rp getReported Literal "" out of "" MethodInvocation rp getOutOf Literal "")"" println StatementExpression MethodInvocation System.out MethodInvocation rp getText println StatementExpression MethodInvocation System.out println ReturnStatement Literal 0 MethodDeclaration Modifier protected ReferenceType Report reportSelectByPrefix FormalParameter ReferenceType List TypeArgument ReferenceType TaskStats taskStats LocalVariableDeclaration ReferenceType String VariableDeclarator longestOp MethodInvocation MemberReference taskStats longestOp LocalVariableDeclaration BasicType boolean VariableDeclarator first Literal true LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation sb MethodInvocation MemberReference longestOp tableTitle append StatementExpression MethodInvocation sb MemberReference newline append LocalVariableDeclaration BasicType int VariableDeclarator reported Literal 0 ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType TaskStats VariableDeclarator stat MemberReference taskStats BlockStatement IfStatement BinaryOperation && BinaryOperation >= MethodInvocation stat getElapsed Literal 0 MethodInvocation stat MethodInvocation getName MethodInvocation MemberReference prefix startsWith getTask BlockStatement StatementExpression MemberReference ++ reported IfStatement MemberReference ! first BlockStatement StatementExpression MethodInvocation sb MemberReference newline append End StatementExpression Assignment MemberReference first Literal false = LocalVariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation MemberReference longestOp MemberReference stat taskReportLine IfStatement BinaryOperation && BinaryOperation > MethodInvocation taskStats size Literal 2 BinaryOperation == BinaryOperation % MemberReference reported Literal 2 Literal 0 BlockStatement StatementExpression Assignment MemberReference line MethodInvocation line Literal ""   "" Literal "" - "" replaceAll = End StatementExpression MethodInvocation sb MemberReference line append End End LocalVariableDeclaration ReferenceType String VariableDeclarator reptxt TernaryExpression BinaryOperation == MemberReference reported Literal 0 Literal ""No Matching Entries Were Found!"" MethodInvocation sb toString ReturnStatement ClassCreator ReferenceType Report MemberReference reptxt MemberReference reported MemberReference reported MethodInvocation taskStats size ReferenceType RepSumByPrefTask",0
488,488,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser Import java.io.InputStream Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.DocumentBuilderFactory Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.queryParser.QueryParser Import org.apache.lucene.search.Query Import org.apache.lucene.xmlparser.builders  Import org.w3c.dom.Document Import org.w3c.dom.Element ClassDeclaration Modifier public /**
 * Assembles a QueryBuilder which uses only core Lucene Query objects
 *
 */ CoreParser FieldDeclaration Modifier protected ReferenceType Analyzer VariableDeclarator analyzer FieldDeclaration Modifier protected ReferenceType QueryParser VariableDeclarator parser FieldDeclaration Modifier protected ReferenceType QueryBuilderFactory VariableDeclarator queryFactory FieldDeclaration Modifier protected ReferenceType FilterBuilderFactory VariableDeclarator filterFactory FieldDeclaration Modifier public static BasicType int VariableDeclarator maxNumCachedFilters Literal 20 ConstructorDeclaration Modifier public /**
	 * Construct an XML parser that uses a single instance QueryParser for handling 
	 * UserQuery tags - all parse operations are synchronised on this parser
	 * @param analyzer
	 * @param parser A QueryParser which will be synchronized on during parse calls.
	 */ CoreParser FormalParameter ReferenceType Analyzer analyzer FormalParameter ReferenceType QueryParser parser StatementExpression ExplicitConstructorInvocation Literal null MemberReference analyzer MemberReference parser ConstructorDeclaration Modifier public /**
	 * Constructs an XML parser that creates a QueryParser for each UserQuery request.
	 * @param defaultField The default field name used by QueryParsers constructed for UserQuery tags 
	 * @param analyzer 
	 */ CoreParser FormalParameter ReferenceType String defaultField FormalParameter ReferenceType Analyzer analyzer StatementExpression ExplicitConstructorInvocation MemberReference defaultField MemberReference analyzer Literal null ConstructorDeclaration Modifier protected CoreParser FormalParameter ReferenceType String defaultField FormalParameter ReferenceType Analyzer analyzer FormalParameter ReferenceType QueryParser parser StatementExpression Assignment This MemberReference analyzer MemberReference analyzer = StatementExpression Assignment This MemberReference parser MemberReference parser = StatementExpression Assignment MemberReference filterFactory ClassCreator ReferenceType FilterBuilderFactory = StatementExpression MethodInvocation filterFactory Literal ""RangeFilter"" ClassCreator ReferenceType RangeFilterBuilder addBuilder StatementExpression Assignment MemberReference queryFactory ClassCreator ReferenceType QueryBuilderFactory = StatementExpression MethodInvocation queryFactory Literal ""TermQuery"" ClassCreator ReferenceType TermQueryBuilder addBuilder StatementExpression MethodInvocation queryFactory Literal ""TermsQuery"" ClassCreator ReferenceType TermsQueryBuilder MemberReference analyzer addBuilder StatementExpression MethodInvocation queryFactory Literal ""MatchAllDocsQuery"" ClassCreator ReferenceType MatchAllDocsQueryBuilder addBuilder StatementExpression MethodInvocation queryFactory Literal ""BooleanQuery"" ClassCreator ReferenceType BooleanQueryBuilder MemberReference queryFactory addBuilder IfStatement BinaryOperation != MemberReference parser Literal null BlockStatement StatementExpression MethodInvocation queryFactory Literal ""UserQuery"" ClassCreator ReferenceType UserInputQueryBuilder MemberReference parser addBuilder BlockStatement StatementExpression MethodInvocation queryFactory Literal ""UserQuery"" ClassCreator ReferenceType UserInputQueryBuilder MemberReference defaultField MemberReference analyzer addBuilder End StatementExpression MethodInvocation queryFactory Literal ""FilteredQuery"" ClassCreator ReferenceType FilteredQueryBuilder MemberReference filterFactory MemberReference queryFactory addBuilder StatementExpression MethodInvocation queryFactory Literal ""ConstantScoreQuery"" ClassCreator ReferenceType ConstantScoreQueryBuilder MemberReference filterFactory addBuilder StatementExpression MethodInvocation filterFactory Literal ""CachedFilter"" ClassCreator ReferenceType CachedFilterBuilder MemberReference queryFactory MemberReference filterFactory MemberReference maxNumCachedFilters addBuilder LocalVariableDeclaration ReferenceType SpanQueryBuilderFactory VariableDeclarator sqof ClassCreator ReferenceType SpanQueryBuilderFactory LocalVariableDeclaration ReferenceType SpanNearBuilder VariableDeclarator snb ClassCreator ReferenceType SpanNearBuilder MemberReference sqof StatementExpression MethodInvocation sqof Literal ""SpanNear"" MemberReference snb addBuilder StatementExpression MethodInvocation queryFactory Literal ""SpanNear"" MemberReference snb addBuilder LocalVariableDeclaration ReferenceType BoostingTermBuilder VariableDeclarator btb ClassCreator ReferenceType BoostingTermBuilder StatementExpression MethodInvocation sqof Literal ""BoostingTermQuery"" MemberReference btb addBuilder StatementExpression MethodInvocation queryFactory Literal ""BoostingTermQuery"" MemberReference btb addBuilder LocalVariableDeclaration ReferenceType SpanTermBuilder VariableDeclarator snt ClassCreator ReferenceType SpanTermBuilder StatementExpression MethodInvocation sqof Literal ""SpanTerm"" MemberReference snt addBuilder StatementExpression MethodInvocation queryFactory Literal ""SpanTerm"" MemberReference snt addBuilder LocalVariableDeclaration ReferenceType SpanOrBuilder VariableDeclarator sot ClassCreator ReferenceType SpanOrBuilder MemberReference sqof StatementExpression MethodInvocation sqof Literal ""SpanOr"" MemberReference sot addBuilder StatementExpression MethodInvocation queryFactory Literal ""SpanOr"" MemberReference sot addBuilder LocalVariableDeclaration ReferenceType SpanOrTermsBuilder VariableDeclarator sots ClassCreator ReferenceType SpanOrTermsBuilder MemberReference analyzer StatementExpression MethodInvocation sqof Literal ""SpanOrTerms"" MemberReference sots addBuilder StatementExpression MethodInvocation queryFactory Literal ""SpanOrTerms"" MemberReference sots addBuilder LocalVariableDeclaration ReferenceType SpanFirstBuilder VariableDeclarator sft ClassCreator ReferenceType SpanFirstBuilder MemberReference sqof StatementExpression MethodInvocation sqof Literal ""SpanFirst"" MemberReference sft addBuilder StatementExpression MethodInvocation queryFactory Literal ""SpanFirst"" MemberReference sft addBuilder LocalVariableDeclaration ReferenceType SpanNotBuilder VariableDeclarator snot ClassCreator ReferenceType SpanNotBuilder MemberReference sqof StatementExpression MethodInvocation sqof Literal ""SpanNot"" MemberReference snot addBuilder StatementExpression MethodInvocation queryFactory Literal ""SpanNot"" MemberReference snot addBuilder MethodDeclaration Modifier public ReferenceType Query parse FormalParameter ReferenceType InputStream xmlStream ParserException ReturnStatement MethodInvocation MethodInvocation MethodInvocation getDocumentElement MemberReference xmlStream parseXML getQuery MethodDeclaration Modifier public addQueryBuilder FormalParameter ReferenceType String nodeName FormalParameter ReferenceType QueryBuilder builder StatementExpression MethodInvocation queryFactory MemberReference nodeName MemberReference builder addBuilder MethodDeclaration Modifier public addFilterBuilder FormalParameter ReferenceType String nodeName FormalParameter ReferenceType FilterBuilder builder StatementExpression MethodInvocation filterFactory MemberReference nodeName MemberReference builder addBuilder MethodDeclaration Modifier private static ReferenceType Document parseXML FormalParameter ReferenceType InputStream pXmlFile ParserException LocalVariableDeclaration ReferenceType DocumentBuilderFactory VariableDeclarator dbf MethodInvocation DocumentBuilderFactory newInstance LocalVariableDeclaration ReferenceType DocumentBuilder VariableDeclarator db Literal null TryStatement StatementExpression Assignment MemberReference db MethodInvocation dbf newDocumentBuilder = CatchClause CatchClauseParameter Exception se ThrowStatement ClassCreator ReferenceType ParserException Literal ""XML Parser configuration error"" MemberReference se LocalVariableDeclaration ReferenceType org ReferenceType w3c ReferenceType dom ReferenceType Document VariableDeclarator doc Literal null TryStatement StatementExpression Assignment MemberReference doc MethodInvocation db MemberReference pXmlFile parse = CatchClause CatchClauseParameter Exception se ThrowStatement ClassCreator ReferenceType ParserException BinaryOperation + Literal ""Error parsing XML stream:"" MemberReference se MemberReference se ReturnStatement MemberReference doc MethodDeclaration Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Element e ParserException ReturnStatement MethodInvocation queryFactory MemberReference e getQuery ReferenceType QueryBuilder",0
279,279,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.store.FSDirectory Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexInput Import org.apache.lucene.document.AbstractField Import org.apache.lucene.document.Document Import java.text.NumberFormat Import java.io.PrintStream Import java.io.IOException Import java.io.File Import java.util.Collection Import java.util.List Import java.util.ArrayList Import java.util.Map ClassDeclaration Modifier public /**
 * Basic tool and API to check the health of an index and
 * write a new segments file that removes reference to
 * problematic segments.
 * 
 * <p>As this tool checks every byte in the index, on a large
 * index it can take quite a long time to run.
 *
 * <p><b>WARNING</b>: this tool and API is new and
 * experimental and is subject to suddenly change in the
 * next release.  Please make a complete backup of your
 * index before using this to fix your index!
 */ CheckIndex FieldDeclaration Modifier private ReferenceType PrintStream VariableDeclarator infoStream FieldDeclaration Modifier private ReferenceType Directory VariableDeclarator dir ClassDeclaration Modifier public static /**
   * Returned from {@link #checkIndex()} detailing the health and status of the index.
   *
   * <p><b>WARNING</b>: this API is new and experimental and is
   * subject to suddenly change in the next release.
   **/ Status FieldDeclaration /** True if no problems were found with the index. */ Modifier public BasicType boolean VariableDeclarator clean FieldDeclaration /** True if we were unable to locate and load the segments_N file. */ Modifier public BasicType boolean VariableDeclarator missingSegments FieldDeclaration /** True if we were unable to open the segments_N file. */ Modifier public BasicType boolean VariableDeclarator cantOpenSegments FieldDeclaration /** True if we were unable to read the version number from segments_N file. */ Modifier public BasicType boolean VariableDeclarator missingSegmentVersion FieldDeclaration /** Name of latest segments_N file in the index. */ Modifier public ReferenceType String VariableDeclarator segmentsFileName FieldDeclaration /** Number of segments in the index. */ Modifier public BasicType int VariableDeclarator numSegments FieldDeclaration /** String description of the version of the index. */ Modifier public ReferenceType String VariableDeclarator segmentFormat FieldDeclaration /** Empty unless you passed specific segments list to check as optional 3rd argument.
     *  @see CheckIndex#checkIndex(List) */ Modifier public ReferenceType List TypeArgument ReferenceType String VariableDeclarator segmentsChecked ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String FieldDeclaration /** True if the index was created with a newer version of Lucene than the CheckIndex tool. */ Modifier public BasicType boolean VariableDeclarator toolOutOfDate FieldDeclaration /** List of {@link SegmentInfoStatus} instances, detailing status of each segment. */ Modifier public ReferenceType List TypeArgument ReferenceType SegmentInfoStatus VariableDeclarator segmentInfos ClassCreator ReferenceType ArrayList TypeArgument ReferenceType SegmentInfoStatus FieldDeclaration /** Directory index is in. */ Modifier public ReferenceType Directory VariableDeclarator dir FieldDeclaration /** 
     * SegmentInfos instance containing only segments that
     * had no problems (this is used with the {@link CheckIndex#fixIndex} 
     * method to repair the index. 
     */ ReferenceType SegmentInfos VariableDeclarator newSegments FieldDeclaration /** How many documents will be lost to bad segments. */ Modifier public BasicType int VariableDeclarator totLoseDocCount FieldDeclaration /** How many bad segments were found. */ Modifier public BasicType int VariableDeclarator numBadSegments FieldDeclaration /** True if we checked only specific segments ({@link
     * #checkIndex(List)}) was called with non-null
     * argument). */ Modifier public BasicType boolean VariableDeclarator partial FieldDeclaration /** Holds the userData of the last commit in the index */ Modifier public ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator userData ClassDeclaration Modifier public static /** Holds the status of each segment in the index.
     *  See {@link #segmentInfos}.
     *
     * <p><b>WARNING</b>: this API is new and experimental and is
     * subject to suddenly change in the next release.
     */ SegmentInfoStatus FieldDeclaration /** Name of the segment. */ Modifier public ReferenceType String VariableDeclarator name FieldDeclaration /** Document count (does not take deletions into account). */ Modifier public BasicType int VariableDeclarator docCount FieldDeclaration /** True if segment is compound file format. */ Modifier public BasicType boolean VariableDeclarator compound FieldDeclaration /** Number of files referenced by this segment. */ Modifier public BasicType int VariableDeclarator numFiles FieldDeclaration /** Net size (MB) of the files referenced by this
       *  segment. */ Modifier public BasicType double VariableDeclarator sizeMB FieldDeclaration /** Doc store offset, if this segment shares the doc
       *  store files (stored fields and term vectors) with
       *  other segments.  This is -1 if it does not share. */ Modifier public BasicType int VariableDeclarator docStoreOffset Literal - 1 FieldDeclaration /** String of the shared doc store segment, or null if
       *  this segment does not share the doc store files. */ Modifier public ReferenceType String VariableDeclarator docStoreSegment FieldDeclaration /** True if the shared doc store files are compound file
       *  format. */ Modifier public BasicType boolean VariableDeclarator docStoreCompoundFile FieldDeclaration /** True if this segment has pending deletions. */ Modifier public BasicType boolean VariableDeclarator hasDeletions FieldDeclaration /** Name of the current deletions file name. */ Modifier public ReferenceType String VariableDeclarator deletionsFileName FieldDeclaration /** Number of deleted documents. */ Modifier public BasicType int VariableDeclarator numDeleted FieldDeclaration /** True if we were able to open a SegmentReader on this
       *  segment. */ Modifier public BasicType boolean VariableDeclarator openReaderPassed FieldDeclaration /** Number of fields in this segment. */ BasicType int VariableDeclarator numFields FieldDeclaration /** True if at least one of the fields in this segment
       *  does not omitTermFreqAndPositions.
       *  @see AbstractField#setOmitTermFreqAndPositions */ Modifier public BasicType boolean VariableDeclarator hasProx FieldDeclaration /** Map that includes certain
       *  debugging details that IndexWriter records into
       *  each segment it creates */ Modifier public ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator diagnostics FieldDeclaration /** Status for testing of field norms (null if field norms could not be tested). */ Modifier public ReferenceType FieldNormStatus VariableDeclarator fieldNormStatus FieldDeclaration /** Status for testing of indexed terms (null if indexed terms could not be tested). */ Modifier public ReferenceType TermIndexStatus VariableDeclarator termIndexStatus FieldDeclaration /** Status for testing of stored fields (null if stored fields could not be tested). */ Modifier public ReferenceType StoredFieldStatus VariableDeclarator storedFieldStatus FieldDeclaration /** Status for testing of term vectors (null if term vectors could not be tested). */ Modifier public ReferenceType TermVectorStatus VariableDeclarator termVectorStatus ClassDeclaration Modifier public final static /**
     * Status from testing field norms.
     */ FieldNormStatus FieldDeclaration /** Number of fields successfully tested */ Modifier public BasicType long VariableDeclarator totFields Literal 0L FieldDeclaration /** Exception thrown during term index test (null on success) */ Modifier public ReferenceType Throwable VariableDeclarator error Literal null ClassDeclaration Modifier public final static /**
     * Status from testing term index.
     */ TermIndexStatus FieldDeclaration /** Total term count */ Modifier public BasicType long VariableDeclarator termCount Literal 0L FieldDeclaration /** Total frequency across all terms. */ Modifier public BasicType long VariableDeclarator totFreq Literal 0L FieldDeclaration /** Total number of positions. */ Modifier public BasicType long VariableDeclarator totPos Literal 0L FieldDeclaration /** Exception thrown during term index test (null on success) */ Modifier public ReferenceType Throwable VariableDeclarator error Literal null ClassDeclaration Modifier public final static /**
     * Status from testing stored fields.
     */ StoredFieldStatus FieldDeclaration /** Number of documents tested. */ Modifier public BasicType int VariableDeclarator docCount Literal 0 FieldDeclaration /** Total number of stored fields tested. */ Modifier public BasicType long VariableDeclarator totFields Literal 0 FieldDeclaration /** Exception thrown during stored fields test (null on success) */ Modifier public ReferenceType Throwable VariableDeclarator error Literal null ClassDeclaration Modifier public final static /**
     * Status from testing stored fields.
     */ TermVectorStatus FieldDeclaration /** Number of documents tested. */ Modifier public BasicType int VariableDeclarator docCount Literal 0 FieldDeclaration /** Total number of term vectors tested. */ Modifier public BasicType long VariableDeclarator totVectors Literal 0 FieldDeclaration /** Exception thrown during term vector test (null on success) */ Modifier public ReferenceType Throwable VariableDeclarator error Literal null ConstructorDeclaration Modifier public /** Create a new CheckIndex on the directory. */ CheckIndex FormalParameter ReferenceType Directory dir StatementExpression Assignment This MemberReference dir MemberReference dir = StatementExpression Assignment MemberReference infoStream Literal null = MethodDeclaration /** Set infoStream where messages should go.  If null, no
   *  messages are printed */ Modifier public setInfoStream FormalParameter ReferenceType PrintStream out StatementExpression Assignment MemberReference infoStream MemberReference out = MethodDeclaration Modifier private msg FormalParameter ReferenceType String msg IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation infoStream MemberReference msg println End ClassDeclaration Modifier private static MySegmentTermDocs FieldDeclaration BasicType int VariableDeclarator delCount ConstructorDeclaration MySegmentTermDocs FormalParameter ReferenceType SegmentReader p StatementExpression SuperConstructorInvocation MemberReference p MethodDeclaration Modifier public Annotation Override seek FormalParameter ReferenceType Term term IOException StatementExpression SuperMethodInvocation MemberReference term seek StatementExpression Assignment MemberReference delCount Literal 0 = MethodDeclaration Modifier protected Annotation Override skippingDoc IOException StatementExpression MemberReference ++ delCount ReferenceType SegmentTermDocs MethodDeclaration /** Returns a {@link Status} instance detailing
   *  the state of the index.
   *
   *  <p>As this method checks every byte in the index, on a large
   *  index it can take quite a long time to run.
   *
   *  <p><b>WARNING</b>: make sure
   *  you only call this when the index is not opened by any
   *  writer. */ Modifier public ReferenceType Status checkIndex IOException ReturnStatement MethodInvocation Literal null checkIndex MethodDeclaration /** Returns a {@link Status} instance detailing
   *  the state of the index.
   * 
   *  @param onlySegments list of specific segment names to check
   *
   *  <p>As this method checks every byte in the specified
   *  segments, on a large index it can take quite a long
   *  time to run.
   *
   *  <p><b>WARNING</b>: make sure
   *  you only call this when the index is not opened by any
   *  writer. */ Modifier public ReferenceType Status checkIndex FormalParameter ReferenceType List TypeArgument ReferenceType String onlySegments IOException LocalVariableDeclaration ReferenceType NumberFormat VariableDeclarator nf MethodInvocation NumberFormat getInstance LocalVariableDeclaration ReferenceType SegmentInfos VariableDeclarator sis ClassCreator ReferenceType SegmentInfos LocalVariableDeclaration ReferenceType Status VariableDeclarator result ClassCreator ReferenceType Status StatementExpression Assignment MemberReference result dir MemberReference dir = TryStatement StatementExpression MethodInvocation sis MemberReference dir read CatchClause CatchClauseParameter Throwable t StatementExpression MethodInvocation Literal ""ERROR: could not read any segments file in directory"" msg StatementExpression Assignment MemberReference result missingSegments Literal true = IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation t MemberReference infoStream printStackTrace End ReturnStatement MemberReference result LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numSegments MethodInvocation sis size LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator segmentsFileName MethodInvocation sis getCurrentSegmentFileName LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator input Literal null TryStatement StatementExpression Assignment MemberReference input MethodInvocation dir MemberReference segmentsFileName openInput = CatchClause CatchClauseParameter Throwable t StatementExpression MethodInvocation Literal ""ERROR: could not open segments file in directory"" msg IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation t MemberReference infoStream printStackTrace End StatementExpression Assignment MemberReference result cantOpenSegments Literal true = ReturnStatement MemberReference result LocalVariableDeclaration BasicType int VariableDeclarator format Literal 0 TryStatement StatementExpression Assignment MemberReference format MethodInvocation input readInt = CatchClause CatchClauseParameter Throwable t StatementExpression MethodInvocation Literal ""ERROR: could not read segment file version in directory"" msg IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation t MemberReference infoStream printStackTrace End StatementExpression Assignment MemberReference result missingSegmentVersion Literal true = ReturnStatement MemberReference result IfStatement BinaryOperation != MemberReference input Literal null StatementExpression MethodInvocation input close End LocalVariableDeclaration ReferenceType String VariableDeclarator sFormat Literal """" LocalVariableDeclaration BasicType boolean VariableDeclarator skip Literal false IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT StatementExpression Assignment MemberReference sFormat Literal ""FORMAT [Lucene Pre-2.1]"" = End IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT_LOCKLESS StatementExpression Assignment MemberReference sFormat Literal ""FORMAT_LOCKLESS [Lucene 2.1]"" = IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT_SINGLE_NORM_FILE StatementExpression Assignment MemberReference sFormat Literal ""FORMAT_SINGLE_NORM_FILE [Lucene 2.2]"" = IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT_SHARED_DOC_STORE StatementExpression Assignment MemberReference sFormat Literal ""FORMAT_SHARED_DOC_STORE [Lucene 2.3]"" = BlockStatement IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT_CHECKSUM StatementExpression Assignment MemberReference sFormat Literal ""FORMAT_CHECKSUM [Lucene 2.4]"" = IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT_DEL_COUNT StatementExpression Assignment MemberReference sFormat Literal ""FORMAT_DEL_COUNT [Lucene 2.4]"" = IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT_HAS_PROX StatementExpression Assignment MemberReference sFormat Literal ""FORMAT_HAS_PROX [Lucene 2.4]"" = IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT_USER_DATA StatementExpression Assignment MemberReference sFormat Literal ""FORMAT_USER_DATA [Lucene 2.9]"" = IfStatement BinaryOperation == MemberReference format MemberReference SegmentInfos FORMAT_DIAGNOSTICS StatementExpression Assignment MemberReference sFormat Literal ""FORMAT_DIAGNOSTICS [Lucene 2.9]"" = IfStatement BinaryOperation < MemberReference format MemberReference SegmentInfos CURRENT_FORMAT BlockStatement StatementExpression Assignment MemberReference sFormat BinaryOperation + BinaryOperation + Literal ""int="" MemberReference format Literal "" [newer version of Lucene than this tool]"" = StatementExpression Assignment MemberReference skip Literal true = BlockStatement StatementExpression Assignment MemberReference sFormat BinaryOperation + MemberReference format Literal "" [Lucene 1.3 or prior]"" = End End End End End End End End End StatementExpression Assignment MemberReference result segmentsFileName MemberReference segmentsFileName = StatementExpression Assignment MemberReference result numSegments MemberReference numSegments = StatementExpression Assignment MemberReference result segmentFormat MemberReference sFormat = StatementExpression Assignment MemberReference result userData MethodInvocation sis getUserData = LocalVariableDeclaration ReferenceType String VariableDeclarator userDataString IfStatement BinaryOperation > MethodInvocation sis MethodInvocation size getUserData Literal 0 BlockStatement StatementExpression Assignment MemberReference userDataString BinaryOperation + Literal "" userData="" MethodInvocation sis getUserData = BlockStatement StatementExpression Assignment MemberReference userDataString Literal """" = End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Segments file="" MemberReference segmentsFileName Literal "" numSegments="" MemberReference numSegments Literal "" version="" MemberReference sFormat MemberReference userDataString msg IfStatement BinaryOperation != MemberReference onlySegments Literal null BlockStatement StatementExpression Assignment MemberReference result partial Literal true = IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation infoStream Literal ""\nChecking only these segments:"" print End ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator s MemberReference onlySegments BlockStatement IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation infoStream BinaryOperation + Literal "" "" MemberReference s print End End StatementExpression MethodInvocation result.segmentsChecked MemberReference onlySegments addAll StatementExpression MethodInvocation Literal "":"" msg End IfStatement MemberReference skip BlockStatement StatementExpression MethodInvocation Literal ""\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting"" msg StatementExpression Assignment MemberReference result toolOutOfDate Literal true = ReturnStatement MemberReference result End StatementExpression Assignment MemberReference result newSegments Cast ReferenceType SegmentInfos MethodInvocation sis clone = StatementExpression MethodInvocation result.newSegments clear ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numSegments MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType SegmentInfo VariableDeclarator info MethodInvocation sis MemberReference i info IfStatement BinaryOperation && BinaryOperation != MemberReference onlySegments Literal null MethodInvocation ! onlySegments MemberReference info name contains ContinueStatement End LocalVariableDeclaration ReferenceType Status ReferenceType SegmentInfoStatus VariableDeclarator segInfoStat ClassCreator ReferenceType Status ReferenceType SegmentInfoStatus StatementExpression MethodInvocation result.segmentInfos MemberReference segInfoStat add StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""  "" BinaryOperation + Literal 1 MemberReference i Literal "" of "" MemberReference numSegments Literal "": name="" MemberReference info name Literal "" docCount="" MemberReference info docCount msg StatementExpression Assignment MemberReference segInfoStat name MemberReference info name = StatementExpression Assignment MemberReference segInfoStat docCount MemberReference info docCount = LocalVariableDeclaration BasicType int VariableDeclarator toLoseDocCount MemberReference info docCount LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator reader Literal null TryStatement StatementExpression MethodInvocation BinaryOperation + Literal ""    compound="" MethodInvocation info getUseCompoundFile msg StatementExpression Assignment MemberReference segInfoStat compound MethodInvocation info getUseCompoundFile = StatementExpression MethodInvocation BinaryOperation + Literal ""    hasProx="" MethodInvocation info getHasProx msg StatementExpression Assignment MemberReference segInfoStat hasProx MethodInvocation info getHasProx = StatementExpression MethodInvocation BinaryOperation + Literal ""    numFiles="" MethodInvocation info MethodInvocation size files msg StatementExpression Assignment MemberReference segInfoStat numFiles MethodInvocation info MethodInvocation size files = StatementExpression MethodInvocation BinaryOperation + Literal ""    size (MB)="" MethodInvocation nf BinaryOperation / MethodInvocation info sizeInBytes BinaryOperation * Literal 1024. Literal 1024. format msg StatementExpression Assignment MemberReference segInfoStat sizeMB BinaryOperation / MethodInvocation info sizeInBytes BinaryOperation * Literal 1024. Literal 1024. = LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator diagnostics MethodInvocation info getDiagnostics StatementExpression Assignment MemberReference segInfoStat diagnostics MemberReference diagnostics = IfStatement BinaryOperation > MethodInvocation diagnostics size Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""    diagnostics = "" MemberReference diagnostics msg End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator docStoreOffset MethodInvocation info getDocStoreOffset IfStatement BinaryOperation != MemberReference docStoreOffset Literal - 1 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""    docStoreOffset="" MemberReference docStoreOffset msg StatementExpression Assignment MemberReference segInfoStat docStoreOffset MemberReference docStoreOffset = StatementExpression MethodInvocation BinaryOperation + Literal ""    docStoreSegment="" MethodInvocation info getDocStoreSegment msg StatementExpression Assignment MemberReference segInfoStat docStoreSegment MethodInvocation info getDocStoreSegment = StatementExpression MethodInvocation BinaryOperation + Literal ""    docStoreIsCompoundFile="" MethodInvocation info getDocStoreIsCompoundFile msg StatementExpression Assignment MemberReference segInfoStat docStoreCompoundFile MethodInvocation info getDocStoreIsCompoundFile = End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator delFileName MethodInvocation info getDelFileName IfStatement BinaryOperation == MemberReference delFileName Literal null BlockStatement StatementExpression MethodInvocation Literal ""    no deletions"" msg StatementExpression Assignment MemberReference segInfoStat hasDeletions Literal false = BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""    has deletions [delFileName="" MemberReference delFileName Literal ""]"" msg StatementExpression Assignment MemberReference segInfoStat hasDeletions Literal true = StatementExpression Assignment MemberReference segInfoStat deletionsFileName MemberReference delFileName = End IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation infoStream Literal ""    test: open reader........."" print End StatementExpression Assignment MemberReference reader MethodInvocation SegmentReader Literal true MemberReference info MemberReference IndexReader DEFAULT_TERMS_INDEX_DIVISOR get = StatementExpression Assignment MemberReference segInfoStat openReaderPassed Literal true = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numDocs MethodInvocation reader numDocs StatementExpression Assignment MemberReference toLoseDocCount MemberReference numDocs = IfStatement MethodInvocation reader hasDeletions BlockStatement IfStatement BinaryOperation != MethodInvocation reader.deletedDocs count MethodInvocation info getDelCount BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""delete count mismatch: info="" MethodInvocation info getDelCount Literal "" vs deletedDocs.count()="" MethodInvocation reader.deletedDocs count End IfStatement BinaryOperation > MethodInvocation reader.deletedDocs count MethodInvocation reader maxDoc BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""too many deleted docs: maxDoc()="" MethodInvocation reader maxDoc Literal "" vs deletedDocs.count()="" MethodInvocation reader.deletedDocs count End IfStatement BinaryOperation != BinaryOperation - MemberReference info docCount MemberReference numDocs MethodInvocation info getDelCount BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""delete count mismatch: info="" MethodInvocation info getDelCount Literal "" vs reader="" BinaryOperation - MemberReference info docCount MemberReference numDocs End StatementExpression Assignment MemberReference segInfoStat numDeleted BinaryOperation - MemberReference info docCount MemberReference numDocs = StatementExpression MethodInvocation BinaryOperation + Literal ""OK ["" Cast ReferenceType segInfoStat ReferenceType numDeleted Literal + "" deleted docs]"" msg BlockStatement IfStatement BinaryOperation != MethodInvocation info getDelCount Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""delete count mismatch: info="" MethodInvocation info getDelCount Literal "" vs reader="" BinaryOperation - MemberReference info docCount MemberReference numDocs End StatementExpression MethodInvocation Literal ""OK"" msg End IfStatement BinaryOperation != MethodInvocation reader maxDoc MemberReference info docCount ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""SegmentReader.maxDoc() "" MethodInvocation reader maxDoc Literal "" != SegmentInfos.docCount "" MemberReference info docCount End IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation infoStream Literal ""    test: fields.............."" print End LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType String VariableDeclarator fieldNames MethodInvocation reader MemberReference IndexReader.FieldOption ALL getFieldNames StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""OK ["" MethodInvocation fieldNames size Literal "" fields]"" msg StatementExpression Assignment MemberReference segInfoStat numFields MethodInvocation fieldNames size = StatementExpression Assignment MemberReference segInfoStat fieldNormStatus MethodInvocation MemberReference fieldNames MemberReference reader testFieldNorms = StatementExpression Assignment MemberReference segInfoStat termIndexStatus MethodInvocation MemberReference info MemberReference reader testTermIndex = StatementExpression Assignment MemberReference segInfoStat storedFieldStatus MethodInvocation MemberReference info MemberReference reader MemberReference nf testStoredFields = StatementExpression Assignment MemberReference segInfoStat termVectorStatus MethodInvocation MemberReference info MemberReference reader MemberReference nf testTermVectors = IfStatement BinaryOperation != MemberReference segInfoStat.fieldNormStatus error Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Field Norm test failed"" IfStatement BinaryOperation != MemberReference segInfoStat.termIndexStatus error Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Term Index test failed"" IfStatement BinaryOperation != MemberReference segInfoStat.storedFieldStatus error Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Stored Field test failed"" IfStatement BinaryOperation != MemberReference segInfoStat.termVectorStatus error Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Term Vector test failed"" End End End End StatementExpression MethodInvocation Literal """" msg CatchClause CatchClauseParameter Throwable t StatementExpression MethodInvocation Literal ""FAILED"" msg LocalVariableDeclaration ReferenceType String VariableDeclarator comment StatementExpression Assignment MemberReference comment Literal ""fixIndex() would remove reference to this segment"" = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""    WARNING: "" MemberReference comment Literal ""; full exception:"" msg IfStatement BinaryOperation != MemberReference infoStream Literal null StatementExpression MethodInvocation t MemberReference infoStream printStackTrace End StatementExpression MethodInvocation Literal """" msg StatementExpression Assignment MemberReference result totLoseDocCount MemberReference toLoseDocCount += StatementExpression MemberReference ++ result numBadSegments ContinueStatement IfStatement BinaryOperation != MemberReference reader Literal null StatementExpression MethodInvocation reader close End StatementExpression MethodInvocation result.newSegments Cast ReferenceType SegmentInfo MethodInvocation info clone add End IfStatement BinaryOperation == Literal 0 MemberReference result numBadSegments BlockStatement StatementExpression Assignment MemberReference result clean Literal true = StatementExpression MethodInvocation Literal ""No problems were detected with this index.\n"" msg StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""WARNING: "" MemberReference result numBadSegments Literal "" broken segments (containing "" MemberReference result totLoseDocCount Literal "" documents) detected"" msg End ReturnStatement MemberReference result MethodDeclaration /**
   * Test field norms.
   */ Modifier private ReferenceType Status ReferenceType FieldNormStatus testFieldNorms FormalParameter ReferenceType Collection TypeArgument ReferenceType String fieldNames FormalParameter ReferenceType SegmentReader reader LocalVariableDeclaration Modifier final ReferenceType Status ReferenceType FieldNormStatus VariableDeclarator status ClassCreator ReferenceType Status ReferenceType FieldNormStatus TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation infoStream Literal ""    test: field norms........."" print End LocalVariableDeclaration Modifier final BasicType byte VariableDeclarator b ArrayCreator BasicType byte MethodInvocation reader maxDoc ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator fieldName MemberReference fieldNames BlockStatement StatementExpression MethodInvocation reader MemberReference fieldName MemberReference b Literal 0 norms StatementExpression MemberReference ++ status totFields End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""OK ["" MemberReference status totFields Literal "" fields]"" msg CatchClause CatchClauseParameter Throwable e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""ERROR ["" MethodInvocation String MethodInvocation e getMessage valueOf Literal ""]"" msg StatementExpression Assignment MemberReference status error MemberReference e = IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation e MemberReference infoStream printStackTrace End ReturnStatement MemberReference status MethodDeclaration /**
   * Test the term index.
   */ Modifier private ReferenceType Status ReferenceType TermIndexStatus testTermIndex FormalParameter ReferenceType SegmentInfo info FormalParameter ReferenceType SegmentReader reader LocalVariableDeclaration Modifier final ReferenceType Status ReferenceType TermIndexStatus VariableDeclarator status ClassCreator ReferenceType Status ReferenceType TermIndexStatus TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation infoStream Literal ""    test: terms, freq, prox..."" print End LocalVariableDeclaration Modifier final ReferenceType TermEnum VariableDeclarator termEnum MethodInvocation reader terms LocalVariableDeclaration Modifier final ReferenceType TermPositions VariableDeclarator termPositions MethodInvocation reader termPositions LocalVariableDeclaration Modifier final ReferenceType MySegmentTermDocs VariableDeclarator myTermDocs ClassCreator ReferenceType MySegmentTermDocs MemberReference reader LocalVariableDeclaration Modifier final BasicType int VariableDeclarator maxDoc MethodInvocation reader maxDoc WhileStatement MethodInvocation termEnum next BlockStatement StatementExpression MemberReference ++ status termCount LocalVariableDeclaration Modifier final ReferenceType Term VariableDeclarator term MethodInvocation termEnum term LocalVariableDeclaration Modifier final BasicType int VariableDeclarator docFreq MethodInvocation termEnum docFreq StatementExpression MethodInvocation termPositions MemberReference term seek LocalVariableDeclaration BasicType int VariableDeclarator lastDoc Literal - 1 LocalVariableDeclaration BasicType int VariableDeclarator freq0 Literal 0 StatementExpression Assignment MemberReference status totFreq MemberReference docFreq += WhileStatement MethodInvocation termPositions next BlockStatement StatementExpression MemberReference ++ freq0 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator doc MethodInvocation termPositions doc LocalVariableDeclaration Modifier final BasicType int VariableDeclarator freq MethodInvocation termPositions freq IfStatement BinaryOperation <= MemberReference doc MemberReference lastDoc ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""term "" MemberReference term Literal "": doc "" MemberReference doc Literal "" <= lastDoc "" MemberReference lastDoc End IfStatement BinaryOperation >= MemberReference doc MemberReference maxDoc ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""term "" MemberReference term Literal "": doc "" MemberReference doc Literal "" >= maxDoc "" MemberReference maxDoc End StatementExpression Assignment MemberReference lastDoc MemberReference doc = IfStatement BinaryOperation <= MemberReference freq Literal 0 ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""term "" MemberReference term Literal "": doc "" MemberReference doc Literal "": freq "" MemberReference freq Literal "" is out of bounds"" End LocalVariableDeclaration BasicType int VariableDeclarator lastPos Literal - 1 StatementExpression Assignment MemberReference status totPos MemberReference freq += ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference freq MemberReference ++ j BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator pos MethodInvocation termPositions nextPosition IfStatement BinaryOperation < MemberReference pos Literal - 1 ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""term "" MemberReference term Literal "": doc "" MemberReference doc Literal "": pos "" MemberReference pos Literal "" is out of bounds"" End IfStatement BinaryOperation < MemberReference pos MemberReference lastPos ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""term "" MemberReference term Literal "": doc "" MemberReference doc Literal "": pos "" MemberReference pos Literal "" < lastPos "" MemberReference lastPos End StatementExpression Assignment MemberReference lastPos MemberReference pos = End End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator delCount IfStatement MethodInvocation reader hasDeletions BlockStatement StatementExpression MethodInvocation myTermDocs MemberReference term seek WhileStatement MethodInvocation myTermDocs next BlockStatement End StatementExpression Assignment MemberReference delCount MemberReference myTermDocs delCount = BlockStatement StatementExpression Assignment MemberReference delCount Literal 0 = End IfStatement BinaryOperation != BinaryOperation + MemberReference freq0 MemberReference delCount MemberReference docFreq BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""term "" MemberReference term Literal "" docFreq="" MemberReference docFreq Literal "" != num docs seen "" MemberReference freq0 Literal "" + num docs deleted "" MemberReference delCount End End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""OK ["" MemberReference status termCount Literal "" terms; "" MemberReference status totFreq Literal "" terms/docs pairs; "" MemberReference status totPos Literal "" tokens]"" msg CatchClause CatchClauseParameter Throwable e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""ERROR ["" MethodInvocation String MethodInvocation e getMessage valueOf Literal ""]"" msg StatementExpression Assignment MemberReference status error MemberReference e = IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation e MemberReference infoStream printStackTrace End ReturnStatement MemberReference status MethodDeclaration /**
   * Test stored fields for a segment.
   */ Modifier private ReferenceType Status ReferenceType StoredFieldStatus testStoredFields FormalParameter ReferenceType SegmentInfo info FormalParameter ReferenceType SegmentReader reader FormalParameter ReferenceType NumberFormat format LocalVariableDeclaration Modifier final ReferenceType Status ReferenceType StoredFieldStatus VariableDeclarator status ClassCreator ReferenceType Status ReferenceType StoredFieldStatus TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation infoStream Literal ""    test: stored fields......."" print End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference info docCount MemberReference ++ j BlockStatement IfStatement MethodInvocation ! reader MemberReference j isDeleted BlockStatement StatementExpression MemberReference ++ status docCount LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation reader MemberReference j document StatementExpression Assignment MemberReference status totFields MethodInvocation doc MethodInvocation size getFields += End End IfStatement BinaryOperation != MemberReference status docCount MethodInvocation reader numDocs BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""docCount="" MemberReference status docCount Literal "" but saw "" MemberReference status docCount Literal "" undeleted docs"" End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""OK ["" MemberReference status totFields Literal "" total field count; avg "" MethodInvocation format BinaryOperation / Cast BasicType float MemberReference status totFields MemberReference status docCount format Literal "" fields per doc]"" msg CatchClause CatchClauseParameter Throwable e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""ERROR ["" MethodInvocation String MethodInvocation e getMessage valueOf Literal ""]"" msg StatementExpression Assignment MemberReference status error MemberReference e = IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation e MemberReference infoStream printStackTrace End ReturnStatement MemberReference status MethodDeclaration /**
   * Test term vectors for a segment.
   */ Modifier private ReferenceType Status ReferenceType TermVectorStatus testTermVectors FormalParameter ReferenceType SegmentInfo info FormalParameter ReferenceType SegmentReader reader FormalParameter ReferenceType NumberFormat format LocalVariableDeclaration Modifier final ReferenceType Status ReferenceType TermVectorStatus VariableDeclarator status ClassCreator ReferenceType Status ReferenceType TermVectorStatus TryStatement IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation infoStream Literal ""    test: term vectors........"" print End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference info docCount MemberReference ++ j BlockStatement IfStatement MethodInvocation ! reader MemberReference j isDeleted BlockStatement StatementExpression MemberReference ++ status docCount LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator tfv MethodInvocation reader MemberReference j getTermFreqVectors IfStatement BinaryOperation != MemberReference tfv Literal null BlockStatement StatementExpression Assignment MemberReference status totVectors MemberReference tfv length += End End End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""OK ["" MemberReference status totVectors Literal "" total vector count; avg "" MethodInvocation format BinaryOperation / Cast BasicType float MemberReference status totVectors MemberReference status docCount format Literal "" term/freq vector fields per doc]"" msg CatchClause CatchClauseParameter Throwable e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""ERROR ["" MethodInvocation String MethodInvocation e getMessage valueOf Literal ""]"" msg StatementExpression Assignment MemberReference status error MemberReference e = IfStatement BinaryOperation != MemberReference infoStream Literal null BlockStatement StatementExpression MethodInvocation e MemberReference infoStream printStackTrace End ReturnStatement MemberReference status MethodDeclaration /** Repairs the index using previously returned result
   *  from {@link #checkIndex}.  Note that this does not
   *  remove any of the unreferenced files after it's done;
   *  you must separately open an {@link IndexWriter}, which
   *  deletes unreferenced files when it's created.
   *
   * <p><b>WARNING</b>: this writes a
   *  new segments file into the index, effectively removing
   *  all documents in broken segments from the index.
   *  BE CAREFUL.
   *
   * <p><b>WARNING</b>: Make sure you only call this when the
   *  index is not opened  by any writer. */ Modifier public fixIndex FormalParameter ReferenceType Status result IOException IfStatement MemberReference result partial ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""can only fix an index that was fully checked (this status checked a subset of segments)"" End StatementExpression MethodInvocation result.newSegments MemberReference result dir commit FieldDeclaration Modifier private static BasicType boolean VariableDeclarator assertsOn MethodDeclaration Modifier private static BasicType boolean testAsserts StatementExpression Assignment MemberReference assertsOn Literal true = ReturnStatement Literal true MethodDeclaration Modifier private static BasicType boolean assertsOn AssertStatement MethodInvocation testAsserts ReturnStatement MemberReference assertsOn MethodDeclaration /** Command-line interface to check and fix an index.

    <p>
    Run it like this:
    <pre>
    java -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]
    </pre>
    <ul>
    <li><code>-fix</code>: actually write a new segments_N file, removing any problematic segments

    <li><code>-segment X</code>: only check the specified
    segment(s).  This can be specified multiple times,
    to check more than one segment, eg <code>-segment _2
    -segment _a</code>.  You can't use this with the -fix
    option.
    </ul>

    <p><b>WARNING</b>: <code>-fix</code> should only be used on an emergency basis as it will cause
                       documents (perhaps many) to be permanently removed from the index.  Always make
                       a backup copy of your index before running this!  Do not run this tool on an index
                       that is actively being written to.  You have been warned!

    <p>                Run without -fix, this tool will open the index, report version information
                       and report any exceptions it hits and what action it would take if -fix were
                       specified.  With -fix, this tool will remove any segments that have issues and
                       write a new segments_N file.  This means all documents contained in the affected
                       segments will be removed.

    <p>
                       This tool exits with exit code 1 if the index cannot be opened or has any
                       corruption, else 0.
   */ Modifier public static main FormalParameter ReferenceType String args IOException InterruptedException LocalVariableDeclaration BasicType boolean VariableDeclarator doFix Literal false LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator onlySegments ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType String VariableDeclarator indexPath Literal null LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 WhileStatement BinaryOperation < MemberReference i MemberReference args length BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""-fix"" equals args BlockStatement StatementExpression Assignment MemberReference doFix Literal true = StatementExpression MemberReference ++ i IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""-segment"" equals args BlockStatement IfStatement BinaryOperation == MemberReference i BinaryOperation - MemberReference args length Literal 1 BlockStatement StatementExpression MethodInvocation System.out Literal ""ERROR: missing name for -segment option"" println StatementExpression MethodInvocation System Literal 1 exit End StatementExpression MethodInvocation onlySegments MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 args add StatementExpression Assignment MemberReference i Literal 2 += BlockStatement IfStatement BinaryOperation != MemberReference indexPath Literal null BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""ERROR: unexpected extra argument '"" MemberReference ArraySelector MemberReference i args Literal ""'"" println StatementExpression MethodInvocation System Literal 1 exit End StatementExpression Assignment MemberReference indexPath MemberReference ArraySelector MemberReference i args = StatementExpression MemberReference ++ i End End End IfStatement BinaryOperation == MemberReference indexPath Literal null BlockStatement StatementExpression MethodInvocation System.out Literal ""\nERROR: index path not specified"" println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]\n"" Literal ""\n"" Literal ""  -fix: actually write a new segments_N file, removing any problematic segments\n"" Literal ""  -segment X: only check the specified segments.  This can be specified multiple\n"" Literal ""              times, to check more than one segment, eg '-segment _2 -segment _a'.\n"" Literal ""              You can't use this with the -fix option\n"" Literal ""\n"" Literal ""**WARNING**: -fix should only be used on an emergency basis as it will cause\n"" Literal ""documents (perhaps many) to be permanently removed from the index.  Always make\n"" Literal ""a backup copy of your index before running this!  Do not run this tool on an index\n"" Literal ""that is actively being written to.  You have been warned!\n"" Literal ""\n"" Literal ""Run without -fix, this tool will open the index, report version information\n"" Literal ""and report any exceptions it hits and what action it would take if -fix were\n"" Literal ""specified.  With -fix, this tool will remove any segments that have issues and\n"" Literal ""write a new segments_N file.  This means all documents contained in the affected\n"" Literal ""segments will be removed.\n"" Literal ""\n"" Literal ""This tool exits with exit code 1 if the index cannot be opened or has any\n"" Literal ""corruption, else 0.\n"" println StatementExpression MethodInvocation System Literal 1 exit End IfStatement MethodInvocation ! assertsOn StatementExpression MethodInvocation System.out Literal ""\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled"" println End IfStatement BinaryOperation == MethodInvocation onlySegments size Literal 0 StatementExpression Assignment MemberReference onlySegments Literal null = IfStatement MemberReference doFix BlockStatement StatementExpression MethodInvocation System.out Literal ""ERROR: cannot specify both -fix and -segment"" println StatementExpression MethodInvocation System Literal 1 exit End End StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""\nOpening index @ "" MemberReference indexPath Literal ""\n"" println LocalVariableDeclaration ReferenceType Directory VariableDeclarator dir Literal null TryStatement StatementExpression Assignment MemberReference dir MethodInvocation FSDirectory ClassCreator ReferenceType File MemberReference indexPath open = CatchClause CatchClauseParameter Throwable t StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""ERROR: could not open directory \"""" MemberReference indexPath Literal ""\""; exiting"" println StatementExpression MethodInvocation t MemberReference System out printStackTrace StatementExpression MethodInvocation System Literal 1 exit LocalVariableDeclaration ReferenceType CheckIndex VariableDeclarator checker ClassCreator ReferenceType CheckIndex MemberReference dir StatementExpression MethodInvocation checker MemberReference System out setInfoStream LocalVariableDeclaration ReferenceType Status VariableDeclarator result MethodInvocation checker MemberReference onlySegments checkIndex IfStatement MemberReference result missingSegments BlockStatement StatementExpression MethodInvocation System Literal 1 exit End IfStatement MemberReference ! result clean BlockStatement IfStatement MemberReference ! doFix BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""WARNING: would write new segments file, and "" MemberReference result totLoseDocCount Literal "" documents would be lost, if -fix were specified\n"" println BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""WARNING: "" MemberReference result totLoseDocCount Literal "" documents will be lost\n"" println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""NOTE: will write new segments file in 5 seconds; this will remove "" MemberReference result totLoseDocCount Literal "" docs from the index. THIS IS YOUR LAST CHANCE TO CTRL+C!"" println ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator s Literal 0 BinaryOperation < MemberReference s Literal 5 MemberReference ++ s BlockStatement StatementExpression MethodInvocation Thread Literal 1000 sleep StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""  "" BinaryOperation - Literal 5 MemberReference s Literal ""..."" println End StatementExpression MethodInvocation System.out Literal ""Writing..."" println StatementExpression MethodInvocation checker MemberReference result fixIndex StatementExpression MethodInvocation System.out Literal ""OK"" println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""Wrote new segments file \"""" MethodInvocation result.newSegments getCurrentSegmentFileName Literal ""\"""" println End End StatementExpression MethodInvocation System.out Literal """" println LocalVariableDeclaration Modifier final BasicType int VariableDeclarator exitCode IfStatement BinaryOperation && BinaryOperation != MemberReference result Literal null BinaryOperation == MemberReference result clean Literal true StatementExpression Assignment MemberReference exitCode Literal 0 = StatementExpression Assignment MemberReference exitCode Literal 1 = End StatementExpression MethodInvocation System MemberReference exitCode exit",1
80,80,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.net.ServerSocket Import java.net.Socket Import java.io.OutputStream Import java.io.InputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * Simple standalone server that must be running when you
 * use {@link VerifyingLockFactory}.  This server simply
 * verifies at most one process holds the lock at a time.
 * Run without any args to see usage.
 *
 * @see VerifyingLockFactory
 * @see LockStressTest
 */ LockVerifyServer MethodDeclaration Modifier private static ReferenceType String getTime FormalParameter BasicType long startTime ReturnStatement BinaryOperation + BinaryOperation + Literal ""["" BinaryOperation / BinaryOperation - MethodInvocation System currentTimeMillis MemberReference startTime Literal 1000 Literal ""s] "" MethodDeclaration Modifier public static main FormalParameter ReferenceType String args IOException IfStatement BinaryOperation != MemberReference args length Literal 1 BlockStatement StatementExpression MethodInvocation System.out Literal ""\nUsage: java org.apache.lucene.store.LockVerifyServer port\n"" println StatementExpression MethodInvocation System Literal 1 exit End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator port MethodInvocation Integer MemberReference ArraySelector Literal 0 args parseInt LocalVariableDeclaration ReferenceType ServerSocket VariableDeclarator s ClassCreator ReferenceType ServerSocket MemberReference port StatementExpression MethodInvocation s Literal true setReuseAddress StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""\nReady on port "" MemberReference port Literal ""..."" println LocalVariableDeclaration BasicType int VariableDeclarator lockedID Literal 0 LocalVariableDeclaration BasicType long VariableDeclarator startTime MethodInvocation System currentTimeMillis WhileStatement Literal true BlockStatement LocalVariableDeclaration ReferenceType Socket VariableDeclarator cs MethodInvocation s accept LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out MethodInvocation cs getOutputStream LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation cs getInputStream LocalVariableDeclaration BasicType int VariableDeclarator id MethodInvocation in read LocalVariableDeclaration BasicType int VariableDeclarator command MethodInvocation in read LocalVariableDeclaration BasicType boolean VariableDeclarator err Literal false IfStatement BinaryOperation == MemberReference command Literal 1 BlockStatement IfStatement BinaryOperation != MemberReference lockedID Literal 0 BlockStatement StatementExpression Assignment MemberReference err Literal true = StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation MemberReference startTime getTime Literal "" ERROR: id "" MemberReference id Literal "" got lock, but "" MemberReference lockedID Literal "" already holds the lock"" println End StatementExpression Assignment MemberReference lockedID MemberReference id = IfStatement BinaryOperation == MemberReference command Literal 0 BlockStatement IfStatement BinaryOperation != MemberReference lockedID MemberReference id BlockStatement StatementExpression Assignment MemberReference err Literal true = StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation MemberReference startTime getTime Literal "" ERROR: id "" MemberReference id Literal "" released the lock, but "" MemberReference lockedID Literal "" is the one holding the lock"" println End StatementExpression Assignment MemberReference lockedID Literal 0 = ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + Literal ""unrecognized command "" MemberReference command End End StatementExpression MethodInvocation System.out Literal ""."" print IfStatement MemberReference err StatementExpression MethodInvocation out Literal 1 write StatementExpression MethodInvocation out Literal 0 write End StatementExpression MethodInvocation out close StatementExpression MethodInvocation in close StatementExpression MethodInvocation cs close End",1
351,351,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier abstract /** Abstract API that consumes terms, doc, freq, prox and
 *  payloads postings.  Concrete implementations of this
 *  actually do ""something"" with the postings (write it into
 *  the index in a specific format).
 *
 * NOTE: this API is experimental and will likely change
 */ FormatPostingsFieldsConsumer MethodDeclaration /** Add a new field */ Modifier abstract ReferenceType FormatPostingsTermsConsumer addField FormalParameter ReferenceType FieldInfo field IOException MethodDeclaration /** Called when we are done adding everything. */ Modifier abstract finish IOException",0
925,925,,0
520,520,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.compound.hyphenation ClassDeclaration Modifier public /**
 * This class has been taken from the Apache FOP project (http://xmlgraphics.apache.org/fop/). They have been slightly modified. 
 */ HyphenationException ConstructorDeclaration Modifier public /**
   * @see java.lang.Throwable#Throwable(String)
   */ HyphenationException FormalParameter ReferenceType String msg StatementExpression SuperConstructorInvocation MemberReference msg ReferenceType Exception",1
32,32,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ PortugueseStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal """" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ã"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""õ"" Literal 0 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal """" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""a~"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""o~"" Literal 0 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""ic"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""ad"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""os"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""iv"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_3 ArrayInitializer ClassCreator ReferenceType Among Literal ""ante"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""avel"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ível"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_4 ArrayInitializer ClassCreator ReferenceType Among Literal ""ic"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""abil"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iv"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_5 ArrayInitializer ClassCreator ReferenceType Among Literal ""ica"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ância"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ência"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ira"" Literal - 1 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""adora"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""osa"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ista"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iva"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""eza"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""logía"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""idade"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""ante"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""mente"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""amente"" Literal 12 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""ável"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ível"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ución"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ico"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ismo"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""oso"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""amento"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""imento"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ivo"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""aça~o"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ador"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""icas"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ências"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""iras"" Literal - 1 Literal 9 Literal """" This ClassCreator ReferenceType Among Literal ""adoras"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""osas"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""istas"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ivas"" Literal - 1 Literal 8 Literal """" This ClassCreator ReferenceType Among Literal ""ezas"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""logías"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""idades"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""uciones"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""adores"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""antes"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aço~es"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""icos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ismos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""osos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""amentos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""imentos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ivos"" Literal - 1 Literal 8 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_6 ArrayInitializer ClassCreator ReferenceType Among Literal ""ada"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ida"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ia"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aria"" Literal 2 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eria"" Literal 2 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iria"" Literal 2 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ara"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""era"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ira"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ava"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""asse"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""esse"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""isse"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aste"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""este"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iste"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ei"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""arei"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erei"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irei"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""am"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iam"" Literal 20 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ariam"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eriam"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iriam"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aram"" Literal 20 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eram"" Literal 20 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iram"" Literal 20 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""avam"" Literal 20 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""em"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""arem"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erem"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irem"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""assem"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""essem"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""issem"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ado"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ido"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ando"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""endo"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""indo"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ara~o"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""era~o"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ira~o"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ar"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""er"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ir"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""as"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""adas"" Literal 47 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""idas"" Literal 47 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ias"" Literal 47 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""arias"" Literal 50 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erias"" Literal 50 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irias"" Literal 50 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aras"" Literal 47 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eras"" Literal 47 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iras"" Literal 47 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""avas"" Literal 47 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""es"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ardes"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erdes"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irdes"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ares"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eres"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ires"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""asses"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""esses"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""isses"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""astes"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""estes"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""istes"" Literal 58 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""is"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ais"" Literal 71 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eis"" Literal 71 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""areis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ereis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ireis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""áreis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""éreis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""íreis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ásseis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ésseis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ísseis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""áveis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""íeis"" Literal 73 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aríeis"" Literal 84 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eríeis"" Literal 84 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iríeis"" Literal 84 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ados"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""idos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""amos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""áramos"" Literal 90 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""éramos"" Literal 90 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""íramos"" Literal 90 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ávamos"" Literal 90 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""íamos"" Literal 90 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aríamos"" Literal 95 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eríamos"" Literal 95 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iríamos"" Literal 95 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""emos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aremos"" Literal 99 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eremos"" Literal 99 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iremos"" Literal 99 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ássemos"" Literal 99 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""êssemos"" Literal 99 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""íssemos"" Literal 99 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""imos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""armos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ermos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irmos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ámos"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""arás"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erás"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irás"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eu"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iu"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ou"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ará"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erá"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irá"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_7 ArrayInitializer ClassCreator ReferenceType Among Literal ""a"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""i"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""o"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""os"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""á"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""í"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ó"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_8 ArrayInitializer ClassCreator ReferenceType Among Literal ""e"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ç"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""é"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ê"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 3 Literal 19 Literal 12 Literal 2 FieldDeclaration Modifier private BasicType int VariableDeclarator I_p2 FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 FieldDeclaration Modifier private BasicType int VariableDeclarator I_pV MethodDeclaration Modifier private copy_from FormalParameter ReferenceType PortugueseStemmer other StatementExpression Assignment MemberReference I_p2 MemberReference other I_p2 = StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression Assignment MemberReference I_pV MemberReference other I_pV = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_prelude LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 WhileStatement replab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 3 find_among = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference ket MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab1 SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""a~"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""o~"" slice_from BreakStatement SwitchStatementCase Literal 3 IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor BreakStatement End ContinueStatement replab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = BreakStatement replab0 End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_8 StatementExpression Assignment MemberReference I_pV MemberReference limit = StatementExpression Assignment MemberReference I_p1 MemberReference limit = StatementExpression Assignment MemberReference I_p2 MemberReference limit = StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 in_grouping BlockStatement BreakStatement lab2 End DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 out_grouping BlockStatement BreakStatement lab4 End WhileStatement golab5 Literal true BlockStatement DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 in_grouping BlockStatement BreakStatement lab6 End BreakStatement golab5 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab4 End StatementExpression MemberReference ++ cursor End BreakStatement lab3 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 in_grouping BlockStatement BreakStatement lab2 End WhileStatement golab7 Literal true BlockStatement DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 out_grouping BlockStatement BreakStatement lab8 End BreakStatement golab7 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab2 End StatementExpression MemberReference ++ cursor End End BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 out_grouping BlockStatement BreakStatement lab0 End DoStatement lab9 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 MemberReference cursor = DoStatement lab10 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 out_grouping BlockStatement BreakStatement lab10 End WhileStatement golab11 Literal true BlockStatement DoStatement lab12 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 in_grouping BlockStatement BreakStatement lab12 End BreakStatement golab11 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab10 End StatementExpression MemberReference ++ cursor End BreakStatement lab9 End StatementExpression Assignment MemberReference cursor MemberReference v_6 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 in_grouping BlockStatement BreakStatement lab0 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab0 End StatementExpression MemberReference ++ cursor End End StatementExpression Assignment MemberReference I_pV MemberReference cursor = End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference v_8 MemberReference cursor = DoStatement lab13 Literal false BlockStatement WhileStatement golab14 Literal true BlockStatement DoStatement lab15 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 in_grouping BlockStatement BreakStatement lab15 End BreakStatement golab14 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab13 End StatementExpression MemberReference ++ cursor End WhileStatement golab16 Literal true BlockStatement DoStatement lab17 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 out_grouping BlockStatement BreakStatement lab17 End BreakStatement golab16 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab13 End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = WhileStatement golab18 Literal true BlockStatement DoStatement lab19 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 in_grouping BlockStatement BreakStatement lab19 End BreakStatement golab18 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab13 End StatementExpression MemberReference ++ cursor End WhileStatement golab20 Literal true BlockStatement DoStatement lab21 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 250 out_grouping BlockStatement BreakStatement lab21 End BreakStatement golab20 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab13 End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p2 MemberReference cursor = End StatementExpression Assignment MemberReference cursor MemberReference v_8 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_postlude LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 WhileStatement replab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_1 Literal 3 find_among = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference ket MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab1 SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""ã"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""õ"" slice_from BreakStatement SwitchStatementCase Literal 3 IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor BreakStatement End ContinueStatement replab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = BreakStatement replab0 End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_RV IfStatement BinaryOperation <= MemberReference I_pV MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R1 IfStatement BinaryOperation <= MemberReference I_p1 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R2 IfStatement BinaryOperation <= MemberReference I_p2 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_standard_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_5 Literal 45 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""log"" slice_from BreakStatement SwitchStatementCase Literal 3 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""u"" slice_from BreakStatement SwitchStatementCase Literal 4 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""ente"" slice_from BreakStatement SwitchStatementCase Literal 5 IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_2 Literal 4 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement lab0 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R2 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement lab0 End StatementExpression MethodInvocation slice_del SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement lab0 SwitchStatementCase Literal 1 StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 2 Literal ""at"" eq_s_b BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement lab0 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R2 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement lab0 End StatementExpression MethodInvocation slice_del BreakStatement End End BreakStatement SwitchStatementCase Literal 6 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_3 Literal 3 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = BreakStatement lab1 End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = BreakStatement lab1 SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_R2 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = BreakStatement lab1 End StatementExpression MethodInvocation slice_del BreakStatement End End BreakStatement SwitchStatementCase Literal 7 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_4 Literal 3 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab2 End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab2 SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_R2 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = BreakStatement lab2 End StatementExpression MethodInvocation slice_del BreakStatement End End BreakStatement SwitchStatementCase Literal 8 IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 2 Literal ""at"" eq_s_b BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement lab3 End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R2 BlockStatement StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = BreakStatement lab3 End StatementExpression MethodInvocation slice_del End BreakStatement SwitchStatementCase Literal 9 IfStatement MethodInvocation ! r_RV BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! Literal 1 Literal ""e"" eq_s_b BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation Literal ""ir"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_verb_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_pV BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_pV = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_6 Literal 120 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement End StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_residual_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_7 Literal 7 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_RV BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_residual_form LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_8 Literal 4 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 IfStatement MethodInvocation ! r_RV BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del StatementExpression Assignment MemberReference ket MemberReference cursor = DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""u"" eq_s_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""g"" eq_s_b BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement MethodInvocation ! Literal 1 Literal ""i"" eq_s_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""c"" eq_s_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = End IfStatement MethodInvocation ! r_RV BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""c"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 LocalVariableDeclaration BasicType int VariableDeclarator v_9 LocalVariableDeclaration BasicType int VariableDeclarator v_10 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_prelude BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor MemberReference v_2 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab5 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! r_standard_suffix BlockStatement BreakStatement lab6 End BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = IfStatement MethodInvocation ! r_verb_suffix BlockStatement BreakStatement lab4 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab7 Literal false BlockStatement StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""i"" eq_s_b BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference v_8 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement MethodInvocation ! Literal 1 Literal ""c"" eq_s_b BlockStatement BreakStatement lab7 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_8 = IfStatement MethodInvocation ! r_RV BlockStatement BreakStatement lab7 End StatementExpression MethodInvocation slice_del End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = BreakStatement lab3 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = IfStatement MethodInvocation ! r_residual_suffix BlockStatement BreakStatement lab2 End End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_9 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! r_residual_form BlockStatement BreakStatement lab8 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_9 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = StatementExpression Assignment MemberReference v_10 MemberReference cursor = DoStatement lab9 Literal false BlockStatement IfStatement MethodInvocation ! r_postlude BlockStatement BreakStatement lab9 End End StatementExpression Assignment MemberReference cursor MemberReference v_10 = ReturnStatement Literal true ReferenceType SnowballProgram",1
39,39,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.utils Import java.io.File Import java.io.IOException ClassDeclaration Modifier public /**
 * File utilities.
 */ FileUtils MethodDeclaration /**
   * Delete files and directories, even if non-empty.
   *
   * @param dir file or directory
   * @return true on success, false if no or part of files have been deleted
   * @throws java.io.IOException
   */ Modifier public static BasicType boolean fullyDelete FormalParameter ReferenceType File dir IOException IfStatement BinaryOperation || BinaryOperation == MemberReference dir Literal null MethodInvocation ! dir exists ReturnStatement Literal false End LocalVariableDeclaration ReferenceType File VariableDeclarator contents MethodInvocation dir listFiles IfStatement BinaryOperation != MemberReference contents Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference contents length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation isFile contents BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation delete contents BlockStatement ReturnStatement Literal false End BlockStatement IfStatement MethodInvocation ! MemberReference ArraySelector MemberReference i contents fullyDelete BlockStatement ReturnStatement Literal false End End End End ReturnStatement MethodInvocation dir delete",0
307,307,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.payloads Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.PayloadAttribute Import org.apache.lucene.analysis.tokenattributes.TypeAttribute Import org.apache.lucene.index.Payload Import java.io.IOException ClassDeclaration Modifier public /**
 * Assigns a payload to a token based on the {@link org.apache.lucene.analysis.Token#type()}
 *
 **/ NumericPayloadTokenFilter FieldDeclaration Modifier private ReferenceType String VariableDeclarator typeMatch FieldDeclaration Modifier private ReferenceType Payload VariableDeclarator thePayload FieldDeclaration Modifier private ReferenceType PayloadAttribute VariableDeclarator payloadAtt FieldDeclaration Modifier private ReferenceType TypeAttribute VariableDeclarator typeAtt ConstructorDeclaration Modifier public NumericPayloadTokenFilter FormalParameter ReferenceType TokenStream input FormalParameter BasicType float payload FormalParameter ReferenceType String typeMatch StatementExpression SuperConstructorInvocation MemberReference input StatementExpression Assignment MemberReference thePayload ClassCreator ReferenceType Payload MethodInvocation PayloadHelper MemberReference payload encodeFloat = StatementExpression Assignment This MemberReference typeMatch MemberReference typeMatch = StatementExpression Assignment MemberReference payloadAtt MethodInvocation ClassReference ReferenceType PayloadAttribute addAttribute = StatementExpression Assignment MemberReference typeAtt MethodInvocation ClassReference ReferenceType TypeAttribute addAttribute = MethodDeclaration Modifier public final Annotation Override BasicType boolean incrementToken IOException IfStatement MethodInvocation input incrementToken BlockStatement IfStatement MethodInvocation typeAtt MethodInvocation MemberReference typeMatch equals type StatementExpression MethodInvocation payloadAtt MemberReference thePayload setPayload End ReturnStatement Literal true BlockStatement ReturnStatement Literal false End ReferenceType TokenFilter",0
88,88,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import org.apache.lucene.search.Query Import org.apache.lucene.xmlparser.ParserException Import org.w3c.dom.Element ClassDeclaration Modifier public abstract /**
 * 
 */ SpanBuilderBase MethodDeclaration Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Element e ParserException ReturnStatement MethodInvocation MemberReference e getSpanQuery ReferenceType SpanQueryBuilder",0
440,440,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geometry ClassDeclaration Modifier public /**
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ FixedLatLng FieldDeclaration Modifier public final static BasicType double VariableDeclarator SCALE_FACTOR Literal 1000000 FieldDeclaration Modifier public final static BasicType int VariableDeclarator SCALE_FACTOR_INT Literal 1000000 FieldDeclaration Modifier private BasicType int VariableDeclarator lat VariableDeclarator lng FieldDeclaration Modifier private BasicType boolean VariableDeclarator normalized ConstructorDeclaration Modifier public FixedLatLng FormalParameter BasicType int lat FormalParameter BasicType int lng StatementExpression MethodInvocation MemberReference lat setLat StatementExpression MethodInvocation MemberReference lng setLng ConstructorDeclaration Modifier public FixedLatLng FormalParameter ReferenceType LatLng ll StatementExpression Assignment This MemberReference lat MethodInvocation ll getFixedLat = StatementExpression Assignment This MemberReference lng MethodInvocation ll getFixedLng = MethodDeclaration Modifier protected setLat FormalParameter BasicType int lat IfStatement BinaryOperation || BinaryOperation > MemberReference lat BinaryOperation * Literal 90 MemberReference SCALE_FACTOR BinaryOperation < MemberReference lat BinaryOperation * Literal - 90 MemberReference SCALE_FACTOR BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Illegal lattitude"" End StatementExpression Assignment This MemberReference lat MemberReference lat = MethodDeclaration Modifier protected setLng FormalParameter BasicType int lng StatementExpression Assignment This MemberReference lng MemberReference lng = MethodDeclaration Modifier public static BasicType double fixedToDouble FormalParameter BasicType int fixed ReturnStatement BinaryOperation / MemberReference fixed MemberReference SCALE_FACTOR MethodDeclaration Modifier public static BasicType int doubleToFixed FormalParameter BasicType double d ReturnStatement Cast BasicType int BinaryOperation * MemberReference d MemberReference SCALE_FACTOR MethodDeclaration Modifier public Annotation Override ReferenceType LatLng copy ReturnStatement ClassCreator ReferenceType FixedLatLng This MethodDeclaration Modifier public Annotation Override BasicType int getFixedLat ReturnStatement MemberReference lat MethodDeclaration Modifier public Annotation Override BasicType int getFixedLng ReturnStatement MemberReference lng MethodDeclaration Modifier public Annotation Override BasicType double getLat ReturnStatement MethodInvocation MemberReference lat fixedToDouble MethodDeclaration Modifier public Annotation Override BasicType double getLng ReturnStatement MethodInvocation MemberReference lng fixedToDouble MethodDeclaration Modifier public Annotation Override BasicType boolean isFixedPoint ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override ReferenceType FixedLatLng toFixed ReturnStatement This MethodDeclaration Modifier public Annotation Override ReferenceType FloatLatLng toFloat ReturnStatement ClassCreator ReferenceType FloatLatLng This MethodDeclaration Modifier public Annotation Override BasicType boolean isNormalized ReturnStatement BinaryOperation || MemberReference normalized BinaryOperation && BinaryOperation >= MemberReference lng BinaryOperation * Literal - 180 MemberReference SCALE_FACTOR_INT BinaryOperation <= MemberReference lng BinaryOperation * Literal 180 MemberReference SCALE_FACTOR_INT MethodDeclaration Modifier public Annotation Override ReferenceType LatLng normalize IfStatement MethodInvocation isNormalized ReturnStatement This End LocalVariableDeclaration BasicType int VariableDeclarator delta Literal 0 IfStatement BinaryOperation < MemberReference lng Literal 0 StatementExpression Assignment MemberReference delta BinaryOperation * Literal 360 MemberReference SCALE_FACTOR_INT = End IfStatement BinaryOperation >= MemberReference lng Literal 0 StatementExpression Assignment MemberReference delta BinaryOperation * Literal - 360 MemberReference SCALE_FACTOR_INT = End LocalVariableDeclaration BasicType int VariableDeclarator newLng MemberReference lng WhileStatement BinaryOperation || BinaryOperation <= MemberReference newLng BinaryOperation * Literal - 180 MemberReference SCALE_FACTOR_INT BinaryOperation >= MemberReference newLng BinaryOperation * Literal 180 MemberReference SCALE_FACTOR_INT BlockStatement StatementExpression Assignment MemberReference newLng MemberReference delta += End LocalVariableDeclaration ReferenceType FixedLatLng VariableDeclarator ret ClassCreator ReferenceType FixedLatLng MemberReference lat MemberReference newLng StatementExpression Assignment MemberReference ret normalized Literal true = ReturnStatement MemberReference ret MethodDeclaration Modifier public Annotation Override ReferenceType LatLng calculateMidpoint FormalParameter ReferenceType LatLng other ReturnStatement ClassCreator ReferenceType FixedLatLng BinaryOperation / BinaryOperation + MemberReference lat MethodInvocation other getFixedLat Literal 2 BinaryOperation / BinaryOperation + MemberReference lng MethodInvocation other getFixedLng Literal 2 MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result BinaryOperation + MemberReference prime MemberReference lat StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result MemberReference lng = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression MemberReference normalized Literal 1231 Literal 1237 = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType FixedLatLng VariableDeclarator other Cast ReferenceType FixedLatLng MemberReference obj IfStatement BinaryOperation != MemberReference lat MemberReference other lat ReturnStatement Literal false End IfStatement BinaryOperation != MemberReference lng MemberReference other lng ReturnStatement Literal false End IfStatement BinaryOperation != MemberReference normalized MemberReference other normalized ReturnStatement Literal false End ReturnStatement Literal true ReferenceType LatLng",0
749,749,,0
43,43,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.Reader Import org.apache.lucene.util.AttributeSource ClassDeclaration Modifier public final /**
 * LowerCaseTokenizer performs the function of LetterTokenizer
 * and LowerCaseFilter together.  It divides text at non-letters and converts
 * them to lower case.  While it is functionally equivalent to the combination
 * of LetterTokenizer and LowerCaseFilter, there is a performance advantage
 * to doing the two tasks at once, hence this (redundant) implementation.
 * <P>
 * Note: this does a decent job for most European languages, but does a terrible
 * job for some Asian languages, where words are not separated by spaces.
 */ LowerCaseTokenizer ConstructorDeclaration Modifier public /** Construct a new LowerCaseTokenizer. */ LowerCaseTokenizer FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in ConstructorDeclaration Modifier public /** Construct a new LowerCaseTokenizer using a given {@link AttributeSource}. */ LowerCaseTokenizer FormalParameter ReferenceType AttributeSource source FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference source MemberReference in ConstructorDeclaration Modifier public /** Construct a new LowerCaseTokenizer using a given {@link org.apache.lucene.util.AttributeSource.AttributeFactory}. */ LowerCaseTokenizer FormalParameter ReferenceType AttributeFactory factory FormalParameter ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference factory MemberReference in MethodDeclaration /** Converts char to lower case
   * {@link Character#toLowerCase(char)}.*/ Modifier protected Annotation Override BasicType char normalize FormalParameter BasicType char c ReturnStatement MethodInvocation Character MemberReference c toLowerCase ReferenceType LetterTokenizer",0
588,588,,1
810,810,,0
543,543,"CompilationUnit PackageDeclaration org.apache.lucene.search.spell ClassDeclaration Modifier public /**
 * N-Gram version of edit distance based on paper by Grzegorz Kondrak, 
 * ""N-gram similarity and distance"". Proceedings of the Twelfth International 
 * Conference on String Processing and Information Retrieval (SPIRE 2005), pp. 115-126, 
 * Buenos Aires, Argentina, November 2005. 
 * http://www.cs.ualberta.ca/~kondrak/papers/spire05.pdf
 * 
 * This implementation uses the position-based optimization to compute partial
 * matches of n-gram sub-strings and adds a null-character prefix of size n-1 
 * so that the first character is contained in the same number of n-grams as 
 * a middle character.  Null-character prefix matches are discounted so that 
 * strings with no matching characters will return a distance of 0.
 * 
 */ NGramDistance FieldDeclaration Modifier private BasicType int VariableDeclarator n ConstructorDeclaration Modifier public /**
   * Creates an N-Gram distance measure using n-grams of the specified size.
   * @param size The size of the n-gram to be used to compute the string distance.
   */ NGramDistance FormalParameter BasicType int size StatementExpression Assignment This MemberReference n MemberReference size = ConstructorDeclaration Modifier public /**
   * Creates an N-Gram distance measure using n-grams of size 2.
   */ NGramDistance StatementExpression ExplicitConstructorInvocation Literal 2 MethodDeclaration Modifier public BasicType float getDistance FormalParameter ReferenceType String source FormalParameter ReferenceType String target LocalVariableDeclaration Modifier final BasicType int VariableDeclarator sl MethodInvocation source length LocalVariableDeclaration Modifier final BasicType int VariableDeclarator tl MethodInvocation target length IfStatement BinaryOperation || BinaryOperation == MemberReference sl Literal 0 BinaryOperation == MemberReference tl Literal 0 BlockStatement IfStatement BinaryOperation == MemberReference sl MemberReference tl BlockStatement ReturnStatement Literal 1 BlockStatement ReturnStatement Literal 0 End End LocalVariableDeclaration BasicType int VariableDeclarator cost Literal 0 IfStatement BinaryOperation || BinaryOperation < MemberReference sl MemberReference n BinaryOperation < MemberReference tl MemberReference n BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 VariableDeclarator ni MethodInvocation Math MemberReference sl MemberReference tl min BinaryOperation < MemberReference i MemberReference ni MemberReference ++ i BlockStatement IfStatement BinaryOperation == MethodInvocation source MemberReference i charAt MethodInvocation target MemberReference i charAt BlockStatement StatementExpression MemberReference ++ cost End End ReturnStatement BinaryOperation / Cast BasicType float MemberReference cost MethodInvocation Math MemberReference sl MemberReference tl max End LocalVariableDeclaration BasicType char VariableDeclarator sa ArrayCreator BasicType char BinaryOperation - BinaryOperation + MemberReference sl MemberReference n Literal 1 LocalVariableDeclaration BasicType float VariableDeclarator p LocalVariableDeclaration BasicType float VariableDeclarator d LocalVariableDeclaration BasicType float VariableDeclarator _d ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sa length MemberReference ++ i BlockStatement IfStatement BinaryOperation < MemberReference i BinaryOperation - MemberReference n Literal 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i sa Literal 0 = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i sa MethodInvocation source BinaryOperation + BinaryOperation - MemberReference i MemberReference n Literal 1 charAt = End End StatementExpression Assignment MemberReference p ArrayCreator BasicType float BinaryOperation + MemberReference sl Literal 1 = StatementExpression Assignment MemberReference d ArrayCreator BasicType float BinaryOperation + MemberReference sl Literal 1 = LocalVariableDeclaration BasicType int VariableDeclarator i LocalVariableDeclaration BasicType int VariableDeclarator j LocalVariableDeclaration BasicType char VariableDeclarator t_j ArrayCreator BasicType char MemberReference n ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i MemberReference sl MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i p MemberReference i = End ForStatement ForControl Assignment MemberReference j Literal 1 = BinaryOperation <= MemberReference j MemberReference tl MemberReference ++ j BlockStatement IfStatement BinaryOperation < MemberReference j MemberReference n BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ti Literal 0 BinaryOperation < MemberReference ti BinaryOperation - MemberReference n MemberReference j MemberReference ++ ti BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ti t_j Literal 0 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ti BinaryOperation - MemberReference n MemberReference j BinaryOperation < MemberReference ti MemberReference n MemberReference ++ ti BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ti t_j MethodInvocation target BinaryOperation - MemberReference ti BinaryOperation - MemberReference n MemberReference j charAt = End BlockStatement StatementExpression Assignment MemberReference t_j MethodInvocation target MethodInvocation toCharArray BinaryOperation - MemberReference j MemberReference n MemberReference j substring = End StatementExpression Assignment MemberReference ArraySelector Literal 0 d MemberReference j = ForStatement ForControl Assignment MemberReference i Literal 1 = BinaryOperation <= MemberReference i MemberReference sl MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference cost Literal 0 = LocalVariableDeclaration BasicType int VariableDeclarator tn MemberReference n ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator ni Literal 0 BinaryOperation < MemberReference ni MemberReference n MemberReference ++ ni BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector BinaryOperation + BinaryOperation - MemberReference i Literal 1 MemberReference ni sa MemberReference ArraySelector MemberReference ni t_j BlockStatement StatementExpression MemberReference ++ cost IfStatement BinaryOperation == MemberReference ArraySelector BinaryOperation + BinaryOperation - MemberReference i Literal 1 MemberReference ni sa Literal 0 BlockStatement StatementExpression MemberReference -- tn End End End LocalVariableDeclaration BasicType float VariableDeclarator ec BinaryOperation / Cast BasicType float MemberReference cost MemberReference tn StatementExpression Assignment MemberReference ArraySelector MemberReference i d MethodInvocation Math MethodInvocation Math BinaryOperation + MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 d Literal 1 BinaryOperation + MemberReference ArraySelector MemberReference i p Literal 1 min BinaryOperation + MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 p MemberReference ec min = End StatementExpression Assignment MemberReference _d MemberReference p = StatementExpression Assignment MemberReference p MemberReference d = StatementExpression Assignment MemberReference d MemberReference _d = End ReturnStatement BinaryOperation - Literal 1.0f BinaryOperation / Cast BasicType float MemberReference ArraySelector MemberReference sl p MethodInvocation Math MemberReference tl MemberReference sl max ReferenceType StringDistance",0
935,935,,1
631,631,,0
432,432,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes ClassDeclaration Modifier public /**
 * A {@link MatchNoDocsQueryNode} indicates that a query node tree or subtree
 * will not match any documents if executed in the index.
 * 
 */ MatchNoDocsQueryNode FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 8081805751679581497L ConstructorDeclaration Modifier public MatchNoDocsQueryNode MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement Literal ""<matchNoDocsQueryNode/>"" ReferenceType DeletedQueryNode",1
37,37,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor Import org.apache.lucene.util.Attribute InterfaceDeclaration Modifier public /**
 * This attribute is used by {@link PhraseSlopQueryNodeProcessor} processor and
 * must be defined in the {@link QueryConfigHandler}. This attribute tells the
 * processor what is the default phrase slop when no slop is defined in a
 * phrase. <br/>
 * 
 */ DefaultPhraseSlopAttribute MethodDeclaration Modifier public setDefaultPhraseSlop FormalParameter BasicType int defaultPhraseSlop MethodDeclaration Modifier public BasicType int getDefaultPhraseSlop ReferenceType Attribute",1
86,86,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.cz Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.CharArraySet Import org.apache.lucene.analysis.LowerCaseFilter Import org.apache.lucene.analysis.StopFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.Tokenizer Import org.apache.lucene.analysis.WordlistLoader Import org.apache.lucene.analysis.standard.StandardFilter Import org.apache.lucene.analysis.standard.StandardTokenizer Import org.apache.lucene.analysis.standard.StandardAnalyzer Import org.apache.lucene.util.Version Import java.io  Import java.util.Arrays Import java.util.HashSet Import java.util.Set Import java.util.Collections ClassDeclaration Modifier public final /**
 * {@link Analyzer} for Czech language. 
 * <p>
 * Supports an external list of stopwords (words that
 * will not be indexed at all). 
 * A default set of stopwords is used unless an alternative list is specified.
 * </p>
 *
 * <p><b>NOTE</b>: This class uses the same {@link Version}
 * dependent settings as {@link StandardAnalyzer}.</p>
 */ CzechAnalyzer FieldDeclaration /**
	 * List of typical stopwords.
	 * @deprecated use {@link #getDefaultStopSet()} instead
	 */ Modifier public final static ReferenceType String VariableDeclarator CZECH_STOP_WORDS ArrayInitializer Literal ""a"" Literal ""s"" Literal ""k"" Literal ""o"" Literal ""i"" Literal ""u"" Literal ""v"" Literal ""z"" Literal ""dnes"" Literal ""cz"" Literal ""tímto"" Literal ""budeš"" Literal ""budem"" Literal ""byli"" Literal ""jseš"" Literal ""můj"" Literal ""svým"" Literal ""ta"" Literal ""tomto"" Literal ""tohle"" Literal ""tuto"" Literal ""tyto"" Literal ""jej"" Literal ""zda"" Literal ""proč"" Literal ""máte"" Literal ""tato"" Literal ""kam"" Literal ""tohoto"" Literal ""kdo"" Literal ""kteří"" Literal ""mi"" Literal ""nám"" Literal ""tom"" Literal ""tomuto"" Literal ""mít"" Literal ""nic"" Literal ""proto"" Literal ""kterou"" Literal ""byla"" Literal ""toho"" Literal ""protože"" Literal ""asi"" Literal ""ho"" Literal ""naši"" Literal ""napište"" Literal ""re"" Literal ""což"" Literal ""tím"" Literal ""takže"" Literal ""svých"" Literal ""její"" Literal ""svými"" Literal ""jste"" Literal ""aj"" Literal ""tu"" Literal ""tedy"" Literal ""teto"" Literal ""bylo"" Literal ""kde"" Literal ""ke"" Literal ""pravé"" Literal ""ji"" Literal ""nad"" Literal ""nejsou"" Literal ""či"" Literal ""pod"" Literal ""téma"" Literal ""mezi"" Literal ""přes"" Literal ""ty"" Literal ""pak"" Literal ""vám"" Literal ""ani"" Literal ""když"" Literal ""však"" Literal ""neg"" Literal ""jsem"" Literal ""tento"" Literal ""článku"" Literal ""články"" Literal ""aby"" Literal ""jsme"" Literal ""před"" Literal ""pta"" Literal ""jejich"" Literal ""byl"" Literal ""ještě"" Literal ""až"" Literal ""bez"" Literal ""také"" Literal ""pouze"" Literal ""první"" Literal ""vaše"" Literal ""která"" Literal ""nás"" Literal ""nový"" Literal ""tipy"" Literal ""pokud"" Literal ""může"" Literal ""strana"" Literal ""jeho"" Literal ""své"" Literal ""jiné"" Literal ""zprávy"" Literal ""nové"" Literal ""není"" Literal ""vás"" Literal ""jen"" Literal ""podle"" Literal ""zde"" Literal ""už"" Literal ""být"" Literal ""více"" Literal ""bude"" Literal ""již"" Literal ""než"" Literal ""který"" Literal ""by"" Literal ""které"" Literal ""co"" Literal ""nebo"" Literal ""ten"" Literal ""tak"" Literal ""má"" Literal ""při"" Literal ""od"" Literal ""po"" Literal ""jsou"" Literal ""jak"" Literal ""další"" Literal ""ale"" Literal ""si"" Literal ""se"" Literal ""ve"" Literal ""to"" Literal ""jako"" Literal ""za"" Literal ""zpět"" Literal ""ze"" Literal ""do"" Literal ""pro"" Literal ""je"" Literal ""na"" Literal ""atd"" Literal ""atp"" Literal ""jakmile"" Literal ""přičemž"" Literal ""já"" Literal ""on"" Literal ""ona"" Literal ""ono"" Literal ""oni"" Literal ""ony"" Literal ""my"" Literal ""vy"" Literal ""jí"" Literal ""ji"" Literal ""mě"" Literal ""mne"" Literal ""jemu"" Literal ""tomu"" Literal ""těm"" Literal ""těmu"" Literal ""němu"" Literal ""němuž"" Literal ""jehož"" Literal ""jíž"" Literal ""jelikož"" Literal ""jež"" Literal ""jakož"" Literal ""načež"" MethodDeclaration /**
	 * Returns a set of default Czech-stopwords 
	 * @return a set of default Czech-stopwords 
	 */ Modifier public final static ReferenceType Set TypeArgument ? getDefaultStopSet ReturnStatement MemberReference DefaultSetHolder DEFAULT_SET ClassDeclaration Modifier private static DefaultSetHolder FieldDeclaration Modifier private final static ReferenceType Set TypeArgument ? VariableDeclarator DEFAULT_SET MethodInvocation CharArraySet ClassCreator ReferenceType CharArraySet MethodInvocation Arrays MemberReference CZECH_STOP_WORDS asList Literal false unmodifiableSet FieldDeclaration /**
	 * Contains the stopwords used with the {@link StopFilter}.
	 */ Modifier private ReferenceType Set TypeArgument ? VariableDeclarator stoptable FieldDeclaration Modifier private final ReferenceType Version VariableDeclarator matchVersion ConstructorDeclaration Modifier public /**
	 * Builds an analyzer with the default stop words ({@link #CZECH_STOP_WORDS}).
	 */ CzechAnalyzer FormalParameter ReferenceType Version matchVersion StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MemberReference DefaultSetHolder DEFAULT_SET ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words and stemming exclusion words
   * 
   * @param matchVersion
   *          lucene compatibility version
   * @param stopwords
   *          a stopword set
   */ CzechAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Set TypeArgument ? stopwords StatementExpression Assignment This MemberReference matchVersion MemberReference matchVersion = StatementExpression Assignment This MemberReference stoptable MethodInvocation CharArraySet MethodInvocation CharArraySet MemberReference stopwords copy unmodifiableSet = ConstructorDeclaration Modifier public /**
	 * Builds an analyzer with the given stop words.
	 * @deprecated use {@link #CzechAnalyzer(Version, Set)} instead
	 */ CzechAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType String stopwords  StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MethodInvocation StopFilter MemberReference stopwords makeStopSet ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words.
   * 
   * @deprecated use {@link #CzechAnalyzer(Version, Set)} instead
   */ CzechAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType HashSet TypeArgument ? stopwords StatementExpression ExplicitConstructorInvocation MemberReference matchVersion Cast ReferenceType Set TypeArgument ? MemberReference stopwords ConstructorDeclaration Modifier public /**
	 * Builds an analyzer with the given stop words.
	 * @deprecated use {@link #CzechAnalyzer(Version, Set)} instead
	 */ CzechAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType File stopwords IOException StatementExpression ExplicitConstructorInvocation MemberReference matchVersion Cast ReferenceType Set TypeArgument ? MethodInvocation WordlistLoader MemberReference stopwords getWordSet MethodDeclaration /**
     * Loads stopwords hash from resource stream (file, database...).
     * @param   wordfile    File containing the wordlist
     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding
     * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }
     *             and {@link #CzechAnalyzer(Version, Set)} instead
     */ Modifier public loadStopWords FormalParameter ReferenceType InputStream wordfile FormalParameter ReferenceType String encoding StatementExpression MethodInvocation Literal null setPreviousTokenStream IfStatement BinaryOperation == MemberReference wordfile Literal null BlockStatement StatementExpression Assignment MemberReference stoptable MethodInvocation Collections emptySet = ReturnStatement End TryStatement StatementExpression Assignment MemberReference stoptable MethodInvocation Collections emptySet = LocalVariableDeclaration ReferenceType InputStreamReader VariableDeclarator isr IfStatement BinaryOperation == MemberReference encoding Literal null StatementExpression Assignment MemberReference isr ClassCreator ReferenceType InputStreamReader MemberReference wordfile = StatementExpression Assignment MemberReference isr ClassCreator ReferenceType InputStreamReader MemberReference wordfile MemberReference encoding = End StatementExpression Assignment MemberReference stoptable MethodInvocation WordlistLoader MemberReference isr getWordSet = CatchClause CatchClauseParameter IOException e StatementExpression Assignment MemberReference stoptable MethodInvocation Collections emptySet = MethodDeclaration /**
	 * Creates a {@link TokenStream} which tokenizes all the text in the provided {@link Reader}.
	 *
	 * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
	 * 			{@link StandardFilter}, {@link LowerCaseFilter}, and {@link StopFilter}
	 */ Modifier public final Annotation Override ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator result ClassCreator ReferenceType StandardTokenizer MemberReference matchVersion MemberReference reader StatementExpression Assignment MemberReference result ClassCreator ReferenceType StandardFilter MemberReference result = StatementExpression Assignment MemberReference result ClassCreator ReferenceType LowerCaseFilter MemberReference result = StatementExpression Assignment MemberReference result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference result MemberReference stoptable = ReturnStatement MemberReference result ClassDeclaration Modifier private SavedStreams FieldDeclaration ReferenceType Tokenizer VariableDeclarator source FieldDeclaration ReferenceType TokenStream VariableDeclarator result MethodDeclaration /**
     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text in 
     * the provided {@link Reader}.
     *
     * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
     *          {@link StandardFilter}, {@link LowerCaseFilter}, and {@link StopFilter}
     */ Modifier public Annotation Override ReferenceType TokenStream reusableTokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader IOException LocalVariableDeclaration ReferenceType SavedStreams VariableDeclarator streams Cast ReferenceType SavedStreams MethodInvocation getPreviousTokenStream IfStatement BinaryOperation == MemberReference streams Literal null BlockStatement StatementExpression Assignment MemberReference streams ClassCreator ReferenceType SavedStreams = StatementExpression Assignment MemberReference streams source ClassCreator ReferenceType StandardTokenizer MemberReference matchVersion MemberReference reader = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType StandardFilter MemberReference streams source = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType LowerCaseFilter MemberReference streams result = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference streams result MemberReference stoptable = StatementExpression MethodInvocation MemberReference streams setPreviousTokenStream BlockStatement StatementExpression MethodInvocation streams.source MemberReference reader reset End ReturnStatement MemberReference streams result ReferenceType Analyzer",0
421,421,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.benchmark.byTask.utils.Config Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.index.IndexCommit Import org.apache.lucene.index.LogMergePolicy Import java.io.IOException ClassDeclaration Modifier public /**
 * Open an index writer.
 * <br>Other side effects: index writer object in perfRunData is set.
 * <br>Relevant properties: <code>merge.factor, max.buffered,
 * max.field.length, ram.flush.mb [default 0]</code>.
 *
 * <p> Accepts a param specifying the commit point as
 * previously saved with CommitIndexTask.  If you specify
 * this, it rolls the index back to that commit on opening
 * the IndexWriter.
 */ OpenIndexTask FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_BUFFERED MemberReference IndexWriter DEFAULT_MAX_BUFFERED_DOCS FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_FIELD_LENGTH MemberReference IndexWriter DEFAULT_MAX_FIELD_LENGTH FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_MERGE_PFACTOR MemberReference LogMergePolicy DEFAULT_MERGE_FACTOR FieldDeclaration Modifier public final static BasicType double VariableDeclarator DEFAULT_RAM_FLUSH_MB Cast BasicType int MemberReference IndexWriter DEFAULT_RAM_BUFFER_SIZE_MB FieldDeclaration Modifier private ReferenceType String VariableDeclarator commitUserData ConstructorDeclaration Modifier public OpenIndexTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType int doLogic IOException LocalVariableDeclaration ReferenceType PerfRunData VariableDeclarator runData MethodInvocation getRunData LocalVariableDeclaration ReferenceType Config VariableDeclarator config MethodInvocation runData getConfig LocalVariableDeclaration Modifier final ReferenceType IndexCommit VariableDeclarator ic IfStatement BinaryOperation != MemberReference commitUserData Literal null BlockStatement StatementExpression Assignment MemberReference ic MethodInvocation OpenReaderTask MethodInvocation runData getDirectory MemberReference commitUserData findIndexCommit = BlockStatement StatementExpression Assignment MemberReference ic Literal null = End LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator writer ClassCreator ReferenceType IndexWriter MethodInvocation runData getDirectory MethodInvocation runData getAnalyzer MethodInvocation CreateIndexTask MemberReference config getIndexDeletionPolicy MemberReference IndexWriter.MaxFieldLength UNLIMITED MemberReference ic StatementExpression MethodInvocation CreateIndexTask MemberReference writer MemberReference config setIndexWriterConfig StatementExpression MethodInvocation runData MemberReference writer setIndexWriter ReturnStatement Literal 1 MethodDeclaration Modifier public Annotation Override setParams FormalParameter ReferenceType String params StatementExpression SuperMethodInvocation MemberReference params setParams IfStatement BinaryOperation != MemberReference params Literal null BlockStatement StatementExpression Assignment MemberReference commitUserData MemberReference params = End MethodDeclaration Modifier public Annotation Override BasicType boolean supportsParams ReturnStatement Literal true ReferenceType PerfTask",1
386,386,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.xmlparser.webdemo Import java.io.BufferedReader Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import java.util.Enumeration Import java.util.Properties Import java.util.StringTokenizer Import javax.servlet.RequestDispatcher Import javax.servlet.ServletConfig Import javax.servlet.ServletException Import javax.servlet.http.HttpServlet Import javax.servlet.http.HttpServletRequest Import javax.servlet.http.HttpServletResponse Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.standard.StandardAnalyzer Import org.apache.lucene.document.Document Import org.apache.lucene.document.Field Import org.apache.lucene.index.CorruptIndexException Import org.apache.lucene.index.IndexWriter Import org.apache.lucene.search.IndexSearcher Import org.apache.lucene.search.Query Import org.apache.lucene.search.ScoreDoc Import org.apache.lucene.search.TopDocs Import org.apache.lucene.store.RAMDirectory Import org.apache.lucene.xmlparser.CorePlusExtensionsParser Import org.apache.lucene.xmlparser.QueryTemplateManager ClassDeclaration Modifier public FormBasedXmlQueryDemo FieldDeclaration Modifier private ReferenceType QueryTemplateManager VariableDeclarator queryTemplateManager FieldDeclaration Modifier private ReferenceType CorePlusExtensionsParser VariableDeclarator xmlParser FieldDeclaration Modifier private ReferenceType IndexSearcher VariableDeclarator searcher FieldDeclaration Modifier private ReferenceType Analyzer VariableDeclarator analyzer ClassCreator ReferenceType StandardAnalyzer MemberReference org.apache.lucene.util.Version LUCENE_CURRENT MethodDeclaration Modifier public Annotation Override init FormalParameter ReferenceType ServletConfig config ServletException StatementExpression SuperMethodInvocation MemberReference config init TryStatement StatementExpression MethodInvocation openExampleIndex LocalVariableDeclaration ReferenceType String VariableDeclarator xslFile MethodInvocation config Literal ""xslFile"" getInitParameter LocalVariableDeclaration ReferenceType String VariableDeclarator defaultStandardQueryParserField MethodInvocation config Literal ""defaultStandardQueryParserField"" getInitParameter StatementExpression Assignment MemberReference queryTemplateManager ClassCreator ReferenceType QueryTemplateManager MethodInvocation MethodInvocation BinaryOperation + Literal ""/WEB-INF/"" MemberReference xslFile getResourceAsStream getServletContext = StatementExpression Assignment MemberReference xmlParser ClassCreator ReferenceType CorePlusExtensionsParser MemberReference defaultStandardQueryParserField MemberReference analyzer = CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType ServletException Literal ""Error loading query template"" MemberReference e MethodDeclaration Modifier protected Annotation Override doPost FormalParameter ReferenceType HttpServletRequest request FormalParameter ReferenceType HttpServletResponse response ServletException IOException LocalVariableDeclaration ReferenceType Properties VariableDeclarator completedFormFields ClassCreator ReferenceType Properties LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator pNames MethodInvocation request getParameterNames WhileStatement MethodInvocation pNames hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator propName Cast ReferenceType String MethodInvocation pNames nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation request MemberReference propName getParameter IfStatement BinaryOperation && BinaryOperation != MemberReference value Literal null BinaryOperation > MethodInvocation value MethodInvocation length trim Literal 0 BlockStatement StatementExpression MethodInvocation completedFormFields MemberReference propName MemberReference value setProperty End End TryStatement LocalVariableDeclaration ReferenceType org ReferenceType w3c ReferenceType dom ReferenceType Document VariableDeclarator xmlQuery MethodInvocation queryTemplateManager MemberReference completedFormFields getQueryAsDOM LocalVariableDeclaration ReferenceType Query VariableDeclarator query MethodInvocation xmlParser MethodInvocation xmlQuery getDocumentElement getQuery LocalVariableDeclaration ReferenceType TopDocs VariableDeclarator topDocs MethodInvocation searcher MemberReference query Literal 10 search IfStatement BinaryOperation != MemberReference topDocs Literal null BlockStatement LocalVariableDeclaration ReferenceType ScoreDoc VariableDeclarator sd MemberReference topDocs scoreDocs LocalVariableDeclaration ReferenceType Document VariableDeclarator results ArrayCreator ReferenceType Document MemberReference sd length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference results length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i results MethodInvocation searcher MemberReference ArraySelector MemberReference i MemberReference doc sd doc = StatementExpression MethodInvocation request Literal ""results"" MemberReference results setAttribute End End LocalVariableDeclaration ReferenceType RequestDispatcher VariableDeclarator dispatcher MethodInvocation MethodInvocation Literal ""/index.jsp"" getRequestDispatcher getServletContext StatementExpression MethodInvocation dispatcher MemberReference request MemberReference response forward CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType ServletException Literal ""Error processing query"" MemberReference e MethodDeclaration Modifier private openExampleIndex CorruptIndexException IOException LocalVariableDeclaration ReferenceType RAMDirectory VariableDeclarator rd ClassCreator ReferenceType RAMDirectory LocalVariableDeclaration ReferenceType IndexWriter VariableDeclarator writer ClassCreator ReferenceType IndexWriter MemberReference rd MemberReference analyzer MemberReference IndexWriter.MaxFieldLength LIMITED LocalVariableDeclaration ReferenceType InputStream VariableDeclarator dataIn MethodInvocation MethodInvocation Literal ""/WEB-INF/data.tsv"" getResourceAsStream getServletContext LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference dataIn LocalVariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation br readLine WhileStatement BinaryOperation != MemberReference line Literal null BlockStatement StatementExpression Assignment MemberReference line MethodInvocation line trim = IfStatement BinaryOperation > MethodInvocation line length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference line Literal ""\t"" LocalVariableDeclaration ReferenceType Document VariableDeclarator doc ClassCreator ReferenceType Document StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""location"" MethodInvocation st nextToken MemberReference Field.Store YES MemberReference Field.Index ANALYZED_NO_NORMS add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""salary"" MethodInvocation st nextToken MemberReference Field.Store YES MemberReference Field.Index ANALYZED_NO_NORMS add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""type"" MethodInvocation st nextToken MemberReference Field.Store YES MemberReference Field.Index ANALYZED_NO_NORMS add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""description"" MethodInvocation st nextToken MemberReference Field.Store YES MemberReference Field.Index ANALYZED add StatementExpression MethodInvocation writer MemberReference doc addDocument End StatementExpression Assignment MemberReference line MethodInvocation br readLine = End StatementExpression MethodInvocation writer close StatementExpression Assignment MemberReference searcher ClassCreator ReferenceType IndexSearcher MemberReference rd Literal true = ReferenceType HttpServlet",0
417,417,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.benchmark.byTask.feeds.QueryMaker ClassDeclaration Modifier public /**
 * Search and Traverse task.
 * 
 * <p>Note: This task reuses the reader if it is already open. 
 * Otherwise a reader is opened at start and closed at the end.
 * <p/>
 * 
 * <p>Takes optional param: traversal size (otherwise all results are traversed).</p>
 * 
 * <p>Other side effects: counts additional 1 (record) for each traversed hit.</p>
 */ SearchTravTask FieldDeclaration Modifier protected BasicType int VariableDeclarator traversalSize MemberReference Integer MAX_VALUE ConstructorDeclaration Modifier public SearchTravTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData MethodDeclaration Modifier public Annotation Override BasicType boolean withRetrieve ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType boolean withSearch ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean withTraverse ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType boolean withWarm ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override ReferenceType QueryMaker getQueryMaker ReturnStatement MethodInvocation MethodInvocation This getQueryMaker getRunData MethodDeclaration Modifier public Annotation Override BasicType int traversalSize ReturnStatement MemberReference traversalSize MethodDeclaration Modifier public Annotation Override setParams FormalParameter ReferenceType String params StatementExpression SuperMethodInvocation MemberReference params setParams StatementExpression Assignment MemberReference traversalSize Cast BasicType int MethodInvocation Float MemberReference params parseFloat = MethodDeclaration Modifier public Annotation Override BasicType boolean supportsParams ReturnStatement Literal true ReferenceType ReadTask",0
137,137,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis.cn.smart.hhmm Import java.io.File Import java.io.FileInputStream Import java.io.FileNotFoundException Import java.io.FileOutputStream Import java.io.IOException Import java.io.InputStream Import java.io.ObjectInputStream Import java.io.ObjectOutputStream Import java.io.RandomAccessFile Import java.io.UnsupportedEncodingException Import java.nio.ByteBuffer Import java.nio.ByteOrder Import org.apache.lucene.analysis.cn.smart.AnalyzerProfile Import org.apache.lucene.analysis.cn.smart.Utility ClassDeclaration /**
 * SmartChineseAnalyzer Word Dictionary
 *
 * <p><font color=""#FF0000"">
 * WARNING: The status of the analyzers/smartcn <b>analysis.cn.smart</b> package is experimental. 
 * The APIs and file formats introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 * </p>
 */ WordDictionary ConstructorDeclaration Modifier private WordDictionary FieldDeclaration Modifier private static ReferenceType WordDictionary VariableDeclarator singleInstance FieldDeclaration /**
   * Large prime number for hash function
   */ Modifier public final static BasicType int VariableDeclarator PRIME_INDEX_LENGTH Literal 12071 FieldDeclaration /**
   * wordIndexTable guarantees to hash all Chinese characters in Unicode into 
   * PRIME_INDEX_LENGTH array. There will be conflict, but in reality this 
   * program only handles the 6768 characters found in GB2312 plus some 
   * ASCII characters. Therefore in order to guarantee better precision, it is
   * necessary to retain the original symbol in the charIndexTable.
   */ Modifier private BasicType short VariableDeclarator wordIndexTable FieldDeclaration Modifier private BasicType char VariableDeclarator charIndexTable FieldDeclaration /**
   * To avoid taking too much space, the data structure needed to store the 
   * lexicon requires two multidimensional arrays to store word and frequency.
   * Each word is placed in a char[]. Each char represents a Chinese char or 
   * other symbol.  Each frequency is put into an int. These two arrays 
   * correspond to each other one-to-one. Therefore, one can use 
   * wordItem_charArrayTable[i][j] to look up word from lexicon, and 
   * wordItem_frequencyTable[i][j] to look up the corresponding frequency. 
   */ Modifier private BasicType char VariableDeclarator wordItem_charArrayTable FieldDeclaration Modifier private BasicType int VariableDeclarator wordItem_frequencyTable MethodDeclaration /**
   * Get the singleton dictionary instance.
   * @return singleton
   */ Modifier public static synchronized ReferenceType WordDictionary getInstance IfStatement BinaryOperation == MemberReference singleInstance Literal null BlockStatement StatementExpression Assignment MemberReference singleInstance ClassCreator ReferenceType WordDictionary = TryStatement StatementExpression MethodInvocation singleInstance load CatchClause CatchClauseParameter IOException e LocalVariableDeclaration ReferenceType String VariableDeclarator wordDictRoot MemberReference AnalyzerProfile ANALYSIS_DATA_DIR StatementExpression MethodInvocation singleInstance MemberReference wordDictRoot load CatchClause CatchClauseParameter ClassNotFoundException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e End ReturnStatement MemberReference singleInstance MethodDeclaration /**
   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct
   * 
   * @param dctFileRoot path to dictionary directory
   */ Modifier public load FormalParameter ReferenceType String dctFileRoot LocalVariableDeclaration ReferenceType String VariableDeclarator dctFilePath BinaryOperation + MemberReference dctFileRoot Literal ""/coredict.dct"" LocalVariableDeclaration ReferenceType File VariableDeclarator serialObj ClassCreator ReferenceType File BinaryOperation + MemberReference dctFileRoot Literal ""/coredict.mem"" IfStatement BinaryOperation && MethodInvocation serialObj exists MethodInvocation MemberReference serialObj loadFromObj BlockStatement BlockStatement TryStatement StatementExpression Assignment MemberReference wordIndexTable ArrayCreator BasicType short MemberReference PRIME_INDEX_LENGTH = StatementExpression Assignment MemberReference charIndexTable ArrayCreator BasicType char MemberReference PRIME_INDEX_LENGTH = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference PRIME_INDEX_LENGTH MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i charIndexTable Literal 0 = StatementExpression Assignment MemberReference ArraySelector MemberReference i wordIndexTable Literal - 1 = End StatementExpression Assignment MemberReference wordItem_charArrayTable ArrayCreator BasicType char MemberReference GB2312_CHAR_NUM = StatementExpression Assignment MemberReference wordItem_frequencyTable ArrayCreator BasicType int MemberReference GB2312_CHAR_NUM = StatementExpression MethodInvocation MemberReference dctFilePath loadMainDataFromFile StatementExpression MethodInvocation expandDelimiterData StatementExpression MethodInvocation mergeSameWords StatementExpression MethodInvocation sortEachItems CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType RuntimeException MethodInvocation e getMessage StatementExpression MethodInvocation MemberReference serialObj saveToObj End MethodDeclaration /**
   * Load coredict.mem internally from the jar file.
   * 
   * @throws ClassNotFoundException
   * @throws IOException
   */ Modifier public load IOException ClassNotFoundException LocalVariableDeclaration ReferenceType InputStream VariableDeclarator input This MethodInvocation getClass MethodInvocation Literal ""coredict.mem"" getResourceAsStream StatementExpression MethodInvocation MemberReference input loadFromObjectInputStream MethodDeclaration Modifier private BasicType boolean loadFromObj FormalParameter ReferenceType File serialObj TryStatement StatementExpression MethodInvocation ClassCreator ReferenceType FileInputStream MemberReference serialObj loadFromObjectInputStream ReturnStatement Literal true CatchClause CatchClauseParameter FileNotFoundException e StatementExpression MethodInvocation e printStackTrace CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation e printStackTrace CatchClause CatchClauseParameter ClassNotFoundException e StatementExpression MethodInvocation e printStackTrace ReturnStatement Literal false MethodDeclaration Modifier private loadFromObjectInputStream FormalParameter ReferenceType InputStream serialObjectInputStream IOException ClassNotFoundException LocalVariableDeclaration ReferenceType ObjectInputStream VariableDeclarator input ClassCreator ReferenceType ObjectInputStream MemberReference serialObjectInputStream StatementExpression Assignment MemberReference wordIndexTable Cast BasicType short MethodInvocation input readObject = StatementExpression Assignment MemberReference charIndexTable Cast BasicType char MethodInvocation input readObject = StatementExpression Assignment MemberReference wordItem_charArrayTable Cast BasicType char MethodInvocation input readObject = StatementExpression Assignment MemberReference wordItem_frequencyTable Cast BasicType int MethodInvocation input readObject = StatementExpression MethodInvocation input close MethodDeclaration Modifier private saveToObj FormalParameter ReferenceType File serialObj TryStatement LocalVariableDeclaration ReferenceType ObjectOutputStream VariableDeclarator output ClassCreator ReferenceType ObjectOutputStream ClassCreator ReferenceType FileOutputStream MemberReference serialObj StatementExpression MethodInvocation output MemberReference wordIndexTable writeObject StatementExpression MethodInvocation output MemberReference charIndexTable writeObject StatementExpression MethodInvocation output MemberReference wordItem_charArrayTable writeObject StatementExpression MethodInvocation output MemberReference wordItem_frequencyTable writeObject StatementExpression MethodInvocation output close CatchClause CatchClauseParameter Exception e MethodDeclaration /**
   * Load the datafile into this WordDictionary
   * 
   * @param dctFilePath path to word dictionary (coredict.dct)
   * @return number of words read
   * @throws FileNotFoundException
   * @throws IOException
   * @throws UnsupportedEncodingException
   */ Modifier private BasicType int loadMainDataFromFile FormalParameter ReferenceType String dctFilePath FileNotFoundException IOException UnsupportedEncodingException LocalVariableDeclaration BasicType int VariableDeclarator i VariableDeclarator cnt VariableDeclarator length VariableDeclarator total Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator buffer ArrayCreator BasicType int Literal 3 LocalVariableDeclaration BasicType byte VariableDeclarator intBuffer ArrayCreator BasicType byte Literal 4 LocalVariableDeclaration ReferenceType String VariableDeclarator tmpword LocalVariableDeclaration ReferenceType RandomAccessFile VariableDeclarator dctFile ClassCreator ReferenceType RandomAccessFile MemberReference dctFilePath Literal ""r"" ForStatement ForControl Assignment MemberReference i MemberReference GB2312_FIRST_CHAR = BinaryOperation < MemberReference i BinaryOperation + MemberReference GB2312_FIRST_CHAR MemberReference CHAR_NUM_IN_FILE MemberReference ++ i BlockStatement StatementExpression MethodInvocation dctFile MemberReference intBuffer read StatementExpression Assignment MemberReference cnt MethodInvocation ByteBuffer MethodInvocation MemberReference ByteOrder LITTLE_ENDIAN order MethodInvocation getInt MemberReference intBuffer wrap = IfStatement BinaryOperation <= MemberReference cnt Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i wordItem_charArrayTable Literal null = StatementExpression Assignment MemberReference ArraySelector MemberReference i wordItem_frequencyTable Literal null = ContinueStatement End StatementExpression Assignment MemberReference ArraySelector MemberReference i wordItem_charArrayTable ArrayCreator BasicType char MemberReference cnt = StatementExpression Assignment MemberReference ArraySelector MemberReference i wordItem_frequencyTable ArrayCreator BasicType int MemberReference cnt = StatementExpression Assignment MemberReference total MemberReference cnt += LocalVariableDeclaration BasicType int VariableDeclarator j Literal 0 WhileStatement BinaryOperation < MemberReference j MemberReference cnt BlockStatement StatementExpression MethodInvocation dctFile MemberReference intBuffer read StatementExpression Assignment MemberReference ArraySelector Literal 0 buffer MethodInvocation ByteBuffer MethodInvocation MemberReference ByteOrder LITTLE_ENDIAN order MethodInvocation getInt MemberReference intBuffer wrap = StatementExpression MethodInvocation dctFile MemberReference intBuffer read StatementExpression Assignment MemberReference ArraySelector Literal 1 buffer MethodInvocation ByteBuffer MethodInvocation MemberReference ByteOrder LITTLE_ENDIAN order MethodInvocation getInt MemberReference intBuffer wrap = StatementExpression MethodInvocation dctFile MemberReference intBuffer read StatementExpression Assignment MemberReference ArraySelector Literal 2 buffer MethodInvocation ByteBuffer MethodInvocation MemberReference ByteOrder LITTLE_ENDIAN order MethodInvocation getInt MemberReference intBuffer wrap = StatementExpression Assignment MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_frequencyTable MemberReference ArraySelector Literal 0 buffer = StatementExpression Assignment MemberReference length MemberReference ArraySelector Literal 1 buffer = IfStatement BinaryOperation > MemberReference length Literal 0 BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator lchBuffer ArrayCreator BasicType byte MemberReference length StatementExpression MethodInvocation dctFile MemberReference lchBuffer read StatementExpression Assignment MemberReference tmpword ClassCreator ReferenceType String MemberReference lchBuffer Literal ""GB2312"" = StatementExpression Assignment MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_charArrayTable MethodInvocation tmpword toCharArray = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_charArrayTable Literal null = End StatementExpression MemberReference ++ j End LocalVariableDeclaration ReferenceType String VariableDeclarator str MethodInvocation MemberReference i getCCByGB2312Id StatementExpression MethodInvocation MethodInvocation str Literal 0 charAt MemberReference i setTableIndex End StatementExpression MethodInvocation dctFile close ReturnStatement MemberReference total MethodDeclaration /**
   * The original lexicon puts all information with punctuation into a 
   * chart (from 1 to 3755). Here it then gets expanded, separately being
   * placed into the chart that has the corresponding symbol.
   */ Modifier private expandDelimiterData LocalVariableDeclaration BasicType int VariableDeclarator i LocalVariableDeclaration BasicType int VariableDeclarator cnt LocalVariableDeclaration BasicType int VariableDeclarator delimiterIndex BinaryOperation + Literal 3755 MemberReference GB2312_FIRST_CHAR StatementExpression Assignment MemberReference i Literal 0 = WhileStatement BinaryOperation < MemberReference i MemberReference ArraySelector MemberReference delimiterIndex MemberReference length wordItem_charArrayTable BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MemberReference ArraySelector MemberReference delimiterIndex ArraySelector MemberReference i ArraySelector Literal 0 wordItem_charArrayTable LocalVariableDeclaration BasicType int VariableDeclarator j MethodInvocation MemberReference c getGB2312Id IfStatement BinaryOperation == MemberReference ArraySelector MemberReference j wordItem_charArrayTable Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator k MemberReference i WhileStatement BinaryOperation && BinaryOperation < MemberReference k MemberReference ArraySelector MemberReference delimiterIndex MemberReference length wordItem_charArrayTable BinaryOperation == MemberReference ArraySelector MemberReference delimiterIndex ArraySelector MemberReference k ArraySelector Literal 0 wordItem_charArrayTable MemberReference c BlockStatement StatementExpression MemberReference ++ k End StatementExpression Assignment MemberReference cnt BinaryOperation - MemberReference k MemberReference i = IfStatement BinaryOperation != MemberReference cnt Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j wordItem_charArrayTable ArrayCreator BasicType char MemberReference cnt = StatementExpression Assignment MemberReference ArraySelector MemberReference j wordItem_frequencyTable ArrayCreator BasicType int MemberReference cnt = End ForStatement ForControl Assignment MemberReference k Literal 0 = BinaryOperation < MemberReference k MemberReference cnt MemberReference ++ k MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j ArraySelector MemberReference k wordItem_frequencyTable MemberReference ArraySelector MemberReference delimiterIndex ArraySelector MemberReference i wordItem_frequencyTable = StatementExpression Assignment MemberReference ArraySelector MemberReference j ArraySelector MemberReference k wordItem_charArrayTable ArrayCreator BasicType char BinaryOperation - MemberReference ArraySelector MemberReference delimiterIndex ArraySelector MemberReference i MemberReference length wordItem_charArrayTable Literal 1 = StatementExpression MethodInvocation System MemberReference ArraySelector MemberReference delimiterIndex ArraySelector MemberReference i wordItem_charArrayTable Literal 1 MemberReference ArraySelector MemberReference j ArraySelector MemberReference k wordItem_charArrayTable Literal 0 MemberReference ArraySelector MemberReference j ArraySelector MemberReference k MemberReference length wordItem_charArrayTable arraycopy End StatementExpression MethodInvocation MemberReference c MemberReference j setTableIndex End End StatementExpression Assignment MemberReference ArraySelector MemberReference delimiterIndex wordItem_charArrayTable Literal null = StatementExpression Assignment MemberReference ArraySelector MemberReference delimiterIndex wordItem_frequencyTable Literal null = MethodDeclaration Modifier private mergeSameWords LocalVariableDeclaration BasicType int VariableDeclarator i ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i BinaryOperation + MemberReference GB2312_FIRST_CHAR MemberReference CHAR_NUM_IN_FILE MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i wordItem_charArrayTable Literal null ContinueStatement End LocalVariableDeclaration BasicType int VariableDeclarator len Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 1 BinaryOperation < MemberReference j MemberReference ArraySelector MemberReference i MemberReference length wordItem_charArrayTable MemberReference ++ j BlockStatement IfStatement BinaryOperation != MethodInvocation Utility MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_charArrayTable Literal 0 MemberReference ArraySelector MemberReference i ArraySelector BinaryOperation - MemberReference j Literal 1 wordItem_charArrayTable Literal 0 compareArray Literal 0 StatementExpression MemberReference ++ len End End IfStatement BinaryOperation < MemberReference len MemberReference ArraySelector MemberReference i MemberReference length wordItem_charArrayTable BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator tempArray ArrayCreator BasicType char MemberReference len LocalVariableDeclaration BasicType int VariableDeclarator tempFreq ArrayCreator BasicType int MemberReference len LocalVariableDeclaration BasicType int VariableDeclarator k Literal 0 StatementExpression Assignment MemberReference ArraySelector Literal 0 tempArray MemberReference ArraySelector MemberReference i ArraySelector Literal 0 wordItem_charArrayTable = StatementExpression Assignment MemberReference ArraySelector Literal 0 tempFreq MemberReference ArraySelector MemberReference i ArraySelector Literal 0 wordItem_frequencyTable = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 1 BinaryOperation < MemberReference j MemberReference ArraySelector MemberReference i MemberReference length wordItem_charArrayTable MemberReference ++ j BlockStatement IfStatement BinaryOperation != MethodInvocation Utility MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_charArrayTable Literal 0 MemberReference ArraySelector MemberReference k tempArray Literal 0 compareArray Literal 0 BlockStatement StatementExpression MemberReference ++ k StatementExpression Assignment MemberReference ArraySelector MemberReference k tempArray MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_charArrayTable = StatementExpression Assignment MemberReference ArraySelector MemberReference k tempFreq MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_frequencyTable = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference k tempFreq MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_frequencyTable += End End StatementExpression Assignment MemberReference ArraySelector MemberReference i wordItem_charArrayTable MemberReference tempArray = StatementExpression Assignment MemberReference ArraySelector MemberReference i wordItem_frequencyTable MemberReference tempFreq = End End MethodDeclaration Modifier private sortEachItems LocalVariableDeclaration BasicType char VariableDeclarator tmpArray LocalVariableDeclaration BasicType int VariableDeclarator tmpFreq ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference wordItem_charArrayTable length MemberReference ++ i BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference ArraySelector MemberReference i wordItem_charArrayTable Literal null BinaryOperation > MemberReference ArraySelector MemberReference i MemberReference length wordItem_charArrayTable Literal 1 BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j BinaryOperation - MemberReference ArraySelector MemberReference i MemberReference length wordItem_charArrayTable Literal 1 MemberReference ++ j BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j2 BinaryOperation + MemberReference j Literal 1 BinaryOperation < MemberReference j2 MemberReference ArraySelector MemberReference i MemberReference length wordItem_charArrayTable MemberReference ++ j2 BlockStatement IfStatement BinaryOperation > MethodInvocation Utility MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_charArrayTable Literal 0 MemberReference ArraySelector MemberReference i ArraySelector MemberReference j2 wordItem_charArrayTable Literal 0 compareArray Literal 0 BlockStatement StatementExpression Assignment MemberReference tmpArray MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_charArrayTable = StatementExpression Assignment MemberReference tmpFreq MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_frequencyTable = StatementExpression Assignment MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_charArrayTable MemberReference ArraySelector MemberReference i ArraySelector MemberReference j2 wordItem_charArrayTable = StatementExpression Assignment MemberReference ArraySelector MemberReference i ArraySelector MemberReference j wordItem_frequencyTable MemberReference ArraySelector MemberReference i ArraySelector MemberReference j2 wordItem_frequencyTable = StatementExpression Assignment MemberReference ArraySelector MemberReference i ArraySelector MemberReference j2 wordItem_charArrayTable MemberReference tmpArray = StatementExpression Assignment MemberReference ArraySelector MemberReference i ArraySelector MemberReference j2 wordItem_frequencyTable MemberReference tmpFreq = End End End End End MethodDeclaration Modifier private BasicType boolean setTableIndex FormalParameter BasicType char c FormalParameter BasicType int j LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation MemberReference c getAvaliableTableIndex IfStatement BinaryOperation != MemberReference index Literal - 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference index charIndexTable MemberReference c = StatementExpression Assignment MemberReference ArraySelector MemberReference index wordIndexTable Cast BasicType short MemberReference j = ReturnStatement Literal true ReturnStatement Literal false End MethodDeclaration Modifier private BasicType short getAvaliableTableIndex FormalParameter BasicType char c LocalVariableDeclaration BasicType int VariableDeclarator hash1 Cast BasicType int BinaryOperation % MethodInvocation MemberReference c hash1 MemberReference PRIME_INDEX_LENGTH LocalVariableDeclaration BasicType int VariableDeclarator hash2 BinaryOperation % MethodInvocation MemberReference c hash2 MemberReference PRIME_INDEX_LENGTH IfStatement BinaryOperation < MemberReference hash1 Literal 0 StatementExpression Assignment MemberReference hash1 BinaryOperation + MemberReference PRIME_INDEX_LENGTH MemberReference hash1 = End IfStatement BinaryOperation < MemberReference hash2 Literal 0 StatementExpression Assignment MemberReference hash2 BinaryOperation + MemberReference PRIME_INDEX_LENGTH MemberReference hash2 = End LocalVariableDeclaration BasicType int VariableDeclarator index MemberReference hash1 LocalVariableDeclaration BasicType int VariableDeclarator i Literal 1 WhileStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference ArraySelector MemberReference index charIndexTable Literal 0 BinaryOperation != MemberReference ArraySelector MemberReference index charIndexTable MemberReference c BinaryOperation < MemberReference i MemberReference PRIME_INDEX_LENGTH BlockStatement StatementExpression Assignment MemberReference index BinaryOperation % BinaryOperation + MemberReference hash1 BinaryOperation * MemberReference i MemberReference hash2 MemberReference PRIME_INDEX_LENGTH = StatementExpression MemberReference ++ i End IfStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference PRIME_INDEX_LENGTH BinaryOperation || BinaryOperation == MemberReference ArraySelector MemberReference index charIndexTable Literal 0 BinaryOperation == MemberReference ArraySelector MemberReference index charIndexTable MemberReference c BlockStatement ReturnStatement Cast BasicType short MemberReference index ReturnStatement Literal - 1 End MethodDeclaration Modifier private BasicType short getWordItemTableIndex FormalParameter BasicType char c LocalVariableDeclaration BasicType int VariableDeclarator hash1 Cast BasicType int BinaryOperation % MethodInvocation MemberReference c hash1 MemberReference PRIME_INDEX_LENGTH LocalVariableDeclaration BasicType int VariableDeclarator hash2 BinaryOperation % MethodInvocation MemberReference c hash2 MemberReference PRIME_INDEX_LENGTH IfStatement BinaryOperation < MemberReference hash1 Literal 0 StatementExpression Assignment MemberReference hash1 BinaryOperation + MemberReference PRIME_INDEX_LENGTH MemberReference hash1 = End IfStatement BinaryOperation < MemberReference hash2 Literal 0 StatementExpression Assignment MemberReference hash2 BinaryOperation + MemberReference PRIME_INDEX_LENGTH MemberReference hash2 = End LocalVariableDeclaration BasicType int VariableDeclarator index MemberReference hash1 LocalVariableDeclaration BasicType int VariableDeclarator i Literal 1 WhileStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference ArraySelector MemberReference index charIndexTable Literal 0 BinaryOperation != MemberReference ArraySelector MemberReference index charIndexTable MemberReference c BinaryOperation < MemberReference i MemberReference PRIME_INDEX_LENGTH BlockStatement StatementExpression Assignment MemberReference index BinaryOperation % BinaryOperation + MemberReference hash1 BinaryOperation * MemberReference i MemberReference hash2 MemberReference PRIME_INDEX_LENGTH = StatementExpression MemberReference ++ i End IfStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference PRIME_INDEX_LENGTH BinaryOperation == MemberReference ArraySelector MemberReference index charIndexTable MemberReference c BlockStatement ReturnStatement Cast BasicType short MemberReference index ReturnStatement Literal - 1 End MethodDeclaration /**
   * Look up the text string corresponding with the word char array, 
   * and return the position of the word list.
   * 
   * @param knownHashIndex already figure out position of the first word 
   *   symbol charArray[0] in hash table. If not calculated yet, can be 
   *   replaced with function int findInTable(char[] charArray).
   * @param charArray look up the char array corresponding with the word.
   * @return word location in word array.  If not found, then return -1.
   */ Modifier private BasicType int findInTable FormalParameter BasicType short knownHashIndex FormalParameter BasicType char charArray IfStatement BinaryOperation || BinaryOperation == MemberReference charArray Literal null BinaryOperation == MemberReference charArray length Literal 0 ReturnStatement Literal - 1 End LocalVariableDeclaration BasicType char VariableDeclarator items MemberReference ArraySelector MemberReference ArraySelector MemberReference knownHashIndex wordIndexTable wordItem_charArrayTable LocalVariableDeclaration BasicType int VariableDeclarator start Literal 0 VariableDeclarator end BinaryOperation - MemberReference items length Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator mid BinaryOperation / BinaryOperation + MemberReference start MemberReference end Literal 2 VariableDeclarator cmpResult WhileStatement BinaryOperation <= MemberReference start MemberReference end BlockStatement StatementExpression Assignment MemberReference cmpResult MethodInvocation Utility MemberReference ArraySelector MemberReference mid items Literal 0 MemberReference charArray Literal 1 compareArray = IfStatement BinaryOperation == MemberReference cmpResult Literal 0 ReturnStatement MemberReference mid IfStatement BinaryOperation < MemberReference cmpResult Literal 0 StatementExpression Assignment MemberReference start BinaryOperation + MemberReference mid Literal 1 = IfStatement BinaryOperation > MemberReference cmpResult Literal 0 StatementExpression Assignment MemberReference end BinaryOperation - MemberReference mid Literal 1 = End End End StatementExpression Assignment MemberReference mid BinaryOperation / BinaryOperation + MemberReference start MemberReference end Literal 2 = End ReturnStatement Literal - 1 MethodDeclaration /**
   * Find the first word in the dictionary that starts with the supplied prefix
   * 
   * @see #getPrefixMatch(char[], int)
   * @param charArray input prefix
   * @return index of word, or -1 if not found
   */ Modifier public BasicType int getPrefixMatch FormalParameter BasicType char charArray ReturnStatement MethodInvocation MemberReference charArray Literal 0 getPrefixMatch MethodDeclaration /**
   * Find the nth word in the dictionary that starts with the supplied prefix
   * 
   * @see #getPrefixMatch(char[])
   * @param charArray input prefix
   * @param knownStart relative position in the dictionary to start
   * @return index of word, or -1 if not found
   */ Modifier public BasicType int getPrefixMatch FormalParameter BasicType char charArray FormalParameter BasicType int knownStart LocalVariableDeclaration BasicType short VariableDeclarator index MethodInvocation MemberReference ArraySelector Literal 0 charArray getWordItemTableIndex IfStatement BinaryOperation == MemberReference index Literal - 1 ReturnStatement Literal - 1 End LocalVariableDeclaration BasicType char VariableDeclarator items MemberReference ArraySelector MemberReference ArraySelector MemberReference index wordIndexTable wordItem_charArrayTable LocalVariableDeclaration BasicType int VariableDeclarator start MemberReference knownStart VariableDeclarator end BinaryOperation - MemberReference items length Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator mid BinaryOperation / BinaryOperation + MemberReference start MemberReference end Literal 2 VariableDeclarator cmpResult WhileStatement BinaryOperation <= MemberReference start MemberReference end BlockStatement StatementExpression Assignment MemberReference cmpResult MethodInvocation Utility MemberReference charArray Literal 1 MemberReference ArraySelector MemberReference mid items Literal 0 compareArrayByPrefix = IfStatement BinaryOperation == MemberReference cmpResult Literal 0 BlockStatement WhileStatement BinaryOperation && BinaryOperation >= MemberReference mid Literal 0 BinaryOperation == MethodInvocation Utility MemberReference charArray Literal 1 MemberReference ArraySelector MemberReference mid items Literal 0 compareArrayByPrefix Literal 0 StatementExpression MemberReference -- mid End StatementExpression MemberReference ++ mid ReturnStatement MemberReference mid IfStatement BinaryOperation < MemberReference cmpResult Literal 0 StatementExpression Assignment MemberReference end BinaryOperation - MemberReference mid Literal 1 = StatementExpression Assignment MemberReference start BinaryOperation + MemberReference mid Literal 1 = End End StatementExpression Assignment MemberReference mid BinaryOperation / BinaryOperation + MemberReference start MemberReference end Literal 2 = End ReturnStatement Literal - 1 MethodDeclaration /**
   * Get the frequency of a word from the dictionary
   * 
   * @param charArray input word
   * @return word frequency, or zero if the word is not found
   */ Modifier public BasicType int getFrequency FormalParameter BasicType char charArray LocalVariableDeclaration BasicType short VariableDeclarator hashIndex MethodInvocation MemberReference ArraySelector Literal 0 charArray getWordItemTableIndex IfStatement BinaryOperation == MemberReference hashIndex Literal - 1 ReturnStatement Literal 0 End LocalVariableDeclaration BasicType int VariableDeclarator itemIndex MethodInvocation MemberReference hashIndex MemberReference charArray findInTable IfStatement BinaryOperation != MemberReference itemIndex Literal - 1 ReturnStatement MemberReference ArraySelector MemberReference ArraySelector MemberReference hashIndex wordIndexTable ArraySelector MemberReference itemIndex wordItem_frequencyTable End ReturnStatement Literal 0 MethodDeclaration /**
   * Return true if the dictionary entry at itemIndex for table charArray[0] is charArray
   * 
   * @param charArray input word
   * @param itemIndex item index for table charArray[0]
   * @return true if the entry exists
   */ Modifier public BasicType boolean isEqual FormalParameter BasicType char charArray FormalParameter BasicType int itemIndex LocalVariableDeclaration BasicType short VariableDeclarator hashIndex MethodInvocation MemberReference ArraySelector Literal 0 charArray getWordItemTableIndex ReturnStatement BinaryOperation == MethodInvocation Utility MemberReference charArray Literal 1 MemberReference ArraySelector MemberReference ArraySelector MemberReference hashIndex wordIndexTable ArraySelector MemberReference itemIndex wordItem_charArrayTable Literal 0 compareArray Literal 0 ReferenceType AbstractDictionary",0
57,57,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util.HashMap Import java.util.ArrayList Import java.util.List Import java.util.Map.Entry Import org.apache.lucene.search.Query ClassDeclaration /** Holds buffered deletes, by docID, term or query.  We
 *  hold two instances of this class: one for the deletes
 *  prior to the last flush, the other for deletes after
 *  the last flush.  This is so if we need to abort
 *  (discard all buffered docs) we can also discard the
 *  buffered deletes yet keep the deletes done during
 *  previously flushed segments. */ BufferedDeletes FieldDeclaration BasicType int VariableDeclarator numTerms FieldDeclaration ReferenceType HashMap TypeArgument ReferenceType Term TypeArgument ReferenceType Num VariableDeclarator terms ClassCreator ReferenceType HashMap TypeArgument ReferenceType Term TypeArgument ReferenceType Num FieldDeclaration ReferenceType HashMap TypeArgument ReferenceType Query TypeArgument ReferenceType Integer VariableDeclarator queries ClassCreator ReferenceType HashMap TypeArgument ReferenceType Query TypeArgument ReferenceType Integer FieldDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator docIDs ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Integer FieldDeclaration BasicType long VariableDeclarator bytesUsed ClassDeclaration Modifier final static Num FieldDeclaration Modifier private BasicType int VariableDeclarator num ConstructorDeclaration Num FormalParameter BasicType int num StatementExpression Assignment This MemberReference num MemberReference num = MethodDeclaration BasicType int getNum ReturnStatement MemberReference num MethodDeclaration setNum FormalParameter BasicType int num IfStatement BinaryOperation > MemberReference num This MemberReference num StatementExpression Assignment This MemberReference num MemberReference num = End MethodDeclaration BasicType int size ReturnStatement BinaryOperation + BinaryOperation + MemberReference numTerms MethodInvocation queries size MethodInvocation docIDs size MethodDeclaration update FormalParameter ReferenceType BufferedDeletes in StatementExpression Assignment MemberReference numTerms MemberReference in numTerms += StatementExpression Assignment MemberReference bytesUsed MemberReference in bytesUsed += StatementExpression MethodInvocation terms MemberReference in terms putAll StatementExpression MethodInvocation queries MemberReference in queries putAll StatementExpression MethodInvocation docIDs MemberReference in docIDs addAll StatementExpression MethodInvocation in clear MethodDeclaration clear StatementExpression MethodInvocation terms clear StatementExpression MethodInvocation queries clear StatementExpression MethodInvocation docIDs clear StatementExpression Assignment MemberReference numTerms Literal 0 = StatementExpression Assignment MemberReference bytesUsed Literal 0 = MethodDeclaration addBytesUsed FormalParameter BasicType long b StatementExpression Assignment MemberReference bytesUsed MemberReference b += MethodDeclaration BasicType boolean any ReturnStatement BinaryOperation || BinaryOperation || BinaryOperation > MethodInvocation terms size Literal 0 BinaryOperation > MethodInvocation docIDs size Literal 0 BinaryOperation > MethodInvocation queries size Literal 0 MethodDeclaration Modifier synchronized remap FormalParameter ReferenceType MergeDocIDRemapper mapper FormalParameter ReferenceType SegmentInfos infos FormalParameter BasicType int docMaps FormalParameter BasicType int delCounts FormalParameter ReferenceType MergePolicy ReferenceType OneMerge merge FormalParameter BasicType int mergeDocCount LocalVariableDeclaration Modifier final ReferenceType HashMap TypeArgument ReferenceType Term TypeArgument ReferenceType Num VariableDeclarator newDeleteTerms IfStatement BinaryOperation > MethodInvocation terms size Literal 0 BlockStatement StatementExpression Assignment MemberReference newDeleteTerms ClassCreator ReferenceType HashMap TypeArgument ReferenceType Term TypeArgument ReferenceType Num = ForStatement EnhancedForControl VariableDeclaration ReferenceType Entry TypeArgument ReferenceType Term TypeArgument ReferenceType Num VariableDeclarator entry MethodInvocation terms entrySet BlockStatement LocalVariableDeclaration ReferenceType Num VariableDeclarator num MethodInvocation entry getValue StatementExpression MethodInvocation newDeleteTerms MethodInvocation entry getKey ClassCreator ReferenceType Num MethodInvocation mapper MethodInvocation num getNum remap put End StatementExpression Assignment MemberReference newDeleteTerms Literal null = End LocalVariableDeclaration Modifier final ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator newDeleteDocIDs IfStatement BinaryOperation > MethodInvocation docIDs size Literal 0 BlockStatement StatementExpression Assignment MemberReference newDeleteDocIDs ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Integer MethodInvocation docIDs size = ForStatement EnhancedForControl VariableDeclaration ReferenceType Integer VariableDeclarator num MemberReference docIDs BlockStatement StatementExpression MethodInvocation newDeleteDocIDs MethodInvocation Integer MethodInvocation mapper MethodInvocation num intValue remap valueOf add End StatementExpression Assignment MemberReference newDeleteDocIDs Literal null = End LocalVariableDeclaration Modifier final ReferenceType HashMap TypeArgument ReferenceType Query TypeArgument ReferenceType Integer VariableDeclarator newDeleteQueries IfStatement BinaryOperation > MethodInvocation queries size Literal 0 BlockStatement StatementExpression Assignment MemberReference newDeleteQueries ClassCreator ReferenceType HashMap TypeArgument ReferenceType Query TypeArgument ReferenceType Integer MethodInvocation queries size = ForStatement EnhancedForControl VariableDeclaration ReferenceType Entry TypeArgument ReferenceType Query TypeArgument ReferenceType Integer VariableDeclarator entry MethodInvocation queries entrySet BlockStatement LocalVariableDeclaration ReferenceType Integer VariableDeclarator num MethodInvocation entry getValue StatementExpression MethodInvocation newDeleteQueries MethodInvocation entry getKey MethodInvocation Integer MethodInvocation mapper MethodInvocation num intValue remap valueOf put End StatementExpression Assignment MemberReference newDeleteQueries Literal null = End IfStatement BinaryOperation != MemberReference newDeleteTerms Literal null StatementExpression Assignment MemberReference terms MemberReference newDeleteTerms = End IfStatement BinaryOperation != MemberReference newDeleteDocIDs Literal null StatementExpression Assignment MemberReference docIDs MemberReference newDeleteDocIDs = End IfStatement BinaryOperation != MemberReference newDeleteQueries Literal null StatementExpression Assignment MemberReference queries MemberReference newDeleteQueries = End",0
230,230,"CompilationUnit PackageDeclaration org.apache.lucene.index ClassDeclaration Modifier final /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ FieldInfo FieldDeclaration ReferenceType String VariableDeclarator name FieldDeclaration BasicType boolean VariableDeclarator isIndexed FieldDeclaration BasicType int VariableDeclarator number FieldDeclaration BasicType boolean VariableDeclarator storeTermVector FieldDeclaration BasicType boolean VariableDeclarator storeOffsetWithTermVector FieldDeclaration BasicType boolean VariableDeclarator storePositionWithTermVector FieldDeclaration BasicType boolean VariableDeclarator omitNorms FieldDeclaration BasicType boolean VariableDeclarator omitTermFreqAndPositions FieldDeclaration BasicType boolean VariableDeclarator storePayloads ConstructorDeclaration FieldInfo FormalParameter ReferenceType String na FormalParameter BasicType boolean tk FormalParameter BasicType int nu FormalParameter BasicType boolean storeTermVector FormalParameter BasicType boolean storePositionWithTermVector FormalParameter BasicType boolean storeOffsetWithTermVector FormalParameter BasicType boolean omitNorms FormalParameter BasicType boolean storePayloads FormalParameter BasicType boolean omitTermFreqAndPositions StatementExpression Assignment MemberReference name MemberReference na = StatementExpression Assignment MemberReference isIndexed MemberReference tk = StatementExpression Assignment MemberReference number MemberReference nu = IfStatement MemberReference isIndexed BlockStatement StatementExpression Assignment This MemberReference storeTermVector MemberReference storeTermVector = StatementExpression Assignment This MemberReference storeOffsetWithTermVector MemberReference storeOffsetWithTermVector = StatementExpression Assignment This MemberReference storePositionWithTermVector MemberReference storePositionWithTermVector = StatementExpression Assignment This MemberReference storePayloads MemberReference storePayloads = StatementExpression Assignment This MemberReference omitNorms MemberReference omitNorms = StatementExpression Assignment This MemberReference omitTermFreqAndPositions MemberReference omitTermFreqAndPositions = BlockStatement StatementExpression Assignment This MemberReference storeTermVector Literal false = StatementExpression Assignment This MemberReference storeOffsetWithTermVector Literal false = StatementExpression Assignment This MemberReference storePositionWithTermVector Literal false = StatementExpression Assignment This MemberReference storePayloads Literal false = StatementExpression Assignment This MemberReference omitNorms Literal true = StatementExpression Assignment This MemberReference omitTermFreqAndPositions Literal false = End MethodDeclaration Modifier public Annotation Override ReferenceType Object clone ReturnStatement ClassCreator ReferenceType FieldInfo MemberReference name MemberReference isIndexed MemberReference number MemberReference storeTermVector MemberReference storePositionWithTermVector MemberReference storeOffsetWithTermVector MemberReference omitNorms MemberReference storePayloads MemberReference omitTermFreqAndPositions MethodDeclaration update FormalParameter BasicType boolean isIndexed FormalParameter BasicType boolean storeTermVector FormalParameter BasicType boolean storePositionWithTermVector FormalParameter BasicType boolean storeOffsetWithTermVector FormalParameter BasicType boolean omitNorms FormalParameter BasicType boolean storePayloads FormalParameter BasicType boolean omitTermFreqAndPositions IfStatement BinaryOperation != This MemberReference isIndexed MemberReference isIndexed BlockStatement StatementExpression Assignment This MemberReference isIndexed Literal true = End IfStatement MemberReference isIndexed BlockStatement IfStatement BinaryOperation != This MemberReference storeTermVector MemberReference storeTermVector BlockStatement StatementExpression Assignment This MemberReference storeTermVector Literal true = End IfStatement BinaryOperation != This MemberReference storePositionWithTermVector MemberReference storePositionWithTermVector BlockStatement StatementExpression Assignment This MemberReference storePositionWithTermVector Literal true = End IfStatement BinaryOperation != This MemberReference storeOffsetWithTermVector MemberReference storeOffsetWithTermVector BlockStatement StatementExpression Assignment This MemberReference storeOffsetWithTermVector Literal true = End IfStatement BinaryOperation != This MemberReference storePayloads MemberReference storePayloads BlockStatement StatementExpression Assignment This MemberReference storePayloads Literal true = End IfStatement BinaryOperation != This MemberReference omitNorms MemberReference omitNorms BlockStatement StatementExpression Assignment This MemberReference omitNorms Literal false = End IfStatement BinaryOperation != This MemberReference omitTermFreqAndPositions MemberReference omitTermFreqAndPositions BlockStatement StatementExpression Assignment This MemberReference omitTermFreqAndPositions Literal true = End End",0
161,161,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.store.IndexInput Import java.io.IOException ClassDeclaration Modifier final SegmentTermPositions FieldDeclaration Modifier private ReferenceType IndexInput VariableDeclarator proxStream FieldDeclaration Modifier private BasicType int VariableDeclarator proxCount FieldDeclaration Modifier private BasicType int VariableDeclarator position FieldDeclaration Modifier private BasicType int VariableDeclarator payloadLength FieldDeclaration Modifier private BasicType boolean VariableDeclarator needToLoadPayload FieldDeclaration Modifier private BasicType long VariableDeclarator lazySkipPointer Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator lazySkipProxCount Literal 0 ConstructorDeclaration SegmentTermPositions FormalParameter ReferenceType SegmentReader p StatementExpression SuperConstructorInvocation MemberReference p StatementExpression Assignment This MemberReference proxStream Literal null = MethodDeclaration Modifier final Annotation Override seek FormalParameter ReferenceType TermInfo ti FormalParameter ReferenceType Term term IOException StatementExpression SuperMethodInvocation MemberReference ti MemberReference term seek IfStatement BinaryOperation != MemberReference ti Literal null StatementExpression Assignment MemberReference lazySkipPointer MemberReference ti proxPointer = End StatementExpression Assignment MemberReference lazySkipProxCount Literal 0 = StatementExpression Assignment MemberReference proxCount Literal 0 = StatementExpression Assignment MemberReference payloadLength Literal 0 = StatementExpression Assignment MemberReference needToLoadPayload Literal false = MethodDeclaration Modifier public final Annotation Override close IOException StatementExpression SuperMethodInvocation close IfStatement BinaryOperation != MemberReference proxStream Literal null StatementExpression MethodInvocation proxStream close End MethodDeclaration Modifier public final BasicType int nextPosition IOException IfStatement MemberReference currentFieldOmitTermFreqAndPositions ReturnStatement Literal 0 End StatementExpression MethodInvocation lazySkip StatementExpression MemberReference -- proxCount ReturnStatement Assignment MemberReference position MethodInvocation readDeltaPosition += MethodDeclaration Modifier private final BasicType int readDeltaPosition IOException LocalVariableDeclaration BasicType int VariableDeclarator delta MethodInvocation proxStream readVInt IfStatement MemberReference currentFieldStoresPayloads BlockStatement IfStatement BinaryOperation != BinaryOperation & MemberReference delta Literal 1 Literal 0 BlockStatement StatementExpression Assignment MemberReference payloadLength MethodInvocation proxStream readVInt = End StatementExpression Assignment MemberReference delta Literal 1 >>>= StatementExpression Assignment MemberReference needToLoadPayload Literal true = End ReturnStatement MemberReference delta MethodDeclaration Modifier final protected Annotation Override skippingDoc IOException StatementExpression Assignment MemberReference lazySkipProxCount MemberReference freq += MethodDeclaration Modifier public final Annotation Override BasicType boolean next IOException StatementExpression Assignment MemberReference lazySkipProxCount MemberReference proxCount += IfStatement SuperMethodInvocation next BlockStatement StatementExpression Assignment MemberReference proxCount MemberReference freq = StatementExpression Assignment MemberReference position Literal 0 = ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration Modifier public final Annotation Override BasicType int read FormalParameter Modifier final BasicType int docs FormalParameter Modifier final BasicType int freqs ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""TermPositions does not support processing multiple documents in one call. Use TermDocs instead."" MethodDeclaration /** Called by super.skipTo(). */ Modifier protected Annotation Override skipProx FormalParameter BasicType long proxPointer FormalParameter BasicType int payloadLength IOException StatementExpression Assignment MemberReference lazySkipPointer MemberReference proxPointer = StatementExpression Assignment MemberReference lazySkipProxCount Literal 0 = StatementExpression Assignment MemberReference proxCount Literal 0 = StatementExpression Assignment This MemberReference payloadLength MemberReference payloadLength = StatementExpression Assignment MemberReference needToLoadPayload Literal false = MethodDeclaration Modifier private skipPositions FormalParameter BasicType int n IOException AssertStatement MemberReference ! currentFieldOmitTermFreqAndPositions ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator f MemberReference n BinaryOperation > MemberReference f Literal 0 MemberReference -- f BlockStatement StatementExpression MethodInvocation readDeltaPosition StatementExpression MethodInvocation skipPayload End MethodDeclaration Modifier private skipPayload IOException IfStatement BinaryOperation && MemberReference needToLoadPayload BinaryOperation > MemberReference payloadLength Literal 0 BlockStatement StatementExpression MethodInvocation proxStream BinaryOperation + MethodInvocation proxStream getFilePointer MemberReference payloadLength seek End StatementExpression Assignment MemberReference needToLoadPayload Literal false = MethodDeclaration Modifier private lazySkip IOException IfStatement BinaryOperation == MemberReference proxStream Literal null BlockStatement StatementExpression Assignment MemberReference proxStream Cast ReferenceType IndexInput MethodInvocation parent.core.proxStream clone = End StatementExpression MethodInvocation skipPayload IfStatement BinaryOperation != MemberReference lazySkipPointer Literal - 1 BlockStatement StatementExpression MethodInvocation proxStream MemberReference lazySkipPointer seek StatementExpression Assignment MemberReference lazySkipPointer Literal - 1 = End IfStatement BinaryOperation != MemberReference lazySkipProxCount Literal 0 BlockStatement StatementExpression MethodInvocation MemberReference lazySkipProxCount skipPositions StatementExpression Assignment MemberReference lazySkipProxCount Literal 0 = End MethodDeclaration Modifier public BasicType int getPayloadLength ReturnStatement MemberReference payloadLength MethodDeclaration Modifier public BasicType byte getPayload FormalParameter BasicType byte data FormalParameter BasicType int offset IOException IfStatement MemberReference ! needToLoadPayload BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""Either no payload exists at this term position or an attempt was made to load it more than once."" End LocalVariableDeclaration BasicType byte VariableDeclarator retArray LocalVariableDeclaration BasicType int VariableDeclarator retOffset IfStatement BinaryOperation || BinaryOperation == MemberReference data Literal null BinaryOperation < BinaryOperation - MemberReference data length MemberReference offset MemberReference payloadLength BlockStatement StatementExpression Assignment MemberReference retArray ArrayCreator BasicType byte MemberReference payloadLength = StatementExpression Assignment MemberReference retOffset Literal 0 = BlockStatement StatementExpression Assignment MemberReference retArray MemberReference data = StatementExpression Assignment MemberReference retOffset MemberReference offset = End StatementExpression MethodInvocation proxStream MemberReference retArray MemberReference retOffset MemberReference payloadLength readBytes StatementExpression Assignment MemberReference needToLoadPayload Literal false = ReturnStatement MemberReference retArray MethodDeclaration Modifier public BasicType boolean isPayloadAvailable ReturnStatement BinaryOperation && MemberReference needToLoadPayload BinaryOperation > MemberReference payloadLength Literal 0 ReferenceType SegmentTermDocs ReferenceType TermPositions",0
383,383,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis.cn.smart Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import java.io.Reader Import java.util.Collections Import java.util.Set Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.PorterStemFilter Import org.apache.lucene.analysis.StopFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.Tokenizer Import org.apache.lucene.analysis.WordlistLoader Import org.apache.lucene.analysis.cn.smart.SentenceTokenizer Import org.apache.lucene.analysis.cn.smart.WordTokenFilter Import org.apache.lucene.util.Version ClassDeclaration Modifier public /**
 * <p>
 * SmartChineseAnalyzer is an analyzer for Chinese or mixed Chinese-English text.
 * The analyzer uses probabilistic knowledge to find the optimal word segmentation for Simplified Chinese text.
 * The text is first broken into sentences, then each sentence is segmented into words.
 * </p>
 * <p>
 * Segmentation is based upon the <a href=""http://en.wikipedia.org/wiki/Hidden_Markov_Model"">Hidden Markov Model</a>. 
 * A large training corpus was used to calculate Chinese word frequency probability.
 * </p>
 * <p>
 * This analyzer requires a dictionary to provide statistical data. 
 * SmartChineseAnalyzer has an included dictionary out-of-box.
 * </p>
 * <p>
 * The included dictionary data is from <a href=""http://www.ictclas.org"">ICTCLAS1.0</a>.
 * Thanks to ICTCLAS for their hard work, and for contributing the data under the Apache 2 License!
 * </p>
 * <p><font color=""#FF0000"">
 * WARNING: The status of the analyzers/smartcn <b>analysis.cn.smart</b> package is experimental. 
 * The APIs and file formats introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 * </p>
 */ SmartChineseAnalyzer FieldDeclaration Modifier private final ReferenceType Set TypeArgument ? VariableDeclarator stopWords FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DEFAULT_STOPWORD_FILE Literal ""stopwords.txt"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator STOPWORD_FILE_COMMENT Literal ""//"" MethodDeclaration /**
   * Returns an unmodifiable instance of the default stop-words set.
   * @return an unmodifiable instance of the default stop-words set.
   */ Modifier public static ReferenceType Set TypeArgument ReferenceType String getDefaultStopSet ReturnStatement MemberReference DefaultSetHolder DEFAULT_STOP_SET ClassDeclaration Modifier private static /**
   * Atomically loads the DEFAULT_STOP_SET in a lazy fashion once the outer class 
   * accesses the static final set the first time.;
   */ DefaultSetHolder FieldDeclaration Modifier final static ReferenceType Set TypeArgument ReferenceType String VariableDeclarator DEFAULT_STOP_SET TryStatement StatementExpression Assignment MemberReference DEFAULT_STOP_SET MethodInvocation loadDefaultStopWordSet = CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Unable to load default stopword set"" MethodDeclaration Modifier static ReferenceType Set TypeArgument ReferenceType String loadDefaultStopWordSet IOException LocalVariableDeclaration ReferenceType InputStream VariableDeclarator stream ClassReference MethodInvocation MemberReference DEFAULT_STOPWORD_FILE getResourceAsStream ReferenceType SmartChineseAnalyzer TryStatement LocalVariableDeclaration ReferenceType InputStreamReader VariableDeclarator reader ClassCreator ReferenceType InputStreamReader MemberReference stream Literal ""UTF-8"" ReturnStatement MethodInvocation Collections MethodInvocation WordlistLoader MemberReference reader MemberReference STOPWORD_FILE_COMMENT getWordSet unmodifiableSet StatementExpression MethodInvocation stream close FieldDeclaration Modifier private final ReferenceType Version VariableDeclarator matchVersion ConstructorDeclaration Modifier public /**
   * Create a new SmartChineseAnalyzer, using the default stopword list.
   */ SmartChineseAnalyzer FormalParameter ReferenceType Version matchVersion StatementExpression ExplicitConstructorInvocation MemberReference matchVersion Literal true ConstructorDeclaration Modifier public /**
   * <p>
   * Create a new SmartChineseAnalyzer, optionally using the default stopword list.
   * </p>
   * <p>
   * The included default stopword list is simply a list of punctuation.
   * If you do not use this list, punctuation will not be removed from the text!
   * </p>
   * 
   * @param useDefaultStopWords true to use the default stopword list.
   */ SmartChineseAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter BasicType boolean useDefaultStopWords StatementExpression Assignment MemberReference stopWords TernaryExpression MemberReference useDefaultStopWords MemberReference DefaultSetHolder DEFAULT_STOP_SET MemberReference Collections EMPTY_SET = StatementExpression Assignment This MemberReference matchVersion MemberReference matchVersion = ConstructorDeclaration Modifier public /**
   * <p>
   * Create a new SmartChineseAnalyzer, using the provided {@link Set} of stopwords.
   * </p>
   * <p>
   * Note: the set should include punctuation, unless you want to index punctuation!
   * </p>
   * @param stopWords {@link Set} of stopwords to use.
   */ SmartChineseAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Set stopWords StatementExpression Assignment This MemberReference stopWords TernaryExpression BinaryOperation == MemberReference stopWords Literal null MemberReference Collections EMPTY_SET MemberReference stopWords = StatementExpression Assignment This MemberReference matchVersion MemberReference matchVersion = MethodDeclaration Modifier public Annotation Override ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator result ClassCreator ReferenceType SentenceTokenizer MemberReference reader StatementExpression Assignment MemberReference result ClassCreator ReferenceType WordTokenFilter MemberReference result = StatementExpression Assignment MemberReference result ClassCreator ReferenceType PorterStemFilter MemberReference result = IfStatement MethodInvocation ! stopWords isEmpty BlockStatement StatementExpression Assignment MemberReference result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference result MemberReference stopWords Literal false = End ReturnStatement MemberReference result ClassDeclaration Modifier private final static SavedStreams FieldDeclaration ReferenceType Tokenizer VariableDeclarator tokenStream FieldDeclaration ReferenceType TokenStream VariableDeclarator filteredTokenStream MethodDeclaration Modifier public Annotation Override ReferenceType TokenStream reusableTokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader IOException LocalVariableDeclaration ReferenceType SavedStreams VariableDeclarator streams Cast ReferenceType SavedStreams MethodInvocation getPreviousTokenStream IfStatement BinaryOperation == MemberReference streams Literal null BlockStatement StatementExpression Assignment MemberReference streams ClassCreator ReferenceType SavedStreams = StatementExpression MethodInvocation MemberReference streams setPreviousTokenStream StatementExpression Assignment MemberReference streams tokenStream ClassCreator ReferenceType SentenceTokenizer MemberReference reader = StatementExpression Assignment MemberReference streams filteredTokenStream ClassCreator ReferenceType WordTokenFilter MemberReference streams tokenStream = StatementExpression Assignment MemberReference streams filteredTokenStream ClassCreator ReferenceType PorterStemFilter MemberReference streams filteredTokenStream = IfStatement MethodInvocation ! stopWords isEmpty BlockStatement StatementExpression Assignment MemberReference streams filteredTokenStream ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference streams filteredTokenStream MemberReference stopWords Literal false = End BlockStatement StatementExpression MethodInvocation streams.tokenStream MemberReference reader reset StatementExpression MethodInvocation streams.filteredTokenStream reset End ReturnStatement MemberReference streams filteredTokenStream ReferenceType Analyzer",0
275,275,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.config Import org.apache.lucene.util.AttributeSource ClassDeclaration Modifier public /**
 * This class represents a field configuration. Every configuration should be
 * set using the methods inherited from {@link AttributeSource}.
 * 
 * @see QueryConfigHandler
 * @see org.apache.lucene.util.Attribute
 */ FieldConfig FieldDeclaration Modifier private ReferenceType CharSequence VariableDeclarator fieldName ConstructorDeclaration Modifier public /**
   * Constructs a {@link FieldConfig}
   * 
   * @param fieldName
   *          the field name, it cannot be null
   * @throws IllegalArgumentException
   *           if the field name is null
   */ FieldConfig FormalParameter ReferenceType CharSequence fieldName IfStatement BinaryOperation == MemberReference fieldName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""field name should not be null!"" End StatementExpression Assignment This MemberReference fieldName MemberReference fieldName = MethodDeclaration /**
   * Returns the field name this configuration represents.
   * 
   * @return the field name
   */ Modifier public ReferenceType CharSequence getFieldName ReturnStatement This MemberReference fieldName MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<fieldconfig name=\"""" This MemberReference fieldName Literal ""\"" attributes=\"""" SuperMethodInvocation toString Literal ""\""/>"" ReferenceType AttributeSource",1
2,2,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.miscellaneous Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.TokenStream Import java.io.IOException ClassDeclaration Modifier public /**
 * Links two {@link PrefixAwareTokenFilter}.
 * <p/>
 * <b>NOTE:</b> This filter might not behave correctly if used with custom Attributes, i.e. Attributes other than
 * the ones located in org.apache.lucene.analysis.tokenattributes. 
 */ PrefixAndSuffixAwareTokenFilter FieldDeclaration Modifier private ReferenceType PrefixAwareTokenFilter VariableDeclarator suffix ConstructorDeclaration Modifier public PrefixAndSuffixAwareTokenFilter FormalParameter ReferenceType TokenStream prefix FormalParameter ReferenceType TokenStream input FormalParameter ReferenceType TokenStream suffix StatementExpression SuperConstructorInvocation MemberReference suffix StatementExpression Assignment MemberReference prefix ClassCreator ReferenceType PrefixAwareTokenFilter MemberReference prefix MemberReference input MethodDeclaration Modifier public Annotation Override ReferenceType Token updateSuffixToken FormalParameter ReferenceType Token suffixToken FormalParameter ReferenceType Token lastInputToken ReturnStatement This PrefixAndSuffixAwareTokenFilter MethodInvocation MemberReference suffixToken MemberReference lastInputToken updateInputToken = StatementExpression Assignment This MemberReference suffix ClassCreator ReferenceType PrefixAwareTokenFilter MemberReference prefix MemberReference suffix MethodDeclaration Modifier public Annotation Override ReferenceType Token updateSuffixToken FormalParameter ReferenceType Token suffixToken FormalParameter ReferenceType Token lastInputToken ReturnStatement This PrefixAndSuffixAwareTokenFilter MethodInvocation MemberReference suffixToken MemberReference lastInputToken updateSuffixToken = MethodDeclaration Modifier public ReferenceType Token updateInputToken FormalParameter ReferenceType Token inputToken FormalParameter ReferenceType Token lastPrefixToken StatementExpression MethodInvocation inputToken BinaryOperation + MethodInvocation lastPrefixToken endOffset MethodInvocation inputToken startOffset setStartOffset StatementExpression MethodInvocation inputToken BinaryOperation + MethodInvocation lastPrefixToken endOffset MethodInvocation inputToken endOffset setEndOffset ReturnStatement MemberReference inputToken MethodDeclaration Modifier public ReferenceType Token updateSuffixToken FormalParameter ReferenceType Token suffixToken FormalParameter ReferenceType Token lastInputToken StatementExpression MethodInvocation suffixToken BinaryOperation + MethodInvocation lastInputToken endOffset MethodInvocation suffixToken startOffset setStartOffset StatementExpression MethodInvocation suffixToken BinaryOperation + MethodInvocation lastInputToken endOffset MethodInvocation suffixToken endOffset setEndOffset ReturnStatement MemberReference suffixToken MethodDeclaration Modifier public final Annotation Override BasicType boolean incrementToken IOException ReturnStatement MethodInvocation suffix incrementToken MethodDeclaration Modifier public Annotation Override reset IOException StatementExpression MethodInvocation suffix reset MethodDeclaration Modifier public Annotation Override close IOException StatementExpression MethodInvocation suffix close ReferenceType TokenStream",0
99,99,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.builders Import java.util.HashMap Import java.util.List Import org.apache.lucene.messages.MessageImpl Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.messages.QueryParserMessages Import org.apache.lucene.queryParser.core.nodes.FieldableNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl ClassDeclaration Modifier public /**
 * This class should be used when there is a builder for each type of node.
 * 
 * The type of node may be defined in 2 different ways: - by the field name,
 * when the node implements the {@link FieldableNode} interface - by its class,
 * it keeps checking the class and all the interfaces and classes this class
 * implements/extends until it finds a builder for that class/interface
 * 
 * This class always check if there is a builder for the field name before it
 * checks for the node class. So, field name builders have precedence over class
 * builders.
 * 
 * When a builder is found for a node, it's called and the node is passed to the
 * builder. If the returned built object is not <code>null</code>, it's tagged
 * on the node using the tag {@link QueryTreeBuilder#QUERY_TREE_BUILDER_TAGID}.
 * 
 * The children are usually built before the parent node. However, if a builder
 * associated to a node is an instance of {@link QueryTreeBuilder}, the node is
 * delegated to this builder and it's responsible to build the node and its
 * children.
 * 
 * @see QueryBuilder
 */ QueryTreeBuilder FieldDeclaration /**
   * This tag is used to tag the nodes in a query tree with the built objects
   * produced from their own associated builder.
   */ Modifier public final static ReferenceType String VariableDeclarator QUERY_TREE_BUILDER_TAGID ClassReference MethodInvocation getName ReferenceType QueryTreeBuilder FieldDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType Class TypeArgument ReferenceType QueryNode extends TypeArgument ReferenceType QueryBuilder VariableDeclarator queryNodeBuilders FieldDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType CharSequence TypeArgument ReferenceType QueryBuilder VariableDeclarator fieldNameBuilders ConstructorDeclaration Modifier public /**
   * {@link QueryTreeBuilder} constructor.
   */ QueryTreeBuilder MethodDeclaration /**
   * Associates a field name with a builder.
   * 
   * @param fieldName
   *          the field name
   * @param builder
   *          the builder to be associated
   */ Modifier public setBuilder FormalParameter ReferenceType CharSequence fieldName FormalParameter ReferenceType QueryBuilder builder IfStatement BinaryOperation == This MemberReference fieldNameBuilders Literal null BlockStatement StatementExpression Assignment This MemberReference fieldNameBuilders ClassCreator ReferenceType HashMap TypeArgument ReferenceType CharSequence TypeArgument ReferenceType QueryBuilder = End StatementExpression This MemberReference fieldNameBuilders MethodInvocation MemberReference fieldName MemberReference builder put MethodDeclaration /**
   * Associates a class with a builder
   * 
   * @param queryNodeClass
   *          the class
   * @param builder
   *          the builder to be associated
   */ Modifier public setBuilder FormalParameter ReferenceType Class TypeArgument ReferenceType QueryNode extends queryNodeClass FormalParameter ReferenceType QueryBuilder builder IfStatement BinaryOperation == This MemberReference queryNodeBuilders Literal null BlockStatement StatementExpression Assignment This MemberReference queryNodeBuilders ClassCreator ReferenceType HashMap TypeArgument ReferenceType Class TypeArgument ReferenceType QueryNode extends TypeArgument ReferenceType QueryBuilder = End StatementExpression This MemberReference queryNodeBuilders MethodInvocation MemberReference queryNodeClass MemberReference builder put MethodDeclaration Modifier private process FormalParameter ReferenceType QueryNode node QueryNodeException IfStatement BinaryOperation != MemberReference node Literal null BlockStatement LocalVariableDeclaration ReferenceType QueryBuilder VariableDeclarator builder MethodInvocation MemberReference node getBuilder IfStatement BinaryOperation instanceof MemberReference builder ReferenceType QueryTreeBuilder BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator children MethodInvocation node getChildren IfStatement BinaryOperation != MemberReference children Literal null BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType QueryNode VariableDeclarator child MemberReference children BlockStatement StatementExpression MethodInvocation MemberReference child process End End End StatementExpression MethodInvocation MemberReference node MemberReference builder processNode End MethodDeclaration Modifier private ReferenceType QueryBuilder getBuilder FormalParameter ReferenceType QueryNode node LocalVariableDeclaration ReferenceType QueryBuilder VariableDeclarator builder Literal null IfStatement BinaryOperation && BinaryOperation != This MemberReference fieldNameBuilders Literal null BinaryOperation instanceof MemberReference node ReferenceType FieldableNode BlockStatement StatementExpression Assignment MemberReference builder This MemberReference fieldNameBuilders MethodInvocation Cast ReferenceType FieldableNode MemberReference node get = End IfStatement BinaryOperation && BinaryOperation == MemberReference builder Literal null BinaryOperation != This MemberReference queryNodeBuilders Literal null BlockStatement LocalVariableDeclaration ReferenceType Class TypeArgument ? VariableDeclarator clazz MethodInvocation node getClass DoStatement BinaryOperation && BinaryOperation == MemberReference builder Literal null BinaryOperation != Assignment MemberReference clazz MethodInvocation clazz getSuperclass = Literal null BlockStatement StatementExpression Assignment MemberReference builder MethodInvocation MemberReference clazz getQueryBuilder = IfStatement BinaryOperation == MemberReference builder Literal null BlockStatement LocalVariableDeclaration ReferenceType Class TypeArgument ? VariableDeclarator classes MethodInvocation node MethodInvocation getInterfaces getClass ForStatement EnhancedForControl VariableDeclaration ReferenceType Class TypeArgument ? VariableDeclarator actualClass MemberReference classes BlockStatement StatementExpression Assignment MemberReference builder MethodInvocation MemberReference actualClass getQueryBuilder = IfStatement BinaryOperation != MemberReference builder Literal null BlockStatement BreakStatement End End End End End ReturnStatement MemberReference builder MethodDeclaration Modifier private processNode FormalParameter ReferenceType QueryNode node FormalParameter ReferenceType QueryBuilder builder QueryNodeException IfStatement BinaryOperation == MemberReference builder Literal null BlockStatement ThrowStatement ClassCreator ReferenceType QueryNodeException ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages LUCENE_QUERY_CONVERSION_ERROR MethodInvocation node ClassCreator ReferenceType EscapeQuerySyntaxImpl toQueryString MethodInvocation node MethodInvocation getName getClass End LocalVariableDeclaration ReferenceType Object VariableDeclarator obj MethodInvocation builder MemberReference node build IfStatement BinaryOperation != MemberReference obj Literal null BlockStatement StatementExpression MethodInvocation node MemberReference QUERY_TREE_BUILDER_TAGID MemberReference obj setTag End MethodDeclaration Modifier private ReferenceType QueryBuilder getQueryBuilder FormalParameter ReferenceType Class TypeArgument ? clazz IfStatement ClassReference MethodInvocation MemberReference clazz isAssignableFrom ReferenceType QueryNode BlockStatement ReturnStatement This MemberReference queryNodeBuilders MethodInvocation MemberReference clazz get End ReturnStatement Literal null MethodDeclaration /**
   * Builds some kind of object from a query tree. Each node in the query tree
   * is built using an specific builder associated to it.
   * 
   * @param queryNode
   *          the query tree root node
   * 
   * @return the built object
   * 
   * @throws QueryNodeException
   *           if some node builder throws a {@link QueryNodeException} or if
   *           there is a node which had no builder associated to it
   */ Modifier public ReferenceType Object build FormalParameter ReferenceType QueryNode queryNode QueryNodeException StatementExpression MethodInvocation MemberReference queryNode process ReturnStatement MethodInvocation queryNode MemberReference QUERY_TREE_BUILDER_TAGID getTag ReferenceType QueryBuilder",0
839,839,,0
513,513,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexInput Import org.apache.lucene.store.BufferedIndexInput Import org.apache.lucene.store.IndexOutput Import org.apache.lucene.store.Lock Import java.util.HashMap Import java.io.IOException ClassDeclaration /**
 * Class for accessing a compound stream.
 * This class implements a directory, but is limited to only read operations.
 * Directory methods that would normally modify data throw an exception.
 */ CompoundFileReader FieldDeclaration Modifier private BasicType int VariableDeclarator readBufferSize ClassDeclaration Modifier private final static FileEntry FieldDeclaration BasicType long VariableDeclarator offset FieldDeclaration BasicType long VariableDeclarator length FieldDeclaration Modifier private ReferenceType Directory VariableDeclarator directory FieldDeclaration Modifier private ReferenceType String VariableDeclarator fileName FieldDeclaration Modifier private ReferenceType IndexInput VariableDeclarator stream FieldDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType FileEntry VariableDeclarator entries ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType FileEntry ConstructorDeclaration Modifier public CompoundFileReader FormalParameter ReferenceType Directory dir FormalParameter ReferenceType String name IOException StatementExpression ExplicitConstructorInvocation MemberReference dir MemberReference name MemberReference BufferedIndexInput BUFFER_SIZE ConstructorDeclaration Modifier public CompoundFileReader FormalParameter ReferenceType Directory dir FormalParameter ReferenceType String name FormalParameter BasicType int readBufferSize IOException StatementExpression Assignment MemberReference directory MemberReference dir = StatementExpression Assignment MemberReference fileName MemberReference name = StatementExpression Assignment This MemberReference readBufferSize MemberReference readBufferSize = LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression Assignment MemberReference stream MethodInvocation dir MemberReference name MemberReference readBufferSize openInput = LocalVariableDeclaration BasicType int VariableDeclarator count MethodInvocation stream readVInt LocalVariableDeclaration ReferenceType FileEntry VariableDeclarator entry Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator offset MethodInvocation stream readLong LocalVariableDeclaration ReferenceType String VariableDeclarator id MethodInvocation stream readString IfStatement BinaryOperation != MemberReference entry Literal null BlockStatement StatementExpression Assignment MemberReference entry length BinaryOperation - MemberReference offset MemberReference entry offset = End StatementExpression Assignment MemberReference entry ClassCreator ReferenceType FileEntry = StatementExpression Assignment MemberReference entry offset MemberReference offset = StatementExpression MethodInvocation entries MemberReference id MemberReference entry put End IfStatement BinaryOperation != MemberReference entry Literal null BlockStatement StatementExpression Assignment MemberReference entry length BinaryOperation - MethodInvocation stream length MemberReference entry offset = End StatementExpression Assignment MemberReference success Literal true = IfStatement BinaryOperation && MemberReference ! success BinaryOperation != MemberReference stream Literal null BlockStatement TryStatement StatementExpression MethodInvocation stream close CatchClause CatchClauseParameter IOException e End MethodDeclaration Modifier public ReferenceType Directory getDirectory ReturnStatement MemberReference directory MethodDeclaration Modifier public ReferenceType String getName ReturnStatement MemberReference fileName MethodDeclaration Modifier public synchronized Annotation Override close IOException IfStatement BinaryOperation == MemberReference stream Literal null ThrowStatement ClassCreator ReferenceType IOException Literal ""Already closed"" End StatementExpression MethodInvocation entries clear StatementExpression MethodInvocation stream close StatementExpression Assignment MemberReference stream Literal null = MethodDeclaration Modifier public synchronized Annotation Override ReferenceType IndexInput openInput FormalParameter ReferenceType String id IOException ReturnStatement MethodInvocation MemberReference id MemberReference readBufferSize openInput MethodDeclaration Modifier public synchronized Annotation Override ReferenceType IndexInput openInput FormalParameter ReferenceType String id FormalParameter BasicType int readBufferSize IOException IfStatement BinaryOperation == MemberReference stream Literal null ThrowStatement ClassCreator ReferenceType IOException Literal ""Stream closed"" End LocalVariableDeclaration ReferenceType FileEntry VariableDeclarator entry MethodInvocation entries MemberReference id get IfStatement BinaryOperation == MemberReference entry Literal null ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + BinaryOperation + Literal ""No sub-file with id "" MemberReference id Literal "" found"" End ReturnStatement ClassCreator ReferenceType CSIndexInput MemberReference stream MemberReference entry offset MemberReference entry length MemberReference readBufferSize MethodDeclaration /** Returns an array of strings, one for each file in the directory. */ Modifier public Annotation Override ReferenceType String listAll LocalVariableDeclaration ReferenceType String VariableDeclarator res ArrayCreator ReferenceType String MethodInvocation entries size ReturnStatement MethodInvocation entries MethodInvocation MemberReference res toArray keySet MethodDeclaration /** Returns true iff a file with the given name exists. */ Modifier public Annotation Override BasicType boolean fileExists FormalParameter ReferenceType String name ReturnStatement MethodInvocation entries MemberReference name containsKey MethodDeclaration /** Returns the time the compound file was last modified. */ Modifier public Annotation Override BasicType long fileModified FormalParameter ReferenceType String name IOException ReturnStatement MethodInvocation directory MemberReference fileName fileModified MethodDeclaration /** Set the modified time of the compound file to now. */ Modifier public Annotation Override touchFile FormalParameter ReferenceType String name IOException StatementExpression MethodInvocation directory MemberReference fileName touchFile MethodDeclaration /** Not implemented
     * @throws UnsupportedOperationException */ Modifier public Annotation Override deleteFile FormalParameter ReferenceType String name ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /** Not implemented
     * @throws UnsupportedOperationException */ Modifier public renameFile FormalParameter ReferenceType String from FormalParameter ReferenceType String to ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /** Returns the length of a file in the directory.
     * @throws IOException if the file does not exist */ Modifier public Annotation Override BasicType long fileLength FormalParameter ReferenceType String name IOException LocalVariableDeclaration ReferenceType FileEntry VariableDeclarator e MethodInvocation entries MemberReference name get IfStatement BinaryOperation == MemberReference e Literal null ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + BinaryOperation + Literal ""File "" MemberReference name Literal "" does not exist"" End ReturnStatement MemberReference e length MethodDeclaration /** Not implemented
     * @throws UnsupportedOperationException */ Modifier public Annotation Override ReferenceType IndexOutput createOutput FormalParameter ReferenceType String name ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /** Not implemented
     * @throws UnsupportedOperationException */ Modifier public Annotation Override ReferenceType Lock makeLock FormalParameter ReferenceType String name ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ClassDeclaration Modifier final static /** Implementation of an IndexInput that reads from a portion of the
     *  compound file. The visibility is left as ""package"" *only* because
     *  this helps with testing since JUnit test cases in a different class
     *  can then access package fields of this class.
     */ CSIndexInput FieldDeclaration ReferenceType IndexInput VariableDeclarator base FieldDeclaration BasicType long VariableDeclarator fileOffset FieldDeclaration BasicType long VariableDeclarator length ConstructorDeclaration CSIndexInput FormalParameter Modifier final ReferenceType IndexInput base FormalParameter Modifier final BasicType long fileOffset FormalParameter Modifier final BasicType long length StatementExpression ExplicitConstructorInvocation MemberReference base MemberReference fileOffset MemberReference length MemberReference BufferedIndexInput BUFFER_SIZE ConstructorDeclaration CSIndexInput FormalParameter Modifier final ReferenceType IndexInput base FormalParameter Modifier final BasicType long fileOffset FormalParameter Modifier final BasicType long length FormalParameter BasicType int readBufferSize StatementExpression SuperConstructorInvocation MemberReference readBufferSize StatementExpression Assignment This MemberReference base Cast ReferenceType IndexInput MethodInvocation base clone = StatementExpression Assignment This MemberReference fileOffset MemberReference fileOffset = StatementExpression Assignment This MemberReference length MemberReference length = MethodDeclaration Modifier public Annotation Override ReferenceType Object clone LocalVariableDeclaration ReferenceType CSIndexInput VariableDeclarator clone Cast ReferenceType CSIndexInput SuperMethodInvocation clone StatementExpression Assignment MemberReference clone base Cast ReferenceType IndexInput MethodInvocation base clone = StatementExpression Assignment MemberReference clone fileOffset MemberReference fileOffset = StatementExpression Assignment MemberReference clone length MemberReference length = ReturnStatement MemberReference clone MethodDeclaration /** Expert: implements buffer refill.  Reads bytes from the current
         *  position in the input.
         * @param b the array to read bytes into
         * @param offset the offset in the array to start storing bytes
         * @param len the number of bytes to read
         */ Modifier protected Annotation Override readInternal FormalParameter BasicType byte b FormalParameter BasicType int offset FormalParameter BasicType int len IOException LocalVariableDeclaration BasicType long VariableDeclarator start MethodInvocation getFilePointer IfStatement BinaryOperation > BinaryOperation + MemberReference start MemberReference len MemberReference length ThrowStatement ClassCreator ReferenceType IOException Literal ""read past EOF"" End StatementExpression MethodInvocation base BinaryOperation + MemberReference fileOffset MemberReference start seek StatementExpression MethodInvocation base MemberReference b MemberReference offset MemberReference len Literal false readBytes MethodDeclaration /** Expert: implements seek.  Sets current position in this file, where
         *  the next {@link #readInternal(byte[],int,int)} will occur.
         * @see #readInternal(byte[],int,int)
         */ Modifier protected Annotation Override seekInternal FormalParameter BasicType long pos MethodDeclaration /** Closes the stream to further operations. */ Modifier public Annotation Override close IOException StatementExpression MethodInvocation base close MethodDeclaration Modifier public Annotation Override BasicType long length ReturnStatement MemberReference length ReferenceType BufferedIndexInput ReferenceType Directory",1
499,499,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException ClassDeclaration Modifier public /**
 * A {@link Scorer} which wraps another scorer and caches the score of the
 * current document. Successive calls to {@link #score()} will return the same
 * result and will not invoke the wrapped Scorer's score() method, unless the
 * current document has changed.<br>
 * This class might be useful due to the changes done to the {@link Collector}
 * interface, in which the score is not computed for a document by default, only
 * if the collector requests it. Some collectors may need to use the score in
 * several places, however all they have in hand is a {@link Scorer} object, and
 * might end up computing the score of a document more than once.
 */ ScoreCachingWrappingScorer FieldDeclaration Modifier private ReferenceType Scorer VariableDeclarator scorer FieldDeclaration Modifier private BasicType int VariableDeclarator curDoc Literal - 1 FieldDeclaration Modifier private BasicType float VariableDeclarator curScore ConstructorDeclaration Modifier public /** Creates a new instance by wrapping the given scorer. */ ScoreCachingWrappingScorer FormalParameter ReferenceType Scorer scorer StatementExpression SuperConstructorInvocation MethodInvocation scorer getSimilarity StatementExpression Assignment This MemberReference scorer MemberReference scorer = MethodDeclaration Modifier protected Annotation Override BasicType boolean score FormalParameter ReferenceType Collector collector FormalParameter BasicType int max FormalParameter BasicType int firstDocID IOException ReturnStatement MethodInvocation scorer MemberReference collector MemberReference max MemberReference firstDocID score MethodDeclaration Modifier public Annotation Override ReferenceType Similarity getSimilarity ReturnStatement MethodInvocation scorer getSimilarity MethodDeclaration Modifier public Annotation Override BasicType float score IOException LocalVariableDeclaration BasicType int VariableDeclarator doc MethodInvocation scorer docID IfStatement BinaryOperation != MemberReference doc MemberReference curDoc BlockStatement StatementExpression Assignment MemberReference curScore MethodInvocation scorer score = StatementExpression Assignment MemberReference curDoc MemberReference doc = End ReturnStatement MemberReference curScore MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MethodInvocation scorer docID MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException ReturnStatement MethodInvocation scorer nextDoc MethodDeclaration Modifier public Annotation Override score FormalParameter ReferenceType Collector collector IOException StatementExpression MethodInvocation scorer MemberReference collector score MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException ReturnStatement MethodInvocation scorer MemberReference target advance ReferenceType Scorer",0
618,618,,1
167,167,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import org.apache.lucene.util.ArrayUtil ClassDeclaration Modifier abstract /**
 * NOTE: this API is experimental and will likely change
 */ FormatPostingsTermsConsumer MethodDeclaration /** Adds a new term in this field; term ends with U+FFFF
   *  char */ Modifier abstract ReferenceType FormatPostingsDocsConsumer addTerm FormalParameter BasicType char text FormalParameter BasicType int start IOException FieldDeclaration BasicType char VariableDeclarator termBuffer MethodDeclaration ReferenceType FormatPostingsDocsConsumer addTerm FormalParameter ReferenceType String text IOException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator len MethodInvocation text length IfStatement BinaryOperation || BinaryOperation == MemberReference termBuffer Literal null BinaryOperation < MemberReference termBuffer length BinaryOperation + Literal 1 MemberReference len StatementExpression Assignment MemberReference termBuffer ArrayCreator BasicType char MethodInvocation ArrayUtil BinaryOperation + Literal 1 MemberReference len getNextSize = End StatementExpression MethodInvocation text Literal 0 MemberReference len MemberReference termBuffer Literal 0 getChars StatementExpression Assignment MemberReference ArraySelector MemberReference len termBuffer Literal 0xffff = ReturnStatement MethodInvocation MemberReference termBuffer Literal 0 addTerm MethodDeclaration /** Called when we are done adding terms to this field */ Modifier abstract finish IOException",0
613,613,,0
911,911,,1
502,502,"CompilationUnit PackageDeclaration org.apache.lucene.search.spell Import java.util.Iterator InterfaceDeclaration Modifier public /**
 * A simple interface representing a Dictionary. A Dictionary
 * here is just a list of words.
 * 
 *
 * @version 1.0
 */ Dictionary MethodDeclaration /**
   * Return all words present in the dictionary
   * @return Iterator
   */ ReferenceType Iterator TypeArgument ReferenceType String getWordsIterator",0
143,143,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.tier Import java.math.BigDecimal Import java.math.RoundingMode Import org.apache.lucene.search.Filter Import org.apache.lucene.spatial.tier.projections.CartesianTierPlotter Import org.apache.lucene.spatial.tier.projections.IProjector Import org.apache.lucene.spatial.tier.projections.SinusoidalProjector Import org.apache.lucene.spatial.geometry.LatLng Import org.apache.lucene.spatial.geometry.FloatLatLng Import org.apache.lucene.spatial.geometry.shape.LLRect ClassDeclaration Modifier public /**
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ CartesianPolyFilterBuilder FieldDeclaration Modifier public final static BasicType double VariableDeclarator MILES_FLOOR Literal 1.0 FieldDeclaration Modifier private ReferenceType IProjector VariableDeclarator projector ClassCreator ReferenceType SinusoidalProjector FieldDeclaration Modifier private final ReferenceType String VariableDeclarator tierPrefix ConstructorDeclaration Modifier public CartesianPolyFilterBuilder FormalParameter ReferenceType String tierPrefix StatementExpression Assignment This MemberReference tierPrefix MemberReference tierPrefix = MethodDeclaration Modifier public ReferenceType Shape getBoxShape FormalParameter BasicType double latitude FormalParameter BasicType double longitude FormalParameter BasicType double miles IfStatement BinaryOperation < MemberReference miles MemberReference MILES_FLOOR BlockStatement StatementExpression Assignment MemberReference miles MemberReference MILES_FLOOR = End LocalVariableDeclaration ReferenceType LLRect VariableDeclarator box1 MethodInvocation LLRect ClassCreator ReferenceType FloatLatLng MemberReference latitude MemberReference longitude MemberReference miles MemberReference miles createBox LocalVariableDeclaration ReferenceType LatLng VariableDeclarator ll MethodInvocation box1 getLowerLeft LocalVariableDeclaration ReferenceType LatLng VariableDeclarator ur MethodInvocation box1 getUpperRight LocalVariableDeclaration BasicType double VariableDeclarator latY MethodInvocation ur getLat LocalVariableDeclaration BasicType double VariableDeclarator latX MethodInvocation ll getLat LocalVariableDeclaration BasicType double VariableDeclarator longY MethodInvocation ur getLng LocalVariableDeclaration BasicType double VariableDeclarator longX MethodInvocation ll getLng LocalVariableDeclaration BasicType double VariableDeclarator longX2 Literal 0.0 IfStatement BinaryOperation && BinaryOperation < MethodInvocation ur getLng Literal 0.0 BinaryOperation > MethodInvocation ll getLng Literal 0.0 BlockStatement StatementExpression Assignment MemberReference longX2 MethodInvocation ll getLng = StatementExpression Assignment MemberReference longX Literal - 180.0 = End IfStatement BinaryOperation && BinaryOperation > MethodInvocation ur getLng Literal 0.0 BinaryOperation < MethodInvocation ll getLng Literal 0.0 BlockStatement StatementExpression Assignment MemberReference longX2 MethodInvocation ll getLng = StatementExpression Assignment MemberReference longX Literal 0.0 = End LocalVariableDeclaration ReferenceType CartesianTierPlotter VariableDeclarator ctp ClassCreator ReferenceType CartesianTierPlotter Literal 2 MemberReference projector MemberReference tierPrefix LocalVariableDeclaration BasicType int VariableDeclarator bestFit MethodInvocation ctp MemberReference miles bestFit StatementExpression Assignment MemberReference ctp ClassCreator ReferenceType CartesianTierPlotter MemberReference bestFit MemberReference projector MemberReference tierPrefix = LocalVariableDeclaration ReferenceType Shape VariableDeclarator shape ClassCreator ReferenceType Shape MethodInvocation ctp getTierFieldName StatementExpression Assignment MemberReference shape MethodInvocation MemberReference shape MemberReference ctp MemberReference latX MemberReference longX MemberReference latY MemberReference longY getShapeLoop = IfStatement BinaryOperation != MemberReference longX2 Literal 0.0 BlockStatement IfStatement BinaryOperation != MemberReference longX2 Literal 0.0 BlockStatement IfStatement BinaryOperation == MemberReference longX Literal 0.0 BlockStatement StatementExpression Assignment MemberReference longX MemberReference longX2 = StatementExpression Assignment MemberReference longY Literal 0.0 = StatementExpression Assignment MemberReference shape MethodInvocation MemberReference shape MemberReference ctp MemberReference latX MemberReference longX MemberReference latY MemberReference longY getShapeLoop = BlockStatement StatementExpression Assignment MemberReference longX MemberReference longX2 = StatementExpression Assignment MemberReference longY Literal - 180.0 = StatementExpression Assignment MemberReference shape MethodInvocation MemberReference shape MemberReference ctp MemberReference latY MemberReference longY MemberReference latX MemberReference longX getShapeLoop = End End End ReturnStatement MemberReference shape MethodDeclaration Modifier public ReferenceType Shape getShapeLoop FormalParameter ReferenceType Shape shape FormalParameter ReferenceType CartesianTierPlotter ctp FormalParameter BasicType double latX FormalParameter BasicType double longX FormalParameter BasicType double latY FormalParameter BasicType double longY LocalVariableDeclaration BasicType double VariableDeclarator beginAt MethodInvocation ctp MemberReference latX MemberReference longX getTierBoxId LocalVariableDeclaration BasicType double VariableDeclarator endAt MethodInvocation ctp MemberReference latY MemberReference longY getTierBoxId LocalVariableDeclaration BasicType double VariableDeclarator tierVert MethodInvocation ctp getTierVerticalPosDivider LocalVariableDeclaration BasicType double VariableDeclarator startX BinaryOperation - MemberReference beginAt BinaryOperation % MemberReference beginAt Literal 1 LocalVariableDeclaration BasicType double VariableDeclarator startY BinaryOperation - MemberReference beginAt MemberReference startX LocalVariableDeclaration BasicType double VariableDeclarator endX BinaryOperation - MemberReference endAt BinaryOperation % MemberReference endAt Literal 1 LocalVariableDeclaration BasicType double VariableDeclarator endY BinaryOperation - MemberReference endAt MemberReference endX LocalVariableDeclaration BasicType int VariableDeclarator scale Cast BasicType int MethodInvocation Math MemberReference tierVert log10 StatementExpression Assignment MemberReference endY ClassCreator MethodInvocation MemberReference scale MemberReference RoundingMode HALF_EVEN setScale MethodInvocation doubleValue ReferenceType BigDecimal MemberReference endY = StatementExpression Assignment MemberReference startY ClassCreator MethodInvocation MemberReference scale MemberReference RoundingMode HALF_EVEN setScale MethodInvocation doubleValue ReferenceType BigDecimal MemberReference startY = LocalVariableDeclaration BasicType double VariableDeclarator xInc BinaryOperation / Literal 1.0d MemberReference tierVert StatementExpression Assignment MemberReference xInc ClassCreator MethodInvocation MemberReference scale MemberReference RoundingMode HALF_EVEN setScale MethodInvocation doubleValue ReferenceType BigDecimal MemberReference xInc = ForStatement ForControl BinaryOperation <= MemberReference startX MemberReference endX MemberReference ++ startX BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator itY MemberReference startY WhileStatement BinaryOperation <= MemberReference itY MemberReference endY BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator boxId BinaryOperation + MemberReference startX MemberReference itY StatementExpression MethodInvocation shape MemberReference boxId addBox StatementExpression Assignment MemberReference itY MemberReference xInc += StatementExpression Assignment MemberReference itY ClassCreator MethodInvocation MemberReference scale MemberReference RoundingMode HALF_EVEN setScale MethodInvocation doubleValue ReferenceType BigDecimal MemberReference itY = End End ReturnStatement MemberReference shape MethodDeclaration Modifier public ReferenceType Filter getBoundingArea FormalParameter BasicType double latitude FormalParameter BasicType double longitude FormalParameter BasicType double miles LocalVariableDeclaration ReferenceType Shape VariableDeclarator shape MethodInvocation MemberReference latitude MemberReference longitude MemberReference miles getBoxShape ReturnStatement ClassCreator ReferenceType CartesianShapeFilter MemberReference shape MethodInvocation shape getTierId",0
667,667,,0
869,869,,1
919,919,,1
454,454,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.tokenattributes Import java.io.Serializable Import org.apache.lucene.util.AttributeImpl ClassDeclaration Modifier public /**
 * The start and end character offset of a Token. 
 */ OffsetAttributeImpl FieldDeclaration Modifier private BasicType int VariableDeclarator startOffset FieldDeclaration Modifier private BasicType int VariableDeclarator endOffset MethodDeclaration /** Returns this Token's starting offset, the position of the first character
  corresponding to this token in the source text.

  Note that the difference between endOffset() and startOffset() may not be
  equal to termText.length(), as the term text may have been altered by a
  stemmer or some other filter. */ Modifier public BasicType int startOffset ReturnStatement MemberReference startOffset MethodDeclaration /** Set the starting and ending offset.
    @see #startOffset() and #endOffset()*/ Modifier public setOffset FormalParameter BasicType int startOffset FormalParameter BasicType int endOffset StatementExpression Assignment This MemberReference startOffset MemberReference startOffset = StatementExpression Assignment This MemberReference endOffset MemberReference endOffset = MethodDeclaration /** Returns this Token's ending offset, one greater than the position of the
  last character corresponding to this token in the source text. The length
  of the token in the source text is (endOffset - startOffset). */ Modifier public BasicType int endOffset ReturnStatement MemberReference endOffset MethodDeclaration Modifier public Annotation Override clear StatementExpression Assignment MemberReference startOffset Literal 0 = StatementExpression Assignment MemberReference endOffset Literal 0 = MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object other IfStatement BinaryOperation == MemberReference other This BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference other ReferenceType OffsetAttributeImpl BlockStatement LocalVariableDeclaration ReferenceType OffsetAttributeImpl VariableDeclarator o Cast ReferenceType OffsetAttributeImpl MemberReference other ReturnStatement BinaryOperation && BinaryOperation == MemberReference o startOffset MemberReference startOffset BinaryOperation == MemberReference o endOffset MemberReference endOffset End ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator code MemberReference startOffset StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 31 MemberReference endOffset = ReturnStatement MemberReference code MethodDeclaration Modifier public Annotation Override copyTo FormalParameter ReferenceType AttributeImpl target LocalVariableDeclaration ReferenceType OffsetAttribute VariableDeclarator t Cast ReferenceType OffsetAttribute MemberReference target StatementExpression MethodInvocation t MemberReference startOffset MemberReference endOffset setOffset ReferenceType AttributeImpl ReferenceType OffsetAttribute ReferenceType Cloneable ReferenceType Serializable",0
796,796,,0
254,254,"CompilationUnit PackageDeclaration org.apache.lucene.store.je Import java.io.IOException Import com.sleepycat.je.DatabaseEntry Import com.sleepycat.je.DatabaseException ClassDeclaration Modifier public /**
 * Port of Andi Vajda's DbDirectory to Java Edition of Berkeley Database
 *
 */ Block FieldDeclaration Modifier protected ReferenceType DatabaseEntry VariableDeclarator key VariableDeclarator data ConstructorDeclaration Modifier protected Block FormalParameter ReferenceType File file IOException LocalVariableDeclaration BasicType byte VariableDeclarator fileKey MethodInvocation file getKey StatementExpression Assignment MemberReference key ClassCreator ReferenceType DatabaseEntry ArrayCreator BasicType byte BinaryOperation + MemberReference fileKey length Literal 8 = StatementExpression Assignment MemberReference data ClassCreator ReferenceType DatabaseEntry ArrayCreator BasicType byte MemberReference JEIndexOutput BLOCK_LEN = StatementExpression MethodInvocation System MemberReference fileKey Literal 0 MethodInvocation key getData Literal 0 MemberReference fileKey length arraycopy StatementExpression MethodInvocation Literal 0L seek MethodDeclaration Modifier protected BasicType byte getKey ReturnStatement MethodInvocation key getData MethodDeclaration Modifier protected BasicType byte getData ReturnStatement MethodInvocation data getData MethodDeclaration Modifier protected seek FormalParameter BasicType long position IOException LocalVariableDeclaration BasicType byte VariableDeclarator data MethodInvocation key getData LocalVariableDeclaration BasicType int VariableDeclarator index BinaryOperation - MemberReference data length Literal 8 StatementExpression Assignment MemberReference position MemberReference JEIndexOutput BLOCK_SHIFT >>>= StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference index Literal 0 data Cast BasicType byte BinaryOperation & Literal 0xff BinaryOperation >>> MemberReference position Literal 56 = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference index Literal 1 data Cast BasicType byte BinaryOperation & Literal 0xff BinaryOperation >>> MemberReference position Literal 48 = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference index Literal 2 data Cast BasicType byte BinaryOperation & Literal 0xff BinaryOperation >>> MemberReference position Literal 40 = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference index Literal 3 data Cast BasicType byte BinaryOperation & Literal 0xff BinaryOperation >>> MemberReference position Literal 32 = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference index Literal 4 data Cast BasicType byte BinaryOperation & Literal 0xff BinaryOperation >>> MemberReference position Literal 24 = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference index Literal 5 data Cast BasicType byte BinaryOperation & Literal 0xff BinaryOperation >>> MemberReference position Literal 16 = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference index Literal 6 data Cast BasicType byte BinaryOperation & Literal 0xff BinaryOperation >>> MemberReference position Literal 8 = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference index Literal 7 data Cast BasicType byte BinaryOperation & Literal 0xff BinaryOperation >>> MemberReference position Literal 0 = MethodDeclaration Modifier protected get FormalParameter ReferenceType JEDirectory directory IOException TryStatement StatementExpression MethodInvocation directory.blocks MemberReference directory txn MemberReference key MemberReference data Literal null get CatchClause CatchClauseParameter DatabaseException e ThrowStatement ClassCreator ReferenceType IOException MethodInvocation e getMessage MethodDeclaration Modifier protected put FormalParameter ReferenceType JEDirectory directory IOException TryStatement StatementExpression MethodInvocation directory.blocks MemberReference directory txn MemberReference key MemberReference data put CatchClause CatchClauseParameter DatabaseException e ThrowStatement ClassCreator ReferenceType IOException MethodInvocation e getMessage ReferenceType Object",1
561,561,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ NorwegianStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal ""a"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""e"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ede"" Literal 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ande"" Literal 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ende"" Literal 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ane"" Literal 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ene"" Literal 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""hetene"" Literal 6 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""erte"" Literal 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""en"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""heten"" Literal 9 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ar"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""er"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""heter"" Literal 12 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""s"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""as"" Literal 14 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""es"" Literal 14 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""edes"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""endes"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""enes"" Literal 16 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""hetenes"" Literal 19 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ens"" Literal 14 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""hetens"" Literal 21 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ers"" Literal 14 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ets"" Literal 14 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""et"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""het"" Literal 25 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ert"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ast"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""dt"" Literal - 1 Literal - 1 Literal """" This ClassCreator ReferenceType Among Literal ""vt"" Literal - 1 Literal - 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""leg"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eleg"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ig"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eig"" Literal 2 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""lig"" Literal 2 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""elig"" Literal 4 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""els"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""lov"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""elov"" Literal 7 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""slov"" Literal 7 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""hetslov"" Literal 9 Literal 1 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 1 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 48 Literal 0 Literal 128 FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_s_ending ArrayInitializer Literal 119 Literal 125 Literal 149 Literal 1 FieldDeclaration Modifier private BasicType int VariableDeclarator I_x FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 MethodDeclaration Modifier private copy_from FormalParameter ReferenceType NorwegianStemmer other StatementExpression Assignment MemberReference I_x MemberReference other I_x = StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference I_p1 MemberReference limit = StatementExpression Assignment MemberReference v_1 MemberReference cursor = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c BinaryOperation + MemberReference cursor Literal 3 IfStatement BinaryOperation || BinaryOperation > Literal 0 MemberReference c BinaryOperation > MemberReference c MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference c = StatementExpression Assignment MemberReference I_x MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference v_1 = WhileStatement golab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 248 in_grouping BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = BreakStatement golab0 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End WhileStatement golab2 Literal true BlockStatement DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 248 out_grouping BlockStatement BreakStatement lab3 End BreakStatement golab2 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement BinaryOperation < MemberReference I_p1 MemberReference I_x BlockStatement BreakStatement lab4 End StatementExpression Assignment MemberReference I_p1 MemberReference I_x = End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_main_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 29 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_s_ending Literal 98 Literal 122 in_grouping_b BlockStatement BreakStatement lab1 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = IfStatement MethodInvocation ! Literal 1 Literal ""k"" eq_s_b BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 248 out_grouping_b BlockStatement ReturnStatement Literal false End End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""er"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_consonant_pair LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_3 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement BinaryOperation == MethodInvocation MemberReference a_1 Literal 2 find_among_b Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_3 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_3 = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = IfStatement BinaryOperation <= MemberReference cursor MemberReference limit_backward BlockStatement ReturnStatement Literal false End StatementExpression MemberReference -- cursor StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation slice_del ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_other_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_p1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_p1 = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_2 Literal 11 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_2 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_main_suffix BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_2 = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_consonant_pair BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_other_suffix BlockStatement BreakStatement lab3 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = ReturnStatement Literal true ReferenceType SnowballProgram",0
899,899,,0
428,428,"CompilationUnit PackageDeclaration org.apache.lucene.demo.html InterfaceDeclaration Modifier public /**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */ HTMLParserConstants ConstantDeclaration /** End of File. */ BasicType int VariableDeclarator EOF Literal 0 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator ScriptStart Literal 1 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator TagName Literal 2 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator DeclName Literal 3 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator Comment1 Literal 4 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator Comment2 Literal 5 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator Word Literal 6 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator LET Literal 7 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator NUM Literal 8 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator HEX Literal 9 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator Entity Literal 10 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator Space Literal 11 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator SP Literal 12 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator Punct Literal 13 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator ScriptText Literal 14 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator ScriptEnd Literal 15 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator ArgName Literal 16 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator ArgEquals Literal 17 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator TagEnd Literal 18 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator ArgValue Literal 19 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator ArgQuote1 Literal 20 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator ArgQuote2 Literal 21 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator Quote1Text Literal 23 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator CloseQuote1 Literal 24 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator Quote2Text Literal 25 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator CloseQuote2 Literal 26 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator CommentText1 Literal 27 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator CommentEnd1 Literal 28 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator CommentText2 Literal 29 ConstantDeclaration /** RegularExpression Id. */ BasicType int VariableDeclarator CommentEnd2 Literal 30 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator DEFAULT Literal 0 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator WithinScript Literal 1 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator WithinTag Literal 2 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator AfterEquals Literal 3 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator WithinQuote1 Literal 4 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator WithinQuote2 Literal 5 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator WithinComment1 Literal 6 ConstantDeclaration /** Lexical state. */ BasicType int VariableDeclarator WithinComment2 Literal 7 ConstantDeclaration /** Literal token values. */ ReferenceType String VariableDeclarator tokenImage ArrayInitializer Literal ""<EOF>"" Literal ""\""<script\"""" Literal ""<TagName>"" Literal ""<DeclName>"" Literal ""\""<!--\"""" Literal ""\""<!\"""" Literal ""<Word>"" Literal ""<LET>"" Literal ""<NUM>"" Literal ""<HEX>"" Literal ""<Entity>"" Literal ""<Space>"" Literal ""<SP>"" Literal ""<Punct>"" Literal ""<ScriptText>"" Literal ""<ScriptEnd>"" Literal ""<ArgName>"" Literal ""\""=\"""" Literal ""<TagEnd>"" Literal ""<ArgValue>"" Literal ""\""\\\'\"""" Literal ""\""\\\""\"""" Literal ""<token of kind 22>"" Literal ""<Quote1Text>"" Literal ""<CloseQuote1>"" Literal ""<Quote2Text>"" Literal ""<CloseQuote2>"" Literal ""<CommentText1>"" Literal ""\""-->\"""" Literal ""<CommentText2>"" Literal ""\"">\""""",0
352,352,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.feeds Import java.util.ArrayList Import java.util.StringTokenizer Import org.apache.lucene.index.Term Import org.apache.lucene.search.PhraseQuery Import org.apache.lucene.search.Query ClassDeclaration Modifier public /**
 * Create sloppy phrase queries for performance test, in an index created using simple doc maker.
 */ SimpleSloppyPhraseQueryMaker MethodDeclaration Modifier protected Annotation Override ReferenceType Query prepareQueries Exception LocalVariableDeclaration ReferenceType String VariableDeclarator words LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType String VariableDeclarator w ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference SingleDocSource DOC_TEXT WhileStatement BinaryOperation && MethodInvocation st hasMoreTokens BinaryOperation < MethodInvocation w size Literal 100 BlockStatement StatementExpression MethodInvocation w MethodInvocation st nextToken add End StatementExpression Assignment MemberReference words MethodInvocation w ArrayCreator ReferenceType String Literal 0 toArray = LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType Query VariableDeclarator queries ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Query ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator slop Literal 0 BinaryOperation < MemberReference slop Literal 8 MemberReference ++ slop BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator qlen Literal 2 BinaryOperation < MemberReference qlen Literal 6 MemberReference ++ qlen BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator wd Literal 0 BinaryOperation < MemberReference wd BinaryOperation - BinaryOperation - MemberReference words length MemberReference qlen MemberReference slop MemberReference ++ wd BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator remainedSlop MemberReference slop LocalVariableDeclaration ReferenceType PhraseQuery VariableDeclarator q ClassCreator ReferenceType PhraseQuery StatementExpression MethodInvocation q MemberReference slop setSlop LocalVariableDeclaration BasicType int VariableDeclarator wind MemberReference wd ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference qlen MemberReference ++ i BlockStatement StatementExpression MethodInvocation q ClassCreator ReferenceType Term MemberReference DocMaker BODY_FIELD MemberReference ArraySelector MemberReference ++ wind words add IfStatement BinaryOperation > MemberReference remainedSlop Literal 0 BlockStatement StatementExpression MemberReference -- remainedSlop StatementExpression MemberReference ++ wind End End StatementExpression MethodInvocation queries MemberReference q add StatementExpression Assignment MemberReference remainedSlop MemberReference slop = StatementExpression Assignment MemberReference q ClassCreator ReferenceType PhraseQuery = StatementExpression MethodInvocation q BinaryOperation + MemberReference slop BinaryOperation * Literal 2 MemberReference qlen setSlop StatementExpression Assignment MemberReference wind BinaryOperation - BinaryOperation + BinaryOperation + MemberReference wd MemberReference qlen MemberReference remainedSlop Literal 1 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference qlen MemberReference ++ i BlockStatement StatementExpression MethodInvocation q ClassCreator ReferenceType Term MemberReference DocMaker BODY_FIELD MemberReference ArraySelector MemberReference -- wind words add IfStatement BinaryOperation > MemberReference remainedSlop Literal 0 BlockStatement StatementExpression MemberReference -- remainedSlop StatementExpression MemberReference -- wind End End StatementExpression MethodInvocation queries MemberReference q add End End End ReturnStatement MethodInvocation queries ArrayCreator ReferenceType Query Literal 0 toArray ReferenceType SimpleQueryMaker",0
314,314,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.IOException Import java.io.File ClassDeclaration Modifier public /**
 * Simple standalone tool that forever acquires & releases a
 * lock using a specific LockFactory.  Run without any args
 * to see usage.
 *
 * @see VerifyingLockFactory
 * @see LockVerifyServer
 */ LockStressTest MethodDeclaration Modifier public static main FormalParameter ReferenceType String args Exception IfStatement BinaryOperation != MemberReference args length Literal 6 BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\nUsage: java org.apache.lucene.store.LockStressTest myID verifierHostOrIP verifierPort lockFactoryClassName lockDirName sleepTime\n"" Literal ""\n"" Literal ""  myID = int from 0 .. 255 (should be unique for test process)\n"" Literal ""  verifierHostOrIP = host name or IP address where LockVerifyServer is running\n"" Literal ""  verifierPort = port that LockVerifyServer is listening on\n"" Literal ""  lockFactoryClassName = primary LockFactory class that we will use\n"" Literal ""  lockDirName = path to the lock directory (only set for Simple/NativeFSLockFactory\n"" Literal ""  sleepTimeMS = milliseconds to pause betweeen each lock obtain/release\n"" Literal ""\n"" Literal ""You should run multiple instances of this process, each with its own\n"" Literal ""unique ID, and each pointing to the same lock directory, to verify\n"" Literal ""that locking is working correctly.\n"" Literal ""\n"" Literal ""Make sure you are first running LockVerifyServer.\n"" Literal ""\n"" println StatementExpression MethodInvocation System Literal 1 exit End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator myID MethodInvocation Integer MemberReference ArraySelector Literal 0 args parseInt IfStatement BinaryOperation || BinaryOperation < MemberReference myID Literal 0 BinaryOperation > MemberReference myID Literal 255 BlockStatement StatementExpression MethodInvocation System.out Literal ""myID must be a unique int 0..255"" println StatementExpression MethodInvocation System Literal 1 exit End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator verifierHost MemberReference ArraySelector Literal 1 args LocalVariableDeclaration Modifier final BasicType int VariableDeclarator verifierPort MethodInvocation Integer MemberReference ArraySelector Literal 2 args parseInt LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator lockFactoryClassName MemberReference ArraySelector Literal 3 args LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator lockDirName MemberReference ArraySelector Literal 4 args LocalVariableDeclaration Modifier final BasicType int VariableDeclarator sleepTimeMS MethodInvocation Integer MemberReference ArraySelector Literal 5 args parseInt LocalVariableDeclaration ReferenceType LockFactory VariableDeclarator lockFactory TryStatement StatementExpression Assignment MemberReference lockFactory MethodInvocation Class MethodInvocation ClassReference ReferenceType LockFactory asSubclass MethodInvocation newInstance MemberReference lockFactoryClassName forName = CatchClause CatchClauseParameter IllegalAccessException e ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""IllegalAccessException when instantiating LockClass "" MemberReference lockFactoryClassName CatchClause CatchClauseParameter InstantiationException e ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""InstantiationException when instantiating LockClass "" MemberReference lockFactoryClassName CatchClause CatchClauseParameter ClassCastException e ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + BinaryOperation + Literal ""unable to cast LockClass "" MemberReference lockFactoryClassName Literal "" instance to a LockFactory"" CatchClause CatchClauseParameter ClassNotFoundException e ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""unable to find LockClass "" MemberReference lockFactoryClassName LocalVariableDeclaration ReferenceType File VariableDeclarator lockDir ClassCreator ReferenceType File MemberReference lockDirName IfStatement BinaryOperation instanceof MemberReference lockFactory ReferenceType FSLockFactory BlockStatement StatementExpression Cast ReferenceType FSLockFactory MemberReference lockFactory End StatementExpression MethodInvocation lockFactory Literal ""test"" setLockPrefix LocalVariableDeclaration ReferenceType LockFactory VariableDeclarator verifyLF ClassCreator ReferenceType VerifyingLockFactory Cast BasicType byte MemberReference myID MemberReference lockFactory MemberReference verifierHost MemberReference verifierPort LocalVariableDeclaration ReferenceType Lock VariableDeclarator l MethodInvocation verifyLF Literal ""test.lock"" makeLock WhileStatement Literal true BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator obtained Literal false TryStatement StatementExpression Assignment MemberReference obtained MethodInvocation l Literal 10 obtain = CatchClause CatchClauseParameter LockObtainFailedException e StatementExpression MethodInvocation System.out Literal ""x"" print IfStatement MemberReference obtained BlockStatement StatementExpression MethodInvocation System.out Literal ""l"" print StatementExpression MethodInvocation l release End StatementExpression MethodInvocation Thread MemberReference sleepTimeMS sleep End",0
843,843,,1
879,879,,1
376,376,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import java.io.Closeable InterfaceDeclaration Modifier public /** TermDocs provides an interface for enumerating &lt;document, frequency&gt;
 pairs for a term.  <p> The document portion names each document containing
 the term.  Documents are indicated by number.  The frequency portion gives
 the number of times the term occurred in each document.  <p> The pairs are
 ordered by document number.

 @see IndexReader#termDocs()
 */ TermDocs MethodDeclaration /** Sets this to the data for a term.
   * The enumeration is reset to the start of the data for this term.
   */ seek FormalParameter ReferenceType Term term IOException MethodDeclaration /** Sets this to the data for the current term in a {@link TermEnum}.
   * This may be optimized in some implementations.
   */ seek FormalParameter ReferenceType TermEnum termEnum IOException MethodDeclaration /** Returns the current document number.  <p> This is invalid until {@link
   #next()} is called for the first time.*/ BasicType int doc MethodDeclaration /** Returns the frequency of the term within the current document.  <p> This
   is invalid until {@link #next()} is called for the first time.*/ BasicType int freq MethodDeclaration /** Moves to the next pair in the enumeration.  <p> Returns true iff there is
   such a next pair in the enumeration. */ BasicType boolean next IOException MethodDeclaration /** Attempts to read multiple entries from the enumeration, up to length of
   * <i>docs</i>.  Document numbers are stored in <i>docs</i>, and term
   * frequencies are stored in <i>freqs</i>.  The <i>freqs</i> array must be as
   * long as the <i>docs</i> array.
   *
   * <p>Returns the number of entries read.  Zero is only returned when the
   * stream has been exhausted.  */ BasicType int read FormalParameter BasicType int docs FormalParameter BasicType int freqs IOException MethodDeclaration /** Skips entries to the first beyond the current whose document number is
   * greater than or equal to <i>target</i>. <p>Returns true iff there is such
   * an entry.  <p>Behaves as if written: <pre>
   *   boolean skipTo(int target) {
   *     do {
   *       if (!next())
   * 	     return false;
   *     } while (target > doc());
   *     return true;
   *   }
   * </pre>
   * Some implementations are considerably more efficient than that.
   */ BasicType boolean skipTo FormalParameter BasicType int target IOException MethodDeclaration /** Frees associated resources. */ close IOException ReferenceType Closeable",0
190,190,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.utils Import java.io.BufferedReader Import java.io.ByteArrayInputStream Import java.io.IOException Import java.io.Reader Import java.util.ArrayList Import java.util.List Import java.util.Collections Import java.util.HashMap Import java.util.Properties Import java.util.StringTokenizer ClassDeclaration Modifier public /**
 * Perf run configuration properties.
 * <p>
 * Numeric property containing "":"", e.g. ""10:100:5"" is interpreted 
 * as array of numeric values. It is extracted once, on first use, and 
 * maintain a round number to return the appropriate value.
 * <p>
 * The config property ""work.dir"" tells where is the root of 
 * docs data dirs and indexes dirs. It is set to either of: <ul>
 * <li>value supplied for it in the alg file;</li>
 * <li>otherwise, value of System property ""benchmark.work.dir"";</li>
 * <li>otherwise, ""work"".</li>
 * </ul>
 */ Config FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NEW_LINE MethodInvocation System Literal ""line.separator"" getProperty FieldDeclaration Modifier private BasicType int VariableDeclarator roundNumber Literal 0 FieldDeclaration Modifier private ReferenceType Properties VariableDeclarator props FieldDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Object VariableDeclarator valByRound ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Object FieldDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator colForValByRound ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String FieldDeclaration Modifier private ReferenceType String VariableDeclarator algorithmText ConstructorDeclaration Modifier public /**
   * Read both algorithm and config properties.
   * @param algReader from where to read algorithm and config properties.
   * @throws IOException
   */ Config FormalParameter ReferenceType Reader algReader IOException LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType String VariableDeclarator lines ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator r ClassCreator ReferenceType BufferedReader MemberReference algReader LocalVariableDeclaration BasicType int VariableDeclarator lastConfigLine Literal 0 ForStatement ForControl VariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation r readLine BinaryOperation != MemberReference line Literal null Assignment MemberReference line MethodInvocation r readLine = BlockStatement StatementExpression MethodInvocation lines MemberReference line add IfStatement BinaryOperation > MethodInvocation line Literal '=' indexOf Literal 0 BlockStatement StatementExpression Assignment MemberReference lastConfigLine MethodInvocation lines size = End End StatementExpression MethodInvocation r close LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference lastConfigLine MemberReference ++ i BlockStatement StatementExpression MethodInvocation sb MethodInvocation lines MemberReference i get append StatementExpression MethodInvocation sb MemberReference NEW_LINE append End StatementExpression Assignment This MemberReference props ClassCreator ReferenceType Properties = StatementExpression MethodInvocation props ClassCreator ReferenceType ByteArrayInputStream MethodInvocation sb MethodInvocation getBytes toString load IfStatement BinaryOperation == MethodInvocation props Literal ""work.dir"" get Literal null BlockStatement StatementExpression MethodInvocation props Literal ""work.dir"" MethodInvocation System Literal ""benchmark.work.dir"" Literal ""work"" getProperty setProperty End IfStatement MethodInvocation Boolean MethodInvocation booleanValue MethodInvocation props Literal ""print.props"" Literal ""true"" getProperty valueOf BlockStatement StatementExpression MethodInvocation printProps End StatementExpression Assignment MemberReference sb ClassCreator ReferenceType StringBuffer = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference lastConfigLine BinaryOperation < MemberReference i MethodInvocation lines size MemberReference ++ i BlockStatement StatementExpression MethodInvocation sb MethodInvocation lines MemberReference i get append StatementExpression MethodInvocation sb MemberReference NEW_LINE append End StatementExpression Assignment MemberReference algorithmText MethodInvocation sb toString = ConstructorDeclaration Modifier public /**
   * Create config without algorithm - useful for a programmatic perf test.
   * @param props - configuration properties.
   * @throws IOException
   */ Config FormalParameter ReferenceType Properties props StatementExpression Assignment This MemberReference props MemberReference props = IfStatement MethodInvocation Boolean MethodInvocation booleanValue MethodInvocation props Literal ""print.props"" Literal ""true"" getProperty valueOf BlockStatement StatementExpression MethodInvocation printProps End MethodDeclaration Modifier private printProps StatementExpression MethodInvocation System.out Literal ""------------> config properties:"" println LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator propKeys ClassCreator ReferenceType ArrayList MethodInvocation props keySet StatementExpression MethodInvocation Collections MemberReference propKeys sort ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator propName MemberReference propKeys BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + MemberReference propName Literal "" = "" MethodInvocation props MemberReference propName getProperty println End StatementExpression MethodInvocation System.out Literal ""-------------------------------"" println MethodDeclaration /**
   * Return a string property.
   * @param name name of property.
   * @param dflt default value.
   * @return a string property.
   */ Modifier public ReferenceType String get FormalParameter ReferenceType String name FormalParameter ReferenceType String dflt ReturnStatement MethodInvocation props MemberReference name MemberReference dflt getProperty MethodDeclaration /**
   * Set a property.
   * Note: once a multiple values property is set, it can no longer be modified.
   * @param name name of property.
   * @param value either single or multiple property value (multiple values are separated by "":"")
   * @throws Exception 
   */ Modifier public set FormalParameter ReferenceType String name FormalParameter ReferenceType String value Exception IfStatement BinaryOperation != MethodInvocation valByRound MemberReference name get Literal null BlockStatement ThrowStatement ClassCreator ReferenceType Exception Literal ""Cannot modify a multi value property!"" End StatementExpression MethodInvocation props MemberReference name MemberReference value setProperty MethodDeclaration /**
   * Return an int property.
   * If the property contain "":"", e.g. ""10:100:5"", it is interpreted 
   * as array of ints. It is extracted once, on first call
   * to get() it, and a by-round-value is returned. 
   * @param name name of property
   * @param dflt default value
   * @return a int property.
   */ Modifier public BasicType int get FormalParameter ReferenceType String name FormalParameter BasicType int dflt LocalVariableDeclaration BasicType int VariableDeclarator vals Cast BasicType int MethodInvocation valByRound MemberReference name get IfStatement BinaryOperation != MemberReference vals Literal null BlockStatement ReturnStatement MemberReference ArraySelector BinaryOperation % MemberReference roundNumber MemberReference vals length vals End LocalVariableDeclaration ReferenceType String VariableDeclarator sval MethodInvocation props MemberReference name BinaryOperation + Literal """" MemberReference dflt getProperty IfStatement BinaryOperation < MethodInvocation sval Literal "":"" indexOf Literal 0 BlockStatement ReturnStatement MethodInvocation Integer MemberReference sval parseInt End LocalVariableDeclaration BasicType int VariableDeclarator k MethodInvocation sval Literal "":"" indexOf LocalVariableDeclaration ReferenceType String VariableDeclarator colName MethodInvocation sval Literal 0 MemberReference k substring StatementExpression Assignment MemberReference sval MethodInvocation sval BinaryOperation + MemberReference k Literal 1 substring = StatementExpression MethodInvocation colForValByRound MemberReference name MemberReference colName put StatementExpression Assignment MemberReference vals MethodInvocation MemberReference sval propToIntArray = StatementExpression MethodInvocation valByRound MemberReference name MemberReference vals put ReturnStatement MemberReference ArraySelector BinaryOperation % MemberReference roundNumber MemberReference vals length vals MethodDeclaration /**
   * Return a double property.
   * If the property contain "":"", e.g. ""10:100:5"", it is interpreted 
   * as array of doubles. It is extracted once, on first call
   * to get() it, and a by-round-value is returned. 
   * @param name name of property
   * @param dflt default value
   * @return a double property.
   */ Modifier public BasicType double get FormalParameter ReferenceType String name FormalParameter BasicType double dflt LocalVariableDeclaration BasicType double VariableDeclarator vals Cast BasicType double MethodInvocation valByRound MemberReference name get IfStatement BinaryOperation != MemberReference vals Literal null BlockStatement ReturnStatement MemberReference ArraySelector BinaryOperation % MemberReference roundNumber MemberReference vals length vals End LocalVariableDeclaration ReferenceType String VariableDeclarator sval MethodInvocation props MemberReference name BinaryOperation + Literal """" MemberReference dflt getProperty IfStatement BinaryOperation < MethodInvocation sval Literal "":"" indexOf Literal 0 BlockStatement ReturnStatement MethodInvocation Double MemberReference sval parseDouble End LocalVariableDeclaration BasicType int VariableDeclarator k MethodInvocation sval Literal "":"" indexOf LocalVariableDeclaration ReferenceType String VariableDeclarator colName MethodInvocation sval Literal 0 MemberReference k substring StatementExpression Assignment MemberReference sval MethodInvocation sval BinaryOperation + MemberReference k Literal 1 substring = StatementExpression MethodInvocation colForValByRound MemberReference name MemberReference colName put StatementExpression Assignment MemberReference vals MethodInvocation MemberReference sval propToDoubleArray = StatementExpression MethodInvocation valByRound MemberReference name MemberReference vals put ReturnStatement MemberReference ArraySelector BinaryOperation % MemberReference roundNumber MemberReference vals length vals MethodDeclaration /**
   * Return a boolean property.
   * If the property contain "":"", e.g. ""true.true.false"", it is interpreted 
   * as array of booleans. It is extracted once, on first call
   * to get() it, and a by-round-value is returned. 
   * @param name name of property
   * @param dflt default value
   * @return a int property.
   */ Modifier public BasicType boolean get FormalParameter ReferenceType String name FormalParameter BasicType boolean dflt LocalVariableDeclaration BasicType boolean VariableDeclarator vals Cast BasicType boolean MethodInvocation valByRound MemberReference name get IfStatement BinaryOperation != MemberReference vals Literal null BlockStatement ReturnStatement MemberReference ArraySelector BinaryOperation % MemberReference roundNumber MemberReference vals length vals End LocalVariableDeclaration ReferenceType String VariableDeclarator sval MethodInvocation props MemberReference name BinaryOperation + Literal """" MemberReference dflt getProperty IfStatement BinaryOperation < MethodInvocation sval Literal "":"" indexOf Literal 0 BlockStatement ReturnStatement MethodInvocation Boolean MethodInvocation booleanValue MemberReference sval valueOf End LocalVariableDeclaration BasicType int VariableDeclarator k MethodInvocation sval Literal "":"" indexOf LocalVariableDeclaration ReferenceType String VariableDeclarator colName MethodInvocation sval Literal 0 MemberReference k substring StatementExpression Assignment MemberReference sval MethodInvocation sval BinaryOperation + MemberReference k Literal 1 substring = StatementExpression MethodInvocation colForValByRound MemberReference name MemberReference colName put StatementExpression Assignment MemberReference vals MethodInvocation MemberReference sval propToBooleanArray = StatementExpression MethodInvocation valByRound MemberReference name MemberReference vals put ReturnStatement MemberReference ArraySelector BinaryOperation % MemberReference roundNumber MemberReference vals length vals MethodDeclaration /**
   * Increment the round number, for config values that are extracted by round number. 
   * @return the new round number.
   */ Modifier public BasicType int newRound StatementExpression MemberReference ++ roundNumber LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator MethodInvocation BinaryOperation - MemberReference roundNumber Literal 1 append MethodInvocation Literal ""-->"" append MethodInvocation MemberReference roundNumber append ReferenceType StringBuffer Literal ""--> Round "" IfStatement BinaryOperation > MethodInvocation valByRound size Literal 0 BlockStatement StatementExpression MethodInvocation sb Literal "": "" append ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator name MethodInvocation valByRound keySet BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator a MethodInvocation valByRound MemberReference name get IfStatement BinaryOperation instanceof MemberReference a BasicType int BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator ai Cast BasicType int MemberReference a LocalVariableDeclaration BasicType int VariableDeclarator n1 BinaryOperation % BinaryOperation - MemberReference roundNumber Literal 1 MemberReference ai length LocalVariableDeclaration BasicType int VariableDeclarator n2 BinaryOperation % MemberReference roundNumber MemberReference ai length StatementExpression MethodInvocation sb MethodInvocation MemberReference name append MethodInvocation Literal "":"" append MethodInvocation MemberReference ArraySelector MemberReference n1 ai append MethodInvocation Literal ""-->"" append MethodInvocation MemberReference ArraySelector MemberReference n2 ai append Literal ""  "" append IfStatement BinaryOperation instanceof MemberReference a BasicType double BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator ad Cast BasicType double MemberReference a LocalVariableDeclaration BasicType int VariableDeclarator n1 BinaryOperation % BinaryOperation - MemberReference roundNumber Literal 1 MemberReference ad length LocalVariableDeclaration BasicType int VariableDeclarator n2 BinaryOperation % MemberReference roundNumber MemberReference ad length StatementExpression MethodInvocation sb MethodInvocation MemberReference name append MethodInvocation Literal "":"" append MethodInvocation MemberReference ArraySelector MemberReference n1 ad append MethodInvocation Literal ""-->"" append MethodInvocation MemberReference ArraySelector MemberReference n2 ad append Literal ""  "" append BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator ab Cast BasicType boolean MemberReference a LocalVariableDeclaration BasicType int VariableDeclarator n1 BinaryOperation % BinaryOperation - MemberReference roundNumber Literal 1 MemberReference ab length LocalVariableDeclaration BasicType int VariableDeclarator n2 BinaryOperation % MemberReference roundNumber MemberReference ab length StatementExpression MethodInvocation sb MethodInvocation MemberReference name append MethodInvocation Literal "":"" append MethodInvocation MemberReference ArraySelector MemberReference n1 ab append MethodInvocation Literal ""-->"" append MethodInvocation MemberReference ArraySelector MemberReference n2 ab append Literal ""  "" append End End End End StatementExpression MethodInvocation System.out println StatementExpression MethodInvocation System.out MethodInvocation sb toString println StatementExpression MethodInvocation System.out println ReturnStatement MemberReference roundNumber MethodDeclaration Modifier private BasicType int propToIntArray FormalParameter ReferenceType String s IfStatement BinaryOperation < MethodInvocation s Literal "":"" indexOf Literal 0 BlockStatement ReturnStatement ArrayCreator BasicType int ArrayInitializer MethodInvocation Integer MemberReference s parseInt End LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType Integer VariableDeclarator a ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Integer LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference s Literal "":"" WhileStatement MethodInvocation st hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator t MethodInvocation st nextToken StatementExpression MethodInvocation a MethodInvocation Integer MemberReference t valueOf add End LocalVariableDeclaration BasicType int VariableDeclarator res ArrayCreator BasicType int MethodInvocation a size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation a size MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i res MethodInvocation a MethodInvocation intValue MemberReference i get = End ReturnStatement MemberReference res MethodDeclaration Modifier private BasicType double propToDoubleArray FormalParameter ReferenceType String s IfStatement BinaryOperation < MethodInvocation s Literal "":"" indexOf Literal 0 BlockStatement ReturnStatement ArrayCreator BasicType double ArrayInitializer MethodInvocation Double MemberReference s parseDouble End LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType Double VariableDeclarator a ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Double LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference s Literal "":"" WhileStatement MethodInvocation st hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator t MethodInvocation st nextToken StatementExpression MethodInvocation a MethodInvocation Double MemberReference t valueOf add End LocalVariableDeclaration BasicType double VariableDeclarator res ArrayCreator BasicType double MethodInvocation a size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation a size MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i res MethodInvocation a MethodInvocation doubleValue MemberReference i get = End ReturnStatement MemberReference res MethodDeclaration Modifier private BasicType boolean propToBooleanArray FormalParameter ReferenceType String s IfStatement BinaryOperation < MethodInvocation s Literal "":"" indexOf Literal 0 BlockStatement ReturnStatement ArrayCreator BasicType boolean ArrayInitializer MethodInvocation Boolean MethodInvocation booleanValue MemberReference s valueOf End LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType Boolean VariableDeclarator a ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Boolean LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference s Literal "":"" WhileStatement MethodInvocation st hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator t MethodInvocation st nextToken StatementExpression MethodInvocation a ClassCreator ReferenceType Boolean MemberReference t add End LocalVariableDeclaration BasicType boolean VariableDeclarator res ArrayCreator BasicType boolean MethodInvocation a size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation a size MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i res MethodInvocation a MethodInvocation booleanValue MemberReference i get = End ReturnStatement MemberReference res MethodDeclaration /**
   * @return names of params set by round, for reports title
   */ Modifier public ReferenceType String getColsNamesForValsByRound IfStatement BinaryOperation == MethodInvocation colForValByRound size Literal 0 BlockStatement ReturnStatement Literal """" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator name MethodInvocation colForValByRound keySet BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator colName MethodInvocation colForValByRound MemberReference name get StatementExpression MethodInvocation sb MethodInvocation MemberReference colName append Literal "" "" append End ReturnStatement MethodInvocation sb toString MethodDeclaration /**
   * @return values of params set by round, for reports lines.
   */ Modifier public ReferenceType String getColsValuesForValsByRound FormalParameter BasicType int roundNum IfStatement BinaryOperation == MethodInvocation colForValByRound size Literal 0 BlockStatement ReturnStatement Literal """" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator name MethodInvocation colForValByRound keySet BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator colName MethodInvocation colForValByRound MemberReference name get LocalVariableDeclaration ReferenceType String VariableDeclarator template BinaryOperation + Literal "" "" MemberReference colName IfStatement BinaryOperation < MemberReference roundNum Literal 0 BlockStatement StatementExpression MethodInvocation sb MethodInvocation Format Literal ""-"" MemberReference template formatPaddLeft append BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator a MethodInvocation valByRound MemberReference name get IfStatement BinaryOperation instanceof MemberReference a BasicType int BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator ai Cast BasicType int MemberReference a LocalVariableDeclaration BasicType int VariableDeclarator n BinaryOperation % MemberReference roundNum MemberReference ai length StatementExpression MethodInvocation sb MethodInvocation Format MemberReference ArraySelector MemberReference n ai MemberReference template format append IfStatement BinaryOperation instanceof MemberReference a BasicType double BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator ad Cast BasicType double MemberReference a LocalVariableDeclaration BasicType int VariableDeclarator n BinaryOperation % MemberReference roundNum MemberReference ad length StatementExpression MethodInvocation sb MethodInvocation Format Literal 2 MemberReference ArraySelector MemberReference n ad MemberReference template format append BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator ab Cast BasicType boolean MemberReference a LocalVariableDeclaration BasicType int VariableDeclarator n BinaryOperation % MemberReference roundNum MemberReference ab length StatementExpression MethodInvocation sb MethodInvocation Format BinaryOperation + Literal """" MemberReference ArraySelector MemberReference n ab MemberReference template formatPaddLeft append End End End End ReturnStatement MethodInvocation sb toString MethodDeclaration /**
   * @return the round number.
   */ Modifier public BasicType int getRoundNumber ReturnStatement MemberReference roundNumber MethodDeclaration /**
   * @return Returns the algorithmText.
   */ Modifier public ReferenceType String getAlgorithmText ReturnStatement MemberReference algorithmText",0
914,914,,1
739,739,,0
652,652,,1
456,456,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.de Import java.io.IOException Import java.util.Set Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute ClassDeclaration Modifier public final /**
 * A {@link TokenFilter} that stems German words. 
 * <p>
 * It supports a table of words that should
 * not be stemmed at all. The stemmer used can be changed at runtime after the
 * filter object is created (as long as it is a {@link GermanStemmer}).
 * </p>
 */ GermanStemFilter FieldDeclaration /**
     * The actual token in the input stream.
     */ Modifier private ReferenceType GermanStemmer VariableDeclarator stemmer Literal null FieldDeclaration Modifier private ReferenceType Set VariableDeclarator exclusionSet Literal null FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt ConstructorDeclaration Modifier public GermanStemFilter FormalParameter ReferenceType TokenStream in StatementExpression SuperConstructorInvocation MemberReference in StatementExpression Assignment MemberReference stemmer ClassCreator ReferenceType GermanStemmer = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = ConstructorDeclaration Modifier public /**
     * Builds a GermanStemFilter that uses an exclusion table.
     */ GermanStemFilter FormalParameter ReferenceType TokenStream in FormalParameter ReferenceType Set exclusionSet StatementExpression ExplicitConstructorInvocation MemberReference in StatementExpression Assignment This MemberReference exclusionSet MemberReference exclusionSet = MethodDeclaration /**
     * @return  Returns true for next token in the stream, or false at EOS
     */ Modifier public Annotation Override BasicType boolean incrementToken IOException IfStatement MethodInvocation input incrementToken BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator term MethodInvocation termAtt term IfStatement BinaryOperation || BinaryOperation == MemberReference exclusionSet Literal null MethodInvocation ! exclusionSet MemberReference term contains BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation stemmer MemberReference term stem IfStatement BinaryOperation && BinaryOperation != MemberReference s Literal null MethodInvocation ! s MemberReference term equals StatementExpression MethodInvocation termAtt MemberReference s setTermBuffer End End ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration /**
     * Set a alternative/custom {@link GermanStemmer} for this filter.
     */ Modifier public setStemmer FormalParameter ReferenceType GermanStemmer stemmer IfStatement BinaryOperation != MemberReference stemmer Literal null BlockStatement StatementExpression Assignment This MemberReference stemmer MemberReference stemmer = End MethodDeclaration /**
     * Set an alternative exclusion list for this filter.
     */ Modifier public setExclusionSet FormalParameter ReferenceType Set exclusionSet StatementExpression Assignment This MemberReference exclusionSet MemberReference exclusionSet = ReferenceType TokenFilter",0
71,71,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.nodes Import org.apache.lucene.queryParser.core.nodes.FieldQueryNode Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax ClassDeclaration Modifier public /**
 * A {@link WildcardQueryNode} represents wildcard query This does not apply to
 * phrases. Examples: a*b*c Fl?w? m?ke*g
 */ WildcardQueryNode FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 0L ConstructorDeclaration Modifier public /**
   * @param field
   *          - field name
   * @param text
   *          - value that contains one or more wild card characters (? or *)
   * @param begin
   *          - position in the query string
   * @param end
   *          - position in the query string
   */ WildcardQueryNode FormalParameter ReferenceType CharSequence field FormalParameter ReferenceType CharSequence text FormalParameter BasicType int begin FormalParameter BasicType int end StatementExpression SuperConstructorInvocation MemberReference field MemberReference text MemberReference begin MemberReference end ConstructorDeclaration Modifier public WildcardQueryNode FormalParameter ReferenceType FieldQueryNode fqn StatementExpression ExplicitConstructorInvocation MethodInvocation fqn getField MethodInvocation fqn getText MethodInvocation fqn getBegin MethodInvocation fqn getEnd MethodDeclaration Modifier public Annotation Override ReferenceType CharSequence toQueryString FormalParameter ReferenceType EscapeQuerySyntax escaper IfStatement MethodInvocation This MemberReference field isDefaultField BlockStatement ReturnStatement MethodInvocation MemberReference escaper getTermEscaped BlockStatement ReturnStatement BinaryOperation + BinaryOperation + This MemberReference field Literal "":"" MethodInvocation MemberReference escaper getTermEscaped End MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<wildcard field='"" This MemberReference field Literal ""' term='"" This MemberReference text Literal ""'/>"" MethodDeclaration Modifier public Annotation Override ReferenceType WildcardQueryNode cloneTree CloneNotSupportedException LocalVariableDeclaration ReferenceType WildcardQueryNode VariableDeclarator clone Cast ReferenceType WildcardQueryNode SuperMethodInvocation cloneTree ReturnStatement MemberReference clone ReferenceType FieldQueryNode",0
151,151,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geometry.shape InterfaceDeclaration Modifier public /**
 * Common set of operations available on 2d shapes.
 *
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ Geometry2D MethodDeclaration /**
   * Translate according to the vector
   * @param v
   */ Modifier public translate FormalParameter ReferenceType Vector2D v MethodDeclaration /**
   * Does the shape contain the given point
   * @param p
   */ Modifier public BasicType boolean contains FormalParameter ReferenceType Point2D p MethodDeclaration /**
   * Return the area
   */ Modifier public BasicType double area MethodDeclaration /**
   * Return the centroid
   */ Modifier public ReferenceType Point2D centroid MethodDeclaration /**
   * Returns information about how this shape intersects the given rectangle
   * @param r
   */ Modifier public ReferenceType IntersectCase intersect FormalParameter ReferenceType Rectangle r",0
319,319,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.document.Fieldable Import org.apache.lucene.store.IndexOutput Import org.apache.lucene.util.UnicodeUtil ClassDeclaration Modifier final TermVectorsTermsWriterPerField FieldDeclaration Modifier final ReferenceType TermVectorsTermsWriterPerThread VariableDeclarator perThread FieldDeclaration Modifier final ReferenceType TermsHashPerField VariableDeclarator termsHashPerField FieldDeclaration Modifier final ReferenceType TermVectorsTermsWriter VariableDeclarator termsWriter FieldDeclaration Modifier final ReferenceType FieldInfo VariableDeclarator fieldInfo FieldDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocState VariableDeclarator docState FieldDeclaration Modifier final ReferenceType FieldInvertState VariableDeclarator fieldState FieldDeclaration BasicType boolean VariableDeclarator doVectors FieldDeclaration BasicType boolean VariableDeclarator doVectorPositions FieldDeclaration BasicType boolean VariableDeclarator doVectorOffsets FieldDeclaration BasicType int VariableDeclarator maxNumPostings FieldDeclaration ReferenceType OffsetAttribute VariableDeclarator offsetAttribute Literal null ConstructorDeclaration Modifier public TermVectorsTermsWriterPerField FormalParameter ReferenceType TermsHashPerField termsHashPerField FormalParameter ReferenceType TermVectorsTermsWriterPerThread perThread FormalParameter ReferenceType FieldInfo fieldInfo StatementExpression Assignment This MemberReference termsHashPerField MemberReference termsHashPerField = StatementExpression Assignment This MemberReference perThread MemberReference perThread = StatementExpression Assignment This MemberReference termsWriter MemberReference perThread termsWriter = StatementExpression Assignment This MemberReference fieldInfo MemberReference fieldInfo = StatementExpression Assignment MemberReference docState MemberReference termsHashPerField docState = StatementExpression Assignment MemberReference fieldState MemberReference termsHashPerField fieldState = MethodDeclaration Annotation Override BasicType int getStreamCount ReturnStatement Literal 2 MethodDeclaration Annotation Override BasicType boolean start FormalParameter ReferenceType Fieldable fields FormalParameter BasicType int count StatementExpression Assignment MemberReference doVectors Literal false = StatementExpression Assignment MemberReference doVectorPositions Literal false = StatementExpression Assignment MemberReference doVectorOffsets Literal false = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference ArraySelector MemberReference i fields IfStatement BinaryOperation && MethodInvocation field isIndexed MethodInvocation field isTermVectorStored BlockStatement StatementExpression Assignment MemberReference doVectors Literal true = StatementExpression Assignment MemberReference doVectorPositions MethodInvocation field isStorePositionWithTermVector |= StatementExpression Assignment MemberReference doVectorOffsets MethodInvocation field isStoreOffsetWithTermVector |= End End IfStatement MemberReference doVectors BlockStatement IfStatement BinaryOperation == MemberReference perThread doc Literal null BlockStatement StatementExpression Assignment MemberReference perThread doc MethodInvocation termsWriter getPerDoc = StatementExpression Assignment MemberReference perThread.doc docID MemberReference docState docID = AssertStatement BinaryOperation == MemberReference perThread.doc numVectorFields Literal 0 AssertStatement BinaryOperation == Literal 0 MethodInvocation perThread.doc.tvf length AssertStatement BinaryOperation == Literal 0 MethodInvocation perThread.doc.tvf getFilePointer BlockStatement AssertStatement BinaryOperation == MemberReference perThread.doc docID MemberReference docState docID IfStatement BinaryOperation != MemberReference termsHashPerField numPostings Literal 0 StatementExpression MethodInvocation termsHashPerField reset End End End ReturnStatement MemberReference doVectors MethodDeclaration Modifier public abort MethodDeclaration /** Called once per field per document if term vectors
   *  are enabled, to write the vectors to
   *  RAMOutputStream, which is then quickly flushed to
   *  * the real term vectors files in the Directory. */ Annotation Override finish IOException AssertStatement MethodInvocation docState Literal ""TermVectorsTermsWriterPerField.finish start"" testPoint LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numPostings MemberReference termsHashPerField numPostings AssertStatement BinaryOperation >= MemberReference numPostings Literal 0 IfStatement BinaryOperation || MemberReference ! doVectors BinaryOperation == MemberReference numPostings Literal 0 ReturnStatement End IfStatement BinaryOperation > MemberReference numPostings MemberReference maxNumPostings StatementExpression Assignment MemberReference maxNumPostings MemberReference numPostings = End LocalVariableDeclaration Modifier final ReferenceType IndexOutput VariableDeclarator tvf MemberReference perThread.doc tvf AssertStatement MemberReference fieldInfo storeTermVector AssertStatement MethodInvocation perThread MemberReference fieldInfo vectorFieldsInOrder StatementExpression MethodInvocation perThread.doc MemberReference termsHashPerField.fieldInfo number addField LocalVariableDeclaration Modifier final ReferenceType RawPostingList VariableDeclarator postings MethodInvocation termsHashPerField sortPostings StatementExpression MethodInvocation tvf MemberReference numPostings writeVInt LocalVariableDeclaration BasicType byte VariableDeclarator bits Literal 0x0 IfStatement MemberReference doVectorPositions StatementExpression Assignment MemberReference bits MemberReference TermVectorsReader STORE_POSITIONS_WITH_TERMVECTOR |= End IfStatement MemberReference doVectorOffsets StatementExpression Assignment MemberReference bits MemberReference TermVectorsReader STORE_OFFSET_WITH_TERMVECTOR |= End StatementExpression MethodInvocation tvf MemberReference bits writeByte LocalVariableDeclaration BasicType int VariableDeclarator encoderUpto Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator lastTermBytesCount Literal 0 LocalVariableDeclaration Modifier final ReferenceType ByteSliceReader VariableDeclarator reader MemberReference perThread vectorSliceReader LocalVariableDeclaration Modifier final BasicType char VariableDeclarator charBuffers MemberReference perThread.termsHashPerThread.charPool buffers ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference numPostings MemberReference ++ j BlockStatement LocalVariableDeclaration Modifier final ReferenceType TermVectorsTermsWriter ReferenceType PostingList VariableDeclarator posting Cast ReferenceType TermVectorsTermsWriter ReferenceType PostingList MemberReference ArraySelector MemberReference j postings LocalVariableDeclaration Modifier final BasicType int VariableDeclarator freq MemberReference posting freq LocalVariableDeclaration Modifier final BasicType char VariableDeclarator text2 MemberReference ArraySelector BinaryOperation >> MemberReference posting textStart MemberReference DocumentsWriter CHAR_BLOCK_SHIFT charBuffers LocalVariableDeclaration Modifier final BasicType int VariableDeclarator start2 BinaryOperation & MemberReference posting textStart MemberReference DocumentsWriter CHAR_BLOCK_MASK LocalVariableDeclaration Modifier final ReferenceType UnicodeUtil ReferenceType UTF8Result VariableDeclarator utf8Result MemberReference perThread ArraySelector MemberReference encoderUpto utf8Results StatementExpression MethodInvocation UnicodeUtil MemberReference text2 MemberReference start2 MemberReference utf8Result UTF16toUTF8 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator termBytesCount MemberReference utf8Result length LocalVariableDeclaration BasicType int VariableDeclarator prefix Literal 0 IfStatement BinaryOperation > MemberReference j Literal 0 BlockStatement LocalVariableDeclaration Modifier final BasicType byte VariableDeclarator lastTermBytes MemberReference perThread ArraySelector BinaryOperation - Literal 1 MemberReference encoderUpto MemberReference result utf8Results LocalVariableDeclaration Modifier final BasicType byte VariableDeclarator termBytes MemberReference perThread ArraySelector MemberReference encoderUpto MemberReference result utf8Results WhileStatement BinaryOperation && BinaryOperation < MemberReference prefix MemberReference lastTermBytesCount BinaryOperation < MemberReference prefix MemberReference termBytesCount BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference prefix lastTermBytes MemberReference ArraySelector MemberReference prefix termBytes BreakStatement End StatementExpression MemberReference ++ prefix End End StatementExpression Assignment MemberReference encoderUpto BinaryOperation - Literal 1 MemberReference encoderUpto = StatementExpression Assignment MemberReference lastTermBytesCount MemberReference termBytesCount = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator suffix BinaryOperation - MemberReference termBytesCount MemberReference prefix StatementExpression MethodInvocation tvf MemberReference prefix writeVInt StatementExpression MethodInvocation tvf MemberReference suffix writeVInt StatementExpression MethodInvocation tvf MemberReference utf8Result result MemberReference prefix MemberReference suffix writeBytes StatementExpression MethodInvocation tvf MemberReference freq writeVInt IfStatement MemberReference doVectorPositions BlockStatement StatementExpression MethodInvocation termsHashPerField MemberReference reader MemberReference posting Literal 0 initReader StatementExpression MethodInvocation reader MemberReference tvf writeTo End IfStatement MemberReference doVectorOffsets BlockStatement StatementExpression MethodInvocation termsHashPerField MemberReference reader MemberReference posting Literal 1 initReader StatementExpression MethodInvocation reader MemberReference tvf writeTo End End StatementExpression MethodInvocation termsHashPerField reset StatementExpression MethodInvocation perThread.termsHashPerThread Literal false reset MethodDeclaration shrinkHash StatementExpression MethodInvocation termsHashPerField MemberReference maxNumPostings shrinkHash StatementExpression Assignment MemberReference maxNumPostings Literal 0 = MethodDeclaration Annotation Override start FormalParameter ReferenceType Fieldable f IfStatement MemberReference doVectorOffsets BlockStatement StatementExpression Assignment MemberReference offsetAttribute MethodInvocation fieldState.attributeSource ClassReference ReferenceType OffsetAttribute addAttribute = BlockStatement StatementExpression Assignment MemberReference offsetAttribute Literal null = End MethodDeclaration Annotation Override newTerm FormalParameter ReferenceType RawPostingList p0 AssertStatement MethodInvocation docState Literal ""TermVectorsTermsWriterPerField.newTerm start"" testPoint LocalVariableDeclaration ReferenceType TermVectorsTermsWriter ReferenceType PostingList VariableDeclarator p Cast ReferenceType TermVectorsTermsWriter ReferenceType PostingList MemberReference p0 StatementExpression Assignment MemberReference p freq Literal 1 = IfStatement MemberReference doVectorOffsets BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator startOffset BinaryOperation + MemberReference fieldState offset MethodInvocation offsetAttribute startOffset Statement LocalVariableDeclaration BasicType int VariableDeclarator endOffset BinaryOperation + MemberReference fieldState offset MethodInvocation offsetAttribute endOffset StatementExpression MethodInvocation termsHashPerField Literal 1 MemberReference startOffset writeVInt StatementExpression MethodInvocation termsHashPerField Literal 1 BinaryOperation - MemberReference endOffset MemberReference startOffset writeVInt StatementExpression Assignment MemberReference p lastOffset MemberReference endOffset = End IfStatement MemberReference doVectorPositions BlockStatement StatementExpression MethodInvocation termsHashPerField Literal 0 MemberReference fieldState position writeVInt StatementExpression Assignment MemberReference p lastPosition MemberReference fieldState position = End MethodDeclaration Annotation Override addTerm FormalParameter ReferenceType RawPostingList p0 AssertStatement MethodInvocation docState Literal ""TermVectorsTermsWriterPerField.addTerm start"" testPoint LocalVariableDeclaration ReferenceType TermVectorsTermsWriter ReferenceType PostingList VariableDeclarator p Cast ReferenceType TermVectorsTermsWriter ReferenceType PostingList MemberReference p0 StatementExpression MemberReference ++ p freq IfStatement MemberReference doVectorOffsets BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator startOffset BinaryOperation + MemberReference fieldState offset MethodInvocation offsetAttribute startOffset Statement LocalVariableDeclaration BasicType int VariableDeclarator endOffset BinaryOperation + MemberReference fieldState offset MethodInvocation offsetAttribute endOffset StatementExpression MethodInvocation termsHashPerField Literal 1 BinaryOperation - MemberReference startOffset MemberReference p lastOffset writeVInt StatementExpression MethodInvocation termsHashPerField Literal 1 BinaryOperation - MemberReference endOffset MemberReference startOffset writeVInt StatementExpression Assignment MemberReference p lastOffset MemberReference endOffset = End IfStatement MemberReference doVectorPositions BlockStatement StatementExpression MethodInvocation termsHashPerField Literal 0 BinaryOperation - MemberReference fieldState position MemberReference p lastPosition writeVInt StatementExpression Assignment MemberReference p lastPosition MemberReference fieldState position = End MethodDeclaration Annotation Override skippingLongTerm ReferenceType TermsHashConsumerPerField",0
158,158,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.search.function Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.FieldCache Import java.io.IOException ClassDeclaration Modifier public /**
 * Expert: obtains the ordinal of the field value from the default Lucene 
 * {@link org.apache.lucene.search.FieldCache Fieldcache} using getStringIndex().
 * <p>
 * The native lucene index order is used to assign an ordinal value for each field value.
 * <p
 * Field values (terms) are lexicographically ordered by unicode value, and numbered starting at 1.
 * <p>
 * Example:
 * <br>If there were only three field values: ""apple"",""banana"",""pear""
 * <br>then ord(""apple"")=1, ord(""banana"")=2, ord(""pear"")=3
 * <p>
 * WARNING: 
 * ord() depends on the position in an index and can thus change 
 * when other documents are inserted or deleted,
 * or if a MultiSearcher is used. 
 *
 * <p><font color=""#FF0000"">
 * WARNING: The status of the <b>search.function</b> package is experimental. 
 * The APIs introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 *
 * <p><b>NOTE</b>: with the switch in 2.9 to segment-based
 * searching, if {@link #getValues} is invoked with a
 * composite (multi-segment) reader, this can easily cause
 * double RAM usage for the values in the FieldCache.  It's
 * best to switch your application to pass only atomic
 * (single segment) readers to this API.</p>
 */ OrdFieldSource FieldDeclaration Modifier protected ReferenceType String VariableDeclarator field ConstructorDeclaration Modifier public /** 
   * Constructor for a certain field.
   * @param field field whose values order is used.  
   */ OrdFieldSource FormalParameter ReferenceType String field StatementExpression Assignment This MemberReference field MemberReference field = MethodDeclaration Modifier public Annotation Override ReferenceType String description ReturnStatement BinaryOperation + BinaryOperation + Literal ""ord("" MemberReference field Literal ')' MethodDeclaration Modifier public Annotation Override ReferenceType DocValues getValues FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator arr MethodInvocation FieldCache.DEFAULT MemberReference order MemberReference reader MemberReference field getStringIndex ReturnStatement ClassCreator ReferenceType DocValues MethodDeclaration Modifier public Annotation Override BasicType float floatVal FormalParameter BasicType int doc ReturnStatement Cast BasicType float MemberReference ArraySelector MemberReference doc arr MethodDeclaration Modifier public Annotation Override ReferenceType String strVal FormalParameter BasicType int doc ReturnStatement MethodInvocation Integer MemberReference ArraySelector MemberReference doc arr toString MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter BasicType int doc ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation description Literal '=' MethodInvocation MemberReference doc intVal MethodDeclaration Annotation Override ReferenceType Object getInnerArray ReturnStatement MemberReference arr MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation != MethodInvocation o getClass ClassReference ReferenceType OrdFieldSource ReturnStatement Literal false End LocalVariableDeclaration ReferenceType OrdFieldSource VariableDeclarator other Cast ReferenceType OrdFieldSource MemberReference o ReturnStatement This MemberReference field MethodInvocation MemberReference other field equals FieldDeclaration Modifier private final static BasicType int VariableDeclarator hcode ClassReference MethodInvocation hashCode ReferenceType OrdFieldSource MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement BinaryOperation + MemberReference hcode MethodInvocation field hashCode ReferenceType ValueSource",0
411,411,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.ar Import java.io.IOException Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute ClassDeclaration Modifier public final /**
 * A {@link TokenFilter} that applies {@link ArabicNormalizer} to normalize the orthography.
 * 
 */ ArabicNormalizationFilter FieldDeclaration Modifier protected ReferenceType ArabicNormalizer VariableDeclarator normalizer Literal null FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt ConstructorDeclaration Modifier public ArabicNormalizationFilter FormalParameter ReferenceType TokenStream input StatementExpression SuperConstructorInvocation MemberReference input StatementExpression Assignment MemberReference normalizer ClassCreator ReferenceType ArabicNormalizer = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken IOException IfStatement MethodInvocation input incrementToken BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator newlen MethodInvocation normalizer MethodInvocation termAtt termBuffer MethodInvocation termAtt termLength normalize StatementExpression MethodInvocation termAtt MemberReference newlen setTermLength ReturnStatement Literal true End ReturnStatement Literal false ReferenceType TokenFilter",0
93,93,"CompilationUnit PackageDeclaration org.tartarus.snowball.ext Import org.tartarus.snowball.SnowballProgram Import org.tartarus.snowball.Among ClassDeclaration Modifier public /**
 * Generated class implementing code defined by a snowball script.
 */ RomanianStemmer FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_0 ArrayInitializer ClassCreator ReferenceType Among Literal """" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""I"" Literal 0 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""U"" Literal 0 Literal 2 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_1 ArrayInitializer ClassCreator ReferenceType Among Literal ""ea"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""aţia"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""aua"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""iua"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""aţie"" Literal - 1 Literal 7 Literal """" This ClassCreator ReferenceType Among Literal ""ele"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ile"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""iile"" Literal 6 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""iei"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""atei"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ii"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ului"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ul"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""elor"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ilor"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""iilor"" Literal 14 Literal 4 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_2 ArrayInitializer ClassCreator ReferenceType Among Literal ""icala"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""iciva"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ativa"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""itiva"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""icale"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""aţiune"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""iţiune"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""atoare"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""itoare"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ătoare"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""icitate"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""abilitate"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ibilitate"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ivitate"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""icive"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ative"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""itive"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""icali"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""atori"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""icatori"" Literal 18 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""itori"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ători"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""icitati"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""abilitati"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ivitati"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""icivi"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ativi"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""itivi"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""icităi"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""abilităi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ivităi"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""icităţi"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""abilităţi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ivităţi"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ical"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ator"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""icator"" Literal 35 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""itor"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""ător"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""iciv"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ativ"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""itiv"" Literal - 1 Literal 6 Literal """" This ClassCreator ReferenceType Among Literal ""icală"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""icivă"" Literal - 1 Literal 4 Literal """" This ClassCreator ReferenceType Among Literal ""ativă"" Literal - 1 Literal 5 Literal """" This ClassCreator ReferenceType Among Literal ""itivă"" Literal - 1 Literal 6 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_3 ArrayInitializer ClassCreator ReferenceType Among Literal ""ica"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""abila"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ibila"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""oasa"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ata"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ita"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""anta"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ista"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""uta"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iva"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ic"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ice"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""abile"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ibile"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""isme"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""iune"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""oase"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ate"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""itate"" Literal 17 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ite"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ante"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iste"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ute"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ive"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ici"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""abili"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ibili"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iuni"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""atori"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""osi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ati"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""itati"" Literal 30 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iti"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""anti"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""isti"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""uti"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""işti"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ivi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ităi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""oşi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ităţi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""abil"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ibil"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ism"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ator"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""os"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""at"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""it"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ant"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ist"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ut"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iv"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ică"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""abilă"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ibilă"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""oasă"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ată"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ită"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""antă"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""istă"" Literal - 1 Literal 3 Literal """" This ClassCreator ReferenceType Among Literal ""ută"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ivă"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_4 ArrayInitializer ClassCreator ReferenceType Among Literal ""ea"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ia"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""esc"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ăsc"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ind"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ând"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""are"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ere"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ire"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âre"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""se"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ase"" Literal 10 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""sese"" Literal 10 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ise"" Literal 10 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""use"" Literal 10 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âse"" Literal 10 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eşte"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ăşte"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eze"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ai"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eai"" Literal 19 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iai"" Literal 19 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""sei"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""eşti"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ăşti"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ui"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ezi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aşi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""seşi"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""aseşi"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""seseşi"" Literal 29 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""iseşi"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""useşi"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âseşi"" Literal 29 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""işi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""uşi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âşi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""aţi"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""eaţi"" Literal 38 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iaţi"" Literal 38 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eţi"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""iţi"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""âţi"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""arăţi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""serăţi"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""aserăţi"" Literal 45 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""seserăţi"" Literal 45 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""iserăţi"" Literal 45 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""userăţi"" Literal 45 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âserăţi"" Literal 45 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irăţi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""urăţi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ârăţi"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""am"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eam"" Literal 54 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iam"" Literal 54 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""em"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""asem"" Literal 57 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""sesem"" Literal 57 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""isem"" Literal 57 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""usem"" Literal 57 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âsem"" Literal 57 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""im"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""âm"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""ăm"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""arăm"" Literal 65 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""serăm"" Literal 65 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""aserăm"" Literal 67 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""seserăm"" Literal 67 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""iserăm"" Literal 67 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""userăm"" Literal 67 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âserăm"" Literal 67 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""irăm"" Literal 65 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""urăm"" Literal 65 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ârăm"" Literal 65 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""au"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""eau"" Literal 76 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iau"" Literal 76 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""indu"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ându"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ez"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ească"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ară"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""seră"" Literal - 1 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""aseră"" Literal 84 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""seseră"" Literal 84 Literal 2 Literal """" This ClassCreator ReferenceType Among Literal ""iseră"" Literal 84 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""useră"" Literal 84 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âseră"" Literal 84 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""iră"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ură"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""âră"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ează"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private ReferenceType Among VariableDeclarator a_5 ArrayInitializer ClassCreator ReferenceType Among Literal ""a"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""e"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ie"" Literal 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""i"" Literal - 1 Literal 1 Literal """" This ClassCreator ReferenceType Among Literal ""ă"" Literal - 1 Literal 1 Literal """" This FieldDeclaration Modifier private final static BasicType char VariableDeclarator g_v ArrayInitializer Literal 17 Literal 65 Literal 16 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 0 Literal 2 Literal 32 Literal 0 Literal 0 Literal 4 FieldDeclaration Modifier private BasicType boolean VariableDeclarator B_standard_suffix_removed FieldDeclaration Modifier private BasicType int VariableDeclarator I_p2 FieldDeclaration Modifier private BasicType int VariableDeclarator I_p1 FieldDeclaration Modifier private BasicType int VariableDeclarator I_pV MethodDeclaration Modifier private copy_from FormalParameter ReferenceType RomanianStemmer other StatementExpression Assignment MemberReference B_standard_suffix_removed MemberReference other B_standard_suffix_removed = StatementExpression Assignment MemberReference I_p2 MemberReference other I_p2 = StatementExpression Assignment MemberReference I_p1 MemberReference other I_p1 = StatementExpression Assignment MemberReference I_pV MemberReference other I_pV = StatementExpression SuperMethodInvocation MemberReference other copy_from MethodDeclaration Modifier private BasicType boolean r_prelude LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 WhileStatement replab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab1 Literal false BlockStatement WhileStatement golab2 Literal true BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference bra MemberReference cursor = DoStatement lab4 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab5 Literal false BlockStatement IfStatement MethodInvocation ! Literal 1 Literal ""u"" eq_s BlockStatement BreakStatement lab5 End StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab5 End StatementExpression MethodInvocation Literal ""U"" slice_from BreakStatement lab4 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = IfStatement MethodInvocation ! Literal 1 Literal ""i"" eq_s BlockStatement BreakStatement lab3 End StatementExpression Assignment MemberReference ket MemberReference cursor = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab3 End StatementExpression MethodInvocation Literal ""I"" slice_from End StatementExpression Assignment MemberReference cursor MemberReference v_2 = BreakStatement golab2 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor End ContinueStatement replab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = BreakStatement replab0 End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_mark_regions LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_8 StatementExpression Assignment MemberReference I_pV MemberReference limit = StatementExpression Assignment MemberReference I_p1 MemberReference limit = StatementExpression Assignment MemberReference I_p2 MemberReference limit = StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab2 End DoStatement lab3 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 MemberReference cursor = DoStatement lab4 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 out_grouping BlockStatement BreakStatement lab4 End WhileStatement golab5 Literal true BlockStatement DoStatement lab6 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab6 End BreakStatement golab5 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab4 End StatementExpression MemberReference ++ cursor End BreakStatement lab3 End StatementExpression Assignment MemberReference cursor MemberReference v_3 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab2 End WhileStatement golab7 Literal true BlockStatement DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 out_grouping BlockStatement BreakStatement lab8 End BreakStatement golab7 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab2 End StatementExpression MemberReference ++ cursor End End BreakStatement lab1 End StatementExpression Assignment MemberReference cursor MemberReference v_2 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 out_grouping BlockStatement BreakStatement lab0 End DoStatement lab9 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 MemberReference cursor = DoStatement lab10 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 out_grouping BlockStatement BreakStatement lab10 End WhileStatement golab11 Literal true BlockStatement DoStatement lab12 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab12 End BreakStatement golab11 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab10 End StatementExpression MemberReference ++ cursor End BreakStatement lab9 End StatementExpression Assignment MemberReference cursor MemberReference v_6 = IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab0 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab0 End StatementExpression MemberReference ++ cursor End End StatementExpression Assignment MemberReference I_pV MemberReference cursor = End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference v_8 MemberReference cursor = DoStatement lab13 Literal false BlockStatement WhileStatement golab14 Literal true BlockStatement DoStatement lab15 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab15 End BreakStatement golab14 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab13 End StatementExpression MemberReference ++ cursor End WhileStatement golab16 Literal true BlockStatement DoStatement lab17 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 out_grouping BlockStatement BreakStatement lab17 End BreakStatement golab16 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab13 End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p1 MemberReference cursor = WhileStatement golab18 Literal true BlockStatement DoStatement lab19 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 in_grouping BlockStatement BreakStatement lab19 End BreakStatement golab18 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab13 End StatementExpression MemberReference ++ cursor End WhileStatement golab20 Literal true BlockStatement DoStatement lab21 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 out_grouping BlockStatement BreakStatement lab21 End BreakStatement golab20 End IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab13 End StatementExpression MemberReference ++ cursor End StatementExpression Assignment MemberReference I_p2 MemberReference cursor = End StatementExpression Assignment MemberReference cursor MemberReference v_8 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_postlude LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 WhileStatement replab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab1 Literal false BlockStatement StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_0 Literal 3 find_among = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement BreakStatement lab1 End StatementExpression Assignment MemberReference ket MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 BreakStatement lab1 SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""i"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""u"" slice_from BreakStatement SwitchStatementCase Literal 3 IfStatement BinaryOperation >= MemberReference cursor MemberReference limit BlockStatement BreakStatement lab1 End StatementExpression MemberReference ++ cursor BreakStatement End ContinueStatement replab0 End StatementExpression Assignment MemberReference cursor MemberReference v_1 = BreakStatement replab0 End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_RV IfStatement BinaryOperation <= MemberReference I_pV MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R1 IfStatement BinaryOperation <= MemberReference I_p1 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_R2 IfStatement BinaryOperation <= MemberReference I_p2 MemberReference cursor BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_step_0 LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_1 Literal 16 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""a"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""e"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation Literal ""i"" slice_from BreakStatement SwitchStatementCase Literal 5 BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! Literal 2 Literal ""ab"" eq_s_b BlockStatement BreakStatement lab0 End ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression MethodInvocation Literal ""i"" slice_from BreakStatement SwitchStatementCase Literal 6 StatementExpression MethodInvocation Literal ""at"" slice_from BreakStatement SwitchStatementCase Literal 7 StatementExpression MethodInvocation Literal ""aţi"" slice_from BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_combo_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_2 Literal 46 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R1 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation Literal ""abil"" slice_from BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation Literal ""ibil"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""iv"" slice_from BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation Literal ""ic"" slice_from BreakStatement SwitchStatementCase Literal 5 StatementExpression MethodInvocation Literal ""at"" slice_from BreakStatement SwitchStatementCase Literal 6 StatementExpression MethodInvocation Literal ""it"" slice_from BreakStatement End StatementExpression Assignment MemberReference B_standard_suffix_removed Literal true = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_standard_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 StatementExpression Assignment MemberReference B_standard_suffix_removed Literal false = WhileStatement replab0 Literal true BlockStatement StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_combo_suffix BlockStatement BreakStatement lab1 End ContinueStatement replab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = BreakStatement replab0 End StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_3 Literal 62 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_R2 BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 IfStatement MethodInvocation ! Literal 1 Literal ""ţ"" eq_s_b BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = StatementExpression MethodInvocation Literal ""t"" slice_from BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation Literal ""ist"" slice_from BreakStatement End StatementExpression Assignment MemberReference B_standard_suffix_removed Literal true = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_verb_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 StatementExpression Assignment MemberReference v_1 BinaryOperation - MemberReference limit MemberReference cursor = IfStatement BinaryOperation < MemberReference cursor MemberReference I_pV BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference cursor MemberReference I_pV = StatementExpression Assignment MemberReference v_2 MemberReference limit_backward = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_1 = StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_4 Literal 94 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false SwitchStatementCase Literal 1 DoStatement lab0 Literal false BlockStatement StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! MemberReference g_v Literal 97 Literal 259 out_grouping_b BlockStatement BreakStatement lab1 End BreakStatement lab0 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = IfStatement MethodInvocation ! Literal 1 Literal ""u"" eq_s_b BlockStatement StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal false End End StatementExpression MethodInvocation slice_del BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation slice_del BreakStatement End StatementExpression Assignment MemberReference limit_backward MemberReference v_2 = ReturnStatement Literal true MethodDeclaration Modifier private BasicType boolean r_vowel_suffix LocalVariableDeclaration BasicType int VariableDeclarator among_var StatementExpression Assignment MemberReference ket MemberReference cursor = StatementExpression Assignment MemberReference among_var MethodInvocation MemberReference a_5 Literal 5 find_among_b = IfStatement BinaryOperation == MemberReference among_var Literal 0 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference bra MemberReference cursor = IfStatement MethodInvocation ! r_RV BlockStatement ReturnStatement Literal false End SwitchStatement MemberReference among_var SwitchStatementCase Literal 0 ReturnStatement Literal false SwitchStatementCase Literal 1 StatementExpression MethodInvocation slice_del BreakStatement End ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean stem LocalVariableDeclaration BasicType int VariableDeclarator v_1 LocalVariableDeclaration BasicType int VariableDeclarator v_2 LocalVariableDeclaration BasicType int VariableDeclarator v_3 LocalVariableDeclaration BasicType int VariableDeclarator v_4 LocalVariableDeclaration BasicType int VariableDeclarator v_5 LocalVariableDeclaration BasicType int VariableDeclarator v_6 LocalVariableDeclaration BasicType int VariableDeclarator v_7 LocalVariableDeclaration BasicType int VariableDeclarator v_8 StatementExpression Assignment MemberReference v_1 MemberReference cursor = DoStatement lab0 Literal false BlockStatement IfStatement MethodInvocation ! r_prelude BlockStatement BreakStatement lab0 End End StatementExpression Assignment MemberReference cursor MemberReference v_1 = StatementExpression Assignment MemberReference v_2 MemberReference cursor = DoStatement lab1 Literal false BlockStatement IfStatement MethodInvocation ! r_mark_regions BlockStatement BreakStatement lab1 End End StatementExpression Assignment MemberReference cursor MemberReference v_2 = StatementExpression Assignment MemberReference limit_backward MemberReference cursor = StatementExpression Assignment MemberReference cursor MemberReference limit = StatementExpression Assignment MemberReference v_3 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab2 Literal false BlockStatement IfStatement MethodInvocation ! r_step_0 BlockStatement BreakStatement lab2 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_3 = StatementExpression Assignment MemberReference v_4 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab3 Literal false BlockStatement IfStatement MethodInvocation ! r_standard_suffix BlockStatement BreakStatement lab3 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_4 = StatementExpression Assignment MemberReference v_5 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab4 Literal false BlockStatement DoStatement lab5 Literal false BlockStatement StatementExpression Assignment MemberReference v_6 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab6 Literal false BlockStatement IfStatement MemberReference ! B_standard_suffix_removed BlockStatement BreakStatement lab6 End BreakStatement lab5 End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_6 = IfStatement MethodInvocation ! r_verb_suffix BlockStatement BreakStatement lab4 End End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_5 = StatementExpression Assignment MemberReference v_7 BinaryOperation - MemberReference limit MemberReference cursor = DoStatement lab7 Literal false BlockStatement IfStatement MethodInvocation ! r_vowel_suffix BlockStatement BreakStatement lab7 End End StatementExpression Assignment MemberReference cursor BinaryOperation - MemberReference limit MemberReference v_7 = StatementExpression Assignment MemberReference cursor MemberReference limit_backward = StatementExpression Assignment MemberReference v_8 MemberReference cursor = DoStatement lab8 Literal false BlockStatement IfStatement MethodInvocation ! r_postlude BlockStatement BreakStatement lab8 End End StatementExpression Assignment MemberReference cursor MemberReference v_8 = ReturnStatement Literal true ReferenceType SnowballProgram",0
707,707,,0
341,341,"CompilationUnit PackageDeclaration org.apache.lucene.util Import org.apache.lucene.LucenePackage ClassDeclaration Modifier public final /**
 * Some useful constants.
 **/ Constants ConstructorDeclaration Modifier private Constants FieldDeclaration /** The value of <tt>System.getProperty(""java.version"")<tt>. **/ Modifier public final static ReferenceType String VariableDeclarator JAVA_VERSION MethodInvocation System Literal ""java.version"" getProperty FieldDeclaration /** True iff this is Java version 1.1. */ Modifier public final static BasicType boolean VariableDeclarator JAVA_1_1 MethodInvocation JAVA_VERSION Literal ""1.1."" startsWith FieldDeclaration /** True iff this is Java version 1.2. */ Modifier public final static BasicType boolean VariableDeclarator JAVA_1_2 MethodInvocation JAVA_VERSION Literal ""1.2."" startsWith FieldDeclaration /** True iff this is Java version 1.3. */ Modifier public final static BasicType boolean VariableDeclarator JAVA_1_3 MethodInvocation JAVA_VERSION Literal ""1.3."" startsWith FieldDeclaration /** The value of <tt>System.getProperty(""os.name"")<tt>. **/ Modifier public final static ReferenceType String VariableDeclarator OS_NAME MethodInvocation System Literal ""os.name"" getProperty FieldDeclaration /** True iff running on Linux. */ Modifier public final static BasicType boolean VariableDeclarator LINUX MethodInvocation OS_NAME Literal ""Linux"" startsWith FieldDeclaration /** True iff running on Windows. */ Modifier public final static BasicType boolean VariableDeclarator WINDOWS MethodInvocation OS_NAME Literal ""Windows"" startsWith FieldDeclaration /** True iff running on SunOS. */ Modifier public final static BasicType boolean VariableDeclarator SUN_OS MethodInvocation OS_NAME Literal ""SunOS"" startsWith FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator OS_ARCH MethodInvocation System Literal ""os.arch"" getProperty FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator OS_VERSION MethodInvocation System Literal ""os.version"" getProperty FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator JAVA_VENDOR MethodInvocation System Literal ""java.vendor"" getProperty FieldDeclaration Modifier public final static BasicType boolean VariableDeclarator JRE_IS_64BIT LocalVariableDeclaration ReferenceType String VariableDeclarator x MethodInvocation System Literal ""sun.arch.data.model"" getProperty IfStatement BinaryOperation != MemberReference x Literal null BlockStatement StatementExpression Assignment MemberReference JRE_IS_64BIT BinaryOperation != MethodInvocation x Literal ""64"" indexOf Literal - 1 = BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference OS_ARCH Literal null BinaryOperation != MethodInvocation OS_ARCH Literal ""64"" indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference JRE_IS_64BIT Literal true = BlockStatement StatementExpression Assignment MemberReference JRE_IS_64BIT Literal false = End End MethodDeclaration Modifier private static ReferenceType String ident FormalParameter Modifier final ReferenceType String s ReturnStatement MethodInvocation s toString FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator LUCENE_MAIN_VERSION MethodInvocation Literal ""3.0"" ident FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator LUCENE_VERSION LocalVariableDeclaration ReferenceType Package VariableDeclarator pkg MethodInvocation LucenePackage get LocalVariableDeclaration ReferenceType String VariableDeclarator v TernaryExpression BinaryOperation == MemberReference pkg Literal null Literal null MethodInvocation pkg getImplementationVersion IfStatement BinaryOperation == MemberReference v Literal null BlockStatement StatementExpression Assignment MemberReference v BinaryOperation + MemberReference LUCENE_MAIN_VERSION Literal ""-dev"" = IfStatement MethodInvocation ! v MemberReference LUCENE_MAIN_VERSION startsWith BlockStatement StatementExpression Assignment MemberReference v BinaryOperation + BinaryOperation + MemberReference LUCENE_MAIN_VERSION Literal ""-dev "" MemberReference v = End End StatementExpression Assignment MemberReference LUCENE_VERSION MethodInvocation MemberReference v ident =",1
578,578,,0
528,528,"CompilationUnit PackageDeclaration org.apache.lucene.demo Import java.io  Import org.apache.lucene.document  Import org.apache.lucene.demo.html.HTMLParser ClassDeclaration Modifier public /** A utility for making Lucene Documents for HTML documents. */ HTMLDocument FieldDeclaration Modifier static BasicType char VariableDeclarator dirSep MethodInvocation System MethodInvocation Literal 0 charAt Literal ""file.separator"" getProperty MethodDeclaration Modifier public static ReferenceType String uid FormalParameter ReferenceType File f ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation f MethodInvocation MemberReference dirSep Literal ' ' replace getPath Literal "" "" MethodInvocation DateTools MethodInvocation f lastModified MemberReference DateTools.Resolution SECOND timeToString MethodDeclaration Modifier public static ReferenceType String uid2url FormalParameter ReferenceType String uid LocalVariableDeclaration ReferenceType String VariableDeclarator url MethodInvocation uid Literal ' ' Literal '/' replace ReturnStatement MethodInvocation url Literal 0 MethodInvocation url Literal '/' lastIndexOf substring MethodDeclaration Modifier public static ReferenceType Document Document FormalParameter ReferenceType File f IOException InterruptedException LocalVariableDeclaration ReferenceType Document VariableDeclarator doc ClassCreator ReferenceType Document StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""path"" MethodInvocation f MethodInvocation MemberReference dirSep Literal '/' replace getPath MemberReference Field.Store YES MemberReference Field.Index NOT_ANALYZED add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""modified"" MethodInvocation DateTools MethodInvocation f lastModified MemberReference DateTools.Resolution MINUTE timeToString MemberReference Field.Store YES MemberReference Field.Index NOT_ANALYZED add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""uid"" MethodInvocation MemberReference f uid MemberReference Field.Store NO MemberReference Field.Index NOT_ANALYZED add LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fis ClassCreator ReferenceType FileInputStream MemberReference f LocalVariableDeclaration ReferenceType HTMLParser VariableDeclarator parser ClassCreator ReferenceType HTMLParser MemberReference fis StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""contents"" MethodInvocation parser getReader add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""summary"" MethodInvocation parser getSummary MemberReference Field.Store YES MemberReference Field.Index NO add StatementExpression MethodInvocation doc ClassCreator ReferenceType Field Literal ""title"" MethodInvocation parser getTitle MemberReference Field.Store YES MemberReference Field.Index ANALYZED add ReturnStatement MemberReference doc ConstructorDeclaration Modifier private HTMLDocument",0
882,882,,0
596,596,,1
849,849,,1
605,605,,0
845,845,,0
28,28,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.tasks Import java.io.Reader Import java.util.List Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.benchmark.byTask.PerfRunData Import org.apache.lucene.benchmark.byTask.feeds.DocMaker Import org.apache.lucene.document.Document Import org.apache.lucene.document.Fieldable ClassDeclaration Modifier public /**
 * Simple task to test performance of tokenizers.  It just
 * creates a token stream for each field of the document and
 * read all tokens out of that stream.
 */ ReadTokensTask ConstructorDeclaration Modifier public ReadTokensTask FormalParameter ReferenceType PerfRunData runData StatementExpression SuperConstructorInvocation MemberReference runData FieldDeclaration Modifier private BasicType int VariableDeclarator totalTokenCount Literal 0 FieldDeclaration Modifier private ReferenceType Document VariableDeclarator doc Literal null MethodDeclaration Modifier public Annotation Override setup Exception StatementExpression SuperMethodInvocation setup LocalVariableDeclaration ReferenceType DocMaker VariableDeclarator docMaker MethodInvocation MethodInvocation getDocMaker getRunData StatementExpression Assignment MemberReference doc MethodInvocation docMaker makeDocument = MethodDeclaration Modifier protected Annotation Override ReferenceType String getLogMessage FormalParameter BasicType int recsCount ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""read "" MemberReference recsCount Literal "" docs; "" MemberReference totalTokenCount Literal "" tokens"" MethodDeclaration Modifier public Annotation Override tearDown Exception StatementExpression Assignment MemberReference doc Literal null = StatementExpression SuperMethodInvocation tearDown MethodDeclaration Modifier public Annotation Override BasicType int doLogic Exception LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Fieldable VariableDeclarator fields MethodInvocation doc getFields LocalVariableDeclaration ReferenceType Analyzer VariableDeclarator analyzer MethodInvocation MethodInvocation getAnalyzer getRunData LocalVariableDeclaration BasicType int VariableDeclarator tokenCount Literal 0 ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement LocalVariableDeclaration Modifier final ReferenceType TokenStream VariableDeclarator stream LocalVariableDeclaration Modifier final ReferenceType TokenStream VariableDeclarator streamValue MethodInvocation field tokenStreamValue IfStatement BinaryOperation != MemberReference streamValue Literal null StatementExpression Assignment MemberReference stream MemberReference streamValue = BlockStatement LocalVariableDeclaration Modifier final ReferenceType Reader VariableDeclarator reader LocalVariableDeclaration Modifier final ReferenceType Reader VariableDeclarator readerValue MethodInvocation field readerValue IfStatement BinaryOperation != MemberReference readerValue Literal null StatementExpression Assignment MemberReference reader MemberReference readerValue = BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator stringValue MethodInvocation field stringValue IfStatement BinaryOperation == MemberReference stringValue Literal null ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""field must have either TokenStream, String or Reader value"" End StatementExpression MethodInvocation stringReader MemberReference stringValue init StatementExpression Assignment MemberReference reader MemberReference stringReader = End StatementExpression Assignment MemberReference stream MethodInvocation analyzer MethodInvocation field name MemberReference reader reusableTokenStream = End StatementExpression MethodInvocation stream reset WhileStatement MethodInvocation stream incrementToken StatementExpression MemberReference ++ tokenCount End End StatementExpression Assignment MemberReference totalTokenCount MemberReference tokenCount += ReturnStatement MemberReference tokenCount FieldDeclaration ReferenceType ReusableStringReader VariableDeclarator stringReader ClassCreator ReferenceType ReusableStringReader ClassDeclaration Modifier private final static ReusableStringReader FieldDeclaration BasicType int VariableDeclarator upto FieldDeclaration BasicType int VariableDeclarator left FieldDeclaration ReferenceType String VariableDeclarator s MethodDeclaration init FormalParameter ReferenceType String s StatementExpression Assignment This MemberReference s MemberReference s = StatementExpression Assignment MemberReference left MethodInvocation s length = StatementExpression Assignment This MemberReference upto Literal 0 = MethodDeclaration Modifier public Annotation Override BasicType int read FormalParameter BasicType char c ReturnStatement MethodInvocation MemberReference c Literal 0 MemberReference c length read MethodDeclaration Modifier public Annotation Override BasicType int read FormalParameter BasicType char c FormalParameter BasicType int off FormalParameter BasicType int len IfStatement BinaryOperation > MemberReference left MemberReference len BlockStatement StatementExpression MethodInvocation s MemberReference upto BinaryOperation + MemberReference upto MemberReference len MemberReference c MemberReference off getChars StatementExpression Assignment MemberReference upto MemberReference len += StatementExpression Assignment MemberReference left MemberReference len -= ReturnStatement MemberReference len IfStatement BinaryOperation == Literal 0 MemberReference left BlockStatement ReturnStatement Literal - 1 BlockStatement StatementExpression MethodInvocation s MemberReference upto BinaryOperation + MemberReference upto MemberReference left MemberReference c MemberReference off getChars LocalVariableDeclaration BasicType int VariableDeclarator r MemberReference left StatementExpression Assignment MemberReference left Literal 0 = StatementExpression Assignment MemberReference upto MethodInvocation s length = ReturnStatement MemberReference r End End MethodDeclaration Modifier public Annotation Override close ReferenceType Reader ReferenceType PerfTask",0
109,109,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.queryParser.ParseException Import org.apache.lucene.queryParser.QueryParser Import org.apache.lucene.search.Query Import org.apache.lucene.xmlparser.DOMUtils Import org.apache.lucene.xmlparser.ParserException Import org.apache.lucene.xmlparser.QueryBuilder Import org.w3c.dom.Element Import org.apache.lucene.util.Version ClassDeclaration Modifier public /**
 * UserInputQueryBuilder uses 1 of 2 strategies for thread-safe parsing:
 * 1) Synchronizing access to ""parse"" calls on a previously supplied QueryParser
 * or..
 * 2) creating a new QueryParser object for each parse request
 */ UserInputQueryBuilder FieldDeclaration ReferenceType QueryParser VariableDeclarator unSafeParser FieldDeclaration Modifier private ReferenceType Analyzer VariableDeclarator analyzer FieldDeclaration Modifier private ReferenceType String VariableDeclarator defaultField ConstructorDeclaration Modifier public /**
	 * This constructor has the disadvantage of not being able to change choice of default field name
	 * @param parser thread un-safe query parser
	 */ UserInputQueryBuilder FormalParameter ReferenceType QueryParser parser StatementExpression Assignment This MemberReference unSafeParser MemberReference parser = ConstructorDeclaration Modifier public UserInputQueryBuilder FormalParameter ReferenceType String defaultField FormalParameter ReferenceType Analyzer analyzer StatementExpression Assignment This MemberReference analyzer MemberReference analyzer = StatementExpression Assignment This MemberReference defaultField MemberReference defaultField = MethodDeclaration Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation DOMUtils MemberReference e getText TryStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator q Literal null IfStatement BinaryOperation != MemberReference unSafeParser Literal null BlockStatement SynchronizedStatement MemberReference unSafeParser StatementExpression Assignment MemberReference q MethodInvocation unSafeParser MemberReference text parse = BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fieldName MethodInvocation DOMUtils MemberReference e Literal ""fieldName"" MemberReference defaultField getAttribute LocalVariableDeclaration ReferenceType QueryParser VariableDeclarator parser MethodInvocation MemberReference fieldName MemberReference analyzer createQueryParser StatementExpression Assignment MemberReference q MethodInvocation parser MemberReference text parse = End StatementExpression MethodInvocation q MethodInvocation DOMUtils MemberReference e Literal ""boost"" Literal 1.0f getAttribute setBoost ReturnStatement MemberReference q CatchClause CatchClauseParameter ParseException e1 ThrowStatement ClassCreator ReferenceType ParserException MethodInvocation e1 getMessage MethodDeclaration /**
	 * Method to create a QueryParser - designed to be overridden
	 * @param fieldName
	 * @param analyzer
	 * @return QueryParser
	 */ Modifier protected ReferenceType QueryParser createQueryParser FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Analyzer analyzer ReturnStatement ClassCreator ReferenceType QueryParser MemberReference Version LUCENE_CURRENT MemberReference fieldName MemberReference analyzer ReferenceType QueryBuilder",0
651,651,,0
695,695,,1
33,33,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.store.BufferedIndexInput Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexInput Import java.io.IOException Import java.util.Arrays ClassDeclaration TermVectorsReader FieldDeclaration Modifier final static BasicType int VariableDeclarator FORMAT_VERSION Literal 2 FieldDeclaration Modifier final static BasicType int VariableDeclarator FORMAT_VERSION2 Literal 3 FieldDeclaration Modifier final static BasicType int VariableDeclarator FORMAT_UTF8_LENGTH_IN_BYTES Literal 4 FieldDeclaration Modifier final static BasicType int VariableDeclarator FORMAT_CURRENT MemberReference FORMAT_UTF8_LENGTH_IN_BYTES FieldDeclaration Modifier final static BasicType int VariableDeclarator FORMAT_SIZE Literal 4 FieldDeclaration Modifier final static BasicType byte VariableDeclarator STORE_POSITIONS_WITH_TERMVECTOR Literal 0x1 FieldDeclaration Modifier final static BasicType byte VariableDeclarator STORE_OFFSET_WITH_TERMVECTOR Literal 0x2 FieldDeclaration Modifier private ReferenceType FieldInfos VariableDeclarator fieldInfos FieldDeclaration Modifier private ReferenceType IndexInput VariableDeclarator tvx FieldDeclaration Modifier private ReferenceType IndexInput VariableDeclarator tvd FieldDeclaration Modifier private ReferenceType IndexInput VariableDeclarator tvf FieldDeclaration Modifier private BasicType int VariableDeclarator size FieldDeclaration Modifier private BasicType int VariableDeclarator numTotalDocs FieldDeclaration Modifier private BasicType int VariableDeclarator docStoreOffset FieldDeclaration Modifier private final BasicType int VariableDeclarator format ConstructorDeclaration TermVectorsReader FormalParameter ReferenceType Directory d FormalParameter ReferenceType String segment FormalParameter ReferenceType FieldInfos fieldInfos CorruptIndexException IOException StatementExpression ExplicitConstructorInvocation MemberReference d MemberReference segment MemberReference fieldInfos MemberReference BufferedIndexInput BUFFER_SIZE ConstructorDeclaration TermVectorsReader FormalParameter ReferenceType Directory d FormalParameter ReferenceType String segment FormalParameter ReferenceType FieldInfos fieldInfos FormalParameter BasicType int readBufferSize CorruptIndexException IOException StatementExpression ExplicitConstructorInvocation MemberReference d MemberReference segment MemberReference fieldInfos MemberReference readBufferSize Literal - 1 Literal 0 ConstructorDeclaration TermVectorsReader FormalParameter ReferenceType Directory d FormalParameter ReferenceType String segment FormalParameter ReferenceType FieldInfos fieldInfos FormalParameter BasicType int readBufferSize FormalParameter BasicType int docStoreOffset FormalParameter BasicType int size CorruptIndexException IOException LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement IfStatement MethodInvocation d BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION fileExists BlockStatement StatementExpression Assignment MemberReference tvx MethodInvocation d BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames VECTORS_INDEX_EXTENSION MemberReference readBufferSize openInput = StatementExpression Assignment MemberReference format MethodInvocation MemberReference tvx checkValidFormat = StatementExpression Assignment MemberReference tvd MethodInvocation d BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames VECTORS_DOCUMENTS_EXTENSION MemberReference readBufferSize openInput = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator tvdFormat MethodInvocation MemberReference tvd checkValidFormat StatementExpression Assignment MemberReference tvf MethodInvocation d BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames VECTORS_FIELDS_EXTENSION MemberReference readBufferSize openInput = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator tvfFormat MethodInvocation MemberReference tvf checkValidFormat AssertStatement BinaryOperation == MemberReference format MemberReference tvdFormat AssertStatement BinaryOperation == MemberReference format MemberReference tvfFormat IfStatement BinaryOperation >= MemberReference format MemberReference FORMAT_VERSION2 BlockStatement AssertStatement BinaryOperation == BinaryOperation % BinaryOperation - MethodInvocation tvx length MemberReference FORMAT_SIZE Literal 16 Literal 0 StatementExpression Assignment MemberReference numTotalDocs Cast BasicType int BinaryOperation >> MethodInvocation tvx length Literal 4 = BlockStatement AssertStatement BinaryOperation == BinaryOperation % BinaryOperation - MethodInvocation tvx length MemberReference FORMAT_SIZE Literal 8 Literal 0 StatementExpression Assignment MemberReference numTotalDocs Cast BasicType int BinaryOperation >> MethodInvocation tvx length Literal 3 = End IfStatement BinaryOperation == Literal - 1 MemberReference docStoreOffset BlockStatement StatementExpression Assignment This MemberReference docStoreOffset Literal 0 = StatementExpression Assignment This MemberReference size MemberReference numTotalDocs = AssertStatement BinaryOperation || BinaryOperation == MemberReference size Literal 0 BinaryOperation == MemberReference numTotalDocs MemberReference size BlockStatement StatementExpression Assignment This MemberReference docStoreOffset MemberReference docStoreOffset = StatementExpression Assignment This MemberReference size MemberReference size = AssertStatement BinaryOperation >= MemberReference numTotalDocs BinaryOperation + MemberReference size MemberReference docStoreOffset BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""numTotalDocs="" MemberReference numTotalDocs Literal "" size="" MemberReference size Literal "" docStoreOffset="" MemberReference docStoreOffset End StatementExpression Assignment MemberReference format Literal 0 = End StatementExpression Assignment This MemberReference fieldInfos MemberReference fieldInfos = StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation close End MethodDeclaration ReferenceType IndexInput getTvdStream ReturnStatement MemberReference tvd MethodDeclaration ReferenceType IndexInput getTvfStream ReturnStatement MemberReference tvf MethodDeclaration Modifier private final seekTvx FormalParameter Modifier final BasicType int docNum IOException IfStatement BinaryOperation < MemberReference format MemberReference FORMAT_VERSION2 StatementExpression MethodInvocation tvx BinaryOperation + BinaryOperation * BinaryOperation + MemberReference docNum MemberReference docStoreOffset Literal 8L MemberReference FORMAT_SIZE seek StatementExpression MethodInvocation tvx BinaryOperation + BinaryOperation * BinaryOperation + MemberReference docNum MemberReference docStoreOffset Literal 16L MemberReference FORMAT_SIZE seek End MethodDeclaration BasicType boolean canReadRawDocs ReturnStatement BinaryOperation >= MemberReference format MemberReference FORMAT_UTF8_LENGTH_IN_BYTES MethodDeclaration /** Retrieve the length (in bytes) of the tvd and tvf
   *  entries for the next numDocs starting with
   *  startDocID.  This is used for bulk copying when
   *  merging segments, if the field numbers are
   *  congruent.  Once this returns, the tvf & tvd streams
   *  are seeked to the startDocID. */ Modifier final rawDocs FormalParameter BasicType int tvdLengths FormalParameter BasicType int tvfLengths FormalParameter BasicType int startDocID FormalParameter BasicType int numDocs IOException IfStatement BinaryOperation == MemberReference tvx Literal null BlockStatement StatementExpression MethodInvocation Arrays MemberReference tvdLengths Literal 0 fill StatementExpression MethodInvocation Arrays MemberReference tvfLengths Literal 0 fill ReturnStatement End IfStatement BinaryOperation < MemberReference format MemberReference FORMAT_VERSION2 ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""cannot read raw docs with older term vector formats"" End StatementExpression MethodInvocation MemberReference startDocID seekTvx LocalVariableDeclaration BasicType long VariableDeclarator tvdPosition MethodInvocation tvx readLong StatementExpression MethodInvocation tvd MemberReference tvdPosition seek LocalVariableDeclaration BasicType long VariableDeclarator tvfPosition MethodInvocation tvx readLong StatementExpression MethodInvocation tvf MemberReference tvfPosition seek LocalVariableDeclaration BasicType long VariableDeclarator lastTvdPosition MemberReference tvdPosition LocalVariableDeclaration BasicType long VariableDeclarator lastTvfPosition MemberReference tvfPosition LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 WhileStatement BinaryOperation < MemberReference count MemberReference numDocs BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator docID BinaryOperation + BinaryOperation + BinaryOperation + MemberReference docStoreOffset MemberReference startDocID MemberReference count Literal 1 AssertStatement BinaryOperation <= MemberReference docID MemberReference numTotalDocs IfStatement BinaryOperation < MemberReference docID MemberReference numTotalDocs BlockStatement StatementExpression Assignment MemberReference tvdPosition MethodInvocation tvx readLong = StatementExpression Assignment MemberReference tvfPosition MethodInvocation tvx readLong = BlockStatement StatementExpression Assignment MemberReference tvdPosition MethodInvocation tvd length = StatementExpression Assignment MemberReference tvfPosition MethodInvocation tvf length = AssertStatement BinaryOperation == MemberReference count BinaryOperation - MemberReference numDocs Literal 1 End StatementExpression Assignment MemberReference ArraySelector MemberReference count tvdLengths Cast BasicType int BinaryOperation - MemberReference tvdPosition MemberReference lastTvdPosition = StatementExpression Assignment MemberReference ArraySelector MemberReference count tvfLengths Cast BasicType int BinaryOperation - MemberReference tvfPosition MemberReference lastTvfPosition = StatementExpression MemberReference ++ count StatementExpression Assignment MemberReference lastTvdPosition MemberReference tvdPosition = StatementExpression Assignment MemberReference lastTvfPosition MemberReference tvfPosition = End MethodDeclaration Modifier private BasicType int checkValidFormat FormalParameter ReferenceType IndexInput in CorruptIndexException IOException LocalVariableDeclaration BasicType int VariableDeclarator format MethodInvocation in readInt IfStatement BinaryOperation > MemberReference format MemberReference FORMAT_CURRENT BlockStatement ThrowStatement ClassCreator ReferenceType CorruptIndexException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Incompatible format version: "" MemberReference format Literal "" expected "" MemberReference FORMAT_CURRENT Literal "" or less"" End ReturnStatement MemberReference format MethodDeclaration close IOException LocalVariableDeclaration ReferenceType IOException VariableDeclarator keep Literal null IfStatement BinaryOperation != MemberReference tvx Literal null TryStatement StatementExpression MethodInvocation tvx close CatchClause CatchClauseParameter IOException e IfStatement BinaryOperation == MemberReference keep Literal null StatementExpression Assignment MemberReference keep MemberReference e = End End IfStatement BinaryOperation != MemberReference tvd Literal null TryStatement StatementExpression MethodInvocation tvd close CatchClause CatchClauseParameter IOException e IfStatement BinaryOperation == MemberReference keep Literal null StatementExpression Assignment MemberReference keep MemberReference e = End End IfStatement BinaryOperation != MemberReference tvf Literal null TryStatement StatementExpression MethodInvocation tvf close CatchClause CatchClauseParameter IOException e IfStatement BinaryOperation == MemberReference keep Literal null StatementExpression Assignment MemberReference keep MemberReference e = End End IfStatement BinaryOperation != MemberReference keep Literal null ThrowStatement Cast ReferenceType IOException MethodInvocation keep fillInStackTrace End MethodDeclaration /**
   * 
   * @return The number of documents in the reader
   */ BasicType int size ReturnStatement MemberReference size MethodDeclaration Modifier public get FormalParameter BasicType int docNum FormalParameter ReferenceType String field FormalParameter ReferenceType TermVectorMapper mapper IOException IfStatement BinaryOperation != MemberReference tvx Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator fieldNumber MethodInvocation fieldInfos MemberReference field fieldNumber StatementExpression MethodInvocation MemberReference docNum seekTvx LocalVariableDeclaration BasicType long VariableDeclarator tvdPosition MethodInvocation tvx readLong StatementExpression MethodInvocation tvd MemberReference tvdPosition seek LocalVariableDeclaration BasicType int VariableDeclarator fieldCount MethodInvocation tvd readVInt LocalVariableDeclaration BasicType int VariableDeclarator number Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator found Literal - 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fieldCount MemberReference ++ i BlockStatement IfStatement BinaryOperation >= MemberReference format MemberReference FORMAT_VERSION StatementExpression Assignment MemberReference number MethodInvocation tvd readVInt = StatementExpression Assignment MemberReference number MethodInvocation tvd readVInt += End IfStatement BinaryOperation == MemberReference number MemberReference fieldNumber StatementExpression Assignment MemberReference found MemberReference i = End End IfStatement BinaryOperation != MemberReference found Literal - 1 BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator position IfStatement BinaryOperation >= MemberReference format MemberReference FORMAT_VERSION2 StatementExpression Assignment MemberReference position MethodInvocation tvx readLong = StatementExpression Assignment MemberReference position MethodInvocation tvd readVLong = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference found MemberReference ++ i StatementExpression Assignment MemberReference position MethodInvocation tvd readVLong += End StatementExpression MethodInvocation mapper MemberReference docNum setDocumentNumber StatementExpression MethodInvocation MemberReference field MemberReference position MemberReference mapper readTermVector BlockStatement End BlockStatement End MethodDeclaration /**
   * Retrieve the term vector for the given document and field
   * @param docNum The document number to retrieve the vector for
   * @param field The field within the document to retrieve
   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.
   * @throws IOException if there is an error reading the term vector files
   */ ReferenceType TermFreqVector get FormalParameter BasicType int docNum FormalParameter ReferenceType String field IOException LocalVariableDeclaration ReferenceType ParallelArrayTermVectorMapper VariableDeclarator mapper ClassCreator ReferenceType ParallelArrayTermVectorMapper StatementExpression MethodInvocation MemberReference docNum MemberReference field MemberReference mapper get ReturnStatement MethodInvocation mapper materializeVector MethodDeclaration Modifier private final ReferenceType String readFields FormalParameter BasicType int fieldCount IOException LocalVariableDeclaration BasicType int VariableDeclarator number Literal 0 LocalVariableDeclaration ReferenceType String VariableDeclarator fields ArrayCreator ReferenceType String MemberReference fieldCount ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fieldCount MemberReference ++ i BlockStatement IfStatement BinaryOperation >= MemberReference format MemberReference FORMAT_VERSION StatementExpression Assignment MemberReference number MethodInvocation tvd readVInt = StatementExpression Assignment MemberReference number MethodInvocation tvd readVInt += End StatementExpression Assignment MemberReference ArraySelector MemberReference i fields MethodInvocation fieldInfos MemberReference number fieldName = End ReturnStatement MemberReference fields MethodDeclaration Modifier private final BasicType long readTvfPointers FormalParameter BasicType int fieldCount IOException LocalVariableDeclaration BasicType long VariableDeclarator position IfStatement BinaryOperation >= MemberReference format MemberReference FORMAT_VERSION2 StatementExpression Assignment MemberReference position MethodInvocation tvx readLong = StatementExpression Assignment MemberReference position MethodInvocation tvd readVLong = End LocalVariableDeclaration BasicType long VariableDeclarator tvfPointers ArrayCreator BasicType long MemberReference fieldCount StatementExpression Assignment MemberReference ArraySelector Literal 0 tvfPointers MemberReference position = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference fieldCount MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference position MethodInvocation tvd readVLong += StatementExpression Assignment MemberReference ArraySelector MemberReference i tvfPointers MemberReference position = End ReturnStatement MemberReference tvfPointers MethodDeclaration /**
   * Return all term vectors stored for this document or null if the could not be read in.
   * 
   * @param docNum The document number to retrieve the vector for
   * @return All term frequency vectors
   * @throws IOException if there is an error reading the term vector files 
   */ ReferenceType TermFreqVector get FormalParameter BasicType int docNum IOException LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator result Literal null IfStatement BinaryOperation != MemberReference tvx Literal null BlockStatement StatementExpression MethodInvocation MemberReference docNum seekTvx LocalVariableDeclaration BasicType long VariableDeclarator tvdPosition MethodInvocation tvx readLong StatementExpression MethodInvocation tvd MemberReference tvdPosition seek LocalVariableDeclaration BasicType int VariableDeclarator fieldCount MethodInvocation tvd readVInt IfStatement BinaryOperation != MemberReference fieldCount Literal 0 BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fields MethodInvocation MemberReference fieldCount readFields LocalVariableDeclaration Modifier final BasicType long VariableDeclarator tvfPointers MethodInvocation MemberReference fieldCount readTvfPointers StatementExpression Assignment MemberReference result MethodInvocation MemberReference docNum MemberReference fields MemberReference tvfPointers readTermVectors = End BlockStatement End ReturnStatement MemberReference result MethodDeclaration Modifier public get FormalParameter BasicType int docNumber FormalParameter ReferenceType TermVectorMapper mapper IOException IfStatement BinaryOperation != MemberReference tvx Literal null BlockStatement StatementExpression MethodInvocation MemberReference docNumber seekTvx LocalVariableDeclaration BasicType long VariableDeclarator tvdPosition MethodInvocation tvx readLong StatementExpression MethodInvocation tvd MemberReference tvdPosition seek LocalVariableDeclaration BasicType int VariableDeclarator fieldCount MethodInvocation tvd readVInt IfStatement BinaryOperation != MemberReference fieldCount Literal 0 BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fields MethodInvocation MemberReference fieldCount readFields LocalVariableDeclaration Modifier final BasicType long VariableDeclarator tvfPointers MethodInvocation MemberReference fieldCount readTvfPointers StatementExpression MethodInvocation mapper MemberReference docNumber setDocumentNumber StatementExpression MethodInvocation MemberReference fields MemberReference tvfPointers MemberReference mapper readTermVectors End BlockStatement End MethodDeclaration Modifier private ReferenceType SegmentTermVector readTermVectors FormalParameter BasicType int docNum FormalParameter ReferenceType String fields FormalParameter BasicType long tvfPointers IOException LocalVariableDeclaration ReferenceType SegmentTermVector VariableDeclarator res ArrayCreator ReferenceType SegmentTermVector MemberReference fields length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fields length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType ParallelArrayTermVectorMapper VariableDeclarator mapper ClassCreator ReferenceType ParallelArrayTermVectorMapper StatementExpression MethodInvocation mapper MemberReference docNum setDocumentNumber StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i fields MemberReference ArraySelector MemberReference i tvfPointers MemberReference mapper readTermVector StatementExpression Assignment MemberReference ArraySelector MemberReference i res Cast ReferenceType SegmentTermVector MethodInvocation mapper materializeVector = End ReturnStatement MemberReference res MethodDeclaration Modifier private readTermVectors FormalParameter ReferenceType String fields FormalParameter BasicType long tvfPointers FormalParameter ReferenceType TermVectorMapper mapper IOException ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fields length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i fields MemberReference ArraySelector MemberReference i tvfPointers MemberReference mapper readTermVector End MethodDeclaration /**
   * 
   * @param field The field to read in
   * @param tvfPointer The pointer within the tvf file where we should start reading
   * @param mapper The mapper used to map the TermVector
   * @throws IOException
   */ Modifier private readTermVector FormalParameter ReferenceType String field FormalParameter BasicType long tvfPointer FormalParameter ReferenceType TermVectorMapper mapper IOException StatementExpression MethodInvocation tvf MemberReference tvfPointer seek LocalVariableDeclaration BasicType int VariableDeclarator numTerms MethodInvocation tvf readVInt IfStatement BinaryOperation == MemberReference numTerms Literal 0 ReturnStatement End LocalVariableDeclaration BasicType boolean VariableDeclarator storePositions LocalVariableDeclaration BasicType boolean VariableDeclarator storeOffsets IfStatement BinaryOperation >= MemberReference format MemberReference FORMAT_VERSION BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator bits MethodInvocation tvf readByte StatementExpression Assignment MemberReference storePositions BinaryOperation != BinaryOperation & MemberReference bits MemberReference STORE_POSITIONS_WITH_TERMVECTOR Literal 0 = StatementExpression Assignment MemberReference storeOffsets BinaryOperation != BinaryOperation & MemberReference bits MemberReference STORE_OFFSET_WITH_TERMVECTOR Literal 0 = BlockStatement StatementExpression MethodInvocation tvf readVInt StatementExpression Assignment MemberReference storePositions Literal false = StatementExpression Assignment MemberReference storeOffsets Literal false = End StatementExpression MethodInvocation mapper MemberReference field MemberReference numTerms MemberReference storeOffsets MemberReference storePositions setExpectations LocalVariableDeclaration BasicType int VariableDeclarator start Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator deltaLength Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator totalLength Literal 0 LocalVariableDeclaration BasicType byte VariableDeclarator byteBuffer LocalVariableDeclaration BasicType char VariableDeclarator charBuffer LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator preUTF8 BinaryOperation < MemberReference format MemberReference FORMAT_UTF8_LENGTH_IN_BYTES IfStatement MemberReference preUTF8 BlockStatement StatementExpression Assignment MemberReference charBuffer ArrayCreator BasicType char Literal 10 = StatementExpression Assignment MemberReference byteBuffer Literal null = BlockStatement StatementExpression Assignment MemberReference charBuffer Literal null = StatementExpression Assignment MemberReference byteBuffer ArrayCreator BasicType byte Literal 20 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numTerms MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference start MethodInvocation tvf readVInt = StatementExpression Assignment MemberReference deltaLength MethodInvocation tvf readVInt = StatementExpression Assignment MemberReference totalLength BinaryOperation + MemberReference start MemberReference deltaLength = LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator term IfStatement MemberReference preUTF8 BlockStatement IfStatement BinaryOperation < MemberReference charBuffer length MemberReference totalLength BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator newCharBuffer ArrayCreator BasicType char Cast BasicType int BinaryOperation * Literal 1.5 MemberReference totalLength StatementExpression MethodInvocation System MemberReference charBuffer Literal 0 MemberReference newCharBuffer Literal 0 MemberReference start arraycopy StatementExpression Assignment MemberReference charBuffer MemberReference newCharBuffer = End StatementExpression MethodInvocation tvf MemberReference charBuffer MemberReference start MemberReference deltaLength readChars StatementExpression Assignment MemberReference term ClassCreator ReferenceType String MemberReference charBuffer Literal 0 MemberReference totalLength = BlockStatement IfStatement BinaryOperation < MemberReference byteBuffer length MemberReference totalLength BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator newByteBuffer ArrayCreator BasicType byte Cast BasicType int BinaryOperation * Literal 1.5 MemberReference totalLength StatementExpression MethodInvocation System MemberReference byteBuffer Literal 0 MemberReference newByteBuffer Literal 0 MemberReference start arraycopy StatementExpression Assignment MemberReference byteBuffer MemberReference newByteBuffer = End StatementExpression MethodInvocation tvf MemberReference byteBuffer MemberReference start MemberReference deltaLength readBytes StatementExpression Assignment MemberReference term ClassCreator ReferenceType String MemberReference byteBuffer Literal 0 MemberReference totalLength Literal ""UTF-8"" = End LocalVariableDeclaration BasicType int VariableDeclarator freq MethodInvocation tvf readVInt LocalVariableDeclaration BasicType int VariableDeclarator positions Literal null IfStatement MemberReference storePositions BlockStatement IfStatement BinaryOperation == MethodInvocation mapper isIgnoringPositions Literal false BlockStatement StatementExpression Assignment MemberReference positions ArrayCreator BasicType int MemberReference freq = LocalVariableDeclaration BasicType int VariableDeclarator prevPosition Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference freq MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j positions BinaryOperation + MemberReference prevPosition MethodInvocation tvf readVInt = StatementExpression Assignment MemberReference prevPosition MemberReference ArraySelector MemberReference j positions = End BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference freq MemberReference ++ j BlockStatement StatementExpression MethodInvocation tvf readVInt End End End LocalVariableDeclaration ReferenceType TermVectorOffsetInfo VariableDeclarator offsets Literal null IfStatement MemberReference storeOffsets BlockStatement IfStatement BinaryOperation == MethodInvocation mapper isIgnoringOffsets Literal false BlockStatement StatementExpression Assignment MemberReference offsets ArrayCreator ReferenceType TermVectorOffsetInfo MemberReference freq = LocalVariableDeclaration BasicType int VariableDeclarator prevOffset Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference freq MemberReference ++ j BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator startOffset BinaryOperation + MemberReference prevOffset MethodInvocation tvf readVInt LocalVariableDeclaration BasicType int VariableDeclarator endOffset BinaryOperation + MemberReference startOffset MethodInvocation tvf readVInt StatementExpression Assignment MemberReference ArraySelector MemberReference j offsets ClassCreator ReferenceType TermVectorOffsetInfo MemberReference startOffset MemberReference endOffset = StatementExpression Assignment MemberReference prevOffset MemberReference endOffset = End BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference freq MemberReference ++ j BlockStatement StatementExpression MethodInvocation tvf readVInt StatementExpression MethodInvocation tvf readVInt End End End StatementExpression MethodInvocation mapper MemberReference term MemberReference freq MemberReference offsets MemberReference positions map End MethodDeclaration Modifier protected Annotation Override ReferenceType Object clone CloneNotSupportedException LocalVariableDeclaration Modifier final ReferenceType TermVectorsReader VariableDeclarator clone Cast ReferenceType TermVectorsReader SuperMethodInvocation clone IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference tvx Literal null BinaryOperation != MemberReference tvd Literal null BinaryOperation != MemberReference tvf Literal null BlockStatement StatementExpression Assignment MemberReference clone tvx Cast ReferenceType IndexInput MethodInvocation tvx clone = StatementExpression Assignment MemberReference clone tvd Cast ReferenceType IndexInput MethodInvocation tvd clone = StatementExpression Assignment MemberReference clone tvf Cast ReferenceType IndexInput MethodInvocation tvf clone = End ReturnStatement MemberReference clone ReferenceType Cloneable ClassDeclaration /**
 * Models the existing parallel array structure
 */ ParallelArrayTermVectorMapper FieldDeclaration Modifier private ReferenceType String VariableDeclarator terms FieldDeclaration Modifier private BasicType int VariableDeclarator termFreqs FieldDeclaration Modifier private BasicType int VariableDeclarator positions FieldDeclaration Modifier private ReferenceType TermVectorOffsetInfo VariableDeclarator offsets FieldDeclaration Modifier private BasicType int VariableDeclarator currentPosition FieldDeclaration Modifier private BasicType boolean VariableDeclarator storingOffsets FieldDeclaration Modifier private BasicType boolean VariableDeclarator storingPositions FieldDeclaration Modifier private ReferenceType String VariableDeclarator field MethodDeclaration Modifier public Annotation Override setExpectations FormalParameter ReferenceType String field FormalParameter BasicType int numTerms FormalParameter BasicType boolean storeOffsets FormalParameter BasicType boolean storePositions StatementExpression Assignment This MemberReference field MemberReference field = StatementExpression Assignment MemberReference terms ArrayCreator ReferenceType String MemberReference numTerms = StatementExpression Assignment MemberReference termFreqs ArrayCreator BasicType int MemberReference numTerms = StatementExpression Assignment This MemberReference storingOffsets MemberReference storeOffsets = StatementExpression Assignment This MemberReference storingPositions MemberReference storePositions = IfStatement MemberReference storePositions StatementExpression Assignment This MemberReference positions ArrayCreator BasicType int MemberReference numTerms = End IfStatement MemberReference storeOffsets StatementExpression Assignment This MemberReference offsets ArrayCreator ReferenceType TermVectorOffsetInfo MemberReference numTerms = End MethodDeclaration Modifier public Annotation Override map FormalParameter ReferenceType String term FormalParameter BasicType int frequency FormalParameter ReferenceType TermVectorOffsetInfo offsets FormalParameter BasicType int positions StatementExpression Assignment MemberReference ArraySelector MemberReference currentPosition terms MemberReference term = StatementExpression Assignment MemberReference ArraySelector MemberReference currentPosition termFreqs MemberReference frequency = IfStatement MemberReference storingOffsets BlockStatement StatementExpression Assignment This MemberReference offsets ArraySelector MemberReference currentPosition MemberReference offsets = End IfStatement MemberReference storingPositions BlockStatement StatementExpression Assignment This MemberReference positions ArraySelector MemberReference currentPosition MemberReference positions = End StatementExpression MemberReference ++ currentPosition MethodDeclaration /**
   * Construct the vector
   * @return The {@link TermFreqVector} based on the mappings.
   */ Modifier public ReferenceType TermFreqVector materializeVector LocalVariableDeclaration ReferenceType SegmentTermVector VariableDeclarator tv Literal null IfStatement BinaryOperation && BinaryOperation != MemberReference field Literal null BinaryOperation != MemberReference terms Literal null BlockStatement IfStatement BinaryOperation || MemberReference storingPositions MemberReference storingOffsets BlockStatement StatementExpression Assignment MemberReference tv ClassCreator ReferenceType SegmentTermPositionVector MemberReference field MemberReference terms MemberReference termFreqs MemberReference positions MemberReference offsets = BlockStatement StatementExpression Assignment MemberReference tv ClassCreator ReferenceType SegmentTermVector MemberReference field MemberReference terms MemberReference termFreqs = End End ReturnStatement MemberReference tv ReferenceType TermVectorMapper",0
495,495,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.IOException Import java.io.File Import java.io.RandomAccessFile Import java.nio.ByteBuffer Import java.nio.BufferUnderflowException Import java.nio.channels.FileChannel Import java.nio.channels.FileChannel.MapMode Import java.security.AccessController Import java.security.PrivilegedExceptionAction Import java.security.PrivilegedActionException Import java.lang.reflect.Method Import org.apache.lucene.util.Constants ClassDeclaration Modifier public /** File-based {@link Directory} implementation that uses
 *  mmap for reading, and {@link
 *  SimpleFSDirectory.SimpleFSIndexOutput} for writing.
 *
 * <p><b>NOTE</b>: memory mapping uses up a portion of the
 * virtual memory address space in your process equal to the
 * size of the file being mapped.  Before using this class,
 * be sure your have plenty of virtual address space, e.g. by
 * using a 64 bit JRE, or a 32 bit JRE with indexes that are
 * guaranteed to fit within the address space.
 * On 32 bit platforms also consult {@link #setMaxChunkSize}
 * if you have problems with mmap failing because of fragmented
 * address space. If you get an OutOfMemoryException, it is recommended
 * to reduce the chunk size, until it works.
 *
 * <p>Due to <a href=""http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038"">
 * this bug</a> in Sun's JRE, MMapDirectory's {@link IndexInput#close}
 * is unable to close the underlying OS file handle.  Only when GC
 * finally collects the underlying objects, which could be quite
 * some time later, will the file handle be closed.
 *
 * <p>This will consume additional transient disk usage: on Windows,
 * attempts to delete or overwrite the files will result in an
 * exception; on other platforms, which typically have a &quot;delete on
 * last close&quot; semantics, while such operations will succeed, the bytes
 * are still consuming space on disk.  For many applications this
 * limitation is not a problem (e.g. if you have plenty of disk space,
 * and you don't rely on overwriting files on Windows) but it's still
 * an important limitation to be aware of.
 *
 * <p>This class supplies the workaround mentioned in the bug report
 * (disabled by default, see {@link #setUseUnmap}), which may fail on
 * non-Sun JVMs. It forcefully unmaps the buffer on close by using
 * an undocumented internal cleanup functionality.
 * {@link #UNMAP_SUPPORTED} is <code>true</code>, if the workaround
 * can be enabled (with no guarantees).
 */ MMapDirectory ConstructorDeclaration Modifier public /** Create a new MMapDirectory for the named location.
   *
   * @param path the path of the directory
   * @param lockFactory the lock factory to use, or null for the default
   * ({@link NativeFSLockFactory});
   * @throws IOException
   */ MMapDirectory FormalParameter ReferenceType File path FormalParameter ReferenceType LockFactory lockFactory IOException StatementExpression SuperConstructorInvocation MemberReference path MemberReference lockFactory ConstructorDeclaration Modifier public /** Create a new MMapDirectory for the named location and {@link NativeFSLockFactory}.
   *
   * @param path the path of the directory
   * @throws IOException
   */ MMapDirectory FormalParameter ReferenceType File path IOException StatementExpression SuperConstructorInvocation MemberReference path Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator useUnmapHack Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator maxBBuf TernaryExpression MemberReference Constants JRE_IS_64BIT MemberReference Integer MAX_VALUE BinaryOperation * BinaryOperation * Literal 256 Literal 1024 Literal 1024 FieldDeclaration /**
   * <code>true</code>, if this platform supports unmapping mmapped files.
   */ Modifier public final static BasicType boolean VariableDeclarator UNMAP_SUPPORTED LocalVariableDeclaration BasicType boolean VariableDeclarator v TryStatement StatementExpression MethodInvocation Class Literal ""sun.misc.Cleaner"" forName StatementExpression MethodInvocation Class MethodInvocation Literal ""cleaner"" getMethod Literal ""java.nio.DirectByteBuffer"" forName StatementExpression Assignment MemberReference v Literal true = CatchClause CatchClauseParameter Exception e StatementExpression Assignment MemberReference v Literal false = StatementExpression Assignment MemberReference UNMAP_SUPPORTED MemberReference v = MethodDeclaration /**
   * This method enables the workaround for unmapping the buffers
   * from address space after closing {@link IndexInput}, that is
   * mentioned in the bug report. This hack may fail on non-Sun JVMs.
   * It forcefully unmaps the buffer on close by using
   * an undocumented internal cleanup functionality.
   * <p><b>NOTE:</b> Enabling this is completely unsupported
   * by Java and may lead to JVM crashes if <code>IndexInput</code>
   * is closed while another thread is still accessing it (SIGSEGV).
   * @throws IllegalArgumentException if {@link #UNMAP_SUPPORTED}
   * is <code>false</code> and the workaround cannot be enabled.
   */ Modifier public setUseUnmap FormalParameter Modifier final BasicType boolean useUnmapHack IfStatement BinaryOperation && MemberReference useUnmapHack MemberReference ! UNMAP_SUPPORTED ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Unmap hack not supported on this platform!"" End StatementExpression Assignment This MemberReference useUnmapHack MemberReference useUnmapHack = MethodDeclaration /**
   * Returns <code>true</code>, if the unmap workaround is enabled.
   * @see #setUseUnmap
   */ Modifier public BasicType boolean getUseUnmap ReturnStatement MemberReference useUnmapHack MethodDeclaration /**
   * Try to unmap the buffer, this method silently fails if no support
   * for that in the JVM. On Windows, this leads to the fact,
   * that mmapped files cannot be modified or deleted.
   */ Modifier final cleanMapping FormalParameter Modifier final ReferenceType ByteBuffer buffer IOException IfStatement MemberReference useUnmapHack BlockStatement TryStatement StatementExpression MethodInvocation AccessController ClassCreator ReferenceType PrivilegedExceptionAction TypeArgument ReferenceType Object MethodDeclaration Modifier public ReferenceType Object run Exception LocalVariableDeclaration Modifier final ReferenceType Method VariableDeclarator getCleanerMethod MethodInvocation buffer MethodInvocation Literal ""cleaner"" getMethod getClass StatementExpression MethodInvocation getCleanerMethod Literal true setAccessible LocalVariableDeclaration Modifier final ReferenceType Object VariableDeclarator cleaner MethodInvocation getCleanerMethod MemberReference buffer invoke IfStatement BinaryOperation != MemberReference cleaner Literal null BlockStatement StatementExpression MethodInvocation cleaner MethodInvocation Literal ""clean"" getMethod MethodInvocation MemberReference cleaner invoke getClass End ReturnStatement Literal null doPrivileged CatchClause CatchClauseParameter PrivilegedActionException e LocalVariableDeclaration Modifier final ReferenceType IOException VariableDeclarator ioe ClassCreator ReferenceType IOException Literal ""unable to unmap the mapped buffer"" StatementExpression MethodInvocation ioe MethodInvocation e getCause initCause ThrowStatement MemberReference ioe End MethodDeclaration /**
   * Sets the maximum chunk size (default is {@link Integer#MAX_VALUE} for
   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.
   * Especially on 32 bit platform, the address space can be very fragmented,
   * so large index files cannot be mapped.
   * Using a lower chunk size makes the directory implementation a little
   * bit slower (as the correct chunk must be resolved on each seek)
   * but the chance is higher that mmap does not fail. On 64 bit
   * Java platforms, this parameter should always be {@link Integer#MAX_VALUE},
   * as the address space is big enough.
   */ Modifier public setMaxChunkSize FormalParameter Modifier final BasicType int maxBBuf IfStatement BinaryOperation <= MemberReference maxBBuf Literal 0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Maximum chunk size for mmap must be >0"" End StatementExpression Assignment This MemberReference maxBBuf MemberReference maxBBuf = MethodDeclaration /**
   * Returns the current mmap chunk size.
   * @see #setMaxChunkSize
   */ Modifier public BasicType int getMaxChunkSize ReturnStatement MemberReference maxBBuf ClassDeclaration Modifier private MMapIndexInput FieldDeclaration Modifier private ReferenceType ByteBuffer VariableDeclarator buffer FieldDeclaration Modifier private final BasicType long VariableDeclarator length FieldDeclaration Modifier private BasicType boolean VariableDeclarator isClone Literal false ConstructorDeclaration Modifier private MMapIndexInput FormalParameter ReferenceType RandomAccessFile raf IOException StatementExpression Assignment This MemberReference length MethodInvocation raf length = StatementExpression Assignment This MemberReference buffer MethodInvocation raf MethodInvocation MemberReference MapMode READ_ONLY Literal 0 MemberReference length map getChannel = MethodDeclaration Modifier public Annotation Override BasicType byte readByte IOException TryStatement ReturnStatement MethodInvocation buffer get CatchClause CatchClauseParameter BufferUnderflowException e ThrowStatement ClassCreator ReferenceType IOException Literal ""read past EOF"" MethodDeclaration Modifier public Annotation Override readBytes FormalParameter BasicType byte b FormalParameter BasicType int offset FormalParameter BasicType int len IOException TryStatement StatementExpression MethodInvocation buffer MemberReference b MemberReference offset MemberReference len get CatchClause CatchClauseParameter BufferUnderflowException e ThrowStatement ClassCreator ReferenceType IOException Literal ""read past EOF"" MethodDeclaration Modifier public Annotation Override BasicType long getFilePointer ReturnStatement MethodInvocation buffer position MethodDeclaration Modifier public Annotation Override seek FormalParameter BasicType long pos IOException StatementExpression MethodInvocation buffer Cast BasicType int MemberReference pos position MethodDeclaration Modifier public Annotation Override BasicType long length ReturnStatement MemberReference length MethodDeclaration Modifier public Annotation Override ReferenceType Object clone LocalVariableDeclaration ReferenceType MMapIndexInput VariableDeclarator clone Cast ReferenceType MMapIndexInput SuperMethodInvocation clone StatementExpression Assignment MemberReference clone isClone Literal true = StatementExpression Assignment MemberReference clone buffer MethodInvocation buffer duplicate = ReturnStatement MemberReference clone MethodDeclaration Modifier public Annotation Override close IOException IfStatement BinaryOperation || MemberReference isClone BinaryOperation == MemberReference buffer Literal null ReturnStatement End TryStatement StatementExpression MethodInvocation MemberReference buffer cleanMapping StatementExpression Assignment MemberReference buffer Literal null = ReferenceType IndexInput ClassDeclaration Modifier private MultiMMapIndexInput FieldDeclaration Modifier private ReferenceType ByteBuffer VariableDeclarator buffers FieldDeclaration Modifier private BasicType int VariableDeclarator bufSizes FieldDeclaration Modifier private final BasicType long VariableDeclarator length FieldDeclaration Modifier private BasicType int VariableDeclarator curBufIndex FieldDeclaration Modifier private final BasicType int VariableDeclarator maxBufSize FieldDeclaration Modifier private ReferenceType ByteBuffer VariableDeclarator curBuf FieldDeclaration Modifier private BasicType int VariableDeclarator curAvail FieldDeclaration Modifier private BasicType boolean VariableDeclarator isClone Literal false ConstructorDeclaration Modifier public MultiMMapIndexInput FormalParameter ReferenceType RandomAccessFile raf FormalParameter BasicType int maxBufSize IOException StatementExpression Assignment This MemberReference length MethodInvocation raf length = StatementExpression Assignment This MemberReference maxBufSize MemberReference maxBufSize = IfStatement BinaryOperation <= MemberReference maxBufSize Literal 0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Non positive maxBufSize: "" MemberReference maxBufSize End IfStatement BinaryOperation > BinaryOperation / MemberReference length MemberReference maxBufSize MemberReference Integer MAX_VALUE ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""RandomAccessFile too big for maximum buffer size: "" MethodInvocation raf toString End LocalVariableDeclaration BasicType int VariableDeclarator nrBuffers Cast BasicType int BinaryOperation / MemberReference length MemberReference maxBufSize IfStatement BinaryOperation < BinaryOperation * Cast BasicType long MemberReference nrBuffers MemberReference maxBufSize MemberReference length StatementExpression MemberReference ++ nrBuffers End StatementExpression Assignment This MemberReference buffers ArrayCreator ReferenceType ByteBuffer MemberReference nrBuffers = StatementExpression Assignment This MemberReference bufSizes ArrayCreator BasicType int MemberReference nrBuffers = LocalVariableDeclaration BasicType long VariableDeclarator bufferStart Literal 0 LocalVariableDeclaration ReferenceType FileChannel VariableDeclarator rafc MethodInvocation raf getChannel ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator bufNr Literal 0 BinaryOperation < MemberReference bufNr MemberReference nrBuffers MemberReference ++ bufNr BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator bufSize TernaryExpression BinaryOperation > MemberReference length BinaryOperation + MemberReference bufferStart MemberReference maxBufSize MemberReference maxBufSize Cast BasicType int BinaryOperation - MemberReference length MemberReference bufferStart StatementExpression Assignment This MemberReference buffers ArraySelector MemberReference bufNr MethodInvocation rafc MemberReference MapMode READ_ONLY MemberReference bufferStart MemberReference bufSize map = StatementExpression Assignment This MemberReference bufSizes ArraySelector MemberReference bufNr MemberReference bufSize = StatementExpression Assignment MemberReference bufferStart MemberReference bufSize += End StatementExpression MethodInvocation Literal 0L seek MethodDeclaration Modifier public Annotation Override BasicType byte readByte IOException IfStatement BinaryOperation == MemberReference curAvail Literal 0 BlockStatement StatementExpression MemberReference ++ curBufIndex IfStatement BinaryOperation >= MemberReference curBufIndex MemberReference buffers length ThrowStatement ClassCreator ReferenceType IOException Literal ""read past EOF"" End StatementExpression Assignment MemberReference curBuf MemberReference ArraySelector MemberReference curBufIndex buffers = StatementExpression MethodInvocation curBuf Literal 0 position StatementExpression Assignment MemberReference curAvail MemberReference ArraySelector MemberReference curBufIndex bufSizes = End StatementExpression MemberReference -- curAvail ReturnStatement MethodInvocation curBuf get MethodDeclaration Modifier public Annotation Override readBytes FormalParameter BasicType byte b FormalParameter BasicType int offset FormalParameter BasicType int len IOException WhileStatement BinaryOperation > MemberReference len MemberReference curAvail BlockStatement StatementExpression MethodInvocation curBuf MemberReference b MemberReference offset MemberReference curAvail get StatementExpression Assignment MemberReference len MemberReference curAvail -= StatementExpression Assignment MemberReference offset MemberReference curAvail += StatementExpression MemberReference ++ curBufIndex IfStatement BinaryOperation >= MemberReference curBufIndex MemberReference buffers length ThrowStatement ClassCreator ReferenceType IOException Literal ""read past EOF"" End StatementExpression Assignment MemberReference curBuf MemberReference ArraySelector MemberReference curBufIndex buffers = StatementExpression MethodInvocation curBuf Literal 0 position StatementExpression Assignment MemberReference curAvail MemberReference ArraySelector MemberReference curBufIndex bufSizes = End StatementExpression MethodInvocation curBuf MemberReference b MemberReference offset MemberReference len get StatementExpression Assignment MemberReference curAvail MemberReference len -= MethodDeclaration Modifier public Annotation Override BasicType long getFilePointer ReturnStatement BinaryOperation + BinaryOperation * Cast BasicType long MemberReference curBufIndex MemberReference maxBufSize MethodInvocation curBuf position MethodDeclaration Modifier public Annotation Override seek FormalParameter BasicType long pos IOException StatementExpression Assignment MemberReference curBufIndex Cast BasicType int BinaryOperation / MemberReference pos MemberReference maxBufSize = StatementExpression Assignment MemberReference curBuf MemberReference ArraySelector MemberReference curBufIndex buffers = LocalVariableDeclaration BasicType int VariableDeclarator bufOffset Cast BasicType int BinaryOperation - MemberReference pos BinaryOperation * Cast BasicType long MemberReference curBufIndex MemberReference maxBufSize StatementExpression MethodInvocation curBuf MemberReference bufOffset position StatementExpression Assignment MemberReference curAvail BinaryOperation - MemberReference ArraySelector MemberReference curBufIndex bufSizes MemberReference bufOffset = MethodDeclaration Modifier public Annotation Override BasicType long length ReturnStatement MemberReference length MethodDeclaration Modifier public Annotation Override ReferenceType Object clone LocalVariableDeclaration ReferenceType MultiMMapIndexInput VariableDeclarator clone Cast ReferenceType MultiMMapIndexInput SuperMethodInvocation clone StatementExpression Assignment MemberReference clone isClone Literal true = StatementExpression Assignment MemberReference clone buffers ArrayCreator ReferenceType ByteBuffer MemberReference buffers length = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator bufNr Literal 0 BinaryOperation < MemberReference bufNr MemberReference buffers length MemberReference ++ bufNr BlockStatement StatementExpression Assignment MemberReference clone ArraySelector MemberReference bufNr buffers MemberReference ArraySelector MemberReference bufNr MethodInvocation duplicate buffers = End TryStatement StatementExpression MethodInvocation clone MethodInvocation getFilePointer seek CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType RuntimeException VariableDeclarator newException ClassCreator ReferenceType RuntimeException MemberReference ioe StatementExpression MethodInvocation newException MemberReference ioe initCause ThrowStatement MemberReference newException Statement ReturnStatement MemberReference clone MethodDeclaration Modifier public Annotation Override close IOException IfStatement BinaryOperation || MemberReference isClone BinaryOperation == MemberReference buffers Literal null ReturnStatement End TryStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator bufNr Literal 0 BinaryOperation < MemberReference bufNr MemberReference buffers length MemberReference ++ bufNr BlockStatement TryStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference bufNr buffers cleanMapping StatementExpression Assignment MemberReference ArraySelector MemberReference bufNr buffers Literal null = End StatementExpression Assignment MemberReference buffers Literal null = ReferenceType IndexInput MethodDeclaration /** Creates an IndexInput for the file with the given name. */ Modifier public Annotation Override ReferenceType IndexInput openInput FormalParameter ReferenceType String name FormalParameter BasicType int bufferSize IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MethodInvocation getFile MemberReference name LocalVariableDeclaration ReferenceType RandomAccessFile VariableDeclarator raf ClassCreator ReferenceType RandomAccessFile MemberReference f Literal ""r"" TryStatement ReturnStatement TernaryExpression BinaryOperation <= MethodInvocation raf length Cast BasicType long MemberReference maxBBuf Cast ReferenceType IndexInput ClassCreator ReferenceType MMapIndexInput MemberReference raf Cast ReferenceType IndexInput ClassCreator ReferenceType MultiMMapIndexInput MemberReference raf MemberReference maxBBuf StatementExpression MethodInvocation raf close MethodDeclaration /** Creates an IndexOutput for the file with the given name. */ Modifier public Annotation Override ReferenceType IndexOutput createOutput FormalParameter ReferenceType String name IOException StatementExpression MethodInvocation MemberReference name initOutput ReturnStatement ClassCreator ReferenceType SimpleFSDirectory ReferenceType SimpleFSIndexOutput ClassCreator ReferenceType File MemberReference directory MemberReference name ReferenceType FSDirectory",0
60,60,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.stats ClassDeclaration Modifier public /**
 * This class holds a set of memory usage values.
 *
 */ MemUsage FieldDeclaration Modifier public BasicType long VariableDeclarator maxFree VariableDeclarator minFree VariableDeclarator avgFree FieldDeclaration Modifier public BasicType long VariableDeclarator maxTotal VariableDeclarator minTotal VariableDeclarator avgTotal MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement MethodInvocation Literal 1 Literal ""B"" toScaledString MethodDeclaration /** Scale down the values by divisor, append the unit string. */ Modifier public ReferenceType String toScaledString FormalParameter BasicType int div FormalParameter ReferenceType String unit LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation sb MethodInvocation BinaryOperation / MemberReference minFree MemberReference div append Literal ""free="" append StatementExpression MethodInvocation sb MethodInvocation BinaryOperation / MemberReference avgFree MemberReference div append Literal ""/"" append StatementExpression MethodInvocation sb MethodInvocation BinaryOperation / MemberReference maxFree MemberReference div append MethodInvocation Literal "" "" append MethodInvocation MemberReference unit append Literal ""/"" append StatementExpression MethodInvocation sb MethodInvocation BinaryOperation / MemberReference minTotal MemberReference div append Literal "", total="" append StatementExpression MethodInvocation sb MethodInvocation BinaryOperation / MemberReference avgTotal MemberReference div append Literal ""/"" append StatementExpression MethodInvocation sb MethodInvocation BinaryOperation / MemberReference maxTotal MemberReference div append MethodInvocation Literal "" "" append MethodInvocation MemberReference unit append Literal ""/"" append ReturnStatement MethodInvocation sb toString",0
688,688,,0
264,264,"CompilationUnit PackageDeclaration org.apache.lucene.document Import java.util.Arrays Import java.util.HashMap Import java.util.List Import java.util.Map ClassDeclaration Modifier public /**
 * A {@link FieldSelector} based on a Map of field names to {@link FieldSelectorResult}s
 *
 */ MapFieldSelector FieldDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType FieldSelectorResult VariableDeclarator fieldSelections ConstructorDeclaration Modifier public /** Create a a MapFieldSelector
     * @param fieldSelections maps from field names (String) to {@link FieldSelectorResult}s
     */ MapFieldSelector FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType FieldSelectorResult fieldSelections StatementExpression Assignment This MemberReference fieldSelections MemberReference fieldSelections = ConstructorDeclaration Modifier public /** Create a a MapFieldSelector
     * @param fields fields to LOAD.  List of Strings.  All other fields are NO_LOAD.
     */ MapFieldSelector FormalParameter ReferenceType List TypeArgument ReferenceType String fields StatementExpression Assignment MemberReference fieldSelections ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType FieldSelectorResult BinaryOperation / BinaryOperation * MethodInvocation fields size Literal 5 Literal 3 = ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType String VariableDeclarator field MemberReference fields StatementExpression MethodInvocation fieldSelections MemberReference field MemberReference FieldSelectorResult LOAD put End ConstructorDeclaration Modifier public /** Create a a MapFieldSelector
     * @param fields fields to LOAD.  All other fields are NO_LOAD.
     */ MapFieldSelector FormalParameter ReferenceType String fields  StatementExpression ExplicitConstructorInvocation MethodInvocation Arrays MemberReference fields asList MethodDeclaration /** Load field according to its associated value in fieldSelections
     * @param field a field name
     * @return the fieldSelections value that field maps to or NO_LOAD if none.
     */ Modifier public ReferenceType FieldSelectorResult accept FormalParameter ReferenceType String field LocalVariableDeclaration ReferenceType FieldSelectorResult VariableDeclarator selection MethodInvocation fieldSelections MemberReference field get ReturnStatement TernaryExpression BinaryOperation != MemberReference selection Literal null MemberReference selection MemberReference FieldSelectorResult NO_LOAD ReferenceType FieldSelector",0
221,221,"CompilationUnit PackageDeclaration org.apache.lucene.search.highlight Import java.io.IOException Import java.io.StringReader Import java.util.ArrayList Import java.util.Arrays Import java.util.Comparator Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.Token Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.document.Document Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.TermFreqVector Import org.apache.lucene.index.TermPositionVector Import org.apache.lucene.index.TermVectorOffsetInfo ClassDeclaration Modifier public /**
 * Hides implementation issues associated with obtaining a TokenStream for use with
 * the higlighter - can obtain from TermFreqVectors with offsets and (optionally) positions or
 * from Analyzer class reparsing the stored content.
 */ TokenSources MethodDeclaration /**
   * A convenience method that tries to first get a TermPositionVector for the specified docId, then, falls back to
   * using the passed in {@link org.apache.lucene.document.Document} to retrieve the TokenStream.  This is useful when
   * you already have the document, but would prefer to use the vector first.
   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try and get the vector from
   * @param docId The docId to retrieve.
   * @param field The field to retrieve on the document
   * @param doc The document to fall back on
   * @param analyzer The analyzer to use for creating the TokenStream if the vector doesn't exist
   * @return The {@link org.apache.lucene.analysis.TokenStream} for the {@link org.apache.lucene.document.Fieldable} on the {@link org.apache.lucene.document.Document}
   * @throws IOException if there was an error loading
   */ Modifier public static ReferenceType TokenStream getAnyTokenStream FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docId FormalParameter ReferenceType String field FormalParameter ReferenceType Document doc FormalParameter ReferenceType Analyzer analyzer IOException LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator ts Literal null LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator tfv MethodInvocation reader MemberReference docId MemberReference field getTermFreqVector IfStatement BinaryOperation != MemberReference tfv Literal null BlockStatement IfStatement BinaryOperation instanceof MemberReference tfv ReferenceType TermPositionVector BlockStatement StatementExpression Assignment MemberReference ts MethodInvocation Cast ReferenceType TermPositionVector MemberReference tfv getTokenStream = End End IfStatement BinaryOperation == MemberReference ts Literal null BlockStatement StatementExpression Assignment MemberReference ts MethodInvocation MemberReference doc MemberReference field MemberReference analyzer getTokenStream = End ReturnStatement MemberReference ts MethodDeclaration /**
     * A convenience method that tries a number of approaches to getting a token stream.
     * The cost of finding there are no termVectors in the index is minimal (1000 invocations still 
     * registers 0 ms). So this ""lazy"" (flexible?) approach to coding is probably acceptable
     * @param reader
     * @param docId
     * @param field
     * @param analyzer
     * @return null if field not stored correctly 
     * @throws IOException
     */ Modifier public static ReferenceType TokenStream getAnyTokenStream FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docId FormalParameter ReferenceType String field FormalParameter ReferenceType Analyzer analyzer IOException LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator ts Literal null LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator tfv MethodInvocation reader MemberReference docId MemberReference field getTermFreqVector IfStatement BinaryOperation != MemberReference tfv Literal null BlockStatement IfStatement BinaryOperation instanceof MemberReference tfv ReferenceType TermPositionVector BlockStatement StatementExpression Assignment MemberReference ts MethodInvocation Cast ReferenceType TermPositionVector MemberReference tfv getTokenStream = End End IfStatement BinaryOperation == MemberReference ts Literal null BlockStatement StatementExpression Assignment MemberReference ts MethodInvocation MemberReference reader MemberReference docId MemberReference field MemberReference analyzer getTokenStream = End ReturnStatement MemberReference ts MethodDeclaration Modifier public static ReferenceType TokenStream getTokenStream FormalParameter ReferenceType TermPositionVector tpv ReturnStatement MethodInvocation MemberReference tpv Literal false getTokenStream MethodDeclaration /**
     * Low level api.
     * Returns a token stream or null if no offset info available in index.
     * This can be used to feed the highlighter with a pre-parsed token stream 
     * 
     * In my tests the speeds to recreate 1000 token streams using this method are:
     * - with TermVector offset only data stored - 420  milliseconds 
     * - with TermVector offset AND position data stored - 271 milliseconds
     *  (nb timings for TermVector with position data are based on a tokenizer with contiguous
     *  positions - no overlaps or gaps)
     * The cost of not using TermPositionVector to store
     * pre-parsed content and using an analyzer to re-parse the original content: 
     * - reanalyzing the original content - 980 milliseconds
     * 
     * The re-analyze timings will typically vary depending on -
     * 	1) The complexity of the analyzer code (timings above were using a 
     * 	   stemmer/lowercaser/stopword combo)
     *  2) The  number of other fields (Lucene reads ALL fields off the disk 
     *     when accessing just one document field - can cost dear!)
     *  3) Use of compression on field storage - could be faster due to compression (less disk IO)
     *     or slower (more CPU burn) depending on the content.
     *
     * @param tpv
     * @param tokenPositionsGuaranteedContiguous true if the token position numbers have no overlaps or gaps. If looking
     * to eek out the last drops of performance, set to true. If in doubt, set to false.
     */ Modifier public static ReferenceType TokenStream getTokenStream FormalParameter ReferenceType TermPositionVector tpv FormalParameter BasicType boolean tokenPositionsGuaranteedContiguous ClassDeclaration StoredTokenStream FieldDeclaration ReferenceType Token VariableDeclarator tokens FieldDeclaration BasicType int VariableDeclarator currentToken Literal 0 FieldDeclaration ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration ReferenceType OffsetAttribute VariableDeclarator offsetAtt ConstructorDeclaration StoredTokenStream FormalParameter ReferenceType Token tokens StatementExpression Assignment This MemberReference tokens MemberReference tokens = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken IOException IfStatement BinaryOperation >= MemberReference currentToken MemberReference tokens length BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType Token VariableDeclarator token MemberReference ArraySelector MemberReference ++ currentToken tokens StatementExpression MethodInvocation termAtt MethodInvocation token term setTermBuffer StatementExpression MethodInvocation offsetAtt MethodInvocation token startOffset MethodInvocation token endOffset setOffset ReturnStatement Literal true ReferenceType TokenStream LocalVariableDeclaration ReferenceType String VariableDeclarator terms MethodInvocation tpv getTerms LocalVariableDeclaration BasicType int VariableDeclarator freq MethodInvocation tpv getTermFrequencies LocalVariableDeclaration BasicType int VariableDeclarator totalTokens Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator t Literal 0 BinaryOperation < MemberReference t MemberReference freq length MemberReference ++ t BlockStatement StatementExpression Assignment MemberReference totalTokens MemberReference ArraySelector MemberReference t freq += End LocalVariableDeclaration ReferenceType Token VariableDeclarator tokensInOriginalOrder ArrayCreator ReferenceType Token MemberReference totalTokens LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType Token VariableDeclarator unsortedTokens Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator t Literal 0 BinaryOperation < MemberReference t MemberReference freq length MemberReference ++ t BlockStatement LocalVariableDeclaration ReferenceType TermVectorOffsetInfo VariableDeclarator offsets MethodInvocation tpv MemberReference t getOffsets IfStatement BinaryOperation == MemberReference offsets Literal null BlockStatement ReturnStatement Literal null End LocalVariableDeclaration BasicType int VariableDeclarator pos Literal null IfStatement MemberReference tokenPositionsGuaranteedContiguous BlockStatement StatementExpression Assignment MemberReference pos MethodInvocation tpv MemberReference t getTermPositions = End IfStatement BinaryOperation == MemberReference pos Literal null BlockStatement IfStatement BinaryOperation == MemberReference unsortedTokens Literal null BlockStatement StatementExpression Assignment MemberReference unsortedTokens ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Token = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator tp Literal 0 BinaryOperation < MemberReference tp MemberReference offsets length MemberReference ++ tp BlockStatement LocalVariableDeclaration ReferenceType Token VariableDeclarator token ClassCreator ReferenceType Token MemberReference ArraySelector MemberReference tp MethodInvocation getStartOffset offsets MemberReference ArraySelector MemberReference tp MethodInvocation getEndOffset offsets StatementExpression MethodInvocation token MemberReference ArraySelector MemberReference t terms setTermBuffer StatementExpression MethodInvocation unsortedTokens MemberReference token add End BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator tp Literal 0 BinaryOperation < MemberReference tp MemberReference pos length MemberReference ++ tp BlockStatement LocalVariableDeclaration ReferenceType Token VariableDeclarator token ClassCreator ReferenceType Token MemberReference ArraySelector MemberReference t terms MemberReference ArraySelector MemberReference tp MethodInvocation getStartOffset offsets MemberReference ArraySelector MemberReference tp MethodInvocation getEndOffset offsets StatementExpression Assignment MemberReference ArraySelector MemberReference ArraySelector MemberReference tp pos tokensInOriginalOrder MemberReference token = End End End IfStatement BinaryOperation != MemberReference unsortedTokens Literal null BlockStatement StatementExpression Assignment MemberReference tokensInOriginalOrder MethodInvocation unsortedTokens ArrayCreator ReferenceType Token MethodInvocation unsortedTokens size toArray = StatementExpression MethodInvocation Arrays MemberReference tokensInOriginalOrder ClassCreator ReferenceType Comparator TypeArgument ReferenceType Token MethodDeclaration Modifier public BasicType int compare FormalParameter ReferenceType Token t1 FormalParameter ReferenceType Token t2 IfStatement BinaryOperation > MethodInvocation t1 startOffset MethodInvocation t2 endOffset ReturnStatement Literal 1 End IfStatement BinaryOperation < MethodInvocation t1 startOffset MethodInvocation t2 startOffset ReturnStatement Literal - 1 End ReturnStatement Literal 0 sort End ReturnStatement ClassCreator ReferenceType StoredTokenStream MemberReference tokensInOriginalOrder MethodDeclaration Modifier public static ReferenceType TokenStream getTokenStream FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docId FormalParameter ReferenceType String field IOException LocalVariableDeclaration ReferenceType TermFreqVector VariableDeclarator tfv MethodInvocation reader MemberReference docId MemberReference field getTermFreqVector IfStatement BinaryOperation == MemberReference tfv Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + MemberReference field Literal "" in doc #"" MemberReference docId Literal ""does not have any term position data stored"" End IfStatement BinaryOperation instanceof MemberReference tfv ReferenceType TermPositionVector BlockStatement LocalVariableDeclaration ReferenceType TermPositionVector VariableDeclarator tpv Cast ReferenceType TermPositionVector MethodInvocation reader MemberReference docId MemberReference field getTermFreqVector ReturnStatement MethodInvocation MemberReference tpv getTokenStream End ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + MemberReference field Literal "" in doc #"" MemberReference docId Literal ""does not have any term position data stored"" MethodDeclaration Modifier public static ReferenceType TokenStream getTokenStream FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docId FormalParameter ReferenceType String field FormalParameter ReferenceType Analyzer analyzer IOException LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation reader MemberReference docId document ReturnStatement MethodInvocation MemberReference doc MemberReference field MemberReference analyzer getTokenStream MethodDeclaration Modifier public static ReferenceType TokenStream getTokenStream FormalParameter ReferenceType Document doc FormalParameter ReferenceType String field FormalParameter ReferenceType Analyzer analyzer LocalVariableDeclaration ReferenceType String VariableDeclarator contents MethodInvocation doc MemberReference field get IfStatement BinaryOperation == MemberReference contents Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""Field "" MemberReference field Literal "" in document is not stored and cannot be analyzed"" End ReturnStatement MethodInvocation MemberReference field MemberReference contents MemberReference analyzer getTokenStream MethodDeclaration Modifier public static ReferenceType TokenStream getTokenStream FormalParameter ReferenceType String field FormalParameter ReferenceType String contents FormalParameter ReferenceType Analyzer analyzer ReturnStatement MethodInvocation analyzer MemberReference field ClassCreator ReferenceType StringReader MemberReference contents tokenStream",1
463,463,CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException ClassDeclaration Modifier abstract InvertedDocConsumerPerThread MethodDeclaration Modifier abstract startDocument IOException MethodDeclaration Modifier abstract ReferenceType InvertedDocConsumerPerField addField FormalParameter ReferenceType DocInverterPerField docInverterPerField FormalParameter ReferenceType FieldInfo fieldInfo MethodDeclaration Modifier abstract ReferenceType DocumentsWriter ReferenceType DocWriter finishDocument IOException MethodDeclaration Modifier abstract abort,0
355,355,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.util.List Import java.io.IOException Import org.apache.lucene.util.ScorerDocQueue ClassDeclaration /** A Scorer for OR like queries, counterpart of <code>ConjunctionScorer</code>.
 * This Scorer implements {@link Scorer#skipTo(int)} and uses skipTo() on the given Scorers. 
 */ DisjunctionSumScorer FieldDeclaration /** The number of subscorers. */ Modifier private final BasicType int VariableDeclarator nrScorers FieldDeclaration /** The subscorers. */ Modifier final protected ReferenceType List TypeArgument ReferenceType Scorer VariableDeclarator subScorers FieldDeclaration /** The minimum number of scorers that should match. */ Modifier private final BasicType int VariableDeclarator minimumNrMatchers FieldDeclaration /** The scorerDocQueue contains all subscorers ordered by their current doc(),
   * with the minimum at the top.
   * <br>The scorerDocQueue is initialized the first time next() or skipTo() is called.
   * <br>An exhausted scorer is immediately removed from the scorerDocQueue.
   * <br>If less than the minimumNrMatchers scorers
   * remain in the scorerDocQueue next() and skipTo() return false.
   * <p>
   * After each to call to next() or skipTo()
   * <code>currentSumScore</code> is the total score of the current matching doc,
   * <code>nrMatchers</code> is the number of matching scorers,
   * and all scorers are after the matching doc, or are exhausted.
   */ Modifier private ReferenceType ScorerDocQueue VariableDeclarator scorerDocQueue FieldDeclaration /** The document number of the current match. */ Modifier private BasicType int VariableDeclarator currentDoc Literal - 1 FieldDeclaration /** The number of subscorers that provide the current match. */ Modifier protected BasicType int VariableDeclarator nrMatchers Literal - 1 FieldDeclaration Modifier private BasicType float VariableDeclarator currentScore MemberReference Float NaN ConstructorDeclaration Modifier public /** Construct a <code>DisjunctionScorer</code>.
   * @param subScorers A collection of at least two subscorers.
   * @param minimumNrMatchers The positive minimum number of subscorers that should
   * match to match this query.
   * <br>When <code>minimumNrMatchers</code> is bigger than
   * the number of <code>subScorers</code>,
   * no matches will be produced.
   * <br>When minimumNrMatchers equals the number of subScorers,
   * it more efficient to use <code>ConjunctionScorer</code>.
   */ DisjunctionSumScorer FormalParameter ReferenceType List TypeArgument ReferenceType Scorer subScorers FormalParameter BasicType int minimumNrMatchers IOException StatementExpression SuperConstructorInvocation Literal null StatementExpression Assignment MemberReference nrScorers MethodInvocation subScorers size = IfStatement BinaryOperation <= MemberReference minimumNrMatchers Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Minimum nr of matchers must be positive"" End IfStatement BinaryOperation <= MemberReference nrScorers Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""There must be at least 2 subScorers"" End StatementExpression Assignment This MemberReference minimumNrMatchers MemberReference minimumNrMatchers = StatementExpression Assignment This MemberReference subScorers MemberReference subScorers = StatementExpression MethodInvocation initScorerDocQueue ConstructorDeclaration Modifier public /** Construct a <code>DisjunctionScorer</code>, using one as the minimum number
   * of matching subscorers.
   */ DisjunctionSumScorer FormalParameter ReferenceType List TypeArgument ReferenceType Scorer subScorers IOException StatementExpression ExplicitConstructorInvocation MemberReference subScorers Literal 1 MethodDeclaration /** Called the first time next() or skipTo() is called to
   * initialize <code>scorerDocQueue</code>.
   */ Modifier private initScorerDocQueue IOException StatementExpression Assignment MemberReference scorerDocQueue ClassCreator ReferenceType ScorerDocQueue MemberReference nrScorers = ForStatement EnhancedForControl VariableDeclaration ReferenceType Scorer VariableDeclarator se MemberReference subScorers BlockStatement IfStatement BinaryOperation != MethodInvocation se nextDoc MemberReference NO_MORE_DOCS BlockStatement StatementExpression MethodInvocation scorerDocQueue MemberReference se insert End End MethodDeclaration /** Scores and collects all matching documents.
   * @param collector The collector to which all matching documents are passed through.
   */ Modifier public Annotation Override score FormalParameter ReferenceType Collector collector IOException StatementExpression MethodInvocation collector This setScorer WhileStatement BinaryOperation != MethodInvocation nextDoc MemberReference NO_MORE_DOCS BlockStatement StatementExpression MethodInvocation collector MemberReference currentDoc collect End MethodDeclaration /** Expert: Collects matching documents in a range.  Hook for optimization.
   * Note that {@link #next()} must be called once before this method is called
   * for the first time.
   * @param collector The collector to which all matching documents are passed through.
   * @param max Do not score documents past this.
   * @return true if more matching documents may remain.
   */ Modifier protected Annotation Override BasicType boolean score FormalParameter ReferenceType Collector collector FormalParameter BasicType int max FormalParameter BasicType int firstDocID IOException StatementExpression MethodInvocation collector This setScorer WhileStatement BinaryOperation < MemberReference currentDoc MemberReference max BlockStatement StatementExpression MethodInvocation collector MemberReference currentDoc collect IfStatement BinaryOperation == MethodInvocation nextDoc MemberReference NO_MORE_DOCS BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException IfStatement BinaryOperation || BinaryOperation < MethodInvocation scorerDocQueue size MemberReference minimumNrMatchers MethodInvocation ! advanceAfterCurrent BlockStatement StatementExpression Assignment MemberReference currentDoc MemberReference NO_MORE_DOCS = End ReturnStatement MemberReference currentDoc MethodDeclaration /** Advance all subscorers after the current document determined by the
   * top of the <code>scorerDocQueue</code>.
   * Repeat until at least the minimum number of subscorers match on the same
   * document and all subscorers are after that document or are exhausted.
   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>
   * available. At least the scorer with the minimum document number will be advanced.
   * @return true iff there is a match.
   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,
   * and </code>nrMatchers</code> describe the match.
   *
   * TODO: Investigate whether it is possible to use skipTo() when
   * the minimum number of matchers is bigger than one, ie. try and use the
   * character of ConjunctionScorer for the minimum number of matchers.
   * Also delay calling score() on the sub scorers until the minimum number of
   * matchers is reached.
   * <br>For this, a Scorer array with minimumNrMatchers elements might
   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.
   */ Modifier protected BasicType boolean advanceAfterCurrent IOException DoStatement Literal true BlockStatement StatementExpression Assignment MemberReference currentDoc MethodInvocation scorerDocQueue topDoc = StatementExpression Assignment MemberReference currentScore MethodInvocation scorerDocQueue topScore = StatementExpression Assignment MemberReference nrMatchers Literal 1 = DoStatement Literal true BlockStatement IfStatement MethodInvocation ! scorerDocQueue topNextAndAdjustElsePop BlockStatement IfStatement BinaryOperation == MethodInvocation scorerDocQueue size Literal 0 BlockStatement BreakStatement End End IfStatement BinaryOperation != MethodInvocation scorerDocQueue topDoc MemberReference currentDoc BlockStatement BreakStatement End StatementExpression Assignment MemberReference currentScore MethodInvocation scorerDocQueue topScore += StatementExpression MemberReference ++ nrMatchers End IfStatement BinaryOperation >= MemberReference nrMatchers MemberReference minimumNrMatchers BlockStatement ReturnStatement Literal true IfStatement BinaryOperation < MethodInvocation scorerDocQueue size MemberReference minimumNrMatchers BlockStatement ReturnStatement Literal false End End End MethodDeclaration /** Returns the score of the current document matching the query.
   * Initially invalid, until {@link #next()} is called the first time.
   */ Modifier public Annotation Override BasicType float score IOException ReturnStatement MemberReference currentScore MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MemberReference currentDoc MethodDeclaration /** Returns the number of subscorers matching the current document.
   * Initially invalid, until {@link #next()} is called the first time.
   */ Modifier public BasicType int nrMatchers ReturnStatement MemberReference nrMatchers MethodDeclaration /**
   * Advances to the first match beyond the current whose document number is
   * greater than or equal to a given target. <br>
   * The implementation uses the skipTo() method on the subscorers.
   * 
   * @param target
   *          The target document number.
   * @return the document whose number is greater than or equal to the given
   *         target, or -1 if none exist.
   */ Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException IfStatement BinaryOperation < MethodInvocation scorerDocQueue size MemberReference minimumNrMatchers BlockStatement ReturnStatement Assignment MemberReference currentDoc MemberReference NO_MORE_DOCS = End IfStatement BinaryOperation <= MemberReference target MemberReference currentDoc BlockStatement ReturnStatement MemberReference currentDoc End DoStatement Literal true BlockStatement IfStatement BinaryOperation >= MethodInvocation scorerDocQueue topDoc MemberReference target BlockStatement ReturnStatement TernaryExpression MethodInvocation advanceAfterCurrent MemberReference currentDoc Assignment MemberReference currentDoc MemberReference NO_MORE_DOCS = IfStatement MethodInvocation ! scorerDocQueue MemberReference target topSkipToAndAdjustElsePop BlockStatement IfStatement BinaryOperation < MethodInvocation scorerDocQueue size MemberReference minimumNrMatchers BlockStatement ReturnStatement Assignment MemberReference currentDoc MemberReference NO_MORE_DOCS = End End End End ReferenceType Scorer",0
296,296,"CompilationUnit PackageDeclaration org.apache.lucene.search.spans Import java.io.IOException Import org.apache.lucene.search.Explanation Import org.apache.lucene.search.Weight Import org.apache.lucene.search.Scorer Import org.apache.lucene.search.Similarity ClassDeclaration Modifier public /**
 * Public for extension only.
 */ SpanScorer FieldDeclaration Modifier protected ReferenceType Spans VariableDeclarator spans FieldDeclaration Modifier protected ReferenceType Weight VariableDeclarator weight FieldDeclaration Modifier protected BasicType byte VariableDeclarator norms FieldDeclaration Modifier protected BasicType float VariableDeclarator value FieldDeclaration Modifier protected BasicType boolean VariableDeclarator more Literal true FieldDeclaration Modifier protected BasicType int VariableDeclarator doc FieldDeclaration Modifier protected BasicType float VariableDeclarator freq ConstructorDeclaration Modifier protected SpanScorer FormalParameter ReferenceType Spans spans FormalParameter ReferenceType Weight weight FormalParameter ReferenceType Similarity similarity FormalParameter BasicType byte norms IOException StatementExpression SuperConstructorInvocation MemberReference similarity StatementExpression Assignment This MemberReference spans MemberReference spans = StatementExpression Assignment This MemberReference norms MemberReference norms = StatementExpression Assignment This MemberReference weight MemberReference weight = StatementExpression Assignment This MemberReference value MethodInvocation weight getValue = IfStatement This MemberReference spans MethodInvocation next BlockStatement StatementExpression Assignment MemberReference doc Literal - 1 = BlockStatement StatementExpression Assignment MemberReference doc MemberReference NO_MORE_DOCS = StatementExpression Assignment MemberReference more Literal false = End MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException IfStatement MethodInvocation ! setFreqCurrentDoc BlockStatement StatementExpression Assignment MemberReference doc MemberReference NO_MORE_DOCS = End ReturnStatement MemberReference doc MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException IfStatement MemberReference ! more BlockStatement ReturnStatement Assignment MemberReference doc MemberReference NO_MORE_DOCS = End IfStatement BinaryOperation < MethodInvocation spans doc MemberReference target BlockStatement StatementExpression Assignment MemberReference more MethodInvocation spans MemberReference target skipTo = End IfStatement MethodInvocation ! setFreqCurrentDoc BlockStatement StatementExpression Assignment MemberReference doc MemberReference NO_MORE_DOCS = End ReturnStatement MemberReference doc MethodDeclaration Modifier protected BasicType boolean setFreqCurrentDoc IOException IfStatement MemberReference ! more BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference doc MethodInvocation spans doc = StatementExpression Assignment MemberReference freq Literal 0.0f = DoStatement BinaryOperation && MemberReference more BinaryOperation == MemberReference doc MethodInvocation spans doc BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator matchLength BinaryOperation - MethodInvocation spans end MethodInvocation spans start StatementExpression Assignment MemberReference freq MethodInvocation MethodInvocation MemberReference matchLength sloppyFreq getSimilarity += StatementExpression Assignment MemberReference more MethodInvocation spans next = End ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MemberReference doc MethodDeclaration Modifier public Annotation Override BasicType float score IOException LocalVariableDeclaration BasicType float VariableDeclarator raw BinaryOperation * MethodInvocation MethodInvocation MemberReference freq tf getSimilarity MemberReference value ReturnStatement TernaryExpression BinaryOperation == MemberReference norms Literal null MemberReference raw BinaryOperation * MemberReference raw MethodInvocation Similarity MemberReference ArraySelector MemberReference doc norms decodeNorm MethodDeclaration /** This method is no longer an official member of {@link Scorer},
   * but it is needed by SpanWeight to build an explanation. */ Modifier protected ReferenceType Explanation explain FormalParameter Modifier final BasicType int doc IOException LocalVariableDeclaration ReferenceType Explanation VariableDeclarator tfExplanation ClassCreator ReferenceType Explanation LocalVariableDeclaration BasicType int VariableDeclarator expDoc MethodInvocation MemberReference doc advance LocalVariableDeclaration BasicType float VariableDeclarator phraseFreq TernaryExpression BinaryOperation == MemberReference expDoc MemberReference doc MemberReference freq Literal 0.0f StatementExpression MethodInvocation tfExplanation MethodInvocation MethodInvocation MemberReference phraseFreq tf getSimilarity setValue StatementExpression MethodInvocation tfExplanation BinaryOperation + BinaryOperation + Literal ""tf(phraseFreq="" MemberReference phraseFreq Literal "")"" setDescription ReturnStatement MemberReference tfExplanation ReferenceType Scorer",0
130,130,CompilationUnit PackageDeclaration org.apache.lucene.search.spans Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.util.ToStringUtils Import java.io.IOException Import java.util.Set ClassDeclaration Modifier public /** Matches spans containing a term. */ SpanTermQuery FieldDeclaration Modifier protected ReferenceType Term VariableDeclarator term ConstructorDeclaration Modifier public /** Construct a SpanTermQuery matching the named term's spans. */ SpanTermQuery FormalParameter ReferenceType Term term StatementExpression Assignment This MemberReference term MemberReference term = MethodDeclaration /** Return the term whose spans are matched. */ Modifier public ReferenceType Term getTerm ReturnStatement MemberReference term MethodDeclaration Modifier public Annotation Override ReferenceType String getField ReturnStatement MethodInvocation term field MethodDeclaration Modifier public Annotation Override extractTerms FormalParameter ReferenceType Set TypeArgument ReferenceType Term terms StatementExpression MethodInvocation terms MemberReference term add MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String field LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder IfStatement MethodInvocation term MethodInvocation MemberReference field equals field StatementExpression MethodInvocation buffer MethodInvocation term text append StatementExpression MethodInvocation buffer MethodInvocation term toString append End StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result SuperMethodInvocation hashCode StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference term Literal null Literal 0 MethodInvocation term hashCode = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement SuperMethodInvocation ! MemberReference obj equals ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType SpanTermQuery VariableDeclarator other Cast ReferenceType SpanTermQuery MemberReference obj IfStatement BinaryOperation == MemberReference term Literal null BlockStatement IfStatement BinaryOperation != MemberReference other term Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! term MemberReference other term equals ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override ReferenceType Spans getSpans FormalParameter Modifier final ReferenceType IndexReader reader IOException ReturnStatement ClassCreator ReferenceType TermSpans MethodInvocation reader MemberReference term termPositions MemberReference term ReferenceType SpanQuery,0
409,409,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import java.util.Locale Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor Import org.apache.lucene.util.Attribute InterfaceDeclaration Modifier public /**
 * This attribute is used by processor {@link ParametricRangeQueryNodeProcessor}
 * and must be defined in the {@link QueryConfigHandler}. This attribute tells
 * the processor what is the default {@link Locale} used to parse a date. <br/>
 * 
 */ LowercaseExpandedTermsAttribute MethodDeclaration Modifier public setLowercaseExpandedTerms FormalParameter BasicType boolean lowercaseExpandedTerms MethodDeclaration Modifier public BasicType boolean isLowercaseExpandedTerms ReferenceType Attribute",0
517,517,"CompilationUnit PackageDeclaration org.apache.lucene.search.highlight InterfaceDeclaration Modifier public /**
 * Processes terms found in the original text, typically by applying some form 
 * of mark-up to highlight terms in HTML search results pages.
 *
 */ Formatter MethodDeclaration /**
	 * @param originalText The section of text being considered for markup
	 * @param tokenGroup contains one or several overlapping Tokens along with
	 * their scores and positions.
	 */ ReferenceType String highlightTerm FormalParameter ReferenceType String originalText FormalParameter ReferenceType TokenGroup tokenGroup",1
239,239,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.util  Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.MultipleTermPositions Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermPositions Import org.apache.lucene.util.ToStringUtils ClassDeclaration Modifier public /**
 * MultiPhraseQuery is a generalized version of PhraseQuery, with an added
 * method {@link #add(Term[])}.
 * To use this class, to search for the phrase ""Microsoft app*"" first use
 * add(Term) on the term ""Microsoft"", then find all terms that have ""app"" as
 * prefix using IndexReader.terms(Term), and use MultiPhraseQuery.add(Term[]
 * terms) to add them to the query.
 *
 * @version 1.0
 */ MultiPhraseQuery FieldDeclaration Modifier private ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType ArrayList TypeArgument ReferenceType Term VariableDeclarator termArrays ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Term FieldDeclaration Modifier private ReferenceType ArrayList TypeArgument ReferenceType Integer VariableDeclarator positions ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Integer FieldDeclaration Modifier private BasicType int VariableDeclarator slop Literal 0 MethodDeclaration /** Sets the phrase slop for this query.
   * @see PhraseQuery#setSlop(int)
   */ Modifier public setSlop FormalParameter BasicType int s StatementExpression Assignment MemberReference slop MemberReference s = MethodDeclaration /** Sets the phrase slop for this query.
   * @see PhraseQuery#getSlop()
   */ Modifier public BasicType int getSlop ReturnStatement MemberReference slop MethodDeclaration /** Add a single term at the next position in the phrase.
   * @see PhraseQuery#add(Term)
   */ Modifier public add FormalParameter ReferenceType Term term StatementExpression MethodInvocation ArrayCreator ReferenceType Term ArrayInitializer MemberReference term add MethodDeclaration /** Add multiple terms at the next position in the phrase.  Any of the terms
   * may match.
   *
   * @see PhraseQuery#add(Term)
   */ Modifier public add FormalParameter ReferenceType Term terms LocalVariableDeclaration BasicType int VariableDeclarator position Literal 0 IfStatement BinaryOperation > MethodInvocation positions size Literal 0 StatementExpression Assignment MemberReference position BinaryOperation + MethodInvocation positions MethodInvocation intValue BinaryOperation - MethodInvocation positions size Literal 1 get Literal 1 = End StatementExpression MethodInvocation MemberReference terms MemberReference position add MethodDeclaration /**
   * Allows to specify the relative position of terms within the phrase.
   * 
   * @see PhraseQuery#add(Term, int)
   * @param terms
   * @param position
   */ Modifier public add FormalParameter ReferenceType Term terms FormalParameter BasicType int position IfStatement BinaryOperation == MethodInvocation termArrays size Literal 0 StatementExpression Assignment MemberReference field MemberReference ArraySelector Literal 0 MethodInvocation field terms = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference terms length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i MethodInvocation field terms MemberReference field BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""All phrase terms must be in the same field ("" MemberReference field Literal ""): "" MemberReference ArraySelector MemberReference i terms End End StatementExpression MethodInvocation termArrays MemberReference terms add StatementExpression MethodInvocation positions MethodInvocation Integer MemberReference position valueOf add MethodDeclaration /**
   * Returns a List of the terms in the multiphrase.
   * Do not modify the List or its contents.
   */ Modifier public ReferenceType List TypeArgument ReferenceType Term getTermArrays ReturnStatement MethodInvocation Collections MemberReference termArrays unmodifiableList MethodDeclaration /**
   * Returns the relative positions of terms in this phrase.
   */ Modifier public BasicType int getPositions LocalVariableDeclaration BasicType int VariableDeclarator result ArrayCreator BasicType int MethodInvocation positions size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation positions size MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i result MethodInvocation positions MethodInvocation intValue MemberReference i get = End ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override extractTerms FormalParameter ReferenceType Set TypeArgument ReferenceType Term terms ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Term VariableDeclarator arr MemberReference termArrays BlockStatement ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Term VariableDeclarator term MemberReference arr BlockStatement StatementExpression MethodInvocation terms MemberReference term add End End ClassDeclaration Modifier private MultiPhraseWeight FieldDeclaration Modifier private ReferenceType Similarity VariableDeclarator similarity FieldDeclaration Modifier private BasicType float VariableDeclarator value FieldDeclaration Modifier private BasicType float VariableDeclarator idf FieldDeclaration Modifier private BasicType float VariableDeclarator queryNorm FieldDeclaration Modifier private BasicType float VariableDeclarator queryWeight ConstructorDeclaration Modifier public MultiPhraseWeight FormalParameter ReferenceType Searcher searcher IOException StatementExpression Assignment This MemberReference similarity MethodInvocation MemberReference searcher getSimilarity = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator maxDoc MethodInvocation searcher maxDoc ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Term VariableDeclarator terms MemberReference termArrays BlockStatement ForStatement EnhancedForControl VariableDeclaration ReferenceType Term VariableDeclarator term MemberReference terms BlockStatement StatementExpression Assignment MemberReference idf This MemberReference similarity MethodInvocation MethodInvocation searcher MemberReference term docFreq MemberReference maxDoc idf += End End MethodDeclaration Modifier public Annotation Override ReferenceType Query getQuery ReturnStatement This MultiPhraseQuery MethodDeclaration Modifier public Annotation Override BasicType float getValue ReturnStatement MemberReference value MethodDeclaration Modifier public Annotation Override BasicType float sumOfSquaredWeights StatementExpression Assignment MemberReference queryWeight BinaryOperation * MemberReference idf MethodInvocation getBoost = ReturnStatement BinaryOperation * MemberReference queryWeight MemberReference queryWeight MethodDeclaration Modifier public Annotation Override normalize FormalParameter BasicType float queryNorm StatementExpression Assignment This MemberReference queryNorm MemberReference queryNorm = StatementExpression Assignment MemberReference queryWeight MemberReference queryNorm *= StatementExpression Assignment MemberReference value BinaryOperation * MemberReference queryWeight MemberReference idf = MethodDeclaration Modifier public Annotation Override ReferenceType Scorer scorer FormalParameter ReferenceType IndexReader reader FormalParameter BasicType boolean scoreDocsInOrder FormalParameter BasicType boolean topScorer IOException IfStatement BinaryOperation == MethodInvocation termArrays size Literal 0 ReturnStatement Literal null End LocalVariableDeclaration ReferenceType TermPositions VariableDeclarator tps ArrayCreator ReferenceType TermPositions MethodInvocation termArrays size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference tps length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator terms MethodInvocation termArrays MemberReference i get LocalVariableDeclaration ReferenceType TermPositions VariableDeclarator p IfStatement BinaryOperation > MemberReference terms length Literal 1 StatementExpression Assignment MemberReference p ClassCreator ReferenceType MultipleTermPositions MemberReference reader MemberReference terms = StatementExpression Assignment MemberReference p MethodInvocation reader MemberReference ArraySelector Literal 0 terms termPositions = End IfStatement BinaryOperation == MemberReference p Literal null ReturnStatement Literal null End StatementExpression Assignment MemberReference ArraySelector MemberReference i tps MemberReference p = End IfStatement BinaryOperation == MemberReference slop Literal 0 ReturnStatement ClassCreator ReferenceType ExactPhraseScorer This MemberReference tps MethodInvocation getPositions MemberReference similarity MethodInvocation reader MemberReference field norms ReturnStatement ClassCreator ReferenceType SloppyPhraseScorer This MemberReference tps MethodInvocation getPositions MemberReference similarity MemberReference slop MethodInvocation reader MemberReference field norms End MethodDeclaration Modifier public Annotation Override ReferenceType Explanation explain FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int doc IOException LocalVariableDeclaration ReferenceType ComplexExplanation VariableDeclarator result ClassCreator ReferenceType ComplexExplanation StatementExpression MethodInvocation result BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""weight("" MethodInvocation getQuery Literal "" in "" MemberReference doc Literal ""), product of:"" setDescription LocalVariableDeclaration ReferenceType Explanation VariableDeclarator idfExpl ClassCreator ReferenceType Explanation MemberReference idf BinaryOperation + BinaryOperation + Literal ""idf("" MethodInvocation getQuery Literal "")"" LocalVariableDeclaration ReferenceType Explanation VariableDeclarator queryExpl ClassCreator ReferenceType Explanation StatementExpression MethodInvocation queryExpl BinaryOperation + BinaryOperation + Literal ""queryWeight("" MethodInvocation getQuery Literal ""), product of:"" setDescription LocalVariableDeclaration ReferenceType Explanation VariableDeclarator boostExpl ClassCreator ReferenceType Explanation MethodInvocation getBoost Literal ""boost"" IfStatement BinaryOperation != MethodInvocation getBoost Literal 1.0f StatementExpression MethodInvocation queryExpl MemberReference boostExpl addDetail End StatementExpression MethodInvocation queryExpl MemberReference idfExpl addDetail LocalVariableDeclaration ReferenceType Explanation VariableDeclarator queryNormExpl ClassCreator ReferenceType Explanation MemberReference queryNorm Literal ""queryNorm"" StatementExpression MethodInvocation queryExpl MemberReference queryNormExpl addDetail StatementExpression MethodInvocation queryExpl BinaryOperation * BinaryOperation * MethodInvocation boostExpl getValue MethodInvocation idfExpl getValue MethodInvocation queryNormExpl getValue setValue StatementExpression MethodInvocation result MemberReference queryExpl addDetail LocalVariableDeclaration ReferenceType ComplexExplanation VariableDeclarator fieldExpl ClassCreator ReferenceType ComplexExplanation StatementExpression MethodInvocation fieldExpl BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""fieldWeight("" MethodInvocation getQuery Literal "" in "" MemberReference doc Literal ""), product of:"" setDescription LocalVariableDeclaration ReferenceType PhraseScorer VariableDeclarator scorer Cast ReferenceType PhraseScorer MethodInvocation MemberReference reader Literal true Literal false scorer IfStatement BinaryOperation == MemberReference scorer Literal null BlockStatement ReturnStatement ClassCreator ReferenceType Explanation Literal 0.0f Literal ""no matching docs"" End LocalVariableDeclaration ReferenceType Explanation VariableDeclarator tfExplanation ClassCreator ReferenceType Explanation LocalVariableDeclaration BasicType int VariableDeclarator d MethodInvocation scorer MemberReference doc advance LocalVariableDeclaration BasicType float VariableDeclarator phraseFreq TernaryExpression BinaryOperation == MemberReference d MemberReference doc MethodInvocation scorer currentFreq Literal 0.0f StatementExpression MethodInvocation tfExplanation MethodInvocation similarity MemberReference phraseFreq tf setValue StatementExpression MethodInvocation tfExplanation BinaryOperation + BinaryOperation + Literal ""tf(phraseFreq="" MemberReference phraseFreq Literal "")"" setDescription StatementExpression MethodInvocation fieldExpl MemberReference tfExplanation addDetail StatementExpression MethodInvocation fieldExpl MemberReference idfExpl addDetail LocalVariableDeclaration ReferenceType Explanation VariableDeclarator fieldNormExpl ClassCreator ReferenceType Explanation LocalVariableDeclaration BasicType byte VariableDeclarator fieldNorms MethodInvocation reader MemberReference field norms LocalVariableDeclaration BasicType float VariableDeclarator fieldNorm TernaryExpression BinaryOperation != MemberReference fieldNorms Literal null MethodInvocation Similarity MemberReference ArraySelector MemberReference doc fieldNorms decodeNorm Literal 1.0f StatementExpression MethodInvocation fieldNormExpl MemberReference fieldNorm setValue StatementExpression MethodInvocation fieldNormExpl BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""fieldNorm(field="" MemberReference field Literal "", doc="" MemberReference doc Literal "")"" setDescription StatementExpression MethodInvocation fieldExpl MemberReference fieldNormExpl addDetail StatementExpression MethodInvocation fieldExpl MethodInvocation Boolean MethodInvocation tfExplanation isMatch valueOf setMatch StatementExpression MethodInvocation fieldExpl BinaryOperation * BinaryOperation * MethodInvocation tfExplanation getValue MethodInvocation idfExpl getValue MethodInvocation fieldNormExpl getValue setValue StatementExpression MethodInvocation result MemberReference fieldExpl addDetail StatementExpression MethodInvocation result MethodInvocation fieldExpl getMatch setMatch StatementExpression MethodInvocation result BinaryOperation * MethodInvocation queryExpl getValue MethodInvocation fieldExpl getValue setValue IfStatement BinaryOperation == MethodInvocation queryExpl getValue Literal 1.0f ReturnStatement MemberReference fieldExpl End ReturnStatement MemberReference result ReferenceType Weight MethodDeclaration Modifier public Annotation Override ReferenceType Query rewrite FormalParameter ReferenceType IndexReader reader IfStatement BinaryOperation == MethodInvocation termArrays size Literal 1 BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator terms MethodInvocation termArrays Literal 0 get LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator boq ClassCreator ReferenceType BooleanQuery Literal true ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference terms length MemberReference ++ i BlockStatement StatementExpression MethodInvocation boq ClassCreator ReferenceType TermQuery MemberReference ArraySelector MemberReference i terms MemberReference BooleanClause.Occur SHOULD add End StatementExpression MethodInvocation boq MethodInvocation getBoost setBoost ReturnStatement MemberReference boq BlockStatement ReturnStatement This End MethodDeclaration Modifier public Annotation Override ReferenceType Weight createWeight FormalParameter ReferenceType Searcher searcher IOException ReturnStatement ClassCreator ReferenceType MultiPhraseWeight MemberReference searcher MethodDeclaration /** Prints a user-readable version of this query. */ Modifier public final Annotation Override ReferenceType String toString FormalParameter ReferenceType String f LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder IfStatement MethodInvocation ! field MemberReference f equals BlockStatement StatementExpression MethodInvocation buffer MemberReference field append StatementExpression MethodInvocation buffer Literal "":"" append End StatementExpression MethodInvocation buffer Literal ""\"""" append LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType Term VariableDeclarator i MethodInvocation termArrays iterator WhileStatement MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator terms MethodInvocation i next IfStatement BinaryOperation > MemberReference terms length Literal 1 BlockStatement StatementExpression MethodInvocation buffer Literal ""("" append ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference terms length MemberReference ++ j BlockStatement StatementExpression MethodInvocation buffer MemberReference ArraySelector MemberReference j MethodInvocation text terms append IfStatement BinaryOperation < MemberReference j BinaryOperation - MemberReference terms length Literal 1 StatementExpression MethodInvocation buffer Literal "" "" append End End StatementExpression MethodInvocation buffer Literal "")"" append BlockStatement StatementExpression MethodInvocation buffer MemberReference ArraySelector Literal 0 MethodInvocation text terms append End IfStatement MethodInvocation i hasNext StatementExpression MethodInvocation buffer Literal "" "" append End End StatementExpression MethodInvocation buffer Literal ""\"""" append IfStatement BinaryOperation != MemberReference slop Literal 0 BlockStatement StatementExpression MethodInvocation buffer Literal ""~"" append StatementExpression MethodInvocation buffer MemberReference slop append End StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration /** Returns true if <code>o</code> is equal to this. */ Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation instanceof MemberReference o ReferenceType MultiPhraseQuery ReturnStatement Literal false End LocalVariableDeclaration ReferenceType MultiPhraseQuery VariableDeclarator other Cast ReferenceType MultiPhraseQuery MemberReference o ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == This MethodInvocation getBoost MethodInvocation other getBoost BinaryOperation == This MemberReference slop MemberReference other slop MethodInvocation This MemberReference termArrays MemberReference other termArrays termArraysEquals This MemberReference positions MethodInvocation MemberReference other positions equals MethodDeclaration /** Returns a hash code value for this object.*/ Modifier public Annotation Override BasicType int hashCode ReturnStatement BinaryOperation ^ BinaryOperation ^ BinaryOperation ^ BinaryOperation ^ MethodInvocation Float MethodInvocation getBoost floatToIntBits MemberReference slop MethodInvocation termArraysHashCode MethodInvocation positions hashCode Literal 0x4AC65113 MethodDeclaration Modifier private BasicType int termArraysHashCode LocalVariableDeclaration BasicType int VariableDeclarator hashCode Literal 1 ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Term VariableDeclarator termArray MemberReference termArrays BlockStatement StatementExpression Assignment MemberReference hashCode BinaryOperation + BinaryOperation * Literal 31 MemberReference hashCode TernaryExpression BinaryOperation == MemberReference termArray Literal null Literal 0 MethodInvocation Arrays MemberReference termArray hashCode = End ReturnStatement MemberReference hashCode MethodDeclaration Modifier private BasicType boolean termArraysEquals FormalParameter ReferenceType List TypeArgument ReferenceType Term termArrays1 FormalParameter ReferenceType List TypeArgument ReferenceType Term termArrays2 IfStatement BinaryOperation != MethodInvocation termArrays1 size MethodInvocation termArrays2 size BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ListIterator TypeArgument ReferenceType Term VariableDeclarator iterator1 MethodInvocation termArrays1 listIterator LocalVariableDeclaration ReferenceType ListIterator TypeArgument ReferenceType Term VariableDeclarator iterator2 MethodInvocation termArrays2 listIterator WhileStatement MethodInvocation iterator1 hasNext BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator termArray1 MethodInvocation iterator1 next LocalVariableDeclaration ReferenceType Term VariableDeclarator termArray2 MethodInvocation iterator2 next IfStatement TernaryExpression BinaryOperation == MemberReference termArray1 Literal null BinaryOperation == MemberReference termArray2 Literal null MethodInvocation Arrays MemberReference termArray1 MemberReference termArray2 equals BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true ReferenceType Query",0
854,854,,1
833,833,,0
718,718,,1
611,611,,1
231,231,"CompilationUnit PackageDeclaration org.apache.lucene.util EnumDeclaration Modifier public /**
 * Use by certain classes to match version compatibility
 * across releases of Lucene.
 * 
 * <p><b>WARNING</b>: When changing the version parameter
 * that you supply to components in Lucene, do not simply
 * change the version at search-time, but instead also adjust
 * your indexing code to match, and re-index.
 */ Version EnumBody EnumConstantDeclaration /** Match settings and bugs in Lucene's 2.0 release. */ LUCENE_20 EnumConstantDeclaration /** Match settings and bugs in Lucene's 2.1 release. */ LUCENE_21 EnumConstantDeclaration /** Match settings and bugs in Lucene's 2.2 release. */ LUCENE_22 EnumConstantDeclaration /** Match settings and bugs in Lucene's 2.3 release. */ LUCENE_23 EnumConstantDeclaration /** Match settings and bugs in Lucene's 2.4 release. */ LUCENE_24 EnumConstantDeclaration /** Match settings and bugs in Lucene's 2.9 release. */ LUCENE_29 EnumConstantDeclaration /** Match settings and bugs in Lucene's 3.0 release. */ LUCENE_30 EnumConstantDeclaration /** Use this to get the latest &amp; greatest settings, bug
   *  fixes, etc, for Lucene.
   *
   * <p><b>WARNING</b>: if you use this setting, and then
   * upgrade to a newer release of Lucene, sizable changes
   * may happen.  If precise back compatibility is important
   * then you should instead explicitly specify an actual
   * version.
   */ LUCENE_CURRENT MethodDeclaration Modifier public BasicType boolean onOrAfter FormalParameter ReferenceType Version other ReturnStatement BinaryOperation >= MethodInvocation MemberReference other compareTo Literal 0",0
255,255,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis.reverse Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import java.io.IOException ClassDeclaration Modifier public final /**
 * Reverse token string, for example ""country"" => ""yrtnuoc"".
 * <p>
 * If <code>marker</code> is supplied, then tokens will be also prepended by
 * that character. For example, with a marker of &#x5C;u0001, ""country"" =>
 * ""&#x5C;u0001yrtnuoc"". This is useful when implementing efficient leading
 * wildcards search.
 * </p>
 */ ReverseStringFilter FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private final BasicType char VariableDeclarator marker FieldDeclaration Modifier private final static BasicType char VariableDeclarator NOMARKER Literal '￿' FieldDeclaration /**
   * Example marker character: U+0001 (START OF HEADING) 
   */ Modifier public final static BasicType char VariableDeclarator START_OF_HEADING_MARKER Literal '' FieldDeclaration /**
   * Example marker character: U+001F (INFORMATION SEPARATOR ONE)
   */ Modifier public final static BasicType char VariableDeclarator INFORMATION_SEPARATOR_MARKER Literal '' FieldDeclaration /**
   * Example marker character: U+EC00 (PRIVATE USE AREA: EC00) 
   */ Modifier public final static BasicType char VariableDeclarator PUA_EC00_MARKER Literal '' FieldDeclaration /**
   * Example marker character: U+200F (RIGHT-TO-LEFT MARK)
   */ Modifier public final static BasicType char VariableDeclarator RTL_DIRECTION_MARKER Literal '‏' ConstructorDeclaration Modifier public /**
   * Create a new ReverseStringFilter that reverses all tokens in the 
   * supplied {@link TokenStream}.
   * <p>
   * The reversed tokens will not be marked. 
   * </p>
   * 
   * @param in {@link TokenStream} to filter
   */ ReverseStringFilter FormalParameter ReferenceType TokenStream in StatementExpression ExplicitConstructorInvocation MemberReference in MemberReference NOMARKER ConstructorDeclaration Modifier public /**
   * Create a new ReverseStringFilter that reverses and marks all tokens in the
   * supplied {@link TokenStream}.
   * <p>
   * The reversed tokens will be prepended (marked) by the <code>marker</code>
   * character.
   * </p>
   * 
   * @param in {@link TokenStream} to filter
   * @param marker A character used to mark reversed tokens
   */ ReverseStringFilter FormalParameter ReferenceType TokenStream in FormalParameter BasicType char marker StatementExpression SuperConstructorInvocation MemberReference in StatementExpression Assignment This MemberReference marker MemberReference marker = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken IOException IfStatement MethodInvocation input incrementToken BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation termAtt termLength IfStatement BinaryOperation != MemberReference marker MemberReference NOMARKER BlockStatement StatementExpression MemberReference ++ len StatementExpression MethodInvocation termAtt MemberReference len resizeTermBuffer StatementExpression Assignment MethodInvocation termAtt ArraySelector BinaryOperation - MemberReference len Literal 1 termBuffer MemberReference marker = End StatementExpression MethodInvocation MethodInvocation termAtt termBuffer MemberReference len reverse StatementExpression MethodInvocation termAtt MemberReference len setTermLength ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier public static ReferenceType String reverse FormalParameter Modifier final ReferenceType String input LocalVariableDeclaration BasicType char VariableDeclarator charInput MethodInvocation input toCharArray StatementExpression MethodInvocation MemberReference charInput reverse ReturnStatement ClassCreator ReferenceType String MemberReference charInput MethodDeclaration Modifier public static reverse FormalParameter BasicType char buffer StatementExpression MethodInvocation MemberReference buffer MemberReference buffer length reverse MethodDeclaration Modifier public static reverse FormalParameter BasicType char buffer FormalParameter BasicType int len StatementExpression MethodInvocation MemberReference buffer Literal 0 MemberReference len reverse MethodDeclaration Modifier public static reverse FormalParameter BasicType char buffer FormalParameter BasicType int start FormalParameter BasicType int len IfStatement BinaryOperation <= MemberReference len Literal 1 ReturnStatement End LocalVariableDeclaration BasicType int VariableDeclarator num BinaryOperation >> MemberReference len Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference start BinaryOperation < MemberReference i BinaryOperation + MemberReference start MemberReference num MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MemberReference ArraySelector MemberReference i buffer StatementExpression Assignment MemberReference ArraySelector MemberReference i buffer MemberReference ArraySelector BinaryOperation - BinaryOperation - BinaryOperation + BinaryOperation * MemberReference start Literal 2 MemberReference len MemberReference i Literal 1 buffer = StatementExpression Assignment MemberReference ArraySelector BinaryOperation - BinaryOperation - BinaryOperation + BinaryOperation * MemberReference start Literal 2 MemberReference len MemberReference i Literal 1 buffer MemberReference c = End ReferenceType TokenFilter",1
679,679,,0
45,45,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util.Collection Import java.util.Map Import java.util.HashMap Import java.util.Iterator Import java.util.HashSet Import java.util.Arrays Import java.io.IOException Import org.apache.lucene.util.ArrayUtil ClassDeclaration Modifier final /** This class implements {@link InvertedDocConsumer}, which
 *  is passed each token produced by the analyzer on each
 *  field.  It stores these tokens in a hash table, and
 *  allocates separate byte streams per token.  Consumers of
 *  this class, eg {@link FreqProxTermsWriter} and {@link
 *  TermVectorsTermsWriter}, write their own byte streams
 *  under each term.
 */ TermsHash FieldDeclaration Modifier final ReferenceType TermsHashConsumer VariableDeclarator consumer FieldDeclaration Modifier final ReferenceType TermsHash VariableDeclarator nextTermsHash FieldDeclaration Modifier final BasicType int VariableDeclarator bytesPerPosting FieldDeclaration Modifier final BasicType int VariableDeclarator postingsFreeChunk FieldDeclaration Modifier final ReferenceType DocumentsWriter VariableDeclarator docWriter FieldDeclaration Modifier private ReferenceType RawPostingList VariableDeclarator postingsFreeList ArrayCreator ReferenceType RawPostingList Literal 1 FieldDeclaration Modifier private BasicType int VariableDeclarator postingsFreeCount FieldDeclaration Modifier private BasicType int VariableDeclarator postingsAllocCount FieldDeclaration BasicType boolean VariableDeclarator trackAllocations ConstructorDeclaration Modifier public TermsHash FormalParameter Modifier final ReferenceType DocumentsWriter docWriter FormalParameter BasicType boolean trackAllocations FormalParameter Modifier final ReferenceType TermsHashConsumer consumer FormalParameter Modifier final ReferenceType TermsHash nextTermsHash StatementExpression Assignment This MemberReference docWriter MemberReference docWriter = StatementExpression Assignment This MemberReference consumer MemberReference consumer = StatementExpression Assignment This MemberReference nextTermsHash MemberReference nextTermsHash = StatementExpression Assignment This MemberReference trackAllocations MemberReference trackAllocations = StatementExpression Assignment MemberReference bytesPerPosting BinaryOperation + MethodInvocation consumer bytesPerPosting BinaryOperation * Literal 4 MemberReference DocumentsWriter POINTER_NUM_BYTE = StatementExpression Assignment MemberReference postingsFreeChunk Cast BasicType int BinaryOperation / MemberReference DocumentsWriter BYTE_BLOCK_SIZE MemberReference bytesPerPosting = MethodDeclaration Annotation Override ReferenceType InvertedDocConsumerPerThread addThread FormalParameter ReferenceType DocInverterPerThread docInverterPerThread ReturnStatement ClassCreator ReferenceType TermsHashPerThread MemberReference docInverterPerThread This MemberReference nextTermsHash Literal null MethodDeclaration ReferenceType TermsHashPerThread addThread FormalParameter ReferenceType DocInverterPerThread docInverterPerThread FormalParameter ReferenceType TermsHashPerThread primaryPerThread ReturnStatement ClassCreator ReferenceType TermsHashPerThread MemberReference docInverterPerThread This MemberReference nextTermsHash MemberReference primaryPerThread MethodDeclaration Annotation Override setFieldInfos FormalParameter ReferenceType FieldInfos fieldInfos StatementExpression Assignment This MemberReference fieldInfos MemberReference fieldInfos = StatementExpression MethodInvocation consumer MemberReference fieldInfos setFieldInfos MethodDeclaration Modifier public synchronized Annotation Override abort StatementExpression MethodInvocation consumer abort IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression MethodInvocation nextTermsHash abort End MethodDeclaration shrinkFreePostings FormalParameter ReferenceType Map TypeArgument ReferenceType InvertedDocConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType InvertedDocConsumerPerField threadsAndFields FormalParameter ReferenceType SegmentWriteState state AssertStatement BinaryOperation == MemberReference postingsFreeCount MemberReference postingsAllocCount BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation Thread MethodInvocation getName currentThread Literal "": postingsFreeCount="" MemberReference postingsFreeCount Literal "" postingsAllocCount="" MemberReference postingsAllocCount Literal "" consumer="" MemberReference consumer LocalVariableDeclaration Modifier final BasicType int VariableDeclarator newSize MethodInvocation ArrayUtil MemberReference postingsFreeList length MemberReference postingsAllocCount getShrinkSize IfStatement BinaryOperation != MemberReference newSize MemberReference postingsFreeList length BlockStatement LocalVariableDeclaration ReferenceType RawPostingList VariableDeclarator newArray ArrayCreator ReferenceType RawPostingList MemberReference newSize StatementExpression MethodInvocation System MemberReference postingsFreeList Literal 0 MemberReference newArray Literal 0 MemberReference postingsFreeCount arraycopy StatementExpression Assignment MemberReference postingsFreeList MemberReference newArray = End MethodDeclaration Modifier synchronized Annotation Override closeDocStore FormalParameter ReferenceType SegmentWriteState state IOException StatementExpression MethodInvocation consumer MemberReference state closeDocStore IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression MethodInvocation nextTermsHash MemberReference state closeDocStore End MethodDeclaration Modifier synchronized Annotation Override flush FormalParameter ReferenceType Map TypeArgument ReferenceType InvertedDocConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType InvertedDocConsumerPerField threadsAndFields FormalParameter Modifier final ReferenceType SegmentWriteState state IOException LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType TermsHashConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType TermsHashConsumerPerField VariableDeclarator childThreadsAndFields ClassCreator ReferenceType HashMap TypeArgument ReferenceType TermsHashConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType TermsHashConsumerPerField LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType InvertedDocConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType InvertedDocConsumerPerField VariableDeclarator nextThreadsAndFields IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression Assignment MemberReference nextThreadsAndFields ClassCreator ReferenceType HashMap TypeArgument ReferenceType InvertedDocConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType InvertedDocConsumerPerField = StatementExpression Assignment MemberReference nextThreadsAndFields Literal null = End ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Map ReferenceType Entry TypeArgument ReferenceType InvertedDocConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType InvertedDocConsumerPerField VariableDeclarator entry MethodInvocation threadsAndFields entrySet BlockStatement LocalVariableDeclaration ReferenceType TermsHashPerThread VariableDeclarator perThread Cast ReferenceType TermsHashPerThread MethodInvocation entry getKey LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType InvertedDocConsumerPerField VariableDeclarator fields MethodInvocation entry getValue LocalVariableDeclaration ReferenceType Iterator TypeArgument ReferenceType InvertedDocConsumerPerField VariableDeclarator fieldsIt MethodInvocation fields iterator LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType TermsHashConsumerPerField VariableDeclarator childFields ClassCreator ReferenceType HashSet TypeArgument ReferenceType TermsHashConsumerPerField LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType InvertedDocConsumerPerField VariableDeclarator nextChildFields IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression Assignment MemberReference nextChildFields ClassCreator ReferenceType HashSet TypeArgument ReferenceType InvertedDocConsumerPerField = StatementExpression Assignment MemberReference nextChildFields Literal null = End WhileStatement MethodInvocation fieldsIt hasNext BlockStatement LocalVariableDeclaration ReferenceType TermsHashPerField VariableDeclarator perField Cast ReferenceType TermsHashPerField MethodInvocation fieldsIt next StatementExpression MethodInvocation childFields MemberReference perField consumer add IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression MethodInvocation nextChildFields MemberReference perField nextPerField add End End StatementExpression MethodInvocation childThreadsAndFields MemberReference perThread consumer MemberReference childFields put IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression MethodInvocation nextThreadsAndFields MemberReference perThread nextPerThread MemberReference nextChildFields put End End StatementExpression MethodInvocation consumer MemberReference childThreadsAndFields MemberReference state flush StatementExpression MethodInvocation MemberReference threadsAndFields MemberReference state shrinkFreePostings IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression MethodInvocation nextTermsHash MemberReference nextThreadsAndFields MemberReference state flush End MethodDeclaration Modifier public synchronized Annotation Override BasicType boolean freeRAM IfStatement MemberReference ! trackAllocations ReturnStatement Literal false End LocalVariableDeclaration BasicType boolean VariableDeclarator any LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numToFree IfStatement BinaryOperation >= MemberReference postingsFreeCount MemberReference postingsFreeChunk StatementExpression Assignment MemberReference numToFree MemberReference postingsFreeChunk = StatementExpression Assignment MemberReference numToFree MemberReference postingsFreeCount = End StatementExpression Assignment MemberReference any BinaryOperation > MemberReference numToFree Literal 0 = IfStatement MemberReference any BlockStatement StatementExpression MethodInvocation Arrays MemberReference postingsFreeList BinaryOperation - MemberReference postingsFreeCount MemberReference numToFree MemberReference postingsFreeCount Literal null fill StatementExpression Assignment MemberReference postingsFreeCount MemberReference numToFree -= StatementExpression Assignment MemberReference postingsAllocCount MemberReference numToFree -= StatementExpression MethodInvocation docWriter BinaryOperation * MemberReference - numToFree MemberReference bytesPerPosting bytesAllocated StatementExpression Assignment MemberReference any Literal true = End IfStatement BinaryOperation != MemberReference nextTermsHash Literal null StatementExpression Assignment MemberReference any MethodInvocation nextTermsHash freeRAM |= End ReturnStatement MemberReference any MethodDeclaration Modifier public synchronized recyclePostings FormalParameter Modifier final ReferenceType RawPostingList postings FormalParameter Modifier final BasicType int numPostings AssertStatement BinaryOperation >= MemberReference postings length MemberReference numPostings AssertStatement BinaryOperation <= BinaryOperation + MemberReference postingsFreeCount MemberReference numPostings MemberReference postingsFreeList length StatementExpression MethodInvocation System MemberReference postings Literal 0 MemberReference postingsFreeList MemberReference postingsFreeCount MemberReference numPostings arraycopy StatementExpression Assignment MemberReference postingsFreeCount MemberReference numPostings += MethodDeclaration Modifier public synchronized getPostings FormalParameter Modifier final ReferenceType RawPostingList postings AssertStatement MethodInvocation docWriter.writer Literal ""TermsHash.getPostings start"" testPoint AssertStatement BinaryOperation <= MemberReference postingsFreeCount MemberReference postingsFreeList length AssertStatement BinaryOperation <= MemberReference postingsFreeCount MemberReference postingsAllocCount BinaryOperation + BinaryOperation + BinaryOperation + Literal ""postingsFreeCount="" MemberReference postingsFreeCount Literal "" postingsAllocCount="" MemberReference postingsAllocCount LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numToCopy IfStatement BinaryOperation < MemberReference postingsFreeCount MemberReference postings length StatementExpression Assignment MemberReference numToCopy MemberReference postingsFreeCount = StatementExpression Assignment MemberReference numToCopy MemberReference postings length = End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator start BinaryOperation - MemberReference postingsFreeCount MemberReference numToCopy AssertStatement BinaryOperation >= MemberReference start Literal 0 AssertStatement BinaryOperation <= BinaryOperation + MemberReference start MemberReference numToCopy MemberReference postingsFreeList length AssertStatement BinaryOperation <= MemberReference numToCopy MemberReference postings length StatementExpression MethodInvocation System MemberReference postingsFreeList MemberReference start MemberReference postings Literal 0 MemberReference numToCopy arraycopy IfStatement BinaryOperation != MemberReference numToCopy MemberReference postings length BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator extra BinaryOperation - MemberReference postings length MemberReference numToCopy LocalVariableDeclaration Modifier final BasicType int VariableDeclarator newPostingsAllocCount BinaryOperation + MemberReference postingsAllocCount MemberReference extra StatementExpression MethodInvocation consumer MemberReference postings MemberReference numToCopy MemberReference extra createPostings AssertStatement MethodInvocation docWriter.writer Literal ""TermsHash.getPostings after create"" testPoint StatementExpression Assignment MemberReference postingsAllocCount MemberReference extra += IfStatement MemberReference trackAllocations StatementExpression MethodInvocation docWriter BinaryOperation * MemberReference extra MemberReference bytesPerPosting bytesAllocated End IfStatement BinaryOperation > MemberReference newPostingsAllocCount MemberReference postingsFreeList length StatementExpression Assignment MemberReference postingsFreeList ArrayCreator ReferenceType RawPostingList MethodInvocation ArrayUtil MemberReference newPostingsAllocCount getNextSize = End End StatementExpression Assignment MemberReference postingsFreeCount MemberReference numToCopy -= IfStatement MemberReference trackAllocations StatementExpression MethodInvocation docWriter BinaryOperation * MemberReference postings length MemberReference bytesPerPosting bytesUsed End ReferenceType InvertedDocConsumer",0
103,103,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser InterfaceDeclaration Modifier public /**
 * This interface describes a character stream that maintains line and
 * column number positions of the characters.  It also has the capability
 * to backup the stream to some extent.  An implementation of this
 * interface is used in the TokenManager implementation generated by
 * JavaCCParser.
 *
 * All the methods except backup can be implemented in any fashion. backup
 * needs to be implemented correctly for the correct operation of the lexer.
 * Rest of the methods are all used to get information like line number,
 * column number and the String that constitutes a token and are not used
 * by the lexer. Hence their implementation won't affect the generated lexer's
 * operation.
 */ CharStream MethodDeclaration /**
   * Returns the next character from the selected input.  The method
   * of selecting the input is the responsibility of the class
   * implementing this interface.  Can throw any java.io.IOException.
   */ BasicType char readChar java.io.IOException MethodDeclaration /**
   * Returns the column position of the character last read.
   * @deprecated
   * @see #getEndColumn
   */ BasicType int getColumn MethodDeclaration /**
   * Returns the line number of the character last read.
   * @deprecated
   * @see #getEndLine
   */ BasicType int getLine MethodDeclaration /**
   * Returns the column number of the last character for current token (being
   * matched after the last call to BeginTOken).
   */ BasicType int getEndColumn MethodDeclaration /**
   * Returns the line number of the last character for current token (being
   * matched after the last call to BeginTOken).
   */ BasicType int getEndLine MethodDeclaration /**
   * Returns the column number of the first character for current token (being
   * matched after the last call to BeginTOken).
   */ BasicType int getBeginColumn MethodDeclaration /**
   * Returns the line number of the first character for current token (being
   * matched after the last call to BeginTOken).
   */ BasicType int getBeginLine MethodDeclaration /**
   * Backs up the input stream by amount steps. Lexer calls this method if it
   * had already read some characters, but could not use them to match a
   * (longer) token. So, they will be used again as the prefix of the next
   * token and it is the implemetation's responsibility to do this right.
   */ backup FormalParameter BasicType int amount MethodDeclaration /**
   * Returns the next character that marks the beginning of the next token.
   * All characters must remain in the buffer between two successive calls
   * to this method to implement backup correctly.
   */ BasicType char BeginToken java.io.IOException MethodDeclaration /**
   * Returns a string made up of characters from the marked token beginning
   * to the current buffer position. Implementations have the choice of returning
   * anything that they want to. For example, for efficiency, one might decide
   * to just return null, which is a valid implementation.
   */ ReferenceType String GetImage MethodDeclaration /**
   * Returns an array of characters that make up the suffix of length 'len' for
   * the currently matched token. This is used to build up the matched string
   * for use in actions in the case of MORE. A simple and inefficient
   * implementation of this is as follows :
   *
   *   {
   *      String t = GetImage();
   *      return t.substring(t.length() - len, t.length()).toCharArray();
   *   }
   */ BasicType char GetSuffix FormalParameter BasicType int len MethodDeclaration /**
   * The lexer calls this function to indicate that it is done with the stream
   * and hence implementations can free any resources held by this class.
   * Again, the body of this function can be just empty and it will not
   * affect the lexer's operation.
   */ Done",0
172,172,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermDocs Import org.apache.lucene.index.TermEnum Import org.apache.lucene.util.OpenBitSet ClassDeclaration Modifier public DuplicateFilter FieldDeclaration ReferenceType String VariableDeclarator fieldName FieldDeclaration /**
	 * KeepMode determines which document id to consider as the master, all others being 
	 * identified as duplicates. Selecting the ""first occurrence"" can potentially save on IO.
	 */ BasicType int VariableDeclarator keepMode MemberReference KM_USE_FIRST_OCCURRENCE FieldDeclaration Modifier public final static BasicType int VariableDeclarator KM_USE_FIRST_OCCURRENCE Literal 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator KM_USE_LAST_OCCURRENCE Literal 2 FieldDeclaration /**
	 * ""Full"" processing mode starts by setting all bits to false and only setting bits
	 * for documents that contain the given field and are identified as none-duplicates. 

	 * ""Fast"" processing sets all bits to true then unsets all duplicate docs found for the
	 * given field. This approach avoids the need to read TermDocs for terms that are seen 
	 * to have a document frequency of exactly ""1"" (i.e. no duplicates). While a potentially 
	 * faster approach , the downside is that bitsets produced will include bits set for 
	 * documents that do not actually contain the field given.
	 * 
	 */ BasicType int VariableDeclarator processingMode MemberReference PM_FULL_VALIDATION FieldDeclaration Modifier public final static BasicType int VariableDeclarator PM_FULL_VALIDATION Literal 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator PM_FAST_INVALIDATION Literal 2 ConstructorDeclaration Modifier public DuplicateFilter FormalParameter ReferenceType String fieldName StatementExpression ExplicitConstructorInvocation MemberReference fieldName MemberReference KM_USE_LAST_OCCURRENCE MemberReference PM_FULL_VALIDATION ConstructorDeclaration Modifier public DuplicateFilter FormalParameter ReferenceType String fieldName FormalParameter BasicType int keepMode FormalParameter BasicType int processingMode StatementExpression Assignment This MemberReference fieldName MemberReference fieldName = StatementExpression Assignment This MemberReference keepMode MemberReference keepMode = StatementExpression Assignment This MemberReference processingMode MemberReference processingMode = MethodDeclaration Modifier public Annotation Override ReferenceType DocIdSet getDocIdSet FormalParameter ReferenceType IndexReader reader IOException IfStatement BinaryOperation == MemberReference processingMode MemberReference PM_FAST_INVALIDATION BlockStatement ReturnStatement MethodInvocation MemberReference reader fastBits BlockStatement ReturnStatement MethodInvocation MemberReference reader correctBits End MethodDeclaration Modifier private ReferenceType OpenBitSet correctBits FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration ReferenceType OpenBitSet VariableDeclarator bits ClassCreator ReferenceType OpenBitSet MethodInvocation reader maxDoc LocalVariableDeclaration ReferenceType Term VariableDeclarator startTerm ClassCreator ReferenceType Term MemberReference fieldName LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator te MethodInvocation reader MemberReference startTerm terms IfStatement BinaryOperation != MemberReference te Literal null BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator currTerm MethodInvocation te term WhileStatement BinaryOperation && BinaryOperation != MemberReference currTerm Literal null BinaryOperation == MethodInvocation currTerm field MethodInvocation startTerm field BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator lastDoc Literal - 1 LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator td MethodInvocation reader MemberReference currTerm termDocs IfStatement MethodInvocation td next BlockStatement IfStatement BinaryOperation == MemberReference keepMode MemberReference KM_USE_FIRST_OCCURRENCE BlockStatement StatementExpression MethodInvocation bits MethodInvocation td doc set BlockStatement DoStatement MethodInvocation td next BlockStatement StatementExpression Assignment MemberReference lastDoc MethodInvocation td doc = End StatementExpression MethodInvocation bits MemberReference lastDoc set End End IfStatement MethodInvocation ! te next BlockStatement BreakStatement End StatementExpression Assignment MemberReference currTerm MethodInvocation te term = End End ReturnStatement MemberReference bits MethodDeclaration Modifier private ReferenceType OpenBitSet fastBits FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration ReferenceType OpenBitSet VariableDeclarator bits ClassCreator ReferenceType OpenBitSet MethodInvocation reader maxDoc StatementExpression MethodInvocation bits Literal 0 MethodInvocation reader maxDoc set LocalVariableDeclaration ReferenceType Term VariableDeclarator startTerm ClassCreator ReferenceType Term MemberReference fieldName LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator te MethodInvocation reader MemberReference startTerm terms IfStatement BinaryOperation != MemberReference te Literal null BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator currTerm MethodInvocation te term WhileStatement BinaryOperation && BinaryOperation != MemberReference currTerm Literal null BinaryOperation == MethodInvocation currTerm field MethodInvocation startTerm field BlockStatement IfStatement BinaryOperation > MethodInvocation te docFreq Literal 1 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator lastDoc Literal - 1 LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator td MethodInvocation reader MemberReference currTerm termDocs StatementExpression MethodInvocation td next IfStatement BinaryOperation == MemberReference keepMode MemberReference KM_USE_FIRST_OCCURRENCE BlockStatement StatementExpression MethodInvocation td next End DoStatement MethodInvocation td next BlockStatement StatementExpression Assignment MemberReference lastDoc MethodInvocation td doc = StatementExpression MethodInvocation bits MemberReference lastDoc clear End IfStatement BinaryOperation == MemberReference keepMode MemberReference KM_USE_LAST_OCCURRENCE BlockStatement StatementExpression MethodInvocation bits MemberReference lastDoc set End End IfStatement MethodInvocation ! te next BlockStatement BreakStatement End StatementExpression Assignment MemberReference currTerm MethodInvocation te term = End End ReturnStatement MemberReference bits MethodDeclaration Modifier public ReferenceType String getFieldName ReturnStatement MemberReference fieldName MethodDeclaration Modifier public setFieldName FormalParameter ReferenceType String fieldName StatementExpression Assignment This MemberReference fieldName MemberReference fieldName = MethodDeclaration Modifier public BasicType int getKeepMode ReturnStatement MemberReference keepMode MethodDeclaration Modifier public setKeepMode FormalParameter BasicType int keepMode StatementExpression Assignment This MemberReference keepMode MemberReference keepMode = MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation || BinaryOperation == MemberReference obj Literal null BinaryOperation != MethodInvocation obj getClass This MethodInvocation getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType DuplicateFilter VariableDeclarator other Cast ReferenceType DuplicateFilter MemberReference obj ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference keepMode MemberReference other keepMode BinaryOperation == MemberReference processingMode MemberReference other processingMode BinaryOperation || BinaryOperation == MemberReference fieldName MemberReference other fieldName BinaryOperation && BinaryOperation != MemberReference fieldName Literal null MethodInvocation fieldName MemberReference other fieldName equals MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator hash Literal 217 StatementExpression Assignment MemberReference hash BinaryOperation + BinaryOperation * Literal 31 MemberReference hash MemberReference keepMode = StatementExpression Assignment MemberReference hash BinaryOperation + BinaryOperation * Literal 31 MemberReference hash MemberReference processingMode = StatementExpression Assignment MemberReference hash BinaryOperation + BinaryOperation * Literal 31 MemberReference hash MethodInvocation fieldName hashCode = ReturnStatement MemberReference hash MethodDeclaration Modifier public BasicType int getProcessingMode ReturnStatement MemberReference processingMode MethodDeclaration Modifier public setProcessingMode FormalParameter BasicType int processingMode StatementExpression Assignment This MemberReference processingMode MemberReference processingMode = ReferenceType Filter",0
846,846,,1
249,249,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException ClassDeclaration /** A Scorer for queries with a required part and an optional part.
 * Delays skipTo() on the optional part until a score() is needed.
 * <br>
 * This <code>Scorer</code> implements {@link Scorer#skipTo(int)}.
 */ ReqOptSumScorer FieldDeclaration /** The scorers passed from the constructor.
   * These are set to null as soon as their next() or skipTo() returns false.
   */ Modifier private ReferenceType Scorer VariableDeclarator reqScorer FieldDeclaration Modifier private ReferenceType Scorer VariableDeclarator optScorer ConstructorDeclaration Modifier public /** Construct a <code>ReqOptScorer</code>.
   * @param reqScorer The required scorer. This must match.
   * @param optScorer The optional scorer. This is used for scoring only.
   */ ReqOptSumScorer FormalParameter ReferenceType Scorer reqScorer FormalParameter ReferenceType Scorer optScorer StatementExpression SuperConstructorInvocation Literal null StatementExpression Assignment This MemberReference reqScorer MemberReference reqScorer = StatementExpression Assignment This MemberReference optScorer MemberReference optScorer = MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException ReturnStatement MethodInvocation reqScorer nextDoc MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException ReturnStatement MethodInvocation reqScorer MemberReference target advance MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MethodInvocation reqScorer docID MethodDeclaration /** Returns the score of the current document matching the query.
   * Initially invalid, until {@link #next()} is called the first time.
   * @return The score of the required scorer, eventually increased by the score
   * of the optional scorer when it also matches the current document.
   */ Modifier public Annotation Override BasicType float score IOException LocalVariableDeclaration BasicType int VariableDeclarator curDoc MethodInvocation reqScorer docID LocalVariableDeclaration BasicType float VariableDeclarator reqScore MethodInvocation reqScorer score IfStatement BinaryOperation == MemberReference optScorer Literal null BlockStatement ReturnStatement MemberReference reqScore End LocalVariableDeclaration BasicType int VariableDeclarator optScorerDoc MethodInvocation optScorer docID IfStatement BinaryOperation && BinaryOperation < MemberReference optScorerDoc MemberReference curDoc BinaryOperation == Assignment MemberReference optScorerDoc MethodInvocation optScorer MemberReference curDoc advance = MemberReference NO_MORE_DOCS BlockStatement StatementExpression Assignment MemberReference optScorer Literal null = ReturnStatement MemberReference reqScore End ReturnStatement TernaryExpression BinaryOperation == MemberReference optScorerDoc MemberReference curDoc BinaryOperation + MemberReference reqScore MethodInvocation optScorer score MemberReference reqScore ReferenceType Scorer",0
518,518,"CompilationUnit PackageDeclaration org.apache.lucene.search Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermDocs Import org.apache.lucene.util.ToStringUtils Import java.util.Set Import java.io.IOException ClassDeclaration Modifier public /**
 * A query that matches all documents.
 *
 */ MatchAllDocsQuery ConstructorDeclaration Modifier public MatchAllDocsQuery StatementExpression ExplicitConstructorInvocation Literal null FieldDeclaration Modifier private final ReferenceType String VariableDeclarator normsField ConstructorDeclaration Modifier public /**
   * @param normsField Field used for normalization factor (document boost). Null if nothing.
   */ MatchAllDocsQuery FormalParameter ReferenceType String normsField StatementExpression Assignment This MemberReference normsField MemberReference normsField = ClassDeclaration Modifier private MatchAllScorer FieldDeclaration Modifier final ReferenceType TermDocs VariableDeclarator termDocs FieldDeclaration Modifier final BasicType float VariableDeclarator score FieldDeclaration Modifier final BasicType byte VariableDeclarator norms FieldDeclaration Modifier private BasicType int VariableDeclarator doc Literal - 1 ConstructorDeclaration MatchAllScorer FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType Similarity similarity FormalParameter ReferenceType Weight w FormalParameter BasicType byte norms IOException StatementExpression SuperConstructorInvocation MemberReference similarity StatementExpression Assignment This MemberReference termDocs MethodInvocation reader Literal null termDocs = StatementExpression Assignment MemberReference score MethodInvocation w getValue = StatementExpression Assignment This MemberReference norms MemberReference norms = MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MemberReference doc MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException ReturnStatement Assignment MemberReference doc TernaryExpression MethodInvocation termDocs next MethodInvocation termDocs doc MemberReference NO_MORE_DOCS = MethodDeclaration Modifier public Annotation Override BasicType float score ReturnStatement TernaryExpression BinaryOperation == MemberReference norms Literal null MemberReference score BinaryOperation * MemberReference score MethodInvocation Similarity MemberReference ArraySelector MethodInvocation docID norms decodeNorm MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException ReturnStatement Assignment MemberReference doc TernaryExpression MethodInvocation termDocs MemberReference target skipTo MethodInvocation termDocs doc MemberReference NO_MORE_DOCS = ReferenceType Scorer ClassDeclaration Modifier private MatchAllDocsWeight FieldDeclaration Modifier private ReferenceType Similarity VariableDeclarator similarity FieldDeclaration Modifier private BasicType float VariableDeclarator queryWeight FieldDeclaration Modifier private BasicType float VariableDeclarator queryNorm ConstructorDeclaration Modifier public MatchAllDocsWeight FormalParameter ReferenceType Searcher searcher StatementExpression Assignment This MemberReference similarity MethodInvocation searcher getSimilarity = MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""weight("" This MatchAllDocsQuery Literal "")"" MethodDeclaration Modifier public Annotation Override ReferenceType Query getQuery ReturnStatement This MatchAllDocsQuery MethodDeclaration Modifier public Annotation Override BasicType float getValue ReturnStatement MemberReference queryWeight MethodDeclaration Modifier public Annotation Override BasicType float sumOfSquaredWeights StatementExpression Assignment MemberReference queryWeight MethodInvocation getBoost = ReturnStatement BinaryOperation * MemberReference queryWeight MemberReference queryWeight MethodDeclaration Modifier public Annotation Override normalize FormalParameter BasicType float queryNorm StatementExpression Assignment This MemberReference queryNorm MemberReference queryNorm = StatementExpression Assignment MemberReference queryWeight This MemberReference queryNorm *= MethodDeclaration Modifier public Annotation Override ReferenceType Scorer scorer FormalParameter ReferenceType IndexReader reader FormalParameter BasicType boolean scoreDocsInOrder FormalParameter BasicType boolean topScorer IOException ReturnStatement ClassCreator ReferenceType MatchAllScorer MemberReference reader MemberReference similarity This TernaryExpression BinaryOperation != MemberReference normsField Literal null MethodInvocation reader MemberReference normsField norms Literal null MethodDeclaration Modifier public Annotation Override ReferenceType Explanation explain FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int doc LocalVariableDeclaration ReferenceType Explanation VariableDeclarator queryExpl ClassCreator ReferenceType ComplexExplanation Literal true MethodInvocation getValue Literal ""MatchAllDocsQuery, product of:"" IfStatement BinaryOperation != MethodInvocation getBoost Literal 1.0f BlockStatement StatementExpression MethodInvocation queryExpl ClassCreator ReferenceType Explanation MethodInvocation getBoost Literal ""boost"" addDetail End StatementExpression MethodInvocation queryExpl ClassCreator ReferenceType Explanation MemberReference queryNorm Literal ""queryNorm"" addDetail ReturnStatement MemberReference queryExpl ReferenceType Weight MethodDeclaration Modifier public Annotation Override ReferenceType Weight createWeight FormalParameter ReferenceType Searcher searcher ReturnStatement ClassCreator ReferenceType MatchAllDocsWeight MemberReference searcher MethodDeclaration Modifier public Annotation Override extractTerms FormalParameter ReferenceType Set TypeArgument ReferenceType Term terms MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String field LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation buffer Literal ""*:*"" append StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation instanceof MemberReference o ReferenceType MatchAllDocsQuery ReturnStatement Literal false End LocalVariableDeclaration ReferenceType MatchAllDocsQuery VariableDeclarator other Cast ReferenceType MatchAllDocsQuery MemberReference o ReturnStatement BinaryOperation == This MethodInvocation getBoost MethodInvocation other getBoost MethodDeclaration Modifier public Annotation Override BasicType int hashCode ReturnStatement BinaryOperation ^ MethodInvocation Float MethodInvocation getBoost floatToIntBits Literal 0x1AA71190 ReferenceType Query",0
577,577,,0
31,31,"CompilationUnit PackageDeclaration org.apache.lucene.search Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.util.ToStringUtils Import java.io.IOException Import java.util.PriorityQueue ClassDeclaration Modifier public /** Implements the fuzzy search query. The similarity measurement
 * is based on the Levenshtein (edit distance) algorithm.
 * 
 * Warning: this query is not very scalable with its default prefix
 * length of 0 - in this case, *every* term will be enumerated and
 * cause an edit score calculation.
 * 
 */ FuzzyQuery FieldDeclaration Modifier public final static BasicType float VariableDeclarator defaultMinSimilarity Literal 0.5f FieldDeclaration Modifier public final static BasicType int VariableDeclarator defaultPrefixLength Literal 0 FieldDeclaration Modifier private BasicType float VariableDeclarator minimumSimilarity FieldDeclaration Modifier private BasicType int VariableDeclarator prefixLength FieldDeclaration Modifier private BasicType boolean VariableDeclarator termLongEnough Literal false FieldDeclaration Modifier protected ReferenceType Term VariableDeclarator term ConstructorDeclaration Modifier public /**
   * Create a new FuzzyQuery that will match terms with a similarity 
   * of at least <code>minimumSimilarity</code> to <code>term</code>.
   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix
   * of that length is also required.
   * 
   * @param term the term to search for
   * @param minimumSimilarity a value between 0 and 1 to set the required similarity
   *  between the query term and the matching terms. For example, for a
   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length
   *  as the query term is considered similar to the query term if the edit distance
   *  between both terms is less than <code>length(term)*0.5</code>
   * @param prefixLength length of common (non-fuzzy) prefix
   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0
   * or if prefixLength &lt; 0
   */ FuzzyQuery FormalParameter ReferenceType Term term FormalParameter BasicType float minimumSimilarity FormalParameter BasicType int prefixLength IllegalArgumentException StatementExpression Assignment This MemberReference term MemberReference term = IfStatement BinaryOperation >= MemberReference minimumSimilarity Literal 1.0f ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""minimumSimilarity >= 1"" IfStatement BinaryOperation < MemberReference minimumSimilarity Literal 0.0f ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""minimumSimilarity < 0"" End End IfStatement BinaryOperation < MemberReference prefixLength Literal 0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""prefixLength < 0"" End IfStatement BinaryOperation > MethodInvocation term MethodInvocation length text BinaryOperation / Literal 1.0f BinaryOperation - Literal 1.0f MemberReference minimumSimilarity BlockStatement StatementExpression Assignment This MemberReference termLongEnough Literal true = End StatementExpression Assignment This MemberReference minimumSimilarity MemberReference minimumSimilarity = StatementExpression Assignment This MemberReference prefixLength MemberReference prefixLength = StatementExpression Assignment MemberReference rewriteMethod MemberReference SCORING_BOOLEAN_QUERY_REWRITE = ConstructorDeclaration Modifier public /**
   * Calls {@link #FuzzyQuery(Term, float) FuzzyQuery(term, minimumSimilarity, 0)}.
   */ FuzzyQuery FormalParameter ReferenceType Term term FormalParameter BasicType float minimumSimilarity IllegalArgumentException StatementExpression ExplicitConstructorInvocation MemberReference term MemberReference minimumSimilarity MemberReference defaultPrefixLength ConstructorDeclaration Modifier public /**
   * Calls {@link #FuzzyQuery(Term, float) FuzzyQuery(term, 0.5f, 0)}.
   */ FuzzyQuery FormalParameter ReferenceType Term term StatementExpression ExplicitConstructorInvocation MemberReference term MemberReference defaultMinSimilarity MemberReference defaultPrefixLength MethodDeclaration /**
   * Returns the minimum similarity that is required for this query to match.
   * @return float value between 0.0 and 1.0
   */ Modifier public BasicType float getMinSimilarity ReturnStatement MemberReference minimumSimilarity MethodDeclaration /**
   * Returns the non-fuzzy prefix length. This is the number of characters at the start
   * of a term that must be identical (not fuzzy) to the query term if the query
   * is to match that term. 
   */ Modifier public BasicType int getPrefixLength ReturnStatement MemberReference prefixLength MethodDeclaration Modifier protected Annotation Override ReferenceType FilteredTermEnum getEnum FormalParameter ReferenceType IndexReader reader IOException ReturnStatement ClassCreator ReferenceType FuzzyTermEnum MemberReference reader MethodInvocation getTerm MemberReference minimumSimilarity MemberReference prefixLength MethodDeclaration /**
   * Returns the pattern term.
   */ Modifier public ReferenceType Term getTerm ReturnStatement MemberReference term MethodDeclaration Modifier public Annotation Override setRewriteMethod FormalParameter ReferenceType RewriteMethod method ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""FuzzyQuery cannot change rewrite method"" MethodDeclaration Modifier public Annotation Override ReferenceType Query rewrite FormalParameter ReferenceType IndexReader reader IOException IfStatement MemberReference ! termLongEnough BlockStatement ReturnStatement ClassCreator ReferenceType TermQuery MemberReference term End LocalVariableDeclaration BasicType int VariableDeclarator maxSize MethodInvocation BooleanQuery getMaxClauseCount LocalVariableDeclaration ReferenceType PriorityQueue TypeArgument ReferenceType ScoreTerm VariableDeclarator stQueue ClassCreator ReferenceType PriorityQueue TypeArgument ReferenceType ScoreTerm Literal 1024 LocalVariableDeclaration ReferenceType FilteredTermEnum VariableDeclarator enumerator MethodInvocation MemberReference reader getEnum TryStatement LocalVariableDeclaration ReferenceType ScoreTerm VariableDeclarator bottomSt Literal null DoStatement MethodInvocation enumerator next BlockStatement LocalVariableDeclaration Modifier final ReferenceType Term VariableDeclarator t MethodInvocation enumerator term IfStatement BinaryOperation == MemberReference t Literal null BreakStatement End LocalVariableDeclaration ReferenceType ScoreTerm VariableDeclarator st ClassCreator ReferenceType ScoreTerm MemberReference t MethodInvocation enumerator difference IfStatement BinaryOperation < MethodInvocation stQueue size MemberReference maxSize BlockStatement IfStatement BinaryOperation || BinaryOperation == MemberReference bottomSt Literal null BinaryOperation > MethodInvocation st MemberReference bottomSt compareTo Literal 0 BlockStatement StatementExpression Assignment MemberReference bottomSt MemberReference st = End StatementExpression MethodInvocation stQueue MemberReference st offer BlockStatement AssertStatement BinaryOperation != MemberReference bottomSt Literal null IfStatement BinaryOperation < MethodInvocation st MemberReference bottomSt compareTo Literal 0 BlockStatement StatementExpression MethodInvocation stQueue MemberReference st offer End End End StatementExpression MethodInvocation enumerator close LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator query ClassCreator ReferenceType BooleanQuery Literal true LocalVariableDeclaration BasicType int VariableDeclarator size MethodInvocation Math MethodInvocation stQueue size MemberReference maxSize min ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType ScoreTerm VariableDeclarator st MethodInvocation stQueue poll LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator tq ClassCreator ReferenceType TermQuery MemberReference st term StatementExpression MethodInvocation tq BinaryOperation * MethodInvocation getBoost MemberReference st score setBoost StatementExpression MethodInvocation query MemberReference tq MemberReference BooleanClause.Occur SHOULD add End ReturnStatement MemberReference query ClassDeclaration Modifier protected static ScoreTerm FieldDeclaration Modifier public ReferenceType Term VariableDeclarator term FieldDeclaration Modifier public BasicType float VariableDeclarator score ConstructorDeclaration Modifier public ScoreTerm FormalParameter ReferenceType Term term FormalParameter BasicType float score StatementExpression Assignment This MemberReference term MemberReference term = StatementExpression Assignment This MemberReference score MemberReference score = MethodDeclaration Modifier public BasicType int compareTo FormalParameter ReferenceType ScoreTerm other IfStatement BinaryOperation == This MemberReference score MemberReference other score ReturnStatement This MemberReference term MethodInvocation MemberReference other term compareTo ReturnStatement MethodInvocation Float MemberReference other score This MemberReference score compare End ReferenceType Comparable TypeArgument ReferenceType ScoreTerm MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter ReferenceType String field LocalVariableDeclaration Modifier final ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder IfStatement MethodInvocation ! term MethodInvocation MemberReference field equals field BlockStatement StatementExpression MethodInvocation buffer MethodInvocation term field append StatementExpression MethodInvocation buffer Literal "":"" append End StatementExpression MethodInvocation buffer MethodInvocation term text append StatementExpression MethodInvocation buffer Literal '~' append StatementExpression MethodInvocation buffer MethodInvocation Float MemberReference minimumSimilarity toString append StatementExpression MethodInvocation buffer MethodInvocation ToStringUtils MethodInvocation getBoost boost append ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result SuperMethodInvocation hashCode StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result MethodInvocation Float MemberReference minimumSimilarity floatToIntBits = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result MemberReference prefixLength = StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result TernaryExpression BinaryOperation == MemberReference term Literal null Literal 0 MethodInvocation term hashCode = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement SuperMethodInvocation ! MemberReference obj equals ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End LocalVariableDeclaration ReferenceType FuzzyQuery VariableDeclarator other Cast ReferenceType FuzzyQuery MemberReference obj IfStatement BinaryOperation != MethodInvocation Float MemberReference minimumSimilarity floatToIntBits MethodInvocation Float MemberReference other minimumSimilarity floatToIntBits ReturnStatement Literal false End IfStatement BinaryOperation != MemberReference prefixLength MemberReference other prefixLength ReturnStatement Literal false End IfStatement BinaryOperation == MemberReference term Literal null BlockStatement IfStatement BinaryOperation != MemberReference other term Literal null ReturnStatement Literal false End IfStatement MethodInvocation ! term MemberReference other term equals ReturnStatement Literal false End End ReturnStatement Literal true ReferenceType MultiTermQuery",0
521,521,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import org.apache.lucene.index.IndexReader ClassDeclaration Modifier public abstract /**
 * A {@link Collector} implementation that collects the top-scoring hits,
 * returning them as a {@link TopDocs}. This is used by {@link IndexSearcher} to
 * implement {@link TopDocs}-based search. Hits are sorted by score descending
 * and then (when the scores are tied) docID ascending. When you create an
 * instance of this collector you should know in advance whether documents are
 * going to be collected in doc Id order or not.
 *
 * <p><b>NOTE</b>: The values Float.Nan,
 * Float.NEGATIVE_INFINITY and Float.POSITIVE_INFINITY are
 * not valid scores.  This collector will not properly
 * collect hits with such scores.
 */ TopScoreDocCollector ClassDeclaration Modifier private static InOrderTopScoreDocCollector ConstructorDeclaration Modifier private InOrderTopScoreDocCollector FormalParameter BasicType int numHits StatementExpression SuperConstructorInvocation MemberReference numHits MethodDeclaration Modifier public Annotation Override collect FormalParameter BasicType int doc IOException LocalVariableDeclaration BasicType float VariableDeclarator score MethodInvocation scorer score StatementExpression MemberReference ++ totalHits IfStatement BinaryOperation <= MemberReference score MemberReference pqTop score BlockStatement ReturnStatement End StatementExpression Assignment MemberReference pqTop doc BinaryOperation + MemberReference doc MemberReference docBase = StatementExpression Assignment MemberReference pqTop score MemberReference score = StatementExpression Assignment MemberReference pqTop MethodInvocation pq updateTop = MethodDeclaration Modifier public Annotation Override BasicType boolean acceptsDocsOutOfOrder ReturnStatement Literal false ReferenceType TopScoreDocCollector ClassDeclaration Modifier private static OutOfOrderTopScoreDocCollector ConstructorDeclaration Modifier private OutOfOrderTopScoreDocCollector FormalParameter BasicType int numHits StatementExpression SuperConstructorInvocation MemberReference numHits MethodDeclaration Modifier public Annotation Override collect FormalParameter BasicType int doc IOException LocalVariableDeclaration BasicType float VariableDeclarator score MethodInvocation scorer score StatementExpression MemberReference ++ totalHits StatementExpression Assignment MemberReference doc MemberReference docBase += IfStatement BinaryOperation || BinaryOperation < MemberReference score MemberReference pqTop score BinaryOperation && BinaryOperation == MemberReference score MemberReference pqTop score BinaryOperation > MemberReference doc MemberReference pqTop doc BlockStatement ReturnStatement End StatementExpression Assignment MemberReference pqTop doc MemberReference doc = StatementExpression Assignment MemberReference pqTop score MemberReference score = StatementExpression Assignment MemberReference pqTop MethodInvocation pq updateTop = MethodDeclaration Modifier public Annotation Override BasicType boolean acceptsDocsOutOfOrder ReturnStatement Literal true ReferenceType TopScoreDocCollector MethodDeclaration /**
   * Creates a new {@link TopScoreDocCollector} given the number of hits to
   * collect and whether documents are scored in order by the input
   * {@link Scorer} to {@link #setScorer(Scorer)}.
   *
   * <p><b>NOTE</b>: The instances returned by this method
   * pre-allocate a full array of length
   * <code>numHits</code>, and fill the array with sentinel
   * objects.
   */ Modifier public static ReferenceType TopScoreDocCollector create FormalParameter BasicType int numHits FormalParameter BasicType boolean docsScoredInOrder IfStatement MemberReference docsScoredInOrder BlockStatement ReturnStatement ClassCreator ReferenceType InOrderTopScoreDocCollector MemberReference numHits BlockStatement ReturnStatement ClassCreator ReferenceType OutOfOrderTopScoreDocCollector MemberReference numHits End FieldDeclaration ReferenceType ScoreDoc VariableDeclarator pqTop FieldDeclaration BasicType int VariableDeclarator docBase Literal 0 FieldDeclaration ReferenceType Scorer VariableDeclarator scorer ConstructorDeclaration Modifier private TopScoreDocCollector FormalParameter BasicType int numHits StatementExpression SuperConstructorInvocation ClassCreator ReferenceType HitQueue MemberReference numHits Literal true StatementExpression Assignment MemberReference pqTop MethodInvocation pq top = MethodDeclaration Modifier protected Annotation Override ReferenceType TopDocs newTopDocs FormalParameter ReferenceType ScoreDoc results FormalParameter BasicType int start IfStatement BinaryOperation == MemberReference results Literal null BlockStatement ReturnStatement MemberReference EMPTY_TOPDOCS End LocalVariableDeclaration BasicType float VariableDeclarator maxScore MemberReference Float NaN IfStatement BinaryOperation == MemberReference start Literal 0 BlockStatement StatementExpression Assignment MemberReference maxScore MemberReference ArraySelector Literal 0 MemberReference score results = BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MethodInvocation pq size BinaryOperation > MemberReference i Literal 1 MemberReference -- i BlockStatement StatementExpression MethodInvocation pq pop End StatementExpression Assignment MemberReference maxScore MethodInvocation pq MemberReference score pop = End ReturnStatement ClassCreator ReferenceType TopDocs MemberReference totalHits MemberReference results MemberReference maxScore MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int base StatementExpression Assignment MemberReference docBase MemberReference base = MethodDeclaration Modifier public Annotation Override setScorer FormalParameter ReferenceType Scorer scorer IOException StatementExpression Assignment This MemberReference scorer MemberReference scorer = ReferenceType TopDocsCollector TypeArgument ReferenceType ScoreDoc",0
841,841,,0
930,930,,1
450,450,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser Import java.io.ByteArrayOutputStream Import java.io.IOException Import java.io.InputStream Import java.util.Enumeration Import java.util.HashMap Import java.util.Properties Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.DocumentBuilderFactory Import javax.xml.parsers.ParserConfigurationException Import javax.xml.transform.Result Import javax.xml.transform.Source Import javax.xml.transform.Templates Import javax.xml.transform.Transformer Import javax.xml.transform.TransformerConfigurationException Import javax.xml.transform.TransformerException Import javax.xml.transform.TransformerFactory Import javax.xml.transform.dom.DOMResult Import javax.xml.transform.dom.DOMSource Import javax.xml.transform.stream.StreamResult Import org.w3c.dom.Document Import org.w3c.dom.Element Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * Provides utilities for turning query form input (such as from a web page or Swing gui) into 
 * Lucene XML queries by using XSL templates.  This approach offers a convenient way of externalizing 
 * and changing how user input is turned into Lucene queries. 
 * Database applications often adopt similar practices by externalizing SQL in template files that can
 * be easily changed/optimized by a DBA.  
 * The static methods can be used on their own or by creating an instance of this class you can store and 
 * re-use compiled stylesheets for fast use (e.g. in a server environment)
 */ QueryTemplateManager FieldDeclaration Modifier static ReferenceType DocumentBuilderFactory VariableDeclarator dbf MethodInvocation DocumentBuilderFactory newInstance FieldDeclaration Modifier static ReferenceType TransformerFactory VariableDeclarator tFactory MethodInvocation TransformerFactory newInstance FieldDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Templates VariableDeclarator compiledTemplatesCache ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Templates FieldDeclaration ReferenceType Templates VariableDeclarator defaultCompiledTemplates Literal null ConstructorDeclaration Modifier public QueryTemplateManager ConstructorDeclaration Modifier public QueryTemplateManager FormalParameter ReferenceType InputStream xslIs TransformerConfigurationException ParserConfigurationException SAXException IOException StatementExpression MethodInvocation MemberReference xslIs addDefaultQueryTemplate MethodDeclaration Modifier public addDefaultQueryTemplate FormalParameter ReferenceType InputStream xslIs TransformerConfigurationException ParserConfigurationException SAXException IOException StatementExpression Assignment MemberReference defaultCompiledTemplates MethodInvocation MemberReference xslIs getTemplates = MethodDeclaration Modifier public addQueryTemplate FormalParameter ReferenceType String name FormalParameter ReferenceType InputStream xslIs TransformerConfigurationException ParserConfigurationException SAXException IOException StatementExpression MethodInvocation compiledTemplatesCache MemberReference name MethodInvocation MemberReference xslIs getTemplates put MethodDeclaration Modifier public ReferenceType String getQueryAsXmlString FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType String queryTemplateName SAXException IOException ParserConfigurationException TransformerException LocalVariableDeclaration ReferenceType Templates VariableDeclarator ts MethodInvocation compiledTemplatesCache MemberReference queryTemplateName get ReturnStatement MethodInvocation MemberReference formProperties MemberReference ts getQueryAsXmlString MethodDeclaration Modifier public ReferenceType Document getQueryAsDOM FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType String queryTemplateName SAXException IOException ParserConfigurationException TransformerException LocalVariableDeclaration ReferenceType Templates VariableDeclarator ts MethodInvocation compiledTemplatesCache MemberReference queryTemplateName get ReturnStatement MethodInvocation MemberReference formProperties MemberReference ts getQueryAsDOM MethodDeclaration Modifier public ReferenceType String getQueryAsXmlString FormalParameter ReferenceType Properties formProperties SAXException IOException ParserConfigurationException TransformerException ReturnStatement MethodInvocation MemberReference formProperties MemberReference defaultCompiledTemplates getQueryAsXmlString MethodDeclaration Modifier public ReferenceType Document getQueryAsDOM FormalParameter ReferenceType Properties formProperties SAXException IOException ParserConfigurationException TransformerException ReturnStatement MethodInvocation MemberReference formProperties MemberReference defaultCompiledTemplates getQueryAsDOM MethodDeclaration /**
	 * Fast means of constructing query using a precompiled stylesheet  
	 */ Modifier public static ReferenceType String getQueryAsXmlString FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType Templates template SAXException IOException ParserConfigurationException TransformerException LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator baos ClassCreator ReferenceType ByteArrayOutputStream LocalVariableDeclaration ReferenceType StreamResult VariableDeclarator result ClassCreator ReferenceType StreamResult MemberReference baos StatementExpression MethodInvocation MemberReference formProperties MemberReference template MemberReference result transformCriteria ReturnStatement MethodInvocation baos toString MethodDeclaration /**
	 * Slow means of constructing query parsing a stylesheet from an input stream  
	 */ Modifier public static ReferenceType String getQueryAsXmlString FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType InputStream xslIs SAXException IOException ParserConfigurationException TransformerException LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator baos ClassCreator ReferenceType ByteArrayOutputStream LocalVariableDeclaration ReferenceType StreamResult VariableDeclarator result ClassCreator ReferenceType StreamResult MemberReference baos StatementExpression MethodInvocation MemberReference formProperties MemberReference xslIs MemberReference result transformCriteria ReturnStatement MethodInvocation baos toString MethodDeclaration /**
	 * Fast means of constructing query using a cached,precompiled stylesheet  
	 */ Modifier public static ReferenceType Document getQueryAsDOM FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType Templates template SAXException IOException ParserConfigurationException TransformerException LocalVariableDeclaration ReferenceType DOMResult VariableDeclarator result ClassCreator ReferenceType DOMResult StatementExpression MethodInvocation MemberReference formProperties MemberReference template MemberReference result transformCriteria ReturnStatement Cast ReferenceType Document MethodInvocation result getNode MethodDeclaration /**
	 * Slow means of constructing query - parses stylesheet from input stream 
	 */ Modifier public static ReferenceType Document getQueryAsDOM FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType InputStream xslIs SAXException IOException ParserConfigurationException TransformerException LocalVariableDeclaration ReferenceType DOMResult VariableDeclarator result ClassCreator ReferenceType DOMResult StatementExpression MethodInvocation MemberReference formProperties MemberReference xslIs MemberReference result transformCriteria ReturnStatement Cast ReferenceType Document MethodInvocation result getNode MethodDeclaration /**
	 * Slower transformation using an uncompiled stylesheet (suitable for development environment)
	 */ Modifier public static transformCriteria FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType InputStream xslIs FormalParameter ReferenceType Result result SAXException IOException ParserConfigurationException TransformerException StatementExpression MethodInvocation dbf Literal true setNamespaceAware LocalVariableDeclaration ReferenceType DocumentBuilder VariableDeclarator builder MethodInvocation dbf newDocumentBuilder LocalVariableDeclaration ReferenceType org ReferenceType w3c ReferenceType dom ReferenceType Document VariableDeclarator xslDoc MethodInvocation builder MemberReference xslIs parse LocalVariableDeclaration ReferenceType DOMSource VariableDeclarator ds ClassCreator ReferenceType DOMSource MemberReference xslDoc LocalVariableDeclaration ReferenceType Transformer VariableDeclarator transformer Literal null SynchronizedStatement MemberReference tFactory StatementExpression Assignment MemberReference transformer MethodInvocation tFactory MemberReference ds newTransformer = StatementExpression MethodInvocation MemberReference formProperties MemberReference transformer MemberReference result transformCriteria MethodDeclaration /**
	 * Fast transformation using a pre-compiled stylesheet (suitable for production environments)
	 */ Modifier public static transformCriteria FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType Templates template FormalParameter ReferenceType Result result SAXException IOException ParserConfigurationException TransformerException StatementExpression MethodInvocation MemberReference formProperties MethodInvocation template newTransformer MemberReference result transformCriteria MethodDeclaration Modifier public static transformCriteria FormalParameter ReferenceType Properties formProperties FormalParameter ReferenceType Transformer transformer FormalParameter ReferenceType Result result SAXException IOException ParserConfigurationException TransformerException StatementExpression MethodInvocation dbf Literal true setNamespaceAware LocalVariableDeclaration ReferenceType DocumentBuilder VariableDeclarator db MethodInvocation dbf newDocumentBuilder LocalVariableDeclaration ReferenceType org ReferenceType w3c ReferenceType dom ReferenceType Document VariableDeclarator doc MethodInvocation db newDocument LocalVariableDeclaration ReferenceType Element VariableDeclarator root MethodInvocation doc Literal ""Document"" createElement StatementExpression MethodInvocation doc MemberReference root appendChild LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator keysEnum MethodInvocation formProperties keys WhileStatement MethodInvocation keysEnum hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator propName Cast ReferenceType String MethodInvocation keysEnum nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation formProperties MemberReference propName getProperty IfStatement BinaryOperation && BinaryOperation != MemberReference value Literal null BinaryOperation > MethodInvocation value length Literal 0 BlockStatement StatementExpression MethodInvocation DOMUtils MemberReference root MemberReference propName MemberReference value insertChild End End LocalVariableDeclaration ReferenceType DOMSource VariableDeclarator xml ClassCreator ReferenceType DOMSource MemberReference doc StatementExpression MethodInvocation transformer MemberReference xml MemberReference result transform MethodDeclaration /**
	 * Parses a query stylesheet for repeated use
	 */ Modifier public static ReferenceType Templates getTemplates FormalParameter ReferenceType InputStream xslIs ParserConfigurationException SAXException IOException TransformerConfigurationException StatementExpression MethodInvocation dbf Literal true setNamespaceAware LocalVariableDeclaration ReferenceType DocumentBuilder VariableDeclarator builder MethodInvocation dbf newDocumentBuilder LocalVariableDeclaration ReferenceType org ReferenceType w3c ReferenceType dom ReferenceType Document VariableDeclarator xslDoc MethodInvocation builder MemberReference xslIs parse LocalVariableDeclaration ReferenceType DOMSource VariableDeclarator ds ClassCreator ReferenceType DOMSource MemberReference xslDoc ReturnStatement MethodInvocation tFactory MemberReference ds newTemplates",0
199,199,CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import org.apache.lucene.document.Fieldable ClassDeclaration Modifier abstract DocFieldConsumerPerField MethodDeclaration /** Processes all occurrences of a single field */ Modifier abstract processFields FormalParameter ReferenceType Fieldable fields FormalParameter BasicType int count IOException MethodDeclaration Modifier abstract abort,0
412,412,"CompilationUnit PackageDeclaration org.apache.lucene.ant Import org.apache.lucene.document.Field Import org.w3c.dom.Element Import org.w3c.dom.Node Import org.w3c.dom.NodeList Import org.w3c.dom.Text Import org.w3c.tidy.Tidy Import java.io.BufferedReader Import java.io.File Import java.io.FileInputStream Import java.io.FileReader Import java.io.IOException Import java.io.InputStream Import java.io.StringWriter ClassDeclaration Modifier public /**
 *  The <code>HtmlDocument</code> class creates a Lucene {@link
 *  org.apache.lucene.document.Document} from an HTML document. <P>
 *
 *  It does this by using JTidy package. It can take input input
 *  from {@link java.io.File} or {@link java.io.InputStream}.
 *
 */ HtmlDocument FieldDeclaration Modifier private ReferenceType Element VariableDeclarator rawDoc ConstructorDeclaration Modifier public /**
     *  Constructs an <code>HtmlDocument</code> from a {@link
     *  java.io.File}.
     *
     *@param  file             the <code>File</code> containing the
     *      HTML to parse
     *@exception  IOException  if an I/O exception occurs
     */ HtmlDocument FormalParameter ReferenceType File file IOException LocalVariableDeclaration ReferenceType Tidy VariableDeclarator tidy ClassCreator ReferenceType Tidy StatementExpression MethodInvocation tidy Literal true setQuiet StatementExpression MethodInvocation tidy Literal false setShowWarnings LocalVariableDeclaration ReferenceType org ReferenceType w3c ReferenceType dom ReferenceType Document VariableDeclarator root Literal null LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is ClassCreator ReferenceType FileInputStream MemberReference file TryStatement StatementExpression Assignment MemberReference root MethodInvocation tidy MemberReference is Literal null parseDOM = StatementExpression MethodInvocation is close StatementExpression Assignment MemberReference rawDoc MethodInvocation root getDocumentElement = ConstructorDeclaration Modifier public /**
     *  Constructs an <code>HtmlDocument</code> from an {@link
     *  java.io.InputStream}.
     *
     *@param  is               the <code>InputStream</code>
     *      containing the HTML
     */ HtmlDocument FormalParameter ReferenceType InputStream is LocalVariableDeclaration ReferenceType Tidy VariableDeclarator tidy ClassCreator ReferenceType Tidy StatementExpression MethodInvocation tidy Literal true setQuiet StatementExpression MethodInvocation tidy Literal false setShowWarnings LocalVariableDeclaration ReferenceType org ReferenceType w3c ReferenceType dom ReferenceType Document VariableDeclarator root MethodInvocation tidy MemberReference is Literal null parseDOM StatementExpression Assignment MemberReference rawDoc MethodInvocation root getDocumentElement = ConstructorDeclaration Modifier public /**
     *  Constructs an <code>HtmlDocument</code> from a
     *  {@link java.io.File}.
     *  @param  file the <code>File</code> containing the
     *   HTML to parse
     *  @param  tidyConfigFile   the <code>String</code>
     *   containing the full path to the Tidy config file
     *  @exception  IOException  if an I/O exception occurs */ HtmlDocument FormalParameter ReferenceType File file FormalParameter ReferenceType String tidyConfigFile IOException LocalVariableDeclaration ReferenceType Tidy VariableDeclarator tidy ClassCreator ReferenceType Tidy StatementExpression MethodInvocation tidy MemberReference tidyConfigFile setConfigurationFromFile StatementExpression MethodInvocation tidy Literal true setQuiet StatementExpression MethodInvocation tidy Literal false setShowWarnings LocalVariableDeclaration ReferenceType org ReferenceType w3c ReferenceType dom ReferenceType Document VariableDeclarator root MethodInvocation tidy ClassCreator ReferenceType FileInputStream MemberReference file Literal null parseDOM StatementExpression Assignment MemberReference rawDoc MethodInvocation root getDocumentElement = MethodDeclaration /**
     *  Creates a Lucene <code>Document</code> from a
     *  {@link java.io.File}.
     *  @param  file 
     *  @param  tidyConfigFile the full path to the Tidy
     *   config file
     *  @exception  IOException */ Modifier public static ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document Document FormalParameter ReferenceType File file FormalParameter ReferenceType String tidyConfigFile IOException LocalVariableDeclaration ReferenceType HtmlDocument VariableDeclarator htmlDoc ClassCreator ReferenceType HtmlDocument MemberReference file MemberReference tidyConfigFile LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document VariableDeclarator luceneDoc ClassCreator ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document StatementExpression MethodInvocation luceneDoc ClassCreator ReferenceType Field Literal ""title"" MethodInvocation htmlDoc getTitle MemberReference Field.Store YES MemberReference Field.Index ANALYZED add StatementExpression MethodInvocation luceneDoc ClassCreator ReferenceType Field Literal ""contents"" MethodInvocation htmlDoc getBody MemberReference Field.Store YES MemberReference Field.Index ANALYZED add LocalVariableDeclaration ReferenceType String VariableDeclarator contents Literal null LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType FileReader MemberReference file LocalVariableDeclaration ReferenceType StringWriter VariableDeclarator sw ClassCreator ReferenceType StringWriter LocalVariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation br readLine WhileStatement BinaryOperation != MemberReference line Literal null BlockStatement StatementExpression MethodInvocation sw MemberReference line write StatementExpression Assignment MemberReference line MethodInvocation br readLine = End StatementExpression MethodInvocation br close StatementExpression Assignment MemberReference contents MethodInvocation sw toString = StatementExpression MethodInvocation sw close StatementExpression MethodInvocation luceneDoc ClassCreator ReferenceType Field Literal ""rawcontents"" MemberReference contents MemberReference Field.Store YES MemberReference Field.Index NO add ReturnStatement MemberReference luceneDoc MethodDeclaration /**
     *  Creates a Lucene <code>Document</code> from an {@link
     *  java.io.InputStream}.
     *
     *@param  is
     */ Modifier public static ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document getDocument FormalParameter ReferenceType InputStream is LocalVariableDeclaration ReferenceType HtmlDocument VariableDeclarator htmlDoc ClassCreator ReferenceType HtmlDocument MemberReference is LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document VariableDeclarator luceneDoc ClassCreator ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document StatementExpression MethodInvocation luceneDoc ClassCreator ReferenceType Field Literal ""title"" MethodInvocation htmlDoc getTitle MemberReference Field.Store YES MemberReference Field.Index ANALYZED add StatementExpression MethodInvocation luceneDoc ClassCreator ReferenceType Field Literal ""contents"" MethodInvocation htmlDoc getBody MemberReference Field.Store YES MemberReference Field.Index ANALYZED add ReturnStatement MemberReference luceneDoc MethodDeclaration /**
     *  Creates a Lucene <code>Document</code> from a {@link
     *  java.io.File}.
     *
     *@param  file
     *@exception  IOException
     */ Modifier public static ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document Document FormalParameter ReferenceType File file IOException LocalVariableDeclaration ReferenceType HtmlDocument VariableDeclarator htmlDoc ClassCreator ReferenceType HtmlDocument MemberReference file LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document VariableDeclarator luceneDoc ClassCreator ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType document ReferenceType Document StatementExpression MethodInvocation luceneDoc ClassCreator ReferenceType Field Literal ""title"" MethodInvocation htmlDoc getTitle MemberReference Field.Store YES MemberReference Field.Index ANALYZED add StatementExpression MethodInvocation luceneDoc ClassCreator ReferenceType Field Literal ""contents"" MethodInvocation htmlDoc getBody MemberReference Field.Store YES MemberReference Field.Index ANALYZED add LocalVariableDeclaration ReferenceType String VariableDeclarator contents Literal null LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType FileReader MemberReference file LocalVariableDeclaration ReferenceType StringWriter VariableDeclarator sw ClassCreator ReferenceType StringWriter LocalVariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation br readLine WhileStatement BinaryOperation != MemberReference line Literal null BlockStatement StatementExpression MethodInvocation sw MemberReference line write StatementExpression Assignment MemberReference line MethodInvocation br readLine = End StatementExpression MethodInvocation br close StatementExpression Assignment MemberReference contents MethodInvocation sw toString = StatementExpression MethodInvocation sw close StatementExpression MethodInvocation luceneDoc ClassCreator ReferenceType Field Literal ""rawcontents"" MemberReference contents MemberReference Field.Store YES MemberReference Field.Index NO add ReturnStatement MemberReference luceneDoc MethodDeclaration /**
     *  Runs <code>HtmlDocument</code> on the files specified on
     *  the command line.
     *
     *@param  args           Command line arguments
     *@exception  Exception  Description of Exception
     */ Modifier public static main FormalParameter ReferenceType String args Exception LocalVariableDeclaration ReferenceType HtmlDocument VariableDeclarator doc ClassCreator ReferenceType HtmlDocument ClassCreator ReferenceType FileInputStream ClassCreator ReferenceType File MemberReference ArraySelector Literal 0 args StatementExpression MethodInvocation System.out BinaryOperation + Literal ""Title = "" MethodInvocation doc getTitle println StatementExpression MethodInvocation System.out BinaryOperation + Literal ""Body  = "" MethodInvocation doc getBody println MethodDeclaration /**
     *  Gets the title attribute of the <code>HtmlDocument</code>
     *  object.
     *
     *@return    the title value
     */ Modifier public ReferenceType String getTitle IfStatement BinaryOperation == MemberReference rawDoc Literal null BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType String VariableDeclarator title Literal """" LocalVariableDeclaration ReferenceType NodeList VariableDeclarator nl MethodInvocation rawDoc Literal ""title"" getElementsByTagName IfStatement BinaryOperation > MethodInvocation nl getLength Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator titleElement Cast ReferenceType Element MethodInvocation nl Literal 0 item LocalVariableDeclaration ReferenceType Text VariableDeclarator text Cast ReferenceType Text MethodInvocation titleElement getFirstChild IfStatement BinaryOperation != MemberReference text Literal null BlockStatement StatementExpression Assignment MemberReference title MethodInvocation text getData = End End ReturnStatement MemberReference title MethodDeclaration /**
     *  Gets the bodyText attribute of the
     *  <code>HtmlDocument</code> object.
     *
     *@return    the bodyText value
     */ Modifier public ReferenceType String getBody IfStatement BinaryOperation == MemberReference rawDoc Literal null BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType String VariableDeclarator body Literal """" LocalVariableDeclaration ReferenceType NodeList VariableDeclarator nl MethodInvocation rawDoc Literal ""body"" getElementsByTagName IfStatement BinaryOperation > MethodInvocation nl getLength Literal 0 BlockStatement StatementExpression Assignment MemberReference body MethodInvocation MethodInvocation nl Literal 0 item getBodyText = End ReturnStatement MemberReference body MethodDeclaration /**
     *  Gets the bodyText attribute of the
     *  <code>HtmlDocument</code> object.
     *
     *@param  node  a DOM Node
     *@return       The bodyText value
     */ Modifier private ReferenceType String getBodyText FormalParameter ReferenceType Node node LocalVariableDeclaration ReferenceType NodeList VariableDeclarator nl MethodInvocation node getChildNodes LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator buffer ClassCreator ReferenceType StringBuilder ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nl getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child MethodInvocation nl MemberReference i item SwitchStatement MethodInvocation child getNodeType SwitchStatementCase MemberReference Node ELEMENT_NODE StatementExpression MethodInvocation buffer MethodInvocation MemberReference child getBodyText append StatementExpression MethodInvocation buffer Literal "" "" append BreakStatement SwitchStatementCase MemberReference Node TEXT_NODE StatementExpression MethodInvocation buffer Cast ReferenceType Text MemberReference child append BreakStatement End End ReturnStatement MethodInvocation buffer toString",0
475,475,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import java.util.ArrayList Import java.util.Arrays Import java.util.Collection Import java.util.HashMap Import java.util.HashSet Import java.util.List Import java.util.Map Import java.util.Set Import org.apache.lucene.document.Document Import org.apache.lucene.document.FieldSelector Import org.apache.lucene.search.DefaultSimilarity Import org.apache.lucene.store.BufferedIndexInput Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexInput Import org.apache.lucene.store.IndexOutput Import org.apache.lucene.util.BitVector Import org.apache.lucene.util.CloseableThreadLocal ClassDeclaration Modifier public /**
 * <p><b>NOTE:</b> This API is new and still experimental
 * (subject to change suddenly in the next release)</p>
 */ SegmentReader FieldDeclaration Modifier protected BasicType boolean VariableDeclarator readOnly FieldDeclaration Modifier private ReferenceType SegmentInfo VariableDeclarator si FieldDeclaration Modifier private BasicType int VariableDeclarator readBufferSize FieldDeclaration ReferenceType CloseableThreadLocal TypeArgument ReferenceType FieldsReader VariableDeclarator fieldsReaderLocal ClassCreator ReferenceType FieldsReaderLocal FieldDeclaration ReferenceType CloseableThreadLocal TypeArgument ReferenceType TermVectorsReader VariableDeclarator termVectorsLocal ClassCreator ReferenceType CloseableThreadLocal TypeArgument ReferenceType TermVectorsReader FieldDeclaration ReferenceType BitVector VariableDeclarator deletedDocs Literal null FieldDeclaration ReferenceType Ref VariableDeclarator deletedDocsRef Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator deletedDocsDirty Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator normsDirty Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator pendingDeleteCount FieldDeclaration Modifier private BasicType boolean VariableDeclarator rollbackHasChanges Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator rollbackDeletedDocsDirty Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator rollbackNormsDirty Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator rollbackPendingDeleteCount FieldDeclaration Modifier private ReferenceType IndexInput VariableDeclarator singleNormStream FieldDeclaration Modifier private ReferenceType Ref VariableDeclarator singleNormRef FieldDeclaration ReferenceType CoreReaders VariableDeclarator core ClassDeclaration Modifier final static CoreReaders FieldDeclaration Modifier private final ReferenceType Ref VariableDeclarator ref ClassCreator ReferenceType Ref FieldDeclaration Modifier final ReferenceType String VariableDeclarator segment FieldDeclaration Modifier final ReferenceType FieldInfos VariableDeclarator fieldInfos FieldDeclaration Modifier final ReferenceType IndexInput VariableDeclarator freqStream FieldDeclaration Modifier final ReferenceType IndexInput VariableDeclarator proxStream FieldDeclaration Modifier final ReferenceType TermInfosReader VariableDeclarator tisNoIndex FieldDeclaration Modifier final ReferenceType Directory VariableDeclarator dir FieldDeclaration Modifier final ReferenceType Directory VariableDeclarator cfsDir FieldDeclaration Modifier final BasicType int VariableDeclarator readBufferSize FieldDeclaration Modifier final BasicType int VariableDeclarator termsIndexDivisor FieldDeclaration ReferenceType TermInfosReader VariableDeclarator tis FieldDeclaration ReferenceType FieldsReader VariableDeclarator fieldsReaderOrig FieldDeclaration ReferenceType TermVectorsReader VariableDeclarator termVectorsReaderOrig FieldDeclaration ReferenceType CompoundFileReader VariableDeclarator cfsReader FieldDeclaration ReferenceType CompoundFileReader VariableDeclarator storeCFSReader ConstructorDeclaration CoreReaders FormalParameter ReferenceType Directory dir FormalParameter ReferenceType SegmentInfo si FormalParameter BasicType int readBufferSize FormalParameter BasicType int termsIndexDivisor IOException StatementExpression Assignment MemberReference segment MemberReference si name = StatementExpression Assignment This MemberReference readBufferSize MemberReference readBufferSize = StatementExpression Assignment This MemberReference dir MemberReference dir = LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement LocalVariableDeclaration ReferenceType Directory VariableDeclarator dir0 MemberReference dir IfStatement MethodInvocation si getUseCompoundFile BlockStatement StatementExpression Assignment MemberReference cfsReader ClassCreator ReferenceType CompoundFileReader MemberReference dir BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames COMPOUND_FILE_EXTENSION MemberReference readBufferSize = StatementExpression Assignment MemberReference dir0 MemberReference cfsReader = End StatementExpression Assignment MemberReference cfsDir MemberReference dir0 = StatementExpression Assignment MemberReference fieldInfos ClassCreator ReferenceType FieldInfos MemberReference cfsDir BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames FIELD_INFOS_EXTENSION = StatementExpression Assignment This MemberReference termsIndexDivisor MemberReference termsIndexDivisor = LocalVariableDeclaration ReferenceType TermInfosReader VariableDeclarator reader ClassCreator ReferenceType TermInfosReader MemberReference cfsDir MemberReference segment MemberReference fieldInfos MemberReference readBufferSize MemberReference termsIndexDivisor IfStatement BinaryOperation == MemberReference termsIndexDivisor Literal - 1 BlockStatement StatementExpression Assignment MemberReference tisNoIndex MemberReference reader = BlockStatement StatementExpression Assignment MemberReference tis MemberReference reader = StatementExpression Assignment MemberReference tisNoIndex Literal null = End StatementExpression Assignment MemberReference freqStream MethodInvocation cfsDir BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames FREQ_EXTENSION MemberReference readBufferSize openInput = IfStatement MethodInvocation fieldInfos hasProx BlockStatement StatementExpression Assignment MemberReference proxStream MethodInvocation cfsDir BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames PROX_EXTENSION MemberReference readBufferSize openInput = BlockStatement StatementExpression Assignment MemberReference proxStream Literal null = End StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation decRef End MethodDeclaration Modifier synchronized ReferenceType TermVectorsReader getTermVectorsReaderOrig ReturnStatement MemberReference termVectorsReaderOrig MethodDeclaration Modifier synchronized ReferenceType FieldsReader getFieldsReaderOrig ReturnStatement MemberReference fieldsReaderOrig MethodDeclaration Modifier synchronized incRef StatementExpression MethodInvocation ref incRef MethodDeclaration Modifier synchronized ReferenceType Directory getCFSReader ReturnStatement MemberReference cfsReader MethodDeclaration Modifier synchronized ReferenceType TermInfosReader getTermsReader IfStatement BinaryOperation != MemberReference tis Literal null BlockStatement ReturnStatement MemberReference tis BlockStatement ReturnStatement MemberReference tisNoIndex End MethodDeclaration Modifier synchronized BasicType boolean termsIndexIsLoaded ReturnStatement BinaryOperation != MemberReference tis Literal null MethodDeclaration Modifier synchronized loadTermsIndex FormalParameter ReferenceType SegmentInfo si FormalParameter BasicType int termsIndexDivisor IOException IfStatement BinaryOperation == MemberReference tis Literal null BlockStatement LocalVariableDeclaration ReferenceType Directory VariableDeclarator dir0 IfStatement MethodInvocation si getUseCompoundFile BlockStatement IfStatement BinaryOperation == MemberReference cfsReader Literal null BlockStatement StatementExpression Assignment MemberReference cfsReader ClassCreator ReferenceType CompoundFileReader MemberReference dir BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames COMPOUND_FILE_EXTENSION MemberReference readBufferSize = End StatementExpression Assignment MemberReference dir0 MemberReference cfsReader = BlockStatement StatementExpression Assignment MemberReference dir0 MemberReference dir = End StatementExpression Assignment MemberReference tis ClassCreator ReferenceType TermInfosReader MemberReference dir0 MemberReference segment MemberReference fieldInfos MemberReference readBufferSize MemberReference termsIndexDivisor = End MethodDeclaration Modifier synchronized decRef IOException IfStatement BinaryOperation == MethodInvocation ref decRef Literal 0 BlockStatement IfStatement BinaryOperation != MemberReference tis Literal null BlockStatement StatementExpression MethodInvocation tis close StatementExpression Assignment MemberReference tis Literal null = End IfStatement BinaryOperation != MemberReference tisNoIndex Literal null BlockStatement StatementExpression MethodInvocation tisNoIndex close End IfStatement BinaryOperation != MemberReference freqStream Literal null BlockStatement StatementExpression MethodInvocation freqStream close End IfStatement BinaryOperation != MemberReference proxStream Literal null BlockStatement StatementExpression MethodInvocation proxStream close End IfStatement BinaryOperation != MemberReference termVectorsReaderOrig Literal null BlockStatement StatementExpression MethodInvocation termVectorsReaderOrig close End IfStatement BinaryOperation != MemberReference fieldsReaderOrig Literal null BlockStatement StatementExpression MethodInvocation fieldsReaderOrig close End IfStatement BinaryOperation != MemberReference cfsReader Literal null BlockStatement StatementExpression MethodInvocation cfsReader close End IfStatement BinaryOperation != MemberReference storeCFSReader Literal null BlockStatement StatementExpression MethodInvocation storeCFSReader close End End MethodDeclaration Modifier synchronized openDocStores FormalParameter ReferenceType SegmentInfo si IOException AssertStatement MethodInvocation si.name MemberReference segment equals IfStatement BinaryOperation == MemberReference fieldsReaderOrig Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType Directory VariableDeclarator storeDir IfStatement BinaryOperation != MethodInvocation si getDocStoreOffset Literal - 1 BlockStatement IfStatement MethodInvocation si getDocStoreIsCompoundFile BlockStatement AssertStatement BinaryOperation == MemberReference storeCFSReader Literal null StatementExpression Assignment MemberReference storeCFSReader ClassCreator ReferenceType CompoundFileReader MemberReference dir BinaryOperation + BinaryOperation + MethodInvocation si getDocStoreSegment Literal ""."" MemberReference IndexFileNames COMPOUND_FILE_STORE_EXTENSION MemberReference readBufferSize = StatementExpression Assignment MemberReference storeDir MemberReference storeCFSReader = AssertStatement BinaryOperation != MemberReference storeDir Literal null BlockStatement StatementExpression Assignment MemberReference storeDir MemberReference dir = AssertStatement BinaryOperation != MemberReference storeDir Literal null End IfStatement MethodInvocation si getUseCompoundFile BlockStatement IfStatement BinaryOperation == MemberReference cfsReader Literal null BlockStatement StatementExpression Assignment MemberReference cfsReader ClassCreator ReferenceType CompoundFileReader MemberReference dir BinaryOperation + BinaryOperation + MemberReference segment Literal ""."" MemberReference IndexFileNames COMPOUND_FILE_EXTENSION MemberReference readBufferSize = End StatementExpression Assignment MemberReference storeDir MemberReference cfsReader = AssertStatement BinaryOperation != MemberReference storeDir Literal null BlockStatement StatementExpression Assignment MemberReference storeDir MemberReference dir = AssertStatement BinaryOperation != MemberReference storeDir Literal null End End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator storesSegment IfStatement BinaryOperation != MethodInvocation si getDocStoreOffset Literal - 1 BlockStatement StatementExpression Assignment MemberReference storesSegment MethodInvocation si getDocStoreSegment = BlockStatement StatementExpression Assignment MemberReference storesSegment MemberReference segment = End StatementExpression Assignment MemberReference fieldsReaderOrig ClassCreator ReferenceType FieldsReader MemberReference storeDir MemberReference storesSegment MemberReference fieldInfos MemberReference readBufferSize MethodInvocation si getDocStoreOffset MemberReference si docCount = IfStatement BinaryOperation && BinaryOperation == MethodInvocation si getDocStoreOffset Literal - 1 BinaryOperation != MethodInvocation fieldsReaderOrig size MemberReference si docCount BlockStatement ThrowStatement ClassCreator ReferenceType CorruptIndexException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""doc counts differ for segment "" MemberReference segment Literal "": fieldsReader shows "" MethodInvocation fieldsReaderOrig size Literal "" but segmentInfo shows "" MemberReference si docCount End IfStatement MethodInvocation fieldInfos hasVectors BlockStatement StatementExpression Assignment MemberReference termVectorsReaderOrig ClassCreator ReferenceType TermVectorsReader MemberReference storeDir MemberReference storesSegment MemberReference fieldInfos MemberReference readBufferSize MethodInvocation si getDocStoreOffset MemberReference si docCount = End End ClassDeclaration Modifier private /**
   * Sets the initial value 
   */ FieldsReaderLocal MethodDeclaration Modifier protected Annotation Override ReferenceType FieldsReader initialValue ReturnStatement Cast ReferenceType FieldsReader MethodInvocation core MethodInvocation clone getFieldsReaderOrig ReferenceType CloseableThreadLocal TypeArgument ReferenceType FieldsReader ClassDeclaration Modifier static Ref FieldDeclaration Modifier private BasicType int VariableDeclarator refCount Literal 1 MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + Literal ""refcount: "" MemberReference refCount MethodDeclaration Modifier public synchronized BasicType int refCount ReturnStatement MemberReference refCount MethodDeclaration Modifier public synchronized BasicType int incRef AssertStatement BinaryOperation > MemberReference refCount Literal 0 StatementExpression MemberReference ++ refCount ReturnStatement MemberReference refCount MethodDeclaration Modifier public synchronized BasicType int decRef AssertStatement BinaryOperation > MemberReference refCount Literal 0 StatementExpression MemberReference -- refCount ReturnStatement MemberReference refCount ClassDeclaration Modifier final /**
   * Byte[] referencing is used because a new norm object needs 
   * to be created for each clone, and the byte array is all 
   * that is needed for sharing between cloned readers.  The 
   * current norm referencing is for sharing between readers 
   * whereas the byte[] referencing is for copy on write which 
   * is independent of reader references (i.e. incRef, decRef).
   */ Norm FieldDeclaration Modifier private BasicType int VariableDeclarator refCount Literal 1 FieldDeclaration Modifier private ReferenceType Norm VariableDeclarator origNorm FieldDeclaration Modifier private ReferenceType IndexInput VariableDeclarator in FieldDeclaration Modifier private BasicType long VariableDeclarator normSeek FieldDeclaration Modifier private ReferenceType Ref VariableDeclarator bytesRef FieldDeclaration Modifier private BasicType byte VariableDeclarator bytes FieldDeclaration Modifier private BasicType boolean VariableDeclarator dirty FieldDeclaration Modifier private BasicType int VariableDeclarator number FieldDeclaration Modifier private BasicType boolean VariableDeclarator rollbackDirty ConstructorDeclaration Modifier public Norm FormalParameter ReferenceType IndexInput in FormalParameter BasicType int number FormalParameter BasicType long normSeek StatementExpression Assignment This MemberReference in MemberReference in = StatementExpression Assignment This MemberReference number MemberReference number = StatementExpression Assignment This MemberReference normSeek MemberReference normSeek = MethodDeclaration Modifier public synchronized incRef AssertStatement BinaryOperation && BinaryOperation > MemberReference refCount Literal 0 BinaryOperation || BinaryOperation == MemberReference origNorm Literal null BinaryOperation > MemberReference origNorm refCount Literal 0 StatementExpression MemberReference ++ refCount MethodDeclaration Modifier private closeInput IOException IfStatement BinaryOperation != MemberReference in Literal null BlockStatement IfStatement BinaryOperation != MemberReference in MemberReference singleNormStream BlockStatement StatementExpression MethodInvocation in close BlockStatement IfStatement BinaryOperation == MethodInvocation singleNormRef decRef Literal 0 BlockStatement StatementExpression MethodInvocation singleNormStream close StatementExpression Assignment MemberReference singleNormStream Literal null = End End StatementExpression Assignment MemberReference in Literal null = End MethodDeclaration Modifier public synchronized decRef IOException AssertStatement BinaryOperation && BinaryOperation > MemberReference refCount Literal 0 BinaryOperation || BinaryOperation == MemberReference origNorm Literal null BinaryOperation > MemberReference origNorm refCount Literal 0 IfStatement BinaryOperation == MemberReference -- refCount Literal 0 BlockStatement IfStatement BinaryOperation != MemberReference origNorm Literal null BlockStatement StatementExpression MethodInvocation origNorm decRef StatementExpression Assignment MemberReference origNorm Literal null = BlockStatement StatementExpression MethodInvocation closeInput End IfStatement BinaryOperation != MemberReference bytes Literal null BlockStatement AssertStatement BinaryOperation != MemberReference bytesRef Literal null StatementExpression MethodInvocation bytesRef decRef StatementExpression Assignment MemberReference bytes Literal null = StatementExpression Assignment MemberReference bytesRef Literal null = BlockStatement AssertStatement BinaryOperation == MemberReference bytesRef Literal null End End MethodDeclaration Modifier public synchronized bytes FormalParameter BasicType byte bytesOut FormalParameter BasicType int offset FormalParameter BasicType int len IOException AssertStatement BinaryOperation && BinaryOperation > MemberReference refCount Literal 0 BinaryOperation || BinaryOperation == MemberReference origNorm Literal null BinaryOperation > MemberReference origNorm refCount Literal 0 IfStatement BinaryOperation != MemberReference bytes Literal null BlockStatement AssertStatement BinaryOperation <= MemberReference len MethodInvocation maxDoc StatementExpression MethodInvocation System MemberReference bytes Literal 0 MemberReference bytesOut MemberReference offset MemberReference len arraycopy BlockStatement IfStatement BinaryOperation != MemberReference origNorm Literal null BlockStatement StatementExpression MethodInvocation origNorm MemberReference bytesOut MemberReference offset MemberReference len bytes BlockStatement SynchronizedStatement MemberReference in StatementExpression MethodInvocation in MemberReference normSeek seek StatementExpression MethodInvocation in MemberReference bytesOut MemberReference offset MemberReference len Literal false readBytes End End MethodDeclaration Modifier public synchronized BasicType byte bytes IOException AssertStatement BinaryOperation && BinaryOperation > MemberReference refCount Literal 0 BinaryOperation || BinaryOperation == MemberReference origNorm Literal null BinaryOperation > MemberReference origNorm refCount Literal 0 IfStatement BinaryOperation == MemberReference bytes Literal null BlockStatement AssertStatement BinaryOperation == MemberReference bytesRef Literal null IfStatement BinaryOperation != MemberReference origNorm Literal null BlockStatement StatementExpression Assignment MemberReference bytes MethodInvocation origNorm bytes = StatementExpression Assignment MemberReference bytesRef MemberReference origNorm bytesRef = StatementExpression MethodInvocation bytesRef incRef StatementExpression MethodInvocation origNorm decRef StatementExpression Assignment MemberReference origNorm Literal null = BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator count MethodInvocation maxDoc StatementExpression Assignment MemberReference bytes ArrayCreator BasicType byte MemberReference count = AssertStatement BinaryOperation != MemberReference in Literal null SynchronizedStatement MemberReference in StatementExpression MethodInvocation in MemberReference normSeek seek StatementExpression MethodInvocation in MemberReference bytes Literal 0 MemberReference count Literal false readBytes StatementExpression Assignment MemberReference bytesRef ClassCreator ReferenceType Ref = StatementExpression MethodInvocation closeInput End End ReturnStatement MemberReference bytes MethodDeclaration ReferenceType Ref bytesRef ReturnStatement MemberReference bytesRef MethodDeclaration Modifier public synchronized BasicType byte copyOnWrite IOException AssertStatement BinaryOperation && BinaryOperation > MemberReference refCount Literal 0 BinaryOperation || BinaryOperation == MemberReference origNorm Literal null BinaryOperation > MemberReference origNorm refCount Literal 0 StatementExpression MethodInvocation bytes AssertStatement BinaryOperation != MemberReference bytes Literal null AssertStatement BinaryOperation != MemberReference bytesRef Literal null IfStatement BinaryOperation > MethodInvocation bytesRef refCount Literal 1 BlockStatement AssertStatement BinaryOperation == MemberReference refCount Literal 1 LocalVariableDeclaration Modifier final ReferenceType Ref VariableDeclarator oldRef MemberReference bytesRef StatementExpression Assignment MemberReference bytes MethodInvocation MemberReference bytes cloneNormBytes = StatementExpression Assignment MemberReference bytesRef ClassCreator ReferenceType Ref = StatementExpression MethodInvocation oldRef decRef End StatementExpression Assignment MemberReference dirty Literal true = ReturnStatement MemberReference bytes MethodDeclaration Modifier public synchronized Annotation Override ReferenceType Object clone AssertStatement BinaryOperation && BinaryOperation > MemberReference refCount Literal 0 BinaryOperation || BinaryOperation == MemberReference origNorm Literal null BinaryOperation > MemberReference origNorm refCount Literal 0 LocalVariableDeclaration ReferenceType Norm VariableDeclarator clone TryStatement StatementExpression Assignment MemberReference clone Cast ReferenceType Norm SuperMethodInvocation clone = CatchClause CatchClauseParameter CloneNotSupportedException cnse ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""unexpected CloneNotSupportedException"" MemberReference cnse StatementExpression Assignment MemberReference clone refCount Literal 1 = IfStatement BinaryOperation != MemberReference bytes Literal null BlockStatement AssertStatement BinaryOperation != MemberReference bytesRef Literal null AssertStatement BinaryOperation == MemberReference origNorm Literal null StatementExpression MethodInvocation clone.bytesRef incRef BlockStatement AssertStatement BinaryOperation == MemberReference bytesRef Literal null IfStatement BinaryOperation == MemberReference origNorm Literal null BlockStatement StatementExpression Assignment MemberReference clone origNorm This = End StatementExpression MethodInvocation clone.origNorm incRef End StatementExpression Assignment MemberReference clone in Literal null = ReturnStatement MemberReference clone MethodDeclaration Modifier public reWrite FormalParameter ReferenceType SegmentInfo si IOException AssertStatement BinaryOperation && BinaryOperation > MemberReference refCount Literal 0 BinaryOperation || BinaryOperation == MemberReference origNorm Literal null BinaryOperation > MemberReference origNorm refCount Literal 0 BinaryOperation + BinaryOperation + BinaryOperation + Literal ""refCount="" MemberReference refCount Literal "" origNorm="" MemberReference origNorm StatementExpression MethodInvocation si This MemberReference number advanceNormGen LocalVariableDeclaration ReferenceType IndexOutput VariableDeclarator out MethodInvocation MethodInvocation MethodInvocation si This MemberReference number getNormFileName createOutput directory TryStatement StatementExpression MethodInvocation out MemberReference bytes MethodInvocation maxDoc writeBytes StatementExpression MethodInvocation out close StatementExpression Assignment This MemberReference dirty Literal false = ReferenceType Cloneable FieldDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType Norm VariableDeclarator norms ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Norm MethodDeclaration /**
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType SegmentReader get FormalParameter BasicType boolean readOnly FormalParameter ReferenceType SegmentInfo si FormalParameter BasicType int termInfosIndexDivisor CorruptIndexException IOException ReturnStatement MethodInvocation MemberReference readOnly MemberReference si dir MemberReference si MemberReference BufferedIndexInput BUFFER_SIZE Literal true MemberReference termInfosIndexDivisor get MethodDeclaration /**
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */ Modifier public static ReferenceType SegmentReader get FormalParameter BasicType boolean readOnly FormalParameter ReferenceType Directory dir FormalParameter ReferenceType SegmentInfo si FormalParameter BasicType int readBufferSize FormalParameter BasicType boolean doOpenStores FormalParameter BasicType int termInfosIndexDivisor CorruptIndexException IOException LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator instance TernaryExpression MemberReference readOnly ClassCreator ReferenceType ReadOnlySegmentReader ClassCreator ReferenceType SegmentReader StatementExpression Assignment MemberReference instance readOnly MemberReference readOnly = StatementExpression Assignment MemberReference instance si MemberReference si = StatementExpression Assignment MemberReference instance readBufferSize MemberReference readBufferSize = LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression Assignment MemberReference instance core ClassCreator ReferenceType CoreReaders MemberReference dir MemberReference si MemberReference readBufferSize MemberReference termInfosIndexDivisor = IfStatement MemberReference doOpenStores BlockStatement StatementExpression MethodInvocation instance.core MemberReference si openDocStores End StatementExpression MethodInvocation instance loadDeletedDocs StatementExpression MethodInvocation instance MemberReference instance.core cfsDir MemberReference readBufferSize openNorms StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation instance doClose End ReturnStatement MemberReference instance MethodDeclaration openDocStores IOException StatementExpression MethodInvocation core MemberReference si openDocStores MethodDeclaration Modifier private loadDeletedDocs IOException IfStatement MethodInvocation MemberReference si hasDeletions BlockStatement StatementExpression Assignment MemberReference deletedDocs ClassCreator ReferenceType BitVector MethodInvocation directory MethodInvocation si getDelFileName = StatementExpression Assignment MemberReference deletedDocsRef ClassCreator ReferenceType Ref = AssertStatement BinaryOperation == MethodInvocation si getDelCount MethodInvocation deletedDocs count BinaryOperation + BinaryOperation + BinaryOperation + Literal ""delete count mismatch: info="" MethodInvocation si getDelCount Literal "" vs BitVector="" MethodInvocation deletedDocs count AssertStatement BinaryOperation <= MethodInvocation si getDelCount MethodInvocation maxDoc BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""delete count mismatch: "" MethodInvocation deletedDocs count Literal "") exceeds max doc ("" MethodInvocation maxDoc Literal "") for segment "" MemberReference si name AssertStatement BinaryOperation == MethodInvocation si getDelCount Literal 0 End MethodDeclaration /**
   * Clones the norm bytes.  May be overridden by subclasses.  New and experimental.
   * @param bytes Byte array to clone
   * @return New BitVector
   */ Modifier protected BasicType byte cloneNormBytes FormalParameter BasicType byte bytes LocalVariableDeclaration BasicType byte VariableDeclarator cloneBytes ArrayCreator BasicType byte MemberReference bytes length StatementExpression MethodInvocation System MemberReference bytes Literal 0 MemberReference cloneBytes Literal 0 MemberReference bytes length arraycopy ReturnStatement MemberReference cloneBytes MethodDeclaration /**
   * Clones the deleteDocs BitVector.  May be overridden by subclasses. New and experimental.
   * @param bv BitVector to clone
   * @return New BitVector
   */ Modifier protected ReferenceType BitVector cloneDeletedDocs FormalParameter ReferenceType BitVector bv ReturnStatement Cast ReferenceType BitVector MethodInvocation bv clone MethodDeclaration Modifier public final synchronized Annotation Override ReferenceType Object clone TryStatement ReturnStatement MethodInvocation MemberReference readOnly clone CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference ex MethodDeclaration Modifier public final synchronized Annotation Override ReferenceType IndexReader clone FormalParameter BasicType boolean openReadOnly CorruptIndexException IOException ReturnStatement MethodInvocation MemberReference si Literal true MemberReference openReadOnly reopenSegment MethodDeclaration Modifier synchronized ReferenceType SegmentReader reopenSegment FormalParameter ReferenceType SegmentInfo si FormalParameter BasicType boolean doClone FormalParameter BasicType boolean openReadOnly CorruptIndexException IOException LocalVariableDeclaration BasicType boolean VariableDeclarator deletionsUpToDate BinaryOperation && BinaryOperation == This MemberReference si MethodInvocation hasDeletions MethodInvocation si hasDeletions BinaryOperation || MethodInvocation ! si hasDeletions This MemberReference si MethodInvocation getDelFileName MethodInvocation MethodInvocation si getDelFileName equals LocalVariableDeclaration BasicType boolean VariableDeclarator normsUpToDate Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator fieldNormsChanged ArrayCreator BasicType boolean MethodInvocation core.fieldInfos size LocalVariableDeclaration Modifier final BasicType int VariableDeclarator fieldCount MethodInvocation core.fieldInfos size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fieldCount MemberReference ++ i BlockStatement IfStatement This ! MemberReference si MethodInvocation MemberReference i getNormFileName MethodInvocation MethodInvocation si MemberReference i getNormFileName equals BlockStatement StatementExpression Assignment MemberReference normsUpToDate Literal false = StatementExpression Assignment MemberReference ArraySelector MemberReference i fieldNormsChanged Literal true = End End IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && MemberReference normsUpToDate MemberReference deletionsUpToDate MemberReference ! doClone MemberReference openReadOnly MemberReference readOnly BlockStatement ReturnStatement This End AssertStatement BinaryOperation || MemberReference ! doClone BinaryOperation && MemberReference normsUpToDate MemberReference deletionsUpToDate LocalVariableDeclaration ReferenceType SegmentReader VariableDeclarator clone TernaryExpression MemberReference openReadOnly ClassCreator ReferenceType ReadOnlySegmentReader ClassCreator ReferenceType SegmentReader LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation core incRef StatementExpression Assignment MemberReference clone core MemberReference core = StatementExpression Assignment MemberReference clone readOnly MemberReference openReadOnly = StatementExpression Assignment MemberReference clone si MemberReference si = StatementExpression Assignment MemberReference clone readBufferSize MemberReference readBufferSize = IfStatement BinaryOperation && MemberReference ! openReadOnly MemberReference hasChanges BlockStatement StatementExpression Assignment MemberReference clone pendingDeleteCount MemberReference pendingDeleteCount = StatementExpression Assignment MemberReference clone deletedDocsDirty MemberReference deletedDocsDirty = StatementExpression Assignment MemberReference clone normsDirty MemberReference normsDirty = StatementExpression Assignment MemberReference clone hasChanges MemberReference hasChanges = StatementExpression Assignment MemberReference hasChanges Literal false = End IfStatement MemberReference doClone BlockStatement IfStatement BinaryOperation != MemberReference deletedDocs Literal null BlockStatement StatementExpression MethodInvocation deletedDocsRef incRef StatementExpression Assignment MemberReference clone deletedDocs MemberReference deletedDocs = StatementExpression Assignment MemberReference clone deletedDocsRef MemberReference deletedDocsRef = End BlockStatement IfStatement MemberReference ! deletionsUpToDate BlockStatement AssertStatement BinaryOperation == MemberReference clone deletedDocs Literal null StatementExpression MethodInvocation clone loadDeletedDocs IfStatement BinaryOperation != MemberReference deletedDocs Literal null BlockStatement StatementExpression MethodInvocation deletedDocsRef incRef StatementExpression Assignment MemberReference clone deletedDocs MemberReference deletedDocs = StatementExpression Assignment MemberReference clone deletedDocsRef MemberReference deletedDocsRef = End End End StatementExpression Assignment MemberReference clone norms ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Norm = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fieldNormsChanged length MemberReference ++ i BlockStatement IfStatement BinaryOperation || MemberReference doClone MemberReference ! ArraySelector MemberReference i fieldNormsChanged BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator curField MethodInvocation core.fieldInfos MemberReference name MemberReference i fieldInfo LocalVariableDeclaration ReferenceType Norm VariableDeclarator norm This MemberReference norms MethodInvocation MemberReference curField get IfStatement BinaryOperation != MemberReference norm Literal null StatementExpression MethodInvocation clone.norms MemberReference curField Cast ReferenceType Norm MethodInvocation norm clone put End End End StatementExpression MethodInvocation clone TernaryExpression MethodInvocation si getUseCompoundFile MethodInvocation core getCFSReader MethodInvocation directory MemberReference readBufferSize openNorms StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation clone decRef End ReturnStatement MemberReference clone MethodDeclaration Modifier protected Annotation Override doCommit FormalParameter ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType String commitUserData IOException IfStatement MemberReference hasChanges BlockStatement IfStatement MemberReference deletedDocsDirty BlockStatement StatementExpression MethodInvocation si advanceDelGen StatementExpression MethodInvocation deletedDocs MethodInvocation directory MethodInvocation si getDelFileName write StatementExpression MethodInvocation si BinaryOperation + MethodInvocation si getDelCount MemberReference pendingDeleteCount setDelCount StatementExpression Assignment MemberReference pendingDeleteCount Literal 0 = AssertStatement BinaryOperation == MethodInvocation deletedDocs count MethodInvocation si getDelCount BinaryOperation + BinaryOperation + BinaryOperation + Literal ""delete count mismatch during commit: info="" MethodInvocation si getDelCount Literal "" vs BitVector="" MethodInvocation deletedDocs count BlockStatement AssertStatement BinaryOperation == MemberReference pendingDeleteCount Literal 0 End IfStatement MemberReference normsDirty BlockStatement StatementExpression MethodInvocation si MethodInvocation core.fieldInfos size setNumFields ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Norm VariableDeclarator norm MethodInvocation norms values BlockStatement IfStatement MemberReference norm dirty BlockStatement StatementExpression MethodInvocation norm MemberReference si reWrite End End End StatementExpression Assignment MemberReference deletedDocsDirty Literal false = StatementExpression Assignment MemberReference normsDirty Literal false = StatementExpression Assignment MemberReference hasChanges Literal false = End MethodDeclaration ReferenceType FieldsReader getFieldsReader ReturnStatement MethodInvocation fieldsReaderLocal get MethodDeclaration Modifier protected Annotation Override doClose IOException StatementExpression MethodInvocation termVectorsLocal close StatementExpression MethodInvocation fieldsReaderLocal close IfStatement BinaryOperation != MemberReference deletedDocs Literal null BlockStatement StatementExpression MethodInvocation deletedDocsRef decRef StatementExpression Assignment MemberReference deletedDocs Literal null = End ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Norm VariableDeclarator norm MethodInvocation norms values BlockStatement StatementExpression MethodInvocation norm decRef End IfStatement BinaryOperation != MemberReference core Literal null BlockStatement StatementExpression MethodInvocation core decRef End MethodDeclaration Modifier static BasicType boolean hasDeletions FormalParameter ReferenceType SegmentInfo si IOException ReturnStatement MethodInvocation si hasDeletions MethodDeclaration Modifier public Annotation Override BasicType boolean hasDeletions ReturnStatement BinaryOperation != MemberReference deletedDocs Literal null MethodDeclaration Modifier static BasicType boolean usesCompoundFile FormalParameter ReferenceType SegmentInfo si IOException ReturnStatement MethodInvocation si getUseCompoundFile MethodDeclaration Modifier static BasicType boolean hasSeparateNorms FormalParameter ReferenceType SegmentInfo si IOException ReturnStatement MethodInvocation si hasSeparateNorms MethodDeclaration Modifier protected Annotation Override doDelete FormalParameter BasicType int docNum IfStatement BinaryOperation == MemberReference deletedDocs Literal null BlockStatement StatementExpression Assignment MemberReference deletedDocs ClassCreator ReferenceType BitVector MethodInvocation maxDoc = StatementExpression Assignment MemberReference deletedDocsRef ClassCreator ReferenceType Ref = End IfStatement BinaryOperation > MethodInvocation deletedDocsRef refCount Literal 1 BlockStatement LocalVariableDeclaration ReferenceType Ref VariableDeclarator oldRef MemberReference deletedDocsRef StatementExpression Assignment MemberReference deletedDocs MethodInvocation MemberReference deletedDocs cloneDeletedDocs = StatementExpression Assignment MemberReference deletedDocsRef ClassCreator ReferenceType Ref = StatementExpression MethodInvocation oldRef decRef End StatementExpression Assignment MemberReference deletedDocsDirty Literal true = IfStatement MethodInvocation ! deletedDocs MemberReference docNum getAndSet StatementExpression MemberReference ++ pendingDeleteCount End MethodDeclaration Modifier protected Annotation Override doUndeleteAll StatementExpression Assignment MemberReference deletedDocsDirty Literal false = IfStatement BinaryOperation != MemberReference deletedDocs Literal null BlockStatement AssertStatement BinaryOperation != MemberReference deletedDocsRef Literal null StatementExpression MethodInvocation deletedDocsRef decRef StatementExpression Assignment MemberReference deletedDocs Literal null = StatementExpression Assignment MemberReference deletedDocsRef Literal null = StatementExpression Assignment MemberReference pendingDeleteCount Literal 0 = StatementExpression MethodInvocation si clearDelGen StatementExpression MethodInvocation si Literal 0 setDelCount BlockStatement AssertStatement BinaryOperation == MemberReference deletedDocsRef Literal null AssertStatement BinaryOperation == MemberReference pendingDeleteCount Literal 0 End MethodDeclaration ReferenceType List TypeArgument ReferenceType String files IOException ReturnStatement ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String MethodInvocation si files MethodDeclaration Modifier public Annotation Override ReferenceType TermEnum terms StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation core MethodInvocation terms getTermsReader MethodDeclaration Modifier public Annotation Override ReferenceType TermEnum terms FormalParameter ReferenceType Term t IOException StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation core MethodInvocation MemberReference t terms getTermsReader MethodDeclaration ReferenceType FieldInfos fieldInfos ReturnStatement MemberReference core fieldInfos MethodDeclaration Modifier public Annotation Override ReferenceType Document document FormalParameter BasicType int n FormalParameter ReferenceType FieldSelector fieldSelector CorruptIndexException IOException StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation MethodInvocation MemberReference n MemberReference fieldSelector doc getFieldsReader MethodDeclaration Modifier public synchronized Annotation Override BasicType boolean isDeleted FormalParameter BasicType int n ReturnStatement BinaryOperation && BinaryOperation != MemberReference deletedDocs Literal null MethodInvocation deletedDocs MemberReference n get MethodDeclaration Modifier public Annotation Override ReferenceType TermDocs termDocs FormalParameter ReferenceType Term term IOException IfStatement BinaryOperation == MemberReference term Literal null BlockStatement ReturnStatement ClassCreator ReferenceType AllTermDocs This BlockStatement ReturnStatement SuperMethodInvocation MemberReference term termDocs End MethodDeclaration Modifier public Annotation Override ReferenceType TermDocs termDocs IOException StatementExpression MethodInvocation ensureOpen ReturnStatement ClassCreator ReferenceType SegmentTermDocs This MethodDeclaration Modifier public Annotation Override ReferenceType TermPositions termPositions IOException StatementExpression MethodInvocation ensureOpen ReturnStatement ClassCreator ReferenceType SegmentTermPositions This MethodDeclaration Modifier public Annotation Override BasicType int docFreq FormalParameter ReferenceType Term t IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType TermInfo VariableDeclarator ti MethodInvocation core MethodInvocation MemberReference t get getTermsReader IfStatement BinaryOperation != MemberReference ti Literal null ReturnStatement MemberReference ti docFreq ReturnStatement Literal 0 End MethodDeclaration Modifier public Annotation Override BasicType int numDocs LocalVariableDeclaration BasicType int VariableDeclarator n MethodInvocation maxDoc IfStatement BinaryOperation != MemberReference deletedDocs Literal null StatementExpression Assignment MemberReference n MethodInvocation deletedDocs count -= End ReturnStatement MemberReference n MethodDeclaration Modifier public Annotation Override BasicType int maxDoc ReturnStatement MemberReference si docCount MethodDeclaration /**
   * @see IndexReader#getFieldNames(IndexReader.FieldOption fldOption)
   */ Modifier public Annotation Override ReferenceType Collection TypeArgument ReferenceType String getFieldNames FormalParameter ReferenceType IndexReader ReferenceType FieldOption fieldOption StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType String VariableDeclarator fieldSet ClassCreator ReferenceType HashSet TypeArgument ReferenceType String ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation core.fieldInfos size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation core.fieldInfos MemberReference i fieldInfo IfStatement BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption ALL BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && MemberReference ! fi isIndexed BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption UNINDEXED BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && MemberReference fi omitTermFreqAndPositions BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption OMIT_TERM_FREQ_AND_POSITIONS BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && MemberReference fi storePayloads BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption STORES_PAYLOADS BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && MemberReference fi isIndexed BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption INDEXED BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && BinaryOperation && MemberReference fi isIndexed BinaryOperation == MemberReference fi storeTermVector Literal false BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption INDEXED_NO_TERMVECTOR BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == MemberReference fi storeTermVector Literal true BinaryOperation == MemberReference fi storePositionWithTermVector Literal false BinaryOperation == MemberReference fi storeOffsetWithTermVector Literal false BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption TERMVECTOR BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && BinaryOperation && MemberReference fi isIndexed MemberReference fi storeTermVector BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption INDEXED_WITH_TERMVECTOR BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && BinaryOperation && MemberReference fi storePositionWithTermVector BinaryOperation == MemberReference fi storeOffsetWithTermVector Literal false BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption TERMVECTOR_WITH_POSITION BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && BinaryOperation && MemberReference fi storeOffsetWithTermVector BinaryOperation == MemberReference fi storePositionWithTermVector Literal false BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption TERMVECTOR_WITH_OFFSET BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add IfStatement BinaryOperation && BinaryOperation && MemberReference fi storeOffsetWithTermVector MemberReference fi storePositionWithTermVector BinaryOperation == MemberReference fieldOption MemberReference IndexReader.FieldOption TERMVECTOR_WITH_POSITION_OFFSET BlockStatement StatementExpression MethodInvocation fieldSet MemberReference fi name add End End End End End End End End End End End End ReturnStatement MemberReference fieldSet MethodDeclaration Modifier public synchronized Annotation Override BasicType boolean hasNorms FormalParameter ReferenceType String field StatementExpression MethodInvocation ensureOpen ReturnStatement MethodInvocation norms MemberReference field containsKey MethodDeclaration Modifier protected synchronized BasicType byte getNorms FormalParameter ReferenceType String field IOException LocalVariableDeclaration ReferenceType Norm VariableDeclarator norm MethodInvocation norms MemberReference field get IfStatement BinaryOperation == MemberReference norm Literal null ReturnStatement Literal null End ReturnStatement MethodInvocation norm bytes MethodDeclaration Modifier public synchronized Annotation Override BasicType byte norms FormalParameter ReferenceType String field IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration BasicType byte VariableDeclarator bytes MethodInvocation MemberReference field getNorms ReturnStatement MemberReference bytes MethodDeclaration Modifier protected Annotation Override doSetNorm FormalParameter BasicType int doc FormalParameter ReferenceType String field FormalParameter BasicType byte value IOException LocalVariableDeclaration ReferenceType Norm VariableDeclarator norm MethodInvocation norms MemberReference field get IfStatement BinaryOperation == MemberReference norm Literal null ReturnStatement End StatementExpression Assignment MemberReference normsDirty Literal true = StatementExpression Assignment MethodInvocation norm ArraySelector MemberReference doc copyOnWrite MemberReference value = MethodDeclaration /** Read norms into a pre-allocated array. */ Modifier public synchronized Annotation Override norms FormalParameter ReferenceType String field FormalParameter BasicType byte bytes FormalParameter BasicType int offset IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType Norm VariableDeclarator norm MethodInvocation norms MemberReference field get IfStatement BinaryOperation == MemberReference norm Literal null BlockStatement StatementExpression MethodInvocation Arrays MemberReference bytes MemberReference offset MemberReference bytes length MethodInvocation DefaultSimilarity Literal 1.0f encodeNorm fill ReturnStatement End StatementExpression MethodInvocation norm MemberReference bytes MemberReference offset MethodInvocation maxDoc bytes MethodDeclaration Modifier private openNorms FormalParameter ReferenceType Directory cfsDir FormalParameter BasicType int readBufferSize IOException LocalVariableDeclaration BasicType long VariableDeclarator nextNormSeek MemberReference SegmentMerger.NORMS_HEADER length LocalVariableDeclaration BasicType int VariableDeclarator maxDoc MethodInvocation maxDoc ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation core.fieldInfos size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation core.fieldInfos MemberReference i fieldInfo IfStatement MethodInvocation norms MemberReference fi name containsKey BlockStatement ContinueStatement End IfStatement BinaryOperation && MemberReference fi isIndexed MemberReference ! fi omitNorms BlockStatement LocalVariableDeclaration ReferenceType Directory VariableDeclarator d MethodInvocation directory LocalVariableDeclaration ReferenceType String VariableDeclarator fileName MethodInvocation si MemberReference fi number getNormFileName IfStatement MethodInvocation ! si MemberReference fi number hasSeparateNorms BlockStatement StatementExpression Assignment MemberReference d MemberReference cfsDir = End LocalVariableDeclaration BasicType boolean VariableDeclarator singleNormFile MethodInvocation fileName BinaryOperation + Literal ""."" MemberReference IndexFileNames NORMS_EXTENSION endsWith LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator normInput Literal null LocalVariableDeclaration BasicType long VariableDeclarator normSeek IfStatement MemberReference singleNormFile BlockStatement StatementExpression Assignment MemberReference normSeek MemberReference nextNormSeek = IfStatement BinaryOperation == MemberReference singleNormStream Literal null BlockStatement StatementExpression Assignment MemberReference singleNormStream MethodInvocation d MemberReference fileName MemberReference readBufferSize openInput = StatementExpression Assignment MemberReference singleNormRef ClassCreator ReferenceType Ref = BlockStatement StatementExpression MethodInvocation singleNormRef incRef End StatementExpression Assignment MemberReference normInput MemberReference singleNormStream = BlockStatement StatementExpression Assignment MemberReference normSeek Literal 0 = StatementExpression Assignment MemberReference normInput MethodInvocation d MemberReference fileName openInput = End StatementExpression MethodInvocation norms MemberReference fi name ClassCreator ReferenceType Norm MemberReference normInput MemberReference fi number MemberReference normSeek put StatementExpression Assignment MemberReference nextNormSeek MemberReference maxDoc += End End MethodDeclaration BasicType boolean termsIndexLoaded ReturnStatement MethodInvocation core termsIndexIsLoaded MethodDeclaration loadTermsIndex FormalParameter BasicType int termsIndexDivisor IOException StatementExpression MethodInvocation core MemberReference si MemberReference termsIndexDivisor loadTermsIndex MethodDeclaration BasicType boolean normsClosed IfStatement BinaryOperation != MemberReference singleNormStream Literal null BlockStatement ReturnStatement Literal false End ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Norm VariableDeclarator norm MethodInvocation norms values BlockStatement IfStatement BinaryOperation > MemberReference norm refCount Literal 0 BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration BasicType boolean normsClosed FormalParameter ReferenceType String field ReturnStatement BinaryOperation == MethodInvocation norms MemberReference refCount MemberReference field get Literal 0 MethodDeclaration /**
   * Create a clone from the initial TermVectorsReader and store it in the ThreadLocal.
   * @return TermVectorsReader
   */ ReferenceType TermVectorsReader getTermVectorsReader LocalVariableDeclaration ReferenceType TermVectorsReader VariableDeclarator tvReader MethodInvocation termVectorsLocal get IfStatement BinaryOperation == MemberReference tvReader Literal null BlockStatement LocalVariableDeclaration ReferenceType TermVectorsReader VariableDeclarator orig MethodInvocation core getTermVectorsReaderOrig IfStatement BinaryOperation == MemberReference orig Literal null BlockStatement ReturnStatement Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference tvReader Cast ReferenceType TermVectorsReader MethodInvocation orig clone = CatchClause CatchClauseParameter CloneNotSupportedException cnse ReturnStatement Literal null End StatementExpression MethodInvocation termVectorsLocal MemberReference tvReader set End ReturnStatement MemberReference tvReader MethodDeclaration ReferenceType TermVectorsReader getTermVectorsReaderOrig ReturnStatement MethodInvocation core getTermVectorsReaderOrig MethodDeclaration /** Return a term frequency vector for the specified document and field. The
   *  vector returned contains term numbers and frequencies for all terms in
   *  the specified field of this document, if the field had storeTermVector
   *  flag set.  If the flag was not set, the method returns null.
   * @throws IOException
   */ Modifier public Annotation Override ReferenceType TermFreqVector getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType String field IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation core.fieldInfos MemberReference field fieldInfo IfStatement BinaryOperation || BinaryOperation == MemberReference fi Literal null MemberReference ! fi storeTermVector ReturnStatement Literal null End LocalVariableDeclaration ReferenceType TermVectorsReader VariableDeclarator termVectorsReader MethodInvocation getTermVectorsReader IfStatement BinaryOperation == MemberReference termVectorsReader Literal null ReturnStatement Literal null End ReturnStatement MethodInvocation termVectorsReader MemberReference docNumber MemberReference field get MethodDeclaration Modifier public Annotation Override getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType String field FormalParameter ReferenceType TermVectorMapper mapper IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation core.fieldInfos MemberReference field fieldInfo IfStatement BinaryOperation || BinaryOperation == MemberReference fi Literal null MemberReference ! fi storeTermVector ReturnStatement End LocalVariableDeclaration ReferenceType TermVectorsReader VariableDeclarator termVectorsReader MethodInvocation getTermVectorsReader IfStatement BinaryOperation == MemberReference termVectorsReader Literal null BlockStatement ReturnStatement End StatementExpression MethodInvocation termVectorsReader MemberReference docNumber MemberReference field MemberReference mapper get MethodDeclaration Modifier public Annotation Override getTermFreqVector FormalParameter BasicType int docNumber FormalParameter ReferenceType TermVectorMapper mapper IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType TermVectorsReader VariableDeclarator termVectorsReader MethodInvocation getTermVectorsReader IfStatement BinaryOperation == MemberReference termVectorsReader Literal null ReturnStatement End StatementExpression MethodInvocation termVectorsReader MemberReference docNumber MemberReference mapper get MethodDeclaration /** Return an array of term frequency vectors for the specified document.
   *  The array contains a vector for each vectorized field in the document.
   *  Each vector vector contains term numbers and frequencies for all terms
   *  in a given vectorized field.
   *  If no such fields existed, the method returns null.
   * @throws IOException
   */ Modifier public Annotation Override ReferenceType TermFreqVector getTermFreqVectors FormalParameter BasicType int docNumber IOException StatementExpression MethodInvocation ensureOpen LocalVariableDeclaration ReferenceType TermVectorsReader VariableDeclarator termVectorsReader MethodInvocation getTermVectorsReader IfStatement BinaryOperation == MemberReference termVectorsReader Literal null ReturnStatement Literal null End ReturnStatement MethodInvocation termVectorsReader MemberReference docNumber get MethodDeclaration /**
   * Return the name of the segment this reader is reading.
   */ Modifier public ReferenceType String getSegmentName ReturnStatement MemberReference core segment MethodDeclaration /**
   * Return the SegmentInfo of the segment this reader is reading.
   */ ReferenceType SegmentInfo getSegmentInfo ReturnStatement MemberReference si MethodDeclaration setSegmentInfo FormalParameter ReferenceType SegmentInfo info StatementExpression Assignment MemberReference si MemberReference info = MethodDeclaration startCommit StatementExpression Assignment MemberReference rollbackHasChanges MemberReference hasChanges = StatementExpression Assignment MemberReference rollbackDeletedDocsDirty MemberReference deletedDocsDirty = StatementExpression Assignment MemberReference rollbackNormsDirty MemberReference normsDirty = StatementExpression Assignment MemberReference rollbackPendingDeleteCount MemberReference pendingDeleteCount = ForStatement EnhancedForControl VariableDeclaration ReferenceType Norm VariableDeclarator norm MethodInvocation norms values BlockStatement StatementExpression Assignment MemberReference norm rollbackDirty MemberReference norm dirty = End MethodDeclaration rollbackCommit StatementExpression Assignment MemberReference hasChanges MemberReference rollbackHasChanges = StatementExpression Assignment MemberReference deletedDocsDirty MemberReference rollbackDeletedDocsDirty = StatementExpression Assignment MemberReference normsDirty MemberReference rollbackNormsDirty = StatementExpression Assignment MemberReference pendingDeleteCount MemberReference rollbackPendingDeleteCount = ForStatement EnhancedForControl VariableDeclaration ReferenceType Norm VariableDeclarator norm MethodInvocation norms values BlockStatement StatementExpression Assignment MemberReference norm dirty MemberReference norm rollbackDirty = End MethodDeclaration /** Returns the directory this index resides in. */ Modifier public Annotation Override ReferenceType Directory directory ReturnStatement MemberReference core dir MethodDeclaration Modifier public final Annotation Override ReferenceType Object getFieldCacheKey ReturnStatement MemberReference core freqStream MethodDeclaration Modifier public Annotation Override BasicType long getUniqueTermCount ReturnStatement MethodInvocation core MethodInvocation size getTermsReader MethodDeclaration /**
   * Lotsa tests did hacks like:<br/>
   * SegmentReader reader = (SegmentReader) IndexReader.open(dir);<br/>
   * They broke. This method serves as a hack to keep hacks working
   * We do it with R/W access for the tests (BW compatibility)
   * @deprecated Remove this when tests are fixed!
   */ Modifier static ReferenceType SegmentReader getOnlySegmentReader FormalParameter ReferenceType Directory dir IOException ReturnStatement MethodInvocation MethodInvocation IndexReader MemberReference dir Literal false open getOnlySegmentReader MethodDeclaration Modifier static ReferenceType SegmentReader getOnlySegmentReader FormalParameter ReferenceType IndexReader reader IfStatement BinaryOperation instanceof MemberReference reader ReferenceType SegmentReader ReturnStatement Cast ReferenceType SegmentReader MemberReference reader End IfStatement BinaryOperation instanceof MemberReference reader ReferenceType DirectoryReader BlockStatement LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator subReaders MethodInvocation reader getSequentialSubReaders IfStatement BinaryOperation != MemberReference subReaders length Literal 1 ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + MemberReference reader Literal "" has "" MemberReference subReaders length Literal "" segments instead of exactly one"" End ReturnStatement Cast ReferenceType SegmentReader MemberReference ArraySelector Literal 0 subReaders End ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + MemberReference reader Literal "" is not a SegmentReader or a single-segment DirectoryReader"" MethodDeclaration Modifier public BasicType int getTermInfosIndexDivisor ReturnStatement MemberReference core termsIndexDivisor ReferenceType IndexReader ReferenceType Cloneable",0
895,895,,1
105,105,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.geohash Import java.io.IOException Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.FieldCache Import org.apache.lucene.search.Filter Import org.apache.lucene.search.DocIdSet Import org.apache.lucene.search.FilteredDocIdSet Import org.apache.lucene.spatial.tier.DistanceFilter Import org.apache.lucene.spatial.tier.DistanceUtils ClassDeclaration Modifier public /** <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ GeoHashDistanceFilter FieldDeclaration /**
   * 
   */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 1L FieldDeclaration Modifier private BasicType double VariableDeclarator lat FieldDeclaration Modifier private BasicType double VariableDeclarator lng FieldDeclaration Modifier private ReferenceType String VariableDeclarator geoHashField ConstructorDeclaration Modifier public /**
   * Provide a distance filter based from a center point with a radius
   * in miles
   * @param startingFilter
   * @param lat
   * @param lng
   * @param miles
   */ GeoHashDistanceFilter FormalParameter ReferenceType Filter startingFilter FormalParameter BasicType double lat FormalParameter BasicType double lng FormalParameter BasicType double miles FormalParameter ReferenceType String geoHashField StatementExpression SuperConstructorInvocation MemberReference startingFilter MemberReference miles StatementExpression Assignment This MemberReference lat MemberReference lat = StatementExpression Assignment This MemberReference lng MemberReference lng = StatementExpression Assignment This MemberReference geoHashField MemberReference geoHashField = MethodDeclaration Modifier public Annotation Override ReferenceType DocIdSet getDocIdSet FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator geoHashValues MethodInvocation FieldCache.DEFAULT MemberReference reader MemberReference geoHashField getStrings LocalVariableDeclaration Modifier final BasicType int VariableDeclarator docBase MemberReference nextDocBase StatementExpression Assignment MemberReference nextDocBase MethodInvocation reader maxDoc += ReturnStatement ClassCreator ReferenceType FilteredDocIdSet MethodInvocation startingFilter MemberReference reader getDocIdSet MethodDeclaration Modifier public Annotation Override BasicType boolean match FormalParameter BasicType int doc LocalVariableDeclaration ReferenceType String VariableDeclarator geoHash MemberReference ArraySelector MemberReference doc geoHashValues LocalVariableDeclaration BasicType double VariableDeclarator coords MethodInvocation GeoHashUtils MemberReference geoHash decode LocalVariableDeclaration BasicType double VariableDeclarator x MemberReference ArraySelector Literal 0 coords LocalVariableDeclaration BasicType double VariableDeclarator y MemberReference ArraySelector Literal 1 coords LocalVariableDeclaration ReferenceType Double VariableDeclarator cachedDistance MethodInvocation distanceLookupCache MemberReference geoHash get LocalVariableDeclaration BasicType double VariableDeclarator d IfStatement BinaryOperation != MemberReference cachedDistance Literal null BlockStatement StatementExpression Assignment MemberReference d MethodInvocation cachedDistance doubleValue = BlockStatement StatementExpression Assignment MemberReference d MethodInvocation DistanceUtils MethodInvocation MemberReference lat MemberReference lng MemberReference x MemberReference y getDistanceMi getInstance = StatementExpression MethodInvocation distanceLookupCache MemberReference geoHash MemberReference d put End IfStatement BinaryOperation < MemberReference d MemberReference distance BlockStatement StatementExpression MethodInvocation distances BinaryOperation + MemberReference doc MemberReference docBase MemberReference d put ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration /** Returns true if <code>o</code> is equal to this. */ Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation == This MemberReference o ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference o ReferenceType GeoHashDistanceFilter ReturnStatement Literal false End LocalVariableDeclaration ReferenceType GeoHashDistanceFilter VariableDeclarator other Cast ReferenceType GeoHashDistanceFilter MemberReference o IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || This ! MemberReference startingFilter MethodInvocation MemberReference other startingFilter equals BinaryOperation != This MemberReference distance MemberReference other distance BinaryOperation != This MemberReference lat MemberReference other lat BinaryOperation != This MemberReference lng MemberReference other lng This ! MemberReference geoHashField MethodInvocation MemberReference other geoHashField equals BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration /** Returns a hash code value for this object.*/ Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator h MethodInvocation Double MethodInvocation hashCode MemberReference distance valueOf StatementExpression Assignment MemberReference h MethodInvocation startingFilter hashCode ^= StatementExpression Assignment MemberReference h MethodInvocation Double MethodInvocation hashCode MemberReference lat valueOf ^= StatementExpression Assignment MemberReference h MethodInvocation Double MethodInvocation hashCode MemberReference lng valueOf ^= StatementExpression Assignment MemberReference h MethodInvocation geoHashField hashCode ^= ReturnStatement MemberReference h ReferenceType DistanceFilter",0
548,548,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException ClassDeclaration Modifier public abstract /**
 * A DocIdSet contains a set of doc ids. Implementing classes must
 * only implement {@link #iterator} to provide access to the set. 
 */ DocIdSet FieldDeclaration /** An empty {@code DocIdSet} instance for easy use, e.g. in Filters that hit no documents. */ Modifier public final static ReferenceType DocIdSet VariableDeclarator EMPTY_DOCIDSET ClassCreator ReferenceType DocIdSet FieldDeclaration Modifier private final ReferenceType DocIdSetIterator VariableDeclarator iterator ClassCreator ReferenceType DocIdSetIterator MethodDeclaration Modifier public Annotation Override BasicType int advance FormalParameter BasicType int target IOException ReturnStatement MemberReference NO_MORE_DOCS MethodDeclaration Modifier public Annotation Override BasicType int docID ReturnStatement MemberReference NO_MORE_DOCS MethodDeclaration Modifier public Annotation Override BasicType int nextDoc IOException ReturnStatement MemberReference NO_MORE_DOCS MethodDeclaration Modifier public Annotation Override ReferenceType DocIdSetIterator iterator ReturnStatement MemberReference iterator MethodDeclaration Modifier public Annotation Override BasicType boolean isCacheable ReturnStatement Literal true MethodDeclaration /** Provides a {@link DocIdSetIterator} to access the set.
   * This implementation can return <code>null</code> or
   * <code>{@linkplain #EMPTY_DOCIDSET}.iterator()</code> if there
   * are no docs that match. */ Modifier public abstract ReferenceType DocIdSetIterator iterator IOException MethodDeclaration /**
   * This method is a hint for {@link CachingWrapperFilter}, if this <code>DocIdSet</code>
   * should be cached without copying it into a BitSet. The default is to return
   * <code>false</code>. If you have an own <code>DocIdSet</code> implementation
   * that does its iteration very effective and fast without doing disk I/O,
   * override this method and return <code>true</here>.
   */ Modifier public BasicType boolean isCacheable ReturnStatement Literal false",0
728,728,,0
819,819,,0
395,395,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import org.apache.lucene.index.IndexReader ClassDeclaration Modifier public /**
 * A {@link Collector} implementation which wraps another
 * {@link Collector} and makes sure only documents with
 * scores &gt; 0 are collected.
 */ PositiveScoresOnlyCollector FieldDeclaration Modifier private final ReferenceType Collector VariableDeclarator c FieldDeclaration Modifier private ReferenceType Scorer VariableDeclarator scorer ConstructorDeclaration Modifier public PositiveScoresOnlyCollector FormalParameter ReferenceType Collector c StatementExpression Assignment This MemberReference c MemberReference c = MethodDeclaration Modifier public Annotation Override collect FormalParameter BasicType int doc IOException IfStatement BinaryOperation > MethodInvocation scorer score Literal 0 BlockStatement StatementExpression MethodInvocation c MemberReference doc collect End MethodDeclaration Modifier public Annotation Override setNextReader FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int docBase IOException StatementExpression MethodInvocation c MemberReference reader MemberReference docBase setNextReader MethodDeclaration Modifier public Annotation Override setScorer FormalParameter ReferenceType Scorer scorer IOException StatementExpression Assignment This MemberReference scorer ClassCreator ReferenceType ScoreCachingWrappingScorer MemberReference scorer = StatementExpression MethodInvocation c This MemberReference scorer setScorer MethodDeclaration Modifier public Annotation Override BasicType boolean acceptsDocsOutOfOrder ReturnStatement MethodInvocation c acceptsDocsOutOfOrder ReferenceType Collector",0
643,643,,0
481,481,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask Import java.io.File Import java.io.FileReader Import java.io.Reader Import org.apache.lucene.benchmark.byTask.utils.Algorithm Import org.apache.lucene.benchmark.byTask.utils.Config ClassDeclaration Modifier public /**
 * Run the benchmark algorithm.
 * <p>Usage: java Benchmark  algorithm-file
 * <ol>
 * <li>Read algorithm.</li>
 * <li> Run the algorithm.</li>
 * </ol>
 * Things to be added/fixed in ""Benchmarking by tasks"":
 * <ol>
 * <li>TODO - report into Excel and/or graphed view.</li>
 * <li>TODO - perf comparison between Lucene releases over the years.</li>
 * <li>TODO - perf report adequate to include in Lucene nightly build site? (so we can easily track performance changes.)</li>
 * <li>TODO - add overall time control for repeated execution (vs. current by-count only).</li>
 * <li>TODO - query maker that is based on index statistics.</li>
 * </ol>
 */ Benchmark FieldDeclaration Modifier private ReferenceType PerfRunData VariableDeclarator runData FieldDeclaration Modifier private ReferenceType Algorithm VariableDeclarator algorithm FieldDeclaration Modifier private BasicType boolean VariableDeclarator executed ConstructorDeclaration Modifier public Benchmark FormalParameter ReferenceType Reader algReader Exception TryStatement StatementExpression Assignment MemberReference runData ClassCreator ReferenceType PerfRunData ClassCreator ReferenceType Config MemberReference algReader = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace ThrowStatement ClassCreator ReferenceType Exception Literal ""Error: cannot init PerfRunData!"" MemberReference e TryStatement StatementExpression Assignment MemberReference algorithm ClassCreator ReferenceType Algorithm MemberReference runData = CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType Exception Literal ""Error: cannot understand algorithm!"" MemberReference e MethodDeclaration Modifier public synchronized execute Exception IfStatement MemberReference executed BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""Benchmark was already executed"" End StatementExpression Assignment MemberReference executed Literal true = StatementExpression MethodInvocation runData setStartTimeMillis StatementExpression MethodInvocation algorithm execute MethodDeclaration /**
   * Run the benchmark algorithm.
   * @param args benchmark config and algorithm files
   */ Modifier public static main FormalParameter ReferenceType String args IfStatement BinaryOperation < MemberReference args length Literal 1 BlockStatement StatementExpression MethodInvocation System.err Literal ""Usage: java Benchmark <algorithm file>"" println StatementExpression MethodInvocation System Literal 1 exit End LocalVariableDeclaration ReferenceType File VariableDeclarator algFile ClassCreator ReferenceType File MemberReference ArraySelector Literal 0 args IfStatement BinaryOperation || BinaryOperation || MethodInvocation ! algFile exists MethodInvocation ! algFile isFile MethodInvocation ! algFile canRead BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + Literal ""cannot find/read algorithm file: "" MethodInvocation algFile getAbsolutePath println StatementExpression MethodInvocation System Literal 1 exit End StatementExpression MethodInvocation System.out BinaryOperation + Literal ""Running algorithm from: "" MethodInvocation algFile getAbsolutePath println LocalVariableDeclaration ReferenceType Benchmark VariableDeclarator benchmark Literal null TryStatement StatementExpression Assignment MemberReference benchmark ClassCreator ReferenceType Benchmark ClassCreator ReferenceType FileReader MemberReference algFile = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace StatementExpression MethodInvocation System Literal 1 exit StatementExpression MethodInvocation System.out Literal ""------------> algorithm:"" println StatementExpression MethodInvocation System.out MethodInvocation benchmark MethodInvocation toString getAlgorithm println TryStatement StatementExpression MethodInvocation benchmark execute CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation System.err BinaryOperation + Literal ""Error: cannot execute the algorithm! "" MethodInvocation e getMessage println StatementExpression MethodInvocation e printStackTrace StatementExpression MethodInvocation System.out Literal ""####################"" println StatementExpression MethodInvocation System.out Literal ""###  D O N E !!! ###"" println StatementExpression MethodInvocation System.out Literal ""####################"" println MethodDeclaration /**
   * @return Returns the algorithm.
   */ Modifier public ReferenceType Algorithm getAlgorithm ReturnStatement MemberReference algorithm MethodDeclaration /**
   * @return Returns the runData.
   */ Modifier public ReferenceType PerfRunData getRunData ReturnStatement MemberReference runData",1
621,621,,0
333,333,"CompilationUnit PackageDeclaration org.apache.lucene.index ClassDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ ReadOnlySegmentReader MethodDeclaration Modifier static noWrite ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""This IndexReader cannot make any changes to the index (it was opened with readOnly = true)"" MethodDeclaration Modifier protected Annotation Override acquireWriteLock StatementExpression MethodInvocation noWrite MethodDeclaration Modifier public Annotation Override BasicType boolean isDeleted FormalParameter BasicType int n ReturnStatement BinaryOperation && BinaryOperation != MemberReference deletedDocs Literal null MethodInvocation deletedDocs MemberReference n get ReferenceType SegmentReader",0
396,396,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import java.util.ArrayList Import org.apache.lucene.search.spans.SpanNearQuery Import org.apache.lucene.search.spans.SpanQuery Import org.apache.lucene.xmlparser.DOMUtils Import org.apache.lucene.xmlparser.ParserException Import org.w3c.dom.Element Import org.w3c.dom.Node ClassDeclaration Modifier public /**
 * 
 */ SpanNearBuilder FieldDeclaration ReferenceType SpanQueryBuilder VariableDeclarator factory ConstructorDeclaration Modifier public SpanNearBuilder FormalParameter ReferenceType SpanQueryBuilder factory StatementExpression Assignment This MemberReference factory MemberReference factory = MethodDeclaration Modifier public ReferenceType SpanQuery getSpanQuery FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration ReferenceType String VariableDeclarator slopString MethodInvocation DOMUtils MemberReference e Literal ""slop"" getAttributeOrFail LocalVariableDeclaration BasicType int VariableDeclarator slop MethodInvocation Integer MemberReference slopString parseInt LocalVariableDeclaration BasicType boolean VariableDeclarator inOrder MethodInvocation DOMUtils MemberReference e Literal ""inOrder"" Literal false getAttribute LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType SpanQuery VariableDeclarator spans ClassCreator ReferenceType ArrayList TypeArgument ReferenceType SpanQuery ForStatement ForControl VariableDeclaration ReferenceType Node VariableDeclarator kid MethodInvocation e getFirstChild BinaryOperation != MemberReference kid Literal null Assignment MemberReference kid MethodInvocation kid getNextSibling = BlockStatement IfStatement BinaryOperation == MethodInvocation kid getNodeType MemberReference Node ELEMENT_NODE BlockStatement StatementExpression MethodInvocation spans MethodInvocation factory Cast ReferenceType Element MemberReference kid getSpanQuery add End End LocalVariableDeclaration ReferenceType SpanQuery VariableDeclarator spanQueries MethodInvocation spans ArrayCreator ReferenceType SpanQuery MethodInvocation spans size toArray LocalVariableDeclaration ReferenceType SpanNearQuery VariableDeclarator snq ClassCreator ReferenceType SpanNearQuery MemberReference spanQueries MemberReference slop MemberReference inOrder ReturnStatement MemberReference snq ReferenceType SpanBuilderBase",0
493,493,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.processors Import java.util.List Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.core.nodes.FieldQueryNode Import org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode Import org.apache.lucene.queryParser.core.nodes.ParametricQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl Import org.apache.lucene.queryParser.core.util.UnescapedCharSequence Import org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttribute Import org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode ClassDeclaration Modifier public /**
 * This processor verifies if the attribute
 * {@link LowercaseExpandedTermsAttribute} is defined in the
 * {@link QueryConfigHandler}. If it is and the expanded terms should be
 * lower-cased, it looks for every {@link WildcardQueryNode},
 * {@link FuzzyQueryNode} and {@link ParametricQueryNode} and lower-case its
 * term. <br/>
 * 
 * @see LowercaseExpandedTermsAttribute
 */ LowercaseExpandedTermsQueryNodeProcessor ConstructorDeclaration Modifier public LowercaseExpandedTermsQueryNodeProcessor MethodDeclaration Modifier public Annotation Override ReferenceType QueryNode process FormalParameter ReferenceType QueryNode queryTree QueryNodeException IfStatement MethodInvocation MethodInvocation ClassReference ReferenceType LowercaseExpandedTermsAttribute hasAttribute getQueryConfigHandler BlockStatement IfStatement MethodInvocation MethodInvocation ClassReference ReferenceType LowercaseExpandedTermsAttribute getAttribute MethodInvocation isLowercaseExpandedTerms getQueryConfigHandler BlockStatement ReturnStatement SuperMethodInvocation MemberReference queryTree process End End ReturnStatement MemberReference queryTree MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode postProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException IfStatement BinaryOperation || BinaryOperation || BinaryOperation instanceof MemberReference node ReferenceType WildcardQueryNode BinaryOperation instanceof MemberReference node ReferenceType FuzzyQueryNode BinaryOperation instanceof MemberReference node ReferenceType ParametricQueryNode BlockStatement LocalVariableDeclaration ReferenceType FieldQueryNode VariableDeclarator fieldNode Cast ReferenceType FieldQueryNode MemberReference node StatementExpression MethodInvocation fieldNode MethodInvocation UnescapedCharSequence MethodInvocation fieldNode getText toLowerCase setText End ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType QueryNode preProcessNode FormalParameter ReferenceType QueryNode node QueryNodeException ReturnStatement MemberReference node MethodDeclaration Modifier protected Annotation Override ReferenceType List TypeArgument ReferenceType QueryNode setChildrenOrder FormalParameter ReferenceType List TypeArgument ReferenceType QueryNode children QueryNodeException ReturnStatement MemberReference children ReferenceType QueryNodeProcessorImpl",1
937,937,,0
457,457,"CompilationUnit PackageDeclaration org.apache.lucene.benchmark.byTask.feeds Import java.util.Date Import java.util.Properties Import org.apache.lucene.document.DateTools ClassDeclaration Modifier public /** Output of parsing (e.g. HTML parsing) of an input document. */ DocData FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType String VariableDeclarator body FieldDeclaration Modifier private ReferenceType String VariableDeclarator title FieldDeclaration Modifier private ReferenceType String VariableDeclarator date FieldDeclaration Modifier private ReferenceType Properties VariableDeclarator props MethodDeclaration Modifier public clear StatementExpression Assignment MemberReference name Literal null = StatementExpression Assignment MemberReference body Literal null = StatementExpression Assignment MemberReference title Literal null = StatementExpression Assignment MemberReference date Literal null = StatementExpression Assignment MemberReference props Literal null = MethodDeclaration Modifier public ReferenceType String getBody ReturnStatement MemberReference body MethodDeclaration /**
   * @return the date. If the ctor with Date was called, then the String
   *         returned is the output of
   *         {@link DateTools#dateToString(Date, org.apache.lucene.document.DateTools.Resolution)}
   *         . Otherwise it's the String passed to the other ctor.
   */ Modifier public ReferenceType String getDate ReturnStatement MemberReference date MethodDeclaration Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration Modifier public ReferenceType Properties getProps ReturnStatement MemberReference props MethodDeclaration Modifier public ReferenceType String getTitle ReturnStatement MemberReference title MethodDeclaration Modifier public setBody FormalParameter ReferenceType String body StatementExpression Assignment This MemberReference body MemberReference body = MethodDeclaration Modifier public setDate FormalParameter ReferenceType Date date IfStatement BinaryOperation != MemberReference date Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation DateTools MemberReference date MemberReference DateTools.Resolution SECOND dateToString setDate BlockStatement StatementExpression Assignment This MemberReference date Literal null = End MethodDeclaration Modifier public setDate FormalParameter ReferenceType String date StatementExpression Assignment This MemberReference date MemberReference date = MethodDeclaration Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration Modifier public setProps FormalParameter ReferenceType Properties props StatementExpression Assignment This MemberReference props MemberReference props = MethodDeclaration Modifier public setTitle FormalParameter ReferenceType String title StatementExpression Assignment This MemberReference title MemberReference title =",0
349,349,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.io.Serializable ClassDeclaration Modifier public abstract /**
 * Provides a {@link FieldComparator} for custom field sorting.
 *
 * <b>NOTE:</b> This API is experimental and might change in
 * incompatible ways in the next release.
 *
 */ FieldComparatorSource MethodDeclaration /**
   * Creates a comparator for the field in the given index.
   * 
   * @param fieldname
   *          Name of the field to create comparator for.
   * @return FieldComparator.
   * @throws IOException
   *           If an error occurs reading the index.
   */ Modifier public abstract ReferenceType FieldComparator newComparator FormalParameter ReferenceType String fieldname FormalParameter BasicType int numHits FormalParameter BasicType int sortPos FormalParameter BasicType boolean reversed IOException ReferenceType Serializable",0
46,46,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.util Import java.util.ArrayList Import java.util.List Import org.apache.lucene.queryParser.core.QueryNodeError Import org.apache.lucene.queryParser.core.nodes.AndQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode ClassDeclaration Modifier public final /**
 * Allow joining 2 QueryNode Trees, into one.
 */ QueryNodeOperation ConstructorDeclaration Modifier private QueryNodeOperation EnumDeclaration Modifier private ANDOperation EnumBody EnumConstantDeclaration BOTH EnumConstantDeclaration Q1 EnumConstantDeclaration Q2 EnumConstantDeclaration NONE MethodDeclaration /**
   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode
   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is
   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is
   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1
   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2
   * children of that node if q1 or q2 is null it returns the not null node if
   * q1 = q2 = null it returns null
   */ Modifier public final static ReferenceType QueryNode logicalAnd FormalParameter ReferenceType QueryNode q1 FormalParameter ReferenceType QueryNode q2 IfStatement BinaryOperation == MemberReference q1 Literal null ReturnStatement MemberReference q2 End IfStatement BinaryOperation == MemberReference q2 Literal null ReturnStatement MemberReference q1 End LocalVariableDeclaration ReferenceType ANDOperation VariableDeclarator op Literal null IfStatement BinaryOperation && BinaryOperation instanceof MemberReference q1 ReferenceType AndQueryNode BinaryOperation instanceof MemberReference q2 ReferenceType AndQueryNode StatementExpression Assignment MemberReference op MemberReference ANDOperation BOTH = IfStatement BinaryOperation instanceof MemberReference q1 ReferenceType AndQueryNode StatementExpression Assignment MemberReference op MemberReference ANDOperation Q1 = IfStatement BinaryOperation instanceof MemberReference q1 ReferenceType AndQueryNode StatementExpression Assignment MemberReference op MemberReference ANDOperation Q2 = StatementExpression Assignment MemberReference op MemberReference ANDOperation NONE = End End End TryStatement LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator result Literal null SwitchStatement MemberReference op SwitchStatementCase NONE LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator children ClassCreator ReferenceType ArrayList TypeArgument ReferenceType QueryNode StatementExpression MethodInvocation children MethodInvocation q1 cloneTree add StatementExpression MethodInvocation children MethodInvocation q2 cloneTree add StatementExpression Assignment MemberReference result ClassCreator ReferenceType AndQueryNode MemberReference children = ReturnStatement MemberReference result SwitchStatementCase Q1 StatementExpression Assignment MemberReference result MethodInvocation q1 cloneTree = StatementExpression MethodInvocation result MethodInvocation q2 cloneTree add ReturnStatement MemberReference result SwitchStatementCase Q2 StatementExpression Assignment MemberReference result MethodInvocation q2 cloneTree = StatementExpression MethodInvocation result MethodInvocation q1 cloneTree add ReturnStatement MemberReference result SwitchStatementCase BOTH StatementExpression Assignment MemberReference result MethodInvocation q1 cloneTree = StatementExpression MethodInvocation result MethodInvocation q2 MethodInvocation getChildren cloneTree add ReturnStatement MemberReference result End CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType QueryNodeError MemberReference e ReturnStatement Literal null",0
703,703,,1
453,453,"CompilationUnit PackageDeclaration org.apache.lucene.search.function Import java.io.IOException Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.FieldCache ClassDeclaration Modifier public abstract /**
 * Expert: A base class for ValueSource implementations that retrieve values for
 * a single field from the {@link org.apache.lucene.search.FieldCache FieldCache}.
 * <p>
 * Fields used herein must be indexed (doesn't matter if these fields are stored or not).
 * <p> 
 * It is assumed that each such indexed field is untokenized, or at least has a single token in a document.
 * For documents with multiple tokens of the same field, behavior is undefined (It is likely that current 
 * code would use the value of one of these tokens, but this is not guaranteed).
 * <p>
 * Document with no tokens in this field are assigned the <code>Zero</code> value.    
 * 
 * <p><font color=""#FF0000"">
 * WARNING: The status of the <b>search.function</b> package is experimental. 
 * The APIs introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 *
 * <p><b>NOTE</b>: with the switch in 2.9 to segment-based
 * searching, if {@link #getValues} is invoked with a
 * composite (multi-segment) reader, this can easily cause
 * double RAM usage for the values in the FieldCache.  It's
 * best to switch your application to pass only atomic
 * (single segment) readers to this API.</p>
 */ FieldCacheSource FieldDeclaration Modifier private ReferenceType String VariableDeclarator field ConstructorDeclaration Modifier public /**
   * Create a cached field source for the input field.  
   */ FieldCacheSource FormalParameter ReferenceType String field StatementExpression Assignment This MemberReference field MemberReference field = MethodDeclaration Modifier public final Annotation Override ReferenceType DocValues getValues FormalParameter ReferenceType IndexReader reader IOException ReturnStatement MethodInvocation MemberReference FieldCache DEFAULT MemberReference field MemberReference reader getCachedFieldValues MethodDeclaration Modifier public Annotation Override ReferenceType String description ReturnStatement MemberReference field MethodDeclaration /**
   * Return cached DocValues for input field and reader.
   * @param cache FieldCache so that values of a field are loaded once per reader (RAM allowing)
   * @param field Field for which values are required.
   * @see ValueSource
   */ Modifier public abstract ReferenceType DocValues getCachedFieldValues FormalParameter ReferenceType FieldCache cache FormalParameter ReferenceType String field FormalParameter ReferenceType IndexReader reader IOException MethodDeclaration Modifier public final Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation instanceof MemberReference o ReferenceType FieldCacheSource BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType FieldCacheSource VariableDeclarator other Cast ReferenceType FieldCacheSource MemberReference o ReturnStatement BinaryOperation && This MemberReference field MethodInvocation MemberReference other field equals MethodInvocation MemberReference other cachedFieldSourceEquals MethodDeclaration Modifier public final Annotation Override BasicType int hashCode ReturnStatement BinaryOperation + MethodInvocation field hashCode MethodInvocation cachedFieldSourceHashCode MethodDeclaration /**
   * Check if equals to another {@link FieldCacheSource}, already knowing that cache and field are equal.  
   * @see Object#equals(java.lang.Object)
   */ Modifier public abstract BasicType boolean cachedFieldSourceEquals FormalParameter ReferenceType FieldCacheSource other MethodDeclaration /**
   * Return a hash code of a {@link FieldCacheSource}, without the hash-codes of the field 
   * and the cache (those are taken care of elsewhere).  
   * @see Object#hashCode()
   */ Modifier public abstract BasicType int cachedFieldSourceHashCode ReferenceType ValueSource",0
635,635,,1
11,11,"CompilationUnit PackageDeclaration /** Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.spatial.tier Import java.util.Map Import java.util.WeakHashMap Import java.util.HashMap Import java.io.IOException Import java.io.ObjectInputStream Import org.apache.lucene.search.Filter Import org.apache.lucene.spatial.tier.DistanceHandler.Precision ClassDeclaration Modifier public abstract /**
 * <p><font color=""red""><b>NOTE:</b> This API is still in
 * flux and might change in incompatible ways in the next
 * release.</font>
 */ DistanceFilter FieldDeclaration Modifier final protected ReferenceType Filter VariableDeclarator startingFilter FieldDeclaration Modifier protected ReferenceType Precision VariableDeclarator precise FieldDeclaration Modifier protected ReferenceType Map TypeArgument ReferenceType Integer TypeArgument ReferenceType Double VariableDeclarator distances FieldDeclaration Modifier protected BasicType double VariableDeclarator distance FieldDeclaration Modifier protected BasicType int VariableDeclarator nextDocBase FieldDeclaration Modifier protected transient ReferenceType WeakHashMap TypeArgument ReferenceType String TypeArgument ReferenceType Double VariableDeclarator distanceLookupCache ConstructorDeclaration Modifier public /** Filters the startingFilter by precise distance
   *  checking filter */ DistanceFilter FormalParameter ReferenceType Filter startingFilter FormalParameter BasicType double distance IfStatement BinaryOperation == MemberReference startingFilter Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""please provide a non-null startingFilter; you can use QueryWrapperFilter(MatchAllDocsQuery) as a no-op filter"" End StatementExpression Assignment This MemberReference startingFilter MemberReference startingFilter = StatementExpression Assignment This MemberReference distance MemberReference distance = StatementExpression Assignment MemberReference distances ClassCreator ReferenceType HashMap TypeArgument ReferenceType Integer TypeArgument ReferenceType Double = StatementExpression Assignment MemberReference distanceLookupCache ClassCreator ReferenceType WeakHashMap TypeArgument ReferenceType String TypeArgument ReferenceType Double = MethodDeclaration /** needed for deserialization, because the cache is transient */ Modifier private readObject FormalParameter ReferenceType ObjectInputStream stream IOException ClassNotFoundException StatementExpression MethodInvocation stream defaultReadObject StatementExpression Assignment MemberReference distanceLookupCache ClassCreator ReferenceType WeakHashMap TypeArgument ReferenceType String TypeArgument ReferenceType Double = MethodDeclaration Modifier public ReferenceType Map TypeArgument ReferenceType Integer TypeArgument ReferenceType Double getDistances ReturnStatement MemberReference distances MethodDeclaration Modifier public ReferenceType Double getDistance FormalParameter BasicType int docid ReturnStatement MethodInvocation distances MemberReference docid get MethodDeclaration Modifier public setDistances FormalParameter ReferenceType Map TypeArgument ReferenceType Integer TypeArgument ReferenceType Double distances StatementExpression Assignment This MemberReference distances MemberReference distances = MethodDeclaration /** You must call this before re-using this DistanceFilter
   *  across searches */ Modifier public reset StatementExpression Assignment MemberReference nextDocBase Literal 0 = MethodDeclaration /** Returns true if <code>o</code> is equal to this. */ Modifier public abstract Annotation Override BasicType boolean equals FormalParameter ReferenceType Object o MethodDeclaration /** Returns a hash code value for this object.*/ Modifier public abstract Annotation Override BasicType int hashCode ReferenceType Filter",1
509,509,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.builders Import org.apache.lucene.messages.MessageImpl Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.messages.QueryParserMessages Import org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl Import org.apache.lucene.search.MatchAllDocsQuery ClassDeclaration Modifier public /**
 * Builds a {@link MatchAllDocsQuery} object from a
 * {@link MatchAllDocsQueryNode} object.
 */ MatchAllDocsQueryNodeBuilder ConstructorDeclaration Modifier public MatchAllDocsQueryNodeBuilder MethodDeclaration Modifier public ReferenceType MatchAllDocsQuery build FormalParameter ReferenceType QueryNode queryNode QueryNodeException IfStatement BinaryOperation instanceof MemberReference queryNode ReferenceType MatchAllDocsQueryNode BlockStatement ThrowStatement ClassCreator ReferenceType QueryNodeException ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages LUCENE_QUERY_CONVERSION_ERROR MethodInvocation queryNode ClassCreator ReferenceType EscapeQuerySyntaxImpl toQueryString MethodInvocation queryNode MethodInvocation getName getClass End ReturnStatement ClassCreator ReferenceType MatchAllDocsQuery ReferenceType StandardQueryBuilder",0
791,791,,1
229,229,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.config Import java.util.Map Import org.apache.lucene.queryParser.core.config.FieldConfig Import org.apache.lucene.util.Attribute InterfaceDeclaration Modifier public /**
 * This attribute enables the user to define a default boost per field.
 * it's used by {@link FieldBoostMapFCListener#buildFieldConfig(FieldConfig)}
 */ FieldBoostMapAttribute MethodDeclaration /**
   * @param boosts a mapping from field name to its default boost
   */ Modifier public setFieldBoostMap FormalParameter ReferenceType Map TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Float boosts MethodDeclaration Modifier public ReferenceType Map TypeArgument ReferenceType CharSequence TypeArgument ReferenceType Float getFieldBoostMap ReferenceType Attribute",0
798,798,,1
630,630,,1
21,21,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.benchmark.quality.trec Import java.io.BufferedReader Import java.io.IOException Import java.util.ArrayList Import java.util.Arrays Import java.util.HashMap Import org.apache.lucene.benchmark.quality.QualityQuery ClassDeclaration Modifier public /**
 * Read topics of TREC 1MQ track.
 * <p>
 * Expects this topic format -
 * <pre>
 *   qnum:qtext
 * </pre>
 * Comment lines starting with '#' are ignored.
 * <p>
 * All topics will have a single name value pair.
 */ Trec1MQReader FieldDeclaration Modifier private ReferenceType String VariableDeclarator name ConstructorDeclaration Modifier public /**
   *  Constructor for Trec's 1MQ TopicsReader
   *  @param name name of name-value pair to set for all queries.
   */ Trec1MQReader FormalParameter ReferenceType String name StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
   * Read quality queries from trec 1MQ format topics file.
   * @param reader where queries are read from.
   * @return the result quality queries.
   * @throws IOException if cannot read the queries.
   */ Modifier public ReferenceType QualityQuery readQueries FormalParameter ReferenceType BufferedReader reader IOException LocalVariableDeclaration ReferenceType ArrayList TypeArgument ReferenceType QualityQuery VariableDeclarator res ClassCreator ReferenceType ArrayList TypeArgument ReferenceType QualityQuery LocalVariableDeclaration ReferenceType String VariableDeclarator line TryStatement WhileStatement BinaryOperation != Literal null Assignment MemberReference line MethodInvocation reader readLine = BlockStatement StatementExpression Assignment MemberReference line MethodInvocation line trim = IfStatement MethodInvocation line Literal ""#"" startsWith BlockStatement ContinueStatement End LocalVariableDeclaration BasicType int VariableDeclarator k MethodInvocation line Literal "":"" indexOf LocalVariableDeclaration ReferenceType String VariableDeclarator id MethodInvocation line MethodInvocation trim Literal 0 MemberReference k substring LocalVariableDeclaration ReferenceType String VariableDeclarator qtext MethodInvocation line MethodInvocation trim BinaryOperation + MemberReference k Literal 1 substring LocalVariableDeclaration ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String VariableDeclarator fields ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType String StatementExpression MethodInvocation fields MemberReference name MemberReference qtext put LocalVariableDeclaration ReferenceType QualityQuery VariableDeclarator topic ClassCreator ReferenceType QualityQuery MemberReference id MemberReference fields StatementExpression MethodInvocation res MemberReference topic add End StatementExpression MethodInvocation reader close LocalVariableDeclaration ReferenceType QualityQuery VariableDeclarator qq MethodInvocation res ArrayCreator ReferenceType QualityQuery Literal 0 toArray StatementExpression MethodInvocation Arrays MemberReference qq sort ReturnStatement MemberReference qq",0
842,842,,1
321,321,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis Import java.util.HashMap Import java.util.Map ClassDeclaration Modifier public /**
 * Holds a map of String input to String output, to be used
 * with {@link MappingCharFilter}.
 */ NormalizeCharMap FieldDeclaration ReferenceType Map TypeArgument ReferenceType Character TypeArgument ReferenceType NormalizeCharMap VariableDeclarator submap FieldDeclaration ReferenceType String VariableDeclarator normStr FieldDeclaration BasicType int VariableDeclarator diff MethodDeclaration /** Records a replacement to be applied to the inputs
   *  stream.  Whenever <code>singleMatch</code> occurs in
   *  the input, it will be replaced with
   *  <code>replacement</code>.
   *
   * @param singleMatch input String to be replaced
   * @param replacement output String
   */ Modifier public add FormalParameter ReferenceType String singleMatch FormalParameter ReferenceType String replacement LocalVariableDeclaration ReferenceType NormalizeCharMap VariableDeclarator currMap This ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation singleMatch length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation singleMatch MemberReference i charAt IfStatement BinaryOperation == MemberReference currMap submap Literal null BlockStatement StatementExpression Assignment MemberReference currMap submap ClassCreator ReferenceType HashMap TypeArgument ReferenceType Character TypeArgument ReferenceType NormalizeCharMap Literal 1 = End LocalVariableDeclaration ReferenceType NormalizeCharMap VariableDeclarator map MethodInvocation currMap.submap MethodInvocation Character MemberReference c valueOf get IfStatement BinaryOperation == MemberReference map Literal null BlockStatement StatementExpression Assignment MemberReference map ClassCreator ReferenceType NormalizeCharMap = StatementExpression MethodInvocation currMap.submap MethodInvocation Character MemberReference c valueOf MemberReference map put End StatementExpression Assignment MemberReference currMap MemberReference map = End IfStatement BinaryOperation != MemberReference currMap normStr Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + Literal ""MappingCharFilter: there is already a mapping for "" MemberReference singleMatch End StatementExpression Assignment MemberReference currMap normStr MemberReference replacement = StatementExpression Assignment MemberReference currMap diff BinaryOperation - MethodInvocation singleMatch length MethodInvocation replacement length =",0
132,132,"CompilationUnit PackageDeclaration /**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ org.apache.lucene.analysis.cn.smart Import java.io.IOException Import java.util.Iterator Import java.util.List Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.cn.smart.hhmm.SegToken Import org.apache.lucene.analysis.tokenattributes.OffsetAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.analysis.tokenattributes.TypeAttribute ClassDeclaration Modifier public final /**
 * A {@link TokenFilter} that breaks sentences into words.
 * <p><font color=""#FF0000"">
 * WARNING: The status of the analyzers/smartcn <b>analysis.cn.smart</b> package is experimental. 
 * The APIs and file formats introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 * </p>
 */ WordTokenFilter FieldDeclaration Modifier private ReferenceType WordSegmenter VariableDeclarator wordSegmenter FieldDeclaration Modifier private ReferenceType Iterator TypeArgument ReferenceType SegToken VariableDeclarator tokenIter FieldDeclaration Modifier private ReferenceType List TypeArgument ReferenceType SegToken VariableDeclarator tokenBuffer FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private ReferenceType OffsetAttribute VariableDeclarator offsetAtt FieldDeclaration Modifier private ReferenceType TypeAttribute VariableDeclarator typeAtt ConstructorDeclaration Modifier public /**
   * Construct a new WordTokenizer.
   * 
   * @param in {@link TokenStream} of sentences 
   */ WordTokenFilter FormalParameter ReferenceType TokenStream in StatementExpression SuperConstructorInvocation MemberReference in StatementExpression Assignment This MemberReference wordSegmenter ClassCreator ReferenceType WordSegmenter = StatementExpression Assignment MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment MemberReference offsetAtt MethodInvocation ClassReference ReferenceType OffsetAttribute addAttribute = StatementExpression Assignment MemberReference typeAtt MethodInvocation ClassReference ReferenceType TypeAttribute addAttribute = MethodDeclaration Modifier public Annotation Override BasicType boolean incrementToken IOException IfStatement BinaryOperation || BinaryOperation == MemberReference tokenIter Literal null MethodInvocation ! tokenIter hasNext BlockStatement IfStatement MethodInvocation input incrementToken BlockStatement StatementExpression Assignment MemberReference tokenBuffer MethodInvocation wordSegmenter MethodInvocation termAtt term MethodInvocation offsetAtt startOffset segmentSentence = StatementExpression Assignment MemberReference tokenIter MethodInvocation tokenBuffer iterator = IfStatement MethodInvocation ! tokenIter hasNext ReturnStatement Literal false End BlockStatement ReturnStatement Literal false End End StatementExpression MethodInvocation clearAttributes LocalVariableDeclaration ReferenceType SegToken VariableDeclarator nextWord MethodInvocation tokenIter next StatementExpression MethodInvocation termAtt MemberReference nextWord charArray Literal 0 MemberReference nextWord.charArray length setTermBuffer StatementExpression MethodInvocation offsetAtt MemberReference nextWord startOffset MemberReference nextWord endOffset setOffset StatementExpression MethodInvocation typeAtt Literal ""word"" setType ReturnStatement Literal true MethodDeclaration Modifier public Annotation Override reset IOException StatementExpression SuperMethodInvocation reset StatementExpression Assignment MemberReference tokenIter Literal null = ReferenceType TokenFilter",0
288,288,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.core.nodes Import org.apache.lucene.messages.MessageImpl Import org.apache.lucene.queryParser.core.QueryNodeError Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.QueryNodeParseException Import org.apache.lucene.queryParser.core.messages.QueryParserMessages Import org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax ClassDeclaration Modifier public PhraseSlopQueryNode FieldDeclaration Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 0L FieldDeclaration Modifier private BasicType int VariableDeclarator value Literal 0 ConstructorDeclaration Modifier public /**
   * @throws QueryNodeException
   * @throws QueryNodeParseException
   * @exception QueryNodeParseException
   *              throw in overridden method to disallow
   */ PhraseSlopQueryNode FormalParameter ReferenceType QueryNode query FormalParameter BasicType int value QueryNodeException IfStatement BinaryOperation == MemberReference query Literal null BlockStatement ThrowStatement ClassCreator ReferenceType QueryNodeError ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages NODE_ACTION_NOT_SUPPORTED Literal ""query"" Literal ""null"" End StatementExpression Assignment This MemberReference value MemberReference value = StatementExpression MethodInvocation Literal false setLeaf StatementExpression MethodInvocation allocate StatementExpression MethodInvocation MemberReference query add MethodDeclaration Modifier public ReferenceType QueryNode getChild ReturnStatement MethodInvocation MethodInvocation Literal 0 get getChildren MethodDeclaration Modifier public BasicType int getValue ReturnStatement This MemberReference value MethodDeclaration Modifier private ReferenceType CharSequence getValueString LocalVariableDeclaration ReferenceType Float VariableDeclarator f MethodInvocation Float This MemberReference value valueOf IfStatement BinaryOperation == MemberReference f MethodInvocation f longValue ReturnStatement BinaryOperation + Literal """" MethodInvocation f longValue ReturnStatement BinaryOperation + Literal """" MemberReference f End MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<phraseslop value='"" MethodInvocation getValueString Literal ""'>"" Literal ""\n"" MethodInvocation MethodInvocation toString getChild Literal ""\n</phraseslop>"" MethodDeclaration Modifier public ReferenceType CharSequence toQueryString FormalParameter ReferenceType EscapeQuerySyntax escapeSyntaxParser IfStatement BinaryOperation == MethodInvocation getChild Literal null ReturnStatement Literal """" End ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation MemberReference escapeSyntaxParser toQueryString getChild Literal ""~"" MethodInvocation getValueString MethodDeclaration Modifier public Annotation Override ReferenceType QueryNode cloneTree CloneNotSupportedException LocalVariableDeclaration ReferenceType PhraseSlopQueryNode VariableDeclarator clone Cast ReferenceType PhraseSlopQueryNode SuperMethodInvocation cloneTree StatementExpression Assignment MemberReference clone value This MemberReference value = ReturnStatement MemberReference clone MethodDeclaration Modifier public ReferenceType CharSequence getField LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator child MethodInvocation getChild IfStatement BinaryOperation instanceof MemberReference child ReferenceType FieldableNode BlockStatement ReturnStatement Cast ReferenceType FieldableNode MemberReference child End ReturnStatement Literal null MethodDeclaration Modifier public setField FormalParameter ReferenceType CharSequence fieldName LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator child MethodInvocation getChild IfStatement BinaryOperation instanceof MemberReference child ReferenceType FieldableNode BlockStatement StatementExpression Cast ReferenceType FieldableNode MemberReference child End ReferenceType QueryNodeImpl ReferenceType FieldableNode",0
139,139,"CompilationUnit PackageDeclaration org.apache.lucene.search.highlight Import java.util.HashMap Import java.util.HashSet Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.Query ClassDeclaration Modifier public /**
 * {@link Scorer} implementation which scores text fragments by the number of
 * unique query terms found. This class uses the {@link QueryTermExtractor}
 * class to process determine the query terms and their boosts to be used.
 */ QueryTermScorer FieldDeclaration ReferenceType TextFragment VariableDeclarator currentTextFragment Literal null FieldDeclaration ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator uniqueTermsInFragment FieldDeclaration BasicType float VariableDeclarator totalScore Literal 0 FieldDeclaration BasicType float VariableDeclarator maxTermWeight Literal 0 FieldDeclaration Modifier private ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType WeightedTerm VariableDeclarator termsToFind FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt ConstructorDeclaration Modifier public /**
   * 
   * @param query a Lucene query (ideally rewritten using query.rewrite before
   *        being passed to this class and the searcher)
   */ QueryTermScorer FormalParameter ReferenceType Query query StatementExpression ExplicitConstructorInvocation MethodInvocation QueryTermExtractor MemberReference query getTerms ConstructorDeclaration Modifier public /**
   * 
   * @param query a Lucene query (ideally rewritten using query.rewrite before
   *        being passed to this class and the searcher)
   * @param fieldName the Field name which is used to match Query terms
   */ QueryTermScorer FormalParameter ReferenceType Query query FormalParameter ReferenceType String fieldName StatementExpression ExplicitConstructorInvocation MethodInvocation QueryTermExtractor MemberReference query Literal false MemberReference fieldName getTerms ConstructorDeclaration Modifier public /**
   * 
   * @param query a Lucene query (ideally rewritten using query.rewrite before
   *        being passed to this class and the searcher)
   * @param reader used to compute IDF which can be used to a) score selected
   *        fragments better b) use graded highlights eg set font color
   *        intensity
   * @param fieldName the field on which Inverse Document Frequency (IDF)
   *        calculations are based
   */ QueryTermScorer FormalParameter ReferenceType Query query FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType String fieldName StatementExpression ExplicitConstructorInvocation MethodInvocation QueryTermExtractor MemberReference query MemberReference reader MemberReference fieldName getIdfWeightedTerms ConstructorDeclaration Modifier public QueryTermScorer FormalParameter ReferenceType WeightedTerm weightedTerms StatementExpression Assignment MemberReference termsToFind ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType WeightedTerm = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference weightedTerms length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType WeightedTerm VariableDeclarator existingTerm MethodInvocation termsToFind MemberReference ArraySelector MemberReference i MemberReference term weightedTerms get IfStatement BinaryOperation || BinaryOperation == MemberReference existingTerm Literal null BinaryOperation < MemberReference existingTerm weight MemberReference ArraySelector MemberReference i MemberReference weight weightedTerms BlockStatement StatementExpression MethodInvocation termsToFind MemberReference ArraySelector MemberReference i MemberReference term weightedTerms MemberReference ArraySelector MemberReference i weightedTerms put StatementExpression Assignment MemberReference maxTermWeight MethodInvocation Math MemberReference maxTermWeight MemberReference ArraySelector MemberReference i MethodInvocation getWeight weightedTerms max = End End MethodDeclaration Modifier public ReferenceType TokenStream init FormalParameter ReferenceType TokenStream tokenStream StatementExpression Assignment MemberReference termAtt MethodInvocation tokenStream ClassReference ReferenceType TermAttribute addAttribute = ReturnStatement Literal null MethodDeclaration Modifier public startFragment FormalParameter ReferenceType TextFragment newFragment StatementExpression Assignment MemberReference uniqueTermsInFragment ClassCreator ReferenceType HashSet TypeArgument ReferenceType String = StatementExpression Assignment MemberReference currentTextFragment MemberReference newFragment = StatementExpression Assignment MemberReference totalScore Literal 0 = MethodDeclaration Modifier public BasicType float getTokenScore LocalVariableDeclaration ReferenceType String VariableDeclarator termText MethodInvocation termAtt term LocalVariableDeclaration ReferenceType WeightedTerm VariableDeclarator queryTerm MethodInvocation termsToFind MemberReference termText get IfStatement BinaryOperation == MemberReference queryTerm Literal null BlockStatement ReturnStatement Literal 0 End IfStatement MethodInvocation ! uniqueTermsInFragment MemberReference termText contains BlockStatement StatementExpression Assignment MemberReference totalScore MethodInvocation queryTerm getWeight += StatementExpression MethodInvocation uniqueTermsInFragment MemberReference termText add End ReturnStatement MethodInvocation queryTerm getWeight MethodDeclaration Modifier public BasicType float getFragmentScore ReturnStatement MemberReference totalScore MethodDeclaration Modifier public allFragmentsProcessed MethodDeclaration /**
   * 
   * @return The highest weighted term (useful for passing to GradientFormatter
   *         to set top end of coloring scale.
   */ Modifier public BasicType float getMaxTermWeight ReturnStatement MemberReference maxTermWeight ReferenceType Scorer",0
368,368,"CompilationUnit PackageDeclaration org.apache.lucene.index InterfaceDeclaration Modifier public /** Provides access to stored term vector of 
 *  a document field.  The vector consists of the name of the field, an array of the terms that occur in the field of the
 * {@link org.apache.lucene.document.Document} and a parallel array of frequencies.  Thus, getTermFrequencies()[5] corresponds with the
 * frequency of getTerms()[5], assuming there are at least 5 terms in the Document.
 */ TermFreqVector MethodDeclaration /**
   * The {@link org.apache.lucene.document.Fieldable} name. 
   * @return The name of the field this vector is associated with.
   * 
   */ Modifier public ReferenceType String getField MethodDeclaration /** 
   * @return The number of terms in the term vector.
   */ Modifier public BasicType int size MethodDeclaration /** 
   * @return An Array of term texts in ascending order.
   */ Modifier public ReferenceType String getTerms MethodDeclaration /** Array of term frequencies. Locations of the array correspond one to one
   *  to the terms in the array obtained from <code>getTerms</code>
   *  method. Each location in the array contains the number of times this
   *  term occurs in the document or the document field.
   */ Modifier public BasicType int getTermFrequencies MethodDeclaration /** Return an index in the term numbers array returned from
   *  <code>getTerms</code> at which the term with the specified
   *  <code>term</code> appears. If this term does not appear in the array,
   *  return -1.
   */ Modifier public BasicType int indexOf FormalParameter ReferenceType String term MethodDeclaration /** Just like <code>indexOf(int)</code> but searches for a number of terms
   *  at the same time. Returns an array that has the same size as the number
   *  of terms searched for, each slot containing the result of searching for
   *  that term number.
   *
   *  @param terms array containing terms to look for
   *  @param start index in the array where the list of terms starts
   *  @param len the number of terms in the list
   */ Modifier public BasicType int indexesOf FormalParameter ReferenceType String terms FormalParameter BasicType int start FormalParameter BasicType int len",0
670,670,,0
556,556,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.util.concurrent.TimeUnit Import java.util.concurrent.locks.Lock Import java.util.concurrent.locks.Condition Import java.util.concurrent.locks.ReentrantLock ClassDeclaration Modifier public final /**
 * A dummy lock as a replacement for {@link ReentrantLock} to disable locking
 */ DummyConcurrentLock FieldDeclaration /** a default instance, can be always used, as this {@link Lock} is stateless. */ Modifier public final static ReferenceType DummyConcurrentLock VariableDeclarator INSTANCE ClassCreator ReferenceType DummyConcurrentLock MethodDeclaration Modifier public lock MethodDeclaration Modifier public lockInterruptibly MethodDeclaration Modifier public BasicType boolean tryLock ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean tryLock FormalParameter BasicType long time FormalParameter ReferenceType TimeUnit unit ReturnStatement Literal true MethodDeclaration Modifier public unlock MethodDeclaration Modifier public ReferenceType Condition newCondition ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType Lock",0
692,692,,0
800,800,,1
439,439,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util.Collection Import java.util.HashSet Import java.util.List Import java.io.IOException Import org.apache.lucene.document.Document Import org.apache.lucene.document.Fieldable Import org.apache.lucene.util.ArrayUtil ClassDeclaration Modifier final /**
 * Gathers all Fieldables for a document under the same
 * name, updates FieldInfos, and calls per-field consumers
 * to process field by field.
 *
 * Currently, only a single thread visits the fields,
 * sequentially, for processing.
 */ DocFieldProcessorPerThread FieldDeclaration BasicType float VariableDeclarator docBoost FieldDeclaration BasicType int VariableDeclarator fieldGen FieldDeclaration Modifier final ReferenceType DocFieldProcessor VariableDeclarator docFieldProcessor FieldDeclaration Modifier final ReferenceType FieldInfos VariableDeclarator fieldInfos FieldDeclaration Modifier final ReferenceType DocFieldConsumerPerThread VariableDeclarator consumer FieldDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator fields ArrayCreator ReferenceType DocFieldProcessorPerField Literal 1 FieldDeclaration BasicType int VariableDeclarator fieldCount FieldDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator fieldHash ArrayCreator ReferenceType DocFieldProcessorPerField Literal 2 FieldDeclaration BasicType int VariableDeclarator hashMask Literal 1 FieldDeclaration BasicType int VariableDeclarator totalFieldCount FieldDeclaration Modifier final ReferenceType StoredFieldsWriterPerThread VariableDeclarator fieldsWriter FieldDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocState VariableDeclarator docState ConstructorDeclaration Modifier public DocFieldProcessorPerThread FormalParameter ReferenceType DocumentsWriterThreadState threadState FormalParameter ReferenceType DocFieldProcessor docFieldProcessor IOException StatementExpression Assignment This MemberReference docState MemberReference threadState docState = StatementExpression Assignment This MemberReference docFieldProcessor MemberReference docFieldProcessor = StatementExpression Assignment This MemberReference fieldInfos MemberReference docFieldProcessor fieldInfos = StatementExpression Assignment This MemberReference consumer MethodInvocation docFieldProcessor.consumer This addThread = StatementExpression Assignment MemberReference fieldsWriter MethodInvocation docFieldProcessor.fieldsWriter MemberReference docState addThread = MethodDeclaration Modifier public Annotation Override abort ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fieldHash length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator field MemberReference ArraySelector MemberReference i fieldHash WhileStatement BinaryOperation != MemberReference field Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType DocFieldProcessorPerField VariableDeclarator next MemberReference field next StatementExpression MethodInvocation field abort StatementExpression Assignment MemberReference field MemberReference next = End End StatementExpression MethodInvocation fieldsWriter abort StatementExpression MethodInvocation consumer abort MethodDeclaration Modifier public ReferenceType Collection TypeArgument ReferenceType DocFieldConsumerPerField fields LocalVariableDeclaration ReferenceType Collection TypeArgument ReferenceType DocFieldConsumerPerField VariableDeclarator fields ClassCreator ReferenceType HashSet TypeArgument ReferenceType DocFieldConsumerPerField ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fieldHash length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator field MemberReference ArraySelector MemberReference i fieldHash WhileStatement BinaryOperation != MemberReference field Literal null BlockStatement StatementExpression MethodInvocation fields MemberReference field consumer add StatementExpression Assignment MemberReference field MemberReference field next = End End AssertStatement BinaryOperation == MethodInvocation fields size MemberReference totalFieldCount ReturnStatement MemberReference fields MethodDeclaration /** If there are fields we've seen but did not see again
   *  in the last run, then free them up. */ trimFields FormalParameter ReferenceType SegmentWriteState state ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fieldHash length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator perField MemberReference ArraySelector MemberReference i fieldHash LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator lastPerField Literal null WhileStatement BinaryOperation != MemberReference perField Literal null BlockStatement IfStatement BinaryOperation == MemberReference perField lastGen Literal - 1 BlockStatement IfStatement BinaryOperation == MemberReference lastPerField Literal null StatementExpression Assignment MemberReference ArraySelector MemberReference i fieldHash MemberReference perField next = StatementExpression Assignment MemberReference lastPerField next MemberReference perField next = End IfStatement BinaryOperation != MemberReference state.docWriter infoStream Literal null StatementExpression MethodInvocation state.docWriter.infoStream BinaryOperation + Literal ""  purge field="" MemberReference perField.fieldInfo name println End StatementExpression MemberReference -- totalFieldCount BlockStatement StatementExpression Assignment MemberReference perField lastGen Literal - 1 = StatementExpression Assignment MemberReference lastPerField MemberReference perField = End StatementExpression Assignment MemberReference perField MemberReference perField next = End End MethodDeclaration Modifier private rehash LocalVariableDeclaration Modifier final BasicType int VariableDeclarator newHashSize BinaryOperation * MemberReference fieldHash length Literal 2 AssertStatement BinaryOperation > MemberReference newHashSize MemberReference fieldHash length LocalVariableDeclaration Modifier final ReferenceType DocFieldProcessorPerField VariableDeclarator newHashArray ArrayCreator ReferenceType DocFieldProcessorPerField MemberReference newHashSize LocalVariableDeclaration BasicType int VariableDeclarator newHashMask BinaryOperation - MemberReference newHashSize Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference fieldHash length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator fp0 MemberReference ArraySelector MemberReference j fieldHash WhileStatement BinaryOperation != MemberReference fp0 Literal null BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator hashPos2 BinaryOperation & MethodInvocation fp0.fieldInfo.name hashCode MemberReference newHashMask LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator nextFP0 MemberReference fp0 next StatementExpression Assignment MemberReference fp0 next MemberReference ArraySelector MemberReference hashPos2 newHashArray = StatementExpression Assignment MemberReference ArraySelector MemberReference hashPos2 newHashArray MemberReference fp0 = StatementExpression Assignment MemberReference fp0 MemberReference nextFP0 = End End StatementExpression Assignment MemberReference fieldHash MemberReference newHashArray = StatementExpression Assignment MemberReference hashMask MemberReference newHashMask = MethodDeclaration Modifier public Annotation Override ReferenceType DocumentsWriter ReferenceType DocWriter processDocument IOException StatementExpression MethodInvocation consumer startDocument StatementExpression MethodInvocation fieldsWriter startDocument LocalVariableDeclaration Modifier final ReferenceType Document VariableDeclarator doc MemberReference docState doc AssertStatement MethodInvocation docFieldProcessor.docWriter.writer Literal ""DocumentsWriter.ThreadState.init start"" testPoint StatementExpression Assignment MemberReference fieldCount Literal 0 = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator thisFieldGen MemberReference ++ fieldGen LocalVariableDeclaration Modifier final ReferenceType List TypeArgument ReferenceType Fieldable VariableDeclarator docFields MethodInvocation doc getFields LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numDocFields MethodInvocation docFields size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numDocFields MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Fieldable VariableDeclarator field MethodInvocation docFields MemberReference i get LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fieldName MethodInvocation field name LocalVariableDeclaration Modifier final BasicType int VariableDeclarator hashPos BinaryOperation & MethodInvocation fieldName hashCode MemberReference hashMask LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator fp MemberReference ArraySelector MemberReference hashPos fieldHash WhileStatement BinaryOperation && BinaryOperation != MemberReference fp Literal null MethodInvocation ! fp.fieldInfo.name MemberReference fieldName equals StatementExpression Assignment MemberReference fp MemberReference fp next = End IfStatement BinaryOperation == MemberReference fp Literal null BlockStatement LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation fieldInfos MemberReference fieldName MethodInvocation field isIndexed MethodInvocation field isTermVectorStored MethodInvocation field isStorePositionWithTermVector MethodInvocation field isStoreOffsetWithTermVector MethodInvocation field getOmitNorms Literal false MethodInvocation field getOmitTermFreqAndPositions add StatementExpression Assignment MemberReference fp ClassCreator ReferenceType DocFieldProcessorPerField This MemberReference fi = StatementExpression Assignment MemberReference fp next MemberReference ArraySelector MemberReference hashPos fieldHash = StatementExpression Assignment MemberReference ArraySelector MemberReference hashPos fieldHash MemberReference fp = StatementExpression MemberReference ++ totalFieldCount IfStatement BinaryOperation >= MemberReference totalFieldCount BinaryOperation / MemberReference fieldHash length Literal 2 StatementExpression MethodInvocation rehash End StatementExpression MethodInvocation fp.fieldInfo MethodInvocation field isIndexed MethodInvocation field isTermVectorStored MethodInvocation field isStorePositionWithTermVector MethodInvocation field isStoreOffsetWithTermVector MethodInvocation field getOmitNorms Literal false MethodInvocation field getOmitTermFreqAndPositions update End IfStatement BinaryOperation != MemberReference thisFieldGen MemberReference fp lastGen BlockStatement StatementExpression Assignment MemberReference fp fieldCount Literal 0 = IfStatement BinaryOperation == MemberReference fieldCount MemberReference fields length BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator newSize BinaryOperation * MemberReference fields length Literal 2 LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator newArray ArrayCreator ReferenceType DocFieldProcessorPerField MemberReference newSize StatementExpression MethodInvocation System MemberReference fields Literal 0 MemberReference newArray Literal 0 MemberReference fieldCount arraycopy StatementExpression Assignment MemberReference fields MemberReference newArray = End StatementExpression Assignment MemberReference ArraySelector MemberReference ++ fieldCount fields MemberReference fp = StatementExpression Assignment MemberReference fp lastGen MemberReference thisFieldGen = End IfStatement BinaryOperation == MemberReference fp fieldCount MemberReference fp.fields length BlockStatement LocalVariableDeclaration ReferenceType Fieldable VariableDeclarator newArray ArrayCreator ReferenceType Fieldable BinaryOperation * MemberReference fp.fields length Literal 2 StatementExpression MethodInvocation System MemberReference fp fields Literal 0 MemberReference newArray Literal 0 MemberReference fp fieldCount arraycopy StatementExpression Assignment MemberReference fp fields MemberReference newArray = End StatementExpression Assignment MemberReference fp ArraySelector MemberReference ++ fp fieldCount fields MemberReference field = IfStatement MethodInvocation field isStored BlockStatement StatementExpression MethodInvocation fieldsWriter MemberReference field MemberReference fp fieldInfo addField End End StatementExpression MethodInvocation MemberReference fields Literal 0 BinaryOperation - MemberReference fieldCount Literal 1 quickSort ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fieldCount MemberReference ++ i StatementExpression MemberReference ArraySelector MemberReference i MemberReference consumer MethodInvocation MemberReference ArraySelector MemberReference i MemberReference fields fields MemberReference ArraySelector MemberReference i MemberReference fieldCount fields processFields fields End IfStatement BinaryOperation && BinaryOperation != MemberReference docState maxTermPrefix Literal null BinaryOperation != MemberReference docState infoStream Literal null StatementExpression MethodInvocation docState.infoStream BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""WARNING: document contains at least one immense term (longer than the max length "" MemberReference DocumentsWriter MAX_TERM_LENGTH Literal ""), all of which were skipped.  Please correct the analyzer to not produce such terms.  The prefix of the first immense term is: '"" MemberReference docState maxTermPrefix Literal ""...'"" println End LocalVariableDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocWriter VariableDeclarator one MethodInvocation fieldsWriter finishDocument LocalVariableDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocWriter VariableDeclarator two MethodInvocation consumer finishDocument IfStatement BinaryOperation == MemberReference one Literal null BlockStatement ReturnStatement MemberReference two IfStatement BinaryOperation == MemberReference two Literal null BlockStatement ReturnStatement MemberReference one BlockStatement LocalVariableDeclaration ReferenceType PerDoc VariableDeclarator both MethodInvocation getPerDoc StatementExpression Assignment MemberReference both docID MemberReference docState docID = AssertStatement BinaryOperation == MemberReference one docID MemberReference docState docID AssertStatement BinaryOperation == MemberReference two docID MemberReference docState docID StatementExpression Assignment MemberReference both one MemberReference one = StatementExpression Assignment MemberReference both two MemberReference two = ReturnStatement MemberReference both End End MethodDeclaration quickSort FormalParameter ReferenceType DocFieldProcessorPerField array FormalParameter BasicType int lo FormalParameter BasicType int hi IfStatement BinaryOperation >= MemberReference lo MemberReference hi ReturnStatement IfStatement BinaryOperation == MemberReference hi BinaryOperation + Literal 1 MemberReference lo BlockStatement IfStatement BinaryOperation > MemberReference ArraySelector MemberReference lo MemberReference fieldInfo MemberReference name MethodInvocation MemberReference ArraySelector MemberReference hi MemberReference fieldInfo MemberReference name array compareTo array Literal 0 BlockStatement LocalVariableDeclaration Modifier final ReferenceType DocFieldProcessorPerField VariableDeclarator tmp MemberReference ArraySelector MemberReference lo array StatementExpression Assignment MemberReference ArraySelector MemberReference lo array MemberReference ArraySelector MemberReference hi array = StatementExpression Assignment MemberReference ArraySelector MemberReference hi array MemberReference tmp = End ReturnStatement End End LocalVariableDeclaration BasicType int VariableDeclarator mid BinaryOperation >>> BinaryOperation + MemberReference lo MemberReference hi Literal 1 IfStatement BinaryOperation > MemberReference ArraySelector MemberReference lo MemberReference fieldInfo MemberReference name MethodInvocation MemberReference ArraySelector MemberReference mid MemberReference fieldInfo MemberReference name array compareTo array Literal 0 BlockStatement LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator tmp MemberReference ArraySelector MemberReference lo array StatementExpression Assignment MemberReference ArraySelector MemberReference lo array MemberReference ArraySelector MemberReference mid array = StatementExpression Assignment MemberReference ArraySelector MemberReference mid array MemberReference tmp = End IfStatement BinaryOperation > MemberReference ArraySelector MemberReference mid MemberReference fieldInfo MemberReference name MethodInvocation MemberReference ArraySelector MemberReference hi MemberReference fieldInfo MemberReference name array compareTo array Literal 0 BlockStatement LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator tmp MemberReference ArraySelector MemberReference mid array StatementExpression Assignment MemberReference ArraySelector MemberReference mid array MemberReference ArraySelector MemberReference hi array = StatementExpression Assignment MemberReference ArraySelector MemberReference hi array MemberReference tmp = IfStatement BinaryOperation > MemberReference ArraySelector MemberReference lo MemberReference fieldInfo MemberReference name MethodInvocation MemberReference ArraySelector MemberReference mid MemberReference fieldInfo MemberReference name array compareTo array Literal 0 BlockStatement LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator tmp2 MemberReference ArraySelector MemberReference lo array StatementExpression Assignment MemberReference ArraySelector MemberReference lo array MemberReference ArraySelector MemberReference mid array = StatementExpression Assignment MemberReference ArraySelector MemberReference mid array MemberReference tmp2 = End End LocalVariableDeclaration BasicType int VariableDeclarator left BinaryOperation + MemberReference lo Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator right BinaryOperation - MemberReference hi Literal 1 IfStatement BinaryOperation >= MemberReference left MemberReference right ReturnStatement End LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator partition MemberReference ArraySelector MemberReference mid array ForStatement ForControl BlockStatement WhileStatement BinaryOperation > MemberReference ArraySelector MemberReference right MemberReference fieldInfo MemberReference name MethodInvocation MemberReference partition.fieldInfo name compareTo array Literal 0 StatementExpression MemberReference -- right End WhileStatement BinaryOperation && BinaryOperation < MemberReference left MemberReference right BinaryOperation <= MemberReference ArraySelector MemberReference left MemberReference fieldInfo MemberReference name MethodInvocation MemberReference partition.fieldInfo name compareTo array Literal 0 StatementExpression MemberReference ++ left End IfStatement BinaryOperation < MemberReference left MemberReference right BlockStatement LocalVariableDeclaration ReferenceType DocFieldProcessorPerField VariableDeclarator tmp MemberReference ArraySelector MemberReference left array StatementExpression Assignment MemberReference ArraySelector MemberReference left array MemberReference ArraySelector MemberReference right array = StatementExpression Assignment MemberReference ArraySelector MemberReference right array MemberReference tmp = StatementExpression MemberReference -- right BlockStatement BreakStatement End End StatementExpression MethodInvocation MemberReference array MemberReference lo MemberReference left quickSort StatementExpression MethodInvocation MemberReference array BinaryOperation + MemberReference left Literal 1 MemberReference hi quickSort FieldDeclaration ReferenceType PerDoc VariableDeclarator docFreeList ArrayCreator ReferenceType PerDoc Literal 1 FieldDeclaration BasicType int VariableDeclarator freeCount FieldDeclaration BasicType int VariableDeclarator allocCount MethodDeclaration Modifier synchronized ReferenceType PerDoc getPerDoc IfStatement BinaryOperation == MemberReference freeCount Literal 0 BlockStatement StatementExpression MemberReference ++ allocCount IfStatement BinaryOperation > MemberReference allocCount MemberReference docFreeList length BlockStatement AssertStatement BinaryOperation == MemberReference allocCount BinaryOperation + Literal 1 MemberReference docFreeList length StatementExpression Assignment MemberReference docFreeList ArrayCreator ReferenceType PerDoc MethodInvocation ArrayUtil MemberReference allocCount getNextSize = End ReturnStatement ClassCreator ReferenceType PerDoc ReturnStatement MemberReference ArraySelector MemberReference -- freeCount docFreeList End MethodDeclaration Modifier synchronized freePerDoc FormalParameter ReferenceType PerDoc perDoc AssertStatement BinaryOperation < MemberReference freeCount MemberReference docFreeList length StatementExpression Assignment MemberReference ArraySelector MemberReference ++ freeCount docFreeList MemberReference perDoc = ClassDeclaration PerDoc FieldDeclaration ReferenceType DocumentsWriter ReferenceType DocWriter VariableDeclarator one FieldDeclaration ReferenceType DocumentsWriter ReferenceType DocWriter VariableDeclarator two MethodDeclaration Modifier public Annotation Override BasicType long sizeInBytes ReturnStatement BinaryOperation + MethodInvocation one sizeInBytes MethodInvocation two sizeInBytes MethodDeclaration Modifier public Annotation Override finish IOException TryStatement TryStatement StatementExpression MethodInvocation one finish StatementExpression MethodInvocation two finish StatementExpression MethodInvocation This freePerDoc MethodDeclaration Modifier public Annotation Override abort TryStatement TryStatement StatementExpression MethodInvocation one abort StatementExpression MethodInvocation two abort StatementExpression MethodInvocation This freePerDoc ReferenceType DocumentsWriter ReferenceType DocWriter ReferenceType DocConsumerPerThread",1
422,422,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import org.apache.lucene.util.UnicodeUtil Import org.apache.lucene.store.IndexOutput ClassDeclaration Modifier final FormatPostingsDocsWriter FieldDeclaration Modifier final ReferenceType IndexOutput VariableDeclarator out FieldDeclaration Modifier final ReferenceType FormatPostingsTermsWriter VariableDeclarator parent FieldDeclaration Modifier final ReferenceType FormatPostingsPositionsWriter VariableDeclarator posWriter FieldDeclaration Modifier final ReferenceType DefaultSkipListWriter VariableDeclarator skipListWriter FieldDeclaration Modifier final BasicType int VariableDeclarator skipInterval FieldDeclaration Modifier final BasicType int VariableDeclarator totalNumDocs FieldDeclaration BasicType boolean VariableDeclarator omitTermFreqAndPositions FieldDeclaration BasicType boolean VariableDeclarator storePayloads FieldDeclaration BasicType long VariableDeclarator freqStart FieldDeclaration ReferenceType FieldInfo VariableDeclarator fieldInfo ConstructorDeclaration FormatPostingsDocsWriter FormalParameter ReferenceType SegmentWriteState state FormalParameter ReferenceType FormatPostingsTermsWriter parent IOException StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference parent MemberReference parent = LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator fileName MethodInvocation IndexFileNames MemberReference parent.parent segment MemberReference IndexFileNames FREQ_EXTENSION segmentFileName StatementExpression MethodInvocation state.flushedFiles MemberReference fileName add StatementExpression Assignment MemberReference out MethodInvocation parent.parent.dir MemberReference fileName createOutput = StatementExpression Assignment MemberReference totalNumDocs MemberReference parent.parent totalNumDocs = StatementExpression Assignment MemberReference skipInterval MemberReference parent.parent.termsOut skipInterval = StatementExpression Assignment MemberReference skipListWriter MemberReference parent.parent skipListWriter = StatementExpression MethodInvocation skipListWriter MemberReference out setFreqOutput StatementExpression Assignment MemberReference posWriter ClassCreator ReferenceType FormatPostingsPositionsWriter MemberReference state This = MethodDeclaration setField FormalParameter ReferenceType FieldInfo fieldInfo StatementExpression Assignment This MemberReference fieldInfo MemberReference fieldInfo = StatementExpression Assignment MemberReference omitTermFreqAndPositions MemberReference fieldInfo omitTermFreqAndPositions = StatementExpression Assignment MemberReference storePayloads MemberReference fieldInfo storePayloads = StatementExpression MethodInvocation posWriter MemberReference fieldInfo setField FieldDeclaration BasicType int VariableDeclarator lastDocID FieldDeclaration BasicType int VariableDeclarator df MethodDeclaration /** Adds a new doc in this term.  If this returns null
   *  then we just skip consuming positions/payloads. */ Annotation Override ReferenceType FormatPostingsPositionsConsumer addDoc FormalParameter BasicType int docID FormalParameter BasicType int termDocFreq IOException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator delta BinaryOperation - MemberReference docID MemberReference lastDocID IfStatement BinaryOperation || BinaryOperation < MemberReference docID Literal 0 BinaryOperation && BinaryOperation > MemberReference df Literal 0 BinaryOperation <= MemberReference delta Literal 0 ThrowStatement ClassCreator ReferenceType CorruptIndexException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""docs out of order ("" MemberReference docID Literal "" <= "" MemberReference lastDocID Literal "" )"" End IfStatement BinaryOperation == BinaryOperation % MemberReference ++ df MemberReference skipInterval Literal 0 BlockStatement StatementExpression MethodInvocation skipListWriter MemberReference lastDocID MemberReference storePayloads MemberReference posWriter lastPayloadLength setSkipData StatementExpression MethodInvocation skipListWriter MemberReference df bufferSkip End AssertStatement BinaryOperation < MemberReference docID MemberReference totalNumDocs BinaryOperation + BinaryOperation + BinaryOperation + Literal ""docID="" MemberReference docID Literal "" totalNumDocs="" MemberReference totalNumDocs StatementExpression Assignment MemberReference lastDocID MemberReference docID = IfStatement MemberReference omitTermFreqAndPositions StatementExpression MethodInvocation out MemberReference delta writeVInt IfStatement BinaryOperation == Literal 1 MemberReference termDocFreq StatementExpression MethodInvocation out BinaryOperation | BinaryOperation << MemberReference delta Literal 1 Literal 1 writeVInt BlockStatement StatementExpression MethodInvocation out BinaryOperation << MemberReference delta Literal 1 writeVInt StatementExpression MethodInvocation out MemberReference termDocFreq writeVInt End End ReturnStatement MemberReference posWriter FieldDeclaration Modifier private final ReferenceType TermInfo VariableDeclarator termInfo ClassCreator ReferenceType TermInfo FieldDeclaration Modifier final ReferenceType UnicodeUtil ReferenceType UTF8Result VariableDeclarator utf8 ClassCreator ReferenceType UnicodeUtil ReferenceType UTF8Result MethodDeclaration /** Called when we are done adding docs to this term */ Annotation Override finish IOException LocalVariableDeclaration BasicType long VariableDeclarator skipPointer MethodInvocation skipListWriter MemberReference out writeSkip StatementExpression MethodInvocation termInfo MemberReference df MemberReference parent freqStart MemberReference parent proxStart Cast BasicType int BinaryOperation - MemberReference skipPointer MemberReference parent freqStart set StatementExpression MethodInvocation UnicodeUtil MemberReference parent currentTerm MemberReference parent currentTermStart MemberReference utf8 UTF16toUTF8 IfStatement BinaryOperation > MemberReference df Literal 0 BlockStatement StatementExpression MethodInvocation parent.termsOut MemberReference fieldInfo number MemberReference utf8 result MemberReference utf8 length MemberReference termInfo add End StatementExpression Assignment MemberReference lastDocID Literal 0 = StatementExpression Assignment MemberReference df Literal 0 = MethodDeclaration close IOException StatementExpression MethodInvocation out close StatementExpression MethodInvocation posWriter close ReferenceType FormatPostingsDocsConsumer",0
483,483,"CompilationUnit PackageDeclaration org.apache.lucene.search.function Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.FieldCache Import org.apache.lucene.search.function.DocValues Import java.io.IOException ClassDeclaration Modifier public /**
 * Expert: obtains single byte field values from the 
 * {@link org.apache.lucene.search.FieldCache FieldCache}
 * using <code>getBytes()</code> and makes those values 
 * available as other numeric types, casting as needed.
 * 
 * <p><font color=""#FF0000"">
 * WARNING: The status of the <b>search.function</b> package is experimental. 
 * The APIs introduced here might change in the future and will not be 
 * supported anymore in such a case.</font>
 * 
 * @see org.apache.lucene.search.function.FieldCacheSource for requirements 
 * on the field. 
 *
 * <p><b>NOTE</b>: with the switch in 2.9 to segment-based
 * searching, if {@link #getValues} is invoked with a
 * composite (multi-segment) reader, this can easily cause
 * double RAM usage for the values in the FieldCache.  It's
 * best to switch your application to pass only atomic
 * (single segment) readers to this API.  Alternatively, for
 * a short-term fix, you could wrap your ValueSource using
 * {@link MultiValueSource}, which costs more CPU per lookup
 * but will not consume double the FieldCache RAM.</p>
 */ ByteFieldSource FieldDeclaration Modifier private ReferenceType FieldCache ReferenceType ByteParser VariableDeclarator parser ConstructorDeclaration Modifier public /**
   * Create a cached byte field source with default string-to-byte parser. 
   */ ByteFieldSource FormalParameter ReferenceType String field StatementExpression ExplicitConstructorInvocation MemberReference field Literal null ConstructorDeclaration Modifier public /**
   * Create a cached byte field source with a specific string-to-byte parser. 
   */ ByteFieldSource FormalParameter ReferenceType String field FormalParameter ReferenceType FieldCache ReferenceType ByteParser parser StatementExpression SuperConstructorInvocation MemberReference field StatementExpression Assignment This MemberReference parser MemberReference parser = MethodDeclaration Modifier public Annotation Override ReferenceType String description ReturnStatement BinaryOperation + BinaryOperation + Literal ""byte("" SuperMethodInvocation description Literal ')' MethodDeclaration Modifier public Annotation Override ReferenceType DocValues getCachedFieldValues FormalParameter ReferenceType FieldCache cache FormalParameter ReferenceType String field FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration Modifier final BasicType byte VariableDeclarator arr MethodInvocation cache MemberReference reader MemberReference field MemberReference parser getBytes ReturnStatement ClassCreator ReferenceType DocValues MethodDeclaration Modifier public Annotation Override BasicType float floatVal FormalParameter BasicType int doc ReturnStatement Cast BasicType float MemberReference ArraySelector MemberReference doc arr MethodDeclaration Modifier public Annotation Override BasicType int intVal FormalParameter BasicType int doc ReturnStatement MemberReference ArraySelector MemberReference doc arr MethodDeclaration Modifier public Annotation Override ReferenceType String toString FormalParameter BasicType int doc ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation description Literal '=' MethodInvocation MemberReference doc intVal MethodDeclaration Annotation Override ReferenceType Object getInnerArray ReturnStatement MemberReference arr MethodDeclaration Modifier public Annotation Override BasicType boolean cachedFieldSourceEquals FormalParameter ReferenceType FieldCacheSource o IfStatement BinaryOperation != MethodInvocation o getClass ClassReference ReferenceType ByteFieldSource BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ByteFieldSource VariableDeclarator other Cast ReferenceType ByteFieldSource MemberReference o ReturnStatement TernaryExpression BinaryOperation == This MemberReference parser Literal null BinaryOperation == MemberReference other parser Literal null BinaryOperation == This MemberReference parser MethodInvocation getClass MethodInvocation other.parser getClass MethodDeclaration Modifier public Annotation Override BasicType int cachedFieldSourceHashCode ReturnStatement TernaryExpression BinaryOperation == MemberReference parser Literal null ClassReference MethodInvocation hashCode ReferenceType Byte MethodInvocation parser MethodInvocation hashCode getClass ReferenceType FieldCacheSource",0
486,486,"CompilationUnit PackageDeclaration org.apache.lucene.analysis Import java.io.IOException Import java.io.Reader ClassDeclaration Modifier public /**
 * ""Tokenizes"" the entire stream as a single token. This is useful
 * for data like zip codes, ids, and some product names.
 */ KeywordAnalyzer ConstructorDeclaration Modifier public KeywordAnalyzer StatementExpression MethodInvocation ClassReference ReferenceType KeywordAnalyzer setOverridesTokenStreamMethod MethodDeclaration Modifier public Annotation Override ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter Modifier final ReferenceType Reader reader ReturnStatement ClassCreator ReferenceType KeywordTokenizer MemberReference reader MethodDeclaration Modifier public Annotation Override ReferenceType TokenStream reusableTokenStream FormalParameter ReferenceType String fieldName FormalParameter Modifier final ReferenceType Reader reader IOException IfStatement MemberReference overridesTokenStreamMethod BlockStatement ReturnStatement MethodInvocation MemberReference fieldName MemberReference reader tokenStream End LocalVariableDeclaration ReferenceType Tokenizer VariableDeclarator tokenizer Cast ReferenceType Tokenizer MethodInvocation getPreviousTokenStream IfStatement BinaryOperation == MemberReference tokenizer Literal null BlockStatement StatementExpression Assignment MemberReference tokenizer ClassCreator ReferenceType KeywordTokenizer MemberReference reader = StatementExpression MethodInvocation MemberReference tokenizer setPreviousTokenStream StatementExpression MethodInvocation tokenizer MemberReference reader reset End ReturnStatement MemberReference tokenizer ReferenceType Analyzer",0
263,263,"CompilationUnit PackageDeclaration org.apache.lucene.search Import java.io.IOException Import java.io.StringReader Import java.util.ArrayList Import java.util.Arrays Import java.util.HashMap Import java.util.List Import java.util.Map Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.index.TermFreqVector ClassDeclaration Modifier public /**
 *
 *
 **/ QueryTermVector FieldDeclaration Modifier private ReferenceType String VariableDeclarator terms ArrayCreator ReferenceType String Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator termFreqs ArrayCreator BasicType int Literal 0 MethodDeclaration Modifier public ReferenceType String getField ReturnStatement Literal null ConstructorDeclaration Modifier public /**
   * 
   * @param queryTerms The original list of terms from the query, can contain duplicates
   */ QueryTermVector FormalParameter ReferenceType String queryTerms StatementExpression MethodInvocation MemberReference queryTerms processTerms ConstructorDeclaration Modifier public QueryTermVector FormalParameter ReferenceType String queryString FormalParameter ReferenceType Analyzer analyzer IfStatement BinaryOperation != MemberReference analyzer Literal null BlockStatement LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator stream MethodInvocation analyzer Literal """" ClassCreator ReferenceType StringReader MemberReference queryString tokenStream IfStatement BinaryOperation != MemberReference stream Literal null BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator terms ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String TryStatement LocalVariableDeclaration BasicType boolean VariableDeclarator hasMoreTokens Literal false StatementExpression MethodInvocation stream reset LocalVariableDeclaration ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation stream ClassReference ReferenceType TermAttribute addAttribute StatementExpression Assignment MemberReference hasMoreTokens MethodInvocation stream incrementToken = WhileStatement MemberReference hasMoreTokens BlockStatement StatementExpression MethodInvocation terms MethodInvocation termAtt term add StatementExpression Assignment MemberReference hasMoreTokens MethodInvocation stream incrementToken = End StatementExpression MethodInvocation MethodInvocation terms ArrayCreator ReferenceType String MethodInvocation terms size toArray processTerms CatchClause CatchClauseParameter IOException e End End MethodDeclaration Modifier private processTerms FormalParameter ReferenceType String queryTerms IfStatement BinaryOperation != MemberReference queryTerms Literal null BlockStatement StatementExpression MethodInvocation Arrays MemberReference queryTerms sort LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType String TypeArgument ReferenceType Integer VariableDeclarator tmpSet ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType Integer MemberReference queryTerms length LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator tmpList ClassCreator ReferenceType ArrayList TypeArgument ReferenceType String MemberReference queryTerms length LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator tmpFreqs ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Integer MemberReference queryTerms length LocalVariableDeclaration BasicType int VariableDeclarator j Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference queryTerms length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator term MemberReference ArraySelector MemberReference i queryTerms LocalVariableDeclaration ReferenceType Integer VariableDeclarator position MethodInvocation tmpSet MemberReference term get IfStatement BinaryOperation == MemberReference position Literal null BlockStatement StatementExpression MethodInvocation tmpSet MemberReference term MethodInvocation Integer MemberReference ++ j valueOf put StatementExpression MethodInvocation tmpList MemberReference term add StatementExpression MethodInvocation tmpFreqs MethodInvocation Integer Literal 1 valueOf add BlockStatement LocalVariableDeclaration ReferenceType Integer VariableDeclarator integer MethodInvocation tmpFreqs MethodInvocation position intValue get StatementExpression MethodInvocation tmpFreqs MethodInvocation position intValue MethodInvocation Integer BinaryOperation + MethodInvocation integer intValue Literal 1 valueOf set End End StatementExpression Assignment MemberReference terms MethodInvocation tmpList MemberReference terms toArray = StatementExpression Assignment MemberReference termFreqs ArrayCreator BasicType int MethodInvocation tmpFreqs size = LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 ForStatement EnhancedForControl VariableDeclaration Modifier final ReferenceType Integer VariableDeclarator integer MemberReference tmpFreqs BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ i termFreqs MethodInvocation integer intValue = End End MethodDeclaration Modifier public final Annotation Override ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder StatementExpression MethodInvocation sb Literal '{' append ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference terms length MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 StatementExpression MethodInvocation sb Literal "", "" append End StatementExpression MethodInvocation sb MethodInvocation Literal '/' append MethodInvocation MemberReference ArraySelector MemberReference i termFreqs append MemberReference ArraySelector MemberReference i terms append End StatementExpression MethodInvocation sb Literal '}' append ReturnStatement MethodInvocation sb toString MethodDeclaration Modifier public BasicType int size ReturnStatement MemberReference terms length MethodDeclaration Modifier public ReferenceType String getTerms ReturnStatement MemberReference terms MethodDeclaration Modifier public BasicType int getTermFrequencies ReturnStatement MemberReference termFreqs MethodDeclaration Modifier public BasicType int indexOf FormalParameter ReferenceType String term LocalVariableDeclaration BasicType int VariableDeclarator res MethodInvocation Arrays MemberReference terms MemberReference term binarySearch ReturnStatement TernaryExpression BinaryOperation >= MemberReference res Literal 0 MemberReference res Literal - 1 MethodDeclaration Modifier public BasicType int indexesOf FormalParameter ReferenceType String terms FormalParameter BasicType int start FormalParameter BasicType int len LocalVariableDeclaration BasicType int VariableDeclarator res ArrayCreator BasicType int MemberReference len ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference len MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i res MethodInvocation MemberReference ArraySelector MemberReference i terms indexOf = End ReturnStatement MemberReference res ReferenceType TermFreqVector",1
821,821,,0
424,424,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.nio.CharBuffer Import java.nio.ByteBuffer ClassDeclaration Modifier public /**
 * Provides support for converting byte sequences to Strings and back again.
 * The resulting Strings preserve the original byte sequences' sort order.
 * 
 * The Strings are constructed using a Base 8000h encoding of the original
 * binary data - each char of an encoded String represents a 15-bit chunk
 * from the byte sequence.  Base 8000h was chosen because it allows for all
 * lower 15 bits of char to be used without restriction; the surrogate range 
 * [U+D8000-U+DFFF] does not represent valid chars, and would require
 * complicated handling to avoid them and allow use of char's high bit.
 * 
 * Although unset bits are used as padding in the final char, the original
 * byte sequence could contain trailing bytes with no set bits (null bytes):
 * padding is indistinguishable from valid information.  To overcome this
 * problem, a char is appended, indicating the number of encoded bytes in the
 * final content char.
 * 
 * This class's operations are defined over CharBuffers and ByteBuffers, to
 * allow for wrapped arrays to be reused, reducing memory allocation costs for
 * repeated operations.  Note that this class calls array() and arrayOffset()
 * on the CharBuffers and ByteBuffers it uses, so only wrapped arrays may be
 * used.  This class interprets the arrayOffset() and limit() values returned by
 * its input buffers as beginning and end+1 positions on the wrapped array,
 * respectively; similarly, on the output buffer, arrayOffset() is the first
 * position written to, and limit() is set to one past the final output array
 * position.
 */ IndexableBinaryStringTools FieldDeclaration Modifier private final static ReferenceType CodingCase VariableDeclarator CODING_CASES ArrayInitializer ClassCreator ReferenceType CodingCase Literal 7 Literal 1 ClassCreator ReferenceType CodingCase Literal 14 Literal 6 Literal 2 ClassCreator ReferenceType CodingCase Literal 13 Literal 5 Literal 3 ClassCreator ReferenceType CodingCase Literal 12 Literal 4 Literal 4 ClassCreator ReferenceType CodingCase Literal 11 Literal 3 Literal 5 ClassCreator ReferenceType CodingCase Literal 10 Literal 2 Literal 6 ClassCreator ReferenceType CodingCase Literal 9 Literal 1 Literal 7 ClassCreator ReferenceType CodingCase Literal 8 Literal 0 ConstructorDeclaration Modifier private IndexableBinaryStringTools MethodDeclaration /**
   * Returns the number of chars required to encode the given byte sequence.
   * 
   * @param original The byte sequence to be encoded.  Must be backed by an array.
   * @return The number of chars required to encode the given byte sequence
   * @throws IllegalArgumentException If the given ByteBuffer is not backed by an array
   */ Modifier public static BasicType int getEncodedLength FormalParameter ReferenceType ByteBuffer original IllegalArgumentException IfStatement MethodInvocation original hasArray BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator length Cast BasicType long BinaryOperation - MethodInvocation original limit MethodInvocation original arrayOffset ReturnStatement BinaryOperation + Cast BasicType int BinaryOperation / BinaryOperation + BinaryOperation * MemberReference length Literal 8L Literal 14L Literal 15L Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""original argument must have a backing array"" End MethodDeclaration /**
   * Returns the number of bytes required to decode the given char sequence.
   * 
   * @param encoded The char sequence to be encoded.  Must be backed by an array.
   * @return The number of bytes required to decode the given char sequence
   * @throws IllegalArgumentException If the given CharBuffer is not backed by an array
   */ Modifier public static BasicType int getDecodedLength FormalParameter ReferenceType CharBuffer encoded IllegalArgumentException IfStatement MethodInvocation encoded hasArray BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator numChars BinaryOperation - BinaryOperation - MethodInvocation encoded limit MethodInvocation encoded arrayOffset Literal 1 IfStatement BinaryOperation <= MemberReference numChars Literal 0 BlockStatement ReturnStatement Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator numFullBytesInFinalChar MethodInvocation encoded BinaryOperation - MethodInvocation encoded limit Literal 1 charAt LocalVariableDeclaration BasicType int VariableDeclarator numEncodedChars BinaryOperation - MemberReference numChars Literal 1 ReturnStatement BinaryOperation + BinaryOperation / BinaryOperation + BinaryOperation * MemberReference numEncodedChars Literal 15 Literal 7 Literal 8 MemberReference numFullBytesInFinalChar End BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""encoded argument must have a backing array"" End MethodDeclaration /**
   * Encodes the input byte sequence into the output char sequence.  Before
   * calling this method, ensure that the output CharBuffer has sufficient
   * capacity by calling {@link #getEncodedLength(java.nio.ByteBuffer)}.
   * 
   * @param input The byte sequence to encode
   * @param output Where the char sequence encoding result will go.  The limit
   *  is set to one past the position of the final char.
   * @throws IllegalArgumentException If either the input or the output buffer
   *  is not backed by an array
   */ Modifier public static encode FormalParameter ReferenceType ByteBuffer input FormalParameter ReferenceType CharBuffer output IfStatement BinaryOperation && MethodInvocation input hasArray MethodInvocation output hasArray BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator inputArray MethodInvocation input array LocalVariableDeclaration BasicType int VariableDeclarator inputOffset MethodInvocation input arrayOffset LocalVariableDeclaration BasicType int VariableDeclarator inputLength BinaryOperation - MethodInvocation input limit MemberReference inputOffset LocalVariableDeclaration BasicType char VariableDeclarator outputArray MethodInvocation output array LocalVariableDeclaration BasicType int VariableDeclarator outputOffset MethodInvocation output arrayOffset LocalVariableDeclaration BasicType int VariableDeclarator outputLength MethodInvocation MemberReference input getEncodedLength StatementExpression MethodInvocation output BinaryOperation + MemberReference outputOffset MemberReference outputLength limit StatementExpression MethodInvocation output Literal 0 position IfStatement BinaryOperation > MemberReference inputLength Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator inputByteNum MemberReference inputOffset LocalVariableDeclaration BasicType int VariableDeclarator caseNum Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator outputCharNum MemberReference outputOffset LocalVariableDeclaration ReferenceType CodingCase VariableDeclarator codingCase ForStatement ForControl BinaryOperation <= BinaryOperation + MemberReference inputByteNum MemberReference ArraySelector MemberReference caseNum MemberReference numBytes CODING_CASES MemberReference inputLength MemberReference ++ outputCharNum BlockStatement StatementExpression Assignment MemberReference codingCase MemberReference ArraySelector MemberReference caseNum CODING_CASES = IfStatement BinaryOperation == Literal 2 MemberReference codingCase numBytes BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference outputCharNum outputArray Cast BasicType char BinaryOperation & BinaryOperation + BinaryOperation << BinaryOperation & MemberReference ArraySelector MemberReference inputByteNum inputArray Literal 0xFF MemberReference codingCase initialShift BinaryOperation & BinaryOperation >>> BinaryOperation & MemberReference ArraySelector BinaryOperation + MemberReference inputByteNum Literal 1 inputArray Literal 0xFF MemberReference codingCase finalShift MemberReference codingCase finalMask Cast BasicType short Literal 0x7FFF = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference outputCharNum outputArray Cast BasicType char BinaryOperation & BinaryOperation + BinaryOperation + BinaryOperation << BinaryOperation & MemberReference ArraySelector MemberReference inputByteNum inputArray Literal 0xFF MemberReference codingCase initialShift BinaryOperation << BinaryOperation & MemberReference ArraySelector BinaryOperation + MemberReference inputByteNum Literal 1 inputArray Literal 0xFF MemberReference codingCase middleShift BinaryOperation & BinaryOperation >>> BinaryOperation & MemberReference ArraySelector BinaryOperation + MemberReference inputByteNum Literal 2 inputArray Literal 0xFF MemberReference codingCase finalShift MemberReference codingCase finalMask Cast BasicType short Literal 0x7FFF = End StatementExpression Assignment MemberReference inputByteNum MemberReference codingCase advanceBytes += IfStatement BinaryOperation == MemberReference ++ caseNum MemberReference CODING_CASES length BlockStatement StatementExpression Assignment MemberReference caseNum Literal 0 = End End StatementExpression Assignment MemberReference codingCase MemberReference ArraySelector MemberReference caseNum CODING_CASES = IfStatement BinaryOperation < BinaryOperation + MemberReference inputByteNum Literal 1 MemberReference inputLength BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputCharNum outputArray Cast BasicType char BinaryOperation & BinaryOperation + BinaryOperation << BinaryOperation & MemberReference ArraySelector MemberReference inputByteNum inputArray Literal 0xFF MemberReference codingCase initialShift BinaryOperation << BinaryOperation & MemberReference ArraySelector BinaryOperation + MemberReference inputByteNum Literal 1 inputArray Literal 0xFF MemberReference codingCase middleShift Cast BasicType short Literal 0x7FFF = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputCharNum outputArray Cast BasicType char Literal 1 = IfStatement BinaryOperation < MemberReference inputByteNum MemberReference inputLength BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputCharNum outputArray Cast BasicType char BinaryOperation & BinaryOperation << BinaryOperation & MemberReference ArraySelector MemberReference inputByteNum inputArray Literal 0xFF MemberReference codingCase initialShift Cast BasicType short Literal 0x7FFF = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputCharNum outputArray TernaryExpression BinaryOperation == MemberReference caseNum Literal 0 Cast BasicType char Literal 1 Cast BasicType char Literal 0 = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outputCharNum outputArray Cast BasicType char Literal 1 = End End End BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Arguments must have backing arrays"" End MethodDeclaration /**
   * Decodes the input char sequence into the output byte sequence.  Before
   * calling this method, ensure that the output ByteBuffer has sufficient
   * capacity by calling {@link #getDecodedLength(java.nio.CharBuffer)}.
   * 
   * @param input The char sequence to decode
   * @param output Where the byte sequence decoding result will go.  The limit
   *  is set to one past the position of the final char.
   * @throws IllegalArgumentException If either the input or the output buffer
   *  is not backed by an array
   */ Modifier public static decode FormalParameter ReferenceType CharBuffer input FormalParameter ReferenceType ByteBuffer output IfStatement BinaryOperation && MethodInvocation input hasArray MethodInvocation output hasArray BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator numInputChars BinaryOperation - BinaryOperation - MethodInvocation input limit MethodInvocation input arrayOffset Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator numOutputBytes MethodInvocation MemberReference input getDecodedLength StatementExpression MethodInvocation output BinaryOperation + MemberReference numOutputBytes MethodInvocation output arrayOffset limit StatementExpression MethodInvocation output Literal 0 position LocalVariableDeclaration BasicType byte VariableDeclarator outputArray MethodInvocation output array LocalVariableDeclaration BasicType char VariableDeclarator inputArray MethodInvocation input array IfStatement BinaryOperation > MemberReference numOutputBytes Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator caseNum Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator outputByteNum MethodInvocation output arrayOffset LocalVariableDeclaration BasicType int VariableDeclarator inputCharNum MethodInvocation input arrayOffset LocalVariableDeclaration BasicType short VariableDeclarator inputChar LocalVariableDeclaration ReferenceType CodingCase VariableDeclarator codingCase ForStatement ForControl BinaryOperation < MemberReference inputCharNum BinaryOperation - MemberReference numInputChars Literal 1 MemberReference ++ inputCharNum BlockStatement StatementExpression Assignment MemberReference codingCase MemberReference ArraySelector MemberReference caseNum CODING_CASES = StatementExpression Assignment MemberReference inputChar Cast BasicType short MemberReference ArraySelector MemberReference inputCharNum inputArray = IfStatement BinaryOperation == Literal 2 MemberReference codingCase numBytes BlockStatement IfStatement BinaryOperation == Literal 0 MemberReference caseNum BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference outputByteNum outputArray Cast BasicType byte BinaryOperation >>> MemberReference inputChar MemberReference codingCase initialShift = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference outputByteNum outputArray Cast BasicType byte BinaryOperation >>> MemberReference inputChar MemberReference codingCase initialShift += End StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference outputByteNum Literal 1 outputArray Cast BasicType byte BinaryOperation << BinaryOperation & MemberReference inputChar MemberReference codingCase finalMask MemberReference codingCase finalShift = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference outputByteNum outputArray Cast BasicType byte BinaryOperation >>> MemberReference inputChar MemberReference codingCase initialShift += StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference outputByteNum Literal 1 outputArray Cast BasicType byte BinaryOperation >>> BinaryOperation & MemberReference inputChar MemberReference codingCase middleMask MemberReference codingCase middleShift = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference outputByteNum Literal 2 outputArray Cast BasicType byte BinaryOperation << BinaryOperation & MemberReference inputChar MemberReference codingCase finalMask MemberReference codingCase finalShift = End StatementExpression Assignment MemberReference outputByteNum MemberReference codingCase advanceBytes += IfStatement BinaryOperation == MemberReference ++ caseNum MemberReference CODING_CASES length BlockStatement StatementExpression Assignment MemberReference caseNum Literal 0 = End End StatementExpression Assignment MemberReference inputChar Cast BasicType short MemberReference ArraySelector MemberReference inputCharNum inputArray = StatementExpression Assignment MemberReference codingCase MemberReference ArraySelector MemberReference caseNum CODING_CASES = IfStatement BinaryOperation == Literal 0 MemberReference caseNum BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference outputByteNum outputArray Literal 0 = End StatementExpression Assignment MemberReference ArraySelector MemberReference outputByteNum outputArray Cast BasicType byte BinaryOperation >>> MemberReference inputChar MemberReference codingCase initialShift += LocalVariableDeclaration BasicType int VariableDeclarator bytesLeft BinaryOperation - MemberReference numOutputBytes MemberReference outputByteNum IfStatement BinaryOperation > MemberReference bytesLeft Literal 1 BlockStatement IfStatement BinaryOperation == Literal 2 MemberReference codingCase numBytes BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference outputByteNum Literal 1 outputArray Cast BasicType byte BinaryOperation >>> BinaryOperation & MemberReference inputChar MemberReference codingCase finalMask MemberReference codingCase finalShift = BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference outputByteNum Literal 1 outputArray Cast BasicType byte BinaryOperation >>> BinaryOperation & MemberReference inputChar MemberReference codingCase middleMask MemberReference codingCase middleShift = IfStatement BinaryOperation > MemberReference bytesLeft Literal 2 BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference outputByteNum Literal 2 outputArray Cast BasicType byte BinaryOperation << BinaryOperation & MemberReference inputChar MemberReference codingCase finalMask MemberReference codingCase finalShift = End End End End BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Arguments must have backing arrays"" End MethodDeclaration /**
   * Decodes the given char sequence, which must have been encoded by
   * {@link #encode(java.nio.ByteBuffer)} or 
   * {@link #encode(java.nio.ByteBuffer, java.nio.CharBuffer)}.
   * 
   * @param input The char sequence to decode
   * @return A byte sequence containing the decoding result.  The limit
   *  is set to one past the position of the final char.
   * @throws IllegalArgumentException If the input buffer is not backed by an
   *  array
   */ Modifier public static ReferenceType ByteBuffer decode FormalParameter ReferenceType CharBuffer input LocalVariableDeclaration BasicType byte VariableDeclarator outputArray ArrayCreator BasicType byte MethodInvocation MemberReference input getDecodedLength LocalVariableDeclaration ReferenceType ByteBuffer VariableDeclarator output MethodInvocation ByteBuffer MemberReference outputArray wrap StatementExpression MethodInvocation MemberReference input MemberReference output decode ReturnStatement MemberReference output MethodDeclaration /**
   * Encodes the input byte sequence.
   * 
   * @param input The byte sequence to encode
   * @return A char sequence containing the encoding result.  The limit is set
   *  to one past the position of the final char.
   * @throws IllegalArgumentException If the input buffer is not backed by an
   *  array
   */ Modifier public static ReferenceType CharBuffer encode FormalParameter ReferenceType ByteBuffer input LocalVariableDeclaration BasicType char VariableDeclarator outputArray ArrayCreator BasicType char MethodInvocation MemberReference input getEncodedLength LocalVariableDeclaration ReferenceType CharBuffer VariableDeclarator output MethodInvocation CharBuffer MemberReference outputArray wrap StatementExpression MethodInvocation MemberReference input MemberReference output encode ReturnStatement MemberReference output ClassDeclaration Modifier static CodingCase FieldDeclaration BasicType int VariableDeclarator numBytes VariableDeclarator initialShift VariableDeclarator middleShift VariableDeclarator finalShift VariableDeclarator advanceBytes Literal 2 FieldDeclaration BasicType short VariableDeclarator middleMask VariableDeclarator finalMask ConstructorDeclaration CodingCase FormalParameter BasicType int initialShift FormalParameter BasicType int middleShift FormalParameter BasicType int finalShift StatementExpression Assignment This MemberReference numBytes Literal 3 = StatementExpression Assignment This MemberReference initialShift MemberReference initialShift = StatementExpression Assignment This MemberReference middleShift MemberReference middleShift = StatementExpression Assignment This MemberReference finalShift MemberReference finalShift = StatementExpression Assignment This MemberReference finalMask Cast BasicType short BinaryOperation >>> Cast BasicType short Literal 0xFF MemberReference finalShift = StatementExpression Assignment This MemberReference middleMask Cast BasicType short BinaryOperation << Cast BasicType short Literal 0xFF MemberReference middleShift = ConstructorDeclaration CodingCase FormalParameter BasicType int initialShift FormalParameter BasicType int finalShift StatementExpression Assignment This MemberReference numBytes Literal 2 = StatementExpression Assignment This MemberReference initialShift MemberReference initialShift = StatementExpression Assignment This MemberReference finalShift MemberReference finalShift = StatementExpression Assignment This MemberReference finalMask Cast BasicType short BinaryOperation >>> Cast BasicType short Literal 0xFF MemberReference finalShift = IfStatement BinaryOperation != MemberReference finalShift Literal 0 BlockStatement StatementExpression Assignment MemberReference advanceBytes Literal 1 = End",1
170,170,"CompilationUnit PackageDeclaration org.apache.lucene.search.payloads ClassDeclaration Modifier public /**
 * Calculate the final score as the average score of all payloads seen.
 * <p/>
 * Is thread safe and completely reusable. 
 *
 **/ AveragePayloadFunction MethodDeclaration Modifier public Annotation Override BasicType float currentScore FormalParameter BasicType int docId FormalParameter ReferenceType String field FormalParameter BasicType int start FormalParameter BasicType int end FormalParameter BasicType int numPayloadsSeen FormalParameter BasicType float currentScore FormalParameter BasicType float currentPayloadScore ReturnStatement BinaryOperation + MemberReference currentPayloadScore MemberReference currentScore MethodDeclaration Modifier public Annotation Override BasicType float docScore FormalParameter BasicType int docId FormalParameter ReferenceType String field FormalParameter BasicType int numPayloadsSeen FormalParameter BasicType float payloadScore ReturnStatement TernaryExpression BinaryOperation > MemberReference numPayloadsSeen Literal 0 BinaryOperation / MemberReference payloadScore MemberReference numPayloadsSeen Literal 1 MethodDeclaration Modifier public Annotation Override BasicType int hashCode LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prime Literal 31 LocalVariableDeclaration BasicType int VariableDeclarator result Literal 1 StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * MemberReference prime MemberReference result This MethodInvocation getClass MethodInvocation hashCode = ReturnStatement MemberReference result MethodDeclaration Modifier public Annotation Override BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference obj Literal null ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation getClass MethodInvocation obj getClass ReturnStatement Literal false End ReturnStatement Literal true ReferenceType PayloadFunction",0
576,576,,1
335,335,"CompilationUnit PackageDeclaration org.apache.lucene.xmlparser.builders Import java.io.IOException Import java.io.StringReader Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.index.Term Import org.apache.lucene.search.BooleanClause Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.Query Import org.apache.lucene.search.TermQuery Import org.apache.lucene.xmlparser.DOMUtils Import org.apache.lucene.xmlparser.ParserException Import org.apache.lucene.xmlparser.QueryBuilder Import org.w3c.dom.Element ClassDeclaration Modifier public /**
 * Builds a BooleanQuery from all of the terms found in the XML element using the choice of analyzer
 */ TermsQueryBuilder FieldDeclaration ReferenceType Analyzer VariableDeclarator analyzer ConstructorDeclaration Modifier public TermsQueryBuilder FormalParameter ReferenceType Analyzer analyzer StatementExpression Assignment This MemberReference analyzer MemberReference analyzer = MethodDeclaration Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Element e ParserException LocalVariableDeclaration ReferenceType String VariableDeclarator fieldName MethodInvocation DOMUtils MemberReference e Literal ""fieldName"" getAttributeWithInheritanceOrFail LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation DOMUtils MemberReference e getNonBlankTextOrFail LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator bq ClassCreator ReferenceType BooleanQuery MethodInvocation DOMUtils MemberReference e Literal ""disableCoord"" Literal false getAttribute StatementExpression MethodInvocation bq MethodInvocation DOMUtils MemberReference e Literal ""minimumNumberShouldMatch"" Literal 0 getAttribute setMinimumNumberShouldMatch LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator ts MethodInvocation analyzer MemberReference fieldName ClassCreator ReferenceType StringReader MemberReference text tokenStream TryStatement LocalVariableDeclaration ReferenceType TermAttribute VariableDeclarator termAtt MethodInvocation ts ClassReference ReferenceType TermAttribute addAttribute LocalVariableDeclaration ReferenceType Term VariableDeclarator term Literal null WhileStatement MethodInvocation ts incrementToken BlockStatement IfStatement BinaryOperation == MemberReference term Literal null BlockStatement StatementExpression Assignment MemberReference term ClassCreator ReferenceType Term MemberReference fieldName MethodInvocation termAtt term = BlockStatement StatementExpression Assignment MemberReference term MethodInvocation term MethodInvocation termAtt term createTerm = End StatementExpression MethodInvocation bq ClassCreator ReferenceType BooleanClause ClassCreator ReferenceType TermQuery MemberReference term MemberReference BooleanClause.Occur SHOULD add End CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + Literal ""Error constructing terms from index:"" MemberReference ioe StatementExpression MethodInvocation bq MethodInvocation DOMUtils MemberReference e Literal ""boost"" Literal 1.0f getAttribute setBoost ReturnStatement MemberReference bq ReferenceType QueryBuilder",0
684,684,,1
694,694,,0
485,485,"CompilationUnit PackageDeclaration org.apache.lucene.wordnet Import java.io.IOException Import org.apache.lucene.analysis.TokenFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute Import org.apache.lucene.analysis.tokenattributes.TermAttribute Import org.apache.lucene.analysis.tokenattributes.TypeAttribute Import org.apache.lucene.util.AttributeSource ClassDeclaration Modifier public /**
 * Injects additional tokens for synonyms of token terms fetched from the
 * underlying child stream; the child stream must deliver lowercase tokens
 * for synonyms to be found.
 *
 */ SynonymTokenFilter FieldDeclaration /** The Token.type used to indicate a synonym to higher level filters. */ Modifier public final static ReferenceType String VariableDeclarator SYNONYM_TOKEN_TYPE Literal ""SYNONYM"" FieldDeclaration Modifier private final ReferenceType SynonymMap VariableDeclarator synonyms FieldDeclaration Modifier private final BasicType int VariableDeclarator maxSynonyms FieldDeclaration Modifier private ReferenceType String VariableDeclarator stack Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator index Literal 0 FieldDeclaration Modifier private ReferenceType AttributeSource ReferenceType State VariableDeclarator current Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator todo Literal 0 FieldDeclaration Modifier private ReferenceType TermAttribute VariableDeclarator termAtt FieldDeclaration Modifier private ReferenceType TypeAttribute VariableDeclarator typeAtt FieldDeclaration Modifier private ReferenceType PositionIncrementAttribute VariableDeclarator posIncrAtt ConstructorDeclaration Modifier public /**
   * Creates an instance for the given underlying stream and synonym table.
   * 
   * @param input
   *            the underlying child token stream
   * @param synonyms
   *            the map used to extract synonyms for terms
   * @param maxSynonyms
   *            the maximum number of synonym tokens to return per underlying
   *            token word (a value of Integer.MAX_VALUE indicates unlimited)
   */ SynonymTokenFilter FormalParameter ReferenceType TokenStream input FormalParameter ReferenceType SynonymMap synonyms FormalParameter BasicType int maxSynonyms StatementExpression SuperConstructorInvocation MemberReference input IfStatement BinaryOperation == MemberReference input Literal null ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""input must not be null"" End IfStatement BinaryOperation == MemberReference synonyms Literal null ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""synonyms must not be null"" End IfStatement BinaryOperation < MemberReference maxSynonyms Literal 0 ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""maxSynonyms must not be negative"" End StatementExpression Assignment This MemberReference synonyms MemberReference synonyms = StatementExpression Assignment This MemberReference maxSynonyms MemberReference maxSynonyms = StatementExpression Assignment This MemberReference termAtt MethodInvocation ClassReference ReferenceType TermAttribute addAttribute = StatementExpression Assignment This MemberReference typeAtt MethodInvocation ClassReference ReferenceType TypeAttribute addAttribute = StatementExpression Assignment This MemberReference posIncrAtt MethodInvocation ClassReference ReferenceType PositionIncrementAttribute addAttribute = MethodDeclaration /** Returns the next token in the stream, or null at EOS. */ Modifier public final Annotation Override BasicType boolean incrementToken IOException WhileStatement BinaryOperation && BinaryOperation > MemberReference todo Literal 0 BinaryOperation < MemberReference index MemberReference stack length BlockStatement IfStatement MethodInvocation MemberReference ArraySelector MemberReference ++ index stack MemberReference current createToken BlockStatement StatementExpression MemberReference -- todo ReturnStatement Literal true End End IfStatement MethodInvocation ! input incrementToken ReturnStatement Literal false End StatementExpression Assignment MemberReference stack MethodInvocation synonyms MethodInvocation termAtt term getSynonyms = IfStatement BinaryOperation > MemberReference stack length MemberReference maxSynonyms StatementExpression MethodInvocation MemberReference stack randomize End StatementExpression Assignment MemberReference index Literal 0 = StatementExpression Assignment MemberReference current MethodInvocation captureState = StatementExpression Assignment MemberReference todo MemberReference maxSynonyms = ReturnStatement Literal true MethodDeclaration /**
   * Creates and returns a token for the given synonym of the current input
   * token; Override for custom (stateless or stateful) behavior, if desired.
   * 
   * @param synonym 
   *            a synonym for the current token's term
   * @param current
   *            the current token from the underlying child stream
   * @return a new token, or null to indicate that the given synonym should be
   *         ignored
   */ Modifier protected BasicType boolean createToken FormalParameter ReferenceType String synonym FormalParameter ReferenceType AttributeSource ReferenceType State current StatementExpression MethodInvocation MemberReference current restoreState StatementExpression MethodInvocation termAtt MemberReference synonym setTermBuffer StatementExpression MethodInvocation typeAtt MemberReference SYNONYM_TOKEN_TYPE setType StatementExpression MethodInvocation posIncrAtt Literal 0 setPositionIncrement ReturnStatement Literal true MethodDeclaration /**
   * Randomize synonyms to later sample a subset. Uses constant random seed
   * for reproducibility. Uses ""DRand"", a simple, fast, uniform pseudo-random
   * number generator with medium statistical quality (multiplicative
   * congruential method), producing integers in the range [Integer.MIN_VALUE,
   * Integer.MAX_VALUE].
   */ Modifier private static randomize FormalParameter ReferenceType Object arr LocalVariableDeclaration BasicType int VariableDeclarator seed Literal 1234567 LocalVariableDeclaration BasicType int VariableDeclarator randomState BinaryOperation + BinaryOperation * Literal 4 MemberReference seed Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator len MemberReference arr length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation - MemberReference len Literal 1 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference randomState Literal 0x278DDE6D *= LocalVariableDeclaration BasicType int VariableDeclarator r BinaryOperation % MemberReference randomState BinaryOperation - MemberReference len MemberReference i IfStatement BinaryOperation < MemberReference r Literal 0 StatementExpression Assignment MemberReference r MemberReference - r = End LocalVariableDeclaration ReferenceType Object VariableDeclarator tmp MemberReference ArraySelector MemberReference i arr StatementExpression Assignment MemberReference ArraySelector MemberReference i arr MemberReference ArraySelector BinaryOperation + MemberReference i MemberReference r arr = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference i MemberReference r arr MemberReference tmp = End MethodDeclaration Modifier public Annotation Override reset IOException StatementExpression SuperMethodInvocation reset StatementExpression Assignment MemberReference stack Literal null = StatementExpression Assignment MemberReference index Literal 0 = StatementExpression Assignment MemberReference current Literal null = StatementExpression Assignment MemberReference todo Literal 0 = ReferenceType TokenFilter",0
902,902,,1
764,764,,1
777,777,,1
34,34,"CompilationUnit PackageDeclaration org.apache.lucene.misc Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermEnum Import org.apache.lucene.store.FSDirectory Import org.apache.lucene.util.PriorityQueue Import java.io.File ClassDeclaration Modifier public /**
 * <code>HighFreqTerms</code> class extracts terms and their frequencies out
 * of an existing Lucene index.
 */ HighFreqTerms FieldDeclaration Modifier public final static BasicType int VariableDeclarator numTerms Literal 100 MethodDeclaration Modifier public static main FormalParameter ReferenceType String args Exception LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator reader Literal null LocalVariableDeclaration ReferenceType FSDirectory VariableDeclarator dir Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator field Literal null IfStatement BinaryOperation == MemberReference args length Literal 1 BlockStatement StatementExpression Assignment MemberReference dir MethodInvocation FSDirectory ClassCreator ReferenceType File MemberReference ArraySelector Literal 0 args open = StatementExpression Assignment MemberReference reader MethodInvocation IndexReader MemberReference dir Literal true open = IfStatement BinaryOperation == MemberReference args length Literal 2 BlockStatement StatementExpression Assignment MemberReference dir MethodInvocation FSDirectory ClassCreator ReferenceType File MemberReference ArraySelector Literal 0 args open = StatementExpression Assignment MemberReference reader MethodInvocation IndexReader MemberReference dir Literal true open = StatementExpression Assignment MemberReference field MemberReference ArraySelector Literal 1 args = BlockStatement StatementExpression MethodInvocation usage StatementExpression MethodInvocation System Literal 1 exit End End LocalVariableDeclaration ReferenceType TermInfoQueue VariableDeclarator tiq ClassCreator ReferenceType TermInfoQueue MemberReference numTerms LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator terms MethodInvocation reader terms IfStatement BinaryOperation != MemberReference field Literal null BlockStatement WhileStatement MethodInvocation terms next BlockStatement IfStatement MethodInvocation terms MethodInvocation field MethodInvocation MemberReference field equals term BlockStatement StatementExpression MethodInvocation tiq ClassCreator ReferenceType TermInfo MethodInvocation terms term MethodInvocation terms docFreq insertWithOverflow End End BlockStatement WhileStatement MethodInvocation terms next BlockStatement StatementExpression MethodInvocation tiq ClassCreator ReferenceType TermInfo MethodInvocation terms term MethodInvocation terms docFreq insertWithOverflow End End WhileStatement BinaryOperation != MethodInvocation tiq size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType TermInfo VariableDeclarator termInfo MethodInvocation tiq pop StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + MemberReference termInfo term Literal "" "" MemberReference termInfo docFreq println End StatementExpression MethodInvocation reader close MethodDeclaration Modifier private static usage StatementExpression MethodInvocation System.out BinaryOperation + Literal ""\n\n"" Literal ""java org.apache.lucene.misc.HighFreqTerms <index dir> [field]\n\n"" println ClassDeclaration Modifier final TermInfo ConstructorDeclaration TermInfo FormalParameter ReferenceType Term t FormalParameter BasicType int df StatementExpression Assignment MemberReference term MemberReference t = StatementExpression Assignment MemberReference docFreq MemberReference df = FieldDeclaration BasicType int VariableDeclarator docFreq FieldDeclaration ReferenceType Term VariableDeclarator term ClassDeclaration Modifier final TermInfoQueue ConstructorDeclaration TermInfoQueue FormalParameter BasicType int size StatementExpression MethodInvocation MemberReference size initialize MethodDeclaration Modifier final protected Annotation Override BasicType boolean lessThan FormalParameter ReferenceType TermInfo termInfoA FormalParameter ReferenceType TermInfo termInfoB ReturnStatement BinaryOperation < MemberReference termInfoA docFreq MemberReference termInfoB docFreq ReferenceType PriorityQueue TypeArgument ReferenceType TermInfo",0
775,775,,0
142,142,"CompilationUnit PackageDeclaration org.apache.lucene.index Import org.apache.lucene.document.Document Import org.apache.lucene.document.Fieldable Import org.apache.lucene.store.Directory Import org.apache.lucene.store.IndexInput Import org.apache.lucene.store.IndexOutput Import org.apache.lucene.util.StringHelper Import java.io.IOException Import java.util  ClassDeclaration Modifier final /** Access to the Fieldable Info file that describes document fields and whether or
 *  not they are indexed. Each segment has a separate Fieldable Info file. Objects
 *  of this class are thread-safe for multiple readers, but only one thread can
 *  be adding documents at a time, with no other reader or writer threads
 *  accessing this object.
 */ FieldInfos FieldDeclaration Modifier public final static BasicType int VariableDeclarator FORMAT_PRE Literal - 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator FORMAT_START Literal - 2 FieldDeclaration Modifier final static BasicType int VariableDeclarator CURRENT_FORMAT MemberReference FORMAT_START FieldDeclaration Modifier final static BasicType byte VariableDeclarator IS_INDEXED Literal 0x1 FieldDeclaration Modifier final static BasicType byte VariableDeclarator STORE_TERMVECTOR Literal 0x2 FieldDeclaration Modifier final static BasicType byte VariableDeclarator STORE_POSITIONS_WITH_TERMVECTOR Literal 0x4 FieldDeclaration Modifier final static BasicType byte VariableDeclarator STORE_OFFSET_WITH_TERMVECTOR Literal 0x8 FieldDeclaration Modifier final static BasicType byte VariableDeclarator OMIT_NORMS Literal 0x10 FieldDeclaration Modifier final static BasicType byte VariableDeclarator STORE_PAYLOADS Literal 0x20 FieldDeclaration Modifier final static BasicType byte VariableDeclarator OMIT_TERM_FREQ_AND_POSITIONS Literal 0x40 FieldDeclaration Modifier private final ReferenceType ArrayList TypeArgument ReferenceType FieldInfo VariableDeclarator byNumber ClassCreator ReferenceType ArrayList TypeArgument ReferenceType FieldInfo FieldDeclaration Modifier private final ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType FieldInfo VariableDeclarator byName ClassCreator ReferenceType HashMap TypeArgument ReferenceType String TypeArgument ReferenceType FieldInfo FieldDeclaration Modifier private BasicType int VariableDeclarator format ConstructorDeclaration FieldInfos ConstructorDeclaration /**
   * Construct a FieldInfos object using the directory and the name of the file
   * IndexInput
   * @param d The directory to open the IndexInput from
   * @param name The name of the file to open the IndexInput from in the Directory
   * @throws IOException
   */ FieldInfos FormalParameter ReferenceType Directory d FormalParameter ReferenceType String name IOException LocalVariableDeclaration ReferenceType IndexInput VariableDeclarator input MethodInvocation d MemberReference name openInput TryStatement TryStatement StatementExpression MethodInvocation MemberReference input MemberReference name read CatchClause CatchClauseParameter IOException ioe IfStatement BinaryOperation == MemberReference format MemberReference FORMAT_PRE BlockStatement StatementExpression MethodInvocation input Literal 0 seek StatementExpression MethodInvocation input setModifiedUTF8StringsMode StatementExpression MethodInvocation byNumber clear StatementExpression MethodInvocation byName clear TryStatement StatementExpression MethodInvocation MemberReference input MemberReference name read CatchClause CatchClauseParameter Throwable t ThrowStatement MemberReference ioe BlockStatement ThrowStatement MemberReference ioe End StatementExpression MethodInvocation input close MethodDeclaration /**
   * Returns a deep clone of this FieldInfos instance.
   */ Modifier public synchronized Annotation Override ReferenceType Object clone LocalVariableDeclaration ReferenceType FieldInfos VariableDeclarator fis ClassCreator ReferenceType FieldInfos LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numField MethodInvocation byNumber size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numField MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi Cast ReferenceType FieldInfo MethodInvocation byNumber MethodInvocation clone MemberReference i get StatementExpression MethodInvocation fis.byNumber MemberReference fi add StatementExpression MethodInvocation fis.byName MemberReference fi name MemberReference fi put End ReturnStatement MemberReference fis MethodDeclaration /** Adds field info for a Document. */ Modifier public synchronized add FormalParameter ReferenceType Document doc LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Fieldable VariableDeclarator fields MethodInvocation doc getFields ForStatement EnhancedForControl VariableDeclaration ReferenceType Fieldable VariableDeclarator field MemberReference fields BlockStatement StatementExpression MethodInvocation MethodInvocation field name MethodInvocation field isIndexed MethodInvocation field isTermVectorStored MethodInvocation field isStorePositionWithTermVector MethodInvocation field isStoreOffsetWithTermVector MethodInvocation field getOmitNorms Literal false MethodInvocation field getOmitTermFreqAndPositions add End MethodDeclaration /** Returns true if any fields do not omitTermFreqAndPositions */ BasicType boolean hasProx LocalVariableDeclaration Modifier final BasicType int VariableDeclarator numFields MethodInvocation byNumber size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numFields MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType FieldInfo VariableDeclarator fi MethodInvocation MemberReference i fieldInfo IfStatement BinaryOperation && MemberReference fi isIndexed MemberReference ! fi omitTermFreqAndPositions BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
   * Add fields that are indexed. Whether they have termvectors has to be specified.
   * 
   * @param names The names of the fields
   * @param storeTermVectors Whether the fields store term vectors or not
   * @param storePositionWithTermVector true if positions should be stored.
   * @param storeOffsetWithTermVector true if offsets should be stored
   */ Modifier public synchronized addIndexed FormalParameter ReferenceType Collection TypeArgument ReferenceType String names FormalParameter BasicType boolean storeTermVectors FormalParameter BasicType boolean storePositionWithTermVector FormalParameter BasicType boolean storeOffsetWithTermVector ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator name MemberReference names BlockStatement StatementExpression MethodInvocation MemberReference name Literal true MemberReference storeTermVectors MemberReference storePositionWithTermVector MemberReference storeOffsetWithTermVector add End MethodDeclaration /**
   * Assumes the fields are not storing term vectors.
   * 
   * @param names The names of the fields
   * @param isIndexed Whether the fields are indexed or not
   * 
   * @see #add(String, boolean)
   */ Modifier public synchronized add FormalParameter ReferenceType Collection TypeArgument ReferenceType String names FormalParameter BasicType boolean isIndexed ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator name MemberReference names BlockStatement StatementExpression MethodInvocation MemberReference name MemberReference isIndexed add End MethodDeclaration /**
   * Calls 5 parameter add with false for all TermVector parameters.
   * 
   * @param name The name of the Fieldable
   * @param isIndexed true if the field is indexed
   * @see #add(String, boolean, boolean, boolean, boolean)
   */ Modifier public synchronized add FormalParameter ReferenceType String name FormalParameter BasicType boolean isIndexed StatementExpression MethodInvocation MemberReference name MemberReference isIndexed Literal false Literal false Literal false Literal false add MethodDeclaration /**
   * Calls 5 parameter add with false for term vector positions and offsets.
   * 
   * @param name The name of the field
   * @param isIndexed  true if the field is indexed
   * @param storeTermVector true if the term vector should be stored
   */ Modifier public synchronized add FormalParameter ReferenceType String name FormalParameter BasicType boolean isIndexed FormalParameter BasicType boolean storeTermVector StatementExpression MethodInvocation MemberReference name MemberReference isIndexed MemberReference storeTermVector Literal false Literal false Literal false add MethodDeclaration /** If the field is not yet known, adds it. If it is known, checks to make
   *  sure that the isIndexed flag is the same as was given previously for this
   *  field. If not - marks it as being indexed.  Same goes for the TermVector
   * parameters.
   * 
   * @param name The name of the field
   * @param isIndexed true if the field is indexed
   * @param storeTermVector true if the term vector should be stored
   * @param storePositionWithTermVector true if the term vector with positions should be stored
   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored
   */ Modifier public synchronized add FormalParameter ReferenceType String name FormalParameter BasicType boolean isIndexed FormalParameter BasicType boolean storeTermVector FormalParameter BasicType boolean storePositionWithTermVector FormalParameter BasicType boolean storeOffsetWithTermVector StatementExpression MethodInvocation MemberReference name MemberReference isIndexed MemberReference storeTermVector MemberReference storePositionWithTermVector MemberReference storeOffsetWithTermVector Literal false add MethodDeclaration /** If the field is not yet known, adds it. If it is known, checks to make
   *  sure that the isIndexed flag is the same as was given previously for this
   *  field. If not - marks it as being indexed.  Same goes for the TermVector
   * parameters.
   *
   * @param name The name of the field
   * @param isIndexed true if the field is indexed
   * @param storeTermVector true if the term vector should be stored
   * @param storePositionWithTermVector true if the term vector with positions should be stored
   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored
   * @param omitNorms true if the norms for the indexed field should be omitted
   */ Modifier public synchronized add FormalParameter ReferenceType String name FormalParameter BasicType boolean isIndexed FormalParameter BasicType boolean storeTermVector FormalParameter BasicType boolean storePositionWithTermVector FormalParameter BasicType boolean storeOffsetWithTermVector FormalParameter BasicType boolean omitNorms StatementExpression MethodInvocation MemberReference name MemberReference isIndexed MemberReference storeTermVector MemberReference storePositionWithTermVector MemberReference storeOffsetWithTermVector MemberReference omitNorms Literal false Literal false add MethodDeclaration /** If the field is not yet known, adds it. If it is known, checks to make
   *  sure that the isIndexed flag is the same as was given previously for this
   *  field. If not - marks it as being indexed.  Same goes for the TermVector
   * parameters.
   *
   * @param name The name of the field
   * @param isIndexed true if the field is indexed
   * @param storeTermVector true if the term vector should be stored
   * @param storePositionWithTermVector true if the term vector with positions should be stored
   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored
   * @param omitNorms true if the norms for the indexed field should be omitted
   * @param storePayloads true if payloads should be stored for this field
   * @param omitTermFreqAndPositions true if term freqs should be omitted for this field
   */ Modifier public synchronized ReferenceType FieldInfo add FormalParameter ReferenceType String name FormalParameter BasicType boolean isIndexed FormalParameter BasicType boolean storeTermVector FormalParameter BasicType boolean storePositionWithTermVector FormalParameter BasicType boolean storeOffsetWithTermVector FormalParameter BasicType boolean omitNorms FormalParameter BasicType boolean storePayloads FormalParameter BasicType boolean omitTermFreqAndPositions LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation MemberReference name fieldInfo IfStatement BinaryOperation == MemberReference fi Literal null BlockStatement ReturnStatement MethodInvocation MemberReference name MemberReference isIndexed MemberReference storeTermVector MemberReference storePositionWithTermVector MemberReference storeOffsetWithTermVector MemberReference omitNorms MemberReference storePayloads MemberReference omitTermFreqAndPositions addInternal BlockStatement StatementExpression MethodInvocation fi MemberReference isIndexed MemberReference storeTermVector MemberReference storePositionWithTermVector MemberReference storeOffsetWithTermVector MemberReference omitNorms MemberReference storePayloads MemberReference omitTermFreqAndPositions update End ReturnStatement MemberReference fi MethodDeclaration Modifier private ReferenceType FieldInfo addInternal FormalParameter ReferenceType String name FormalParameter BasicType boolean isIndexed FormalParameter BasicType boolean storeTermVector FormalParameter BasicType boolean storePositionWithTermVector FormalParameter BasicType boolean storeOffsetWithTermVector FormalParameter BasicType boolean omitNorms FormalParameter BasicType boolean storePayloads FormalParameter BasicType boolean omitTermFreqAndPositions StatementExpression Assignment MemberReference name MethodInvocation StringHelper MemberReference name intern = LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi ClassCreator ReferenceType FieldInfo MemberReference name MemberReference isIndexed MethodInvocation byNumber size MemberReference storeTermVector MemberReference storePositionWithTermVector MemberReference storeOffsetWithTermVector MemberReference omitNorms MemberReference storePayloads MemberReference omitTermFreqAndPositions StatementExpression MethodInvocation byNumber MemberReference fi add StatementExpression MethodInvocation byName MemberReference name MemberReference fi put ReturnStatement MemberReference fi MethodDeclaration Modifier public BasicType int fieldNumber FormalParameter ReferenceType String fieldName LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation MemberReference fieldName fieldInfo ReturnStatement TernaryExpression BinaryOperation != MemberReference fi Literal null MemberReference fi number Literal - 1 MethodDeclaration Modifier public ReferenceType FieldInfo fieldInfo FormalParameter ReferenceType String fieldName ReturnStatement MethodInvocation byName MemberReference fieldName get MethodDeclaration /**
   * Return the fieldName identified by its number.
   * 
   * @param fieldNumber
   * @return the fieldName or an empty string when the field
   * with the given number doesn't exist.
   */ Modifier public ReferenceType String fieldName FormalParameter BasicType int fieldNumber LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation MemberReference fieldNumber fieldInfo ReturnStatement TernaryExpression BinaryOperation != MemberReference fi Literal null MemberReference fi name Literal """" MethodDeclaration /**
   * Return the fieldinfo object referenced by the fieldNumber.
   * @param fieldNumber
   * @return the FieldInfo object or null when the given fieldNumber
   * doesn't exist.
   */ Modifier public ReferenceType FieldInfo fieldInfo FormalParameter BasicType int fieldNumber ReturnStatement TernaryExpression BinaryOperation >= MemberReference fieldNumber Literal 0 MethodInvocation byNumber MemberReference fieldNumber get Literal null MethodDeclaration Modifier public BasicType int size ReturnStatement MethodInvocation byNumber size MethodDeclaration Modifier public BasicType boolean hasVectors LocalVariableDeclaration BasicType boolean VariableDeclarator hasVectors Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation size MemberReference ++ i BlockStatement IfStatement MethodInvocation MemberReference storeTermVector MemberReference i fieldInfo BlockStatement StatementExpression Assignment MemberReference hasVectors Literal true = BreakStatement End End ReturnStatement MemberReference hasVectors MethodDeclaration Modifier public write FormalParameter ReferenceType Directory d FormalParameter ReferenceType String name IOException LocalVariableDeclaration ReferenceType IndexOutput VariableDeclarator output MethodInvocation d MemberReference name createOutput TryStatement StatementExpression MethodInvocation MemberReference output write StatementExpression MethodInvocation output close MethodDeclaration Modifier public write FormalParameter ReferenceType IndexOutput output IOException StatementExpression MethodInvocation output MemberReference CURRENT_FORMAT writeVInt StatementExpression MethodInvocation output MethodInvocation size writeVInt ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FieldInfo VariableDeclarator fi MethodInvocation MemberReference i fieldInfo LocalVariableDeclaration BasicType byte VariableDeclarator bits Literal 0x0 IfStatement MemberReference fi isIndexed StatementExpression Assignment MemberReference bits MemberReference IS_INDEXED |= End IfStatement MemberReference fi storeTermVector StatementExpression Assignment MemberReference bits MemberReference STORE_TERMVECTOR |= End IfStatement MemberReference fi storePositionWithTermVector StatementExpression Assignment MemberReference bits MemberReference STORE_POSITIONS_WITH_TERMVECTOR |= End IfStatement MemberReference fi storeOffsetWithTermVector StatementExpression Assignment MemberReference bits MemberReference STORE_OFFSET_WITH_TERMVECTOR |= End IfStatement MemberReference fi omitNorms StatementExpression Assignment MemberReference bits MemberReference OMIT_NORMS |= End IfStatement MemberReference fi storePayloads StatementExpression Assignment MemberReference bits MemberReference STORE_PAYLOADS |= End IfStatement MemberReference fi omitTermFreqAndPositions StatementExpression Assignment MemberReference bits MemberReference OMIT_TERM_FREQ_AND_POSITIONS |= End StatementExpression MethodInvocation output MemberReference fi name writeString StatementExpression MethodInvocation output MemberReference bits writeByte End MethodDeclaration Modifier private read FormalParameter ReferenceType IndexInput input FormalParameter ReferenceType String fileName IOException LocalVariableDeclaration BasicType int VariableDeclarator firstInt MethodInvocation input readVInt IfStatement BinaryOperation < MemberReference firstInt Literal 0 BlockStatement StatementExpression Assignment MemberReference format MemberReference firstInt = BlockStatement StatementExpression Assignment MemberReference format MemberReference FORMAT_PRE = End IfStatement BinaryOperation & BinaryOperation != MemberReference format MemberReference FORMAT_PRE BinaryOperation != MemberReference format MemberReference FORMAT_START BlockStatement ThrowStatement ClassCreator ReferenceType CorruptIndexException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""unrecognized format "" MemberReference format Literal "" in file \"""" MemberReference fileName Literal ""\"""" End LocalVariableDeclaration BasicType int VariableDeclarator size IfStatement BinaryOperation == MemberReference format MemberReference FORMAT_PRE BlockStatement StatementExpression Assignment MemberReference size MemberReference firstInt = BlockStatement StatementExpression Assignment MemberReference size MethodInvocation input readVInt = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation StringHelper MethodInvocation input readString intern LocalVariableDeclaration BasicType byte VariableDeclarator bits MethodInvocation input readByte LocalVariableDeclaration BasicType boolean VariableDeclarator isIndexed BinaryOperation != BinaryOperation & MemberReference bits MemberReference IS_INDEXED Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator storeTermVector BinaryOperation != BinaryOperation & MemberReference bits MemberReference STORE_TERMVECTOR Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator storePositionsWithTermVector BinaryOperation != BinaryOperation & MemberReference bits MemberReference STORE_POSITIONS_WITH_TERMVECTOR Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator storeOffsetWithTermVector BinaryOperation != BinaryOperation & MemberReference bits MemberReference STORE_OFFSET_WITH_TERMVECTOR Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator omitNorms BinaryOperation != BinaryOperation & MemberReference bits MemberReference OMIT_NORMS Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator storePayloads BinaryOperation != BinaryOperation & MemberReference bits MemberReference STORE_PAYLOADS Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator omitTermFreqAndPositions BinaryOperation != BinaryOperation & MemberReference bits MemberReference OMIT_TERM_FREQ_AND_POSITIONS Literal 0 StatementExpression MethodInvocation MemberReference name MemberReference isIndexed MemberReference storeTermVector MemberReference storePositionsWithTermVector MemberReference storeOffsetWithTermVector MemberReference omitNorms MemberReference storePayloads MemberReference omitTermFreqAndPositions addInternal End IfStatement BinaryOperation != MethodInvocation input getFilePointer MethodInvocation input length BlockStatement ThrowStatement ClassCreator ReferenceType CorruptIndexException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""did not read all bytes from file \"""" MemberReference fileName Literal ""\"": read "" MethodInvocation input getFilePointer Literal "" vs size "" MethodInvocation input length End",0
19,19,"CompilationUnit PackageDeclaration org.apache.lucene.util Import java.util.concurrent.Executors Import java.util.concurrent.ThreadFactory Import java.util.concurrent.atomic.AtomicInteger ClassDeclaration Modifier public /**
 * A default {@link ThreadFactory} implementation that accepts the name prefix
 * of the created threads as a constructor argument. Otherwise, this factory
 * yields the same semantics as the thread factory returned by
 * {@link Executors#defaultThreadFactory()}.
 */ NamedThreadFactory FieldDeclaration Modifier private final static ReferenceType AtomicInteger VariableDeclarator threadPoolNumber ClassCreator ReferenceType AtomicInteger Literal 1 FieldDeclaration Modifier private final ReferenceType ThreadGroup VariableDeclarator group FieldDeclaration Modifier private final ReferenceType AtomicInteger VariableDeclarator threadNumber ClassCreator ReferenceType AtomicInteger Literal 1 FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NAME_PATTERN Literal ""%s-%d-thread"" FieldDeclaration Modifier private final ReferenceType String VariableDeclarator threadNamePrefix ConstructorDeclaration Modifier public /**
   * Creates a new {@link NamedThreadFactory} instance
   * 
   * @param threadNamePrefix the name prefix assigned to each thread created.
   */ NamedThreadFactory FormalParameter ReferenceType String threadNamePrefix LocalVariableDeclaration Modifier final ReferenceType SecurityManager VariableDeclarator s MethodInvocation System getSecurityManager StatementExpression Assignment MemberReference group TernaryExpression BinaryOperation != MemberReference s Literal null MethodInvocation s getThreadGroup MethodInvocation Thread MethodInvocation getThreadGroup currentThread = StatementExpression Assignment This MemberReference threadNamePrefix MethodInvocation String MemberReference NAME_PATTERN MethodInvocation MemberReference threadNamePrefix checkPrefix MethodInvocation threadPoolNumber getAndIncrement format = MethodDeclaration Modifier private static ReferenceType String checkPrefix FormalParameter ReferenceType String prefix ReturnStatement TernaryExpression BinaryOperation || BinaryOperation == MemberReference prefix Literal null BinaryOperation == MethodInvocation prefix length Literal 0 Literal ""Lucene"" MemberReference prefix MethodDeclaration /**
   * Creates a new {@link Thread}
   * 
   * @see java.util.concurrent.ThreadFactory#newThread(java.lang.Runnable)
   */ Modifier public ReferenceType Thread newThread FormalParameter ReferenceType Runnable r LocalVariableDeclaration Modifier final ReferenceType Thread VariableDeclarator t ClassCreator ReferenceType Thread MemberReference group MemberReference r MethodInvocation String Literal ""%s-%d"" This MemberReference threadNamePrefix MethodInvocation threadNumber getAndIncrement format Literal 0 StatementExpression MethodInvocation t Literal false setDaemon StatementExpression MethodInvocation t MemberReference Thread NORM_PRIORITY setPriority ReturnStatement MemberReference t ReferenceType ThreadFactory",0
244,244,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import org.apache.lucene.store.IndexInput Import org.apache.lucene.util.UnicodeUtil ClassDeclaration Modifier final TermBuffer FieldDeclaration Modifier private ReferenceType String VariableDeclarator field FieldDeclaration Modifier private ReferenceType Term VariableDeclarator term FieldDeclaration Modifier private BasicType boolean VariableDeclarator preUTF8Strings FieldDeclaration Modifier private BasicType boolean VariableDeclarator dirty FieldDeclaration Modifier private ReferenceType UnicodeUtil ReferenceType UTF16Result VariableDeclarator text ClassCreator ReferenceType UnicodeUtil ReferenceType UTF16Result FieldDeclaration Modifier private ReferenceType UnicodeUtil ReferenceType UTF8Result VariableDeclarator bytes ClassCreator ReferenceType UnicodeUtil ReferenceType UTF8Result MethodDeclaration Modifier public final BasicType int compareTo FormalParameter ReferenceType TermBuffer other IfStatement BinaryOperation == MemberReference field MemberReference other field ReturnStatement MethodInvocation MemberReference text result MemberReference text length MemberReference other.text result MemberReference other.text length compareChars ReturnStatement MethodInvocation field MemberReference other field compareTo End MethodDeclaration Modifier private final static BasicType int compareChars FormalParameter BasicType char chars1 FormalParameter BasicType int len1 FormalParameter BasicType char chars2 FormalParameter BasicType int len2 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator end TernaryExpression BinaryOperation < MemberReference len1 MemberReference len2 MemberReference len1 MemberReference len2 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator k Literal 0 BinaryOperation < MemberReference k MemberReference end MemberReference ++ k BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c1 MemberReference ArraySelector MemberReference k chars1 LocalVariableDeclaration BasicType char VariableDeclarator c2 MemberReference ArraySelector MemberReference k chars2 IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation - MemberReference c1 MemberReference c2 End End ReturnStatement BinaryOperation - MemberReference len1 MemberReference len2 MethodDeclaration /** Call this if the IndexInput passed to {@link #read}
   *  stores terms in the ""modified UTF8"" (pre LUCENE-510)
   *  format. */ setPreUTF8Strings StatementExpression Assignment MemberReference preUTF8Strings Literal true = MethodDeclaration Modifier public final read FormalParameter ReferenceType IndexInput input FormalParameter ReferenceType FieldInfos fieldInfos IOException StatementExpression Assignment This MemberReference term Literal null = LocalVariableDeclaration BasicType int VariableDeclarator start MethodInvocation input readVInt LocalVariableDeclaration BasicType int VariableDeclarator length MethodInvocation input readVInt LocalVariableDeclaration BasicType int VariableDeclarator totalLength BinaryOperation + MemberReference start MemberReference length IfStatement MemberReference preUTF8Strings BlockStatement StatementExpression MethodInvocation text MemberReference totalLength setLength StatementExpression MethodInvocation input MemberReference text result MemberReference start MemberReference length readChars BlockStatement IfStatement MemberReference dirty BlockStatement StatementExpression MethodInvocation UnicodeUtil MemberReference text result Literal 0 MemberReference text length MemberReference bytes UTF16toUTF8 StatementExpression MethodInvocation bytes MemberReference totalLength setLength StatementExpression MethodInvocation input MemberReference bytes result MemberReference start MemberReference length readBytes StatementExpression MethodInvocation UnicodeUtil MemberReference bytes result Literal 0 MemberReference totalLength MemberReference text UTF8toUTF16 StatementExpression Assignment MemberReference dirty Literal false = BlockStatement StatementExpression MethodInvocation bytes MemberReference totalLength setLength StatementExpression MethodInvocation input MemberReference bytes result MemberReference start MemberReference length readBytes StatementExpression MethodInvocation UnicodeUtil MemberReference bytes result MemberReference start MemberReference length MemberReference text UTF8toUTF16 End End StatementExpression Assignment This MemberReference field MethodInvocation fieldInfos MethodInvocation input readVInt fieldName = MethodDeclaration Modifier public final set FormalParameter ReferenceType Term term IfStatement BinaryOperation == MemberReference term Literal null BlockStatement StatementExpression MethodInvocation reset ReturnStatement End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator termText MethodInvocation term text LocalVariableDeclaration Modifier final BasicType int VariableDeclarator termLen MethodInvocation termText length StatementExpression MethodInvocation text MemberReference termLen setLength StatementExpression MethodInvocation termText Literal 0 MemberReference termLen MemberReference text result Literal 0 getChars StatementExpression Assignment MemberReference dirty Literal true = StatementExpression Assignment MemberReference field MethodInvocation term field = StatementExpression Assignment This MemberReference term MemberReference term = MethodDeclaration Modifier public final set FormalParameter ReferenceType TermBuffer other StatementExpression MethodInvocation text MemberReference other text copyText StatementExpression Assignment MemberReference dirty Literal true = StatementExpression Assignment MemberReference field MemberReference other field = StatementExpression Assignment MemberReference term MemberReference other term = MethodDeclaration Modifier public reset StatementExpression Assignment MemberReference field Literal null = StatementExpression MethodInvocation text Literal 0 setLength StatementExpression Assignment MemberReference term Literal null = StatementExpression Assignment MemberReference dirty Literal true = MethodDeclaration Modifier public ReferenceType Term toTerm IfStatement BinaryOperation == MemberReference field Literal null ReturnStatement Literal null End IfStatement BinaryOperation == MemberReference term Literal null StatementExpression Assignment MemberReference term ClassCreator ReferenceType Term MemberReference field ClassCreator ReferenceType String MemberReference text result Literal 0 MemberReference text length Literal false = End ReturnStatement MemberReference term MethodDeclaration Modifier protected Annotation Override ReferenceType Object clone LocalVariableDeclaration ReferenceType TermBuffer VariableDeclarator clone Literal null TryStatement StatementExpression Assignment MemberReference clone Cast ReferenceType TermBuffer SuperMethodInvocation clone = CatchClause CatchClauseParameter CloneNotSupportedException e StatementExpression Assignment MemberReference clone dirty Literal true = StatementExpression Assignment MemberReference clone bytes ClassCreator ReferenceType UnicodeUtil ReferenceType UTF8Result = StatementExpression Assignment MemberReference clone text ClassCreator ReferenceType UnicodeUtil ReferenceType UTF16Result = StatementExpression MethodInvocation clone.text MemberReference text copyText ReturnStatement MemberReference clone ReferenceType Cloneable",0
614,614,,1
106,106,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.io.IOException Import org.apache.lucene.document.Fieldable Import org.apache.lucene.analysis.tokenattributes.PayloadAttribute ClassDeclaration Modifier final FreqProxTermsWriterPerField FieldDeclaration Modifier final ReferenceType FreqProxTermsWriterPerThread VariableDeclarator perThread FieldDeclaration Modifier final ReferenceType TermsHashPerField VariableDeclarator termsHashPerField FieldDeclaration Modifier final ReferenceType FieldInfo VariableDeclarator fieldInfo FieldDeclaration Modifier final ReferenceType DocumentsWriter ReferenceType DocState VariableDeclarator docState FieldDeclaration Modifier final ReferenceType FieldInvertState VariableDeclarator fieldState FieldDeclaration BasicType boolean VariableDeclarator omitTermFreqAndPositions FieldDeclaration ReferenceType PayloadAttribute VariableDeclarator payloadAttribute ConstructorDeclaration Modifier public FreqProxTermsWriterPerField FormalParameter ReferenceType TermsHashPerField termsHashPerField FormalParameter ReferenceType FreqProxTermsWriterPerThread perThread FormalParameter ReferenceType FieldInfo fieldInfo StatementExpression Assignment This MemberReference termsHashPerField MemberReference termsHashPerField = StatementExpression Assignment This MemberReference perThread MemberReference perThread = StatementExpression Assignment This MemberReference fieldInfo MemberReference fieldInfo = StatementExpression Assignment MemberReference docState MemberReference termsHashPerField docState = StatementExpression Assignment MemberReference fieldState MemberReference termsHashPerField fieldState = StatementExpression Assignment MemberReference omitTermFreqAndPositions MemberReference fieldInfo omitTermFreqAndPositions = MethodDeclaration Annotation Override BasicType int getStreamCount IfStatement MemberReference fieldInfo omitTermFreqAndPositions ReturnStatement Literal 1 ReturnStatement Literal 2 End MethodDeclaration Annotation Override finish FieldDeclaration BasicType boolean VariableDeclarator hasPayloads MethodDeclaration Annotation Override skippingLongTerm IOException MethodDeclaration Modifier public BasicType int compareTo FormalParameter ReferenceType FreqProxTermsWriterPerField other ReturnStatement MethodInvocation fieldInfo.name MemberReference other.fieldInfo name compareTo MethodDeclaration reset StatementExpression Assignment MemberReference omitTermFreqAndPositions MemberReference fieldInfo omitTermFreqAndPositions = StatementExpression Assignment MemberReference payloadAttribute Literal null = MethodDeclaration Annotation Override BasicType boolean start FormalParameter ReferenceType Fieldable fields FormalParameter BasicType int count ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i IfStatement MemberReference ArraySelector MemberReference i MethodInvocation isIndexed fields ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration Annotation Override start FormalParameter ReferenceType Fieldable f IfStatement MethodInvocation fieldState.attributeSource ClassReference ReferenceType PayloadAttribute hasAttribute BlockStatement StatementExpression Assignment MemberReference payloadAttribute MethodInvocation fieldState.attributeSource ClassReference ReferenceType PayloadAttribute getAttribute = BlockStatement StatementExpression Assignment MemberReference payloadAttribute Literal null = End MethodDeclaration Modifier final writeProx FormalParameter ReferenceType FreqProxTermsWriter ReferenceType PostingList p FormalParameter BasicType int proxCode LocalVariableDeclaration Modifier final ReferenceType Payload VariableDeclarator payload IfStatement BinaryOperation == MemberReference payloadAttribute Literal null BlockStatement StatementExpression Assignment MemberReference payload Literal null = BlockStatement StatementExpression Assignment MemberReference payload MethodInvocation payloadAttribute getPayload = End IfStatement BinaryOperation && BinaryOperation != MemberReference payload Literal null BinaryOperation > MemberReference payload length Literal 0 BlockStatement StatementExpression MethodInvocation termsHashPerField Literal 1 BinaryOperation | BinaryOperation << MemberReference proxCode Literal 1 Literal 1 writeVInt StatementExpression MethodInvocation termsHashPerField Literal 1 MemberReference payload length writeVInt StatementExpression MethodInvocation termsHashPerField Literal 1 MemberReference payload data MemberReference payload offset MemberReference payload length writeBytes StatementExpression Assignment MemberReference hasPayloads Literal true = StatementExpression MethodInvocation termsHashPerField Literal 1 BinaryOperation << MemberReference proxCode Literal 1 writeVInt End StatementExpression Assignment MemberReference p lastPosition MemberReference fieldState position = MethodDeclaration Modifier final Annotation Override newTerm FormalParameter ReferenceType RawPostingList p0 AssertStatement MethodInvocation docState Literal ""FreqProxTermsWriterPerField.newTerm start"" testPoint LocalVariableDeclaration ReferenceType FreqProxTermsWriter ReferenceType PostingList VariableDeclarator p Cast ReferenceType FreqProxTermsWriter ReferenceType PostingList MemberReference p0 StatementExpression Assignment MemberReference p lastDocID MemberReference docState docID = IfStatement MemberReference omitTermFreqAndPositions BlockStatement StatementExpression Assignment MemberReference p lastDocCode MemberReference docState docID = BlockStatement StatementExpression Assignment MemberReference p lastDocCode BinaryOperation << MemberReference docState docID Literal 1 = StatementExpression Assignment MemberReference p docFreq Literal 1 = StatementExpression MethodInvocation MemberReference p MemberReference fieldState position writeProx End MethodDeclaration Modifier final Annotation Override addTerm FormalParameter ReferenceType RawPostingList p0 AssertStatement MethodInvocation docState Literal ""FreqProxTermsWriterPerField.addTerm start"" testPoint LocalVariableDeclaration ReferenceType FreqProxTermsWriter ReferenceType PostingList VariableDeclarator p Cast ReferenceType FreqProxTermsWriter ReferenceType PostingList MemberReference p0 AssertStatement BinaryOperation || MemberReference omitTermFreqAndPositions BinaryOperation > MemberReference p docFreq Literal 0 IfStatement MemberReference omitTermFreqAndPositions BlockStatement IfStatement BinaryOperation != MemberReference docState docID MemberReference p lastDocID BlockStatement AssertStatement BinaryOperation > MemberReference docState docID MemberReference p lastDocID StatementExpression MethodInvocation termsHashPerField Literal 0 MemberReference p lastDocCode writeVInt StatementExpression Assignment MemberReference p lastDocCode BinaryOperation - MemberReference docState docID MemberReference p lastDocID = StatementExpression Assignment MemberReference p lastDocID MemberReference docState docID = End BlockStatement IfStatement BinaryOperation != MemberReference docState docID MemberReference p lastDocID BlockStatement AssertStatement BinaryOperation > MemberReference docState docID MemberReference p lastDocID IfStatement BinaryOperation == Literal 1 MemberReference p docFreq StatementExpression MethodInvocation termsHashPerField Literal 0 BinaryOperation | MemberReference p lastDocCode Literal 1 writeVInt BlockStatement StatementExpression MethodInvocation termsHashPerField Literal 0 MemberReference p lastDocCode writeVInt StatementExpression MethodInvocation termsHashPerField Literal 0 MemberReference p docFreq writeVInt End StatementExpression Assignment MemberReference p docFreq Literal 1 = StatementExpression Assignment MemberReference p lastDocCode BinaryOperation << BinaryOperation - MemberReference docState docID MemberReference p lastDocID Literal 1 = StatementExpression Assignment MemberReference p lastDocID MemberReference docState docID = StatementExpression MethodInvocation MemberReference p MemberReference fieldState position writeProx BlockStatement StatementExpression MemberReference ++ p docFreq StatementExpression MethodInvocation MemberReference p BinaryOperation - MemberReference fieldState position MemberReference p lastPosition writeProx End End MethodDeclaration Modifier public abort ReferenceType TermsHashConsumerPerField ReferenceType Comparable TypeArgument ReferenceType FreqProxTermsWriterPerField",0
565,565,"CompilationUnit PackageDeclaration org.apache.lucene.analysis.br Import java.io.File Import java.io.IOException Import java.io.Reader Import java.util.Arrays Import java.util.HashSet Import java.util.Map Import java.util.Set Import java.util.Collections Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.analysis.CharArraySet Import org.apache.lucene.analysis.LowerCaseFilter Import org.apache.lucene.analysis.StopFilter Import org.apache.lucene.analysis.TokenStream Import org.apache.lucene.analysis.Tokenizer Import org.apache.lucene.analysis.WordlistLoader Import org.apache.lucene.analysis.standard.StandardAnalyzer Import org.apache.lucene.analysis.standard.StandardFilter Import org.apache.lucene.analysis.standard.StandardTokenizer Import org.apache.lucene.util.Version ClassDeclaration Modifier public final /**
 * {@link Analyzer} for Brazilian Portuguese language. 
 * <p>
 * Supports an external list of stopwords (words that
 * will not be indexed at all) and an external list of exclusions (words that will
 * not be stemmed, but indexed).
 * </p>
 *
 * <p><b>NOTE</b>: This class uses the same {@link Version}
 * dependent settings as {@link StandardAnalyzer}.</p>
 */ BrazilianAnalyzer FieldDeclaration /**
	 * List of typical Brazilian Portuguese stopwords.
	 * @deprecated use {@link #getDefaultStopSet()} instead
	 */ Modifier public final static ReferenceType String VariableDeclarator BRAZILIAN_STOP_WORDS ArrayInitializer Literal ""a"" Literal ""ainda"" Literal ""alem"" Literal ""ambas"" Literal ""ambos"" Literal ""antes"" Literal ""ao"" Literal ""aonde"" Literal ""aos"" Literal ""apos"" Literal ""aquele"" Literal ""aqueles"" Literal ""as"" Literal ""assim"" Literal ""com"" Literal ""como"" Literal ""contra"" Literal ""contudo"" Literal ""cuja"" Literal ""cujas"" Literal ""cujo"" Literal ""cujos"" Literal ""da"" Literal ""das"" Literal ""de"" Literal ""dela"" Literal ""dele"" Literal ""deles"" Literal ""demais"" Literal ""depois"" Literal ""desde"" Literal ""desta"" Literal ""deste"" Literal ""dispoe"" Literal ""dispoem"" Literal ""diversa"" Literal ""diversas"" Literal ""diversos"" Literal ""do"" Literal ""dos"" Literal ""durante"" Literal ""e"" Literal ""ela"" Literal ""elas"" Literal ""ele"" Literal ""eles"" Literal ""em"" Literal ""entao"" Literal ""entre"" Literal ""essa"" Literal ""essas"" Literal ""esse"" Literal ""esses"" Literal ""esta"" Literal ""estas"" Literal ""este"" Literal ""estes"" Literal ""ha"" Literal ""isso"" Literal ""isto"" Literal ""logo"" Literal ""mais"" Literal ""mas"" Literal ""mediante"" Literal ""menos"" Literal ""mesma"" Literal ""mesmas"" Literal ""mesmo"" Literal ""mesmos"" Literal ""na"" Literal ""nas"" Literal ""nao"" Literal ""nas"" Literal ""nem"" Literal ""nesse"" Literal ""neste"" Literal ""nos"" Literal ""o"" Literal ""os"" Literal ""ou"" Literal ""outra"" Literal ""outras"" Literal ""outro"" Literal ""outros"" Literal ""pelas"" Literal ""pelas"" Literal ""pelo"" Literal ""pelos"" Literal ""perante"" Literal ""pois"" Literal ""por"" Literal ""porque"" Literal ""portanto"" Literal ""proprio"" Literal ""propios"" Literal ""quais"" Literal ""qual"" Literal ""qualquer"" Literal ""quando"" Literal ""quanto"" Literal ""que"" Literal ""quem"" Literal ""quer"" Literal ""se"" Literal ""seja"" Literal ""sem"" Literal ""sendo"" Literal ""seu"" Literal ""seus"" Literal ""sob"" Literal ""sobre"" Literal ""sua"" Literal ""suas"" Literal ""tal"" Literal ""tambem"" Literal ""teu"" Literal ""teus"" Literal ""toda"" Literal ""todas"" Literal ""todo"" Literal ""todos"" Literal ""tua"" Literal ""tuas"" Literal ""tudo"" Literal ""um"" Literal ""uma"" Literal ""umas"" Literal ""uns"" MethodDeclaration /**
   * Returns an unmodifiable instance of the default stop-words set.
   * @return an unmodifiable instance of the default stop-words set.
   */ Modifier public static ReferenceType Set TypeArgument ? getDefaultStopSet ReturnStatement MemberReference DefaultSetHolder DEFAULT_STOP_SET ClassDeclaration Modifier private static DefaultSetHolder FieldDeclaration Modifier final static ReferenceType Set TypeArgument ? VariableDeclarator DEFAULT_STOP_SET MethodInvocation CharArraySet ClassCreator ReferenceType CharArraySet MethodInvocation Arrays MemberReference BRAZILIAN_STOP_WORDS asList Literal false unmodifiableSet FieldDeclaration /**
	 * Contains the stopwords used with the {@link StopFilter}.
	 */ Modifier private final ReferenceType Set TypeArgument ? VariableDeclarator stoptable FieldDeclaration /**
	 * Contains words that should be indexed but not stemmed.
	 */ Modifier private ReferenceType Set TypeArgument ? VariableDeclarator excltable MethodInvocation Collections emptySet FieldDeclaration Modifier private final ReferenceType Version VariableDeclarator matchVersion ConstructorDeclaration Modifier public /**
	 * Builds an analyzer with the default stop words ({@link #BRAZILIAN_STOP_WORDS}).
	 */ BrazilianAnalyzer FormalParameter ReferenceType Version matchVersion StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MemberReference DefaultSetHolder DEFAULT_STOP_SET ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words
   * 
   * @param matchVersion
   *          lucene compatibility version
   * @param stopwords
   *          a stopword set
   */ BrazilianAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Set TypeArgument ? stopwords StatementExpression Assignment MemberReference stoptable MethodInvocation CharArraySet MethodInvocation CharArraySet MemberReference stopwords copy unmodifiableSet = StatementExpression Assignment This MemberReference matchVersion MemberReference matchVersion = ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words and stemming exclusion words
   * 
   * @param matchVersion
   *          lucene compatibility version
   * @param stopwords
   *          a stopword set
   */ BrazilianAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Set TypeArgument ? stopwords FormalParameter ReferenceType Set TypeArgument ? stemExclusionSet StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MemberReference stopwords StatementExpression Assignment MemberReference excltable MethodInvocation CharArraySet MethodInvocation CharArraySet MemberReference stemExclusionSet copy unmodifiableSet = ConstructorDeclaration Modifier public /**
	 * Builds an analyzer with the given stop words.
	 * @deprecated use {@link #BrazilianAnalyzer(Version, Set)} instead
	 */ BrazilianAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType String stopwords  StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MethodInvocation StopFilter MemberReference stopwords makeStopSet ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words. 
   * @deprecated use {@link #BrazilianAnalyzer(Version, Set)} instead
   */ BrazilianAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType Map TypeArgument ? TypeArgument ? stopwords StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MethodInvocation stopwords keySet ConstructorDeclaration Modifier public /**
   * Builds an analyzer with the given stop words.
   * @deprecated use {@link #BrazilianAnalyzer(Version, Set)} instead
   */ BrazilianAnalyzer FormalParameter ReferenceType Version matchVersion FormalParameter ReferenceType File stopwords IOException StatementExpression ExplicitConstructorInvocation MemberReference matchVersion MethodInvocation WordlistLoader MemberReference stopwords getWordSet MethodDeclaration /**
	 * Builds an exclusionlist from an array of Strings.
	 * @deprecated use {@link #BrazilianAnalyzer(Version, Set, Set)} instead
	 */ Modifier public setStemExclusionTable FormalParameter ReferenceType String exclusionlist  StatementExpression Assignment MemberReference excltable MethodInvocation StopFilter MemberReference exclusionlist makeStopSet = StatementExpression MethodInvocation Literal null setPreviousTokenStream MethodDeclaration /**
	 * Builds an exclusionlist from a {@link Map}.
	 * @deprecated use {@link #BrazilianAnalyzer(Version, Set, Set)} instead
	 */ Modifier public setStemExclusionTable FormalParameter ReferenceType Map TypeArgument ? TypeArgument ? exclusionlist StatementExpression Assignment MemberReference excltable ClassCreator ReferenceType HashSet TypeArgument ReferenceType Object MethodInvocation exclusionlist keySet = StatementExpression MethodInvocation Literal null setPreviousTokenStream MethodDeclaration /**
	 * Builds an exclusionlist from the words contained in the given file.
	 * @deprecated use {@link #BrazilianAnalyzer(Version, Set, Set)} instead
	 */ Modifier public setStemExclusionTable FormalParameter ReferenceType File exclusionlist IOException StatementExpression Assignment MemberReference excltable MethodInvocation WordlistLoader MemberReference exclusionlist getWordSet = StatementExpression MethodInvocation Literal null setPreviousTokenStream MethodDeclaration /**
	 * Creates a {@link TokenStream} which tokenizes all the text in the provided {@link Reader}.
	 *
	 * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
	 * 			{@link LowerCaseFilter}, {@link StandardFilter}, {@link StopFilter}, and 
	 *          {@link BrazilianStemFilter}.
	 */ Modifier public final Annotation Override ReferenceType TokenStream tokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader LocalVariableDeclaration ReferenceType TokenStream VariableDeclarator result ClassCreator ReferenceType StandardTokenizer MemberReference matchVersion MemberReference reader StatementExpression Assignment MemberReference result ClassCreator ReferenceType LowerCaseFilter MemberReference result = StatementExpression Assignment MemberReference result ClassCreator ReferenceType StandardFilter MemberReference result = StatementExpression Assignment MemberReference result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference result MemberReference stoptable = StatementExpression Assignment MemberReference result ClassCreator ReferenceType BrazilianStemFilter MemberReference result MemberReference excltable = ReturnStatement MemberReference result ClassDeclaration Modifier private SavedStreams FieldDeclaration ReferenceType Tokenizer VariableDeclarator source FieldDeclaration ReferenceType TokenStream VariableDeclarator result MethodDeclaration /**
     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text 
     * in the provided {@link Reader}.
     *
     * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
     *          {@link LowerCaseFilter}, {@link StandardFilter}, {@link StopFilter}, and 
     *          {@link BrazilianStemFilter}.
     */ Modifier public Annotation Override ReferenceType TokenStream reusableTokenStream FormalParameter ReferenceType String fieldName FormalParameter ReferenceType Reader reader IOException LocalVariableDeclaration ReferenceType SavedStreams VariableDeclarator streams Cast ReferenceType SavedStreams MethodInvocation getPreviousTokenStream IfStatement BinaryOperation == MemberReference streams Literal null BlockStatement StatementExpression Assignment MemberReference streams ClassCreator ReferenceType SavedStreams = StatementExpression Assignment MemberReference streams source ClassCreator ReferenceType StandardTokenizer MemberReference matchVersion MemberReference reader = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType LowerCaseFilter MemberReference streams source = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType StandardFilter MemberReference streams result = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType StopFilter MethodInvocation StopFilter MemberReference matchVersion getEnablePositionIncrementsVersionDefault MemberReference streams result MemberReference stoptable = StatementExpression Assignment MemberReference streams result ClassCreator ReferenceType BrazilianStemFilter MemberReference streams result MemberReference excltable = StatementExpression MethodInvocation MemberReference streams setPreviousTokenStream BlockStatement StatementExpression MethodInvocation streams.source MemberReference reader reset End ReturnStatement MemberReference streams result ReferenceType Analyzer",0
35,35,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.parser Import java.io.StringReader Import java.util.Vector Import org.apache.lucene.messages.Message Import org.apache.lucene.messages.MessageImpl Import org.apache.lucene.queryParser.core.QueryNodeParseException Import org.apache.lucene.queryParser.core.messages.QueryParserMessages Import org.apache.lucene.queryParser.core.nodes.AndQueryNode Import org.apache.lucene.queryParser.core.nodes.BooleanQueryNode Import org.apache.lucene.queryParser.core.nodes.BoostQueryNode Import org.apache.lucene.queryParser.core.nodes.FieldQueryNode Import org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode Import org.apache.lucene.queryParser.core.nodes.GroupQueryNode Import org.apache.lucene.queryParser.core.nodes.ModifierQueryNode Import org.apache.lucene.queryParser.core.nodes.OrQueryNode Import org.apache.lucene.queryParser.core.nodes.ParametricQueryNode Import org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode Import org.apache.lucene.queryParser.core.nodes.SlopQueryNode Import org.apache.lucene.queryParser.core.parser.SyntaxParser ClassDeclaration Modifier public Annotation SuppressWarnings Literal ""all"" StandardSyntaxParser FieldDeclaration Modifier private final static BasicType int VariableDeclarator CONJ_NONE Literal 0 FieldDeclaration Modifier private final static BasicType int VariableDeclarator CONJ_AND Literal 2 FieldDeclaration Modifier private final static BasicType int VariableDeclarator CONJ_OR Literal 2 ConstructorDeclaration Modifier public StandardSyntaxParser StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType StringReader Literal """" MethodDeclaration /** Parses a query string, returning a {@link org.apache.lucene.queryParser.core.nodes.QueryNode}.
     *  @param query  the query string to be parsed.
     *  @throws ParseException if the parsing fails
     */ Modifier public ReferenceType QueryNode parse FormalParameter ReferenceType CharSequence query FormalParameter ReferenceType CharSequence field QueryNodeParseException StatementExpression MethodInvocation ClassCreator ReferenceType StringReader MethodInvocation query toString ReInit TryStatement LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator querynode MethodInvocation MemberReference field TopLevelQuery ReturnStatement MemberReference querynode CatchClause CatchClauseParameter ParseException tme StatementExpression MethodInvocation tme MemberReference query setQuery ThrowStatement MemberReference tme CatchClause CatchClauseParameter Error tme LocalVariableDeclaration ReferenceType Message VariableDeclarator message ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages INVALID_SYNTAX_CANNOT_PARSE MemberReference query MethodInvocation tme getMessage LocalVariableDeclaration ReferenceType QueryNodeParseException VariableDeclarator e ClassCreator ReferenceType QueryNodeParseException MemberReference tme StatementExpression MethodInvocation e MemberReference query setQuery StatementExpression MethodInvocation e MemberReference message setNonLocalizedMessage ThrowStatement MemberReference e MethodDeclaration Modifier final public BasicType int Conjunction ParseException LocalVariableDeclaration BasicType int VariableDeclarator ret MemberReference CONJ_NONE SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase AND OR SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase AND StatementExpression MethodInvocation MemberReference AND jj_consume_token StatementExpression Assignment MemberReference ret MemberReference CONJ_AND = BreakStatement SwitchStatementCase OR StatementExpression MethodInvocation MemberReference OR jj_consume_token StatementExpression Assignment MemberReference ret MemberReference CONJ_OR = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 0 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 1 jj_la1 MemberReference jj_gen = Statement End BlockStatement IfStatement Literal true ReturnStatement MemberReference ret End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType ModifierQueryNode ReferenceType Modifier Modifiers ParseException LocalVariableDeclaration ReferenceType ModifierQueryNode ReferenceType Modifier VariableDeclarator ret MemberReference ModifierQueryNode.Modifier MOD_NONE SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase NOT PLUS MINUS SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase PLUS StatementExpression MethodInvocation MemberReference PLUS jj_consume_token StatementExpression Assignment MemberReference ret MemberReference ModifierQueryNode.Modifier MOD_REQ = BreakStatement SwitchStatementCase MINUS StatementExpression MethodInvocation MemberReference MINUS jj_consume_token StatementExpression Assignment MemberReference ret MemberReference ModifierQueryNode.Modifier MOD_NOT = BreakStatement SwitchStatementCase NOT StatementExpression MethodInvocation MemberReference NOT jj_consume_token StatementExpression Assignment MemberReference ret MemberReference ModifierQueryNode.Modifier MOD_NOT = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 2 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 3 jj_la1 MemberReference jj_gen = Statement End BlockStatement IfStatement Literal true ReturnStatement MemberReference ret End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType QueryNode TopLevelQuery FormalParameter ReferenceType CharSequence field ParseException LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator q StatementExpression Assignment MemberReference q MethodInvocation MemberReference field Query = StatementExpression MethodInvocation Literal 0 jj_consume_token BlockStatement IfStatement Literal true ReturnStatement MemberReference q End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType QueryNode Query FormalParameter ReferenceType CharSequence field ParseException LocalVariableDeclaration ReferenceType Vector VariableDeclarator clauses Literal null LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator c VariableDeclarator first Literal null StatementExpression Assignment MemberReference first MethodInvocation MemberReference field DisjQuery = WhileStatement label_1 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase NOT PLUS MINUS LPAREN QUOTED TERM RANGEIN_START RANGEEX_START NUMBER Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 4 jj_la1 MemberReference jj_gen = BreakStatement label_1 End StatementExpression Assignment MemberReference c MethodInvocation MemberReference field DisjQuery = IfStatement BinaryOperation == MemberReference clauses Literal null BlockStatement StatementExpression Assignment MemberReference clauses ClassCreator ReferenceType Vector = StatementExpression MethodInvocation clauses MemberReference first addElement End StatementExpression MethodInvocation clauses MemberReference c addElement End IfStatement BinaryOperation != MemberReference clauses Literal null BlockStatement BlockStatement IfStatement Literal true ReturnStatement ClassCreator ReferenceType BooleanQueryNode MemberReference clauses End BlockStatement BlockStatement IfStatement Literal true ReturnStatement MemberReference first End End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType QueryNode DisjQuery FormalParameter ReferenceType CharSequence field ParseException LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator first VariableDeclarator c LocalVariableDeclaration ReferenceType Vector VariableDeclarator clauses Literal null StatementExpression Assignment MemberReference first MethodInvocation MemberReference field ConjQuery = WhileStatement label_2 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase OR Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 5 jj_la1 MemberReference jj_gen = BreakStatement label_2 End StatementExpression MethodInvocation MemberReference OR jj_consume_token StatementExpression Assignment MemberReference c MethodInvocation MemberReference field ConjQuery = IfStatement BinaryOperation == MemberReference clauses Literal null BlockStatement StatementExpression Assignment MemberReference clauses ClassCreator ReferenceType Vector = StatementExpression MethodInvocation clauses MemberReference first addElement End StatementExpression MethodInvocation clauses MemberReference c addElement End IfStatement BinaryOperation != MemberReference clauses Literal null BlockStatement BlockStatement IfStatement Literal true ReturnStatement ClassCreator ReferenceType OrQueryNode MemberReference clauses End BlockStatement BlockStatement IfStatement Literal true ReturnStatement MemberReference first End End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType QueryNode ConjQuery FormalParameter ReferenceType CharSequence field ParseException LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator first VariableDeclarator c LocalVariableDeclaration ReferenceType Vector VariableDeclarator clauses Literal null StatementExpression Assignment MemberReference first MethodInvocation MemberReference field ModClause = WhileStatement label_3 Literal true BlockStatement SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase AND Statement BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 6 jj_la1 MemberReference jj_gen = BreakStatement label_3 End StatementExpression MethodInvocation MemberReference AND jj_consume_token StatementExpression Assignment MemberReference c MethodInvocation MemberReference field ModClause = IfStatement BinaryOperation == MemberReference clauses Literal null BlockStatement StatementExpression Assignment MemberReference clauses ClassCreator ReferenceType Vector = StatementExpression MethodInvocation clauses MemberReference first addElement End StatementExpression MethodInvocation clauses MemberReference c addElement End IfStatement BinaryOperation != MemberReference clauses Literal null BlockStatement BlockStatement IfStatement Literal true ReturnStatement ClassCreator ReferenceType AndQueryNode MemberReference clauses End BlockStatement BlockStatement IfStatement Literal true ReturnStatement MemberReference first End End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType QueryNode ModClause FormalParameter ReferenceType CharSequence field ParseException LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator q LocalVariableDeclaration ReferenceType ModifierQueryNode ReferenceType Modifier VariableDeclarator mods StatementExpression Assignment MemberReference mods MethodInvocation Modifiers = StatementExpression Assignment MemberReference q MethodInvocation MemberReference field Clause = IfStatement BinaryOperation != MemberReference mods MemberReference ModifierQueryNode.Modifier MOD_NONE BlockStatement StatementExpression Assignment MemberReference q ClassCreator ReferenceType ModifierQueryNode MemberReference q MemberReference mods = End BlockStatement IfStatement Literal true ReturnStatement MemberReference q End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType QueryNode Clause FormalParameter ReferenceType CharSequence field ParseException LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator q LocalVariableDeclaration ReferenceType Token VariableDeclarator fieldToken Literal null VariableDeclarator boost Literal null LocalVariableDeclaration BasicType boolean VariableDeclarator group Literal false IfStatement MethodInvocation Literal 2 jj_2_1 BlockStatement StatementExpression Assignment MemberReference fieldToken MethodInvocation MemberReference TERM jj_consume_token = StatementExpression MethodInvocation MemberReference COLON jj_consume_token StatementExpression Assignment MemberReference field MethodInvocation EscapeQuerySyntaxImpl MemberReference fieldToken image discardEscapeChar = BlockStatement Statement End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase QUOTED TERM RANGEIN_START RANGEEX_START NUMBER StatementExpression Assignment MemberReference q MethodInvocation MemberReference field Term = BreakStatement SwitchStatementCase LPAREN StatementExpression MethodInvocation MemberReference LPAREN jj_consume_token StatementExpression Assignment MemberReference q MethodInvocation MemberReference field Query = StatementExpression MethodInvocation MemberReference RPAREN jj_consume_token SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase CARAT StatementExpression MethodInvocation MemberReference CARAT jj_consume_token StatementExpression Assignment MemberReference boost MethodInvocation MemberReference NUMBER jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 7 jj_la1 MemberReference jj_gen = Statement End StatementExpression Assignment MemberReference group Literal true = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 8 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End IfStatement BinaryOperation != MemberReference boost Literal null BlockStatement LocalVariableDeclaration BasicType float VariableDeclarator f Cast BasicType float Literal 1.0 TryStatement StatementExpression Assignment MemberReference f MethodInvocation Float MethodInvocation floatValue MemberReference boost image valueOf = IfStatement BinaryOperation != MemberReference q Literal null BlockStatement StatementExpression Assignment MemberReference q ClassCreator ReferenceType BoostQueryNode MemberReference q MemberReference f = End CatchClause CatchClauseParameter Exception ignored End IfStatement MemberReference group BlockStatement StatementExpression Assignment MemberReference q ClassCreator ReferenceType GroupQueryNode MemberReference q = End BlockStatement IfStatement Literal true ReturnStatement MemberReference q End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier final public ReferenceType QueryNode Term FormalParameter ReferenceType CharSequence field ParseException LocalVariableDeclaration ReferenceType Token VariableDeclarator term VariableDeclarator boost Literal null VariableDeclarator fuzzySlop Literal null VariableDeclarator goop1 VariableDeclarator goop2 LocalVariableDeclaration BasicType boolean VariableDeclarator fuzzy Literal false LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator q Literal null LocalVariableDeclaration ReferenceType ParametricQueryNode VariableDeclarator qLower VariableDeclarator qUpper LocalVariableDeclaration BasicType float VariableDeclarator defaultMinSimilarity Literal 0.5f SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase TERM NUMBER SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase TERM StatementExpression Assignment MemberReference term MethodInvocation MemberReference TERM jj_consume_token = StatementExpression Assignment MemberReference q ClassCreator ReferenceType FieldQueryNode MemberReference field MethodInvocation EscapeQuerySyntaxImpl MemberReference term image discardEscapeChar MemberReference term beginColumn MemberReference term endColumn = BreakStatement SwitchStatementCase NUMBER StatementExpression Assignment MemberReference term MethodInvocation MemberReference NUMBER jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 9 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase FUZZY_SLOP StatementExpression Assignment MemberReference fuzzySlop MethodInvocation MemberReference FUZZY_SLOP jj_consume_token = StatementExpression Assignment MemberReference fuzzy Literal true = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 10 jj_la1 MemberReference jj_gen = Statement End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase CARAT StatementExpression MethodInvocation MemberReference CARAT jj_consume_token StatementExpression Assignment MemberReference boost MethodInvocation MemberReference NUMBER jj_consume_token = SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase FUZZY_SLOP StatementExpression Assignment MemberReference fuzzySlop MethodInvocation MemberReference FUZZY_SLOP jj_consume_token = StatementExpression Assignment MemberReference fuzzy Literal true = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 11 jj_la1 MemberReference jj_gen = Statement End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 12 jj_la1 MemberReference jj_gen = Statement End IfStatement MemberReference fuzzy BlockStatement LocalVariableDeclaration BasicType float VariableDeclarator fms MemberReference defaultMinSimilarity TryStatement StatementExpression Assignment MemberReference fms MethodInvocation Float MethodInvocation floatValue MethodInvocation fuzzySlop.image Literal 1 substring valueOf = CatchClause CatchClauseParameter Exception ignored IfStatement BinaryOperation || BinaryOperation < MemberReference fms Literal 0.0f BinaryOperation > MemberReference fms Literal 1.0f BlockStatement BlockStatement IfStatement Literal true ThrowStatement ClassCreator ReferenceType ParseException ClassCreator ReferenceType MessageImpl MemberReference QueryParserMessages INVALID_SYNTAX_FUZZY_LIMITS End End StatementExpression Assignment MemberReference q ClassCreator ReferenceType FuzzyQueryNode MemberReference field MethodInvocation EscapeQuerySyntaxImpl MemberReference term image discardEscapeChar MemberReference fms MemberReference term beginColumn MemberReference term endColumn = End BreakStatement SwitchStatementCase RANGEIN_START StatementExpression MethodInvocation MemberReference RANGEIN_START jj_consume_token SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase RANGEIN_GOOP StatementExpression Assignment MemberReference goop1 MethodInvocation MemberReference RANGEIN_GOOP jj_consume_token = BreakStatement SwitchStatementCase RANGEIN_QUOTED StatementExpression Assignment MemberReference goop1 MethodInvocation MemberReference RANGEIN_QUOTED jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 13 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase RANGEIN_TO StatementExpression MethodInvocation MemberReference RANGEIN_TO jj_consume_token BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 14 jj_la1 MemberReference jj_gen = Statement End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase RANGEIN_GOOP StatementExpression Assignment MemberReference goop2 MethodInvocation MemberReference RANGEIN_GOOP jj_consume_token = BreakStatement SwitchStatementCase RANGEIN_QUOTED StatementExpression Assignment MemberReference goop2 MethodInvocation MemberReference RANGEIN_QUOTED jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 15 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End StatementExpression MethodInvocation MemberReference RANGEIN_END jj_consume_token SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase CARAT StatementExpression MethodInvocation MemberReference CARAT jj_consume_token StatementExpression Assignment MemberReference boost MethodInvocation MemberReference NUMBER jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 16 jj_la1 MemberReference jj_gen = Statement End IfStatement BinaryOperation == MemberReference goop1 kind MemberReference RANGEIN_QUOTED BlockStatement StatementExpression Assignment MemberReference goop1 image MethodInvocation goop1.image Literal 1 BinaryOperation - MethodInvocation goop1.image length Literal 1 substring = End IfStatement BinaryOperation == MemberReference goop2 kind MemberReference RANGEIN_QUOTED BlockStatement StatementExpression Assignment MemberReference goop2 image MethodInvocation goop2.image Literal 1 BinaryOperation - MethodInvocation goop2.image length Literal 1 substring = End StatementExpression Assignment MemberReference qLower ClassCreator ReferenceType ParametricQueryNode MemberReference field MemberReference ParametricQueryNode.CompareOperator GE MethodInvocation EscapeQuerySyntaxImpl MemberReference goop1 image discardEscapeChar MemberReference goop1 beginColumn MemberReference goop1 endColumn = StatementExpression Assignment MemberReference qUpper ClassCreator ReferenceType ParametricQueryNode MemberReference field MemberReference ParametricQueryNode.CompareOperator LE MethodInvocation EscapeQuerySyntaxImpl MemberReference goop2 image discardEscapeChar MemberReference goop2 beginColumn MemberReference goop2 endColumn = StatementExpression Assignment MemberReference q ClassCreator ReferenceType ParametricRangeQueryNode MemberReference qLower MemberReference qUpper = BreakStatement SwitchStatementCase RANGEEX_START StatementExpression MethodInvocation MemberReference RANGEEX_START jj_consume_token SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase RANGEEX_GOOP StatementExpression Assignment MemberReference goop1 MethodInvocation MemberReference RANGEEX_GOOP jj_consume_token = BreakStatement SwitchStatementCase RANGEEX_QUOTED StatementExpression Assignment MemberReference goop1 MethodInvocation MemberReference RANGEEX_QUOTED jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 17 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase RANGEEX_TO StatementExpression MethodInvocation MemberReference RANGEEX_TO jj_consume_token BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 18 jj_la1 MemberReference jj_gen = Statement End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase RANGEEX_GOOP StatementExpression Assignment MemberReference goop2 MethodInvocation MemberReference RANGEEX_GOOP jj_consume_token = BreakStatement SwitchStatementCase RANGEEX_QUOTED StatementExpression Assignment MemberReference goop2 MethodInvocation MemberReference RANGEEX_QUOTED jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 19 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End StatementExpression MethodInvocation MemberReference RANGEEX_END jj_consume_token SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase CARAT StatementExpression MethodInvocation MemberReference CARAT jj_consume_token StatementExpression Assignment MemberReference boost MethodInvocation MemberReference NUMBER jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 20 jj_la1 MemberReference jj_gen = Statement End IfStatement BinaryOperation == MemberReference goop1 kind MemberReference RANGEEX_QUOTED BlockStatement StatementExpression Assignment MemberReference goop1 image MethodInvocation goop1.image Literal 1 BinaryOperation - MethodInvocation goop1.image length Literal 1 substring = End IfStatement BinaryOperation == MemberReference goop2 kind MemberReference RANGEEX_QUOTED BlockStatement StatementExpression Assignment MemberReference goop2 image MethodInvocation goop2.image Literal 1 BinaryOperation - MethodInvocation goop2.image length Literal 1 substring = End StatementExpression Assignment MemberReference qLower ClassCreator ReferenceType ParametricQueryNode MemberReference field MemberReference ParametricQueryNode.CompareOperator GT MethodInvocation EscapeQuerySyntaxImpl MemberReference goop1 image discardEscapeChar MemberReference goop1 beginColumn MemberReference goop1 endColumn = StatementExpression Assignment MemberReference qUpper ClassCreator ReferenceType ParametricQueryNode MemberReference field MemberReference ParametricQueryNode.CompareOperator LT MethodInvocation EscapeQuerySyntaxImpl MemberReference goop2 image discardEscapeChar MemberReference goop2 beginColumn MemberReference goop2 endColumn = StatementExpression Assignment MemberReference q ClassCreator ReferenceType ParametricRangeQueryNode MemberReference qLower MemberReference qUpper = BreakStatement SwitchStatementCase QUOTED StatementExpression Assignment MemberReference term MethodInvocation MemberReference QUOTED jj_consume_token = StatementExpression Assignment MemberReference q ClassCreator ReferenceType QuotedFieldQueryNode MemberReference field MethodInvocation EscapeQuerySyntaxImpl MethodInvocation term.image Literal 1 BinaryOperation - MethodInvocation term.image length Literal 1 substring discardEscapeChar BinaryOperation + MemberReference term beginColumn Literal 1 BinaryOperation - MemberReference term endColumn Literal 1 = SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase FUZZY_SLOP StatementExpression Assignment MemberReference fuzzySlop MethodInvocation MemberReference FUZZY_SLOP jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 21 jj_la1 MemberReference jj_gen = Statement End SwitchStatement TernaryExpression BinaryOperation == MemberReference jj_ntk Literal - 1 MethodInvocation jj_ntk MemberReference jj_ntk SwitchStatementCase CARAT StatementExpression MethodInvocation MemberReference CARAT jj_consume_token StatementExpression Assignment MemberReference boost MethodInvocation MemberReference NUMBER jj_consume_token = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 22 jj_la1 MemberReference jj_gen = Statement End LocalVariableDeclaration BasicType int VariableDeclarator phraseSlop Literal 0 IfStatement BinaryOperation != MemberReference fuzzySlop Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference phraseSlop MethodInvocation Float MethodInvocation intValue MethodInvocation fuzzySlop.image Literal 1 substring valueOf = StatementExpression Assignment MemberReference q ClassCreator ReferenceType SlopQueryNode MemberReference q MemberReference phraseSlop = CatchClause CatchClauseParameter Exception ignored End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector Literal 23 jj_la1 MemberReference jj_gen = StatementExpression MethodInvocation Literal - 1 jj_consume_token ThrowStatement ClassCreator ReferenceType ParseException End IfStatement BinaryOperation != MemberReference boost Literal null BlockStatement LocalVariableDeclaration BasicType float VariableDeclarator f Cast BasicType float Literal 1.0 TryStatement StatementExpression Assignment MemberReference f MethodInvocation Float MethodInvocation floatValue MemberReference boost image valueOf = IfStatement BinaryOperation != MemberReference q Literal null BlockStatement StatementExpression Assignment MemberReference q ClassCreator ReferenceType BoostQueryNode MemberReference q MemberReference f = End CatchClause CatchClauseParameter Exception ignored End BlockStatement IfStatement Literal true ReturnStatement MemberReference q End ThrowStatement ClassCreator ReferenceType Error Literal ""Missing return statement in function"" MethodDeclaration Modifier private BasicType boolean jj_2_1 FormalParameter BasicType int xla StatementExpression Assignment MemberReference jj_la MemberReference xla = StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos MemberReference token = = TryStatement ReturnStatement MethodInvocation ! jj_3_1 CatchClause CatchClauseParameter LookaheadSuccess ls ReturnStatement Literal true StatementExpression MethodInvocation Literal 0 MemberReference xla jj_save MethodDeclaration Modifier private BasicType boolean jj_3_1 IfStatement MethodInvocation MemberReference TERM jj_scan_token ReturnStatement Literal true End IfStatement MethodInvocation MemberReference COLON jj_scan_token ReturnStatement Literal true End ReturnStatement Literal false FieldDeclaration /** Generated Token Manager. */ Modifier public ReferenceType StandardSyntaxParserTokenManager VariableDeclarator token_source FieldDeclaration ReferenceType JavaCharStream VariableDeclarator jj_input_stream FieldDeclaration /** Current token. */ Modifier public ReferenceType Token VariableDeclarator token FieldDeclaration /** Next token. */ Modifier public ReferenceType Token VariableDeclarator jj_nt FieldDeclaration Modifier private BasicType int VariableDeclarator jj_ntk FieldDeclaration Modifier private ReferenceType Token VariableDeclarator jj_scanpos VariableDeclarator jj_lastpos FieldDeclaration Modifier private BasicType int VariableDeclarator jj_la FieldDeclaration Modifier private BasicType int VariableDeclarator jj_gen FieldDeclaration Modifier private final BasicType int VariableDeclarator jj_la1 ArrayCreator BasicType int Literal 24 FieldDeclaration Modifier private static BasicType int VariableDeclarator jj_la1_0 StatementExpression MethodInvocation jj_la1_init_0 MethodDeclaration Modifier private static jj_la1_init_0 StatementExpression Assignment MemberReference jj_la1_0 ArrayCreator BasicType int ArrayInitializer Literal 0x300 Literal 0x300 Literal 0x1c00 Literal 0x1c00 Literal 0x763c00 Literal 0x200 Literal 0x100 Literal 0x10000 Literal 0x762000 Literal 0x440000 Literal 0x80000 Literal 0x80000 Literal 0x10000 Literal 0x6000000 Literal 0x800000 Literal 0x6000000 Literal 0x10000 Literal 0x60000000 Literal 0x8000000 Literal 0x60000000 Literal 0x10000 Literal 0x80000 Literal 0x10000 Literal 0x760000 = FieldDeclaration Modifier private final ReferenceType JJCalls VariableDeclarator jj_2_rtns ArrayCreator ReferenceType JJCalls Literal 1 FieldDeclaration Modifier private BasicType boolean VariableDeclarator jj_rescan Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator jj_gc Literal 0 ConstructorDeclaration Modifier public /** Constructor with InputStream. */ StandardSyntaxParser FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream stream StatementExpression ExplicitConstructorInvocation MemberReference stream Literal null ConstructorDeclaration Modifier public /** Constructor with InputStream and supplied encoding */ StandardSyntaxParser FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream stream FormalParameter ReferenceType String encoding TryStatement StatementExpression Assignment MemberReference jj_input_stream ClassCreator ReferenceType JavaCharStream MemberReference stream MemberReference encoding Literal 1 Literal 1 = CatchClause CatchClauseParameter java.io.UnsupportedEncodingException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e StatementExpression Assignment MemberReference token_source ClassCreator ReferenceType StandardSyntaxParserTokenManager MemberReference jj_input_stream = StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 24 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream stream StatementExpression MethodInvocation MemberReference stream Literal null ReInit MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType InputStream stream FormalParameter ReferenceType String encoding TryStatement StatementExpression MethodInvocation jj_input_stream MemberReference stream MemberReference encoding Literal 1 Literal 1 ReInit CatchClause CatchClauseParameter java.io.UnsupportedEncodingException e ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference e StatementExpression MethodInvocation token_source MemberReference jj_input_stream ReInit StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 24 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End ConstructorDeclaration Modifier public /** Constructor. */ StandardSyntaxParser FormalParameter ReferenceType java ReferenceType io ReferenceType Reader stream StatementExpression Assignment MemberReference jj_input_stream ClassCreator ReferenceType JavaCharStream MemberReference stream Literal 1 Literal 1 = StatementExpression Assignment MemberReference token_source ClassCreator ReferenceType StandardSyntaxParserTokenManager MemberReference jj_input_stream = StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 24 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType java ReferenceType io ReferenceType Reader stream StatementExpression MethodInvocation jj_input_stream MemberReference stream Literal 1 Literal 1 ReInit StatementExpression MethodInvocation token_source MemberReference jj_input_stream ReInit StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 24 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End ConstructorDeclaration Modifier public /** Constructor with generated Token Manager. */ StandardSyntaxParser FormalParameter ReferenceType StandardSyntaxParserTokenManager tm StatementExpression Assignment MemberReference token_source MemberReference tm = StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 24 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End MethodDeclaration /** Reinitialise. */ Modifier public ReInit FormalParameter ReferenceType StandardSyntaxParserTokenManager tm StatementExpression Assignment MemberReference token_source MemberReference tm = StatementExpression Assignment MemberReference token ClassCreator ReferenceType Token = StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression Assignment MemberReference jj_gen Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 24 MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_la1 Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_2_rtns ClassCreator ReferenceType JJCalls = End MethodDeclaration Modifier private ReferenceType Token jj_consume_token FormalParameter BasicType int kind ParseException LocalVariableDeclaration ReferenceType Token VariableDeclarator oldToken IfStatement BinaryOperation != Assignment MemberReference oldToken MemberReference token = Literal null StatementExpression Assignment MemberReference token MemberReference token next = StatementExpression Assignment MemberReference token Assignment MemberReference token next MethodInvocation token_source getNextToken = = End StatementExpression Assignment MemberReference jj_ntk Literal - 1 = IfStatement BinaryOperation == MemberReference token kind MemberReference kind BlockStatement StatementExpression MemberReference ++ jj_gen IfStatement BinaryOperation > MemberReference ++ jj_gc Literal 100 BlockStatement StatementExpression Assignment MemberReference jj_gc Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_2_rtns length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType JJCalls VariableDeclarator c MemberReference ArraySelector MemberReference i jj_2_rtns WhileStatement BinaryOperation != MemberReference c Literal null BlockStatement IfStatement BinaryOperation < MemberReference c gen MemberReference jj_gen StatementExpression Assignment MemberReference c first Literal null = End StatementExpression Assignment MemberReference c MemberReference c next = End End End ReturnStatement MemberReference token End StatementExpression Assignment MemberReference token MemberReference oldToken = StatementExpression Assignment MemberReference jj_kind MemberReference kind = ThrowStatement MethodInvocation generateParseException ClassDeclaration Modifier private final static LookaheadSuccess ReferenceType java ReferenceType lang ReferenceType Error FieldDeclaration Modifier private final ReferenceType LookaheadSuccess VariableDeclarator jj_ls ClassCreator ReferenceType LookaheadSuccess MethodDeclaration Modifier private BasicType boolean jj_scan_token FormalParameter BasicType int kind IfStatement BinaryOperation == MemberReference jj_scanpos MemberReference jj_lastpos BlockStatement StatementExpression MemberReference -- jj_la IfStatement BinaryOperation == MemberReference jj_scanpos next Literal null BlockStatement StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos Assignment MemberReference jj_scanpos next MethodInvocation token_source getNextToken = = = BlockStatement StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos MemberReference jj_scanpos next = = End BlockStatement StatementExpression Assignment MemberReference jj_scanpos MemberReference jj_scanpos next = End IfStatement MemberReference jj_rescan BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration ReferenceType Token VariableDeclarator tok MemberReference token WhileStatement BinaryOperation && BinaryOperation != MemberReference tok Literal null BinaryOperation != MemberReference tok MemberReference jj_scanpos BlockStatement StatementExpression MemberReference ++ i StatementExpression Assignment MemberReference tok MemberReference tok next = End IfStatement BinaryOperation != MemberReference tok Literal null StatementExpression MethodInvocation MemberReference kind MemberReference i jj_add_error_token End End IfStatement BinaryOperation != MemberReference jj_scanpos kind MemberReference kind ReturnStatement Literal true End IfStatement BinaryOperation && BinaryOperation == MemberReference jj_la Literal 0 BinaryOperation == MemberReference jj_scanpos MemberReference jj_lastpos ThrowStatement MemberReference jj_ls End ReturnStatement Literal false MethodDeclaration /** Get the next Token. */ Modifier final public ReferenceType Token getNextToken IfStatement BinaryOperation != MemberReference token next Literal null StatementExpression Assignment MemberReference token MemberReference token next = StatementExpression Assignment MemberReference token Assignment MemberReference token next MethodInvocation token_source getNextToken = = End StatementExpression Assignment MemberReference jj_ntk Literal - 1 = StatementExpression MemberReference ++ jj_gen ReturnStatement MemberReference token MethodDeclaration /** Get the specific Token. */ Modifier final public ReferenceType Token getToken FormalParameter BasicType int index LocalVariableDeclaration ReferenceType Token VariableDeclarator t MemberReference token ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference index MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference t next Literal null StatementExpression Assignment MemberReference t MemberReference t next = StatementExpression Assignment MemberReference t Assignment MemberReference t next MethodInvocation token_source getNextToken = = End End ReturnStatement MemberReference t MethodDeclaration Modifier private BasicType int jj_ntk IfStatement BinaryOperation == Assignment MemberReference jj_nt MemberReference token next = Literal null ReturnStatement Assignment MemberReference jj_ntk Assignment MemberReference token next MethodInvocation token_source getNextToken = = ReturnStatement Assignment MemberReference jj_ntk MemberReference jj_nt kind = End FieldDeclaration Modifier private ReferenceType java ReferenceType util ReferenceType List TypeArgument BasicType int VariableDeclarator jj_expentries ClassCreator ReferenceType java ReferenceType util ReferenceType ArrayList TypeArgument BasicType int FieldDeclaration Modifier private BasicType int VariableDeclarator jj_expentry FieldDeclaration Modifier private BasicType int VariableDeclarator jj_kind Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator jj_lasttokens ArrayCreator BasicType int Literal 100 FieldDeclaration Modifier private BasicType int VariableDeclarator jj_endpos MethodDeclaration Modifier private jj_add_error_token FormalParameter BasicType int kind FormalParameter BasicType int pos IfStatement BinaryOperation >= MemberReference pos Literal 100 ReturnStatement End IfStatement BinaryOperation == MemberReference pos BinaryOperation + MemberReference jj_endpos Literal 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ jj_endpos jj_lasttokens MemberReference kind = IfStatement BinaryOperation != MemberReference jj_endpos Literal 0 BlockStatement StatementExpression Assignment MemberReference jj_expentry ArrayCreator BasicType int MemberReference jj_endpos = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_endpos MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i jj_expentry MemberReference ArraySelector MemberReference i jj_lasttokens = End ForStatement jj_entries_loop ForControl VariableDeclaration ReferenceType java ReferenceType util ReferenceType Iterator VariableDeclarator it MethodInvocation jj_expentries iterator MethodInvocation it hasNext BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator oldentry Cast BasicType int MethodInvocation it next IfStatement BinaryOperation == MemberReference oldentry length MemberReference jj_expentry length BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jj_expentry length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i oldentry MemberReference ArraySelector MemberReference i jj_expentry BlockStatement ContinueStatement jj_entries_loop End End StatementExpression MethodInvocation jj_expentries MemberReference jj_expentry add BreakStatement jj_entries_loop End End IfStatement BinaryOperation != MemberReference pos Literal 0 StatementExpression Assignment MemberReference ArraySelector BinaryOperation - Assignment MemberReference jj_endpos MemberReference pos = Literal 1 jj_lasttokens MemberReference kind = End End End MethodDeclaration /** Generate ParseException. */ Modifier public ReferenceType ParseException generateParseException StatementExpression MethodInvocation jj_expentries clear LocalVariableDeclaration BasicType boolean VariableDeclarator la1tokens ArrayCreator BasicType boolean Literal 31 IfStatement BinaryOperation >= MemberReference jj_kind Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference jj_kind la1tokens Literal true = StatementExpression Assignment MemberReference jj_kind Literal - 1 = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 24 MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i jj_la1 MemberReference jj_gen BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j Literal 32 MemberReference ++ j BlockStatement IfStatement BinaryOperation != BinaryOperation & MemberReference ArraySelector MemberReference i jj_la1_0 BinaryOperation << Literal 1 MemberReference j Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j la1tokens Literal true = End End End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 31 MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i la1tokens BlockStatement StatementExpression Assignment MemberReference jj_expentry ArrayCreator BasicType int Literal 1 = StatementExpression Assignment MemberReference ArraySelector Literal 0 jj_expentry MemberReference i = StatementExpression MethodInvocation jj_expentries MemberReference jj_expentry add End End StatementExpression Assignment MemberReference jj_endpos Literal 0 = StatementExpression MethodInvocation jj_rescan_token StatementExpression MethodInvocation Literal 0 Literal 0 jj_add_error_token LocalVariableDeclaration BasicType int VariableDeclarator exptokseq ArrayCreator BasicType int MethodInvocation jj_expentries size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation jj_expentries size MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i exptokseq MethodInvocation jj_expentries MemberReference i get = End ReturnStatement ClassCreator ReferenceType ParseException MemberReference token MemberReference exptokseq MemberReference tokenImage MethodDeclaration /** Enable tracing. */ Modifier final public enable_tracing MethodDeclaration /** Disable tracing. */ Modifier final public disable_tracing MethodDeclaration Modifier private jj_rescan_token StatementExpression Assignment MemberReference jj_rescan Literal true = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 1 MemberReference ++ i BlockStatement TryStatement LocalVariableDeclaration ReferenceType JJCalls VariableDeclarator p MemberReference ArraySelector MemberReference i jj_2_rtns DoStatement BinaryOperation != MemberReference p Literal null BlockStatement IfStatement BinaryOperation > MemberReference p gen MemberReference jj_gen BlockStatement StatementExpression Assignment MemberReference jj_la MemberReference p arg = StatementExpression Assignment MemberReference jj_lastpos Assignment MemberReference jj_scanpos MemberReference p first = = SwitchStatement MemberReference i SwitchStatementCase Literal 0 StatementExpression MethodInvocation jj_3_1 BreakStatement End End StatementExpression Assignment MemberReference p MemberReference p next = End CatchClause CatchClauseParameter LookaheadSuccess ls End StatementExpression Assignment MemberReference jj_rescan Literal false = MethodDeclaration Modifier private jj_save FormalParameter BasicType int index FormalParameter BasicType int xla LocalVariableDeclaration ReferenceType JJCalls VariableDeclarator p MemberReference ArraySelector MemberReference index jj_2_rtns WhileStatement BinaryOperation > MemberReference p gen MemberReference jj_gen BlockStatement IfStatement BinaryOperation == MemberReference p next Literal null BlockStatement StatementExpression Assignment MemberReference p Assignment MemberReference p next ClassCreator ReferenceType JJCalls = = BreakStatement End StatementExpression Assignment MemberReference p MemberReference p next = End StatementExpression Assignment MemberReference p gen BinaryOperation - BinaryOperation + MemberReference jj_gen MemberReference xla MemberReference jj_la = StatementExpression Assignment MemberReference p first MemberReference token = StatementExpression Assignment MemberReference p arg MemberReference xla = ClassDeclaration Modifier final static JJCalls FieldDeclaration BasicType int VariableDeclarator gen FieldDeclaration ReferenceType Token VariableDeclarator first FieldDeclaration BasicType int VariableDeclarator arg FieldDeclaration ReferenceType JJCalls VariableDeclarator next ReferenceType SyntaxParser ReferenceType StandardSyntaxParserConstants",1
917,917,,0
211,211,CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util.Collection Import java.util.Map Import java.io.IOException ClassDeclaration Modifier abstract InvertedDocEndConsumer MethodDeclaration Modifier abstract ReferenceType InvertedDocEndConsumerPerThread addThread FormalParameter ReferenceType DocInverterPerThread docInverterPerThread MethodDeclaration Modifier abstract flush FormalParameter ReferenceType Map TypeArgument ReferenceType InvertedDocEndConsumerPerThread TypeArgument ReferenceType Collection TypeArgument ReferenceType InvertedDocEndConsumerPerField threadsAndFields FormalParameter ReferenceType SegmentWriteState state IOException MethodDeclaration Modifier abstract closeDocStore FormalParameter ReferenceType SegmentWriteState state IOException MethodDeclaration Modifier abstract abort MethodDeclaration Modifier abstract setFieldInfos FormalParameter ReferenceType FieldInfos fieldInfos,0
479,479,"CompilationUnit PackageDeclaration org.apache.lucene.index Import java.util.List Import java.io.IOException InterfaceDeclaration Modifier public /**
 * <p>Expert: policy for deletion of stale {@link IndexCommit index commits}. 
 * 
 * <p>Implement this interface, and pass it to one
 * of the {@link IndexWriter} or {@link IndexReader}
 * constructors, to customize when older
 * {@link IndexCommit point-in-time commits}
 * are deleted from the index directory.  The default deletion policy
 * is {@link KeepOnlyLastCommitDeletionPolicy}, which always
 * removes old commits as soon as a new commit is done (this
 * matches the behavior before 2.2).</p>
 *
 * <p>One expected use case for this (and the reason why it
 * was first created) is to work around problems with an
 * index directory accessed via filesystems like NFS because
 * NFS does not provide the ""delete on last close"" semantics
 * that Lucene's ""point in time"" search normally relies on.
 * By implementing a custom deletion policy, such as ""a
 * commit is only removed once it has been stale for more
 * than X minutes"", you can give your readers time to
 * refresh to the new commit before {@link IndexWriter}
 * removes the old commits.  Note that doing so will
 * increase the storage requirements of the index.  See <a
 * target=""top""
 * href=""http://issues.apache.org/jira/browse/LUCENE-710"">LUCENE-710</a>
 * for details.</p>
 */ IndexDeletionPolicy MethodDeclaration /**
   * <p>This is called once when a writer is first
   * instantiated to give the policy a chance to remove old
   * commit points.</p>
   * 
   * <p>The writer locates all index commits present in the 
   * index directory and calls this method.  The policy may 
   * choose to delete some of the commit points, doing so by
   * calling method {@link IndexCommit#delete delete()} 
   * of {@link IndexCommit}.</p>
   * 
   * <p><u>Note:</u> the last CommitPoint is the most recent one,
   * i.e. the ""front index state"". Be careful not to delete it,
   * unless you know for sure what you are doing, and unless 
   * you can afford to lose the index content while doing that. 
   *
   * @param commits List of current 
   * {@link IndexCommit point-in-time commits},
   *  sorted by age (the 0th one is the oldest commit).
   */ Modifier public onInit FormalParameter ReferenceType List TypeArgument ReferenceType IndexCommit extends commits IOException MethodDeclaration /**
   * <p>This is called each time the writer completed a commit.
   * This gives the policy a chance to remove old commit points
   * with each commit.</p>
   *
   * <p>The policy may now choose to delete old commit points 
   * by calling method {@link IndexCommit#delete delete()} 
   * of {@link IndexCommit}.</p>
   * 
   * <p>This method is only called when {@link
   * IndexWriter#commit} or {@link IndexWriter#close} is
   * called, or possibly not at all if the {@link
   * IndexWriter#rollback} is called.
   *
   * <p><u>Note:</u> the last CommitPoint is the most recent one,
   * i.e. the ""front index state"". Be careful not to delete it,
   * unless you know for sure what you are doing, and unless 
   * you can afford to lose the index content while doing that.
   *  
   * @param commits List of {@link IndexCommit},
   *  sorted by age (the 0th one is the oldest commit).
   */ Modifier public onCommit FormalParameter ReferenceType List TypeArgument ReferenceType IndexCommit extends commits IOException",0
671,671,,0
649,649,,0
445,445,"CompilationUnit PackageDeclaration org.apache.lucene.queryParser.standard.processors Import java.util.ArrayList Import java.util.List Import org.apache.lucene.queryParser.core.QueryNodeException Import org.apache.lucene.queryParser.core.config.QueryConfigHandler Import org.apache.lucene.queryParser.core.nodes.AndQueryNode Import org.apache.lucene.queryParser.core.nodes.BooleanQueryNode Import org.apache.lucene.queryParser.core.nodes.GroupQueryNode Import org.apache.lucene.queryParser.core.nodes.ModifierQueryNode Import org.apache.lucene.queryParser.core.nodes.OrQueryNode Import org.apache.lucene.queryParser.core.nodes.QueryNode Import org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.Modifier Import org.apache.lucene.queryParser.core.parser.SyntaxParser Import org.apache.lucene.queryParser.core.processors.QueryNodeProcessor Import org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute Import org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute.Operator Import org.apache.lucene.queryParser.standard.nodes.BooleanModifierNode ClassDeclaration Modifier public /**
 * The {@link SyntaxParser}
 * generates query node trees that consider the boolean operator precedence, but
 * Lucene current syntax does not support boolean precedence, so this processor
 * remove all the precedence and apply the equivalent modifier according to the
 * boolean operation defined on an specific query node. <br/>
 * <br/>
 * If there is a {@link GroupQueryNode} in the query node tree, the query node
 * tree is not merged with the one above it.
 * 
 * Example: TODO: describe a good example to show how this processor works
 * 
 * @see org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler
 */ GroupQueryNodeProcessor FieldDeclaration Modifier private ReferenceType ArrayList TypeArgument ReferenceType QueryNode VariableDeclarator queryNodeList FieldDeclaration Modifier private BasicType boolean VariableDeclarator latestNodeVerified FieldDeclaration Modifier private ReferenceType QueryConfigHandler VariableDeclarator queryConfig FieldDeclaration Modifier private ReferenceType Boolean VariableDeclarator usingAnd Literal false ConstructorDeclaration Modifier public GroupQueryNodeProcessor MethodDeclaration Modifier public ReferenceType QueryNode process FormalParameter ReferenceType QueryNode queryTree QueryNodeException IfStatement MethodInvocation ! MethodInvocation ClassReference ReferenceType DefaultOperatorAttribute hasAttribute getQueryConfigHandler BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""DefaultOperatorAttribute should be set on the QueryConfigHandler"" End StatementExpression Assignment This MemberReference usingAnd BinaryOperation == MemberReference Operator AND MethodInvocation MethodInvocation ClassReference ReferenceType DefaultOperatorAttribute getAttribute MethodInvocation getOperator getQueryConfigHandler = IfStatement BinaryOperation instanceof MemberReference queryTree ReferenceType GroupQueryNode BlockStatement StatementExpression Assignment MemberReference queryTree Cast ReferenceType GroupQueryNode MemberReference queryTree = End StatementExpression Assignment This MemberReference queryNodeList ClassCreator ReferenceType ArrayList TypeArgument ReferenceType QueryNode = StatementExpression Assignment This MemberReference latestNodeVerified Literal false = StatementExpression MethodInvocation MemberReference queryTree readTree LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator actualQueryNodeList This MemberReference queryNodeList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation actualQueryNodeList size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator node MethodInvocation actualQueryNodeList MemberReference i get IfStatement BinaryOperation instanceof MemberReference node ReferenceType GroupQueryNode BlockStatement StatementExpression MethodInvocation actualQueryNodeList MemberReference i MethodInvocation MemberReference node process set End End StatementExpression Assignment This MemberReference usingAnd Literal false = IfStatement BinaryOperation instanceof MemberReference queryTree ReferenceType BooleanQueryNode BlockStatement StatementExpression MethodInvocation queryTree MemberReference actualQueryNodeList set ReturnStatement MemberReference queryTree BlockStatement ReturnStatement ClassCreator ReferenceType BooleanQueryNode MemberReference actualQueryNodeList End MethodDeclaration /**
   */ Modifier private ReferenceType QueryNode applyModifier FormalParameter ReferenceType QueryNode node FormalParameter ReferenceType QueryNode parent IfStatement This MemberReference usingAnd BlockStatement IfStatement BinaryOperation instanceof MemberReference parent ReferenceType OrQueryNode BlockStatement IfStatement BinaryOperation instanceof MemberReference node ReferenceType ModifierQueryNode BlockStatement LocalVariableDeclaration ReferenceType ModifierQueryNode VariableDeclarator modNode Cast ReferenceType ModifierQueryNode MemberReference node IfStatement BinaryOperation == MethodInvocation modNode getModifier MemberReference Modifier MOD_REQ BlockStatement ReturnStatement MethodInvocation modNode getChild End End BlockStatement IfStatement BinaryOperation instanceof MemberReference node ReferenceType ModifierQueryNode BlockStatement LocalVariableDeclaration ReferenceType ModifierQueryNode VariableDeclarator modNode Cast ReferenceType ModifierQueryNode MemberReference node IfStatement BinaryOperation == MethodInvocation modNode getModifier MemberReference Modifier MOD_NONE BlockStatement ReturnStatement ClassCreator ReferenceType BooleanModifierNode MethodInvocation modNode getChild MemberReference Modifier MOD_REQ End BlockStatement ReturnStatement ClassCreator ReferenceType BooleanModifierNode MemberReference node MemberReference Modifier MOD_REQ End End BlockStatement IfStatement BinaryOperation instanceof MethodInvocation node getParent ReferenceType AndQueryNode BlockStatement IfStatement BinaryOperation instanceof MemberReference node ReferenceType ModifierQueryNode BlockStatement LocalVariableDeclaration ReferenceType ModifierQueryNode VariableDeclarator modNode Cast ReferenceType ModifierQueryNode MemberReference node IfStatement BinaryOperation == MethodInvocation modNode getModifier MemberReference Modifier MOD_NONE BlockStatement ReturnStatement ClassCreator ReferenceType BooleanModifierNode MethodInvocation modNode getChild MemberReference Modifier MOD_REQ End BlockStatement ReturnStatement ClassCreator ReferenceType BooleanModifierNode MemberReference node MemberReference Modifier MOD_REQ End End End ReturnStatement MemberReference node MethodDeclaration Modifier private readTree FormalParameter ReferenceType QueryNode node IfStatement BinaryOperation instanceof MemberReference node ReferenceType BooleanQueryNode BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType QueryNode VariableDeclarator children MethodInvocation node getChildren IfStatement BinaryOperation && BinaryOperation != MemberReference children Literal null BinaryOperation > MethodInvocation children size Literal 0 BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation - MethodInvocation children size Literal 1 MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation children MemberReference i get readTree End StatementExpression MethodInvocation MemberReference node processNode StatementExpression MethodInvocation MethodInvocation children BinaryOperation - MethodInvocation children size Literal 1 get readTree BlockStatement StatementExpression MethodInvocation MemberReference node processNode End BlockStatement StatementExpression MethodInvocation MemberReference node processNode End MethodDeclaration Modifier private processNode FormalParameter ReferenceType QueryNode node IfStatement BinaryOperation || BinaryOperation instanceof MemberReference node ReferenceType AndQueryNode BinaryOperation instanceof MemberReference node ReferenceType OrQueryNode BlockStatement IfStatement BinaryOperation && This ! MemberReference latestNodeVerified This ! MemberReference queryNodeList MethodInvocation isEmpty BlockStatement StatementExpression This MemberReference queryNodeList MethodInvocation MethodInvocation This MemberReference queryNodeList MethodInvocation BinaryOperation - This MemberReference queryNodeList MethodInvocation size Literal 1 remove MemberReference node applyModifier add StatementExpression Assignment This MemberReference latestNodeVerified Literal true = End IfStatement BinaryOperation instanceof MemberReference node ReferenceType BooleanQueryNode BlockStatement StatementExpression This MemberReference queryNodeList MethodInvocation MethodInvocation MemberReference node MethodInvocation node getParent applyModifier add StatementExpression Assignment This MemberReference latestNodeVerified Literal false = End End MethodDeclaration Modifier public ReferenceType QueryConfigHandler getQueryConfigHandler ReturnStatement This MemberReference queryConfig MethodDeclaration Modifier public setQueryConfigHandler FormalParameter ReferenceType QueryConfigHandler queryConfigHandler StatementExpression Assignment This MemberReference queryConfig MemberReference queryConfigHandler = ReferenceType QueryNodeProcessor",0
587,587,,0
615,615,,0
343,343,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.nio.channels.FileChannel Import java.nio.channels.FileLock Import java.io.File Import java.io.RandomAccessFile Import java.io.IOException Import java.util.HashSet Import java.util.Random ClassDeclaration Modifier public /**
 * <p>Implements {@link LockFactory} using native OS file
 * locks.  Note that because this LockFactory relies on
 * java.nio.* APIs for locking, any problems with those APIs
 * will cause locking to fail.  Specifically, on certain NFS
 * environments the java.nio.* locks will fail (the lock can
 * incorrectly be double acquired) whereas {@link
 * SimpleFSLockFactory} worked perfectly in those same
 * environments.  For NFS based access to an index, it's
 * recommended that you try {@link SimpleFSLockFactory}
 * first and work around the one limitation that a lock file
 * could be left when the JVM exits abnormally.</p>
 *
 * <p>The primary benefit of {@link NativeFSLockFactory} is
 * that lock files will be properly removed (by the OS) if
 * the JVM has an abnormal exit.</p>
 * 
 * <p>Note that, unlike {@link SimpleFSLockFactory}, the existence of
 * leftover lock files in the filesystem on exiting the JVM
 * is fine because the OS will free the locks held against
 * these files even though the files still remain.</p>
 *
 * <p>If you suspect that this or any other LockFactory is
 * not working properly in your environment, you can easily
 * test it by using {@link VerifyingLockFactory}, {@link
 * LockVerifyServer} and {@link LockStressTest}.</p>
 *
 * @see LockFactory
 */ NativeFSLockFactory FieldDeclaration Modifier private volatile BasicType boolean VariableDeclarator tested Literal false MethodDeclaration Modifier private synchronized acquireTestLock IfStatement MemberReference tested ReturnStatement End StatementExpression Assignment MemberReference tested Literal true = IfStatement MethodInvocation ! lockDir exists BlockStatement IfStatement MethodInvocation ! lockDir mkdirs ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + Literal ""Cannot create directory: "" MethodInvocation lockDir getAbsolutePath End IfStatement MethodInvocation ! lockDir isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + Literal ""Found regular file where directory expected: "" MethodInvocation lockDir getAbsolutePath End End LocalVariableDeclaration ReferenceType String VariableDeclarator randomLockName BinaryOperation + BinaryOperation + Literal ""lucene-"" MethodInvocation Long ClassCreator MethodInvocation nextInt ReferenceType Random MemberReference Character MAX_RADIX toString Literal ""-test.lock"" LocalVariableDeclaration ReferenceType Lock VariableDeclarator l MethodInvocation MemberReference randomLockName makeLock TryStatement StatementExpression MethodInvocation l obtain StatementExpression MethodInvocation l release CatchClause CatchClauseParameter IOException e LocalVariableDeclaration ReferenceType RuntimeException VariableDeclarator e2 ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + Literal ""Failed to acquire random test lock; please verify filesystem for lock directory '"" MemberReference lockDir Literal ""' supports locking"" StatementExpression MethodInvocation e2 MemberReference e initCause ThrowStatement MemberReference e2 ConstructorDeclaration Modifier public /**
   * Create a NativeFSLockFactory instance, with null (unset)
   * lock directory. When you pass this factory to a {@link FSDirectory}
   * subclass, the lock directory is automatically set to the
   * directory itsself. Be sure to create one instance for each directory
   * your create!
   */ NativeFSLockFactory IOException StatementExpression ExplicitConstructorInvocation Cast ReferenceType File Literal null ConstructorDeclaration Modifier public /**
   * Create a NativeFSLockFactory instance, storing lock
   * files into the specified lockDirName:
   *
   * @param lockDirName where lock files are created.
   */ NativeFSLockFactory FormalParameter ReferenceType String lockDirName IOException StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType File MemberReference lockDirName ConstructorDeclaration Modifier public /**
   * Create a NativeFSLockFactory instance, storing lock
   * files into the specified lockDir:
   * 
   * @param lockDir where lock files are created.
   */ NativeFSLockFactory FormalParameter ReferenceType File lockDir IOException StatementExpression MethodInvocation MemberReference lockDir setLockDir MethodDeclaration Modifier public synchronized Annotation Override ReferenceType Lock makeLock FormalParameter ReferenceType String lockName StatementExpression MethodInvocation acquireTestLock IfStatement BinaryOperation != MemberReference lockPrefix Literal null StatementExpression Assignment MemberReference lockName BinaryOperation + BinaryOperation + MemberReference lockPrefix Literal ""-"" MemberReference lockName = End ReturnStatement ClassCreator ReferenceType NativeFSLock MemberReference lockDir MemberReference lockName MethodDeclaration Modifier public Annotation Override clearLock FormalParameter ReferenceType String lockName IOException IfStatement MethodInvocation lockDir exists BlockStatement IfStatement BinaryOperation != MemberReference lockPrefix Literal null BlockStatement StatementExpression Assignment MemberReference lockName BinaryOperation + BinaryOperation + MemberReference lockPrefix Literal ""-"" MemberReference lockName = End LocalVariableDeclaration ReferenceType File VariableDeclarator lockFile ClassCreator ReferenceType File MemberReference lockDir MemberReference lockName IfStatement BinaryOperation && MethodInvocation lockFile exists MethodInvocation ! lockFile delete BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""Cannot delete "" MemberReference lockFile End End ReferenceType FSLockFactory ClassDeclaration NativeFSLock FieldDeclaration Modifier private ReferenceType RandomAccessFile VariableDeclarator f FieldDeclaration Modifier private ReferenceType FileChannel VariableDeclarator channel FieldDeclaration Modifier private ReferenceType FileLock VariableDeclarator lock FieldDeclaration Modifier private ReferenceType File VariableDeclarator path FieldDeclaration Modifier private ReferenceType File VariableDeclarator lockDir FieldDeclaration Modifier private static ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator LOCK_HELD ClassCreator ReferenceType HashSet TypeArgument ReferenceType String ConstructorDeclaration Modifier public NativeFSLock FormalParameter ReferenceType File lockDir FormalParameter ReferenceType String lockFileName StatementExpression Assignment This MemberReference lockDir MemberReference lockDir = StatementExpression Assignment MemberReference path ClassCreator ReferenceType File MemberReference lockDir MemberReference lockFileName = MethodDeclaration Modifier private synchronized BasicType boolean lockExists ReturnStatement BinaryOperation != MemberReference lock Literal null MethodDeclaration Modifier public synchronized Annotation Override BasicType boolean obtain IOException IfStatement MethodInvocation lockExists BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! lockDir exists BlockStatement IfStatement MethodInvocation ! lockDir mkdirs ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""Cannot create directory: "" MethodInvocation lockDir getAbsolutePath End IfStatement MethodInvocation ! lockDir isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""Found regular file where directory expected: "" MethodInvocation lockDir getAbsolutePath End End LocalVariableDeclaration ReferenceType String VariableDeclarator canonicalPath MethodInvocation path getCanonicalPath LocalVariableDeclaration BasicType boolean VariableDeclarator markedHeld Literal false TryStatement SynchronizedStatement MemberReference LOCK_HELD IfStatement MethodInvocation LOCK_HELD MemberReference canonicalPath contains BlockStatement ReturnStatement Literal false BlockStatement StatementExpression MethodInvocation LOCK_HELD MemberReference canonicalPath add StatementExpression Assignment MemberReference markedHeld Literal true = End TryStatement StatementExpression Assignment MemberReference f ClassCreator ReferenceType RandomAccessFile MemberReference path Literal ""rw"" = CatchClause CatchClauseParameter IOException e StatementExpression Assignment MemberReference failureReason MemberReference e = StatementExpression Assignment MemberReference f Literal null = IfStatement BinaryOperation != MemberReference f Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference channel MethodInvocation f getChannel = TryStatement StatementExpression Assignment MemberReference lock MethodInvocation channel tryLock = CatchClause CatchClauseParameter IOException e StatementExpression Assignment MemberReference failureReason MemberReference e = IfStatement BinaryOperation == MemberReference lock Literal null BlockStatement TryStatement StatementExpression MethodInvocation channel close StatementExpression Assignment MemberReference channel Literal null = End IfStatement BinaryOperation == MemberReference channel Literal null BlockStatement TryStatement StatementExpression MethodInvocation f close StatementExpression Assignment MemberReference f Literal null = End End IfStatement BinaryOperation && MemberReference markedHeld MethodInvocation ! lockExists BlockStatement SynchronizedStatement MemberReference LOCK_HELD IfStatement MethodInvocation LOCK_HELD MemberReference canonicalPath contains BlockStatement StatementExpression MethodInvocation LOCK_HELD MemberReference canonicalPath remove End End ReturnStatement MethodInvocation lockExists MethodDeclaration Modifier public synchronized Annotation Override release IOException IfStatement MethodInvocation lockExists BlockStatement TryStatement StatementExpression MethodInvocation lock release StatementExpression Assignment MemberReference lock Literal null = TryStatement StatementExpression MethodInvocation channel close StatementExpression Assignment MemberReference channel Literal null = TryStatement StatementExpression MethodInvocation f close StatementExpression Assignment MemberReference f Literal null = SynchronizedStatement MemberReference LOCK_HELD StatementExpression MethodInvocation LOCK_HELD MethodInvocation path getCanonicalPath remove IfStatement MethodInvocation ! path delete ThrowStatement ClassCreator ReferenceType LockReleaseFailedException BinaryOperation + Literal ""failed to delete "" MemberReference path End End MethodDeclaration Modifier public synchronized Annotation Override BasicType boolean isLocked IfStatement MethodInvocation lockExists ReturnStatement Literal true End IfStatement MethodInvocation ! path exists ReturnStatement Literal false End TryStatement LocalVariableDeclaration BasicType boolean VariableDeclarator obtained MethodInvocation obtain IfStatement MemberReference obtained StatementExpression MethodInvocation release End ReturnStatement MemberReference ! obtained CatchClause CatchClauseParameter IOException ioe ReturnStatement Literal false MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + Literal ""NativeFSLock@"" MemberReference path ReferenceType Lock",0
6,6,"CompilationUnit PackageDeclaration org.apache.lucene.store Import java.io.IOException Import java.util.HashSet ClassDeclaration Modifier public /**
 * Implements {@link LockFactory} for a single in-process instance,
 * meaning all locking will take place through this one instance.
 * Only use this {@link LockFactory} when you are certain all
 * IndexReaders and IndexWriters for a given index are running
 * against a single shared in-process Directory instance.  This is
 * currently the default locking for RAMDirectory.
 *
 * @see LockFactory
 */ SingleInstanceLockFactory FieldDeclaration Modifier private ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator locks ClassCreator ReferenceType HashSet TypeArgument ReferenceType String MethodDeclaration Modifier public Annotation Override ReferenceType Lock makeLock FormalParameter ReferenceType String lockName ReturnStatement ClassCreator ReferenceType SingleInstanceLock MemberReference locks MemberReference lockName MethodDeclaration Modifier public Annotation Override clearLock FormalParameter ReferenceType String lockName IOException SynchronizedStatement MemberReference locks IfStatement MethodInvocation locks MemberReference lockName contains BlockStatement StatementExpression MethodInvocation locks MemberReference lockName remove End ReferenceType LockFactory ClassDeclaration SingleInstanceLock FieldDeclaration ReferenceType String VariableDeclarator lockName FieldDeclaration Modifier private ReferenceType HashSet TypeArgument ReferenceType String VariableDeclarator locks ConstructorDeclaration Modifier public SingleInstanceLock FormalParameter ReferenceType HashSet TypeArgument ReferenceType String locks FormalParameter ReferenceType String lockName StatementExpression Assignment This MemberReference locks MemberReference locks = StatementExpression Assignment This MemberReference lockName MemberReference lockName = MethodDeclaration Modifier public Annotation Override BasicType boolean obtain IOException SynchronizedStatement MemberReference locks ReturnStatement MethodInvocation locks MemberReference lockName add MethodDeclaration Modifier public Annotation Override release SynchronizedStatement MemberReference locks StatementExpression MethodInvocation locks MemberReference lockName remove MethodDeclaration Modifier public Annotation Override BasicType boolean isLocked SynchronizedStatement MemberReference locks ReturnStatement MethodInvocation locks MemberReference lockName contains MethodDeclaration Modifier public Annotation Override ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + SuperMethodInvocation toString Literal "": "" MemberReference lockName ReferenceType Lock",1
766,766,,1
