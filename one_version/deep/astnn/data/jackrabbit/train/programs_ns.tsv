,id,code,label
898,898,,0
168,168,"CompilationUnit PackageDeclaration org.apache.jackrabbit.j2ee Import org.apache.jackrabbit.rmi.client.ClientRepositoryFactory Import org.apache.log4j.Logger Import javax.jcr.Repository Import javax.naming.InitialContext Import javax.naming.NamingException Import javax.servlet.ServletContext Import javax.servlet.ServletException Import javax.servlet.http.HttpServlet Import java.net.MalformedURLException Import java.rmi.NotBoundException Import java.rmi.RemoteException Import java.util.Enumeration Import java.util.Properties ClassDeclaration Modifier public /**
 * This Class implements a servlet that is used as unified mechanism to retrieve
 * a jcr repository either through JNID, RMI or JCRWebdavServer.
 */ RepositoryAccessServlet FieldDeclaration /**
     * default logger
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType RepositoryAccessServlet getLogger FieldDeclaration /**
     * the 'repository-name' init parameter
     */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_REPOSITORY_NAME Literal ""repository-name"" FieldDeclaration /**
     * the 'rmi-uri' init parameter
     */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_RMI_URI Literal ""rmi-uri"" FieldDeclaration /**
     * the 'missing-auth-mapping' init parameter
     */ Modifier private final static ReferenceType String VariableDeclarator CTX_ATTR_REPOSITORY Literal ""jcr.repository"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator CTX_ATTR_REPOSITORY_NAME Literal ""jcr.repository.name"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator CTX_ATTR_REPOSITORY_RMI_URI Literal ""jcr.repository.rmiURI"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator CTX_ATTR_REPOSITORY_JNDI_CONTEXT Literal ""jcr.repository.jndiContext"" MethodDeclaration /**
     * Initializes this servlet
     *
     * @throws javax.servlet.ServletException
     */ Modifier public init ServletException StatementExpression MethodInvocation log Literal ""RepositoryAccessServlet initializing..."" info LocalVariableDeclaration ReferenceType String VariableDeclarator repositoryName MethodInvocation MethodInvocation MemberReference INIT_PARAM_REPOSITORY_NAME getInitParameter getServletConfig IfStatement BinaryOperation == MemberReference repositoryName Literal null BlockStatement StatementExpression Assignment MemberReference repositoryName Literal ""default"" = End StatementExpression MethodInvocation MethodInvocation MemberReference CTX_ATTR_REPOSITORY_NAME MemberReference repositoryName setAttribute getServletContext StatementExpression MethodInvocation MethodInvocation MemberReference CTX_ATTR_REPOSITORY_RMI_URI MethodInvocation getRMIUri setAttribute getServletContext StatementExpression MethodInvocation MethodInvocation MemberReference CTX_ATTR_REPOSITORY_JNDI_CONTEXT MethodInvocation getInitialContext setAttribute getServletContext StatementExpression MethodInvocation log Literal ""RepositoryAccessServlet initialized."" info MethodDeclaration Modifier private ReferenceType InitialContext getInitialContext TryStatement LocalVariableDeclaration ReferenceType Properties VariableDeclarator env ClassCreator ReferenceType Properties LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator names MethodInvocation MethodInvocation getInitParameterNames getServletConfig WhileStatement MethodInvocation names hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation names nextElement IfStatement MethodInvocation name Literal ""java.naming."" startsWith BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator initParam MethodInvocation MethodInvocation MemberReference name getInitParameter getServletConfig IfStatement MethodInvocation initParam Literal """" equals BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""  ignoring empty JNDI init param: "" MemberReference name info BlockStatement StatementExpression MethodInvocation env MemberReference name MemberReference initParam put StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""  adding property to JNDI environment: "" MemberReference name Literal ""="" MemberReference initParam info End End End ReturnStatement ClassCreator ReferenceType InitialContext MemberReference env CatchClause CatchClauseParameter NamingException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Create initial context: "" MethodInvocation e toString error ReturnStatement Literal null MethodDeclaration Modifier private ReferenceType String getRMIUri ReturnStatement MethodInvocation MethodInvocation MemberReference INIT_PARAM_RMI_URI getInitParameter getServletConfig MethodDeclaration /**
     * tries to retrieve the repository using RMI
     */ Modifier private static ReferenceType Repository getRepositoryByJNDI FormalParameter ReferenceType ServletContext ctx LocalVariableDeclaration ReferenceType String VariableDeclarator repositoryName Cast ReferenceType String MethodInvocation ctx MemberReference CTX_ATTR_REPOSITORY_NAME getAttribute LocalVariableDeclaration ReferenceType InitialContext VariableDeclarator jndiContext Cast ReferenceType InitialContext MethodInvocation ctx MemberReference CTX_ATTR_REPOSITORY_JNDI_CONTEXT getAttribute IfStatement BinaryOperation == MemberReference jndiContext Literal null BlockStatement ReturnStatement Literal null End TryStatement LocalVariableDeclaration ReferenceType Repository VariableDeclarator r Cast ReferenceType Repository MethodInvocation jndiContext MemberReference repositoryName lookup StatementExpression MethodInvocation log Literal ""Acquired repository via JNDI."" info ReturnStatement MemberReference r CatchClause CatchClauseParameter NamingException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Error while retrieving repository using JNDI (name="" MemberReference repositoryName Literal ""): "" MemberReference e error ReturnStatement Literal null MethodDeclaration /**
     * tries to retrieve the repository using RMI
     */ Modifier private static ReferenceType Repository getRepositoryByRMI FormalParameter ReferenceType ServletContext ctx LocalVariableDeclaration ReferenceType String VariableDeclarator rmiURI Cast ReferenceType String MethodInvocation ctx MemberReference CTX_ATTR_REPOSITORY_RMI_URI getAttribute IfStatement BinaryOperation == MemberReference rmiURI Literal null BlockStatement ReturnStatement Literal null End StatementExpression MethodInvocation log BinaryOperation + Literal ""  trying to retrieve repository using rmi. uri="" MemberReference rmiURI info LocalVariableDeclaration ReferenceType ClientFactoryDelegater VariableDeclarator cfd TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator clazz MethodInvocation Class Literal ""org.apache.jackrabbit.j2ee.RMIClientFactoryDelegater"" forName StatementExpression Assignment MemberReference cfd Cast ReferenceType ClientFactoryDelegater MethodInvocation clazz newInstance = CatchClause CatchClauseParameter NoClassDefFoundError e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to locate RMI ClientRepositoryFactory. jcr-rmi.jar missing? "" MethodInvocation e toString error ReturnStatement Literal null CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to locate RMI ClientRepositoryFactory. jcr-rmi.jar missing?"" MethodInvocation e toString error ReturnStatement Literal null TryStatement LocalVariableDeclaration ReferenceType Repository VariableDeclarator r MethodInvocation cfd MemberReference rmiURI getRepository StatementExpression MethodInvocation log Literal ""Acquired repository via RMI."" info ReturnStatement MemberReference r CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log BinaryOperation + Literal ""Error while retrieving repository using RMI: "" MemberReference e error ReturnStatement Literal null MethodDeclaration /**
     * Returns the JSR170 repository
     *
     * @return a jsr170 repository
     * @throws IllegalStateException if the repository is not available in the context.
     */ Modifier public static ReferenceType Repository getRepository FormalParameter ReferenceType ServletContext ctx LocalVariableDeclaration ReferenceType Repository VariableDeclarator repository Cast ReferenceType Repository MethodInvocation ctx MemberReference CTX_ATTR_REPOSITORY getAttribute IfStatement BinaryOperation != MemberReference repository Literal null BlockStatement ReturnStatement MemberReference repository BlockStatement StatementExpression Assignment MemberReference repository MethodInvocation MemberReference ctx getRepositoryByRMI = End IfStatement BinaryOperation == MemberReference repository Literal null BlockStatement StatementExpression Assignment MemberReference repository MethodInvocation MemberReference ctx getRepositoryByJNDI = End IfStatement BinaryOperation == MemberReference repository Literal null BlockStatement StatementExpression MethodInvocation log Literal ""The repository is not available. Check config of 'RepositoryAccessServlet'."" fatal ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""The repository is not available."" BlockStatement StatementExpression MethodInvocation ctx MemberReference CTX_ATTR_REPOSITORY MemberReference repository setAttribute StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + MethodInvocation repository MemberReference Repository REP_NAME_DESC getDescriptor Literal "" v"" MethodInvocation repository MemberReference Repository REP_VERSION_DESC getDescriptor info ReturnStatement MemberReference repository End ReferenceType HttpServlet ClassDeclaration Modifier abstract /**
 * optional class for RMI, will only be used, if RMI client is present
 */ ClientFactoryDelegater MethodDeclaration Modifier public abstract ReferenceType Repository getRepository FormalParameter ReferenceType String uri RemoteException MalformedURLException NotBoundException ClassDeclaration /**
 * optional class for RMI, will only be used, if RMI server is present
 */ RMIClientFactoryDelegater FieldDeclaration Modifier static ReferenceType String VariableDeclarator FactoryClassName ClassReference MethodInvocation getName ReferenceType ClientRepositoryFactory MethodDeclaration Modifier public ReferenceType Repository getRepository FormalParameter ReferenceType String uri MalformedURLException NotBoundException RemoteException StatementExpression MethodInvocation System Literal ""java.rmi.server.useCodebaseOnly"" Literal ""true"" setProperty ReturnStatement ClassCreator MethodInvocation MemberReference uri getRepository ReferenceType ClientRepositoryFactory ReferenceType ClientFactoryDelegater",0
603,603,,0
91,91,"CompilationUnit PackageDeclaration org.apache.jackrabbit Import java.io.PrintStream Import java.io.PrintWriter ClassDeclaration Modifier public abstract /**
 * The abstract class <code>BaseException</code> serves as the base class
 * for all exceptions that are specific to this JCR implementation and that
 * are not derived from <code>javax.jcr.RepositoryException</code>.
 */ BaseException FieldDeclaration /**
     * Root failure cause
     */ Modifier private final ReferenceType Throwable VariableDeclarator rootCause ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with <code>null</code> as its
     * detail message.
     */ BaseException StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference rootCause Literal null = ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified detail
     * message.
     *
     * @param message the detail message. The detail message is saved for
     *                later retrieval by the {@link #getMessage()} method.
     */ BaseException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message StatementExpression Assignment MemberReference rootCause Literal null = ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified detail
     * message and root cause.
     *
     * @param message   the detail message. The detail message is saved for
     *                  later retrieval by the {@link #getMessage()} method.
     * @param rootCause root failure cause
     */ BaseException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation MemberReference message StatementExpression Assignment This MemberReference rootCause MemberReference rootCause = ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified root cause.
     *
     * @param rootCause root failure cause
     */ BaseException FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference rootCause MemberReference rootCause = MethodDeclaration /**
     * Returns the detail message, including the message from the nested
     * exception if there is one.
     *
     * @return the detail message (which may be <code>null</code>).
     */ Modifier public ReferenceType String getMessage LocalVariableDeclaration ReferenceType String VariableDeclarator s SuperMethodInvocation getMessage IfStatement BinaryOperation == MemberReference rootCause Literal null BlockStatement ReturnStatement MemberReference s IfStatement BinaryOperation == MemberReference s Literal null BlockStatement ReturnStatement MethodInvocation rootCause getMessage BlockStatement ReturnStatement BinaryOperation + BinaryOperation + MemberReference s Literal "": "" MethodInvocation rootCause getMessage End End MethodDeclaration /**
     * Creates a localized description of this exception.
     * Subclasses may override this method in order to produce a
     * locale-specific message. For subclasses that do not override this
     * method, the default implementation returns the same result as
     * <code>getMessage()</code>.
     *
     * @return The localized description of this exception.
     */ Modifier public ReferenceType String getLocalizedMessage ReturnStatement MethodInvocation getMessage MethodDeclaration /**
     * Returns the cause of this exception or <code>null</code> if the
     * cause is nonexistent or unknown. (The cause is the throwable that
     * caused this exception to get thrown.)
     *
     * @return the cause of this exception or <code>null</code> if the
     *         cause is nonexistent or unknown.
     */ Modifier public ReferenceType Throwable getCause ReturnStatement MemberReference rootCause MethodDeclaration /**
     * Prints this <code>RepositoryException</code> and its backtrace to the
     * standard error stream.
     */ Modifier public printStackTrace StatementExpression MethodInvocation MemberReference System err printStackTrace MethodDeclaration /**
     * Prints this <code>RepositoryException</code> and its backtrace to the
     * specified print stream.
     *
     * @param s <code>PrintStream</code> to use for output
     */ Modifier public printStackTrace FormalParameter ReferenceType PrintStream s SynchronizedStatement MemberReference s StatementExpression SuperMethodInvocation MemberReference s printStackTrace IfStatement BinaryOperation != MemberReference rootCause Literal null BlockStatement StatementExpression MethodInvocation rootCause MemberReference s printStackTrace End MethodDeclaration /**
     * Prints this <code>RepositoryException</code> and its backtrace to
     * the specified print writer.
     *
     * @param s <code>PrintWriter</code> to use for output
     */ Modifier public printStackTrace FormalParameter ReferenceType PrintWriter s SynchronizedStatement MemberReference s StatementExpression SuperMethodInvocation MemberReference s printStackTrace IfStatement BinaryOperation != MemberReference rootCause Literal null BlockStatement StatementExpression MethodInvocation rootCause MemberReference s printStackTrace End ReferenceType Exception",0
45,45,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query Import org.apache.jackrabbit.name.NamespaceResolver Import javax.jcr.query.InvalidQueryException InterfaceDeclaration Modifier public /**
 * Specifies an interface for a query tree builder.
 */ QueryTreeBuilder MethodDeclaration /**
     * Creates a <code>QueryNode</code> tree from a statement.
     *
     * @param statement the statement.
     * @param resolver  the namespace resolver to use.
     * @return the <code>QueryNode</code> tree for the statement.
     * @throws javax.jcr.query.InvalidQueryException
     *          if the statement is malformed.
     */ Modifier public ReferenceType QueryRootNode createQueryTree FormalParameter ReferenceType String statement FormalParameter ReferenceType NamespaceResolver resolver InvalidQueryException MethodDeclaration /**
     * Returns <code>true</code> if this query tree builder can handle a
     * statement in <code>language</code>.
     *
     * @param language the language of a query statement to build a query tree.
     * @return <code>true</code> if this builder can handle <code>language</code>;
     *         <code>false</code> otherwise.
     */ Modifier public BasicType boolean canHandle FormalParameter ReferenceType String language MethodDeclaration /**
     * Creates a String representation of the query node tree in the syntax this
     * <code>QueryTreeBuilder</code> can handle.
     *
     * @param root     the root of the query node tree.
     * @param resolver to resolve QNames.
     * @return a String representation of the query node tree.
     * @throws InvalidQueryException if the query node tree cannot be converted
     *                               into a String representation due to
     *                               restrictions in this syntax.
     */ Modifier public ReferenceType String toString FormalParameter ReferenceType QueryRootNode root FormalParameter ReferenceType NamespaceResolver resolver InvalidQueryException",0
391,391,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.observation Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.Namespace InterfaceDeclaration Modifier public /**
 * <code>EventType</code>...
 */ EventType MethodDeclaration Modifier public ReferenceType String getName MethodDeclaration Modifier public ReferenceType Namespace getNamespace ReferenceType XmlSerializable",1
148,148,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.config Import javax.security.auth.spi.LoginModule ClassDeclaration Modifier public /**
 * LoginModule configuration. This bean configuration class is used to
 * create login module objects.
 * <p>
 * Login module is an optional configuration that allows to use JackRabbit
 * in a non-JAAS environment.
 *
 * @see RepositoryConfig#getLoginModuleConfig()
 * @version $Id$
 */ LoginModuleConfig ConstructorDeclaration Modifier public /**
     * Creates an access manager configuration object from the
     * given bean configuration.
     *
     * @param config bean configuration
     */ LoginModuleConfig FormalParameter ReferenceType BeanConfig config StatementExpression SuperConstructorInvocation MemberReference config MethodDeclaration Modifier public ReferenceType LoginModule getLoginModule ConfigurationException LocalVariableDeclaration ReferenceType Object VariableDeclarator result MethodInvocation newInstance IfStatement BinaryOperation instanceof MemberReference result ReferenceType LoginModule BlockStatement ReturnStatement Cast ReferenceType LoginModule MemberReference result BlockStatement ThrowStatement ClassCreator ReferenceType ConfigurationException BinaryOperation + BinaryOperation + Literal ""Invalid login module implementation class "" MethodInvocation getClassName Literal ""."" End ReferenceType BeanConfig",0
828,828,,0
524,524,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.lock Import org.apache.jackrabbit.webdav.property.DavPropertyName Import org.apache.jackrabbit.webdav.property.AbstractDavProperty Import org.w3c.dom.Element Import org.w3c.dom.Document Import java.util.ArrayList Import java.util.Iterator ClassDeclaration Modifier public /**
 * The <code>SupportedLock</code> class encapsulates the lock capabilties
 * of a resource. It is mainly responsible for generating the &lt;supportedlock>
 * property.
 */ SupportedLock FieldDeclaration /** the list of lock entries */ Modifier private final ReferenceType ArrayList VariableDeclarator entries ClassCreator ReferenceType ArrayList ConstructorDeclaration Modifier public /**
     * Creates a new empty SupportedLock property.
     */ SupportedLock StatementExpression SuperConstructorInvocation MemberReference DavPropertyName SUPPORTEDLOCK Literal false MethodDeclaration /**
     * Adds a capability to this lock support.
     *
     * @param type Can currently only be 'write'
     * @param scope Can currently only be 'exclusive' or 'shared'
     *
     * @throws IllegalArgumentException If an argument contains invalid string
     */ Modifier public addEntry FormalParameter ReferenceType Type type FormalParameter ReferenceType Scope scope StatementExpression MethodInvocation entries ClassCreator ReferenceType WriteLockEntry MemberReference type MemberReference scope add MethodDeclaration /**
     * Adds a capability to this lock support.
     *
     * @param entry specifying the type of lock that is supported by this entry.
     * @see LockEntry
     */ Modifier public addEntry FormalParameter ReferenceType LockEntry entry IfStatement BinaryOperation == MemberReference entry Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""The lock entry cannot be null."" End StatementExpression MethodInvocation entries MemberReference entry add MethodDeclaration /**
     * Returns true if this a lock with the given type and scope is supported.
     *
     * @param type
     * @param scope
     * @return true if applying a lock with the given type and scope is basically
     * supported.
     */ Modifier public BasicType boolean isSupportedLock FormalParameter ReferenceType Type type FormalParameter ReferenceType Scope scope LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation entries iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType LockEntry VariableDeclarator le Cast ReferenceType LockEntry MethodInvocation it next IfStatement BinaryOperation && MethodInvocation le MethodInvocation MemberReference type equals getType MethodInvocation le MethodInvocation MemberReference scope equals getScope BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * Returns an iterator over all supported locks.
     *
     * @return an iterator over all supported locks
     */ Modifier public ReferenceType Iterator getSupportedLocks ReturnStatement MethodInvocation entries iterator MethodDeclaration /**
     * Creates a JDOM element that represents the &lt;supportedlock> tag.
     * 
     * @return A JDOM element of this lock support.
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator support MethodInvocation MethodInvocation MemberReference document toXml getName LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation entries iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType LockEntry VariableDeclarator le Cast ReferenceType LockEntry MethodInvocation iter next StatementExpression MethodInvocation support MethodInvocation le MemberReference document toXml appendChild End ReturnStatement MemberReference support MethodDeclaration /**
     * Returns the list of supported lock entries.
     *
     * @return list of supported lock.
     * @see org.apache.jackrabbit.webdav.property.DavProperty#getValue()
     */ Modifier public ReferenceType Object getValue ReturnStatement MemberReference entries ClassDeclaration Modifier private final static /**
     * Class representing the default lock entries defined by
     * <a href=""http://www.ietf.org/rfc/rfc2518.txt"">RFC 2518</a>.
     */ WriteLockEntry FieldDeclaration /** the lock scope */ Modifier private final ReferenceType Scope VariableDeclarator scope ConstructorDeclaration /**
         * Creates a new WriteLockEntry
         *
         * @param type Can currently only be
         * {@link Type#WRITE write}
         * @param scope Can currently only be {@link Scope#EXCLUSIVE exclusive}
         * or {@link Scope#SHARED shared}.
         *
         * @throws IllegalArgumentException If an argument contains invalid string
         */ WriteLockEntry FormalParameter ReferenceType Type type FormalParameter ReferenceType Scope scope IfStatement MethodInvocation ! Type.WRITE MemberReference type equals BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Invalid Type:"" MemberReference type End IfStatement BinaryOperation && MethodInvocation ! Scope.EXCLUSIVE MemberReference scope equals MethodInvocation ! Scope.SHARED MemberReference scope equals BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Invalid scope:"" MemberReference scope End StatementExpression Assignment This MemberReference scope MemberReference scope = MethodDeclaration /**
         * @return always returns {@link Type#WRITE write}.
         * @see LockEntry#getType()
         */ Modifier public ReferenceType Type getType ReturnStatement MemberReference Type WRITE MethodDeclaration /**
         * @return returns {@link Scope#EXCLUSIVE} or {@link Scope#SHARED}.
         * @see LockEntry#getScope()
         */ Modifier public ReferenceType Scope getScope ReturnStatement MemberReference scope ReferenceType AbstractLockEntry ReferenceType AbstractDavProperty",1
761,761,,0
0,0,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.value Import java.io.InputStream Import java.io.Serializable Import java.util.Calendar Import javax.jcr.RepositoryException Import javax.jcr.Value Import javax.jcr.ValueFormatException ClassDeclaration Modifier final /**
 * Stateful value implementation. This class implements the Context
 * part of the State design pattern (GoF) used for managing the JCR Value
 * states.
 * <p>
 * Instances of this class are issued by the
 * {@link org.apache.jackrabbit.rmi.value.SerialValueFactory} and are
 * <code>Serializable</code>.
 *
 * @see org.apache.jackrabbit.rmi.value.SerialValueFactory
 */ SerialValue FieldDeclaration /** Static serial version UID. */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal 6970955308427991717L FieldDeclaration /**
     * Type of the underlying value. Note that this type is never changed
     * even if the value state changes. Thus the type is memorized in this
     * member variable when the value instance is created.
     */ Modifier private BasicType int VariableDeclarator type FieldDeclaration /**
     * The underlying value instance. This is the state reference that
     * changes during state transitions.
     */ Modifier private ReferenceType StatefulValue VariableDeclarator value ConstructorDeclaration /**
     * Creates a generic value instance.  A new InitialValue instance
     * that wraps the given static value instance is created to intercept
     * the first getter method. The created InitialValue instance has
     * the responsibility of changing the value state.
     *
     * @param value underlying static value instance
     */ SerialValue FormalParameter ReferenceType StatefulValue value StatementExpression Assignment This MemberReference type MethodInvocation value getType = StatementExpression Assignment This MemberReference value ClassCreator ReferenceType InitialValue This MemberReference value = MethodDeclaration /**
     * Changes the value state. This method is invoked by the
     * {@link InitialValue InitialValue} class to commit the value state.
     *
     * @param value new value state
     */ setValue FormalParameter ReferenceType StatefulValue value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
     * Returns the binary representation of the value. The actual behaviour
     * depends on the current state of the value, see the JCR documentation
     * for the details.
     *
     * @return binary value
     * @throws IllegalStateException if the value is in non-stream state
     * @throws RepositoryException if another error occurs
     * @see Value#getStream()
     */ Modifier public ReferenceType InputStream getStream IllegalStateException RepositoryException ReturnStatement MethodInvocation value getStream MethodDeclaration /**
     * Returns the string representation of the value. The actual behaviour
     * depends on the current state of the value, see the JCR documentation
     * for the details.
     *
     * @return string value
     * @throws ValueFormatException if conversion to string is not possible
     * @throws IllegalStateException if the value is in stream state
     * @throws RepositoryException if another error occurs
     * @see Value#getString()
     */ Modifier public ReferenceType String getString ValueFormatException IllegalStateException RepositoryException ReturnStatement MethodInvocation value getString MethodDeclaration /**
     * Returns the long representation of the value. The actual behaviour
     * depends on the current state of the value, see the JCR documentation
     * for the details.
     *
     * @return long value
     * @throws ValueFormatException if conversion to long is not possible
     * @throws IllegalStateException if the value is in stream state
     * @throws RepositoryException if another error occurs
     * @see Value#getLong()
     */ Modifier public BasicType long getLong ValueFormatException IllegalStateException RepositoryException ReturnStatement MethodInvocation value getLong MethodDeclaration /**
     * Returns the double representation of the value. The actual behaviour
     * depends on the current state of the value, see the JCR documentation
     * for the details.
     *
     * @return double value
     * @throws ValueFormatException if conversion to double is not possible
     * @throws IllegalStateException if the value is in stream state
     * @throws RepositoryException if another error occurs
     * @see Value#getDouble()
     */ Modifier public BasicType double getDouble ValueFormatException IllegalStateException RepositoryException ReturnStatement MethodInvocation value getDouble MethodDeclaration /**
     * Returns the date representation of the value. The actual behaviour
     * depends on the current state of the value, see the JCR documentation
     * for the details.
     *
     * @return date value
     * @throws ValueFormatException if conversion to date is not possible
     * @throws IllegalStateException if the value is in stream state
     * @throws RepositoryException if another error occurs
     * @see Value#getDate()
     */ Modifier public ReferenceType Calendar getDate ValueFormatException IllegalStateException RepositoryException ReturnStatement MethodInvocation value getDate MethodDeclaration /**
     * Returns the boolean representation of the value. The actual behaviour
     * depends on the current state of the value, see the JCR documentation
     * for the details.
     *
     * @return boolean value
     * @throws ValueFormatException if conversion to boolean is not possible
     * @throws IllegalStateException if the value is in stream state
     * @throws RepositoryException if another error occurs
     * @see Value#getDouble()
     */ Modifier public BasicType boolean getBoolean ValueFormatException IllegalStateException RepositoryException ReturnStatement MethodInvocation value getBoolean MethodDeclaration /**
     * Returns the value type. Note that value type remains the same even
     * if the underlying value is converted to another type during the
     * stream/non-stream state transition.
     *
     * @return value type
     * @see javax.jcr.PropertyType
     * @see Value#getType()
     */ Modifier public BasicType int getType ReturnStatement MemberReference type ReferenceType Value ReferenceType Serializable",0
64,64,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype Import org.apache.jackrabbit.name.QName Import java.util.Arrays ClassDeclaration Modifier public /**
 * This class implements the <code>NodeDef</code> interface and additionally
 * provides setter methods for the various node definition attributes.
 */ NodeDefImpl FieldDeclaration /**
     * The name of the default primary type.
     */ Modifier private ReferenceType QName VariableDeclarator defaultPrimaryType Literal null FieldDeclaration /**
     * The names of the required primary types.
     */ Modifier private ReferenceType QName VariableDeclarator requiredPrimaryTypes ArrayCreator ReferenceType QName ArrayInitializer MemberReference QName NT_BASE FieldDeclaration /**
     * The 'allowsSameNameSiblings' flag.
     */ Modifier private BasicType boolean VariableDeclarator allowsSameNameSiblings Literal false FieldDeclaration /**
     * The identifier of this node definition. The identifier is lazily computed
     * based on the characteristics of this node definition and reset on every
     * attribute change.
     */ Modifier private ReferenceType NodeDefId VariableDeclarator id Literal null ConstructorDeclaration Modifier public /**
     * Default constructor.
     */ NodeDefImpl MethodDeclaration /**
     * Sets the name of default primary type.
     *
     * @param defaultNodeType
     */ Modifier public setDefaultPrimaryType FormalParameter ReferenceType QName defaultNodeType StatementExpression Assignment MemberReference id Literal null = StatementExpression Assignment This MemberReference defaultPrimaryType MemberReference defaultNodeType = MethodDeclaration /**
     * Sets the names of the required primary types.
     *
     * @param requiredPrimaryTypes
     */ Modifier public setRequiredPrimaryTypes FormalParameter ReferenceType QName requiredPrimaryTypes StatementExpression Assignment MemberReference id Literal null = IfStatement BinaryOperation == MemberReference requiredPrimaryTypes Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""requiredPrimaryTypes can not be null"" End StatementExpression Assignment This MemberReference requiredPrimaryTypes MemberReference requiredPrimaryTypes = MethodDeclaration /**
     * Sets the 'allowsSameNameSiblings' flag.
     *
     * @param allowsSameNameSiblings
     */ Modifier public setAllowsSameNameSiblings FormalParameter BasicType boolean allowsSameNameSiblings StatementExpression Assignment MemberReference id Literal null = StatementExpression Assignment This MemberReference allowsSameNameSiblings MemberReference allowsSameNameSiblings = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public setDeclaringNodeType FormalParameter ReferenceType QName declaringNodeType StatementExpression Assignment MemberReference id Literal null = StatementExpression SuperMethodInvocation MemberReference declaringNodeType setDeclaringNodeType MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public setName FormalParameter ReferenceType QName name StatementExpression Assignment MemberReference id Literal null = StatementExpression SuperMethodInvocation MemberReference name setName MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public setAutoCreated FormalParameter BasicType boolean autoCreated StatementExpression Assignment MemberReference id Literal null = StatementExpression SuperMethodInvocation MemberReference autoCreated setAutoCreated MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public setOnParentVersion FormalParameter BasicType int onParentVersion StatementExpression Assignment MemberReference id Literal null = StatementExpression SuperMethodInvocation MemberReference onParentVersion setOnParentVersion MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public setProtected FormalParameter BasicType boolean writeProtected StatementExpression Assignment MemberReference id Literal null = StatementExpression SuperMethodInvocation MemberReference writeProtected setProtected MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public setMandatory FormalParameter BasicType boolean mandatory StatementExpression Assignment MemberReference id Literal null = StatementExpression SuperMethodInvocation MemberReference mandatory setMandatory MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * The identifier is computed based on the characteristics of this property
     * definition, i.e. modifying attributes of this property definition will
     * have impact on the identifier returned by this method.
     */ Modifier public ReferenceType NodeDefId getId IfStatement BinaryOperation == MemberReference id Literal null BlockStatement StatementExpression Assignment MemberReference id ClassCreator ReferenceType NodeDefId This = End ReturnStatement MemberReference id MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType QName getDefaultPrimaryType ReturnStatement MemberReference defaultPrimaryType MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType QName getRequiredPrimaryTypes ReturnStatement MemberReference requiredPrimaryTypes MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean allowsSameNameSiblings ReturnStatement MemberReference allowsSameNameSiblings MethodDeclaration /**
     * {@inheritDoc}
     *
     * @return always <code>true</code>
     */ Modifier public BasicType boolean definesNode ReturnStatement Literal true MethodDeclaration /**
     * Compares two node definitions for equality. Returns <code>true</code>
     * if the given object is a node defintion and has the same attributes
     * as this node definition.
     *
     * @param obj the object to compare this node definition with
     * @return <code>true</code> if the object is equal to this node definition,
     *         <code>false</code> otherwise
     * @see Object#equals(Object)
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType NodeDefImpl BlockStatement LocalVariableDeclaration ReferenceType NodeDefImpl VariableDeclarator other Cast ReferenceType NodeDefImpl MemberReference obj ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation && SuperMethodInvocation MemberReference obj equals MethodInvocation Arrays MemberReference requiredPrimaryTypes MemberReference other requiredPrimaryTypes equals TernaryExpression BinaryOperation == MemberReference defaultPrimaryType Literal null BinaryOperation == MemberReference other defaultPrimaryType Literal null MethodInvocation defaultPrimaryType MemberReference other defaultPrimaryType equals BinaryOperation == MemberReference allowsSameNameSiblings MemberReference other allowsSameNameSiblings End ReturnStatement Literal false MethodDeclaration /**
     * Returns zero to satisfy the Object equals/hashCode contract.
     * This class is mutable and not meant to be used as a hash key.
     *
     * @return always zero
     * @see Object#hashCode()
     */ Modifier public BasicType int hashCode ReturnStatement Literal 0 ReferenceType ItemDefImpl ReferenceType NodeDef",1
291,291,"CompilationUnit PackageDeclaration org.apache.jackrabbit.util Import java.text.DecimalFormat Import java.util.Calendar Import java.util.GregorianCalendar Import java.util.TimeZone ClassDeclaration Modifier public final /**
 * The <code>ISO8601</code> utility class provides helper methods
 * to deal with date/time formatting using a specific ISO8601-compliant
 * format (see <a href=""http://www.w3.org/TR/NOTE-datetime"">ISO 8601</a>).
 * <p/>
 * The currently supported format is:
 * <pre>
 *   &plusmn;YYYY-MM-DDThh:mm:ss.SSSTZD
 * </pre>
 * where:
 * <pre>
 *   &plusmn;YYYY = four-digit year with optional sign where values <= 0 are
 *           denoting years BCE and values > 0 are denoting years CE,
 *           e.g. -0001 denotes the year 2 BCE, 0000 denotes the year 1 BCE,
 *           0001 denotes the year 1 CE, and so on...
 *   MM    = two-digit month (01=January, etc.)
 *   DD    = two-digit day of month (01 through 31)
 *   hh    = two digits of hour (00 through 23) (am/pm NOT allowed)
 *   mm    = two digits of minute (00 through 59)
 *   ss    = two digits of second (00 through 59)
 *   SSS   = three digits of milliseconds (000 through 999)
 *   TZD   = time zone designator, Z for Zulu (i.e. UTC) or an offset from UTC
 *           in the form of +hh:mm or -hh:mm
 * </pre>
 */ ISO8601 FieldDeclaration /**
     * misc. numeric formats used in formatting
     */ Modifier private final static ReferenceType DecimalFormat VariableDeclarator XX_FORMAT ClassCreator ReferenceType DecimalFormat Literal ""00"" FieldDeclaration Modifier private final static ReferenceType DecimalFormat VariableDeclarator XXX_FORMAT ClassCreator ReferenceType DecimalFormat Literal ""000"" FieldDeclaration Modifier private final static ReferenceType DecimalFormat VariableDeclarator XXXX_FORMAT ClassCreator ReferenceType DecimalFormat Literal ""0000"" MethodDeclaration /**
     * Parses an ISO8601-compliant date/time string.
     *
     * @param text the date/time string to be parsed
     * @return a <code>Calendar</code>, or <code>null</code> if the input could
     *         not be parsed
     * @throws IllegalArgumentException if a <code>null</code> argument is passed
     */ Modifier public static ReferenceType Calendar parse FormalParameter ReferenceType String text IfStatement BinaryOperation == MemberReference text Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""argument can not be null"" End LocalVariableDeclaration BasicType char VariableDeclarator sign LocalVariableDeclaration BasicType int VariableDeclarator start IfStatement MethodInvocation text Literal ""-"" startsWith BlockStatement StatementExpression Assignment MemberReference sign Literal '-' = StatementExpression Assignment MemberReference start Literal 1 = IfStatement MethodInvocation text Literal ""+"" startsWith BlockStatement StatementExpression Assignment MemberReference sign Literal '+' = StatementExpression Assignment MemberReference start Literal 1 = BlockStatement StatementExpression Assignment MemberReference sign Literal '+' = StatementExpression Assignment MemberReference start Literal 0 = End End LocalVariableDeclaration BasicType int VariableDeclarator year VariableDeclarator month VariableDeclarator day VariableDeclarator hour VariableDeclarator min VariableDeclarator sec VariableDeclarator ms LocalVariableDeclaration ReferenceType String VariableDeclarator tzID TryStatement StatementExpression Assignment MemberReference year MethodInvocation Integer MethodInvocation text MemberReference start BinaryOperation + MemberReference start Literal 4 substring parseInt = StatementExpression Assignment MemberReference start Literal 4 += IfStatement BinaryOperation != MethodInvocation text MemberReference start charAt Literal '-' BlockStatement ReturnStatement Literal null End StatementExpression MemberReference ++ start StatementExpression Assignment MemberReference month MethodInvocation Integer MethodInvocation text MemberReference start BinaryOperation + MemberReference start Literal 2 substring parseInt = StatementExpression Assignment MemberReference start Literal 2 += IfStatement BinaryOperation != MethodInvocation text MemberReference start charAt Literal '-' BlockStatement ReturnStatement Literal null End StatementExpression MemberReference ++ start StatementExpression Assignment MemberReference day MethodInvocation Integer MethodInvocation text MemberReference start BinaryOperation + MemberReference start Literal 2 substring parseInt = StatementExpression Assignment MemberReference start Literal 2 += IfStatement BinaryOperation != MethodInvocation text MemberReference start charAt Literal 'T' BlockStatement ReturnStatement Literal null End StatementExpression MemberReference ++ start StatementExpression Assignment MemberReference hour MethodInvocation Integer MethodInvocation text MemberReference start BinaryOperation + MemberReference start Literal 2 substring parseInt = StatementExpression Assignment MemberReference start Literal 2 += IfStatement BinaryOperation != MethodInvocation text MemberReference start charAt Literal ':' BlockStatement ReturnStatement Literal null End StatementExpression MemberReference ++ start StatementExpression Assignment MemberReference min MethodInvocation Integer MethodInvocation text MemberReference start BinaryOperation + MemberReference start Literal 2 substring parseInt = StatementExpression Assignment MemberReference start Literal 2 += IfStatement BinaryOperation != MethodInvocation text MemberReference start charAt Literal ':' BlockStatement ReturnStatement Literal null End StatementExpression MemberReference ++ start StatementExpression Assignment MemberReference sec MethodInvocation Integer MethodInvocation text MemberReference start BinaryOperation + MemberReference start Literal 2 substring parseInt = StatementExpression Assignment MemberReference start Literal 2 += IfStatement BinaryOperation != MethodInvocation text MemberReference start charAt Literal '.' BlockStatement ReturnStatement Literal null End StatementExpression MemberReference ++ start StatementExpression Assignment MemberReference ms MethodInvocation Integer MethodInvocation text MemberReference start BinaryOperation + MemberReference start Literal 3 substring parseInt = StatementExpression Assignment MemberReference start Literal 3 += IfStatement BinaryOperation || BinaryOperation == MethodInvocation text MemberReference start charAt Literal '+' BinaryOperation == MethodInvocation text MemberReference start charAt Literal '-' BlockStatement StatementExpression Assignment MemberReference tzID BinaryOperation + Literal ""GMT"" MethodInvocation text MemberReference start substring = IfStatement MethodInvocation text MethodInvocation Literal ""Z"" equals MemberReference start substring BlockStatement StatementExpression Assignment MemberReference tzID Literal ""GMT"" = BlockStatement ReturnStatement Literal null End End CatchClause CatchClauseParameter IndexOutOfBoundsException e ReturnStatement Literal null CatchClause CatchClauseParameter NumberFormatException e ReturnStatement Literal null LocalVariableDeclaration ReferenceType TimeZone VariableDeclarator tz MethodInvocation TimeZone MemberReference tzID getTimeZone IfStatement MethodInvocation ! tz MethodInvocation MemberReference tzID equals getID BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType Calendar VariableDeclarator cal MethodInvocation Calendar MemberReference tz getInstance StatementExpression MethodInvocation cal Literal false setLenient IfStatement BinaryOperation || BinaryOperation == MemberReference sign Literal '-' BinaryOperation == MemberReference year Literal 0 BlockStatement StatementExpression MethodInvocation cal MemberReference Calendar YEAR BinaryOperation + MemberReference year Literal 1 set StatementExpression MethodInvocation cal MemberReference Calendar ERA MemberReference GregorianCalendar BC set BlockStatement StatementExpression MethodInvocation cal MemberReference Calendar YEAR MemberReference year set StatementExpression MethodInvocation cal MemberReference Calendar ERA MemberReference GregorianCalendar AD set End StatementExpression MethodInvocation cal MemberReference Calendar MONTH BinaryOperation - MemberReference month Literal 1 set StatementExpression MethodInvocation cal MemberReference Calendar DAY_OF_MONTH MemberReference day set StatementExpression MethodInvocation cal MemberReference Calendar HOUR_OF_DAY MemberReference hour set StatementExpression MethodInvocation cal MemberReference Calendar MINUTE MemberReference min set StatementExpression MethodInvocation cal MemberReference Calendar SECOND MemberReference sec set StatementExpression MethodInvocation cal MemberReference Calendar MILLISECOND MemberReference ms set TryStatement StatementExpression MethodInvocation cal getTime CatchClause CatchClauseParameter IllegalArgumentException e ReturnStatement Literal null ReturnStatement MemberReference cal MethodDeclaration /**
     * Formats a <code>Calendar</code> value into an ISO8601-compliant
     * date/time string.
     *
     * @param cal the time value to be formatted into a date/time string.
     * @return the formatted date/time string.
     * @throws IllegalArgumentException if a <code>null</code> argument is passed
     */ Modifier public static ReferenceType String format FormalParameter ReferenceType Calendar cal IfStatement BinaryOperation == MemberReference cal Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""argument can not be null"" End LocalVariableDeclaration BasicType int VariableDeclarator year MethodInvocation cal MemberReference Calendar YEAR get IfStatement BinaryOperation && MethodInvocation cal MemberReference Calendar ERA isSet BinaryOperation == MethodInvocation cal MemberReference Calendar ERA get MemberReference GregorianCalendar BC BlockStatement StatementExpression Assignment MemberReference year BinaryOperation + BinaryOperation - Literal 0 MemberReference year Literal 1 = End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation buf MethodInvocation XXXX_FORMAT MemberReference year format append StatementExpression MethodInvocation buf Literal '-' append StatementExpression MethodInvocation buf MethodInvocation XX_FORMAT BinaryOperation + MethodInvocation cal MemberReference Calendar MONTH get Literal 1 format append StatementExpression MethodInvocation buf Literal '-' append StatementExpression MethodInvocation buf MethodInvocation XX_FORMAT MethodInvocation cal MemberReference Calendar DAY_OF_MONTH get format append StatementExpression MethodInvocation buf Literal 'T' append StatementExpression MethodInvocation buf MethodInvocation XX_FORMAT MethodInvocation cal MemberReference Calendar HOUR_OF_DAY get format append StatementExpression MethodInvocation buf Literal ':' append StatementExpression MethodInvocation buf MethodInvocation XX_FORMAT MethodInvocation cal MemberReference Calendar MINUTE get format append StatementExpression MethodInvocation buf Literal ':' append StatementExpression MethodInvocation buf MethodInvocation XX_FORMAT MethodInvocation cal MemberReference Calendar SECOND get format append StatementExpression MethodInvocation buf Literal '.' append StatementExpression MethodInvocation buf MethodInvocation XXX_FORMAT MethodInvocation cal MemberReference Calendar MILLISECOND get format append LocalVariableDeclaration ReferenceType TimeZone VariableDeclarator tz MethodInvocation cal getTimeZone LocalVariableDeclaration BasicType int VariableDeclarator offset MethodInvocation tz MethodInvocation cal getTimeInMillis getOffset IfStatement BinaryOperation != MemberReference offset Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator hours MethodInvocation Math BinaryOperation / BinaryOperation / MemberReference offset BinaryOperation * Literal 60 Literal 1000 Literal 60 abs LocalVariableDeclaration BasicType int VariableDeclarator minutes MethodInvocation Math BinaryOperation % BinaryOperation / MemberReference offset BinaryOperation * Literal 60 Literal 1000 Literal 60 abs StatementExpression MethodInvocation buf TernaryExpression BinaryOperation < MemberReference offset Literal 0 Literal '-' Literal '+' append StatementExpression MethodInvocation buf MethodInvocation XX_FORMAT MemberReference hours format append StatementExpression MethodInvocation buf Literal ':' append StatementExpression MethodInvocation buf MethodInvocation XX_FORMAT MemberReference minutes format append BlockStatement StatementExpression MethodInvocation buf Literal 'Z' append End ReturnStatement MethodInvocation buf toString",1
609,609,,0
116,116,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.PropertyImpl Import org.apache.jackrabbit.core.nodetype.EffectiveNodeType Import org.apache.jackrabbit.core.nodetype.NodeDef Import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException Import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry Import org.apache.jackrabbit.core.nodetype.PropDef Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.UpdatableItemStateManager Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.uuid.UUID Import javax.jcr.RepositoryException Import javax.jcr.nodetype.ConstraintViolationException Import javax.jcr.nodetype.NoSuchNodeTypeException Import java.util.HashSet Import java.util.Iterator Import java.util.List Import java.util.Set ClassDeclaration /**
 * This Class provides some basic node operations directly on the node state.
 */ NodeStateEx FieldDeclaration /**
     * the underlying persistent state
     */ Modifier private ReferenceType NodeState VariableDeclarator nodeState FieldDeclaration /**
     * the state manager
     */ Modifier private final ReferenceType UpdatableItemStateManager VariableDeclarator stateMgr FieldDeclaration /**
     * the node type registry for resolving item defs
     */ Modifier private final ReferenceType NodeTypeRegistry VariableDeclarator ntReg FieldDeclaration /**
     * the cached name
     */ Modifier private ReferenceType QName VariableDeclarator name ConstructorDeclaration Modifier public /**
     * Creates a new persistent node
     *
     * @param stateMgr
     * @param nodeState
     */ NodeStateEx FormalParameter ReferenceType UpdatableItemStateManager stateMgr FormalParameter ReferenceType NodeTypeRegistry ntReg FormalParameter ReferenceType NodeState nodeState FormalParameter ReferenceType QName name StatementExpression Assignment This MemberReference nodeState MemberReference nodeState = StatementExpression Assignment This MemberReference ntReg MemberReference ntReg = StatementExpression Assignment This MemberReference stateMgr MemberReference stateMgr = StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * returns the name of this node
     *
     * @return
     */ Modifier public ReferenceType QName getName IfStatement BinaryOperation == MemberReference name Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator parentId MethodInvocation nodeState getParentUUID LocalVariableDeclaration ReferenceType NodeState VariableDeclarator parent Cast ReferenceType NodeState MethodInvocation stateMgr ClassCreator ReferenceType NodeId MemberReference parentId getItemState StatementExpression Assignment MemberReference name MethodInvocation parent MethodInvocation getName MethodInvocation nodeState getUUID getChildNodeEntry = CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType IllegalStateException MethodInvocation e toString End ReturnStatement MemberReference name MethodDeclaration /**
     * Returns the uuid of this node
     *
     * @return
     */ Modifier public ReferenceType String getUUID ReturnStatement MethodInvocation nodeState getUUID MethodDeclaration /**
     * Returns the parent uuid of this node
     *
     * @return
     */ Modifier public ReferenceType String getParentUUID ReturnStatement MethodInvocation nodeState getParentUUID MethodDeclaration /**
     * Returns the node state wrpaee
     * @return
     */ Modifier public ReferenceType NodeState getState ReturnStatement MemberReference nodeState MethodDeclaration /**
     * Returns the properties of this node
     *
     * @return
     */ Modifier public ReferenceType PropertyState getProperties ItemStateException LocalVariableDeclaration ReferenceType Set VariableDeclarator set MethodInvocation nodeState getPropertyNames LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator props ArrayCreator ReferenceType PropertyState MethodInvocation set size LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation set iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator propName Cast ReferenceType QName MethodInvocation iter next LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation nodeState getUUID MemberReference propName StatementExpression Assignment MemberReference ArraySelector MemberReference ++ i props Cast ReferenceType PropertyState MethodInvocation stateMgr MemberReference propId getItemState = End ReturnStatement MemberReference props MethodDeclaration /**
     * Checks if the given property exists
     *
     * @param name
     * @return
     */ Modifier public BasicType boolean hasProperty FormalParameter ReferenceType QName name LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation nodeState getUUID MemberReference name ReturnStatement MethodInvocation stateMgr MemberReference propId hasItemState MethodDeclaration /**
     * Returns the values of the given property of <code>null</code>
     *
     * @param name
     * @return
     */ Modifier public ReferenceType InternalValue getPropertyValues FormalParameter ReferenceType QName name LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation nodeState getUUID MemberReference name TryStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator ps Cast ReferenceType PropertyState MethodInvocation stateMgr MemberReference propId getItemState ReturnStatement MethodInvocation ps getValues CatchClause CatchClauseParameter ItemStateException e ReturnStatement Literal null MethodDeclaration /**
     * Returns the value of the given property or <code>null</code>
     *
     * @param name
     * @return
     */ Modifier public ReferenceType InternalValue getPropertyValue FormalParameter ReferenceType QName name LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation nodeState getUUID MemberReference name TryStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator ps Cast ReferenceType PropertyState MethodInvocation stateMgr MemberReference propId getItemState ReturnStatement MethodInvocation ps ArraySelector Literal 0 getValues CatchClause CatchClauseParameter ItemStateException e ReturnStatement Literal null MethodDeclaration /**
     * Sets the property value
     *
     * @param name
     * @param value
     * @throws RepositoryException
     */ Modifier public setPropertyValue FormalParameter ReferenceType QName name FormalParameter ReferenceType InternalValue value RepositoryException StatementExpression MethodInvocation MemberReference name MethodInvocation value getType ArrayCreator ReferenceType InternalValue ArrayInitializer MemberReference value Literal false setPropertyValues MethodDeclaration /**
     * Sets the property values
     *
     * @param name
     * @param type
     * @param values
     * @throws RepositoryException
     */ Modifier public setPropertyValues FormalParameter ReferenceType QName name FormalParameter BasicType int type FormalParameter ReferenceType InternalValue values RepositoryException StatementExpression MethodInvocation MemberReference name MemberReference type MemberReference values Literal true setPropertyValues MethodDeclaration /**
     * Sets the property values
     *
     * @param name
     * @param type
     * @param values
     * @throws RepositoryException
     */ Modifier public setPropertyValues FormalParameter ReferenceType QName name FormalParameter BasicType int type FormalParameter ReferenceType InternalValue values FormalParameter BasicType boolean multiple RepositoryException LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator prop MethodInvocation MemberReference name MemberReference type MemberReference multiple getOrCreatePropertyState StatementExpression MethodInvocation prop MemberReference values setValues MethodDeclaration /**
     * Retrieves or creates a new property state as child property of this node
     *
     * @param name
     * @param type
     * @param multiValued
     * @return
     * @throws RepositoryException
     */ Modifier private ReferenceType PropertyState getOrCreatePropertyState FormalParameter ReferenceType QName name FormalParameter BasicType int type FormalParameter BasicType boolean multiValued RepositoryException LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation nodeState getUUID MemberReference name IfStatement MethodInvocation stateMgr MemberReference propId hasItemState BlockStatement TryStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator propState Cast ReferenceType PropertyState MethodInvocation stateMgr MemberReference propId getItemState IfStatement BinaryOperation == MethodInvocation propState getStatus MemberReference ItemState STATUS_EXISTING BlockStatement StatementExpression MethodInvocation propState MemberReference ItemState STATUS_EXISTING_MODIFIED setStatus End IfStatement BinaryOperation == MethodInvocation nodeState getStatus MemberReference ItemState STATUS_EXISTING BlockStatement StatementExpression MethodInvocation nodeState MemberReference ItemState STATUS_EXISTING_MODIFIED setStatus End ReturnStatement MemberReference propState CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException BinaryOperation + Literal ""Unable to create property: "" MethodInvocation e toString BlockStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator propState MethodInvocation stateMgr MemberReference name MethodInvocation nodeState getUUID createNew StatementExpression MethodInvocation propState MemberReference type setType StatementExpression MethodInvocation propState MemberReference multiValued setMultiValued LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pd MethodInvocation MethodInvocation MemberReference name MemberReference type MemberReference multiValued getApplicablePropertyDef getEffectiveNodeType StatementExpression MethodInvocation propState MethodInvocation pd getId setDefinitionId StatementExpression MethodInvocation nodeState MemberReference name addPropertyName IfStatement BinaryOperation == MethodInvocation nodeState getStatus MemberReference ItemState STATUS_EXISTING BlockStatement StatementExpression MethodInvocation nodeState MemberReference ItemState STATUS_EXISTING_MODIFIED setStatus End ReturnStatement MemberReference propState End MethodDeclaration /**
     * Returns the effective (i.e. merged and resolved) node type representation
     * of this node's primary and mixin node types.
     *
     * @return the effective node type
     * @throws RepositoryException
     */ Modifier public ReferenceType EffectiveNodeType getEffectiveNodeType RepositoryException LocalVariableDeclaration ReferenceType HashSet VariableDeclarator set ClassCreator ReferenceType HashSet MemberReference MethodInvocation getMixinTypeNames nodeState StatementExpression MethodInvocation set MethodInvocation nodeState getNodeTypeName add TryStatement ReturnStatement MethodInvocation ntReg Cast ReferenceType QName MethodInvocation set ArrayCreator ReferenceType QName MethodInvocation set size toArray getEffectiveNodeType CatchClause CatchClauseParameter NodeTypeConflictException ntce LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to build effective node type for node "" MethodInvocation nodeState getUUID ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ntce MethodDeclaration /**
     * checks if the given child node exists.
     *
     * @param name
     * @return
     */ Modifier public BasicType boolean hasNode FormalParameter ReferenceType QName name ReturnStatement MethodInvocation nodeState MemberReference name hasChildNodeEntry MethodDeclaration /**
     * removes the (first) child node with the given name.
     *
     * @param name
     * @return
     * @throws RepositoryException
     */ Modifier public BasicType boolean removeNode FormalParameter ReferenceType QName name RepositoryException ReturnStatement MethodInvocation MemberReference name Literal 1 removeNode MethodDeclaration /**
     * removes the child node with the given name and 1-based index
     *
     * @param name
     * @param index
     * @return
     * @throws RepositoryException
     */ Modifier public BasicType boolean removeNode FormalParameter ReferenceType QName name FormalParameter BasicType int index RepositoryException TryStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry MethodInvocation nodeState MemberReference name MemberReference index getChildNodeEntry IfStatement BinaryOperation == MemberReference entry Literal null BlockStatement ReturnStatement Literal false BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation stateMgr ClassCreator ReferenceType NodeId MethodInvocation entry getUUID getItemState StatementExpression MethodInvocation stateMgr MemberReference state destroy StatementExpression MethodInvocation nodeState MemberReference name MemberReference index removeChildNodeEntry StatementExpression MethodInvocation nodeState MemberReference ItemState STATUS_EXISTING_MODIFIED setStatus ReturnStatement Literal true End CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * removes the property with the given name
     *
     * @param name
     * @return
     * @throws RepositoryException
     */ Modifier public BasicType boolean removeProperty FormalParameter ReferenceType QName name RepositoryException TryStatement IfStatement MethodInvocation ! nodeState MemberReference name hasPropertyName BlockStatement ReturnStatement Literal false BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation nodeState getUUID MemberReference name LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation stateMgr MemberReference propId getItemState StatementExpression MethodInvocation stateMgr MemberReference state destroy StatementExpression MethodInvocation nodeState MemberReference name removePropertyName StatementExpression MethodInvocation nodeState MemberReference ItemState STATUS_EXISTING_MODIFIED setStatus ReturnStatement Literal true End CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * retrieves the child node with the given name and 1-base index or
     * <code>null</code> if the node does not exist.
     *
     * @param name
     * @param index
     * @return
     * @throws RepositoryException
     */ Modifier public ReferenceType NodeStateEx getNode FormalParameter ReferenceType QName name FormalParameter BasicType int index RepositoryException LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry MethodInvocation nodeState MemberReference name MemberReference index getChildNodeEntry IfStatement BinaryOperation == MemberReference entry Literal null BlockStatement ReturnStatement Literal null End TryStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator state Cast ReferenceType NodeState MethodInvocation stateMgr ClassCreator ReferenceType NodeId MethodInvocation entry getUUID getItemState ReturnStatement ClassCreator ReferenceType NodeStateEx MemberReference stateMgr MemberReference ntReg MemberReference state MemberReference name CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException BinaryOperation + Literal ""Unable to getNode: "" MethodInvocation e toString MethodDeclaration /**
     * Adds a new child node with the given name
     *
     * @param nodeName
     * @param nodeTypeName
     * @return
     * @throws NoSuchNodeTypeException
     * @throws ConstraintViolationException
     * @throws RepositoryException
     */ Modifier public ReferenceType NodeStateEx addNode FormalParameter ReferenceType QName nodeName FormalParameter ReferenceType QName nodeTypeName FormalParameter ReferenceType String uuid FormalParameter BasicType boolean referenceable NoSuchNodeTypeException ConstraintViolationException RepositoryException LocalVariableDeclaration ReferenceType NodeStateEx VariableDeclarator node MethodInvocation MemberReference nodeName MemberReference nodeTypeName MemberReference uuid createChildNode IfStatement MemberReference referenceable BlockStatement StatementExpression MethodInvocation node MemberReference QName JCR_UUID MethodInvocation InternalValue MethodInvocation node getUUID create setPropertyValue End ReturnStatement MemberReference node MethodDeclaration /**
     * creates a new child node
     *
     * @param name
     * @param uuid
     * @return
     */ Modifier private ReferenceType NodeStateEx createChildNode FormalParameter ReferenceType QName name FormalParameter ReferenceType QName nodeTypeName FormalParameter ReferenceType String uuid RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation nodeState getUUID IfStatement BinaryOperation == MemberReference uuid Literal null BlockStatement StatementExpression Assignment MemberReference uuid MethodInvocation UUID MethodInvocation toString randomUUID = End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator state MethodInvocation stateMgr MemberReference uuid MemberReference nodeTypeName MemberReference parentUUID createNew LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator cnd MethodInvocation MethodInvocation MemberReference name MemberReference nodeTypeName getApplicableChildNodeDef getEffectiveNodeType StatementExpression MethodInvocation state MethodInvocation cnd getId setDefinitionId LocalVariableDeclaration ReferenceType NodeStateEx VariableDeclarator node ClassCreator ReferenceType NodeStateEx MemberReference stateMgr MemberReference ntReg MemberReference state MemberReference name StatementExpression MethodInvocation node MemberReference QName JCR_PRIMARYTYPE MethodInvocation InternalValue MemberReference nodeTypeName create setPropertyValue StatementExpression MethodInvocation nodeState MemberReference name MethodInvocation state getUUID addChildNodeEntry IfStatement BinaryOperation == MethodInvocation nodeState getStatus MemberReference ItemState STATUS_EXISTING BlockStatement StatementExpression MethodInvocation nodeState MemberReference ItemState STATUS_EXISTING_MODIFIED setStatus End ReturnStatement MemberReference node MethodDeclaration /**
     * returns all child nodes
     *
     * @return
     * @throws RepositoryException
     */ Modifier public ReferenceType NodeStateEx getChildNodes RepositoryException TryStatement LocalVariableDeclaration ReferenceType List VariableDeclarator entries MethodInvocation nodeState getChildNodeEntries LocalVariableDeclaration ReferenceType NodeStateEx VariableDeclarator children ArrayCreator ReferenceType NodeStateEx MethodInvocation entries size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation entries size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation entries MemberReference i get LocalVariableDeclaration ReferenceType NodeState VariableDeclarator state Cast ReferenceType NodeState MethodInvocation stateMgr ClassCreator ReferenceType NodeId MethodInvocation entry getUUID getItemState StatementExpression Assignment MemberReference ArraySelector MemberReference i children ClassCreator ReferenceType NodeStateEx MemberReference stateMgr MemberReference ntReg MemberReference state MethodInvocation entry getName = End ReturnStatement MemberReference children CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * stores the persistent state recursively
     *
     * @throws RepositoryException
     */ Modifier public store RepositoryException TryStatement StatementExpression MethodInvocation MemberReference nodeState store CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * stores the given persistent state recursively
     *
     * @param state
     * @throws ItemStateException
     */ Modifier private store FormalParameter ReferenceType NodeState state ItemStateException IfStatement BinaryOperation != MethodInvocation state getStatus MemberReference ItemState STATUS_EXISTING BlockStatement LocalVariableDeclaration ReferenceType Set VariableDeclarator props MethodInvocation state getPropertyNames ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation props iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator propName Cast ReferenceType QName MethodInvocation iter next LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator pstate Cast ReferenceType PropertyState MethodInvocation stateMgr ClassCreator ReferenceType PropertyId MethodInvocation state getUUID MemberReference propName getItemState IfStatement BinaryOperation != MethodInvocation pstate getStatus MemberReference ItemState STATUS_EXISTING BlockStatement StatementExpression MethodInvocation stateMgr MemberReference pstate store End End LocalVariableDeclaration ReferenceType List VariableDeclarator nodes MethodInvocation state getChildNodeEntries ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nodes size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation nodes MemberReference i get LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nstate Cast ReferenceType NodeState MethodInvocation stateMgr ClassCreator ReferenceType NodeId MethodInvocation entry getUUID getItemState StatementExpression MethodInvocation MemberReference nstate store End StatementExpression MethodInvocation stateMgr MemberReference state store End MethodDeclaration /**
     * reloads the persistent state recursively
     *
     * @throws RepositoryException
     */ Modifier public reload RepositoryException TryStatement StatementExpression MethodInvocation MemberReference nodeState reload StatementExpression Assignment MemberReference nodeState Cast ReferenceType NodeState MethodInvocation stateMgr MethodInvocation nodeState getId getItemState = CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * reloads the given persistent state recursively
     *
     * @param state
     * @throws ItemStateException
     */ Modifier private reload FormalParameter ReferenceType NodeState state ItemStateException IfStatement BinaryOperation != MethodInvocation state getStatus MemberReference ItemState STATUS_EXISTING BlockStatement LocalVariableDeclaration ReferenceType Set VariableDeclarator props MethodInvocation state getPropertyNames ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation props iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator propName Cast ReferenceType QName MethodInvocation iter next LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator pstate Cast ReferenceType PropertyState MethodInvocation stateMgr ClassCreator ReferenceType PropertyId MethodInvocation state getUUID MemberReference propName getItemState IfStatement BinaryOperation != MethodInvocation pstate getStatus MemberReference ItemState STATUS_EXISTING BlockStatement StatementExpression MethodInvocation pstate discard End End LocalVariableDeclaration ReferenceType List VariableDeclarator nodes MethodInvocation state getChildNodeEntries ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nodes size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation nodes MemberReference i get LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nstate Cast ReferenceType NodeState MethodInvocation stateMgr ClassCreator ReferenceType NodeId MethodInvocation entry getUUID getItemState StatementExpression MethodInvocation MemberReference nstate reload End StatementExpression MethodInvocation state discard End MethodDeclaration /**
     * copies a property
     *
     * @param prop
     * @throws RepositoryException
     */ Modifier public copyFrom FormalParameter ReferenceType PropertyImpl prop RepositoryException IfStatement MethodInvocation prop MethodInvocation isMultiple getDefinition BlockStatement LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation prop internalGetValues LocalVariableDeclaration BasicType int VariableDeclarator type IfStatement BinaryOperation > MemberReference values length Literal 0 BlockStatement StatementExpression Assignment MemberReference type MemberReference ArraySelector Literal 0 MethodInvocation getType values = BlockStatement StatementExpression Assignment MemberReference type MethodInvocation prop MethodInvocation getRequiredType getDefinition = End LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator copiedValues ArrayCreator ReferenceType InternalValue MemberReference values length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i copiedValues MemberReference ArraySelector MemberReference i MethodInvocation createCopy values = End StatementExpression MethodInvocation MethodInvocation prop getQName MemberReference type MemberReference copiedValues setPropertyValues BlockStatement StatementExpression MethodInvocation MethodInvocation prop getQName MethodInvocation prop MethodInvocation createCopy internalGetValue setPropertyValue End",0
316,316,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib.traverser Import java.util.Iterator Import javax.jcr.Node Import javax.jcr.RepositoryException Import org.apache.commons.collections.CollectionUtils Import org.apache.commons.collections.IteratorUtils ClassDeclaration Modifier public /**
 * Postorder traverse strategy
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ PostorderTraverser MethodDeclaration /**
     * Postorder traversal
     * 
     * @param node
     * @throws RepositoryException
     */ Modifier private postorder FormalParameter ReferenceType Node node RepositoryException TryStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator nodes MethodInvocation IteratorUtils This MethodInvocation MemberReference node getChildren toArray StatementExpression MethodInvocation CollectionUtils MemberReference nodes reverseArray LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation IteratorUtils MemberReference nodes arrayIterator WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression This MethodInvocation Cast ReferenceType Node MethodInvocation iter next postorder End CatchClause CatchClauseParameter DepthExceededException e StatementExpression MethodInvocation MemberReference node visit MethodDeclaration /**
     * Traverse the node children tree
     * 
     * @throws RepositoryException
     */ Modifier protected internalTraverse RepositoryException StatementExpression This MethodInvocation This MemberReference node postorder ReferenceType AbstractTraverser",1
517,517,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.version Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.xml.ElementIterator Import org.apache.jackrabbit.webdav.xml.Namespace Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.log4j.Logger Import org.w3c.dom.Document Import org.w3c.dom.Element Import java.util.HashSet Import java.util.Iterator Import java.util.Set ClassDeclaration Modifier public /**
 * <code>OptionsInfo</code> represents the Xml request body, that may be present
 * with a OPTIONS request.
 * <br>
 * The DAV:options element is specified to have the following form.
 *
 * <pre>
 * &lt;!ELEMENT options ANY&gt;
 * ANY value: A sequence of elements each at most onces.
 * </pre>
 *
 * Note, that this is a simplified implementation of the very generic
 * definition: We assume that the DAV:options element only contains empty child
 * elements, such as e.g. {@link DeltaVConstants#XML_VH_COLLECTION_SET DAV:version-history-collection-set}
 * or {@link DeltaVConstants#XML_WSP_COLLECTION_SET DAV:workspace-collection-set}.
 *
 * @see DeltaVConstants#XML_VH_COLLECTION_SET
 * @see DeltaVConstants#XML_WSP_COLLECTION_SET
 * @see DeltaVConstants#XML_ACTIVITY_COLLECTION_SET
 */ OptionsInfo FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType OptionsInfo getLogger FieldDeclaration Modifier private final ReferenceType Set VariableDeclarator entriesLocalNames ClassCreator ReferenceType HashSet ConstructorDeclaration Modifier public /**
     * Create a new OptionsInfo with the specified entries. Each entry will
     * be converted to an empty Xml element when calling <code>toXml</code>.
     * As namespace {@link DeltaVConstants#NAMESPACE} is used.
     *
     * @param entriesLocalNames
     */ OptionsInfo FormalParameter ReferenceType String entriesLocalNames IfStatement BinaryOperation != MemberReference entriesLocalNames Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference entriesLocalNames length MemberReference ++ i BlockStatement StatementExpression This MemberReference entriesLocalNames MethodInvocation MemberReference ArraySelector MemberReference i entriesLocalNames add End End ConstructorDeclaration Modifier private /**
     * Private constructor used to create an OptionsInfo from Xml.
     */ OptionsInfo MethodDeclaration /**
     * Returns true if a child element with the given name and namespace is present.
     *
     * @param localName
     * @param namespace
     * @return true if such a child element exists in the options element.
     */ Modifier public BasicType boolean containsElement FormalParameter ReferenceType String localName FormalParameter ReferenceType Namespace namespace IfStatement MethodInvocation DeltaVConstants.NAMESPACE MemberReference namespace equals BlockStatement ReturnStatement MethodInvocation entriesLocalNames MemberReference localName contains End ReturnStatement Literal false MethodDeclaration /**
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator optionsElem MethodInvocation DomUtil MemberReference document MemberReference DeltaVConstants XML_OPTIONS MemberReference DeltaVConstants NAMESPACE createElement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation entriesLocalNames iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator localName Cast ReferenceType String MethodInvocation it next StatementExpression MethodInvocation DomUtil MemberReference optionsElem MemberReference localName MemberReference DeltaVConstants NAMESPACE addChildElement End ReturnStatement MemberReference optionsElem MethodDeclaration /**
     * Build an <code>OptionsInfo</code> object from the root element present
     * in the request body.
     *
     * @param optionsElement
     * @return
     * @throws IllegalArgumentException if the optionsElement is <code>null</code>
     * or not a DAV:options element.
     */ Modifier public static ReferenceType OptionsInfo createFromXml FormalParameter ReferenceType Element optionsElement IfStatement MethodInvocation ! DomUtil MemberReference optionsElement MemberReference DeltaVConstants XML_OPTIONS MemberReference DeltaVConstants NAMESPACE matches BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""DAV:options element expected"" End LocalVariableDeclaration ReferenceType OptionsInfo VariableDeclarator oInfo ClassCreator ReferenceType OptionsInfo LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator it MethodInvocation DomUtil MemberReference optionsElement getChildren WhileStatement MethodInvocation it hasNext BlockStatement StatementExpression MethodInvocation oInfo.entriesLocalNames MethodInvocation it MethodInvocation getLocalName nextElement add End ReturnStatement MemberReference oInfo ReferenceType XmlSerializable",0
368,368,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server.iterator Import java.rmi.RemoteException Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.NodeTypeIterator Import org.apache.jackrabbit.rmi.server.RemoteAdapterFactory ClassDeclaration Modifier public /**
 * A ServerIterator for iterating node types.
 */ ServerNodeTypeIterator ConstructorDeclaration Modifier public /**
     * Creates a ServerNodeTypeIterator instance.
     *
     * @param iterator      local node type iterator
     * @param factory       remote adapter factory
     * @param maxBufferSize maximum size of the element buffer
     * @throws RemoteException on RMI errors
     */ ServerNodeTypeIterator FormalParameter ReferenceType NodeTypeIterator iterator FormalParameter ReferenceType RemoteAdapterFactory factory FormalParameter BasicType int maxBufferSize RemoteException StatementExpression SuperConstructorInvocation MemberReference iterator MemberReference factory MemberReference maxBufferSize MethodDeclaration /**
     * Creates and returns a remote adapter for the given node type.
     *
     * @param object local object
     * @return remote adapter
     * @throws RemoteException on RMI errors
     * @see ServerIterator#getRemoteObject(Object)
     */ Modifier protected ReferenceType Object getRemoteObject FormalParameter ReferenceType Object object RemoteException ReturnStatement MethodInvocation MethodInvocation Cast ReferenceType NodeType MemberReference object getRemoteNodeType getFactory ReferenceType ServerIterator",1
893,893,,0
209,209,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.lock Import javax.jcr.Node Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Reset the <code>Lock</code> timer
 */ RefreshLock FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType RefreshLock getLog FieldDeclaration /** Node path key */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""refreshing lock at "" MemberReference path debug End LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation CommandHelper MemberReference ctx MemberReference path getNode StatementExpression MethodInvocation n MethodInvocation refresh getLock ReturnStatement Literal false MethodDeclaration /**
     * @return the source path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param srcPathKey
     *        the source path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String srcPathKey StatementExpression Assignment This MemberReference pathKey MemberReference srcPathKey = ReferenceType Command",1
150,150,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import java.util.Iterator Import javax.jcr.Node Import javax.jcr.RepositoryException Import org.apache.commons.chain.Context Import org.apache.jackrabbit.command.CommandHelper Import org.apache.jackrabbit.command.CommandException ClassDeclaration Modifier public /**
 * <p>
 * Property fields:
 * <ul>
 * <li>name</li>
 * <li>multiple</li>
 * <li>type</li>
 * <li>length</li>
 * </ul>
 * </p>
 */ LsProperties FieldDeclaration /** property name pattern key */ Modifier private ReferenceType String VariableDeclarator patternKey Literal ""pattern"" MethodDeclaration /**
     * @return name pattern
     */ Modifier public ReferenceType String getPatternKey ReturnStatement MemberReference patternKey MethodDeclaration /**
     * Sets the name pattern
     * @param pattern the pattern key
     */ Modifier public setPatternKey FormalParameter ReferenceType String pattern StatementExpression Assignment This MemberReference patternKey MemberReference pattern = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected ReferenceType Iterator getProperties FormalParameter ReferenceType Context ctx CommandException RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator pattern Cast ReferenceType String MethodInvocation ctx This MemberReference patternKey get LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation CommandHelper MemberReference ctx getCurrentNode ReturnStatement MethodInvocation CommandHelper MemberReference ctx MemberReference n MemberReference pattern getProperties ReferenceType AbstractLsProperties",0
885,885,,0
436,436,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.fs.db Import org.apache.jackrabbit.core.fs.FileSystemException Import org.apache.log4j.Logger Import java.sql.DriverManager Import java.sql.SQLException ClassDeclaration Modifier public /**
 * <code>DerbyFileSystem</code> is a JDBC-based <code>FileSystem</code>
 * implementation for Jackrabbit that persists file system entries in an
 * embedded Derby database.
 * <p/>
 * It is configured through the following properties:
 * <ul>
 * <li><code>url</code>: the database url of the form
 * <code>""jdbc:derby:[db];[attributes]""</code></li>
 * <li><code>schemaObjectPrefix</code>: prefix to be prepended to schema objects</li>
 * <li><code>driver</code>: the FQN name of the JDBC driver class
 * (default: <code>""org.apache.derby.jdbc.EmbeddedDriver""</code>)</li>
 * <li><code>schema</code>: type of schema to be used
 * (default: <code>""derby""</code>)</li>
 * <li><code>user</code>: the database user (default: <code>""""</code>)</li>
 * <li><code>password</code>: the user's password (default: <code>""""</code>)</li>
 * </ul>
 * See also {@link DbFileSystem}.
 * <p/>
 * The following is a fragment from a sample configuration:
 * <pre>
 *   &lt;FileSystem class=""org.apache.jackrabbit.core.fs.db.DerbyFileSystem""&gt;
 *       &lt;param name=""url"" value=""jdbc:derby:${rep.home}/db;create=true""/&gt;
 *       &lt;param name=""schemaObjectPrefix"" value=""rep_""/&gt;
 *  &lt;/FileSystem&gt;
 * </pre>
 */ DerbyFileSystem FieldDeclaration /**
     * Logger instance
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType DerbyFileSystem getLogger ConstructorDeclaration Modifier public /**
     * Creates a new <code>DerbyFileSystem</code> instance.
     */ DerbyFileSystem StatementExpression Assignment MemberReference schema Literal ""derby"" = StatementExpression Assignment MemberReference driver Literal ""org.apache.derby.jdbc.EmbeddedDriver"" = StatementExpression Assignment MemberReference schemaObjectPrefix Literal """" = StatementExpression Assignment MemberReference user Literal """" = StatementExpression Assignment MemberReference password Literal """" = StatementExpression Assignment MemberReference initialized Literal false = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public close FileSystemException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType String VariableDeclarator url TryStatement StatementExpression Assignment MemberReference url MethodInvocation con MethodInvocation getURL getMetaData = CatchClause CatchClauseParameter SQLException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""error closing file system"" StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType FileSystemException MemberReference msg MemberReference e LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation url Literal ';' lastIndexOf IfStatement BinaryOperation != MemberReference pos Literal - 1 BlockStatement StatementExpression Assignment MemberReference url MethodInvocation url Literal 0 MemberReference pos substring = End StatementExpression Assignment MemberReference url Literal "";shutdown=true"" += StatementExpression SuperMethodInvocation close TryStatement StatementExpression MethodInvocation DriverManager MemberReference url getConnection CatchClause CatchClauseParameter SQLException e StatementExpression MethodInvocation log MethodInvocation e getMessage info ReferenceType DbFileSystem",0
82,82,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core Import org.apache.jackrabbit.core.lock.LockManager Import org.apache.jackrabbit.core.nodetype.EffectiveNodeType Import org.apache.jackrabbit.core.nodetype.NodeDef Import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry Import org.apache.jackrabbit.core.nodetype.PropDef Import org.apache.jackrabbit.core.nodetype.PropDefId Import org.apache.jackrabbit.core.security.AccessManager Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.ItemStateManager Import org.apache.jackrabbit.core.state.NoSuchItemStateException Import org.apache.jackrabbit.core.state.NodeReferences Import org.apache.jackrabbit.core.state.NodeReferencesId Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.UpdatableItemStateManager Import org.apache.jackrabbit.core.util.ReferenceChangeTracker Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.core.version.VersionManager Import org.apache.jackrabbit.name.MalformedPathException Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.Path Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.uuid.UUID Import org.apache.log4j.Logger Import javax.jcr.AccessDeniedException Import javax.jcr.ItemExistsException Import javax.jcr.ItemNotFoundException Import javax.jcr.PathNotFoundException Import javax.jcr.PropertyType Import javax.jcr.ReferentialIntegrityException Import javax.jcr.RepositoryException Import javax.jcr.lock.LockException Import javax.jcr.nodetype.ConstraintViolationException Import javax.jcr.version.VersionException Import javax.jcr.version.VersionHistory Import java.util.ArrayList Import java.util.Arrays Import java.util.Calendar Import java.util.HashSet Import java.util.Iterator Import java.util.Set ClassDeclaration Modifier public /**
 * <code>BatchedItemOperations</code> is an <i>internal</i> helper class that
 * provides both high- and low-level operations directly on the
 * <code>ItemState</code> level.
 */ BatchedItemOperations FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType BatchedItemOperations getLogger FieldDeclaration Modifier final protected static BasicType int VariableDeclarator COPY Literal 0 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator CLONE Literal 1 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator CLONE_REMOVE_EXISTING Literal 2 FieldDeclaration /**
     * option for <code>{@link #checkAddNode}</code> and
     * <code>{@link #checkRemoveNode}</code> methods:<p/>
     * check access rights
     */ Modifier public final static BasicType int VariableDeclarator CHECK_ACCESS Literal 1 FieldDeclaration /**
     * option for <code>{@link #checkAddNode}</code> and
     * <code>{@link #checkRemoveNode}</code> methods:<p/>
     * check lock status
     */ Modifier public final static BasicType int VariableDeclarator CHECK_LOCK Literal 2 FieldDeclaration /**
     * option for <code>{@link #checkAddNode}</code> and
     * <code>{@link #checkRemoveNode}</code> methods:<p/>
     * check checked-out status
     */ Modifier public final static BasicType int VariableDeclarator CHECK_VERSIONING Literal 4 FieldDeclaration /**
     * option for <code>{@link #checkAddNode}</code> and
     * <code>{@link #checkRemoveNode}</code> methods:<p/>
     * check constraints defined in node type
     */ Modifier public final static BasicType int VariableDeclarator CHECK_CONSTRAINTS Literal 16 FieldDeclaration /**
     * option for <code>{@link #checkRemoveNode}</code> method:<p/>
     * check that target node is not being referenced
     */ Modifier public final static BasicType int VariableDeclarator CHECK_REFERENCES Literal 8 FieldDeclaration /**
     * wrapped item state manager
     */ Modifier final protected ReferenceType UpdatableItemStateManager VariableDeclarator stateMgr FieldDeclaration /**
     * lock manager used for checking locking status
     */ Modifier final protected ReferenceType LockManager VariableDeclarator lockMgr FieldDeclaration /**
     * current session used for checking access rights and locking status
     */ Modifier final protected ReferenceType SessionImpl VariableDeclarator session ConstructorDeclaration Modifier public /**
     * Creates a new <code>BatchedItemOperations</code> instance.
     *
     * @param stateMgr   item state manager
     * @param ntReg      node type registry
     * @param lockMgr    lock manager
     * @param session    current session
     * @param hierMgr    hierarchy manager
     * @param nsResolver namespace resolver
     */ BatchedItemOperations FormalParameter ReferenceType UpdatableItemStateManager stateMgr FormalParameter ReferenceType NodeTypeRegistry ntReg FormalParameter ReferenceType LockManager lockMgr FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType HierarchyManager hierMgr FormalParameter ReferenceType NamespaceResolver nsResolver StatementExpression SuperConstructorInvocation MemberReference ntReg MemberReference hierMgr MemberReference nsResolver StatementExpression Assignment This MemberReference stateMgr MemberReference stateMgr = StatementExpression Assignment This MemberReference lockMgr MemberReference lockMgr = StatementExpression Assignment This MemberReference session MemberReference session = MethodDeclaration /**
     * Starts an edit operation on the wrapped state manager.
     * At the end of this operation, either {@link #update} or {@link #cancel}
     * must be invoked.
     *
     * @throws IllegalStateException if the state mananger is already in edit mode
     */ Modifier public edit IllegalStateException StatementExpression MethodInvocation stateMgr edit MethodDeclaration /**
     * Store an item state.
     *
     * @param state item state that should be stored
     * @throws IllegalStateException if the manager is not in edit mode.
     */ Modifier public store FormalParameter ReferenceType ItemState state IllegalStateException StatementExpression MethodInvocation stateMgr MemberReference state store MethodDeclaration /**
     * Destroy an item state.
     *
     * @param state item state that should be destroyed
     * @throws IllegalStateException if the manager is not in edit mode.
     */ Modifier public destroy FormalParameter ReferenceType ItemState state IllegalStateException StatementExpression MethodInvocation stateMgr MemberReference state destroy MethodDeclaration /**
     * End an update operation. This will save all changes made since
     * the last invokation of {@link #edit()}. If this operation fails,
     * no item will have been saved.
     *
     * @throws RepositoryException   if the update operation failed
     * @throws IllegalStateException if the state mananger is not in edit mode
     */ Modifier public update RepositoryException IllegalStateException TryStatement StatementExpression MethodInvocation stateMgr update CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""update operation failed"" StatementExpression MethodInvocation log MemberReference msg MemberReference ise debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise MethodDeclaration /**
     * Cancel an update operation. This will undo all changes made since
     * the last invokation of {@link #edit()}.
     *
     * @throws IllegalStateException if the state mananger is not in edit mode
     */ Modifier public cancel IllegalStateException StatementExpression MethodInvocation stateMgr cancel MethodDeclaration /**
     * Copies the tree at <code>srcPath</code> to the new location at
     * <code>destPath</code>.
     * <p/>
     * <b>Precondition:</b> the state manager needs to be in edit mode.
     *
     * @param srcPath
     * @param destPath
     * @param flag     one of
     *                 <ul>
     *                 <li><code>COPY</code></li>
     *                 <li><code>CLONE</code></li>
     *                 <li><code>CLONE_REMOVE_EXISTING</code></li>
     *                 </ul>
     * @throws ConstraintViolationException
     * @throws AccessDeniedException
     * @throws VersionException
     * @throws PathNotFoundException
     * @throws ItemExistsException
     * @throws LockException
     * @throws RepositoryException
     */ Modifier public copy FormalParameter ReferenceType Path srcPath FormalParameter ReferenceType Path destPath FormalParameter BasicType int flag ConstraintViolationException AccessDeniedException VersionException PathNotFoundException ItemExistsException LockException RepositoryException StatementExpression MethodInvocation MemberReference srcPath MemberReference stateMgr MemberReference hierMgr MethodInvocation session getAccessManager MemberReference destPath MemberReference flag copy MethodDeclaration /**
     * Copies the tree at <code>srcPath</code> retrieved using the specified
     * <code>srcStateMgr</code> to the new location at <code>destPath</code>.
     * <p/>
     * <b>Precondition:</b> the state manager needs to be in edit mode.
     *
     * @param srcPath
     * @param srcStateMgr
     * @param srcHierMgr
     * @param srcAccessMgr
     * @param destPath
     * @param flag         one of
     *                     <ul>
     *                     <li><code>COPY</code></li>
     *                     <li><code>CLONE</code></li>
     *                     <li><code>CLONE_REMOVE_EXISTING</code></li>
     *                     </ul>
     * @throws ConstraintViolationException
     * @throws AccessDeniedException
     * @throws VersionException
     * @throws PathNotFoundException
     * @throws ItemExistsException
     * @throws LockException
     * @throws RepositoryException
     * @throws IllegalStateException        if the state mananger is not in edit mode
     */ Modifier public copy FormalParameter ReferenceType Path srcPath FormalParameter ReferenceType ItemStateManager srcStateMgr FormalParameter ReferenceType HierarchyManager srcHierMgr FormalParameter ReferenceType AccessManager srcAccessMgr FormalParameter ReferenceType Path destPath FormalParameter BasicType int flag ConstraintViolationException AccessDeniedException VersionException PathNotFoundException ItemExistsException LockException RepositoryException IllegalStateException IfStatement MethodInvocation ! stateMgr inEditMode BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not in edit mode"" End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator srcState MethodInvocation MemberReference srcStateMgr MemberReference srcHierMgr MemberReference srcPath getNodeState LocalVariableDeclaration ReferenceType Path ReferenceType PathElement VariableDeclarator destName MethodInvocation destPath getNameElement LocalVariableDeclaration ReferenceType Path VariableDeclarator destParentPath MethodInvocation destPath Literal 1 getAncestor LocalVariableDeclaration ReferenceType NodeState VariableDeclarator destParentState MethodInvocation MemberReference destParentPath getNodeState LocalVariableDeclaration BasicType int VariableDeclarator ind MethodInvocation destName getIndex IfStatement BinaryOperation > MemberReference ind Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""invalid destination path (subscript in name element is not allowed)"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End StatementExpression MethodInvocation MemberReference destParentState MethodInvocation destName getName MethodInvocation srcState getNodeTypeName BinaryOperation | BinaryOperation | BinaryOperation | MemberReference CHECK_ACCESS MemberReference CHECK_LOCK MemberReference CHECK_VERSIONING MemberReference CHECK_CONSTRAINTS checkAddNode TryStatement IfStatement MethodInvocation ! srcAccessMgr MethodInvocation srcState getId MemberReference AccessManager READ isGranted BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MemberReference srcPath safeGetJCRPath End CatchClause CatchClauseParameter ItemNotFoundException infe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to check access rights for "" MethodInvocation MemberReference srcPath safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference infe LocalVariableDeclaration ReferenceType ReferenceChangeTracker VariableDeclarator refTracker ClassCreator ReferenceType ReferenceChangeTracker LocalVariableDeclaration ReferenceType NodeState VariableDeclarator newState MethodInvocation MemberReference srcState MemberReference srcStateMgr MemberReference srcAccessMgr MethodInvocation destParentState getUUID MemberReference flag MemberReference refTracker copyNodeState StatementExpression MethodInvocation destParentState MethodInvocation destName getName MethodInvocation newState getUUID addChildNodeEntry LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator newNodeDef MethodInvocation MethodInvocation destName getName MethodInvocation srcState getNodeTypeName MemberReference destParentState findApplicableNodeDefinition StatementExpression MethodInvocation newState MethodInvocation newNodeDef getId setDefinitionId LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation refTracker getProcessedReferences WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator prop Cast ReferenceType PropertyState MethodInvocation iter next IfStatement BinaryOperation != MethodInvocation prop getType MemberReference PropertyType REFERENCE BlockStatement ContinueStatement End LocalVariableDeclaration BasicType boolean VariableDeclarator modified Literal false LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation prop getValues LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator newVals ArrayCreator ReferenceType InternalValue MemberReference values length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator val MemberReference ArraySelector MemberReference i values LocalVariableDeclaration ReferenceType String VariableDeclarator original Cast ReferenceType UUID MethodInvocation val internalValue LocalVariableDeclaration ReferenceType String VariableDeclarator adjusted MethodInvocation refTracker MemberReference original getMappedUUID IfStatement BinaryOperation != MemberReference adjusted Literal null BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i newVals MethodInvocation InternalValue MethodInvocation UUID MemberReference adjusted fromString create = StatementExpression Assignment MemberReference modified Literal true = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i newVals MemberReference val = End End IfStatement MemberReference modified BlockStatement StatementExpression MethodInvocation prop MemberReference newVals setValues StatementExpression MethodInvocation stateMgr MemberReference prop store End End StatementExpression MethodInvocation refTracker clear StatementExpression MethodInvocation stateMgr MemberReference newState store StatementExpression MethodInvocation stateMgr MemberReference destParentState store MethodDeclaration /**
     * Moves the tree at <code>srcPath</code> to the new location at
     * <code>destPath</code>.
     * <p/>
     * <b>Precondition:</b> the state manager needs to be in edit mode.
     *
     * @param srcPath
     * @param destPath
     * @throws ConstraintViolationException
     * @throws VersionException
     * @throws AccessDeniedException
     * @throws PathNotFoundException
     * @throws ItemExistsException
     * @throws LockException
     * @throws RepositoryException
     * @throws IllegalStateException        if the state mananger is not in edit mode
     */ Modifier public move FormalParameter ReferenceType Path srcPath FormalParameter ReferenceType Path destPath ConstraintViolationException VersionException AccessDeniedException PathNotFoundException ItemExistsException LockException RepositoryException IllegalStateException IfStatement MethodInvocation ! stateMgr inEditMode BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not in edit mode"" End TryStatement IfStatement MethodInvocation srcPath MemberReference destPath isAncestorOf BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation MemberReference destPath safeGetJCRPath Literal "": invalid destination path (cannot be descendant of source path)"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End CatchClause CatchClauseParameter MalformedPathException mpe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""invalid path: "" MethodInvocation MemberReference destPath safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference mpe LocalVariableDeclaration ReferenceType Path ReferenceType PathElement VariableDeclarator srcName MethodInvocation srcPath getNameElement LocalVariableDeclaration ReferenceType Path VariableDeclarator srcParentPath MethodInvocation srcPath Literal 1 getAncestor LocalVariableDeclaration ReferenceType NodeState VariableDeclarator target MethodInvocation MemberReference srcPath getNodeState LocalVariableDeclaration ReferenceType NodeState VariableDeclarator srcParent MethodInvocation MemberReference srcParentPath getNodeState LocalVariableDeclaration ReferenceType Path ReferenceType PathElement VariableDeclarator destName MethodInvocation destPath getNameElement LocalVariableDeclaration ReferenceType Path VariableDeclarator destParentPath MethodInvocation destPath Literal 1 getAncestor LocalVariableDeclaration ReferenceType NodeState VariableDeclarator destParent MethodInvocation MemberReference destParentPath getNodeState LocalVariableDeclaration BasicType int VariableDeclarator ind MethodInvocation destName getIndex IfStatement BinaryOperation > MemberReference ind Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation MemberReference destPath safeGetJCRPath Literal "": invalid destination path (subscript in name element is not allowed)"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End StatementExpression MethodInvocation MemberReference target Cast ReferenceType NodeId MethodInvocation srcParent getId BinaryOperation | BinaryOperation | BinaryOperation | MemberReference CHECK_ACCESS MemberReference CHECK_LOCK MemberReference CHECK_VERSIONING MemberReference CHECK_CONSTRAINTS checkRemoveNode StatementExpression MethodInvocation MemberReference destParent MethodInvocation destName getName MethodInvocation target getNodeTypeName BinaryOperation | BinaryOperation | BinaryOperation | MemberReference CHECK_ACCESS MemberReference CHECK_LOCK MemberReference CHECK_VERSIONING MemberReference CHECK_CONSTRAINTS checkAddNode LocalVariableDeclaration BasicType boolean VariableDeclarator renameOnly MethodInvocation srcParent MethodInvocation MethodInvocation destParent getUUID equals getUUID LocalVariableDeclaration BasicType int VariableDeclarator srcNameIndex MethodInvocation srcName getIndex IfStatement BinaryOperation == MemberReference srcNameIndex Literal 0 BlockStatement StatementExpression Assignment MemberReference srcNameIndex Literal 1 = End IfStatement MemberReference renameOnly BlockStatement StatementExpression MethodInvocation destParent MethodInvocation srcName getName MemberReference srcNameIndex MethodInvocation destName getName renameChildNodeEntry BlockStatement StatementExpression MethodInvocation srcParent MethodInvocation srcName getName MemberReference srcNameIndex removeChildNodeEntry StatementExpression MethodInvocation target MethodInvocation destParent getUUID setParentUUID StatementExpression MethodInvocation destParent MethodInvocation destName getName MethodInvocation target getUUID addChildNodeEntry End LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator newTargetDef MethodInvocation MethodInvocation destName getName MethodInvocation target getNodeTypeName MemberReference destParent findApplicableNodeDefinition StatementExpression MethodInvocation target MethodInvocation newTargetDef getId setDefinitionId StatementExpression MethodInvocation stateMgr MemberReference target store IfStatement MemberReference renameOnly BlockStatement StatementExpression MethodInvocation stateMgr MemberReference srcParent store BlockStatement StatementExpression MethodInvocation stateMgr MemberReference destParent store StatementExpression MethodInvocation stateMgr MemberReference srcParent store End MethodDeclaration /**
     * Removes the specified node, recursively removing its properties and
     * child nodes.
     * <p/>
     * <b>Precondition:</b> the state manager needs to be in edit mode.
     *
     * @param nodePath
     * @throws ConstraintViolationException
     * @throws AccessDeniedException
     * @throws VersionException
     * @throws LockException
     * @throws ItemNotFoundException
     * @throws ReferentialIntegrityException
     * @throws RepositoryException
     * @throws IllegalStateException
     */ Modifier public removeNode FormalParameter ReferenceType Path nodePath ConstraintViolationException AccessDeniedException VersionException LockException ItemNotFoundException ReferentialIntegrityException RepositoryException IllegalStateException IfStatement MethodInvocation ! stateMgr inEditMode BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not in edit mode"" End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator target MethodInvocation MemberReference nodePath getNodeState LocalVariableDeclaration ReferenceType NodeId VariableDeclarator parentId ClassCreator ReferenceType NodeId MethodInvocation target getParentUUID StatementExpression MethodInvocation MemberReference target MemberReference parentId BinaryOperation | BinaryOperation | BinaryOperation | BinaryOperation | MemberReference CHECK_ACCESS MemberReference CHECK_LOCK MemberReference CHECK_VERSIONING MemberReference CHECK_CONSTRAINTS MemberReference CHECK_REFERENCES checkRemoveNode StatementExpression MethodInvocation MemberReference target removeNodeState MethodDeclaration /**
     * Checks if adding a child node called <code>nodeName</code> of node type
     * <code>nodeTypeName</code> to the given parent node is allowed in the
     * current context.
     *
     * @param parentState
     * @param nodeName
     * @param nodeTypeName
     * @param options      bit-wise OR'ed flags specifying the checks that should be
     *                     performed; any combination of the following constants:
     *                     <ul>
     *                     <li><code>{@link #CHECK_ACCESS}</code>: make sure
     *                     current session is granted read & write access on
     *                     parent node</li>
     *                     <li><code>{@link #CHECK_LOCK}</code>: make sure
     *                     there's no foreign lock on parent node</li>
     *                     <li><code>{@link #CHECK_VERSIONING}</code>: make sure
     *                     parent node is checked-out</li>
     *                     <li><code>{@link #CHECK_CONSTRAINTS}</code>:
     *                     make sure no node type constraints would be violated</li>
     *                     <li><code>{@link #CHECK_REFERENCES}</code></li>
     *                     </ul>
     * @throws ConstraintViolationException
     * @throws AccessDeniedException
     * @throws VersionException
     * @throws LockException
     * @throws ItemNotFoundException
     * @throws ItemExistsException
     * @throws RepositoryException
     */ Modifier public checkAddNode FormalParameter ReferenceType NodeState parentState FormalParameter ReferenceType QName nodeName FormalParameter ReferenceType QName nodeTypeName FormalParameter BasicType int options ConstraintViolationException AccessDeniedException VersionException LockException ItemNotFoundException ItemExistsException RepositoryException LocalVariableDeclaration ReferenceType Path VariableDeclarator parentPath MethodInvocation hierMgr MethodInvocation parentState getId getPath IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_LOCK MemberReference CHECK_LOCK BlockStatement StatementExpression MethodInvocation MemberReference parentPath verifyUnlocked End IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_VERSIONING MemberReference CHECK_VERSIONING BlockStatement StatementExpression MethodInvocation MemberReference parentPath verifyCheckedOut End IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_ACCESS MemberReference CHECK_ACCESS BlockStatement LocalVariableDeclaration ReferenceType AccessManager VariableDeclarator accessMgr MethodInvocation session getAccessManager IfStatement MethodInvocation ! accessMgr MethodInvocation parentState getId MemberReference AccessManager READ isGranted BlockStatement ThrowStatement ClassCreator ReferenceType ItemNotFoundException MethodInvocation MethodInvocation parentState getId safeGetJCRPath End IfStatement MethodInvocation ! accessMgr MethodInvocation parentState getId MemberReference AccessManager WRITE isGranted BlockStatement ThrowStatement ClassCreator ReferenceType AccessDeniedException BinaryOperation + MethodInvocation MethodInvocation parentState getId safeGetJCRPath Literal "": not allowed to add child node"" End End IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_CONSTRAINTS MemberReference CHECK_CONSTRAINTS BlockStatement LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator parentDef MethodInvocation ntReg MethodInvocation parentState getDefinitionId getNodeDef IfStatement MethodInvocation parentDef isProtected BlockStatement ThrowStatement ClassCreator ReferenceType ConstraintViolationException BinaryOperation + MethodInvocation MethodInvocation parentState getId safeGetJCRPath Literal "": cannot add child node to protected parent node"" End LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator entParent MethodInvocation MemberReference parentState getEffectiveNodeType StatementExpression MethodInvocation entParent MemberReference nodeName MemberReference nodeTypeName checkAddNodeConstraints LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator newNodeDef MethodInvocation MemberReference nodeName MemberReference nodeTypeName MemberReference parentState findApplicableNodeDefinition IfStatement MethodInvocation parentState MemberReference nodeName hasPropertyName BlockStatement ThrowStatement ClassCreator ReferenceType ItemExistsException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""cannot add child node '"" MethodInvocation nodeName getLocalName Literal ""' to "" MethodInvocation MethodInvocation parentState getId safeGetJCRPath Literal "": colliding with same-named existing property"" End IfStatement MethodInvocation parentState MemberReference nodeName hasChildNodeEntry BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry MethodInvocation parentState MemberReference nodeName Literal 1 getChildNodeEntry LocalVariableDeclaration ReferenceType NodeState VariableDeclarator conflictingState LocalVariableDeclaration ReferenceType NodeId VariableDeclarator conflictingId ClassCreator ReferenceType NodeId MethodInvocation entry getUUID TryStatement StatementExpression Assignment MemberReference conflictingState Cast ReferenceType NodeState MethodInvocation stateMgr MemberReference conflictingId getItemState = CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to retrieve state of "" MethodInvocation MemberReference conflictingId safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator conflictingTargetDef MethodInvocation ntReg MethodInvocation conflictingState getDefinitionId getNodeDef IfStatement BinaryOperation || MethodInvocation ! conflictingTargetDef allowsSameNameSiblings MethodInvocation ! newNodeDef allowsSameNameSiblings BlockStatement ThrowStatement ClassCreator ReferenceType ItemExistsException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""cannot add child node '"" MethodInvocation nodeName getLocalName Literal ""' to "" MethodInvocation MethodInvocation parentState getId safeGetJCRPath Literal "": colliding with same-named existing node"" End End End MethodDeclaration /**
     * Checks if removing the given target node is allowed in the current context.
     *
     * @param targetState
     * @param options     bit-wise OR'ed flags specifying the checks that should be
     *                    performed; any combination of the following constants:
     *                    <ul>
     *                    <li><code>{@link #CHECK_ACCESS}</code>: make sure
     *                    current session is granted read access on parent
     *                    and remove privilege on target node</li>
     *                    <li><code>{@link #CHECK_LOCK}</code>: make sure
     *                    there's no foreign lock on parent node</li>
     *                    <li><code>{@link #CHECK_VERSIONING}</code>: make sure
     *                    parent node is checked-out</li>
     *                    <li><code>{@link #CHECK_CONSTRAINTS}</code>:
     *                    make sure no node type constraints would be violated</li>
     *                    <li><code>{@link #CHECK_REFERENCES}</code>:
     *                    make sure no references exist on target node</li>
     *                    </ul>
     * @throws ConstraintViolationException
     * @throws AccessDeniedException
     * @throws VersionException
     * @throws LockException
     * @throws ItemNotFoundException
     * @throws ReferentialIntegrityException
     * @throws RepositoryException
     */ Modifier public checkRemoveNode FormalParameter ReferenceType NodeState targetState FormalParameter BasicType int options ConstraintViolationException AccessDeniedException VersionException LockException ItemNotFoundException ReferentialIntegrityException RepositoryException LocalVariableDeclaration ReferenceType NodeId VariableDeclarator parentId ClassCreator ReferenceType NodeId MethodInvocation targetState getParentUUID StatementExpression MethodInvocation MemberReference targetState MemberReference parentId MemberReference options checkRemoveNode MethodDeclaration /**
     * Checks if removing the given target node from the specifed parent
     * is allowed in the current context.
     *
     * @param targetState
     * @param parentId
     * @param options     bit-wise OR'ed flags specifying the checks that should be
     *                    performed; any combination of the following constants:
     *                    <ul>
     *                    <li><code>{@link #CHECK_ACCESS}</code>: make sure
     *                    current session is granted read access on parent
     *                    and remove privilege on target node</li>
     *                    <li><code>{@link #CHECK_LOCK}</code>: make sure
     *                    there's no foreign lock on parent node</li>
     *                    <li><code>{@link #CHECK_VERSIONING}</code>: make sure
     *                    parent node is checked-out</li>
     *                    <li><code>{@link #CHECK_CONSTRAINTS}</code>:
     *                    make sure no node type constraints would be violated</li>
     *                    <li><code>{@link #CHECK_REFERENCES}</code>:
     *                    make sure no references exist on target node</li>
     *                    </ul>
     * @throws ConstraintViolationException
     * @throws AccessDeniedException
     * @throws VersionException
     * @throws LockException
     * @throws ItemNotFoundException
     * @throws ReferentialIntegrityException
     * @throws RepositoryException
     */ Modifier public checkRemoveNode FormalParameter ReferenceType NodeState targetState FormalParameter ReferenceType NodeId parentId FormalParameter BasicType int options ConstraintViolationException AccessDeniedException VersionException LockException ItemNotFoundException ReferentialIntegrityException RepositoryException IfStatement BinaryOperation == MethodInvocation targetState getParentUUID Literal null BlockStatement ThrowStatement ClassCreator ReferenceType ConstraintViolationException Literal ""cannot remove root node"" End LocalVariableDeclaration ReferenceType NodeId VariableDeclarator targetId Cast ReferenceType NodeId MethodInvocation targetState getId LocalVariableDeclaration ReferenceType NodeState VariableDeclarator parentState MethodInvocation MemberReference parentId getNodeState LocalVariableDeclaration ReferenceType Path VariableDeclarator parentPath MethodInvocation hierMgr MemberReference parentId getPath IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_LOCK MemberReference CHECK_LOCK BlockStatement StatementExpression MethodInvocation MemberReference parentPath verifyUnlocked End IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_VERSIONING MemberReference CHECK_VERSIONING BlockStatement StatementExpression MethodInvocation MemberReference parentPath verifyCheckedOut End IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_ACCESS MemberReference CHECK_ACCESS BlockStatement LocalVariableDeclaration ReferenceType AccessManager VariableDeclarator accessMgr MethodInvocation session getAccessManager TryStatement IfStatement MethodInvocation ! accessMgr MemberReference targetId MemberReference AccessManager READ isGranted BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MemberReference targetId safeGetJCRPath End IfStatement MethodInvocation ! accessMgr MemberReference targetId MemberReference AccessManager REMOVE isGranted BlockStatement ThrowStatement ClassCreator ReferenceType AccessDeniedException BinaryOperation + MethodInvocation MemberReference targetId safeGetJCRPath Literal "": not allowed to remove node"" End CatchClause CatchClauseParameter ItemNotFoundException infe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to check access rights for "" MethodInvocation MemberReference targetId safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference infe End IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_CONSTRAINTS MemberReference CHECK_CONSTRAINTS BlockStatement LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator parentDef MethodInvocation ntReg MethodInvocation parentState getDefinitionId getNodeDef IfStatement MethodInvocation parentDef isProtected BlockStatement ThrowStatement ClassCreator ReferenceType ConstraintViolationException BinaryOperation + MethodInvocation MemberReference parentId safeGetJCRPath Literal "": cannot remove child node of protected parent node"" End LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator targetDef MethodInvocation ntReg MethodInvocation targetState getDefinitionId getNodeDef IfStatement MethodInvocation targetDef isMandatory BlockStatement ThrowStatement ClassCreator ReferenceType ConstraintViolationException BinaryOperation + MethodInvocation MemberReference targetId safeGetJCRPath Literal "": cannot remove mandatory node"" End IfStatement MethodInvocation targetDef isProtected BlockStatement ThrowStatement ClassCreator ReferenceType ConstraintViolationException BinaryOperation + MethodInvocation MemberReference targetId safeGetJCRPath Literal "": cannot remove protected node"" End End IfStatement BinaryOperation == BinaryOperation & MemberReference options MemberReference CHECK_REFERENCES MemberReference CHECK_REFERENCES BlockStatement LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator ent MethodInvocation MemberReference targetState getEffectiveNodeType IfStatement MethodInvocation ent MemberReference QName MIX_REFERENCEABLE includesNodeType BlockStatement LocalVariableDeclaration ReferenceType NodeReferencesId VariableDeclarator refsId ClassCreator ReferenceType NodeReferencesId MethodInvocation targetState getUUID IfStatement MethodInvocation stateMgr MemberReference refsId hasNodeReferences BlockStatement TryStatement LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs MethodInvocation stateMgr MemberReference refsId getNodeReferences IfStatement MethodInvocation refs hasReferences BlockStatement ThrowStatement ClassCreator ReferenceType ReferentialIntegrityException BinaryOperation + MethodInvocation MemberReference targetId safeGetJCRPath Literal "": cannot remove node with references"" End CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to check references on "" MethodInvocation MemberReference targetId safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg MemberReference ise error ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise End End End MethodDeclaration /**
     * Verifies that the node at <code>nodePath</code> is writable. The
     * following conditions must hold true:
     * <ul>
     * <li>the node must exist</li>
     * <li>the current session must be granted read & write access on it</li>
     * <li>the node must not be locked by another session</li>
     * <li>the node must not be checked-in</li>
     * <li>the node must not be protected</li>
     * </ul>
     *
     * @param nodePath path of node to check
     * @throws PathNotFoundException        if no node exists at
     *                                      <code>nodePath</code> of the current
     *                                      session is not granted read access
     *                                      to the specified path
     * @throws AccessDeniedException        if write access to the specified
     *                                      path is not allowed
     * @throws ConstraintViolationException if the node at <code>nodePath</code>
     *                                      is protected
     * @throws VersionException             if the node at <code>nodePath</code>
     *                                      is checked-in
     * @throws LockException                if the node at <code>nodePath</code>
     *                                      is locked by another session
     * @throws RepositoryException          if another error occurs
     */ Modifier public verifyCanWrite FormalParameter ReferenceType Path nodePath PathNotFoundException AccessDeniedException ConstraintViolationException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType NodeState VariableDeclarator node MethodInvocation MemberReference nodePath getNodeState LocalVariableDeclaration ReferenceType AccessManager VariableDeclarator accessMgr MethodInvocation session getAccessManager IfStatement MethodInvocation ! accessMgr MethodInvocation node getId MemberReference AccessManager READ isGranted BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MethodInvocation node getId safeGetJCRPath End IfStatement MethodInvocation ! accessMgr MethodInvocation node getId MemberReference AccessManager WRITE isGranted BlockStatement ThrowStatement ClassCreator ReferenceType AccessDeniedException BinaryOperation + MethodInvocation MethodInvocation node getId safeGetJCRPath Literal "": not allowed to modify node"" End StatementExpression MethodInvocation MemberReference nodePath verifyUnlocked StatementExpression MethodInvocation MemberReference nodePath verifyNotProtected StatementExpression MethodInvocation MemberReference nodePath verifyCheckedOut MethodDeclaration /**
     * Verifies that the node at <code>nodePath</code> can be read. The
     * following conditions must hold true:
     * <ul>
     * <li>the node must exist</li>
     * <li>the current session must be granted read access on it</li>
     * </ul>
     *
     * @param nodePath path of node to check
     * @throws PathNotFoundException if no node exists at
     *                               <code>nodePath</code> of the current
     *                               session is not granted read access
     *                               to the specified path
     * @throws RepositoryException   if another error occurs
     */ Modifier public verifyCanRead FormalParameter ReferenceType Path nodePath PathNotFoundException RepositoryException LocalVariableDeclaration ReferenceType NodeState VariableDeclarator node MethodInvocation MemberReference nodePath getNodeState LocalVariableDeclaration ReferenceType AccessManager VariableDeclarator accessMgr MethodInvocation session getAccessManager IfStatement MethodInvocation ! accessMgr MethodInvocation node getId MemberReference AccessManager READ isGranted BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MethodInvocation node getId safeGetJCRPath End MethodDeclaration /**
     * Helper method that finds the applicable definition for a child node with
     * the given name and node type in the parent node's node type and
     * mixin types.
     *
     * @param name
     * @param nodeTypeName
     * @param parentState
     * @return a <code>NodeDef</code>
     * @throws ConstraintViolationException if no applicable child node definition
     *                                      could be found
     * @throws RepositoryException          if another error occurs
     */ Modifier public ReferenceType NodeDef findApplicableNodeDefinition FormalParameter ReferenceType QName name FormalParameter ReferenceType QName nodeTypeName FormalParameter ReferenceType NodeState parentState RepositoryException ConstraintViolationException LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator entParent MethodInvocation MemberReference parentState getEffectiveNodeType ReturnStatement MethodInvocation entParent MemberReference name MemberReference nodeTypeName getApplicableChildNodeDef MethodDeclaration /**
     * Helper method that finds the applicable definition for a property with
     * the given name, type and multiValued characteristic in the parent node's
     * node type and mixin types. If there more than one applicable definitions
     * then the following rules are applied:
     * <ul>
     * <li>named definitions are preferred to residual definitions</li>
     * <li>definitions with specific required type are preferred to definitions
     * with required type UNDEFINED</li>
     * </ul>
     *
     * @param name
     * @param type
     * @param multiValued
     * @param parentState
     * @return a <code>PropDef</code>
     * @throws ConstraintViolationException if no applicable property definition
     *                                      could be found
     * @throws RepositoryException          if another error occurs
     */ Modifier public ReferenceType PropDef findApplicablePropertyDefinition FormalParameter ReferenceType QName name FormalParameter BasicType int type FormalParameter BasicType boolean multiValued FormalParameter ReferenceType NodeState parentState RepositoryException ConstraintViolationException LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator entParent MethodInvocation MemberReference parentState getEffectiveNodeType ReturnStatement MethodInvocation entParent MemberReference name MemberReference type MemberReference multiValued getApplicablePropertyDef MethodDeclaration /**
     * Helper method that finds the applicable definition for a property with
     * the given name, type in the parent node's node type and mixin types.
     * Other than <code>{@link #findApplicablePropertyDefinition(QName, int, boolean, NodeState)}</code>
     * this method does not take the multiValued flag into account in the
     * selection algorithm. If there more than one applicable definitions then
     * the following rules are applied:
     * <ul>
     * <li>named definitions are preferred to residual definitions</li>
     * <li>definitions with specific required type are preferred to definitions
     * with required type UNDEFINED</li>
     * <li>single-value definitions are preferred to multiple-value definitions</li>
     * </ul>
     *
     * @param name
     * @param type
     * @param parentState
     * @return a <code>PropDef</code>
     * @throws ConstraintViolationException if no applicable property definition
     *                                      could be found
     * @throws RepositoryException          if another error occurs
     */ Modifier public ReferenceType PropDef findApplicablePropertyDefinition FormalParameter ReferenceType QName name FormalParameter BasicType int type FormalParameter ReferenceType NodeState parentState RepositoryException ConstraintViolationException LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator entParent MethodInvocation MemberReference parentState getEffectiveNodeType ReturnStatement MethodInvocation entParent MemberReference name MemberReference type getApplicablePropertyDef MethodDeclaration /**
     * Creates a new node.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     * <p/>
     * <b>Precondition:</b> the state manager needs to be in edit mode.
     *
     * @param parent
     * @param nodeName
     * @param nodeTypeName
     * @param mixinNames
     * @param uuid
     * @return
     * @throws ItemExistsException
     * @throws ConstraintViolationException
     * @throws RepositoryException
     * @throws IllegalStateException        if the state mananger is not in edit mode
     */ Modifier public ReferenceType NodeState createNodeState FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType QName nodeName FormalParameter ReferenceType QName nodeTypeName FormalParameter ReferenceType QName mixinNames FormalParameter ReferenceType String uuid ItemExistsException ConstraintViolationException RepositoryException IllegalStateException IfStatement MethodInvocation ! stateMgr inEditMode BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not in edit mode"" End LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator def MethodInvocation MemberReference nodeName MemberReference nodeTypeName MemberReference parent findApplicableNodeDefinition ReturnStatement MethodInvocation MemberReference parent MemberReference nodeName MemberReference nodeTypeName MemberReference mixinNames MemberReference uuid MemberReference def createNodeState MethodDeclaration /**
     * Creates a new node based on the given definition.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     * <p/>
     * <b>Precondition:</b> the state manager needs to be in edit mode.
     *
     * @param parent
     * @param nodeName
     * @param nodeTypeName
     * @param mixinNames
     * @param uuid
     * @param def
     * @return
     * @throws ItemExistsException
     * @throws ConstraintViolationException
     * @throws RepositoryException
     * @throws IllegalStateException
     */ Modifier public ReferenceType NodeState createNodeState FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType QName nodeName FormalParameter ReferenceType QName nodeTypeName FormalParameter ReferenceType QName mixinNames FormalParameter ReferenceType String uuid FormalParameter ReferenceType NodeDef def ItemExistsException ConstraintViolationException RepositoryException IllegalStateException IfStatement MethodInvocation parent MemberReference nodeName hasPropertyName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""there's already a property with name "" MemberReference nodeName StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End IfStatement BinaryOperation && MethodInvocation ! def allowsSameNameSiblings MethodInvocation parent MemberReference nodeName hasChildNodeEntry BlockStatement LocalVariableDeclaration ReferenceType NodeId VariableDeclarator id ClassCreator ReferenceType NodeId MethodInvocation parent MethodInvocation getUUID MemberReference nodeName Literal 1 getChildNodeEntry ThrowStatement ClassCreator ReferenceType ItemExistsException MethodInvocation MemberReference id safeGetJCRPath End IfStatement BinaryOperation == MemberReference uuid Literal null BlockStatement StatementExpression Assignment MemberReference uuid MethodInvocation UUID MethodInvocation toString randomUUID = End IfStatement BinaryOperation == MemberReference nodeTypeName Literal null BlockStatement StatementExpression Assignment MemberReference nodeTypeName MethodInvocation def getDefaultPrimaryType = IfStatement BinaryOperation == MemberReference nodeTypeName Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""an applicable node type could not be determined for "" MemberReference nodeName StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator node MethodInvocation stateMgr MemberReference uuid MemberReference nodeTypeName MethodInvocation parent getUUID createNew IfStatement BinaryOperation && BinaryOperation != MemberReference mixinNames Literal null BinaryOperation > MemberReference mixinNames length Literal 0 BlockStatement StatementExpression MethodInvocation node ClassCreator ReferenceType HashSet MethodInvocation Arrays MemberReference mixinNames asList setMixinTypeNames End StatementExpression MethodInvocation node MethodInvocation def getId setDefinitionId StatementExpression MethodInvocation parent MemberReference nodeName MethodInvocation node getUUID addChildNodeEntry LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator ent MethodInvocation MemberReference node getEffectiveNodeType IfStatement MethodInvocation ! node MethodInvocation isEmpty getMixinTypeNames BlockStatement LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pd MethodInvocation ent MemberReference QName JCR_MIXINTYPES MemberReference PropertyType NAME Literal true getApplicablePropertyDef StatementExpression MethodInvocation MemberReference node MethodInvocation pd getName MethodInvocation pd getRequiredType MemberReference pd createPropertyState End LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pda MethodInvocation ent getAutoCreatePropDefs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pda length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pd MemberReference ArraySelector MemberReference i pda StatementExpression MethodInvocation MemberReference node MethodInvocation pd getName MethodInvocation pd getRequiredType MemberReference pd createPropertyState End LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator nda MethodInvocation ent getAutoCreateNodeDefs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference nda length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator nd MemberReference ArraySelector MemberReference i nda StatementExpression MethodInvocation MemberReference node MethodInvocation nd getName MethodInvocation nd getDefaultPrimaryType Literal null Literal null MemberReference nd createNodeState End StatementExpression MethodInvocation stateMgr MemberReference node store StatementExpression MethodInvocation stateMgr MemberReference parent store ReturnStatement MemberReference node MethodDeclaration /**
     * Creates a new property.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     * <p/>
     * <b>Precondition:</b> the state manager needs to be in edit mode.
     *
     * @param parent
     * @param propName
     * @param type
     * @param numValues
     * @return
     * @throws ItemExistsException
     * @throws ConstraintViolationException
     * @throws RepositoryException
     * @throws IllegalStateException        if the state mananger is not in edit mode
     */ Modifier public ReferenceType PropertyState createPropertyState FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType QName propName FormalParameter BasicType int type FormalParameter BasicType int numValues ItemExistsException ConstraintViolationException RepositoryException IllegalStateException IfStatement MethodInvocation ! stateMgr inEditMode BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not in edit mode"" End LocalVariableDeclaration ReferenceType PropDef VariableDeclarator def IfStatement BinaryOperation == MemberReference numValues Literal 1 BlockStatement TryStatement StatementExpression Assignment MemberReference def MethodInvocation MemberReference propName MemberReference type Literal false MemberReference parent findApplicablePropertyDefinition = CatchClause CatchClauseParameter ConstraintViolationException cve StatementExpression Assignment MemberReference def MethodInvocation MemberReference propName MemberReference type Literal true MemberReference parent findApplicablePropertyDefinition = BlockStatement StatementExpression Assignment MemberReference def MethodInvocation MemberReference propName MemberReference type Literal true MemberReference parent findApplicablePropertyDefinition = End ReturnStatement MethodInvocation MemberReference parent MemberReference propName MemberReference type MemberReference def createPropertyState MethodDeclaration /**
     * Creates a new property based on the given definition.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     * <p/>
     * <b>Precondition:</b> the state manager needs to be in edit mode.
     *
     * @param parent
     * @param propName
     * @param type
     * @param def
     * @return
     * @throws ItemExistsException
     * @throws RepositoryException
     */ Modifier public ReferenceType PropertyState createPropertyState FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType QName propName FormalParameter BasicType int type FormalParameter ReferenceType PropDef def ItemExistsException RepositoryException IfStatement MethodInvocation parent MemberReference propName hasChildNodeEntry BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""there's already a child node with name "" MemberReference propName StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End IfStatement MethodInvocation parent MemberReference propName hasPropertyName BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator id ClassCreator ReferenceType PropertyId MethodInvocation parent getUUID MemberReference propName ThrowStatement ClassCreator ReferenceType ItemExistsException MethodInvocation MemberReference id safeGetJCRPath End LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator prop MethodInvocation stateMgr MemberReference propName MethodInvocation parent getUUID createNew StatementExpression MethodInvocation prop MethodInvocation def getId setDefinitionId IfStatement BinaryOperation != MethodInvocation def getRequiredType MemberReference PropertyType UNDEFINED BlockStatement StatementExpression MethodInvocation prop MethodInvocation def getRequiredType setType IfStatement BinaryOperation != MemberReference type MemberReference PropertyType UNDEFINED BlockStatement StatementExpression MethodInvocation prop MemberReference type setType BlockStatement StatementExpression MethodInvocation prop MemberReference PropertyType STRING setType End End StatementExpression MethodInvocation prop MethodInvocation def isMultiple setMultiValued LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator genValues MethodInvocation MemberReference parent MemberReference def computeSystemGeneratedPropertyValues IfStatement BinaryOperation != MemberReference genValues Literal null BlockStatement StatementExpression MethodInvocation prop MemberReference genValues setValues IfStatement BinaryOperation != MethodInvocation def getDefaultValues Literal null BlockStatement StatementExpression MethodInvocation prop MethodInvocation def getDefaultValues setValues End End StatementExpression MethodInvocation parent MemberReference propName addPropertyName StatementExpression MethodInvocation stateMgr MemberReference parent store ReturnStatement MemberReference prop MethodDeclaration /**
     * Unlinks the specified node state from its parent and recursively
     * removes it including its properties and child nodes.
     * <p/>
     * Note that no checks (access rights etc.) are performed on the specified
     * target node state. Those checks have to be performed beforehand by the
     * caller. However, the (recursive) removal of target node's child nodes are
     * subject to the following checks: access rights, locking, versioning.
     *
     * @param target
     * @throws RepositoryException if an error occurs
     */ Modifier public removeNodeState FormalParameter ReferenceType NodeState target RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation target getParentUUID IfStatement BinaryOperation == MemberReference parentUUID Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""root node cannot be removed"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End LocalVariableDeclaration ReferenceType NodeId VariableDeclarator parentId ClassCreator ReferenceType NodeId MemberReference parentUUID LocalVariableDeclaration ReferenceType NodeState VariableDeclarator parent MethodInvocation MemberReference parentId getNodeState StatementExpression MethodInvocation parent MethodInvocation target getUUID removeChildNodeEntry StatementExpression MethodInvocation stateMgr MemberReference parent store StatementExpression MethodInvocation MemberReference target recursiveRemoveNodeState MethodDeclaration /**
     * Retrieves the state of the node at the given path.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     *
     * @param nodePath
     * @return
     * @throws PathNotFoundException
     * @throws RepositoryException
     */ Modifier public ReferenceType NodeState getNodeState FormalParameter ReferenceType Path nodePath PathNotFoundException RepositoryException ReturnStatement MethodInvocation MemberReference stateMgr MemberReference hierMgr MemberReference nodePath getNodeState MethodDeclaration /**
     * Retrieves the state of the node with the given id.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     *
     * @param id
     * @return
     * @throws ItemNotFoundException
     * @throws RepositoryException
     */ Modifier public ReferenceType NodeState getNodeState FormalParameter ReferenceType NodeId id ItemNotFoundException RepositoryException ReturnStatement Cast ReferenceType NodeState MethodInvocation MemberReference stateMgr MemberReference id getItemState MethodDeclaration /**
     * Retrieves the state of the property with the given id.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     *
     * @param id
     * @return
     * @throws ItemNotFoundException
     * @throws RepositoryException
     */ Modifier public ReferenceType PropertyState getPropertyState FormalParameter ReferenceType PropertyId id ItemNotFoundException RepositoryException ReturnStatement Cast ReferenceType PropertyState MethodInvocation MemberReference stateMgr MemberReference id getItemState MethodDeclaration /**
     * Retrieves the state of the item with the given id.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     *
     * @param id
     * @return
     * @throws ItemNotFoundException
     * @throws RepositoryException
     */ Modifier public ReferenceType ItemState getItemState FormalParameter ReferenceType ItemId id ItemNotFoundException RepositoryException ReturnStatement MethodInvocation MemberReference stateMgr MemberReference id getItemState MethodDeclaration /**
     * Verifies that the node at <code>nodePath</code> is checked-out; throws a
     * <code>VersionException</code> if that's not the case.
     * <p/>
     * A node is considered <i>checked-out</i> if it is versionable and
     * checked-out, or is non-versionable but its nearest versionable ancestor
     * is checked-out, or is non-versionable and there are no versionable
     * ancestors.
     *
     * @param nodePath
     * @throws PathNotFoundException
     * @throws VersionException
     * @throws RepositoryException
     */ Modifier protected verifyCheckedOut FormalParameter ReferenceType Path nodePath PathNotFoundException VersionException RepositoryException LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState MethodInvocation MemberReference nodePath getNodeState WhileStatement MethodInvocation ! nodeState MemberReference QName JCR_ISCHECKEDOUT hasPropertyName BlockStatement IfStatement MethodInvocation nodePath denotesRoot BlockStatement ReturnStatement End StatementExpression Assignment MemberReference nodePath MethodInvocation nodePath Literal 1 getAncestor = StatementExpression Assignment MemberReference nodeState MethodInvocation MemberReference nodePath getNodeState = End LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation nodeState getUUID MemberReference QName JCR_ISCHECKEDOUT LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator propState TryStatement StatementExpression Assignment MemberReference propState Cast ReferenceType PropertyState MethodInvocation stateMgr MemberReference propId getItemState = CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to retrieve state of "" MethodInvocation MemberReference propId safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise LocalVariableDeclaration BasicType boolean VariableDeclarator checkedOut Cast ReferenceType Boolean MethodInvocation propState ArraySelector Literal 0 MethodInvocation internalValue getValues IfStatement MemberReference ! checkedOut BlockStatement ThrowStatement ClassCreator ReferenceType VersionException BinaryOperation + MethodInvocation MemberReference nodePath safeGetJCRPath Literal "" is checked-in"" End MethodDeclaration /**
     * Verifies that the node at <code>nodePath</code> is not locked by
     * somebody else than the current session.
     *
     * @param nodePath path of node to check
     * @throws PathNotFoundException
     * @throws LockException         if write access to the specified path is not allowed
     * @throws RepositoryException   if another error occurs
     */ Modifier protected verifyUnlocked FormalParameter ReferenceType Path nodePath LockException RepositoryException StatementExpression MethodInvocation lockMgr MemberReference nodePath MemberReference session checkLock MethodDeclaration /**
     * Verifies that the node at <code>nodePath</code> is not protected.
     *
     * @param nodePath path of node to check
     * @throws PathNotFoundException        if no node exists at <code>nodePath</code>
     * @throws ConstraintViolationException if write access to the specified
     *                                      path is not allowed
     * @throws RepositoryException          if another error occurs
     */ Modifier protected verifyNotProtected FormalParameter ReferenceType Path nodePath PathNotFoundException ConstraintViolationException RepositoryException LocalVariableDeclaration ReferenceType NodeState VariableDeclarator node MethodInvocation MemberReference nodePath getNodeState LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator parentDef MethodInvocation ntReg MethodInvocation node getDefinitionId getNodeDef IfStatement MethodInvocation parentDef isProtected BlockStatement ThrowStatement ClassCreator ReferenceType ConstraintViolationException BinaryOperation + MethodInvocation MemberReference nodePath safeGetJCRPath Literal "": node is protected"" End MethodDeclaration /**
     * Retrieves the state of the node at <code>nodePath</code> using the given
     * item state manager.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     *
     * @param srcStateMgr
     * @param srcHierMgr
     * @param nodePath
     * @return
     * @throws PathNotFoundException
     * @throws RepositoryException
     */ Modifier protected ReferenceType NodeState getNodeState FormalParameter ReferenceType ItemStateManager srcStateMgr FormalParameter ReferenceType HierarchyManager srcHierMgr FormalParameter ReferenceType Path nodePath PathNotFoundException RepositoryException TryStatement LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id MethodInvocation srcHierMgr MemberReference nodePath resolvePath IfStatement MethodInvocation ! id denotesNode BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MemberReference nodePath safeGetJCRPath End ReturnStatement Cast ReferenceType NodeState MethodInvocation MemberReference srcStateMgr MemberReference id getItemState CatchClause CatchClauseParameter ItemNotFoundException infe ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MemberReference nodePath safeGetJCRPath MethodDeclaration /**
     * Retrieves the state of the item with the specified id using the given
     * item state manager.
     * <p/>
     * Note that access rights are <b><i>not</i></b> enforced!
     *
     * @param srcStateMgr
     * @param id
     * @return
     * @throws ItemNotFoundException
     * @throws RepositoryException
     */ Modifier protected ReferenceType ItemState getItemState FormalParameter ReferenceType ItemStateManager srcStateMgr FormalParameter ReferenceType ItemId id ItemNotFoundException RepositoryException TryStatement ReturnStatement MethodInvocation srcStateMgr MemberReference id getItemState CatchClause CatchClauseParameter NoSuchItemStateException nsise ThrowStatement ClassCreator ReferenceType ItemNotFoundException MethodInvocation MemberReference id safeGetJCRPath CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to retrieve state of "" MethodInvocation MemberReference id safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise MethodDeclaration /**
     * Computes the values of well-known system (i.e. protected) properties.
     * todo: duplicate code in NodeImpl: consolidate and delegate to NodeTypeInstanceHandler
     *
     * @param parent
     * @param def
     * @return
     */ Modifier private ReferenceType InternalValue computeSystemGeneratedPropertyValues FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType PropDef def LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator genValues Literal null LocalVariableDeclaration ReferenceType QName VariableDeclarator declaringNT MethodInvocation def getDeclaringNodeType LocalVariableDeclaration ReferenceType QName VariableDeclarator name MethodInvocation def getName IfStatement MethodInvocation QName.MIX_REFERENCEABLE MemberReference declaringNT equals BlockStatement IfStatement MethodInvocation QName.JCR_UUID MemberReference name equals BlockStatement StatementExpression Assignment MemberReference genValues ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue MethodInvocation parent getUUID create = End IfStatement MethodInvocation QName.NT_BASE MemberReference declaringNT equals BlockStatement IfStatement MethodInvocation QName.JCR_PRIMARYTYPE MemberReference name equals BlockStatement StatementExpression Assignment MemberReference genValues ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue MethodInvocation parent getNodeTypeName create = IfStatement MethodInvocation QName.JCR_MIXINTYPES MemberReference name equals BlockStatement LocalVariableDeclaration ReferenceType Set VariableDeclarator mixins MethodInvocation parent getMixinTypeNames LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator values ClassCreator ReferenceType ArrayList MethodInvocation mixins size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation mixins iterator WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression MethodInvocation values MethodInvocation InternalValue Cast ReferenceType QName MethodInvocation iter next create add End StatementExpression Assignment MemberReference genValues Cast ReferenceType InternalValue MethodInvocation values ArrayCreator ReferenceType InternalValue MethodInvocation values size toArray = End End IfStatement MethodInvocation QName.NT_HIERARCHYNODE MemberReference declaringNT equals BlockStatement IfStatement MethodInvocation QName.JCR_CREATED MemberReference name equals BlockStatement StatementExpression Assignment MemberReference genValues ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue MethodInvocation Calendar getInstance create = End IfStatement MethodInvocation QName.NT_RESOURCE MemberReference declaringNT equals BlockStatement IfStatement MethodInvocation QName.JCR_LASTMODIFIED MemberReference name equals BlockStatement StatementExpression Assignment MemberReference genValues ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue MethodInvocation Calendar getInstance create = End IfStatement MethodInvocation QName.NT_VERSION MemberReference declaringNT equals BlockStatement IfStatement MethodInvocation QName.JCR_CREATED MemberReference name equals BlockStatement StatementExpression Assignment MemberReference genValues ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue MethodInvocation Calendar getInstance create = End End End End End End ReturnStatement MemberReference genValues MethodDeclaration /**
     * Recursively removes the given node state including its properties and
     * child nodes.
     * <p/>
     * The removal of child nodes is subject to the following checks:
     * access rights, locking & versioning status. Referential integrity
     * (references) is checked on commit.
     * <p/>
     * Note that the child node entry refering to <code>targetState</code> is
     * <b><i>not</i></b> automatically removed from <code>targetState</code>'s
     * parent.
     *
     * @param targetState
     * @throws RepositoryException if an error occurs
     */ Modifier private recursiveRemoveNodeState FormalParameter ReferenceType NodeState targetState RepositoryException IfStatement MethodInvocation targetState hasChildNodeEntries BlockStatement LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator tmp ClassCreator ReferenceType ArrayList MethodInvocation targetState getChildNodeEntries ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation - MethodInvocation tmp size Literal 1 BinaryOperation >= MemberReference i Literal 0 MemberReference -- i BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation tmp MemberReference i get LocalVariableDeclaration ReferenceType NodeId VariableDeclarator nodeId ClassCreator ReferenceType NodeId MethodInvocation entry getUUID TryStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState Cast ReferenceType NodeState MethodInvocation stateMgr MemberReference nodeId getItemState StatementExpression MethodInvocation MemberReference nodeState Cast ReferenceType NodeId MethodInvocation targetState getId BinaryOperation | BinaryOperation | MemberReference CHECK_ACCESS MemberReference CHECK_LOCK MemberReference CHECK_VERSIONING checkRemoveNode StatementExpression MethodInvocation MemberReference nodeState recursiveRemoveNodeState CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to retrieve state of "" MemberReference nodeId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise StatementExpression MethodInvocation targetState MethodInvocation entry getName MethodInvocation entry getIndex removeChildNodeEntry End End LocalVariableDeclaration ReferenceType HashSet VariableDeclarator tmp ClassCreator ReferenceType HashSet MethodInvocation targetState getPropertyNames ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation tmp iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator propName Cast ReferenceType QName MethodInvocation iter next LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation targetState getUUID MemberReference propName TryStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator propState Cast ReferenceType PropertyState MethodInvocation stateMgr MemberReference propId getItemState StatementExpression MethodInvocation targetState MethodInvocation propId getName removePropertyName StatementExpression MethodInvocation stateMgr MemberReference propState destroy CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to retrieve state of "" MemberReference propId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise End StatementExpression MethodInvocation targetState Literal null setParentUUID StatementExpression MethodInvocation stateMgr MethodInvocation targetState getOverlayedState destroy MethodDeclaration /**
     * Recursively copies the specified node state including its properties and
     * child nodes.
     *
     * @param srcState
     * @param srcStateMgr
     * @param srcAccessMgr
     * @param destParentUUID
     * @param flag           one of
     *                       <ul>
     *                       <li><code>COPY</code></li>
     *                       <li><code>CLONE</code></li>
     *                       <li><code>CLONE_REMOVE_EXISTING</code></li>
     *                       </ul>
     * @param refTracker     tracks uuid mappings and processed reference properties
     * @return a deep copy of the given node state and its children
     * @throws RepositoryException if an error occurs
     */ Modifier private ReferenceType NodeState copyNodeState FormalParameter ReferenceType NodeState srcState FormalParameter ReferenceType ItemStateManager srcStateMgr FormalParameter ReferenceType AccessManager srcAccessMgr FormalParameter ReferenceType String destParentUUID FormalParameter BasicType int flag FormalParameter ReferenceType ReferenceChangeTracker refTracker RepositoryException LocalVariableDeclaration ReferenceType NodeState VariableDeclarator newState TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator uuid LocalVariableDeclaration ReferenceType NodeId VariableDeclarator id LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator ent MethodInvocation MemberReference srcState getEffectiveNodeType LocalVariableDeclaration BasicType boolean VariableDeclarator referenceable MethodInvocation ent MemberReference QName MIX_REFERENCEABLE includesNodeType LocalVariableDeclaration BasicType boolean VariableDeclarator versionable MethodInvocation ent MemberReference QName MIX_VERSIONABLE includesNodeType SwitchStatement MemberReference flag SwitchStatementCase COPY StatementExpression Assignment MemberReference uuid MethodInvocation UUID MethodInvocation toString randomUUID = IfStatement MemberReference referenceable BlockStatement StatementExpression MethodInvocation refTracker MethodInvocation srcState getUUID MemberReference uuid mappedUUID End BreakStatement SwitchStatementCase CLONE IfStatement MemberReference ! referenceable BlockStatement StatementExpression Assignment MemberReference uuid MethodInvocation UUID MethodInvocation toString randomUUID = BreakStatement End StatementExpression Assignment MemberReference uuid MethodInvocation srcState getUUID = StatementExpression Assignment MemberReference id ClassCreator ReferenceType NodeId MemberReference uuid = IfStatement MethodInvocation stateMgr MemberReference id hasItemState BlockStatement ThrowStatement ClassCreator ReferenceType ItemExistsException MethodInvocation MemberReference id safeGetJCRPath End BreakStatement SwitchStatementCase CLONE_REMOVE_EXISTING IfStatement MemberReference ! referenceable BlockStatement StatementExpression Assignment MemberReference uuid MethodInvocation UUID MethodInvocation toString randomUUID = BreakStatement End StatementExpression Assignment MemberReference uuid MethodInvocation srcState getUUID = StatementExpression Assignment MemberReference id ClassCreator ReferenceType NodeId MemberReference uuid = IfStatement MethodInvocation stateMgr MemberReference id hasItemState BlockStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator existingState Cast ReferenceType NodeState MethodInvocation stateMgr MemberReference id getItemState LocalVariableDeclaration ReferenceType NodeId VariableDeclarator newParentId ClassCreator ReferenceType NodeId MemberReference destParentUUID LocalVariableDeclaration ReferenceType Path VariableDeclarator p0 MethodInvocation hierMgr MemberReference newParentId getPath LocalVariableDeclaration ReferenceType Path VariableDeclarator p1 MethodInvocation hierMgr MemberReference id getPath TryStatement IfStatement BinaryOperation || MethodInvocation p1 MemberReference p0 equals MethodInvocation p1 MemberReference p0 isAncestorOf BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""cannot remove ancestor node"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End CatchClause CatchClauseParameter MalformedPathException mpe LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""internal error: failed to determine degree of relationship"" StatementExpression MethodInvocation log MemberReference msg MemberReference mpe error ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference mpe StatementExpression MethodInvocation MemberReference existingState BinaryOperation | BinaryOperation | BinaryOperation | MemberReference CHECK_ACCESS MemberReference CHECK_LOCK MemberReference CHECK_VERSIONING MemberReference CHECK_CONSTRAINTS checkRemoveNode StatementExpression MethodInvocation MemberReference existingState removeNodeState End BreakStatement SwitchStatementCase ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""unknown flag"" End StatementExpression Assignment MemberReference newState MethodInvocation stateMgr MemberReference uuid MethodInvocation srcState getNodeTypeName MemberReference destParentUUID createNew = StatementExpression MethodInvocation newState MethodInvocation srcState getMixinTypeNames setMixinTypeNames StatementExpression MethodInvocation newState MethodInvocation srcState getDefinitionId setDefinitionId LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation srcState MethodInvocation iterator getChildNodeEntries WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation iter next LocalVariableDeclaration ReferenceType NodeId VariableDeclarator nodeId ClassCreator ReferenceType NodeId MethodInvocation entry getUUID IfStatement MethodInvocation ! srcAccessMgr MemberReference nodeId MemberReference AccessManager READ isGranted BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator srcChildState Cast ReferenceType NodeState MethodInvocation srcStateMgr MemberReference nodeId getItemState LocalVariableDeclaration ReferenceType NodeState VariableDeclarator newChildState MethodInvocation MemberReference srcChildState MemberReference srcStateMgr MemberReference srcAccessMgr MemberReference uuid MemberReference flag MemberReference refTracker copyNodeState StatementExpression MethodInvocation stateMgr MemberReference newChildState store StatementExpression MethodInvocation newState MethodInvocation entry getName MethodInvocation newChildState getUUID addChildNodeEntry End StatementExpression Assignment MemberReference iter MethodInvocation srcState MethodInvocation iterator getPropertyNames = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator propName Cast ReferenceType QName MethodInvocation iter next LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MethodInvocation srcState getUUID MemberReference propName IfStatement MethodInvocation ! srcAccessMgr MemberReference propId MemberReference AccessManager READ isGranted BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator srcChildState Cast ReferenceType PropertyState MethodInvocation srcStateMgr MemberReference propId getItemState LocalVariableDeclaration ReferenceType PropDefId VariableDeclarator defId MethodInvocation srcChildState getDefinitionId LocalVariableDeclaration ReferenceType PropDef VariableDeclarator def MethodInvocation ntReg MemberReference defId getPropDef IfStatement MethodInvocation def MethodInvocation MemberReference QName MIX_LOCKABLE equals getDeclaringNodeType BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator newChildState MethodInvocation MemberReference srcChildState MemberReference uuid MemberReference propName copyPropertyState IfStatement BinaryOperation && MemberReference versionable BinaryOperation == MemberReference flag MemberReference COPY BlockStatement IfStatement MethodInvocation propName MemberReference QName JCR_VERSIONHISTORY equals BlockStatement LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh MethodInvocation MemberReference newState getOrCreateVersionHistory StatementExpression MethodInvocation newChildState ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue ClassCreator ReferenceType UUID MethodInvocation vh getUUID create setValues End IfStatement MethodInvocation propName MemberReference QName JCR_BASEVERSION equals BlockStatement LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh MethodInvocation MemberReference newState getOrCreateVersionHistory StatementExpression MethodInvocation newChildState ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue ClassCreator ReferenceType UUID MethodInvocation vh MethodInvocation getUUID getRootVersion create setValues End IfStatement MethodInvocation propName MemberReference QName JCR_PREDECESSORS equals BlockStatement LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh MethodInvocation MemberReference newState getOrCreateVersionHistory StatementExpression MethodInvocation newChildState ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue ClassCreator ReferenceType UUID MethodInvocation vh MethodInvocation getUUID getRootVersion create setValues End IfStatement MethodInvocation propName MemberReference QName JCR_ISCHECKEDOUT equals BlockStatement StatementExpression MethodInvocation newChildState ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue Literal true create setValues End End IfStatement BinaryOperation == MethodInvocation newChildState getType MemberReference PropertyType REFERENCE BlockStatement StatementExpression MethodInvocation refTracker MemberReference newChildState processedReference End StatementExpression MethodInvocation stateMgr MemberReference newChildState store StatementExpression MethodInvocation newState MemberReference propName addPropertyName End ReturnStatement MemberReference newState CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to copy state of "" MethodInvocation srcState getId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise MethodDeclaration /**
     * Copies the specified property state.
     *
     * @param srcState
     * @param parentUUID
     * @param propName
     * @return
     * @throws RepositoryException
     */ Modifier private ReferenceType PropertyState copyPropertyState FormalParameter ReferenceType PropertyState srcState FormalParameter ReferenceType String parentUUID FormalParameter ReferenceType QName propName RepositoryException LocalVariableDeclaration ReferenceType PropDefId VariableDeclarator defId MethodInvocation srcState getDefinitionId LocalVariableDeclaration ReferenceType PropDef VariableDeclarator def MethodInvocation ntReg MemberReference defId getPropDef LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator newState MethodInvocation stateMgr MemberReference propName MemberReference parentUUID createNew StatementExpression MethodInvocation newState MemberReference defId setDefinitionId StatementExpression MethodInvocation newState MethodInvocation srcState getType setType StatementExpression MethodInvocation newState MethodInvocation srcState isMultiValued setMultiValued LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation srcState getValues IfStatement BinaryOperation != MemberReference values Literal null BlockStatement IfStatement BinaryOperation && MethodInvocation def MethodInvocation MemberReference QName MIX_REFERENCEABLE equals getDeclaringNodeType MethodInvocation propName MemberReference QName JCR_UUID equals BlockStatement StatementExpression MethodInvocation newState ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue MemberReference parentUUID create setValues BlockStatement LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator newValues ArrayCreator ReferenceType InternalValue MemberReference values length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i newValues MemberReference ArraySelector MemberReference i MethodInvocation createCopy values = End StatementExpression MethodInvocation newState MemberReference newValues setValues End End ReturnStatement MemberReference newState MethodDeclaration /**
     * Returns the version history of the given node state. A new
     * version history will be created if doesn't exist yet.
     *
     * @param node node state
     * @return the version history of the target node state
     * @throws RepositoryException if an error occurs
     */ Modifier private ReferenceType VersionHistory getOrCreateVersionHistory FormalParameter ReferenceType NodeState node RepositoryException LocalVariableDeclaration ReferenceType VersionManager VariableDeclarator vMgr MethodInvocation session getVersionManager LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh MethodInvocation vMgr MemberReference session MemberReference node getVersionHistory IfStatement BinaryOperation == MemberReference vh Literal null BlockStatement StatementExpression Assignment MemberReference vh MethodInvocation vMgr MemberReference session MemberReference node createVersionHistory = End ReturnStatement MemberReference vh ReferenceType ItemValidator",0
378,378,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.client.methods Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.DavMethods ClassDeclaration Modifier public /**
 * <code>VersionControlMethod</code>...
 */ VersionControlMethod FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType VersionControlMethod getLogger ConstructorDeclaration Modifier public VersionControlMethod FormalParameter ReferenceType String uri StatementExpression SuperConstructorInvocation MemberReference uri MethodDeclaration /**
     * @see org.apache.commons.httpclient.HttpMethod#getName()
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference DavMethods METHOD_VERSION_CONTROL ReferenceType DavMethodBase",1
549,549,,0
190,190,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.collect ClassDeclaration Modifier public /**
 * Collect properties only
 */ CollectProperties MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected BasicType boolean isCollectNodes ReturnStatement Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected BasicType boolean isCollectProperties ReturnStatement Literal true ReferenceType AbstractCollect",0
797,797,,1
272,272,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib.utils InterfaceDeclaration Modifier public /**
 * JCR Taglib Constants
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ JCRTagConstants ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_DEFAULT_REPOSITORY Literal ""jcr/repositoryFactory"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_BEAN_FACTORY Literal ""jcr/beanFactory"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_ANON_USER Literal ""jcr/login/anonuser"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_ANON_PWD Literal ""jcr/login/anonpwd"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_DEFAULT_TEMPLATE_ENGINE Literal ""jcr/template/engine/default"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_DEFAULT_TRAVERSER Literal ""jcr/traverser/default"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_DEFAULT_ITEM_FILTER Literal ""jcr/filter/default"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_DEFAULT_ITEM_COMPARATOR Literal ""jcr/comparator/default"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_DEFAULT_SIZE_CALCULATOR Literal ""jcr/size/default"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator JNDI_DEFAULT_SIZE_FORMAT Literal ""jcr/size/format/default"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator KEY_SESSION Literal ""jcrsession"" ConstantDeclaration Modifier public static ReferenceType String VariableDeclarator KEY_CD Literal ""jcrcd""",1
301,301,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.cli ClassDeclaration Modifier public /**
 * A command line flag <br>
 * A flag is a parameter that has no other value that the option name. e.g.
 * -[flag name].
 */ Flag FieldDeclaration /** true if flag is present in the user's input */ Modifier private BasicType boolean VariableDeclarator present Literal false MethodDeclaration /**
     * @return true if the flag exists in the user's input
     */ Modifier public BasicType boolean isPresent ReturnStatement MemberReference present MethodDeclaration /**
     * @param present
     *        the present to set
     */ Modifier public setPresent FormalParameter BasicType boolean present StatementExpression Assignment This MemberReference present MemberReference present = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getValue ReturnStatement MethodInvocation Boolean MemberReference present toString MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public setValue FormalParameter ReferenceType String value StatementExpression Assignment MemberReference present MethodInvocation Boolean MemberReference value getBoolean = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Object clone LocalVariableDeclaration ReferenceType Flag VariableDeclarator f ClassCreator ReferenceType Flag StatementExpression Assignment MemberReference f present This MemberReference present = StatementExpression This MethodInvocation MemberReference f clone ReturnStatement MemberReference f MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isRequired ReturnStatement Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getLocalizedArgName ReturnStatement Literal """" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getLocalizedDescription IfStatement BinaryOperation == This MethodInvocation getDescription Literal null BlockStatement ReturnStatement MethodInvocation bundle BinaryOperation + BinaryOperation + Literal ""param.flag."" This MethodInvocation getName Literal "".desc"" getString BlockStatement ReturnStatement MethodInvocation bundle This MethodInvocation getDescription getString End ReferenceType AbstractParameter",1
712,712,,1
437,437,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.fs.db Import org.apache.jackrabbit.core.fs.FileSystemException Import org.apache.log4j.Logger Import java.sql.DriverManager ClassDeclaration Modifier public /**
 * <code>DB2FileSystem</code> is a JDBC-based <code>FileSystem</code>
 * implementation for Jackrabbit that persists file system entries in a
 * DB2 database.
 * <p/>
 * It is configured through the following properties:
 * <ul>
 * <li><code>driver</code>: the FQN name of the JDBC driver class
 * (default: <code>""com.ibm.db2.jcc.DB2Driver""</code>)</li>
 * <li><code>schema</code>: type of schema to be used
 * (default: <code>""db2""</code>)</li>
 * <li><code>url</code>: the database url (e.g.
 * <code>""jdbc:db2:[database]""</code>)</li>
 * <li><code>user</code>: the database user</li>
 * <li><code>password</code>: the user's password</li>
 * <li><code>schemaObjectPrefix</code>: prefix to be prepended to schema objects</li>
 * </ul>
 * See also {@link DbFileSystem}.
 * <p/>
 * The following is a fragment from a sample configuration:
 * <pre>
 *   &lt;FileSystem class=""org.apache.jackrabbit.core.fs.db.DB2FileSystem""&gt;
 *       &lt;param name=""url"" value=""jdbc:db2:test""/&gt;
 *       &lt;param name=""schemaObjectPrefix"" value=""rep_""/&gt;
 *   &lt;/FileSystem&gt;
 * </pre>
 */ DB2FileSystem FieldDeclaration /**
     * Logger instance
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType DB2FileSystem getLogger ConstructorDeclaration Modifier public /**
     * Creates a new <code>DB2FileSystem</code> instance.
     */ DB2FileSystem StatementExpression Assignment MemberReference schema Literal ""db2"" = StatementExpression Assignment MemberReference driver Literal ""com.ibm.db2.jcc.DB2Driver"" = StatementExpression Assignment MemberReference schemaObjectPrefix Literal """" = StatementExpression Assignment MemberReference user Literal """" = StatementExpression Assignment MemberReference password Literal """" = StatementExpression Assignment MemberReference initialized Literal false = MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * Since DB2 requires parameter markers within the select clause to be
     * explicitly typed using <code>cast(? as type_name)</code> some statements
     * had to be changed accordingly.
     */ Modifier public init FileSystemException IfStatement MemberReference initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""already initialized"" End TryStatement StatementExpression MethodInvocation Class MemberReference driver forName StatementExpression Assignment MemberReference con MethodInvocation DriverManager MemberReference url MemberReference user MemberReference password getConnection = StatementExpression MethodInvocation con Literal true setAutoCommit StatementExpression MethodInvocation prepareSchemaObjectPrefix StatementExpression MethodInvocation checkSchema StatementExpression Assignment MemberReference insertFileStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""insert into "" MemberReference schemaObjectPrefix Literal ""FSENTRY "" Literal ""(FSENTRY_PATH, FSENTRY_NAME, FSENTRY_DATA, "" Literal ""FSENTRY_LASTMOD, FSENTRY_LENGTH) "" Literal ""values (?, ?, ?, ?, ?)"" prepareStatement = StatementExpression Assignment MemberReference insertFolderStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""insert into "" MemberReference schemaObjectPrefix Literal ""FSENTRY "" Literal ""(FSENTRY_PATH, FSENTRY_NAME, FSENTRY_LASTMOD, FSENTRY_LENGTH) "" Literal ""values (?, ?, ?, 0)"" prepareStatement = StatementExpression Assignment MemberReference updateDataStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""update "" MemberReference schemaObjectPrefix Literal ""FSENTRY "" Literal ""set FSENTRY_DATA = ?, FSENTRY_LASTMOD = ?, FSENTRY_LENGTH = ? "" Literal ""where FSENTRY_PATH = ? and FSENTRY_NAME = ? "" Literal ""and FSENTRY_DATA is not null"" prepareStatement = StatementExpression Assignment MemberReference updateLastModifiedStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""update "" MemberReference schemaObjectPrefix Literal ""FSENTRY set FSENTRY_LASTMOD = ? "" Literal ""where FSENTRY_PATH = ? and FSENTRY_NAME = ? "" Literal ""and FSENTRY_DATA is not null"" prepareStatement = StatementExpression Assignment MemberReference selectExistStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""select 1 from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_NAME = ?"" prepareStatement = StatementExpression Assignment MemberReference selectFileExistStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""select 1 from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_NAME = ? and FSENTRY_DATA is not null"" prepareStatement = StatementExpression Assignment MemberReference selectFolderExistStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""select 1 from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_NAME = ? and FSENTRY_DATA is null"" prepareStatement = StatementExpression Assignment MemberReference selectFileNamesStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""select FSENTRY_NAME from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_DATA is not null"" prepareStatement = StatementExpression Assignment MemberReference selectFolderNamesStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""select FSENTRY_NAME from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_DATA is null"" prepareStatement = StatementExpression Assignment MemberReference selectFileAndFolderNamesStmt MethodInvocation con BinaryOperation + BinaryOperation + Literal ""select FSENTRY_NAME from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ?"" prepareStatement = StatementExpression Assignment MemberReference selectChildCountStmt MethodInvocation con BinaryOperation + BinaryOperation + Literal ""select count(FSENTRY_NAME) from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ?  "" prepareStatement = StatementExpression Assignment MemberReference selectDataStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""select FSENTRY_DATA from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_NAME = ? and FSENTRY_DATA is not null"" prepareStatement = StatementExpression Assignment MemberReference selectLastModifiedStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""select FSENTRY_LASTMOD from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_NAME = ?"" prepareStatement = StatementExpression Assignment MemberReference selectLengthStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""select FSENTRY_LENGTH from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_NAME = ? and FSENTRY_DATA is not null"" prepareStatement = StatementExpression Assignment MemberReference deleteFileStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + Literal ""delete from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_NAME = ? and FSENTRY_DATA is not null"" prepareStatement = StatementExpression Assignment MemberReference deleteFolderStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""delete from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where "" Literal ""(FSENTRY_PATH = ? and FSENTRY_NAME = ? and FSENTRY_DATA is null) "" Literal ""or (FSENTRY_PATH = ?) "" Literal ""or (FSENTRY_PATH like ?) "" prepareStatement = StatementExpression Assignment MemberReference copyFileStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""insert into "" MemberReference schemaObjectPrefix Literal ""FSENTRY "" Literal ""(FSENTRY_PATH, FSENTRY_NAME, FSENTRY_DATA, "" Literal ""FSENTRY_LASTMOD, FSENTRY_LENGTH) "" Literal ""select cast(? as varchar(745)), cast(? as varchar(255)), FSENTRY_DATA, "" Literal ""FSENTRY_LASTMOD, FSENTRY_LENGTH from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_NAME = ? and FSENTRY_DATA is not null"" prepareStatement = StatementExpression Assignment MemberReference copyFilesStmt MethodInvocation con BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""insert into "" MemberReference schemaObjectPrefix Literal ""FSENTRY "" Literal ""(FSENTRY_PATH, FSENTRY_NAME, FSENTRY_DATA, "" Literal ""FSENTRY_LASTMOD, FSENTRY_LENGTH) "" Literal ""select cast(? as varchar(745)), FSENTRY_NAME, FSENTRY_DATA, "" Literal ""FSENTRY_LASTMOD, FSENTRY_LENGTH from "" MemberReference schemaObjectPrefix Literal ""FSENTRY where FSENTRY_PATH = ? "" Literal ""and FSENTRY_DATA is not null"" prepareStatement = StatementExpression MethodInvocation verifyRoodExists StatementExpression Assignment MemberReference initialized Literal true = CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""failed to initialize file system"" StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType FileSystemException MemberReference msg MemberReference e ReferenceType DbFileSystem",0
267,267,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.query.AndQueryNode Import org.apache.jackrabbit.core.query.DerefQueryNode Import org.apache.jackrabbit.core.query.ExactQueryNode Import org.apache.jackrabbit.core.query.LocationStepQueryNode Import org.apache.jackrabbit.core.query.NodeTypeQueryNode Import org.apache.jackrabbit.core.query.NotQueryNode Import org.apache.jackrabbit.core.query.OrQueryNode Import org.apache.jackrabbit.core.query.OrderQueryNode Import org.apache.jackrabbit.core.query.PathQueryNode Import org.apache.jackrabbit.core.query.PropertyTypeRegistry Import org.apache.jackrabbit.core.query.QueryConstants Import org.apache.jackrabbit.core.query.QueryNode Import org.apache.jackrabbit.core.query.QueryNodeVisitor Import org.apache.jackrabbit.core.query.QueryRootNode Import org.apache.jackrabbit.core.query.RelationQueryNode Import org.apache.jackrabbit.core.query.TextsearchQueryNode Import org.apache.jackrabbit.core.query.lucene.fulltext.QueryParser Import org.apache.jackrabbit.core.query.lucene.fulltext.ParseException Import org.apache.jackrabbit.core.state.ItemStateManager Import org.apache.jackrabbit.name.IllegalNameException Import org.apache.jackrabbit.name.MalformedPathException Import org.apache.jackrabbit.name.NoPrefixDeclaredException Import org.apache.jackrabbit.name.Path Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.name.UnknownPrefixException Import org.apache.jackrabbit.util.ISO8601 Import org.apache.log4j.Logger Import org.apache.lucene.analysis.Analyzer Import org.apache.lucene.index.Term Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.search.Query Import org.apache.lucene.search.TermQuery Import org.apache.xerces.util.XMLChar Import javax.jcr.NamespaceException Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.NodeTypeIterator Import javax.jcr.nodetype.NodeTypeManager Import javax.jcr.query.InvalidQueryException Import java.util.ArrayList Import java.util.Arrays Import java.util.Calendar Import java.util.Iterator Import java.util.List ClassDeclaration Modifier public /**
 * Implements a query builder that takes an abstract query tree and creates
 * a lucene {@link org.apache.lucene.search.Query} tree that can be executed
 * on an index.
 * todo introduce a node type hierarchy for efficient translation of NodeTypeQueryNode
 */ LuceneQueryBuilder FieldDeclaration /**
     * Logger for this class
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType LuceneQueryBuilder getLogger FieldDeclaration /**
     * QName for jcr:primaryType
     */ Modifier private static ReferenceType QName VariableDeclarator primaryType MemberReference QName JCR_PRIMARYTYPE FieldDeclaration /**
     * QName for jcr:mixinTypes
     */ Modifier private static ReferenceType QName VariableDeclarator mixinTypes MemberReference QName JCR_MIXINTYPES FieldDeclaration /**
     * Root node of the abstract query tree
     */ Modifier private ReferenceType QueryRootNode VariableDeclarator root FieldDeclaration /**
     * Session of the user executing this query
     */ Modifier private ReferenceType SessionImpl VariableDeclarator session FieldDeclaration /**
     * The shared item state manager of the workspace.
     */ Modifier private ReferenceType ItemStateManager VariableDeclarator sharedItemMgr FieldDeclaration /**
     * Namespace mappings to internal prefixes
     */ Modifier private ReferenceType NamespaceMappings VariableDeclarator nsMappings FieldDeclaration /**
     * The analyzer instance to use for contains function query parsing
     */ Modifier private ReferenceType Analyzer VariableDeclarator analyzer FieldDeclaration /**
     * The property type registry.
     */ Modifier private ReferenceType PropertyTypeRegistry VariableDeclarator propRegistry FieldDeclaration /**
     * Exceptions thrown during tree translation
     */ Modifier private ReferenceType List VariableDeclarator exceptions ClassCreator ReferenceType ArrayList ConstructorDeclaration Modifier private /**
     * Creates a new <code>LuceneQueryBuilder</code> instance.
     *
     * @param root          the root node of the abstract query tree.
     * @param session       of the user executing this query.
     * @param sharedItemMgr the shared item state manager of the workspace.
     * @param nsMappings    namespace resolver for internal prefixes.
     * @param analyzer      for parsing the query statement of the contains function.
     * @param propReg       the property type registry.
     */ LuceneQueryBuilder FormalParameter ReferenceType QueryRootNode root FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType ItemStateManager sharedItemMgr FormalParameter ReferenceType NamespaceMappings nsMappings FormalParameter ReferenceType Analyzer analyzer FormalParameter ReferenceType PropertyTypeRegistry propReg StatementExpression Assignment This MemberReference root MemberReference root = StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference sharedItemMgr MemberReference sharedItemMgr = StatementExpression Assignment This MemberReference nsMappings MemberReference nsMappings = StatementExpression Assignment This MemberReference analyzer MemberReference analyzer = StatementExpression Assignment This MemberReference propRegistry MemberReference propReg = MethodDeclaration /**
     * Creates a lucene {@link org.apache.lucene.search.Query} tree from an
     * abstract query tree.
     *
     * @param root          the root node of the abstract query tree.
     * @param session       of the user executing the query.
     * @param sharedItemMgr the shared item state manager of the workspace.
     * @param nsMappings    namespace resolver for internal prefixes.
     * @param analyzer      for parsing the query statement of the contains function.
     * @param propReg       the property type registry to lookup type information.
     * @return the lucene query tree.
     * @throws RepositoryException if an error occurs during the translation.
     */ Modifier public static ReferenceType Query createQuery FormalParameter ReferenceType QueryRootNode root FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType ItemStateManager sharedItemMgr FormalParameter ReferenceType NamespaceMappings nsMappings FormalParameter ReferenceType Analyzer analyzer FormalParameter ReferenceType PropertyTypeRegistry propReg RepositoryException LocalVariableDeclaration ReferenceType LuceneQueryBuilder VariableDeclarator builder ClassCreator ReferenceType LuceneQueryBuilder MemberReference root MemberReference session MemberReference sharedItemMgr MemberReference nsMappings MemberReference analyzer MemberReference propReg LocalVariableDeclaration ReferenceType Query VariableDeclarator q MethodInvocation builder createLuceneQuery IfStatement BinaryOperation > MethodInvocation builder.exceptions size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator msg ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation builder.exceptions iterator MethodInvocation it hasNext BlockStatement StatementExpression MethodInvocation msg MethodInvocation Literal '\n' append MethodInvocation it MethodInvocation toString next append End ThrowStatement ClassCreator ReferenceType RepositoryException BinaryOperation + Literal ""Exception building query: "" MethodInvocation msg toString End ReturnStatement MemberReference q MethodDeclaration /**
     * Starts the tree traversal and returns the lucene
     * {@link org.apache.lucene.search.Query}.
     *
     * @return the lucene <code>Query</code>.
     */ Modifier private ReferenceType Query createLuceneQuery ReturnStatement Cast ReferenceType Query MethodInvocation root This Literal null accept MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType QueryRootNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator root ClassCreator ReferenceType BooleanQuery LocalVariableDeclaration ReferenceType Query VariableDeclarator wrapped MemberReference root IfStatement BinaryOperation != MethodInvocation node getLocationNode Literal null BlockStatement StatementExpression Assignment MemberReference wrapped Cast ReferenceType Query MethodInvocation node MethodInvocation This MemberReference root accept getLocationNode = End ReturnStatement MemberReference wrapped MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType OrQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator orQuery ClassCreator ReferenceType BooleanQuery LocalVariableDeclaration ReferenceType Object VariableDeclarator result MethodInvocation node This Literal null acceptOperands ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference result length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator operand Cast ReferenceType Query MemberReference ArraySelector MemberReference i result StatementExpression MethodInvocation orQuery MemberReference operand Literal false Literal false add End ReturnStatement MemberReference orQuery MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType AndQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType Object VariableDeclarator result MethodInvocation node This Literal null acceptOperands IfStatement BinaryOperation == MemberReference result length Literal 0 BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator andQuery ClassCreator ReferenceType BooleanQuery ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference result length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator operand Cast ReferenceType Query MemberReference ArraySelector MemberReference i result StatementExpression MethodInvocation andQuery MemberReference operand Literal true Literal false add End ReturnStatement MemberReference andQuery MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType NotQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType Object VariableDeclarator result MethodInvocation node This Literal null acceptOperands IfStatement BinaryOperation == MemberReference result length Literal 0 BlockStatement ReturnStatement MemberReference data End LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator b ClassCreator ReferenceType BooleanQuery ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference result length MemberReference ++ i BlockStatement StatementExpression MethodInvocation b Cast ReferenceType Query MemberReference ArraySelector MemberReference i result Literal false Literal false add End ReturnStatement ClassCreator ReferenceType NotQuery MemberReference b MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType ExactQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType String VariableDeclarator field Literal """" LocalVariableDeclaration ReferenceType String VariableDeclarator value Literal """" TryStatement StatementExpression Assignment MemberReference field MethodInvocation node MethodInvocation MemberReference nsMappings toJCRName getPropertyName = StatementExpression Assignment MemberReference value MethodInvocation node MethodInvocation MemberReference nsMappings toJCRName getValue = CatchClause CatchClauseParameter NoPrefixDeclaredException e ReturnStatement ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field MemberReference value createNamedValue MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType NodeTypeQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType String VariableDeclarator field Literal """" LocalVariableDeclaration ReferenceType List VariableDeclarator values ClassCreator ReferenceType ArrayList TryStatement StatementExpression MethodInvocation values MethodInvocation node MethodInvocation MemberReference nsMappings toJCRName getValue add LocalVariableDeclaration ReferenceType NodeTypeManager VariableDeclarator ntMgr MethodInvocation session MethodInvocation getNodeTypeManager getWorkspace LocalVariableDeclaration ReferenceType NodeType VariableDeclarator base MethodInvocation ntMgr MethodInvocation node MethodInvocation MethodInvocation session getNamespaceResolver toJCRName getValue getNodeType IfStatement MethodInvocation base isMixin BlockStatement StatementExpression Assignment MemberReference field MethodInvocation mixinTypes MemberReference nsMappings toJCRName = BlockStatement StatementExpression Assignment MemberReference field MethodInvocation primaryType MemberReference nsMappings toJCRName = End LocalVariableDeclaration ReferenceType NodeTypeIterator VariableDeclarator allTypes MethodInvocation ntMgr getAllNodeTypes WhileStatement MethodInvocation allTypes hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator nt MethodInvocation allTypes nextNodeType LocalVariableDeclaration ReferenceType NodeType VariableDeclarator superTypes MethodInvocation nt getSupertypes IfStatement MethodInvocation Arrays MethodInvocation MemberReference base contains MemberReference superTypes asList BlockStatement StatementExpression MethodInvocation values MethodInvocation nsMappings MethodInvocation nt getName MethodInvocation session getNamespaceResolver translatePropertyName add End End CatchClause CatchClauseParameter IllegalNameException e StatementExpression MethodInvocation exceptions MemberReference e add CatchClause CatchClauseParameter UnknownPrefixException e StatementExpression MethodInvocation exceptions MemberReference e add CatchClause CatchClauseParameter NoPrefixDeclaredException e StatementExpression MethodInvocation exceptions MemberReference e add CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation exceptions MemberReference e add IfStatement BinaryOperation == MethodInvocation values size Literal 0 BlockStatement ReturnStatement ClassCreator ReferenceType BooleanQuery IfStatement BinaryOperation == MethodInvocation values size Literal 1 BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator t ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field Cast ReferenceType String MethodInvocation values Literal 0 get createNamedValue ReturnStatement ClassCreator ReferenceType TermQuery MemberReference t BlockStatement LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator b ClassCreator ReferenceType BooleanQuery ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation values iterator MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator t ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field Cast ReferenceType String MethodInvocation it next createNamedValue StatementExpression MethodInvocation b ClassCreator ReferenceType TermQuery MemberReference t Literal false Literal false add End ReturnStatement MemberReference b End End MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType TextsearchQueryNode node FormalParameter ReferenceType Object data TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fieldname IfStatement BinaryOperation == MethodInvocation node getPropertyName Literal null BlockStatement StatementExpression Assignment MemberReference fieldname MemberReference FieldNames FULLTEXT = BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator tmp ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation tmp MethodInvocation nsMappings MethodInvocation node MethodInvocation getNamespaceURI getPropertyName getPrefix append StatementExpression MethodInvocation tmp MethodInvocation MemberReference FieldNames FULLTEXT_PREFIX append Literal "":"" append StatementExpression MethodInvocation tmp MethodInvocation node MethodInvocation getLocalName getPropertyName append StatementExpression Assignment MemberReference fieldname MethodInvocation tmp toString = End LocalVariableDeclaration ReferenceType QueryParser VariableDeclarator parser ClassCreator ReferenceType QueryParser MemberReference fieldname MemberReference analyzer StatementExpression MethodInvocation parser MemberReference QueryParser DEFAULT_OPERATOR_AND setOperator LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator query ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType String VariableDeclarator textsearch MethodInvocation node getQuery StatementExpression Assignment MemberReference textsearch MethodInvocation textsearch Literal ""AND"" Literal ""and"" replaceAll = StatementExpression Assignment MemberReference textsearch MethodInvocation textsearch Literal ""NOT"" Literal ""not"" replaceAll = LocalVariableDeclaration BasicType boolean VariableDeclarator escaped Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation textsearch length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MethodInvocation textsearch MemberReference i charAt Literal '\\' BlockStatement IfStatement MemberReference escaped BlockStatement StatementExpression MethodInvocation query Literal ""\\\\"" append StatementExpression Assignment MemberReference escaped Literal false = BlockStatement StatementExpression Assignment MemberReference escaped Literal true = End IfStatement BinaryOperation == MethodInvocation textsearch MemberReference i charAt Literal '\'' BlockStatement IfStatement MemberReference escaped BlockStatement StatementExpression MethodInvocation query Literal '\'' append StatementExpression Assignment MemberReference escaped Literal false = BlockStatement StatementExpression MethodInvocation query Literal '\""' append End BlockStatement IfStatement MemberReference escaped BlockStatement StatementExpression MethodInvocation query Literal '\\' append StatementExpression Assignment MemberReference escaped Literal false = End StatementExpression MethodInvocation query MethodInvocation textsearch MemberReference i charAt append End End End ReturnStatement MethodInvocation parser MethodInvocation query toString parse CatchClause CatchClauseParameter NamespaceException e StatementExpression MethodInvocation exceptions MemberReference e add CatchClause CatchClauseParameter ParseException e StatementExpression MethodInvocation exceptions MemberReference e add ReturnStatement Literal null MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType PathQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType Query VariableDeclarator context Literal null LocalVariableDeclaration ReferenceType LocationStepQueryNode VariableDeclarator steps MethodInvocation node getPathSteps IfStatement BinaryOperation > MemberReference steps length Literal 0 BlockStatement IfStatement BinaryOperation && MethodInvocation node isAbsolute MemberReference ! ArraySelector Literal 0 MethodInvocation getIncludeDescendants steps BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator nameTest MemberReference ArraySelector Literal 0 MethodInvocation getNameTest steps IfStatement BinaryOperation == MemberReference nameTest Literal null BlockStatement StatementExpression Assignment MemberReference context ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames PARENT Literal """" = IfStatement BinaryOperation == MethodInvocation nameTest MethodInvocation length getLocalName Literal 0 BlockStatement StatementExpression Assignment MemberReference context ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames PARENT Literal """" = BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Literal """" TryStatement StatementExpression Assignment MemberReference name MethodInvocation nameTest MemberReference nsMappings toJCRName = CatchClause CatchClauseParameter NoPrefixDeclaredException e StatementExpression MethodInvocation exceptions MemberReference e add LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator and ClassCreator ReferenceType BooleanQuery StatementExpression MethodInvocation and ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames PARENT Literal """" Literal true Literal false add StatementExpression MethodInvocation and ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames LABEL MemberReference name Literal true Literal false add StatementExpression Assignment MemberReference context MemberReference and = End End LocalVariableDeclaration ReferenceType LocationStepQueryNode VariableDeclarator tmp ArrayCreator ReferenceType LocationStepQueryNode BinaryOperation - MemberReference steps length Literal 1 StatementExpression MethodInvocation System MemberReference steps Literal 1 MemberReference tmp Literal 0 BinaryOperation - MemberReference steps length Literal 1 arraycopy StatementExpression Assignment MemberReference steps MemberReference tmp = BlockStatement StatementExpression Assignment MemberReference context ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames PARENT Literal """" = End BlockStatement StatementExpression MethodInvocation exceptions ClassCreator ReferenceType InvalidQueryException Literal ""Number of location steps must be > 0"" add End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference steps length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference context Cast ReferenceType Query MemberReference ArraySelector MemberReference i MethodInvocation This MemberReference context accept steps = End IfStatement BinaryOperation instanceof MemberReference data ReferenceType BooleanQuery BlockStatement LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator constraint Cast ReferenceType BooleanQuery MemberReference data IfStatement BinaryOperation > MethodInvocation constraint MemberReference length getClauses Literal 0 BlockStatement StatementExpression MethodInvocation constraint MemberReference context Literal true Literal false add StatementExpression Assignment MemberReference context MemberReference constraint = End End ReturnStatement MemberReference context MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType LocationStepQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType Query VariableDeclarator context Cast ReferenceType Query MemberReference data LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator andQuery ClassCreator ReferenceType BooleanQuery IfStatement BinaryOperation == MemberReference context Literal null BlockStatement StatementExpression MethodInvocation exceptions ClassCreator ReferenceType IllegalArgumentException Literal ""Unsupported query"" add End LocalVariableDeclaration ReferenceType Object VariableDeclarator predicates MethodInvocation node This MemberReference data acceptOperands ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference predicates length MemberReference ++ i BlockStatement StatementExpression MethodInvocation andQuery Cast ReferenceType Query MemberReference ArraySelector MemberReference i predicates Literal true Literal false add End LocalVariableDeclaration ReferenceType QueryNode VariableDeclarator pred MethodInvocation node getPredicates ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pred length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i MethodInvocation getType pred MemberReference QueryNode TYPE_RELATION BlockStatement LocalVariableDeclaration ReferenceType RelationQueryNode VariableDeclarator pos Cast ReferenceType RelationQueryNode MemberReference ArraySelector MemberReference i pred IfStatement BinaryOperation == MethodInvocation pos getValueType MemberReference QueryConstants TYPE_POSITION BlockStatement StatementExpression MethodInvocation node MethodInvocation pos getPositionValue setIndex End End End LocalVariableDeclaration ReferenceType TermQuery VariableDeclarator nameTest Literal null IfStatement BinaryOperation != MethodInvocation node getNameTest Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator internalName MethodInvocation node MethodInvocation MemberReference nsMappings toJCRName getNameTest StatementExpression Assignment MemberReference nameTest ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames LABEL MemberReference internalName = CatchClause CatchClauseParameter NoPrefixDeclaredException e StatementExpression MethodInvocation exceptions MemberReference e add End IfStatement MethodInvocation node getIncludeDescendants BlockStatement IfStatement BinaryOperation != MemberReference nameTest Literal null BlockStatement StatementExpression MethodInvocation andQuery ClassCreator ReferenceType DescendantSelfAxisQuery MemberReference context MemberReference nameTest Literal true Literal false add BlockStatement IfStatement BinaryOperation > MemberReference predicates length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType PathQueryNode VariableDeclarator pathNode Cast ReferenceType PathQueryNode MethodInvocation node getParent IfStatement BinaryOperation != MethodInvocation pathNode ArraySelector Literal 0 getPathSteps MemberReference node BlockStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator subQuery ClassCreator ReferenceType DescendantSelfAxisQuery MemberReference context MemberReference andQuery Literal false StatementExpression Assignment MemberReference andQuery ClassCreator ReferenceType BooleanQuery = StatementExpression MethodInvocation andQuery MemberReference subQuery Literal true Literal false add End BlockStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator subQuery Literal null TryStatement StatementExpression Assignment MemberReference subQuery ClassCreator ReferenceType MatchAllQuery MethodInvocation primaryType MemberReference nsMappings toJCRName = CatchClause CatchClauseParameter NoPrefixDeclaredException e LocalVariableDeclaration ReferenceType PathQueryNode VariableDeclarator pathNode Cast ReferenceType PathQueryNode MethodInvocation node getParent IfStatement BinaryOperation != MethodInvocation pathNode ArraySelector Literal 0 getPathSteps MemberReference node BlockStatement StatementExpression Assignment MemberReference context ClassCreator ReferenceType DescendantSelfAxisQuery MemberReference context MemberReference subQuery = StatementExpression MethodInvocation andQuery ClassCreator ReferenceType ChildAxisQuery MemberReference sharedItemMgr MemberReference context Literal null MethodInvocation node getIndex Literal true Literal false add BlockStatement StatementExpression MethodInvocation andQuery MemberReference subQuery Literal true Literal false add End End End BlockStatement IfStatement BinaryOperation != MemberReference nameTest Literal null BlockStatement StatementExpression MethodInvocation andQuery ClassCreator ReferenceType ChildAxisQuery MemberReference sharedItemMgr MemberReference context MethodInvocation nameTest MethodInvocation text getTerm MethodInvocation node getIndex Literal true Literal false add BlockStatement StatementExpression MethodInvocation andQuery ClassCreator ReferenceType ChildAxisQuery MemberReference sharedItemMgr MemberReference context Literal null MethodInvocation node getIndex Literal true Literal false add End End ReturnStatement MemberReference andQuery MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType DerefQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType Query VariableDeclarator context Cast ReferenceType Query MemberReference data IfStatement BinaryOperation == MemberReference context Literal null BlockStatement StatementExpression MethodInvocation exceptions ClassCreator ReferenceType IllegalArgumentException Literal ""Unsupported query"" add End TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator refProperty MethodInvocation node MethodInvocation MemberReference nsMappings toJCRName getRefProperty LocalVariableDeclaration ReferenceType String VariableDeclarator nameTest Literal null IfStatement BinaryOperation != MethodInvocation node getNameTest Literal null BlockStatement StatementExpression Assignment MemberReference nameTest MethodInvocation node MethodInvocation MemberReference nsMappings toJCRName getNameTest = End ReturnStatement ClassCreator ReferenceType DerefQuery MemberReference context MemberReference refProperty MemberReference nameTest CatchClause CatchClauseParameter NoPrefixDeclaredException e StatementExpression MethodInvocation exceptions MemberReference e add ReturnStatement MemberReference context MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType RelationQueryNode node FormalParameter ReferenceType Object data LocalVariableDeclaration ReferenceType Query VariableDeclarator query LocalVariableDeclaration ReferenceType String VariableDeclarator stringValues ArrayCreator ReferenceType String Literal 1 SwitchStatement MethodInvocation node getValueType SwitchStatementCase Literal 0 BreakStatement SwitchStatementCase MemberReference QueryConstants TYPE_DATE StatementExpression Assignment MemberReference ArraySelector Literal 0 stringValues MethodInvocation DateField MethodInvocation node getDateValue dateToString = BreakStatement SwitchStatementCase MemberReference QueryConstants TYPE_DOUBLE StatementExpression Assignment MemberReference ArraySelector Literal 0 stringValues MethodInvocation DoubleField MethodInvocation node getDoubleValue doubleToString = BreakStatement SwitchStatementCase MemberReference QueryConstants TYPE_LONG StatementExpression Assignment MemberReference ArraySelector Literal 0 stringValues MethodInvocation LongField MethodInvocation node getLongValue longToString = BreakStatement SwitchStatementCase MemberReference QueryConstants TYPE_STRING IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_EQ_GENERAL BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_EQ_VALUE BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_NE_GENERAL BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_NE_VALUE BlockStatement StatementExpression Assignment MemberReference stringValues MethodInvocation MethodInvocation node getProperty MethodInvocation node getStringValue getStringValues = BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 0 stringValues MethodInvocation node getStringValue = End BreakStatement SwitchStatementCase MemberReference QueryConstants TYPE_POSITION ReturnStatement Literal null SwitchStatementCase ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Unknown relation type: "" MethodInvocation node getValueType End IfStatement BinaryOperation == MethodInvocation node getProperty Literal null BlockStatement StatementExpression MethodInvocation exceptions ClassCreator ReferenceType InvalidQueryException Literal ""@* not supported in predicate"" add ReturnStatement MemberReference data End LocalVariableDeclaration ReferenceType String VariableDeclarator field Literal """" TryStatement StatementExpression Assignment MemberReference field MethodInvocation node MethodInvocation MemberReference nsMappings toJCRName getProperty = CatchClause CatchClauseParameter NoPrefixDeclaredException e StatementExpression MethodInvocation exceptions MemberReference e add SwitchStatement MethodInvocation node getOperation SwitchStatementCase MemberReference QueryConstants OPERATION_EQ_VALUE MemberReference QueryConstants OPERATION_EQ_GENERAL LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator or ClassCreator ReferenceType BooleanQuery ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference stringValues length MemberReference ++ i BlockStatement StatementExpression MethodInvocation or ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field MemberReference ArraySelector MemberReference i stringValues createNamedValue Literal false Literal false add End StatementExpression Assignment MemberReference query MemberReference or = IfStatement BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_EQ_VALUE BlockStatement StatementExpression Assignment MemberReference query MethodInvocation MemberReference or MemberReference field createSingleValueConstraint = End BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_GE_VALUE MemberReference QueryConstants OPERATION_GE_GENERAL StatementExpression Assignment MemberReference or ClassCreator ReferenceType BooleanQuery = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference stringValues length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator lower ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field MemberReference ArraySelector MemberReference i stringValues createNamedValue LocalVariableDeclaration ReferenceType Term VariableDeclarator upper ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field Literal ""￿"" createNamedValue StatementExpression MethodInvocation or ClassCreator ReferenceType RangeQuery MemberReference lower MemberReference upper Literal true Literal false Literal false add End StatementExpression Assignment MemberReference query MemberReference or = IfStatement BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_GE_VALUE BlockStatement StatementExpression Assignment MemberReference query MethodInvocation MemberReference or MemberReference field createSingleValueConstraint = End BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_GT_VALUE MemberReference QueryConstants OPERATION_GT_GENERAL StatementExpression Assignment MemberReference or ClassCreator ReferenceType BooleanQuery = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference stringValues length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator lower ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field MemberReference ArraySelector MemberReference i stringValues createNamedValue LocalVariableDeclaration ReferenceType Term VariableDeclarator upper ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field Literal ""￿"" createNamedValue StatementExpression MethodInvocation or ClassCreator ReferenceType RangeQuery MemberReference lower MemberReference upper Literal false Literal false Literal false add End StatementExpression Assignment MemberReference query MemberReference or = IfStatement BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_GT_VALUE BlockStatement StatementExpression Assignment MemberReference query MethodInvocation MemberReference or MemberReference field createSingleValueConstraint = End BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_LE_VALUE MemberReference QueryConstants OPERATION_LE_GENERAL StatementExpression Assignment MemberReference or ClassCreator ReferenceType BooleanQuery = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference stringValues length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator lower ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field Literal """" createNamedValue LocalVariableDeclaration ReferenceType Term VariableDeclarator upper ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field MemberReference ArraySelector MemberReference i stringValues createNamedValue StatementExpression MethodInvocation or ClassCreator ReferenceType RangeQuery MemberReference lower MemberReference upper Literal true Literal false Literal false add End StatementExpression Assignment MemberReference query MemberReference or = IfStatement BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_LE_VALUE BlockStatement StatementExpression Assignment MemberReference query MethodInvocation MemberReference query MemberReference field createSingleValueConstraint = End BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_LIKE IfStatement MemberReference ArraySelector Literal 0 MethodInvocation Literal ""%"" equals stringValues BlockStatement StatementExpression Assignment MemberReference query ClassCreator ReferenceType MatchAllQuery MemberReference field = BlockStatement StatementExpression Assignment MemberReference query ClassCreator ReferenceType WildcardQuery MemberReference FieldNames PROPERTIES MemberReference field MemberReference ArraySelector Literal 0 stringValues = End BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_LT_VALUE MemberReference QueryConstants OPERATION_LT_GENERAL StatementExpression Assignment MemberReference or ClassCreator ReferenceType BooleanQuery = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference stringValues length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator lower ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field Literal """" createNamedValue LocalVariableDeclaration ReferenceType Term VariableDeclarator upper ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field MemberReference ArraySelector MemberReference i stringValues createNamedValue StatementExpression MethodInvocation or ClassCreator ReferenceType RangeQuery MemberReference lower MemberReference upper Literal false Literal false Literal false add End StatementExpression Assignment MemberReference query MemberReference or = IfStatement BinaryOperation == MethodInvocation node getOperation MemberReference QueryConstants OPERATION_LT_VALUE BlockStatement StatementExpression Assignment MemberReference query MethodInvocation MemberReference or MemberReference field createSingleValueConstraint = End BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_NE_VALUE LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator notQuery ClassCreator ReferenceType BooleanQuery StatementExpression MethodInvocation notQuery ClassCreator ReferenceType MatchAllQuery MemberReference field Literal false Literal false add ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference stringValues length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator t ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field MemberReference ArraySelector MemberReference i stringValues createNamedValue StatementExpression MethodInvocation notQuery ClassCreator ReferenceType TermQuery MemberReference t Literal false Literal true add End StatementExpression MethodInvocation notQuery ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames MVP MemberReference field Literal false Literal true add StatementExpression Assignment MemberReference query MemberReference notQuery = BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_NE_GENERAL StatementExpression Assignment MemberReference notQuery ClassCreator ReferenceType BooleanQuery = StatementExpression MethodInvocation notQuery ClassCreator ReferenceType MatchAllQuery MemberReference field Literal false Literal false add ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference stringValues length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator t ClassCreator ReferenceType Term MemberReference FieldNames PROPERTIES MethodInvocation FieldNames MemberReference field MemberReference ArraySelector MemberReference i stringValues createNamedValue LocalVariableDeclaration ReferenceType Query VariableDeclarator svp ClassCreator ReferenceType NotQuery ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames MVP MemberReference field LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator and ClassCreator ReferenceType BooleanQuery StatementExpression MethodInvocation and ClassCreator ReferenceType TermQuery MemberReference t Literal true Literal false add StatementExpression MethodInvocation and MemberReference svp Literal true Literal false add StatementExpression MethodInvocation notQuery MemberReference and Literal false Literal true add End StatementExpression Assignment MemberReference query MemberReference notQuery = BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_NULL StatementExpression Assignment MemberReference query ClassCreator ReferenceType NotQuery ClassCreator ReferenceType MatchAllQuery MemberReference field = BreakStatement SwitchStatementCase MemberReference QueryConstants OPERATION_NOT_NULL StatementExpression Assignment MemberReference query ClassCreator ReferenceType MatchAllQuery MemberReference field = BreakStatement SwitchStatementCase ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Unknown relation operation: "" MethodInvocation node getOperation End ReturnStatement MemberReference query MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType OrderQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration /**
     * Wraps a constraint query around <code>q</code> that limits the nodes to
     * those where <code>propName</code> is the name of a single value property
     * on the node instance.
     *
     * @param q        the query to wrap.
     * @param propName the name of a property that only has one value.
     * @return the wrapped query <code>q</code>.
     */ Modifier private ReferenceType Query createSingleValueConstraint FormalParameter ReferenceType Query q FormalParameter ReferenceType String propName LocalVariableDeclaration ReferenceType Query VariableDeclarator mvp ClassCreator ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames MVP MemberReference propName LocalVariableDeclaration ReferenceType Query VariableDeclarator svp ClassCreator ReferenceType NotQuery MemberReference mvp LocalVariableDeclaration ReferenceType BooleanQuery VariableDeclarator and ClassCreator ReferenceType BooleanQuery StatementExpression MethodInvocation and MemberReference q Literal true Literal false add StatementExpression MethodInvocation and MemberReference svp Literal true Literal false add ReturnStatement MemberReference and MethodDeclaration /**
     * Returns an array of String values to be used as a term to lookup the search index
     * for a String <code>literal</code> of a certain property name. This method
     * will lookup the <code>propertyName</code> in the node type registry
     * trying to find out the {@link javax.jcr.PropertyType}s.
     * If no property type is found looking up node type information, this
     * method will guess the property type.
     *
     * @param propertyName the name of the property in the relation.
     * @param literal      the String literal in the relation.
     * @return the String values to use as term for the query.
     */ Modifier private ReferenceType String getStringValues FormalParameter ReferenceType QName propertyName FormalParameter ReferenceType String literal LocalVariableDeclaration ReferenceType PropertyTypeRegistry ReferenceType TypeMapping VariableDeclarator types MethodInvocation propRegistry MemberReference propertyName getPropertyTypes LocalVariableDeclaration ReferenceType List VariableDeclarator values ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference types length MemberReference ++ i BlockStatement SwitchStatement MemberReference ArraySelector MemberReference i MemberReference type types SwitchStatementCase MemberReference PropertyType NAME TryStatement StatementExpression MethodInvocation values MethodInvocation nsMappings MemberReference literal MethodInvocation session getNamespaceResolver translatePropertyName add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into NAME."" debug CatchClause CatchClauseParameter IllegalNameException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to coerce '"" MemberReference literal Literal ""' into a NAME: "" MethodInvocation e toString warn CatchClause CatchClauseParameter UnknownPrefixException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to coerce '"" MemberReference literal Literal ""' into a NAME: "" MethodInvocation e toString warn BreakStatement SwitchStatementCase MemberReference PropertyType PATH TryStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator p MethodInvocation Path MemberReference literal MethodInvocation session getNamespaceResolver Literal false create StatementExpression MethodInvocation values MethodInvocation p MemberReference nsMappings toJCRPath add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into PATH."" debug CatchClause CatchClauseParameter MalformedPathException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to coerce '"" MemberReference literal Literal ""' into a PATH: "" MethodInvocation e toString warn CatchClause CatchClauseParameter NoPrefixDeclaredException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to coerce '"" MemberReference literal Literal ""' into a PATH: "" MethodInvocation e toString warn BreakStatement SwitchStatementCase MemberReference PropertyType DATE LocalVariableDeclaration ReferenceType Calendar VariableDeclarator c MethodInvocation ISO8601 MemberReference literal parse IfStatement BinaryOperation != MemberReference c Literal null BlockStatement StatementExpression MethodInvocation values MethodInvocation DateField MethodInvocation c getTimeInMillis timeToString add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into DATE."" debug BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Unable to coerce '"" MemberReference literal Literal ""' into a DATE."" warn End BreakStatement SwitchStatementCase MemberReference PropertyType DOUBLE TryStatement LocalVariableDeclaration BasicType double VariableDeclarator d MethodInvocation Double MemberReference literal parseDouble StatementExpression MethodInvocation values MethodInvocation DoubleField MemberReference d doubleToString add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into DOUBLE."" debug CatchClause CatchClauseParameter NumberFormatException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to coerce '"" MemberReference literal Literal ""' into a DOUBLE: "" MethodInvocation e toString warn BreakStatement SwitchStatementCase MemberReference PropertyType LONG TryStatement LocalVariableDeclaration BasicType long VariableDeclarator l MethodInvocation Long MemberReference literal parseLong StatementExpression MethodInvocation values MethodInvocation LongField MemberReference l longToString add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into LONG."" debug CatchClause CatchClauseParameter NumberFormatException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to coerce '"" MemberReference literal Literal ""' into a LONG: "" MethodInvocation e toString warn BreakStatement SwitchStatementCase MemberReference PropertyType STRING StatementExpression MethodInvocation values MemberReference literal add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Using literal "" MemberReference literal Literal "" as is."" debug BreakStatement End End IfStatement BinaryOperation == MethodInvocation values size Literal 0 BlockStatement StatementExpression MethodInvocation values MemberReference literal add IfStatement BinaryOperation > MethodInvocation literal Literal '/' indexOf Literal - 1 BlockStatement TryStatement StatementExpression MethodInvocation values MethodInvocation Path MethodInvocation MemberReference nsMappings toJCRPath MemberReference literal MethodInvocation session getNamespaceResolver Literal false create add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into PATH."" debug CatchClause CatchClauseParameter Exception e End IfStatement MethodInvocation XMLChar MemberReference literal isValidName BlockStatement TryStatement StatementExpression MethodInvocation values MethodInvocation nsMappings MemberReference literal MethodInvocation session getNamespaceResolver translatePropertyName add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into NAME."" debug CatchClause CatchClauseParameter Exception e End IfStatement BinaryOperation > MethodInvocation literal Literal ':' indexOf Literal - 1 BlockStatement LocalVariableDeclaration ReferenceType Calendar VariableDeclarator c MethodInvocation ISO8601 MemberReference literal parse IfStatement BinaryOperation != MemberReference c Literal null BlockStatement StatementExpression MethodInvocation values MethodInvocation DateField MethodInvocation c getTimeInMillis timeToString add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into DATE."" debug End BlockStatement TryStatement StatementExpression MethodInvocation values MethodInvocation LongField MethodInvocation Long MemberReference literal parseLong longToString add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into LONG."" debug CatchClause CatchClauseParameter NumberFormatException e TryStatement StatementExpression MethodInvocation values MethodInvocation DoubleField MethodInvocation Double MemberReference literal parseDouble doubleToString add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Coerced "" MemberReference literal Literal "" into DOUBLE."" debug CatchClause CatchClauseParameter NumberFormatException e1 End End IfStatement BinaryOperation == MethodInvocation values size Literal 0 BlockStatement StatementExpression MethodInvocation values MemberReference literal add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Using literal "" MemberReference literal Literal "" as is."" debug End ReturnStatement Cast ReferenceType String MethodInvocation values ArrayCreator ReferenceType String MethodInvocation values size toArray ReferenceType QueryNodeVisitor",1
122,122,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import java.util.Iterator Import javax.jcr.RepositoryException Import org.apache.commons.chain.Context Import org.apache.jackrabbit.command.CommandException ClassDeclaration Modifier public /**
 * Lists collected <code>Item</code>s.<br>
 * This <code>Command</code> looks for an <code>Iterator</code> under the
 * given <code>Context</code> variable and lists its <code>Item<code>s.
 */ LsCollectedItems FieldDeclaration /** Context variable that holds the Iterator */ Modifier private ReferenceType String VariableDeclarator fromKey Literal ""collected"" MethodDeclaration /**
     * @return the context variable
     */ Modifier public ReferenceType String getFromKey ReturnStatement MemberReference fromKey MethodDeclaration /**
     * Sets the context variable
     * @param from
     *        from key to set
     */ Modifier public setFromKey FormalParameter ReferenceType String from StatementExpression Assignment This MemberReference fromKey MemberReference from = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected ReferenceType Iterator getItems FormalParameter ReferenceType Context ctx CommandException RepositoryException StatementExpression This MethodInvocation Literal true setPath LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation ctx This MemberReference fromKey get IfStatement BinaryOperation || BinaryOperation == MemberReference o Literal null BinaryOperation instanceof MemberReference o ReferenceType Iterator BlockStatement ThrowStatement ClassCreator ReferenceType JcrInfoCommandException Literal ""illegalargument.no.iterator.under"" ArrayCreator ReferenceType String ArrayInitializer MemberReference fromKey End ReturnStatement Cast ReferenceType Iterator MemberReference o ReferenceType AbstractLsItems",0
774,774,,0
578,578,,1
818,818,,0
447,447,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.observation Import java.rmi.RemoteException Import java.util.HashMap Import java.util.Map Import javax.jcr.Session Import javax.jcr.observation.Event Import javax.jcr.observation.EventIterator Import javax.jcr.observation.EventListener Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.rmi.iterator.ArrayEventIterator Import org.apache.jackrabbit.rmi.remote.RemoteEventCollection Import org.apache.jackrabbit.rmi.remote.RemoteObservationManager ClassDeclaration Modifier public /**
 * The <code>ClientEventPoll</code> class is the registry for client-side
 * event listeners on behalf of the
 * {@link org.apache.jackrabbit.rmi.client.ClientObservationManager} class. In
 * addition this class extends the <code>java.lang.Thread</code> class able
 * to be run in a separate thread to constantly poll the server-side observation
 * manager for new events.
 * <p>
 * Notes:
 * <ol>
 * <li>Only one instance of this class should be instantiated for each instance
 * of a {@link org.apache.jackrabbit.rmi.remote.RemoteObservationManager} class.
 * <li><code>EventListener</code>s registered with this class must properly
 * implement the <code>Object.hashCode()</code> and <code>Object.equals()</code>
 * contracts for them to be handled correctly by this class.
 * </ol>
 *
 * @author Felix Meschberger
 * @see #run()
 */ ClientEventPoll FieldDeclaration /** logger */ Modifier private final static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ClientEventPoll getLog FieldDeclaration /**
     * The time in milliseconds the {@link #run()} method should be waiting
     * for remote events.
     * @see #run()
     */ Modifier private final static BasicType long VariableDeclarator POLL_TIMEOUT Literal 5000 FieldDeclaration /** The thread name */ Modifier private final static ReferenceType String VariableDeclarator THREAD_NAME Literal ""Client Event Poller"" FieldDeclaration /** The primitive unique identifier generator. */ Modifier private static BasicType long VariableDeclarator counter Literal 0 FieldDeclaration /** The {@link RemoteObservationManager} called for the new events. */ Modifier private final ReferenceType RemoteObservationManager VariableDeclarator remote FieldDeclaration /**
     * The <code>Session</code> checked by the {@link #run} method whether it
     * is still alive or the thread should terminate.
     */ Modifier private final ReferenceType Session VariableDeclarator session FieldDeclaration /** The map of locally registered listeners indexed by the unique identifier */ Modifier private ReferenceType Map VariableDeclarator listenerMap ClassCreator ReferenceType HashMap FieldDeclaration /** The map of unique identifieres indexed by the registered listeners */ Modifier private ReferenceType Map VariableDeclarator idMap ClassCreator ReferenceType HashMap FieldDeclaration /**
     * Flag indicating whether the {@link #run()} method should terminate.
     * @see #run()
     */ Modifier private BasicType boolean VariableDeclarator running Literal true ConstructorDeclaration Modifier public /**
     * Creates an instance of this class talking to the given
     * {@link RemoteObservationManager}.
     *
     * @param remote The remote observation manager which is asked for new
     *      events. This must not be <code>null</code>.
     * @param session The <code>Session</code> which is asked whether it is
     *      alive by the {@link #run()} method. This must not be <code>null</code>.
     *
     * @throws NullPointerException if <code>remote</code> or <code>session</code>
     *      is <code>null</code>.
     */ ClientEventPoll FormalParameter ReferenceType RemoteObservationManager remote FormalParameter ReferenceType Session session NullPointerException StatementExpression SuperConstructorInvocation MemberReference THREAD_NAME IfStatement BinaryOperation == MemberReference remote Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""remote"" End IfStatement BinaryOperation == MemberReference session Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""session"" End StatementExpression Assignment This MemberReference remote MemberReference remote = StatementExpression Assignment This MemberReference session MemberReference session = MethodDeclaration /**
     * Registers the given local listener with this instance and returns the
     * unique identifier assigned to it.
     *
     * @param listener The <code>EventListener</code> to register.
     *
     * @return The unique identifier assigned to the newly registered event
     *      listener.
     */ Modifier public synchronized BasicType long addListener FormalParameter ReferenceType EventListener listener LocalVariableDeclaration ReferenceType Long VariableDeclarator id ClassCreator ReferenceType Long MemberReference ++ counter StatementExpression MethodInvocation listenerMap MemberReference id MemberReference listener put StatementExpression MethodInvocation idMap MemberReference listener MemberReference id put ReturnStatement MethodInvocation id longValue MethodDeclaration /**
     * Unregisters the given local listener from this instance and returns the
     * unique identifier assigned to it.
     *
     * @param listener The <code>EventListener</code> to unregister.
     *
     * @return The unique identifier assigned to the unregistered event listener
     *      or <code>-1</code> if the listener was not registered.
     */ Modifier public synchronized BasicType long removeListener FormalParameter ReferenceType EventListener listener LocalVariableDeclaration ReferenceType Long VariableDeclarator key Cast ReferenceType Long MethodInvocation idMap MemberReference listener remove IfStatement BinaryOperation != MemberReference key Literal null BlockStatement StatementExpression MethodInvocation listenerMap MemberReference key remove ReturnStatement MethodInvocation key longValue End ReturnStatement Literal - 1 MethodDeclaration /**
     * Returns an array of the registered event listeners.
     *
     * @return registered event listeners
     */ Modifier public synchronized ReferenceType EventListener getListeners ReturnStatement Cast ReferenceType EventListener MethodInvocation listenerMap MethodInvocation ArrayCreator ReferenceType EventListener MethodInvocation listenerMap size toArray values MethodDeclaration /**
     * Indicates to the {@link #run()} method, that asking for events should
     * be terminated.
     *
     * @see #run()
     */ Modifier public terminate StatementExpression Assignment This MemberReference running Literal false = MethodDeclaration /**
     * Checks for remote events and dispatches them to the locally registered
     * event listeners. This is how this method works:
     * <ol>
     * <li>Continue with next step if {@link #terminate()} has not been called
     * yet and the session is still alive.
     * <li>Call the {@link RemoteObservationManager#getNextEvent(long)} method
     * waiting for a specified time (5 seconds).
     * <li>If no event was received in the specified time go back to step #1.
     * <li>Extract the unique listener identifier from the remote event and
     * find it in the list of locally registered event listeners. Go back to
     * step #1 if no such listener exists.
     * <li>Convert the remote event list to an <code>EventIterator</code> and
     * call the <code>EventListener.onEvent()</code> method.
     * <li>Go back to step #1.
     * </ol>
     */ Modifier public run WhileStatement BinaryOperation && MemberReference running MethodInvocation session isLive BlockStatement TryStatement LocalVariableDeclaration ReferenceType RemoteEventCollection VariableDeclarator remoteEvent MethodInvocation remote MemberReference POLL_TIMEOUT getNextEvent IfStatement BinaryOperation == MemberReference remoteEvent Literal null BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType Long VariableDeclarator id ClassCreator ReferenceType Long MethodInvocation remoteEvent getListenerId LocalVariableDeclaration ReferenceType EventListener VariableDeclarator listener Cast ReferenceType EventListener MethodInvocation listenerMap MemberReference id get IfStatement BinaryOperation == MemberReference listener Literal null BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType RemoteEventCollection ReferenceType RemoteEvent VariableDeclarator remoteEvents MethodInvocation remoteEvent getEvents LocalVariableDeclaration ReferenceType EventIterator VariableDeclarator events MethodInvocation MemberReference remoteEvents toEvents TryStatement StatementExpression MethodInvocation listener MemberReference events onEvent CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unexpected failure of Listener "" MemberReference listener MemberReference e error CatchClause CatchClauseParameter RemoteException re StatementExpression MethodInvocation log Literal ""Problem handling event. Looking for next one."" MemberReference re error End MethodDeclaration /**
     * Converts an array of {@link RemoteEventCollection.RemoteEvent} instances to an
     * instance of <code>EventIterator</code> suitable to be sent to the
     * event listener.
     *
     * @param remoteEvents array of remote events
     * @return event iterator
     * @throws RemoteException on RMI errors
     */ Modifier private ReferenceType EventIterator toEvents FormalParameter ReferenceType RemoteEventCollection ReferenceType RemoteEvent remoteEvents RemoteException LocalVariableDeclaration ReferenceType Event VariableDeclarator events ArrayCreator ReferenceType Event MemberReference remoteEvents length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference events length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i events ClassCreator ReferenceType JCREvent MemberReference ArraySelector MemberReference i remoteEvents = End ReturnStatement ClassCreator ReferenceType ArrayEventIterator MemberReference events ClassDeclaration Modifier private static /**
     * The <code>JCREvent</code> class is a simple implementation of the JCR
     * <code>Event</code> interface to be sent to the locally registered
     * event listeners.
     *
     * @author Felix Meschberger
     */ JCREvent FieldDeclaration /** The event type */ Modifier private final BasicType int VariableDeclarator type FieldDeclaration /** The path of the repository item underlying the event */ Modifier private final ReferenceType String VariableDeclarator path FieldDeclaration /** The user id of the session originating the event */ Modifier private final ReferenceType String VariableDeclarator userID ConstructorDeclaration Modifier private /**
         * Creates an instance of this class from the contents of the given
         * <code>remoteEvent</code>.
         *
         * @param remoteEvent The {@link RemoteEventCollection.RemoteEvent} instance
         *      providing the data for this event.
         *
         * @throws RemoteException if an RMI error occurrs.
         */ JCREvent FormalParameter ReferenceType RemoteEventCollection ReferenceType RemoteEvent remoteEvent RemoteException StatementExpression Assignment MemberReference type MethodInvocation remoteEvent getType = StatementExpression Assignment MemberReference path MethodInvocation remoteEvent getPath = StatementExpression Assignment MemberReference userID MethodInvocation remoteEvent getUserID = MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType int getType ReturnStatement MemberReference type MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getPath ReturnStatement MemberReference path MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getUserID ReturnStatement MemberReference userID ReferenceType Event ReferenceType Thread",0
529,529,"CompilationUnit PackageDeclaration org.apache.jackrabbit.name Import org.apache.jackrabbit.util.Text Import org.apache.xerces.util.XMLChar Import javax.jcr.NamespaceException Import javax.jcr.PathNotFoundException Import java.util.ArrayList Import java.util.Arrays Import java.util.LinkedList Import java.util.regex.Matcher Import java.util.regex.Pattern ClassDeclaration Modifier public final /**
 * The <code>Path</code> utility class provides misc. methods to resolve and
 * nornalize JCR-style item paths.
 * <p/>
 * Each path consistnes of path elements and is immutable. It has the following
 * properties:
 * <p/>
 * <code>isAbsolute()</code>:<br>
 * A path is absolute if the first path element denotes the root element '/'.
 * <p/>
 * <code>isNormalized()</code>:<br>
 * A path is normalized if all '.' and '..' path elements are resolved as much
 * as possible. If the path is absolute it is normalized if it contains
 * no such elements. For example the path '../../a' is normalized where as
 * '../../b/../a/.' is not. Normalized paths never have '.' elements.
 * Absolute normalized paths have no and relative normalized paths have no or
 * only leading '..' elements.
 * <p/>
 * <code>isCanonical()</code>:<br>
 * A path is canonical if its absolute and normalized.
 *
 * <h2>String representations</h2>
 * <p/>
 * The JCR path format is specified by JSR 170 as follows:
 * <pre>
 *  path ::= properpath ['/']
 *  properpath ::= abspath | relpath
 *  abspath ::= '/' relpath
 *  relpath ::= pathelement | relpath '/' pathelement
 *  pathelement ::= name | name '[' number ']' | '..' | '.'
 *  number ::= (* An integer > 0 *)
 *  name ::= simplename | prefixedname
 *  simplename ::= onecharsimplename |
 *                 twocharsimplename |
 *                 threeormorecharname
 *  prefixedname ::= prefix ':' localname
 *  localname ::= onecharlocalname |
 *                twocharlocalname |
 *                threeormorecharname
 *  onecharsimplename ::= (* Any Unicode character except:
 *                     '.', '/', ':', '[', ']', '*',
 *                     ''', '""', '|' or any whitespace
 *                     character *)
 *  twocharsimplename ::= '.' onecharsimplename |
 *                        onecharsimplename '.' |
 *                        onecharsimplename onecharsimplename
 *  onecharlocalname ::= nonspace
 *  twocharlocalname ::= nonspace nonspace
 *  threeormorecharname ::= nonspace string nonspace
 *  prefix ::= (* Any valid XML Name *)
 *  string ::= char | string char
 *  char ::= nonspace | ' '
 *  nonspace ::= (* Any Unicode character except:
 *                  '/', ':', '[', ']', '*',
 *                  ''', '""', '|' or any whitespace
 *                  character *)
 * </pre>
 */ Path FieldDeclaration /**
     * the 'root' element. i.e. '/'
     */ Modifier private final static ReferenceType PathElement VariableDeclarator ROOT_ELEMENT ClassCreator ReferenceType RootElement FieldDeclaration /**
     * the 'current' element. i.e. '.'
     */ Modifier private final static ReferenceType PathElement VariableDeclarator CURRENT_ELEMENT ClassCreator ReferenceType CurrentElement FieldDeclaration /**
     * the 'parent' element. i.e. '..'
     */ Modifier private final static ReferenceType PathElement VariableDeclarator PARENT_ELEMENT ClassCreator ReferenceType ParentElement FieldDeclaration /**
     * the root path
     */ Modifier public final static ReferenceType Path VariableDeclarator ROOT ClassCreator ReferenceType Path ArrayCreator ReferenceType PathElement ArrayInitializer MemberReference ROOT_ELEMENT Literal true FieldDeclaration /**
     * Pattern used to validate and parse path elements:<p>
     * <ul>
     * <li>group 1 is .
     * <li>group 2 is ..
     * <li>group 3 is namespace prefix incl. delimiter (colon)
     * <li>group 4 is namespace prefix excl. delimiter (colon)
     * <li>group 5 is localName
     * <li>group 6 is index incl. brackets
     * <li>group 7 is index excl. brackets
     * </ul>
     */ Modifier private final static ReferenceType Pattern VariableDeclarator PATH_ELEMENT_PATTERN MethodInvocation Pattern BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""(\\.)|"" Literal ""(\\.\\.)|"" Literal ""(([^ /:\\[\\]*'\""|](?:[^/:\\[\\]*'\""|]*[^ /:\\[\\]*'\""|])?):)?"" Literal ""([^ /:\\[\\]*'\""|](?:[^/:\\[\\]*'\""|]*[^ /:\\[\\]*'\""|])?)"" Literal ""(\\[([1-9]\\d*)\\])?"" compile FieldDeclaration /**
     * Matcher instance as thread-local.
     */ Modifier private final static ReferenceType ThreadLocal VariableDeclarator PATH_ELEMENT_MATCHER ClassCreator ReferenceType ThreadLocal MethodDeclaration Modifier protected ReferenceType Object initialValue ReturnStatement MethodInvocation PATH_ELEMENT_PATTERN Literal ""dummy"" matcher FieldDeclaration /**
     * the elements of this path
     */ Modifier private final ReferenceType PathElement VariableDeclarator elements FieldDeclaration /**
     * flag indicating if this path is normalized
     */ Modifier private final BasicType boolean VariableDeclarator normalized FieldDeclaration /**
     * flag indicating if this path is absolute
     */ Modifier private final BasicType boolean VariableDeclarator absolute FieldDeclaration /**
     * the cached hashcode of this path
     */ Modifier private BasicType int VariableDeclarator hash Literal 0 FieldDeclaration /**
     * the cached 'toString' of this path
     */ Modifier private ReferenceType String VariableDeclarator string ConstructorDeclaration Modifier private /**
     * Private constructor
     *
     * @param elements
     * @param isNormalized
     */ Path FormalParameter ReferenceType PathElement elements FormalParameter BasicType boolean isNormalized IfStatement BinaryOperation || BinaryOperation == MemberReference elements Literal null BinaryOperation == MemberReference elements length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Empty paths are not allowed"" End StatementExpression Assignment This MemberReference elements MemberReference elements = StatementExpression Assignment This MemberReference absolute MemberReference ArraySelector Literal 0 MethodInvocation denotesRoot elements = StatementExpression Assignment This MemberReference normalized MemberReference isNormalized = MethodDeclaration /**
     * Creates a new <code>Path</code> from the given <code>jcrPath</code>
     * string. If <code>normalize</code> is <code>true</code>, the returned
     * path will be normalized (or canonicalized if absolute).
     *
     * @param jcrPath
     * @param resolver
     * @param normalize
     * @return
     * @throws MalformedPathException
     */ Modifier public static ReferenceType Path create FormalParameter ReferenceType String jcrPath FormalParameter ReferenceType NamespaceResolver resolver FormalParameter BasicType boolean normalize MalformedPathException LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation MemberReference jcrPath Literal null MemberReference resolver parse IfStatement MemberReference normalize BlockStatement ReturnStatement MethodInvocation path getNormalizedPath BlockStatement ReturnStatement MemberReference path End MethodDeclaration /**
     * Creates a new <code>Path</code> out of the given <code>parent</code> path
     * and a relative path string. If <code>canonicalize</code> is
     * <code>true</code>, the returned path will be canonicalized.
     *
     * @param parent
     * @param relJCRPath
     * @param resolver
     * @param canonicalize
     * @return
     * @throws MalformedPathException
     */ Modifier public static ReferenceType Path create FormalParameter ReferenceType Path parent FormalParameter ReferenceType String relJCRPath FormalParameter ReferenceType NamespaceResolver resolver FormalParameter BasicType boolean canonicalize MalformedPathException LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation MemberReference relJCRPath MemberReference parent MemberReference resolver parse IfStatement MemberReference canonicalize BlockStatement ReturnStatement MethodInvocation path getCanonicalPath BlockStatement ReturnStatement MemberReference path End MethodDeclaration /**
     * Creates a new <code>Path</code> out of the given <code>parent<code> path
     * string and the given relative path string. If <code>normalize</code> is
     * <code>true</code>, the returned path will be normalized (or
     * canonicalized, if the parent path is absolute).
     *
     * @param parent
     * @param relPath
     * @param normalize
     * @return
     * @throws MalformedPathException
     */ Modifier public static ReferenceType Path create FormalParameter ReferenceType Path parent FormalParameter ReferenceType Path relPath FormalParameter BasicType boolean normalize MalformedPathException IfStatement MethodInvocation relPath isAbsolute BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException Literal ""relPath is not a relative path"" End LocalVariableDeclaration ReferenceType PathBuilder VariableDeclarator pb ClassCreator ReferenceType PathBuilder MethodInvocation parent getElements StatementExpression MethodInvocation pb MethodInvocation relPath getElements addAll LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation pb getPath IfStatement MemberReference normalize BlockStatement ReturnStatement MethodInvocation path getNormalizedPath BlockStatement ReturnStatement MemberReference path End MethodDeclaration /**
     * Creates a new <code>Path</code> out of the given <code>parent<code> path
     * string and the give name. If <code>normalize</code> is <code>true</code>,
     * the returned path will be normalized (or canonicalized, if the parent
     * path is absolute).
     *
     * @param parent
     * @param name
     * @param normalize
     * @return
     * @throws MalformedPathException
     */ Modifier public static ReferenceType Path create FormalParameter ReferenceType Path parent FormalParameter ReferenceType QName name FormalParameter BasicType boolean normalize MalformedPathException LocalVariableDeclaration ReferenceType PathBuilder VariableDeclarator pb ClassCreator ReferenceType PathBuilder MethodInvocation parent getElements StatementExpression MethodInvocation pb MemberReference name addLast LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation pb getPath IfStatement MemberReference normalize BlockStatement ReturnStatement MethodInvocation path getNormalizedPath BlockStatement ReturnStatement MemberReference path End MethodDeclaration /**
     * Creates a new <code>Path</code> out of the given <code>parent<code> path
     * and the give name and index. If <code>normalize</code> is
     * <code>true</code>, the returned path will be normalized
     * (or canonicalized, if the parent path is absolute).
     *
     * @param parent
     * @param name
     * @param index
     * @param normalize
     * @return
     * @throws MalformedPathException
     */ Modifier public static ReferenceType Path create FormalParameter ReferenceType Path parent FormalParameter ReferenceType QName name FormalParameter BasicType int index FormalParameter BasicType boolean normalize MalformedPathException LocalVariableDeclaration ReferenceType PathBuilder VariableDeclarator pb ClassCreator ReferenceType PathBuilder MethodInvocation parent getElements StatementExpression MethodInvocation pb MemberReference name MemberReference index addLast LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation pb getPath IfStatement MemberReference normalize BlockStatement ReturnStatement MethodInvocation path getNormalizedPath BlockStatement ReturnStatement MemberReference path End MethodDeclaration /**
     * Creates a relative path based on a {@link QName} and an index.
     *
     * @param name  single {@link QName} for this relative path.
     * @param index index of the sinlge name element.
     * @return the relative path created from <code>name</code>.
     * @throws IllegalArgumentException if <code>index</code> is negative.
     */ Modifier public static ReferenceType Path create FormalParameter ReferenceType QName name FormalParameter BasicType int index IllegalArgumentException IfStatement BinaryOperation < MemberReference index Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""index must not be negative: "" MemberReference index End LocalVariableDeclaration ReferenceType PathElement VariableDeclarator elem IfStatement BinaryOperation < MemberReference index Literal 1 BlockStatement StatementExpression Assignment MemberReference elem ClassCreator ReferenceType PathElement MemberReference name = BlockStatement StatementExpression Assignment MemberReference elem ClassCreator ReferenceType PathElement MemberReference name MemberReference index = End ReturnStatement ClassCreator ReferenceType Path ArrayCreator ReferenceType PathElement ArrayInitializer MemberReference elem MethodInvocation ! elem MemberReference CURRENT_ELEMENT equals MethodDeclaration /**
     * Parses the give string an d returns an array of path elements. if
     * <code>master</code> is not <code>null</code>, it is prepended to the
     * returned list. If <code>resolver</code> is <code>null</code>, this
     * method only checks the format of the string and returns <code>null</code>.
     *
     * @param jcrPath
     * @param master
     * @param resolver
     * @return
     * @throws MalformedPathException
     */ Modifier private static ReferenceType Path parse FormalParameter ReferenceType String jcrPath FormalParameter ReferenceType Path master FormalParameter ReferenceType NamespaceResolver resolver MalformedPathException IfStatement Literal MethodInvocation MemberReference jcrPath equals ""/"" BlockStatement ReturnStatement MemberReference ROOT End LocalVariableDeclaration ReferenceType String VariableDeclarator elems MethodInvocation Text MemberReference jcrPath Literal '/' Literal true explode IfStatement BinaryOperation == MemberReference elems length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException Literal ""empty path"" End LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator list ClassCreator ReferenceType ArrayList LocalVariableDeclaration BasicType boolean VariableDeclarator isNormalized Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator leadingParent Literal true IfStatement BinaryOperation != MemberReference master Literal null BlockStatement StatementExpression Assignment MemberReference isNormalized MemberReference master normalized = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference master.elements length MemberReference ++ i BlockStatement StatementExpression MethodInvocation list MemberReference master ArraySelector MemberReference i elements add StatementExpression Assignment MemberReference leadingParent MemberReference master ArraySelector MemberReference i MethodInvocation denotesParent elements &= End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elems length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator prefix LocalVariableDeclaration ReferenceType String VariableDeclarator localName LocalVariableDeclaration BasicType int VariableDeclarator index LocalVariableDeclaration ReferenceType String VariableDeclarator elem MemberReference ArraySelector MemberReference i elems IfStatement BinaryOperation && BinaryOperation == MemberReference i Literal 0 BinaryOperation == MethodInvocation elem length Literal 0 BlockStatement IfStatement MethodInvocation ! list isEmpty BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException BinaryOperation + BinaryOperation + Literal ""'"" MemberReference jcrPath Literal ""' is not a relative path"" End StatementExpression MethodInvocation list MemberReference ROOT_ELEMENT add StatementExpression Assignment MemberReference leadingParent Literal false = ContinueStatement End IfStatement BinaryOperation && BinaryOperation == MethodInvocation elem length Literal 0 BinaryOperation == MemberReference i BinaryOperation - MemberReference elems length Literal 1 BlockStatement BreakStatement End LocalVariableDeclaration ReferenceType Matcher VariableDeclarator matcher Cast ReferenceType Matcher MethodInvocation PATH_ELEMENT_MATCHER get StatementExpression MethodInvocation matcher MemberReference elem reset IfStatement MethodInvocation matcher matches BlockStatement IfStatement BinaryOperation == MemberReference resolver Literal null BlockStatement ContinueStatement End IfStatement BinaryOperation != MethodInvocation matcher Literal 1 group Literal null BlockStatement StatementExpression MethodInvocation list MemberReference CURRENT_ELEMENT add StatementExpression Assignment MemberReference leadingParent Literal false = StatementExpression Assignment MemberReference isNormalized Literal false = IfStatement BinaryOperation != MethodInvocation matcher Literal 2 group Literal null BlockStatement StatementExpression MethodInvocation list MemberReference PARENT_ELEMENT add StatementExpression Assignment MemberReference isNormalized MemberReference leadingParent &= BlockStatement IfStatement BinaryOperation != MethodInvocation matcher Literal 3 group Literal null BlockStatement StatementExpression Assignment MemberReference prefix MethodInvocation matcher Literal 4 group = IfStatement MethodInvocation ! XMLChar MemberReference prefix isValidNCName BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""'"" MemberReference jcrPath Literal ""' is not a valid path: '"" MemberReference elem Literal ""' specifies an illegal namespace prefix"" End BlockStatement StatementExpression Assignment MemberReference prefix Literal """" = End StatementExpression Assignment MemberReference localName MethodInvocation matcher Literal 5 group = IfStatement BinaryOperation != MethodInvocation matcher Literal 6 group Literal null BlockStatement StatementExpression Assignment MemberReference index MethodInvocation Integer MethodInvocation matcher Literal 7 group parseInt = BlockStatement StatementExpression Assignment MemberReference index Literal 0 = End LocalVariableDeclaration ReferenceType String VariableDeclarator nsURI TryStatement StatementExpression Assignment MemberReference nsURI MethodInvocation resolver MemberReference prefix getURI = CatchClause CatchClauseParameter NamespaceException nse ThrowStatement ClassCreator ReferenceType MalformedPathException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""'"" MemberReference jcrPath Literal ""' is not a valid path: '"" MemberReference elem Literal ""' specifies an unmapped namespace prefix"" LocalVariableDeclaration ReferenceType PathElement VariableDeclarator element IfStatement BinaryOperation == MemberReference index Literal 0 BlockStatement StatementExpression Assignment MemberReference element ClassCreator ReferenceType PathElement MemberReference nsURI MemberReference localName = BlockStatement StatementExpression Assignment MemberReference element ClassCreator ReferenceType PathElement MemberReference nsURI MemberReference localName MemberReference index = End StatementExpression MethodInvocation list MemberReference element add StatementExpression Assignment MemberReference leadingParent Literal false = End End BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""'"" MemberReference jcrPath Literal ""' is not a valid path: '"" MemberReference elem Literal ""' is not a legal path element"" End End IfStatement BinaryOperation != MemberReference resolver Literal null BlockStatement ReturnStatement ClassCreator ReferenceType Path Cast ReferenceType PathElement MethodInvocation list ArrayCreator ReferenceType PathElement MethodInvocation list size toArray MemberReference isNormalized BlockStatement ReturnStatement Literal null End MethodDeclaration /**
     * Checks if <code>jcrPath</code> is a valid JCR-style absolute or relative
     * path.
     *
     * @param jcrPath the path to be checked
     * @throws MalformedPathException If <code>jcrPath</code> is not a valid
     *                                JCR-style path.
     */ Modifier public static checkFormat FormalParameter ReferenceType String jcrPath MalformedPathException StatementExpression MethodInvocation MemberReference jcrPath Literal null Literal null parse MethodDeclaration /**
     * Tests whether this path represents the root path, i.e. ""/"".
     *
     * @return true if this path represents the root path; false otherwise.
     */ Modifier public BasicType boolean denotesRoot ReturnStatement BinaryOperation && MemberReference absolute BinaryOperation == MemberReference elements length Literal 1 MethodDeclaration /**
     * Tests whether this path is absolute, i.e. whether it starts with ""/"".
     *
     * @return true if this path is absolute; false otherwise.
     */ Modifier public BasicType boolean isAbsolute ReturnStatement MemberReference absolute MethodDeclaration /**
     * Tests whether this path is canonical, i.e. whether it is absolute and
     * does not contain redundant elements such as ""."" and "".."".
     *
     * @return true if this path is canonical; false otherwise.
     * @see #isAbsolute()
     */ Modifier public BasicType boolean isCanonical ReturnStatement BinaryOperation && MemberReference absolute MemberReference normalized MethodDeclaration /**
     * Tests whether this path is normalized, i.e. whether it does not
     * contain redundant elements such as ""."" and "".."".
     * <p/>
     * Note that a normalized path can still contain "".."" elements if they are
     * not redundant, e.g. ""../../a/b/c"" would be a normalized relative path,
     * whereas ""../a/../../a/b/c"" wouldn't (although they're semantically
     * equivalent).
     *
     * @return true if this path is normalized; false otherwise.
     * @see #getNormalizedPath()
     */ Modifier public BasicType boolean isNormalized ReturnStatement MemberReference normalized MethodDeclaration /**
     * Returns the normalized path representation of this path. This typically
     * involves removing/resolving redundant elements such as ""."" and "".."" from
     * the path, e.g. ""/a/./b/.."" will be normalized to ""/a"", ""../../a/b/c/..""
     * will be normalized to ""../../a/b"", and so on.
     * <p/>
     * If the normalized path results in an empty path (eg: 'a/..') or if an
     * absolute path is normalized that would result in a 'negative' path
     * (eg: /a/../../) a MalformedPathException is thrown.
     *
     * @return a normalized path representation of this path
     * @throws MalformedPathException if the path cannot be normalized.
     * @see #isNormalized()
     */ Modifier public ReferenceType Path getNormalizedPath MalformedPathException IfStatement MethodInvocation isNormalized BlockStatement ReturnStatement This End LocalVariableDeclaration ReferenceType LinkedList VariableDeclarator queue ClassCreator ReferenceType LinkedList LocalVariableDeclaration ReferenceType PathElement VariableDeclarator last Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elements length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType PathElement VariableDeclarator elem MemberReference ArraySelector MemberReference i elements IfStatement MethodInvocation elem denotesCurrent BlockStatement ContinueStatement IfStatement BinaryOperation && BinaryOperation && MethodInvocation elem denotesParent BinaryOperation != MemberReference last Literal null MethodInvocation ! last denotesParent BlockStatement IfStatement MethodInvocation last denotesRoot BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException Literal ""Path can not be canonicalized: unresolvable '..' element"" End StatementExpression MethodInvocation queue removeLast IfStatement MethodInvocation queue isEmpty BlockStatement StatementExpression Assignment MemberReference last Literal null = BlockStatement StatementExpression Assignment MemberReference last Cast ReferenceType PathElement MethodInvocation queue getLast = End BlockStatement StatementExpression Assignment MemberReference last MemberReference elem = StatementExpression MethodInvocation queue MemberReference elem add End End End IfStatement MethodInvocation queue isEmpty BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException Literal ""Path can not be normalized: would result in an empty path."" End ReturnStatement ClassCreator ReferenceType Path Cast ReferenceType PathElement MethodInvocation queue ArrayCreator ReferenceType PathElement MethodInvocation queue size toArray Literal true MethodDeclaration /**
     * Returns the canonical path representation of this path. This typically
     * involves removing/resolving redundant elements such as ""."" and "".."" from
     * the path.
     *
     * @return a canonical path representation of this path
     * @throws MalformedPathException if this path can not be canonicalized
     *                                (e.g. if it is relative)
     */ Modifier public ReferenceType Path getCanonicalPath MalformedPathException IfStatement MethodInvocation isCanonical BlockStatement ReturnStatement This End IfStatement MethodInvocation ! isAbsolute BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException Literal ""only an absolute path can be canonicalized."" End ReturnStatement MethodInvocation getNormalizedPath MethodDeclaration /**
     * Computes the relative path from <code>this</code> absolute path to
     * <code>other</code>.
     *
     * @param other an absolute path
     * @return the relative path from <code>this</code> path to
     *         <code>other</code> path
     * @throws MalformedPathException if either <code>this</code> or
     *                                <code>other</code> path is not absolute
     */ Modifier public ReferenceType Path computeRelativePath FormalParameter ReferenceType Path other MalformedPathException IfStatement BinaryOperation == MemberReference other Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""null argument"" End IfStatement BinaryOperation || MethodInvocation ! isAbsolute MethodInvocation ! other isAbsolute BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException Literal ""not an absolute path"" End LocalVariableDeclaration ReferenceType Path VariableDeclarator p0 MethodInvocation getCanonicalPath LocalVariableDeclaration ReferenceType Path VariableDeclarator p1 MethodInvocation other getCanonicalPath IfStatement MethodInvocation p0 MemberReference p1 equals BlockStatement LocalVariableDeclaration ReferenceType PathBuilder VariableDeclarator pb ClassCreator ReferenceType PathBuilder StatementExpression MethodInvocation pb MemberReference CURRENT_ELEMENT addLast ReturnStatement MethodInvocation pb getPath End LocalVariableDeclaration BasicType int VariableDeclarator lengthCommon Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation && BinaryOperation < MemberReference i MemberReference p0.elements length BinaryOperation < MemberReference i MemberReference p1.elements length MemberReference ++ i BlockStatement IfStatement MemberReference ! p0 ArraySelector MemberReference i MethodInvocation MemberReference p1 ArraySelector MemberReference i elements equals elements BlockStatement BreakStatement End StatementExpression MemberReference ++ lengthCommon End LocalVariableDeclaration ReferenceType PathBuilder VariableDeclarator pb ClassCreator ReferenceType PathBuilder IfStatement BinaryOperation < MemberReference lengthCommon MemberReference p0.elements length BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator tmp BinaryOperation - MemberReference p0.elements length MemberReference lengthCommon WhileStatement BinaryOperation > MemberReference -- tmp Literal 0 BlockStatement StatementExpression MethodInvocation pb MemberReference PARENT_ELEMENT addFirst End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference lengthCommon BinaryOperation < MemberReference i MemberReference p1.elements length MemberReference ++ i BlockStatement StatementExpression MethodInvocation pb MemberReference p1 ArraySelector MemberReference i elements addLast End ReturnStatement MethodInvocation pb getPath MethodDeclaration /**
     * Returns the ancestor path of the specified relative degree.
     * <p/>
     * An ancestor of relative degree <i>x</i> is the path that is <i>x</i>
     * levels up along the path.
     * <ul>
     * <li><i>degree</i> = 0 returns this path.
     * <li><i>degree</i> = 1 returns the parent of this path.
     * <li><i>degree</i> = 2 returns the grandparent of this path.
     * <li>And so on to <i>degree</i> = <i>n</i>, where <i>n</i> is the depth
     * of this path, which returns the root path.
     * </ul>
     * <p/>
     * Note that there migth be an unexpected result if <i>this</i> path is not
     * normalized, e.g. the ancestor of degree = 1 of the path ""../.."" would
     * be "".."" although this is not the parent of ""../.."".
     *
     * @param degree the relative degree of the requested ancestor.
     * @return the ancestor path of the specified degree.
     * @throws javax.jcr.PathNotFoundException    if there is no ancestor of the specified
     *                                  degree
     * @throws IllegalArgumentException if <code>degree</code> is negative
     */ Modifier public ReferenceType Path getAncestor FormalParameter BasicType int degree IllegalArgumentException PathNotFoundException IfStatement BinaryOperation < MemberReference degree Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""degree must be >= 0"" IfStatement BinaryOperation == MemberReference degree Literal 0 BlockStatement ReturnStatement This End End LocalVariableDeclaration BasicType int VariableDeclarator length BinaryOperation - MemberReference elements length MemberReference degree IfStatement BinaryOperation < MemberReference length Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException BinaryOperation + Literal ""no such ancestor path of degree "" MemberReference degree End LocalVariableDeclaration ReferenceType PathElement VariableDeclarator elements ArrayCreator ReferenceType PathElement MemberReference length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i elements This MemberReference elements ArraySelector MemberReference i = End ReturnStatement ClassCreator ReferenceType Path MemberReference elements MemberReference normalized MethodDeclaration /**
     * Returns the number of ancestors of this path. This is the equivalent
     * of <code>{@link #getDepth()} - 1</code>.
     * <p/>
     * Note that the returned value might be negative if this path is not
     * canonical, e.g. the depth of ""../../a"" is -1, its ancestor count is
     * therefore -2.
     *
     * @return the number of ancestors of this path
     * @see #getDepth()
     * @see #getLength()
     * @see #isCanonical()
     */ Modifier public BasicType int getAncestorCount ReturnStatement BinaryOperation - MethodInvocation getDepth Literal 1 MethodDeclaration /**
     * Returns the length of this path, i.e. the number of its elements.
     * Note that the root element ""/"" counts as a separate element, e.g.
     * the length of ""/a/b/c"" is 4 whereas the length of ""a/b/c"" is 3.
     * <p/>
     * Also note that the special elements ""."" and "".."" are not treated
     * specially, e.g. both ""/a/./.."" and ""/a/b/c"" have a length of 4
     * but this value does not necessarily reflect the true hierarchy level as
     * returned by <code>{@link #getDepth()}</code>.
     *
     * @return the length of this path
     * @see #getDepth()
     * @see #getAncestorCount()
     */ Modifier public BasicType int getLength ReturnStatement MemberReference elements length MethodDeclaration /**
     * Returns the depth of this path. The depth reflects the absolute or
     * relative hierarchy level this path is representing, depending on whether
     * this path is an absolute or a relative path. The depth also takes '.'
     * and '..' elements into account.
     * <p/>
     * Note that the returned value might be negative if this path is not
     * canonical, e.g. the depth of ""../../a"" is -1.
     *
     * @return the depth this path
     * @see #getLength()
     * @see #getAncestorCount()
     */ Modifier public BasicType int getDepth LocalVariableDeclaration BasicType int VariableDeclarator depth Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elements length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation denotesParent elements BlockStatement StatementExpression MemberReference -- depth IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation denotesCurrent elements BlockStatement StatementExpression MemberReference ++ depth End End End ReturnStatement MemberReference depth MethodDeclaration /**
     * Determines if <i>this</i> path is an ancestor of the specified path,
     * based on their (absolute or relative) hierarchy level as returned by
     * <code>{@link #getDepth()}</code>.
     *
     * @return <code>true</code> if <code>other</code> is a descendant;
     *         otherwise <code>false</code>
     * @throws MalformedPathException if not both paths are either absolute or
     *                                relative.
     * @see #getDepth()
     */ Modifier public BasicType boolean isAncestorOf FormalParameter ReferenceType Path other MalformedPathException IfStatement BinaryOperation == MemberReference other Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""null argument"" End IfStatement BinaryOperation != MethodInvocation isAbsolute MethodInvocation other isAbsolute BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException Literal ""cannot compare a relative path with an absolute path"" End LocalVariableDeclaration ReferenceType Path VariableDeclarator p0 MethodInvocation getNormalizedPath LocalVariableDeclaration ReferenceType Path VariableDeclarator p1 MethodInvocation other getNormalizedPath IfStatement MethodInvocation p0 MemberReference p1 equals BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation >= MethodInvocation p0 getDepth MethodInvocation p1 getDepth BlockStatement ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference p0.elements length MemberReference ++ i BlockStatement IfStatement MemberReference ! p0 ArraySelector MemberReference i MethodInvocation MemberReference p1 ArraySelector MemberReference i elements equals elements BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration /**
     * Determines if <i>this</i> path is a descendant of the specified path,
     * based on their (absolute or relative) hierarchy level as returned by
     * <code>{@link #getDepth()}</code>.
     *
     * @return <code>true</code> if <code>other</code> is an ancestor;
     *         otherwise <code>false</code>
     * @throws MalformedPathException if not both paths are either absolute or
     *                                relative.
     * @see #getDepth()
     */ Modifier public BasicType boolean isDescendantOf FormalParameter ReferenceType Path other MalformedPathException IfStatement BinaryOperation == MemberReference other Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""null argument"" End ReturnStatement MethodInvocation other This isAncestorOf MethodDeclaration /**
     * Returns the name element (i.e. the last element) of this path.
     *
     * @return the name element of this path
     */ Modifier public ReferenceType PathElement getNameElement ReturnStatement MemberReference ArraySelector BinaryOperation - MemberReference elements length Literal 1 elements MethodDeclaration /**
     * Returns the elements of this path.
     *
     * @return the elements of this path.
     */ Modifier public ReferenceType PathElement getElements ReturnStatement MemberReference elements MethodDeclaration /**
     * Returns a string representation of this <code>Path</code> in the
     * JCR path format.
     *
     * @param resolver namespace resolver
     * @return JCR path
     * @throws NoPrefixDeclaredException if a namespace can not be resolved
     */ Modifier public ReferenceType String toJCRPath FormalParameter ReferenceType NamespaceResolver resolver NoPrefixDeclaredException IfStatement MethodInvocation denotesRoot BlockStatement ReturnStatement Literal ""/"" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elements length MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation sb Literal '/' append End LocalVariableDeclaration ReferenceType PathElement VariableDeclarator element MemberReference ArraySelector MemberReference i elements StatementExpression MethodInvocation element MemberReference resolver MemberReference sb toJCRName End ReturnStatement MethodInvocation sb toString MethodDeclaration /**
     * Returns the internal string representation of this <code>Path</code>.
     * <p/>
     * Note that the returned string is not a valid JCR path, i.e. the
     * namespace URI's of the individual path elements are not replaced with
     * their mapped prefixes. Call
     * <code>{@link #toJCRPath(NamespaceResolver)}</code>
     * for a JCR path representation.
     *
     * @return the internal string representation of this <code>Path</code>.
     */ Modifier public ReferenceType String toString IfStatement BinaryOperation == MemberReference string Literal null BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elements length MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation sb Literal '\t' append End LocalVariableDeclaration ReferenceType PathElement VariableDeclarator element MemberReference ArraySelector MemberReference i elements LocalVariableDeclaration ReferenceType String VariableDeclarator elem MethodInvocation element toString StatementExpression MethodInvocation sb MemberReference elem append End StatementExpression Assignment MemberReference string MethodInvocation sb toString = End ReturnStatement MemberReference string MethodDeclaration /**
     * Returns a <code>Path</code> holding the value of the specified
     * string. The string must be in the format returned by the
     * <code>Path.toString()</code> method.
     *
     * @param s a <code>String</code> containing the <code>Path</code>
     *          representation to be parsed.
     * @return the <code>Path</code> represented by the argument
     * @throws IllegalArgumentException if the specified string can not be parsed
     *                                  as a <code>Path</code>.
     * @see #toString()
     */ Modifier public static ReferenceType Path valueOf FormalParameter ReferenceType String s IllegalArgumentException IfStatement BinaryOperation || Literal MethodInvocation MemberReference s equals """" BinaryOperation == MemberReference s Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""invalid Path literal"" End LocalVariableDeclaration ReferenceType String VariableDeclarator elements MethodInvocation Text MemberReference s Literal '\t' Literal true explode LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator list ClassCreator ReferenceType ArrayList LocalVariableDeclaration BasicType boolean VariableDeclarator isNormalized Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator leadingParent Literal true ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elements length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType PathElement VariableDeclarator elem MethodInvocation PathElement MemberReference ArraySelector MemberReference i elements fromString StatementExpression MethodInvocation list MemberReference elem add StatementExpression Assignment MemberReference leadingParent MethodInvocation elem denotesParent &= StatementExpression Assignment MemberReference isNormalized BinaryOperation && MethodInvocation ! elem denotesCurrent BinaryOperation || MemberReference leadingParent MethodInvocation ! elem denotesParent &= End ReturnStatement ClassCreator ReferenceType Path Cast ReferenceType PathElement MethodInvocation list ArrayCreator ReferenceType PathElement MethodInvocation list size toArray MemberReference isNormalized MethodDeclaration /**
     * Returns a hash code value for this path.
     *
     * @return a hash code value for this path.
     * @see Object#hashCode()
     */ Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator h MemberReference hash IfStatement BinaryOperation == MemberReference h Literal 0 BlockStatement StatementExpression Assignment MemberReference h Literal 17 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elements length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 37 MemberReference h MemberReference ArraySelector MemberReference i MethodInvocation hashCode elements = End StatementExpression Assignment MemberReference hash MemberReference h = End ReturnStatement MemberReference h MethodDeclaration /**
     * Compares the specified object with this path for equality.
     *
     * @param obj the object to be compared for equality with this path.
     * @return <tt>true</tt> if the specified object is equal to this path.
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType Path BlockStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator other Cast ReferenceType Path MemberReference obj ReturnStatement MethodInvocation Arrays MemberReference elements MemberReference other elements equals End ReturnStatement Literal false ClassDeclaration Modifier public final static /**
     * Internal helper class used to build a path from pre-parsed path elements.
     * <p/>
     * <strong>Warning!</strong> This class does neither validate the format of
     * the path elements nor does it validate the format of the entire path!
     * This class should therefore only be used in special situations. The
     * regular way of creating/building a <code>Path</code> object is by calling
     * any of the overloaded <code>Path.create()</code> factory methods.
     */ PathBuilder FieldDeclaration /**
         * the list of path elements of the constructed path
         */ Modifier private final ReferenceType LinkedList VariableDeclarator queue FieldDeclaration /**
         * flag indicating if the current path is normalized
         */ BasicType boolean VariableDeclarator isNormalized Literal true FieldDeclaration /**
         * flag indicating if the current path has leading parent '..' elements
         */ BasicType boolean VariableDeclarator leadingParent Literal true ConstructorDeclaration Modifier public /**
         * Creates a new PathBuilder.
         */ PathBuilder StatementExpression Assignment MemberReference queue ClassCreator ReferenceType LinkedList = ConstructorDeclaration Modifier public /**
         * Creates a new PathBuilder and initialized it with the given path
         * elements.
         *
         * @param elements
         */ PathBuilder FormalParameter ReferenceType PathElement elements StatementExpression ExplicitConstructorInvocation StatementExpression MethodInvocation MemberReference elements addAll MethodDeclaration /**
         * Adds the {@link Path#ROOT_ELEMENT}.
         */ Modifier public addRoot StatementExpression MethodInvocation MemberReference ROOT_ELEMENT addFirst MethodDeclaration /**
         * Adds the given elemenets
         *
         * @param elements
         */ Modifier public addAll FormalParameter ReferenceType PathElement elements ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elements length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i elements addLast End MethodDeclaration /**
         * Inserts the element at the beginning of the path to be built.
         *
         * @param elem
         */ Modifier public addFirst FormalParameter ReferenceType PathElement elem IfStatement MethodInvocation queue isEmpty BlockStatement StatementExpression Assignment MemberReference isNormalized MethodInvocation ! elem denotesCurrent &= StatementExpression Assignment MemberReference leadingParent MethodInvocation elem denotesParent = BlockStatement StatementExpression Assignment MemberReference isNormalized BinaryOperation && MethodInvocation ! elem denotesCurrent BinaryOperation || MemberReference ! leadingParent MethodInvocation elem denotesParent &= StatementExpression Assignment MemberReference leadingParent MethodInvocation elem denotesParent |= End StatementExpression MethodInvocation queue MemberReference elem addFirst MethodDeclaration /**
         * Inserts the element at the beginning of the path to be built.
         *
         * @param name
         */ Modifier public addFirst FormalParameter ReferenceType QName name StatementExpression MethodInvocation ClassCreator ReferenceType PathElement MemberReference name addFirst MethodDeclaration /**
         * Inserts the element at the beginning of the path to be built.
         *
         * @param name
         * @param index
         */ Modifier public addFirst FormalParameter ReferenceType QName name FormalParameter BasicType int index StatementExpression MethodInvocation ClassCreator ReferenceType PathElement MemberReference name MemberReference index addFirst MethodDeclaration /**
         * Inserts the element at the end of the path to be built.
         *
         * @param elem
         */ Modifier public addLast FormalParameter ReferenceType PathElement elem StatementExpression MethodInvocation queue MemberReference elem addLast StatementExpression Assignment MemberReference leadingParent MethodInvocation elem denotesParent &= StatementExpression Assignment MemberReference isNormalized BinaryOperation && MethodInvocation ! elem denotesCurrent BinaryOperation || MemberReference leadingParent MethodInvocation ! elem denotesParent &= MethodDeclaration /**
         * Inserts the element at the end of the path to be built.
         *
         * @param name
         */ Modifier public addLast FormalParameter ReferenceType QName name StatementExpression MethodInvocation ClassCreator ReferenceType PathElement MemberReference name addLast MethodDeclaration /**
         * Inserts the element at the end of the path to be built.
         *
         * @param name
         * @param index
         */ Modifier public addLast FormalParameter ReferenceType QName name FormalParameter BasicType int index StatementExpression MethodInvocation ClassCreator ReferenceType PathElement MemberReference name MemberReference index addLast MethodDeclaration /**
         * Assembles the built path and returns a new {@link Path}.
         *
         * @return a new {@link Path}
         * @throws MalformedPathException if the internal path element queue is empty.
         */ Modifier public ReferenceType Path getPath MalformedPathException LocalVariableDeclaration ReferenceType PathElement VariableDeclarator elements Cast ReferenceType PathElement MethodInvocation queue ArrayCreator ReferenceType PathElement MethodInvocation queue size toArray IfStatement BinaryOperation == MemberReference elements length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType MalformedPathException Literal ""empty path"" End ReturnStatement ClassCreator ReferenceType Path MemberReference elements MemberReference isNormalized MethodDeclaration Modifier public ReferenceType Object clone LocalVariableDeclaration ReferenceType PathBuilder VariableDeclarator clone ClassCreator ReferenceType PathBuilder StatementExpression MethodInvocation clone.queue MemberReference queue addAll ReturnStatement MemberReference clone ReferenceType Cloneable ClassDeclaration Modifier public final static RootElement FieldDeclaration Modifier final static ReferenceType String VariableDeclarator LITERAL Literal ""*"" ConstructorDeclaration Modifier private RootElement StatementExpression SuperConstructorInvocation MemberReference QName NS_DEFAULT_URI Literal """" MethodDeclaration Modifier public BasicType boolean denotesRoot ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean denotesCurrent ReturnStatement Literal false MethodDeclaration Modifier public BasicType boolean denotesParent ReturnStatement Literal false MethodDeclaration Modifier public BasicType boolean denotesName ReturnStatement Literal false MethodDeclaration Modifier public ReferenceType String toJCRName FormalParameter ReferenceType NamespaceResolver resolver NoPrefixDeclaredException ReturnStatement Literal """" MethodDeclaration Modifier public ReferenceType String toString ReturnStatement MemberReference LITERAL ReferenceType PathElement ClassDeclaration Modifier public final static CurrentElement FieldDeclaration Modifier final static ReferenceType String VariableDeclarator LITERAL Literal ""."" ConstructorDeclaration Modifier private CurrentElement StatementExpression SuperConstructorInvocation MemberReference QName NS_DEFAULT_URI MemberReference LITERAL MethodDeclaration Modifier public BasicType boolean denotesRoot ReturnStatement Literal false MethodDeclaration Modifier public BasicType boolean denotesCurrent ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean denotesParent ReturnStatement Literal false MethodDeclaration Modifier public BasicType boolean denotesName ReturnStatement Literal false MethodDeclaration Modifier public ReferenceType String toJCRName FormalParameter ReferenceType NamespaceResolver resolver NoPrefixDeclaredException ReturnStatement MemberReference LITERAL MethodDeclaration Modifier public ReferenceType String toString ReturnStatement MemberReference LITERAL ReferenceType PathElement ClassDeclaration Modifier public final static ParentElement FieldDeclaration Modifier final static ReferenceType String VariableDeclarator LITERAL Literal "".."" ConstructorDeclaration Modifier private ParentElement StatementExpression SuperConstructorInvocation MemberReference QName NS_DEFAULT_URI MemberReference LITERAL MethodDeclaration Modifier public BasicType boolean denotesRoot ReturnStatement Literal false MethodDeclaration Modifier public BasicType boolean denotesCurrent ReturnStatement Literal false MethodDeclaration Modifier public BasicType boolean denotesParent ReturnStatement Literal true MethodDeclaration Modifier public BasicType boolean denotesName ReturnStatement Literal false MethodDeclaration Modifier public ReferenceType String toJCRName FormalParameter ReferenceType NamespaceResolver resolver NoPrefixDeclaredException ReturnStatement MemberReference LITERAL MethodDeclaration Modifier public ReferenceType String toString ReturnStatement MemberReference LITERAL ReferenceType PathElement ClassDeclaration Modifier public static /**
     * Object representation of a single JCR path element. A PathElement
     * object contains the qualified name and optional index of a single
     * JCR path element.
     * <p/>
     * Once created, a PathElement object is immutable.
     */ PathElement FieldDeclaration /**
         * Qualified name of the path element.
         */ Modifier private final ReferenceType QName VariableDeclarator name FieldDeclaration /**
         * Optional index of the path element. Set to zero, if not
         * explicitly specified, otherwise contains the 1-based index.
         */ Modifier private final BasicType int VariableDeclarator index ConstructorDeclaration Modifier private /**
         * Creates a path element with the given qualified name.
         * The created path element does not contain an explicit index.
         *
         * @param namespaceURI namespace URI
         * @param localName    local name
         */ PathElement FormalParameter ReferenceType String namespaceURI FormalParameter ReferenceType String localName StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType QName MemberReference namespaceURI MemberReference localName ConstructorDeclaration Modifier private /**
         * Creates a path element with the given qualified name and index.
         *
         * @param namespaceURI namespace URI
         * @param localName    local name
         * @param index        index
         */ PathElement FormalParameter ReferenceType String namespaceURI FormalParameter ReferenceType String localName FormalParameter BasicType int index StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType QName MemberReference namespaceURI MemberReference localName MemberReference index ConstructorDeclaration Modifier private /**
         * Creates a path element with the given qualified name.
         * The created path element does not contain an explicit index.
         *
         * @param name qualified name
         * @throws IllegalArgumentException if the name is <code>null</code>
         */ PathElement FormalParameter ReferenceType QName name IllegalArgumentException IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""name must not be null"" End StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment This MemberReference index Literal 0 = ConstructorDeclaration Modifier private /**
         * Creates a path element with the given qualified name and index.
         *
         * @param name  qualified name
         * @param index index
         * @throws IllegalArgumentException if the name is <code>null</code>
         */ PathElement FormalParameter ReferenceType QName name FormalParameter BasicType int index IllegalArgumentException IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""name must not be null"" End IfStatement BinaryOperation < MemberReference index Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""index is 1-based"" End StatementExpression Assignment This MemberReference index MemberReference index = StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
         * Returns the qualified name of this path element.
         *
         * @return qualified name
         */ Modifier public ReferenceType QName getName ReturnStatement MemberReference name MethodDeclaration /**
         * Returns the 1-based index or 0 if no index was specified (which is
         * equivalent to specifying 1).
         *
         * @return Returns the 1-based index or 0 if no index was specified.
         */ Modifier public BasicType int getIndex ReturnStatement MemberReference index MethodDeclaration /**
         * Returns <code>true</code> if this element denotes the <i>root</i> element,
         * otherwise returns <code>false</code>.
         *
         * @return <code>true</code> if this element denotes the <i>root</i>
         *         element; otherwise <code>false</code>
         */ Modifier public BasicType boolean denotesRoot ReturnStatement MethodInvocation MemberReference ROOT_ELEMENT equals MethodDeclaration /**
         * Returns <code>true</code> if this element denotes the <i>parent</i>
         * ('..') element, otherwise returns <code>false</code>.
         *
         * @return <code>true</code> if this element denotes the <i>parent</i>
         *         element; otherwise <code>false</code>
         */ Modifier public BasicType boolean denotesParent ReturnStatement MethodInvocation MemberReference PARENT_ELEMENT equals MethodDeclaration /**
         * Returns <code>true</code> if this element denotes the <i>current</i>
         * ('.') element, otherwise returns <code>false</code>.
         *
         * @return <code>true</code> if this element denotes the <i>current</i>
         *         element; otherwise <code>false</code>
         */ Modifier public BasicType boolean denotesCurrent ReturnStatement MethodInvocation MemberReference CURRENT_ELEMENT equals MethodDeclaration /**
         * Returns <code>true</code> if this element represents a regular name
         * (i.e. neither root, '.' nor '..'), otherwise returns <code>false</code>.
         *
         * @return <code>true</code> if this element represents a regular name;
         *         otherwise <code>false</code>
         */ Modifier public BasicType boolean denotesName ReturnStatement BinaryOperation && BinaryOperation && MethodInvocation ! denotesRoot MethodInvocation ! denotesParent MethodInvocation ! denotesCurrent MethodDeclaration /**
         * Returns the JCR name representation of this path element.
         * Note that strictly speaking the returned value is in fact
         * a JCR relative path instead of a JCR name, as it contains
         * the index value if the index is greater than one.
         *
         * @param resolver namespace resolver
         * @return JCR name representation of the path element
         * @throws NoPrefixDeclaredException if the namespace of the path
         *                                   element name can not be resolved
         */ Modifier public ReferenceType String toJCRName FormalParameter ReferenceType NamespaceResolver resolver NoPrefixDeclaredException LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation MemberReference resolver MemberReference sb toJCRName ReturnStatement MethodInvocation sb toString MethodDeclaration /**
         * Appends the JCR name representation of this path element to the
         * given string buffer.
         *
         * @param resolver namespace resolver
         * @param buf      string buffer where the JCR name representation
         *                 should be appended to
         * @throws NoPrefixDeclaredException if the namespace of the path
         *                                   element name can not be resolved
         * @see #toJCRName(NamespaceResolver)
         */ Modifier public toJCRName FormalParameter ReferenceType NamespaceResolver resolver FormalParameter ReferenceType StringBuffer buf NoPrefixDeclaredException StatementExpression MethodInvocation name MemberReference resolver MemberReference buf toJCRName LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation getIndex IfStatement BinaryOperation > MemberReference index Literal 1 BlockStatement StatementExpression MethodInvocation buf Literal '[' append StatementExpression MethodInvocation buf MemberReference index append StatementExpression MethodInvocation buf Literal ']' append End MethodDeclaration /**
         * Returns a string representation of this path element. Note that
         * the path element name is expressed using the <code>{uri}name</code>
         * syntax. Use the {@link #toJCRName(NamespaceResolver) toJCRName}
         * method to get the prefixed string representation of the path element.
         *
         * @return string representation of the path element
         */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation sb MethodInvocation name toString append LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation getIndex IfStatement BinaryOperation > MemberReference index Literal 0 BlockStatement StatementExpression MethodInvocation sb Literal '[' append StatementExpression MethodInvocation sb MemberReference index append StatementExpression MethodInvocation sb Literal ']' append End ReturnStatement MethodInvocation sb toString MethodDeclaration /**
         * Parses the given path element string into a path element object.
         *
         * @param s path element string
         * @return path element object
         * @throws IllegalArgumentException if the given path element string
         *                                  is <code>null</code> or if its
         *                                  format is invalid
         */ Modifier public static ReferenceType PathElement fromString FormalParameter ReferenceType String s IllegalArgumentException IfStatement BinaryOperation == MemberReference s Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""null PathElement literal"" End IfStatement MethodInvocation s MemberReference RootElement LITERAL equals BlockStatement ReturnStatement MemberReference ROOT_ELEMENT IfStatement MethodInvocation s MemberReference CurrentElement LITERAL equals BlockStatement ReturnStatement MemberReference CURRENT_ELEMENT IfStatement MethodInvocation s MemberReference ParentElement LITERAL equals BlockStatement ReturnStatement MemberReference PARENT_ELEMENT End End End LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation s Literal '[' indexOf IfStatement BinaryOperation == MemberReference pos Literal - 1 BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator name MethodInvocation QName MemberReference s valueOf ReturnStatement ClassCreator ReferenceType PathElement MethodInvocation name getNamespaceURI MethodInvocation name getLocalName End LocalVariableDeclaration ReferenceType QName VariableDeclarator name MethodInvocation QName MethodInvocation s Literal 0 MemberReference pos substring valueOf LocalVariableDeclaration BasicType int VariableDeclarator pos1 MethodInvocation s Literal ']' indexOf IfStatement BinaryOperation == MemberReference pos1 Literal - 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""invalid PathElement literal: "" MemberReference s Literal "" (missing ']')"" End TryStatement LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation Integer MethodInvocation intValue MethodInvocation s BinaryOperation + MemberReference pos Literal 1 MemberReference pos1 substring valueOf IfStatement BinaryOperation < MemberReference index Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""invalid PathElement literal: "" MemberReference s Literal "" (index is 1-based)"" End ReturnStatement ClassCreator ReferenceType PathElement MethodInvocation name getNamespaceURI MethodInvocation name getLocalName MemberReference index CatchClause CatchClauseParameter Throwable t ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""invalid PathElement literal: "" MemberReference s Literal "" ("" MethodInvocation t getMessage Literal "")"" MethodDeclaration /**
         * Computes a hash code for this path element.
         *
         * @return hash code
         */ Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator h Literal 17 StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 37 MemberReference h MemberReference index = StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 37 MemberReference h MethodInvocation name hashCode = ReturnStatement MemberReference h MethodDeclaration /**
         * Check for path element equality. Returns true if the given
         * object is a PathElement and contains the same name and index
         * as this one.
         *
         * @param obj the object to compare with
         * @return <code>true</code> if the path elements are equal
         */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType PathElement BlockStatement LocalVariableDeclaration ReferenceType PathElement VariableDeclarator other Cast ReferenceType PathElement MemberReference obj ReturnStatement BinaryOperation && MethodInvocation name MemberReference other name equals BinaryOperation == MemberReference index MemberReference other index End ReturnStatement Literal false",0
404,404,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.value Import java.io.Serializable Import javax.jcr.Value InterfaceDeclaration Modifier public /**
 * The <code>StatefullValue</code> interface defines the API used for the state
 * classes used by the {@link org.apache.jackrabbit.rmi.value.SerialValue} class.
 * <p>
 * This is a marker interface with two purposes; it separates the value
 * state classes from the more general value classes, and it forces the
 * state classes to be serializable. This interface is used only internally
 * by the State pattern implementation of the
 * {@link org.apache.jackrabbit.rmi.value.SerialValue} class.
 * <p>
 * This interface is not intended to be implemented by clients. Rather any of
 * the concrete implementations of this class should be used or overwritten as
 * appropriate.
 *
 * @version $Revision$, $Date$
 * @author Felix Meschberger
 * @since 0.16.4.1
 *
 * @see org.apache.jackrabbit.rmi.value.SerialValue
 */ StatefulValue ReferenceType Value ReferenceType Serializable",0
659,659,,0
226,226,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.lock Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.Namespace Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.w3c.dom.Element Import org.w3c.dom.Document Import java.util.Map Import java.util.HashMap ClassDeclaration Modifier public /**
 * The <code>Scope</code> class abstracts the lock scope as defined by RFC 2518.
 */ Scope FieldDeclaration Modifier private final static ReferenceType Map VariableDeclarator scopes ClassCreator ReferenceType HashMap FieldDeclaration Modifier public final static ReferenceType Scope VariableDeclarator EXCLUSIVE MethodInvocation Scope MemberReference DavConstants XML_EXCLUSIVE MemberReference DavConstants NAMESPACE create FieldDeclaration Modifier public final static ReferenceType Scope VariableDeclarator SHARED MethodInvocation Scope MemberReference DavConstants XML_SHARED MemberReference DavConstants NAMESPACE create FieldDeclaration Modifier private final ReferenceType String VariableDeclarator localName FieldDeclaration Modifier private final ReferenceType Namespace VariableDeclarator namespace ConstructorDeclaration Modifier private /**
     * Private constructor
     *
     * @param localName
     * @param namespace
     */ Scope FormalParameter ReferenceType String localName FormalParameter ReferenceType Namespace namespace StatementExpression Assignment This MemberReference localName MemberReference localName = StatementExpression Assignment This MemberReference namespace MemberReference namespace = MethodDeclaration /**
     * Return the Xml representation of the lock scope object as present in
     * the LOCK request and response body and in the {@link LockDiscovery}.
     *
     * @return Xml representation
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator lockScope MethodInvocation DomUtil MemberReference document MemberReference DavConstants XML_LOCKSCOPE MemberReference DavConstants NAMESPACE createElement StatementExpression MethodInvocation DomUtil MemberReference lockScope MemberReference localName MemberReference namespace addChildElement ReturnStatement MemberReference lockScope MethodDeclaration /**
     * Returns <code>true</code> if this Scope is equal to the given one.
     *
     * @param obj
     * @return
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType Scope BlockStatement LocalVariableDeclaration ReferenceType Scope VariableDeclarator other Cast ReferenceType Scope MemberReference obj ReturnStatement BinaryOperation && MethodInvocation localName MemberReference other localName equals MethodInvocation namespace MemberReference other namespace equals End ReturnStatement Literal false MethodDeclaration /**
     * Create a <code>Scope</code> object from the given Xml element.
     *
     * @param lockScope
     * @return Scope object.
     */ Modifier public static ReferenceType Scope createFromXml FormalParameter ReferenceType Element lockScope IfStatement BinaryOperation && BinaryOperation != MemberReference lockScope Literal null MethodInvocation DavConstants.XML_LOCKSCOPE MethodInvocation lockScope getLocalName equals BlockStatement StatementExpression Assignment MemberReference lockScope MethodInvocation DomUtil MemberReference lockScope getFirstChildElement = End IfStatement BinaryOperation == MemberReference lockScope Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""'null' is not a valid lock scope entry."" End LocalVariableDeclaration ReferenceType Namespace VariableDeclarator namespace MethodInvocation Namespace MethodInvocation lockScope getPrefix MethodInvocation lockScope getNamespaceURI getNamespace ReturnStatement MethodInvocation MethodInvocation lockScope getLocalName MemberReference namespace create MethodDeclaration /**
     * Create a <code>Scope</code> object from the given name and namespace.
     *
     * @param localName
     * @param namespace
     * @return Scope object.
     */ Modifier public static ReferenceType Scope create FormalParameter ReferenceType String localName FormalParameter ReferenceType Namespace namespace LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation DomUtil MemberReference localName MemberReference namespace getQualifiedName IfStatement MethodInvocation scopes MemberReference key containsKey BlockStatement ReturnStatement Cast ReferenceType Scope MethodInvocation scopes MemberReference key get BlockStatement LocalVariableDeclaration ReferenceType Scope VariableDeclarator scope ClassCreator ReferenceType Scope MemberReference localName MemberReference namespace StatementExpression MethodInvocation scopes MemberReference key MemberReference scope put ReturnStatement MemberReference scope End ReferenceType XmlSerializable",1
26,26,"CompilationUnit PackageDeclaration org.apache.jackrabbit.state.nodetype Import org.apache.jackrabbit.name.QName ClassDeclaration Modifier public /**
 * Node type state. Instances of this class are used to hold
 * and manage the internal state of node types.
 */ NodeTypeState FieldDeclaration /** Name of the node type. */ Modifier private ReferenceType QName VariableDeclarator name Literal null FieldDeclaration /** The Mixin node type property. */ Modifier private BasicType boolean VariableDeclarator mixin Literal false FieldDeclaration /** The HasOrderableChildNodes node type property. */ Modifier private BasicType boolean VariableDeclarator hasOrderableChildNodes Literal false FieldDeclaration /** Name of the primary item of the node type. */ Modifier private ReferenceType QName VariableDeclarator primaryItemName Literal null FieldDeclaration /** Names of the declared supertypes. */ Modifier private ReferenceType QName VariableDeclarator supertypeNames ArrayCreator ReferenceType QName Literal 0 FieldDeclaration /** Child node definition states. */ Modifier private ReferenceType NodeDefinitionState VariableDeclarator childNodeDefinitionStates ArrayCreator ReferenceType NodeDefinitionState Literal 0 FieldDeclaration /** Property definition states. */ Modifier private ReferenceType PropertyDefinitionState VariableDeclarator propertyDefinitionStates ArrayCreator ReferenceType PropertyDefinitionState Literal 0 MethodDeclaration /**
     * Returns the node type name.
     *
     * @return qualified name
     */ Modifier public ReferenceType QName getName ReturnStatement MemberReference name MethodDeclaration /**
     * Sets the node type name.
     *
     * @param name new qualified name
     */ Modifier public setName FormalParameter ReferenceType QName name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * Returns the value of the Mixin node type property.
     *
     * @return Mixin property value
     */ Modifier public BasicType boolean isMixin ReturnStatement MemberReference mixin MethodDeclaration /**
     * Sets the value of the Mixin node type property.
     *
     * @param mixin new Mixin property value
     */ Modifier public setMixin FormalParameter BasicType boolean mixin StatementExpression Assignment This MemberReference mixin MemberReference mixin = MethodDeclaration /**
     * Returns the value of the HasOrderableChildNodes node type property.
     *
     * @return HasOrderableChildNodes property value
     */ Modifier public BasicType boolean hasOrderableChildNodes ReturnStatement MemberReference hasOrderableChildNodes MethodDeclaration /**
     * Sets the value of the HasOrderableChildNodes node type property.
     *
     * @param hasOrderableChildNodes new HasOrderableChildNodes property value
     */ Modifier public setHasOrderableChildNodes FormalParameter BasicType boolean hasOrderableChildNodes StatementExpression Assignment This MemberReference hasOrderableChildNodes MemberReference hasOrderableChildNodes = MethodDeclaration /**
     * Returns the name of the primary item of the node type.
     *
     * @return primary item name
     */ Modifier public ReferenceType QName getPrimaryItemName ReturnStatement MemberReference primaryItemName MethodDeclaration /**
     * Sets the name of the primary item of the node type.
     *
     * @param primaryItemName new primary item name
     */ Modifier public setPrimaryItemName FormalParameter ReferenceType QName primaryItemName StatementExpression Assignment This MemberReference primaryItemName MemberReference primaryItemName = MethodDeclaration /**
     * Returns the names of the declared supertypes.
     *
     * @return supertype names
     */ Modifier public ReferenceType QName getSupertypeNames ReturnStatement MemberReference supertypeNames MethodDeclaration /**
     * Sets the list of declared supertypes.
     *
     * @param supertypeNames supertype names
     */ Modifier public setSupertypeNames FormalParameter ReferenceType QName supertypeNames StatementExpression Assignment This MemberReference supertypeNames MemberReference supertypeNames = MethodDeclaration /**
     * Returns the child node definition states of the node type.
     *
     * @return child node definition states
     */ Modifier public ReferenceType NodeDefinitionState getChildNodeDefinitionStates ReturnStatement MemberReference childNodeDefinitionStates MethodDeclaration /**
     * Sets the list of child node definition states of the node type.
     *
     * @param childNodeDefinitionStates child node definition states
     */ Modifier public setChildNodeDefinitionStates FormalParameter ReferenceType NodeDefinitionState childNodeDefinitionStates StatementExpression Assignment This MemberReference childNodeDefinitionStates MemberReference childNodeDefinitionStates = MethodDeclaration /**
     * Returns the property definition states of the node type.
     *
     * @return property definition states
     */ Modifier public ReferenceType PropertyDefinitionState getPropertyDefinitionStates ReturnStatement MemberReference propertyDefinitionStates MethodDeclaration /**
     * Sets the list of property definition states of the node type.
     *
     * @param propertyDefinitionStates property definition states
     */ Modifier public setPropertyDefinitionStates FormalParameter ReferenceType PropertyDefinitionState propertyDefinitionStates StatementExpression Assignment This MemberReference propertyDefinitionStates MemberReference propertyDefinitionStates = MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object object ReturnStatement BinaryOperation || BinaryOperation == This MemberReference object BinaryOperation && BinaryOperation != MemberReference object Literal null BinaryOperation == ClassCreator MethodInvocation This MemberReference object compare ReferenceType StateComparator Literal 0 MethodDeclaration Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator code Literal 37 StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 17 TernaryExpression BinaryOperation != MemberReference name Literal null MethodInvocation name hashCode Literal 0 = StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 17 TernaryExpression MemberReference mixin Literal 1 Literal 0 = StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 17 TernaryExpression MemberReference hasOrderableChildNodes Literal 1 Literal 0 = ReturnStatement MemberReference code",0
512,512,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core Import org.apache.commons.collections.iterators.IteratorChain Import org.apache.commons.collections.map.ReferenceMap Import org.apache.jackrabbit.core.nodetype.EffectiveNodeType Import org.apache.jackrabbit.core.nodetype.NodeDef Import org.apache.jackrabbit.core.nodetype.NodeTypeImpl Import org.apache.jackrabbit.core.nodetype.PropDef Import org.apache.jackrabbit.core.nodetype.PropertyDefinitionImpl Import org.apache.jackrabbit.core.security.AccessManager Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.ItemStateListener Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.SessionItemStateManager Import org.apache.jackrabbit.core.state.StaleItemStateException Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.core.version.VersionManager Import org.apache.jackrabbit.name.NoPrefixDeclaredException Import org.apache.jackrabbit.name.Path Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.uuid.UUID Import org.apache.log4j.Logger Import javax.jcr.AccessDeniedException Import javax.jcr.InvalidItemStateException Import javax.jcr.Item Import javax.jcr.ItemExistsException Import javax.jcr.ItemNotFoundException Import javax.jcr.ItemVisitor Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.PropertyType Import javax.jcr.ReferentialIntegrityException Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.lock.LockException Import javax.jcr.nodetype.ConstraintViolationException Import javax.jcr.nodetype.NoSuchNodeTypeException Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.PropertyDefinition Import javax.jcr.version.VersionException Import javax.jcr.version.VersionHistory Import java.util.ArrayList Import java.util.Collection Import java.util.Collections Import java.util.HashSet Import java.util.Iterator Import java.util.Map Import java.util.Set ClassDeclaration Modifier public abstract /**
 * <code>ItemImpl</code> implements the <code>Item</code> interface.
 */ ItemImpl FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ItemImpl getLogger FieldDeclaration Modifier final protected static BasicType int VariableDeclarator STATUS_NORMAL Literal 0 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator STATUS_MODIFIED Literal 1 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator STATUS_DESTROYED Literal 2 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator STATUS_INVALIDATED Literal 3 FieldDeclaration Modifier protected BasicType int VariableDeclarator status FieldDeclaration Modifier final protected ReferenceType ItemId VariableDeclarator id FieldDeclaration /**
     * <code>Session</code> through which this <code>Item</code> was acquired
     */ Modifier final protected ReferenceType SessionImpl VariableDeclarator session FieldDeclaration /**
     * the <code>Repository</code> object
     */ Modifier final protected ReferenceType RepositoryImpl VariableDeclarator rep FieldDeclaration /**
     * <code>ItemState</code> associated with this <code>Item</code>
     */ Modifier protected ReferenceType ItemState VariableDeclarator state FieldDeclaration /**
     * <code>ItemManager</code> that created this <code>Item</code>
     */ Modifier final protected ReferenceType ItemManager VariableDeclarator itemMgr FieldDeclaration /**
     * <code>SessionItemStateManager</code> associated with this <code>Item</code>
     */ Modifier final protected ReferenceType SessionItemStateManager VariableDeclarator stateMgr FieldDeclaration /**
     * Listeners (weak references)
     */ Modifier final protected ReferenceType Map VariableDeclarator listeners MethodInvocation Collections ClassCreator ReferenceType ReferenceMap MemberReference ReferenceMap WEAK MemberReference ReferenceMap WEAK synchronizedMap ConstructorDeclaration /**
     * Package private constructor.
     *
     * @param itemMgr   the <code>ItemManager</code> that created this <code>Item</code>
     * @param session   the <code>Session</code> through which this <code>Item</code> is acquired
     * @param id        id of this <code>Item</code>
     * @param state     state associated with this <code>Item</code>
     * @param listeners listeners on life cylce changes of this <code>ItemImpl</code>
     */ ItemImpl FormalParameter ReferenceType ItemManager itemMgr FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType ItemId id FormalParameter ReferenceType ItemState state FormalParameter ReferenceType ItemLifeCycleListener listeners StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment MemberReference rep Cast ReferenceType RepositoryImpl MethodInvocation session getRepository = StatementExpression Assignment MemberReference stateMgr MethodInvocation session getItemStateManager = StatementExpression Assignment This MemberReference id MemberReference id = StatementExpression Assignment This MemberReference itemMgr MemberReference itemMgr = StatementExpression Assignment This MemberReference state MemberReference state = StatementExpression Assignment MemberReference status MemberReference STATUS_NORMAL = IfStatement BinaryOperation != MemberReference listeners Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference listeners length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i listeners addLifeCycleListener End End StatementExpression MethodInvocation notifyCreated StatementExpression This MemberReference state MethodInvocation This addListener MethodDeclaration /**
     * Performs a sanity check on this item and the associated session.
     *
     * @throws RepositoryException if this item has been rendered invalid for some reason
     */ Modifier protected sanityCheck RepositoryException StatementExpression MethodInvocation session sanityCheck IfStatement BinaryOperation || BinaryOperation == MemberReference status MemberReference STATUS_DESTROYED BinaryOperation == MemberReference status MemberReference STATUS_INVALIDATED BlockStatement ThrowStatement ClassCreator ReferenceType InvalidItemStateException BinaryOperation + MemberReference id Literal "": the item does not exist anymore"" End MethodDeclaration Modifier protected BasicType boolean isTransient ReturnStatement MethodInvocation state isTransient MethodDeclaration Modifier protected abstract ReferenceType ItemState getOrCreateTransientItemState RepositoryException MethodDeclaration Modifier protected abstract makePersistent InvalidItemStateException MethodDeclaration /**
     * Marks this instance as 'removed' and notifies its listeners.
     * The resulting state is either 'temporarily invalidated' or
     * 'permanently invalidated', depending on the initial state.
     *
     * @throws RepositoryException if an error occurs
     */ Modifier protected setRemoved RepositoryException IfStatement BinaryOperation || BinaryOperation == MemberReference status MemberReference STATUS_INVALIDATED BinaryOperation == MemberReference status MemberReference STATUS_DESTROYED BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType ItemState VariableDeclarator transientState MethodInvocation getOrCreateTransientItemState IfStatement BinaryOperation == MethodInvocation transientState getStatus MemberReference ItemState STATUS_NEW BlockStatement StatementExpression MethodInvocation stateMgr MemberReference transientState disposeTransientItemState BlockStatement StatementExpression MethodInvocation transientState MemberReference ItemState STATUS_EXISTING_REMOVED setStatus StatementExpression MethodInvocation stateMgr MemberReference transientState moveTransientItemStateToAttic StatementExpression Assignment MemberReference status MemberReference STATUS_INVALIDATED = StatementExpression MethodInvocation notifyInvalidated End MethodDeclaration /**
     * Returns the item-state associated with this <code>Item</code>.
     *
     * @return state associated with this <code>Item</code>
     */ ReferenceType ItemState getItemState ReturnStatement MemberReference state MethodDeclaration /**
     * Notify the listeners that this instance has been discarded
     * (i.e. it has been temporarily rendered 'invalid').
     */ Modifier private notifyCreated LocalVariableDeclaration ReferenceType ItemLifeCycleListener VariableDeclarator la ArrayCreator ReferenceType ItemLifeCycleListener MethodInvocation listeners size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation listeners MethodInvocation iterator values LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ cnt la Cast ReferenceType ItemLifeCycleListener MethodInvocation iter next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference la length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i la Literal null BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation This itemCreated la End End MethodDeclaration /**
     * Notify the listeners that this instance has been invalidated
     * (i.e. it has been temporarily rendered 'invalid').
     */ Modifier protected notifyInvalidated LocalVariableDeclaration ReferenceType ItemLifeCycleListener VariableDeclarator la ArrayCreator ReferenceType ItemLifeCycleListener MethodInvocation listeners size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation listeners MethodInvocation iterator values LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ cnt la Cast ReferenceType ItemLifeCycleListener MethodInvocation iter next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference la length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i la Literal null BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation MemberReference id This itemInvalidated la End End MethodDeclaration /**
     * Notify the listeners that this instance has been destroyed
     * (i.e. it has been permanently rendered 'invalid').
     */ Modifier protected notifyDestroyed LocalVariableDeclaration ReferenceType ItemLifeCycleListener VariableDeclarator la ArrayCreator ReferenceType ItemLifeCycleListener MethodInvocation listeners size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation listeners MethodInvocation iterator values LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ cnt la Cast ReferenceType ItemLifeCycleListener MethodInvocation iter next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference la length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i la Literal null BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation MemberReference id This itemDestroyed la End End MethodDeclaration /**
     * Add an <code>ItemLifeCycleListener</code>
     *
     * @param listener the new listener to be informed on life cycle changes
     */ addLifeCycleListener FormalParameter ReferenceType ItemLifeCycleListener listener IfStatement MethodInvocation ! listeners MemberReference listener containsKey BlockStatement StatementExpression MethodInvocation listeners MemberReference listener MemberReference listener put End MethodDeclaration /**
     * Remove an <code>ItemLifeCycleListener</code>
     *
     * @param listener an existing listener
     */ removeLifeCycleListener FormalParameter ReferenceType ItemLifeCycleListener listener StatementExpression MethodInvocation listeners MemberReference listener remove MethodDeclaration /**
     * Return the id of this <code>Item</code>.
     *
     * @return the id of this <code>Item</code>
     */ Modifier public ReferenceType ItemId getId ReturnStatement MemberReference id MethodDeclaration /**
     * Returns the primary path to this <code>Item</code>.
     *
     * @return the primary path to this <code>Item</code>
     */ Modifier public ReferenceType Path getPrimaryPath RepositoryException ReturnStatement MethodInvocation session MethodInvocation MemberReference id getPath getHierarchyManager MethodDeclaration /**
     * Builds a list of transient (i.e. new or modified) item states that are
     * within the scope of <code>this.{@link #save()}</code>.
     *
     * @return list of transient item states
     * @throws InvalidItemStateException
     * @throws RepositoryException
     */ Modifier private ReferenceType Collection getTransientStates InvalidItemStateException RepositoryException LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator dirty ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType ItemState VariableDeclarator transientState IfStatement MethodInvocation isTransient BlockStatement SwitchStatement MethodInvocation state getStatus SwitchStatementCase MemberReference ItemState STATUS_EXISTING_MODIFIED StatementExpression MethodInvocation dirty MemberReference state add BreakStatement SwitchStatementCase MemberReference ItemState STATUS_NEW BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": cannot save a new item."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg SwitchStatementCase MemberReference ItemState STATUS_STALE_MODIFIED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": the item cannot be saved because it has been modified externally."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType InvalidItemStateException MemberReference msg SwitchStatementCase MemberReference ItemState STATUS_STALE_DESTROYED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": the item cannot be saved because it has been deleted externally."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType InvalidItemStateException MemberReference msg SwitchStatementCase MemberReference ItemState STATUS_UNDEFINED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": the item cannot be saved; it seems to have been removed externally."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType InvalidItemStateException MemberReference msg SwitchStatementCase StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""unexpected state status ("" MethodInvocation state getStatus Literal "")"" debug BreakStatement End End IfStatement MethodInvocation isNode BlockStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation stateMgr Cast ReferenceType NodeId MemberReference id getDescendantTransientItemStates WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference transientState Cast ReferenceType ItemState MethodInvocation iter next = SwitchStatement MethodInvocation transientState getStatus SwitchStatementCase MemberReference ItemState STATUS_NEW MemberReference ItemState STATUS_EXISTING_MODIFIED StatementExpression MethodInvocation dirty MemberReference transientState add BreakStatement SwitchStatementCase MemberReference ItemState STATUS_STALE_MODIFIED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation transientState getId Literal "": the item cannot be saved because it has been modified externally."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType InvalidItemStateException MemberReference msg SwitchStatementCase MemberReference ItemState STATUS_STALE_DESTROYED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation transientState getId Literal "": the item cannot be saved because it has been deleted externally."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType InvalidItemStateException MemberReference msg SwitchStatementCase MemberReference ItemState STATUS_UNDEFINED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": the item cannot be saved; it seems to have been removed externally."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType InvalidItemStateException MemberReference msg SwitchStatementCase StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""unexpected state status ("" MethodInvocation transientState getStatus Literal "")"" debug BreakStatement End End End ReturnStatement MemberReference dirty MethodDeclaration /**
     * Builds a list of transient descendant item states in the attic
     * (i.e. those marked as 'removed') that are within the scope of
     * <code>this.{@link #save()}</code>.
     *
     * @return list of transient item states
     * @throws InvalidItemStateException
     * @throws RepositoryException
     */ Modifier private ReferenceType Collection getRemovedStates InvalidItemStateException RepositoryException LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator removed ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType ItemState VariableDeclarator transientState IfStatement MethodInvocation isNode BlockStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation stateMgr Cast ReferenceType NodeId MemberReference id getDescendantTransientItemStatesInAttic WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference transientState Cast ReferenceType ItemState MethodInvocation iter next = IfStatement BinaryOperation == MethodInvocation transientState getStatus MemberReference ItemState STATUS_STALE_MODIFIED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation transientState getId Literal "": the item cannot be removed because it has been modified externally."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType InvalidItemStateException MemberReference msg End IfStatement BinaryOperation == MethodInvocation transientState getStatus MemberReference ItemState STATUS_STALE_DESTROYED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation transientState getId Literal "": the item cannot be removed because it has already been deleted externally."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType InvalidItemStateException MemberReference msg End StatementExpression MethodInvocation removed MemberReference transientState add End End ReturnStatement MemberReference removed MethodDeclaration Modifier private validateTransientItems FormalParameter ReferenceType Iterator dirtyIter FormalParameter ReferenceType Iterator removedIter AccessDeniedException ConstraintViolationException RepositoryException LocalVariableDeclaration ReferenceType AccessManager VariableDeclarator accessMgr MethodInvocation session getAccessManager WhileStatement MethodInvocation dirtyIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator itemState Cast ReferenceType ItemState MethodInvocation dirtyIter next IfStatement BinaryOperation != MethodInvocation itemState getStatus MemberReference ItemState STATUS_NEW BlockStatement LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id MethodInvocation itemState getId IfStatement MethodInvocation ! accessMgr MemberReference id MemberReference AccessManager WRITE isGranted BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation itemMgr MemberReference id safeGetJCRPath Literal "": not allowed to modify item"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType AccessDeniedException MemberReference msg End End IfStatement MethodInvocation itemState isNode BlockStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState Cast ReferenceType NodeState MemberReference itemState LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id MethodInvocation nodeState getId LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl MethodInvocation itemMgr MemberReference id getItem LocalVariableDeclaration ReferenceType NodeDefinition VariableDeclarator def MethodInvocation node getDefinition LocalVariableDeclaration ReferenceType NodeTypeImpl VariableDeclarator pnt Cast ReferenceType NodeTypeImpl MethodInvocation node getPrimaryNodeType LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator ent MethodInvocation node getEffectiveNodeType IfStatement BinaryOperation == MethodInvocation nodeState getStatus MemberReference ItemState STATUS_NEW BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator nta MethodInvocation def getRequiredPrimaryTypes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference nta length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeTypeImpl VariableDeclarator ntReq Cast ReferenceType NodeTypeImpl MemberReference ArraySelector MemberReference i nta IfStatement BinaryOperation || MethodInvocation pnt MethodInvocation MethodInvocation ntReq getQName equals getQName MethodInvocation pnt MethodInvocation ntReq getQName isDerivedFrom BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + MethodInvocation node safeGetJCRPath Literal "" must be of node type "" MethodInvocation ntReq getName StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End End LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pda MethodInvocation ent getMandatoryPropDefs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pda length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pd MemberReference ArraySelector MemberReference i pda IfStatement MethodInvocation pd MethodInvocation MemberReference QName MIX_VERSIONABLE equals getDeclaringNodeType BlockStatement ContinueStatement End IfStatement MethodInvocation ! nodeState MethodInvocation pd getName hasPropertyName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation node safeGetJCRPath Literal "": mandatory property "" MethodInvocation pd getName Literal "" does not exist"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator cnda MethodInvocation ent getMandatoryNodeDefs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference cnda length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator cnd MemberReference ArraySelector MemberReference i cnda IfStatement MethodInvocation ! nodeState MethodInvocation cnd getName hasChildNodeEntry BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation node safeGetJCRPath Literal "": mandatory child node "" MethodInvocation cnd getName Literal "" does not exist"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End BlockStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator propState Cast ReferenceType PropertyState MemberReference itemState LocalVariableDeclaration ReferenceType ItemId VariableDeclarator propId MethodInvocation propState getId LocalVariableDeclaration ReferenceType PropertyImpl VariableDeclarator prop Cast ReferenceType PropertyImpl MethodInvocation itemMgr MemberReference propId getItem LocalVariableDeclaration ReferenceType PropertyDefinitionImpl VariableDeclarator def Cast ReferenceType PropertyDefinitionImpl MethodInvocation prop getDefinition IfStatement MethodInvocation ! def isProtected BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator constraints MethodInvocation def getValueConstraints IfStatement BinaryOperation != MemberReference constraints Literal null BlockStatement LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation propState getValues TryStatement StatementExpression MethodInvocation EffectiveNodeType MethodInvocation def unwrap MemberReference values checkSetPropertyValueConstraints CatchClause CatchClauseParameter RepositoryException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + MethodInvocation prop safeGetJCRPath Literal "": "" MethodInvocation e getMessage StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg IfStatement BinaryOperation && BinaryOperation > MemberReference constraints length Literal 0 BinaryOperation == MethodInvocation def getRequiredType MemberReference PropertyType REFERENCE BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator satisfied Literal false TryStatement LocalVariableDeclaration ReferenceType UUID VariableDeclarator targetUUID Cast ReferenceType UUID MemberReference ArraySelector MemberReference i MethodInvocation internalValue values LocalVariableDeclaration ReferenceType Node VariableDeclarator targetNode MethodInvocation session MethodInvocation targetUUID toString getNodeByUUID ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference constraints length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator ntName MemberReference ArraySelector MemberReference j constraints IfStatement MethodInvocation targetNode MemberReference ntName isNodeType BlockStatement StatementExpression Assignment MemberReference satisfied Literal true = BreakStatement End End CatchClause CatchClauseParameter RepositoryException re LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation prop safeGetJCRPath Literal "": failed to check REFERENCE value constraint"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg MemberReference re IfStatement MemberReference ! satisfied BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + MethodInvocation prop safeGetJCRPath Literal "": does not satisfy the value constraint "" MemberReference ArraySelector Literal 0 constraints StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End End End End End End WhileStatement MethodInvocation removedIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator itemState Cast ReferenceType ItemState MethodInvocation removedIter next LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id MethodInvocation itemState getId IfStatement MethodInvocation ! accessMgr MemberReference id MemberReference AccessManager REMOVE isGranted BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation itemMgr MemberReference id safeGetJCRPath Literal "": not allowed to remove item"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType AccessDeniedException MemberReference msg End End MethodDeclaration Modifier private removeTransientItems FormalParameter ReferenceType Iterator iter WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator transientState Cast ReferenceType ItemState MethodInvocation iter next LocalVariableDeclaration ReferenceType ItemState VariableDeclarator persistentState MethodInvocation transientState getOverlayedState StatementExpression MethodInvocation stateMgr MemberReference persistentState destroy End MethodDeclaration Modifier private persistTransientItems FormalParameter ReferenceType Iterator iter RepositoryException WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator itemState Cast ReferenceType ItemState MethodInvocation iter next LocalVariableDeclaration ReferenceType ItemImpl VariableDeclarator item MethodInvocation itemMgr MethodInvocation itemState getId getItem StatementExpression MethodInvocation item makePersistent End MethodDeclaration Modifier private restoreTransientItems FormalParameter ReferenceType Iterator iter RepositoryException WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator itemState Cast ReferenceType ItemState MethodInvocation iter next LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id MethodInvocation itemState getId LocalVariableDeclaration ReferenceType ItemImpl VariableDeclarator item IfStatement MethodInvocation stateMgr MemberReference id isItemStateInAttic BlockStatement IfStatement MethodInvocation itemState isNode BlockStatement StatementExpression Assignment MemberReference item MethodInvocation itemMgr Cast ReferenceType NodeState MemberReference itemState createNodeInstance = BlockStatement StatementExpression Assignment MemberReference item MethodInvocation itemMgr Cast ReferenceType PropertyState MemberReference itemState createPropertyInstance = End StatementExpression MethodInvocation itemState MemberReference ItemState STATUS_NEW setStatus BlockStatement StatementExpression Assignment MemberReference item MethodInvocation itemMgr MemberReference id getItem = End IfStatement MethodInvocation ! item isTransient BlockStatement IfStatement MethodInvocation item isNode BlockStatement LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl MemberReference item StatementExpression MethodInvocation node Cast ReferenceType NodeState MemberReference itemState restoreTransient BlockStatement LocalVariableDeclaration ReferenceType PropertyImpl VariableDeclarator prop Cast ReferenceType PropertyImpl MemberReference item StatementExpression MethodInvocation prop Cast ReferenceType PropertyState MemberReference itemState restoreTransient End End End MethodDeclaration /**
     * Initializes the version history of all new nodes of node type
     * <code>mix:versionable</code>.
     * <p/>
     * Called by {@link #save()}.
     *
     * @param iter
     * @return true if this call generated new transient state; otherwise false
     * @throws RepositoryException
     */ Modifier private BasicType boolean initVersionHistories FormalParameter ReferenceType Iterator iter RepositoryException LocalVariableDeclaration BasicType boolean VariableDeclarator createdTransientState Literal false WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator itemState Cast ReferenceType ItemState MethodInvocation iter next IfStatement MethodInvocation itemState isNode BlockStatement LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl MethodInvocation itemMgr MethodInvocation itemState getId getItem IfStatement MethodInvocation node MemberReference QName MIX_VERSIONABLE isNodeType BlockStatement IfStatement MethodInvocation ! node MemberReference QName JCR_VERSIONHISTORY hasProperty BlockStatement LocalVariableDeclaration ReferenceType VersionManager VariableDeclarator vMgr MethodInvocation session getVersionManager LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState Cast ReferenceType NodeState MemberReference itemState LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh MethodInvocation vMgr MemberReference session MemberReference nodeState getVersionHistory IfStatement BinaryOperation == MemberReference vh Literal null BlockStatement StatementExpression Assignment MemberReference vh MethodInvocation vMgr MemberReference session MemberReference nodeState createVersionHistory = End StatementExpression MethodInvocation node MemberReference QName JCR_VERSIONHISTORY MethodInvocation InternalValue ClassCreator ReferenceType UUID MethodInvocation vh getUUID create internalSetProperty StatementExpression MethodInvocation node MemberReference QName JCR_BASEVERSION MethodInvocation InternalValue ClassCreator ReferenceType UUID MethodInvocation vh MethodInvocation getUUID getRootVersion create internalSetProperty StatementExpression MethodInvocation node MemberReference QName JCR_ISCHECKEDOUT MethodInvocation InternalValue Literal true create internalSetProperty StatementExpression MethodInvocation node MemberReference QName JCR_PREDECESSORS ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue ClassCreator ReferenceType UUID MethodInvocation vh MethodInvocation getUUID getRootVersion create internalSetProperty StatementExpression Assignment MemberReference createdTransientState Literal true = End End End End ReturnStatement MemberReference createdTransientState MethodDeclaration /**
     * Failsafe mapping of internal <code>id</code> to JCR path for use in
     * diagnostic output, error messages etc.
     *
     * @return JCR path or some fallback value
     */ Modifier public ReferenceType String safeGetJCRPath ReturnStatement MethodInvocation itemMgr MemberReference id safeGetJCRPath MethodDeclaration /**
     * Same as <code>{@link Item#remove()}</code> except for the
     * <code>noChecks</code> parameter.
     *
     * @param noChecks
     * @throws VersionException
     * @throws LockException
     * @throws RepositoryException
     */ Modifier protected internalRemove FormalParameter BasicType boolean noChecks VersionException LockException ConstraintViolationException RepositoryException StatementExpression MethodInvocation sanityCheck LocalVariableDeclaration ReferenceType Path ReferenceType PathElement VariableDeclarator thisName MethodInvocation MethodInvocation getNameElement getPrimaryPath IfStatement MethodInvocation isNode BlockStatement LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl This IfStatement BinaryOperation == MethodInvocation node getDepth Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": cannot remove root node"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End LocalVariableDeclaration ReferenceType NodeDefinition VariableDeclarator def MethodInvocation node getDefinition IfStatement BinaryOperation && MemberReference ! noChecks MethodInvocation def isProtected BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": cannot remove a protected node"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End BlockStatement LocalVariableDeclaration ReferenceType PropertyImpl VariableDeclarator prop Cast ReferenceType PropertyImpl This LocalVariableDeclaration ReferenceType PropertyDefinition VariableDeclarator def MethodInvocation prop getDefinition IfStatement BinaryOperation && MemberReference ! noChecks MethodInvocation def isProtected BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": cannot remove a protected property"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator parentNode Cast ReferenceType NodeImpl MethodInvocation getParent IfStatement BinaryOperation && MemberReference ! noChecks MethodInvocation ! parentNode internalIsCheckedOut BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation parentNode safeGetJCRPath Literal "": cannot remove a child of a checked-in node"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType VersionException MemberReference msg End IfStatement BinaryOperation && MemberReference ! noChecks MethodInvocation parentNode MethodInvocation isProtected getDefinition BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation parentNode safeGetJCRPath Literal "": cannot remove a child of a protected node"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End IfStatement MemberReference ! noChecks BlockStatement StatementExpression MethodInvocation parentNode checkLock End IfStatement MethodInvocation isNode BlockStatement StatementExpression MethodInvocation parentNode MethodInvocation thisName getName MethodInvocation thisName getIndex removeChildNode BlockStatement StatementExpression MethodInvocation parentNode MethodInvocation thisName getName removeChildProperty End MethodDeclaration /**
     * Same as <code>{@link Item#getName()}</code> except that
     * this method returns a <code>QName</code> instead of a
     * <code>String</code>.
     *
     * @return the name of this item as <code>QName</code>
     * @throws RepositoryException if an error occurs.
     */ Modifier public abstract ReferenceType QName getQName RepositoryException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateCreated FormalParameter ReferenceType ItemState created StatementExpression Assignment MemberReference status MemberReference STATUS_NORMAL = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateDestroyed FormalParameter ReferenceType ItemState destroyed StatementExpression Assignment MemberReference status MemberReference STATUS_DESTROYED = IfStatement BinaryOperation == MemberReference state MemberReference destroyed BlockStatement StatementExpression MethodInvocation state This removeListener StatementExpression Assignment MemberReference state Literal null = End StatementExpression MethodInvocation notifyDestroyed MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateModified FormalParameter ReferenceType ItemState modified StatementExpression Assignment MemberReference status MemberReference STATUS_MODIFIED = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateDiscarded FormalParameter ReferenceType ItemState discarded IfStatement MethodInvocation isTransient BlockStatement SwitchStatement MethodInvocation state getStatus SwitchStatementCase MemberReference ItemState STATUS_EXISTING_REMOVED MemberReference ItemState STATUS_EXISTING_MODIFIED MemberReference ItemState STATUS_STALE_MODIFIED LocalVariableDeclaration ReferenceType ItemState VariableDeclarator persistentState MethodInvocation state getOverlayedState StatementExpression MethodInvocation state This removeListener StatementExpression MethodInvocation persistentState This addListener StatementExpression MethodInvocation stateMgr MemberReference state disconnectTransientItemState StatementExpression Assignment MemberReference state MemberReference persistentState = StatementExpression MethodInvocation state This addListener ReturnStatement SwitchStatementCase MemberReference ItemState STATUS_STALE_DESTROYED StatementExpression MethodInvocation notifyDestroyed StatementExpression Assignment MemberReference status MemberReference STATUS_DESTROYED = StatementExpression MethodInvocation state This removeListener StatementExpression Assignment MemberReference state Literal null = ReturnStatement SwitchStatementCase MemberReference ItemState STATUS_NEW StatementExpression MethodInvocation notifyDestroyed StatementExpression Assignment MemberReference status MemberReference STATUS_DESTROYED = StatementExpression MethodInvocation state This removeListener StatementExpression Assignment MemberReference state Literal null = ReturnStatement End End StatementExpression MethodInvocation notifyInvalidated StatementExpression Assignment MemberReference status MemberReference STATUS_INVALIDATED = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public abstract accept FormalParameter ReferenceType ItemVisitor visitor RepositoryException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public abstract BasicType boolean isNode MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public abstract ReferenceType String getName RepositoryException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public abstract ReferenceType Node getParent ItemNotFoundException AccessDeniedException RepositoryException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isNew ReturnStatement BinaryOperation && MethodInvocation state isTransient BinaryOperation == MethodInvocation state getOverlayedState Literal null MethodDeclaration /**
     * checks if this item is new. running outside of transactions, this
     * is the same as {@link #isNew()} but within a transaction an item can
     * be saved but not yet persisted.
     */ Modifier protected BasicType boolean isTransactionalNew ReturnStatement BinaryOperation == MethodInvocation state getStatus MemberReference ItemState STATUS_NEW MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isModified ReturnStatement BinaryOperation && MethodInvocation state isTransient BinaryOperation != MethodInvocation state getOverlayedState Literal null MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public remove VersionException LockException ConstraintViolationException RepositoryException StatementExpression MethodInvocation Literal false internalRemove MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public save AccessDeniedException ItemExistsException ConstraintViolationException InvalidItemStateException ReferentialIntegrityException VersionException LockException NoSuchNodeTypeException RepositoryException StatementExpression MethodInvocation sanityCheck SynchronizedStatement MemberReference session LocalVariableDeclaration ReferenceType Collection VariableDeclarator dirty MethodInvocation getTransientStates IfStatement BinaryOperation == MethodInvocation dirty size Literal 0 BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType Collection VariableDeclarator removed MethodInvocation getRemovedStates LocalVariableDeclaration ReferenceType Set VariableDeclarator affectedIds ClassCreator ReferenceType HashSet BinaryOperation + MethodInvocation dirty size MethodInvocation removed size ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it ClassCreator ReferenceType IteratorChain MethodInvocation dirty iterator MethodInvocation removed iterator MethodInvocation it hasNext BlockStatement StatementExpression MethodInvocation affectedIds Cast ReferenceType ItemState MethodInvocation it next add End ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it ClassCreator ReferenceType IteratorChain MethodInvocation dirty iterator MethodInvocation removed iterator MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator transientState Cast ReferenceType ItemState MethodInvocation it next IfStatement MethodInvocation transientState isNode BlockStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState Cast ReferenceType NodeState MemberReference transientState LocalVariableDeclaration ReferenceType Set VariableDeclarator dependentUUIDs ClassCreator ReferenceType HashSet IfStatement MethodInvocation nodeState hasOverlayedState BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator oldParentUUID MethodInvocation nodeState MethodInvocation getParentUUID getOverlayedState LocalVariableDeclaration ReferenceType String VariableDeclarator newParentUUID MethodInvocation nodeState getParentUUID IfStatement BinaryOperation != MemberReference oldParentUUID Literal null BlockStatement IfStatement BinaryOperation == MemberReference newParentUUID Literal null BlockStatement StatementExpression MethodInvocation dependentUUIDs MemberReference oldParentUUID add BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference oldParentUUID Literal null MethodInvocation ! oldParentUUID MemberReference newParentUUID equals BlockStatement StatementExpression MethodInvocation dependentUUIDs MemberReference oldParentUUID add StatementExpression MethodInvocation dependentUUIDs MemberReference newParentUUID add End End End End ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator cneIt MethodInvocation nodeState MethodInvocation iterator getRemovedChildNodeEntries MethodInvocation cneIt hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator cne Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation cneIt next StatementExpression MethodInvocation dependentUUIDs MethodInvocation cne getUUID add End ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator cneIt MethodInvocation nodeState MethodInvocation iterator getAddedChildNodeEntries MethodInvocation cneIt hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator cne Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation cneIt next StatementExpression MethodInvocation dependentUUIDs MethodInvocation cne getUUID add End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator depIt MethodInvocation dependentUUIDs iterator WhileStatement MethodInvocation depIt hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeId VariableDeclarator id ClassCreator ReferenceType NodeId Cast ReferenceType String MethodInvocation depIt next IfStatement MethodInvocation ! affectedIds MemberReference id contains BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation itemMgr MemberReference id safeGetJCRPath Literal "" needs to be saved as well."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End End End StatementExpression MethodInvocation MethodInvocation dirty iterator MethodInvocation removed iterator validateTransientItems TryStatement StatementExpression MethodInvocation stateMgr edit CatchClause CatchClauseParameter IllegalStateException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""Unable to start edit operation"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference e LocalVariableDeclaration BasicType boolean VariableDeclarator succeeded Literal false TryStatement StatementExpression MethodInvocation MethodInvocation removed iterator removeTransientItems IfStatement MethodInvocation MethodInvocation dirty iterator initVersionHistories BlockStatement StatementExpression Assignment MemberReference dirty MethodInvocation getTransientStates = End StatementExpression MethodInvocation MethodInvocation dirty iterator persistTransientItems ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation dirty iterator MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator transientState Cast ReferenceType ItemState MethodInvocation it next StatementExpression MethodInvocation stateMgr MemberReference transientState disposeTransientItemState End StatementExpression MethodInvocation stateMgr update StatementExpression Assignment MemberReference succeeded Literal true = CatchClause CatchClauseParameter StaleItemStateException e ThrowStatement ClassCreator ReferenceType InvalidItemStateException MethodInvocation e getMessage CatchClause CatchClauseParameter ItemStateException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": unable to update item."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference e IfStatement MemberReference ! succeeded BlockStatement StatementExpression MethodInvocation stateMgr cancel StatementExpression MethodInvocation MethodInvocation dirty iterator restoreTransientItems End ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation removed iterator MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator transientState Cast ReferenceType ItemState MethodInvocation it next StatementExpression MethodInvocation stateMgr MemberReference transientState disposeTransientItemStateInAttic End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized refresh FormalParameter BasicType boolean keepChanges InvalidItemStateException RepositoryException StatementExpression MethodInvocation sanityCheck IfStatement MemberReference keepChanges BlockStatement ReturnStatement End IfStatement MethodInvocation isNode BlockStatement IfStatement BinaryOperation == MethodInvocation getDepth Literal 0 BlockStatement StatementExpression MethodInvocation stateMgr disposeAllTransientItemStates ReturnStatement End End LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator list ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType ItemState VariableDeclarator transientState IfStatement MethodInvocation isTransient BlockStatement StatementExpression Assignment MemberReference transientState MemberReference state = SwitchStatement MethodInvocation transientState getStatus SwitchStatementCase MemberReference ItemState STATUS_STALE_MODIFIED MemberReference ItemState STATUS_STALE_DESTROYED MemberReference ItemState STATUS_EXISTING_MODIFIED StatementExpression MethodInvocation list MemberReference transientState add BreakStatement SwitchStatementCase MemberReference ItemState STATUS_NEW BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation safeGetJCRPath Literal "": cannot revert a new item."" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg SwitchStatementCase StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""unexpected state status ("" MethodInvocation transientState getStatus Literal "")"" debug BreakStatement End End IfStatement MethodInvocation isNode BlockStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation stateMgr Cast ReferenceType NodeId MemberReference id getDescendantTransientItemStates WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference transientState Cast ReferenceType ItemState MethodInvocation iter next = SwitchStatement MethodInvocation transientState getStatus SwitchStatementCase MemberReference ItemState STATUS_STALE_MODIFIED MemberReference ItemState STATUS_STALE_DESTROYED MemberReference ItemState STATUS_NEW MemberReference ItemState STATUS_EXISTING_MODIFIED StatementExpression MethodInvocation list MemberReference transientState add BreakStatement SwitchStatementCase StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""unexpected state status ("" MethodInvocation transientState getStatus Literal "")"" debug BreakStatement End End End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation list iterator WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference transientState Cast ReferenceType ItemState MethodInvocation iter next = StatementExpression MethodInvocation stateMgr MemberReference transientState disposeTransientItemState End IfStatement MethodInvocation isNode BlockStatement StatementExpression Assignment MemberReference iter MethodInvocation stateMgr Cast ReferenceType NodeId MemberReference id getDescendantTransientItemStatesInAttic = WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference transientState Cast ReferenceType ItemState MethodInvocation iter next = StatementExpression MethodInvocation stateMgr MemberReference transientState disposeTransientItemStateInAttic End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Item getAncestor FormalParameter BasicType int degree ItemNotFoundException AccessDeniedException RepositoryException StatementExpression MethodInvocation sanityCheck IfStatement BinaryOperation == MemberReference degree Literal 0 BlockStatement ReturnStatement MethodInvocation itemMgr getRootNode End TryStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation getPrimaryPath LocalVariableDeclaration BasicType int VariableDeclarator relDegree BinaryOperation - MethodInvocation path getAncestorCount MemberReference degree IfStatement BinaryOperation < MemberReference relDegree Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType ItemNotFoundException End LocalVariableDeclaration ReferenceType Path VariableDeclarator ancestorPath MethodInvocation path MemberReference relDegree getAncestor ReturnStatement MethodInvocation itemMgr MemberReference ancestorPath getItem CatchClause CatchClauseParameter PathNotFoundException pnfe ThrowStatement ClassCreator ReferenceType ItemNotFoundException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getPath RepositoryException StatementExpression MethodInvocation sanityCheck TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation session getNamespaceResolver toJCRPath getPrimaryPath CatchClause CatchClauseParameter NoPrefixDeclaredException npde LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""internal error: encountered unregistered namespace"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference npde MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int getDepth RepositoryException StatementExpression MethodInvocation sanityCheck IfStatement BinaryOperation == MethodInvocation state getParentUUID Literal null BlockStatement ReturnStatement Literal 0 End ReturnStatement MethodInvocation session MethodInvocation MemberReference id getDepth getHierarchyManager MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Session getSession RepositoryException StatementExpression MethodInvocation sanityCheck ReturnStatement MemberReference session MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isSame FormalParameter ReferenceType Item otherItem RepositoryException StatementExpression MethodInvocation sanityCheck IfStatement BinaryOperation == This MemberReference otherItem BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference otherItem ReferenceType ItemImpl BlockStatement LocalVariableDeclaration ReferenceType ItemImpl VariableDeclarator other Cast ReferenceType ItemImpl MemberReference otherItem ReturnStatement MethodInvocation id MemberReference other id equals End ReturnStatement Literal false ReferenceType Item ReferenceType ItemStateListener",1
703,703,,1
611,611,,0
370,370,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.client.methods Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.DavMethods Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.header.DepthHeader Import org.apache.jackrabbit.webdav.header.TimeoutHeader Import org.apache.jackrabbit.webdav.header.IfHeader Import org.apache.jackrabbit.webdav.header.CodedUrlHeader Import org.apache.jackrabbit.webdav.lock.Scope Import org.apache.jackrabbit.webdav.lock.Type Import org.apache.jackrabbit.webdav.lock.LockInfo Import org.apache.jackrabbit.webdav.lock.ActiveLock Import java.io.IOException ClassDeclaration Modifier public /**
 * <code>LockMethod</code>...
 */ LockMethod FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType LockMethod getLogger ConstructorDeclaration Modifier public /**
     * Creates a new <code>LockMethod</code>.
     *
     * @param uri
     * @param lockScope
     * @param lockType
     * @param owner
     * @param timeout
     * @param isDeep
     */ LockMethod FormalParameter ReferenceType String uri FormalParameter ReferenceType Scope lockScope FormalParameter ReferenceType Type lockType FormalParameter ReferenceType String owner FormalParameter BasicType long timeout FormalParameter BasicType boolean isDeep IOException StatementExpression ExplicitConstructorInvocation MemberReference uri ClassCreator ReferenceType LockInfo MemberReference lockScope MemberReference lockType MemberReference owner MemberReference timeout MemberReference isDeep ConstructorDeclaration Modifier public /**
     * Creates a new <code>LockMethod</code>.
     *
     * @param uri
     * @param lockInfo
     */ LockMethod FormalParameter ReferenceType String uri FormalParameter ReferenceType LockInfo lockInfo IOException StatementExpression SuperConstructorInvocation MemberReference uri IfStatement BinaryOperation != MemberReference lockInfo Literal null BlockStatement LocalVariableDeclaration ReferenceType TimeoutHeader VariableDeclarator th ClassCreator ReferenceType TimeoutHeader MethodInvocation lockInfo getTimeout StatementExpression MethodInvocation MemberReference th setRequestHeader IfStatement MethodInvocation ! lockInfo isRefreshLock BlockStatement LocalVariableDeclaration ReferenceType DepthHeader VariableDeclarator dh ClassCreator ReferenceType DepthHeader MethodInvocation lockInfo isDeep StatementExpression MethodInvocation MemberReference dh setRequestHeader StatementExpression MethodInvocation MemberReference DavConstants HEADER_CONTENT_TYPE Literal ""text/xml; charset=UTF-8"" setRequestHeader StatementExpression MethodInvocation MemberReference lockInfo setRequestBody End End ConstructorDeclaration Modifier public /**
     * Create a new 'Refresh' lock method.
     *
     * @param uri
     * @param timeout
     * @param lockTokens used to build the untagged If header.
     * @see IfHeader
     */ LockMethod FormalParameter ReferenceType String uri FormalParameter BasicType long timeout FormalParameter ReferenceType String lockTokens StatementExpression SuperConstructorInvocation MemberReference uri LocalVariableDeclaration ReferenceType TimeoutHeader VariableDeclarator th ClassCreator ReferenceType TimeoutHeader MemberReference timeout StatementExpression MethodInvocation MemberReference th setRequestHeader LocalVariableDeclaration ReferenceType IfHeader VariableDeclarator ifh ClassCreator ReferenceType IfHeader MemberReference lockTokens StatementExpression MethodInvocation MemberReference ifh setRequestHeader MethodDeclaration /**
     * @see org.apache.commons.httpclient.HttpMethod#getName()
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference DavMethods METHOD_LOCK MethodDeclaration Modifier public ReferenceType ActiveLock getResponseAsLock IOException StatementExpression MethodInvocation checkUsed ReturnStatement Literal null MethodDeclaration Modifier public ReferenceType String getLockToken StatementExpression MethodInvocation checkUsed LocalVariableDeclaration ReferenceType CodedUrlHeader VariableDeclarator cuh ClassCreator ReferenceType CodedUrlHeader MemberReference DavConstants HEADER_LOCK_TOKEN MethodInvocation MethodInvocation getValue MemberReference DavConstants HEADER_LOCK_TOKEN getResponseHeader ReturnStatement MethodInvocation cuh getCodedUrl ReferenceType DavMethodBase",1
622,622,,1
559,559,,1
156,156,"CompilationUnit PackageDeclaration org.apache.jackrabbit.session.nodetype Import java.util.HashSet Import java.util.Set Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType Import org.apache.jackrabbit.session.SessionHelper Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.state.nodetype.NodeDefinitionState ClassDeclaration Modifier final /**
 * Immutable and session-bound node definition frontend. An instance
 * of this class presents the underlying node definition state using
 * the JCR NodeDef interface.
 * <p>
 * By not exposing the setter methods of the underlying state instance,
 * this class intentionally makes it impossible for a JCR client to modify
 * node definition information.
 */ SessionNodeDefinition FieldDeclaration /** Helper for accessing the current session. */ Modifier private final ReferenceType SessionHelper VariableDeclarator helper FieldDeclaration /** The underlying node definition state. */ Modifier private final ReferenceType NodeDefinitionState VariableDeclarator state ConstructorDeclaration Modifier public /**
     * Creates a node definition frontend that is bound to the
     * given node type, session, and underlying node definition state.
     *
     * @param helper helper for accessing the current session
     * @param type declaring node type
     * @param state underlying node definition state
     */ SessionNodeDefinition FormalParameter ReferenceType SessionHelper helper FormalParameter ReferenceType NodeType type FormalParameter ReferenceType NodeDefinitionState state StatementExpression SuperConstructorInvocation MemberReference helper MemberReference type MemberReference state StatementExpression Assignment This MemberReference helper MemberReference helper = StatementExpression Assignment This MemberReference state MemberReference state = MethodDeclaration /**
     * Returns the default primary type of the defined node. The returned
     * node type is retrieved from the node type manager of the current
     * session using the node type name stored in the underlying state.
     *
     * @return default primary type
     * @see NodeDefinition#getDefaultPrimaryType()
     */ Modifier public ReferenceType NodeType getDefaultPrimaryType ReturnStatement MethodInvocation helper MethodInvocation state getDefaultPrimaryTypeName getNodeType MethodDeclaration /**
     * Returns the required primary types of the defined node. The returned
     * node types are retrieved from the node type manager of the current
     * session using the node type names stored in the underlying state.
     * <p>
     * The returned array is freshly instantiated and not a part of the
     * underlying state, so it can be freely modified.
     *
     * @return required primary types
     * @see NodeDefinition#getRequiredPrimaryTypes()
     */ Modifier public ReferenceType NodeType getRequiredPrimaryTypes LocalVariableDeclaration ReferenceType Set VariableDeclarator types ClassCreator ReferenceType HashSet LocalVariableDeclaration ReferenceType QName VariableDeclarator names MethodInvocation state getRequiredPrimaryTypeNames ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference names length MemberReference ++ i BlockStatement StatementExpression MethodInvocation types MethodInvocation helper MemberReference ArraySelector MemberReference i names getNodeType add End ReturnStatement Cast ReferenceType NodeType MethodInvocation types ArrayCreator ReferenceType NodeType MethodInvocation types size toArray MethodDeclaration /**
     * Returns the value of the AllowsSameNameSiblings node definition property.
     * The returned value is retrieved from the underlying node definition
     * state.
     *
     * @return AllowsSameNameSiblings property value
     * @see NodeDefinition#allowsSameNameSiblings()
     */ Modifier public BasicType boolean allowsSameNameSiblings ReturnStatement MethodInvocation state allowsSameNameSiblings ReferenceType SessionItemDefinition ReferenceType NodeDefinition",0
5,5,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.version.report Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavResource Import org.apache.jackrabbit.webdav.DavResourceIterator Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.webdav.MultiStatus Import org.apache.jackrabbit.webdav.property.DavPropertyNameSet Import org.apache.jackrabbit.webdav.version.DeltaVConstants Import org.apache.jackrabbit.webdav.version.DeltaVResource Import org.apache.jackrabbit.webdav.version.VersionControlledResource Import org.apache.jackrabbit.webdav.version.VersionHistoryResource Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.xml.ElementIterator Import org.apache.log4j.Logger Import org.w3c.dom.Document Import org.w3c.dom.Element Import java.util.HashSet ClassDeclaration Modifier public /**
 * <code>LocateByHistoryReport</code> encapsulates the DAV:locate-by-hisotry
 * report, that may be used to locate a version-controlled resource for that
 * version history. The DAV:locate-by-history report can be applied to a collection
 * to locate the collection member that is a version-controlled resource for a
 * specified version history resource.
 *
 * <pre>
 * &lt;!ELEMENT locate-by-history (version-history-set, prop)&gt;
 * &lt;!ELEMENT version-history-set (href+)&gt;
 * </pre>
 */ LocateByHistoryReport FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType LocateByHistoryReport getLogger FieldDeclaration Modifier private ReferenceType ReportInfo VariableDeclarator info FieldDeclaration Modifier private ReferenceType HashSet VariableDeclarator vhHrefSet ClassCreator ReferenceType HashSet FieldDeclaration Modifier private ReferenceType DeltaVResource VariableDeclarator resource MethodDeclaration /**
     *
     * @return
     * @see Report#getType()
     */ Modifier public ReferenceType ReportType getType ReturnStatement MemberReference ReportType LOCATE_BY_HISTORY MethodDeclaration /**
     * @see Report#init(org.apache.jackrabbit.webdav.version.DeltaVResource, ReportInfo) 
     */ Modifier public init FormalParameter ReferenceType DeltaVResource resource FormalParameter ReferenceType ReportInfo info DavException IfStatement BinaryOperation || BinaryOperation == MemberReference resource Literal null BinaryOperation instanceof MemberReference resource ReferenceType VersionControlledResource BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""DAV:version-tree report can only be created for version-controlled resources and version resources."" End StatementExpression Assignment This MemberReference resource MemberReference resource = StatementExpression MethodInvocation MemberReference info setInfo MethodDeclaration /**
     * Set the <code>ReportInfo</code>
     *
     * @param info
     * @throws DavException if the given <code>ReportInfo</code>
     * does not contain a DAV:version-tree element.
     */ Modifier private setInfo FormalParameter ReferenceType ReportInfo info DavException IfStatement BinaryOperation || BinaryOperation == MemberReference info Literal null MethodInvocation ! MethodInvocation MemberReference info isRequestedReportType getType BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""DAV:locate-by-history element expected."" End LocalVariableDeclaration ReferenceType Element VariableDeclarator versionHistorySet MethodInvocation info MemberReference XML_VERSION_HISTORY_SET MemberReference NAMESPACE getContentElement IfStatement BinaryOperation == MemberReference versionHistorySet Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""The DAV:locate-by-history element must contain a DAV:version-history-set child."" End LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator it MethodInvocation DomUtil MemberReference versionHistorySet MemberReference DavConstants XML_HREF MemberReference DavConstants NAMESPACE getChildren WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator href MethodInvocation DomUtil MethodInvocation it nextElement getText IfStatement BinaryOperation && BinaryOperation != MemberReference href Literal null Literal ! MethodInvocation MemberReference href equals """" BlockStatement StatementExpression MethodInvocation vhHrefSet MemberReference href add End End StatementExpression Assignment This MemberReference info MemberReference info = MethodDeclaration /**
     * Always returns <code>true</code>.
     *
     * @return true
     * @see org.apache.jackrabbit.webdav.version.report.Report#isMultiStatusReport()
     */ Modifier public BasicType boolean isMultiStatusReport ReturnStatement Literal true MethodDeclaration /**
     * Run the report.
     *
     * @return Xml <code>Document</code> representing the report in the required
     * format.
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document ReturnStatement MethodInvocation MethodInvocation MemberReference document toXml getMultiStatus MethodDeclaration /**
     * Retrieve the <code>MultiStatus</code> that is returned in response to a locate-by-history
     * report request.
     *
     * @return
     * @throws NullPointerException if info or resource is <code>null</code>.
     */ Modifier private ReferenceType MultiStatus getMultiStatus LocalVariableDeclaration ReferenceType MultiStatus VariableDeclarator ms ClassCreator ReferenceType MultiStatus StatementExpression MethodInvocation MemberReference resource MethodInvocation info getPropertyNameSet MethodInvocation info getDepth MemberReference ms buildResponse ReturnStatement MemberReference ms MethodDeclaration /**
     * Fill the <code>MultiStatus</code> with the <code>MultiStatusResponses</code>
     * generated for the specified resource and its members according to the
     * depth value.
     *
     * @param res
     * @param propNameSet
     * @param depth
     * @param ms
     */ Modifier private buildResponse FormalParameter ReferenceType DavResource res FormalParameter ReferenceType DavPropertyNameSet propNameSet FormalParameter BasicType int depth FormalParameter ReferenceType MultiStatus ms LocalVariableDeclaration ReferenceType DavResourceIterator VariableDeclarator it MethodInvocation res getMembers WhileStatement BinaryOperation && MethodInvocation ! vhHrefSet isEmpty MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType DavResource VariableDeclarator childRes MethodInvocation it nextResource IfStatement BinaryOperation instanceof MemberReference childRes ReferenceType VersionControlledResource BlockStatement TryStatement LocalVariableDeclaration ReferenceType VersionHistoryResource VariableDeclarator vhr Cast ReferenceType VersionControlledResource MemberReference childRes IfStatement MethodInvocation vhHrefSet MethodInvocation vhr getHref remove BlockStatement IfStatement MethodInvocation propNameSet isEmpty BlockStatement StatementExpression MethodInvocation ms MemberReference childRes MemberReference DavServletResponse SC_OK Literal 0 addResourceStatus BlockStatement StatementExpression MethodInvocation ms MemberReference childRes MemberReference propNameSet Literal 0 addResourceProperties End End CatchClause CatchClauseParameter DavException e StatementExpression MethodInvocation log MethodInvocation e getMessage info End IfStatement BinaryOperation > MemberReference depth Literal 0 BlockStatement StatementExpression MethodInvocation MethodInvocation it nextResource MemberReference propNameSet BinaryOperation - MemberReference depth Literal 1 MemberReference ms buildResponse End End ReferenceType Report ReferenceType DeltaVConstants",0
160,160,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.Property Import javax.jcr.PropertyIterator Import javax.jcr.Session Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.JcrConstants Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Remove all the content from the current working <code>Workspace</code>
 */ ClearWorkspace FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ClearWorkspace getLog MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType Session VariableDeclarator s MethodInvocation CommandHelper MemberReference ctx getSession IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""removing all content from workspace "" MethodInvocation s MethodInvocation getName getWorkspace debug End StatementExpression MethodInvocation CommandHelper MemberReference ctx MethodInvocation s getRootNode setCurrentNode LocalVariableDeclaration ReferenceType NodeIterator VariableDeclarator iter MethodInvocation s MethodInvocation getNodes getRootNode WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator n Cast ReferenceType Node MethodInvocation iter next IfStatement MethodInvocation ! n MethodInvocation MemberReference JcrConstants JCR_SYSTEM equals getName BlockStatement StatementExpression MethodInvocation n remove End End LocalVariableDeclaration ReferenceType PropertyIterator VariableDeclarator pIter MethodInvocation s MethodInvocation getProperties getRootNode WhileStatement MethodInvocation pIter hasNext BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator p MethodInvocation pIter nextProperty IfStatement MethodInvocation ! p MethodInvocation MemberReference JcrConstants JCR_PRIMARYTYPE equals getName BlockStatement StatementExpression MethodInvocation p remove End End ReturnStatement Literal false ReferenceType Command",0
110,110,"CompilationUnit PackageDeclaration org.apache.jackrabbit.base Import java.io.InputStream Import java.util.Calendar Import java.util.LinkedList Import java.util.List Import javax.jcr.AccessDeniedException Import javax.jcr.InvalidItemStateException Import javax.jcr.Item Import javax.jcr.ItemExistsException Import javax.jcr.ItemNotFoundException Import javax.jcr.ItemVisitor Import javax.jcr.NamespaceException Import javax.jcr.NoSuchWorkspaceException Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.PathNotFoundException Import javax.jcr.Property Import javax.jcr.PropertyIterator Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.UnsupportedRepositoryOperationException Import javax.jcr.Value Import javax.jcr.ValueFactory Import javax.jcr.ValueFormatException Import javax.jcr.lock.Lock Import javax.jcr.lock.LockException Import javax.jcr.nodetype.ConstraintViolationException Import javax.jcr.nodetype.NoSuchNodeTypeException Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.NodeTypeManager Import javax.jcr.version.Version Import javax.jcr.version.VersionException Import javax.jcr.version.VersionHistory Import org.apache.jackrabbit.iterator.ArrayNodeIterator Import org.apache.jackrabbit.iterator.ArrayPropertyIterator Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.NoPrefixDeclaredException Import org.apache.jackrabbit.name.Path Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.name.SessionNamespaceResolver ClassDeclaration Modifier public /**
 * Node base class.
 */ BaseNode MethodDeclaration /**
     * Implemented by calling <code>super.getPath()</code>
     * (see {@link BaseItem#getPath() BaseItem.getPath()} and appending
     * <code>""["" + getIndex() + ""]""</code> if
     * <code>getDefinition().allowsSameNameSiblings()</code> returns
     * <code>true</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType String getPath RepositoryException IfStatement MethodInvocation MethodInvocation allowsSameNameSiblings getDefinition BlockStatement ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + SuperMethodInvocation getPath Literal ""["" MethodInvocation getIndex Literal ""]"" BlockStatement ReturnStatement SuperMethodInvocation getPath End MethodDeclaration /**
     * Implemented by calling <code>visitor.visit(this)</code>.
     * {@inheritDoc}
     */ Modifier public accept FormalParameter ReferenceType ItemVisitor visitor RepositoryException StatementExpression MethodInvocation visitor This visit MethodDeclaration /** Always returns <code>true</code>. {@inheritDoc} */ Modifier public BasicType boolean isNode ReturnStatement Literal true MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType Node addNode FormalParameter ReferenceType String relPath RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /**
     * Implemented by calling
     * <code>addNode(relPath).setProperty(prefix + "":primaryType"", primaryNodeTypeName)</code>
     * and returning the created node. The prefix is acquired by calling
     * <code>getSession().getNamespacePrefix(""http://www.jcp.org/jcr/1.0"")</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Node addNode FormalParameter ReferenceType String relPath FormalParameter ReferenceType String primaryNodeTypeName RepositoryException LocalVariableDeclaration ReferenceType Node VariableDeclarator node MethodInvocation MemberReference relPath addNode LocalVariableDeclaration ReferenceType String VariableDeclarator primaryType LocalVariableDeclaration ReferenceType String VariableDeclarator prefix MethodInvocation MethodInvocation MemberReference QName NS_JCR_URI getNamespacePrefix getSession IfStatement BinaryOperation > MethodInvocation prefix length Literal 0 BlockStatement StatementExpression Assignment MemberReference primaryType BinaryOperation + MemberReference prefix Literal "":primaryType"" = BlockStatement StatementExpression Assignment MemberReference primaryType Literal ""primaryType"" = End StatementExpression MethodInvocation node MemberReference primaryType MemberReference primaryNodeTypeName setProperty ReturnStatement MemberReference node MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public orderBefore FormalParameter ReferenceType String srcChildRelPath FormalParameter ReferenceType String destChildRelPath RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /**
     * Implemented by calling <code>getProperty(name).setValue(value)</code>
     * and returning the retrieved property. Adding new properties is not
     * implemented.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value value RepositoryException TryStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator property MethodInvocation MemberReference name getProperty StatementExpression MethodInvocation property MemberReference value setValue ReturnStatement MemberReference property CatchClause CatchClauseParameter PathNotFoundException e ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /**
     * Converts a value to the given type. A new value instance is
     * created using the current value factory
     * (<code>getSession().getValueFactory()</code>) unless the given
     * value already is of the given type or the given type is undefined.
     * <p>
     * This internal utility method is used by the property setters
     * in this class.
     *
     * @param value original value
     * @param type  value type
     * @return converted value
     * @throws ValueFormatException if the value can not be converted
     * @throws RepositoryException  if another error occurs
     */ Modifier private ReferenceType Value convert FormalParameter ReferenceType Value value FormalParameter BasicType int type ValueFormatException RepositoryException IfStatement BinaryOperation || BinaryOperation == MemberReference type MemberReference PropertyType UNDEFINED BinaryOperation == MethodInvocation value getType MemberReference type BlockStatement ReturnStatement MemberReference value BlockStatement LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession SwitchStatement MemberReference type SwitchStatementCase MemberReference PropertyType BINARY ReturnStatement MethodInvocation factory MethodInvocation value getStream createValue SwitchStatementCase MemberReference PropertyType BOOLEAN ReturnStatement MethodInvocation factory MethodInvocation value getBoolean createValue SwitchStatementCase MemberReference PropertyType DATE ReturnStatement MethodInvocation factory MethodInvocation value getDate createValue SwitchStatementCase MemberReference PropertyType DOUBLE ReturnStatement MethodInvocation factory MethodInvocation value getDouble createValue SwitchStatementCase MemberReference PropertyType LONG ReturnStatement MethodInvocation factory MethodInvocation value getLong createValue SwitchStatementCase MemberReference PropertyType STRING ReturnStatement MethodInvocation factory MethodInvocation value getString createValue SwitchStatementCase ReturnStatement MethodInvocation factory MethodInvocation value getString MemberReference type createValue End End MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, value)</code> after converting the given
     * value to the given type.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value value FormalParameter BasicType int type ValueFormatException VersionException LockException RepositoryException ReturnStatement MethodInvocation MemberReference name MethodInvocation MemberReference value MemberReference type convert setProperty MethodDeclaration /**
     * Implemented by calling <code>getProperty(name).setValue(values)</code>
     * and returning the retrieved property. Adding new properties is not
     * implemented.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value values ValueFormatException VersionException LockException RepositoryException TryStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator property MethodInvocation MemberReference name getProperty StatementExpression MethodInvocation property MemberReference values setValue ReturnStatement MemberReference property CatchClause CatchClauseParameter PathNotFoundException e ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /**
     * Implemented by calling <code>setProperty(name, convertedValues)</code>
     * with an array of values that were converted from the given values to
     * the given type.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value values FormalParameter BasicType int type ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType Value VariableDeclarator convertedValues ArrayCreator ReferenceType Value MemberReference values length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i convertedValues MethodInvocation MemberReference ArraySelector MemberReference i values MemberReference type convert = End ReturnStatement MethodInvocation MemberReference name MemberReference convertedValues setProperty MethodDeclaration /**
     * Implemented by calling <code>setProperty(name, stringValues)</code>
     * with an array of values that were created from the given strings by
     * <code>getSession().getValueFactory().createValue(values[i]))</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType String values ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession LocalVariableDeclaration ReferenceType Value VariableDeclarator stringValues ArrayCreator ReferenceType Value MemberReference values length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i stringValues MethodInvocation factory MemberReference ArraySelector MemberReference i values createValue = End ReturnStatement MethodInvocation MemberReference name MemberReference stringValues setProperty MethodDeclaration /**
     * Implemented by calling <code>setProperty(name, stringValues, type)</code>
     * with an array of Values that were created from the given strings by
     * <code>getSession().getValueFactory().createValue(values[i]))</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType String values FormalParameter BasicType int type ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession LocalVariableDeclaration ReferenceType Value VariableDeclarator stringValues ArrayCreator ReferenceType Value MemberReference values length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i stringValues MethodInvocation factory MemberReference ArraySelector MemberReference i values createValue = End ReturnStatement MethodInvocation MemberReference name MemberReference stringValues MemberReference type setProperty MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType String value ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession ReturnStatement MethodInvocation MemberReference name MethodInvocation factory MemberReference value createValue setProperty MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, getSession().getValueFactory().createValue(value, type)</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType String value FormalParameter BasicType int type ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession ReturnStatement MethodInvocation MemberReference name MethodInvocation factory MemberReference value MemberReference type createValue setProperty MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType InputStream value ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession ReturnStatement MethodInvocation MemberReference name MethodInvocation factory MemberReference value createValue setProperty MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter BasicType boolean value ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession ReturnStatement MethodInvocation MemberReference name MethodInvocation factory MemberReference value createValue setProperty MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter BasicType double value ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession ReturnStatement MethodInvocation MemberReference name MethodInvocation factory MemberReference value createValue setProperty MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter BasicType long value ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession ReturnStatement MethodInvocation MemberReference name MethodInvocation factory MemberReference value createValue setProperty MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Calendar value ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession ReturnStatement MethodInvocation MemberReference name MethodInvocation factory MemberReference value createValue setProperty MethodDeclaration /**
     * Implemented by calling
     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Node value ValueFormatException VersionException LockException RepositoryException LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator factory MethodInvocation MethodInvocation getValueFactory getSession ReturnStatement MethodInvocation MemberReference name MethodInvocation factory MemberReference value createValue setProperty MethodDeclaration /**
     * Implemented by calling <code>Path.resolve(this, relPath)</code> from
     * the {@link Path Path} utility class. If the given path resolves to
     * a property, then a {@link PathNotFoundException PathNotFoundException}
     * is thrown.
     * {@inheritDoc}
     */ Modifier public ReferenceType Node getNode FormalParameter ReferenceType String relPath PathNotFoundException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType NodeIterator getNodes RepositoryException ReturnStatement ClassCreator ReferenceType ArrayNodeIterator ArrayCreator ReferenceType Node Literal 0 MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType NodeIterator getNodes FormalParameter ReferenceType String namePattern RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /**
     * Implemented by calling <code>Path.resolve(this, relPath)</code> from
     * the {@link Path Path} utility class. If the given path resolves to
     * a node, then a {@link PathNotFoundException PathNotFoundException}
     * is thrown.
     * {@inheritDoc}
     */ Modifier public ReferenceType Property getProperty FormalParameter ReferenceType String relPath PathNotFoundException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType PropertyIterator getProperties RepositoryException ReturnStatement ClassCreator ReferenceType ArrayPropertyIterator ArrayCreator ReferenceType Property Literal 0 MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType PropertyIterator getProperties FormalParameter ReferenceType String namePattern RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType Item getPrimaryItem ItemNotFoundException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType String getUUID UnsupportedRepositoryOperationException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Always returns <code>1</code>. {@inheritDoc} */ Modifier public BasicType int getIndex RepositoryException ReturnStatement Literal 1 MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType PropertyIterator getReferences RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /**
     * Implemented by calling <code>getNode(relPath)</code> and returning
     * <code>true</code> unless a
     * {@link PathNotFoundException PathNotFoundException} is thrown.
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasNode FormalParameter ReferenceType String relPath RepositoryException TryStatement StatementExpression MethodInvocation MemberReference relPath getNode ReturnStatement Literal true CatchClause CatchClauseParameter PathNotFoundException e ReturnStatement Literal false MethodDeclaration /**
     * Implemented by calling <code>getProperty(relPath)</code> and returning
     * <code>true</code> unless a
     * {@link PathNotFoundException PathNotFoundException} is thrown.
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasProperty FormalParameter ReferenceType String relPath RepositoryException TryStatement StatementExpression MethodInvocation MemberReference relPath getProperty ReturnStatement Literal true CatchClause CatchClauseParameter PathNotFoundException e ReturnStatement Literal false MethodDeclaration /**
     * Implemented by calling <code>getNodes().hasNext()</code>.
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasNodes RepositoryException ReturnStatement MethodInvocation MethodInvocation hasNext getNodes MethodDeclaration /**
     * Implemented by calling <code>getProperties().hasNext()</code>.
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasProperties RepositoryException ReturnStatement MethodInvocation MethodInvocation hasNext getProperties MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType NodeType getPrimaryNodeType RepositoryException TryStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation getSession LocalVariableDeclaration ReferenceType NamespaceResolver VariableDeclarator resolver ClassCreator ReferenceType SessionNamespaceResolver MemberReference session LocalVariableDeclaration ReferenceType Property VariableDeclarator property MethodInvocation MethodInvocation QName.JCR_PRIMARYTYPE MemberReference resolver toJCRName getProperty LocalVariableDeclaration ReferenceType NodeTypeManager VariableDeclarator manager MethodInvocation session MethodInvocation getNodeTypeManager getWorkspace ReturnStatement MethodInvocation manager MethodInvocation property getString getNodeType CatchClause CatchClauseParameter NoPrefixDeclaredException e ThrowStatement ClassCreator ReferenceType NamespaceException Literal ""jcr:primaryType"" MemberReference e MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType NodeType getMixinNodeTypes RepositoryException LocalVariableDeclaration ReferenceType List VariableDeclarator types ClassCreator ReferenceType LinkedList LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation getSession LocalVariableDeclaration ReferenceType NamespaceResolver VariableDeclarator resolver ClassCreator ReferenceType SessionNamespaceResolver MemberReference session TryStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator property MethodInvocation MethodInvocation QName.JCR_MIXINTYPES MemberReference resolver toJCRName getProperty LocalVariableDeclaration ReferenceType Value VariableDeclarator values MethodInvocation property getValues LocalVariableDeclaration ReferenceType NodeTypeManager VariableDeclarator manager MethodInvocation session MethodInvocation getNodeTypeManager getWorkspace ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression MethodInvocation types MethodInvocation manager MemberReference ArraySelector MemberReference i MethodInvocation getString values getNodeType add End CatchClause CatchClauseParameter NoPrefixDeclaredException e ThrowStatement ClassCreator ReferenceType NamespaceException Literal ""jcr:mixinTypes"" MemberReference e CatchClause CatchClauseParameter PathNotFoundException e ReturnStatement Cast ReferenceType NodeType MethodInvocation types ArrayCreator ReferenceType NodeType MethodInvocation types size toArray MethodDeclaration /**
     * Implemented by calling <code>type.isNodeType(nodeTypeName)</code>
     * for the primary type and all mixin types of this node. Returns
     * <code>true</code> if any of these calls return <code>true</code>.
     * Returns <code>false</code> otherwise.
     * {@inheritDoc}
     */ Modifier public BasicType boolean isNodeType FormalParameter ReferenceType String nodeTypeName RepositoryException IfStatement MethodInvocation MethodInvocation MemberReference nodeTypeName isNodeType getPrimaryNodeType BlockStatement ReturnStatement Literal true BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator types MethodInvocation getMixinNodeTypes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference types length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation MemberReference nodeTypeName isNodeType types BlockStatement ReturnStatement Literal true End End End ReturnStatement Literal false MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public addMixin FormalParameter ReferenceType String mixinName NoSuchNodeTypeException VersionException ConstraintViolationException LockException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public removeMixin FormalParameter ReferenceType String mixinName NoSuchNodeTypeException VersionException ConstraintViolationException LockException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public BasicType boolean canAddMixin FormalParameter ReferenceType String mixinName RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType NodeDefinition getDefinition RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType Version checkin VersionException UnsupportedRepositoryOperationException InvalidItemStateException LockException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public checkout UnsupportedRepositoryOperationException LockException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public doneMerge FormalParameter ReferenceType Version version VersionException InvalidItemStateException UnsupportedRepositoryOperationException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public cancelMerge FormalParameter ReferenceType Version version VersionException InvalidItemStateException UnsupportedRepositoryOperationException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public update FormalParameter ReferenceType String srcWorkspaceName NoSuchWorkspaceException AccessDeniedException LockException InvalidItemStateException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType NodeIterator merge FormalParameter ReferenceType String srcWorkspace FormalParameter BasicType boolean bestEffort UnsupportedRepositoryOperationException NoSuchWorkspaceException AccessDeniedException VersionException LockException InvalidItemStateException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType String getCorrespondingNodePath FormalParameter ReferenceType String workspaceName ItemNotFoundException NoSuchWorkspaceException AccessDeniedException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public BasicType boolean isCheckedOut RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public restore FormalParameter ReferenceType String versionName FormalParameter BasicType boolean removeExisting VersionException ItemExistsException UnsupportedRepositoryOperationException LockException InvalidItemStateException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public restore FormalParameter ReferenceType Version version FormalParameter BasicType boolean removeExisting VersionException ItemExistsException UnsupportedRepositoryOperationException LockException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public restore FormalParameter ReferenceType Version version FormalParameter ReferenceType String relPath FormalParameter BasicType boolean removeExisting PathNotFoundException ItemExistsException VersionException ConstraintViolationException UnsupportedRepositoryOperationException LockException InvalidItemStateException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public restoreByLabel FormalParameter ReferenceType String versionLabel FormalParameter BasicType boolean removeExisting VersionException ItemExistsException UnsupportedRepositoryOperationException LockException InvalidItemStateException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType VersionHistory getVersionHistory UnsupportedRepositoryOperationException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType Version getBaseVersion UnsupportedRepositoryOperationException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType Lock lock FormalParameter BasicType boolean isDeep FormalParameter BasicType boolean isSessionScoped UnsupportedRepositoryOperationException LockException AccessDeniedException InvalidItemStateException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType Lock getLock UnsupportedRepositoryOperationException LockException AccessDeniedException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public unlock UnsupportedRepositoryOperationException LockException AccessDeniedException InvalidItemStateException RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public BasicType boolean holdsLock RepositoryException ReturnStatement Literal false MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public BasicType boolean isLocked RepositoryException ReturnStatement Literal false ReferenceType BaseItem ReferenceType Node",0
153,153,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.lock Import org.apache.commons.collections.map.LinkedMap Import org.apache.jackrabbit.core  Import org.apache.jackrabbit.core.fs.FileSystem Import org.apache.jackrabbit.core.fs.FileSystemException Import org.apache.jackrabbit.core.fs.FileSystemResource Import org.apache.jackrabbit.core.observation.EventImpl Import org.apache.jackrabbit.core.observation.SynchronousEventListener Import org.apache.jackrabbit.name.MalformedPathException Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.Path Import org.apache.jackrabbit.name.QName Import org.apache.log4j.Logger Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.ItemNotFoundException Import javax.jcr.lock.Lock Import javax.jcr.lock.LockException Import javax.jcr.observation.Event Import javax.jcr.observation.EventIterator Import java.io.BufferedReader Import java.io.BufferedWriter Import java.io.IOException Import java.io.InputStreamReader Import java.io.OutputStreamWriter Import java.util.ArrayList Import java.util.Iterator Import EDU.oswego.cs.dl.util.concurrent.ReentrantLock ClassDeclaration Modifier public /**
 * Provides the functionality needed for locking and unlocking nodes.
 */ LockManagerImpl FieldDeclaration /**
     * Logger
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType LockManagerImpl getLogger FieldDeclaration /**
     * Name of the lock file
     */ Modifier private final static ReferenceType String VariableDeclarator LOCKS_FILE Literal ""locks"" FieldDeclaration /**
     * Path map containing all locks at the leaves.
     */ Modifier private final ReferenceType PathMap VariableDeclarator lockMap ClassCreator ReferenceType PathMap FieldDeclaration /**
     * Lock to path map.
     */ Modifier private final ReferenceType ReentrantLock VariableDeclarator lockMapLock ClassCreator ReferenceType ReentrantLock FieldDeclaration /**
     * System session
     */ Modifier private final ReferenceType SessionImpl VariableDeclarator session FieldDeclaration /**
     * Locks file
     */ Modifier private final ReferenceType FileSystemResource VariableDeclarator locksFile FieldDeclaration /**
     * Flag indicating whether automatic saving is disabled.
     */ Modifier private BasicType boolean VariableDeclarator savingDisabled FieldDeclaration /**
     * Namespace resolver
     */ Modifier private final ReferenceType NamespaceResolver VariableDeclarator nsResolver ConstructorDeclaration Modifier public /**
     * Create a new instance of this class.
     *
     * @param session system session
     * @param fs      file system for persisting locks
     * @throws RepositoryException if an error occurs
     */ LockManagerImpl FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType FileSystem fs RepositoryException StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference nsResolver MethodInvocation session getNamespaceResolver = StatementExpression Assignment This MemberReference locksFile ClassCreator ReferenceType FileSystemResource MemberReference fs BinaryOperation + MemberReference FileSystem SEPARATOR MemberReference LOCKS_FILE = StatementExpression MethodInvocation session MethodInvocation getObservationManager MethodInvocation This BinaryOperation | MemberReference Event NODE_ADDED MemberReference Event NODE_REMOVED Literal ""/"" Literal true Literal null Literal null Literal true addEventListener getWorkspace TryStatement IfStatement MethodInvocation locksFile exists BlockStatement StatementExpression MethodInvocation load End CatchClause CatchClauseParameter FileSystemException e ThrowStatement ClassCreator ReferenceType RepositoryException BinaryOperation + BinaryOperation + Literal ""I/O error while reading locks from '"" MethodInvocation locksFile getPath Literal ""'"" MemberReference e MethodDeclaration /**
     * Close this lock manager. Writes back all changes.
     */ Modifier public close StatementExpression MethodInvocation save MethodDeclaration /**
     * Read locks from locks file and populate path map
     */ Modifier private load FileSystemException LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator reader Literal null TryStatement StatementExpression Assignment MemberReference reader ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MethodInvocation locksFile getInputStream = WhileStatement Literal true BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation reader readLine IfStatement BinaryOperation || BinaryOperation == MemberReference s Literal null MethodInvocation s Literal """" equals BlockStatement BreakStatement End StatementExpression MethodInvocation MethodInvocation LockToken MemberReference s parse reapplyLock End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType FileSystemException Literal ""error while reading locks file"" MemberReference e IfStatement BinaryOperation != MemberReference reader Literal null BlockStatement TryStatement StatementExpression MethodInvocation reader close CatchClause CatchClauseParameter IOException e2 End MethodDeclaration /**
     * Reapply a lock given a lock token that was read from the locks file
     *
     * @param lockToken lock token to apply
     */ Modifier private reapplyLock FormalParameter ReferenceType LockToken lockToken TryStatement LocalVariableDeclaration ReferenceType NodeId VariableDeclarator id ClassCreator ReferenceType NodeId MemberReference lockToken uuid LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl MethodInvocation session MethodInvocation MemberReference id getItem getItemManager LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation MethodInvocation node getId getPath LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info ClassCreator ReferenceType LockInfo MemberReference lockToken Literal false MethodInvocation node MethodInvocation getBoolean MemberReference QName JCR_LOCKISDEEP getProperty MethodInvocation node MethodInvocation getString MemberReference QName JCR_LOCKOWNER getProperty StatementExpression MethodInvocation info Literal true setLive StatementExpression MethodInvocation lockMap MemberReference path MemberReference info put CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to recreate lock '"" MemberReference lockToken Literal ""': "" MethodInvocation e getMessage warn StatementExpression MethodInvocation log Literal ""Root cause: "" MemberReference e debug MethodDeclaration /**
     * Write locks to locks file
     */ Modifier private save IfStatement MemberReference savingDisabled BlockStatement ReturnStatement End LocalVariableDeclaration Modifier final ReferenceType ArrayList VariableDeclarator list ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation lockMap ClassCreator ReferenceType PathMap ReferenceType ElementVisitor MethodDeclaration Modifier public elementVisited FormalParameter ReferenceType PathMap ReferenceType Element element LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation element get IfStatement MemberReference ! info sessionScoped BlockStatement StatementExpression MethodInvocation list MemberReference info add End Literal false traverse LocalVariableDeclaration ReferenceType BufferedWriter VariableDeclarator writer Literal null TryStatement StatementExpression Assignment MemberReference writer ClassCreator ReferenceType BufferedWriter ClassCreator ReferenceType OutputStreamWriter MethodInvocation locksFile getOutputStream = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation list size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType AbstractLockInfo MethodInvocation list MemberReference i get StatementExpression MethodInvocation writer MethodInvocation info.lockToken toString write StatementExpression MethodInvocation writer newLine End CatchClause CatchClauseParameter FileSystemException fse StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""I/O error while saving locks to '"" MethodInvocation locksFile getPath Literal ""': "" MethodInvocation fse getMessage warn StatementExpression MethodInvocation log Literal ""Root cause: "" MemberReference fse debug CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""I/O error while saving locks to '"" MethodInvocation locksFile getPath Literal ""': "" MethodInvocation ioe getMessage warn StatementExpression MethodInvocation log Literal ""Root cause: "" MemberReference ioe debug IfStatement BinaryOperation != MemberReference writer Literal null BlockStatement TryStatement StatementExpression MethodInvocation writer close CatchClause CatchClauseParameter IOException e End MethodDeclaration /**
     * Internal <code>lock</code> implementation that takes the same parameters
     * as the public method but will not modify content.
     * @param node node to lock
     * @param isDeep whether the lock applies to this node only
     * @param isSessionScoped whether the lock is session scoped
     * @return lock
     * @throws LockException       if the node is already locked
     * @throws RepositoryException if another error occurs
     */ ReferenceType AbstractLockInfo internalLock FormalParameter ReferenceType NodeImpl node FormalParameter BasicType boolean isDeep FormalParameter BasicType boolean isSessionScoped LockException RepositoryException LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator session Cast ReferenceType SessionImpl MethodInvocation node getSession LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info ClassCreator ReferenceType LockInfo ClassCreator ReferenceType LockToken MethodInvocation node internalGetUUID MemberReference isSessionScoped MemberReference isDeep MethodInvocation session getUserID StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation MethodInvocation node getId getPath LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MemberReference path Literal false map LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator other Cast ReferenceType LockInfo MethodInvocation element get IfStatement BinaryOperation != MemberReference other Literal null BlockStatement IfStatement MethodInvocation element MemberReference path hasPath BlockStatement ThrowStatement ClassCreator ReferenceType LockException BinaryOperation + Literal ""Node already locked: "" MethodInvocation node safeGetJCRPath IfStatement MemberReference other deep BlockStatement ThrowStatement ClassCreator ReferenceType LockException Literal ""Parent node has deep lock."" End End End IfStatement BinaryOperation && BinaryOperation && MemberReference info deep MethodInvocation element MemberReference path hasPath BinaryOperation > MethodInvocation element getChildrenCount Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType LockException Literal ""Some child node is locked."" End StatementExpression MethodInvocation info MemberReference session setLockHolder StatementExpression MethodInvocation info Literal true setLive StatementExpression MethodInvocation session MemberReference info addListener StatementExpression MethodInvocation session MethodInvocation info.lockToken toString Literal false addLockToken StatementExpression MethodInvocation lockMap MemberReference path MemberReference info put IfStatement MemberReference ! info sessionScoped BlockStatement StatementExpression MethodInvocation save End ReturnStatement MemberReference info StatementExpression MethodInvocation release MethodDeclaration /**
     * Unlock a node (internal implementation)
     * @param node node to unlock
     * @throws LockException       if the node can not be unlocked
     * @throws RepositoryException if another error occurs
     */ internalUnlock FormalParameter ReferenceType NodeImpl node LockException RepositoryException StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator session Cast ReferenceType SessionImpl MethodInvocation node getSession LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MethodInvocation MethodInvocation node getId getPath Literal true map IfStatement BinaryOperation == MemberReference element Literal null BlockStatement ThrowStatement ClassCreator ReferenceType LockException BinaryOperation + Literal ""Node not locked: "" MethodInvocation node safeGetJCRPath End LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType AbstractLockInfo MethodInvocation element get IfStatement BinaryOperation == MemberReference info Literal null BlockStatement ThrowStatement ClassCreator ReferenceType LockException BinaryOperation + Literal ""Node not locked: "" MethodInvocation node safeGetJCRPath End IfStatement MethodInvocation ! session MethodInvocation info getLockHolder equals BlockStatement ThrowStatement ClassCreator ReferenceType LockException BinaryOperation + Literal ""Node not locked by session: "" MethodInvocation node safeGetJCRPath End StatementExpression MethodInvocation element Literal null set StatementExpression MethodInvocation info Literal false setLive IfStatement MemberReference ! info sessionScoped BlockStatement StatementExpression MethodInvocation save End StatementExpression MethodInvocation release MethodDeclaration /**
     * Return the most appropriate lock information for a node. This is either
     * the lock info for the node itself, if it is locked, or a lock info for one
     * of its parents, if that is deep locked.
     * @return lock info or <code>null</code> if node is not locked
     * @throws RepositoryException if an error occurs
     */ Modifier public ReferenceType AbstractLockInfo getLockInfo FormalParameter ReferenceType String uuid RepositoryException StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation ClassCreator ReferenceType NodeId MemberReference uuid getPath LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MemberReference path Literal false map LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType AbstractLockInfo MethodInvocation element get IfStatement BinaryOperation != MemberReference info Literal null BlockStatement IfStatement BinaryOperation || MethodInvocation element MemberReference path hasPath MemberReference info deep BlockStatement ReturnStatement MemberReference info End End ReturnStatement Literal null CatchClause CatchClauseParameter ItemNotFoundException e ReturnStatement Literal null StatementExpression MethodInvocation release MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Lock lock FormalParameter ReferenceType NodeImpl node FormalParameter BasicType boolean isDeep FormalParameter BasicType boolean isSessionScoped LockException RepositoryException LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info MethodInvocation MemberReference node MemberReference isDeep MemberReference isSessionScoped internalLock ReturnStatement ClassCreator ReferenceType LockImpl MemberReference info MemberReference node MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Lock getLock FormalParameter ReferenceType NodeImpl node LockException RepositoryException StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator session Cast ReferenceType SessionImpl MethodInvocation node getSession LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation MethodInvocation node getId getPath LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MemberReference path Literal false map LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType AbstractLockInfo MethodInvocation element get IfStatement BinaryOperation == MemberReference info Literal null BlockStatement ThrowStatement ClassCreator ReferenceType LockException BinaryOperation + Literal ""Node not locked: "" MethodInvocation node safeGetJCRPath End IfStatement BinaryOperation || MethodInvocation element MemberReference path hasPath MemberReference info deep BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator lockHolder Cast ReferenceType Node MethodInvocation session MethodInvocation ClassCreator ReferenceType NodeId MethodInvocation info getUUID getItem getItemManager ReturnStatement ClassCreator ReferenceType LockImpl MemberReference info MemberReference lockHolder BlockStatement ThrowStatement ClassCreator ReferenceType LockException BinaryOperation + Literal ""Node not locked: "" MethodInvocation node safeGetJCRPath End CatchClause CatchClauseParameter ItemNotFoundException e ThrowStatement ClassCreator ReferenceType LockException BinaryOperation + Literal ""Node not locked: "" MethodInvocation node safeGetJCRPath StatementExpression MethodInvocation release MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * In order to prevent deadlocks from within the synchronous dispatching of
     * events, content modifications should not be made from within code
     * sections that hold monitors. (see #JCR-194)
     */ Modifier public unlock FormalParameter ReferenceType NodeImpl node LockException RepositoryException StatementExpression MethodInvocation MemberReference node internalUnlock MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean holdsLock FormalParameter ReferenceType NodeImpl node RepositoryException StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MethodInvocation MethodInvocation node getId getPath Literal true map IfStatement BinaryOperation == MemberReference element Literal null BlockStatement ReturnStatement Literal false End ReturnStatement BinaryOperation != MethodInvocation element get Literal null CatchClause CatchClauseParameter ItemNotFoundException e ReturnStatement Literal false StatementExpression MethodInvocation release MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isLocked FormalParameter ReferenceType NodeImpl node RepositoryException StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation MethodInvocation node getId getPath LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MemberReference path Literal false map LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType AbstractLockInfo MethodInvocation element get IfStatement BinaryOperation == MemberReference info Literal null BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation element MemberReference path hasPath BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement MemberReference info deep End CatchClause CatchClauseParameter ItemNotFoundException e ReturnStatement Literal false StatementExpression MethodInvocation release MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public checkLock FormalParameter ReferenceType NodeImpl node LockException RepositoryException LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator session Cast ReferenceType SessionImpl MethodInvocation node getSession StatementExpression MethodInvocation MethodInvocation MethodInvocation node getId getPath MemberReference session checkLock MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public checkLock FormalParameter ReferenceType Path path FormalParameter ReferenceType Session session LockException RepositoryException LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MemberReference path Literal false map LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType AbstractLockInfo MethodInvocation element get IfStatement BinaryOperation != MemberReference info Literal null BlockStatement IfStatement BinaryOperation || MethodInvocation element MemberReference path hasPath MemberReference info deep BlockStatement IfStatement MethodInvocation ! session MethodInvocation info getLockHolder equals BlockStatement ThrowStatement ClassCreator ReferenceType LockException Literal ""Node locked."" End End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public lockTokenAdded FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType String lt TryStatement LocalVariableDeclaration ReferenceType LockToken VariableDeclarator lockToken MethodInvocation LockToken MemberReference lt parse LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl This MemberReference session MethodInvocation getItemManager MethodInvocation ClassCreator ReferenceType NodeId MemberReference lockToken uuid getItem LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MethodInvocation node getPrimaryPath Literal true map IfStatement BinaryOperation != MemberReference element Literal null BlockStatement LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType AbstractLockInfo MethodInvocation element get IfStatement BinaryOperation != MemberReference info Literal null BlockStatement IfStatement BinaryOperation == MethodInvocation info getLockHolder Literal null BlockStatement StatementExpression MethodInvocation info MemberReference session setLockHolder BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""Adding lock token has no effect: "" Literal ""lock already held by other session."" warn End End End CatchClause CatchClauseParameter IllegalArgumentException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Bad lock token: "" MethodInvocation e getMessage warn CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to set lock holder: "" MethodInvocation e getMessage warn StatementExpression MethodInvocation log Literal ""Root cause: "" MemberReference e debug MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public lockTokenRemoved FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType String lt TryStatement LocalVariableDeclaration ReferenceType LockToken VariableDeclarator lockToken MethodInvocation LockToken MemberReference lt parse LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl This MemberReference session MethodInvocation getItemManager MethodInvocation ClassCreator ReferenceType NodeId MemberReference lockToken uuid getItem LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator element MethodInvocation lockMap MethodInvocation node getPrimaryPath Literal true map IfStatement BinaryOperation != MemberReference element Literal null BlockStatement LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType AbstractLockInfo MethodInvocation element get IfStatement BinaryOperation != MemberReference info Literal null BlockStatement IfStatement MethodInvocation session MethodInvocation info getLockHolder equals BlockStatement StatementExpression MethodInvocation info Literal null setLockHolder BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""Removing lock token has no effect: "" Literal ""lock held by other session."" warn End End End CatchClause CatchClauseParameter IllegalArgumentException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Bad lock token: "" MethodInvocation e getMessage warn CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to reset lock holder: "" MethodInvocation e getMessage warn StatementExpression MethodInvocation log Literal ""Root cause: "" MemberReference e debug MethodDeclaration /**
     * Return the path of an item given its id. This method will lookup the
     * item inside the systme session.
     */ Modifier private ReferenceType Path getPath FormalParameter ReferenceType ItemId id RepositoryException ReturnStatement MethodInvocation session MethodInvocation MemberReference id getPath getHierarchyManager MethodDeclaration /**
     * Acquire lock on the lock map.
     */ Modifier private acquire ForStatement ForControl BlockStatement TryStatement StatementExpression MethodInvocation lockMapLock acquire BreakStatement CatchClause CatchClauseParameter InterruptedException e End MethodDeclaration /**
     * Release lock on the lock map.
     */ Modifier private release StatementExpression MethodInvocation lockMapLock release MethodDeclaration /**
     * Start an update operation. This will acquire the lock on the lock map
     * and disable saving the lock map file.
     */ Modifier public beginUpdate StatementExpression MethodInvocation acquire StatementExpression Assignment MemberReference savingDisabled Literal true = MethodDeclaration /**
     * End an update operation. This will save the lock map file and release
     * the lock on the lock map.
     */ Modifier public endUpdate StatementExpression Assignment MemberReference savingDisabled Literal false = StatementExpression MethodInvocation save StatementExpression MethodInvocation release MethodDeclaration /**
     * Cancel an update operation. This will release the lock on the lock map.
     */ Modifier public cancelUpdate StatementExpression Assignment MemberReference savingDisabled Literal false = StatementExpression MethodInvocation release ClassDeclaration Modifier private /**
     * Internal event class that holds old and new paths for moved nodes
     */ HierarchyEvent FieldDeclaration /**
         * UUID recorded in event
         */ Modifier public final ReferenceType String VariableDeclarator uuid FieldDeclaration /**
         * Path recorded in event
         */ Modifier public final ReferenceType Path VariableDeclarator path FieldDeclaration /**
         * Old path in move operation
         */ Modifier private ReferenceType Path VariableDeclarator oldPath FieldDeclaration /**
         * New path in move operation
         */ Modifier private ReferenceType Path VariableDeclarator newPath FieldDeclaration /**
         * Event type, may be {@link Event#NODE_ADDED},
         * {@link Event#NODE_REMOVED} or a combination of both
         */ Modifier private BasicType int VariableDeclarator type ConstructorDeclaration Modifier public /**
         * Create a new instance of this class.
         *
         * @param uuid uuid
         * @param path path
         * @param type event type
         */ HierarchyEvent FormalParameter ReferenceType String uuid FormalParameter ReferenceType Path path FormalParameter BasicType int type StatementExpression Assignment This MemberReference uuid MemberReference uuid = StatementExpression Assignment This MemberReference path MemberReference path = StatementExpression Assignment This MemberReference type MemberReference type = MethodDeclaration /**
         * Merge this event with another event. The result will be stored in
         * this event
         *
         * @param event other event to merge with
         */ Modifier public merge FormalParameter ReferenceType HierarchyEvent event StatementExpression Assignment MemberReference type MemberReference event type |= IfStatement BinaryOperation == MemberReference event type MemberReference Event NODE_ADDED BlockStatement StatementExpression Assignment MemberReference newPath MemberReference event path = StatementExpression Assignment MemberReference oldPath MemberReference path = BlockStatement StatementExpression Assignment MemberReference oldPath MemberReference event path = StatementExpression Assignment MemberReference newPath MemberReference path = End MethodDeclaration /**
         * Return the event type. May be {@link Event#NODE_ADDED},
         * {@link Event#NODE_REMOVED} or a combination of both.\
         *
         * @return event type
         */ Modifier public BasicType int getType ReturnStatement MemberReference type MethodDeclaration /**
         * Return the old path if this is a move operation
         *
         * @return old path
         */ Modifier public ReferenceType Path getOldPath ReturnStatement MemberReference oldPath MethodDeclaration /**
         * Return the new path if this is a move operation
         *
         * @return new path
         */ Modifier public ReferenceType Path getNewPath ReturnStatement MemberReference newPath MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public onEvent FormalParameter ReferenceType EventIterator events LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation MemberReference events consolidateEvents WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType HierarchyEvent VariableDeclarator event Cast ReferenceType HierarchyEvent MethodInvocation iter next SwitchStatement MemberReference event type SwitchStatementCase MemberReference Event NODE_ADDED StatementExpression MethodInvocation MemberReference event path nodeAdded BreakStatement SwitchStatementCase MemberReference Event NODE_REMOVED StatementExpression MethodInvocation MemberReference event path nodeRemoved BreakStatement SwitchStatementCase BinaryOperation | MemberReference Event NODE_ADDED MemberReference Event NODE_REMOVED StatementExpression MethodInvocation MethodInvocation event getOldPath MethodInvocation event getNewPath nodeMoved BreakStatement End End MethodDeclaration /**
     * Consolidate an event iterator obtained from observation, merging
     * add and remove operations on nodes with the same UUID into a move
     * operation.
     */ Modifier private ReferenceType Iterator consolidateEvents FormalParameter ReferenceType EventIterator events LocalVariableDeclaration ReferenceType LinkedMap VariableDeclarator eventMap ClassCreator ReferenceType LinkedMap WhileStatement MethodInvocation events hasNext BlockStatement LocalVariableDeclaration ReferenceType EventImpl VariableDeclarator event Cast ReferenceType EventImpl MethodInvocation events nextEvent LocalVariableDeclaration ReferenceType HierarchyEvent VariableDeclarator he TryStatement StatementExpression Assignment MemberReference he ClassCreator ReferenceType HierarchyEvent MethodInvocation event getChildUUID MethodInvocation Path MethodInvocation event getPath MemberReference nsResolver Literal true create MethodInvocation event getType = CatchClause CatchClauseParameter MalformedPathException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to get event's path: "" MethodInvocation e getMessage info ContinueStatement CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to get event's path: "" MethodInvocation e getMessage info ContinueStatement LocalVariableDeclaration ReferenceType HierarchyEvent VariableDeclarator heExisting Cast ReferenceType HierarchyEvent MethodInvocation eventMap MemberReference he uuid get IfStatement BinaryOperation != MemberReference heExisting Literal null BlockStatement StatementExpression MethodInvocation heExisting MemberReference he merge BlockStatement StatementExpression MethodInvocation eventMap MemberReference he uuid MemberReference he put End End ReturnStatement MethodInvocation eventMap MethodInvocation iterator values MethodDeclaration /**
     * Refresh a non-empty path element whose children might have changed
     * its position.
     */ Modifier private refresh FormalParameter ReferenceType PathMap ReferenceType Element element LocalVariableDeclaration Modifier final ReferenceType ArrayList VariableDeclarator infos ClassCreator ReferenceType ArrayList LocalVariableDeclaration BasicType boolean VariableDeclarator needsSave Literal false StatementExpression MethodInvocation element ClassCreator ReferenceType PathMap ReferenceType ElementVisitor MethodDeclaration Modifier public elementVisited FormalParameter ReferenceType PathMap ReferenceType Element element LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation element get StatementExpression MethodInvocation infos MemberReference info add Literal false traverse StatementExpression MethodInvocation element removeAll ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation infos size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation infos MemberReference i get TryStatement LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl MethodInvocation session MethodInvocation ClassCreator ReferenceType NodeId MethodInvocation info getUUID getItem getItemManager StatementExpression MethodInvocation lockMap MethodInvocation node getPrimaryPath MemberReference info put CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation info Literal false setLive IfStatement MemberReference ! info sessionScoped BlockStatement StatementExpression Assignment MemberReference needsSave Literal true = End End IfStatement MemberReference needsSave BlockStatement StatementExpression MethodInvocation save End MethodDeclaration /**
     * Invoked when some node has been added. If the parent of that node
     * exists, shift all name siblings of the new node having an index greater
     * or equal.
     *
     * @param path path of added node
     */ Modifier private nodeAdded FormalParameter ReferenceType Path path StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator parent MethodInvocation lockMap MethodInvocation path Literal 1 getAncestor Literal true map IfStatement BinaryOperation != MemberReference parent Literal null BlockStatement StatementExpression MethodInvocation MemberReference parent refresh End CatchClause CatchClauseParameter PathNotFoundException e StatementExpression MethodInvocation log Literal ""Unable to determine path of added node's parent."" MemberReference e warn ReturnStatement StatementExpression MethodInvocation release MethodDeclaration /**
     * Invoked when some node has been moved. Relink the child inside our
     * map to the new parent.
     *
     * @param oldPath old path
     * @param newPath new path
     */ Modifier private nodeMoved FormalParameter ReferenceType Path oldPath FormalParameter ReferenceType Path newPath StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator parent MethodInvocation lockMap MethodInvocation oldPath Literal 1 getAncestor Literal true map IfStatement BinaryOperation != MemberReference parent Literal null BlockStatement StatementExpression MethodInvocation MemberReference parent refresh End CatchClause CatchClauseParameter PathNotFoundException e StatementExpression MethodInvocation log Literal ""Unable to determine path of moved node's parent."" MemberReference e warn ReturnStatement StatementExpression MethodInvocation release MethodDeclaration /**
     * Invoked when some node has been removed. Remove the child from our
     * path map. Disable all locks contained in that subtree.
     *
     * @param path path of removed node
     */ Modifier private nodeRemoved FormalParameter ReferenceType Path path StatementExpression MethodInvocation acquire TryStatement LocalVariableDeclaration ReferenceType PathMap ReferenceType Element VariableDeclarator parent MethodInvocation lockMap MethodInvocation path Literal 1 getAncestor Literal true map IfStatement BinaryOperation != MemberReference parent Literal null BlockStatement StatementExpression MethodInvocation MemberReference parent refresh End CatchClause CatchClauseParameter PathNotFoundException e StatementExpression MethodInvocation log Literal ""Unable to determine path of removed node's parent."" MemberReference e warn ReturnStatement StatementExpression MethodInvocation release ClassDeclaration /**
     * Contains information about a lock and gets placed inside the child
     * information of a {@link org.apache.jackrabbit.core.PathMap}.
     */ LockInfo ConstructorDeclaration Modifier public /**
         * Create a new instance of this class.
         *
         * @param lockToken     lock token
         * @param sessionScoped whether lock token is session scoped
         * @param deep          whether lock is deep
         * @param lockOwner     owner of lock
         */ LockInfo FormalParameter ReferenceType LockToken lockToken FormalParameter BasicType boolean sessionScoped FormalParameter BasicType boolean deep FormalParameter ReferenceType String lockOwner StatementExpression SuperConstructorInvocation MemberReference lockToken MemberReference sessionScoped MemberReference deep MemberReference lockOwner MethodDeclaration /**
         * {@inheritDoc}
         * <p/>
         * When the owning session is logging out, we have to perform some
         * operations depending on the lock type.
         * (1) If the lock was session-scoped, we unlock the node.
         * (2) If the lock was open-scoped, we remove the lock token
         *     from the session and set the lockHolder field to <code>null</code>.
         */ Modifier public loggingOut FormalParameter ReferenceType SessionImpl session IfStatement MemberReference live BlockStatement IfStatement MemberReference sessionScoped BlockStatement LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator lockHolder MethodInvocation getLockHolder IfStatement BinaryOperation == MemberReference lockHolder Literal null BlockStatement StatementExpression MethodInvocation MemberReference session setLockHolder End TryStatement LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator node Cast ReferenceType NodeImpl MethodInvocation session MethodInvocation ClassCreator ReferenceType NodeId MethodInvocation getUUID getItem getItemManager StatementExpression MethodInvocation node unlock CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to unlock session-scoped lock on node '"" MemberReference lockToken Literal ""': "" MethodInvocation e getMessage warn StatementExpression MethodInvocation log Literal ""Root cause: "" MemberReference e debug BlockStatement IfStatement MethodInvocation session MemberReference lockHolder equals BlockStatement StatementExpression MethodInvocation session MethodInvocation lockToken toString removeLockToken StatementExpression Assignment MemberReference lockHolder Literal null = End End End MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public loggedOut FormalParameter ReferenceType SessionImpl session ReferenceType AbstractLockInfo ReferenceType SessionListener ReferenceType LockManager ReferenceType SynchronousEventListener",0
80,80,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib.comparator Import javax.jcr.Item Import org.apache.commons.jexl.Expression Import org.apache.commons.jexl.ExpressionFactory Import org.apache.commons.jexl.JexlContext Import org.apache.commons.jexl.JexlHelper Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory ClassDeclaration Modifier public /**
 * It compares any javax.jcr.Item based on a JEXL valid expression wich returns
 * a comparable instance. The javax.jcr.Item is added to the JEXLContext with
 * the name of ""item"". A valid JEXL expression would be ""item.name"".
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ JEXLItemComparator FieldDeclaration Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType JEXLItemComparator getLog FieldDeclaration /** Context */ ReferenceType JexlContext VariableDeclarator jc MethodInvocation JexlHelper createContext FieldDeclaration /** Expression to evaluate */ Modifier private ReferenceType Expression VariableDeclarator expression FieldDeclaration /** Sort order */ Modifier private BasicType boolean VariableDeclarator ascending MethodDeclaration Modifier public BasicType int compare FormalParameter ReferenceType Object o1 FormalParameter ReferenceType Object o2 LocalVariableDeclaration ReferenceType Item VariableDeclarator i1 Cast ReferenceType Item MemberReference o1 LocalVariableDeclaration ReferenceType Item VariableDeclarator i2 Cast ReferenceType Item MemberReference o2 TryStatement LocalVariableDeclaration ReferenceType Comparable VariableDeclarator c1 This MethodInvocation MemberReference i1 evaluate LocalVariableDeclaration ReferenceType Comparable VariableDeclarator c2 This MethodInvocation MemberReference i2 evaluate IfStatement This MemberReference ascending BlockStatement ReturnStatement MethodInvocation c1 MemberReference c2 compareTo BlockStatement ReturnStatement MethodInvocation c2 MemberReference c1 compareTo End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to evaluate expression. "" MethodInvocation e getMessage MemberReference e error ReturnStatement Literal 0 MethodDeclaration /**
     * Expression to evaluate
     */ Modifier public setExpression FormalParameter ReferenceType String exp TryStatement StatementExpression Assignment This MemberReference expression MethodInvocation ExpressionFactory MemberReference exp createExpression = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to create expression from String "" MemberReference exp Literal "". "" MethodInvocation e getMessage MemberReference e error MethodDeclaration /**
     * Sort order
     */ Modifier public setAscending FormalParameter BasicType boolean asc StatementExpression Assignment This MemberReference ascending MemberReference asc = MethodDeclaration /**
     * Evaluate the expression for the given node
     * 
     * @param node
     * @return @throws
     *         Exception
     */ Modifier private ReferenceType Comparable evaluate FormalParameter ReferenceType Item item Exception StatementExpression MethodInvocation jc MethodInvocation clear getVars StatementExpression MethodInvocation jc MethodInvocation Literal ""item"" MemberReference item put getVars ReturnStatement Cast ReferenceType Comparable MethodInvocation expression MemberReference jc evaluate ReferenceType ItemComparator",0
575,575,,0
836,836,,0
752,752,,1
772,772,,1
107,107,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.property Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.xml.XmlSerializable InterfaceDeclaration Modifier public /**
 * The <code>Property</code> class represents a Property of a WebDAV
 * resource. The {@link #hashCode()} and {@link #equals(Object)} METHODS are
 * overridden in a way, that the name and value of the property are
 * respected. this means, an property is equal to another, if the names
 * and values are equal.<br>
 * The XML representation of a <code>DavProperty</code>:
     * <pre>
     * new DavProperty(""displayname"", ""WebDAV Directory"").toXml
     * gives a element like:
     * &lt;D:displayname&gt;WebDAV Directory&lt;/D:displayname&gt;
     *
     * new DavProperty(""resourcetype"", new Element(""collection"")).toXml
     * gives a element like:
     * &lt;D:resourcetype&gt;&lt;D:collection/&gt;&lt;/D:resourcetype&gt;
     *
     * Element[] customVals = { new Element(""bla"", customNamespace), new Element(""bli"", customNamespace) };
     * new DavProperty(""custom-property"", customVals, customNamespace).toXml
     * gives an element like
     * &lt;Z:custom-property&gt;
     *    &lt;Z:bla/&gt;
     *    &lt;Z:bli/&gt;
     * &lt;/Z:custom-property&gt;
     * </pre>
     */ DavProperty MethodDeclaration /**
     * Returns the name of this property
     * 
     * @return the name of this property
     */ Modifier public ReferenceType DavPropertyName getName MethodDeclaration /**
     * Returns the value of this property
     *
     * @return the value of this property
     */ Modifier public ReferenceType Object getValue MethodDeclaration /**
     * Return true if this property is protected. A protected property
     * will not be returned in a {@link DavConstants#PROPFIND_ALL_PROP DAV:allprop}
     * PROPFIND request and cannot be set/removed with a PROPPATCH request.
     *
     * @return true, if this property is protected.
     */ Modifier public BasicType boolean isProtected ReferenceType XmlSerializable ReferenceType DavConstants",0
721,721,,0
375,375,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import org.apache.commons.chain.Command ClassDeclaration Modifier public abstract /**
 * SetProperty superclass.
 */ AbstractSetProperty FieldDeclaration /** destination node path key */ Modifier protected ReferenceType String VariableDeclarator parentPathKey Literal ""parentPath"" FieldDeclaration /** Property name key */ Modifier protected ReferenceType String VariableDeclarator nameKey Literal ""name"" FieldDeclaration /** Propety type key */ Modifier protected ReferenceType String VariableDeclarator typeKey Literal ""type"" FieldDeclaration /** Property value key */ Modifier protected ReferenceType String VariableDeclarator valueKey Literal ""value"" MethodDeclaration /**
     * @return Returns the valueKey.
     */ Modifier public ReferenceType String getValueKey ReturnStatement MemberReference valueKey MethodDeclaration /**
     * @param valueKey
     *        Set the context attribute key for the value attribute.
     */ Modifier public setValueKey FormalParameter ReferenceType String valueKey StatementExpression Assignment This MemberReference valueKey MemberReference valueKey = MethodDeclaration /**
     * @return the parent path key
     */ Modifier public ReferenceType String getParentPathKey ReturnStatement MemberReference parentPathKey MethodDeclaration /**
     * Sets the parent path key
     * @param parentPathKey
     *        the parent path key
     */ Modifier public setParentPathKey FormalParameter ReferenceType String parentPathKey StatementExpression Assignment This MemberReference parentPathKey MemberReference parentPathKey = MethodDeclaration /**
     * @return the name key
     */ Modifier public ReferenceType String getNameKey ReturnStatement MemberReference nameKey MethodDeclaration /**
     * Sets the name key
     * @param nameKey
     *        the name key
     */ Modifier public setNameKey FormalParameter ReferenceType String nameKey StatementExpression Assignment This MemberReference nameKey MemberReference nameKey = MethodDeclaration /**
     * @return the type key
     */ Modifier public ReferenceType String getTypeKey ReturnStatement MemberReference typeKey MethodDeclaration /**
     * Sets the type key
     * @param typeKey
     *        the type key
     */ Modifier public setTypeKey FormalParameter ReferenceType String typeKey StatementExpression Assignment This MemberReference typeKey MemberReference typeKey = ReferenceType Command",0
844,844,,0
902,902,,0
553,553,,0
229,229,"CompilationUnit PackageDeclaration org.apache.jackrabbit.tck Import java.io.IOException Import java.io.StringReader Import java.io.ByteArrayOutputStream Import java.util.Map Import java.util.TreeMap Import javax.xml.parsers  Import javax.jcr.Node Import javax.jcr.Session Import javax.jcr.RepositoryException Import org.xml.sax  Import org.xml.sax.helpers  ClassDeclaration Modifier public /**
 * Builds a simple HTML page which lists tip titles
 * and provides links to HTML and text versions
 */ TestResultParser FieldDeclaration ReferenceType Map VariableDeclarator results ClassCreator ReferenceType TreeMap FieldDeclaration ReferenceType String VariableDeclarator strLevels ArrayCreator ReferenceType String ArrayInitializer Literal ""level1"" Literal ""level2"" Literal ""sql"" Literal ""locking"" Literal ""versioning"" Literal ""uuid"" Literal ""observation"" FieldDeclaration ReferenceType String VariableDeclarator currLevel Literal """" FieldDeclaration BasicType boolean VariableDeclarator status Literal false FieldDeclaration BasicType boolean VariableDeclarator getStatValue Literal false ConstructorDeclaration Modifier public TestResultParser StatementExpression SuperConstructorInvocation ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference strLevels length MemberReference ++ i BlockStatement StatementExpression MethodInvocation results MemberReference ArraySelector MemberReference i strLevels Literal null put End MethodDeclaration Modifier public startElement FormalParameter ReferenceType String namespace FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName FormalParameter ReferenceType Attributes atts IfStatement MethodInvocation localName Literal ""node"" equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation atts Literal ""sv:name"" getValue IfStatement MethodInvocation results MemberReference name containsKey BlockStatement StatementExpression Assignment MemberReference currLevel MemberReference name = StatementExpression MethodInvocation results MemberReference currLevel ClassCreator ReferenceType Boolean Literal true put End IfStatement MethodInvocation localName Literal ""property"" equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation atts Literal ""sv:name"" getValue IfStatement MethodInvocation name Literal ""status"" equals BlockStatement StatementExpression Assignment MemberReference status Literal true = End IfStatement BinaryOperation && MethodInvocation localName Literal ""value"" equals MemberReference status BlockStatement StatementExpression Assignment MemberReference getStatValue Literal true = StatementExpression Assignment MemberReference status Literal false = End End End MethodDeclaration Modifier public ReferenceType Map interpretResult FormalParameter ReferenceType String xmldoc ParserConfigurationException SAXException IOException LocalVariableDeclaration ReferenceType SAXParserFactory VariableDeclarator spf MethodInvocation SAXParserFactory newInstance LocalVariableDeclaration ReferenceType SAXParser VariableDeclarator sp MethodInvocation spf newSAXParser LocalVariableDeclaration ReferenceType ParserAdapter VariableDeclarator pa ClassCreator ReferenceType ParserAdapter MethodInvocation sp getParser StatementExpression MethodInvocation pa This setContentHandler StatementExpression MethodInvocation pa ClassCreator ReferenceType InputSource ClassCreator ReferenceType StringReader MemberReference xmldoc parse ReturnStatement MemberReference results MethodDeclaration Modifier public characters FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length IfStatement MemberReference getStatValue BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator val ClassCreator ReferenceType String MemberReference ch MemberReference start MemberReference length IfStatement Literal ! MethodInvocation MemberReference val equals ""0"" BlockStatement StatementExpression MethodInvocation results MemberReference currLevel ClassCreator ReferenceType Boolean Literal false put End StatementExpression Assignment MemberReference getStatValue Literal false = End ReferenceType DefaultHandler",1
439,439,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType Import org.apache.jackrabbit.rmi.remote.RemoteNodeDefinition Import org.apache.jackrabbit.rmi.remote.RemoteNodeType ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link javax.jcr.nodetype.NodeDefinition NodeDefinition}
 * interface. This class makes a local node definition available as an
 * RMI service using the
 * {@link org.apache.jackrabbit.rmi.remote.RemoteNodeDefinition RemoteNodeDefinition}
 * interface.
 *
 * @author Jukka Zitting
 * @see javax.jcr.nodetype.NodeDefinition
 * @see org.apache.jackrabbit.rmi.remote.RemoteNodeDefinition
 */ ServerNodeDefinition FieldDeclaration /** The adapted node definition. */ Modifier private ReferenceType NodeDefinition VariableDeclarator def ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local node definition.
     *
     * @param def local node definition
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerNodeDefinition FormalParameter ReferenceType NodeDefinition def FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference def MemberReference factory StatementExpression Assignment This MemberReference def MemberReference def = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteNodeType getRequiredPrimaryTypes RemoteException ReturnStatement MethodInvocation MethodInvocation def getRequiredPrimaryTypes getRemoteNodeTypeArray MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteNodeType getDefaultPrimaryType RemoteException LocalVariableDeclaration ReferenceType NodeType VariableDeclarator nt MethodInvocation def getDefaultPrimaryType IfStatement BinaryOperation == MemberReference nt Literal null BlockStatement ReturnStatement Literal null BlockStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation def getDefaultPrimaryType getRemoteNodeType getFactory End MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean allowsSameNameSiblings RemoteException ReturnStatement MethodInvocation def allowsSameNameSiblings ReferenceType ServerItemDefinition ReferenceType RemoteNodeDefinition",1
173,173,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query Import org.apache.jackrabbit.name.QName Import java.util.Date ClassDeclaration Modifier public /**
 * Implements a query node that defines property value relation.
 */ RelationQueryNode FieldDeclaration /**
     * The name of the property
     */ Modifier private ReferenceType QName VariableDeclarator property FieldDeclaration /**
     * If <code>true</code> this relation query node contains a value preceded
     * with an unary minus.
     */ Modifier private BasicType boolean VariableDeclarator unaryMinus FieldDeclaration /**
     * The <code>long</code> value of the relation if this is a query is of type
     * <code>long</code>
     */ Modifier private BasicType long VariableDeclarator valueLong FieldDeclaration /**
     * The <code>int</code> value of the position index.
     */ Modifier private BasicType int VariableDeclarator valuePosition FieldDeclaration /**
     * The <code>double</code> value of the relation if this is a query is of
     * type <code>double</code>
     */ Modifier private BasicType double VariableDeclarator valueDouble FieldDeclaration /**
     * The <code>String</code> value of the relation if this is a query is of
     * type <code>String</code>
     */ Modifier private ReferenceType String VariableDeclarator valueString FieldDeclaration /**
     * The <code>Date</code> value of the relation if this is a query is of type
     * <code>Date</code>
     */ Modifier private ReferenceType Date VariableDeclarator valueDate FieldDeclaration /**
     * The operation type of this relation. One of the operation values defined
     * in {@link QueryConstants}.
     */ Modifier private BasicType int VariableDeclarator operation FieldDeclaration /**
     * The value type of this relation. One of {@link #TYPE_DATE}, {@link
     * #TYPE_DOUBLE}, {@link #TYPE_LONG}, {@link #TYPE_STRING}, {@link #TYPE_POSITION}.
     */ Modifier private BasicType int VariableDeclarator type ConstructorDeclaration Modifier public /**
     * Creates a new <code>RelationQueryNode</code> without a type nor value
     * assigned.
     *
     * @param parent the parent node for this query node.
     */ RelationQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter BasicType int operation StatementExpression SuperConstructorInvocation MemberReference parent StatementExpression Assignment This MemberReference operation MemberReference operation = ConstructorDeclaration Modifier public /**
     * Creates a new <code>RelationQueryNode</code> with a <code>long</code>
     * <code>value</code> and an <code>operation</code> type.
     *
     * @param parent    the parent node for this query node.
     * @param property  the name of a property.
     * @param value     a property value
     * @param operation the type of the relation.
     */ RelationQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter ReferenceType QName property FormalParameter BasicType long value FormalParameter BasicType int operation StatementExpression SuperConstructorInvocation MemberReference parent StatementExpression Assignment This MemberReference property MemberReference property = StatementExpression Assignment This MemberReference valueLong MemberReference value = StatementExpression Assignment This MemberReference operation MemberReference operation = StatementExpression Assignment This MemberReference type MemberReference TYPE_LONG = ConstructorDeclaration Modifier public /**
     * Creates a new <code>RelationQueryNode</code> with a <code>double</code>
     * <code>value</code> and an <code>operation</code> type.
     *
     * @param parent    the parent node for this query node.
     * @param property  the name of a property.
     * @param value     a property value
     * @param operation the type of the relation.
     */ RelationQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter ReferenceType QName property FormalParameter BasicType double value FormalParameter BasicType int operation StatementExpression SuperConstructorInvocation MemberReference parent StatementExpression Assignment This MemberReference property MemberReference property = StatementExpression Assignment This MemberReference valueDouble MemberReference value = StatementExpression Assignment This MemberReference operation MemberReference operation = StatementExpression Assignment This MemberReference type MemberReference TYPE_DOUBLE = ConstructorDeclaration Modifier public /**
     * Creates a new <code>RelationQueryNode</code> with a <code>Date</code>
     * <code>value</code> and an <code>operation</code> type.
     *
     * @param parent    the parent node for this query node.
     * @param property  the name of a property.
     * @param value     a property value
     * @param operation the type of the relation.
     */ RelationQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter ReferenceType QName property FormalParameter ReferenceType Date value FormalParameter BasicType int operation StatementExpression SuperConstructorInvocation MemberReference parent StatementExpression Assignment This MemberReference property MemberReference property = StatementExpression Assignment This MemberReference valueDate MemberReference value = StatementExpression Assignment This MemberReference operation MemberReference operation = StatementExpression Assignment This MemberReference type MemberReference TYPE_DATE = ConstructorDeclaration Modifier public /**
     * Creates a new <code>RelationQueryNode</code> with a <code>String</code>
     * <code>value</code> and an <code>operation</code> type.
     *
     * @param parent    the parent node for this query node.
     * @param property  the name of a property.
     * @param value     a property value
     * @param operation the type of the relation.
     */ RelationQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter ReferenceType QName property FormalParameter ReferenceType String value FormalParameter BasicType int operation StatementExpression SuperConstructorInvocation MemberReference parent StatementExpression Assignment This MemberReference property MemberReference property = StatementExpression Assignment This MemberReference valueString MemberReference value = StatementExpression Assignment This MemberReference operation MemberReference operation = StatementExpression Assignment This MemberReference type MemberReference TYPE_STRING = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Object accept FormalParameter ReferenceType QueryNodeVisitor visitor FormalParameter ReferenceType Object data ReturnStatement MethodInvocation visitor This MemberReference data visit MethodDeclaration /**
     * Returns the type of this node.
     *
     * @return the type of this node.
     */ Modifier public BasicType int getType ReturnStatement MemberReference QueryNode TYPE_RELATION MethodDeclaration /**
     * If <code>b</code> is <code>true</code> then the value in this relation
     * node contains a receding unary minus.
     *
     * @param b <code>true</code> if this relation contains a unary minus.
     */ Modifier public setUnaryMinus FormalParameter BasicType boolean b StatementExpression Assignment MemberReference unaryMinus MemberReference b = MethodDeclaration /**
     * Returns the type of the value.
     *
     * @return the type of the value.
     */ Modifier public BasicType int getValueType ReturnStatement MemberReference type MethodDeclaration /**
     * Returns the name of the property in this relation query node.
     *
     * @return the name of the property in this relation query node.
     */ Modifier public ReferenceType QName getProperty ReturnStatement MemberReference property MethodDeclaration /**
     * Sets a new property name for this relation query node.
     *
     * @param name the new property name.
     */ Modifier public setProperty FormalParameter ReferenceType QName name StatementExpression Assignment MemberReference property MemberReference name = MethodDeclaration /**
     * Returns the <code>long</code> value if this relation if of type
     * {@link #TYPE_LONG}.
     *
     * @return the <code>long</code> value.
     */ Modifier public BasicType long getLongValue ReturnStatement MemberReference valueLong MethodDeclaration /**
     * Sets a new value of type <code>long</code>.
     *
     * @param value the new value.
     */ Modifier public setLongValue FormalParameter BasicType long value StatementExpression Assignment MemberReference valueLong TernaryExpression MemberReference unaryMinus MemberReference - value MemberReference value = StatementExpression Assignment MemberReference type MemberReference TYPE_LONG = MethodDeclaration /**
     * Returns the <code>int</code> position index value if this relation is
     * of type {@link #TYPE_POSITION}.
     * @return the position index value.
     */ Modifier public BasicType int getPositionValue ReturnStatement MemberReference valuePosition MethodDeclaration /**
     * Sets a new value for the position index.
     *
     * @param value the new value.
     */ Modifier public setPositionValue FormalParameter BasicType int value StatementExpression Assignment MemberReference valuePosition MemberReference value = StatementExpression Assignment MemberReference type MemberReference TYPE_POSITION = MethodDeclaration /**
     * Returns the <code>double</code> value if this relation if of type
     * {@link #TYPE_DOUBLE}.
     *
     * @return the <code>double</code> value.
     */ Modifier public BasicType double getDoubleValue ReturnStatement MemberReference valueDouble MethodDeclaration /**
     * Sets a new value of type <code>double</code>.
     *
     * @param value the new value.
     */ Modifier public setDoubleValue FormalParameter BasicType double value StatementExpression Assignment MemberReference valueDouble TernaryExpression MemberReference unaryMinus MemberReference - value MemberReference value = StatementExpression Assignment MemberReference type MemberReference TYPE_DOUBLE = MethodDeclaration /**
     * Returns the <code>String</code> value if this relation if of type
     * {@link #TYPE_STRING}.
     *
     * @return the <code>String</code> value.
     */ Modifier public ReferenceType String getStringValue ReturnStatement MemberReference valueString MethodDeclaration /**
     * Sets a new value of type <code>String</code>.
     *
     * @param value the new value.
     */ Modifier public setStringValue FormalParameter ReferenceType String value StatementExpression Assignment MemberReference valueString MemberReference value = StatementExpression Assignment MemberReference type MemberReference TYPE_STRING = MethodDeclaration /**
     * Returns the <code>Date</code> value if this relation if of type
     * {@link #TYPE_DATE}.
     *
     * @return the <code>Date</code> value.
     */ Modifier public ReferenceType Date getDateValue ReturnStatement MemberReference valueDate MethodDeclaration /**
     * Sets a new value of type <code>Date</code>.
     *
     * @param value the new value.
     */ Modifier public setDateValue FormalParameter ReferenceType Date value StatementExpression Assignment MemberReference valueDate MemberReference value = StatementExpression Assignment MemberReference type MemberReference TYPE_DATE = MethodDeclaration /**
     * Returns the operation type.
     *
     * @return the operation type.
     */ Modifier public BasicType int getOperation ReturnStatement MemberReference operation MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType RelationQueryNode BlockStatement LocalVariableDeclaration ReferenceType RelationQueryNode VariableDeclarator other Cast ReferenceType RelationQueryNode MemberReference obj ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == MemberReference type MemberReference other type TernaryExpression BinaryOperation == MemberReference valueDate Literal null BinaryOperation == MemberReference other valueDate Literal null MethodInvocation valueDate MemberReference other valueDate equals BinaryOperation == MemberReference valueDouble MemberReference other valueDouble BinaryOperation == MemberReference valueLong MemberReference other valueLong BinaryOperation == MemberReference valuePosition MemberReference other valuePosition TernaryExpression BinaryOperation == MemberReference valueString Literal null BinaryOperation == MemberReference other valueString Literal null MethodInvocation valueString MemberReference other valueString equals TernaryExpression BinaryOperation == MemberReference property Literal null BinaryOperation == MemberReference other property Literal null MethodInvocation property MemberReference other property equals End ReturnStatement Literal false ReferenceType QueryNode ReferenceType QueryConstants",0
695,695,,0
584,584,,0
187,187,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.lock Import javax.jcr.Session Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Remove the given <code>Lock</code> token to the current
 * <code>Session</code>
 */ RemoveLockToken FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType AddLockToken getLog FieldDeclaration /**
     * token key
     */ Modifier private ReferenceType String VariableDeclarator tokenKey Literal ""token"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator token Cast ReferenceType String MethodInvocation ctx This MemberReference tokenKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Removing lock token "" MemberReference token Literal "" from the current session."" debug End LocalVariableDeclaration ReferenceType Session VariableDeclarator s MethodInvocation CommandHelper MemberReference ctx getSession StatementExpression MethodInvocation s MemberReference token removeLockToken ReturnStatement Literal false MethodDeclaration /**
     * @return the token key
     */ Modifier public ReferenceType String getTokenKey ReturnStatement MemberReference tokenKey MethodDeclaration /**
     * @param tokenKey
     *        the token key to set
     */ Modifier public setTokenKey FormalParameter ReferenceType String tokenKey StatementExpression Assignment This MemberReference tokenKey MemberReference tokenKey = ReferenceType Command",0
757,757,,0
89,89,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Node Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Set the current working <code>Node</code>
 */ CurrentNode FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType CurrentNode getLog FieldDeclaration /** context attribute key for the path attribute */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator dest Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation CommandHelper MemberReference ctx MemberReference dest getNode IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""set current working node to "" MethodInvocation n getPath debug End StatementExpression MethodInvocation CommandHelper MemberReference ctx MemberReference n setCurrentNode ReturnStatement Literal false MethodDeclaration /**
     * @return the path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param pathKey
     *        the path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String pathKey StatementExpression Assignment This MemberReference pathKey MemberReference pathKey = ReferenceType Command",0
86,86,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.FieldCache Import org.apache.lucene.search.ScoreDoc Import org.apache.lucene.search.ScoreDocComparator Import org.apache.lucene.search.SortComparator Import org.apache.lucene.search.SortField Import java.io.IOException ClassDeclaration Modifier public /**
 * Implements a <code>SortComparator</code> which knows how to sort on a lucene
 * field that contains values for multiple properties.
 * <p/>
 * <b>Important:</b> The ScoreDocComparator returned by {@link #newComparator}
 * does not implement the contract for {@link ScoreDocComparator#sortValue(ScoreDoc)}
 * properly. The method will always return an empty String to save memory consumption
 * on large property ranges. Those values are only of relevance when queries
 * are executed with a <code>MultiSearcher</code>, which is currently not the
 * case in Jackrabbit.
 */ SharedFieldSortComparator FieldDeclaration /**
     * A <code>SharedFieldSortComparator</code> that is based on
     * {@link FieldNames#PROPERTIES}.
     */ Modifier final static ReferenceType SortComparator VariableDeclarator PROPERTIES ClassCreator ReferenceType SharedFieldSortComparator MemberReference FieldNames PROPERTIES FieldDeclaration /**
     * The name of the shared field in the lucene index.
     */ Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration /**
     * If <code>true</code> <code>ScoreDocComparator</code> will returns term
     * values when {@link org.apache.lucene.search.ScoreDocComparator#sortValue(org.apache.lucene.search.ScoreDoc)}
     * is called, otherwise only a dummy value is returned.
     */ Modifier private final BasicType boolean VariableDeclarator createComparatorValues ConstructorDeclaration Modifier public /**
     * Creates a new <code>SharedFieldSortComparator</code> for a given shared
     * field.
     *
     * @param fieldname the shared field.
     */ SharedFieldSortComparator FormalParameter ReferenceType String fieldname StatementExpression ExplicitConstructorInvocation MemberReference fieldname Literal false ConstructorDeclaration Modifier public /**
     * Creates a new <code>SharedFieldSortComparator</code> for a given shared
     * field.
     *
     * @param fieldname              the shared field.
     * @param createComparatorValues if <code>true</code> creates values
     * for the <code>ScoreDocComparator</code>s.
     * @see #createComparatorValues
     */ SharedFieldSortComparator FormalParameter ReferenceType String fieldname FormalParameter BasicType boolean createComparatorValues StatementExpression Assignment This MemberReference field MemberReference fieldname = StatementExpression Assignment This MemberReference createComparatorValues MemberReference createComparatorValues = MethodDeclaration /**
     * Creates a new <code>ScoreDocComparator</code> for an embedded
     * <code>propertyName</code> and a <code>reader</code>.
     * @param reader the index reader.
     * @param propertyName the name of the property to sort.
     * @return a <code>ScoreDocComparator</code> for the
     * @throws IOException
     */ Modifier public ReferenceType ScoreDocComparator newComparator FormalParameter Modifier final ReferenceType IndexReader reader FormalParameter ReferenceType String propertyName IOException LocalVariableDeclaration Modifier final ReferenceType FieldCache ReferenceType StringIndex VariableDeclarator index MethodInvocation SharedFieldCache.INSTANCE MemberReference reader MemberReference field MethodInvocation FieldNames MemberReference propertyName Literal """" createNamedValue This SharedFieldSortComparator MemberReference createComparatorValues getStringIndex ReturnStatement ClassCreator ReferenceType ScoreDocComparator MethodDeclaration Modifier public final BasicType int compare FormalParameter Modifier final ReferenceType ScoreDoc i FormalParameter Modifier final ReferenceType ScoreDoc j LocalVariableDeclaration Modifier final BasicType int VariableDeclarator fi MemberReference index ArraySelector MemberReference i doc order LocalVariableDeclaration Modifier final BasicType int VariableDeclarator fj MemberReference index ArraySelector MemberReference j doc order IfStatement BinaryOperation < MemberReference fi MemberReference fj BlockStatement ReturnStatement Literal - 1 IfStatement BinaryOperation > MemberReference fi MemberReference fj BlockStatement ReturnStatement Literal 1 BlockStatement ReturnStatement Literal 0 End End MethodDeclaration /**
             * Returns an empty if no lookup table is available otherwise
             * the index term for the score doc <code>i</code>.
             *
             * @param i the score doc.
             * @return the sort value if available.
             */ Modifier public ReferenceType Comparable sortValue FormalParameter Modifier final ReferenceType ScoreDoc i IfStatement BinaryOperation != MemberReference index lookup Literal null BlockStatement ReturnStatement MemberReference index ArraySelector MemberReference index ArraySelector MemberReference i doc order lookup BlockStatement ReturnStatement Literal """" End MethodDeclaration Modifier public BasicType int sortType ReturnStatement MemberReference SortField CUSTOM MethodDeclaration /**
     * @throws UnsupportedOperationException always.
     */ Modifier protected ReferenceType Comparable getComparable FormalParameter ReferenceType String termtext ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType SortComparator",0
345,345,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.search.Query Import org.apache.lucene.search.Searcher Import org.apache.lucene.search.Weight ClassDeclaration /**
 * Specialized query that returns / scores all pages in the search index.
 * <p>Use this Query to perform a match '*'.
 */ MatchAllQuery FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field ConstructorDeclaration /**
     * Creates a new <code>MatchAllQuery</code> .
     * <p/>
     *
     * @param field the field name.
     * @throws NullPointerException if <code>field</code> is null.
     */ MatchAllQuery FormalParameter ReferenceType String field NullPointerException IfStatement BinaryOperation == MemberReference field Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""field"" End StatementExpression Assignment This MemberReference field MethodInvocation field intern = MethodDeclaration /**
     * Returns the <code>Weight</code> for this Query.
     *
     * @param searcher the current searcher.
     * @return the <code>Weight</code> for this Query.
     */ Modifier protected ReferenceType Weight createWeight FormalParameter ReferenceType Searcher searcher ReturnStatement ClassCreator ReferenceType MatchAllWeight This MemberReference searcher MemberReference field MethodDeclaration /**
     * Returns the String ""%"".
     *
     * @param field default field for the query.
     * @return the String ""%"".
     */ Modifier public ReferenceType String toString FormalParameter ReferenceType String field ReturnStatement Literal ""%"" ReferenceType Query",1
591,591,,0
551,551,,0
887,887,,0
698,698,,0
624,624,,0
416,416,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server.io Import org.apache.jackrabbit.webdav.DavResource Import java.io.IOException InterfaceDeclaration Modifier public /**
 * <code>IOManager</code> interface provides the means to define a list of
 * <code>IOHandlers</code> that should be asked to perform an import or export.
 */ IOManager MethodDeclaration /**
     * Adds the specified handler to the list of handlers.
     *
     * @param ioHandler to be added
     */ Modifier public addIOHandler FormalParameter ReferenceType IOHandler ioHandler MethodDeclaration /**
     * Returns all handlers that have been added to this manager.
     *
     * @return Array of all handlers
     */ Modifier public ReferenceType IOHandler getIOHandlers MethodDeclaration /**
     * Passes the specified context and boolean value to the IOHandlers present
     * on this manager.
     * As soon as the first handler incidates success the import should be
     * considered completed. If none of the handlers can deal with the given
     * information this method must return false.
     *
     * @param context
     * @param isCollection
     * @return true if any of the handlers import the given context.
     * False otherwise.
     * @throws IOException
     * @see IOHandler#importContent(ImportContext, boolean)
     */ Modifier public BasicType boolean importContent FormalParameter ReferenceType ImportContext context FormalParameter BasicType boolean isCollection IOException MethodDeclaration /**
     * Passes the specified information to the IOHandlers present on this manager.
     * As soon as the first handler incidates success the import should be
     * considered completed. If none of the handlers can deal with the given
     * information this method must return false.
     *
     * @param context
     * @param resource
     * @return true if any of the handlers import the information present on the
     * specified context.
     * @throws IOException
     * @see IOHandler#importContent(ImportContext, DavResource)
     */ Modifier public BasicType boolean importContent FormalParameter ReferenceType ImportContext context FormalParameter ReferenceType DavResource resource IOException MethodDeclaration /**
     * Passes the specified information to the IOHandlers present on this manager.
     * As soon as the first handler incidates success the export should be
     * considered completed. If none of the handlers can deal with the given
     * information this method must return false.
     *
     * @param context
     * @param isCollection
     * @return true if any of the handlers could run the export successfully,
     * false otherwise.
     * @throws IOException
     * @see IOHandler#exportContent(ExportContext, boolean)
     */ Modifier public BasicType boolean exportContent FormalParameter ReferenceType ExportContext context FormalParameter BasicType boolean isCollection IOException MethodDeclaration /**
     * Passes the specified information to the IOHandlers present on this manager.
     * As soon as the first handler incidates success the export should be
     * considered completed. If none of the handlers can deal with the given
     * information this method must return false.
     *
     * @param context
     * @param resource
     * @return true if any of the handlers could run the export successfully,
     * false otherwise.
     * @throws IOException
     * @see IOHandler#exportContent(ExportContext, DavResource)
     */ Modifier public BasicType boolean exportContent FormalParameter ReferenceType ExportContext context FormalParameter ReferenceType DavResource resource IOException",0
196,196,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import javax.jcr.Item Import javax.jcr.RepositoryException Import org.apache.jackrabbit.rmi.remote.RemoteItem Import org.apache.jackrabbit.rmi.remote.RemoteNode ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link javax.jcr.Item Item} interface.
 * This class makes a local item available as an RMI service using
 * the {@link org.apache.jackrabbit.rmi.remote.RemoteItem RemoteItem}
 * interface. Used mainly as the base class for the
 * {@link org.apache.jackrabbit.rmi.server.ServerProperty ServerProperty}
 * and {@link org.apache.jackrabbit.rmi.server.ServerNode ServerNode}
 * adapters.
 *
 * @author Jukka Zitting
 * @see javax.jcr.Item
 * @see org.apache.jackrabbit.rmi.remote.RemoteItem
 */ ServerItem FieldDeclaration /** The adapted local item. */ Modifier private ReferenceType Item VariableDeclarator item ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local item.
     *
     * @param item    local item to be adapted
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerItem FormalParameter ReferenceType Item item FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference item MemberReference item = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getPath RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation item getPath CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getName RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation item getName CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public save RepositoryException RemoteException TryStatement StatementExpression MethodInvocation item save CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteItem getAncestor FormalParameter BasicType int level RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation MethodInvocation item MemberReference level getAncestor getRemoteItem CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType int getDepth RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation item getDepth CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteNode getParent RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation MethodInvocation item getParent getRemoteNode CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isModified RemoteException ReturnStatement MethodInvocation item isModified MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isNew RemoteException ReturnStatement MethodInvocation item isNew MethodDeclaration /** {@inheritDoc} */ Modifier public refresh FormalParameter BasicType boolean keepChanges RepositoryException RemoteException TryStatement StatementExpression MethodInvocation item MemberReference keepChanges refresh CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public remove RepositoryException RemoteException TryStatement StatementExpression MethodInvocation item remove CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException ReferenceType ServerObject ReferenceType RemoteItem",0
475,475,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.property Import java.util.Iterator InterfaceDeclaration Modifier public /**
 * <code>DavPropertyNameIterator</code>...
 */ DavPropertyNameIterator MethodDeclaration Modifier public ReferenceType DavPropertyName nextPropertyName ReferenceType Iterator",1
152,152,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server.io Import org.apache.jackrabbit.webdav.DavResource Import java.io.IOException InterfaceDeclaration Modifier public /**
 * <code>IOHandler</code>...
 */ IOHandler MethodDeclaration /**
     * Returns the <code>IOManager</code> that called this handler or <code>null</code>.
     *
     * @return
     */ Modifier public ReferenceType IOManager getIOManager MethodDeclaration /**
     * Returns a human readable name for this <code>IOHandler</code>
     *
     * @return
     */ Modifier public ReferenceType String getName MethodDeclaration /**
     * Returns true, if this handler can run a successful import based on the
     * specified context.
     *
     * @param context
     * @param isCollection
     * @return
     */ Modifier public BasicType boolean canImport FormalParameter ReferenceType ImportContext context FormalParameter BasicType boolean isCollection MethodDeclaration /**
     * Returns true, if this handler can run a successful import based on
     * the specified context and resource. A simple implementation may choose
     * to return the same as {@link #canImport(ImportContext, boolean)} where
     * the isCollection flag is determined by {@link DavResource#isCollection()}.
     *
     * @param context
     * @param resource
     * @return
     */ Modifier public BasicType boolean canImport FormalParameter ReferenceType ImportContext context FormalParameter ReferenceType DavResource resource MethodDeclaration /**
     * Runs the import for the given context and indicates by a boolean return
     * value, if the import could be completed successfully. If the specified
     * <code>ImportContext</code> does not provide a {@link ImportContext#hasStream() stream}
     * the implementation is free, to only import properties of to refuse the
     * import.<br>
     *
     * Please note, that it is the responsibility of the specified
     * <code>ImportContext</code> to assert, that its stream is not consumed
     * multiple times when being passed to a chain of <code>IOHandler</code>s.
     *
     * @param context
     * @param isCollection
     * @return true if the import was successful.
     * @throws IOException if an unexpected error occurs or if this method has
     * been called although {@link #canImport(ImportContext, boolean)} returns
     * false.
     */ Modifier public BasicType boolean importContent FormalParameter ReferenceType ImportContext context FormalParameter BasicType boolean isCollection IOException MethodDeclaration /**
     * Runs the import for the given context and resource. It indicates by a boolean return
     * value, if the import could be completed successfully. If the specified
     * <code>ImportContext</code> does not provide a {@link ImportContext#hasStream() stream}
     * the implementation is free, to only import properties of to refuse the
     * import. A simple implementation may return the same as
     * {@link #importContent(ImportContext, boolean)} where the isCollection flag
     * is determined by {@link DavResource#isCollection()}<br>
     *
     * Please note, that it is the responsibility of the specified
     * <code>ImportContext</code> to assert, that its stream is not consumed
     * multiple times when being passed to a chain of <code>IOHandler</code>s.
     *
     * @param context
     * @param resource
     * @return
     * @throws IOException if an unexpected error occurs or if this method has
     * been called although {@link #canImport(ImportContext, DavResource)} returns
     * false.
     * @see #importContent(ImportContext, boolean)
     */ Modifier public BasicType boolean importContent FormalParameter ReferenceType ImportContext context FormalParameter ReferenceType DavResource resource IOException MethodDeclaration /**
     * Returns true, if this handler can run a successful export based on the
     * specified context.
     *
     * @param context
     * @param isCollection
     * @return
     */ Modifier public BasicType boolean canExport FormalParameter ReferenceType ExportContext context FormalParameter BasicType boolean isCollection MethodDeclaration /**
     * Returns true, if this handler can run a successful export based on
     * the specified context and resource. A simple implementation may choose
     * to return the same as {@link #canExport(ExportContext, boolean)} where
     * the isCollection flag is determined by {@link DavResource#isCollection()}.
     *
     * @param context
     * @param resource
     * @return
     */ Modifier public BasicType boolean canExport FormalParameter ReferenceType ExportContext context FormalParameter ReferenceType DavResource resource MethodDeclaration /**
     * Runs the export for the given context. It indicates by a boolean return
     * value, if the export could be completed successfully. If the specified
     * <code>ExportContext</code> does not provide a {@link ExportContext#hasStream() stream}
     * the implementation should set the properties only and ignore the content to
     * be exported. A simple implementation may return the same as
     * {@link #exportContent(ExportContext, boolean)} where the isCollection flag
     * is determined by {@link DavResource#isCollection()}<br>
     *
     * Please note, that it is the responsibility of the specified
     * <code>ExportContext</code> to assert, that its stream is not written
     * multiple times when being passed to a chain of <code>IOHandler</code>s.
     *
     * @param context
     * @param isCollection
     * @return
     * @throws IOException if an unexpected error occurs or if this method has
     * been called although {@link #canExport(ExportContext, boolean)} returns
     * false.
     */ Modifier public BasicType boolean exportContent FormalParameter ReferenceType ExportContext context FormalParameter BasicType boolean isCollection IOException MethodDeclaration /**
     * Runs the export for the given context and resource. It indicates by a boolean return
     * value, if the export could be completed successfully. If the specified
     * <code>ExportContext</code> does not provide a {@link ExportContext#hasStream() stream}
     * the implementation should set the properties only and ignore the content to
     * be exported. A simple implementation may return the same as
     * {@link #exportContent(ExportContext, boolean)} where the isCollection flag
     * is determined by {@link DavResource#isCollection()}<br>
     *
     * Please note, that it is the responsibility of the specified
     * <code>ExportContext</code> to assert, that its stream is not written
     * multiple times when being passed to a chain of <code>IOHandler</code>s.
     *
     * @param context
     * @param resource
     * @return
     * @throws IOException if an unexpected error occurs or if this method has
     * been called although {@link #canExport(ExportContext, DavResource)} returns
     * false.
     */ Modifier public BasicType boolean exportContent FormalParameter ReferenceType ExportContext context FormalParameter ReferenceType DavResource resource IOException",0
34,34,"CompilationUnit PackageDeclaration org.apache.jackrabbit.name Import org.apache.jackrabbit.BaseException ClassDeclaration Modifier public /**
 * Thrown when a malformed JCR path string is encountered. This exception is
 * thrown when attempting to parse a JCR path string that does not match the
 * JCR patch syntax, contains an invalid path elements, or is otherwise not
 * well formed.
 * <p>
 * See the section 4.6 of the JCR 1.0 specification for details of the
 * JCR path syntax.
 */ MalformedPathException ConstructorDeclaration Modifier public /**
     * Creates a MalformedPathException with the given error message.
     *
     * @param message error message
     */ MalformedPathException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ConstructorDeclaration Modifier public /**
     * Creates a MalformedPathException with the given error message
     * and root cause exception.
     *
     * @param message error message
     * @param rootCause root cause exception
     */ MalformedPathException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation MemberReference message MemberReference rootCause ReferenceType BaseException",0
859,859,,0
658,658,,0
646,646,,0
550,550,,0
68,68,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.jackrabbit.core.ItemId Import org.apache.jackrabbit.core.util.Dumpable Import org.apache.log4j.Logger Import java.io.PrintStream Import java.util.Collection Import java.util.Collections Import java.util.HashMap Import java.util.Iterator Import java.util.Map Import java.util.Set ClassDeclaration Modifier public /**
 * A {@link java.util.Map} based <code>ItemStateStore</code> implementation.
 */ ItemStateMap FieldDeclaration /** Logger instance */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ItemStateMap getLogger FieldDeclaration /**
     * the map backing this <code>ItemStateStore</code> implementation
     */ Modifier final protected ReferenceType Map VariableDeclarator map ConstructorDeclaration Modifier public /**
     * Creates a new HashMap-backed <code>ItemStateStore</code> implementation.
     */ ItemStateMap StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType HashMap ConstructorDeclaration Modifier protected /**
     * Protected constructor for specialized subclasses
     *
     * @param map <code>Map</code> implementation to be used as backing store.
     */ ItemStateMap FormalParameter ReferenceType Map map StatementExpression Assignment This MemberReference map MemberReference map = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean contains FormalParameter ReferenceType ItemId id ReturnStatement MethodInvocation map MemberReference id containsKey MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType ItemState get FormalParameter ReferenceType ItemId id ReturnStatement Cast ReferenceType ItemState MethodInvocation map MemberReference id get MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public put FormalParameter ReferenceType ItemState state LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id MethodInvocation state getId IfStatement MethodInvocation map MemberReference id containsKey BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""overwriting map entry "" MemberReference id warn End StatementExpression MethodInvocation map MemberReference id MemberReference state put MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public remove FormalParameter ReferenceType ItemId id StatementExpression MethodInvocation map MemberReference id remove MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public clear StatementExpression MethodInvocation map clear MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isEmpty ReturnStatement MethodInvocation map isEmpty MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int size ReturnStatement MethodInvocation map size MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Set keySet ReturnStatement MethodInvocation Collections MethodInvocation map keySet unmodifiableSet MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Collection values ReturnStatement MethodInvocation Collections MethodInvocation map values unmodifiableCollection MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public dump FormalParameter ReferenceType PrintStream ps StatementExpression MethodInvocation ps Literal ""map entries:"" println StatementExpression MethodInvocation ps println LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation MethodInvocation iterator keySet WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id Cast ReferenceType ItemId MethodInvocation iter next LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation MemberReference id get StatementExpression MethodInvocation MemberReference id MemberReference state MemberReference ps dumpItemState End MethodDeclaration Modifier private dumpItemState FormalParameter ReferenceType ItemId id FormalParameter ReferenceType ItemState state FormalParameter ReferenceType PrintStream ps StatementExpression MethodInvocation ps TernaryExpression MethodInvocation state isNode Literal ""Node: "" Literal ""Prop: "" print SwitchStatement MethodInvocation state getStatus SwitchStatementCase MemberReference ItemState STATUS_EXISTING StatementExpression MethodInvocation ps Literal ""[existing]           "" print BreakStatement SwitchStatementCase MemberReference ItemState STATUS_EXISTING_MODIFIED StatementExpression MethodInvocation ps Literal ""[existing, modified] "" print BreakStatement SwitchStatementCase MemberReference ItemState STATUS_EXISTING_REMOVED StatementExpression MethodInvocation ps Literal ""[existing, removed]  "" print BreakStatement SwitchStatementCase MemberReference ItemState STATUS_NEW StatementExpression MethodInvocation ps Literal ""[new]                "" print BreakStatement SwitchStatementCase MemberReference ItemState STATUS_STALE_DESTROYED StatementExpression MethodInvocation ps Literal ""[stale, destroyed]   "" print BreakStatement SwitchStatementCase MemberReference ItemState STATUS_STALE_MODIFIED StatementExpression MethodInvocation ps Literal ""[stale, modified]    "" print BreakStatement SwitchStatementCase MemberReference ItemState STATUS_UNDEFINED StatementExpression MethodInvocation ps Literal ""[undefined]          "" print BreakStatement End StatementExpression MethodInvocation ps BinaryOperation + BinaryOperation + BinaryOperation + MemberReference id Literal "" ("" MemberReference state Literal "")"" println ReferenceType ItemStateStore ReferenceType Dumpable",0
830,830,,0
473,473,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.header Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.log4j.Logger Import javax.servlet.http.HttpServletRequest Import java.io.IOException Import java.io.Reader Import java.io.StringReader Import java.util.ArrayList Import java.util.Arrays Import java.util.HashMap Import java.util.Iterator Import java.util.List ClassDeclaration Modifier public /**
 * The <code>IfHeader</code> class represents the state lists defined
 * through the HTTP <em>If</em> header, which is specified in RFC 2518 as
 * follows :
 * <pre>
     If = ""If"" "":"" ( 1*No-tag-list | 1*Tagged-list)
     No-tag-list = List
     Tagged-list = Resource 1*List
     Resource = Coded-URL
     List = ""("" 1*([""Not""](State-etag | ""["" entity-tag ""]"")) "")""
     State-etag = Coded-URL
     Coded-URL = ""&lt;"" absoluteURI ""&gt;""
 * </pre>
 * <p>
 * Reformulating this specification into proper EBNF as specified by N. Wirth
 * we get the following productions, which map to the parse METHODS of this
 * class. Any whitespace is ignored except for white space surrounding and
 * within words which is considered significant.
 * <pre>
     If = ""If:"" ( Tagged | Untagged ).
     Tagged = { ""&lt;"" Word ""&gt;"" Untagged } .
     Untagged = { ""("" IfList "")"" } .
     IfList = { [ ""Not"" ] ( (""&lt;"" Word ""&gt;"" ) | ( ""["" Word ""]"" ) ) } .
     Word = characters .
 * </pre>
 * <p>
 * An <em>If</em> header either contains untagged <em>IfList</em> entries or
 * tagged <em>IfList</em> entries but not a mixture of both. An <em>If</em>
 * header containing tagged entries is said to be of <em>tagged</em> type while
 * an <em>If</em> header containing untagged entries is said to be of
 * <em>untagged</em> type.
 * <p>
 * An <em>IfList</em> is a list of tokens - words enclosed in <em>&lt; &gt;</em>
 * - and etags - words enclosed in <em>[ ]</em>. An <em>IfList</em> matches a
 * (token, etag) tuple if all entries in the list match. If an entry in the list
 * is prefixed with the word <em>Not</em> (parsed case insensitively) the entry
 * must not match the concrete token or etag.
 * <p>
 * Example: The <em>ifList</em> <code>(&lt;token&gt; [etag])</code> only matches
 * if the concret token has the value <code>token</code> and the conrete etag
 * has the value <code>etag</code>. On the other hand, the <em>ifList</em>
 * <code>(Not &lt;notoken&gt;)</code> matches any token which is not
 * <code>notoken</code> (in this case the concrete value of the etag is
 * not taken into consideration).
 *
 * @author Felix Meschberger
 */ IfHeader FieldDeclaration /**
     * default logger
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType IfHeader getLogger FieldDeclaration /**
     * The string representation of the header value
     */ Modifier private final ReferenceType String VariableDeclarator headerValue FieldDeclaration /**
     * The list of untagged state entries
     */ Modifier private final ReferenceType IfHeaderInterface VariableDeclarator ifHeader FieldDeclaration /**
     * The list of all positive tokens present in the If header.
     */ Modifier private ReferenceType List VariableDeclarator allTokens ClassCreator ReferenceType ArrayList FieldDeclaration /**
     * The list of all NOT tokens present in the If header.
     */ Modifier private ReferenceType List VariableDeclarator allNotTokens ClassCreator ReferenceType ArrayList ConstructorDeclaration Modifier public /**
     * Create a Untagged <code>IfHeader</code> if the given lock tokens.
     *
     * @param tokens
     */ IfHeader FormalParameter ReferenceType String tokens StatementExpression MethodInvocation allTokens MethodInvocation Arrays MemberReference tokens asList addAll LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator b ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference tokens length MemberReference ++ i BlockStatement StatementExpression MethodInvocation b MethodInvocation Literal ""<"" append Literal ""("" append StatementExpression MethodInvocation b MemberReference ArraySelector MemberReference i tokens append StatementExpression MethodInvocation b MethodInvocation Literal "")"" append Literal "">"" append End StatementExpression Assignment MemberReference headerValue MethodInvocation b toString = StatementExpression Assignment MemberReference ifHeader MethodInvocation parse = ConstructorDeclaration Modifier public /**
     * Parses the <em>If</em> header and creates and internal representation
     * which is easy to query.
     *
     * @param req The request object
     */ IfHeader FormalParameter ReferenceType HttpServletRequest req StatementExpression Assignment MemberReference headerValue MethodInvocation req MemberReference DavConstants HEADER_IF getHeader = StatementExpression Assignment MemberReference ifHeader MethodInvocation parse = MethodDeclaration /**
     * Return {@link DavConstants#HEADER_IF If}
     *
     * @return {@link DavConstants#HEADER_IF If}
     * @see DavConstants#HEADER_IF
     */ Modifier public ReferenceType String getHeaderName ReturnStatement MemberReference DavConstants HEADER_IF MethodDeclaration /**
     * Return the String representation of the If header present on
     * the given request or <code>null</code>.
     *
     * @return If header value as String or <code>null</code>.
     */ Modifier public ReferenceType String getHeaderValue ReturnStatement MemberReference headerValue MethodDeclaration /**
     * Returns true if an If header was present in the given request. False otherwise.
     *
     * @return  true if an If header was present.
     */ Modifier public BasicType boolean hasValue ReturnStatement BinaryOperation != MemberReference ifHeader Literal null MethodDeclaration /**
     * Tries to match the contents of the <em>If</em> header with the given
     * token and etag values with the restriction to only check for the tag.
     * <p>
     * If the <em>If</em> header is of untagged type, the untagged <em>IfList</em>
     * is matched against the token and etag given: A match of the token and
     * etag is found if at least one of the <em>IfList</em> entries match the
     * token and etag tupel.
     *
     * @param tag The tag to identify the <em>IfList</em> to match the token
     * and etag against.
     * @param token The token to compare.
     * @param etag The ETag value to compare.
     *
     * @return If the <em>If</em> header is of untagged type the result is
     *      <code>true</code> if any of the <em>IfList</em> entries matches
     *      the token and etag values. For tagged type <em>If</em> header the
     *      result is <code>true</code> if either no entry for the given tag
     *      exists in the <em>If</em> header or if the <em>IfList</em> for the
     *      given tag matches the token and etag given.
     */ Modifier public BasicType boolean matches FormalParameter ReferenceType String tag FormalParameter ReferenceType String token FormalParameter ReferenceType String etag IfStatement BinaryOperation == MemberReference ifHeader Literal null BlockStatement StatementExpression MethodInvocation log Literal ""matches: No If header, assume match"" debug ReturnStatement Literal true BlockStatement ReturnStatement MethodInvocation ifHeader MemberReference tag MemberReference token MemberReference etag matches End MethodDeclaration /**
     * @return an interator over all tokens present in the if header, that were
     * not denied by a leading NOT statement.
     */ Modifier public ReferenceType Iterator getAllTokens ReturnStatement MethodInvocation allTokens iterator MethodDeclaration /**
     * @return an interator over all NOT tokens present in the if header, that
     * were explicitely denied.
     */ Modifier public ReferenceType Iterator getAllNotTokens ReturnStatement MethodInvocation allNotTokens iterator MethodDeclaration /**
     * Parse the original header value and build th internal IfHeaderInterface
     * object that is easy to query.
     */ Modifier private ReferenceType IfHeaderInterface parse LocalVariableDeclaration ReferenceType IfHeaderInterface VariableDeclarator ifHeader IfStatement BinaryOperation && BinaryOperation != MemberReference headerValue Literal null BinaryOperation > MethodInvocation headerValue length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType StringReader VariableDeclarator reader Literal null LocalVariableDeclaration BasicType int VariableDeclarator firstChar Literal 0 TryStatement StatementExpression Assignment MemberReference reader ClassCreator ReferenceType StringReader MemberReference headerValue = TryStatement StatementExpression MethodInvocation reader Literal 1 mark StatementExpression Assignment MemberReference firstChar MethodInvocation MemberReference reader readWhiteSpace = StatementExpression MethodInvocation reader reset CatchClause CatchClauseParameter IOException ignore IfStatement BinaryOperation == MemberReference firstChar Literal '(' BlockStatement StatementExpression Assignment MemberReference ifHeader MethodInvocation MemberReference reader parseUntagged = IfStatement BinaryOperation == MemberReference firstChar Literal '<' BlockStatement StatementExpression Assignment MemberReference ifHeader MethodInvocation MemberReference reader parseTagged = BlockStatement StatementExpression MethodInvocation Literal ""If"" MemberReference firstChar Literal ""(<"" Literal null logIllegalState StatementExpression Assignment MemberReference ifHeader Literal null = End End IfStatement BinaryOperation != MemberReference reader Literal null BlockStatement StatementExpression MethodInvocation reader close End BlockStatement StatementExpression MethodInvocation log Literal ""IfHeader: No If header in request"" debug StatementExpression Assignment MemberReference ifHeader Literal null = End ReturnStatement MemberReference ifHeader MethodDeclaration /**
     * Parses a tagged type <em>If</em> header. This method implements the
     * <em>Tagged</em> production given in the class comment :
     * <pre>
         Tagged = { ""<"" Word "">"" Untagged } .
     * </pre>
     *
     * @param reader
     * @return
     */ Modifier private ReferenceType IfHeaderMap parseTagged FormalParameter ReferenceType StringReader reader LocalVariableDeclaration ReferenceType IfHeaderMap VariableDeclarator map ClassCreator ReferenceType IfHeaderMap TryStatement WhileStatement Literal true BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c MethodInvocation MemberReference reader readWhiteSpace IfStatement BinaryOperation < MemberReference c Literal 0 BlockStatement BreakStatement IfStatement BinaryOperation == MemberReference c Literal '<' BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator resource MethodInvocation MemberReference reader Literal '>' readWord IfStatement BinaryOperation != MemberReference resource Literal null BlockStatement StatementExpression MethodInvocation map MemberReference resource MethodInvocation MemberReference reader parseUntagged put BlockStatement BreakStatement End BlockStatement StatementExpression MethodInvocation Literal ""Tagged"" MemberReference c Literal ""<"" MemberReference reader logIllegalState End End End CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation log BinaryOperation + Literal ""parseTagged: Problem parsing If header: "" MethodInvocation ioe toString error ReturnStatement MemberReference map MethodDeclaration /**
     * Parses an untagged type <em>If</em> header. This method implements the
     * <em>Untagged</em> production given in the class comment :
     * <pre>
         Untagged = { ""("" IfList "")"" } .
     * </pre>
     *
     * @param reader The <code>StringReader</code> to read from for parsing
     *
     * @return An <code>ArrayList</code> of {@link IfList} entries.
     */ Modifier private ReferenceType IfHeaderList parseUntagged FormalParameter ReferenceType StringReader reader LocalVariableDeclaration ReferenceType IfHeaderList VariableDeclarator list ClassCreator ReferenceType IfHeaderList TryStatement WhileStatement Literal true BlockStatement StatementExpression MethodInvocation reader Literal 1 mark LocalVariableDeclaration BasicType int VariableDeclarator c MethodInvocation MemberReference reader readWhiteSpace IfStatement BinaryOperation < MemberReference c Literal 0 BlockStatement BreakStatement IfStatement BinaryOperation == MemberReference c Literal '(' BlockStatement StatementExpression MethodInvocation list MethodInvocation MemberReference reader parseIfList add IfStatement BinaryOperation == MemberReference c Literal '<' BlockStatement StatementExpression MethodInvocation reader reset BreakStatement BlockStatement StatementExpression MethodInvocation Literal ""Untagged"" MemberReference c Literal ""("" MemberReference reader logIllegalState End End End End CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation log BinaryOperation + Literal ""parseUntagged: Problem parsing If header: "" MethodInvocation ioe toString error ReturnStatement MemberReference list MethodDeclaration /**
     * Parses an <em>IfList</em> in the <em>If</em> header. This method
     * implements the <em>Tagged</em> production given in the class comment :
     * <pre>
         IfList = { [ ""Not"" ] ( (""<"" Word "">"" ) | ( ""["" Word ""]"" ) ) } .
     * </pre>
     *
     * @param reader The <code>StringReader</code> to read from for parsing
     *
     * @return The {@link IfList} for the input <em>IfList</em>.
     *
     * @throws IOException if a problem occurrs during reading.
     */ Modifier private ReferenceType IfList parseIfList FormalParameter ReferenceType StringReader reader IOException LocalVariableDeclaration ReferenceType IfList VariableDeclarator res ClassCreator ReferenceType IfList LocalVariableDeclaration BasicType boolean VariableDeclarator positive Literal true LocalVariableDeclaration ReferenceType String VariableDeclarator word WhileStatement ReadLoop Literal true BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator nextChar MethodInvocation MemberReference reader readWhiteSpace SwitchStatement MemberReference nextChar SwitchStatementCase Literal 'N' Literal 'n' LocalVariableDeclaration BasicType int VariableDeclarator not MethodInvocation reader read IfStatement BinaryOperation && BinaryOperation != MemberReference not Literal 'o' BinaryOperation != MemberReference not Literal 'O' BlockStatement StatementExpression MethodInvocation Literal ""IfList-Not"" MemberReference not Literal ""o"" Literal null logIllegalState BreakStatement End StatementExpression Assignment MemberReference not MethodInvocation reader read = IfStatement BinaryOperation || BinaryOperation != MemberReference not Literal 't' BinaryOperation != MemberReference not Literal 'T' BlockStatement StatementExpression MethodInvocation Literal ""IfList-Not"" MemberReference not Literal ""t"" Literal null logIllegalState BreakStatement End StatementExpression Assignment MemberReference positive Literal false = BreakStatement SwitchStatementCase Literal '<' StatementExpression Assignment MemberReference word MethodInvocation MemberReference reader Literal '>' readWord = IfStatement BinaryOperation != MemberReference word Literal null BlockStatement StatementExpression MethodInvocation res ClassCreator ReferenceType IfListEntryToken MemberReference word MemberReference positive add IfStatement MemberReference positive BlockStatement StatementExpression MethodInvocation allTokens MemberReference word add BlockStatement StatementExpression MethodInvocation allNotTokens MemberReference word add End StatementExpression Assignment MemberReference positive Literal true = End BreakStatement SwitchStatementCase Literal '[' StatementExpression Assignment MemberReference word MethodInvocation MemberReference reader Literal ']' readWord = IfStatement BinaryOperation != MemberReference word Literal null BlockStatement StatementExpression MethodInvocation res ClassCreator ReferenceType IfListEntryEtag MemberReference word MemberReference positive add StatementExpression Assignment MemberReference positive Literal true = End BreakStatement SwitchStatementCase Literal ')' StatementExpression MethodInvocation log Literal ""parseIfList: End of If list, terminating loop"" debug BreakStatement ReadLoop SwitchStatementCase StatementExpression MethodInvocation Literal ""IfList"" MemberReference nextChar Literal ""nN<[)"" MemberReference reader logIllegalState IfStatement BinaryOperation < MemberReference nextChar Literal 0 BlockStatement BreakStatement ReadLoop End BreakStatement End End ReturnStatement MemberReference res MethodDeclaration /**
     * Returns the first non-whitespace character from the reader or -1 if
     * the end of the reader is encountered.
     *
     * @param reader The <code>Reader</code> to read from
     *
     * @return The first non-whitespace character or -1 in case of EOF.
     *
     * @throws IOException if a problem occurrs during reading.
     */ Modifier private BasicType int readWhiteSpace FormalParameter ReferenceType Reader reader IOException LocalVariableDeclaration BasicType int VariableDeclarator c MethodInvocation reader read WhileStatement BinaryOperation && BinaryOperation >= MemberReference c Literal 0 MethodInvocation Character Cast BasicType char MemberReference c isWhitespace BlockStatement StatementExpression Assignment MemberReference c MethodInvocation reader read = End ReturnStatement MemberReference c MethodDeclaration /**
     * Reads from the input until the end character is encountered and returns
     * the string upto but not including this end character. If the end of input
     * is reached before reading the end character <code>null</code> is
     * returned.
     * <p>
     * Note that this method does not support any escaping.
     *
     * @param reader The <code>Reader</code> to read from
     * @param end The ending character limitting the word.
     *
     * @return The string read upto but not including the ending character or
     *      <code>null</code> if the end of input is reached before the ending
     *      character has been read.
     *
     * @throws IOException if a problem occurrs during reading.
     */ Modifier private ReferenceType String readWord FormalParameter ReferenceType Reader reader FormalParameter BasicType char end IOException LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType int VariableDeclarator c MethodInvocation reader read ForStatement ForControl BinaryOperation && BinaryOperation >= MemberReference c Literal 0 BinaryOperation != MemberReference c MemberReference end Assignment MemberReference c MethodInvocation reader read = BlockStatement StatementExpression MethodInvocation buf Cast BasicType char MemberReference c append End IfStatement BinaryOperation < MemberReference c Literal 0 BlockStatement StatementExpression MethodInvocation log Literal ""readWord: Unexpected end of input reading word"" error ReturnStatement Literal null End ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * Logs an unexpected character with the corresponding state and list of
     * expected characters. If the reader parameter is not null, characters
     * are read until either the end of the input is reached or any of the
     * characters in the expChar string is read.
     *
     * @param state The name of the current parse state. This method logs this
     *      name in the message. The intended value would probably be the
     *      name of the EBNF production during which the error occurrs.
     * @param effChar The effective character read.
     * @param expChar The list of characters acceptable in the current state.
     * @param reader The reader to be caught up to any of the expected
     *      characters. If <code>null</code> the input is not caught up to
     *      any of the expected characters (of course ;-).
     */ Modifier private logIllegalState FormalParameter ReferenceType String state FormalParameter BasicType int effChar FormalParameter ReferenceType String expChar FormalParameter ReferenceType StringReader reader LocalVariableDeclaration ReferenceType String VariableDeclarator effString TernaryExpression BinaryOperation < MemberReference effChar Literal 0 Literal ""<EOF>"" MethodInvocation String Cast BasicType char MemberReference effChar valueOf StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""logIllegalState: Unexpected character '"" MemberReference effString Literal "" in state "" MemberReference state Literal "", expected any of "" MemberReference expChar error IfStatement BinaryOperation && BinaryOperation != MemberReference reader Literal null BinaryOperation >= MemberReference effChar Literal 0 BlockStatement TryStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""logIllegalState: Catch up to any of "" MemberReference expChar debug DoStatement BinaryOperation && BinaryOperation >= MemberReference effChar Literal 0 BinaryOperation < MethodInvocation expChar MemberReference effChar indexOf Literal 0 BlockStatement StatementExpression MethodInvocation reader Literal 1 mark StatementExpression Assignment MemberReference effChar MethodInvocation reader read = End IfStatement BinaryOperation >= MemberReference effChar Literal 0 BlockStatement StatementExpression MethodInvocation reader reset End CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation log BinaryOperation + Literal ""logIllegalState: IO Problem catching up to any of "" MemberReference expChar error End ClassDeclaration Modifier private static abstract /**
     * The <code>IfListEntry</code> abstract class is the base class for
     * entries in an <em>IfList</em> production. This abstract base class
     * provides common functionality to both types of entries, namely tokens
     * enclosed in angle brackets (<code>&lt; &gt;</code>) and etags enclosed
     * in square brackets (<code>[ ]</code>).
     */ IfListEntry FieldDeclaration /**
         * The entry string value - the semantics of this value depends on the
         * implementing class.
         */ Modifier final protected ReferenceType String VariableDeclarator value FieldDeclaration /** Flag to indicate, whether this is a positive match or not */ Modifier final protected BasicType boolean VariableDeclarator positive FieldDeclaration /** The cached result of the {@link #toString} method. */ Modifier protected ReferenceType String VariableDeclarator stringValue ConstructorDeclaration Modifier protected /**
         * Sets up the final fields of this abstract class. The meaning of
         * value parameter depends solely on the implementing class. From the
         * point of view of this abstract class, it is simply a string value.
         *
         * @param value The string value of this instance
         * @param positive <code>true</code> if matches are positive
         */ IfListEntry FormalParameter ReferenceType String value FormalParameter BasicType boolean positive StatementExpression Assignment This MemberReference value MemberReference value = StatementExpression Assignment This MemberReference positive MemberReference positive = MethodDeclaration /**
         * Matches the value from the parameter to the internal string value.
         * If the parameter and the {@link #value} field match, the method
         * returns <code>true</code> for positive matches and <code>false</code>
         * for negative matches.
         * <p>
         * This helper method can be called by implementations to evaluate the
         * concrete match on the correct value parameter. See
         * {@link #match(String, String)} for the external API method.
         *
         * @param value The string value to compare to the {@link #value}
         *      field.
         *
         * @return <code>true</code> if the value parameter and the
         *      {@link #value} field match and the {@link #positive} field is
         *      <code>true</code> or if the values do not match and the
         *      {@link #positive} field is <code>false</code>.
         */ Modifier protected BasicType boolean match FormalParameter ReferenceType String value ReturnStatement BinaryOperation == MemberReference positive This MemberReference value MethodInvocation MemberReference value equals MethodDeclaration /**
         * Matches the entry's value to the the token or etag. Depending on the
         * concrete implementation, only one of the parameters may be evaluated
         * while the other may be ignored.
         * <p>
         * Implementing METHODS may call the helper method {@link #match(String)}
         * for the actual matching.
         *
         * @param token The token value to compare
         * @param etag The etag value to compare
         *
         * @return <code>true</code> if the token/etag matches the <em>IfList</em>
         *      entry.
         */ Modifier public abstract BasicType boolean match FormalParameter ReferenceType String token FormalParameter ReferenceType String etag MethodDeclaration /**
         * Returns a short type name for the implementation. This method is
         * used by the {@link #toString} method to build the string representation
         * if the instance.
         *
         * @return The type name of the implementation.
         */ Modifier protected abstract ReferenceType String getType MethodDeclaration /**
	 * Returns the value of this entry.
	 *
	 * @return the value
	 */ Modifier protected ReferenceType String getValue ReturnStatement MemberReference value MethodDeclaration /**
         * Returns the String represenation of this entry. This method uses the
         * {@link #getType} to build the string representation.
         *
         * @return the String represenation of this entry.
         */ Modifier public ReferenceType String toString IfStatement BinaryOperation == MemberReference stringValue Literal null BlockStatement StatementExpression Assignment MemberReference stringValue BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation getType Literal "": "" TernaryExpression MemberReference positive Literal """" Literal ""!"" MemberReference value = End ReturnStatement MemberReference stringValue ClassDeclaration Modifier private static /**
     * The <code>IfListEntryToken</code> extends the {@link IfListEntry}
     * abstract class to represent an entry for token matching.
     */ IfListEntryToken ConstructorDeclaration /**
         * Creates a token matching entry.
         *
         * @param token The token value pertinent to this instance.
         * @param positive <code>true</code> if this is a positive match entry.
         */ IfListEntryToken FormalParameter ReferenceType String token FormalParameter BasicType boolean positive StatementExpression SuperConstructorInvocation MemberReference token MemberReference positive MethodDeclaration /**
         * Matches the token parameter to the stored token value and returns
         * <code>true</code> if the values match and if the match is positive.
         * <code>true</code> is also returned for negative matches if the values
         * do not match.
         *
         * @param token The token value to compare
         * @param etag The etag value to compare, which is ignored in this
         *      implementation.
         *
         * @return <code>true</code> if the token matches the <em>IfList</em>
         *      entry's token value.
         */ Modifier public BasicType boolean match FormalParameter ReferenceType String token FormalParameter ReferenceType String etag ReturnStatement SuperMethodInvocation MemberReference token match MethodDeclaration /**
         * Returns the type name of this implementation, which is fixed to
         * be <em>Token</em>.
         *
         * @return The fixed string <em>Token</em> as the type name.
         */ Modifier protected ReferenceType String getType ReturnStatement Literal ""Token"" ReferenceType IfListEntry ClassDeclaration Modifier private static /**
     * The <code>IfListEntryToken</code> extends the {@link IfListEntry}
     * abstract class to represent an entry for etag matching.
     */ IfListEntryEtag ConstructorDeclaration /**
         * Creates an etag matching entry.
         *
         * @param etag The etag value pertinent to this instance.
         * @param positive <code>true</code> if this is a positive match entry.
         */ IfListEntryEtag FormalParameter ReferenceType String etag FormalParameter BasicType boolean positive StatementExpression SuperConstructorInvocation MemberReference etag MemberReference positive MethodDeclaration /**
         * Matches the etag parameter to the stored etag value and returns
         * <code>true</code> if the values match and if the match is positive.
         * <code>true</code> is also returned for negative matches if the values
         * do not match.
         *
         * @param token The token value to compare, which is ignored in this
         *      implementation.
         * @param etag The etag value to compare
         *
         * @return <code>true</code> if the etag matches the <em>IfList</em>
         *      entry's etag value.
         */ Modifier public BasicType boolean match FormalParameter ReferenceType String token FormalParameter ReferenceType String etag ReturnStatement SuperMethodInvocation MemberReference etag match MethodDeclaration /**
         * Returns the type name of this implementation, which is fixed to
         * be <em>ETag</em>.
         *
         * @return The fixed string <em>ETag</em> as the type name.
         */ Modifier protected ReferenceType String getType ReturnStatement Literal ""ETag"" ReferenceType IfListEntry ClassDeclaration Modifier private static /**
     * The <code>IfList</code> class extends the <code>ArrayList</code> class
     * with the limitation to only support adding {@link IfListEntry} objects
     * and adding a {@link #match} method.
     * <p>
     * This class is a container for data contained in the <em>If</em>
     * production <em>IfList</em>
     * <pre>
         IfList = { [ ""Not"" ] ( (""<"" Word "">"" ) | ( ""["" Word ""]"" ) ) } .
     * </pre>
     * <p>
     */ IfList MethodDeclaration /**
         * Throws an <code>IllegalStateException</code> because only
         * {@link IfListEntry} objects are supported in this list.
         *
         * @param o The <code>Object</code> to add.
         * @return <code>true</code> if successfull
         *
         * @throws IllegalStateException because only {@link IfListEntry}
         *      objects are supported in this list.
         */ Modifier public BasicType boolean add FormalParameter ReferenceType Object o ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Only IfListEntry instances allowed"" MethodDeclaration /**
         * Throws an <code>IllegalStateException</code> because only
         * {@link IfListEntry} objects are supported in this list.
         *
         * @param index The position at which to add the object.
         * @param element The <code>Object</code> to add.
         *
         * @throws IllegalStateException because only {@link IfListEntry}
         *      objects are supported in this list.
         */ Modifier public add FormalParameter BasicType int index FormalParameter ReferenceType Object element ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Only IfListEntry instances allowed"" MethodDeclaration /**
         * Adds the {@link IfListEntry} at the end of the list.
         *
         * @param entry The {@link IfListEntry} to add to the list
         *
         * @return <code>true</code> (as per the general contract of
         *      Collection.add).
         */ Modifier public BasicType boolean add FormalParameter ReferenceType IfListEntry entry ReturnStatement SuperMethodInvocation MemberReference entry add MethodDeclaration /**
         * Adds the {@link IfListEntry} at the indicated position of the list.
         *
         * @param index
         * @param entry
         *
         * @throws IndexOutOfBoundsException if index is out of range
         *      <code>(index &lt; 0 || index &gt; size())</code>.
         */ Modifier public add FormalParameter BasicType int index FormalParameter ReferenceType IfListEntry entry StatementExpression SuperMethodInvocation MemberReference index MemberReference entry add MethodDeclaration /**
         * Returns <code>true</code> if all {@link IfListEntry} objects in the
         * list match the given token and etag. If the list is entry, it is
         * considered to match the token and etag.
         *
         * @param token The token to compare.
         * @param etag The etag to compare.
         *
         * @return <code>true</code> if all entries in the list matche the
         *      given tag and token.
         */ Modifier public BasicType boolean match FormalParameter ReferenceType String token FormalParameter ReferenceType String etag StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""match: Trying to match token="" MemberReference token Literal "", etag="" MemberReference etag debug ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType IfListEntry VariableDeclarator ile Cast ReferenceType IfListEntry MethodInvocation MemberReference i get IfStatement MethodInvocation ! ile MemberReference token MemberReference etag match BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""match: Entry "" MethodInvocation String MemberReference i valueOf Literal ""-"" MemberReference ile Literal "" does not match"" debug ReturnStatement Literal false End End ReturnStatement Literal true ReferenceType ArrayList InterfaceDeclaration Modifier private static /**
     * The <code>IfHeaderInterface</code> interface abstracts away the difference of
     * tagged and untagged <em>If</em> header lists. The single method provided
     * by this interface is to check whether a request may be applied to a
     * resource with given token and etag.
     */ IfHeaderInterface MethodDeclaration /**
         * Matches the resource, token, and etag against this
         * <code>IfHeaderInterface</code> instance.
         *
         * @param resource The resource to match this instance against. This
         *      must be absolute URI of the resource as defined in Section 3
         *      (URI Syntactic Components) of RFC 2396 Uniform Resource
         *      Identifiers (URI): Generic Syntax.
         * @param token The resource's lock token to match
         * @param etag The resource's etag to match
         *
         * @return <code>true</code> if the header matches the resource with
         *      token and etag, which means that the request is applicable
         *      to the resource according to the <em>If</em> header.
         */ Modifier public BasicType boolean matches FormalParameter ReferenceType String resource FormalParameter ReferenceType String token FormalParameter ReferenceType String etag ClassDeclaration Modifier private static /**
     * The <code>IfHeaderList</code> clss implements the {@link IfHeaderInterface}
     * interface to support untagged lists of {@link IfList}s. This class
     * implements the data container for the production :
     * <pre>
         Untagged = { ""("" IfList "")"" } .
     * </pre>
     */ IfHeaderList MethodDeclaration /**
         * Matches a list of {@link IfList}s against the token and etag. If any of
         * the {@link IfList}s matches, the method returns <code>true</code>.
         * On the other hand <code>false</code> is only returned if non of the
         * {@link IfList}s match.
         *
         * @param resource The resource to match, which is ignored by this
         *      implementation. A value of <code>null</code> is therefor
         *      acceptable.
         * @param token The token to compare.
         * @param etag The ETag value to compare.
         *
         * @return <code>True</code> if any of the {@link IfList}s matches the token
         *      and etag, else <code>false</code> is returned.
         */ Modifier public BasicType boolean matches FormalParameter ReferenceType String resource FormalParameter ReferenceType String token FormalParameter ReferenceType String etag StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""matches: Trying to match token="" MemberReference token Literal "", etag="" MemberReference etag debug ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType IfList VariableDeclarator il Cast ReferenceType IfList MethodInvocation MemberReference i get IfStatement MethodInvocation il MemberReference token MemberReference etag match BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""matches: Found match with "" MemberReference il debug ReturnStatement Literal true End End ReturnStatement Literal false ReferenceType ArrayList ReferenceType IfHeaderInterface ClassDeclaration Modifier private static /**
     * The <code>IfHeaderMap</code> clss implements the {@link IfHeaderInterface}
     * interface to support tagged lists of {@link IfList}s. This class
     * implements the data container for the production :
     * <pre>
         Tagged = { ""<"" Word "">"" ""("" IfList "")"" } .
     * </pre>
     */ IfHeaderMap MethodDeclaration /**
         * Matches the token and etag for the given resource. If the resource is
         * not mentioned in the header, a match is assumed and <code>true</code>
         * is returned in this case.
         *
         * @param resource The absolute URI of the resource for which to find
         *      a match.
         * @param token The token to compare.
         * @param etag The etag to compare.
         *
         * @return <code>true</code> if either no entry exists for the resource
         *      or if the entry for the resource matches the token and etag.
         */ Modifier public BasicType boolean matches FormalParameter ReferenceType String resource FormalParameter ReferenceType String token FormalParameter ReferenceType String etag StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""matches: Trying to match resource="" MemberReference resource Literal "", token="" MemberReference token Literal "","" MemberReference etag debug LocalVariableDeclaration ReferenceType IfHeaderList VariableDeclarator list Cast ReferenceType IfHeaderList MethodInvocation MemberReference resource get IfStatement BinaryOperation == MemberReference list Literal null BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""matches: No entry for tag "" MemberReference resource Literal "", assuming match"" debug ReturnStatement Literal true BlockStatement ReturnStatement MethodInvocation list MemberReference resource MemberReference token MemberReference etag matches End ReferenceType HashMap ReferenceType IfHeaderInterface ReferenceType Header",0
427,427,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.property Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.Namespace Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.w3c.dom.Element Import org.w3c.dom.Document Import java.util.HashMap ClassDeclaration Modifier public /**
 * The <code>DavPropertyName</code> class reflects a Webdav property name. It
 * holds together the actualy name of the property and its namespace.
 */ DavPropertyName FieldDeclaration /** internal 'cache' of created property names */ Modifier private final static ReferenceType HashMap VariableDeclarator cache ClassCreator ReferenceType HashMap FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator CREATIONDATE MethodInvocation DavPropertyName MemberReference PROPERTY_CREATIONDATE create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator DISPLAYNAME MethodInvocation DavPropertyName MemberReference PROPERTY_DISPLAYNAME create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator GETCONTENTLANGUAGE MethodInvocation DavPropertyName MemberReference PROPERTY_GETCONTENTLANGUAGE create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator GETCONTENTLENGTH MethodInvocation DavPropertyName MemberReference PROPERTY_GETCONTENTLENGTH create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator GETCONTENTTYPE MethodInvocation DavPropertyName MemberReference PROPERTY_GETCONTENTTYPE create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator GETETAG MethodInvocation DavPropertyName MemberReference PROPERTY_GETETAG create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator GETLASTMODIFIED MethodInvocation DavPropertyName MemberReference PROPERTY_GETLASTMODIFIED create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator LOCKDISCOVERY MethodInvocation DavPropertyName MemberReference PROPERTY_LOCKDISCOVERY create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator RESOURCETYPE MethodInvocation DavPropertyName MemberReference PROPERTY_RESOURCETYPE create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator SOURCE MethodInvocation DavPropertyName MemberReference PROPERTY_SOURCE create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator SUPPORTEDLOCK MethodInvocation DavPropertyName MemberReference PROPERTY_SUPPORTEDLOCK create FieldDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator ISCOLLECTION MethodInvocation DavPropertyName Literal ""iscollection"" create FieldDeclaration /** the name of the property */ Modifier private final ReferenceType String VariableDeclarator name FieldDeclaration /** the namespace of the property */ Modifier private final ReferenceType Namespace VariableDeclarator namespace MethodDeclaration /**
     * Creates a new <code>DavPropertyName</code> with the given name and
     * Namespace.
     *
     * @param name The local name of the new property name
     * @param namespace The namespace of the new property name
     *
     * @return The WebDAV property name
     */ Modifier public static synchronized ReferenceType DavPropertyName create FormalParameter ReferenceType String name FormalParameter ReferenceType Namespace namespace LocalVariableDeclaration ReferenceType HashMap VariableDeclarator map Cast ReferenceType HashMap MethodInvocation cache MemberReference namespace get IfStatement BinaryOperation == MemberReference map Literal null BlockStatement StatementExpression Assignment MemberReference map ClassCreator ReferenceType HashMap = StatementExpression MethodInvocation cache MemberReference namespace MemberReference map put End LocalVariableDeclaration ReferenceType DavPropertyName VariableDeclarator ret Cast ReferenceType DavPropertyName MethodInvocation map MemberReference name get IfStatement BinaryOperation == MemberReference ret Literal null BlockStatement IfStatement MethodInvocation namespace MemberReference NAMESPACE equals BlockStatement StatementExpression Assignment MemberReference namespace MemberReference NAMESPACE = End StatementExpression Assignment MemberReference ret ClassCreator ReferenceType DavPropertyName MemberReference name MemberReference namespace = StatementExpression MethodInvocation map MemberReference name MemberReference ret put End ReturnStatement MemberReference ret MethodDeclaration /**
     * Creates a new <code>DavPropertyName</code> with the given local name
     * and the default WebDAV {@link DavConstants#NAMESPACE namespace}.
     *
     * @param name The local name of the new property name
     *
     * @return The WebDAV property name
     */ Modifier public static synchronized ReferenceType DavPropertyName create FormalParameter ReferenceType String name ReturnStatement MethodInvocation MemberReference name MemberReference NAMESPACE create MethodDeclaration /**
     * Create a new <code>DavPropertyName</code> with the name and namespace
     * of the given Xml element.
     *
     * @param nameElement
     * @return <code>DavPropertyName</code> instance
     */ Modifier public static synchronized ReferenceType DavPropertyName createFromXml FormalParameter ReferenceType Element nameElement IfStatement BinaryOperation == MemberReference nameElement Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Cannot build DavPropertyName from a 'null' element."" End LocalVariableDeclaration ReferenceType String VariableDeclarator ns MethodInvocation nameElement getNamespaceURI IfStatement BinaryOperation == MemberReference ns Literal null BlockStatement ReturnStatement MethodInvocation MethodInvocation nameElement getLocalName MemberReference Namespace EMPTY_NAMESPACE create BlockStatement ReturnStatement MethodInvocation MethodInvocation nameElement getLocalName MethodInvocation Namespace MethodInvocation nameElement getPrefix MemberReference ns getNamespace create End ConstructorDeclaration Modifier private /**
     * Creates a new <code>DavPropertyName</code> with the given name and
     * Namespace.
     *
     * @param name The local name of the new property name
     * @param namespace The namespace of the new property name
     */ DavPropertyName FormalParameter ReferenceType String name FormalParameter ReferenceType Namespace namespace IfStatement BinaryOperation || BinaryOperation == MemberReference name Literal null BinaryOperation == MemberReference namespace Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Name and namespace must not be 'null' for a DavPropertyName."" End StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment This MemberReference namespace MemberReference namespace = MethodDeclaration /**
     * Return the name of this <code>DavPropertyName</code>.
     *
     * @return name
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * Return the namespace of this <code>DavPropertyName</code>.
     *
     * @return namespace
     */ Modifier public ReferenceType Namespace getNamespace ReturnStatement MemberReference namespace MethodDeclaration /**
     * Computes the hash code using this propertys name and namespace.
     *
     * @return the hash code
     */ Modifier public BasicType int hashCode ReturnStatement BinaryOperation % BinaryOperation + MethodInvocation name hashCode MethodInvocation namespace hashCode MemberReference Integer MAX_VALUE MethodDeclaration /**
     * Checks if this property has the same name and namespace as the
     * given one.
     *
     * @param obj the object to compare to
     *
     * @return <code>true</code> if the 2 objects are equal;
     *         <code>false</code> otherwise
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType DavPropertyName BlockStatement LocalVariableDeclaration ReferenceType DavPropertyName VariableDeclarator propName Cast ReferenceType DavPropertyName MemberReference obj ReturnStatement BinaryOperation && MethodInvocation name MemberReference propName name equals MethodInvocation namespace MemberReference propName namespace equals End ReturnStatement Literal false MethodDeclaration /**
     * Returns a string representation of this property suitable for debugging
     *
     * @return a human readable string representation
     */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation DomUtil MemberReference name MemberReference namespace getQualifiedName MethodDeclaration /**
     * Creates a JDOM element with the name and namespace of this
     * DavPropertyName.
     *
     * @return A JDOM Element.
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document ReturnStatement MethodInvocation DomUtil MemberReference document MemberReference name MemberReference namespace createElement ReferenceType DavConstants ReferenceType XmlSerializable",0
318,318,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core Import org.apache.jackrabbit.BaseException ClassDeclaration Modifier public /**
 * TransactionException is thrown when some operation inside the transaction
 * fails.
 */ TransactionException ConstructorDeclaration Modifier public /**
     * Creates an instance of this class. Takes a detail message as parameter.
     *
     * @param message message
     */ TransactionException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ConstructorDeclaration Modifier public /**
     * Creates an instance of this class. Takes a root throwable as parameter.
     *
     * @param rootCause root throwable
     */ TransactionException FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation MemberReference rootCause ConstructorDeclaration Modifier public /**
     * Creates an instance of this class. Takes a message and a root throwable
     * as parameter.
     *
     * @param message   message
     * @param rootCause root throwable
     */ TransactionException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation MemberReference message MemberReference rootCause ReferenceType BaseException",1
6,6,"CompilationUnit PackageDeclaration org.apache.jackrabbit.decorator Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.Session ClassDeclaration Modifier public /**
 * Node iterator that decorates all iterated nodes. This utility class is
 * used by the decorator layer to manage the decoration of all the nodes
 * returned by an underlying node iterator. This class delegates
 * all method calls to the underlying node iterator and uses the given
 * decorator factory to decorate all the returned node instances.
 */ DecoratingNodeIterator ConstructorDeclaration Modifier public /**
     * Creates a decorating node iterator.
     *
     * @param factory decorator factory
     * @param session decorated session
     * @param iterator underlying node iterator
     */ DecoratingNodeIterator FormalParameter ReferenceType DecoratorFactory factory FormalParameter ReferenceType Session session FormalParameter ReferenceType NodeIterator iterator StatementExpression SuperConstructorInvocation MemberReference factory MemberReference session MemberReference iterator MethodDeclaration /**
     * Decorates and returns the next node from the underlying node iterator.
     *
     * @return next node (decorated)
     * @see NodeIterator#nextNode()
     */ Modifier public ReferenceType Node nextNode ReturnStatement Cast ReferenceType Node MethodInvocation next ReferenceType DecoratingRangeIterator ReferenceType NodeIterator",0
532,532,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.rmi.RemoteException Import javax.jcr.RepositoryException Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.NodeTypeIterator Import javax.jcr.nodetype.NodeTypeManager Import org.apache.jackrabbit.rmi.remote.RemoteNodeTypeManager ClassDeclaration Modifier public /**
 * Local adapter for the JCR-RMI
 * {@link org.apache.jackrabbit.rmi.remote.RemoteNodeTypeManager RemoteNodeTypeManager}
 * inteface. This class makes a remote node type manager locally available
 * using the JCR {@link javax.jcr.nodetype.NodeTypeManager NodeTypeManager}
 * interface.
 *
 * @author Jukka Zitting
 * @see javax.jcr.nodetype.NodeTypeManager
 * @see org.apache.jackrabbit.rmi.remote.RemoteNodeTypeManager
 */ ClientNodeTypeManager FieldDeclaration /** The adapted remote node type manager. */ Modifier private ReferenceType RemoteNodeTypeManager VariableDeclarator remote ConstructorDeclaration Modifier public /**
     * Creates a local adapter for the given remote node type manager.
     *
     * @param remote remote node type manager
     * @param factory local adapter factory
     */ ClientNodeTypeManager FormalParameter ReferenceType RemoteNodeTypeManager remote FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeType getNodeType FormalParameter ReferenceType String name RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation remote MemberReference name getNodeType getNodeType getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeTypeIterator getAllNodeTypes RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation remote getAllNodeTypes getNodeTypeIterator getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeTypeIterator getPrimaryNodeTypes RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation remote getPrimaryNodeTypes getNodeTypeIterator getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeTypeIterator getMixinNodeTypes RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation remote getMixinNodeTypes getNodeTypeIterator getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex ReferenceType ClientObject ReferenceType NodeTypeManager",0
54,54,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Node Import javax.jcr.PropertyType Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Set a <code>Property</code> <code>Value</code> to the current working
 * <code>Node</code>
 */ SetProperty FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType SetProperty getLog MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator value Cast ReferenceType String MethodInvocation ctx This MemberReference valueKey get LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation ctx This MemberReference nameKey get LocalVariableDeclaration ReferenceType String VariableDeclarator propertyType Cast ReferenceType String MethodInvocation ctx This MemberReference typeKey get LocalVariableDeclaration ReferenceType String VariableDeclarator parent Cast ReferenceType String MethodInvocation ctx This MemberReference parentPathKey get LocalVariableDeclaration ReferenceType Node VariableDeclarator node MethodInvocation CommandHelper MemberReference ctx MemberReference parent getNode IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""setting property to node at "" MethodInvocation node getPath Literal "". property="" MemberReference name Literal "" value="" MemberReference value debug End IfStatement BinaryOperation == MemberReference propertyType Literal null BlockStatement StatementExpression MethodInvocation node MemberReference name MemberReference value setProperty BlockStatement StatementExpression MethodInvocation node MemberReference name MemberReference value MethodInvocation PropertyType MemberReference propertyType valueFromName setProperty End ReturnStatement Literal false ReferenceType AbstractSetProperty",0
74,74,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.observation Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.xml.ElementIterator Import org.apache.jackrabbit.webdav.xml.Namespace Import org.w3c.dom.Element Import org.w3c.dom.Document Import java.util.ArrayList Import java.util.List ClassDeclaration Modifier public /**
 * <code>SubscriptionInfo</code> class encapsulates the subscription info
 * that forms the request body of a SUBSCRIBE request.<br>
 * The following xml layout is defined for the subscription info:
 * <pre>
 * &lt;!ELEMENT subscriptioninfo ( eventtype, nolocal?, filter? ) &gt;
 * &lt;!ELEMENT eventtype ANY &gt;
 *
 * ANY defines any sequence of elements where at least one defines a valid
 * eventtype. Note that a single eventtype must not occur multiple times.

 * &lt;!ELEMENT nolocal EMPTY &gt;
 * &lt;!ELEMENT filter ANY &gt;
 *
 * ANY: any sequence of elements identifying a filter for event listening but
 * at least a single element.
 * </pre>
 * @see ObservationConstants#XML_SUBSCRIPTIONINFO
 */ SubscriptionInfo FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType SubscriptionInfo getLogger FieldDeclaration Modifier private final ReferenceType EventType VariableDeclarator eventTypes FieldDeclaration Modifier private final ReferenceType Filter VariableDeclarator filters FieldDeclaration Modifier private final BasicType boolean VariableDeclarator noLocal FieldDeclaration Modifier private final BasicType boolean VariableDeclarator isDeep FieldDeclaration Modifier private final BasicType long VariableDeclarator timeout ConstructorDeclaration Modifier public /**
     * Create a new <code>SubscriptionInfo</code>
     *
     * @param eventTypes
     * @param isDeep
     * @param timeout
     */ SubscriptionInfo FormalParameter ReferenceType EventType eventTypes FormalParameter BasicType boolean isDeep FormalParameter BasicType long timeout StatementExpression ExplicitConstructorInvocation MemberReference eventTypes Literal null Literal false MemberReference isDeep MemberReference timeout ConstructorDeclaration Modifier public /**
     * Create a new <code>SubscriptionInfo</code>
     *
     * @param eventTypes
     * @param filters
     * @param noLocal
     * @param isDeep
     * @param timeout
     */ SubscriptionInfo FormalParameter ReferenceType EventType eventTypes FormalParameter ReferenceType Filter filters FormalParameter BasicType boolean noLocal FormalParameter BasicType boolean isDeep FormalParameter BasicType long timeout IfStatement BinaryOperation || BinaryOperation == MemberReference eventTypes Literal null BinaryOperation == MemberReference eventTypes length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""'subscriptioninfo' must at least indicate a single event type."" End StatementExpression Assignment This MemberReference eventTypes MemberReference eventTypes = StatementExpression Assignment This MemberReference noLocal MemberReference noLocal = IfStatement BinaryOperation != MemberReference filters Literal null BlockStatement StatementExpression Assignment This MemberReference filters MemberReference filters = BlockStatement StatementExpression Assignment This MemberReference filters ArrayCreator ReferenceType Filter Literal 0 = End StatementExpression Assignment This MemberReference isDeep MemberReference isDeep = StatementExpression Assignment This MemberReference timeout MemberReference timeout = ConstructorDeclaration Modifier public /**
     * Create a new <code>SubscriptionInfo</code>
     *
     * @param reqInfo Xml element present in the request body.
     * @param timeout as defined by the {@link org.apache.jackrabbit.webdav.DavConstants#HEADER_TIMEOUT timeout header}.
     * @param isDeep as defined by the {@link org.apache.jackrabbit.webdav.DavConstants#HEADER_DEPTH depth header}.
     * @throws IllegalArgumentException if the reqInfo element does not contain the mandatory elements.
     */ SubscriptionInfo FormalParameter ReferenceType Element reqInfo FormalParameter BasicType long timeout FormalParameter BasicType boolean isDeep IfStatement MethodInvocation ! DomUtil MemberReference reqInfo MemberReference XML_SUBSCRIPTIONINFO MemberReference NAMESPACE matches BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Element with name 'subscriptioninfo' expected"" End LocalVariableDeclaration ReferenceType List VariableDeclarator typeList ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Element VariableDeclarator el MethodInvocation DomUtil MemberReference reqInfo MemberReference XML_EVENTTYPE MemberReference NAMESPACE getChildElement IfStatement BinaryOperation != MemberReference el Literal null BlockStatement LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator it MethodInvocation DomUtil MemberReference el getChildren WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator typeElem MethodInvocation it nextElement LocalVariableDeclaration ReferenceType EventType VariableDeclarator et ClassCreator ReferenceType SimpleEventType MethodInvocation typeElem getLocalName MethodInvocation DomUtil MemberReference typeElem getNamespace StatementExpression MethodInvocation typeList MemberReference et add End BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""'subscriptioninfo' must contain an 'eventtype' child element."" End IfStatement MethodInvocation typeList isEmpty BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""'subscriptioninfo' must at least indicate a single event type."" End StatementExpression Assignment MemberReference eventTypes Cast ReferenceType EventType MethodInvocation typeList ArrayCreator ReferenceType EventType MethodInvocation typeList size toArray = LocalVariableDeclaration ReferenceType List VariableDeclarator filters ClassCreator ReferenceType ArrayList StatementExpression Assignment MemberReference el MethodInvocation DomUtil MemberReference reqInfo MemberReference XML_FILTER MemberReference NAMESPACE getChildElement = IfStatement BinaryOperation != MemberReference el Literal null BlockStatement LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator it MethodInvocation DomUtil MemberReference el getChildren WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Filter VariableDeclarator f ClassCreator ReferenceType Filter MethodInvocation it nextElement StatementExpression MethodInvocation filters MemberReference f add End End StatementExpression Assignment This MemberReference filters Cast ReferenceType Filter MethodInvocation filters ArrayCreator ReferenceType Filter MethodInvocation filters size toArray = StatementExpression Assignment This MemberReference noLocal MethodInvocation DomUtil MemberReference reqInfo MemberReference XML_NOLOCAL MemberReference NAMESPACE hasChildElement = StatementExpression Assignment This MemberReference isDeep MemberReference isDeep = StatementExpression Assignment This MemberReference timeout MemberReference timeout = MethodDeclaration /**
     * Return array of event type names present in the subscription info.
     *
     * @return array of String defining the names of the events this subscription
     * should listen to.
     *
     */ Modifier public ReferenceType EventType getEventTypes ReturnStatement MemberReference eventTypes MethodDeclaration /**
     * Return all filters defined for this <code>SubscriptionInfo</code>
     *
     * @return all filters or an empty Filter array.
     */ Modifier public ReferenceType Filter getFilters ReturnStatement MemberReference filters MethodDeclaration /**
     * Return array of filters with the specified name.
     *
     * @param localName the filter elments must provide.
     * @param namespace
     * @return array containing the text of the filter elements with the given
     * name.
     */ Modifier public ReferenceType Filter getFilters FormalParameter ReferenceType String localName FormalParameter ReferenceType Namespace namespace LocalVariableDeclaration ReferenceType List VariableDeclarator l ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference filters length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation MemberReference localName MemberReference namespace isMatchingFilter filters BlockStatement StatementExpression MethodInvocation l MemberReference ArraySelector MemberReference i filters add End End ReturnStatement Cast ReferenceType Filter MethodInvocation l ArrayCreator ReferenceType Filter MethodInvocation l size toArray MethodDeclaration /**
     * Returns true if the {@link #XML_NOLOCAL} element is present in this
     * subscription info.
     *
     * @return if {@link #XML_NOLOCAL} element is present.
     */ Modifier public BasicType boolean isNoLocal ReturnStatement MemberReference noLocal MethodDeclaration /**
     * Returns true if the {@link org.apache.jackrabbit.webdav.DavConstants#HEADER_DEPTH
     * depths header} defined a depth other than '0'.
     *
     * @return true if this subscription info was created with <code>isDeep</code>
     * true.
     */ Modifier public BasicType boolean isDeep ReturnStatement MemberReference isDeep MethodDeclaration /**
     * Return the timeout as retrieved from the request.
     *
     * @return timeout.
     */ Modifier public BasicType long getTimeOut ReturnStatement MemberReference timeout MethodDeclaration /**
     * Xml representation of this <code>SubscriptionInfo</code>.
     *
     * @return Xml representation
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator subscrInfo MethodInvocation DomUtil MemberReference document MemberReference XML_SUBSCRIPTIONINFO MemberReference NAMESPACE createElement LocalVariableDeclaration ReferenceType Element VariableDeclarator eventType MethodInvocation DomUtil MemberReference subscrInfo MemberReference XML_EVENTTYPE MemberReference NAMESPACE addChildElement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference eventTypes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation eventType MemberReference ArraySelector MemberReference i MethodInvocation MemberReference document toXml eventTypes appendChild End IfStatement BinaryOperation > MemberReference filters length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator filter MethodInvocation DomUtil MemberReference subscrInfo MemberReference XML_FILTER MemberReference NAMESPACE addChildElement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference filters length MemberReference ++ i BlockStatement StatementExpression MethodInvocation filter MemberReference ArraySelector MemberReference i MethodInvocation MemberReference document toXml filters appendChild End End IfStatement MemberReference noLocal BlockStatement StatementExpression MethodInvocation DomUtil MemberReference subscrInfo MemberReference XML_NOLOCAL MemberReference NAMESPACE addChildElement End ReturnStatement MemberReference subscrInfo ClassDeclaration Modifier private /**
     * Simple EventType implementation that only consists of a qualified event
     * name.
     */ SimpleEventType FieldDeclaration Modifier private ReferenceType String VariableDeclarator localName FieldDeclaration Modifier private ReferenceType Namespace VariableDeclarator namespace ConstructorDeclaration SimpleEventType FormalParameter ReferenceType String localName FormalParameter ReferenceType Namespace namespace StatementExpression Assignment This MemberReference localName MemberReference localName = StatementExpression Assignment This MemberReference namespace MemberReference namespace = MethodDeclaration Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document ReturnStatement MethodInvocation DomUtil MemberReference document MemberReference localName MemberReference namespace createElement MethodDeclaration Modifier public ReferenceType String getName ReturnStatement MemberReference localName MethodDeclaration Modifier public ReferenceType Namespace getNamespace ReturnStatement MemberReference namespace ReferenceType EventType ReferenceType ObservationConstants ReferenceType XmlSerializable",0
621,621,,0
151,151,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query Import org.apache.jackrabbit.name.QName ClassDeclaration Modifier public /**
 * Implements a query node that defines a textsearch clause.
 */ TextsearchQueryNode FieldDeclaration /**
     * The query statement inside the textsearch clause
     */ Modifier private final ReferenceType String VariableDeclarator query FieldDeclaration /**
     * Limits the scope of this textsearch clause to properties with this name.
     * If <code>null</code> the scope of this textsearch clause is the fulltext
     * index of all properties of a node.
     */ Modifier private ReferenceType QName VariableDeclarator propertyName ConstructorDeclaration Modifier public /**
     * Creates a new <code>TextsearchQueryNode</code> with a <code>parent</code>
     * and a textsearch <code>query</code> statement. The scope of the query
     * is the fulltext index of the node, that contains all properties.
     *
     * @param parent the parent node of this query node.
     * @param query  the textsearch statement.
     */ TextsearchQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter ReferenceType String query StatementExpression ExplicitConstructorInvocation MemberReference parent MemberReference query Literal null ConstructorDeclaration Modifier public /**
     * Creates a new <code>TextsearchQueryNode</code> with a <code>parent</code>
     * and a textsearch <code>query</code> statement. The scope of the query
     * is property with name <code>propertyName</code>.
     *
     * @param parent the parent node of this query node.
     * @param query  the textsearch statement.
     * @param propertyName scope of the fulltext search.
     */ TextsearchQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter ReferenceType String query FormalParameter ReferenceType QName propertyName StatementExpression SuperConstructorInvocation MemberReference parent StatementExpression Assignment This MemberReference query MemberReference query = StatementExpression Assignment This MemberReference propertyName MemberReference propertyName = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Object accept FormalParameter ReferenceType QueryNodeVisitor visitor FormalParameter ReferenceType Object data ReturnStatement MethodInvocation visitor This MemberReference data visit MethodDeclaration /**
     * Returns the type of this node.
     *
     * @return the type of this node.
     */ Modifier public BasicType int getType ReturnStatement MemberReference QueryNode TYPE_TEXTSEARCH MethodDeclaration /**
     * Returns the textsearch statement.
     *
     * @return the textsearch statement.
     */ Modifier public ReferenceType String getQuery ReturnStatement MemberReference query MethodDeclaration /**
     * Returns a property name if the scope is limited to just a single property
     * or <code>null</code> if the scope is spawned across all properties of a
     * node.
     *
     * @return property name or <code>null</code>.
     */ Modifier public ReferenceType QName getPropertyName ReturnStatement MemberReference propertyName MethodDeclaration /**
     * Sets a new name as the search scope for this fulltext query.
     *
     * @param property the name of the property.
     */ Modifier public setPropertyName FormalParameter ReferenceType QName property StatementExpression Assignment This MemberReference propertyName MemberReference property = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType TextsearchQueryNode BlockStatement LocalVariableDeclaration ReferenceType TextsearchQueryNode VariableDeclarator other Cast ReferenceType TextsearchQueryNode MemberReference obj ReturnStatement BinaryOperation && TernaryExpression BinaryOperation == MemberReference query Literal null BinaryOperation == MemberReference other query Literal null MethodInvocation query MemberReference other query equals TernaryExpression BinaryOperation == MemberReference propertyName Literal null BinaryOperation == MemberReference other propertyName Literal null MethodInvocation propertyName MemberReference other propertyName equals End ReturnStatement Literal false ReferenceType QueryNode",0
125,125,"CompilationUnit PackageDeclaration org.apache.jackrabbit.state.nodetype Import javax.jcr.PropertyType ClassDeclaration Modifier public /**
 * Property definition state. Instances of this class are used to hold
 * and manage the internal state of property definitions.
 */ PropertyDefinitionState FieldDeclaration /** Required type of the defined property. */ Modifier private BasicType int VariableDeclarator requiredType MemberReference PropertyType UNDEFINED FieldDeclaration /** The Multiple property definition property. */ Modifier private BasicType boolean VariableDeclarator multiple Literal false MethodDeclaration /**
     * Returns the required type of the defined property.
     *
     * @return required property type
     */ Modifier public BasicType int getRequiredType ReturnStatement MemberReference requiredType MethodDeclaration /**
     * Sets the required type of the defined property.
     *
     * @param requiredType new required property type
     */ Modifier public setRequiredType FormalParameter BasicType int requiredType StatementExpression Assignment This MemberReference requiredType MemberReference requiredType = MethodDeclaration /**
     * Returns the value of the Multiple property definition property.
     *
     * @return Multiple property value
     */ Modifier public BasicType boolean isMultiple ReturnStatement MemberReference multiple MethodDeclaration /**
     * Sets the value of the Multiple property definition property.
     *
     * @param multiple new Multiple property value
     */ Modifier public setMultiple FormalParameter BasicType boolean multiple StatementExpression Assignment This MemberReference multiple MemberReference multiple = MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object object IfStatement BinaryOperation == This MemberReference object BlockStatement ReturnStatement Literal true IfStatement BinaryOperation instanceof MemberReference object ReferenceType PropertyDefinitionState BlockStatement LocalVariableDeclaration ReferenceType PropertyDefinitionState VariableDeclarator that Cast ReferenceType PropertyDefinitionState MemberReference object ReturnStatement BinaryOperation && BinaryOperation && SuperMethodInvocation MemberReference that equals BinaryOperation == This MemberReference multiple MemberReference that multiple BinaryOperation == This MemberReference requiredType MemberReference that requiredType BlockStatement ReturnStatement Literal false End End MethodDeclaration Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator code SuperMethodInvocation hashCode StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 17 TernaryExpression MemberReference multiple Literal 1 Literal 0 = StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 17 MemberReference requiredType = ReturnStatement MemberReference code ReferenceType ItemDefinitionState",1
79,79,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import java.util.Date ClassDeclaration /**
 * Implements <code>Date</code> &lt;-&gt; <code>String</code> conversions in
 * a way that the resulting <code>String</code> is suitable for indexing and
 * sorting.
 */ DateField ConstructorDeclaration Modifier private DateField FieldDeclaration /**
     * Date string length for about 3000 years
     */ Modifier private final static BasicType int VariableDeclarator DATE_LEN MethodInvocation Long MethodInvocation length BinaryOperation * BinaryOperation * BinaryOperation * BinaryOperation * BinaryOperation * Literal 1000L Literal 365 Literal 24 Literal 60 Literal 60 Literal 3000 MemberReference Character MAX_RADIX toString FieldDeclaration /**
     * Date shift of 2'000 years this allows dates back to 30 BC
     */ Modifier private final static BasicType long VariableDeclarator DATE_SHIFT BinaryOperation * BinaryOperation * BinaryOperation * BinaryOperation * BinaryOperation * Literal 1000L Literal 365 Literal 24 Literal 60 Literal 60 Literal 2000 FieldDeclaration /**
     * Returns '000000000' -> something around 30 BC
     */ Modifier public final static ReferenceType String VariableDeclarator MIN_DATE_STRING MethodInvocation MemberReference - DATE_SHIFT timeToString FieldDeclaration /**
     * Returns 'zzzzzzzzz' -> something around 3189
     */ Modifier public final static ReferenceType String VariableDeclarator MAX_DATE_STRING LocalVariableDeclaration BasicType char VariableDeclarator buffer ArrayCreator BasicType char MemberReference DATE_LEN LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation Character BinaryOperation - MemberReference Character MAX_RADIX Literal 1 MemberReference Character MAX_RADIX forDigit ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference DATE_LEN MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i buffer MemberReference c = End StatementExpression Assignment MemberReference MAX_DATE_STRING ClassCreator ReferenceType String MemberReference buffer = MethodDeclaration /**
     * Converts a Date to a string suitable for indexing. This method will throw
     * a RuntimeException if the date specified in the method argument is before
     * 30 BC or after 3189.
     */ Modifier public static ReferenceType String dateToString FormalParameter ReferenceType Date date ReturnStatement MethodInvocation MethodInvocation date getTime timeToString MethodDeclaration /**
     * Converts a millisecond time to a string suitable for indexing.
     * Supported date range is: 30 BC - 3189
     */ Modifier public static ReferenceType String timeToString FormalParameter BasicType long time StatementExpression Assignment MemberReference time MemberReference DATE_SHIFT += IfStatement BinaryOperation < MemberReference time Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""time too early"" End LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation Long MemberReference time MemberReference Character MAX_RADIX toString IfStatement BinaryOperation > MethodInvocation s length MemberReference DATE_LEN BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""time too late"" End IfStatement BinaryOperation < MethodInvocation s length MemberReference DATE_LEN BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer MemberReference s WhileStatement BinaryOperation < MethodInvocation sb length MemberReference DATE_LEN BlockStatement StatementExpression MethodInvocation sb Literal 0 Literal 0 insert End StatementExpression Assignment MemberReference s MethodInvocation sb toString = End ReturnStatement MemberReference s MethodDeclaration /**
     * Converts a string-encoded date into a millisecond time.
     */ Modifier public static BasicType long stringToTime FormalParameter ReferenceType String s ReturnStatement BinaryOperation - MethodInvocation Long MemberReference s MemberReference Character MAX_RADIX parseLong MemberReference DATE_SHIFT MethodDeclaration /**
     * Converts a string-encoded date into a Date object.
     */ Modifier public static ReferenceType Date stringToDate FormalParameter ReferenceType String s ReturnStatement ClassCreator ReferenceType Date MethodInvocation MemberReference s stringToTime",0
895,895,,0
735,735,,0
769,769,,1
467,467,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query Import org.apache.jackrabbit.core.fs.FileSystem Import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry Import org.apache.jackrabbit.core.state.ItemStateManager ClassDeclaration Modifier public /**
 * Acts as an argument for the {@link QueryHandler} to keep the interface
 * stable. This class provides access to the environment where the query
 * handler is running in.
 */ QueryHandlerContext FieldDeclaration /**
     * A <code>FileSystem</code> to store the search index
     */ Modifier private final ReferenceType FileSystem VariableDeclarator fs FieldDeclaration /**
     * The persistent <code>ItemStateManager</code>
     */ Modifier private final ReferenceType ItemStateManager VariableDeclarator stateMgr FieldDeclaration /**
     * The node type registry of the repository
     */ Modifier private final ReferenceType NodeTypeRegistry VariableDeclarator ntRegistry FieldDeclaration /**
     * The UUID of the root node.
     */ Modifier private ReferenceType String VariableDeclarator rootUUID FieldDeclaration /**
     * PropertyType registry to look up the type of a property with a given name.
     */ Modifier private final ReferenceType PropertyTypeRegistry VariableDeclarator propRegistry FieldDeclaration /**
     * The query handler for the jcr:system tree
     */ Modifier private final ReferenceType QueryHandler VariableDeclarator parentHandler FieldDeclaration /**
     * UUID of the node that should be excluded from indexing.
     */ Modifier private final ReferenceType String VariableDeclarator excludedNodeUUID ConstructorDeclaration Modifier public /**
     * Creates a new context instance.
     *
     * @param fs               a {@link FileSystem} this <code>QueryHandler</code>
     *                         may use to store its index. If no
     *                         <code>FileSystem</code> has been configured
     *                         <code>fs</code> is <code>null</code>.
     * @param stateMgr         provides persistent item states.
     * @param rootUUID         the uuid of the root node.
     * @param ntRegistry       the node type registry.
     * @param parentHandler    the parent query handler or <code>null</code> it
     *                         there is no parent handler.
     * @param excludedNodeUUID uuid of the node that should be excluded from
     *                         indexing. Any descendant of that node is also
     *                         excluded from indexing.
     */ QueryHandlerContext FormalParameter ReferenceType FileSystem fs FormalParameter ReferenceType ItemStateManager stateMgr FormalParameter ReferenceType String rootUUID FormalParameter ReferenceType NodeTypeRegistry ntRegistry FormalParameter ReferenceType QueryHandler parentHandler FormalParameter ReferenceType String excludedNodeUUID StatementExpression Assignment This MemberReference fs MemberReference fs = StatementExpression Assignment This MemberReference stateMgr MemberReference stateMgr = StatementExpression Assignment This MemberReference rootUUID MemberReference rootUUID = StatementExpression Assignment This MemberReference ntRegistry MemberReference ntRegistry = StatementExpression Assignment MemberReference propRegistry ClassCreator ReferenceType PropertyTypeRegistry MemberReference ntRegistry = StatementExpression Assignment This MemberReference parentHandler MemberReference parentHandler = StatementExpression Assignment This MemberReference excludedNodeUUID MemberReference excludedNodeUUID = StatementExpression MethodInvocation ntRegistry MemberReference propRegistry addListener MethodDeclaration /**
     * Returns the persistent {@link ItemStateManager}
     * of the workspace this <code>QueryHandler</code> is based on.
     *
     * @return the persistent <code>ItemStateManager</code> of the current
     *         workspace.
     */ Modifier public ReferenceType ItemStateManager getItemStateManager ReturnStatement MemberReference stateMgr MethodDeclaration /**
     * Returns the {@link FileSystem} instance this <code>QueryHandler</code>
     * may use to store its index. If no <code>FileSystem</code> has been
     * configured this method returns <code>null</code>.
     *
     * @return the <code>FileSystem</code> instance for this
     *         <code>QueryHandler</code>.
     */ Modifier public ReferenceType FileSystem getFileSystem ReturnStatement MemberReference fs MethodDeclaration /**
     * Returns the UUID of the root node.
     * @return the UUID of the root node.
     */ Modifier public ReferenceType String getRootUUID ReturnStatement MemberReference rootUUID MethodDeclaration /**
     * Returns the PropertyTypeRegistry for this repository.
     * @return the PropertyTypeRegistry for this repository.
     */ Modifier public ReferenceType PropertyTypeRegistry getPropertyTypeRegistry ReturnStatement MemberReference propRegistry MethodDeclaration /**
     * Returns the NodeTypeRegistry for this repository.
     * @return the NodeTypeRegistry for this repository.
     */ Modifier public ReferenceType NodeTypeRegistry getNodeTypeRegistry ReturnStatement MemberReference ntRegistry MethodDeclaration /**
     * Returns the parent query handler.
     * @return the parent query handler.
     */ Modifier public ReferenceType QueryHandler getParentHandler ReturnStatement MemberReference parentHandler MethodDeclaration /**
     * Returns the uuid of the node that should be excluded from indexing. Any
     * descendant of this node is also excluded from indexing.
     *
     * @return the uuid of the exluded node.
     */ Modifier public ReferenceType String getExcludedNodeUUID ReturnStatement MemberReference excludedNodeUUID MethodDeclaration /**
     * Destroys this context and releases resources.
     */ Modifier public destroy StatementExpression MethodInvocation ntRegistry MemberReference propRegistry removeListener",0
585,585,,1
354,354,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib Import javax.jcr.Item Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.servlet.jsp.JspException Import javax.servlet.jsp.tagext.TagSupport Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.taglib.template.TemplateEngine Import org.apache.jackrabbit.taglib.utils.JCRTagConstants Import org.apache.jackrabbit.taglib.utils.JCRTagUtils ClassDeclaration Modifier public /**
 * Displays Node and property values with the given template engine.
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce</a>
 */ OutTag FieldDeclaration Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType OutTag getLog FieldDeclaration /** Tag Name */ Modifier public static ReferenceType String VariableDeclarator TAG_NAME Literal ""out"" FieldDeclaration /**
     * Name of the scoped variable where the jcr session is stored. If not set
     * then JCRTagConstants.KEY_SESSION is used.
     */ Modifier private ReferenceType String VariableDeclarator session FieldDeclaration /**
     * expression or full path.
     */ Modifier private ReferenceType String VariableDeclarator item FieldDeclaration /**
     * Property of the given node
     */ Modifier private ReferenceType String VariableDeclarator property FieldDeclaration /**
     * Template engine id
     */ Modifier private ReferenceType String VariableDeclarator templateEngineID FieldDeclaration /**
     * Template name
     */ Modifier private ReferenceType String VariableDeclarator template ConstructorDeclaration Modifier public /**
     * Constructor
     */ OutTag StatementExpression SuperConstructorInvocation StatementExpression This MethodInvocation init MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType int doEndTag JspException TryStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator s MethodInvocation JCRTagUtils MemberReference TAG_NAME This MemberReference session This This MemberReference pageContext getSession LocalVariableDeclaration ReferenceType Item VariableDeclarator item MethodInvocation JCRTagUtils MemberReference TAG_NAME This MemberReference item This This MemberReference pageContext MemberReference s getItem IfStatement BinaryOperation != This MemberReference property Literal null BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator n Cast ReferenceType Node MemberReference item StatementExpression Assignment MemberReference item MethodInvocation n This MemberReference property getProperty = End LocalVariableDeclaration ReferenceType TemplateEngine VariableDeclarator engine Cast ReferenceType TemplateEngine MethodInvocation JCRTagUtils This MemberReference templateEngineID getBean StatementExpression MethodInvocation engine This MemberReference template setTemplate StatementExpression MethodInvocation engine This MemberReference pageContext MemberReference item write CatchClause CatchClauseParameter PathNotFoundException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType JspException MemberReference msg MemberReference e CatchClause CatchClauseParameter RepositoryException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType JspException MemberReference msg MemberReference e ReturnStatement MemberReference EVAL_PAGE MethodDeclaration /**
     * Sets the item
     * 
     * @param item
     */ Modifier public setItem FormalParameter ReferenceType String item StatementExpression Assignment This MemberReference item MemberReference item = MethodDeclaration /**
     * Sets the session
     * 
     * @param session
     */ Modifier public setSession FormalParameter ReferenceType String session StatementExpression Assignment This MemberReference session MemberReference session = MethodDeclaration /**
     * Init
     *  
     */ Modifier private init StatementExpression Assignment This MemberReference session BinaryOperation + BinaryOperation + Literal ""${"" MemberReference JCRTagConstants KEY_SESSION Literal ""}"" = StatementExpression Assignment This MemberReference item Literal null = StatementExpression Assignment This MemberReference property Literal null = StatementExpression Assignment This MemberReference templateEngineID Cast ReferenceType String MethodInvocation JCRTagUtils MemberReference JCRTagConstants JNDI_DEFAULT_TEMPLATE_ENGINE lookup = StatementExpression Assignment This MemberReference template Literal null = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public release StatementExpression SuperMethodInvocation release StatementExpression This MethodInvocation init MethodDeclaration /**
     * Sets the template
     * 
     * @param template
     */ Modifier public setTemplate FormalParameter ReferenceType String template StatementExpression Assignment This MemberReference template MemberReference template = MethodDeclaration /**
     * Sets the template engine ID
     * 
     * @param templateEngine
     */ Modifier public setTemplateEngineID FormalParameter ReferenceType String templateEngine StatementExpression Assignment This MemberReference templateEngineID MemberReference templateEngine = MethodDeclaration /**
     * Sets the property. This value can be set only when the item is a node.
     * 
     * @param property
     */ Modifier public setProperty FormalParameter ReferenceType String property StatementExpression Assignment This MemberReference property MemberReference property = ReferenceType TagSupport",0
170,170,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client.iterator Import javax.jcr.Session Import javax.jcr.version.Version Import javax.jcr.version.VersionIterator Import org.apache.jackrabbit.rmi.client.LocalAdapterFactory Import org.apache.jackrabbit.rmi.remote.RemoteIterator Import org.apache.jackrabbit.rmi.remote.RemoteVersion ClassDeclaration Modifier public /**
 * A ClientIterator for iterating remote versions.
 */ ClientVersionIterator FieldDeclaration /** The current session. */ Modifier private final ReferenceType Session VariableDeclarator session ConstructorDeclaration Modifier public /**
     * Creates a ClientVersionIterator instance.
     *
     * @param iterator      remote iterator
     * @param session       current session
     * @param factory       local adapter factory
     */ ClientVersionIterator FormalParameter ReferenceType RemoteIterator iterator FormalParameter ReferenceType Session session FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference iterator MemberReference factory StatementExpression Assignment This MemberReference session MemberReference session = MethodDeclaration /**
     * Creates and returns a local adapter for the given remote version.
     *
     * @param remote remote referecne
     * @return local adapter
     * @see ClientIterator#getObject(Object)
     */ Modifier protected ReferenceType Object getObject FormalParameter ReferenceType Object remote ReturnStatement MethodInvocation MethodInvocation MemberReference session Cast ReferenceType RemoteVersion MemberReference remote getVersion getFactory MethodDeclaration /**
     * Returns the next version in this iteration.
     *
     * @return next version
     * @see VersionIterator#nextVersion()
     */ Modifier public ReferenceType Version nextVersion ReturnStatement Cast ReferenceType Version MethodInvocation next ReferenceType ClientIterator ReferenceType VersionIterator",0
300,300,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.fs Import java.io.BufferedOutputStream Import java.io.BufferedWriter Import java.io.File Import java.io.FileOutputStream Import java.io.FileWriter Import java.io.IOException Import java.io.InputStream Import java.io.Reader Import java.io.StringReader Import javax.jcr.Node Import javax.jcr.Property Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Value Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandException Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Exports a <code>Property</code> <code>Value</code> of the current working
 * <code>Node<code> to the file system.
 */ ExportPropertyToFile FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ExportPropertyToFile getLog FieldDeclaration /** property name */ Modifier private ReferenceType String VariableDeclarator nameKey Literal ""name"" FieldDeclaration /** value index */ Modifier private ReferenceType String VariableDeclarator indexKey Literal ""index"" FieldDeclaration /** target file */ Modifier private ReferenceType String VariableDeclarator destFsPathKey Literal ""destFsPath"" FieldDeclaration /** overwrite the target file if necessary */ Modifier private ReferenceType String VariableDeclarator overwriteKey Literal ""overwrite"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation ctx This MemberReference nameKey get LocalVariableDeclaration ReferenceType Integer VariableDeclarator index Cast ReferenceType Integer MethodInvocation ctx This MemberReference indexKey get LocalVariableDeclaration ReferenceType String VariableDeclarator to Cast ReferenceType String MethodInvocation ctx This MemberReference destFsPathKey get LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation CommandHelper MemberReference ctx getCurrentNode IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""exporting property value from "" MethodInvocation n getPath Literal ""/"" MemberReference name Literal "" to the filesystem: "" MemberReference to debug End LocalVariableDeclaration ReferenceType Property VariableDeclarator p MethodInvocation n MemberReference name getProperty IfStatement MethodInvocation p MethodInvocation isMultiple getDefinition BlockStatement StatementExpression MethodInvocation MemberReference ctx MethodInvocation p ArraySelector MethodInvocation index intValue getValues MemberReference to exportValue BlockStatement StatementExpression MethodInvocation MemberReference ctx MethodInvocation p getValue MemberReference to exportValue End ReturnStatement Literal false MethodDeclaration /**
     * Export th given value to a File
     * @param ctx
     *        the <code>Context</code>
     * @param value
     *        the <code>Value</code>
     * @param to
     *        the target file system path
     * @throws CommandException
     *         if the <code>File</code> already exists
     * @throws IOException
     *         if an <code>IOException</code> occurs
     * @throws RepositoryException
     *         if the current working <code>Repository</code> throws an
     *         <code>Exception</code>
     */ Modifier private exportValue FormalParameter ReferenceType Context ctx FormalParameter ReferenceType Value value FormalParameter ReferenceType String to CommandException IOException RepositoryException LocalVariableDeclaration BasicType boolean VariableDeclarator overwrite MethodInvocation Boolean MethodInvocation booleanValue Cast ReferenceType String MethodInvocation ctx This MemberReference overwriteKey get valueOf LocalVariableDeclaration ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MemberReference to IfStatement BinaryOperation && MethodInvocation file exists MemberReference ! overwrite BlockStatement ThrowStatement ClassCreator ReferenceType CommandException Literal ""exception.file.exists"" ArrayCreator ReferenceType String ArrayInitializer MemberReference to End IfStatement MethodInvocation ! file exists BlockStatement StatementExpression MethodInvocation file createNewFile End IfStatement BinaryOperation == MethodInvocation value getType MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation value getStream LocalVariableDeclaration ReferenceType BufferedOutputStream VariableDeclarator out ClassCreator ReferenceType BufferedOutputStream ClassCreator ReferenceType FileOutputStream MemberReference file LocalVariableDeclaration BasicType int VariableDeclarator c WhileStatement BinaryOperation != Assignment MemberReference c MethodInvocation in read = Literal - 1 BlockStatement StatementExpression MethodInvocation out MemberReference c write End StatementExpression MethodInvocation in close StatementExpression MethodInvocation out flush StatementExpression MethodInvocation out close BlockStatement LocalVariableDeclaration ReferenceType Reader VariableDeclarator in ClassCreator ReferenceType StringReader MethodInvocation value getString LocalVariableDeclaration ReferenceType BufferedWriter VariableDeclarator out ClassCreator ReferenceType BufferedWriter ClassCreator ReferenceType FileWriter MemberReference file LocalVariableDeclaration BasicType int VariableDeclarator c WhileStatement BinaryOperation != Assignment MemberReference c MethodInvocation in read = Literal - 1 BlockStatement StatementExpression MethodInvocation out MemberReference c write End StatementExpression MethodInvocation in close StatementExpression MethodInvocation out flush StatementExpression MethodInvocation out close End MethodDeclaration /**
     * @return the index key
     */ Modifier public ReferenceType String getIndexKey ReturnStatement MemberReference indexKey MethodDeclaration /**
     * @param indexKey
     *        the index key to set
     */ Modifier public setIndexKey FormalParameter ReferenceType String indexKey StatementExpression Assignment This MemberReference indexKey MemberReference indexKey = MethodDeclaration /**
     * @return the name key
     */ Modifier public ReferenceType String getNameKey ReturnStatement MemberReference nameKey MethodDeclaration /**
     * @param nameKey
     *        the name key to set
     */ Modifier public setNameKey FormalParameter ReferenceType String nameKey StatementExpression Assignment This MemberReference nameKey MemberReference nameKey = MethodDeclaration /**
     * @return the overwrite key
     */ Modifier public ReferenceType String getOverwriteKey ReturnStatement MemberReference overwriteKey MethodDeclaration /**
     * @param overwriteKey
     *        the overwrite key to set
     */ Modifier public setOverwriteKey FormalParameter ReferenceType String overwriteKey StatementExpression Assignment This MemberReference overwriteKey MemberReference overwriteKey = MethodDeclaration /**
     * @return the destination file system path key
     */ Modifier public ReferenceType String getDestFsPathKey ReturnStatement MemberReference destFsPathKey MethodDeclaration /**
     * @param destFsPathKey
     *        the destination file system path key to set
     */ Modifier public setDestFsPathKey FormalParameter ReferenceType String destFsPathKey StatementExpression Assignment This MemberReference destFsPathKey MemberReference destFsPathKey = ReferenceType Command",1
137,137,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib.traverser Import java.util.Collection Import java.util.Iterator Import javax.jcr.AccessDeniedException Import javax.jcr.ItemNotFoundException Import javax.jcr.Node Import javax.jcr.RepositoryException Import org.apache.commons.collections.IteratorUtils Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory ClassDeclaration Modifier public /**
 * This Traverser collects the children of the ancestors in the path from the
 * root node to any of the target nodes. <br>
 * The parameter must be a Collection or Iterator containing the target nodes.
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ ExpandedNodesTraverser FieldDeclaration Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ExpandedNodesTraverser getLog MethodDeclaration /**
     * Preorder strategy recusively only for parent Nodes.
     * 
     * @param node
     * @throws RepositoryException
     */ Modifier private preorder FormalParameter ReferenceType Node myNode RepositoryException StatementExpression MethodInvocation MemberReference myNode visit IfStatement BinaryOperation && This ! MethodInvocation MemberReference myNode isAncestor This ! MethodInvocation getTarget MethodInvocation MemberReference myNode contains BlockStatement ReturnStatement End TryStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter This MethodInvocation MemberReference myNode getChildren WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression This MethodInvocation Cast ReferenceType Node MethodInvocation iter next preorder End CatchClause CatchClauseParameter DepthExceededException e StatementExpression MethodInvocation log Literal ""Depth should never be exceeded in this traverser."" MemberReference e error MethodDeclaration /**
     * @inheritDoc
     */ Modifier protected internalTraverse RepositoryException StatementExpression Assignment This MemberReference depth MemberReference Integer MAX_VALUE = StatementExpression This MethodInvocation MemberReference node preorder MethodDeclaration /**
     * Sets the parameter. <br>
     * It only accepts Collection or Iterator instances.<br>
     * The path (String) or a Node instance;
     * 
     * @throws IllegalArgumentException
     */ Modifier public setParameter FormalParameter ReferenceType Object param IfStatement BinaryOperation || BinaryOperation == MemberReference param Literal null BinaryOperation && BinaryOperation instanceof MemberReference param ReferenceType Collection BinaryOperation instanceof MemberReference param ReferenceType Iterator BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""The parameter is not a Collection or Iterator. "" MemberReference param End IfStatement BinaryOperation instanceof MemberReference param ReferenceType Collection BlockStatement StatementExpression Assignment This MemberReference parameter Cast ReferenceType Collection MemberReference param = IfStatement BinaryOperation instanceof MemberReference param ReferenceType Iterator BlockStatement StatementExpression Assignment This MemberReference parameter MethodInvocation IteratorUtils Cast ReferenceType Iterator MemberReference param toList = End End MethodDeclaration /**
     * Checks if the node is ancestor of any af the target nodes
     * 
     * @param ancestor
     * @return @throws
     *         RepositoryException
     * @throws AccessDeniedException
     * @throws ItemNotFoundException
     */ Modifier private BasicType boolean isAncestor FormalParameter ReferenceType Node ancestor ItemNotFoundException AccessDeniedException RepositoryException LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter This MethodInvocation getTarget MethodInvocation iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator target Cast ReferenceType Node MethodInvocation iter next IfStatement This MethodInvocation MemberReference ancestor MemberReference target isAncestor BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * Checks if the node is ancestor of the given target node.
     * 
     * @param ancestor
     * @param target
     * @return @throws
     *         RepositoryException
     * @throws AccessDeniedException
     * @throws ItemNotFoundException
     */ Modifier private BasicType boolean isAncestor FormalParameter ReferenceType Node ancestor FormalParameter ReferenceType Node target ItemNotFoundException AccessDeniedException RepositoryException IfStatement BinaryOperation >= MethodInvocation ancestor getDepth MethodInvocation target getDepth BlockStatement ReturnStatement Literal false End ReturnStatement MethodInvocation target MethodInvocation MemberReference ancestor isSame MethodInvocation ancestor getDepth getAncestor MethodDeclaration /**
     * Get the collection of target nodes.
     * 
     * @return
     */ Modifier private ReferenceType Collection getTarget ReturnStatement Cast ReferenceType Collection This MemberReference parameter ReferenceType AbstractTraverser",0
30,30,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.jackrabbit.core.ItemId Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.util.Dumpable Import org.apache.jackrabbit.name.QName Import org.apache.log4j.Logger Import java.io.PrintStream Import java.util.ArrayList Import java.util.Collection Import java.util.Iterator ClassDeclaration /**
 * <code>TransientItemStateManager</code> ...
 */ TransientItemStateManager FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType TransientItemStateManager getLogger FieldDeclaration /**
     * map of those states that have been removed transiently
     */ Modifier private final ReferenceType ItemStateStore VariableDeclarator atticStore FieldDeclaration /**
     * map of new or modified transient states
     */ Modifier private final ReferenceType ItemStateStore VariableDeclarator transientStore FieldDeclaration /**
     * ItemStateManager view of the states in the attic; lazily instantiated
     * in {@link #getAttic()}
     */ Modifier private ReferenceType AtticItemStateManager VariableDeclarator attic ConstructorDeclaration /**
     * Creates a new <code>TransientItemStateManager</code> instance.
     */ TransientItemStateManager StatementExpression Assignment MemberReference transientStore ClassCreator ReferenceType ItemStateMap = StatementExpression Assignment MemberReference atticStore ClassCreator ReferenceType ItemStateMap = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public dump FormalParameter ReferenceType PrintStream ps StatementExpression MethodInvocation ps BinaryOperation + BinaryOperation + Literal ""TransientItemStateManager ("" This Literal "")"" println StatementExpression MethodInvocation ps println StatementExpression MethodInvocation ps Literal ""[transient] "" print IfStatement BinaryOperation instanceof MemberReference transientStore ReferenceType Dumpable BlockStatement StatementExpression Cast ReferenceType Dumpable MemberReference transientStore BlockStatement StatementExpression MethodInvocation ps MethodInvocation transientStore toString println End StatementExpression MethodInvocation ps println StatementExpression MethodInvocation ps Literal ""[attic]     "" print IfStatement BinaryOperation instanceof MemberReference atticStore ReferenceType Dumpable BlockStatement StatementExpression Cast ReferenceType Dumpable MemberReference atticStore BlockStatement StatementExpression MethodInvocation ps MethodInvocation atticStore toString println End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType ItemState getItemState FormalParameter ReferenceType ItemId id NoSuchItemStateException ItemStateException LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation transientStore MemberReference id get IfStatement BinaryOperation != MemberReference state Literal null BlockStatement ReturnStatement MemberReference state BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException MethodInvocation id toString End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasItemState FormalParameter ReferenceType ItemId id ReturnStatement MethodInvocation transientStore MemberReference id contains MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeReferences getNodeReferences FormalParameter ReferenceType NodeReferencesId id NoSuchItemStateException ItemStateException ThrowStatement ClassCreator ReferenceType ItemStateException Literal ""getNodeReferences() not implemented"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasNodeReferences FormalParameter ReferenceType NodeReferencesId id ReturnStatement Literal false MethodDeclaration /**
     * @return
     */ BasicType boolean hasAnyItemStates ReturnStatement MethodInvocation ! transientStore isEmpty MethodDeclaration /**
     * @return
     */ BasicType boolean hasAnyItemStatesInAttic ReturnStatement MethodInvocation ! atticStore isEmpty MethodDeclaration /**
     * @return
     */ BasicType int getEntriesCount ReturnStatement MethodInvocation transientStore size MethodDeclaration /**
     * @return
     */ BasicType int getEntriesInAtticCount ReturnStatement MethodInvocation atticStore size MethodDeclaration /**
     * @return
     */ ReferenceType Iterator getEntries ReturnStatement MethodInvocation transientStore MethodInvocation iterator values MethodDeclaration /**
     * @return
     */ ReferenceType Iterator getEntriesInAttic ReturnStatement MethodInvocation atticStore MethodInvocation iterator values MethodDeclaration /**
     * @param uuid
     * @param nodeTypeName
     * @param parentUUID
     * @param initialStatus
     * @return
     * @throws ItemStateException
     */ ReferenceType NodeState createNodeState FormalParameter ReferenceType String uuid FormalParameter ReferenceType QName nodeTypeName FormalParameter ReferenceType String parentUUID FormalParameter BasicType int initialStatus ItemStateException LocalVariableDeclaration ReferenceType NodeId VariableDeclarator id ClassCreator ReferenceType NodeId MemberReference uuid SynchronizedStatement MemberReference transientStore IfStatement MethodInvocation transientStore MemberReference id contains BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""there's already a node state instance with id "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator state ClassCreator ReferenceType NodeState MemberReference uuid MemberReference nodeTypeName MemberReference parentUUID MemberReference initialStatus Literal true StatementExpression MethodInvocation transientStore MemberReference state put ReturnStatement MemberReference state MethodDeclaration /**
     * @param overlayedState
     * @param initialStatus
     * @return
     * @throws ItemStateException
     */ ReferenceType NodeState createNodeState FormalParameter ReferenceType NodeState overlayedState FormalParameter BasicType int initialStatus ItemStateException LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id MethodInvocation overlayedState getId SynchronizedStatement MemberReference transientStore IfStatement MethodInvocation transientStore MemberReference id contains BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""there's already a node state instance with id "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator state ClassCreator ReferenceType NodeState MemberReference overlayedState MemberReference initialStatus Literal true StatementExpression MethodInvocation transientStore MemberReference state put ReturnStatement MemberReference state MethodDeclaration /**
     * @param parentUUID
     * @param propName
     * @param initialStatus
     * @return
     * @throws ItemStateException
     */ ReferenceType PropertyState createPropertyState FormalParameter ReferenceType String parentUUID FormalParameter ReferenceType QName propName FormalParameter BasicType int initialStatus ItemStateException LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator id ClassCreator ReferenceType PropertyId MemberReference parentUUID MemberReference propName SynchronizedStatement MemberReference transientStore IfStatement MethodInvocation transientStore MemberReference id contains BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""there's already a property state instance with id "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator state ClassCreator ReferenceType PropertyState MemberReference propName MemberReference parentUUID MemberReference initialStatus Literal true StatementExpression MethodInvocation transientStore MemberReference state put ReturnStatement MemberReference state MethodDeclaration /**
     * @param overlayedState
     * @param initialStatus
     * @return
     * @throws ItemStateException
     */ ReferenceType PropertyState createPropertyState FormalParameter ReferenceType PropertyState overlayedState FormalParameter BasicType int initialStatus ItemStateException LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator id ClassCreator ReferenceType PropertyId MethodInvocation overlayedState getParentUUID MethodInvocation overlayedState getName SynchronizedStatement MemberReference transientStore IfStatement MethodInvocation transientStore MemberReference id contains BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""there's already a property state instance with id "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator state ClassCreator ReferenceType PropertyState MemberReference overlayedState MemberReference initialStatus Literal true StatementExpression MethodInvocation transientStore MemberReference state put ReturnStatement MemberReference state MethodDeclaration /**
     * Disposes the specified instance, i.e. discards it and removes it from
     * the map.
     *
     * @param state the <code>ItemState</code> instance that should be disposed
     * @see ItemState#discard()
     */ disposeItemState FormalParameter ReferenceType ItemState state StatementExpression MethodInvocation state discard StatementExpression MethodInvocation transientStore MethodInvocation state getId remove StatementExpression MethodInvocation state onDisposed MethodDeclaration /**
     * Transfers the specified instance from the 'active' map to the attic.
     *
     * @param state the <code>ItemState</code> instance that should be moved to
     *              the attic
     */ moveItemStateToAttic FormalParameter ReferenceType ItemState state StatementExpression MethodInvocation transientStore MethodInvocation state getId remove StatementExpression MethodInvocation atticStore MemberReference state put MethodDeclaration /**
     * Disposes the specified instance in the attic, i.e. discards it and
     * removes it from the attic.
     *
     * @param state the <code>ItemState</code> instance that should be disposed
     * @see ItemState#discard()
     */ disposeItemStateInAttic FormalParameter ReferenceType ItemState state StatementExpression MethodInvocation state discard StatementExpression MethodInvocation atticStore MethodInvocation state getId remove StatementExpression MethodInvocation state onDisposed MethodDeclaration /**
     * Disposes all transient item states in the cache and in the attic.
     */ disposeAllItemStates LocalVariableDeclaration ReferenceType Collection VariableDeclarator tmp ClassCreator ReferenceType ArrayList MethodInvocation transientStore values LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation tmp iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation iter next StatementExpression MethodInvocation MemberReference state disposeItemState End StatementExpression Assignment MemberReference tmp ClassCreator ReferenceType ArrayList MethodInvocation atticStore values = StatementExpression Assignment MemberReference iter MethodInvocation tmp iterator = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation iter next StatementExpression MethodInvocation MemberReference state disposeItemStateInAttic End MethodDeclaration /**
     * Return the attic item state provider that holds all items
     * moved into the attic.
     *
     * @return attic
     */ ReferenceType ItemStateManager getAttic IfStatement BinaryOperation == MemberReference attic Literal null BlockStatement StatementExpression Assignment MemberReference attic ClassCreator ReferenceType AtticItemStateManager = End ReturnStatement MemberReference attic ClassDeclaration Modifier private /**
     * ItemStateManager view of the states in the attic
     *
     * @see TransientItemStateManager#getAttic
     */ AtticItemStateManager ConstructorDeclaration AtticItemStateManager MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType ItemState getItemState FormalParameter ReferenceType ItemId id NoSuchItemStateException ItemStateException LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation atticStore MemberReference id get IfStatement BinaryOperation != MemberReference state Literal null BlockStatement ReturnStatement MemberReference state BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException MethodInvocation id toString End MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean hasItemState FormalParameter ReferenceType ItemId id ReturnStatement MethodInvocation atticStore MemberReference id contains MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType NodeReferences getNodeReferences FormalParameter ReferenceType NodeReferencesId id NoSuchItemStateException ItemStateException ThrowStatement ClassCreator ReferenceType ItemStateException Literal ""getNodeReferences() not implemented"" MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean hasNodeReferences FormalParameter ReferenceType NodeReferencesId id ReturnStatement Literal false ReferenceType ItemStateManager ReferenceType ItemStateManager ReferenceType Dumpable",0
701,701,,1
222,222,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core ClassDeclaration Modifier public /**
 * Node identifier. An instance of this class identifies a node using its UUID.
 * Once created a node identifier instance is immutable.
 */ NodeId FieldDeclaration /** Serial version UID of this class. */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal 7026219091360041109L FieldDeclaration /** UUID of the identified node */ Modifier private final ReferenceType String VariableDeclarator uuid ConstructorDeclaration Modifier public /**
     * Creates a node identifier instance for the identified node.
     *
     * @param uuid node UUID
     */ NodeId FormalParameter ReferenceType String uuid IfStatement BinaryOperation == MemberReference uuid Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""uuid can not be null"" End StatementExpression Assignment This MemberReference uuid MemberReference uuid = MethodDeclaration /**
     * Returns <code>true</code> as this class represents a node identifier,
     * not a property identifier.
     *
     * @return always <code>true</code>
     * @see ItemId#denotesNode()
     */ Modifier public BasicType boolean denotesNode ReturnStatement Literal true MethodDeclaration /**
     * Returns the UUID of the identified node.
     *
     * @return node UUID
     */ Modifier public ReferenceType String getUUID ReturnStatement MemberReference uuid MethodDeclaration /**
     * Returns a <code>NodeId</code> holding the value of the specified
     * string. The string must be in the format returned by the
     * <code>NodeId.toString()</code> method.
     *
     * @param s a <code>String</code> containing the <code>NodeId</code>
     *          representation to be parsed.
     * @return the <code>NodeId</code> represented by the argument
     * @throws IllegalArgumentException if the specified string can not be parsed
     *                                  as a <code>NodeId</code>.
     * @see #toString()
     */ Modifier public static ReferenceType NodeId valueOf FormalParameter ReferenceType String s IllegalArgumentException IfStatement BinaryOperation == MemberReference s Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""invalid NodeId literal"" End ReturnStatement ClassCreator ReferenceType NodeId MemberReference s MethodDeclaration /**
     * Compares node identifiers for equality.
     *
     * @param obj other object
     * @return <code>true</code> if the given object is a node identifier
     *         instance that identifies the same node as this identifier,
     *         <code>false</code> otherwise
     * @see Object#equals(Object)
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType NodeId BlockStatement LocalVariableDeclaration ReferenceType NodeId VariableDeclarator other Cast ReferenceType NodeId MemberReference obj ReturnStatement MethodInvocation uuid MemberReference other uuid equals End ReturnStatement Literal false MethodDeclaration /**
     * Returns the node UUID.
     *
     * @return node UUID
     * @see Object#toString()
     */ Modifier public ReferenceType String toString ReturnStatement MemberReference uuid MethodDeclaration /**
     * Returns the hash code of the node UUID. The computed hash code
     * is memorized for better performance.
     *
     * @return hash code
     * @see Object#hashCode()
     */ Modifier public BasicType int hashCode IfStatement BinaryOperation == MemberReference hash Literal 0 BlockStatement StatementExpression Assignment MemberReference hash MethodInvocation uuid hashCode = End ReturnStatement MemberReference hash ReferenceType ItemId",1
650,650,,0
195,195,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.mixin Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Add a mixin to the given <code>Node</code>
 */ AddMixin FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType AddMixin getLog FieldDeclaration /** node path */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" FieldDeclaration /** mixin name */ Modifier private ReferenceType String VariableDeclarator mixinKey Literal ""mixin"" MethodDeclaration /**
     * @return Returns the mixinNameKey.
     */ Modifier public ReferenceType String getMixinKey ReturnStatement MemberReference mixinKey MethodDeclaration /**
     * @param mixinNameKey
     *        The mixinNameKey to set.
     */ Modifier public setMixinKey FormalParameter ReferenceType String mixinNameKey StatementExpression Assignment This MemberReference mixinKey MemberReference mixinNameKey = MethodDeclaration /**
     * @return Returns the pathKey.
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param pathKey
     *        The pathKey to set.
     */ Modifier public setPathKey FormalParameter ReferenceType String pathKey StatementExpression Assignment This MemberReference pathKey MemberReference pathKey = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator mixin Cast ReferenceType String MethodInvocation ctx This MemberReference mixinKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""adding mixin "" MemberReference mixin Literal "" to node "" MemberReference path debug End StatementExpression MethodInvocation CommandHelper MethodInvocation MemberReference mixin addMixin MemberReference ctx MemberReference path getNode ReturnStatement Literal false ReferenceType Command",0
746,746,,0
812,812,,0
232,232,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context ClassDeclaration Modifier public /**
 * Lists the registered namespaces.
 */ LsNamespaces MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType Command",0
891,891,,0
525,525,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavResource Import org.apache.jackrabbit.webdav.DavResourceFactory Import org.apache.jackrabbit.webdav.DavResourceIterator Import org.apache.jackrabbit.webdav.DavResourceIteratorImpl Import org.apache.jackrabbit.webdav.DavResourceLocator Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.io.InputContext Import org.apache.jackrabbit.webdav.jcr.version.report.NodeTypesReport Import org.apache.jackrabbit.webdav.jcr.version.report.RegisteredNamespacesReport Import org.apache.jackrabbit.webdav.jcr.version.report.RepositoryDescriptorsReport Import org.apache.jackrabbit.webdav.version.report.ReportType Import org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty Import org.apache.log4j.Logger Import javax.jcr.RepositoryException Import javax.jcr.Session Import java.util.ArrayList Import java.util.Date Import java.util.List ClassDeclaration Modifier public /**
 * <code>RootCollection</code> represent the WebDAV root resource that does not
 * represent any repository item. A call to getMembers() returns a
 * <code>DavResourceIterator</code> containing only <code>RootItemCollection</code>
 * resources, thus revealing the names of the accessable workspaces.
 */ RootCollection FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType RootCollection getLogger ConstructorDeclaration Modifier protected /**
     * Create a new <code>RootCollection</code>.
     *
     * @param locator
     * @param session
     */ RootCollection FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType DavSession session FormalParameter ReferenceType DavResourceFactory factory StatementExpression SuperConstructorInvocation MemberReference locator MemberReference session MemberReference factory StatementExpression MethodInvocation ClassCreator MethodInvocation getTime ReferenceType Date setModificationTime StatementExpression MethodInvocation initLockSupport StatementExpression MethodInvocation initSupportedReports MethodDeclaration /**
     * Returns a string listing the complieance classes for this resource as it
     * is required for the DAV response header.
     *
     * @return string listing the compliance classes.
     * @see org.apache.jackrabbit.webdav.DavResource#getComplianceClass()
     */ Modifier public ReferenceType String getComplianceClass ReturnStatement MemberReference DavResource COMPLIANCE_CLASS MethodDeclaration /**
     * Returns a string listing the METHODS for this resource as it
     * is required for the ""Allow"" response header.
     *
     * @return string listing the METHODS allowed
     * @see org.apache.jackrabbit.webdav.DavResource#getSupportedMethods()
     */ Modifier public ReferenceType String getSupportedMethods LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer MemberReference DavResource METHODS ReturnStatement MethodInvocation sb toString MethodDeclaration /**
     * Returns true
     *
     * @return true
     * @see org.apache.jackrabbit.webdav.DavResource#exists()
     */ Modifier public BasicType boolean exists ReturnStatement Literal true MethodDeclaration /**
     * Returns true
     *
     * @return true
     * @see org.apache.jackrabbit.webdav.DavResource#isCollection()
     */ Modifier public BasicType boolean isCollection ReturnStatement Literal true MethodDeclaration /**
     * Returns an empty string.
     *
     * @return empty string
     * @see org.apache.jackrabbit.webdav.DavResource#getDisplayName()
     */ Modifier public ReferenceType String getDisplayName ReturnStatement Literal """" MethodDeclaration /**
     * Always returns <code>null</code>
     *
     * @return <code>null</code> for the root resource is not internal member
     * of any resource.
     * @see org.apache.jackrabbit.webdav.DavResource#getCollection()
     */ Modifier public ReferenceType DavResource getCollection ReturnStatement Literal null MethodDeclaration /**
     * Throws exception: 403 Forbidden.
     * @see DavResource#addMember(DavResource, InputContext)
     */ Modifier public addMember FormalParameter ReferenceType DavResource resource FormalParameter ReferenceType InputContext inputContext DavException ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_FORBIDDEN MethodDeclaration /**
     * Returns an iterator over the member resources, which are all
     * <code>RootItemCollection</code> resources, revealing
     * the names of all available workspaces.
     *
     * @return members of this collection
     * @see org.apache.jackrabbit.webdav.DavResource#getMembers()
     */ Modifier public ReferenceType DavResourceIterator getMembers LocalVariableDeclaration ReferenceType List VariableDeclarator memberList ClassCreator ReferenceType ArrayList TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator wsNames MethodInvocation MethodInvocation getRepositorySession MethodInvocation getWorkspace MethodInvocation getAccessibleWorkspaceNames getSession ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference wsNames length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator childLoc MethodInvocation MethodInvocation getFactory MethodInvocation MethodInvocation MethodInvocation getPrefix getLocator BinaryOperation + Literal ""/"" MemberReference ArraySelector MemberReference i wsNames MemberReference ItemResourceConstants ROOT_ITEM_PATH createResourceLocator getLocator StatementExpression MethodInvocation memberList MethodInvocation MemberReference childLoc createResourceFromLocator add End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage error CatchClause CatchClauseParameter DavException e StatementExpression MethodInvocation log MethodInvocation e getMessage error ReturnStatement ClassCreator ReferenceType DavResourceIteratorImpl MemberReference memberList MethodDeclaration /**
     * Throws exception: 403 Forbidden.
     * @see DavResource#removeMember(org.apache.jackrabbit.webdav.DavResource)
     */ Modifier public removeMember FormalParameter ReferenceType DavResource member DavException ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_FORBIDDEN MethodDeclaration /**
     * @see AbstractResource#initLockSupport()
     */ Modifier protected initLockSupport MethodDeclaration /**
     * @see AbstractResource#initSupportedReports()
     */ Modifier protected initSupportedReports StatementExpression Assignment MemberReference supportedReports ClassCreator ReferenceType SupportedReportSetProperty ArrayCreator ReferenceType ReportType ArrayInitializer MemberReference ReportType EXPAND_PROPERTY MemberReference NodeTypesReport NODETYPES_REPORT MemberReference RegisteredNamespacesReport REGISTERED_NAMESPACES_REPORT MemberReference RepositoryDescriptorsReport REPOSITORY_DESCRIPTORS_REPORT = MethodDeclaration /**
     * Since the root resource does not represent a repository item and therefore
     * is not member of a workspace resource, the workspace href is calculated
     * from the workspace name retrieved from the underlying repository session.
     *
     * @return workspace href build from workspace name.
     * @see AbstractResource#getWorkspaceHref()
     */ Modifier protected ReferenceType String getWorkspaceHref LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation getRepositorySession IfStatement BinaryOperation != MemberReference session Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator workspaceName MethodInvocation session MethodInvocation getName getWorkspace LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator loc MethodInvocation MethodInvocation getFactory MethodInvocation MethodInvocation MethodInvocation getPrefix getLocator BinaryOperation + Literal ""/"" MemberReference workspaceName MemberReference ItemResourceConstants ROOT_ITEM_PATH createResourceLocator getLocator ReturnStatement MethodInvocation loc Literal true getHref End ReturnStatement Literal null ReferenceType AbstractResource ReferenceType DavResource",0
680,680,,0
100,100,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.version Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Merge
 */ Merge FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType Merge getLog FieldDeclaration /** node path */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" FieldDeclaration /** source workspace key */ Modifier private ReferenceType String VariableDeclarator srcWorkspaceKey Literal ""srcWorkspace"" FieldDeclaration /** best effort key */ Modifier private ReferenceType String VariableDeclarator bestEffortKey Literal ""bestEffort"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator srcWorkspace Cast ReferenceType String MethodInvocation ctx This MemberReference srcWorkspaceKey get LocalVariableDeclaration BasicType boolean VariableDeclarator bestEffort MethodInvocation Boolean MethodInvocation booleanValue Cast ReferenceType String MethodInvocation ctx This MemberReference bestEffortKey get valueOf IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""merging node at "" MemberReference path Literal "" from workspace "" MemberReference srcWorkspace Literal "" besteffort="" MemberReference bestEffort debug End StatementExpression MethodInvocation CommandHelper MethodInvocation MemberReference srcWorkspace MemberReference bestEffort merge MemberReference ctx MemberReference path getNode ReturnStatement Literal false MethodDeclaration /**
     * @return the best effort key
     */ Modifier public ReferenceType String getBestEffortKey ReturnStatement MemberReference bestEffortKey MethodDeclaration /**
     * @param bestEffortKey
     *        the best effort key to set
     */ Modifier public setBestEffortKey FormalParameter ReferenceType String bestEffortKey StatementExpression Assignment This MemberReference bestEffortKey MemberReference bestEffortKey = MethodDeclaration /**
     * @return the path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param pathKey
     *        the path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String pathKey StatementExpression Assignment This MemberReference pathKey MemberReference pathKey = MethodDeclaration /**
     * @return the source <code>Workspace</code> key
     */ Modifier public ReferenceType String getSrcWorkspaceKey ReturnStatement MemberReference srcWorkspaceKey MethodDeclaration /**
     * @param srcWorkspaceKey
     *        the source <code>Workspace</code> key to set
     */ Modifier public setSrcWorkspaceKey FormalParameter ReferenceType String srcWorkspaceKey StatementExpression Assignment This MemberReference srcWorkspaceKey MemberReference srcWorkspaceKey = ReferenceType Command",0
407,407,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.config ClassDeclaration Modifier public /**
 * Access manager configuration. This bean configuration class
 * is used to create configured access manager objects.
 * <p>
 * This class is currently only used to assign a static type to
 * more generic bean configuration information.
 *
 * @see RepositoryConfig#getAccessManagerConfig()
 */ AccessManagerConfig ConstructorDeclaration Modifier public /**
     * Creates an access manager configuration object from the
     * given bean configuration.
     *
     * @param config bean configuration
     */ AccessManagerConfig FormalParameter ReferenceType BeanConfig config StatementExpression SuperConstructorInvocation MemberReference config ReferenceType BeanConfig",0
731,731,,1
191,191,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.lock Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.lock.AbstractActiveLock Import org.apache.jackrabbit.webdav.lock.ActiveLock Import org.apache.jackrabbit.webdav.lock.Type Import org.apache.jackrabbit.webdav.lock.Scope Import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants Import org.apache.jackrabbit.JcrConstants Import javax.jcr.lock.Lock Import javax.jcr.Node Import javax.jcr.RepositoryException ClassDeclaration Modifier public /**
 * <code>JcrActiveLock</code> wraps a {@link Lock JCR lock} object.
 */ JcrActiveLock FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType JcrActiveLock getLogger FieldDeclaration Modifier private final ReferenceType Lock VariableDeclarator lock FieldDeclaration Modifier private final BasicType boolean VariableDeclarator sessionScoped ConstructorDeclaration Modifier public /**
     * Create a new <code>ActiveLock</code> object with type '{@link Type#WRITE write}'
     * and scope '{@link Scope#EXCLUSIVE exclusive}'.
     *
     * @param lock
     */ JcrActiveLock FormalParameter ReferenceType Lock lock StatementExpression ExplicitConstructorInvocation MemberReference lock Literal false ConstructorDeclaration Modifier public /**
     * Create a new <code>ActiveLock</code> object with type '{@link Type#WRITE write}'
     * and scope '{@link Scope#EXCLUSIVE exclusive}'.
     *
     * @param lock
     */ JcrActiveLock FormalParameter ReferenceType Lock lock FormalParameter BasicType boolean sessionScoped IfStatement BinaryOperation == MemberReference lock Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Can not create a ActiveLock with a 'null' argument."" End StatementExpression Assignment This MemberReference lock MemberReference lock = StatementExpression Assignment This MemberReference sessionScoped MemberReference sessionScoped = MethodDeclaration /**
     * Return true if the given lock token equals the token holding that lock.
     *
     * @param lockToken
     * @return true if the given lock token equals this locks token.
     * @see org.apache.jackrabbit.webdav.lock.ActiveLock#isLockedByToken(String)
     */ Modifier public BasicType boolean isLockedByToken FormalParameter ReferenceType String lockToken IfStatement BinaryOperation && BinaryOperation != MemberReference lockToken Literal null MethodInvocation lockToken MethodInvocation getToken equals BlockStatement ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration /**
     * @see ActiveLock#isExpired()
     */ Modifier public BasicType boolean isExpired TryStatement ReturnStatement MethodInvocation ! lock isLive CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unexpected error: "" MethodInvocation e getMessage error ReturnStatement Literal false MethodDeclaration /**
     * Return the lock token if the {@link javax.jcr.Session} that optained the lock
     * is the lock token holder, <code>null</code> otherwise.<br>
     * NOTE: currently the token generated by the underlying JCR repository
     * is not checked for compliance with RFC 2518 (""<cite>OpaqueLockToken-URI = ""opaquelocktoken:""
     * UUID [Extension] ; The UUID production is the string representation of a
     * UUID, as defined in [ISO-11578]. Note that white space (LWS) is not allowed
     * between elements of this production.</cite>"").
     *
     * @see ActiveLock#getToken()
     */ Modifier public ReferenceType String getToken ReturnStatement MethodInvocation lock getLockToken MethodDeclaration /**
     * @see ActiveLock#getOwner()
     */ Modifier public ReferenceType String getOwner ReturnStatement MethodInvocation lock getLockOwner MethodDeclaration /**
     * @see ActiveLock#setOwner(String)
     */ Modifier public setOwner FormalParameter ReferenceType String owner ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""setOwner is not implemented"" MethodDeclaration /**
     * Since jcr locks do not reveal the time left until they expire, {@link #INFINITE_TIMEOUT}
     * is returned. A missing timeout causes problems with Microsoft clients.
     * 
     * @return Always returns {@link #INFINITE_TIMEOUT}
     * @see ActiveLock#getTimeout()
     */ Modifier public BasicType long getTimeout ReturnStatement MemberReference INFINITE_TIMEOUT MethodDeclaration /**
     * Throws <code>UnsupportedOperationException</code>
     *
     * @see ActiveLock#setTimeout(long)
     */ Modifier public setTimeout FormalParameter BasicType long timeout ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""setTimeout is not implemented"" MethodDeclaration /**
     * @see ActiveLock#isDeep()
     */ Modifier public BasicType boolean isDeep LocalVariableDeclaration BasicType boolean VariableDeclarator isDeep Literal true LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation lock getNode TryStatement IfStatement BinaryOperation && MethodInvocation n holdsLock MethodInvocation n MemberReference JcrConstants JCR_LOCKISDEEP hasProperty BlockStatement StatementExpression Assignment MemberReference isDeep MethodInvocation n MethodInvocation getBoolean MemberReference JcrConstants JCR_LOCKISDEEP getProperty = End CatchClause CatchClauseParameter RepositoryException e ReturnStatement MemberReference isDeep MethodDeclaration /**
     * @see ActiveLock#setIsDeep(boolean)
     */ Modifier public setIsDeep FormalParameter BasicType boolean isDeep ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""setIsDeep is not implemented"" MethodDeclaration /**
     * Always returns {@link Type#WRITE}.
     *
     * @return {@link Type#WRITE}
     * @see ActiveLock#getType()
     */ Modifier public ReferenceType Type getType ReturnStatement MemberReference Type WRITE MethodDeclaration /**
     * @return The scope of this lock, which may either by an {@link Scope#EXCLUSIVE exclusive}
     * or {@link ItemResourceConstants#EXCLUSIVE_SESSION exlusive session scoped}
     * lock.
     * @see ActiveLock#getScope()
     */ Modifier public ReferenceType Scope getScope ReturnStatement TernaryExpression MemberReference sessionScoped MemberReference ItemResourceConstants EXCLUSIVE_SESSION MemberReference Scope EXCLUSIVE ReferenceType AbstractActiveLock ReferenceType ActiveLock ReferenceType DavConstants",0
9,9,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.virtual Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.name.QName InterfaceDeclaration Modifier public /**
 * A <code>VirtualValueProvider</code> is used for virtual properties that
 * want to provide values dynamically.
 */ VirtualValueProvider MethodDeclaration /**
     * Returns the values for the given name
     * @param propName the name of the property
     * @return the values
     */ ReferenceType InternalValue getVirtualValues FormalParameter ReferenceType QName propName",0
15,15,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.header Import org.apache.log4j.Logger Import org.apache.jackrabbit.util.Text Import org.apache.jackrabbit.webdav.version.DeltaVConstants Import org.apache.jackrabbit.webdav.WebdavRequest ClassDeclaration Modifier public /**
 * <code>LabelHeader</code>...
 */ LabelHeader FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType LabelHeader getLogger FieldDeclaration Modifier private final ReferenceType String VariableDeclarator label ConstructorDeclaration Modifier public LabelHeader FormalParameter ReferenceType String label IfStatement BinaryOperation == MemberReference label Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""null is not a valid label."" End StatementExpression Assignment This MemberReference label MemberReference label = MethodDeclaration Modifier public ReferenceType String getLabel ReturnStatement MemberReference label MethodDeclaration Modifier public ReferenceType String getHeaderName ReturnStatement MemberReference DeltaVConstants HEADER_LABEL MethodDeclaration Modifier public ReferenceType String getHeaderValue ReturnStatement MethodInvocation Text MemberReference label escape MethodDeclaration Modifier public static ReferenceType LabelHeader parse FormalParameter ReferenceType WebdavRequest request LocalVariableDeclaration ReferenceType String VariableDeclarator hv MethodInvocation request MemberReference DeltaVConstants HEADER_LABEL getHeader IfStatement BinaryOperation == MemberReference hv Literal null BlockStatement ReturnStatement Literal null BlockStatement ReturnStatement ClassCreator ReferenceType LabelHeader MethodInvocation Text MemberReference hv unescape End ReferenceType Header",0
829,829,,0
430,430,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.lock Import org.apache.jackrabbit.core.NodeImpl Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.TransactionException Import org.apache.jackrabbit.core.TransactionContext Import org.apache.jackrabbit.core.InternalXAResource Import org.apache.jackrabbit.name.Path Import org.apache.log4j.Logger Import javax.jcr.lock.Lock Import javax.jcr.lock.LockException Import javax.jcr.RepositoryException Import javax.jcr.Session ClassDeclaration Modifier public /**
 * Session-local lock manager that implements the semantical changes inside
 * transactions. This manager validates lock/unlock operations inside its
 * view of the locking space.
 */ XALockManager FieldDeclaration /**
     * Logger instance for this class
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType XALockManager getLogger FieldDeclaration /**
     * Attribute name for XA Environment.
     */ Modifier private final static ReferenceType String VariableDeclarator XA_ENV_ATTRIBUTE_NAME Literal ""XALockManager.XAEnv"" FieldDeclaration /**
     * Parent session.
     */ Modifier private final ReferenceType SessionImpl VariableDeclarator session FieldDeclaration /**
     * Global lock manager.
     */ Modifier private final ReferenceType LockManagerImpl VariableDeclarator lockMgr FieldDeclaration /**
     * Current XA environment.
     */ Modifier private ReferenceType XAEnvironment VariableDeclarator xaEnv ConstructorDeclaration Modifier public /**
     * Create a new instance of this class.
     * @param session session
     * @param lockMgr lockMgr global lock manager
     */ XALockManager FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType LockManagerImpl lockMgr StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference lockMgr MemberReference lockMgr = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Lock lock FormalParameter ReferenceType NodeImpl node FormalParameter BasicType boolean isDeep FormalParameter BasicType boolean isSessionScoped LockException RepositoryException LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Literal null IfStatement MethodInvocation isInXA BlockStatement StatementExpression Assignment MemberReference info MethodInvocation xaEnv MemberReference node MemberReference isDeep MemberReference isSessionScoped lock = BlockStatement StatementExpression Assignment MemberReference info MethodInvocation lockMgr MemberReference node MemberReference isDeep MemberReference isSessionScoped internalLock = End ReturnStatement ClassCreator ReferenceType XALock This MemberReference info MemberReference node MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Lock getLock FormalParameter ReferenceType NodeImpl node LockException RepositoryException LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Literal null IfStatement MethodInvocation isInXA BlockStatement StatementExpression Assignment MemberReference info MethodInvocation xaEnv MemberReference node getLockInfo = BlockStatement StatementExpression Assignment MemberReference info MethodInvocation lockMgr MethodInvocation node internalGetUUID getLockInfo = End IfStatement BinaryOperation == MemberReference info Literal null BlockStatement ThrowStatement ClassCreator ReferenceType LockException BinaryOperation + Literal ""Node not locked: "" MethodInvocation node safeGetJCRPath End LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator session Cast ReferenceType SessionImpl MethodInvocation node getSession LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator holder Cast ReferenceType NodeImpl MethodInvocation session MethodInvocation ClassCreator ReferenceType NodeId MethodInvocation info getUUID getItem getItemManager ReturnStatement ClassCreator ReferenceType XALock This MemberReference info MemberReference holder MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public unlock FormalParameter ReferenceType NodeImpl node LockException RepositoryException IfStatement MethodInvocation isInXA BlockStatement StatementExpression MethodInvocation xaEnv MemberReference node unlock BlockStatement StatementExpression MethodInvocation lockMgr MemberReference node unlock End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean holdsLock FormalParameter ReferenceType NodeImpl node RepositoryException LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Literal null IfStatement MethodInvocation isInXA BlockStatement StatementExpression Assignment MemberReference info MethodInvocation xaEnv MemberReference node getLockInfo = BlockStatement StatementExpression Assignment MemberReference info MethodInvocation lockMgr MethodInvocation node internalGetUUID getLockInfo = End IfStatement BinaryOperation && BinaryOperation != MemberReference info Literal null MethodInvocation info MethodInvocation MethodInvocation node internalGetUUID equals getUUID BlockStatement ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isLocked FormalParameter ReferenceType NodeImpl node RepositoryException LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Literal null IfStatement MethodInvocation isInXA BlockStatement StatementExpression Assignment MemberReference info MethodInvocation xaEnv MemberReference node getLockInfo = BlockStatement StatementExpression Assignment MemberReference info MethodInvocation lockMgr MethodInvocation node internalGetUUID getLockInfo = End ReturnStatement BinaryOperation != MemberReference info Literal null MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public checkLock FormalParameter ReferenceType NodeImpl node LockException RepositoryException LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Literal null IfStatement MethodInvocation isInXA BlockStatement StatementExpression Assignment MemberReference info MethodInvocation xaEnv MemberReference node getLockInfo = BlockStatement StatementExpression Assignment MemberReference info MethodInvocation lockMgr MethodInvocation node internalGetUUID getLockInfo = End IfStatement BinaryOperation && BinaryOperation != MemberReference info Literal null BinaryOperation != MethodInvocation info getLockHolder MethodInvocation node getSession BlockStatement ThrowStatement ClassCreator ReferenceType LockException Literal ""Node locked."" End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public checkLock FormalParameter ReferenceType Path path FormalParameter ReferenceType Session session LockException RepositoryException LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator sessionImpl Cast ReferenceType SessionImpl MemberReference session StatementExpression MethodInvocation Cast ReferenceType NodeImpl MethodInvocation sessionImpl MethodInvocation MemberReference path getItem getItemManager checkLock MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public lockTokenAdded FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType String lt IfStatement MethodInvocation isInXA BlockStatement StatementExpression MethodInvocation xaEnv MemberReference lt addLockToken BlockStatement StatementExpression MethodInvocation lockMgr MemberReference session MemberReference lt lockTokenAdded End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public lockTokenRemoved FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType String lt IfStatement MethodInvocation isInXA BlockStatement StatementExpression MethodInvocation xaEnv MemberReference lt removeLockToken BlockStatement StatementExpression MethodInvocation lockMgr MemberReference session MemberReference lt lockTokenRemoved End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public associate FormalParameter ReferenceType TransactionContext tx LocalVariableDeclaration ReferenceType XAEnvironment VariableDeclarator xaEnv Literal null IfStatement BinaryOperation != MemberReference tx Literal null BlockStatement StatementExpression Assignment MemberReference xaEnv Cast ReferenceType XAEnvironment MethodInvocation tx MemberReference XA_ENV_ATTRIBUTE_NAME getAttribute = IfStatement BinaryOperation == MemberReference xaEnv Literal null BlockStatement StatementExpression Assignment MemberReference xaEnv ClassCreator ReferenceType XAEnvironment MemberReference session MemberReference lockMgr = StatementExpression MethodInvocation tx MemberReference XA_ENV_ATTRIBUTE_NAME MemberReference xaEnv setAttribute End End StatementExpression Assignment This MemberReference xaEnv MemberReference xaEnv = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public beforeOperation FormalParameter ReferenceType TransactionContext tx MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public prepare FormalParameter ReferenceType TransactionContext tx TransactionException LocalVariableDeclaration ReferenceType XAEnvironment VariableDeclarator xaEnv Cast ReferenceType XAEnvironment MethodInvocation tx MemberReference XA_ENV_ATTRIBUTE_NAME getAttribute IfStatement BinaryOperation != MemberReference xaEnv Literal null BlockStatement StatementExpression MethodInvocation xaEnv prepare End MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * This will finish the update and unlock the shared lock manager.
     */ Modifier public commit FormalParameter ReferenceType TransactionContext tx LocalVariableDeclaration ReferenceType XAEnvironment VariableDeclarator xaEnv Cast ReferenceType XAEnvironment MethodInvocation tx MemberReference XA_ENV_ATTRIBUTE_NAME getAttribute IfStatement BinaryOperation != MemberReference xaEnv Literal null BlockStatement StatementExpression MethodInvocation xaEnv commit End MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * This will undo all updates and unlock the shared lock manager.
     */ Modifier public rollback FormalParameter ReferenceType TransactionContext tx LocalVariableDeclaration ReferenceType XAEnvironment VariableDeclarator xaEnv Cast ReferenceType XAEnvironment MethodInvocation tx MemberReference XA_ENV_ATTRIBUTE_NAME getAttribute IfStatement BinaryOperation != MemberReference xaEnv Literal null BlockStatement StatementExpression MethodInvocation xaEnv rollback End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public afterOperation FormalParameter ReferenceType TransactionContext tx MethodDeclaration /**
     * Return a flag indicating whether a lock info belongs to a different
     * XA environment.
     */ Modifier public BasicType boolean differentXAEnv FormalParameter ReferenceType AbstractLockInfo info IfStatement MethodInvocation isInXA BlockStatement ReturnStatement MethodInvocation xaEnv MemberReference info differentXAEnv BlockStatement ReturnStatement BinaryOperation instanceof MemberReference info ReferenceType XAEnvironment ReferenceType LockInfo End MethodDeclaration /**
     * Return a flag indicating whether this version manager is currently
     * associated with an XA transaction.
     */ Modifier private BasicType boolean isInXA ReturnStatement BinaryOperation != MemberReference xaEnv Literal null ReferenceType LockManager ReferenceType InternalXAResource",0
563,563,,0
85,85,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.remote Import java.rmi.Remote Import java.rmi.RemoteException Import javax.jcr.RepositoryException InterfaceDeclaration Modifier public /**
 * Remote version of the JCR {@link javax.jcr.query.QueryResult QueryResult} interface.
 * Used by the  {@link org.apache.jackrabbit.rmi.server.ServerQueryResult ServerQueryResult}
 * and {@link org.apache.jackrabbit.rmi.client.ClientQueryResult ClientQueryResult}
 * adapter base classes to provide transparent RMI access to remote items.
 * <p>
 * RMI errors are signalled with RemoteExceptions.
 *
 * @author Philipp Koch
 * @see javax.jcr.query.QueryResult
 * @see org.apache.jackrabbit.rmi.client.ClientQueryResult
 * @see org.apache.jackrabbit.rmi.server.ServerQueryResult
 */ RemoteQueryResult MethodDeclaration /**
     * @see javax.jcr.query.QueryResult#getColumnNames()
     *
     * @return a <code>PropertyIterator</code>
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType String getColumnNames RepositoryException RemoteException MethodDeclaration /**
     * @see javax.jcr.query.QueryResult#getRows()
     *
     * @return a <code>RowIterator</code>
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteIterator getRows RepositoryException RemoteException MethodDeclaration /**
     * @see javax.jcr.query.QueryResult#getNodes()
     *
     * @return a remote node iterator
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteIterator getNodes RepositoryException RemoteException ReferenceType Remote",0
726,726,,0
2,2,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query Import org.apache.jackrabbit.core.ItemManager Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.state.NodeState Import javax.jcr.RepositoryException Import javax.jcr.query.InvalidQueryException Import java.io.IOException Import java.util.Iterator InterfaceDeclaration Modifier public /**
 * Defines an interface for the actual node indexing and query execution.
 * The goal is to allow different implementations based on the persistent
 * manager in use. Some persistent model might allow to execute a query
 * in an optimized manner, e.g. database persistence.
 */ QueryHandler MethodDeclaration /**
     * Initializes this query handler. This method is called after the
     * <code>QueryHandler</code> is instantiated.
     *
     * @param context the context for this query handler.
     * @throws IOException if an error occurs during initialization.
     */ init FormalParameter ReferenceType QueryHandlerContext context IOException MethodDeclaration /**
     * Returns the query handler context that passed in {@link
     * #init(QueryHandlerContext)}.
     *
     * @return the query handler context.
     */ ReferenceType QueryHandlerContext getContext MethodDeclaration /**
     * Adds a <code>Node</code> to the search index.
     * @param node the NodeState to add.
     * @throws RepositoryException if an error occurs while indexing the node.
     * @throws IOException if an error occurs while adding the node to the index.
     */ addNode FormalParameter ReferenceType NodeState node RepositoryException IOException MethodDeclaration /**
     * Deletes the Node with <code>UUID</code> from the search index.
     * @param uuid the <code>UUID</code> of the node to delete.
     * @throws IOException if an error occurs while deleting the node.
     */ deleteNode FormalParameter ReferenceType String uuid IOException MethodDeclaration /**
     * Updates the index in an atomic operation. Some nodes may be removed and
     * added again in the same updateNodes() call, which is equivalent to an
     * node update.
     *
     * @param remove Iterator of uuid <code>String</code>s of nodes to delete
     * @param add    Iterator of <code>NodeState</code> instance to add to the
     *               index.
     * @throws RepositoryException if an error occurs while indexing a node.
     * @throws IOException if an error occurs while updating the index.
     */ updateNodes FormalParameter ReferenceType Iterator remove FormalParameter ReferenceType Iterator add RepositoryException IOException MethodDeclaration /**
     * Closes this <code>QueryHandler</code> and frees resources attached
     * to this handler.
     */ close IOException MethodDeclaration /**
     * Creates a new query by specifying the query statement itself and the
     * language in which the query is stated.  If the query statement is
     * syntactically invalid, given the language specified, an
     * InvalidQueryException is thrown. <code>language</code> must specify a query language
     * string from among those returned by QueryManager.getSupportedQueryLanguages(); if it is not
     * then an <code>InvalidQueryException</code> is thrown.
     *
     * @param session the session of the current user creating the query object.
     * @param itemMgr the item manager of the current user.
     * @param statement the query statement.
     * @param language the syntax of the query statement.
     * @throws InvalidQueryException if statement is invalid or language is unsupported.
     * @return A <code>Query</code> object.
     */ ReferenceType ExecutableQuery createExecutableQuery FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType ItemManager itemMgr FormalParameter ReferenceType String statement FormalParameter ReferenceType String language InvalidQueryException",0
904,904,,0
486,486,"CompilationUnit PackageDeclaration org.apache.jackrabbit.jca Import javax.jcr.Credentials Import javax.jcr.LoginException Import javax.jcr.NoSuchWorkspaceException Import javax.jcr.Repository Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.naming.Reference Import javax.resource.Referenceable Import javax.resource.ResourceException Import javax.resource.spi.ConnectionManager Import java.io.Serializable ClassDeclaration Modifier public final /**
 * This class implements the JCA implementation of repository.
 */ JCARepositoryHandle FieldDeclaration /**
     * Managed connection factory.
     */ Modifier private final ReferenceType JCAManagedConnectionFactory VariableDeclarator mcf FieldDeclaration /**
     * Connection manager.
     */ Modifier private final ReferenceType ConnectionManager VariableDeclarator cm FieldDeclaration /**
     * Reference.
     */ Modifier private ReferenceType Reference VariableDeclarator reference ConstructorDeclaration Modifier public /**
     * Construct the repository.
     */ JCARepositoryHandle FormalParameter ReferenceType JCAManagedConnectionFactory mcf FormalParameter ReferenceType ConnectionManager cm StatementExpression Assignment This MemberReference mcf MemberReference mcf = StatementExpression Assignment This MemberReference cm MemberReference cm = MethodDeclaration /**
     * Creates a new session.
     */ Modifier public ReferenceType Session login LoginException NoSuchWorkspaceException RepositoryException ReturnStatement MethodInvocation Literal null Literal null login MethodDeclaration /**
     * Creates a new session.
     */ Modifier public ReferenceType Session login FormalParameter ReferenceType Credentials creds LoginException NoSuchWorkspaceException RepositoryException ReturnStatement MethodInvocation MemberReference creds Literal null login MethodDeclaration /**
     * Creates a new session.
     */ Modifier public ReferenceType Session login FormalParameter ReferenceType String workspace LoginException NoSuchWorkspaceException RepositoryException ReturnStatement MethodInvocation Literal null MemberReference workspace login MethodDeclaration /**
     * Creates a new session.
     */ Modifier public ReferenceType Session login FormalParameter ReferenceType Credentials creds FormalParameter ReferenceType String workspace LoginException NoSuchWorkspaceException RepositoryException ReturnStatement MethodInvocation ClassCreator ReferenceType JCAConnectionRequestInfo MemberReference creds MemberReference workspace login MethodDeclaration /**
     * Creates a new session.
     */ Modifier private ReferenceType Session login FormalParameter ReferenceType JCAConnectionRequestInfo cri LoginException NoSuchWorkspaceException RepositoryException TryStatement ReturnStatement Cast ReferenceType Session MethodInvocation cm MemberReference mcf MemberReference cri allocateConnection CatchClause CatchClauseParameter ResourceException e LocalVariableDeclaration ReferenceType Throwable VariableDeclarator cause MethodInvocation e getCause IfStatement BinaryOperation instanceof MemberReference cause ReferenceType LoginException BlockStatement ThrowStatement Cast ReferenceType LoginException MemberReference cause IfStatement BinaryOperation instanceof MemberReference cause ReferenceType NoSuchWorkspaceException BlockStatement ThrowStatement Cast ReferenceType NoSuchWorkspaceException MemberReference cause IfStatement BinaryOperation instanceof MemberReference cause ReferenceType RepositoryException BlockStatement ThrowStatement Cast ReferenceType RepositoryException MemberReference cause IfStatement BinaryOperation != MemberReference cause Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference cause BlockStatement ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e End End End End MethodDeclaration /**
     * Return the descriptor keys.
     */ Modifier public ReferenceType String getDescriptorKeys ReturnStatement MethodInvocation mcf MethodInvocation getDescriptorKeys getRepository MethodDeclaration /**
     * Return the descriptor for key.
     */ Modifier public ReferenceType String getDescriptor FormalParameter ReferenceType String key ReturnStatement MethodInvocation mcf MethodInvocation MemberReference key getDescriptor getRepository MethodDeclaration /**
     * Return the reference.
     */ Modifier public ReferenceType Reference getReference ReturnStatement MemberReference reference MethodDeclaration /**
     * Set the reference.
     */ Modifier public setReference FormalParameter ReferenceType Reference reference StatementExpression Assignment This MemberReference reference MemberReference reference = ReferenceType Repository ReferenceType Referenceable ReferenceType Serializable",1
717,717,,1
426,426,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.lock Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.ElementIterator Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.w3c.dom.Element Import org.w3c.dom.Document ClassDeclaration Modifier public /**
 * <code>LockInfo</code> is a simple utility class encapsulating the information
 * passed with a LOCK request. It combines both the request body (which if present
 * is required to by a 'lockinfo' Xml element) and the lock relevant request
 * headers '{@link DavConstants#HEADER_TIMEOUT Timeout}' and
 * '{@link DavConstants#HEADER_DEPTH Depth}'.<br>
 * Note that is class is not intended to perform any validation of the information
 * given, since this left to those objects responsible for the lock creation
 * on the requested resource.
 */ LockInfo FieldDeclaration Modifier private ReferenceType Type VariableDeclarator type FieldDeclaration Modifier private ReferenceType Scope VariableDeclarator scope FieldDeclaration Modifier private ReferenceType String VariableDeclarator owner FieldDeclaration Modifier private BasicType boolean VariableDeclarator isDeep FieldDeclaration Modifier private BasicType long VariableDeclarator timeout FieldDeclaration Modifier private BasicType boolean VariableDeclarator isRefreshLock ConstructorDeclaration Modifier public /**
     * Create a new <code>LockInfo</code> used for refreshing an existing lock.
     * 
     * @param timeout
     */ LockInfo FormalParameter BasicType long timeout StatementExpression Assignment This MemberReference timeout TernaryExpression BinaryOperation > MemberReference timeout Literal 0 MemberReference timeout MemberReference INFINITE_TIMEOUT = StatementExpression Assignment This MemberReference isRefreshLock Literal true = ConstructorDeclaration Modifier public /**
     * Create a new <code>LockInfo</code>
     *
     * @param scope
     * @param type
     * @param owner
     * @param timeout
     * @param isDeep
     */ LockInfo FormalParameter ReferenceType Scope scope FormalParameter ReferenceType Type type FormalParameter ReferenceType String owner FormalParameter BasicType long timeout FormalParameter BasicType boolean isDeep StatementExpression Assignment This MemberReference timeout TernaryExpression BinaryOperation > MemberReference timeout Literal 0 MemberReference timeout MemberReference INFINITE_TIMEOUT = StatementExpression Assignment This MemberReference isDeep MemberReference isDeep = IfStatement BinaryOperation || BinaryOperation == MemberReference scope Literal null BinaryOperation == MemberReference type Literal null BlockStatement StatementExpression Assignment This MemberReference isRefreshLock Literal true = BlockStatement StatementExpression Assignment This MemberReference scope MemberReference scope = StatementExpression Assignment This MemberReference type MemberReference type = StatementExpression Assignment This MemberReference owner MemberReference owner = End ConstructorDeclaration Modifier public /**
     * Create a new <code>LockInfo</code> object from the given information. If
     * <code>liElement</code> is <code>null</code> this lockinfo is assumed to
     * be issued from a 'Refresh Lock' request.
     *
     * @param liElement 'lockinfo' element present in the request body of a LOCK request
     * or <code>null</code> if the request was intended to refresh an existing lock.
     * @param timeout Requested timespan until the lock should expire. A LOCK
     * request MUST contain a '{@link DavConstants#HEADER_TIMEOUT Timeout}'
     * according to RFC 2518.
     * @param isDeep boolean value indicating whether the lock should be applied
     * with depth infinity or only to the requested resource.
     * @throws IllegalArgumentException if the <code>liElement</code> is not
     * <code>null</null> but does not start with an 'lockinfo' element.
     */ LockInfo FormalParameter ReferenceType Element liElement FormalParameter BasicType long timeout FormalParameter BasicType boolean isDeep StatementExpression Assignment This MemberReference timeout TernaryExpression BinaryOperation > MemberReference timeout Literal 0 MemberReference timeout MemberReference INFINITE_TIMEOUT = StatementExpression Assignment This MemberReference isDeep MemberReference isDeep = IfStatement BinaryOperation != MemberReference liElement Literal null BlockStatement IfStatement MethodInvocation ! DomUtil MemberReference liElement MemberReference XML_LOCKINFO MemberReference NAMESPACE matches BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""'DAV:lockinfo' element expected."" End LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator it MethodInvocation DomUtil MemberReference liElement getChildren WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator child MethodInvocation it nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator childName MethodInvocation child getLocalName IfStatement MethodInvocation XML_LOCKTYPE MemberReference childName equals BlockStatement StatementExpression Assignment MemberReference type MethodInvocation Type MemberReference child createFromXml = IfStatement MethodInvocation XML_LOCKSCOPE MemberReference childName equals BlockStatement StatementExpression Assignment MemberReference scope MethodInvocation Scope MemberReference child createFromXml = IfStatement MethodInvocation XML_OWNER MemberReference childName equals BlockStatement StatementExpression Assignment MemberReference owner MethodInvocation DomUtil MemberReference child MemberReference XML_HREF MemberReference NAMESPACE getChildTextTrim = IfStatement BinaryOperation == MemberReference owner Literal null BlockStatement StatementExpression Assignment MemberReference owner MethodInvocation DomUtil MemberReference child getTextTrim = End End End End End StatementExpression Assignment MemberReference isRefreshLock Literal false = BlockStatement StatementExpression Assignment MemberReference isRefreshLock Literal true = End MethodDeclaration /**
     * Returns the lock type or <code>null</null> if no 'lockinfo' element was
     * passed to the constructor or did not contain an 'type' element and the
     * type has not been set otherwise.
     *
     * @return type or <code>null</code>
     */ Modifier public ReferenceType Type getType ReturnStatement MemberReference type MethodDeclaration /**
     * Set the lock type.
     *
     * @param type
     */ Modifier public setType FormalParameter ReferenceType Type type StatementExpression Assignment This MemberReference type MemberReference type = MethodDeclaration /**
     * Return the lock scope or <code>null</null> if no 'lockinfo' element was
     * passed to the constructor or did not contain an 'scope' element and the
     * scope has not been set otherwise.
     *
     * @return scope or <code>null</code>
     */ Modifier public ReferenceType Scope getScope ReturnStatement MemberReference scope MethodDeclaration /**
     * Set the lock scope.
     *
     * @param scope
     */ Modifier public setScope FormalParameter ReferenceType Scope scope StatementExpression Assignment This MemberReference scope MemberReference scope = MethodDeclaration /**
     * Return the owner indicated by the corresponding child element from the
     * 'lockinfo' element or <code>null</null> if no 'lockinfo' element was
     * passed to the constructor or did not contain an 'owner' element.
     *
     * @return owner or <code>null</code>
     */ Modifier public ReferenceType String getOwner ReturnStatement MemberReference owner MethodDeclaration /**
     * Returns true if the lock must be applied with depth infinity.
     *
     * @return true if a deep lock must be created.
     */ Modifier public BasicType boolean isDeep ReturnStatement MemberReference isDeep MethodDeclaration /**
     * Returns the time until the lock is requested to expire.
     *
     * @return time until the lock should expire.
     */ Modifier public BasicType long getTimeout ReturnStatement MemberReference timeout MethodDeclaration /**
     * Returns true if this <code>LockInfo</code> was created for a LOCK
     * request intended to refresh an existing lock rather than creating a
     * new one.
     *
     * @return true if the corresponding LOCK request was intended to refresh
     * an existing lock.
     */ Modifier public BasicType boolean isRefreshLock ReturnStatement MemberReference isRefreshLock MethodDeclaration /**
     * Returns the xml representation of this lock info.<br>
     * NOTE however, that the depth and the timeout are not included
     * in the xml. They will be passed to the server using the corresponding
     * request headers.
     *
     * @param document
     * @return xml representation of this lock info.
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document IfStatement MemberReference isRefreshLock BlockStatement ReturnStatement Literal null BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator lockInfo MethodInvocation DomUtil MemberReference document MemberReference XML_LOCKINFO MemberReference NAMESPACE createElement StatementExpression MethodInvocation lockInfo MethodInvocation scope MemberReference document toXml appendChild StatementExpression MethodInvocation lockInfo MethodInvocation type MemberReference document toXml appendChild IfStatement BinaryOperation != MemberReference owner Literal null BlockStatement StatementExpression MethodInvocation DomUtil MemberReference lockInfo MemberReference XML_OWNER MemberReference NAMESPACE MemberReference owner addChildElement End ReturnStatement MemberReference lockInfo End ReferenceType DavConstants ReferenceType XmlSerializable",0
105,105,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query Import java.io.StringReader Import java.util.HashMap Import java.util.Map Import javax.jcr.RepositoryException Import org.apache.jackrabbit.core.query.lucene.FieldNames Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.value.BLOBFileValue Import org.apache.jackrabbit.core.value.InternalValue Import org.textmining.text.extraction.WordExtractor ClassDeclaration Modifier public /**
 * Extracts texts from MS Word document binary data.
 * Taken from Jakarta Slide class
 * <code>org.apache.slide.extractor.MSPowerPointExtractor</code>
 */ MsWordTextFilter MethodDeclaration /**
     * @return <code>true</code> for <code>application/vnd.ms-word</code> 
     * or <code>application/msword</code>, <code>false</code> otherwise.
     */ Modifier public BasicType boolean canFilter FormalParameter ReferenceType String mimeType ReturnStatement BinaryOperation || Literal MethodInvocation MemberReference mimeType equalsIgnoreCase ""application/vnd.ms-word"" Literal MethodInvocation MemberReference mimeType equalsIgnoreCase ""application/msword"" MethodDeclaration /**
     * Returns a map with a single entry for field {@link FieldNames#FULLTEXT}.
     * @param data object containing MS Word document data.
     * @param encoding text encoding is not used, since it is specified in the data.
     * @return a map with a single Reader value for field {@link FieldNames#FULLTEXT}.
     * @throws RepositoryException if data is a multi-value property or it does not
     * contain valid MS Word document.
     */ Modifier public ReferenceType Map doFilter FormalParameter ReferenceType PropertyState data FormalParameter ReferenceType String encoding RepositoryException LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation data getValues IfStatement BinaryOperation > MemberReference values length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType BLOBFileValue VariableDeclarator blob Cast ReferenceType BLOBFileValue MemberReference ArraySelector Literal 0 MethodInvocation internalValue values TryStatement LocalVariableDeclaration ReferenceType WordExtractor VariableDeclarator extractor ClassCreator ReferenceType WordExtractor LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation extractor MethodInvocation blob getStream extractText LocalVariableDeclaration ReferenceType Map VariableDeclarator result ClassCreator ReferenceType HashMap StatementExpression MethodInvocation result MemberReference FieldNames FULLTEXT ClassCreator ReferenceType StringReader MemberReference text put ReturnStatement MemberReference result CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference ex BlockStatement ThrowStatement ClassCreator ReferenceType RepositoryException Literal ""Multi-valued binary properties not supported."" End ReferenceType TextFilter",0
43,43,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.config Import org.w3c.dom.Attr Import org.w3c.dom.Document Import org.w3c.dom.Element Import org.w3c.dom.Node Import org.w3c.dom.NodeList Import org.xml.sax.InputSource Import org.xml.sax.SAXException Import org.apache.jackrabbit.util.Text Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.DocumentBuilderFactory Import javax.xml.parsers.ParserConfigurationException Import java.io.File Import java.io.IOException Import java.util.Properties ClassDeclaration Modifier public /**
 * Configuration parser. This class is used to parse the repository and
 * workspace configuration files. Each configuration parser instance
 * contains a set of parser variables that are used for variable replacement
 * in the configuration file.
 * <p>
 * The following code sample outlines the usage of this class:
 * <pre>
 *     Properties variables = ...; // parser variables
 *     ConfigurationParser parser = new ConfigurationParser(variables);
 *     RepositoryConfig rc = parser.parseRepositoryConfig(...);
 *     WorkspaceConfig wc = parser.parseWorkspaceConfig(...);
 * </pre>
 * <p>
 * Note that the configuration objects returned by this parser are not
 * initialized. The caller needs to initialize the configuration objects
 * before using them.
 */ ConfigurationParser FieldDeclaration /** Name of the repository home directory parser variable. */ Modifier public final static ReferenceType String VariableDeclarator REPOSITORY_HOME_VARIABLE Literal ""rep.home"" FieldDeclaration /** Name of the workspace home directory parser variable. */ Modifier public final static ReferenceType String VariableDeclarator WORKSPACE_HOME_VARIABLE Literal ""wsp.home"" FieldDeclaration /** Name of the repository name parser variable. */ Modifier public final static ReferenceType String VariableDeclarator WORKSPACE_NAME_VARIABLE Literal ""wsp.name"" FieldDeclaration /** Name of the security configuration element. */ Modifier public final static ReferenceType String VariableDeclarator SECURITY_ELEMENT Literal ""Security"" FieldDeclaration /** Name of the access manager configuration element. */ Modifier public final static ReferenceType String VariableDeclarator ACCESS_MANAGER_ELEMENT Literal ""AccessManager"" FieldDeclaration /** Name of the login module configuration element. */ Modifier public final static ReferenceType String VariableDeclarator LOGIN_MODULE_ELEMENT Literal ""LoginModule"" FieldDeclaration /** Name of the general workspace configuration element. */ Modifier public final static ReferenceType String VariableDeclarator WORKSPACES_ELEMENT Literal ""Workspaces"" FieldDeclaration /** Name of the workspace configuration element. */ Modifier public final static ReferenceType String VariableDeclarator WORKSPACE_ELEMENT Literal ""Workspace"" FieldDeclaration /** Name of the versioning configuration element. */ Modifier public final static ReferenceType String VariableDeclarator VERSIONING_ELEMENT Literal ""Versioning"" FieldDeclaration /** Name of the file system configuration element. */ Modifier public final static ReferenceType String VariableDeclarator FILE_SYSTEM_ELEMENT Literal ""FileSystem"" FieldDeclaration /** Name of the persistence manager configuration element. */ Modifier public final static ReferenceType String VariableDeclarator PERSISTENCE_MANAGER_ELEMENT Literal ""PersistenceManager"" FieldDeclaration /** Name of the search index configuration element. */ Modifier public final static ReferenceType String VariableDeclarator SEARCH_INDEX_ELEMENT Literal ""SearchIndex"" FieldDeclaration /** Name of the bean parameter configuration element. */ Modifier public final static ReferenceType String VariableDeclarator PARAM_ELEMENT Literal ""param"" FieldDeclaration /** Name of the application name configuration attribute. */ Modifier public final static ReferenceType String VariableDeclarator APP_NAME_ATTRIBUTE Literal ""appName"" FieldDeclaration /** Name of the root path configuration attribute. */ Modifier public final static ReferenceType String VariableDeclarator ROOT_PATH_ATTRIBUTE Literal ""rootPath"" FieldDeclaration /** Name of the config root path configuration attribute. */ Modifier public final static ReferenceType String VariableDeclarator CONFIG_ROOT_PATH_ATTRIBUTE Literal ""configRootPath"" FieldDeclaration /** Name of the maximum idle time configuration attribute. */ Modifier public final static ReferenceType String VariableDeclarator MAX_IDLE_TIME_ATTRIBUTE Literal ""maxIdleTime"" FieldDeclaration /** Name of the default workspace configuration attribute. */ Modifier public final static ReferenceType String VariableDeclarator DEFAULT_WORKSPACE_ATTRIBUTE Literal ""defaultWorkspace"" FieldDeclaration /** Name of the bean implementation class configuration attribute. */ Modifier public final static ReferenceType String VariableDeclarator CLASS_ATTRIBUTE Literal ""class"" FieldDeclaration /** Name of the bean parameter name configuration attribute. */ Modifier public final static ReferenceType String VariableDeclarator NAME_ATTRIBUTE Literal ""name"" FieldDeclaration /** Name of the bean parameter value configuration attribute. */ Modifier public final static ReferenceType String VariableDeclarator VALUE_ATTRIBUTE Literal ""value"" FieldDeclaration /** Name of the default search index implementation class. */ Modifier public final static ReferenceType String VariableDeclarator DEFAULT_QUERY_HANDLER Literal ""org.apache.jackrabbit.core.query.lucene.SearchIndex"" FieldDeclaration /**
     * The configuration parser variables. These name-value pairs
     * are used to substitute <code>${...}</code> variable references
     * with context-dependent values in the configuration.
     *
     * @see #replaceVariables(String)
     */ Modifier private final ReferenceType Properties VariableDeclarator variables ConstructorDeclaration Modifier public /**
     * Creates a new configuration parser with the given parser variables.
     *
     * @param variables parser variables
     */ ConfigurationParser FormalParameter ReferenceType Properties variables StatementExpression Assignment This MemberReference variables MemberReference variables = MethodDeclaration /**
     * Returns the variables.
     * @return the variables.
     */ Modifier public ReferenceType Properties getVariables ReturnStatement MemberReference variables MethodDeclaration /**
     * Parses repository configuration. Repository configuration uses the
     * following format:
     * <pre>
     *   &lt;Repository&gt;
     *     &lt;FileSystem ...&gt;
     *     &lt;Security appName=""...""&gt;
     *       &lt;AccessManager ...&gt;
     *       &lt;LoginModule ... (optional)&gt;
     *     &lt;/Security&gt;
     *     &lt;Workspaces rootPath=""..."" defaultWorkspace=""...""/&gt;
     *     &lt;Workspace ...&gt;
     *     &lt;Versioning ...&gt;
     *   &lt;/Repository&gt;
     * </pre>
     * <p>
     * The <code>FileSystem</code> element is a
     * {@link #parseBeanConfig(Element,String) bean configuration} element,
     * that specifies the file system implementation for storing global
     * repository information. The <code>Security</code> element contains
     * an <code>AccessManager</code> bean configuration element and the
     * JAAS name of the repository application. The <code>Workspaces</code>
     * element contains general workspace parameters, and the
     * <code>Workspace</code> element is a template for the individual
     * workspace configuration files. The <code>Versioning</code> element
     * contains
     * {@link #parseVersioningConfig(Element) versioning configuration} for
     * the repository.
     * <p>
     * In addition to the configured information, the returned repository
     * configuration object also contains the repository home directory path
     * that is given as the ${rep.home} parser variable. Note that the
     * variable <em>must</em> be available for the configuration document to
     * be correctly parsed.
     * <p>
     * {@link #replaceVariables(String) Variable replacement} is performed
     * on the security application name attribute, the general workspace
     * configuration attributes, and on the file system, access manager,
     * and versioning configuration information.
     * <p>
     * Note that the returned repository configuration object has not been
     * initialized.
     *
     * @param xml repository configuration document
     * @return repository configuration
     * @throws ConfigurationException if the configuration is broken
     * @see #parseBeanConfig(Element, String)
     * @see #parseVersioningConfig(Element)
     */ Modifier public ReferenceType RepositoryConfig parseRepositoryConfig FormalParameter ReferenceType InputSource xml ConfigurationException LocalVariableDeclaration ReferenceType Element VariableDeclarator root MethodInvocation MemberReference xml parseXML LocalVariableDeclaration ReferenceType String VariableDeclarator home MethodInvocation variables MemberReference REPOSITORY_HOME_VARIABLE getProperty LocalVariableDeclaration ReferenceType FileSystemConfig VariableDeclarator fsc ClassCreator ReferenceType FileSystemConfig MethodInvocation MemberReference root MemberReference FILE_SYSTEM_ELEMENT parseBeanConfig LocalVariableDeclaration ReferenceType Element VariableDeclarator security MethodInvocation MemberReference root MemberReference SECURITY_ELEMENT getElement LocalVariableDeclaration ReferenceType String VariableDeclarator appName MethodInvocation MemberReference security MemberReference APP_NAME_ATTRIBUTE getAttribute LocalVariableDeclaration ReferenceType AccessManagerConfig VariableDeclarator amc ClassCreator ReferenceType AccessManagerConfig MethodInvocation MemberReference security MemberReference ACCESS_MANAGER_ELEMENT parseBeanConfig LocalVariableDeclaration ReferenceType Element VariableDeclarator loginModule MethodInvocation MemberReference security MemberReference LOGIN_MODULE_ELEMENT Literal false getElement LocalVariableDeclaration ReferenceType LoginModuleConfig VariableDeclarator lmc Literal null IfStatement BinaryOperation != MemberReference loginModule Literal null BlockStatement StatementExpression Assignment MemberReference lmc ClassCreator ReferenceType LoginModuleConfig MethodInvocation MemberReference security MemberReference LOGIN_MODULE_ELEMENT parseBeanConfig = End LocalVariableDeclaration ReferenceType Element VariableDeclarator workspaces MethodInvocation MemberReference root MemberReference WORKSPACES_ELEMENT getElement LocalVariableDeclaration ReferenceType String VariableDeclarator workspaceDirectory MethodInvocation MethodInvocation MemberReference workspaces MemberReference ROOT_PATH_ATTRIBUTE getAttribute replaceVariables LocalVariableDeclaration ReferenceType String VariableDeclarator workspaceConfigDirectory MethodInvocation MemberReference workspaces MemberReference CONFIG_ROOT_PATH_ATTRIBUTE Literal null getAttribute LocalVariableDeclaration ReferenceType String VariableDeclarator defaultWorkspace MethodInvocation MethodInvocation MemberReference workspaces MemberReference DEFAULT_WORKSPACE_ATTRIBUTE getAttribute replaceVariables LocalVariableDeclaration BasicType int VariableDeclarator maxIdleTime MethodInvocation Integer MethodInvocation MemberReference workspaces MemberReference MAX_IDLE_TIME_ATTRIBUTE Literal ""0"" getAttribute parseInt LocalVariableDeclaration ReferenceType Element VariableDeclarator template MethodInvocation MemberReference root MemberReference WORKSPACE_ELEMENT getElement LocalVariableDeclaration ReferenceType VersioningConfig VariableDeclarator vc MethodInvocation MemberReference root parseVersioningConfig LocalVariableDeclaration ReferenceType SearchConfig VariableDeclarator sc MethodInvocation MemberReference root parseSearchConfig ReturnStatement ClassCreator ReferenceType RepositoryConfig MemberReference home MemberReference appName MemberReference amc MemberReference lmc MemberReference fsc MemberReference workspaceDirectory MemberReference workspaceConfigDirectory MemberReference defaultWorkspace MemberReference maxIdleTime MemberReference template MemberReference vc MemberReference sc This MethodDeclaration /**
     * Parses workspace configuration. Workspace configuration uses the
     * following format:
     * <pre>
     *   &lt;Workspace name=""...""&gt;
     *     &lt;FileSystem ...&gt;
     *     &lt;PersistenceManager ...&gt;
     *     &lt;SearchIndex ...&gt;
     *   &lt;/Workspace&gt;
     * </pre>
     * <p>
     * All the child elements (<code>FileSystem</code>,
     * <code>PersistenceManager</code>, and <code>SearchIndex</code>) are
     * {@link #parseBeanConfig(Element,String) bean configuration} elements.
     * In addition to bean configuration, the
     * {@link #parseSearchConfig(Element) search element} also contains
     * configuration for the search file system.
     * <p>
     * In addition to the configured information, the returned workspace
     * configuration object also contains the workspace home directory path
     * that is given as the ${wsp.home} parser variable. Note that the
     * variable <em>must</em> be available for the configuration document to
     * be correctly parsed.
     * <p>
     * Variable replacement is performed on the optional workspace name
     * attribute. If the name is not given, then the name of the workspace
     * home directory is used as the workspace name. Once the name has been
     * determined, it will be added as the ${wsp.name} variable in a temporary
     * configuration parser that is used to parse the contained configuration
     * elements.
     * <p>
     * The search index configuration element is optional. If it is not given,
     * then the workspace will not have search capabilities.
     * <p>
     * Note that the returned workspace configuration object has not been
     * initialized.
     *
     * @param xml workspace configuration document
     * @return workspace configuration
     * @throws ConfigurationException if the configuration is broken
     * @see #parseBeanConfig(Element, String)
     * @see #parseSearchConfig(Element)
     */ Modifier public ReferenceType WorkspaceConfig parseWorkspaceConfig FormalParameter ReferenceType InputSource xml ConfigurationException LocalVariableDeclaration ReferenceType Element VariableDeclarator root MethodInvocation MemberReference xml parseXML LocalVariableDeclaration ReferenceType String VariableDeclarator home MethodInvocation variables MemberReference WORKSPACE_HOME_VARIABLE getProperty LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation MemberReference root MemberReference NAME_ATTRIBUTE ClassCreator MethodInvocation getName ReferenceType File MemberReference home getAttribute LocalVariableDeclaration ReferenceType Properties VariableDeclarator tmpVariables Cast ReferenceType Properties MethodInvocation variables clone StatementExpression MethodInvocation tmpVariables MemberReference WORKSPACE_NAME_VARIABLE MemberReference name put LocalVariableDeclaration ReferenceType ConfigurationParser VariableDeclarator tmpParser MethodInvocation MemberReference tmpVariables createSubParser LocalVariableDeclaration ReferenceType FileSystemConfig VariableDeclarator fsc ClassCreator ReferenceType FileSystemConfig MethodInvocation tmpParser MemberReference root MemberReference FILE_SYSTEM_ELEMENT parseBeanConfig LocalVariableDeclaration ReferenceType PersistenceManagerConfig VariableDeclarator pmc MethodInvocation tmpParser MemberReference root parsePersistenceManagerConfig LocalVariableDeclaration ReferenceType SearchConfig VariableDeclarator sc MethodInvocation tmpParser MemberReference root parseSearchConfig ReturnStatement ClassCreator ReferenceType WorkspaceConfig MemberReference home MemberReference name MemberReference fsc MemberReference pmc MemberReference sc MethodDeclaration /**
     * Parses search index configuration. Search index configuration
     * uses the following format:
     * <pre>
     *   &lt;SearchIndex class=""...""&gt;
     *     &lt;param name=""..."" value=""...""&gt;
     *     ...
     *     &lt;FileSystem ...&gt;
     *   &lt;/Search&gt;
     * </pre>
     * <p/>
     * Both the <code>SearchIndex</code> and <code>FileSystem</code>
     * elements are {@link #parseBeanConfig(Element,String) bean configuration}
     * elements. If the search implementation class is not given, then
     * a default implementation is used.
     * <p/>
     * The search index is an optional feature of workspace configuration.
     * If the search configuration element is not found, then this method
     * returns <code>null</code>.
     * <p/>
     * The FileSystem element in a search index configuration is optional.
     * However some implementations may require a FileSystem.
     *
     * @param parent parent of the <code>SearchIndex</code> element
     * @return search configuration, or <code>null</code>
     * @throws ConfigurationException if the configuration is broken
     */ Modifier protected ReferenceType SearchConfig parseSearchConfig FormalParameter ReferenceType Element parent ConfigurationException LocalVariableDeclaration ReferenceType NodeList VariableDeclarator children MethodInvocation parent getChildNodes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation children getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child MethodInvocation children MemberReference i item IfStatement BinaryOperation && BinaryOperation == MethodInvocation child getNodeType MemberReference Node ELEMENT_NODE MethodInvocation SEARCH_INDEX_ELEMENT MethodInvocation child getNodeName equals BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator element Cast ReferenceType Element MemberReference child LocalVariableDeclaration ReferenceType String VariableDeclarator className MethodInvocation MemberReference element MemberReference CLASS_ATTRIBUTE MemberReference DEFAULT_QUERY_HANDLER getAttribute LocalVariableDeclaration ReferenceType Properties VariableDeclarator parameters MethodInvocation MemberReference element parseParameters LocalVariableDeclaration ReferenceType FileSystemConfig VariableDeclarator fsc Literal null IfStatement BinaryOperation != MethodInvocation MemberReference element MemberReference FILE_SYSTEM_ELEMENT Literal false getElement Literal null BlockStatement StatementExpression Assignment MemberReference fsc ClassCreator ReferenceType FileSystemConfig MethodInvocation MemberReference element MemberReference FILE_SYSTEM_ELEMENT parseBeanConfig = End ReturnStatement ClassCreator ReferenceType SearchConfig MemberReference className MemberReference parameters MemberReference fsc End End ReturnStatement Literal null MethodDeclaration /**
     * Parses versioning configuration. Versioning configuration uses the
     * following format:
     * <pre>
     *   &lt;Versioning rootPath=""...""&gt;
     *     &lt;FileSystem ...&gt;
     *     &lt;PersistenceManager ...&gt;
     *   &lt;/Versioning&gt;
     * </pre>
     * <p>
     * Both the <code>FileSystem</code> and <code>PersistenceManager</code>
     * elements are {@link #parseBeanConfig(Element,String) bean configuration}
     * elements. In addition to the bean parameter values,
     * {@link #replaceVariables(String) variable replacement} is performed
     * also on the versioning root path attribute.
     *
     * @param parent parent of the <code>Versioning</code> element
     * @return versioning configuration
     * @throws ConfigurationException if the configuration is broken
     */ Modifier protected ReferenceType VersioningConfig parseVersioningConfig FormalParameter ReferenceType Element parent ConfigurationException LocalVariableDeclaration ReferenceType Element VariableDeclarator element MethodInvocation MemberReference parent MemberReference VERSIONING_ELEMENT getElement LocalVariableDeclaration ReferenceType String VariableDeclarator home MethodInvocation MethodInvocation MemberReference element MemberReference ROOT_PATH_ATTRIBUTE getAttribute replaceVariables LocalVariableDeclaration ReferenceType FileSystemConfig VariableDeclarator fsc ClassCreator ReferenceType FileSystemConfig MethodInvocation MemberReference element MemberReference FILE_SYSTEM_ELEMENT parseBeanConfig LocalVariableDeclaration ReferenceType PersistenceManagerConfig VariableDeclarator pmc MethodInvocation MemberReference element parsePersistenceManagerConfig ReturnStatement ClassCreator ReferenceType VersioningConfig MemberReference home MemberReference fsc MemberReference pmc MethodDeclaration /**
     * Parses the PersistenceManager config.
     *
     * @param parent
     * @return
     * @throws ConfigurationException
     */ Modifier protected ReferenceType PersistenceManagerConfig parsePersistenceManagerConfig FormalParameter ReferenceType Element parent ConfigurationException ReturnStatement ClassCreator ReferenceType PersistenceManagerConfig MethodInvocation MemberReference parent MemberReference PERSISTENCE_MANAGER_ELEMENT parseBeanConfig MethodDeclaration /**
     * Parses a named bean configuration from the given element.
     * Bean configuration uses the following format:
     * <pre>
     *   &lt;BeanName class=""...""&gt;
     *     &lt;param name=""..."" value=""...""/&gt;
     *     ...
     *   &lt;/BeanName&gt;
     * </pre>
     * <p>
     * The returned bean configuration object contains the configured
     * class name and configuration parameters. Variable replacement
     * is performed on the parameter values.
     *
     * @param parent parent element
     * @param name name of the bean configuration element
     * @return bean configuration,
     * @throws ConfigurationException if the configuration element does not
     *                                exist or is broken
     */ Modifier protected ReferenceType BeanConfig parseBeanConfig FormalParameter ReferenceType Element parent FormalParameter ReferenceType String name ConfigurationException LocalVariableDeclaration ReferenceType Element VariableDeclarator element MethodInvocation MemberReference parent MemberReference name getElement LocalVariableDeclaration ReferenceType String VariableDeclarator className MethodInvocation MemberReference element MemberReference CLASS_ATTRIBUTE getAttribute LocalVariableDeclaration ReferenceType Properties VariableDeclarator properties MethodInvocation MemberReference element parseParameters ReturnStatement ClassCreator ReferenceType BeanConfig MemberReference className MemberReference properties MethodDeclaration /**
     * Parses the configuration parameters of the given element.
     * Parameters are stored as
     * <code>&lt;param name=""..."" value=""...""/&gt;</code>
     * child elements. This method parses all param elements,
     * performs {@link #replaceVariables(String) variable replacement}
     * on parameter values, and returns the resulting name-value pairs.
     *
     * @param element configuration element
     * @return configuration parameters
     * @throws ConfigurationException if a <code>param</code> element does
     *                                not contain the <code>name</code> and
     *                                <code>value</code> attributes
     */ Modifier protected ReferenceType Properties parseParameters FormalParameter ReferenceType Element element ConfigurationException LocalVariableDeclaration ReferenceType Properties VariableDeclarator parameters ClassCreator ReferenceType Properties LocalVariableDeclaration ReferenceType NodeList VariableDeclarator children MethodInvocation element getChildNodes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation children getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child MethodInvocation children MemberReference i item IfStatement BinaryOperation && BinaryOperation == MethodInvocation child getNodeType MemberReference Node ELEMENT_NODE MethodInvocation PARAM_ELEMENT MethodInvocation child getNodeName equals BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator parameter Cast ReferenceType Element MemberReference child LocalVariableDeclaration ReferenceType Attr VariableDeclarator name MethodInvocation parameter MemberReference NAME_ATTRIBUTE getAttributeNode IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType ConfigurationException Literal ""Parameter name not set"" End LocalVariableDeclaration ReferenceType Attr VariableDeclarator value MethodInvocation parameter MemberReference VALUE_ATTRIBUTE getAttributeNode IfStatement BinaryOperation == MemberReference value Literal null BlockStatement ThrowStatement ClassCreator ReferenceType ConfigurationException Literal ""Parameter value not set"" End StatementExpression MethodInvocation parameters MethodInvocation name getValue MethodInvocation MethodInvocation value getValue replaceVariables put End End ReturnStatement MemberReference parameters MethodDeclaration /**
     * Performs variable replacement on the given string value.
     * Each <code>${...}</code> sequence within the given value is replaced
     * with the value of the named parser variable. The replacement is not
     * done if the named variable does not exist.
     *
     * @param value original value
     * @return value after variable replacements
     * @throws ConfigurationException if the replacement of a referenced
     *                                variable is not found
     */ Modifier protected ReferenceType String replaceVariables FormalParameter ReferenceType String value ConfigurationException TryStatement ReturnStatement MethodInvocation Text MemberReference variables MemberReference value Literal false replaceVariables CatchClause CatchClauseParameter IllegalArgumentException e ThrowStatement ClassCreator ReferenceType ConfigurationException MethodInvocation e getMessage MethodDeclaration /**
     * Parses the given XML document and returns the DOM root element.
     * A custom entity resolver is used to make the included configuration
     * file DTD available using the specified public identifiers.
     *
     * @see ConfigurationEntityResolver
     * @param xml xml document
     * @return root element
     * @throws ConfigurationException if the configuration document could
     *                                not be read or parsed
     */ Modifier protected ReferenceType Element parseXML FormalParameter ReferenceType InputSource xml ConfigurationException TryStatement LocalVariableDeclaration ReferenceType DocumentBuilderFactory VariableDeclarator factory MethodInvocation DocumentBuilderFactory newInstance LocalVariableDeclaration ReferenceType DocumentBuilder VariableDeclarator builder MethodInvocation factory newDocumentBuilder StatementExpression MethodInvocation builder ClassCreator ReferenceType ConfigurationEntityResolver setEntityResolver LocalVariableDeclaration ReferenceType Document VariableDeclarator document MethodInvocation builder MemberReference xml parse ReturnStatement MethodInvocation document getDocumentElement CatchClause CatchClauseParameter ParserConfigurationException e ThrowStatement ClassCreator ReferenceType ConfigurationException Literal ""Unable to create configuration XML parser"" MemberReference e CatchClause CatchClauseParameter SAXException e ThrowStatement ClassCreator ReferenceType ConfigurationException Literal ""Configuration file syntax error."" MemberReference e CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType ConfigurationException Literal ""Configuration file could not be read."" MemberReference e MethodDeclaration /**
     * Returns the named child of the given parent element.
     *
     * @param parent parent element
     * @param name name of the child element
     * @return named child element
     * @throws ConfigurationException
     * @throws ConfigurationException if the child element is not found
     */ Modifier protected ReferenceType Element getElement FormalParameter ReferenceType Element parent FormalParameter ReferenceType String name ConfigurationException ReturnStatement MethodInvocation MemberReference parent MemberReference name Literal true getElement MethodDeclaration /**
     * Returns the named child of the given parent element.
     *
     * @param parent parent element
     * @param name name of the child element
     * @param required indicates if the child element is required
     * @return named child element, or <code>null</code> if not found and
     *         <code>required</code> is <code>false</code>.
     * @throws ConfigurationException if the child element is not found and
     *         <code>required</code> is <code>true</code>.
     */ Modifier protected ReferenceType Element getElement FormalParameter ReferenceType Element parent FormalParameter ReferenceType String name FormalParameter BasicType boolean required ConfigurationException LocalVariableDeclaration ReferenceType NodeList VariableDeclarator children MethodInvocation parent getChildNodes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation children getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child MethodInvocation children MemberReference i item IfStatement BinaryOperation && BinaryOperation == MethodInvocation child getNodeType MemberReference Node ELEMENT_NODE MethodInvocation name MethodInvocation child getNodeName equals BlockStatement ReturnStatement Cast ReferenceType Element MemberReference child End End IfStatement MemberReference required BlockStatement ThrowStatement ClassCreator ReferenceType ConfigurationException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Configuration element "" MemberReference name Literal "" not found in "" MethodInvocation parent getNodeName Literal ""."" BlockStatement ReturnStatement Literal null End MethodDeclaration /**
     * Returns the value of the named attribute of the given element.
     *
     * @param element element
     * @param name attribute name
     * @return attribute value
     * @throws ConfigurationException if the attribute is not found
     */ Modifier protected ReferenceType String getAttribute FormalParameter ReferenceType Element element FormalParameter ReferenceType String name ConfigurationException LocalVariableDeclaration ReferenceType Attr VariableDeclarator attribute MethodInvocation element MemberReference name getAttributeNode IfStatement BinaryOperation != MemberReference attribute Literal null BlockStatement ReturnStatement MethodInvocation attribute getValue BlockStatement ThrowStatement ClassCreator ReferenceType ConfigurationException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Configuration attribute "" MemberReference name Literal "" not found in "" MethodInvocation element getNodeName Literal ""."" End MethodDeclaration /**
     * Returns the value of the named attribute of the given element.
     * If the attribute is not found, then the given default value is returned.
     *
     * @param element element
     * @param name attribute name
     * @param def default value
     * @return attribute value, or the default value
     */ Modifier protected ReferenceType String getAttribute FormalParameter ReferenceType Element element FormalParameter ReferenceType String name FormalParameter ReferenceType String def LocalVariableDeclaration ReferenceType Attr VariableDeclarator attribute MethodInvocation element MemberReference name getAttributeNode IfStatement BinaryOperation != MemberReference attribute Literal null BlockStatement ReturnStatement MethodInvocation attribute getValue BlockStatement ReturnStatement MemberReference def End MethodDeclaration /**
     * Creates a new instance of a configuration parser but with overlayed
     * variables.
     *
     * @param variables the variables overlay
     * @return a new configuration parser instance
     */ Modifier protected ReferenceType ConfigurationParser createSubParser FormalParameter ReferenceType Properties variables LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties This MemberReference variables StatementExpression MethodInvocation props MemberReference variables putAll ReturnStatement ClassCreator ReferenceType ConfigurationParser MemberReference props",0
597,597,,0
634,634,,0
539,539,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.cli Import java.util.ArrayList Import java.util.Iterator Import java.util.LinkedList Import java.util.List Import java.util.Map Import org.apache.commons.chain.Catalog Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.chain.config.ConfigParser Import org.apache.commons.chain.impl.CatalogFactoryBase Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory ClassDeclaration Modifier public /**
 * Input Parser
 */ JcrParser FieldDeclaration /** parser */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType JcrParser getLog TryStatement LocalVariableDeclaration ReferenceType ConfigParser VariableDeclarator parser ClassCreator ReferenceType ConfigParser StatementExpression MethodInvocation parser ClassReference MethodInvocation Literal ""command.xml"" getResource ReferenceType JcrParser parse CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace StatementExpression MethodInvocation log MemberReference e error FieldDeclaration /** catalog */ Modifier private ReferenceType Catalog VariableDeclarator catalog MethodInvocation CatalogFactoryBase MethodInvocation getCatalog getInstance FieldDeclaration /** Command */ Modifier private ReferenceType Command VariableDeclarator cmd FieldDeclaration /** Command Line */ Modifier private ReferenceType CommandLine VariableDeclarator cl ConstructorDeclaration Modifier public /**
     * Constructor
     */ JcrParser StatementExpression SuperConstructorInvocation MethodDeclaration /**
     * Parse the user's input.
     * @param input
     *        user's input
     * @throws JcrParserException
     *         if the input is illegal
     * @throws ConfigurationException
     *         if the mapped command can't be mapped to a Commons Chain Command
     */ Modifier public parse FormalParameter ReferenceType String input JcrParserException ConfigurationException StatementExpression Assignment This MemberReference cl Literal null = StatementExpression Assignment This MemberReference cmd Literal null = IfStatement BinaryOperation || BinaryOperation == MemberReference input Literal null BinaryOperation == MethodInvocation input length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType JcrParserException Literal ""exception.parse.input.empty"" End LocalVariableDeclaration ReferenceType LinkedList VariableDeclarator args This MethodInvocation MemberReference input getArguments LocalVariableDeclaration ReferenceType String VariableDeclarator cmdName Cast ReferenceType String MethodInvocation args getFirst StatementExpression MethodInvocation args removeFirst StatementExpression Assignment MemberReference cl MethodInvocation CommandLineFactory MethodInvocation MemberReference cmdName getCommandLine getInstance = StatementExpression MethodInvocation MemberReference cl MemberReference args populate StatementExpression MethodInvocation MemberReference cl validate LocalVariableDeclaration ReferenceType String VariableDeclarator impl MethodInvocation cl getImpl IfStatement BinaryOperation == MemberReference impl Literal null BlockStatement StatementExpression Assignment MemberReference impl MethodInvocation cl getName = End StatementExpression Assignment MemberReference cmd MethodInvocation catalog MemberReference impl getCommand = IfStatement BinaryOperation == MemberReference cmd Literal null BlockStatement ThrowStatement ClassCreator ReferenceType JcrParserException BinaryOperation + Literal ""no chain command for name "" MemberReference impl End MethodDeclaration /**
     * Tokenize user's input
     * @param input
     *        the user's input
     * @return a <code>List</code> containing the arguments
     */ Modifier private ReferenceType LinkedList getArguments FormalParameter ReferenceType String input LocalVariableDeclaration ReferenceType LinkedList VariableDeclarator args ClassCreator ReferenceType LinkedList LocalVariableDeclaration BasicType int VariableDeclarator length MethodInvocation input length LocalVariableDeclaration BasicType boolean VariableDeclarator insideSingleQuote Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator insideDoubleQuote Literal false LocalVariableDeclaration BasicType int VariableDeclarator escape Literal - 1 LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator arg ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation input MemberReference i charAt IfStatement BinaryOperation & BinaryOperation & MemberReference ! insideSingleQuote MemberReference ! insideDoubleQuote MethodInvocation Character MemberReference c isWhitespace BlockStatement IfStatement BinaryOperation > MethodInvocation arg MethodInvocation trim MethodInvocation length toString Literal 0 BlockStatement StatementExpression MethodInvocation args MethodInvocation arg MethodInvocation trim toString add StatementExpression Assignment MemberReference arg ClassCreator ReferenceType StringBuffer = End ContinueStatement End IfStatement BinaryOperation == MemberReference i MemberReference escape BlockStatement StatementExpression MethodInvocation arg MemberReference c append BlockStatement SwitchStatement MemberReference c SwitchStatementCase Literal '\\' StatementExpression Assignment MemberReference escape BinaryOperation + MemberReference i Literal 1 = BreakStatement SwitchStatementCase Literal '""' StatementExpression Assignment MemberReference insideDoubleQuote MemberReference ! insideDoubleQuote = BreakStatement SwitchStatementCase Literal '\'' StatementExpression Assignment MemberReference insideSingleQuote MemberReference ! insideSingleQuote = BreakStatement SwitchStatementCase StatementExpression MethodInvocation arg MemberReference c append BreakStatement End End End IfStatement BinaryOperation > MethodInvocation arg MethodInvocation trim MethodInvocation length toString Literal 0 BlockStatement StatementExpression MethodInvocation args MethodInvocation arg toString add End ReturnStatement MemberReference args MethodDeclaration /**
     * Populate the <code>Context</code> with the attributes needed by the
     * <code>Command</code>
     * @param ctx
     *        the <code>Context</code>
     */ Modifier public populateContext FormalParameter ReferenceType Context ctx LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation cl getAllParameters WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType AbstractParameter VariableDeclarator param Cast ReferenceType AbstractParameter MethodInvocation iter next StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""add ctx attr: "" MethodInvocation param getContextKey Literal ""="" MethodInvocation param getValue debug StatementExpression MethodInvocation ctx MethodInvocation param getContextKey MethodInvocation param getValue put End MethodDeclaration /**
     * Remove <code>Context</code> attribute specific to the parsed
     * <code>Command</code>
     * @param ctx
     *        the <code>Context</code>
     */ Modifier public depopulateContext FormalParameter ReferenceType Context ctx LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation cl getAllParameters WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType AbstractParameter VariableDeclarator param Cast ReferenceType AbstractParameter MethodInvocation iter next LocalVariableDeclaration ReferenceType String VariableDeclarator ctxKey MethodInvocation param getContextKey StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""remove ctx attr: "" MemberReference ctxKey Literal ""="" MethodInvocation param getValue debug StatementExpression MethodInvocation ctx MemberReference ctxKey remove End MethodDeclaration /**
     * @return the <code>Command</code>
     */ Modifier public ReferenceType Command getCommand ReturnStatement MemberReference cmd MethodDeclaration /**
     * Populate the <code>CommandLine</code> with the given parameters
     * @param cl
     *        the <code>CommandLine</code>
     * @param valList
     *        the arguments
     * @throws JcrParserException
     *         if the user's input is illegal
     */ Modifier private populate FormalParameter ReferenceType CommandLine cl FormalParameter ReferenceType List valList JcrParserException LocalVariableDeclaration ReferenceType String VariableDeclarator values Cast ReferenceType String MethodInvocation valList ArrayCreator ReferenceType String MethodInvocation valList size toArray LocalVariableDeclaration ReferenceType Map VariableDeclarator options MethodInvocation cl getOptions LocalVariableDeclaration ReferenceType Map VariableDeclarator flags MethodInvocation cl getFlags LocalVariableDeclaration ReferenceType Map VariableDeclarator clArgs MethodInvocation cl getArguments LocalVariableDeclaration ReferenceType List VariableDeclarator args ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator value MemberReference ArraySelector MemberReference i values IfStatement MethodInvocation value Literal ""-"" startsWith BlockStatement IfStatement BinaryOperation && BinaryOperation < BinaryOperation + MemberReference i Literal 1 MemberReference values length MemberReference ! ArraySelector BinaryOperation + MemberReference i Literal 1 MethodInvocation Literal ""-"" startsWith values BlockStatement LocalVariableDeclaration ReferenceType Option VariableDeclarator opt Cast ReferenceType Option MethodInvocation options MethodInvocation value Literal 1 substring get IfStatement BinaryOperation == MemberReference opt Literal null BlockStatement ThrowStatement ClassCreator ReferenceType JcrParserException Literal ""exception.no.opt.for.name"" ArrayCreator ReferenceType String ArrayInitializer MethodInvocation value Literal 1 substring End StatementExpression MethodInvocation opt MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 values setValue StatementExpression MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Flag VariableDeclarator flag Cast ReferenceType Flag MethodInvocation flags MethodInvocation value Literal 1 substring get IfStatement BinaryOperation == MemberReference flag Literal null BlockStatement ThrowStatement ClassCreator ReferenceType JcrParserException Literal ""exception.no.flag.for.name"" ArrayCreator ReferenceType String ArrayInitializer MemberReference value End StatementExpression MethodInvocation flag Literal true setPresent End BlockStatement StatementExpression MethodInvocation args MemberReference value add End End LocalVariableDeclaration ReferenceType String VariableDeclarator argValues Cast ReferenceType String MethodInvocation args ArrayCreator ReferenceType String MethodInvocation args size toArray ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference argValues length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType Argument VariableDeclarator arg Cast ReferenceType Argument MethodInvocation clArgs ClassCreator ReferenceType Integer MemberReference j get IfStatement BinaryOperation == MemberReference arg Literal null BlockStatement ThrowStatement ClassCreator ReferenceType JcrParserException Literal ""exception.more.arguments.than.expected"" End StatementExpression MethodInvocation arg MemberReference ArraySelector MemberReference j argValues setValue End MethodDeclaration /**
     * Validate the <code>CommandLine</code>
     * @param cl
     *        the <code>CommandLine</code>
     * @throws JcrParserException
     *         if a required parameter is not present in the user's input
     */ Modifier private validate FormalParameter ReferenceType CommandLine cl JcrParserException LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation cl getRequiredParameters WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType AbstractParameter VariableDeclarator param Cast ReferenceType AbstractParameter MethodInvocation iter next IfStatement BinaryOperation == MethodInvocation param getValue Literal null BlockStatement ThrowStatement ClassCreator ReferenceType JcrParserException Literal ""exception.missing.paramater"" ArrayCreator ReferenceType String ArrayInitializer MethodInvocation param getName End End",0
846,846,,0
749,749,,0
335,335,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.security Import org.apache.jackrabbit.core.HierarchyManager Import org.apache.jackrabbit.core.ItemId Import org.apache.log4j.Logger Import javax.jcr.AccessDeniedException Import javax.jcr.ItemNotFoundException Import javax.jcr.NoSuchWorkspaceException Import javax.jcr.RepositoryException Import javax.security.auth.Subject ClassDeclaration Modifier public /**
 * <code>SimpleAccessManager</code> ...
 */ SimpleAccessManager FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType SimpleAccessManager getLogger FieldDeclaration /**
     * Subject whose access rights this AccessManager should reflect
     */ Modifier protected ReferenceType Subject VariableDeclarator subject FieldDeclaration /**
     * hierarchy manager used for ACL-based access control model
     */ Modifier protected ReferenceType HierarchyManager VariableDeclarator hierMgr FieldDeclaration Modifier private BasicType boolean VariableDeclarator initialized FieldDeclaration Modifier protected BasicType boolean VariableDeclarator system FieldDeclaration Modifier protected BasicType boolean VariableDeclarator anonymous ConstructorDeclaration Modifier public /**
     * Empty constructor
     */ SimpleAccessManager StatementExpression Assignment MemberReference initialized Literal false = StatementExpression Assignment MemberReference anonymous Literal false = StatementExpression Assignment MemberReference system Literal false = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public init FormalParameter ReferenceType AMContext context AccessDeniedException Exception IfStatement MemberReference initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""already initialized"" End StatementExpression Assignment MemberReference subject MethodInvocation context getSubject = StatementExpression Assignment MemberReference hierMgr MethodInvocation context getHierarchyManager = StatementExpression Assignment MemberReference anonymous MethodInvocation ! subject MethodInvocation isEmpty ClassReference ReferenceType AnonymousPrincipal getPrincipals = StatementExpression Assignment MemberReference system MethodInvocation ! subject MethodInvocation isEmpty ClassReference ReferenceType SystemPrincipal getPrincipals = StatementExpression Assignment MemberReference initialized Literal true = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized close Exception IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End StatementExpression Assignment MemberReference initialized Literal false = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public checkPermission FormalParameter ReferenceType ItemId id FormalParameter BasicType int permissions AccessDeniedException ItemNotFoundException RepositoryException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End IfStatement MemberReference system BlockStatement ReturnStatement IfStatement MemberReference anonymous BlockStatement IfStatement BinaryOperation || BinaryOperation == BinaryOperation & MemberReference permissions MemberReference WRITE MemberReference WRITE BinaryOperation == BinaryOperation & MemberReference permissions MemberReference REMOVE MemberReference REMOVE BlockStatement ThrowStatement ClassCreator ReferenceType AccessDeniedException End End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isGranted FormalParameter ReferenceType ItemId id FormalParameter BasicType int permissions ItemNotFoundException RepositoryException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End IfStatement MemberReference system BlockStatement ReturnStatement Literal true IfStatement MemberReference anonymous BlockStatement IfStatement BinaryOperation || BinaryOperation == BinaryOperation & MemberReference permissions MemberReference WRITE MemberReference WRITE BinaryOperation == BinaryOperation & MemberReference permissions MemberReference REMOVE MemberReference REMOVE BlockStatement ReturnStatement Literal false End End End ReturnStatement Literal true MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean canAccess FormalParameter ReferenceType String workspaceName NoSuchWorkspaceException RepositoryException ReturnStatement Literal true ReferenceType AccessManager",1
402,402,"CompilationUnit PackageDeclaration org.apache.jackrabbit.jca Import org.apache.jackrabbit.core.RepositoryImpl Import org.apache.jackrabbit.core.XASession Import javax.jcr.Credentials Import javax.jcr.RepositoryException Import javax.resource.ResourceException Import javax.resource.spi.ConnectionManager Import javax.resource.spi.ConnectionRequestInfo Import javax.resource.spi.ManagedConnection Import javax.resource.spi.ManagedConnectionFactory Import javax.security.auth.Subject Import java.io.PrintWriter Import java.util.Iterator Import java.util.Set ClassDeclaration Modifier public final /**
 * Implements the JCA ManagedConnectionFactory contract.
 */ JCAManagedConnectionFactory FieldDeclaration /**
     * Home directory.
     */ Modifier private ReferenceType String VariableDeclarator homeDir FieldDeclaration /**
     * Config file.
     */ Modifier private ReferenceType String VariableDeclarator configFile FieldDeclaration /**
     * Repository.
     */ Modifier private transient ReferenceType RepositoryImpl VariableDeclarator repository FieldDeclaration /**
     * Log writer.
     */ Modifier private transient ReferenceType PrintWriter VariableDeclarator logWriter MethodDeclaration /**
     * Return the repository home directory.
     */ Modifier public ReferenceType String getHomeDir ReturnStatement MemberReference homeDir MethodDeclaration /**
     * Set the repository home directory.
     */ Modifier public setHomeDir FormalParameter ReferenceType String homeDir StatementExpression Assignment This MemberReference homeDir MemberReference homeDir = MethodDeclaration /**
     * Return the repository configuration file.
     */ Modifier public ReferenceType String getConfigFile ReturnStatement MemberReference configFile MethodDeclaration /**
     * Set the repository configuration file.
     */ Modifier public setConfigFile FormalParameter ReferenceType String configFile StatementExpression Assignment This MemberReference configFile MemberReference configFile = MethodDeclaration /**
     * Get the log writer.
     */ Modifier public ReferenceType PrintWriter getLogWriter ReturnStatement MemberReference logWriter MethodDeclaration /**
     * Set the log writer.
     */ Modifier public setLogWriter FormalParameter ReferenceType PrintWriter logWriter ResourceException StatementExpression Assignment This MemberReference logWriter MemberReference logWriter = MethodDeclaration /**
     * Creates a Connection Factory instance.
     */ Modifier public ReferenceType Object createConnectionFactory ResourceException ReturnStatement MethodInvocation ClassCreator ReferenceType JCAConnectionManager createConnectionFactory MethodDeclaration /**
     * Creates a Connection Factory instance.
     */ Modifier public ReferenceType Object createConnectionFactory FormalParameter ReferenceType ConnectionManager cm ResourceException StatementExpression MethodInvocation createRepository LocalVariableDeclaration ReferenceType JCARepositoryHandle VariableDeclarator handle ClassCreator ReferenceType JCARepositoryHandle This MemberReference cm StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Created repository handle ("" MemberReference handle Literal "")"" log ReturnStatement MemberReference handle MethodDeclaration /**
     * Create a new session.
     */ Modifier private ReferenceType XASession openSession FormalParameter ReferenceType JCAConnectionRequestInfo cri ResourceException StatementExpression MethodInvocation createRepository LocalVariableDeclaration ReferenceType Credentials VariableDeclarator creds MethodInvocation cri getCredentials LocalVariableDeclaration ReferenceType String VariableDeclarator workspace MethodInvocation cri getWorkspace TryStatement LocalVariableDeclaration ReferenceType XASession VariableDeclarator session Cast ReferenceType XASession MethodInvocation MethodInvocation MemberReference creds MemberReference workspace login getRepository StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Created session ("" MemberReference session Literal "")"" log ReturnStatement MemberReference session CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation Literal ""Failed to create session"" MemberReference e log ThrowStatement ClassCreator ReferenceType ResourceException MemberReference e MethodDeclaration /**
     * Creates a new physical connection to the underlying EIS resource manager.
     */ Modifier public ReferenceType ManagedConnection createManagedConnection FormalParameter ReferenceType Subject subject FormalParameter ReferenceType ConnectionRequestInfo cri ResourceException ReturnStatement MethodInvocation Cast ReferenceType JCAConnectionRequestInfo MemberReference cri createManagedConnection MethodDeclaration /**
     * Creates a new physical connection to the underlying EIS resource manager.
     */ Modifier private ReferenceType ManagedConnection createManagedConnection FormalParameter ReferenceType JCAConnectionRequestInfo cri ResourceException ReturnStatement ClassCreator ReferenceType JCAManagedConnection This MemberReference cri MethodInvocation MemberReference cri openSession MethodDeclaration /**
     * Returns a matched connection from the candidate set of connections.
     */ Modifier public ReferenceType ManagedConnection matchManagedConnections FormalParameter ReferenceType Set set FormalParameter ReferenceType Subject subject FormalParameter ReferenceType ConnectionRequestInfo cri ResourceException ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation set iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator next MethodInvocation i next IfStatement BinaryOperation instanceof MemberReference next ReferenceType JCAManagedConnection BlockStatement LocalVariableDeclaration ReferenceType JCAManagedConnection VariableDeclarator mc Cast ReferenceType JCAManagedConnection MemberReference next IfStatement MethodInvocation MethodInvocation mc getManagedConnectionFactory equals BlockStatement LocalVariableDeclaration ReferenceType JCAConnectionRequestInfo VariableDeclarator otherCri MethodInvocation mc getConnectionRequestInfo IfStatement MethodInvocation MemberReference cri MemberReference otherCri equals BlockStatement ReturnStatement MemberReference mc End End End End ReturnStatement Literal null MethodDeclaration /**
     * Return the repository.
     */ Modifier public ReferenceType RepositoryImpl getRepository ReturnStatement MemberReference repository MethodDeclaration /**
     * Log a message.
     */ Modifier public log FormalParameter ReferenceType String message StatementExpression MethodInvocation MemberReference message Literal null log MethodDeclaration /**
     * Log a message.
     */ Modifier public log FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable exception IfStatement BinaryOperation != MemberReference logWriter Literal null BlockStatement StatementExpression MethodInvocation logWriter MemberReference message println IfStatement BinaryOperation != MemberReference exception Literal null BlockStatement StatementExpression MethodInvocation exception MemberReference logWriter printStackTrace End End MethodDeclaration /**
     * Return the hash code.
     */ Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator result TernaryExpression BinaryOperation != MemberReference homeDir Literal null MethodInvocation homeDir hashCode Literal 0 StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * Literal 37 MemberReference result TernaryExpression BinaryOperation != MemberReference configFile Literal null MethodInvocation configFile hashCode Literal 0 = ReturnStatement MemberReference result MethodDeclaration /**
     * Return true if equals.
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation == MemberReference o This BlockStatement ReturnStatement Literal true IfStatement BinaryOperation instanceof MemberReference o ReferenceType JCAManagedConnectionFactory BlockStatement ReturnStatement MethodInvocation Cast ReferenceType JCAManagedConnectionFactory MemberReference o equals BlockStatement ReturnStatement Literal false End End MethodDeclaration /**
     * Return true if equals.
     */ Modifier private BasicType boolean equals FormalParameter ReferenceType JCAManagedConnectionFactory o ReturnStatement BinaryOperation && MethodInvocation MemberReference homeDir MemberReference o homeDir equals MethodInvocation MemberReference configFile MemberReference o configFile equals MethodDeclaration /**
     * Return true if equals.
     */ Modifier private BasicType boolean equals FormalParameter ReferenceType Object o1 FormalParameter ReferenceType Object o2 IfStatement BinaryOperation == MemberReference o1 MemberReference o2 BlockStatement ReturnStatement Literal true IfStatement BinaryOperation || BinaryOperation == MemberReference o1 Literal null BinaryOperation == MemberReference o2 Literal null BlockStatement ReturnStatement Literal false BlockStatement ReturnStatement MethodInvocation o1 MemberReference o2 equals End End MethodDeclaration /**
     * Shutdown the repository.
     */ Modifier protected finalize StatementExpression MethodInvocation shutdownRepository MethodDeclaration /**
     * Create repository.
     */ Modifier private createRepository ResourceException IfStatement BinaryOperation == MemberReference repository Literal null BlockStatement IfStatement BinaryOperation || BinaryOperation == MemberReference homeDir Literal null MethodInvocation homeDir Literal """" equals BlockStatement ThrowStatement ClassCreator ReferenceType ResourceException Literal ""Property 'homeDir' not set"" End IfStatement BinaryOperation || BinaryOperation == MemberReference configFile Literal null MethodInvocation configFile Literal """" equals BlockStatement ThrowStatement ClassCreator ReferenceType ResourceException Literal ""Property 'configFile' not set"" End TryStatement LocalVariableDeclaration ReferenceType JCARepositoryManager VariableDeclarator mgr MethodInvocation JCARepositoryManager getInstance StatementExpression Assignment MemberReference repository MethodInvocation mgr MemberReference homeDir MemberReference configFile createRepository = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Created repository ("" MemberReference repository Literal "")"" log CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation Literal ""Failed to create repository"" MemberReference e log ThrowStatement ClassCreator ReferenceType ResourceException MemberReference e End MethodDeclaration /**
     * Shutdown the repository.
     */ Modifier private shutdownRepository LocalVariableDeclaration ReferenceType JCARepositoryManager VariableDeclarator mgr MethodInvocation JCARepositoryManager getInstance StatementExpression MethodInvocation mgr MemberReference homeDir MemberReference configFile shutdownRepository ReferenceType ManagedConnectionFactory",0
282,282,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import java.io.IOException InterfaceDeclaration Modifier public /**
 * <code>HierarchyResolver</code> extends an {@link org.apache.lucene.index.IndexReader}
 * with the ability to resolve a JCR hierarchy.
 */ HierarchyResolver MethodDeclaration /**
     * Returns the document number of the parent of <code>n</code> or
     * <code>-1</code> if <code>n</code> does not have a parent (<code>n</code>
     * is the root node).
     *
     * @param n the document number.
     * @return the document number of <code>n</code>'s parent.
     * @throws java.io.IOException if an error occurs while reading from the index.
     */ Modifier public BasicType int getParent FormalParameter BasicType int n IOException",1
514,514,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav Import org.apache.jackrabbit.webdav.property.DavPropertyNameSet Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.xml.ElementIterator Import org.w3c.dom.Element Import org.w3c.dom.Document Import java.util.Iterator Import java.util.HashMap ClassDeclaration Modifier public /**
 * MultiStatus representing the content of a multistatus response body and
 * allows to retrieve the Xml representation.
 */ MultiStatus FieldDeclaration /**
     * Map collecting the responses for this multistatus, where every href must
     * only occure one single time.
     */ Modifier private ReferenceType HashMap VariableDeclarator responses ClassCreator ReferenceType HashMap FieldDeclaration /**
     * A general response description at the multistatus top level is used to
     * provide a general message describing the overarching nature of the response.
     * If this value is available an application may use it instead of
     * presenting the individual response descriptions contained within the
     * responses.
     */ Modifier private ReferenceType String VariableDeclarator responseDescription MethodDeclaration /**
     * Add response(s) to this multistatus, in order to build a multistatus for
     * responding to a PROPFIND request.
     *
     * @param resource The resource to add property from
     * @param propNameSet The requested property names of the PROPFIND request
     * @param propFindType
     * @param depth
     */ Modifier public addResourceProperties FormalParameter ReferenceType DavResource resource FormalParameter ReferenceType DavPropertyNameSet propNameSet FormalParameter BasicType int propFindType FormalParameter BasicType int depth StatementExpression MethodInvocation ClassCreator ReferenceType MultiStatusResponse MemberReference resource MemberReference propNameSet MemberReference propFindType addResponse IfStatement BinaryOperation > MemberReference depth Literal 0 BlockStatement LocalVariableDeclaration ReferenceType DavResourceIterator VariableDeclarator iter MethodInvocation resource getMembers WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression MethodInvocation MethodInvocation iter nextResource MemberReference propNameSet MemberReference propFindType BinaryOperation - MemberReference depth Literal 1 addResourceProperties End End MethodDeclaration /**
     * Add response(s) to this multistatus, in order to build a multistatus e.g.
     * in order to respond to a PROPFIND request. Please note, that in terms
     * of PROPFIND, this method would correspond to a
     * {@link DavConstants#PROPFIND_BY_PROPERTY} propfind type.
     *
     * @param resource The resource to add property from
     * @param propNameSet The requested property names of the PROPFIND request
     * @param depth
     * @see #addResourceProperties(DavResource, DavPropertyNameSet, int, int) for
     * the corresponding method that allows to specify the type explicitely.
     */ Modifier public addResourceProperties FormalParameter ReferenceType DavResource resource FormalParameter ReferenceType DavPropertyNameSet propNameSet FormalParameter BasicType int depth StatementExpression MethodInvocation MemberReference resource MemberReference propNameSet MemberReference PROPFIND_BY_PROPERTY MemberReference depth addResourceProperties MethodDeclaration /**
     * Add response(s) to this multistatus, in order to build a multistatus
     * as returned for COPY, MOVE, LOCK or DELETE requests resulting in an error
     * with a resource other than the resource identified in the Request-URI.
     *
     * @param resource
     * @param status
     * @param depth
     */ Modifier public addResourceStatus FormalParameter ReferenceType DavResource resource FormalParameter BasicType int status FormalParameter BasicType int depth StatementExpression MethodInvocation ClassCreator ReferenceType MultiStatusResponse MethodInvocation resource getHref MemberReference status addResponse IfStatement BinaryOperation > MemberReference depth Literal 0 BlockStatement LocalVariableDeclaration ReferenceType DavResourceIterator VariableDeclarator iter MethodInvocation resource getMembers WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression MethodInvocation MethodInvocation iter nextResource MemberReference status BinaryOperation - MemberReference depth Literal 1 addResourceStatus End End MethodDeclaration /**
     * Add a <code>MultiStatusResponse</code> element to this <code>MultiStatus</code>
     *
     * @param response
     */ Modifier public addResponse FormalParameter ReferenceType MultiStatusResponse response StatementExpression MethodInvocation responses MethodInvocation response getHref MemberReference response put MethodDeclaration /**
     * Returns the multistatus responses present as array.
     *
     * @return array of all {@link MultiStatusResponse responses} present in this
     * multistatus.
     */ Modifier public ReferenceType MultiStatusResponse getResponses ReturnStatement Cast ReferenceType MultiStatusResponse MethodInvocation responses MethodInvocation ArrayCreator ReferenceType MultiStatusResponse MethodInvocation responses size toArray values MethodDeclaration /**
     * Set the response description.
     *
     * @param responseDescription
     */ Modifier public setResponseDescription FormalParameter ReferenceType String responseDescription StatementExpression Assignment This MemberReference responseDescription MemberReference responseDescription = MethodDeclaration /**
     * Returns the response description.
     *
     * @return responseDescription
     */ Modifier public ReferenceType String getResponseDescription ReturnStatement MemberReference responseDescription MethodDeclaration /**
     * Return the Xml representation of this <code>MultiStatus</code>.
     *
     * @return Xml document
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator multistatus MethodInvocation DomUtil MemberReference document MemberReference XML_MULTISTATUS MemberReference NAMESPACE createElement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation responses MethodInvocation iterator values WhileStatement MethodInvocation it hasNext BlockStatement StatementExpression MethodInvocation multistatus Cast ReferenceType MultiStatusResponse MethodInvocation it next appendChild End IfStatement BinaryOperation != MemberReference responseDescription Literal null BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator respDesc MethodInvocation DomUtil MemberReference document MemberReference XML_RESPONSEDESCRIPTION MemberReference NAMESPACE MemberReference responseDescription createElement StatementExpression MethodInvocation multistatus MemberReference respDesc appendChild End ReturnStatement MemberReference multistatus MethodDeclaration /**
     * Build a <code>MultiStatus</code> from the specified xml element.
     *
     * @param multistatusElement
     * @return new <code>MultiStatus</code> instance.
     * @throws IllegalArgumentException if the given document is <code>null</code>
     * or does not provide the required element.
     */ Modifier public static ReferenceType MultiStatus createFromXml FormalParameter ReferenceType Element multistatusElement IfStatement MethodInvocation ! DomUtil MemberReference multistatusElement MemberReference XML_MULTISTATUS MemberReference NAMESPACE matches BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""DAV:multistatus element expected."" End LocalVariableDeclaration ReferenceType MultiStatus VariableDeclarator multistatus ClassCreator ReferenceType MultiStatus LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator it MethodInvocation DomUtil MemberReference multistatusElement MemberReference XML_RESPONSE MemberReference NAMESPACE getChildren WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator respElem MethodInvocation it nextElement LocalVariableDeclaration ReferenceType MultiStatusResponse VariableDeclarator response MethodInvocation MultiStatusResponse MemberReference respElem createFromXml StatementExpression MethodInvocation multistatus MemberReference response addResponse End StatementExpression MethodInvocation multistatus MethodInvocation DomUtil MemberReference multistatusElement MemberReference XML_RESPONSEDESCRIPTION MemberReference NAMESPACE getChildText setResponseDescription ReturnStatement MemberReference multistatus ReferenceType DavConstants ReferenceType XmlSerializable",0
441,441,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.lock Import org.apache.jackrabbit.uuid.UUID Import org.apache.jackrabbit.webdav.DavConstants ClassDeclaration Modifier public /**
 * <code>DefaultActiveLock</code> implements the <code>ActiveLock</code> interface
 * and represents an exclusive write lock with a random uuid lock token.
 * Lock owner, timeout and depth is retrieved from the {@link LockInfo} object
 * passed in the constructor. If the lockinfo is null, the following default
 * values are set:<pre>
 * - timeout is set to infinity.
 * - isDeep is set to true.
 * <pre>
 */ DefaultActiveLock FieldDeclaration Modifier private final ReferenceType String VariableDeclarator token BinaryOperation + MemberReference DavConstants OPAQUE_LOCK_TOKEN_PREFIX MethodInvocation UUID MethodInvocation toString randomUUID FieldDeclaration Modifier private ReferenceType String VariableDeclarator owner FieldDeclaration Modifier private BasicType boolean VariableDeclarator isDeep Literal true FieldDeclaration Modifier private BasicType long VariableDeclarator expirationTime MemberReference DavConstants INFINITE_TIMEOUT ConstructorDeclaration Modifier public /**
     * Create a new <code>DefaultActiveLock</code> with default values.
     */ DefaultActiveLock ConstructorDeclaration Modifier public /**
     * Create a new lock
     *
     * @param lockInfo
     * @throws IllegalArgumentException if either scope or type is invalid.
     */ DefaultActiveLock FormalParameter ReferenceType LockInfo lockInfo IfStatement BinaryOperation != MemberReference lockInfo Literal null BlockStatement IfStatement BinaryOperation && MethodInvocation Type.WRITE MethodInvocation lockInfo getType equals MethodInvocation Scope.EXCLUSIVE MethodInvocation lockInfo getScope equals BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Only 'exclusive write' lock is allowed scope/type pair."" End StatementExpression Assignment MemberReference owner MethodInvocation lockInfo getOwner = StatementExpression Assignment MemberReference isDeep MethodInvocation lockInfo isDeep = StatementExpression MethodInvocation MethodInvocation lockInfo getTimeout setTimeout End MethodDeclaration /**
     * @see ActiveLock#isLockedByToken(String)
     */ Modifier public BasicType boolean isLockedByToken FormalParameter ReferenceType String lockToken ReturnStatement BinaryOperation && BinaryOperation != MemberReference token Literal null MethodInvocation token MemberReference lockToken equals MethodDeclaration /**
     * @see ActiveLock#isExpired()
     */ Modifier public BasicType boolean isExpired ReturnStatement BinaryOperation > MethodInvocation System currentTimeMillis MemberReference expirationTime MethodDeclaration /**
     * @see ActiveLock#getToken()
     */ Modifier public ReferenceType String getToken ReturnStatement MemberReference token MethodDeclaration /**
     * @see ActiveLock#getOwner()
     */ Modifier public ReferenceType String getOwner ReturnStatement MemberReference owner MethodDeclaration /**
     * @see ActiveLock#setOwner(String)
     */ Modifier public setOwner FormalParameter ReferenceType String owner StatementExpression Assignment This MemberReference owner MemberReference owner = MethodDeclaration /**
     * @see ActiveLock#getTimeout()
     */ Modifier public BasicType long getTimeout ReturnStatement BinaryOperation - MemberReference expirationTime MethodInvocation System currentTimeMillis MethodDeclaration /**
     * @see ActiveLock#setTimeout(long)
     */ Modifier public setTimeout FormalParameter BasicType long timeout IfStatement BinaryOperation > MemberReference timeout Literal 0 BlockStatement StatementExpression Assignment MemberReference expirationTime BinaryOperation + MethodInvocation System currentTimeMillis MemberReference timeout = End MethodDeclaration /**
     * @see ActiveLock#isDeep()
     */ Modifier public BasicType boolean isDeep ReturnStatement MemberReference isDeep MethodDeclaration /**
     * @see ActiveLock#setIsDeep(boolean)
     */ Modifier public setIsDeep FormalParameter BasicType boolean isDeep StatementExpression Assignment This MemberReference isDeep MemberReference isDeep = MethodDeclaration /**
     * This is always a write lock.
     *
     * @return the lock type
     * @see Type#WRITE
     */ Modifier public ReferenceType Type getType ReturnStatement MemberReference Type WRITE MethodDeclaration /**
     * This is always an exclusive lock.
     *
     * @return the lock scope.
     * @see Scope#EXCLUSIVE
     */ Modifier public ReferenceType Scope getScope ReturnStatement MemberReference Scope EXCLUSIVE ReferenceType AbstractActiveLock",0
106,106,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.observation Import org.apache.jackrabbit.core.ItemManager Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.nodetype.NodeTypeImpl Import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl Import org.apache.jackrabbit.name.MalformedPathException Import org.apache.jackrabbit.name.Path Import org.apache.log4j.Logger Import javax.jcr.RepositoryException Import javax.jcr.observation.EventListener Import javax.jcr.observation.EventListenerIterator Import javax.jcr.observation.ObservationManager ClassDeclaration Modifier public /**
 * Each <code>Session</code> instance has its own <code>ObservationManager</code>
 * instance. The class <code>SessionLocalObservationManager</code> implements
 * this behaviour.
 */ ObservationManagerImpl FieldDeclaration /**
     * The logger instance of this class
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ObservationManagerImpl getLogger FieldDeclaration /**
     * The <code>Session</code> this <code>ObservationManager</code>
     * belongs to.
     */ Modifier private final ReferenceType SessionImpl VariableDeclarator session FieldDeclaration /**
     * The <code>ItemManager</code> for this <code>ObservationManager</code>.
     */ Modifier private final ReferenceType ItemManager VariableDeclarator itemMgr FieldDeclaration /**
     * The <code>ObservationManagerFactory</code>
     */ Modifier private final ReferenceType ObservationManagerFactory VariableDeclarator obsMgrFactory StatementExpression ClassReference MethodInvocation hashCode ReferenceType EventListenerIteratorImpl ConstructorDeclaration /**
     * Creates an <code>ObservationManager</code> instance.
     *
     * @param session the <code>Session</code> this ObservationManager
     *                belongs to.
     * @param itemMgr {@link org.apache.jackrabbit.core.ItemManager} of the passed
     *                <code>Session</code>.
     * @throws NullPointerException if <code>session</code> or <code>itemMgr</code>
     *                              is <code>null</code>.
     */ ObservationManagerImpl FormalParameter ReferenceType ObservationManagerFactory obsMgrFactory FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType ItemManager itemMgr NullPointerException IfStatement BinaryOperation == MemberReference session Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""session"" End IfStatement BinaryOperation == MemberReference itemMgr Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""itemMgr"" End StatementExpression Assignment This MemberReference obsMgrFactory MemberReference obsMgrFactory = StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference itemMgr MemberReference itemMgr = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public addEventListener FormalParameter ReferenceType EventListener listener FormalParameter BasicType int eventTypes FormalParameter ReferenceType String absPath FormalParameter BasicType boolean isDeep FormalParameter ReferenceType String uuid FormalParameter ReferenceType String nodeTypeName FormalParameter BasicType boolean noLocal RepositoryException LocalVariableDeclaration ReferenceType NodeTypeImpl VariableDeclarator nodeTypes IfStatement BinaryOperation == MemberReference nodeTypeName Literal null BlockStatement StatementExpression Assignment MemberReference nodeTypes Literal null = BlockStatement LocalVariableDeclaration ReferenceType NodeTypeManagerImpl VariableDeclarator ntMgr MethodInvocation session getNodeTypeManager StatementExpression Assignment MemberReference nodeTypes ArrayCreator ReferenceType NodeTypeImpl MemberReference nodeTypeName length = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference nodeTypes length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i nodeTypes Cast ReferenceType NodeTypeImpl MethodInvocation ntMgr MemberReference ArraySelector MemberReference i nodeTypeName getNodeType = End End LocalVariableDeclaration ReferenceType Path VariableDeclarator path TryStatement StatementExpression Assignment MemberReference path MethodInvocation Path MemberReference absPath MethodInvocation session getNamespaceResolver Literal true create = CatchClause CatchClauseParameter MalformedPathException mpe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""invalid path syntax: "" MemberReference absPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference mpe LocalVariableDeclaration ReferenceType EventFilter VariableDeclarator filter ClassCreator ReferenceType EventFilter MemberReference itemMgr MemberReference session MemberReference eventTypes MemberReference path MemberReference isDeep MemberReference uuid MemberReference nodeTypes MemberReference noLocal LocalVariableDeclaration ReferenceType EventConsumer VariableDeclarator consumer ClassCreator ReferenceType EventConsumer MemberReference session MemberReference listener MemberReference filter StatementExpression MethodInvocation obsMgrFactory MemberReference consumer addConsumer MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public removeEventListener FormalParameter ReferenceType EventListener listener RepositoryException LocalVariableDeclaration ReferenceType EventConsumer VariableDeclarator consumer ClassCreator ReferenceType EventConsumer MemberReference session MemberReference listener MemberReference EventFilter BLOCK_ALL StatementExpression MethodInvocation obsMgrFactory MemberReference consumer removeConsumer MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType EventListenerIterator getRegisteredEventListeners RepositoryException ReturnStatement ClassCreator ReferenceType EventListenerIteratorImpl MemberReference session MethodInvocation obsMgrFactory getSynchronousConsumers MethodInvocation obsMgrFactory getAsynchronousConsumers MethodDeclaration /**
     * Unregisters all EventListeners.
     */ Modifier public dispose TryStatement LocalVariableDeclaration ReferenceType EventListenerIterator VariableDeclarator it MethodInvocation getRegisteredEventListeners WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType EventListener VariableDeclarator l MethodInvocation it nextEventListener StatementExpression MethodInvocation log BinaryOperation + Literal ""removing EventListener: "" MemberReference l debug StatementExpression MethodInvocation MemberReference l removeEventListener End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log Literal ""Internal error: Unable to dispose ObservationManager."" MemberReference e error MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * Creates an <code>EventStateCollection</code> tied to the session
     * which is attached to this <code>ObservationManager</code> instance.
     */ Modifier public ReferenceType EventStateCollection createEventStateCollection ReturnStatement ClassCreator ReferenceType EventStateCollection MemberReference obsMgrFactory MemberReference session ReferenceType ObservationManager ReferenceType EventStateCollectionFactory",0
616,616,,0
237,237,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Workspace Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Clone the given <code>Node</code> to another <code>Workspace</code>
 */ Clone FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType Clone getLog FieldDeclaration /** Source workspace */ Modifier private ReferenceType String VariableDeclarator srcWorkspaceKey Literal ""scrWorkspace"" FieldDeclaration /** target workspace */ Modifier private ReferenceType String VariableDeclarator srcAbsPathKey Literal ""srcAbsPath"" FieldDeclaration /** source node */ Modifier private ReferenceType String VariableDeclarator destAbsPathKey Literal ""destAbsPath"" FieldDeclaration /** target node */ Modifier private ReferenceType String VariableDeclarator removeExistingKey Literal ""removeExisting"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator srcWorkspace Cast ReferenceType String MethodInvocation ctx This MemberReference srcWorkspaceKey get LocalVariableDeclaration ReferenceType String VariableDeclarator srcAbsPath Cast ReferenceType String MethodInvocation ctx This MemberReference srcAbsPathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator destAbsPath Cast ReferenceType String MethodInvocation ctx This MemberReference destAbsPathKey get LocalVariableDeclaration ReferenceType Boolean VariableDeclarator removeExisting MethodInvocation Boolean Cast ReferenceType String MethodInvocation ctx This MemberReference removeExistingKey get valueOf LocalVariableDeclaration ReferenceType Workspace VariableDeclarator w MethodInvocation CommandHelper MethodInvocation getWorkspace MemberReference ctx getSession IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""cloning node. from ["" MemberReference srcWorkspace Literal "":"" MemberReference srcAbsPath Literal ""] to ["" MethodInvocation w getName Literal "":"" MemberReference destAbsPath Literal ""]"" debug End StatementExpression MethodInvocation w MemberReference srcWorkspace MemberReference srcAbsPath MemberReference destAbsPath MethodInvocation removeExisting booleanValue clone ReturnStatement Literal false MethodDeclaration /**
     * @return the destination absolute path key
     */ Modifier public ReferenceType String getDestAbsPathKey ReturnStatement MemberReference destAbsPathKey MethodDeclaration /**
     * Sets the destination absolute path key
     * @param destAbsPathKey
     *        the destination absolute path key
     */ Modifier public setDestAbsPathKey FormalParameter ReferenceType String destAbsPathKey StatementExpression Assignment This MemberReference destAbsPathKey MemberReference destAbsPathKey = MethodDeclaration /**
     * @return the remove existing key option
     */ Modifier public ReferenceType String getRemoveExistingKey ReturnStatement MemberReference removeExistingKey MethodDeclaration /**
     * Set the remove existing key option
     * @param removeExistingKey
     *        the remove existing key option
     */ Modifier public setRemoveExistingKey FormalParameter ReferenceType String removeExistingKey StatementExpression Assignment This MemberReference removeExistingKey MemberReference removeExistingKey = MethodDeclaration /**
     * @return the source absolute path key
     */ Modifier public ReferenceType String getSrcAbsPathKey ReturnStatement MemberReference srcAbsPathKey MethodDeclaration /**
     * Sets the source absolute path key
     * @param srcAbsPathKey
     *        the source absolute path key
     */ Modifier public setSrcAbsPathKey FormalParameter ReferenceType String srcAbsPathKey StatementExpression Assignment This MemberReference srcAbsPathKey MemberReference srcAbsPathKey = MethodDeclaration /**
     * @return the source <code>Workspace</code> key
     */ Modifier public ReferenceType String getSrcWorkspaceKey ReturnStatement MemberReference srcWorkspaceKey MethodDeclaration /**
     * Sets the source <code>Workspace</code> key
     * @param srcWorkspaceKey
     *        the source <code>Workspace</code> key
     */ Modifier public setSrcWorkspaceKey FormalParameter ReferenceType String srcWorkspaceKey StatementExpression Assignment This MemberReference srcWorkspaceKey MemberReference srcWorkspaceKey = ReferenceType Command",1
540,540,"CompilationUnit PackageDeclaration org.apache.jackrabbit.lite Import javax.jcr.Node Import javax.jcr.RepositoryException Import javax.jcr.Session Import org.apache.jackrabbit.base.BaseNode ClassDeclaration Modifier public /**
 * TODO
 */ LiteNode FieldDeclaration Modifier private ReferenceType Session VariableDeclarator session MethodDeclaration Modifier public ReferenceType Session getSession RepositoryException ReturnStatement MemberReference session MethodDeclaration Modifier protected setSession FormalParameter ReferenceType Session session StatementExpression Assignment This MemberReference session MemberReference session = ReferenceType BaseNode ReferenceType Node",1
101,101,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Node Import javax.jcr.PropertyType Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Set a multivalue <code>Property</code> to the current working
 * <code>Node</code>.<br>
 * The default regular expression is "","".
 */ SetMultivalueProperty FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType SetMultivalueProperty getLog FieldDeclaration /** regular expression key */ Modifier private ReferenceType String VariableDeclarator regExpKey Literal ""regExp"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator regExp Cast ReferenceType String MethodInvocation ctx This MemberReference regExpKey get LocalVariableDeclaration ReferenceType String VariableDeclarator value Cast ReferenceType String MethodInvocation ctx This MemberReference valueKey get LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation ctx This MemberReference nameKey get LocalVariableDeclaration ReferenceType String VariableDeclarator type Cast ReferenceType String MethodInvocation ctx This MemberReference typeKey get LocalVariableDeclaration ReferenceType String VariableDeclarator parent Cast ReferenceType String MethodInvocation ctx This MemberReference parentPathKey get LocalVariableDeclaration ReferenceType Node VariableDeclarator node MethodInvocation CommandHelper MemberReference ctx MemberReference parent getNode IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""setting multivalue property from node at "" MethodInvocation node getPath Literal "". regexp="" MemberReference regExp Literal "" value="" MemberReference value Literal "" property="" MemberReference name debug End LocalVariableDeclaration ReferenceType String VariableDeclarator values MethodInvocation value MemberReference regExp split IfStatement BinaryOperation == MemberReference type Literal null BlockStatement StatementExpression MethodInvocation node MemberReference name MemberReference values setProperty BlockStatement StatementExpression MethodInvocation node MemberReference name MemberReference values MethodInvocation PropertyType MemberReference type valueFromName setProperty End ReturnStatement Literal false MethodDeclaration /**
     * @return the regular expression key
     */ Modifier public ReferenceType String getRegExpKey ReturnStatement MemberReference regExpKey MethodDeclaration /**
     * @param regExpKey
     *        the regular expression key to set
     */ Modifier public setRegExpKey FormalParameter ReferenceType String regExpKey StatementExpression Assignment This MemberReference regExpKey MemberReference regExpKey = ReferenceType AbstractSetProperty",0
431,431,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state ClassDeclaration Modifier public /**
 * The <code>NoSuchItemStateException</code> ...
 */ NoSuchItemStateException ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with <code>null</code> as its
     * detail message.
     */ NoSuchItemStateException StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified detail
     * message.
     *
     * @param message the detail message. The detail message is saved for
     *                later retrieval by the {@link #getMessage()} method.
     */ NoSuchItemStateException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified detail
     * message and root cause.
     *
     * @param message   the detail message. The detail message is saved for
     *                  later retrieval by the {@link #getMessage()} method.
     * @param rootCause root failure cause
     */ NoSuchItemStateException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation MemberReference message MemberReference rootCause ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified root cause.
     *
     * @param rootCause root failure cause
     */ NoSuchItemStateException FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation MemberReference rootCause ReferenceType ItemStateException",0
183,183,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.rmi.RemoteException Import java.util.Calendar Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory Import org.apache.jackrabbit.rmi.remote.RemoteVersion ClassDeclaration Modifier public /**
 * Local adapter for the JCR-RMI
 * {@link org.apache.jackrabbit.rmi.remote.RemoteVersion RemoteVersion}
 * interface. This class makes a remote version locally available using
 * the JCR {@link javax.jcr.version.Version Version} interface.
 *
 * @author Felix Meschberger
 * @see javax.jcr.version.Version
 * @see org.apache.jackrabbit.rmi.remote.RemoteVersion
 */ ClientVersion FieldDeclaration /** The adapted remote version. */ Modifier private ReferenceType RemoteVersion VariableDeclarator remote ConstructorDeclaration Modifier public /**
     * Creates a local adapter for the given remote version.
     *
     * @param session current session
     * @param remote  remote version
     * @param factory local adapter factory
     */ ClientVersion FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteVersion remote FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference session MemberReference remote MemberReference factory StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration /**
     * Utility method for creating a version array for an array
     * of remote versions. The versions in the returned array
     * are created using the local adapter factory.
     * <p>
     * A <code>null</code> input is treated as an empty array.
     *
     * @param remotes remote versions
     * @return local version array
     */ Modifier private ReferenceType Version getVersionArray FormalParameter ReferenceType RemoteVersion remotes IfStatement BinaryOperation != MemberReference remotes Literal null BlockStatement LocalVariableDeclaration ReferenceType Version VariableDeclarator versions ArrayCreator ReferenceType Version MemberReference remotes length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference remotes length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i versions MethodInvocation MethodInvocation MethodInvocation getSession MemberReference ArraySelector MemberReference i remotes getVersion getFactory = End ReturnStatement MemberReference versions BlockStatement ReturnStatement ArrayCreator ReferenceType Version Literal 0 End MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Calendar getCreated RepositoryException TryStatement ReturnStatement MethodInvocation remote getCreated CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Version getSuccessors RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation remote getSuccessors getVersionArray CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Version getPredecessors RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation remote getPredecessors getVersionArray CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType VersionHistory getContainingHistory RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation getSession MethodInvocation remote getContainingHistory getVersionHistory getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex ReferenceType ClientNode ReferenceType Version",0
866,866,,0
568,568,,0
58,58,"CompilationUnit PackageDeclaration org.apache.jackrabbit.name Import java.util.Set Import java.util.HashSet Import java.util.Iterator ClassDeclaration Modifier public abstract /**
 * Provides default implementations for the methods:
 * <ul>
 * <li>{@link #getQName(String)}</li>
 * <li>{@link #getJCRName(QName)}</li>
 * </ul>
 * Subclasses may overwrite those methods with more efficient implementations
 * e.g. using caching. This class also adds optional support for
 * {@link NamespaceListener}s. To enable listener support call the constructor
 * with <code>supportListeners</code> set to <code>true</code>. The default
 * constructor will not enable listener support and all listener related
 * methods will throw an {@link UnsupportedOperationException} in that case.
 */ AbstractNamespaceResolver FieldDeclaration Modifier private final ReferenceType Set VariableDeclarator listeners MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType QName getQName FormalParameter ReferenceType String name IllegalNameException UnknownPrefixException ReturnStatement MethodInvocation QName MemberReference name This fromJCRName MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType String getJCRName FormalParameter ReferenceType QName name NoPrefixDeclaredException ReturnStatement MethodInvocation name This toJCRName ConstructorDeclaration Modifier public /**
     * Creates a <code>AbstractNamespaceResolver</code> without listener
     * support.
     */ AbstractNamespaceResolver StatementExpression ExplicitConstructorInvocation Literal false ConstructorDeclaration Modifier public /**
     * Creates a <code>AbstractNamespaceResolver</code> with listener support if
     * <code>supportListeners</code> is set to <code>true</code>.
     *
     * @param supportListeners if <code>true</code> listener are supported by
     *                         this instance.
     */ AbstractNamespaceResolver FormalParameter BasicType boolean supportListeners IfStatement MemberReference supportListeners BlockStatement StatementExpression Assignment MemberReference listeners ClassCreator ReferenceType HashSet = BlockStatement StatementExpression Assignment MemberReference listeners Literal null = End MethodDeclaration /**
     * Registers <code>listener</code> to get notifications when namespace
     * mappings change.
     *
     * @param listener the listener to register.
     * @throws UnsupportedOperationException if listener support is not enabled
     *                                       for this <code>AbstractNamespaceResolver</code>.
     */ Modifier public addListener FormalParameter ReferenceType NamespaceListener listener IfStatement BinaryOperation == MemberReference listeners Literal null BlockStatement ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""addListener"" End SynchronizedStatement MemberReference listeners StatementExpression MethodInvocation listeners MemberReference listener add MethodDeclaration /**
     * Removes the <code>listener</code> from this <code>NamespaceRegistery</code>.
     *
     * @param listener the listener to remove.
     * @throws UnsupportedOperationException if listener support is not enabled
     *                                       for this <code>AbstractNamespaceResolver</code>.
     */ Modifier public removeListener FormalParameter ReferenceType NamespaceListener listener IfStatement BinaryOperation == MemberReference listeners Literal null BlockStatement ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""removeListener"" End SynchronizedStatement MemberReference listeners StatementExpression MethodInvocation listeners MemberReference listener remove MethodDeclaration /**
     * Notifies the listeners that a new namespace <code>uri</code> has been
     * added and mapped to <code>prefix</code>.
     *
     * @param prefix the prefix.
     * @param uri    the namespace uri.
     */ Modifier protected notifyNamespaceAdded FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri IfStatement BinaryOperation == MemberReference listeners Literal null BlockStatement ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""notifyNamespaceAdded"" End LocalVariableDeclaration ReferenceType NamespaceListener VariableDeclarator currentListeners SynchronizedStatement MemberReference listeners LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 StatementExpression Assignment MemberReference currentListeners ArrayCreator ReferenceType NamespaceListener MethodInvocation listeners size = ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation listeners iterator MethodInvocation it hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ i currentListeners Cast ReferenceType NamespaceListener MethodInvocation it next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference currentListeners length MemberReference ++ i BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation MemberReference prefix MemberReference uri namespaceAdded currentListeners End MethodDeclaration /**
     * Notifies listeners that an existing namespace uri has been remapped
     * to a new prefix.
     *
     * @param oldPrefix the old prefix.
     * @param newPrefix the new prefix.
     * @param uri the associated namespace uri.
     */ Modifier protected notifyNamespaceRemapped FormalParameter ReferenceType String oldPrefix FormalParameter ReferenceType String newPrefix FormalParameter ReferenceType String uri IfStatement BinaryOperation == MemberReference listeners Literal null BlockStatement ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""notifyNamespaceRemapped"" End LocalVariableDeclaration ReferenceType NamespaceListener VariableDeclarator currentListeners SynchronizedStatement MemberReference listeners LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 StatementExpression Assignment MemberReference currentListeners ArrayCreator ReferenceType NamespaceListener MethodInvocation listeners size = ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation listeners iterator MethodInvocation it hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ i currentListeners Cast ReferenceType NamespaceListener MethodInvocation it next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference currentListeners length MemberReference ++ i BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation MemberReference oldPrefix MemberReference newPrefix MemberReference uri namespaceRemapped currentListeners End ReferenceType NamespaceResolver",0
65,65,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server.io Import org.apache.log4j.Logger ClassDeclaration Modifier public /**
 * <code>DefaultIOListener</code> implements an <code>IOListener</code> that
 * writes debug/error output to the {@link Logger logger} specified in the constructor.
 */ DefaultIOListener FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType DefaultIOListener getLogger FieldDeclaration Modifier private ReferenceType Logger VariableDeclarator ioLog ConstructorDeclaration Modifier public /**
     * Creates a new <code>DefaultIOListener</code>
     */ DefaultIOListener FormalParameter ReferenceType Logger ioLog StatementExpression Assignment This MemberReference ioLog TernaryExpression BinaryOperation != MemberReference ioLog Literal null MemberReference ioLog MemberReference log = MethodDeclaration /**
     * @see IOListener#onBegin(IOHandler, IOContext)
     */ Modifier public onBegin FormalParameter ReferenceType IOHandler handler FormalParameter ReferenceType IOContext ioContext StatementExpression MethodInvocation ioLog BinaryOperation + BinaryOperation + Literal ""Starting IOHandler ("" MethodInvocation handler getName Literal "")"" debug MethodDeclaration /**
     * @see IOListener#onEnd(IOHandler, IOContext, boolean)
     */ Modifier public onEnd FormalParameter ReferenceType IOHandler handler FormalParameter ReferenceType IOContext ioContext FormalParameter BasicType boolean success StatementExpression MethodInvocation ioLog BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Result for IOHandler ("" MethodInvocation handler getName Literal ""): "" TernaryExpression MemberReference success Literal ""OK"" Literal ""Failed"" info MethodDeclaration /**
     * @see IOListener#onError(IOHandler, IOContext, Exception)
     */ Modifier public onError FormalParameter ReferenceType IOHandler ioHandler FormalParameter ReferenceType IOContext ioContext FormalParameter ReferenceType Exception e StatementExpression MethodInvocation ioLog BinaryOperation + Literal ""Error: "" MethodInvocation e getMessage debug ReferenceType IOListener",0
700,700,,1
386,386,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server.io InterfaceDeclaration Modifier public /**
 * <code>IOListener</code> defines an import/export listener.
 */ IOListener MethodDeclaration /**
     * The import/export context has been passed to the given <code>IOHandler</code>
     *
     * @param handler
     * @param context
     */ Modifier public onBegin FormalParameter ReferenceType IOHandler handler FormalParameter ReferenceType IOContext context MethodDeclaration /**
     * The specified <code>IOHandler</code> finished. A boolean flag indicates
     * whether the handler was able to run the import/export.
     *
     * @param handler
     * @param context
     * @param success
     */ Modifier public onEnd FormalParameter ReferenceType IOHandler handler FormalParameter ReferenceType IOContext context FormalParameter BasicType boolean success MethodDeclaration /**
     * An expection occured during import/export within the specified
     * <code>IOHandler</code>.
     *
     * @param ioHandler
     * @param context
     * @param e
     */ Modifier public onError FormalParameter ReferenceType IOHandler ioHandler FormalParameter ReferenceType IOContext context FormalParameter ReferenceType Exception e",0
806,806,,0
265,265,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.jackrabbit.core.ItemManager Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.NoPrefixDeclaredException Import org.apache.jackrabbit.name.QName Import org.apache.log4j.Logger Import javax.jcr.NodeIterator Import javax.jcr.RepositoryException Import javax.jcr.query.QueryResult Import javax.jcr.query.RowIterator ClassDeclaration Modifier public /**
 * Implements the <code>javax.jcr.query.QueryResult</code> interface.
 */ QueryResultImpl FieldDeclaration /**
     * The logger instance for this class
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType QueryResultImpl getLogger FieldDeclaration /**
     * The item manager of the session executing the query
     */ Modifier private final ReferenceType ItemManager VariableDeclarator itemMgr FieldDeclaration /**
     * The UUIDs of the result nodes
     */ Modifier private final ReferenceType String VariableDeclarator uuids FieldDeclaration /**
     * The scores of the result nodes
     */ Modifier private final ReferenceType Float VariableDeclarator scores FieldDeclaration /**
     * The select properties
     */ Modifier private final ReferenceType QName VariableDeclarator selectProps FieldDeclaration /**
     * The namespace resolver of the session executing the query
     */ Modifier private final ReferenceType NamespaceResolver VariableDeclarator resolver FieldDeclaration /**
     * If <code>true</code> nodes are returned in document order.
     */ Modifier private final BasicType boolean VariableDeclarator docOrder ConstructorDeclaration Modifier public /**
     * Creates a new query result.
     *
     * @param itemMgr     the item manager of the session executing the query.
     * @param uuids       the UUIDs of the result nodes.
     * @param scores      the score values of the result nodes.
     * @param selectProps the select properties of the query.
     * @param resolver    the namespace resolver of the session executing the query.
     * @param docOrder    if <code>true</code> the result is returned in document
     *  order.
     */ QueryResultImpl FormalParameter ReferenceType ItemManager itemMgr FormalParameter ReferenceType String uuids FormalParameter ReferenceType Float scores FormalParameter ReferenceType QName selectProps FormalParameter ReferenceType NamespaceResolver resolver FormalParameter BasicType boolean docOrder StatementExpression Assignment This MemberReference uuids MemberReference uuids = StatementExpression Assignment This MemberReference scores MemberReference scores = StatementExpression Assignment This MemberReference itemMgr MemberReference itemMgr = StatementExpression Assignment This MemberReference selectProps MemberReference selectProps = StatementExpression Assignment This MemberReference resolver MemberReference resolver = StatementExpression Assignment This MemberReference docOrder MemberReference docOrder = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getColumnNames RepositoryException TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator propNames ArrayCreator ReferenceType String MemberReference selectProps length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference selectProps length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i propNames MemberReference ArraySelector MemberReference i MethodInvocation MemberReference resolver toJCRName selectProps = End ReturnStatement MemberReference propNames CatchClause CatchClauseParameter NoPrefixDeclaredException npde LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""encountered invalid property name"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference npde MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeIterator getNodes RepositoryException ReturnStatement MethodInvocation getNodeIterator MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType RowIterator getRows RepositoryException ReturnStatement ClassCreator ReferenceType RowIteratorImpl MethodInvocation getNodeIterator MemberReference selectProps MemberReference resolver MethodDeclaration /**
     * Creates a node iterator over the result nodes.
     * @return a node iterator over the result nodes.
     */ Modifier private ReferenceType ScoreNodeIterator getNodeIterator IfStatement MemberReference docOrder BlockStatement ReturnStatement ClassCreator ReferenceType DocOrderNodeIteratorImpl MemberReference itemMgr MemberReference uuids MemberReference scores BlockStatement ReturnStatement ClassCreator ReferenceType NodeIteratorImpl MemberReference itemMgr MemberReference uuids MemberReference scores End ReferenceType QueryResult",1
720,720,,1
626,626,,0
513,513,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.lock Import org.apache.jackrabbit.core.SessionImpl Import javax.jcr.Session ClassDeclaration Modifier abstract /**
 * Common information about a lock.
 */ AbstractLockInfo FieldDeclaration /**
     * Lock token
     */ Modifier final protected ReferenceType LockToken VariableDeclarator lockToken FieldDeclaration /**
     * Flag indicating whether lock is session scoped
     */ Modifier final protected BasicType boolean VariableDeclarator sessionScoped FieldDeclaration /**
     * Flag indicating whether lock is deep
     */ Modifier final protected BasicType boolean VariableDeclarator deep FieldDeclaration /**
     * Lock owner, determined on creation time
     */ Modifier final protected ReferenceType String VariableDeclarator lockOwner FieldDeclaration /**
     * Session currently holding lock
     */ Modifier protected ReferenceType SessionImpl VariableDeclarator lockHolder FieldDeclaration /**
     * Flag indicating whether this lock is live
     */ Modifier protected BasicType boolean VariableDeclarator live ConstructorDeclaration Modifier public /**
     * Create a new instance of this class.
     *
     * @param lockToken     lock token
     * @param sessionScoped whether lock token is session scoped
     * @param deep          whether lock is deep
     * @param lockOwner     owner of lock
     */ AbstractLockInfo FormalParameter ReferenceType LockToken lockToken FormalParameter BasicType boolean sessionScoped FormalParameter BasicType boolean deep FormalParameter ReferenceType String lockOwner StatementExpression Assignment This MemberReference lockToken MemberReference lockToken = StatementExpression Assignment This MemberReference sessionScoped MemberReference sessionScoped = StatementExpression Assignment This MemberReference deep MemberReference deep = StatementExpression Assignment This MemberReference lockOwner MemberReference lockOwner = MethodDeclaration /**
     * Set the live flag
     * @param live live flag
     */ Modifier public setLive FormalParameter BasicType boolean live StatementExpression Assignment This MemberReference live MemberReference live = MethodDeclaration /**
     * Return the UUID of the lock holding node
     * @return uuid
     */ Modifier public ReferenceType String getUUID ReturnStatement MemberReference lockToken uuid MethodDeclaration /**
     * Return the session currently holding the lock
     *
     * @return session currently holding the lock
     */ Modifier public ReferenceType SessionImpl getLockHolder ReturnStatement MemberReference lockHolder MethodDeclaration /**
     * Set the session currently holding the lock
     *
     * @param lockHolder session currently holding the lock
     */ Modifier public setLockHolder FormalParameter ReferenceType SessionImpl lockHolder StatementExpression Assignment This MemberReference lockHolder MemberReference lockHolder = MethodDeclaration /**
     * Return the lock token as seen by the session passed as parameter. If
     * this session is currently holding the lock, it will get the lock token
     * itself, otherwise a <code>null</code> string
     */ Modifier public ReferenceType String getLockToken FormalParameter ReferenceType Session session IfStatement MethodInvocation session MemberReference lockHolder equals BlockStatement ReturnStatement MethodInvocation lockToken toString End ReturnStatement Literal null MethodDeclaration /**
     * Return a flag indicating whether the lock is live
     *
     * @return <code>true</code> if the lock is live; otherwise <code>false</code>
     */ Modifier public BasicType boolean isLive ReturnStatement MemberReference live MethodDeclaration /**
     * Return a flag indicating whether the lock information may still change.
     */ Modifier public BasicType boolean mayChange ReturnStatement MemberReference live MethodDeclaration /**
     * Return a flag indicating whether the lock is session-scoped
     *
     * @return <code>true</code> if the lock is session-scoped;
     *         otherwise <code>false</code>
     */ Modifier public BasicType boolean isSessionScoped ReturnStatement MemberReference sessionScoped",0
289,289,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.version Import org.apache.jackrabbit.webdav.property.DavPropertyName Import org.apache.jackrabbit.webdav.DavException InterfaceDeclaration Modifier public /**
 * <code>VersionResource</code> is a resource that contains a copy of a particular
 * state of a version-controlled resource. A new version resource is created whenever
 * a checked-out version-controlled resource is checked-in. The server allocates
 * a distinct new URL for each new version, and this URL will never be used to
 * identify any resource other than that version. The content and dead properties
 * of a version never change.
 * <p/>
 * RFC 3253 defines the following required properties for a version resource:
 * <ul>
 * <li>DAV:predecessor-set  (protected)</li>
 * <li>DAV:successor-set  (computed)</li>
 * <li>DAV:checkout-set</li>
 * <li>DAV:version-name</li>
 * <li>DAV:checkout-fork (in-place-checkout or working resource)</li>
 * <li>DAV:checkin-fork (in-place-checkout or working resource)</li>
 * <li>DAV:version-history (version-history)</li>
 * <li>DAV:label-name-set (label)</li>
 * <li>DAV:activity-set (activity)</li>
 * <li>all DeltaV-compliant resource properties.</li>
 * </ul>
 * <p/>
 * In addition a version resource must support the following METHODS:
 * <ul>
 * <li>LABEL (label)</li>
 * <li>CHECKOUT (working-resource)</li>
 * <li>all DeltaV-compliant resource METHODS.</li>
 * </ul>
 *
 * @see DeltaVResource
 */ VersionResource ConstantDeclaration /**
     * The version resource defines one additional method LABEL.
     *
     * @see DeltaVResource#METHODS
     * @see org.apache.jackrabbit.webdav.DavResource#METHODS
     */ Modifier public ReferenceType String VariableDeclarator METHODS Literal ""LABEL"" ConstantDeclaration /**
     * Required protected property 'DAV:label-name-set' for a version of a webdav
     * resource introduced with the 'LabelInfo' feature.
     * This property contains the labels that currently select this version.<br>
     * Property structure is defined as follows:<br>
     * <pre>
     * &lt;!ELEMENT label-name-set (label-name*)&gt;
     * &lt;!ELEMENT label-name (#PCDATA)&gt;
     * PCDATA value: string
     * </pre>
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator LABEL_NAME_SET MethodInvocation DavPropertyName Literal ""label-name-set"" MemberReference DeltaVConstants NAMESPACE create ConstantDeclaration /**
     * The protected DAV:predecessor property identifies each predecessor of
     * this version. Except for the root version, which has no predecessors,
     * each version has at least one predecessor.<br>
     * The property is defined to have the following format:
     * <pre>
     * &lt;!ELEMENT predecessor-set (href*)&gt;
     * </pre>
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator PREDECESSOR_SET MethodInvocation DavPropertyName Literal ""predecessor-set"" MemberReference DeltaVConstants NAMESPACE create ConstantDeclaration /**
     * The computed property DAV:successor-set identifies each version whose
     * DAV:predecessor-set identifies this version.<br>
     * The property is defined to have the following format:
     * <pre>
     * &lt;!ELEMENT successor-set (href*)&gt;
     * </pre>
     *
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator SUCCESSOR_SET MethodInvocation DavPropertyName Literal ""successor-set"" MemberReference DeltaVConstants NAMESPACE create ConstantDeclaration /**
     * The computed property  DAV:checkout-set identifies each checked-out
     * resource whose DAV:checked-out property identifies this version.<br>
     * The property is defined to have the following format:
     * <pre>
     * &lt;!ELEMENT checkout-set (href*)&gt;
     * </pre>
     *
     * @see VersionControlledResource#CHECKED_OUT
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator CHECKOUT_SET MethodInvocation DavPropertyName Literal ""checkout-set"" MemberReference DeltaVConstants NAMESPACE create ConstantDeclaration /**
     * The protected property DAV:version-name defines a human readable id for
     * this version. The id defined to be unique within the version-history this
     * version belongs to.<br>
     * The property is defined to have the following format:
     * <pre>
     * &lt;!ELEMENT version-name (#PCDATA)&gt;
     * PCDATA value: string
     * </pre>
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator VERSION_NAME MethodInvocation DavPropertyName Literal ""version-name"" MemberReference DeltaVConstants NAMESPACE create ConstantDeclaration /**
     * The computed property DAV:version-history identifies the version history
     * that contains this version.<br>
     * The property is defined to have the following format:
     * <pre>
     * &lt;!ELEMENT version-history (href)&gt;
     * </pre>
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator VERSION_HISTORY MethodInvocation DavPropertyName Literal ""version-history"" MemberReference DeltaVConstants NAMESPACE create ConstantDeclaration /**
     * This property controls the behavior of CHECKOUT when a version already
     * is checked out or has a successor.
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator CHECKOUT_FORK MethodInvocation DavPropertyName Literal ""checkout-fork"" MemberReference DeltaVConstants NAMESPACE create ConstantDeclaration /**
     * This property controls the behavior of CHECKIN when a version already
     * has a successor.
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator CHECKIN_FORK MethodInvocation DavPropertyName Literal ""checkin-fork"" MemberReference DeltaVConstants NAMESPACE create MethodDeclaration /**
     * Modify the labels of this version resource. The modifications (SET, ADD or
     * REMOVE) are listed in the specified <code>LabelInfo</code> object.<br>
     * The case of a label name must be preserved when it is stored and retrieved.
     * <br>If the type of modification is ADD, then the label must not yet occur on
     * any other version within the same version history. In contrast a SET
     * modification will move the indicated label to this version, if it existed
     * with another version before. After a successful LABEL request the label
     * must not appear with any other version in the same version history.
     *
     * @param labelInfo
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see LabelInfo
     */ Modifier public label FormalParameter ReferenceType LabelInfo labelInfo DavException MethodDeclaration /**
     * Returns the <code>VersionHistoryResource</code>, that is referenced in the
     * {@link #VERSION_HISTORY DAV:version-history} property.
     *
     * @return
     * @throws DavException
     */ Modifier public ReferenceType VersionHistoryResource getVersionHistory DavException ReferenceType DeltaVResource",1
479,479,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query ClassDeclaration Modifier public /**
 * Implements the <code>QueryNodeVisitor</code> interface with default behaviour.
 * All methods are no-ops and return the <code>data</code> argument.
 */ DefaultQueryNodeVisitor MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType QueryRootNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType OrQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType AndQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType NotQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType ExactQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType NodeTypeQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType TextsearchQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType PathQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType LocationStepQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType RelationQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType OrderQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data MethodDeclaration Modifier public ReferenceType Object visit FormalParameter ReferenceType DerefQueryNode node FormalParameter ReferenceType Object data ReturnStatement MemberReference data ReferenceType QueryNodeVisitor",1
837,837,,0
59,59,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import java.util.ResourceBundle Import javax.jcr.Node Import javax.jcr.Property Import javax.jcr.PropertyIterator Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Displays references to the given <code>Node</code>
 */ LsReferences FieldDeclaration /** bundle */ Modifier private static ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation CommandHelper getBundle FieldDeclaration /** path to the <code>Node</code> key */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation CommandHelper MemberReference ctx MemberReference path getNode LocalVariableDeclaration BasicType int VariableDeclarator width ArrayCreator BasicType int ArrayInitializer Literal 60 LocalVariableDeclaration ReferenceType String VariableDeclarator header ArrayCreator ReferenceType String ArrayInitializer MethodInvocation bundle Literal ""word.path"" getString StatementExpression MethodInvocation PrintHelper MemberReference ctx MemberReference width MemberReference header printRow StatementExpression MethodInvocation PrintHelper MemberReference ctx MemberReference width Literal '-' printSeparatorRow LocalVariableDeclaration ReferenceType PropertyIterator VariableDeclarator iter MethodInvocation n getReferences WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator p MethodInvocation iter nextProperty StatementExpression MethodInvocation PrintHelper MemberReference ctx MemberReference width ArrayCreator ReferenceType String ArrayInitializer MethodInvocation p getPath printRow End StatementExpression MethodInvocation CommandHelper MethodInvocation println MemberReference ctx getOutput StatementExpression MethodInvocation CommandHelper MethodInvocation BinaryOperation + BinaryOperation + MethodInvocation iter getSize Literal "" "" MethodInvocation bundle Literal ""word.references"" getString println MemberReference ctx getOutput ReturnStatement Literal false MethodDeclaration /**
     * @return the path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param path
     *        the path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String path StatementExpression Assignment This MemberReference pathKey MemberReference path = ReferenceType Command",0
453,453,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.cli Import org.apache.jackrabbit.command.CommandException ClassDeclaration Modifier public /**
 * Exception thrown if any error occurs while parsing the user's input.
 */ JcrParserException FieldDeclaration /**
     * <code>serialVersionUID</code>
     */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 3761694498056713525L ConstructorDeclaration Modifier public /**
     * @param message the message
     * @param arguments the arguments
     */ JcrParserException FormalParameter ReferenceType String message FormalParameter ReferenceType Object arguments StatementExpression SuperConstructorInvocation MemberReference message MemberReference arguments ConstructorDeclaration Modifier public /**
     * @param message the message
     * @param cause the cause
     * @param arguments the arguments
     */ JcrParserException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable cause FormalParameter ReferenceType Object arguments StatementExpression SuperConstructorInvocation MemberReference message MemberReference cause MemberReference arguments ConstructorDeclaration Modifier public /**
     * @param message the message
     */ JcrParserException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ConstructorDeclaration Modifier public /**
     * @param message the message
     * @param cause the cause
     */ JcrParserException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable cause StatementExpression SuperConstructorInvocation MemberReference message MemberReference cause ReferenceType CommandException",0
614,614,,0
132,132,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.util Import java.io.PrintStream InterfaceDeclaration Modifier public /**
 * Utility interface for internal use.
 * <p/>
 * A <code>Dumpable</code> object supports dumping its state in a human readable
 * format for diagnostic/debug purposes.
 */ Dumpable MethodDeclaration /**
     * Dumps the state of this instance in a human readable format for
     * diagnostic purposes.
     *
     * @param ps stream to dump state to
     */ dump FormalParameter ReferenceType PrintStream ps",0
158,158,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype.xml Import org.apache.jackrabbit.name.AbstractNamespaceResolver Import javax.jcr.NamespaceException Import javax.jcr.NamespaceRegistry Import javax.jcr.RepositoryException Import java.util.Enumeration Import java.util.Properties ClassDeclaration Modifier public /**
 * A simple namespace resolver implementation, that uses the additional
 * namespaces declared in an XML element.
 */ AdditionalNamespaceResolver FieldDeclaration /** Map from namespace prefixes to namespace URIs. */ Modifier private final ReferenceType Properties VariableDeclarator prefixToURI ClassCreator ReferenceType Properties FieldDeclaration /** Map from namespace URIs to namespace prefixes. */ Modifier private final ReferenceType Properties VariableDeclarator uriToPrefix ClassCreator ReferenceType Properties ConstructorDeclaration Modifier public /**
     * Creates a namespace resolver using the namespaces defined in
     * the given prefix-to-URI property set.
     *
     * @param namespaces namespace properties
     */ AdditionalNamespaceResolver FormalParameter ReferenceType Properties namespaces LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator prefixes MethodInvocation namespaces propertyNames WhileStatement MethodInvocation prefixes hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator prefix Cast ReferenceType String MethodInvocation prefixes nextElement StatementExpression MethodInvocation MemberReference prefix MethodInvocation namespaces MemberReference prefix getProperty addNamespace End StatementExpression MethodInvocation Literal """" Literal """" addNamespace ConstructorDeclaration Modifier public /**
     * Creates a namespace resolver using the namespaces declared
     * in the given namespace registry.
     *
     * @param registry namespace registry
     * @throws RepositoryException on repository errors
     */ AdditionalNamespaceResolver FormalParameter ReferenceType NamespaceRegistry registry RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator prefixes MethodInvocation registry getPrefixes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference prefixes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i prefixes MethodInvocation registry MemberReference ArraySelector MemberReference i prefixes getURI addNamespace End MethodDeclaration /**
     * Adds the given namespace declaration to this resolver.
     *
     * @param prefix namespace prefix
     * @param uri namespace URI
     */ Modifier private addNamespace FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri StatementExpression MethodInvocation prefixToURI MemberReference prefix MemberReference uri put StatementExpression MethodInvocation uriToPrefix MemberReference uri MemberReference prefix put MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getURI FormalParameter ReferenceType String prefix NamespaceException LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation prefixToURI MemberReference prefix getProperty IfStatement BinaryOperation != MemberReference uri Literal null BlockStatement ReturnStatement MemberReference uri BlockStatement ThrowStatement ClassCreator ReferenceType NamespaceException BinaryOperation + BinaryOperation + Literal ""Unknown namespace prefix "" MemberReference prefix Literal ""."" End MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getPrefix FormalParameter ReferenceType String uri NamespaceException LocalVariableDeclaration ReferenceType String VariableDeclarator prefix MethodInvocation uriToPrefix MemberReference uri getProperty IfStatement BinaryOperation != MemberReference prefix Literal null BlockStatement ReturnStatement MemberReference prefix BlockStatement ThrowStatement ClassCreator ReferenceType NamespaceException BinaryOperation + BinaryOperation + Literal ""Unknown namespace URI "" MemberReference uri Literal ""."" End ReferenceType AbstractNamespaceResolver",0
440,440,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.lock Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Lock the given <code>Node</code>
 */ Lock FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType Lock getLog FieldDeclaration /** Node path key */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" FieldDeclaration /**
     * depth lock
     */ Modifier private ReferenceType String VariableDeclarator deepKey Literal ""deep"" FieldDeclaration /**
     * Session scoped lock <br>
     * Key that refers to a <code>Boolean</code> context variable
     */ Modifier private ReferenceType String VariableDeclarator sessionScopedKey Literal ""sessionScoped"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get LocalVariableDeclaration BasicType boolean VariableDeclarator deep MethodInvocation Boolean MethodInvocation booleanValue Cast ReferenceType String MethodInvocation ctx This MemberReference deepKey get valueOf LocalVariableDeclaration BasicType boolean VariableDeclarator sessionScoped MethodInvocation Boolean MethodInvocation booleanValue Cast ReferenceType String MethodInvocation ctx This MemberReference sessionScopedKey get valueOf IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""locking node at "" MemberReference path Literal "" deep="" MemberReference deep Literal "" sessionScoped="" MemberReference sessionScoped debug End StatementExpression MethodInvocation CommandHelper MethodInvocation MemberReference deep MemberReference sessionScoped lock MemberReference ctx MemberReference path getNode ReturnStatement Literal false MethodDeclaration /**
     * @return deep key
     */ Modifier public ReferenceType String getDeepKey ReturnStatement MemberReference deepKey MethodDeclaration /**
     * @param deepKey
     *        deep key to set
     */ Modifier public setDeepKey FormalParameter ReferenceType String deepKey StatementExpression Assignment This MemberReference deepKey MemberReference deepKey = MethodDeclaration /**
     * @return the session scoped key
     */ Modifier public ReferenceType String getSessionScopedKey ReturnStatement MemberReference sessionScopedKey MethodDeclaration /**
     * @param sessionScopedKey
     *        the session scoped key to set
     */ Modifier public setSessionScopedKey FormalParameter ReferenceType String sessionScopedKey StatementExpression Assignment This MemberReference sessionScopedKey MemberReference sessionScopedKey = MethodDeclaration /**
     * @return the source path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param srcPathKey
     *        the source path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String srcPathKey StatementExpression Assignment This MemberReference pathKey MemberReference srcPathKey = ReferenceType Command",0
653,653,,0
363,363,"CompilationUnit PackageDeclaration org.apache.jackrabbit.base.nodetype Import java.util.LinkedList Import java.util.List Import java.util.Vector Import javax.jcr.RepositoryException Import javax.jcr.UnsupportedRepositoryOperationException Import javax.jcr.nodetype.NoSuchNodeTypeException Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.NodeTypeIterator Import javax.jcr.nodetype.NodeTypeManager Import org.apache.jackrabbit.iterator.ArrayNodeTypeIterator ClassDeclaration Modifier public /**
 * Node type manager base class.
 */ BaseNodeTypeManager MethodDeclaration /**
     * Returns an empty node type iterator. Subclasses should override this
     * method to return the available node types.
     *
     * @return empty node type iterator
     * @see NodeTypeManager#getAllNodeTypes()
     */ Modifier public ReferenceType NodeTypeIterator getAllNodeTypes RepositoryException ReturnStatement ClassCreator ReferenceType ArrayNodeTypeIterator ArrayCreator ReferenceType NodeType Literal 0 MethodDeclaration /**
     * Iterates through the node types returned by the
     * {@link #getAllNodeTypes() getAllNodeTypes()} method and returns the
     * node type with the given name. If a matching node type is not found,
     * then a {@link NoSuchNodeTypeException} is thrown. Subclasses may
     * want to override this method for better performance.
     *
     * @param node type name
     * @return named node type
     * @see NodeTypeManager#getNodeType(String)
     */ Modifier public ReferenceType NodeType getNodeType FormalParameter ReferenceType String nodeTypeName RepositoryException LocalVariableDeclaration ReferenceType NodeTypeIterator VariableDeclarator types MethodInvocation getAllNodeTypes WhileStatement MethodInvocation types hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator type MethodInvocation types nextNodeType IfStatement MethodInvocation nodeTypeName MethodInvocation type getName equals BlockStatement ReturnStatement MemberReference type End End ThrowStatement ClassCreator ReferenceType NoSuchNodeTypeException BinaryOperation + Literal ""Type not found: "" MemberReference nodeTypeName MethodDeclaration /**
     * Iterates through the node types returned by the
     * {@link #getAllNodeTypes() getAllNodeTypes()} method and returns an
     * {@link ArrayNodeTypeIterator} containing all the primary node types.
     * Subclasses may want to override this method for better performance.
     *
     * @return primary node types
     * @see NodeTypeManager#getPrimaryNodeTypes()
     */ Modifier public ReferenceType NodeTypeIterator getPrimaryNodeTypes RepositoryException LocalVariableDeclaration ReferenceType List VariableDeclarator primaryTypes ClassCreator ReferenceType LinkedList LocalVariableDeclaration ReferenceType NodeTypeIterator VariableDeclarator types MethodInvocation getAllNodeTypes WhileStatement MethodInvocation types hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator type MethodInvocation types nextNodeType IfStatement MethodInvocation ! type isMixin BlockStatement StatementExpression MethodInvocation primaryTypes MemberReference type add End End ReturnStatement ClassCreator ReferenceType ArrayNodeTypeIterator MemberReference primaryTypes MethodDeclaration /**
     * Iterates through the node types returned by the
     * {@link #getAllNodeTypes() getAllNodeTypes()} method and returns an
     * {@link ArrayNodeTypeIterator} containing all the mixin node types.
     * Subclasses may want to override this method for better performance.
     *
     * @return mixin node types
     * @see NodeTypeManager#getMixinNodeTypes()
     */ Modifier public ReferenceType NodeTypeIterator getMixinNodeTypes RepositoryException LocalVariableDeclaration ReferenceType List VariableDeclarator mixinTypes ClassCreator ReferenceType LinkedList LocalVariableDeclaration ReferenceType NodeTypeIterator VariableDeclarator types MethodInvocation getAllNodeTypes WhileStatement MethodInvocation types hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator type MethodInvocation types nextNodeType IfStatement MethodInvocation type isMixin BlockStatement StatementExpression MethodInvocation mixinTypes MemberReference type add End End ReturnStatement ClassCreator ReferenceType ArrayNodeTypeIterator MemberReference mixinTypes ReferenceType NodeTypeManager",1
359,359,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.cli Import java.util.ResourceBundle Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public abstract /**
 * Command Line parameter superclass
 */ AbstractParameter FieldDeclaration /** Resource bundle */ Modifier protected ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation CommandHelper getBundle FieldDeclaration /** name */ Modifier private ReferenceType String VariableDeclarator name FieldDeclaration /** long name */ Modifier private ReferenceType String VariableDeclarator longName FieldDeclaration /** description */ Modifier private ReferenceType String VariableDeclarator description FieldDeclaration /** command or a context attribute */ Modifier private ReferenceType String VariableDeclarator contextKey FieldDeclaration /** value */ Modifier private ReferenceType String VariableDeclarator value MethodDeclaration /**
     * @return the description
     */ Modifier public ReferenceType String getDescription ReturnStatement MemberReference description MethodDeclaration /**
     * @return the localized description
     */ Modifier public abstract ReferenceType String getLocalizedDescription MethodDeclaration /**
     * @return the name
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * @param description
     *        The description to set
     */ Modifier public setDescription FormalParameter ReferenceType String description StatementExpression Assignment This MemberReference description MemberReference description = MethodDeclaration /**
     * @param name
     *        the name to set
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * @return the value
     */ Modifier public ReferenceType String getValue ReturnStatement MemberReference value MethodDeclaration /**
     * @param value
     *        The value to set
     */ Modifier public setValue FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
     * @return the longName
     */ Modifier public ReferenceType String getLongName ReturnStatement MemberReference longName MethodDeclaration /**
     * @param longName
     *        The longName to set
     */ Modifier public setLongName FormalParameter ReferenceType String longName StatementExpression Assignment This MemberReference longName MemberReference longName = MethodDeclaration /**
     * @param param
     *        the <code>AbstractParameter</code> to clone
     */ Modifier protected clone FormalParameter ReferenceType AbstractParameter param StatementExpression Assignment MemberReference param contextKey This MemberReference contextKey = StatementExpression Assignment MemberReference param description This MemberReference description = StatementExpression Assignment MemberReference param longName This MemberReference longName = StatementExpression Assignment MemberReference param name This MemberReference name = StatementExpression Assignment MemberReference param value This MemberReference value = MethodDeclaration /**
     * @return the commandAttribute. if the context key is unset it returns the
     *         parameter name
     */ Modifier public ReferenceType String getContextKey IfStatement BinaryOperation == MemberReference contextKey Literal null BlockStatement ReturnStatement This MemberReference name End ReturnStatement MemberReference contextKey MethodDeclaration /**
     * @param commandAttribute
     *        The commandAttribute to set
     */ Modifier public setContextKey FormalParameter ReferenceType String commandAttribute StatementExpression Assignment This MemberReference contextKey MemberReference commandAttribute = MethodDeclaration /**
     * @return true if this parameter is mandatory
     */ Modifier public abstract BasicType boolean isRequired MethodDeclaration /**
     * @return argumentlocalized name
     */ Modifier public abstract ReferenceType String getLocalizedArgName ReferenceType Cloneable",1
647,647,,0
274,274,"CompilationUnit PackageDeclaration org.apache.jackrabbit.jca Import org.xml.sax.ContentHandler Import org.xml.sax.SAXException Import javax.jcr.AccessDeniedException Import javax.jcr.Credentials Import javax.jcr.InvalidItemStateException Import javax.jcr.InvalidSerializedDataException Import javax.jcr.Item Import javax.jcr.ItemExistsException Import javax.jcr.ItemNotFoundException Import javax.jcr.LoginException Import javax.jcr.NamespaceException Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.Repository Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.UnsupportedRepositoryOperationException Import javax.jcr.ValueFactory Import javax.jcr.Workspace Import javax.jcr.lock.LockException Import javax.jcr.nodetype.ConstraintViolationException Import javax.jcr.nodetype.NoSuchNodeTypeException Import javax.jcr.version.VersionException Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream Import java.security.AccessControlException ClassDeclaration Modifier public final /**
 * This class implements the JCA implementation of session.
 */ JCASessionHandle FieldDeclaration /**
     * Managed connection.
     */ Modifier private ReferenceType JCAManagedConnection VariableDeclarator mc ConstructorDeclaration Modifier public /**
     * Construct a new session.
     */ JCASessionHandle FormalParameter ReferenceType JCAManagedConnection mc StatementExpression Assignment This MemberReference mc MemberReference mc = MethodDeclaration /**
     * Return the managed connection.
     */ Modifier public ReferenceType JCAManagedConnection getManagedConnection ReturnStatement MemberReference mc MethodDeclaration /**
     * Set the managed connection.
     */ Modifier public setManagedConnection FormalParameter ReferenceType JCAManagedConnection mc StatementExpression Assignment This MemberReference mc MemberReference mc = MethodDeclaration /**
     * Return the session.
     */ Modifier private ReferenceType Session getSession ReturnStatement MethodInvocation mc This getSession MethodDeclaration /**
     * Return the repository.
     */ Modifier public ReferenceType Repository getRepository ReturnStatement MethodInvocation MethodInvocation getRepository getSession MethodDeclaration /**
     * Return the user id.
     */ Modifier public ReferenceType String getUserID ReturnStatement MethodInvocation MethodInvocation getUserID getSession MethodDeclaration /**
     * Return the attribute.
     */ Modifier public ReferenceType Object getAttribute FormalParameter ReferenceType String name ReturnStatement MethodInvocation MethodInvocation MemberReference name getAttribute getSession MethodDeclaration /**
     * Return the attribute names.
     */ Modifier public ReferenceType String getAttributeNames ReturnStatement MethodInvocation MethodInvocation getAttributeNames getSession MethodDeclaration /**
     * Return the workspace.
     */ Modifier public ReferenceType Workspace getWorkspace ReturnStatement MethodInvocation MethodInvocation getWorkspace getSession MethodDeclaration /**
     * Impersonate another user.
     */ Modifier public ReferenceType Session impersonate FormalParameter ReferenceType Credentials cred LoginException RepositoryException ThrowStatement ClassCreator ReferenceType RepositoryException Literal ""impersonate(..) not supported in managed environment"" MethodDeclaration /**
     * Return the root node.
     */ Modifier public ReferenceType Node getRootNode RepositoryException ReturnStatement MethodInvocation MethodInvocation getRootNode getSession MethodDeclaration /**
     * Return node by UUID.
     */ Modifier public ReferenceType Node getNodeByUUID FormalParameter ReferenceType String uuid ItemNotFoundException RepositoryException ReturnStatement MethodInvocation MethodInvocation MemberReference uuid getNodeByUUID getSession MethodDeclaration /**
     * Return the item.
     */ Modifier public ReferenceType Item getItem FormalParameter ReferenceType String arg0 PathNotFoundException RepositoryException ReturnStatement MethodInvocation MethodInvocation MemberReference arg0 getItem getSession MethodDeclaration /**
     * Return true if item exists.
     */ Modifier public BasicType boolean itemExists FormalParameter ReferenceType String arg0 RepositoryException ReturnStatement MethodInvocation MethodInvocation MemberReference arg0 itemExists getSession MethodDeclaration /**
     * Move the item.
     */ Modifier public move FormalParameter ReferenceType String arg0 FormalParameter ReferenceType String arg1 ItemExistsException PathNotFoundException VersionException ConstraintViolationException LockException RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 move getSession MethodDeclaration /**
     * Save the session.
     */ Modifier public save AccessDeniedException ItemExistsException ConstraintViolationException InvalidItemStateException VersionException LockException NoSuchNodeTypeException RepositoryException StatementExpression MethodInvocation MethodInvocation save getSession MethodDeclaration /**
     * Refresh the session.
     */ Modifier public refresh FormalParameter BasicType boolean arg0 RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 refresh getSession MethodDeclaration /**
     * Return true if it has pending changes.
     */ Modifier public BasicType boolean hasPendingChanges RepositoryException ReturnStatement MethodInvocation MethodInvocation hasPendingChanges getSession MethodDeclaration /**
     * Return the value factory.
     */ Modifier public ReferenceType ValueFactory getValueFactory UnsupportedRepositoryOperationException RepositoryException ReturnStatement MethodInvocation MethodInvocation getValueFactory getSession MethodDeclaration /**
     * Check permission.
     */ Modifier public checkPermission FormalParameter ReferenceType String arg0 FormalParameter ReferenceType String arg1 AccessControlException RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 checkPermission getSession MethodDeclaration /**
     * Return the import content handler.
     */ Modifier public ReferenceType ContentHandler getImportContentHandler FormalParameter ReferenceType String arg0 FormalParameter BasicType int arg1 PathNotFoundException ConstraintViolationException VersionException LockException RepositoryException ReturnStatement MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 getImportContentHandler getSession MethodDeclaration /**
     * Import XML content.
     */ Modifier public importXML FormalParameter ReferenceType String arg0 FormalParameter ReferenceType InputStream arg1 FormalParameter BasicType int arg2 IOException PathNotFoundException ItemExistsException ConstraintViolationException VersionException InvalidSerializedDataException LockException RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 MemberReference arg2 importXML getSession MethodDeclaration /**
     * Export system view.
     */ Modifier public exportSystemView FormalParameter ReferenceType String arg0 FormalParameter ReferenceType ContentHandler arg1 FormalParameter BasicType boolean arg2 FormalParameter BasicType boolean arg3 PathNotFoundException SAXException RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 MemberReference arg2 MemberReference arg3 exportSystemView getSession MethodDeclaration /**
     * Export system view.
     */ Modifier public exportSystemView FormalParameter ReferenceType String arg0 FormalParameter ReferenceType OutputStream arg1 FormalParameter BasicType boolean arg2 FormalParameter BasicType boolean arg3 IOException PathNotFoundException RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 MemberReference arg2 MemberReference arg3 exportSystemView getSession MethodDeclaration /**
     * Export document view.
     */ Modifier public exportDocumentView FormalParameter ReferenceType String arg0 FormalParameter ReferenceType ContentHandler arg1 FormalParameter BasicType boolean arg2 FormalParameter BasicType boolean arg3 PathNotFoundException SAXException RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 MemberReference arg2 MemberReference arg3 exportDocumentView getSession MethodDeclaration /**
     * Export document view.
     */ Modifier public exportDocumentView FormalParameter ReferenceType String arg0 FormalParameter ReferenceType OutputStream arg1 FormalParameter BasicType boolean arg2 FormalParameter BasicType boolean arg3 IOException PathNotFoundException RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 MemberReference arg2 MemberReference arg3 exportDocumentView getSession MethodDeclaration /**
     * Set namespace prefix.
     */ Modifier public setNamespacePrefix FormalParameter ReferenceType String arg0 FormalParameter ReferenceType String arg1 NamespaceException RepositoryException StatementExpression MethodInvocation MethodInvocation MemberReference arg0 MemberReference arg1 setNamespacePrefix getSession MethodDeclaration /**
     * Return namespace prefixes.
     */ Modifier public ReferenceType String getNamespacePrefixes RepositoryException ReturnStatement MethodInvocation MethodInvocation getNamespacePrefixes getSession MethodDeclaration /**
     * Return namespace URI.
     */ Modifier public ReferenceType String getNamespaceURI FormalParameter ReferenceType String arg0 NamespaceException RepositoryException ReturnStatement MethodInvocation MethodInvocation MemberReference arg0 getNamespaceURI getSession MethodDeclaration /**
     * Return namespace prefix.
     */ Modifier public ReferenceType String getNamespacePrefix FormalParameter ReferenceType String arg0 NamespaceException RepositoryException ReturnStatement MethodInvocation MethodInvocation MemberReference arg0 getNamespacePrefix getSession MethodDeclaration /**
     * Logout the session.
     */ Modifier public logout StatementExpression MethodInvocation mc This closeHandle MethodDeclaration /**
     * Return true if session is live.
     */ Modifier public BasicType boolean isLive ReturnStatement MethodInvocation MethodInvocation isLive getSession MethodDeclaration /**
     * Add lock token.
     */ Modifier public addLockToken FormalParameter ReferenceType String arg0 StatementExpression MethodInvocation MethodInvocation MemberReference arg0 addLockToken getSession MethodDeclaration /**
     * Return the lock tokens.
     */ Modifier public ReferenceType String getLockTokens ReturnStatement MethodInvocation MethodInvocation getLockTokens getSession MethodDeclaration /**
     * Remove lock token.
     */ Modifier public removeLockToken FormalParameter ReferenceType String arg0 StatementExpression MethodInvocation MethodInvocation MemberReference arg0 removeLockToken getSession ReferenceType Session",1
254,254,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.jackrabbit.core.query.TextFilter Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.value.BLOBFileValue Import org.apache.jackrabbit.core.value.InternalValue Import javax.jcr.RepositoryException Import java.io.InputStreamReader Import java.io.Reader Import java.io.UnsupportedEncodingException Import java.util.HashMap Import java.util.Map ClassDeclaration Modifier public /**
 * Implements a {@link org.apache.jackrabbit.core.query.TextFilter} that handles binary properties of mime-type
 * text/plain.
 */ TextPlainTextFilter MethodDeclaration /**
     * Returns <code>true</code> for <code>text/plain</code>; <code>false</code>
     * in all other cases.
     * @param mimeType the mime-type.
     * @return <code>true</code> for <code>text/plain</code>; <code>false</code>
     * in all other cases.
     */ Modifier public BasicType boolean canFilter FormalParameter ReferenceType String mimeType ReturnStatement Literal MethodInvocation MemberReference mimeType equalsIgnoreCase ""text/plain"" MethodDeclaration /**
     * Returns a map with a single entry for field {@link FieldNames#FULLTEXT}.
     * @param data the data property.
     * @param encoding the encoding
     * @return a map with a single Reader value for field
     *  {@link FieldNames#FULLTEXT}.
     * @throws RepositoryException if encoding is not supported or data is a
     *  multi-value property.
     */ Modifier public ReferenceType Map doFilter FormalParameter ReferenceType PropertyState data FormalParameter ReferenceType String encoding RepositoryException LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation data getValues IfStatement BinaryOperation == MemberReference values length Literal 1 BlockStatement LocalVariableDeclaration ReferenceType BLOBFileValue VariableDeclarator blob Cast ReferenceType BLOBFileValue MemberReference ArraySelector Literal 0 MethodInvocation internalValue values TryStatement LocalVariableDeclaration ReferenceType Reader VariableDeclarator reader IfStatement BinaryOperation == MemberReference encoding Literal null BlockStatement StatementExpression Assignment MemberReference reader ClassCreator ReferenceType InputStreamReader MethodInvocation blob getStream = BlockStatement StatementExpression Assignment MemberReference reader ClassCreator ReferenceType InputStreamReader MethodInvocation blob getStream MemberReference encoding = End LocalVariableDeclaration ReferenceType Map VariableDeclarator result ClassCreator ReferenceType HashMap StatementExpression MethodInvocation result MemberReference FieldNames FULLTEXT MemberReference reader put ReturnStatement MemberReference result CatchClause CatchClauseParameter UnsupportedEncodingException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e BlockStatement ThrowStatement ClassCreator ReferenceType RepositoryException Literal ""Multi-valued binary properties not supported."" End ReferenceType TextFilter",0
826,826,,0
446,446,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.security Import java.io.Serializable Import java.security.Principal ClassDeclaration Modifier public /**
 * A <code>UserPrincipal</code> ...
 */ UserPrincipal FieldDeclaration Modifier private final ReferenceType String VariableDeclarator name ConstructorDeclaration Modifier public /**
     * Creates a <code>UserPrincipal</code> with the given name.
     *
     * @param name the name of this principal
     * @throws IllegalArgumentException if <code>name</code> is <code>null</code>.
     */ UserPrincipal FormalParameter ReferenceType String name IllegalArgumentException IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""name can not be null"" End StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration Modifier public ReferenceType String toString ReturnStatement BinaryOperation + Literal ""UserPrincipal: "" MemberReference name MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType UserPrincipal BlockStatement LocalVariableDeclaration ReferenceType UserPrincipal VariableDeclarator other Cast ReferenceType UserPrincipal MemberReference obj ReturnStatement MethodInvocation name MemberReference other name equals End ReturnStatement Literal false MethodDeclaration Modifier public BasicType int hashCode ReturnStatement MethodInvocation name hashCode MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name ReferenceType Principal ReferenceType Serializable",0
176,176,"CompilationUnit PackageDeclaration org.apache.jackrabbit.util.nodetype ClassDeclaration Modifier public /**
 * SchemaConversionException
 */ SchemaConversionException ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with <code>null</code> as its
     * detail message.
     */ SchemaConversionException StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified detail
     * message.
     *
     * @param message the detail message. The detail message is saved for
     *                later retrieval by the {@link #getMessage()} method.
     */ SchemaConversionException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified detail
     * message and root cause.
     *
     * @param message   the detail message. The detail message is saved for
     *                  later retrieval by the {@link #getMessage()} method.
     * @param rootCause root failure cause
     */ SchemaConversionException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation MemberReference message MemberReference rootCause ConstructorDeclaration Modifier public /**
     * Constructs a new instance of this class with the specified root cause.
     *
     * @param rootCause root failure cause
     */ SchemaConversionException FormalParameter ReferenceType Throwable rootCause StatementExpression SuperConstructorInvocation MemberReference rootCause ReferenceType Exception",0
599,599,,0
113,113,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server Import org.apache.jackrabbit.util.Base64 Import org.apache.jackrabbit.webdav.DavConstants Import javax.jcr.Credentials Import javax.jcr.LoginException Import javax.jcr.SimpleCredentials Import javax.servlet.http.HttpServletRequest Import javax.servlet.ServletException Import java.io.ByteArrayOutputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * This Class implements a credentials provider that extracts the credentials
 * from the 'WWW-Authenticate' header and only supports 'Basic' authentication.
 */ BasicCredentialsProvider FieldDeclaration Modifier private final ReferenceType String VariableDeclarator defaultHeaderValue ConstructorDeclaration Modifier public /**
     * Constructs a new BasicCredentialsProvider with the given default
     * value {@see #getCredentials} for details.
     *
     * @param defaultHeaderValue
     */ BasicCredentialsProvider FormalParameter ReferenceType String defaultHeaderValue StatementExpression Assignment This MemberReference defaultHeaderValue MemberReference defaultHeaderValue = MethodDeclaration /**
     * {@inheritDoc}
     *
     * Build a {@link Credentials} object for the given authorization header.
     * The creds may be used to login to the repository. If the specified header
     * string is <code>null</code> or not of the required format the behaviour
     * depends on the {@link #defaultHeaderValue} field:<br>
     * <ul>
     * <li> if this field is <code>null</code>, a LoginException is thrown.
     *      This is suiteable for clients (eg. webdav clients) for with
     *      sending a proper authorization header is not possible, if the
     *      server never send a 401.
     * <li> if this an empty string, null-credentials are returned, thus
     *      forcing an null login on the repository
     * <li> if this field has a 'user:password' value, the respective
     *      simple credentials are generated.
     * </ul>
     *
     * @param request the servlet request
     * @return credentials or <code>null</code>.
     * @throws ServletException If an IOException occured while decoding the
     *         Authorization header.
     * @throws LoginException if no suitable auth header and missing-auth-mapping
     *         is not present
     */ Modifier public ReferenceType Credentials getCredentials FormalParameter ReferenceType HttpServletRequest request LoginException ServletException TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator authHeader MethodInvocation request MemberReference DavConstants HEADER_AUTHORIZATION getHeader IfStatement BinaryOperation != MemberReference authHeader Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator authStr MethodInvocation authHeader Literal "" "" split IfStatement BinaryOperation && BinaryOperation >= MemberReference authStr length Literal 2 MemberReference ArraySelector Literal 0 MethodInvocation MemberReference HttpServletRequest BASIC_AUTH equalsIgnoreCase authStr BlockStatement LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator out ClassCreator ReferenceType ByteArrayOutputStream StatementExpression MethodInvocation Base64 MemberReference ArraySelector Literal 1 MethodInvocation toCharArray authStr MemberReference out decode LocalVariableDeclaration ReferenceType String VariableDeclarator decAuthStr MethodInvocation out Literal ""ISO-8859-1"" toString LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation decAuthStr Literal ':' indexOf LocalVariableDeclaration ReferenceType String VariableDeclarator userid MethodInvocation decAuthStr Literal 0 MemberReference pos substring LocalVariableDeclaration ReferenceType String VariableDeclarator passwd MethodInvocation decAuthStr BinaryOperation + MemberReference pos Literal 1 substring ReturnStatement ClassCreator ReferenceType SimpleCredentials MemberReference userid MethodInvocation passwd toCharArray End ThrowStatement ClassCreator ReferenceType ServletException Literal ""Unable to decode authorization."" BlockStatement IfStatement BinaryOperation == MemberReference defaultHeaderValue Literal null BlockStatement ThrowStatement ClassCreator ReferenceType LoginException IfStatement MethodInvocation defaultHeaderValue Literal """" equals BlockStatement ReturnStatement Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation defaultHeaderValue Literal ':' indexOf IfStatement BinaryOperation < MemberReference pos Literal 0 BlockStatement ReturnStatement ClassCreator ReferenceType SimpleCredentials MemberReference defaultHeaderValue Literal null BlockStatement ReturnStatement ClassCreator ReferenceType SimpleCredentials MethodInvocation defaultHeaderValue Literal 0 MemberReference pos substring MethodInvocation defaultHeaderValue MethodInvocation toCharArray BinaryOperation + MemberReference pos Literal 1 substring End End End End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + Literal ""Unable to decode authorization: "" MethodInvocation e toString ReferenceType CredentialsProvider",0
628,628,,0
824,824,,0
62,62,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.remote Import java.rmi.Remote Import java.rmi.RemoteException InterfaceDeclaration Modifier public /**
 * The <code>RemoteEventCollection</code> class serves as a container for
 * notifications sent to registered event listeners. Instances of this class are
 * created by the server-side event listener proxies and sent to the client-side
 * event poller. On the client-side the enclosed list of events is then sent to
 * the listener identified by the contained listener identifier.
 *
 * @author Felix Meschberger
 */ RemoteEventCollection MethodDeclaration /**
     * Returns unique identifier of the client-side listener to which the
     * enclosed events should be sent.
     *
     * @return unique listener identifier
     * @throws RemoteException on RMI errors
     */ BasicType long getListenerId RemoteException MethodDeclaration /**
     * Returns the list of events to be sent to the client-side listener
     * identified by {@link #getListenerId()}.
     *
     * @return list of events
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteEvent getEvents RemoteException InterfaceDeclaration Modifier public static /**
     * The <code>RemoteEvent</code> class provides an encapsulation of single
     * events in an event list sent to a registered listener.
     */ RemoteEvent MethodDeclaration /**
         * Returns the event type.
         *
         * @return event type
         * @throws RemoteException on RMI errors
         */ BasicType int getType RemoteException MethodDeclaration /**
         * Returns the absolute path of the underlying item.
         *
         * @return item path
         * @throws RemoteException on RMI errors
         */ ReferenceType String getPath RemoteException MethodDeclaration /**
         * Returns the userID of the session causing this event.
         *
         * @return user identifier
         * @throws RemoteException on RMI errors
         */ ReferenceType String getUserID RemoteException ReferenceType Remote ReferenceType Remote",0
256,256,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype.xml Import org.apache.jackrabbit.core.nodetype.NodeDef Import org.apache.jackrabbit.core.nodetype.NodeTypeDef Import org.apache.jackrabbit.core.nodetype.PropDef Import org.apache.jackrabbit.core.nodetype.ValueConstraint Import org.apache.jackrabbit.core.util.DOMBuilder Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.NoPrefixDeclaredException Import org.apache.jackrabbit.name.QName Import javax.jcr.NamespaceRegistry Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.version.OnParentVersionAction Import javax.xml.parsers.ParserConfigurationException Import java.io.IOException Import java.io.OutputStream ClassDeclaration Modifier public final /**
 * Node type definition writer. This class is used to write the
 * persistent node type definition files used by Jackrabbit.
 */ NodeTypeWriter MethodDeclaration /**
     * Writes a node type definition file. The file contents are written
     * to the given output stream and will contain the given node type
     * definitions. The given namespace registry is used for namespace
     * mappings.
     *
     * @param xml XML output stream
     * @param registry namespace registry
     * @param types node types
     * @throws IOException         if the node type definitions cannot
     *                             be written
     * @throws RepositoryException on repository errors
     */ Modifier public static write FormalParameter ReferenceType OutputStream xml FormalParameter ReferenceType NodeTypeDef types FormalParameter ReferenceType NamespaceRegistry registry IOException RepositoryException TryStatement LocalVariableDeclaration ReferenceType NodeTypeWriter VariableDeclarator writer ClassCreator ReferenceType NodeTypeWriter MemberReference registry ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference types length MemberReference ++ i BlockStatement StatementExpression MethodInvocation writer MemberReference ArraySelector MemberReference i types addNodeTypeDef End StatementExpression MethodInvocation writer MemberReference xml write CatchClause CatchClauseParameter ParserConfigurationException e ThrowStatement ClassCreator ReferenceType IOException MethodInvocation e getMessage CatchClause CatchClauseParameter NoPrefixDeclaredException e ThrowStatement ClassCreator ReferenceType RepositoryException Literal ""Invalid namespace reference in a node type definition"" MemberReference e FieldDeclaration /** The node type document builder. */ Modifier private final ReferenceType DOMBuilder VariableDeclarator builder FieldDeclaration /** The namespace resolver. */ Modifier private final ReferenceType NamespaceResolver VariableDeclarator resolver ConstructorDeclaration Modifier private /**
     * Creates a node type definition file writer. The given namespace
     * registry is used for the XML namespace bindings.
     *
     * @param registry namespace registry
     * @throws ParserConfigurationException if the node type definition
     *                                      document cannot be created
     * @throws RepositoryException          if the namespace mappings cannot
     *                                      be retrieved from the registry
     */ NodeTypeWriter FormalParameter ReferenceType NamespaceRegistry registry ParserConfigurationException RepositoryException StatementExpression Assignment MemberReference builder ClassCreator ReferenceType DOMBuilder MemberReference Constants NODETYPES_ELEMENT = LocalVariableDeclaration ReferenceType String VariableDeclarator prefixes MethodInvocation registry getPrefixes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference prefixes length MemberReference ++ i BlockStatement IfStatement Literal ! MethodInvocation MemberReference ArraySelector MemberReference i prefixes equals """" BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation registry MemberReference ArraySelector MemberReference i prefixes getURI StatementExpression MethodInvocation builder BinaryOperation + Literal ""xmlns:"" MemberReference ArraySelector MemberReference i prefixes MemberReference uri setAttribute End End StatementExpression Assignment MemberReference resolver ClassCreator ReferenceType AdditionalNamespaceResolver MemberReference registry = MethodDeclaration /**
     * Builds a node type definition element under the current element.
     *
     * @param def node type definition
     * @throws RepositoryException       if the default property values
     *                                   cannot be serialized
     * @throws NoPrefixDeclaredException if the node type definition contains
     *                                   invalid namespace references
     */ Modifier private addNodeTypeDef FormalParameter ReferenceType NodeTypeDef def RepositoryException NoPrefixDeclaredException StatementExpression MethodInvocation builder MemberReference Constants NODETYPE_ELEMENT startElement StatementExpression MethodInvocation builder MemberReference Constants NAME_ATTRIBUTE MethodInvocation def MethodInvocation MemberReference resolver toJCRName getName setAttribute StatementExpression MethodInvocation builder MemberReference Constants ISMIXIN_ATTRIBUTE MethodInvocation def isMixin setAttribute StatementExpression MethodInvocation builder MemberReference Constants HASORDERABLECHILDNODES_ATTRIBUTE MethodInvocation def hasOrderableChildNodes setAttribute LocalVariableDeclaration ReferenceType QName VariableDeclarator item MethodInvocation def getPrimaryItemName IfStatement BinaryOperation != MemberReference item Literal null BlockStatement StatementExpression MethodInvocation builder MemberReference Constants PRIMARYITEMNAME_ATTRIBUTE MethodInvocation item MemberReference resolver toJCRName setAttribute BlockStatement StatementExpression MethodInvocation builder MemberReference Constants PRIMARYITEMNAME_ATTRIBUTE Literal """" setAttribute End LocalVariableDeclaration ReferenceType QName VariableDeclarator supertypes MethodInvocation def getSupertypes IfStatement BinaryOperation && BinaryOperation != MemberReference supertypes Literal null BinaryOperation > MemberReference supertypes length Literal 0 BlockStatement StatementExpression MethodInvocation builder MemberReference Constants SUPERTYPES_ELEMENT startElement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference supertypes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation builder MemberReference Constants SUPERTYPE_ELEMENT MemberReference ArraySelector MemberReference i MethodInvocation MemberReference resolver toJCRName supertypes addContentElement End StatementExpression MethodInvocation builder endElement End LocalVariableDeclaration ReferenceType PropDef VariableDeclarator properties MethodInvocation def getPropertyDefs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference properties length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i properties addPropDef End LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator nodes MethodInvocation def getChildNodeDefs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference nodes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i nodes addChildNodeDef End StatementExpression MethodInvocation builder endElement MethodDeclaration /**
     * Builds a property definition element under the current element.
     *
     * @param def property definition
     * @throws RepositoryException       if the default values cannot
     *                                   be serialized
     * @throws NoPrefixDeclaredException if the property definition contains
     *                                   invalid namespace references
     */ Modifier private addPropDef FormalParameter ReferenceType PropDef def RepositoryException NoPrefixDeclaredException StatementExpression MethodInvocation builder MemberReference Constants PROPERTYDEFINITION_ELEMENT startElement StatementExpression MethodInvocation builder MemberReference Constants NAME_ATTRIBUTE MethodInvocation def MethodInvocation MemberReference resolver toJCRName getName setAttribute StatementExpression MethodInvocation builder MemberReference Constants AUTOCREATED_ATTRIBUTE MethodInvocation def isAutoCreated setAttribute StatementExpression MethodInvocation builder MemberReference Constants MANDATORY_ATTRIBUTE MethodInvocation def isMandatory setAttribute StatementExpression MethodInvocation builder MemberReference Constants PROTECTED_ATTRIBUTE MethodInvocation def isProtected setAttribute StatementExpression MethodInvocation builder MemberReference Constants ONPARENTVERSION_ATTRIBUTE MethodInvocation OnParentVersionAction MethodInvocation def getOnParentVersion nameFromValue setAttribute StatementExpression MethodInvocation builder MemberReference Constants MULTIPLE_ATTRIBUTE MethodInvocation def isMultiple setAttribute StatementExpression MethodInvocation builder MemberReference Constants REQUIREDTYPE_ATTRIBUTE MethodInvocation PropertyType MethodInvocation def getRequiredType nameFromValue setAttribute LocalVariableDeclaration ReferenceType ValueConstraint VariableDeclarator constraints MethodInvocation def getValueConstraints IfStatement BinaryOperation && BinaryOperation != MemberReference constraints Literal null BinaryOperation > MemberReference constraints length Literal 0 BlockStatement StatementExpression MethodInvocation builder MemberReference Constants VALUECONSTRAINTS_ELEMENT startElement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference constraints length MemberReference ++ i BlockStatement StatementExpression MethodInvocation builder MemberReference Constants VALUECONSTRAINT_ELEMENT MemberReference ArraySelector MemberReference i MethodInvocation MemberReference resolver getDefinition constraints addContentElement End StatementExpression MethodInvocation builder endElement End LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator defaults MethodInvocation def getDefaultValues IfStatement BinaryOperation && BinaryOperation != MemberReference defaults Literal null BinaryOperation > MemberReference defaults length Literal 0 BlockStatement StatementExpression MethodInvocation builder MemberReference Constants DEFAULTVALUES_ELEMENT startElement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference defaults length MemberReference ++ i BlockStatement StatementExpression MethodInvocation builder MemberReference Constants DEFAULTVALUE_ELEMENT MemberReference ArraySelector MemberReference i MethodInvocation MemberReference resolver toJCRValue MethodInvocation getString defaults addContentElement End StatementExpression MethodInvocation builder endElement End StatementExpression MethodInvocation builder endElement MethodDeclaration /**
     * Builds a child node definition element under the current element.
     *
     * @param def child node definition
     * @throws NoPrefixDeclaredException if the child node definition contains
     *                                   invalid namespace references
     */ Modifier private addChildNodeDef FormalParameter ReferenceType NodeDef def NoPrefixDeclaredException StatementExpression MethodInvocation builder MemberReference Constants CHILDNODEDEFINITION_ELEMENT startElement StatementExpression MethodInvocation builder MemberReference Constants NAME_ATTRIBUTE MethodInvocation def MethodInvocation MemberReference resolver toJCRName getName setAttribute StatementExpression MethodInvocation builder MemberReference Constants AUTOCREATED_ATTRIBUTE MethodInvocation def isAutoCreated setAttribute StatementExpression MethodInvocation builder MemberReference Constants MANDATORY_ATTRIBUTE MethodInvocation def isMandatory setAttribute StatementExpression MethodInvocation builder MemberReference Constants PROTECTED_ATTRIBUTE MethodInvocation def isProtected setAttribute StatementExpression MethodInvocation builder MemberReference Constants ONPARENTVERSION_ATTRIBUTE MethodInvocation OnParentVersionAction MethodInvocation def getOnParentVersion nameFromValue setAttribute StatementExpression MethodInvocation builder MemberReference Constants SAMENAMESIBLINGS_ATTRIBUTE MethodInvocation def allowsSameNameSiblings setAttribute LocalVariableDeclaration ReferenceType QName VariableDeclarator type MethodInvocation def getDefaultPrimaryType IfStatement BinaryOperation != MemberReference type Literal null BlockStatement StatementExpression MethodInvocation builder MemberReference Constants DEFAULTPRIMARYTYPE_ATTRIBUTE MethodInvocation type MemberReference resolver toJCRName setAttribute BlockStatement StatementExpression MethodInvocation builder MemberReference Constants DEFAULTPRIMARYTYPE_ATTRIBUTE Literal """" setAttribute End LocalVariableDeclaration ReferenceType QName VariableDeclarator requiredTypes MethodInvocation def getRequiredPrimaryTypes StatementExpression MethodInvocation builder MemberReference Constants REQUIREDPRIMARYTYPES_ELEMENT startElement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference requiredTypes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation builder MemberReference Constants REQUIREDPRIMARYTYPE_ELEMENT MemberReference ArraySelector MemberReference i MethodInvocation MemberReference resolver toJCRName requiredTypes addContentElement End StatementExpression MethodInvocation builder endElement StatementExpression MethodInvocation builder endElement MethodDeclaration /**
     * Writes the node type definition document to the given output stream.
     *
     * @param xml XML output stream
     * @throws IOException if the node type document could not be written
     */ Modifier private write FormalParameter ReferenceType OutputStream xml IOException StatementExpression MethodInvocation builder MemberReference xml write",1
361,361,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import javax.jcr.NamespaceRegistry Import javax.jcr.RepositoryException Import org.apache.jackrabbit.rmi.remote.RemoteNamespaceRegistry ClassDeclaration Modifier public /**
 * Remote adapter for the JCR
 * {@link javax.jcr.NamespaceRegistry NamespaceRegistry} interface.
 * This class makes a local namespace registry available as an RMI service
 * using the
 * {@link org.apache.jackrabbit.rmi.remote.RemoteNamespaceRegistry RemoteNamespaceRegistry}
 * interface.
 *
 * @author Jukka Zitting
 * @see javax.jcr.NamespaceRegistry
 * @see org.apache.jackrabbit.rmi.remote.RemoteNamespaceRegistry
 */ ServerNamespaceRegistry FieldDeclaration /** The adapted local namespace registry. */ Modifier private ReferenceType NamespaceRegistry VariableDeclarator registry ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local namespace registry.
     *
     * @param registry local namespace registry
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerNamespaceRegistry FormalParameter ReferenceType NamespaceRegistry registry FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference registry MemberReference registry = MethodDeclaration /** {@inheritDoc} */ Modifier public registerNamespace FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri RepositoryException RemoteException TryStatement StatementExpression MethodInvocation registry MemberReference prefix MemberReference uri registerNamespace CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public unregisterNamespace FormalParameter ReferenceType String prefix RepositoryException RemoteException TryStatement StatementExpression MethodInvocation registry MemberReference prefix unregisterNamespace CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getPrefixes RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation registry getPrefixes CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getURIs RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation registry getURIs CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getURI FormalParameter ReferenceType String prefix RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation registry MemberReference prefix getURI CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getPrefix FormalParameter ReferenceType String uri RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation registry MemberReference uri getPrefix CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException ReferenceType ServerObject ReferenceType RemoteNamespaceRegistry",1
745,745,,0
224,224,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.property Import java.util.Iterator Import java.util.NoSuchElementException InterfaceDeclaration Modifier public /**
 * The <code>DavPropertyIterator</code> extends the <code>Iterator</code> by
 * a property specific <code>next()</code> method.
 */ DavPropertyIterator MethodDeclaration /**
     * Returns the next <code>Property</code> in the interation.
     *
     * @return the next <code>Property</code> in the iteration.
     * @throws java.util.NoSuchElementException if iteration has no more elements.
     */ Modifier public ReferenceType DavProperty nextProperty NoSuchElementException ReferenceType Iterator",1
115,115,"CompilationUnit PackageDeclaration org.apache.jackrabbit.xml Import java.io.ByteArrayOutputStream Import java.io.IOException Import java.io.InputStream Import javax.jcr.ItemVisitor Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.Property Import javax.jcr.PropertyIterator Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.Value Import org.apache.commons.codec.binary.Base64 Import org.xml.sax.ContentHandler Import org.xml.sax.SAXException Import org.xml.sax.helpers.AttributesImpl ClassDeclaration Modifier public /**
 * Generic system view exporter for JCR content repositories.
 * This class can be used to implement the XML system view export
 * operations using nothing but the standard JCR interfaces. The
 * export operation is implemented as an ItemVisitor that generates
 * the system view SAX event stream as it traverses the selected
 * JCR content tree.
 *
 * <h2>Implementing a customized XML serializer</h2>
 * <p>
 * A client can extend this class to provide customized XML serialization
 * formats. By overriding the protected includeProperty() and includeNode()
 * methods, a subclass can select which properties and nodes will be included
 * in the serialized XML stream.
 * <p>
 * For example, the following code implements an XML serialization that only
 * contains the titles of the first two levels of the node tree.
 * <pre>
 *     ContentHandler handler = ...;
 *     Node parent = ...;
 *     parent.accept(
 *         new SystemViewExportVisitor(handler, true, false) {
 *
 *             protected boolean includeProperty(Property property)
 *                     throws RepositoryException {
 *                 if (property.getName().equals(""title"")) {
 *                     return super.includeProperty(property);
 *                 } else {
 *                     return false;
 *                 }
 *             }
 *
 *             protected boolean includeNode(Node node)
 *                     throws RepositoryException {
 *                 return (node.getDepth() <= root.getDepth() + 2);
 *             }
 *
 *         });
 * </pre>
 *
 * <h2>Implementing the standard export methods</h2>
 * <p>
 * The following is an example of the
 * Session.exportSysView(String, ContentHandler, boolean, boolean)
 * method implemented in terms of this exporter class:
 * <pre>
 *     public void exportSysView(String absPath, ContentHandler handler,
 *             boolean skipBinary, boolean noRecurse) throws
 *             InvalidSerializedDataException, PathNotFoundException,
 *             SAXException, RepositoryException {
 *         Item item = getItem(absPath);
 *         if (item.isNode()) {
 *             item.accept(new DocumentViewExportVisitor(
 *                     handler, skipBinary, noRecurse));
 *         } else {
 *             throw new PathNotFoundException(""Invalid node path: "" + path);
 *         }
 *     }
 * </pre>
 * <p>
 * The companion method
 * Session.exportSysView(String, OutputStream, boolean, boolean)
 * can be implemented in terms of the above method and the XMLSerializer
 * class from the Xerces library:
 * <pre>
 * import org.apache.xml.serialize.XMLSerializer;
 * import org.apache.xml.serialize.OutputFormat;
 *
 *     public void exportSysView(String absPath, OutputStream output,
 *             boolean skipBinary, boolean noRecurse) throws
 *             InvalidSerializedDataException, PathNotFoundException,
 *             IOException, RepositoryException {
 *         try {
 *             XMLSerializer serializer =
 *                 new XMLSerializer(output, new OutputFormat());
 *             exportSysView(absPath, serializer.asContentHandler(),
 *                     binaryAsLink, noRecurse);
 *         } catch (SAXException ex) {
 *             throw new IOException(ex.getMessage());
 *         }
 *     }
 * </pre>
 *
 * @see ItemVisitor
 * @see Session#exportSystemView(String, ContentHandler, boolean, boolean)
 * @see Session#exportSystemView(String, java.io.OutputStream, boolean, boolean)
 */ SystemViewExportVisitor FieldDeclaration /** The system view namespace URI. */ Modifier private final static ReferenceType String VariableDeclarator SV Literal ""http://www.jcp.org/jcr/sv/1.0"" FieldDeclaration /** The special jcr:root node name. */ Modifier private final static ReferenceType String VariableDeclarator JCR_ROOT Literal ""jcr:root"" FieldDeclaration /** The special jcr:uuid property name. */ Modifier private final static ReferenceType String VariableDeclarator JCR_UUID Literal ""jcr:uuid"" FieldDeclaration /** The special jcr:primaryType property name. */ Modifier private final static ReferenceType String VariableDeclarator JCR_MIXINTYPES Literal ""jcr:mixinTypes"" FieldDeclaration /** The special jcr:mixinTypes property name. */ Modifier private final static ReferenceType String VariableDeclarator JCR_PRIMARYTYPE Literal ""jcr:primaryType"" FieldDeclaration /** The special sv:node element name. */ Modifier private final static ReferenceType String VariableDeclarator SV_NODE Literal ""sv:node"" FieldDeclaration /** Local part of the special sv:node element name. */ Modifier private final static ReferenceType String VariableDeclarator NODE Literal ""node"" FieldDeclaration /** The special sv:value element name. */ Modifier private final static ReferenceType String VariableDeclarator SV_VALUE Literal ""sv:value"" FieldDeclaration /** Local part of the special sv:value element name. */ Modifier private final static ReferenceType String VariableDeclarator VALUE Literal ""value"" FieldDeclaration /** The special sv:property element name. */ Modifier private final static ReferenceType String VariableDeclarator SV_PROPERTY Literal ""sv:property"" FieldDeclaration /** Local part of the special sv:property element name. */ Modifier private final static ReferenceType String VariableDeclarator PROPERTY Literal ""property"" FieldDeclaration /** The special sv:type element name. */ Modifier private final static ReferenceType String VariableDeclarator SV_TYPE Literal ""sv:type"" FieldDeclaration /** Local part of the special sv:type element name. */ Modifier private final static ReferenceType String VariableDeclarator TYPE Literal ""type"" FieldDeclaration /** The special sv:name element name. */ Modifier private final static ReferenceType String VariableDeclarator SV_NAME Literal ""sv:name"" FieldDeclaration /** Local part of the special sv:name element name. */ Modifier private final static ReferenceType String VariableDeclarator NAME Literal ""name"" FieldDeclaration /**
     * The SAX content handler for the serialized XML stream.
     */ Modifier private ReferenceType ContentHandler VariableDeclarator handler FieldDeclaration /**
     * Flag to skip all binary properties.
     */ Modifier private BasicType boolean VariableDeclarator skipBinary FieldDeclaration /**
     * Flag to only serialize the selected node.
     */ Modifier private BasicType boolean VariableDeclarator noRecurse FieldDeclaration /**
     * The root node of the serialization tree. This is the node that
     * is mapped to the root element of the serialized XML stream.
     */ Modifier protected ReferenceType Node VariableDeclarator root ConstructorDeclaration Modifier public /**
     * Creates an visitor for exporting content using the system view
     * format. To actually perform the export operation, you need to pass
     * the visitor instance to the selected content node using the
     * Node.accept(ItemVisitor) method.
     *
     * @param handler the SAX event handler
     * @param skipBinary flag for ignoring binary properties
     * @param noRecurse flag for not exporting an entire content subtree
     */ SystemViewExportVisitor FormalParameter ReferenceType ContentHandler handler FormalParameter BasicType boolean skipBinary FormalParameter BasicType boolean noRecurse StatementExpression Assignment This MemberReference handler MemberReference handler = StatementExpression Assignment This MemberReference skipBinary MemberReference skipBinary = StatementExpression Assignment This MemberReference noRecurse MemberReference noRecurse = StatementExpression Assignment This MemberReference root Literal null = MethodDeclaration /**
     * Exports the visited property using the system view serialization
     * format. This method generates an sv:property element with appropriate
     * sv:name and sv:type attributes. The value or values of the node
     * are included as sv:value sub-elements.
     *
     * @param property the visited property
     * @throws RepositoryException on repository errors
     */ Modifier public visit FormalParameter ReferenceType Property property RepositoryException TryStatement LocalVariableDeclaration ReferenceType AttributesImpl VariableDeclarator attributes ClassCreator ReferenceType AttributesImpl StatementExpression MethodInvocation attributes MemberReference SV MemberReference NAME MemberReference SV_NAME Literal ""CDATA"" MethodInvocation property getName addAttribute StatementExpression MethodInvocation attributes MemberReference SV MemberReference TYPE MemberReference SV_TYPE Literal ""CDATA"" MethodInvocation PropertyType MethodInvocation property getType nameFromValue addAttribute StatementExpression MethodInvocation handler MemberReference SV MemberReference PROPERTY MemberReference SV_PROPERTY MemberReference attributes startElement IfStatement MethodInvocation property MethodInvocation isMultiple getDefinition BlockStatement LocalVariableDeclaration ReferenceType Value VariableDeclarator values MethodInvocation property getValues ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i values exportValue End BlockStatement StatementExpression MethodInvocation MethodInvocation property getValue exportValue End StatementExpression MethodInvocation handler MemberReference SV MemberReference PROPERTY MemberReference SV_PROPERTY endElement CatchClause CatchClauseParameter SAXException ex ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference ex MethodDeclaration /**
     * Exports the visited node using the system view serialization format.
     * This method is the main entry point to the serialization mechanism.
     * It manages the opening and closing of the SAX event stream and the
     * registration of the namespace mappings. The process of actually
     * generating the document view SAX events is spread into various
     * private methods, and can be controlled by overriding the protected
     * includeProperty() and includeNode() methods.
     *
     * @param node the node to visit
     * @throws RepositoryException on repository errors
     */ Modifier public visit FormalParameter ReferenceType Node node RepositoryException TryStatement IfStatement BinaryOperation == MemberReference root Literal null BlockStatement StatementExpression Assignment MemberReference root MemberReference node = StatementExpression MethodInvocation handler startDocument LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation root getSession LocalVariableDeclaration ReferenceType String VariableDeclarator prefixes MethodInvocation session getNamespacePrefixes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference prefixes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation handler MemberReference ArraySelector MemberReference i prefixes MethodInvocation session MemberReference ArraySelector MemberReference i prefixes getNamespaceURI startPrefixMapping End End StatementExpression MethodInvocation MemberReference node exportNode IfStatement BinaryOperation == MemberReference root MemberReference node BlockStatement StatementExpression MethodInvocation handler endDocument End CatchClause CatchClauseParameter SAXException ex ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference ex MethodDeclaration /**
     * Checks whether the given property should be included in the XML
     * serialization. By default this method returns false for the special
     * jcr:primaryType, jcr:mixinTypes, and jcr:uuid properties that are
     * required by the system view format. This method also returns false
     * for all binary properties if the skipBinary flag is set.
     * Subclasses can extend this default behaviour to implement more
     * selective XML serialization.
     * <p>
     * To avoid losing the default behaviour described above, subclasses
     * should always call super.includeProperty(property) instead of
     * simply returning true for a property.
     *
     * @param property the property to check
     * @return true if the property should be included, false otherwise
     * @throws RepositoryException on repository errors
     */ Modifier protected BasicType boolean includeProperty FormalParameter ReferenceType Property property RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation property getName ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation && MethodInvocation ! name MemberReference JCR_PRIMARYTYPE equals MethodInvocation ! name MemberReference JCR_MIXINTYPES equals MethodInvocation ! name MemberReference JCR_UUID equals BinaryOperation || MemberReference ! skipBinary BinaryOperation != MethodInvocation property getType MemberReference PropertyType BINARY MethodDeclaration /**
     * Checks whether the given node should be included in the XML
     * serialization. This method returns true by default, but subclasses
     * can extend this behaviour to implement selective XML serialization.
     * <p>
     * Note that this method is only called for the descendants of the
     * root node of the serialized tree. Also, this method is never called
     * if the noRecurse flag is set because no descendant nodes will be
     * serialized anyway.
     *
     * @param node the node to check
     * @return true if the node should be included, false otherwise
     * @throws RepositoryException on repository errors
     */ Modifier protected BasicType boolean includeNode FormalParameter ReferenceType Node node RepositoryException ReturnStatement Literal true MethodDeclaration /**
     * Serializes the given node to the XML stream. This method generates
     * an sv:node element that contains the node name as the sv:name
     * attribute. Node properties are included as sv:property elements
     * and child nodes as other sv:node sub-elements.
     *
     * @param node the given node
     * @throws SAXException on SAX errors
     * @throws RepositoryException on repository errors
     */ Modifier private exportNode FormalParameter ReferenceType Node node SAXException RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation node getName IfStatement BinaryOperation == MethodInvocation name length Literal 0 BlockStatement StatementExpression Assignment MemberReference name MemberReference JCR_ROOT = End LocalVariableDeclaration ReferenceType AttributesImpl VariableDeclarator attributes ClassCreator ReferenceType AttributesImpl StatementExpression MethodInvocation attributes MemberReference SV MemberReference NAME MemberReference SV_NAME Literal ""CDATA"" MemberReference name addAttribute StatementExpression MethodInvocation handler MemberReference SV MemberReference NODE MemberReference SV_NODE MemberReference attributes startElement StatementExpression MethodInvocation node MethodInvocation This accept MemberReference JCR_PRIMARYTYPE getProperty IfStatement MethodInvocation node MemberReference JCR_MIXINTYPES hasProperty BlockStatement StatementExpression MethodInvocation node MethodInvocation This accept MemberReference JCR_MIXINTYPES getProperty End IfStatement MethodInvocation node MemberReference JCR_UUID hasProperty BlockStatement StatementExpression MethodInvocation node MethodInvocation This accept MemberReference JCR_UUID getProperty End LocalVariableDeclaration ReferenceType PropertyIterator VariableDeclarator properties MethodInvocation node getProperties WhileStatement MethodInvocation properties hasNext BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator property MethodInvocation properties nextProperty IfStatement MethodInvocation MemberReference property includeProperty BlockStatement StatementExpression MethodInvocation property This accept End End IfStatement MemberReference ! noRecurse BlockStatement LocalVariableDeclaration ReferenceType NodeIterator VariableDeclarator children MethodInvocation node getNodes WhileStatement MethodInvocation children hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child MethodInvocation children nextNode IfStatement MethodInvocation MemberReference child includeNode BlockStatement StatementExpression MethodInvocation child This accept End End End StatementExpression MethodInvocation handler MemberReference SV MemberReference NODE MemberReference SV_NODE endElement MethodDeclaration /**
     * Serializes the given value to the XML stream. This method generates
     * an sv:value element and writes the string representation of the
     * given value as the character content of the element. Binary values
     * are encoded using the Base64 encoding.
     *
     * @param value the given value
     * @throws SAXException on SAX errors
     * @throws RepositoryException on repository errors
     */ Modifier private exportValue FormalParameter ReferenceType Value value SAXException RepositoryException TryStatement StatementExpression MethodInvocation handler MemberReference SV MemberReference VALUE MemberReference SV_VALUE ClassCreator ReferenceType AttributesImpl startElement IfStatement BinaryOperation != MethodInvocation value getType MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator characters MethodInvocation value MethodInvocation toCharArray getString StatementExpression MethodInvocation handler MemberReference characters Literal 0 MemberReference characters length characters BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator characters MethodInvocation MethodInvocation toCharArray MethodInvocation value getStream encodeValue StatementExpression MethodInvocation handler MemberReference characters Literal 0 MemberReference characters length characters End StatementExpression MethodInvocation handler MemberReference SV MemberReference VALUE MemberReference SV_VALUE endElement CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * Encodes the given binary stream using Base64 encoding.
     *
     * @param input original binary value
     * @return Base64-encoded value
     * @throws IOException on IO errors
     */ Modifier private ReferenceType String encodeValue FormalParameter ReferenceType InputStream input IOException LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator buffer ClassCreator ReferenceType ByteArrayOutputStream LocalVariableDeclaration BasicType byte VariableDeclarator bytes ArrayCreator BasicType byte Literal 4096 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator n MethodInvocation input MemberReference bytes read BinaryOperation != MemberReference n Literal - 1 Assignment MemberReference n MethodInvocation input MemberReference bytes read = BlockStatement StatementExpression MethodInvocation buffer MemberReference bytes Literal 0 MemberReference n write End ReturnStatement ClassCreator ReferenceType String MethodInvocation Base64 MethodInvocation buffer toByteArray encodeBase64 Literal ""US-ASCII"" ReferenceType ItemVisitor",0
869,869,,0
536,536,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.io.ByteArrayInputStream Import java.io.ByteArrayOutputStream Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream Import java.rmi.RemoteException Import java.security.AccessControlException Import javax.jcr.Credentials Import javax.jcr.Item Import javax.jcr.Node Import javax.jcr.Repository Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.ValueFactory Import javax.jcr.Workspace Import javax.xml.transform.Result Import javax.xml.transform.Source Import javax.xml.transform.Transformer Import javax.xml.transform.TransformerConfigurationException Import javax.xml.transform.TransformerException Import javax.xml.transform.TransformerFactory Import javax.xml.transform.sax.SAXResult Import javax.xml.transform.stream.StreamSource Import org.apache.jackrabbit.rmi.remote.RemoteSession Import org.apache.jackrabbit.rmi.xml.SessionImportContentHandler Import org.apache.jackrabbit.rmi.value.SerialValueFactory Import org.xml.sax.ContentHandler Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * Local adapter for the JCR-RMI
 * {@link org.apache.jackrabbit.rmi.remote.RemoteSession RemoteSession}
 * inteface. This class makes a remote session locally available using
 * the JCR {@link javax.jcr.Session Session} interface.
 *
 * @author Jukka Zitting
 * @see javax.jcr.Session
 * @see org.apache.jackrabbit.rmi.remote.RemoteSession
 */ ClientSession FieldDeclaration /** The current repository. */ Modifier private ReferenceType Repository VariableDeclarator repository FieldDeclaration /**
     * Flag indicating whether the session is to be considered live of not.
     * This flag is initially set to <code>true</code> and reset to
     * <code>false</code> by the {@link #logout()} method. The {@link #isLive()}
     * method first checks this flag before asking the remote session.
     */ Modifier private BasicType boolean VariableDeclarator live Literal true FieldDeclaration /** The adapted remote session. */ Modifier private ReferenceType RemoteSession VariableDeclarator remote FieldDeclaration /**
     * The adapted workspace of this session. This field is set on the first
     * call to the {@link #getWorkspace()} method assuming, that a workspace
     * instance is not changing during the lifetime of a session, that is,
     * each call to the server-side <code>Session.getWorkspace()</code> allways
     * returns the same object.
     */ Modifier private ReferenceType Workspace VariableDeclarator workspace ConstructorDeclaration Modifier public /**
     * Creates a client adapter for the given remote session.
     *
     * @param repository current repository
     * @param remote remote repository
     * @param factory local adapter factory
     */ ClientSession FormalParameter ReferenceType Repository repository FormalParameter ReferenceType RemoteSession remote FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference repository MemberReference repository = StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration /**
     * Returns the current repository without contacting the remote session.
     *
     * {@inheritDoc}
     */ Modifier public ReferenceType Repository getRepository ReturnStatement MemberReference repository MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getUserID TryStatement ReturnStatement MethodInvocation remote getUserID CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Object getAttribute FormalParameter ReferenceType String name TryStatement ReturnStatement MethodInvocation remote MemberReference name getAttribute CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getAttributeNames TryStatement ReturnStatement MethodInvocation remote getAttributeNames CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Workspace getWorkspace IfStatement BinaryOperation == MemberReference workspace Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference workspace MethodInvocation MethodInvocation This MethodInvocation remote getWorkspace getWorkspace getFactory = CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex End ReturnStatement MemberReference workspace MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Session impersonate FormalParameter ReferenceType Credentials credentials RepositoryException TryStatement LocalVariableDeclaration ReferenceType RemoteSession VariableDeclarator session MethodInvocation remote MemberReference credentials impersonate ReturnStatement MethodInvocation MethodInvocation MemberReference repository MemberReference session getSession getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Node getRootNode RepositoryException TryStatement ReturnStatement MethodInvocation This MethodInvocation remote getRootNode getNode CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Node getNodeByUUID FormalParameter ReferenceType String uuid RepositoryException TryStatement ReturnStatement MethodInvocation This MethodInvocation remote MemberReference uuid getNodeByUUID getNode CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Item getItem FormalParameter ReferenceType String path RepositoryException TryStatement ReturnStatement MethodInvocation This MethodInvocation remote MemberReference path getItem getItem CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean itemExists FormalParameter ReferenceType String path RepositoryException TryStatement ReturnStatement MethodInvocation remote MemberReference path itemExists CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public move FormalParameter ReferenceType String from FormalParameter ReferenceType String to RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference from MemberReference to move CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public save RepositoryException TryStatement StatementExpression MethodInvocation remote save CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public refresh FormalParameter BasicType boolean keepChanges RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference keepChanges refresh CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean hasPendingChanges RepositoryException TryStatement ReturnStatement MethodInvocation remote hasPendingChanges CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /**
     * Returns the {@link SerialValueFactory#getInstance()}.
     *
     * {@inheritDoc}
     */ Modifier public ReferenceType ValueFactory getValueFactory ReturnStatement MethodInvocation SerialValueFactory getInstance MethodDeclaration /** {@inheritDoc} */ Modifier public checkPermission FormalParameter ReferenceType String path FormalParameter ReferenceType String actions AccessControlException RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference path MemberReference actions checkPermission CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public importXML FormalParameter ReferenceType String path FormalParameter ReferenceType InputStream xml FormalParameter BasicType int mode IOException RepositoryException TryStatement LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator buffer ClassCreator ReferenceType ByteArrayOutputStream LocalVariableDeclaration BasicType byte VariableDeclarator bytes ArrayCreator BasicType byte Literal 4096 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator n MethodInvocation xml MemberReference bytes read BinaryOperation != MemberReference n Literal - 1 Assignment MemberReference n MethodInvocation xml MemberReference bytes read = BlockStatement StatementExpression MethodInvocation buffer MemberReference bytes Literal 0 MemberReference n write End StatementExpression MethodInvocation remote MemberReference path MethodInvocation buffer toByteArray MemberReference mode importXML CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType ContentHandler getImportContentHandler FormalParameter ReferenceType String path FormalParameter BasicType int mode RepositoryException ReturnStatement ClassCreator ReferenceType SessionImportContentHandler This MemberReference path MemberReference mode MethodDeclaration /** {@inheritDoc} */ Modifier public setNamespacePrefix FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference prefix MemberReference uri setNamespacePrefix CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getNamespacePrefixes RepositoryException TryStatement ReturnStatement MethodInvocation remote getNamespacePrefixes CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getNamespaceURI FormalParameter ReferenceType String prefix RepositoryException TryStatement ReturnStatement MethodInvocation remote MemberReference prefix getNamespaceURI CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getNamespacePrefix FormalParameter ReferenceType String uri RepositoryException TryStatement ReturnStatement MethodInvocation remote MemberReference uri getNamespacePrefix CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public logout IfStatement MethodInvocation ! isLive BlockStatement ReturnStatement End TryStatement StatementExpression MethodInvocation remote logout CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex StatementExpression Assignment MemberReference live Literal false = MethodDeclaration /** {@inheritDoc} */ Modifier public addLockToken FormalParameter ReferenceType String name TryStatement StatementExpression MethodInvocation remote MemberReference name addLockToken CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getLockTokens TryStatement ReturnStatement MethodInvocation remote getLockTokens CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public removeLockToken FormalParameter ReferenceType String name TryStatement StatementExpression MethodInvocation remote MemberReference name removeLockToken CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /**
     * Exports the XML system view of the specified repository location
     * to the given XML content handler. This method first requests the
     * raw XML data from the remote session, and then uses an identity
     * transformation to feed the data to the given XML content handler.
     * Possible IO and transformer exceptions are thrown as SAXExceptions.
     *
     * {@inheritDoc}
     */ Modifier public exportSystemView FormalParameter ReferenceType String path FormalParameter ReferenceType ContentHandler handler FormalParameter BasicType boolean binaryAsLink FormalParameter BasicType boolean noRecurse SAXException RepositoryException TryStatement LocalVariableDeclaration BasicType byte VariableDeclarator xml MethodInvocation remote MemberReference path MemberReference binaryAsLink MemberReference noRecurse exportSystemView LocalVariableDeclaration ReferenceType Source VariableDeclarator source ClassCreator ReferenceType StreamSource ClassCreator ReferenceType ByteArrayInputStream MemberReference xml LocalVariableDeclaration ReferenceType Result VariableDeclarator result ClassCreator ReferenceType SAXResult MemberReference handler LocalVariableDeclaration ReferenceType TransformerFactory VariableDeclarator factory MethodInvocation TransformerFactory newInstance LocalVariableDeclaration ReferenceType Transformer VariableDeclarator transformer MethodInvocation factory newTransformer StatementExpression MethodInvocation transformer MemberReference source MemberReference result transform CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex CatchClause CatchClauseParameter TransformerConfigurationException ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex CatchClause CatchClauseParameter TransformerException ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex MethodDeclaration /**
     * Exports the XML system view of the specified repository location
     * to the given output stream. This method first requests the
     * raw XML data from the remote session, and then writes the data to
     * the output stream.
     *
     * {@inheritDoc}
     */ Modifier public exportSystemView FormalParameter ReferenceType String path FormalParameter ReferenceType OutputStream output FormalParameter BasicType boolean binaryAsLink FormalParameter BasicType boolean noRecurse IOException RepositoryException TryStatement LocalVariableDeclaration BasicType byte VariableDeclarator xml MethodInvocation remote MemberReference path MemberReference binaryAsLink MemberReference noRecurse exportSystemView StatementExpression MethodInvocation output MemberReference xml write CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /**
     * Exports the XML document view of the specified repository location
     * to the given XML content handler. This method first requests the
     * raw XML data from the remote session, and then uses an identity
     * transformation to feed the data to the given XML content handler.
     * Possible IO and transformer exceptions are thrown as SAXExceptions.
     *
     * {@inheritDoc}
     */ Modifier public exportDocumentView FormalParameter ReferenceType String path FormalParameter ReferenceType ContentHandler handler FormalParameter BasicType boolean binaryAsLink FormalParameter BasicType boolean noRecurse SAXException RepositoryException TryStatement LocalVariableDeclaration BasicType byte VariableDeclarator xml MethodInvocation remote MemberReference path MemberReference binaryAsLink MemberReference noRecurse exportDocumentView LocalVariableDeclaration ReferenceType Source VariableDeclarator source ClassCreator ReferenceType StreamSource ClassCreator ReferenceType ByteArrayInputStream MemberReference xml LocalVariableDeclaration ReferenceType Result VariableDeclarator result ClassCreator ReferenceType SAXResult MemberReference handler LocalVariableDeclaration ReferenceType TransformerFactory VariableDeclarator factory MethodInvocation TransformerFactory newInstance LocalVariableDeclaration ReferenceType Transformer VariableDeclarator transformer MethodInvocation factory newTransformer StatementExpression MethodInvocation transformer MemberReference source MemberReference result transform CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex CatchClause CatchClauseParameter TransformerConfigurationException ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex CatchClause CatchClauseParameter TransformerException ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex MethodDeclaration /**
     * Exports the XML document view of the specified repository location
     * to the given output stream. This method first requests the
     * raw XML data from the remote session, and then writes the data to
     * the output stream.
     *
     * {@inheritDoc}
     */ Modifier public exportDocumentView FormalParameter ReferenceType String path FormalParameter ReferenceType OutputStream output FormalParameter BasicType boolean binaryAsLink FormalParameter BasicType boolean noRecurse IOException RepositoryException TryStatement LocalVariableDeclaration BasicType byte VariableDeclarator xml MethodInvocation remote MemberReference path MemberReference binaryAsLink MemberReference noRecurse exportDocumentView StatementExpression MethodInvocation output MemberReference xml write CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isLive TryStatement ReturnStatement BinaryOperation && MemberReference live MethodInvocation remote isLive CatchClause CatchClauseParameter RemoteException e ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference e ReferenceType ClientObject ReferenceType Session",0
251,251,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import java.rmi.server.UnicastRemoteObject Import javax.jcr.RepositoryException Import javax.jcr.lock.Lock Import org.apache.jackrabbit.rmi.remote.RemoteLock ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link javax.jcr.lock.Lock Lock} interface.
 * This class makes a local lock available as an RMI service using
 * the {@link org.apache.jackrabbit.rmi.remote.RemoteLock RemoteLock}
 * interface.
 *
 * @author Jukka Zitting
 * @see javax.jcr.lock.Lock
 * @see org.apache.jackrabbit.rmi.remote.RemoteLock
 */ ServerLock FieldDeclaration /** The adapted local lock. */ Modifier private ReferenceType Lock VariableDeclarator lock ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local lock.
     *
     * @param lock local lock
     * @throws RemoteException on RMI errors
     */ ServerLock FormalParameter ReferenceType Lock lock RemoteException StatementExpression Assignment This MemberReference lock MemberReference lock = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getLockOwner RemoteException ReturnStatement MethodInvocation lock getLockOwner MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isDeep RemoteException ReturnStatement MethodInvocation lock isDeep MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getLockToken RemoteException ReturnStatement MethodInvocation lock getLockToken MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isLive RepositoryException RemoteException ReturnStatement MethodInvocation lock isLive MethodDeclaration /** {@inheritDoc} */ Modifier public refresh RepositoryException RemoteException StatementExpression MethodInvocation lock refresh MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isSessionScoped RemoteException ReturnStatement MethodInvocation lock isSessionScoped ReferenceType UnicastRemoteObject ReferenceType RemoteLock",1
554,554,,0
618,618,,0
218,218,"CompilationUnit PackageDeclaration org.apache.jackrabbit.jca Import org.apache.jackrabbit.core.RepositoryImpl Import org.apache.jackrabbit.core.XASession Import javax.jcr.Repository Import javax.resource.ResourceException Import javax.resource.spi.ConnectionEvent Import javax.resource.spi.ConnectionEventListener Import javax.resource.spi.ConnectionRequestInfo Import javax.resource.spi.LocalTransaction Import javax.resource.spi.ManagedConnection Import javax.resource.spi.ManagedConnectionMetaData Import javax.security.auth.Subject Import javax.transaction.xa.XAResource Import java.io.PrintWriter Import java.util.Iterator Import java.util.LinkedList ClassDeclaration Modifier public final /**
 * This class implements the managed connection for
 * this resource adapter.
 */ JCAManagedConnection FieldDeclaration /**
     * Managed connection factory.
     */ Modifier private final ReferenceType JCAManagedConnectionFactory VariableDeclarator mcf FieldDeclaration /**
     * Connection request info.
     */ Modifier private final ReferenceType JCAConnectionRequestInfo VariableDeclarator cri FieldDeclaration /**
     * Session instance.
     */ Modifier private final ReferenceType XASession VariableDeclarator session FieldDeclaration /**
     * Listeners.
     */ Modifier private final ReferenceType LinkedList VariableDeclarator listeners FieldDeclaration /**
     * Handles.
     */ Modifier private final ReferenceType LinkedList VariableDeclarator handles FieldDeclaration /**
     * Log writer.
     */ Modifier private ReferenceType PrintWriter VariableDeclarator logWriter ConstructorDeclaration Modifier public /**
     * Construct the managed connection.
     */ JCAManagedConnection FormalParameter ReferenceType JCAManagedConnectionFactory mcf FormalParameter ReferenceType JCAConnectionRequestInfo cri FormalParameter ReferenceType XASession session StatementExpression Assignment This MemberReference mcf MemberReference mcf = StatementExpression Assignment This MemberReference cri MemberReference cri = StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference listeners ClassCreator ReferenceType LinkedList = StatementExpression Assignment This MemberReference handles ClassCreator ReferenceType LinkedList = MethodDeclaration /**
     * Return the repository.
     */ Modifier private ReferenceType RepositoryImpl getRepository ReturnStatement MethodInvocation mcf getRepository MethodDeclaration /**
     * Return the managed connection factory.
     */ Modifier public ReferenceType JCAManagedConnectionFactory getManagedConnectionFactory ReturnStatement MemberReference mcf MethodDeclaration /**
     * Return the connection request info.
     */ Modifier public ReferenceType JCAConnectionRequestInfo getConnectionRequestInfo ReturnStatement MemberReference cri MethodDeclaration /**
     * Get the log writer.
     */ Modifier public ReferenceType PrintWriter getLogWriter ReturnStatement MemberReference logWriter MethodDeclaration /**
     * Set the log writer.
     */ Modifier public setLogWriter FormalParameter ReferenceType PrintWriter logWriter ResourceException StatementExpression Assignment This MemberReference logWriter MemberReference logWriter = MethodDeclaration /**
     * Creates a new connection handle for the underlying physical
     * connection represented by the ManagedConnection instance.
     */ Modifier public ReferenceType Object getConnection FormalParameter ReferenceType Subject subject FormalParameter ReferenceType ConnectionRequestInfo cri ResourceException LocalVariableDeclaration ReferenceType JCASessionHandle VariableDeclarator handle ClassCreator ReferenceType JCASessionHandle This StatementExpression MethodInvocation MemberReference handle addHandle ReturnStatement MemberReference handle MethodDeclaration /**
     * Destroys the physical connection to the underlying resource manager.
     */ Modifier public destroy ResourceException StatementExpression MethodInvocation cleanup StatementExpression MethodInvocation session logout MethodDeclaration /**
     * Application server calls this method to force any cleanup on
     * the ManagedConnection instance.
     */ Modifier public cleanup ResourceException StatementExpression MethodInvocation closeHandles MethodDeclaration /**
     * Used by the container to change the association of an
     * application-level connection handle with a ManagedConneciton instance.
     */ Modifier public associateConnection FormalParameter ReferenceType Object connection ResourceException LocalVariableDeclaration ReferenceType JCASessionHandle VariableDeclarator handle Cast ReferenceType JCASessionHandle MemberReference connection IfStatement BinaryOperation != MethodInvocation handle getManagedConnection This BlockStatement StatementExpression MethodInvocation handle MethodInvocation MemberReference handle removeHandle getManagedConnection StatementExpression MethodInvocation handle This setManagedConnection StatementExpression MethodInvocation MemberReference handle addHandle End MethodDeclaration /**
     * Returns an javax.transaction.xa.XAresource instance.
     */ Modifier public ReferenceType XAResource getXAResource ResourceException ReturnStatement MethodInvocation session getXAResource MethodDeclaration /**
     * Returns an javax.resource.spi.LocalTransaction instance.
     */ Modifier public ReferenceType LocalTransaction getLocalTransaction ResourceException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""Local transaction is not supported"" MethodDeclaration /**
     * Gets the metadata information for this connection's underlying
     * EIS resource manager instance.
     */ Modifier public ReferenceType ManagedConnectionMetaData getMetaData ResourceException ReturnStatement This MethodDeclaration /**
     * Close the handle.
     */ Modifier public closeHandle FormalParameter ReferenceType JCASessionHandle handle IfStatement BinaryOperation != MemberReference handle Literal null BlockStatement StatementExpression MethodInvocation MemberReference handle removeHandle StatementExpression MethodInvocation MemberReference handle sendClosedEvent End MethodDeclaration /**
     * Return the session.
     */ Modifier public ReferenceType XASession getSession FormalParameter ReferenceType JCASessionHandle handle SynchronizedStatement MemberReference handles IfStatement BinaryOperation && BinaryOperation > MethodInvocation handles size Literal 0 BinaryOperation == MethodInvocation handles Literal 0 get MemberReference handle BlockStatement ReturnStatement MemberReference session BlockStatement ThrowStatement ClassCreator ReferenceType java ReferenceType lang ReferenceType IllegalStateException Literal ""Inactive logical session handle called"" End MethodDeclaration /**
     * Return the product name.
     */ Modifier public ReferenceType String getEISProductName ResourceException ReturnStatement MethodInvocation MethodInvocation MemberReference Repository REP_NAME_DESC getDescriptor getRepository MethodDeclaration /**
     * Return the product version.
     */ Modifier public ReferenceType String getEISProductVersion ResourceException ReturnStatement MethodInvocation MethodInvocation MemberReference Repository REP_VERSION_DESC getDescriptor getRepository MethodDeclaration /**
     * Return number of max connections.
     */ Modifier public BasicType int getMaxConnections ResourceException ReturnStatement MemberReference Integer MAX_VALUE MethodDeclaration /**
     * Return the user name.
     */ Modifier public ReferenceType String getUserName ResourceException ReturnStatement MethodInvocation session getUserID MethodDeclaration /**
     * Log a message.
     */ Modifier public log FormalParameter ReferenceType String message StatementExpression MethodInvocation MemberReference message Literal null log MethodDeclaration /**
     * Log a message.
     */ Modifier public log FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable exception IfStatement BinaryOperation != MemberReference logWriter Literal null BlockStatement StatementExpression MethodInvocation logWriter MemberReference message println IfStatement BinaryOperation != MemberReference exception Literal null BlockStatement StatementExpression MethodInvocation exception MemberReference logWriter printStackTrace End End MethodDeclaration /**
     * Adds a listener.
     */ Modifier public addConnectionEventListener FormalParameter ReferenceType ConnectionEventListener listener SynchronizedStatement MemberReference listeners IfStatement MethodInvocation ! listeners MemberReference listener contains BlockStatement StatementExpression MethodInvocation listeners MemberReference listener add End MethodDeclaration /**
     * Remove a listener.
     */ Modifier public removeConnectionEventListener FormalParameter ReferenceType ConnectionEventListener listener SynchronizedStatement MemberReference listeners StatementExpression MethodInvocation listeners MemberReference listener remove MethodDeclaration /**
     * Send event.
     */ Modifier private sendEvent FormalParameter ReferenceType ConnectionEvent event SynchronizedStatement MemberReference listeners ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation listeners iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType ConnectionEventListener VariableDeclarator listener Cast ReferenceType ConnectionEventListener MethodInvocation i next SwitchStatement MethodInvocation event getId SwitchStatementCase MemberReference ConnectionEvent CONNECTION_CLOSED StatementExpression MethodInvocation listener MemberReference event connectionClosed BreakStatement SwitchStatementCase MemberReference ConnectionEvent CONNECTION_ERROR_OCCURRED StatementExpression MethodInvocation listener MemberReference event connectionErrorOccurred BreakStatement SwitchStatementCase MemberReference ConnectionEvent LOCAL_TRANSACTION_COMMITTED StatementExpression MethodInvocation listener MemberReference event localTransactionCommitted BreakStatement SwitchStatementCase MemberReference ConnectionEvent LOCAL_TRANSACTION_ROLLEDBACK StatementExpression MethodInvocation listener MemberReference event localTransactionRolledback BreakStatement SwitchStatementCase MemberReference ConnectionEvent LOCAL_TRANSACTION_STARTED StatementExpression MethodInvocation listener MemberReference event localTransactionStarted BreakStatement End End MethodDeclaration /**
     * Send event.
     */ Modifier private sendEvent FormalParameter BasicType int type FormalParameter ReferenceType Object handle FormalParameter ReferenceType Exception cause LocalVariableDeclaration ReferenceType ConnectionEvent VariableDeclarator event ClassCreator ReferenceType ConnectionEvent This MemberReference type MemberReference cause IfStatement BinaryOperation != MemberReference handle Literal null BlockStatement StatementExpression MethodInvocation event MemberReference handle setConnectionHandle End StatementExpression MethodInvocation MemberReference event sendEvent MethodDeclaration /**
     * Send connection closed event.
     */ Modifier private sendClosedEvent FormalParameter ReferenceType JCASessionHandle handle StatementExpression MethodInvocation MemberReference ConnectionEvent CONNECTION_CLOSED MemberReference handle Literal null sendEvent MethodDeclaration /**
     * Send connection error event.
     */ Modifier public sendrrorEvent FormalParameter ReferenceType JCASessionHandle handle FormalParameter ReferenceType Exception cause StatementExpression MethodInvocation MemberReference ConnectionEvent CONNECTION_ERROR_OCCURRED MemberReference handle MemberReference cause sendEvent MethodDeclaration /**
     * Send transaction committed event.
     */ Modifier public sendTxCommittedEvent FormalParameter ReferenceType JCASessionHandle handle StatementExpression MethodInvocation MemberReference ConnectionEvent LOCAL_TRANSACTION_COMMITTED MemberReference handle Literal null sendEvent MethodDeclaration /**
     * Send transaction rolledback event.
     */ Modifier public sendTxRolledbackEvent FormalParameter ReferenceType JCASessionHandle handle StatementExpression MethodInvocation MemberReference ConnectionEvent LOCAL_TRANSACTION_ROLLEDBACK MemberReference handle Literal null sendEvent MethodDeclaration /**
     * Send transaction started event.
     */ Modifier public sendTxStartedEvent FormalParameter ReferenceType JCASessionHandle handle StatementExpression MethodInvocation MemberReference ConnectionEvent LOCAL_TRANSACTION_STARTED MemberReference handle Literal null sendEvent MethodDeclaration /**
     * Add a session handle.
     */ Modifier private addHandle FormalParameter ReferenceType JCASessionHandle handle SynchronizedStatement MemberReference handles StatementExpression MethodInvocation handles MemberReference handle addFirst MethodDeclaration /**
     * Remove a session handle.
     */ Modifier private removeHandle FormalParameter ReferenceType JCASessionHandle handle SynchronizedStatement MemberReference handles StatementExpression MethodInvocation handles MemberReference handle remove MethodDeclaration /**
     * Release handles.
     */ Modifier private closeHandles SynchronizedStatement MemberReference handles ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation handles iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType JCASessionHandle VariableDeclarator handle Cast ReferenceType JCASessionHandle MethodInvocation i next StatementExpression MethodInvocation MemberReference handle closeHandle End StatementExpression MethodInvocation handles clear ReferenceType ManagedConnection ReferenceType ManagedConnectionMetaData",1
813,813,,0
403,403,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene.fulltext Import java.io.IOException ClassDeclaration Modifier public final /**
 * Modified version of <code>org.apache.lucene.queryParser.FastCharStream</code>
 * based on a <code>String</code> input.
 * <p/>
 * An efficient implementation of JavaCC's CharStream interface. <p>Note that
 * this does not do line-number counting, but instead keeps track of the
 * character position of the token in the input, as required by Lucene's {@link
 * org.apache.lucene.analysis.Token} API.
 */ FastCharStream FieldDeclaration /**
     * Next char to read.
     */ Modifier private BasicType int VariableDeclarator position FieldDeclaration /**
     * Offset in String for current token.
     */ Modifier private BasicType int VariableDeclarator tokenStart FieldDeclaration /**
     * The input String.
     */ Modifier private ReferenceType String VariableDeclarator input ConstructorDeclaration Modifier public /**
     * Constructs from a String.
     */ FastCharStream FormalParameter ReferenceType String input StatementExpression Assignment This MemberReference input MemberReference input = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType char readChar IOException IfStatement BinaryOperation >= MemberReference position MethodInvocation input length BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""read past eof"" End ReturnStatement MethodInvocation input MemberReference ++ position charAt MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType char BeginToken IOException StatementExpression Assignment MemberReference tokenStart MemberReference position = ReturnStatement MethodInvocation readChar MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final backup FormalParameter BasicType int amount StatementExpression Assignment MemberReference position MemberReference amount -= MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final ReferenceType String GetImage ReturnStatement MethodInvocation input MemberReference tokenStart MemberReference position substring MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType char GetSuffix FormalParameter BasicType int len LocalVariableDeclaration BasicType char VariableDeclarator value ArrayCreator BasicType char MemberReference len ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference len MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i value MethodInvocation input BinaryOperation + BinaryOperation - MemberReference position MemberReference len MemberReference i charAt = End ReturnStatement MemberReference value MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final Done MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType int getColumn ReturnStatement MemberReference position MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType int getLine ReturnStatement Literal 1 MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType int getEndColumn ReturnStatement MemberReference position MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType int getEndLine ReturnStatement Literal 1 MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType int getBeginColumn ReturnStatement MemberReference tokenStart MethodDeclaration /**
     * @inheritDoc
     */ Modifier public final BasicType int getBeginLine ReturnStatement Literal 1 ReferenceType CharStream",0
612,612,,0
143,143,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.remote Import java.rmi.Remote Import java.rmi.RemoteException InterfaceDeclaration Modifier public /**
 * Remote version of the JCR {@link javax.jcr.nodetype.ItemDefinition ItemDef}
 * interface. Used by the
 * {@link org.apache.jackrabbit.rmi.server.ServerItemDefinition ServerItemDefinition} and
 * {@link org.apache.jackrabbit.rmi.client.ClientItemDefinition ClientItemDefinition}
 * adapter base classes to provide transparent RMI access to remote item
 * definitions.
 * <p>
 * The methods in this interface are documented only with a reference
 * to a corresponding ItemDef method. The remote object will simply forward
 * the method call to the underlying ItemDef instance. Argument and return
 * values, as well as possible exceptions, are copied over the network.
 * Compex {@link javax.jcr.nodetype.NodeType NodeType} return values
 * are returned as remote references to the
 * {@link org.apache.jackrabbit.rmi.remote.RemoteNodeType RemoteNodeType}
 * interface. RMI errors are signalled with RemoteExceptions.
 *
 * @author Jukka Zitting
 * @see javax.jcr.nodetype.ItemDefinition
 * @see org.apache.jackrabbit.rmi.client.ClientItemDefinition
 * @see org.apache.jackrabbit.rmi.server.ServerItemDefinition
 */ RemoteItemDefinition MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.ItemDefinition#getDeclaringNodeType() ItemDef.getDeclaringNodeType()}
     * method.
     *
     * @return declaring node type
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNodeType getDeclaringNodeType RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.ItemDefinition#getName() ItemDef.getName()} method.
     *
     * @return item name
     * @throws RemoteException on RMI errors
     */ ReferenceType String getName RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.ItemDefinition#isAutoCreated() ItemDef.isAutoCreate()}
     * method.
     *
     * @return <code>true</code> if the item is automatically created,
     *         <code>false</code> otherwise
     * @throws RemoteException on RMI errors
     */ BasicType boolean isAutoCreated RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.ItemDefinition#isMandatory() ItemDef.isMandatory()}
     * method.
     *
     * @return <code>true</code> if the item is mandatory,
     *         <code>false</code> otherwise
     * @throws RemoteException on RMI errors
     */ BasicType boolean isMandatory RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.ItemDefinition#getOnParentVersion() ItemDef.getOnParentVersion()}
     * method.
     *
     * @return parent version behaviour
     * @throws RemoteException on RMI errors
     */ BasicType int getOnParentVersion RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.ItemDefinition#isProtected() ItemDef.isProtected()}
     * method.
     *
     * @return <code>true</code> if the item is protected,
     *         <code>false</code> otherwise
     * @throws RemoteException on RMI errors
     */ BasicType boolean isProtected RemoteException ReferenceType Remote",0
366,366,"CompilationUnit PackageDeclaration org.apache.jackrabbit.state.nodetype ClassDeclaration Modifier public /**
 * Node type manager state. Instances of this class are used to hold
 * and manage the internal state of node type managers.
 */ NodeTypeManagerState FieldDeclaration /** Available node type states. */ Modifier private ReferenceType NodeTypeState VariableDeclarator nodeTypeStates MethodDeclaration /**
     * Returns all available node type states.
     *
     * @return node type states
     */ Modifier public ReferenceType NodeTypeState getNodeTypeStates ReturnStatement MemberReference nodeTypeStates MethodDeclaration /**
     * Sets the node type manager state.
     *
     * @param nodeTypeStates node type states
     */ Modifier public setNodeTypeStates FormalParameter ReferenceType NodeTypeState nodeTypeStates StatementExpression Assignment This MemberReference nodeTypeStates MemberReference nodeTypeStates =",1
901,901,,0
679,679,,0
112,112,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.jackrabbit.core.PropertyId Import org.apache.log4j.Logger Import java.io.Serializable Import java.util.ArrayList Import java.util.Collections Import java.util.List ClassDeclaration Modifier public /**
 * <code>NodeReferences</code> represents the references (i.e. properties of
 * type <code>REFERENCE</code>) to a particular node (denoted by its uuid).
 */ NodeReferences FieldDeclaration /**
     * Serial UID
     */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal 7007727035982680717L FieldDeclaration /**
     * Logger instance
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType NodeReferences getLogger FieldDeclaration /**
     * id of the target node
     */ Modifier protected ReferenceType NodeReferencesId VariableDeclarator targetId FieldDeclaration /**
     * list of PropertyId's (i.e. the id's of the properties that refer to
     * the target node denoted by <code>targetId</code>).
     * <p/>
     * note that the list can contain duplicate entries because a specific
     * REFERENCE property can contain multiple references (if it's multi-valued)
     * to potentially the same target node.
     */ Modifier protected ReferenceType ArrayList VariableDeclarator references ClassCreator ReferenceType ArrayList ConstructorDeclaration Modifier public /**
     * Package private constructor
     *
     * @param targetId
     */ NodeReferences FormalParameter ReferenceType NodeReferencesId targetId StatementExpression Assignment This MemberReference targetId MemberReference targetId = MethodDeclaration /**
     * Return the target id of this node references object.
     *
     * @return target id
     */ Modifier public ReferenceType NodeReferencesId getTargetId ReturnStatement MemberReference targetId MethodDeclaration /**
     * Return the UUID of the target id
     *
     * @return UUID of the target id
     */ Modifier public ReferenceType String getUUID ReturnStatement MethodInvocation targetId getUUID MethodDeclaration /**
     * Return a flag indicating whether this object holds any references
     *
     * @return <code>true</code> if this object holds references,
     *         <code>false</code> otherwise
     */ Modifier public BasicType boolean hasReferences ReturnStatement MethodInvocation ! references isEmpty MethodDeclaration /**
     * @return
     */ Modifier public ReferenceType List getReferences ReturnStatement MethodInvocation Collections MemberReference references unmodifiableList MethodDeclaration /**
     * @param refId
     */ Modifier public addReference FormalParameter ReferenceType PropertyId refId StatementExpression MethodInvocation references MemberReference refId add MethodDeclaration /**
     * @param references
     */ Modifier public addAllReferences FormalParameter ReferenceType List references StatementExpression This MemberReference references MethodInvocation MemberReference references addAll MethodDeclaration /**
     * @param refId
     * @return
     */ Modifier public BasicType boolean removeReference FormalParameter ReferenceType PropertyId refId ReturnStatement MethodInvocation references MemberReference refId remove MethodDeclaration /**
     *
     */ Modifier public clearAllReferences StatementExpression MethodInvocation references clear ReferenceType Serializable",0
379,379,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermDocs Import org.apache.lucene.index.TermEnum Import org.apache.lucene.search.FieldCache Import org.apache.lucene.search.SortComparator Import java.io.IOException Import java.util.HashMap Import java.util.Map Import java.util.WeakHashMap Import java.util.List Import java.util.ArrayList ClassDeclaration /**
 * Implements a variant of the lucene class <code>org.apache.lucene.search.FieldCacheImpl</code>.
 * The lucene FieldCache class has some sort of support for custom comparators
 * but it only works on the basis of a field name. There is no further control
 * over the terms to iterate, that's why we use our own implementation.
 */ SharedFieldCache FieldDeclaration /**
     * Reference to the single instance of <code>SharedFieldCache</code>.
     */ Modifier public final static ReferenceType SharedFieldCache VariableDeclarator INSTANCE ClassCreator ReferenceType SharedFieldCache FieldDeclaration /**
     * The internal cache. Maps Entry to array of interpreted term values.
     */ Modifier private final ReferenceType Map VariableDeclarator cache ClassCreator ReferenceType WeakHashMap ConstructorDeclaration Modifier private /**
     * Private constructor.
     */ SharedFieldCache MethodDeclaration /**
     * Creates a <code>StringIndex</code> for a <code>field</code> and a term
     * <code>prefix</code>. The term prefix acts as the property name for the
     * shared <code>field</code>.
     * <p/>
     * This method is an adapted version of: <code>FieldCacheImpl.getStringIndex()</code>
     * The returned string index will <b>not</b> have a term lookup array!
     * See {@link SharedFieldSortComparator} for more info.
     *
     * @param reader     the <code>IndexReader</code>.
     * @param field      name of the shared field.
     * @param prefix     the property name, will be used as term prefix.
     * @param comparator the sort comparator instance.
     * @param includeLookup if <code>true</code> provides term lookup in StringIndex.
     * @return a StringIndex that contains the field values and order
     *         information.
     * @throws IOException if an error occurs while reading from the index.
     */ Modifier public ReferenceType FieldCache ReferenceType StringIndex getStringIndex FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType String field FormalParameter ReferenceType String prefix FormalParameter ReferenceType SortComparator comparator FormalParameter BasicType boolean includeLookup IOException StatementExpression Assignment MemberReference field MethodInvocation field intern = LocalVariableDeclaration ReferenceType FieldCache ReferenceType StringIndex VariableDeclarator ret MethodInvocation MemberReference reader MemberReference field MemberReference prefix MemberReference comparator lookup IfStatement BinaryOperation == MemberReference ret Literal null BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator retArray ArrayCreator BasicType int MethodInvocation reader maxDoc LocalVariableDeclaration ReferenceType List VariableDeclarator mterms Literal null IfStatement MemberReference includeLookup BlockStatement StatementExpression Assignment MemberReference mterms ClassCreator ReferenceType ArrayList = End IfStatement BinaryOperation > MemberReference retArray length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator termDocs MethodInvocation reader termDocs LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator termEnum MethodInvocation reader ClassCreator ReferenceType Term MemberReference field MemberReference prefix terms IfStatement MemberReference includeLookup BlockStatement StatementExpression MethodInvocation mterms Literal null add End LocalVariableDeclaration BasicType int VariableDeclarator t Literal 1 TryStatement IfStatement BinaryOperation == MethodInvocation termEnum term Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + Literal ""no terms in field "" MemberReference field End DoStatement MethodInvocation termEnum next BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator term MethodInvocation termEnum term IfStatement BinaryOperation || BinaryOperation != MethodInvocation term field MemberReference field MethodInvocation ! term MethodInvocation MemberReference prefix startsWith text BlockStatement BreakStatement End IfStatement MemberReference includeLookup BlockStatement StatementExpression MethodInvocation mterms MethodInvocation term MethodInvocation MethodInvocation prefix length substring text add End StatementExpression MethodInvocation termDocs MemberReference termEnum seek WhileStatement MethodInvocation termDocs next BlockStatement StatementExpression Assignment MemberReference ArraySelector MethodInvocation termDocs doc retArray MemberReference t = End StatementExpression MemberReference ++ t End StatementExpression MethodInvocation termDocs close StatementExpression MethodInvocation termEnum close End LocalVariableDeclaration ReferenceType String VariableDeclarator lookup Literal null IfStatement MemberReference includeLookup BlockStatement StatementExpression Assignment MemberReference lookup Cast ReferenceType String MethodInvocation mterms ArrayCreator ReferenceType String MethodInvocation mterms size toArray = End LocalVariableDeclaration ReferenceType FieldCache ReferenceType StringIndex VariableDeclarator value ClassCreator ReferenceType FieldCache ReferenceType StringIndex MemberReference retArray MemberReference lookup StatementExpression MethodInvocation MemberReference reader MemberReference field MemberReference prefix MemberReference comparator MemberReference value store ReturnStatement MemberReference value End ReturnStatement MemberReference ret MethodDeclaration /**
     * See if a <code>StringIndex</code> object is in the cache.
     */ ReferenceType FieldCache ReferenceType StringIndex lookup FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType String field FormalParameter ReferenceType String prefix FormalParameter ReferenceType SortComparator comparer LocalVariableDeclaration ReferenceType Key VariableDeclarator key ClassCreator ReferenceType Key MemberReference field MemberReference prefix MemberReference comparer SynchronizedStatement This LocalVariableDeclaration ReferenceType HashMap VariableDeclarator readerCache Cast ReferenceType HashMap MethodInvocation cache MemberReference reader get IfStatement BinaryOperation == MemberReference readerCache Literal null BlockStatement ReturnStatement Literal null End ReturnStatement Cast ReferenceType FieldCache ReferenceType StringIndex MethodInvocation readerCache MemberReference key get MethodDeclaration /**
     * Put a <code>StringIndex</code> <code>value</code> to cache.
     */ ReferenceType Object store FormalParameter ReferenceType IndexReader reader FormalParameter ReferenceType String field FormalParameter ReferenceType String prefix FormalParameter ReferenceType SortComparator comparer FormalParameter ReferenceType FieldCache ReferenceType StringIndex value LocalVariableDeclaration ReferenceType Key VariableDeclarator key ClassCreator ReferenceType Key MemberReference field MemberReference prefix MemberReference comparer SynchronizedStatement This LocalVariableDeclaration ReferenceType HashMap VariableDeclarator readerCache Cast ReferenceType HashMap MethodInvocation cache MemberReference reader get IfStatement BinaryOperation == MemberReference readerCache Literal null BlockStatement StatementExpression Assignment MemberReference readerCache ClassCreator ReferenceType HashMap = StatementExpression MethodInvocation cache MemberReference reader MemberReference readerCache put End ReturnStatement MethodInvocation readerCache MemberReference key MemberReference value put ClassDeclaration Modifier static /**
     * A compound <code>Key</code> that consist of <code>field</code>
     * <code>prefix</code> and <code>comparator</code>.
     */ Key FieldDeclaration Modifier private final ReferenceType String VariableDeclarator field FieldDeclaration Modifier private final ReferenceType String VariableDeclarator prefix FieldDeclaration Modifier private final ReferenceType SortComparator VariableDeclarator comparator ConstructorDeclaration /**
         * Creates <code>Key</code> for StringIndex lookup.
         */ Key FormalParameter ReferenceType String field FormalParameter ReferenceType String prefix FormalParameter ReferenceType SortComparator comparator StatementExpression Assignment This MemberReference field MethodInvocation field intern = StatementExpression Assignment This MemberReference prefix MethodInvocation prefix intern = StatementExpression Assignment This MemberReference comparator MemberReference comparator = MethodDeclaration /**
         * Returns <code>true</code> if <code>o</code> is a <code>Key</code>
         * instance and refers to the same field, prefix and comparator object.
         */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation instanceof MemberReference o ReferenceType Key BlockStatement LocalVariableDeclaration ReferenceType Key VariableDeclarator other Cast ReferenceType Key MemberReference o ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference other field MemberReference field BinaryOperation == MemberReference other prefix MemberReference prefix MethodInvocation other.comparator MemberReference comparator equals End ReturnStatement Literal false MethodDeclaration /**
         * Composes a hashcode based on the field, prefix and comparator.
         */ Modifier public BasicType int hashCode ReturnStatement BinaryOperation ^ BinaryOperation ^ MethodInvocation field hashCode MethodInvocation prefix hashCode MethodInvocation comparator hashCode",1
119,119,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server.iterator Import java.rmi.RemoteException Import javax.jcr.Node Import javax.jcr.NodeIterator Import org.apache.jackrabbit.rmi.server.RemoteAdapterFactory ClassDeclaration Modifier public /**
 * A ServerIterator for iterating nodes.
 */ ServerNodeIterator ConstructorDeclaration Modifier public /**
     * Creates a ServerNodeIterator instance.
     *
     * @param iterator      local node iterator
     * @param factory       remote adapter factory
     * @param maxBufferSize maximum size of the element buffer
     * @throws RemoteException on RMI errors
     */ ServerNodeIterator FormalParameter ReferenceType NodeIterator iterator FormalParameter ReferenceType RemoteAdapterFactory factory FormalParameter BasicType int maxBufferSize RemoteException StatementExpression SuperConstructorInvocation MemberReference iterator MemberReference factory MemberReference maxBufferSize MethodDeclaration /**
     * Creates and returns a remote adapter for the given node.
     *
     * @param object local object
     * @return remote adapter
     * @throws RemoteException on RMI errors
     * @see ServerIterator#getRemoteObject(Object)
     */ Modifier protected ReferenceType Object getRemoteObject FormalParameter ReferenceType Object object RemoteException ReturnStatement MethodInvocation Cast ReferenceType Node MemberReference object getRemoteNode ReferenceType ServerIterator",0
569,569,,1
827,827,,0
108,108,"CompilationUnit PackageDeclaration org.apache.jackrabbit.iterator Import java.util.Collection Import javax.jcr.Node Import javax.jcr.NodeIterator ClassDeclaration Modifier public /**
 * Array implementation of the JCR
 * {@link javax.jcr.NodeIterator NodeIterator} interface.
 */ ArrayNodeIterator ConstructorDeclaration Modifier public /**
     * Creates an iterator for the given array of nodes.
     *
     * @param nodes the nodes to iterate
     */ ArrayNodeIterator FormalParameter ReferenceType Node nodes StatementExpression SuperConstructorInvocation MemberReference nodes ConstructorDeclaration Modifier public /**
     * Creates an iterator for the given collection of nodes.
     *
     * @param nodes the nodes to iterate
     */ ArrayNodeIterator FormalParameter ReferenceType Collection nodes StatementExpression ExplicitConstructorInvocation Cast ReferenceType Node MethodInvocation nodes ArrayCreator ReferenceType Node MethodInvocation nodes size toArray MethodDeclaration /**
     * Returns the next node in the array.
     *
     * @return next node
     * @see NodeIterator#nextNode()
     */ Modifier public ReferenceType Node nextNode ReturnStatement Cast ReferenceType Node MethodInvocation next ReferenceType ArrayIterator ReferenceType NodeIterator",0
290,290,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.collect ClassDeclaration Modifier public /**
 * Collect nodes only
 */ CollectNodes MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected BasicType boolean isCollectNodes ReturnStatement Literal true MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected BasicType boolean isCollectProperties ReturnStatement Literal false ReferenceType AbstractCollect",1
225,225,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.transaction.TxLockEntry Import org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty Import org.apache.jackrabbit.webdav.version.report.ReportType Import org.apache.jackrabbit.webdav.DavResourceLocator Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.DavResourceFactory Import org.apache.jackrabbit.webdav.DavResource Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.webdav.property.DefaultDavProperty Import org.apache.jackrabbit.webdav.property.HrefProperty Import org.apache.jackrabbit.webdav.jcr.version.report.NodeTypesReport Import org.apache.jackrabbit.webdav.jcr.version.report.LocateByUuidReport Import org.apache.jackrabbit.webdav.jcr.version.report.RegisteredNamespacesReport Import org.apache.jackrabbit.webdav.jcr.version.report.RepositoryDescriptorsReport Import org.apache.jackrabbit.util.Text Import javax.jcr.Item Import javax.jcr.PathNotFoundException Import javax.jcr.RepositoryException Import javax.jcr.Workspace ClassDeclaration Modifier abstract /**
 * <code>AbstractItemResource</code> covers common functionality for the various
 * resources, that represent a repository item.
 */ AbstractItemResource FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType AbstractItemResource getLogger FieldDeclaration Modifier final protected ReferenceType Item VariableDeclarator item ConstructorDeclaration /**
     * Create a new <code>AbstractItemResource</code>.
     *
     * @param locator
     * @param session
     */ AbstractItemResource FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType DavSession session FormalParameter ReferenceType DavResourceFactory factory FormalParameter ReferenceType Item item StatementExpression SuperConstructorInvocation MemberReference locator MemberReference session MemberReference factory StatementExpression Assignment This MemberReference item MemberReference item = StatementExpression MethodInvocation initLockSupport StatementExpression MethodInvocation initSupportedReports MethodDeclaration /**
     * @see org.apache.jackrabbit.webdav.DavResource#getComplianceClass()
     */ Modifier public ReferenceType String getComplianceClass ReturnStatement MemberReference ItemResourceConstants COMPLIANCE_CLASS MethodDeclaration /**
     * @see org.apache.jackrabbit.webdav.DavResource#getSupportedMethods()
     */ Modifier public ReferenceType String getSupportedMethods ReturnStatement MemberReference ItemResourceConstants METHODS MethodDeclaration /**
     * Returns true if there exists a {@link Item repository item} with the given
     * resource path, false otherwise.
     *
     * @see org.apache.jackrabbit.webdav.DavResource#exists()
     */ Modifier public BasicType boolean exists ReturnStatement BinaryOperation != MemberReference item Literal null MethodDeclaration /**
     * Retrieves the last segment of the item path (or the resource path if
     * this resource does not exist). An item path is in addition first translated
     * to the corresponding resource path.<br>
     * NOTE: the displayname is not equivalent to {@link Item#getName() item name}
     * which is exposed with the {@link #JCR_NAME &#123;http://www.day.com/jcr/webdav/1.0&#125;name}
     * property.
     *
     * @see org.apache.jackrabbit.webdav.DavResource#getDisplayName() )
     */ Modifier public ReferenceType String getDisplayName LocalVariableDeclaration ReferenceType String VariableDeclarator resPath MethodInvocation getResourcePath ReturnStatement TernaryExpression BinaryOperation != MemberReference resPath Literal null MethodInvocation Text MemberReference resPath getName MemberReference resPath MethodDeclaration /**
     * Returns the resource representing the parent item of the repository item
     * represented by this resource. If this resoure represents the root item
     * a {@link RootCollection} is returned.
     *
     * @return the collection this resource is internal member of. Except for the
     * repository root, the returned collection always represent the parent
     * repository node.
     * @see org.apache.jackrabbit.webdav.DavResource#getCollection()
     */ Modifier public ReferenceType DavResource getCollection LocalVariableDeclaration ReferenceType DavResource VariableDeclarator collection Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator resourcePath MethodInvocation getResourcePath LocalVariableDeclaration ReferenceType String VariableDeclarator parentResourcePath MethodInvocation Text MemberReference resourcePath Literal 1 getRelativeParent LocalVariableDeclaration ReferenceType String VariableDeclarator parentWorkspacePath MethodInvocation MethodInvocation getWorkspacePath getLocator LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator parentLoc MethodInvocation MethodInvocation getFactory MethodInvocation MethodInvocation MethodInvocation getPrefix getLocator MemberReference parentWorkspacePath MemberReference parentResourcePath createResourceLocator getLocator TryStatement StatementExpression Assignment MemberReference collection MethodInvocation MemberReference parentLoc createResourceFromLocator = CatchClause CatchClauseParameter DavException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unexpected error while retrieving collection: "" MethodInvocation e getMessage error ReturnStatement MemberReference collection MethodDeclaration /**
     * Moves the underlying repository item to the indicated destination.
     *
     * @param destination
     * @throws DavException
     * @see DavResource#move(DavResource)
     * @see javax.jcr.Session#move(String, String)
     */ Modifier public move FormalParameter ReferenceType DavResource destination DavException IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator destLocator MethodInvocation destination getLocator IfStatement MethodInvocation ! MethodInvocation MemberReference destLocator isSameWorkspace getLocator BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_FORBIDDEN End TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator itemPath MethodInvocation MethodInvocation getJcrPath getLocator LocalVariableDeclaration ReferenceType String VariableDeclarator destItemPath MethodInvocation destination MethodInvocation getJcrPath getLocator IfStatement BinaryOperation == MethodInvocation getTransactionId Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation getWorkspace MethodInvocation MemberReference itemPath MemberReference destItemPath move getRepositorySession BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference itemPath MemberReference destItemPath move getRepositorySession End CatchClause CatchClauseParameter PathNotFoundException e ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_CONFLICT MethodInvocation e getMessage CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Copies the underlying repository item to the indicated destination. If
     * the locator of the specified destination resource indicates a different
     * workspace, {@link Workspace#copy(String, String, String)} is used to perform
     * the copy operation, {@link Workspace#copy(String, String)} otherwise.
     * <p/>
     * Note, that this implementation does not support shallow copy.
     *
     * @param destination
     * @param shallow
     * @throws DavException
     * @see DavResource#copy(DavResource, boolean)
     * @see Workspace#copy(String, String)
     * @see Workspace#copy(String, String, String)
     */ Modifier public copy FormalParameter ReferenceType DavResource destination FormalParameter BasicType boolean shallow DavException IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End IfStatement MemberReference shallow BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_FORBIDDEN Literal ""Unable to perform shallow copy."" End TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator itemPath MethodInvocation MethodInvocation getJcrPath getLocator LocalVariableDeclaration ReferenceType String VariableDeclarator destItemPath MethodInvocation destination MethodInvocation getJcrPath getLocator LocalVariableDeclaration ReferenceType Workspace VariableDeclarator workspace MethodInvocation MethodInvocation getWorkspace getRepositorySession IfStatement MethodInvocation MethodInvocation MethodInvocation destination getLocator isSameWorkspace getLocator BlockStatement StatementExpression MethodInvocation workspace MemberReference itemPath MemberReference destItemPath copy BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Copy between workspaces is not yet implemented (src: '"" MethodInvocation getHref Literal ""', dest: '"" MethodInvocation destination getHref Literal ""')"" error ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_IMPLEMENTED End CatchClause CatchClauseParameter PathNotFoundException e ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND MethodInvocation e getMessage CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Initialize the {@link org.apache.jackrabbit.webdav.lock.SupportedLock} property
     * with entries that are valid for any type item resources.
     *
     * @see org.apache.jackrabbit.webdav.lock.SupportedLock
     * @see org.apache.jackrabbit.webdav.transaction.TxLockEntry
     * @see AbstractResource#initLockSupport()
     */ Modifier protected initLockSupport IfStatement MethodInvocation exists BlockStatement StatementExpression MethodInvocation supportedLock ClassCreator ReferenceType TxLockEntry Literal true addEntry StatementExpression MethodInvocation supportedLock ClassCreator ReferenceType TxLockEntry Literal false addEntry End MethodDeclaration /**
     * Define the set of reports supported by this resource.
     *
     * @see org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty
     * @see AbstractResource#initSupportedReports()
     */ Modifier protected initSupportedReports IfStatement MethodInvocation exists BlockStatement StatementExpression Assignment MemberReference supportedReports ClassCreator ReferenceType SupportedReportSetProperty ArrayCreator ReferenceType ReportType ArrayInitializer MemberReference ReportType EXPAND_PROPERTY MemberReference NodeTypesReport NODETYPES_REPORT MemberReference LocateByUuidReport LOCATE_BY_UUID_REPORT MemberReference RegisteredNamespacesReport REGISTERED_NAMESPACES_REPORT MemberReference RepositoryDescriptorsReport REPOSITORY_DESCRIPTORS_REPORT = End MethodDeclaration /**
     * Fill the property set for this resource.
     */ Modifier protected initProperties StatementExpression SuperMethodInvocation initProperties IfStatement MethodInvocation exists BlockStatement TryStatement StatementExpression MethodInvocation properties ClassCreator ReferenceType DefaultDavProperty MemberReference JCR_NAME MethodInvocation item getName add StatementExpression MethodInvocation properties ClassCreator ReferenceType DefaultDavProperty MemberReference JCR_PATH MethodInvocation item getPath add StatementExpression MethodInvocation properties ClassCreator ReferenceType DefaultDavProperty MemberReference JCR_DEPTH MethodInvocation String MethodInvocation item getDepth valueOf add IfStatement BinaryOperation > MethodInvocation item getDepth Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator parentHref MethodInvocation MethodInvocation Literal true getHref MethodInvocation item getParent getLocatorFromItem StatementExpression MethodInvocation properties ClassCreator ReferenceType HrefProperty MemberReference JCR_PARENT MemberReference parentHref Literal false add End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Error while accessing jcr properties: "" MethodInvocation e getMessage error IfStatement MethodInvocation item isNew BlockStatement StatementExpression MethodInvocation properties ClassCreator ReferenceType DefaultDavProperty MemberReference JCR_ISNEW Literal null Literal true add IfStatement MethodInvocation item isModified BlockStatement StatementExpression MethodInvocation properties ClassCreator ReferenceType DefaultDavProperty MemberReference JCR_ISMODIFIED Literal null Literal true add End End End MethodDeclaration /**
     * @return href of the workspace or <code>null</code> if this resource
     * does not represent a repository item.
     *
     * @see AbstractResource#getWorkspaceHref()
     */ Modifier protected ReferenceType String getWorkspaceHref LocalVariableDeclaration ReferenceType String VariableDeclarator workspaceHref Literal null LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator locator MethodInvocation getLocator IfStatement BinaryOperation && BinaryOperation != MemberReference locator Literal null BinaryOperation != MethodInvocation locator getWorkspaceName Literal null BlockStatement LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator wspLocator MethodInvocation locator MethodInvocation MethodInvocation locator getPrefix MethodInvocation locator getWorkspacePath MemberReference ItemResourceConstants ROOT_ITEM_PATH createResourceLocator getFactory StatementExpression Assignment MemberReference workspaceHref MethodInvocation wspLocator Literal true getHref = End StatementExpression MethodInvocation log MemberReference workspaceHref info ReturnStatement MemberReference workspaceHref MethodDeclaration /**
     * If this resource exists but does not contain a transaction id, complete
     * will try to persist any modifications present on the underlying
     * repository item.
     *
     * @throws DavException if calling {@link Item#save()} fails
     */ complete DavException IfStatement BinaryOperation && MethodInvocation exists BinaryOperation == MethodInvocation getTransactionId Literal null BlockStatement TryStatement IfStatement MethodInvocation item isModified BlockStatement StatementExpression MethodInvocation item save End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Error while completing request: "" MethodInvocation e getMessage Literal "" -> reverting changes."" error TryStatement StatementExpression MethodInvocation item Literal false refresh CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log BinaryOperation + Literal ""Error while reverting changes: "" MethodInvocation re getMessage error ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e End MethodDeclaration /**
     * Retrieves the last segment of the given path and removes the index if
     * present.
     *
     * @param itemPath
     * @return valid jcr item name
     */ Modifier protected static ReferenceType String getItemName FormalParameter ReferenceType String itemPath IfStatement BinaryOperation == MemberReference itemPath Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Cannot retrieve name from a 'null' item path."" End LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation Text MemberReference itemPath getName IfStatement MethodInvocation name Literal ""]"" endsWith BlockStatement StatementExpression Assignment MemberReference name MethodInvocation name Literal 0 MethodInvocation name Literal '[' lastIndexOf substring = End ReturnStatement MemberReference name ReferenceType AbstractResource ReferenceType ItemResourceConstants",1
411,411,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import org.apache.jackrabbit.core.ItemLifeCycleListener Import org.apache.jackrabbit.core.ItemManager Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.state.NodeState Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.RepositoryException Import javax.jcr.InvalidItemStateException ClassDeclaration Modifier public /**
 * Implementation of a {@link javax.jcr.version.Version} that works in an
 * XA environment.
 */ XAVersion FieldDeclaration /**
     * Internal version. Gets fetched again from the version manager if
     * needed.
     */ Modifier private ReferenceType InternalVersion VariableDeclarator version FieldDeclaration /**
     * XA Version manager.
     */ Modifier private final ReferenceType XAVersionManager VariableDeclarator vMgr ConstructorDeclaration Modifier public /**
     * Create a new instance of this class.
     * @param itemMgr item manager
     * @param session session
     * @param id node id
     * @param state node state
     * @param definition node definition
     * @param listeners life cycle listeners
     */ XAVersion FormalParameter ReferenceType ItemManager itemMgr FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType NodeId id FormalParameter ReferenceType NodeState state FormalParameter ReferenceType NodeDefinition definition FormalParameter ReferenceType ItemLifeCycleListener listeners FormalParameter ReferenceType InternalVersion version StatementExpression SuperConstructorInvocation MemberReference itemMgr MemberReference session MemberReference id MemberReference state MemberReference definition MemberReference listeners StatementExpression Assignment This MemberReference version MemberReference version = StatementExpression Assignment This MemberReference vMgr Cast ReferenceType XAVersionManager MethodInvocation session getVersionManager = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected ReferenceType InternalVersion getInternalVersion RepositoryException StatementExpression MethodInvocation ensureUpToDate StatementExpression MethodInvocation sanityCheck ReturnStatement MemberReference version MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected sanityCheck RepositoryException StatementExpression SuperMethodInvocation sanityCheck IfStatement BinaryOperation == MemberReference version Literal null BlockStatement ThrowStatement ClassCreator ReferenceType InvalidItemStateException BinaryOperation + MemberReference id Literal "": the item does not exist anymore"" End MethodDeclaration /**
     * Ensure the internal version is up-to-date.
     */ Modifier private synchronized ensureUpToDate RepositoryException IfStatement BinaryOperation != MemberReference version Literal null BlockStatement IfStatement MethodInvocation vMgr Cast ReferenceType InternalVersionImpl MemberReference version differentXAEnv BlockStatement StatementExpression Assignment MemberReference version MethodInvocation vMgr MethodInvocation version getId getVersion = End End ReferenceType AbstractVersion",0
36,36,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.rmi.RemoteException Import javax.jcr.Value Import javax.jcr.nodetype.PropertyDefinition Import org.apache.jackrabbit.rmi.remote.RemotePropertyDefinition ClassDeclaration Modifier public /**
 * Local adapter for the JCR-RMI
 * {@link org.apache.jackrabbit.rmi.remote.RemotePropertyDefinition RemotePropertyDefinition}
 * inteface. This class makes a remote property definition locally available
 * using the JCR {@link javax.jcr.nodetype.PropertyDefinition PropertyDef} interface.
 *
 * @author Jukka Zitting
 * @see javax.jcr.nodetype.PropertyDefinition
 * @see org.apache.jackrabbit.rmi.remote.RemotePropertyDefinition
 */ ClientPropertyDefinition FieldDeclaration /** The adapted remote property. */ Modifier private ReferenceType RemotePropertyDefinition VariableDeclarator remote ConstructorDeclaration Modifier public /**
     * Creates a local adapter for the given remote property definition.
     *
     * @param remote remote property definition
     * @param factory local adapter factory
     */ ClientPropertyDefinition FormalParameter ReferenceType RemotePropertyDefinition remote FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference remote MemberReference factory StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType int getRequiredType TryStatement ReturnStatement MethodInvocation remote getRequiredType CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getValueConstraints TryStatement ReturnStatement MethodInvocation remote getValueConstraints CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Value getDefaultValues TryStatement ReturnStatement MethodInvocation remote getDefaultValues CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isMultiple TryStatement ReturnStatement MethodInvocation remote isMultiple CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex ReferenceType ClientItemDefinition ReferenceType PropertyDefinition",1
642,642,,1
227,227,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import javax.jcr.Node Import javax.jcr.RepositoryException Import javax.jcr.query.Query Import javax.jcr.query.QueryManager Import org.apache.jackrabbit.rmi.remote.RemoteQuery Import org.apache.jackrabbit.rmi.remote.RemoteQueryManager ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link javax.jcr.query.QueryManager QueryManager}
 * interface. This class makes a local query manager available as an RMI
 * service using the
 * {@link org.apache.jackrabbit.rmi.remote.RemoteQueryManager RemoteQueryManager}
 * interface.
 *
 * @author Philipp Koch
 * @see javax.jcr.query.QueryManager
 * @see org.apache.jackrabbit.rmi.remote.RemoteQueryManager
 */ ServerQueryManager FieldDeclaration /** The adapted local query manager. */ Modifier private ReferenceType QueryManager VariableDeclarator manager ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local query manager.
     *
     * @param manager local query manager
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerQueryManager FormalParameter ReferenceType QueryManager manager FormalParameter ReferenceType ServerAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference manager MemberReference manager = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteQuery createQuery FormalParameter ReferenceType String statement FormalParameter ReferenceType String language RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator query MethodInvocation manager MemberReference statement MemberReference language createQuery ReturnStatement MethodInvocation MethodInvocation MemberReference query getRemoteQuery getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteQuery getQuery FormalParameter ReferenceType String absPath RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator node Literal null ReturnStatement MethodInvocation MethodInvocation MethodInvocation manager MemberReference node getQuery getRemoteQuery getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getSupportedQueryLanguages RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation manager getSupportedQueryLanguages CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException ReferenceType ServerObject ReferenceType RemoteQueryManager",1
387,387,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.jndi.provider Import javax.naming.Context Import javax.naming.NamingException Import javax.naming.spi.InitialContextFactory Import java.util.HashMap Import java.util.Hashtable ClassDeclaration Modifier public /**
 * <code>DummyInitialContextFactory</code> ...
 */ DummyInitialContextFactory FieldDeclaration /**
     * map with all the contexts. key=provider-url, value=context
     */ Modifier private static ReferenceType HashMap VariableDeclarator contexts ClassCreator ReferenceType HashMap MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Context getInitialContext FormalParameter ReferenceType Hashtable environment NamingException LocalVariableDeclaration ReferenceType String VariableDeclarator url Cast ReferenceType String MethodInvocation environment MemberReference Context PROVIDER_URL get IfStatement BinaryOperation == MemberReference url Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NamingException BinaryOperation + Literal ""Unable to create context. Environment is missing a "" MemberReference Context PROVIDER_URL End SynchronizedStatement MemberReference DummyInitialContextFactory contexts LocalVariableDeclaration ReferenceType DummyContext VariableDeclarator ctx Cast ReferenceType DummyContext MethodInvocation contexts MemberReference url get IfStatement BinaryOperation == MemberReference ctx Literal null BlockStatement StatementExpression Assignment MemberReference ctx ClassCreator ReferenceType DummyContext MemberReference environment = StatementExpression MethodInvocation contexts MemberReference url MemberReference ctx put End ReturnStatement MemberReference ctx ReferenceType InitialContextFactory",1
489,489,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import java.util.ResourceBundle Import javax.jcr.Workspace Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Move a <code>Node</code>
 */ Move FieldDeclaration /** resource bundle */ Modifier private static ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation CommandHelper getBundle FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType Move getLog FieldDeclaration /** source path */ Modifier private ReferenceType String VariableDeclarator srcAbsPathKey Literal ""srcAbsPath"" FieldDeclaration /** destination path */ Modifier private ReferenceType String VariableDeclarator destAbsPathKey Literal ""destAbsPath"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator srcAbsPath Cast ReferenceType String MethodInvocation ctx This MemberReference srcAbsPathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator destAbsPath Cast ReferenceType String MethodInvocation ctx This MemberReference destAbsPathKey get IfStatement BinaryOperation || MethodInvocation ! srcAbsPath Literal ""/"" startsWith MethodInvocation ! destAbsPath Literal ""/"" startsWith BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation bundle Literal ""exception.illegalargument"" getString Literal "". "" MethodInvocation bundle Literal ""exception.only.absolute.path"" getString Literal ""."" End LocalVariableDeclaration ReferenceType Workspace VariableDeclarator w MethodInvocation CommandHelper MethodInvocation getWorkspace MemberReference ctx getSession IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""moving node from "" MemberReference srcAbsPath Literal "" to "" MemberReference destAbsPath debug End StatementExpression MethodInvocation w MemberReference srcAbsPath MemberReference destAbsPath move ReturnStatement Literal false MethodDeclaration /**
     * @return the destintation absolute path key
     */ Modifier public ReferenceType String getDestAbsPathKey ReturnStatement MemberReference destAbsPathKey MethodDeclaration /**
     * @param destAbsPathKey
     *        the destintation absolute path key to set
     */ Modifier public setDestAbsPathKey FormalParameter ReferenceType String destAbsPathKey StatementExpression Assignment This MemberReference destAbsPathKey MemberReference destAbsPathKey = MethodDeclaration /**
     * @return the source absolute path key
     */ Modifier public ReferenceType String getSrcAbsPathKey ReturnStatement MemberReference srcAbsPathKey MethodDeclaration /**
     * @param srcAbsPathKey
     *        the source absolute path key to set
     */ Modifier public setSrcAbsPathKey FormalParameter ReferenceType String srcAbsPathKey StatementExpression Assignment This MemberReference srcAbsPathKey MemberReference srcAbsPathKey = ReferenceType Command",0
678,678,,0
355,355,"CompilationUnit PackageDeclaration org.apache.jackrabbit.base.nodetype Import java.util.Arrays Import java.util.HashSet Import java.util.Set Import javax.jcr.Value Import javax.jcr.nodetype.ItemDefinition Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.PropertyDefinition ClassDeclaration Modifier public /**
 * Node type base class.
 */ BaseNodeType MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType String getName ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /** Always returns <code>false</code>. {@inheritDoc} */ Modifier public BasicType boolean isMixin ReturnStatement Literal false MethodDeclaration /** Always returns <code>false</code>. {@inheritDoc} */ Modifier public BasicType boolean hasOrderableChildNodes ReturnStatement Literal false MethodDeclaration /** Not implemented. {@inheritDoc} */ Modifier public ReferenceType String getPrimaryItemName ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /** Always returns an empty supertype array. {@inheritDoc} */ Modifier public ReferenceType NodeType getDeclaredSupertypes ReturnStatement ArrayCreator ReferenceType NodeType Literal 0 MethodDeclaration /**
     * Implemented by calling <code>getDeclaredSupertypes()</code> and
     * recursively collecting all supertypes. The collected supertype
     * set is returned as a node type array.
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeType getSupertypes LocalVariableDeclaration ReferenceType Set VariableDeclarator supertypes ClassCreator ReferenceType HashSet LocalVariableDeclaration ReferenceType NodeType VariableDeclarator declared MethodInvocation getDeclaredSupertypes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference declared length MemberReference ++ i BlockStatement StatementExpression MethodInvocation supertypes MethodInvocation Arrays MemberReference ArraySelector MemberReference i MethodInvocation getSupertypes declared asList addAll End StatementExpression MethodInvocation supertypes MethodInvocation Arrays MemberReference declared asList addAll ReturnStatement Cast ReferenceType NodeType MethodInvocation supertypes ArrayCreator ReferenceType NodeType MethodInvocation supertypes size toArray MethodDeclaration /**
     * Implemented by calling <code>getName()</code> and comparing the
     * result to the given node type name. If the match fails, recursively
     * checks all declared supertypes.
     * {@inheritDoc}
     */ Modifier public BasicType boolean isNodeType FormalParameter ReferenceType String nodeTypeName IfStatement MethodInvocation nodeTypeName MethodInvocation getName equals BlockStatement ReturnStatement Literal true BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator types MethodInvocation getDeclaredSupertypes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference types length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation MemberReference nodeTypeName isNodeType types BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false End MethodDeclaration /** Always returns an empty property definition array. {@inheritDoc} */ Modifier public ReferenceType PropertyDefinition getDeclaredPropertyDefinitions ReturnStatement ArrayCreator ReferenceType PropertyDefinition Literal 0 MethodDeclaration /**
     * Implemented by calling <code>getDeclaredPropertyDefinitions()</code>
     * this node type and all supertypes returned by
     * <code>getSupertypes()</code>. The collected property definition set
     * is returned as a property definition array.
     * {@inheritDoc}
     */ Modifier public ReferenceType PropertyDefinition getPropertyDefinitions LocalVariableDeclaration ReferenceType Set VariableDeclarator definitions ClassCreator ReferenceType HashSet LocalVariableDeclaration ReferenceType NodeType VariableDeclarator supertypes MethodInvocation getSupertypes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference supertypes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation definitions MethodInvocation Arrays MemberReference ArraySelector MemberReference i MethodInvocation getPropertyDefinitions supertypes asList addAll End StatementExpression MethodInvocation definitions MethodInvocation Arrays MethodInvocation getDeclaredPropertyDefinitions asList addAll ReturnStatement Cast ReferenceType PropertyDefinition MethodInvocation definitions ArrayCreator ReferenceType PropertyDefinition MethodInvocation definitions size toArray MethodDeclaration /** Always returns an empty node definition array. {@inheritDoc} */ Modifier public ReferenceType NodeDefinition getDeclaredChildNodeDefinitions ReturnStatement ArrayCreator ReferenceType NodeDefinition Literal 0 MethodDeclaration /**
     * Implemented by calling <code>getDeclaredChildNodeDefinitions()</code>
     * on this node type and all supertypes returned by
     * <code>getSupertypes()</code>. The collected node definition set
     * is returned as a node definition array.
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeDefinition getChildNodeDefinitions LocalVariableDeclaration ReferenceType Set VariableDeclarator defs ClassCreator ReferenceType HashSet LocalVariableDeclaration ReferenceType NodeType VariableDeclarator types MethodInvocation getSupertypes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference types length MemberReference ++ i BlockStatement StatementExpression MethodInvocation defs MethodInvocation Arrays MemberReference ArraySelector MemberReference i MethodInvocation getChildNodeDefinitions types asList addAll End StatementExpression MethodInvocation defs MethodInvocation Arrays MethodInvocation getDeclaredChildNodeDefinitions asList addAll ReturnStatement Cast ReferenceType NodeDefinition MethodInvocation defs ArrayCreator ReferenceType NodeDefinition Literal 0 toArray MethodDeclaration /**
     * Returns the definition of the named property.
     * <p>
     * This internal utility method is used by the predicate methods
     * in this class.
     *
     * @param propertyName property name
     * @return property definition, or <code>null</code> if not found
     */ Modifier private ReferenceType PropertyDefinition getPropertyDefinition FormalParameter ReferenceType String propertyName LocalVariableDeclaration ReferenceType PropertyDefinition VariableDeclarator definitions MethodInvocation getPropertyDefinitions ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference definitions length MemberReference ++ i BlockStatement IfStatement MethodInvocation propertyName MemberReference ArraySelector MemberReference i MethodInvocation getName definitions equals BlockStatement ReturnStatement MemberReference ArraySelector MemberReference i definitions End End ReturnStatement Literal null MethodDeclaration /**
     * Implemented by finding the definition of the named property (or the
     * wildcard property definition if the named property definition is not
     * found) and checking whether the defined property is single-valued.
     * More detailed value constraints are not implemented, but this method
     * will simply return <code>true</code> instead of throwing an
     * {@link UnsupportedOperationException UnsupportedOperationException}
     * for all value constraint comparisons.
     * {@inheritDoc}
     */ Modifier public BasicType boolean canSetProperty FormalParameter ReferenceType String propertyName FormalParameter ReferenceType Value value LocalVariableDeclaration ReferenceType PropertyDefinition VariableDeclarator definition MethodInvocation MemberReference propertyName getPropertyDefinition IfStatement BinaryOperation == MemberReference definition Literal null BlockStatement StatementExpression Assignment MemberReference definition MethodInvocation Literal ""*"" getPropertyDefinition = End IfStatement BinaryOperation || BinaryOperation == MemberReference definition Literal null MethodInvocation definition isMultiple BlockStatement ReturnStatement Literal false BlockStatement ReturnStatement Literal true End MethodDeclaration /**
     * Implemented by finding the definition of the named property (or the
     * wildcard property definition if the named property definition is not
     * found) and checking whether the defined property is multi-valued.
     * More detailed value constraints are not implemented, but this method
     * will simply return <code>true</code> instead of throwing an
     * {@link UnsupportedOperationException UnsupportedOperationException}
     * for all value constraint comparisons.
     * {@inheritDoc}
     */ Modifier public BasicType boolean canSetProperty FormalParameter ReferenceType String propertyName FormalParameter ReferenceType Value values LocalVariableDeclaration ReferenceType PropertyDefinition VariableDeclarator def MethodInvocation MemberReference propertyName getPropertyDefinition IfStatement BinaryOperation == MemberReference def Literal null BlockStatement StatementExpression Assignment MemberReference def MethodInvocation Literal ""*"" getPropertyDefinition = End IfStatement BinaryOperation || BinaryOperation == MemberReference def Literal null MethodInvocation ! def isMultiple BlockStatement ReturnStatement Literal false BlockStatement ReturnStatement Literal true End MethodDeclaration /**
     * Returns the definition of the named child node.
     * <p>
     * This internal utility method is used by the predicate methods
     * in this class.
     *
     * @param childNodeName child node name
     * @return node definition, or <code>null</code> if not found
     */ Modifier private ReferenceType NodeDefinition getChildNodeDefinition FormalParameter ReferenceType String childNodeName LocalVariableDeclaration ReferenceType NodeDefinition VariableDeclarator definitions MethodInvocation getChildNodeDefinitions ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference definitions length MemberReference ++ i BlockStatement IfStatement MethodInvocation childNodeName MemberReference ArraySelector MemberReference i MethodInvocation getName definitions equals BlockStatement ReturnStatement MemberReference ArraySelector MemberReference i definitions End End ReturnStatement Literal null MethodDeclaration /**
     * Implemented by finding the definition of the named child node (or the
     * wildcard child node definition if the named child node definition is
     * not found). Returns <code>true</code> if a node definition is found,
     * <code>false</code> otherwise.
     * {@inheritDoc}
     */ Modifier public BasicType boolean canAddChildNode FormalParameter ReferenceType String childNodeName LocalVariableDeclaration ReferenceType NodeDefinition VariableDeclarator definition MethodInvocation MemberReference childNodeName getChildNodeDefinition IfStatement BinaryOperation == MemberReference definition Literal null BlockStatement StatementExpression Assignment MemberReference definition MethodInvocation Literal ""*"" getChildNodeDefinition = End ReturnStatement BinaryOperation != MemberReference definition Literal null MethodDeclaration /**
     * Not implemented. Implementing this method requires access to the
     * node type manager in order to resolve the given node type name.
     * {@inheritDoc}
     */ Modifier public BasicType boolean canAddChildNode FormalParameter ReferenceType String childNodeName FormalParameter ReferenceType String nodeTypeName ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
     * Implemented by finding the definition of the named item (property or
     * child node) and checking that the defined item is not mandatory.
     * {@inheritDoc}
     */ Modifier public BasicType boolean canRemoveItem FormalParameter ReferenceType String itemName LocalVariableDeclaration ReferenceType ItemDefinition VariableDeclarator definition MethodInvocation MemberReference itemName getPropertyDefinition IfStatement BinaryOperation == MemberReference definition Literal null BlockStatement StatementExpression Assignment MemberReference definition MethodInvocation MemberReference itemName getChildNodeDefinition = End IfStatement BinaryOperation == MemberReference definition Literal null BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement MethodInvocation definition isMandatory End ReferenceType NodeType",0
245,245,"CompilationUnit PackageDeclaration org.apache.jackrabbit.session.nodetype Import javax.jcr.Value Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.PropertyDefinition Import org.apache.jackrabbit.session.SessionHelper Import org.apache.jackrabbit.state.nodetype.PropertyDefinitionState ClassDeclaration Modifier final /**
 * Immutable and session-bound property definition frontend. An instance
 * of this class presents the underlying property definition state using
 * the JCR PropertyDef interface.
 * <p>
 * By not exposing the setter methods of the underlying state instance,
 * this class intentionally makes it impossible for a JCR client to modify
 * property definition information.
 */ SessionPropertyDefinition FieldDeclaration /** The underlying property definition state. */ Modifier private final ReferenceType PropertyDefinitionState VariableDeclarator state ConstructorDeclaration Modifier public /**
     * Creates a property definition frontend that is bound to the
     * given node type, session, and underlying property definition state.
     *
     * @param helper helper for accessing the current session
     * @param type declaring node type
     * @param state underlying property definition state
     */ SessionPropertyDefinition FormalParameter ReferenceType SessionHelper helper FormalParameter ReferenceType NodeType type FormalParameter ReferenceType PropertyDefinitionState state StatementExpression SuperConstructorInvocation MemberReference helper MemberReference type MemberReference state StatementExpression Assignment This MemberReference state MemberReference state = MethodDeclaration /**
     * Returns the required type of the defined property. The returned value
     * is retrieved from the underlying property definition state.
     *
     * @return required property type
     * @see PropertyDef#getRequiredType()
     */ Modifier public BasicType int getRequiredType ReturnStatement MethodInvocation state getRequiredType MethodDeclaration /**
     * Returns the constraint strings that specify the value constraint
     * of the defined property. The returned string array is retrieved
     * from the underlying property definition state, but is not by itself
     * a part of the state and can thus be modified freely.
     *
     * @return value constraint strings
     * @see PropertyDef#getValueConstraints()
     */ Modifier public ReferenceType String getValueConstraints ReturnStatement Literal null MethodDeclaration /**
     * Returns the value of the Multiple property definition property.
     * The returned value is retrieved from the underlying property
     * definition state.
     *
     * @return Multiple property value
     * @see PropertyDef#isMultiple()
     */ Modifier public BasicType boolean isMultiple ReturnStatement MethodInvocation state isMultiple MethodDeclaration /** Not implemented. */ Modifier public ReferenceType Value getDefaultValues ReturnStatement Literal null ReferenceType SessionItemDefinition ReferenceType PropertyDefinition",1
331,331,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.TermDocs Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermEnum Import java.io.IOException ClassDeclaration /**
 * Implements a TermDocs with a single document.
 */ SingleTermDocs FieldDeclaration /**
     * Single document number;
     */ Modifier private final BasicType int VariableDeclarator doc FieldDeclaration /**
     * Flag to return the document number once.
     */ Modifier private BasicType boolean VariableDeclarator next Literal true ConstructorDeclaration /**
     * Creates a <code>SingleTermDocs</code> that returns <code>doc</code> as
     * its single document.
     *
     * @param doc the document number.
     */ SingleTermDocs FormalParameter BasicType int doc StatementExpression Assignment This MemberReference doc MemberReference doc = MethodDeclaration /**
     * @throws UnsupportedOperationException always
     */ Modifier public seek FormalParameter ReferenceType Term term ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
     * @throws UnsupportedOperationException always
     */ Modifier public seek FormalParameter ReferenceType TermEnum termEnum ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int doc ReturnStatement MemberReference doc MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int freq ReturnStatement Literal 1 MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean next IOException LocalVariableDeclaration BasicType boolean VariableDeclarator hasNext MemberReference next StatementExpression Assignment MemberReference next Literal false = ReturnStatement MemberReference hasNext MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int read FormalParameter BasicType int docs FormalParameter BasicType int freqs IOException IfStatement BinaryOperation && MemberReference next BinaryOperation > MemberReference docs length Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 0 docs MemberReference doc = StatementExpression Assignment MemberReference ArraySelector Literal 0 freqs Literal 1 = StatementExpression Assignment MemberReference next Literal false = ReturnStatement Literal 1 End ReturnStatement Literal 0 MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean skipTo FormalParameter BasicType int target IOException ReturnStatement Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public close IOException ReferenceType TermDocs",1
882,882,,0
130,130,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype Import java.io.Serializable ClassDeclaration Modifier public /**
 * <code>PropDefId</code> serves as identifier for a given <code>PropDef</code>.
 *
 *
 * uniquely identifies a <code>PropDef</code> in the
 * node type registry.
 */ PropDefId FieldDeclaration /**
     * Serialization UID of this class.
     */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal 3675238890036653593L FieldDeclaration /**
     * The internal id is computed based on the characteristics of the
     * <code>PropDef</code> that this <code>PropDefId</code> identifies.
     */ Modifier private final BasicType int VariableDeclarator id ConstructorDeclaration /**
     * Creates a new <code>PropDefId</code> that serves as identifier for
     * the given <code>PropDef</code>. An internal id is computed based on
     * the characteristics of the <code>PropDef</code> that it identifies.
     *
     * @param def <code>PropDef</code> to create identifier for
     */ PropDefId FormalParameter ReferenceType PropDef def IfStatement BinaryOperation == MemberReference def Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""PropDef argument can not be null"" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation sb MethodInvocation def MethodInvocation toString getDeclaringNodeType append StatementExpression MethodInvocation sb Literal '/' append IfStatement MethodInvocation def definesResidual BlockStatement StatementExpression MethodInvocation sb Literal '*' append BlockStatement StatementExpression MethodInvocation sb MethodInvocation def MethodInvocation toString getName append End StatementExpression MethodInvocation sb Literal '/' append StatementExpression MethodInvocation sb MethodInvocation def getRequiredType append StatementExpression MethodInvocation sb Literal '/' append StatementExpression MethodInvocation sb TernaryExpression MethodInvocation def isMultiple Literal 1 Literal 0 append StatementExpression Assignment MemberReference id MethodInvocation sb MethodInvocation hashCode toString = ConstructorDeclaration Modifier private /**
     * Private constructor that creates a <code>PropDefId</code> using an
     * internal id
     *
     * @param id internal id
     */ PropDefId FormalParameter BasicType int id StatementExpression Assignment This MemberReference id MemberReference id = MethodDeclaration /**
     * Returns a <code>PropDefId</code> holding the value of the specified
     * string. The string must be in the format returned by the
     * <code>PropDefId.toString()</code> method.
     *
     * @param s a <code>String</code> containing the <code>PropDefId</code>
     *          representation to be parsed.
     * @return the <code>PropDefId</code> represented by the argument
     * @throws IllegalArgumentException if the specified string can not be parsed
     *                                  as a <code>PropDefId</code>.
     * @see #toString()
     */ Modifier public static ReferenceType PropDefId valueOf FormalParameter ReferenceType String s IllegalArgumentException IfStatement BinaryOperation == MemberReference s Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""invalid PropDefId literal"" End ReturnStatement ClassCreator ReferenceType PropDefId MethodInvocation Integer MemberReference s parseInt MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType PropDefId BlockStatement LocalVariableDeclaration ReferenceType PropDefId VariableDeclarator other Cast ReferenceType PropDefId MemberReference obj ReturnStatement BinaryOperation == MemberReference id MemberReference other id End ReturnStatement Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation Integer MemberReference id toString MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int hashCode ReturnStatement MemberReference id ReferenceType Serializable",0
460,460,"CompilationUnit PackageDeclaration org.apache.jackrabbit.xml.nodetype Import java.io.File Import java.io.FileInputStream Import java.io.FileOutputStream Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream Import javax.xml.parsers.ParserConfigurationException Import javax.xml.parsers.SAXParser Import javax.xml.parsers.SAXParserFactory Import javax.xml.transform.Result Import javax.xml.transform.Source Import javax.xml.transform.Transformer Import javax.xml.transform.TransformerConfigurationException Import javax.xml.transform.TransformerException Import javax.xml.transform.TransformerFactory Import javax.xml.transform.sax.SAXResult Import javax.xml.transform.sax.SAXTransformerFactory Import javax.xml.transform.sax.TransformerHandler Import javax.xml.transform.stream.StreamResult Import org.apache.jackrabbit.state.nodetype.NodeTypeManagerState Import org.xml.sax.ContentHandler Import org.xml.sax.InputSource Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * TODO
 */ NodeTypeXML MethodDeclaration Modifier public static ReferenceType NodeTypeManagerState read FormalParameter ReferenceType Source source TransformerConfigurationException TransformerException LocalVariableDeclaration ReferenceType NodeTypeXMLReader VariableDeclarator reader ClassCreator ReferenceType NodeTypeXMLReader LocalVariableDeclaration ReferenceType TransformerFactory VariableDeclarator factory MethodInvocation TransformerFactory newInstance LocalVariableDeclaration ReferenceType Transformer VariableDeclarator transformer MethodInvocation factory newTransformer StatementExpression MethodInvocation transformer MemberReference source ClassCreator ReferenceType SAXResult MemberReference reader transform ReturnStatement MethodInvocation reader getNodeTypeManagerState MethodDeclaration Modifier public static ReferenceType NodeTypeManagerState read FormalParameter ReferenceType InputSource source IOException ParserConfigurationException SAXException LocalVariableDeclaration ReferenceType NodeTypeXMLReader VariableDeclarator reader ClassCreator ReferenceType NodeTypeXMLReader LocalVariableDeclaration ReferenceType SAXParserFactory VariableDeclarator factory MethodInvocation SAXParserFactory newInstance LocalVariableDeclaration ReferenceType SAXParser VariableDeclarator parser MethodInvocation factory newSAXParser StatementExpression MethodInvocation parser MemberReference source MemberReference reader parse ReturnStatement MethodInvocation reader getNodeTypeManagerState MethodDeclaration Modifier public static ReferenceType NodeTypeManagerState read FormalParameter ReferenceType File file IOException ParserConfigurationException SAXException LocalVariableDeclaration ReferenceType NodeTypeXMLReader VariableDeclarator reader ClassCreator ReferenceType NodeTypeXMLReader LocalVariableDeclaration ReferenceType SAXParserFactory VariableDeclarator factory MethodInvocation SAXParserFactory newInstance LocalVariableDeclaration ReferenceType SAXParser VariableDeclarator parser MethodInvocation factory newSAXParser StatementExpression MethodInvocation parser MemberReference file MemberReference reader parse ReturnStatement MethodInvocation reader getNodeTypeManagerState MethodDeclaration Modifier public static ReferenceType NodeTypeManagerState read FormalParameter ReferenceType InputStream input IOException ParserConfigurationException SAXException LocalVariableDeclaration ReferenceType NodeTypeXMLReader VariableDeclarator reader ClassCreator ReferenceType NodeTypeXMLReader LocalVariableDeclaration ReferenceType SAXParserFactory VariableDeclarator factory MethodInvocation SAXParserFactory newInstance LocalVariableDeclaration ReferenceType SAXParser VariableDeclarator parser MethodInvocation factory newSAXParser StatementExpression MethodInvocation parser MemberReference input MemberReference reader parse ReturnStatement MethodInvocation reader getNodeTypeManagerState MethodDeclaration Modifier public static write FormalParameter ReferenceType NodeTypeManagerState state FormalParameter ReferenceType ContentHandler handler SAXException LocalVariableDeclaration ReferenceType NodeTypeXMLWriter VariableDeclarator writer ClassCreator ReferenceType NodeTypeXMLWriter MemberReference state StatementExpression MethodInvocation writer MemberReference handler write MethodDeclaration Modifier public static write FormalParameter ReferenceType NodeTypeManagerState state FormalParameter ReferenceType Result result TransformerConfigurationException SAXException LocalVariableDeclaration ReferenceType SAXTransformerFactory VariableDeclarator factory Cast ReferenceType SAXTransformerFactory MethodInvocation SAXTransformerFactory newInstance LocalVariableDeclaration ReferenceType TransformerHandler VariableDeclarator handler MethodInvocation factory newTransformerHandler StatementExpression MethodInvocation handler MemberReference result setResult StatementExpression MethodInvocation MemberReference state MemberReference handler write MethodDeclaration Modifier public static write FormalParameter ReferenceType NodeTypeManagerState state FormalParameter ReferenceType OutputStream output TransformerConfigurationException SAXException StatementExpression MethodInvocation MemberReference state ClassCreator ReferenceType StreamResult MemberReference output write MethodDeclaration Modifier public static write FormalParameter ReferenceType NodeTypeManagerState state FormalParameter ReferenceType File file IOException TransformerConfigurationException SAXException LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator output ClassCreator ReferenceType FileOutputStream MemberReference file TryStatement StatementExpression MethodInvocation MemberReference state MemberReference output write StatementExpression MethodInvocation output close MethodDeclaration Modifier public static write FormalParameter ReferenceType NodeTypeManagerState state FormalParameter ReferenceType String filename IOException TransformerConfigurationException SAXException StatementExpression MethodInvocation MemberReference state ClassCreator ReferenceType File MemberReference filename write",0
390,390,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.config Import org.apache.jackrabbit.core.fs.FileSystem Import java.io.File ClassDeclaration Modifier public /**
 * Versioning configuration. This configuration class is used to
 * create configured versioning objects.
 * <p>
 * The contained configuration information are: the home directory,
 * the file system implementation, and the persistence manager
 * implementation.
 *
 * @see RepositoryConfig#getVersioningConfig()
 */ VersioningConfig FieldDeclaration /**
     * Versioning home directory.
     */ Modifier private final ReferenceType String VariableDeclarator home FieldDeclaration /**
     * Versioning file system configuration.
     */ Modifier private final ReferenceType FileSystemConfig VariableDeclarator fsc FieldDeclaration /**
     * Versioning persistence manager configuration.
     */ Modifier private final ReferenceType PersistenceManagerConfig VariableDeclarator pmc ConstructorDeclaration Modifier public /**
     * Creates a versioning configuration object.
     *
     * @param home home directory
     * @param fsc file system configuration
     * @param pmc persistence manager configuration
     */ VersioningConfig FormalParameter ReferenceType String home FormalParameter ReferenceType FileSystemConfig fsc FormalParameter ReferenceType PersistenceManagerConfig pmc StatementExpression Assignment This MemberReference home MemberReference home = StatementExpression Assignment This MemberReference fsc MemberReference fsc = StatementExpression Assignment This MemberReference pmc MemberReference pmc = MethodDeclaration /**
     * Initializes the versioning file system.
     *
     * @throws ConfigurationException on file system configuration errors
     */ Modifier public init ConfigurationException StatementExpression MethodInvocation fsc init MethodDeclaration /**
     * Returns the versioning home directory.
     *
     * @return versioning home directory
     */ Modifier public ReferenceType File getHomeDir ReturnStatement ClassCreator ReferenceType File MemberReference home MethodDeclaration /**
     * Returns the versioning file system implementation.
     *
     * @return file system implementation
     */ Modifier public ReferenceType FileSystem getFileSystem ReturnStatement MethodInvocation fsc getFileSystem MethodDeclaration /**
     * Returns the versioning persistence manager configuration.
     *
     * @return persistence manager configuration
     */ Modifier public ReferenceType PersistenceManagerConfig getPersistenceManagerConfig ReturnStatement MemberReference pmc",1
247,247,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.xml Import org.apache.log4j.Logger Import org.w3c.dom.Element Import org.w3c.dom.NodeList Import org.w3c.dom.Node Import java.util.Iterator Import java.util.NoSuchElementException ClassDeclaration Modifier public /**
 * <code>ElementIterator</code>...
 */ ElementIterator FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ElementIterator getLogger FieldDeclaration Modifier private final ReferenceType Namespace VariableDeclarator namespace FieldDeclaration Modifier private final ReferenceType String VariableDeclarator localName FieldDeclaration Modifier private ReferenceType Element VariableDeclarator next ConstructorDeclaration Modifier public /**
     * Create a new instance of <code>ElementIterator</code> with the given
     * parent element. Only child elements that match the given local name
     * and namespace will be respected by {@link #hasNext()} and {@link #nextElement()}.
     *
     * @param parent
     * @param localName local name the child elements must match
     * @param namespace namespace the child elements must match
     */ ElementIterator FormalParameter ReferenceType Element parent FormalParameter ReferenceType String localName FormalParameter ReferenceType Namespace namespace StatementExpression Assignment This MemberReference localName MemberReference localName = StatementExpression Assignment This MemberReference namespace MemberReference namespace = StatementExpression MethodInvocation MemberReference parent seek ConstructorDeclaration Modifier public /**
     * Create a new instance of <code>ElementIterator</code> with the given
     * parent element. No filtering is applied to child elements that are
     * iterated.
     *
     * @param parent
     */ ElementIterator FormalParameter ReferenceType Element parent StatementExpression ExplicitConstructorInvocation MemberReference parent Literal null Literal null MethodDeclaration /**
     * Not implemented
     *
     * @throws UnsupportedOperationException
     */ Modifier public remove ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""Remove not implemented."" MethodDeclaration /**
     * Returns true if there is a next <code>Element</code>
     *
     * @return true if a next <code>Element</code> is available.
     */ Modifier public BasicType boolean hasNext ReturnStatement BinaryOperation != MemberReference next Literal null MethodDeclaration /**
     * @see java.util.Iterator#next()
     * @see #nextElement()
     */ Modifier public ReferenceType Object next ReturnStatement MethodInvocation nextElement MethodDeclaration /**
     * Returns the next <code>Element</code> in the iterator.
     *
     * @return the next element
     * @throws NoSuchElementException if there is no next element.
     */ Modifier public ReferenceType Element nextElement IfStatement BinaryOperation == MemberReference next Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchElementException End LocalVariableDeclaration ReferenceType Element VariableDeclarator ret MemberReference next StatementExpression MethodInvocation seek ReturnStatement MemberReference ret MethodDeclaration /**
     * Seeks for the first matching child element
     */ Modifier private seek FormalParameter ReferenceType Element parent LocalVariableDeclaration ReferenceType NodeList VariableDeclarator nodeList MethodInvocation parent getChildNodes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nodeList getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation nodeList MemberReference i item IfStatement BinaryOperation && MethodInvocation DomUtil MemberReference n isElement MethodInvocation DomUtil MemberReference n MemberReference localName MemberReference namespace matches BlockStatement StatementExpression Assignment MemberReference next Cast ReferenceType Element MemberReference n = ReturnStatement End End MethodDeclaration /**
     * Seeks for the next valid element (i.e. the next valid sibling)
     */ Modifier private seek LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation next getNextSibling WhileStatement BinaryOperation != MemberReference n Literal null BlockStatement IfStatement BinaryOperation && MethodInvocation DomUtil MemberReference n isElement MethodInvocation DomUtil MemberReference n MemberReference localName MemberReference namespace matches BlockStatement StatementExpression Assignment MemberReference next Cast ReferenceType Element MemberReference n = ReturnStatement BlockStatement StatementExpression Assignment MemberReference n MethodInvocation n getNextSibling = End End StatementExpression Assignment MemberReference next Literal null = ReferenceType Iterator",1
104,104,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.xml Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.value.ValueHelper Import org.xml.sax.ContentHandler Import org.xml.sax.SAXException Import org.xml.sax.helpers.AttributesImpl Import javax.jcr.Node Import javax.jcr.Property Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Value Import java.io.IOException Import java.io.Writer ClassDeclaration Modifier public /**
 * A <code>SysViewSAXEventGenerator</code> instance can be used to generate SAX events
 * representing the serialized form of an item in System View XML.
 */ SysViewSAXEventGenerator FieldDeclaration /**
     * The XML elements and attributes used in serialization
     */ Modifier public final static ReferenceType String VariableDeclarator NODE_ELEMENT Literal ""node"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PREFIXED_NODE_ELEMENT BinaryOperation + BinaryOperation + MemberReference QName NS_SV_PREFIX Literal "":"" MemberReference NODE_ELEMENT FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PROPERTY_ELEMENT Literal ""property"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PREFIXED_PROPERTY_ELEMENT BinaryOperation + BinaryOperation + MemberReference QName NS_SV_PREFIX Literal "":"" MemberReference PROPERTY_ELEMENT FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator VALUE_ELEMENT Literal ""value"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PREFIXED_VALUE_ELEMENT BinaryOperation + BinaryOperation + MemberReference QName NS_SV_PREFIX Literal "":"" MemberReference VALUE_ELEMENT FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator NAME_ATTRIBUTE Literal ""name"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PREFIXED_NAME_ATTRIBUTE BinaryOperation + BinaryOperation + MemberReference QName NS_SV_PREFIX Literal "":"" MemberReference NAME_ATTRIBUTE FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator TYPE_ATTRIBUTE Literal ""type"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PREFIXED_TYPE_ATTRIBUTE BinaryOperation + BinaryOperation + MemberReference QName NS_SV_PREFIX Literal "":"" MemberReference TYPE_ATTRIBUTE FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator CDATA_TYPE Literal ""CDATA"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator ENUMERATION_TYPE Literal ""ENUMERATION"" ConstructorDeclaration Modifier public /**
     * Constructor
     *
     * @param node           the node state which should be serialized
     * @param noRecurse      if true, only <code>node</code> and its properties will
     *                       be serialized; otherwise the entire hierarchy starting with
     *                       <code>node</code> will be serialized.
     * @param skipBinary     flag governing whether binary properties are to be serialized.
     * @param contentHandler the content handler to feed the SAX events to
     * @throws RepositoryException if an error occurs
     */ SysViewSAXEventGenerator FormalParameter ReferenceType Node node FormalParameter BasicType boolean noRecurse FormalParameter BasicType boolean skipBinary FormalParameter ReferenceType ContentHandler contentHandler RepositoryException StatementExpression SuperConstructorInvocation MemberReference node MemberReference noRecurse MemberReference skipBinary MemberReference contentHandler MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected entering FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException SAXException LocalVariableDeclaration ReferenceType AttributesImpl VariableDeclarator attrs ClassCreator ReferenceType AttributesImpl LocalVariableDeclaration ReferenceType String VariableDeclarator nodeName IfStatement BinaryOperation == MethodInvocation node getDepth Literal 0 BlockStatement StatementExpression Assignment MemberReference nodeName MemberReference jcrRoot = BlockStatement StatementExpression Assignment MemberReference nodeName MethodInvocation node getName = End StatementExpression MethodInvocation attrs MemberReference QName NS_SV_URI MemberReference NAME_ATTRIBUTE MemberReference PREFIXED_NAME_ATTRIBUTE MemberReference CDATA_TYPE MemberReference nodeName addAttribute StatementExpression MethodInvocation contentHandler MemberReference QName NS_SV_URI MemberReference NODE_ELEMENT MemberReference PREFIXED_NODE_ELEMENT MemberReference attrs startElement MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected enteringProperties FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException SAXException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected leavingProperties FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException SAXException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected leaving FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException SAXException StatementExpression MethodInvocation contentHandler MemberReference QName NS_SV_URI MemberReference NODE_ELEMENT MemberReference PREFIXED_NODE_ELEMENT endElement MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected entering FormalParameter ReferenceType Property prop FormalParameter BasicType int level RepositoryException SAXException LocalVariableDeclaration ReferenceType String VariableDeclarator propName MethodInvocation prop getName LocalVariableDeclaration ReferenceType AttributesImpl VariableDeclarator attrs ClassCreator ReferenceType AttributesImpl StatementExpression MethodInvocation attrs MemberReference QName NS_SV_URI MemberReference NAME_ATTRIBUTE MemberReference PREFIXED_NAME_ATTRIBUTE MemberReference CDATA_TYPE MemberReference propName addAttribute LocalVariableDeclaration BasicType int VariableDeclarator type MethodInvocation prop getType LocalVariableDeclaration ReferenceType String VariableDeclarator typeName TryStatement StatementExpression Assignment MemberReference typeName MethodInvocation PropertyType MemberReference type nameFromValue = CatchClause CatchClauseParameter IllegalArgumentException iae ThrowStatement ClassCreator ReferenceType RepositoryException BinaryOperation + Literal ""unexpected property-type ordinal: "" MemberReference type MemberReference iae StatementExpression MethodInvocation attrs MemberReference QName NS_SV_URI MemberReference TYPE_ATTRIBUTE MemberReference PREFIXED_TYPE_ATTRIBUTE MemberReference ENUMERATION_TYPE MemberReference typeName addAttribute StatementExpression MethodInvocation contentHandler MemberReference QName NS_SV_URI MemberReference PROPERTY_ELEMENT MemberReference PREFIXED_PROPERTY_ELEMENT MemberReference attrs startElement IfStatement BinaryOperation && BinaryOperation == MethodInvocation prop getType MemberReference PropertyType BINARY MemberReference skipBinary BlockStatement StatementExpression MethodInvocation contentHandler MemberReference QName NS_SV_URI MemberReference VALUE_ELEMENT MemberReference PREFIXED_VALUE_ELEMENT ClassCreator ReferenceType AttributesImpl startElement StatementExpression MethodInvocation contentHandler MemberReference QName NS_SV_URI MemberReference VALUE_ELEMENT MemberReference PREFIXED_VALUE_ELEMENT endElement BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator multiValued MethodInvocation prop MethodInvocation isMultiple getDefinition LocalVariableDeclaration ReferenceType Value VariableDeclarator vals IfStatement MemberReference multiValued BlockStatement StatementExpression Assignment MemberReference vals MethodInvocation prop getValues = BlockStatement StatementExpression Assignment MemberReference vals ArrayCreator ReferenceType Value ArrayInitializer MethodInvocation prop getValue = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference vals length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Value VariableDeclarator val MemberReference ArraySelector MemberReference i vals StatementExpression MethodInvocation contentHandler MemberReference QName NS_SV_URI MemberReference VALUE_ELEMENT MemberReference PREFIXED_VALUE_ELEMENT ClassCreator ReferenceType AttributesImpl startElement LocalVariableDeclaration ReferenceType Writer VariableDeclarator writer ClassCreator ReferenceType Writer MethodDeclaration Modifier public close MethodDeclaration Modifier public flush MethodDeclaration Modifier public write FormalParameter BasicType char cbuf FormalParameter BasicType int off FormalParameter BasicType int len IOException TryStatement StatementExpression MethodInvocation contentHandler MemberReference cbuf MemberReference off MemberReference len characters CatchClause CatchClauseParameter SAXException se ThrowStatement ClassCreator ReferenceType IOException MethodInvocation se toString TryStatement StatementExpression MethodInvocation ValueHelper MemberReference val Literal false MemberReference writer serialize CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType Throwable VariableDeclarator t MethodInvocation ioe getCause IfStatement BinaryOperation && BinaryOperation != MemberReference t Literal null BinaryOperation instanceof MemberReference t ReferenceType SAXException BlockStatement ThrowStatement Cast ReferenceType SAXException MemberReference t BlockStatement ThrowStatement ClassCreator ReferenceType SAXException MemberReference ioe End StatementExpression MethodInvocation contentHandler MemberReference QName NS_SV_URI MemberReference VALUE_ELEMENT MemberReference PREFIXED_VALUE_ELEMENT endElement End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected leaving FormalParameter ReferenceType Property prop FormalParameter BasicType int level RepositoryException SAXException StatementExpression MethodInvocation contentHandler MemberReference QName NS_SV_URI MemberReference PROPERTY_ELEMENT MemberReference PREFIXED_PROPERTY_ELEMENT endElement ReferenceType AbstractSAXEventGenerator",0
636,636,,0
211,211,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.query Import javax.jcr.Session Import javax.jcr.query.Query Import javax.jcr.query.QueryResult Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public abstract /**
 * Query the <code>Repository</code> through either SQL or XPATH language.
 */ AbstractQuery FieldDeclaration /** query statement key */ Modifier private ReferenceType String VariableDeclarator statementKey Literal ""statement"" FieldDeclaration /** destination key */ Modifier private ReferenceType String VariableDeclarator destKey Literal ""collected"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public final BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator statement Cast ReferenceType String MethodInvocation ctx This MemberReference statementKey get LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation CommandHelper MemberReference ctx getSession LocalVariableDeclaration ReferenceType Query VariableDeclarator query MethodInvocation session MethodInvocation getQueryManager MethodInvocation MemberReference statement This MethodInvocation getLanguage createQuery getWorkspace LocalVariableDeclaration ReferenceType QueryResult VariableDeclarator result MethodInvocation query execute StatementExpression MethodInvocation ctx MemberReference destKey MethodInvocation result getNodes put ReturnStatement Literal false MethodDeclaration /**
     * @return the query language
     */ Modifier protected abstract ReferenceType String getLanguage MethodDeclaration /**
     * @return the statement key
     */ Modifier public ReferenceType String getStatementKey ReturnStatement MemberReference statementKey MethodDeclaration /**
     * @param statementKey
     *        the statement key to set
     */ Modifier public setStatementKey FormalParameter ReferenceType String statementKey StatementExpression Assignment This MemberReference statementKey MemberReference statementKey = MethodDeclaration /**
     * @return the destination key
     */ Modifier public ReferenceType String getDestKey ReturnStatement MemberReference destKey MethodDeclaration /**
     * @param toKey
     *        the destination key to set
     */ Modifier public setDestKey FormalParameter ReferenceType String toKey StatementExpression Assignment This MemberReference destKey MemberReference toKey = ReferenceType Command",1
373,373,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.cli ClassDeclaration Modifier public /**
 * Command Line option. <br>
 * An option is a pair with the following pattern -[option name] [option value]
 */ Option FieldDeclaration /** argument name */ Modifier private ReferenceType String VariableDeclarator argName FieldDeclaration /** required */ Modifier private BasicType boolean VariableDeclarator required Literal false MethodDeclaration /**
     * @return true if this <code>Option</code> is required
     */ Modifier public BasicType boolean isRequired ReturnStatement MemberReference required MethodDeclaration /**
     * @param required
     *        set required
     */ Modifier public setRequired FormalParameter BasicType boolean required StatementExpression Assignment This MemberReference required MemberReference required = MethodDeclaration /**
     * @return the argument name
     */ Modifier public ReferenceType String getArgName ReturnStatement MemberReference argName MethodDeclaration /**
     * @return the localized argument name
     */ Modifier public ReferenceType String getLocalizedArgName ReturnStatement MethodInvocation bundle This MethodInvocation getArgName getString MethodDeclaration /**
     * @param argName
     *        the argument name to set
     */ Modifier public setArgName FormalParameter ReferenceType String argName StatementExpression Assignment This MemberReference argName MemberReference argName = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Object clone LocalVariableDeclaration ReferenceType Option VariableDeclarator o ClassCreator ReferenceType Option StatementExpression This MethodInvocation MemberReference o clone ReturnStatement MemberReference o MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected clone FormalParameter ReferenceType Option opt StatementExpression SuperMethodInvocation MemberReference opt clone StatementExpression Assignment MemberReference opt argName This MemberReference argName = StatementExpression Assignment MemberReference opt required This MemberReference required = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getLocalizedDescription ReturnStatement MethodInvocation bundle This MethodInvocation getDescription getString ReferenceType AbstractParameter",1
306,306,"CompilationUnit PackageDeclaration org.apache.jackrabbit.session.nodetype Import java.util.HashSet Import java.util.Set Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.PropertyDefinition Import org.apache.jackrabbit.session.SessionHelper Import org.apache.jackrabbit.base.nodetype.BaseNodeType Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.state.nodetype.NodeDefinitionState Import org.apache.jackrabbit.state.nodetype.NodeTypeState Import org.apache.jackrabbit.state.nodetype.PropertyDefinitionState ClassDeclaration Modifier final /**
 * Immutable and session-bound node type frontend. An instance
 * of this class presents the underlying node type state using
 * the JCR NodeType interface. This class also contains simple
 * implementations of the higher-order methods defined by the
 * NodeType interface.
 * <p>
 * By not exposing the setter methods of the underlying state instance,
 * this class intentionally makes it impossible for a JCR client to modify
 * node type information.
 */ SessionNodeType FieldDeclaration /** The wildcard item definition name. */ Modifier private final static ReferenceType String VariableDeclarator WILDCARD Literal ""*"" FieldDeclaration /** Helper for accessing the current session. */ Modifier private final ReferenceType SessionHelper VariableDeclarator helper FieldDeclaration /** The underlying node type state. */ Modifier private final ReferenceType NodeTypeState VariableDeclarator state ConstructorDeclaration Modifier public /**
     * Creates a node type frontend that is bound to the
     * given session and underlying node type state.
     *
     * @param helper helper for accessing the current session
     * @param state underlying node type state
     */ SessionNodeType FormalParameter ReferenceType SessionHelper helper FormalParameter ReferenceType NodeTypeState state StatementExpression Assignment This MemberReference helper MemberReference helper = StatementExpression Assignment This MemberReference state MemberReference state = MethodDeclaration /**
     * Returns the name of the node type. The returned name is retrieved
     * from the underlying node type state and converted into a prefixed
     * JCR name using the namespace mappings of the current session.
     *
     * @return node type name
     * @see NodeType#getName()
     */ Modifier public ReferenceType String getName ReturnStatement MethodInvocation helper MethodInvocation state getName getName MethodDeclaration /**
     * Returns the value of the Mixin node type property. The returned
     * value is retrieved from the underlying node type state.
     *
     * @return Mixin property value
     * @see NodeType#isMixin()
     */ Modifier public BasicType boolean isMixin ReturnStatement MethodInvocation state isMixin MethodDeclaration /**
     * Returns the value of the HasOrderableChildNodes node type property.
     * The returned value is retrieved from the underlying node type state.
     *
     * @return HasOrderableChildNodes property value
     * @see NodeType#hasOrderableChildNodes()
     */ Modifier public BasicType boolean hasOrderableChildNodes ReturnStatement MethodInvocation state hasOrderableChildNodes MethodDeclaration /**
     * Returns the name of the primary item of this node type.
     * The returned name is retrieved from the underlying node type state
     * and converted into a prefixed JCR name using the namespace mappings
     * of the current session.
     *
     * @return primary item name, or <code>null</code> if not specified
     * @see NodeType#getPrimaryItemName()
     */ Modifier public ReferenceType String getPrimaryItemName LocalVariableDeclaration ReferenceType QName VariableDeclarator name MethodInvocation state getPrimaryItemName IfStatement BinaryOperation != MemberReference name Literal null BlockStatement ReturnStatement MethodInvocation helper MemberReference name getName BlockStatement ReturnStatement Literal null End MethodDeclaration /**
     * Returns the declared supertypes of this node type. The returned
     * node types are retrieved from the node type manager of the current
     * session using the supertype names stored in the underlying state.
     * <p>
     * The returned array is freshly instantiated and not a part of the
     * underlying state, so it can be freely modified.
     *
     * @return declared supertypes
     * @see NodeType#getDeclaredSupertypes()
     */ Modifier public ReferenceType NodeType getDeclaredSupertypes LocalVariableDeclaration ReferenceType Set VariableDeclarator types ClassCreator ReferenceType HashSet LocalVariableDeclaration ReferenceType QName VariableDeclarator names MethodInvocation state getSupertypeNames ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference names length MemberReference ++ i BlockStatement StatementExpression MethodInvocation types MethodInvocation helper MemberReference ArraySelector MemberReference i names getNodeType add End ReturnStatement Cast ReferenceType NodeType MethodInvocation types ArrayCreator ReferenceType NodeType MethodInvocation types size toArray MethodDeclaration /**
     * Returns the declared child node definitions of this node type.
     * The returned child node definitions are SessionNodeDefs instantiated
     * using the node definition states returned by the underlying node type
     * state.
     * <p>
     * The returned array is freshly instantiated and not a part of the
     * underlying state, so it can be freely modified.
     *
     * @return declared child node definitions
     * @see SessionNodeDefinition
     * @see NodeType#getDeclaredChildNodeDefinitions()
     */ Modifier public ReferenceType NodeDefinition getDeclaredChildNodeDefinitions LocalVariableDeclaration ReferenceType Set VariableDeclarator definitions ClassCreator ReferenceType HashSet LocalVariableDeclaration ReferenceType NodeDefinitionState VariableDeclarator states MethodInvocation state getChildNodeDefinitionStates ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference states length MemberReference ++ i BlockStatement StatementExpression MethodInvocation definitions ClassCreator ReferenceType SessionNodeDefinition MemberReference helper This MemberReference ArraySelector MemberReference i states add End ReturnStatement Cast ReferenceType NodeDefinition MethodInvocation definitions ArrayCreator ReferenceType NodeDefinition MethodInvocation definitions size toArray MethodDeclaration /**
     * Returns the declared property definitions of this node type.
     * The returned property definitions are SessionPropertyDefs instantiated
     * using the property definition states returned by the underlying
     * node type state.
     * <p>
     * The returned array is freshly instantiated and not a part of the
     * underlying state, so it can be freely modified.
     *
     * @return declared child node definitions
     * @see SessionPropertyDefinition
     * @see NodeType#getDeclaredChildNodeDefs()
     */ Modifier public ReferenceType PropertyDefinition getDeclaredPropertyDefinitions LocalVariableDeclaration ReferenceType Set VariableDeclarator definitions ClassCreator ReferenceType HashSet LocalVariableDeclaration ReferenceType PropertyDefinitionState VariableDeclarator states MethodInvocation state getPropertyDefinitionStates ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference states length MemberReference ++ i BlockStatement StatementExpression MethodInvocation definitions ClassCreator ReferenceType SessionPropertyDefinition MemberReference helper This MemberReference ArraySelector MemberReference i states add End ReturnStatement Cast ReferenceType PropertyDefinition MethodInvocation definitions ArrayCreator ReferenceType PropertyDefinition MethodInvocation definitions size toArray MethodDeclaration /**
     * Compares objects for equality. Returns <code>true</code> if the
     * given object is a SessionNodeType with the same underlying node
     * type state and session.
     * <p>
     * Note that the node type state class does not override the equals
     * method and thus the mutable state instances are compared for
     * reference equality.
     *
     * @param that the object to compare this object with
     * @return <code>true</code> if the objects are equal,
     *         <code>false</code> otherwise
     * @see Object#equals(Object)
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object that IfStatement BinaryOperation == This MemberReference that BlockStatement ReturnStatement Literal true IfStatement BinaryOperation instanceof MemberReference that ReferenceType SessionNodeType BlockStatement ReturnStatement BinaryOperation && MethodInvocation state Cast ReferenceType SessionNodeType MemberReference that equals MethodInvocation helper Cast ReferenceType SessionNodeType MemberReference that equals BlockStatement ReturnStatement Literal false End End MethodDeclaration /**
     * Returns a hash code for this object. To satisfy the equality
     * constraints the returned hash code is a combination of the
     * hash codes of the underlying node type state and session.
     *
     * @return hash code
     * @see Object#hashCode()
     */ Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator code Literal 17 StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 37 MethodInvocation state hashCode = StatementExpression Assignment MemberReference code BinaryOperation + BinaryOperation * MemberReference code Literal 37 MethodInvocation helper hashCode = ReturnStatement MemberReference code ReferenceType BaseNodeType ReferenceType NodeType",1
66,66,"CompilationUnit PackageDeclaration org.apache.jackrabbit.util.name Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.AbstractNamespaceResolver Import javax.jcr.NamespaceException Import java.util.HashMap Import java.util.Iterator Import java.util.Map Import java.util.Properties Import java.util.Set ClassDeclaration Modifier public /**
 * A Simple Namespace Mapping table. Mappings can be added
 * and then the object can be used as a NamespaceResolver. Additionally, it can
 * be based on a underlying NamespaceResolver
 */ NamespaceMapping FieldDeclaration /** local uris */ Modifier private final ReferenceType Properties VariableDeclarator prefixToURI ClassCreator ReferenceType Properties FieldDeclaration /** local prefix */ Modifier private final ReferenceType Properties VariableDeclarator URIToPrefix ClassCreator ReferenceType Properties FieldDeclaration /** base */ Modifier private final ReferenceType NamespaceResolver VariableDeclarator base ConstructorDeclaration Modifier public NamespaceMapping StatementExpression Assignment This MemberReference base Literal null = ConstructorDeclaration Modifier public /**
     * Constructor
     */ NamespaceMapping FormalParameter ReferenceType NamespaceResolver base StatementExpression Assignment This MemberReference base MemberReference base = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getPrefix FormalParameter ReferenceType String uri NamespaceException IfStatement MethodInvocation URIToPrefix MemberReference uri containsKey BlockStatement ReturnStatement MethodInvocation URIToPrefix MemberReference uri getProperty IfStatement BinaryOperation == MemberReference base Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NamespaceException BinaryOperation + BinaryOperation + Literal ""No prefix for URI '"" MemberReference uri Literal ""' declared."" BlockStatement ReturnStatement MethodInvocation base MemberReference uri getPrefix End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getURI FormalParameter ReferenceType String prefix NamespaceException IfStatement MethodInvocation prefixToURI MemberReference prefix containsKey BlockStatement ReturnStatement MethodInvocation prefixToURI MemberReference prefix getProperty IfStatement BinaryOperation == MemberReference base Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NamespaceException BinaryOperation + BinaryOperation + Literal ""No URI for pefix '"" MemberReference prefix Literal ""' declared."" BlockStatement ReturnStatement MethodInvocation base MemberReference prefix getURI End End MethodDeclaration /**
     * Returns true if prefix is already mapped to some URI. Returns false otherwise.
     */ Modifier public BasicType boolean hasPrefix FormalParameter ReferenceType String prefix ReturnStatement MethodInvocation prefixToURI MemberReference prefix containsKey MethodDeclaration /**
     * Set a prefix == URI one-to-one mapping
     *
     * @param prefix
     * @param uri
     * @throws NamespaceException
     */ Modifier public setMapping FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri NamespaceException IfStatement BinaryOperation == MemberReference prefix Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NamespaceException Literal ""Prefix must not be null"" End IfStatement BinaryOperation == MemberReference uri Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NamespaceException Literal ""URI must not be null"" End IfStatement MethodInvocation URIToPrefix MemberReference uri containsKey BlockStatement StatementExpression MethodInvocation prefixToURI MethodInvocation URIToPrefix MemberReference uri remove remove End IfStatement MethodInvocation prefixToURI MemberReference prefix containsKey BlockStatement StatementExpression MethodInvocation URIToPrefix MethodInvocation prefixToURI MemberReference prefix remove remove End StatementExpression MethodInvocation prefixToURI MemberReference prefix MemberReference uri put StatementExpression MethodInvocation URIToPrefix MemberReference uri MemberReference prefix put MethodDeclaration /**
     * Return a Map of prefix to URI mappings currently registered.
     * The returned Map is a copy of the internal Map.
     * @return Map
     */ Modifier public ReferenceType Map getPrefixToURIMapping ReturnStatement ClassCreator ReferenceType HashMap MemberReference prefixToURI MethodDeclaration /**
     * Return a Map of URI to prefix mappings currently registered.
     * The returned Map is a copy of the internal Map.
     * @return Map
     */ Modifier public ReferenceType Map getURIToPrefixMapping ReturnStatement ClassCreator ReferenceType HashMap MemberReference URIToPrefix MethodDeclaration /**
     * Override equals()
      *
     * @param obj
     * @return boolean
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType NamespaceMapping BlockStatement LocalVariableDeclaration ReferenceType NamespaceMapping VariableDeclarator other Cast ReferenceType NamespaceMapping MemberReference obj ReturnStatement BinaryOperation && This MethodInvocation getPrefixToURIMapping MethodInvocation MethodInvocation other getPrefixToURIMapping equals This MethodInvocation getURIToPrefixMapping MethodInvocation MethodInvocation other getURIToPrefixMapping equals End ReturnStatement Literal false MethodDeclaration /**
     * Override toString()
     *
     * @return String
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType String VariableDeclarator s Literal """" LocalVariableDeclaration ReferenceType Set VariableDeclarator mapping MethodInvocation prefixToURI entrySet ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation mapping iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType Map ReferenceType Entry VariableDeclarator entry Cast ReferenceType Map ReferenceType Entry MethodInvocation i next LocalVariableDeclaration ReferenceType String VariableDeclarator prefix Cast ReferenceType String MethodInvocation entry getKey LocalVariableDeclaration ReferenceType String VariableDeclarator uri Cast ReferenceType String MethodInvocation entry getValue StatementExpression Assignment MemberReference s BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""'"" MemberReference prefix Literal ""' == '"" MemberReference uri Literal ""'\n"" += End ReturnStatement MemberReference s ReferenceType AbstractNamespaceResolver",1
462,462,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.remote Import java.io.Serializable Import java.util.NoSuchElementException ClassDeclaration Modifier public /**
 * A simple array-based remote iterator. Used when the iteration is
 * short enough for all the elements to be sent over the network in
 * one go.
 */ ArrayIterator FieldDeclaration /**
     * The elements in this iterator. Set to <code>null</code> when
     * all elements have been iterated.
     */ Modifier private ReferenceType Object VariableDeclarator elements FieldDeclaration /**
     * The position of this iterator. Set to the size of the iterator
     * when all elements have been iterated.
     */ Modifier private BasicType int VariableDeclarator position ConstructorDeclaration Modifier public /**
     * Creates an array-based remote iterator from the given array
     * of remote references or serializable objects.
     *
     * @param elements elements of the iteration
     */ ArrayIterator FormalParameter ReferenceType Object elements StatementExpression Assignment This MemberReference elements MemberReference elements = StatementExpression Assignment This MemberReference position Literal 0 = MethodDeclaration /**
     * Returns the size of the iterator.
     *
     * @return length of the iterator
     * @see RemoteIterator#getSize()
     */ Modifier public BasicType long getSize IfStatement BinaryOperation == MemberReference elements Literal null BlockStatement ReturnStatement MemberReference position BlockStatement ReturnStatement MemberReference elements length End MethodDeclaration /**
     * Skips the first <code>items</code> elements in the array.
     * {@inheritDoc}
     */ Modifier public skip FormalParameter BasicType long items IllegalArgumentException NoSuchElementException IfStatement BinaryOperation < MemberReference items Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Negative skip is not allowed"" IfStatement BinaryOperation || BinaryOperation == MemberReference elements Literal null BinaryOperation > MemberReference items MemberReference elements length BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchElementException Literal ""Skipped past the last element"" BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator tmp ArrayCreator ReferenceType Object BinaryOperation - MemberReference elements length Cast BasicType int MemberReference items StatementExpression MethodInvocation System MemberReference elements Cast BasicType int MemberReference items MemberReference tmp Literal 0 MemberReference tmp length arraycopy StatementExpression Assignment MemberReference elements MemberReference tmp = StatementExpression Assignment MemberReference position MemberReference items += End End MethodDeclaration /**
     * Returns the underlying array.
     * {@inheritDoc}
     */ Modifier public ReferenceType Object nextObjects IllegalArgumentException IfStatement BinaryOperation == MemberReference elements Literal null BlockStatement ReturnStatement Literal null BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator tmp MemberReference elements StatementExpression Assignment MemberReference position MemberReference elements length += StatementExpression Assignment MemberReference elements Literal null = ReturnStatement MemberReference tmp End ReferenceType RemoteIterator ReferenceType Serializable",0
410,410,"CompilationUnit PackageDeclaration org.apache.jackrabbit.util Import javax.jcr.Node Import javax.jcr.Property Import javax.jcr.RepositoryException Import javax.jcr.util.TraversingItemVisitor Import java.util.Collection Import java.util.StringTokenizer ClassDeclaration Modifier public /**
 * <code>ChildrenCollectorFilter</code> is a utility class
 * which can be used to 'collect' child items of a
 * node whose names match a certain pattern. It implements the
 * <code>ItemVisitor</code> interface.
 */ ChildrenCollectorFilter FieldDeclaration Modifier final static BasicType char VariableDeclarator WILDCARD_CHAR Literal '*' FieldDeclaration Modifier final static ReferenceType String VariableDeclarator OR Literal ""|"" FieldDeclaration Modifier private final ReferenceType Collection VariableDeclarator children FieldDeclaration Modifier private final BasicType boolean VariableDeclarator collectNodes FieldDeclaration Modifier private final BasicType boolean VariableDeclarator collectProperties FieldDeclaration Modifier private final ReferenceType String VariableDeclarator namePattern ConstructorDeclaration Modifier public /**
     * Constructs a <code>ChildrenCollectorFilter</code>
     *
     * @param namePattern       the pattern which should be applied to the names
     *                          of the children
     * @param children          where the matching children should be added
     * @param collectNodes      true, if child nodes should be collected; otherwise false
     * @param collectProperties true, if child properties should be collected; otherwise false
     * @param maxLevel          umber of hierarchy levels to traverse
     *                          (e.g. 1 for direct children only, 2 for children and their children, and so on)
     */ ChildrenCollectorFilter FormalParameter ReferenceType String namePattern FormalParameter ReferenceType Collection children FormalParameter BasicType boolean collectNodes FormalParameter BasicType boolean collectProperties FormalParameter BasicType int maxLevel StatementExpression SuperConstructorInvocation Literal false MemberReference maxLevel StatementExpression Assignment This MemberReference namePattern MemberReference namePattern = StatementExpression Assignment This MemberReference children MemberReference children = StatementExpression Assignment This MemberReference collectNodes MemberReference collectNodes = StatementExpression Assignment This MemberReference collectProperties MemberReference collectProperties = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected entering FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException IfStatement BinaryOperation && BinaryOperation > MemberReference level Literal 0 MemberReference collectNodes BlockStatement IfStatement MethodInvocation MethodInvocation node getName MemberReference namePattern matches BlockStatement StatementExpression MethodInvocation children MemberReference node add End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected entering FormalParameter ReferenceType Property property FormalParameter BasicType int level RepositoryException IfStatement BinaryOperation && BinaryOperation > MemberReference level Literal 0 MemberReference collectProperties BlockStatement IfStatement MethodInvocation MethodInvocation property getName MemberReference namePattern matches BlockStatement StatementExpression MethodInvocation children MemberReference property add End End MethodDeclaration /**
     * Matches the name pattern against the specified name.
     * <p/>
     * The pattern may be a full name or a partial name with one or more
     * wildcard characters (""*""), or a disjunction (using the ""|"" character
     * to represent logical <i>OR</i>) of these. For example,
     * <p/>
     * <code>""jcr:*|foo:bar""</code>
     * <p/>
     * would match
     * <p/>
     * <code>""foo:bar""</code>, but also <code>""jcr:whatever""</code>.
     * <p/>
     * <pre>
     * The EBNF for pattern is:
     *
     * namePattern ::= disjunct {'|' disjunct}
     * disjunct ::= name [':' name]
     * name ::= '*' |
     *          ['*'] fragment {'*' fragment}['*']
     * fragment ::= char {char}
     * char ::= nonspace | ' '
     * nonspace ::= (* Any Unicode character except:
     *               '/', ':', '[', ']', '*',
     *               ''', '""', '|' or any whitespace
     *               character *)
     * </pre>
     *
     * @param name the name to test the pattern with
     * @param pattern the pattern to be matched against the name
     * @return true if the specified name matches the pattern
     * @see javax.jcr.Node#getNodes(String)
     */ Modifier public static BasicType boolean matches FormalParameter ReferenceType String name FormalParameter ReferenceType String pattern LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference pattern MemberReference OR Literal false WhileStatement MethodInvocation st hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator token MethodInvocation st MethodInvocation trim nextToken IfStatement MethodInvocation MemberReference name MemberReference token Literal 0 Literal 0 internalMatches BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * Internal helper used to recursively match the pattern
     *
     * @param s       The string to be tested
     * @param pattern The pattern
     * @param sOff    offset within <code>s</code>
     * @param pOff    offset within <code>pattern</code>.
     * @return true if <code>s</code> matched pattern, else false.
     */ Modifier private static BasicType boolean internalMatches FormalParameter ReferenceType String s FormalParameter ReferenceType String pattern FormalParameter BasicType int sOff FormalParameter BasicType int pOff LocalVariableDeclaration BasicType int VariableDeclarator pLen MethodInvocation pattern length LocalVariableDeclaration BasicType int VariableDeclarator sLen MethodInvocation s length WhileStatement Literal true BlockStatement IfStatement BinaryOperation >= MemberReference pOff MemberReference pLen BlockStatement IfStatement BinaryOperation >= MemberReference sOff MemberReference sLen BlockStatement ReturnStatement Literal true IfStatement BinaryOperation == MethodInvocation s MemberReference sOff charAt Literal '[' BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement Literal false End End End IfStatement BinaryOperation && BinaryOperation >= MemberReference sOff MemberReference sLen BinaryOperation != MethodInvocation pattern MemberReference pOff charAt MemberReference WILDCARD_CHAR BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MethodInvocation pattern MemberReference pOff charAt MemberReference WILDCARD_CHAR BlockStatement IfStatement BinaryOperation >= MemberReference ++ pOff MemberReference pLen BlockStatement ReturnStatement Literal true End WhileStatement Literal true BlockStatement IfStatement MethodInvocation MemberReference s MemberReference pattern MemberReference sOff MemberReference pOff internalMatches BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation >= MemberReference sOff MemberReference sLen BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ sOff End End IfStatement BinaryOperation && BinaryOperation < MemberReference pOff MemberReference pLen BinaryOperation < MemberReference sOff MemberReference sLen BlockStatement IfStatement BinaryOperation != MethodInvocation pattern MemberReference pOff charAt MethodInvocation s MemberReference sOff charAt BlockStatement ReturnStatement Literal false End End StatementExpression MemberReference ++ pOff StatementExpression MemberReference ++ sOff End ReferenceType TraversingItemVisitor ReferenceType Default",0
443,443,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.orm Import java.io.Serializable ClassDeclaration Modifier public /**
 * BLOB value ORM object
 */ ORMBlobValue FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator dbId FieldDeclaration Modifier private ReferenceType String VariableDeclarator parentUUID FieldDeclaration Modifier private ReferenceType String VariableDeclarator propertyName FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator index FieldDeclaration Modifier private ReferenceType Long VariableDeclarator size FieldDeclaration Modifier private BasicType byte VariableDeclarator blobValue ConstructorDeclaration Modifier public ORMBlobValue MethodDeclaration Modifier public setDbId FormalParameter ReferenceType Integer dbId StatementExpression Assignment This MemberReference dbId MemberReference dbId = MethodDeclaration Modifier public setParentUUID FormalParameter ReferenceType String parentUUID StatementExpression Assignment This MemberReference parentUUID MemberReference parentUUID = MethodDeclaration Modifier public setPropertyName FormalParameter ReferenceType String propertyName StatementExpression Assignment This MemberReference propertyName MemberReference propertyName = MethodDeclaration Modifier public setIndex FormalParameter ReferenceType Integer index StatementExpression Assignment This MemberReference index MemberReference index = MethodDeclaration Modifier public setSize FormalParameter ReferenceType Long size StatementExpression Assignment This MemberReference size MemberReference size = MethodDeclaration Modifier public setBlobValue FormalParameter BasicType byte blobValue StatementExpression Assignment This MemberReference blobValue MemberReference blobValue = MethodDeclaration Modifier public ReferenceType Integer getDbId ReturnStatement MemberReference dbId MethodDeclaration Modifier public ReferenceType String getParentUUID ReturnStatement MemberReference parentUUID MethodDeclaration Modifier public ReferenceType String getPropertyName ReturnStatement MemberReference propertyName MethodDeclaration Modifier public ReferenceType Integer getIndex ReturnStatement MemberReference index MethodDeclaration Modifier public ReferenceType Long getSize ReturnStatement MemberReference size MethodDeclaration Modifier public BasicType byte getBlobValue ReturnStatement MemberReference blobValue MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType ORMBlobValue BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ORMBlobValue VariableDeclarator right Cast ReferenceType ORMBlobValue MemberReference obj IfStatement BinaryOperation == MemberReference dbId Literal null BlockStatement IfStatement BinaryOperation == MethodInvocation right getDbId Literal null BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation && BinaryOperation && MethodInvocation parentUUID MethodInvocation right getParentUUID equals MethodInvocation propertyName MethodInvocation right getPropertyName equals MethodInvocation index MethodInvocation right getIndex equals BlockStatement ReturnStatement Literal true End ReturnStatement Literal false End IfStatement MethodInvocation dbId MethodInvocation right getDbId equals BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier public BasicType int hashCode ReturnStatement MethodInvocation MethodInvocation hashCode getDbId ReferenceType Serializable",0
787,787,,1
884,884,,0
454,454,"CompilationUnit PackageDeclaration org.apache.jmeter.protocol.java.config.gui Import java.awt.BorderLayout Import java.awt.event.ActionEvent Import java.awt.event.ActionListener Import java.util.Iterator Import java.util.List Import java.util.Map Import javax.swing.JComboBox Import javax.swing.JLabel Import javax.swing.JPanel Import org.apache.commons.beanutils.BeanUtils Import org.apache.commons.chain.Command Import org.apache.jmeter.config.Argument Import org.apache.jmeter.config.Arguments Import org.apache.jmeter.config.gui.AbstractConfigGui Import org.apache.jmeter.config.gui.ArgumentsPanel Import org.apache.jmeter.gui.util.HorizontalPanel Import org.apache.jmeter.protocol.java.config.JavaConfig Import org.apache.jmeter.protocol.java.sampler.JavaSampler Import org.apache.jmeter.testelement.TestElement Import org.apache.jmeter.testelement.property.PropertyIterator Import org.apache.jmeter.util.JMeterUtils Import org.apache.jorphan.logging.LoggingManager Import org.apache.jorphan.reflect.ClassFinder Import org.apache.log.Logger ClassDeclaration Modifier public /**
 * The <code>ChainConfigGui</code> class provides the user interface for the
 * {@link JavaConfig}object.
 * 
 * @author Edgar Poce
 */ ChainConfigGui FieldDeclaration /**
     * <code>serialVersionUID</code>
     */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 3545799879432615731L FieldDeclaration /** Logging */ Modifier private static transient ReferenceType Logger VariableDeclarator log MethodInvocation LoggingManager getLoggerForClass FieldDeclaration /** The name of the classnameCombo JComboBox */ Modifier private final static ReferenceType String VariableDeclarator CLASSNAMECOMBO Literal ""chainclassnamecombo"" FieldDeclaration /** A combo box allowing the user to choose a test class. */ Modifier private ReferenceType JComboBox VariableDeclarator classnameCombo FieldDeclaration /**
	 * Indicates whether or not the name of this component should be displayed
	 * as part of the GUI. If true, this is a standalone component. If false, it
	 * is embedded in some other component.
	 */ Modifier private BasicType boolean VariableDeclarator displayName Literal true FieldDeclaration /** A panel allowing the user to set arguments for this test. */ Modifier private ReferenceType ArgumentsPanel VariableDeclarator argsPanel ConstructorDeclaration Modifier public /**
	 * Create a new JavaConfigGui as a standalone component.
	 */ ChainConfigGui StatementExpression ExplicitConstructorInvocation Literal true ConstructorDeclaration Modifier public /**
	 * Create a new JavaConfigGui as either a standalone or an embedded
	 * component.
	 * 
	 * @param displayNameField
	 *            tells whether the component name should be displayed with the
	 *            GUI. If true, this is a standalone component. If false, this
	 *            component is embedded in some other component.
	 */ ChainConfigGui FormalParameter BasicType boolean displayNameField StatementExpression Assignment This MemberReference displayName MemberReference displayNameField = StatementExpression MethodInvocation init MethodDeclaration Modifier public ReferenceType String getLabelResource ReturnStatement Literal ""chain_config_title"" MethodDeclaration /**
	 * Initialize the GUI components and layout.
	 */ Modifier protected init StatementExpression MethodInvocation ClassCreator ReferenceType BorderLayout Literal 0 Literal 5 setLayout IfStatement MemberReference displayName BlockStatement StatementExpression MethodInvocation MethodInvocation makeBorder setBorder StatementExpression MethodInvocation MethodInvocation makeTitlePanel MemberReference BorderLayout NORTH add End LocalVariableDeclaration ReferenceType JPanel VariableDeclarator classnameRequestPanel ClassCreator ReferenceType JPanel ClassCreator ReferenceType BorderLayout Literal 0 Literal 5 StatementExpression MethodInvocation classnameRequestPanel MethodInvocation createClassnamePanel MemberReference BorderLayout NORTH add StatementExpression MethodInvocation classnameRequestPanel MethodInvocation createParameterPanel MemberReference BorderLayout CENTER add StatementExpression MethodInvocation MemberReference classnameRequestPanel MemberReference BorderLayout CENTER add MethodDeclaration /**
	 * Create a panel with GUI components allowing the user to select a test
	 * class.
	 * 
	 * @return a panel containing the relevant components
	 */ Modifier private ReferenceType JPanel createClassnamePanel LocalVariableDeclaration ReferenceType List VariableDeclarator possibleClasses Literal null TryStatement StatementExpression Assignment MemberReference possibleClasses MethodInvocation ClassFinder MethodInvocation JMeterUtils getSearchPaths ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType Command findClassesThatExtend = StatementExpression MethodInvocation possibleClasses BinaryOperation + ClassReference MethodInvocation getName ReferenceType Command Literal ""$ErrorSamplerClient"" remove CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log Literal ""Exception getting interfaces."" MemberReference e debug LocalVariableDeclaration ReferenceType JLabel VariableDeclarator label ClassCreator ReferenceType JLabel MethodInvocation JMeterUtils Literal ""protocol_java_classname"" getResString StatementExpression Assignment MemberReference classnameCombo ClassCreator ReferenceType JComboBox MethodInvocation possibleClasses toArray = StatementExpression MethodInvocation classnameCombo This addActionListener StatementExpression MethodInvocation classnameCombo MemberReference CLASSNAMECOMBO setName StatementExpression MethodInvocation classnameCombo Literal false setEditable StatementExpression MethodInvocation label MemberReference classnameCombo setLabelFor LocalVariableDeclaration ReferenceType HorizontalPanel VariableDeclarator panel ClassCreator ReferenceType HorizontalPanel StatementExpression MethodInvocation panel MemberReference label add StatementExpression MethodInvocation panel MemberReference classnameCombo add ReturnStatement MemberReference panel MethodDeclaration /**
	 * Handle action events for this component. This method currently handles
	 * events for the classname combo box.
	 * 
	 * @param evt
	 *            the ActionEvent to be handled
	 */ Modifier public actionPerformed FormalParameter ReferenceType ActionEvent evt IfStatement BinaryOperation == MethodInvocation evt getSource MemberReference classnameCombo BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator className Cast ReferenceType String MethodInvocation classnameCombo getSelectedItem TryStatement LocalVariableDeclaration ReferenceType Command VariableDeclarator command Cast ReferenceType Command MethodInvocation Class MethodInvocation newInstance MemberReference className Literal true MethodInvocation Thread MethodInvocation getContextClassLoader currentThread forName LocalVariableDeclaration ReferenceType Arguments VariableDeclarator currArgs ClassCreator ReferenceType Arguments StatementExpression MethodInvocation argsPanel MemberReference currArgs modifyTestElement LocalVariableDeclaration ReferenceType Map VariableDeclarator currArgsMap MethodInvocation currArgs getArgumentsAsMap LocalVariableDeclaration ReferenceType Arguments VariableDeclarator newArgs ClassCreator ReferenceType Arguments LocalVariableDeclaration ReferenceType Arguments VariableDeclarator testParams ClassCreator ReferenceType Arguments TryStatement LocalVariableDeclaration ReferenceType Map VariableDeclarator descrip MethodInvocation BeanUtils MemberReference command describe LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation descrip MethodInvocation iterator entrySet WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Map ReferenceType Entry VariableDeclarator entry Cast ReferenceType Map ReferenceType Entry MethodInvocation iter next IfStatement BinaryOperation && MethodInvocation ! entry MethodInvocation Literal ""type"" equals getKey MethodInvocation ! entry MethodInvocation Literal ""class"" equals getKey BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation entry MethodInvocation toString getKey LocalVariableDeclaration ReferenceType String VariableDeclarator value TernaryExpression BinaryOperation == MethodInvocation entry getValue Literal null Literal """" MethodInvocation entry MethodInvocation toString getValue StatementExpression MethodInvocation testParams ClassCreator ReferenceType Argument MemberReference key MemberReference value addArgument End End CatchClause CatchClauseParameter AbstractMethodError e StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""JavaSamplerClient doesn't implement "" Literal ""getDefaultParameters.  Default parameters won't "" Literal ""be shown.  Please update your client class: "" MemberReference className warn IfStatement BinaryOperation != MemberReference testParams Literal null BlockStatement LocalVariableDeclaration ReferenceType PropertyIterator VariableDeclarator i MethodInvocation testParams MethodInvocation iterator getArguments WhileStatement MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType Argument VariableDeclarator arg Cast ReferenceType Argument MethodInvocation i MethodInvocation getObjectValue next LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation arg getName LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation arg getValue IfStatement MethodInvocation currArgsMap MemberReference name containsKey BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator newVal Cast ReferenceType String MethodInvocation currArgsMap MemberReference name get IfStatement BinaryOperation && BinaryOperation != MemberReference newVal Literal null BinaryOperation > MethodInvocation newVal length Literal 0 BlockStatement StatementExpression Assignment MemberReference value MemberReference newVal = End End StatementExpression MethodInvocation newArgs MemberReference name MemberReference value addArgument End End StatementExpression MethodInvocation argsPanel MemberReference newArgs configure CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log BinaryOperation + Literal ""Error getting argument list for "" MemberReference className MemberReference e error End MethodDeclaration /**
	 * Create a panel containing components allowing the user to provide
	 * arguments to be passed to the test class instance.
	 * 
	 * @return a panel containing the relevant components
	 */ Modifier private ReferenceType JPanel createParameterPanel StatementExpression Assignment MemberReference argsPanel ClassCreator ReferenceType ArgumentsPanel MethodInvocation JMeterUtils Literal ""paramtable"" getResString = ReturnStatement MemberReference argsPanel MethodDeclaration Modifier public configure FormalParameter ReferenceType TestElement config StatementExpression SuperMethodInvocation MemberReference config configure StatementExpression MethodInvocation argsPanel Cast ReferenceType Arguments MethodInvocation config MethodInvocation getObjectValue MemberReference JavaSampler ARGUMENTS getProperty configure StatementExpression MethodInvocation classnameCombo MethodInvocation config MemberReference JavaSampler CLASSNAME getPropertyAsString setSelectedItem MethodDeclaration Modifier public ReferenceType TestElement createTestElement LocalVariableDeclaration ReferenceType JavaConfig VariableDeclarator config ClassCreator ReferenceType JavaConfig StatementExpression MethodInvocation MemberReference config modifyTestElement ReturnStatement MemberReference config MethodDeclaration Modifier public modifyTestElement FormalParameter ReferenceType TestElement config StatementExpression MethodInvocation MemberReference config configureTestElement StatementExpression Cast ReferenceType JavaConfig MemberReference config IfStatement BinaryOperation != MethodInvocation classnameCombo getSelectedItem Literal null BlockStatement StatementExpression Cast ReferenceType JavaConfig MemberReference config End ReferenceType AbstractConfigGui ReferenceType ActionListener",0
696,696,,1
186,186,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query ClassDeclaration Modifier public /**
 * Implements a query node that defines an OR operation between arbitrary
 * other {@link QueryNode}s.
 */ OrQueryNode ConstructorDeclaration Modifier public /**
     * Creates a new <code>OrQueryNode</code> with a <code>parent</code>
     * query node.
     *
     * @param parent the parent of <code>this</code> <code>OrQueryNode</code>.
     */ OrQueryNode FormalParameter ReferenceType QueryNode parent StatementExpression SuperConstructorInvocation MemberReference parent ConstructorDeclaration Modifier public /**
     * Creates a new <code>OrQueryNode</code> with a <code>parent</code> query
     * node and <code>operands</code> for <code>this</code>
     * <code>OrQueryNode</code>.
     *
     * @param parent   the parent of <code>this</code> <code>OrQueryNode</code>.
     * @param operands the operands for this OR operation.
     */ OrQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter ReferenceType QueryNode operands StatementExpression SuperConstructorInvocation MemberReference parent MemberReference operands MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Object accept FormalParameter ReferenceType QueryNodeVisitor visitor FormalParameter ReferenceType Object data ReturnStatement MethodInvocation visitor This MemberReference data visit MethodDeclaration /**
     * Returns the type of this node.
     *
     * @return the type of this node.
     */ Modifier public BasicType int getType ReturnStatement MemberReference QueryNode TYPE_OR MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType OrQueryNode BlockStatement ReturnStatement SuperMethodInvocation MemberReference obj equals End ReturnStatement Literal false ReferenceType NAryQueryNode",0
873,873,,0
398,398,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr Import org.apache.jackrabbit.JcrConstants Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavLocatorFactory Import org.apache.jackrabbit.webdav.DavResource Import org.apache.jackrabbit.webdav.DavResourceFactory Import org.apache.jackrabbit.webdav.DavResourceLocator Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.MultiStatus Import org.apache.jackrabbit.webdav.MultiStatusResponse Import org.apache.jackrabbit.webdav.property.DavPropertyName Import org.apache.jackrabbit.webdav.property.DavPropertyNameSet Import org.apache.jackrabbit.webdav.property.DavPropertySet Import org.apache.jackrabbit.webdav.property.DefaultDavProperty Import org.apache.jackrabbit.webdav.property.HrefProperty Import org.apache.jackrabbit.webdav.version.LabelInfo Import org.apache.jackrabbit.webdav.version.MergeInfo Import org.apache.jackrabbit.webdav.version.UpdateInfo Import org.apache.jackrabbit.webdav.version.VersionControlledResource Import org.apache.jackrabbit.webdav.version.VersionHistoryResource Import org.apache.jackrabbit.webdav.version.VersionResource Import org.apache.jackrabbit.webdav.version.VersionableResource Import org.apache.jackrabbit.webdav.version.report.ReportType Import org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.log4j.Logger Import org.w3c.dom.Element Import javax.jcr.Item Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.Value Import javax.jcr.ValueFormatException Import javax.jcr.Workspace Import javax.jcr.observation.Event Import javax.jcr.observation.EventIterator Import javax.jcr.observation.EventListener Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory Import java.util.List ClassDeclaration Modifier public /**
 * <code>VersionControlledItemCollection</code> represents a JCR node item and
 * covers all functionality related to versioning of {@link Node}s.
 *
 * @see Node
 */ VersionControlledItemCollection FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType VersionControlledItemCollection getLogger ConstructorDeclaration Modifier public /**
     * Create a new <code>VersionControlledItemCollection</code>.
     *
     * @param locator
     * @param session
     */ VersionControlledItemCollection FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType DavSession session FormalParameter ReferenceType DavResourceFactory factory FormalParameter ReferenceType Item item StatementExpression SuperConstructorInvocation MemberReference locator MemberReference session MemberReference factory MemberReference item IfStatement BinaryOperation && MethodInvocation exists BinaryOperation instanceof MemberReference item ReferenceType Node BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""A collection resource can not be constructed from a Property item."" End MethodDeclaration /**
     * Return a comma separated string listing the supported method names.
     *
     * @return the supported method names.
     * @see org.apache.jackrabbit.webdav.DavResource#getSupportedMethods()
     */ Modifier public ReferenceType String getSupportedMethods LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer SuperMethodInvocation getSupportedMethods StatementExpression MethodInvocation sb MethodInvocation MemberReference VersionableResource METHODS append Literal "", "" append IfStatement This MethodInvocation isVersionControlled BlockStatement TryStatement IfStatement Cast ReferenceType Node MemberReference item BlockStatement StatementExpression MethodInvocation sb MethodInvocation MemberReference VersionControlledResource methods_checkedOut append Literal "", "" append BlockStatement StatementExpression MethodInvocation sb MethodInvocation MemberReference VersionControlledResource methods_checkedIn append Literal "", "" append End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage error End ReturnStatement MethodInvocation sb toString MethodDeclaration /**
     *
     * @param setProperties
     * @param removePropertyNames
     * @throws DavException
     * @see DefaultItemCollection#alterProperties(org.apache.jackrabbit.webdav.property.DavPropertySet, org.apache.jackrabbit.webdav.property.DavPropertyNameSet)
     * for additional description of non-compliant behaviour.
     */ Modifier public ReferenceType MultiStatusResponse alterProperties FormalParameter ReferenceType DavPropertySet setProperties FormalParameter ReferenceType DavPropertyNameSet removePropertyNames DavException StatementExpression MethodInvocation MemberReference setProperties MemberReference removePropertyNames resolveMergeConflict ReturnStatement SuperMethodInvocation MemberReference setProperties MemberReference removePropertyNames alterProperties MethodDeclaration /**
     * Resolve one or multiple merge conflicts present on this resource. Please
     * note that the 'setProperties' or 'removeProperties' set my contain additional
     * resource properties, that need to be changed. Those properties are left
     * untouched, whereas the {@link #AUTO_MERGE_SET DAV:auto-merge-set}, is
     * removed from the list upon successful resolution of a merge conflict.<br>
     * If the removeProperties or setProperties set do not contain the mentioned
     * merge conflict resource properties or if the value of those properties do
     * not allow for a resolution of an existing merge conflict, this method
     * returns silently.
     *
     * @param setProperties
     * @param removePropertyNames
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see Node#doneMerge(Version)
     * @see Node#cancelMerge(Version)
     */ Modifier private resolveMergeConflict FormalParameter ReferenceType DavPropertySet setProperties FormalParameter ReferenceType DavPropertyNameSet removePropertyNames DavException IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End TryStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator n Cast ReferenceType Node MemberReference item IfStatement MethodInvocation removePropertyNames MemberReference AUTO_MERGE_SET contains BlockStatement IfStatement MethodInvocation ! n MemberReference JcrConstants JCR_MERGEFAILED hasProperty BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_CONFLICT Literal ""Attempt to resolve non-existing merge conflicts."" End LocalVariableDeclaration ReferenceType Value VariableDeclarator mergeFailed MethodInvocation n MethodInvocation getValues MemberReference JcrConstants JCR_MERGEFAILED getProperty ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference mergeFailed length MemberReference ++ i BlockStatement StatementExpression MethodInvocation n Cast ReferenceType Version MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i MethodInvocation getString mergeFailed getNodeByUUID getRepositorySession cancelMerge End StatementExpression MethodInvocation removePropertyNames MemberReference AUTO_MERGE_SET remove IfStatement BinaryOperation && MethodInvocation setProperties MemberReference AUTO_MERGE_SET contains MethodInvocation setProperties MemberReference PREDECESSOR_SET contains BlockStatement IfStatement MethodInvocation ! n MemberReference JcrConstants JCR_MERGEFAILED hasProperty BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_CONFLICT Literal ""Attempt to resolve non-existing merge conflicts."" End LocalVariableDeclaration ReferenceType Value VariableDeclarator mergeFailed MethodInvocation n MethodInvocation getValues MemberReference JcrConstants JCR_MERGEFAILED getProperty LocalVariableDeclaration ReferenceType List VariableDeclarator mergeset ClassCreator MethodInvocation getHrefs ReferenceType HrefProperty MethodInvocation setProperties MemberReference AUTO_MERGE_SET get LocalVariableDeclaration ReferenceType List VariableDeclarator predecSet ClassCreator MethodInvocation getHrefs ReferenceType HrefProperty MethodInvocation setProperties MemberReference PREDECESSOR_SET get LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation getRepositorySession ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference mergeFailed length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Version VariableDeclarator version Cast ReferenceType Version MethodInvocation session MemberReference ArraySelector MemberReference i MethodInvocation getString mergeFailed getNodeByUUID LocalVariableDeclaration ReferenceType String VariableDeclarator href MethodInvocation MethodInvocation Literal true getHref MemberReference version getLocatorFromItem IfStatement MethodInvocation ! mergeset MemberReference href contains BlockStatement IfStatement MethodInvocation predecSet MemberReference href contains BlockStatement StatementExpression MethodInvocation n MemberReference version doneMerge BlockStatement StatementExpression MethodInvocation n MemberReference version cancelMerge End End End StatementExpression MethodInvocation setProperties MemberReference AUTO_MERGE_SET remove StatementExpression MethodInvocation setProperties MemberReference PREDECESSOR_SET remove End End CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Adds version control to this resource. If the resource is already under
     * version control, this method has no effect.
     *
     * @throws org.apache.jackrabbit.webdav.DavException if this resource does not
     * exist yet or if an error occurs while making the underlying node versionable.
     * @see org.apache.jackrabbit.webdav.version.VersionableResource#addVersionControl()
     */ Modifier public addVersionControl DavException IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End IfStatement MethodInvocation ! isVersionControlled BlockStatement TryStatement StatementExpression Cast ReferenceType Node MemberReference item StatementExpression MethodInvocation item save CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e End MethodDeclaration /**
     * Calls {@link javax.jcr.Node#checkin()} on the underlying repository node.
     *
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see org.apache.jackrabbit.webdav.version.VersionControlledResource#checkin()
     */ Modifier public ReferenceType String checkin DavException IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End IfStatement MethodInvocation ! isVersionControlled BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_METHOD_NOT_ALLOWED End TryStatement LocalVariableDeclaration ReferenceType Version VariableDeclarator v Cast ReferenceType Node MemberReference item LocalVariableDeclaration ReferenceType String VariableDeclarator versionHref MethodInvocation MethodInvocation Literal true getHref MemberReference v getLocatorFromItem ReturnStatement MemberReference versionHref CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Calls {@link javax.jcr.Node#checkout()} on the underlying repository node.
     *
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see org.apache.jackrabbit.webdav.version.VersionControlledResource#checkout()
     */ Modifier public checkout DavException IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End IfStatement MethodInvocation ! isVersionControlled BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_METHOD_NOT_ALLOWED End TryStatement StatementExpression Cast ReferenceType Node MemberReference item CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Not implemented. Always throws a <code>DavException</code> with error code
     * {@link org.apache.jackrabbit.webdav.DavServletResponse#SC_NOT_IMPLEMENTED}.
     *
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see org.apache.jackrabbit.webdav.version.VersionControlledResource#uncheckout()
     */ Modifier public uncheckout DavException ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_IMPLEMENTED MethodDeclaration /**
     * Perform an update on this resource. Depending on the format of the <code>updateInfo</code>
     * this is translated to one of the following methods defined by the JCR API:
     * <ul>
     * <li>{@link Node#restore(javax.jcr.version.Version, boolean)}</li>
     * <li>{@link Node#restore(javax.jcr.version.Version, String, boolean)}</li>
     * <li>{@link Node#restoreByLabel(String, boolean)}</li>
     * <li>{@link Workspace#restore(javax.jcr.version.Version[], boolean)}</li>
     * <li>{@link Node#update(String)}</li>
     * </ul>
     * </p>
     * Limitation: note that the <code>MultiStatus</code> returned by this method
     * will not list any nodes that have been removed due to an Uuid conflict.
     *
     * @param updateInfo
     * @return
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see org.apache.jackrabbit.webdav.version.VersionControlledResource#update(org.apache.jackrabbit.webdav.version.UpdateInfo)
     */ Modifier public ReferenceType MultiStatus update FormalParameter ReferenceType UpdateInfo updateInfo DavException IfStatement BinaryOperation == MemberReference updateInfo Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""Valid update request body required."" End IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End LocalVariableDeclaration ReferenceType MultiStatus VariableDeclarator ms ClassCreator ReferenceType MultiStatus TryStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator node Cast ReferenceType Node MemberReference item LocalVariableDeclaration ReferenceType Element VariableDeclarator udElem MethodInvocation updateInfo getUpdateElement LocalVariableDeclaration BasicType boolean VariableDeclarator removeExisting MethodInvocation DomUtil MemberReference udElem MemberReference XML_REMOVEEXISTING MemberReference NAMESPACE hasChildElement LocalVariableDeclaration ReferenceType EventListener VariableDeclarator el ClassCreator ReferenceType EListener MethodInvocation updateInfo getPropertyNameSet MemberReference ms StatementExpression MethodInvocation MemberReference el MethodInvocation node getPath registerEventListener IfStatement BinaryOperation != MethodInvocation updateInfo getVersionHref Literal null BlockStatement LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh MethodInvocation node getVersionHistory LocalVariableDeclaration ReferenceType String VariableDeclarator hrefs MethodInvocation updateInfo getVersionHref LocalVariableDeclaration ReferenceType Version VariableDeclarator versions ArrayCreator ReferenceType Version MemberReference hrefs length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference hrefs length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator itemPath MethodInvocation MethodInvocation getJcrPath MemberReference ArraySelector MemberReference i hrefs getLocatorFromHref StatementExpression Assignment MemberReference ArraySelector MemberReference i versions MethodInvocation vh MethodInvocation MemberReference itemPath getItemName getVersion = End IfStatement BinaryOperation == MemberReference versions length Literal 1 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator relPath MethodInvocation DomUtil MemberReference udElem MemberReference XML_RELPATH MemberReference NAMESPACE getChildText IfStatement BinaryOperation == MemberReference relPath Literal null BlockStatement StatementExpression MethodInvocation node MemberReference ArraySelector Literal 0 versions MemberReference removeExisting restore BlockStatement StatementExpression MethodInvocation node MemberReference ArraySelector Literal 0 versions MemberReference relPath MemberReference removeExisting restore End BlockStatement StatementExpression MethodInvocation MethodInvocation getWorkspace MethodInvocation MemberReference versions MemberReference removeExisting restore getRepositorySession End IfStatement BinaryOperation != MethodInvocation updateInfo getLabelName Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator labels MethodInvocation updateInfo getLabelName IfStatement BinaryOperation == MemberReference labels length Literal 1 BlockStatement StatementExpression MethodInvocation node MemberReference ArraySelector Literal 0 labels MemberReference removeExisting restoreByLabel BlockStatement LocalVariableDeclaration ReferenceType Version VariableDeclarator vs ArrayCreator ReferenceType Version MemberReference labels length LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh MethodInvocation node getVersionHistory ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference labels length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i vs MethodInvocation vh MemberReference ArraySelector MemberReference i labels getVersionByLabel = End StatementExpression MethodInvocation MethodInvocation getWorkspace MethodInvocation MemberReference vs MemberReference removeExisting restore getRepositorySession End IfStatement BinaryOperation != MethodInvocation updateInfo getWorkspaceHref Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator workspaceName MethodInvocation MethodInvocation getWorkspaceName MethodInvocation updateInfo getWorkspaceHref getLocatorFromHref StatementExpression MethodInvocation node MemberReference workspaceName update BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""Invalid update request body."" End End End StatementExpression MethodInvocation MemberReference el unregisterEventListener CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e ReturnStatement MemberReference ms MethodDeclaration /**
     * Merge the repository node represented by this resource according to the
     * information present in the given {@link MergeInfo} object.
     *
     * @param mergeInfo
     * @return <code>MultiStatus</code> recording all repository items modified
     * by this merge call as well as the resources that a client must modify to
     * complete the merge (see <a href=""http://www.webdav.org/specs/rfc3253.html#METHOD_MERGE"">RFC 3253</a>)
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see org.apache.jackrabbit.webdav.version.VersionControlledResource#merge(org.apache.jackrabbit.webdav.version.MergeInfo)
     * @see Node#merge(String, boolean)
     */ Modifier public ReferenceType MultiStatus merge FormalParameter ReferenceType MergeInfo mergeInfo DavException IfStatement BinaryOperation == MemberReference mergeInfo Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST End IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End LocalVariableDeclaration ReferenceType MultiStatus VariableDeclarator ms ClassCreator ReferenceType MultiStatus TryStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator node Cast ReferenceType Node MemberReference item LocalVariableDeclaration ReferenceType EventListener VariableDeclarator el ClassCreator ReferenceType EListener MethodInvocation mergeInfo getPropertyNameSet MemberReference ms StatementExpression MethodInvocation MemberReference el MethodInvocation node getPath registerEventListener LocalVariableDeclaration ReferenceType String VariableDeclarator workspaceName MethodInvocation MethodInvocation getWorkspaceName MethodInvocation mergeInfo ArraySelector Literal 0 getSourceHrefs getLocatorFromHref LocalVariableDeclaration ReferenceType NodeIterator VariableDeclarator failed MethodInvocation node MemberReference workspaceName MethodInvocation ! mergeInfo isNoAutoMerge merge StatementExpression MethodInvocation MemberReference el unregisterEventListener WhileStatement MethodInvocation failed hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator failedNode MethodInvocation failed nextNode LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator loc MethodInvocation MemberReference failedNode getLocatorFromItem LocalVariableDeclaration ReferenceType DavResource VariableDeclarator res MethodInvocation MemberReference loc createResourceFromLocator StatementExpression MethodInvocation ms ClassCreator ReferenceType MultiStatusResponse MemberReference res MethodInvocation mergeInfo getPropertyNameSet addResponse End CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e ReturnStatement MemberReference ms MethodDeclaration /**
     * Modify the labels present with the versions of this resource.
     *
     * @param labelInfo
     * @throws DavException
     * @see VersionHistory#addVersionLabel(String, String, boolean)
     * @see VersionHistory#removeVersionLabel(String)
     */ Modifier public label FormalParameter ReferenceType LabelInfo labelInfo DavException IfStatement BinaryOperation == MemberReference labelInfo Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""Valid label request body required."" End IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End TryStatement IfStatement BinaryOperation || MethodInvocation ! isVersionControlled Cast ReferenceType Node MemberReference item BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED Literal ""A LABEL request may only be applied to a version-controlled, checked-in resource."" End LocalVariableDeclaration ReferenceType DavResource VariableDeclarator resArr This MethodInvocation MemberReference CHECKED_IN getReferenceResources IfStatement BinaryOperation && BinaryOperation == MemberReference resArr length Literal 1 BinaryOperation instanceof MemberReference ArraySelector Literal 0 resArr ReferenceType VersionResource BlockStatement StatementExpression Cast ReferenceType VersionResource MemberReference ArraySelector Literal 0 resArr BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_INTERNAL_SERVER_ERROR BinaryOperation + BinaryOperation + Literal ""DAV:checked-in property on '"" MethodInvocation getHref Literal ""' did not point to a single VersionResource."" End CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Returns the {@link VersionHistory} associated with the repository node.
     * If the node is not versionable an exception is thrown.
     *
     * @return the {@link VersionHistoryResource} associated with this resource.
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see org.apache.jackrabbit.webdav.version.VersionControlledResource#getVersionHistory()
     * @see javax.jcr.Node#getVersionHistory()
     */ Modifier public ReferenceType VersionHistoryResource getVersionHistory DavException IfStatement MethodInvocation ! exists BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End TryStatement LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh Cast ReferenceType Node MemberReference item LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator loc MethodInvocation MemberReference vh getLocatorFromItem ReturnStatement Cast ReferenceType VersionHistoryResource MethodInvocation MemberReference loc createResourceFromLocator CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Define the set of reports supported by this resource.
     *
     * @see SupportedReportSetProperty
     */ Modifier protected initSupportedReports StatementExpression SuperMethodInvocation initSupportedReports IfStatement MethodInvocation exists BlockStatement StatementExpression MethodInvocation supportedReports MemberReference ReportType LOCATE_BY_HISTORY addReportType IfStatement This MethodInvocation isVersionControlled BlockStatement StatementExpression MethodInvocation supportedReports MemberReference ReportType VERSION_TREE addReportType End End MethodDeclaration /**
     * Fill the property set for this resource.
     */ Modifier protected initProperties StatementExpression SuperMethodInvocation initProperties IfStatement MethodInvocation exists BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator n Cast ReferenceType Node MemberReference item IfStatement MethodInvocation isVersionControlled BlockStatement TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator vhHref MethodInvocation MethodInvocation Literal true getHref MethodInvocation n getVersionHistory getLocatorFromItem StatementExpression MethodInvocation properties ClassCreator ReferenceType HrefProperty MemberReference VERSION_HISTORY MemberReference vhHref Literal true add StatementExpression MethodInvocation properties ClassCreator ReferenceType DefaultDavProperty MemberReference AUTO_VERSION Literal null Literal false add LocalVariableDeclaration ReferenceType String VariableDeclarator baseVHref MethodInvocation MethodInvocation Literal true getHref MethodInvocation n getBaseVersion getLocatorFromItem IfStatement MethodInvocation n isCheckedOut BlockStatement StatementExpression MethodInvocation properties ClassCreator ReferenceType HrefProperty MemberReference CHECKED_OUT MemberReference baseVHref Literal true add IfStatement MethodInvocation n MemberReference JcrConstants JCR_PREDECESSORS hasProperty BlockStatement LocalVariableDeclaration ReferenceType Value VariableDeclarator predec MethodInvocation n MethodInvocation getValues MemberReference JcrConstants JCR_PREDECESSORS getProperty StatementExpression MethodInvocation MemberReference PREDECESSOR_SET MemberReference predec Literal false addHrefProperty End IfStatement MethodInvocation n MemberReference JcrConstants JCR_MERGEFAILED hasProperty BlockStatement LocalVariableDeclaration ReferenceType Value VariableDeclarator mergeFailed MethodInvocation n MethodInvocation getValues MemberReference JcrConstants JCR_MERGEFAILED getProperty StatementExpression MethodInvocation MemberReference AUTO_MERGE_SET MemberReference mergeFailed Literal false addHrefProperty End BlockStatement StatementExpression MethodInvocation properties ClassCreator ReferenceType HrefProperty MemberReference CHECKED_IN MemberReference baseVHref Literal true add End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage error End End MethodDeclaration /**
     * Add a {@link org.apache.jackrabbit.webdav.property.HrefProperty} with the
     * specified property name and values.
     *
     * @param name
     * @param values Array of {@link Value}s.
     * @param isProtected
     * @throws javax.jcr.ValueFormatException
     * @throws IllegalStateException
     * @throws javax.jcr.RepositoryException
     */ Modifier private addHrefProperty FormalParameter ReferenceType DavPropertyName name FormalParameter ReferenceType Value values FormalParameter BasicType boolean isProtected ValueFormatException IllegalStateException RepositoryException LocalVariableDeclaration ReferenceType Node VariableDeclarator nodes ArrayCreator ReferenceType Node MemberReference values length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i nodes MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i MethodInvocation getString values getNodeByUUID getRepositorySession = End StatementExpression MethodInvocation MemberReference name MemberReference nodes MemberReference isProtected addHrefProperty MethodDeclaration /**
     * @return true, if this resource represents an existing repository node
     * that has the mixin nodetype 'mix:versionable' set.
     */ Modifier private BasicType boolean isVersionControlled LocalVariableDeclaration BasicType boolean VariableDeclarator vc Literal false IfStatement MethodInvocation exists BlockStatement TryStatement StatementExpression Assignment MemberReference vc Cast ReferenceType Node MemberReference item = CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage warn End ReturnStatement MemberReference vc MethodDeclaration /**
     * Build a new locator for the given href.
     * 
     * @param href
     * @return
     */ Modifier private ReferenceType DavResourceLocator getLocatorFromHref FormalParameter ReferenceType String href LocalVariableDeclaration ReferenceType DavLocatorFactory VariableDeclarator f MethodInvocation MethodInvocation getFactory getLocator LocalVariableDeclaration ReferenceType String VariableDeclarator prefix MethodInvocation MethodInvocation getPrefix getLocator ReturnStatement MethodInvocation f MemberReference prefix MemberReference href createResourceLocator MethodDeclaration /**
     * Register the specified event listener with the observation manager present
     * the repository session.
     *
     * @param listener
     * @param nodePath
     * @throws javax.jcr.RepositoryException
     */ Modifier private registerEventListener FormalParameter ReferenceType EventListener listener FormalParameter ReferenceType String nodePath RepositoryException StatementExpression MethodInvocation MethodInvocation getWorkspace MethodInvocation getObservationManager MethodInvocation MemberReference listener MemberReference EListener ALL_EVENTS MemberReference nodePath Literal true Literal null Literal null Literal false addEventListener getRepositorySession MethodDeclaration /**
     * Unregister the specified event listener with the observation manager present
     * the repository session.
     *
     * @param listener
     * @throws javax.jcr.RepositoryException
     */ Modifier private unregisterEventListener FormalParameter ReferenceType EventListener listener RepositoryException StatementExpression MethodInvocation MethodInvocation getWorkspace MethodInvocation getObservationManager MethodInvocation MemberReference listener removeEventListener getRepositorySession ClassDeclaration Modifier private /**
     * Simple EventListener that creates a new {@link org.apache.jackrabbit.webdav.MultiStatusResponse} object
     * for each event and adds it to the specified {@link org.apache.jackrabbit.webdav.MultiStatus}.
     */ EListener FieldDeclaration Modifier private final static BasicType int VariableDeclarator ALL_EVENTS BinaryOperation | BinaryOperation | BinaryOperation | BinaryOperation | MemberReference Event NODE_ADDED MemberReference Event NODE_REMOVED MemberReference Event PROPERTY_ADDED MemberReference Event PROPERTY_CHANGED MemberReference Event PROPERTY_REMOVED FieldDeclaration Modifier private final ReferenceType DavPropertyNameSet VariableDeclarator propNameSet FieldDeclaration Modifier private ReferenceType MultiStatus VariableDeclarator ms ConstructorDeclaration Modifier private EListener FormalParameter ReferenceType DavPropertyNameSet propNameSet FormalParameter ReferenceType MultiStatus ms StatementExpression Assignment This MemberReference propNameSet MemberReference propNameSet = StatementExpression Assignment This MemberReference ms MemberReference ms = MethodDeclaration /**
         * @see EventListener#onEvent(javax.jcr.observation.EventIterator)
         */ Modifier public onEvent FormalParameter ReferenceType EventIterator events WhileStatement MethodInvocation events hasNext BlockStatement TryStatement LocalVariableDeclaration ReferenceType Event VariableDeclarator e MethodInvocation events nextEvent LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator loc MethodInvocation MethodInvocation e getPath getLocatorFromItemPath LocalVariableDeclaration ReferenceType DavResource VariableDeclarator res MethodInvocation MemberReference loc createResourceFromLocator StatementExpression MethodInvocation ms ClassCreator ReferenceType MultiStatusResponse MemberReference res MemberReference propNameSet addResponse CatchClause CatchClauseParameter DavException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Error while building MultiStatusResponse from Event: "" MethodInvocation e getMessage error CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Error while building MultiStatusResponse from Event: "" MethodInvocation e getMessage error End ReferenceType EventListener ReferenceType DefaultItemCollection ReferenceType VersionControlledResource",1
520,520,"CompilationUnit PackageDeclaration org.apache.jackrabbit.net Import java.net.MalformedURLException Import java.net.URL Import javax.jcr.Session ClassDeclaration Modifier public final /**
 * The <code>URLFactory</code> class provides factory methods for creating
 * JCR Repository and JCRJar URLs.
 * <p>
 * This class is not intended to be subclassed or instantiated by clients.
 *
 * @author Felix Meschberger
 * @version $Rev:$, $Date:$
 */ URLFactory FieldDeclaration /**
     * The scheme for JCR Repository URLs (value is ""jcr"").
     */ Modifier public final static ReferenceType String VariableDeclarator REPOSITORY_SCHEME Literal ""jcr"" FieldDeclaration /**
     * The scheme for JCRJar URLs (value is ""jar"").
     */ Modifier public final static ReferenceType String VariableDeclarator REPOSITORY_JAR_SCHEME Literal ""jar"" ConstructorDeclaration Modifier private /** Private default constructor, not to be instantiated */ URLFactory MethodDeclaration /**
     * Creates a new JCR Repository URL for the given session and item path.
     *
     * @param session The repository session providing access to the item.
     * @param path The absolute path to the item. This must be an absolute
     *      path with a leading slash character. If this is <code>null</code>
     *      the root node path - <code>/</code> - is assumed.
     *
     * @return The JCR Repository URL
     *
     * @throws MalformedURLException If an error occurrs creating the
     *      <code>URL</code> instance.
     */ Modifier public static ReferenceType URL createURL FormalParameter ReferenceType Session session FormalParameter ReferenceType String path MalformedURLException ReturnStatement ClassCreator ReferenceType URL MemberReference REPOSITORY_SCHEME Literal """" Literal - 1 ClassCreator MethodInvocation toString ReferenceType FileParts MemberReference session MemberReference path Literal null ClassCreator ReferenceType JCRURLHandler MemberReference session MethodDeclaration /**
     * Creates a new JCRJar URL for the given session, archive and entry.
     *
     * @param session The repository session providing access to the archive.
     * @param path The absolute path to the archive. This must either be the
     *      property containing the archive or an item which resolves to such
     *      a property through its primary item chain. This must be an absolute
     *      path with a leading slash character. If this is <code>null</code>
     *      the root node path - <code>/</code> - is assumed.
     * @param entry The entry within the archive. If <code>null</code>, the URL
     *      provides access to the archive itself.
     *
     * @return The JCRJar URL
     *
     * @throws MalformedURLException If an error occurrs creating the
     *      <code>URL</code> instance.
     */ Modifier public static ReferenceType URL createJarURL FormalParameter ReferenceType Session session FormalParameter ReferenceType String path FormalParameter ReferenceType String entry MalformedURLException LocalVariableDeclaration ReferenceType JCRJarURLHandler VariableDeclarator handler ClassCreator ReferenceType JCRJarURLHandler MemberReference session LocalVariableDeclaration ReferenceType String VariableDeclarator file MethodInvocation MethodInvocation toExternalForm MemberReference session MemberReference path createURL IfStatement BinaryOperation != MemberReference entry Literal null BlockStatement StatementExpression Assignment MemberReference file BinaryOperation + Literal ""!/"" MemberReference entry += End ReturnStatement ClassCreator ReferenceType URL MemberReference REPOSITORY_JAR_SCHEME Literal """" Literal - 1 MemberReference file MemberReference handler",0
360,360,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav Import org.apache.jackrabbit.webdav.observation.ObservationDavServletResponse InterfaceDeclaration Modifier public /**
 * The empty <code>WebdavResponse</code> interface collects the functionality
 * defined by {@link org.apache.jackrabbit.webdav.DavServletResponse} encapsulting
 * for the core WebDAV specification (RFC 2518) as well as the various extensions
 * used for observation and transaction support, ordering of collections, search
 * and versioning.
 */ WebdavResponse ReferenceType DavServletResponse ReferenceType ObservationDavServletResponse",1
879,879,,0
871,871,,0
260,260,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import org.apache.jackrabbit.core.ItemLifeCycleListener Import org.apache.jackrabbit.core.ItemManager Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.state.NodeState Import javax.jcr.RepositoryException Import javax.jcr.InvalidItemStateException Import javax.jcr.nodetype.NodeDefinition ClassDeclaration Modifier public /**
 * Implementation of a {@link javax.jcr.version.VersionHistory} that works in an
 * XA environment.
 */ XAVersionHistory FieldDeclaration /**
     * Internal version history. Gets fetched again from the version manager if
     * needed.
     */ Modifier private ReferenceType InternalVersionHistory VariableDeclarator history FieldDeclaration /**
     * XA Version manager.
     */ Modifier private final ReferenceType XAVersionManager VariableDeclarator vMgr ConstructorDeclaration Modifier public /**
     * Create a new instance of this class.
     * @param itemMgr item manager
     * @param session session
     * @param id node id
     * @param state node state
     * @param definition node definition
     * @param listeners life cycle listeners
     * @param history internal version history
     */ XAVersionHistory FormalParameter ReferenceType ItemManager itemMgr FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType NodeId id FormalParameter ReferenceType NodeState state FormalParameter ReferenceType NodeDefinition definition FormalParameter ReferenceType ItemLifeCycleListener listeners FormalParameter ReferenceType InternalVersionHistory history StatementExpression SuperConstructorInvocation MemberReference itemMgr MemberReference session MemberReference id MemberReference state MemberReference definition MemberReference listeners StatementExpression Assignment This MemberReference history MemberReference history = StatementExpression Assignment This MemberReference vMgr Cast ReferenceType XAVersionManager MethodInvocation session getVersionManager = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected ReferenceType InternalVersionHistory getInternalVersionHistory RepositoryException StatementExpression MethodInvocation ensureUpToDate StatementExpression MethodInvocation sanityCheck ReturnStatement MemberReference history MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected sanityCheck RepositoryException StatementExpression SuperMethodInvocation sanityCheck IfStatement BinaryOperation == MemberReference history Literal null BlockStatement ThrowStatement ClassCreator ReferenceType InvalidItemStateException BinaryOperation + MemberReference id Literal "": the item does not exist anymore"" End MethodDeclaration /**
     * Ensure the internal version is up-to-date.
     */ Modifier private synchronized ensureUpToDate RepositoryException IfStatement BinaryOperation != MemberReference history Literal null BlockStatement IfStatement MethodInvocation vMgr Cast ReferenceType InternalVersionHistoryImpl MemberReference history differentXAEnv BlockStatement StatementExpression Assignment MemberReference history MethodInvocation vMgr MethodInvocation history getId getVersionHistory = End End ReferenceType AbstractVersionHistory",1
87,87,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.IndexReader Import org.apache.lucene.search.Explanation Import org.apache.lucene.search.Query Import org.apache.lucene.search.Scorer Import org.apache.lucene.search.Searcher Import org.apache.lucene.search.Similarity Import org.apache.lucene.search.Weight Import java.io.IOException ClassDeclaration /**
 * Implements a query that negates documents of a context query. Documents
 * that matched the context query will not match the <code>NotQuery</code> and
 * Documents that did not match the context query will be selected by this
 * <code>NotQuery</code>.
 */ NotQuery FieldDeclaration /**
     * The context query to invert.
     */ Modifier private final ReferenceType Query VariableDeclarator context FieldDeclaration /**
     * The context scorer to invert.
     */ Modifier private ReferenceType Scorer VariableDeclarator contextScorer ConstructorDeclaration /**
     * Creates a new <code>NotQuery</code>.
     * @param context the context query.
     */ NotQuery FormalParameter ReferenceType Query context StatementExpression Assignment This MemberReference context MemberReference context = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected ReferenceType Weight createWeight FormalParameter ReferenceType Searcher searcher ReturnStatement ClassCreator ReferenceType NotQueryWeight MemberReference searcher MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String toString FormalParameter ReferenceType String field ReturnStatement Literal ""NotQuery"" ClassDeclaration Modifier private /**
     * Implements a weight for this <code>NotQuery</code>.
     */ NotQueryWeight FieldDeclaration /**
         * The searcher to access the index.
         */ Modifier private final ReferenceType Searcher VariableDeclarator searcher ConstructorDeclaration /**
         * Creates a new NotQueryWeight with a searcher.
         * @param searcher the searcher.
         */ NotQueryWeight FormalParameter ReferenceType Searcher searcher StatementExpression Assignment This MemberReference searcher MemberReference searcher = MethodDeclaration /**
         * @inheritDoc
         */ Modifier public ReferenceType Query getQuery ReturnStatement This NotQuery MethodDeclaration /**
         * @inheritDoc
         */ Modifier public BasicType float getValue ReturnStatement Literal 1.0f MethodDeclaration /**
         * @inheritDoc
         */ Modifier public BasicType float sumOfSquaredWeights IOException ReturnStatement Literal 1.0f MethodDeclaration /**
         * @inheritDoc
         */ Modifier public normalize FormalParameter BasicType float norm MethodDeclaration /**
         * @inheritDoc
         */ Modifier public ReferenceType Scorer scorer FormalParameter ReferenceType IndexReader reader IOException StatementExpression Assignment MemberReference contextScorer MethodInvocation context MethodInvocation MemberReference reader scorer MemberReference searcher weight = ReturnStatement ClassCreator ReferenceType NotQueryScorer MemberReference reader MethodDeclaration /**
         * @throws UnsupportedOperationException always
         */ Modifier public ReferenceType Explanation explain FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int doc IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType Weight ClassDeclaration Modifier private /**
     * Implements a scorer that inverts the document matches of the context
     * scorer.
     */ NotQueryScorer FieldDeclaration /**
         * The index reader.
         */ Modifier private final ReferenceType IndexReader VariableDeclarator reader FieldDeclaration /**
         * Current document number.
         */ Modifier private BasicType int VariableDeclarator docNo Literal - 1 FieldDeclaration /**
         * Current document number of the context scorer;
         */ Modifier private BasicType int VariableDeclarator contextNo Literal - 1 ConstructorDeclaration /**
         * Creates a new scorer
         * @param reader
         */ NotQueryScorer FormalParameter ReferenceType IndexReader reader StatementExpression SuperConstructorInvocation MethodInvocation Similarity getDefault StatementExpression Assignment This MemberReference reader MemberReference reader = MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean next IOException IfStatement BinaryOperation == MemberReference docNo Literal - 1 BlockStatement IfStatement MethodInvocation contextScorer next BlockStatement StatementExpression Assignment MemberReference contextNo MethodInvocation contextScorer doc = End End DoStatement BinaryOperation && MethodInvocation reader MemberReference docNo isDeleted BinaryOperation < MemberReference docNo MethodInvocation reader maxDoc BlockStatement StatementExpression MemberReference ++ docNo End WhileStatement BinaryOperation && BinaryOperation != MemberReference contextNo Literal - 1 BinaryOperation == MemberReference contextNo MemberReference docNo BlockStatement StatementExpression MemberReference ++ docNo IfStatement MethodInvocation contextScorer next BlockStatement StatementExpression Assignment MemberReference contextNo MethodInvocation contextScorer doc = BlockStatement StatementExpression Assignment MemberReference contextNo Literal - 1 = End End ReturnStatement BinaryOperation < MemberReference docNo MethodInvocation reader maxDoc MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType int doc ReturnStatement MemberReference docNo MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType float score IOException ReturnStatement Literal 1.0f MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean skipTo FormalParameter BasicType int target IOException IfStatement BinaryOperation && BinaryOperation != MemberReference contextNo Literal - 1 BinaryOperation < MemberReference contextNo MemberReference target BlockStatement IfStatement MethodInvocation contextScorer MemberReference target skipTo BlockStatement StatementExpression Assignment MemberReference contextNo MethodInvocation contextScorer doc = BlockStatement StatementExpression Assignment MemberReference contextNo Literal - 1 = End End StatementExpression Assignment MemberReference docNo BinaryOperation - MemberReference target Literal 1 = ReturnStatement MethodInvocation next MethodDeclaration /**
         * @throws UnsupportedOperationException always
         */ Modifier public ReferenceType Explanation explain FormalParameter BasicType int doc IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType Scorer ReferenceType Query",0
661,661,,0
708,708,,1
571,571,,1
651,651,,0
727,727,,1
668,668,,0
755,755,,0
223,223,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.security Import org.apache.jackrabbit.core.HierarchyManager Import org.apache.jackrabbit.core.fs.FileSystem Import javax.security.auth.Subject Import java.io.File ClassDeclaration Modifier public /**
 * An <code>AMContext</code> is used to provide context information for an
 * <code>AccessManager</code>.
 *
 * @see AccessManager#init(AMContext)
 */ AMContext FieldDeclaration /**
     * the physcial home dir
     */ Modifier private final ReferenceType File VariableDeclarator physicalHomeDir FieldDeclaration /**
     * the virtual jackrabbit filesystem
     */ Modifier private final ReferenceType FileSystem VariableDeclarator fs FieldDeclaration /**
     * Subject whose access rights the access manager should reflect
     */ Modifier private final ReferenceType Subject VariableDeclarator subject FieldDeclaration /**
     * hierarchy manager for resolving ItemId-to-Path mapping
     */ Modifier private final ReferenceType HierarchyManager VariableDeclarator hierMgr FieldDeclaration /**
     * name of the workspace
     */ Modifier private final ReferenceType String VariableDeclarator workspaceName ConstructorDeclaration Modifier public /**
     * Creates a new <code>AMContext</code>.
     *
     * @param homeDir the physical home directory
     * @param fs      the virtual jackrabbit filesystem
     * @param subject subject whose access rights should be reflected
     * @param hierMgr hierarchy manager
     * @param hierMgr workspace name
     */ AMContext FormalParameter ReferenceType File homeDir FormalParameter ReferenceType FileSystem fs FormalParameter ReferenceType Subject subject FormalParameter ReferenceType HierarchyManager hierMgr FormalParameter ReferenceType String workspaceName StatementExpression Assignment This MemberReference physicalHomeDir MemberReference homeDir = StatementExpression Assignment This MemberReference fs MemberReference fs = StatementExpression Assignment This MemberReference subject MemberReference subject = StatementExpression Assignment This MemberReference hierMgr MemberReference hierMgr = StatementExpression Assignment This MemberReference workspaceName MemberReference workspaceName = MethodDeclaration /**
     * Returns the physical home directory
     *
     * @return the physical home directory
     */ Modifier public ReferenceType File getHomeDir ReturnStatement MemberReference physicalHomeDir MethodDeclaration /**
     * Returns the virtual filesystem
     *
     * @return the virtual filesystem
     */ Modifier public ReferenceType FileSystem getFileSystem ReturnStatement MemberReference fs MethodDeclaration /**
     * Returns the subject
     *
     * @return the subject
     */ Modifier public ReferenceType Subject getSubject ReturnStatement MemberReference subject MethodDeclaration /**
     * Returns the hierarchy manager
     *
     * @return the hierarchy manager
     */ Modifier public ReferenceType HierarchyManager getHierarchyManager ReturnStatement MemberReference hierMgr MethodDeclaration /**
     * Returns the name of the workspace.
     *
     * @return the name of the workspace
     */ Modifier public ReferenceType String getWorkspaceName ReturnStatement MemberReference workspaceName",0
213,213,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.rmi.RemoteException Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.UnsupportedRepositoryOperationException Import javax.jcr.version.Version Import javax.jcr.version.VersionException Import javax.jcr.version.VersionHistory Import javax.jcr.version.VersionIterator Import org.apache.jackrabbit.rmi.remote.RemoteVersionHistory ClassDeclaration Modifier public /**
 * Local adapter for the JCR-RMI
 * {@link org.apache.jackrabbit.rmi.remote.RemoteVersionHistory RemoteVersionHistory}
 * interface. This class makes a remote version history locally available using
 * the JCR {@link javax.jcr.version.VersionHistory VersionHistory} interface.
 *
 * @author Felix Meschberger
 * @see javax.jcr.version.VersionHistory
 * @see org.apache.jackrabbit.rmi.remote.RemoteVersionHistory
 */ ClientVersionHistory FieldDeclaration /** The adapted remote version history. */ Modifier private ReferenceType RemoteVersionHistory VariableDeclarator remote ConstructorDeclaration Modifier public /**
     * Creates a local adapter for the given remote version history.
     *
     * @param session current session
     * @param remote  remote version history
     * @param factory local adapter factory
     */ ClientVersionHistory FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteVersionHistory remote FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference session MemberReference remote MemberReference factory StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Version getRootVersion RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation getSession MethodInvocation remote getRootVersion getVersion getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType VersionIterator getAllVersions RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation getSession MethodInvocation remote getAllVersions getVersionIterator getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Version getVersion FormalParameter ReferenceType String versionName VersionException RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation getSession MethodInvocation remote MemberReference versionName getVersion getVersion getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Version getVersionByLabel FormalParameter ReferenceType String label RepositoryException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation getSession MethodInvocation remote MemberReference label getVersionByLabel getVersion getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public addVersionLabel FormalParameter ReferenceType String versionName FormalParameter ReferenceType String label FormalParameter BasicType boolean moveLabel VersionException RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference versionName MemberReference label MemberReference moveLabel addVersionLabel CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public removeVersionLabel FormalParameter ReferenceType String label VersionException RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference label removeVersionLabel CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean hasVersionLabel FormalParameter ReferenceType String label RepositoryException TryStatement ReturnStatement MethodInvocation remote MemberReference label hasVersionLabel CatchClause CatchClauseParameter RemoteException ex ReturnStatement Literal false MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean hasVersionLabel FormalParameter ReferenceType Version version FormalParameter ReferenceType String label VersionException RepositoryException TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator versionUUID MethodInvocation version getUUID ReturnStatement MethodInvocation remote MemberReference versionUUID MemberReference label hasVersionLabel CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getVersionLabels RepositoryException TryStatement ReturnStatement MethodInvocation remote getVersionLabels CatchClause CatchClauseParameter RemoteException ex ReturnStatement ArrayCreator ReferenceType String Literal 0 MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getVersionLabels FormalParameter ReferenceType Version version VersionException RepositoryException TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator versionUUID MethodInvocation version getUUID ReturnStatement MethodInvocation remote MemberReference versionUUID getVersionLabels CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public removeVersion FormalParameter ReferenceType String versionName UnsupportedRepositoryOperationException VersionException RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference versionName removeVersion CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getVersionableUUID RepositoryException TryStatement ReturnStatement MethodInvocation remote getVersionableUUID CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex ReferenceType ClientNode ReferenceType VersionHistory",1
242,242,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import javax.jcr.Credentials Import javax.jcr.Repository Import javax.jcr.RepositoryException Import javax.jcr.Session Import org.apache.jackrabbit.rmi.remote.RemoteRepository Import org.apache.jackrabbit.rmi.remote.RemoteSession ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link javax.jcr.Repository Repository}
 * interface. This class makes a local repository available as an RMI service
 * using the
 * {@link org.apache.jackrabbit.rmi.remote.RemoteRepository RemoteRepository}
 * interface.
 *
 * @author Jukka Zitting
 * @see javax.jcr.Repository
 * @see org.apache.jackrabbit.rmi.remote.RemoteRepository
 */ ServerRepository FieldDeclaration /** The adapted local repository. */ Modifier private ReferenceType Repository VariableDeclarator repository ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local repository.
     *
     * @param repository local repository
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerRepository FormalParameter ReferenceType Repository repository FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference repository MemberReference repository = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getDescriptor FormalParameter ReferenceType String name RemoteException ReturnStatement MethodInvocation repository MemberReference name getDescriptor MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getDescriptorKeys RemoteException ReturnStatement MethodInvocation repository getDescriptorKeys MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteSession login RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation repository login ReturnStatement MethodInvocation MethodInvocation MemberReference session getRemoteSession getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteSession login FormalParameter ReferenceType String workspace RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation repository MemberReference workspace login ReturnStatement MethodInvocation MethodInvocation MemberReference session getRemoteSession getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteSession login FormalParameter ReferenceType Credentials credentials RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation repository MemberReference credentials login ReturnStatement MethodInvocation MethodInvocation MemberReference session getRemoteSession getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteSession login FormalParameter ReferenceType Credentials credentials FormalParameter ReferenceType String workspace RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation repository MemberReference credentials MemberReference workspace login ReturnStatement MethodInvocation MethodInvocation MemberReference session getRemoteSession getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException ReferenceType ServerObject ReferenceType RemoteRepository",1
266,266,"CompilationUnit PackageDeclaration org.apache.jackrabbit.value Import org.apache.jackrabbit.util.ISO8601 Import javax.jcr.RepositoryException Import javax.jcr.Value Import javax.jcr.ValueFormatException Import java.io.ByteArrayInputStream Import java.io.InputStream Import java.io.UnsupportedEncodingException Import java.util.Calendar ClassDeclaration Modifier public abstract /**
 * This class is the superclass of the type-specific
 * classes implementing the <code>Value</code> interfaces.
 *
 * @see javax.jcr.Value
 * @see StringValue
 * @see LongValue
 * @see DoubleValue
 * @see BooleanValue
 * @see DateValue
 * @see BinaryValue
 * @see NameValue
 * @see PathValue
 * @see ReferenceValue
 */ BaseValue FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_ENCODING Literal ""UTF-8"" FieldDeclaration Modifier private final static BasicType short VariableDeclarator STATE_UNDEFINED Literal 0 FieldDeclaration Modifier private final static BasicType short VariableDeclarator STATE_VALUE_CONSUMED Literal 1 FieldDeclaration Modifier private final static BasicType short VariableDeclarator STATE_STREAM_CONSUMED Literal 2 FieldDeclaration Modifier private BasicType short VariableDeclarator state MemberReference STATE_UNDEFINED FieldDeclaration Modifier final protected BasicType int VariableDeclarator type FieldDeclaration Modifier protected ReferenceType InputStream VariableDeclarator stream Literal null ConstructorDeclaration /**
     * Package-private default constructor.
     *
     * @param type The type of this value.
     */ BaseValue FormalParameter BasicType int type StatementExpression Assignment This MemberReference type MemberReference type = MethodDeclaration /**
     * Checks if the non-stream value of this instance has already been
     * consumed (if any getter methods except <code>{@link #getStream()}</code> and
     * <code>{@link #getType()}</code> have been previously called at least once) and
     * sets the state to <code>STATE_STREAM_CONSUMED</code>.
     *
     * @throws IllegalStateException if any getter methods other than
     *                               <code>getStream()</code> and
     *                               <code>getType()</code> have been
     *                               previously called at least once.
     */ Modifier protected setStreamConsumed IllegalStateException IfStatement BinaryOperation == MemberReference state MemberReference STATE_VALUE_CONSUMED BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""non-stream value has already been consumed"" End StatementExpression Assignment MemberReference state MemberReference STATE_STREAM_CONSUMED = MethodDeclaration /**
     * Checks if the stream value of this instance has already been
     * consumed (if {@link #getStream()} has been previously called
     * at least once) and sets the state to <code>STATE_VALUE_CONSUMED</code>.
     *
     * @throws IllegalStateException if <code>getStream()</code> has been
     *                               previously called at least once.
     */ Modifier protected setValueConsumed IllegalStateException IfStatement BinaryOperation == MemberReference state MemberReference STATE_STREAM_CONSUMED BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""stream value has already been consumed"" End StatementExpression Assignment MemberReference state MemberReference STATE_VALUE_CONSUMED = MethodDeclaration /**
     * Returns the internal string representation of this value without modifying
     * the value state.
     *
     * @return the internal string representation
     * @throws javax.jcr.ValueFormatException if the value can not be represented as a
     *                              <code>String</code> or if the value is
     *                              <code>null</code>.
     * @throws javax.jcr.RepositoryException  if another error occurs.
     */ Modifier protected abstract ReferenceType String getInternalString ValueFormatException RepositoryException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int getType ReturnStatement MemberReference type MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Calendar getDate ValueFormatException IllegalStateException RepositoryException StatementExpression MethodInvocation setValueConsumed LocalVariableDeclaration ReferenceType Calendar VariableDeclarator cal MethodInvocation ISO8601 MethodInvocation getInternalString parse IfStatement BinaryOperation == MemberReference cal Literal null BlockStatement ThrowStatement ClassCreator ReferenceType ValueFormatException Literal ""not a valid date format"" BlockStatement ReturnStatement MemberReference cal End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType long getLong ValueFormatException IllegalStateException RepositoryException StatementExpression MethodInvocation setValueConsumed TryStatement ReturnStatement MethodInvocation Long MethodInvocation getInternalString parseLong CatchClause CatchClauseParameter NumberFormatException e ThrowStatement ClassCreator ReferenceType ValueFormatException Literal ""conversion to long failed"" MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean getBoolean ValueFormatException IllegalStateException RepositoryException StatementExpression MethodInvocation setValueConsumed ReturnStatement MethodInvocation Boolean MethodInvocation booleanValue MethodInvocation getInternalString valueOf MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType double getDouble ValueFormatException IllegalStateException RepositoryException StatementExpression MethodInvocation setValueConsumed TryStatement ReturnStatement MethodInvocation Double MethodInvocation getInternalString parseDouble CatchClause CatchClauseParameter NumberFormatException e ThrowStatement ClassCreator ReferenceType ValueFormatException Literal ""conversion to double failed"" MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType InputStream getStream IllegalStateException RepositoryException StatementExpression MethodInvocation setStreamConsumed IfStatement BinaryOperation != MemberReference stream Literal null BlockStatement ReturnStatement MemberReference stream End TryStatement StatementExpression Assignment MemberReference stream ClassCreator ReferenceType ByteArrayInputStream MethodInvocation MethodInvocation MemberReference DEFAULT_ENCODING getBytes getInternalString = ReturnStatement MemberReference stream CatchClause CatchClauseParameter UnsupportedEncodingException e ThrowStatement ClassCreator ReferenceType RepositoryException BinaryOperation + MemberReference DEFAULT_ENCODING Literal "" not supported on this platform"" MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getString ValueFormatException IllegalStateException RepositoryException StatementExpression MethodInvocation setValueConsumed ReturnStatement MethodInvocation getInternalString ReferenceType Value",1
649,649,,1
794,794,,1
638,638,,1
233,233,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.Term Import org.apache.lucene.index.IndexReader Import org.apache.commons.collections.Buffer Import org.apache.commons.collections.BufferUtils Import org.apache.commons.collections.buffer.UnboundedFifoBuffer Import org.apache.log4j.Logger Import java.util.List Import java.util.Collections Import java.util.ArrayList Import java.util.Iterator Import java.io.IOException Import EDU.oswego.cs.dl.util.concurrent.Sync Import EDU.oswego.cs.dl.util.concurrent.Mutex ClassDeclaration /**
 * Merges indexes in a separate deamon thread.
 */ IndexMerger FieldDeclaration /**
     * Logger instance for this class.
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType IndexMerger getLogger FieldDeclaration /**
     * Marker task to signal the background thread to quit.
     */ Modifier private final static ReferenceType Merge VariableDeclarator QUIT ClassCreator ReferenceType Merge ArrayCreator ReferenceType Index Literal 0 FieldDeclaration /**
     * minMergeDocs config parameter.
     */ Modifier private BasicType int VariableDeclarator minMergeDocs MemberReference SearchIndex DEFAULT_MIN_MERGE_DOCS FieldDeclaration /**
     * maxMergeDocs config parameter
     */ Modifier private BasicType int VariableDeclarator maxMergeDocs MemberReference SearchIndex DEFAULT_MAX_MERGE_DOCS FieldDeclaration /**
     * mergeFactor config parameter
     */ Modifier private BasicType int VariableDeclarator mergeFactor MemberReference SearchIndex DEFAULT_MERGE_FACTOR FieldDeclaration /**
     * Queue of merge Tasks
     */ Modifier private final ReferenceType Buffer VariableDeclarator mergeTasks MethodInvocation BufferUtils ClassCreator ReferenceType UnboundedFifoBuffer blockingBuffer FieldDeclaration /**
     * List of id <code>Term</code> that identify documents that were deleted
     * while a merge was running.
     */ Modifier private final ReferenceType List VariableDeclarator deletedDocuments MethodInvocation Collections ClassCreator ReferenceType ArrayList synchronizedList FieldDeclaration /**
     * List of <code>IndexBucket</code>s in ascending document limit.
     */ Modifier private final ReferenceType List VariableDeclarator indexBuckets ClassCreator ReferenceType ArrayList FieldDeclaration /**
     * The <code>MultiIndex</code> this index merger is working on.
     */ Modifier private final ReferenceType MultiIndex VariableDeclarator multiIndex FieldDeclaration /**
     * Monitor object to synchronize merge calculation.
     */ Modifier private final ReferenceType Object VariableDeclarator lock ClassCreator ReferenceType Object FieldDeclaration /**
     * Mutex that is acquired when replacing indexes on MultiIndex.
     */ Modifier private final ReferenceType Sync VariableDeclarator indexReplacement ClassCreator ReferenceType Mutex ConstructorDeclaration /**
     * Creates an <code>IndexMerger</code>.
     *
     * @param multiIndex the <code>MultiIndex</code>.
     */ IndexMerger FormalParameter ReferenceType MultiIndex multiIndex StatementExpression Assignment This MemberReference multiIndex MemberReference multiIndex = StatementExpression MethodInvocation Literal ""IndexMerger"" setName StatementExpression MethodInvocation Literal true setDaemon MethodDeclaration /**
     * Informs the index merger that an index was added / created.
     *
     * @param name the name of the index.
     * @param numDocs the number of documents it contains.
     */ indexAdded FormalParameter ReferenceType String name FormalParameter BasicType int numDocs IfStatement BinaryOperation < MemberReference numDocs Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""numDocs must be positive"" End SynchronizedStatement MemberReference lock IfStatement BinaryOperation == MethodInvocation indexBuckets size Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator lower Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator upper MemberReference minMergeDocs WhileStatement BinaryOperation < MemberReference upper MemberReference maxMergeDocs BlockStatement StatementExpression MethodInvocation indexBuckets ClassCreator ReferenceType IndexBucket MemberReference lower MemberReference upper Literal true add StatementExpression Assignment MemberReference lower BinaryOperation + MemberReference upper Literal 1 = StatementExpression Assignment MemberReference upper MemberReference mergeFactor *= End StatementExpression MethodInvocation indexBuckets ClassCreator ReferenceType IndexBucket MemberReference lower MemberReference maxMergeDocs Literal false add StatementExpression MethodInvocation indexBuckets ClassCreator ReferenceType IndexBucket BinaryOperation + MemberReference maxMergeDocs Literal 1 MemberReference Integer MAX_VALUE Literal false add End LocalVariableDeclaration ReferenceType IndexBucket VariableDeclarator bucket Cast ReferenceType IndexBucket MethodInvocation indexBuckets BinaryOperation - MethodInvocation indexBuckets size Literal 1 get ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation indexBuckets size MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference bucket Cast ReferenceType IndexBucket MethodInvocation indexBuckets MemberReference i get = IfStatement MethodInvocation bucket MemberReference numDocs fits BlockStatement BreakStatement End End StatementExpression MethodInvocation bucket ClassCreator ReferenceType Index MemberReference name MemberReference numDocs add IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""index added: name="" MemberReference name Literal "", numDocs="" MemberReference numDocs debug End IfStatement MethodInvocation ! bucket allowsMerge BlockStatement ReturnStatement End IfStatement BinaryOperation >= MethodInvocation bucket size MemberReference mergeFactor BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator targetMergeDocs MemberReference bucket upper StatementExpression Assignment MemberReference targetMergeDocs MethodInvocation Math BinaryOperation * MemberReference targetMergeDocs MemberReference mergeFactor MemberReference maxMergeDocs min = LocalVariableDeclaration ReferenceType List VariableDeclarator indexesToMerge ClassCreator ReferenceType ArrayList LocalVariableDeclaration BasicType int VariableDeclarator mergeDocs Literal 0 ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation bucket iterator BinaryOperation && MethodInvocation it hasNext BinaryOperation <= MemberReference mergeDocs MemberReference targetMergeDocs BlockStatement StatementExpression MethodInvocation indexesToMerge MethodInvocation it next add End IfStatement BinaryOperation > MethodInvocation indexesToMerge size Literal 2 BlockStatement LocalVariableDeclaration ReferenceType Index VariableDeclarator idxs Cast ReferenceType Index MethodInvocation indexesToMerge ArrayCreator ReferenceType Index MethodInvocation indexesToMerge size toArray StatementExpression MethodInvocation bucket MemberReference indexesToMerge removeAll IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""requesting merge for "" MemberReference indexesToMerge debug End StatementExpression MethodInvocation mergeTasks ClassCreator ReferenceType Merge MemberReference idxs add StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""merge queue now contains "" MethodInvocation mergeTasks size Literal "" tasks."" debug End End MethodDeclaration /**
     * @inheritDoc
     */ Modifier public documentDeleted FormalParameter ReferenceType Term id StatementExpression MethodInvocation log BinaryOperation + Literal ""document deleted: "" MethodInvocation id text debug StatementExpression MethodInvocation deletedDocuments MemberReference id add MethodDeclaration /**
     * Signals this <code>IndexMerger</code> to stop and waits until it
     * has terminated.
     */ dispose StatementExpression MethodInvocation log Literal ""dispose IndexMerger"" debug TryStatement StatementExpression MethodInvocation indexReplacement acquire CatchClause CatchClauseParameter InterruptedException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Interrupted while acquiring index replacement sync: "" MemberReference e warn StatementExpression MethodInvocation mergeTasks clear StatementExpression MethodInvocation mergeTasks MemberReference QUIT add StatementExpression MethodInvocation log Literal ""quit sent"" debug TryStatement StatementExpression This MethodInvocation Literal 500 join IfStatement MethodInvocation isAlive BlockStatement StatementExpression MethodInvocation log Literal ""Unable to stop IndexMerger. Deamon is busy."" info BlockStatement StatementExpression MethodInvocation log Literal ""IndexMerger thread stopped"" debug End StatementExpression MethodInvocation log BinaryOperation + Literal ""merge queue size: "" MethodInvocation mergeTasks size debug CatchClause CatchClauseParameter InterruptedException e StatementExpression MethodInvocation log Literal ""Interrupted while waiting for IndexMerger thread to terminate."" warn MethodDeclaration /**
     * Implements the index merging.
     */ Modifier public run ForStatement ForControl BlockStatement LocalVariableDeclaration ReferenceType Merge VariableDeclarator task Cast ReferenceType Merge MethodInvocation mergeTasks remove IfStatement BinaryOperation == MemberReference task MemberReference QUIT BlockStatement BreakStatement End StatementExpression MethodInvocation log Literal ""accepted merge request"" debug StatementExpression MethodInvocation deletedDocuments clear LocalVariableDeclaration ReferenceType String VariableDeclarator names ArrayCreator ReferenceType String MemberReference task.indexes length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference task.indexes length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i names MemberReference task ArraySelector MemberReference i MemberReference name indexes = End TryStatement StatementExpression MethodInvocation log Literal ""create new index"" debug LocalVariableDeclaration ReferenceType PersistentIndex VariableDeclarator index MethodInvocation multiIndex Literal null Literal true getOrCreateIndex LocalVariableDeclaration BasicType boolean VariableDeclarator success Literal false TryStatement StatementExpression MethodInvocation log Literal ""get index readers from MultiIndex"" debug LocalVariableDeclaration ReferenceType IndexReader VariableDeclarator readers MethodInvocation multiIndex MemberReference names This getIndexReaders TryStatement LocalVariableDeclaration BasicType long VariableDeclarator time MethodInvocation System currentTimeMillis StatementExpression MethodInvocation index MemberReference readers addIndexes StatementExpression Assignment MemberReference time BinaryOperation - MethodInvocation System currentTimeMillis MemberReference time = LocalVariableDeclaration BasicType int VariableDeclarator docCount Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference readers length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference docCount MemberReference ArraySelector MemberReference i MethodInvocation numDocs readers += End StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""merged "" MemberReference docCount Literal "" documents in "" MemberReference time Literal "" ms into "" MethodInvocation index getName Literal ""."" info ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference readers length MemberReference ++ i BlockStatement TryStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation close readers CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to close IndexReader: "" MemberReference e warn End IfStatement MethodInvocation ! indexReplacement Literal 0 attempt BlockStatement StatementExpression MethodInvocation log Literal ""index merging canceled"" debug BreakStatement End TryStatement StatementExpression MethodInvocation log Literal ""replace indexes"" debug StatementExpression MethodInvocation multiIndex MemberReference names MemberReference index MemberReference deletedDocuments replaceIndexes StatementExpression MethodInvocation indexReplacement release StatementExpression Assignment MemberReference success Literal true = IfStatement MemberReference ! success BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""deleting index "" MethodInvocation index getName debug StatementExpression MethodInvocation multiIndex MemberReference index deleteIndex End CatchClause CatchClauseParameter Throwable e StatementExpression MethodInvocation log BinaryOperation + Literal ""Error while merging indexes: "" MemberReference e error End StatementExpression MethodInvocation log Literal ""IndexMerger terminated"" info MethodDeclaration /**
     * The merge factor.
     */ Modifier public setMergeFactor FormalParameter BasicType int mergeFactor StatementExpression Assignment This MemberReference mergeFactor MemberReference mergeFactor = MethodDeclaration /**
     * The initial threshold for number of documents to merge to a new index.
     */ Modifier public setMinMergeDocs FormalParameter BasicType int minMergeDocs StatementExpression Assignment This MemberReference minMergeDocs MemberReference minMergeDocs = MethodDeclaration /**
     * The maximum number of document to merge.
     */ Modifier public setMaxMergeDocs FormalParameter BasicType int maxMergeDocs StatementExpression Assignment This MemberReference maxMergeDocs MemberReference maxMergeDocs = ClassDeclaration Modifier private final static /**
     * Implements a simple struct that holds the name of an index and how
     * many document it contains. <code>Index</code> is comparable using the
     * number of documents it contains.
     */ Index FieldDeclaration /**
         * The name of the index.
         */ Modifier final ReferenceType String VariableDeclarator name FieldDeclaration /**
         * The number of documents the index contains.
         */ Modifier final BasicType int VariableDeclarator numDocs ConstructorDeclaration /**
         * Creates a new index struct.
         *
         * @param name name of an index.
         * @param numDocs number of documents it contains.
         */ Index FormalParameter ReferenceType String name FormalParameter BasicType int numDocs StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment This MemberReference numDocs MemberReference numDocs = MethodDeclaration /**
         * Indexes are first ordered by {@link #numDocs} and then by {@link
         * #name}.
         *
         * @param o the other <code>Index</code>.
         * @return a negative integer, zero, or a positive integer as this
         *         Index is less than, equal to, or greater than the specified
         *         Index.
         */ Modifier public BasicType int compareTo FormalParameter ReferenceType Object o LocalVariableDeclaration ReferenceType Index VariableDeclarator other Cast ReferenceType Index MemberReference o LocalVariableDeclaration BasicType int VariableDeclarator val TernaryExpression BinaryOperation < MemberReference numDocs MemberReference other numDocs Literal - 1 TernaryExpression BinaryOperation == MemberReference numDocs MemberReference other numDocs Literal 0 Literal 1 IfStatement BinaryOperation != MemberReference val Literal 0 BlockStatement ReturnStatement MemberReference val BlockStatement ReturnStatement MethodInvocation name MemberReference other name compareTo End MethodDeclaration /**
         * @inheritDoc
         */ Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + MemberReference name Literal "":"" MemberReference numDocs ReferenceType Comparable ClassDeclaration Modifier private final static /**
     * Defines a merge task, to merge a couple of indexes into a new index.
     */ Merge FieldDeclaration Modifier final ReferenceType Index VariableDeclarator indexes ConstructorDeclaration /**
         * Merge task, to merge <code>indexes</code> into a new index with
         * <code>name</code>.
         *
         * @param indexes the indexes to merge.
         */ Merge FormalParameter ReferenceType Index indexes StatementExpression Assignment This MemberReference indexes ArrayCreator ReferenceType Index MemberReference indexes length = StatementExpression MethodInvocation System MemberReference indexes Literal 0 This MemberReference indexes Literal 0 MemberReference indexes length arraycopy ClassDeclaration Modifier private final static /**
     * Implements a <code>List</code> with a document limit value. An
     * <code>IndexBucket</code> contains {@link Index}es with documents less
     * or equal the document limit of the bucket.
     */ IndexBucket FieldDeclaration /**
         * The lower document limit.
         */ Modifier private final BasicType int VariableDeclarator lower FieldDeclaration /**
         * The upper document limit.
         */ Modifier private final BasicType int VariableDeclarator upper FieldDeclaration /**
         * Flag indicating if indexes in this bucket can be merged.
         */ Modifier private final BasicType boolean VariableDeclarator allowMerge ConstructorDeclaration /**
         * Creates a new <code>IndexBucket</code>. Limits are both inclusive.
         *
         * @param lower document limit.
         * @param upper document limit.
         * @param allowMerge if indexes in this bucket can be merged.
         */ IndexBucket FormalParameter BasicType int lower FormalParameter BasicType int upper FormalParameter BasicType boolean allowMerge StatementExpression Assignment This MemberReference lower MemberReference lower = StatementExpression Assignment This MemberReference upper MemberReference upper = StatementExpression Assignment This MemberReference allowMerge MemberReference allowMerge = MethodDeclaration /**
         * Returns <code>true</code> if the number of documents fit in this
         * <code>IndexBucket</code>; otherwise <code>false</code>
         *
         * @param numDocs the number of documents.
         * @return <code>true</code> if <code>numDocs</code> fit.
         */ BasicType boolean fits FormalParameter BasicType int numDocs ReturnStatement BinaryOperation && BinaryOperation >= MemberReference numDocs MemberReference lower BinaryOperation <= MemberReference numDocs MemberReference upper MethodDeclaration /**
         * Returns <code>true</code> if indexes in this bucket can be merged.
         *
         * @return <code>true</code> if indexes in this bucket can be merged.
         */ BasicType boolean allowsMerge ReturnStatement MemberReference allowMerge ReferenceType ArrayList ReferenceType Thread ReferenceType IndexListener",1
281,281,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav InterfaceDeclaration Modifier public /**
 * <code>DavResourceFactory</code> interface defines a single method for creating
 * {@link DavResource} objects.
 */ DavResourceFactory MethodDeclaration /**
     * Create a {@link DavResource} object from the given locator, request and response
     * objects.
     *
     * @param locator locator of the resource
     * @param request
     * @param response
     * @return a new <code>DavResource</code> object.
     * @throws DavException
     */ Modifier public ReferenceType DavResource createResource FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType DavServletRequest request FormalParameter ReferenceType DavServletResponse response DavException MethodDeclaration /**
     * Create a new {@link DavResource} object from the given locator and session.
     *
     * @param locator
     * @param session
     * @return a new <code>DavResource</code> object. 
     * @throws DavException
     */ Modifier public ReferenceType DavResource createResource FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType DavSession session DavException",1
419,419,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import org.apache.jackrabbit.command.CommandException ClassDeclaration Modifier public /**
 * Exception thrown by Info Commands
 */ JcrInfoCommandException FieldDeclaration /**
     * Comment for <code>serialVersionUID</code>
     */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 3257854259679866933L ConstructorDeclaration Modifier public /**
     * @param message
     *        the message
     */ JcrInfoCommandException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ConstructorDeclaration Modifier public /**
     * @param message
     *        the message
     * @param arguments
     *        the arguments
     */ JcrInfoCommandException FormalParameter ReferenceType String message FormalParameter ReferenceType Object arguments StatementExpression SuperConstructorInvocation MemberReference message MemberReference arguments ConstructorDeclaration Modifier public /**
     * @param message
     *        the message
     * @param cause
     *        the cause
     */ JcrInfoCommandException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable cause StatementExpression SuperConstructorInvocation MemberReference message MemberReference cause ConstructorDeclaration Modifier public /**
     * @param message
     *        the message
     * @param cause
     *        the cause
     * @param arguments
     *        the arguments
     */ JcrInfoCommandException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable cause FormalParameter ReferenceType Object arguments StatementExpression SuperConstructorInvocation MemberReference message MemberReference cause MemberReference arguments ReferenceType CommandException",0
293,293,"CompilationUnit PackageDeclaration org.apache.jackrabbit.decorator Import org.apache.jackrabbit.decorator.DecoratorFactory Import org.apache.jackrabbit.decorator.DecoratingNodeIterator Import javax.jcr.query.QueryResult Import javax.jcr.query.RowIterator Import javax.jcr.RepositoryException Import javax.jcr.NodeIterator Import javax.jcr.Session ClassDeclaration Modifier public /**
 */ QueryResultDecorator FieldDeclaration Modifier final protected ReferenceType QueryResult VariableDeclarator result ConstructorDeclaration Modifier public QueryResultDecorator FormalParameter ReferenceType DecoratorFactory factory FormalParameter ReferenceType Session session FormalParameter ReferenceType QueryResult result StatementExpression SuperConstructorInvocation MemberReference factory MemberReference session StatementExpression Assignment This MemberReference result MemberReference result = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType String getColumnNames RepositoryException ReturnStatement MethodInvocation result getColumnNames MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType RowIterator getRows RepositoryException ReturnStatement MethodInvocation result getRows MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType NodeIterator getNodes RepositoryException LocalVariableDeclaration ReferenceType NodeIterator VariableDeclarator nodes MethodInvocation result getNodes ReturnStatement ClassCreator ReferenceType DecoratingNodeIterator MemberReference factory MemberReference session MemberReference nodes ReferenceType AbstractDecorator ReferenceType QueryResult",1
432,432,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.transaction Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavResource Import org.apache.jackrabbit.webdav.DavResourceLocator Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.WebdavResponse Import org.apache.jackrabbit.webdav.jcr.JcrDavException Import org.apache.jackrabbit.webdav.lock.ActiveLock Import org.apache.jackrabbit.webdav.lock.LockInfo Import org.apache.jackrabbit.webdav.lock.LockManager Import org.apache.jackrabbit.webdav.lock.Scope Import org.apache.jackrabbit.webdav.lock.Type Import org.apache.jackrabbit.webdav.transaction.TransactionConstants Import org.apache.jackrabbit.webdav.transaction.TransactionInfo Import org.apache.jackrabbit.webdav.transaction.TransactionResource Import org.apache.jackrabbit.webdav.transaction.TxActiveLock Import org.apache.jackrabbit.webdav.transaction.TxLockManager Import org.apache.jackrabbit.util.Text Import org.apache.log4j.Logger Import javax.jcr.RepositoryException Import javax.jcr.Item Import javax.jcr.PathNotFoundException Import javax.transaction.xa.XAException Import javax.transaction.xa.XAResource Import javax.transaction.xa.Xid Import java.util.HashMap Import java.util.Iterator ClassDeclaration Modifier public /**
 * <code>TxLockManagerImpl</code> manages locks with locktype
 * '{@link TransactionConstants#TRANSACTION dcr:transaction}'.
 * <p/>
 * todo: removing all expired locks
 * todo: 'local' and 'global' are not accurate terms in the given context > replace
 * todo: the usage of the 'global' transaction is not according to the JTA specification,
 * which explicitely requires any transaction present on a servlet to be completed before
 * the service method returns. Starting/completing transactions on the session object,
 * which is possible with the jackrabbit implementation is a hack.
 * todo: review of this transaction part is therefore required. Is there a use-case
 * for those 'global' transactions at all...
 */ TxLockManagerImpl FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType TxLockManagerImpl getLogger FieldDeclaration Modifier private ReferenceType TransactionMap VariableDeclarator map ClassCreator ReferenceType TransactionMap MethodDeclaration /**
     * Create a new lock.
     *
     * @param lockInfo as present in the request body.
     * @param resource
     * @return the lock
     * @throws DavException             if the lock could not be obtained.
     * @throws IllegalArgumentException if the resource is <code>null</code> or
     *                                  does not implement {@link TransactionResource} interface.
     * @see LockManager#createLock(org.apache.jackrabbit.webdav.lock.LockInfo, org.apache.jackrabbit.webdav.DavResource)
     */ Modifier public ReferenceType ActiveLock createLock FormalParameter ReferenceType LockInfo lockInfo FormalParameter ReferenceType DavResource resource DavException IfStatement BinaryOperation || BinaryOperation == MemberReference resource Literal null BinaryOperation instanceof MemberReference resource ReferenceType TransactionResource BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Invalid resource"" End ReturnStatement MethodInvocation MemberReference lockInfo Cast ReferenceType TransactionResource MemberReference resource createLock MethodDeclaration /**
     * Create a new lock.
     *
     * @param lockInfo
     * @param resource
     * @return the lock
     * @throws DavException if the request lock has the wrong lock type or if
     *                      the lock could not be obtained for any reason.
     */ Modifier private synchronized ReferenceType ActiveLock createLock FormalParameter ReferenceType LockInfo lockInfo FormalParameter ReferenceType TransactionResource resource DavException IfStatement BinaryOperation || MethodInvocation ! lockInfo isDeep MethodInvocation ! TransactionConstants.TRANSACTION MethodInvocation lockInfo getType equals BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED End LocalVariableDeclaration ReferenceType ActiveLock VariableDeclarator existing MethodInvocation MethodInvocation lockInfo getType MethodInvocation lockInfo getScope MemberReference resource getLock IfStatement BinaryOperation != MemberReference existing Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_LOCKED End LocalVariableDeclaration ReferenceType Transaction VariableDeclarator tx MethodInvocation MethodInvocation resource getLocator MemberReference lockInfo createTransaction StatementExpression MethodInvocation tx MemberReference resource start StatementExpression MethodInvocation MemberReference tx MethodInvocation MemberReference resource getMap MemberReference resource addReferences ReturnStatement MethodInvocation tx getLock MethodDeclaration /**
     * Build the transaction object associated by the lock.
     *
     * @param locator
     * @param lockInfo
     * @return
     */ Modifier private ReferenceType Transaction createTransaction FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType LockInfo lockInfo IfStatement MethodInvocation TransactionConstants.GLOBAL MethodInvocation lockInfo getScope equals BlockStatement ReturnStatement ClassCreator ReferenceType GlobalTransaction MemberReference locator ClassCreator ReferenceType TxActiveLock MemberReference lockInfo BlockStatement ReturnStatement ClassCreator ReferenceType LocalTransaction MemberReference locator ClassCreator ReferenceType TxActiveLock MemberReference lockInfo End MethodDeclaration /**
     * Refresh the lock indentified by the given lock token.
     *
     * @param lockInfo
     * @param lockToken
     * @param resource
     * @return the lock
     * @throws DavException
     * @throws IllegalArgumentException if the resource is <code>null</code> or
     *                                  does not implement {@link TransactionResource} interface.
     * @see LockManager#refreshLock(org.apache.jackrabbit.webdav.lock.LockInfo, String, org.apache.jackrabbit.webdav.DavResource)
     */ Modifier public ReferenceType ActiveLock refreshLock FormalParameter ReferenceType LockInfo lockInfo FormalParameter ReferenceType String lockToken FormalParameter ReferenceType DavResource resource DavException IfStatement BinaryOperation || BinaryOperation == MemberReference resource Literal null BinaryOperation instanceof MemberReference resource ReferenceType TransactionResource BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Invalid resource"" End ReturnStatement MethodInvocation MemberReference lockInfo MemberReference lockToken Cast ReferenceType TransactionResource MemberReference resource refreshLock MethodDeclaration /**
     * Reset the timeout of the lock identified by the given lock token.
     *
     * @param lockInfo
     * @param lockToken
     * @param resource
     * @return
     * @throws DavException if the lockdid not exist or is expired.
     */ Modifier private synchronized ReferenceType ActiveLock refreshLock FormalParameter ReferenceType LockInfo lockInfo FormalParameter ReferenceType String lockToken FormalParameter ReferenceType TransactionResource resource DavException LocalVariableDeclaration ReferenceType TransactionMap VariableDeclarator responsibleMap MethodInvocation MemberReference resource getMap LocalVariableDeclaration ReferenceType Transaction VariableDeclarator tx MethodInvocation responsibleMap MemberReference lockToken get IfStatement BinaryOperation == MemberReference tx Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED BinaryOperation + BinaryOperation + Literal ""No valid transaction lock found for resource '"" MethodInvocation resource getResourcePath Literal ""'"" IfStatement MethodInvocation tx MethodInvocation isExpired getLock BlockStatement StatementExpression MethodInvocation MemberReference tx MemberReference responsibleMap MemberReference resource removeExpired ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED BinaryOperation + BinaryOperation + Literal ""Transaction lock for resource '"" MethodInvocation resource getResourcePath Literal ""' was already expired."" BlockStatement StatementExpression MethodInvocation tx MethodInvocation MethodInvocation lockInfo getTimeout setTimeout getLock End End ReturnStatement MethodInvocation tx getLock MethodDeclaration /**
     * Throws UnsupportedOperationException.
     *
     * @param lockToken
     * @param resource
     * @throws DavException
     * @see LockManager#releaseLock(String, org.apache.jackrabbit.webdav.DavResource)
     */ Modifier public releaseLock FormalParameter ReferenceType String lockToken FormalParameter ReferenceType DavResource resource DavException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""A transaction lock can only be release with a TransactionInfo object and a lock token."" MethodDeclaration /**
     * Release the lock identified by the given lock token.
     *
     * @param lockInfo
     * @param lockToken
     * @param resource
     * @throws DavException
     */ Modifier public synchronized releaseLock FormalParameter ReferenceType TransactionInfo lockInfo FormalParameter ReferenceType String lockToken FormalParameter ReferenceType TransactionResource resource DavException IfStatement BinaryOperation == MemberReference resource Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Resource must not be null."" End LocalVariableDeclaration ReferenceType TransactionMap VariableDeclarator responsibleMap MethodInvocation MemberReference resource getMap LocalVariableDeclaration ReferenceType Transaction VariableDeclarator tx MethodInvocation responsibleMap MemberReference lockToken get IfStatement BinaryOperation == MemberReference tx Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED BinaryOperation + BinaryOperation + Literal ""No transaction lock found for resource '"" MethodInvocation resource getResourcePath Literal ""'"" IfStatement MethodInvocation tx MethodInvocation isExpired getLock BlockStatement StatementExpression MethodInvocation MemberReference tx MemberReference responsibleMap MemberReference resource removeExpired ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED BinaryOperation + BinaryOperation + Literal ""Transaction lock for resource '"" MethodInvocation resource getResourcePath Literal ""' was already expired."" BlockStatement IfStatement MethodInvocation lockInfo isCommit BlockStatement StatementExpression MethodInvocation tx MemberReference resource commit BlockStatement StatementExpression MethodInvocation tx MemberReference resource rollback End StatementExpression MethodInvocation MemberReference tx MemberReference responsibleMap MemberReference resource removeReferences End End MethodDeclaration /**
     * Always returns null
     *
     * @param type
     * @param scope
     * @param resource
     * @return null
     * @see #getLock(Type, Scope, TransactionResource)
     * @see LockManager#getLock(org.apache.jackrabbit.webdav.lock.Type, org.apache.jackrabbit.webdav.lock.Scope, org.apache.jackrabbit.webdav.DavResource)
     */ Modifier public ReferenceType ActiveLock getLock FormalParameter ReferenceType Type type FormalParameter ReferenceType Scope scope FormalParameter ReferenceType DavResource resource ReturnStatement Literal null MethodDeclaration /**
     * Return the lock applied to the given resource or <code>null</code>
     *
     * @param type
     * @param scope
     * @param resource
     * @return lock applied to the given resource or <code>null</code>
     * @see LockManager#getLock(Type, Scope, DavResource)
     *      todo: is it correct to return one that specific lock, the current session is token-holder of?
     */ Modifier public ReferenceType ActiveLock getLock FormalParameter ReferenceType Type type FormalParameter ReferenceType Scope scope FormalParameter ReferenceType TransactionResource resource LocalVariableDeclaration ReferenceType ActiveLock VariableDeclarator lock Literal null IfStatement MethodInvocation TransactionConstants.TRANSACTION MemberReference type equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator sessionTokens MethodInvocation resource MethodInvocation getRepositorySession MethodInvocation getLockTokens getSession LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 WhileStatement BinaryOperation && BinaryOperation == MemberReference lock Literal null BinaryOperation < MemberReference i MemberReference sessionTokens length BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator lockToken MemberReference ArraySelector MemberReference i sessionTokens StatementExpression Assignment MemberReference lock MethodInvocation MemberReference lockToken MemberReference scope MemberReference resource getLock = StatementExpression MemberReference ++ i End End ReturnStatement MemberReference lock MethodDeclaration /**
     * @param lockToken
     * @param resource
     * @return
     */ Modifier private ReferenceType ActiveLock getLock FormalParameter ReferenceType String lockToken FormalParameter ReferenceType Scope scope FormalParameter ReferenceType DavResource resource IfStatement BinaryOperation instanceof MemberReference resource ReferenceType TransactionResource BlockStatement StatementExpression MethodInvocation log Literal """" info ReturnStatement Literal null End LocalVariableDeclaration ReferenceType ActiveLock VariableDeclarator lock Literal null LocalVariableDeclaration ReferenceType Transaction VariableDeclarator tx Literal null LocalVariableDeclaration ReferenceType TransactionMap VariableDeclarator m MemberReference map IfStatement MethodInvocation m MemberReference lockToken containsKey BlockStatement StatementExpression Assignment MemberReference tx MethodInvocation m MemberReference lockToken get = BlockStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation m MethodInvocation iterator values WhileStatement BinaryOperation && MethodInvocation it hasNext BinaryOperation == MemberReference tx Literal null BlockStatement LocalVariableDeclaration ReferenceType Transaction VariableDeclarator txMap Cast ReferenceType Transaction MethodInvocation it next IfStatement MethodInvocation ! txMap isLocal BlockStatement StatementExpression Assignment MemberReference m Cast ReferenceType TransactionMap MemberReference txMap = IfStatement MethodInvocation m MemberReference lockToken containsKey BlockStatement StatementExpression Assignment MemberReference tx Cast ReferenceType TransactionMap MemberReference txMap = End End End End IfStatement BinaryOperation != MemberReference tx Literal null BlockStatement IfStatement MethodInvocation tx MethodInvocation isExpired getLock BlockStatement StatementExpression MethodInvocation MemberReference tx MemberReference m Cast ReferenceType TransactionResource MemberReference resource removeExpired IfStatement BinaryOperation && MethodInvocation tx MemberReference resource appliesToResource BinaryOperation || BinaryOperation == MemberReference scope Literal null MethodInvocation tx MethodInvocation getScope MethodInvocation MemberReference scope equals getLock BlockStatement StatementExpression Assignment MemberReference lock MethodInvocation tx getLock = End End End ReturnStatement MemberReference lock MethodDeclaration /**
     * Returns true if the given lock token belongs to a lock that applies to
     * the given resource, false otherwise. The token may either be retrieved
     * from the {@link DavConstants#HEADER_LOCK_TOKEN Lock-Token header} or
     * from the {@link TransactionConstants#HEADER_TRANSACTIONID TransactionId header}.
     *
     * @param token
     * @param resource
     * @return
     * @see LockManager#hasLock(String token, DavResource resource)
     */ Modifier public BasicType boolean hasLock FormalParameter ReferenceType String token FormalParameter ReferenceType DavResource resource ReturnStatement BinaryOperation != MethodInvocation MemberReference token Literal null MemberReference resource getLock Literal null MethodDeclaration /**
     * Return the map that may contain a transaction lock for the given resource.
     * In case the resource provides a transactionId, the map must be a
     * repository transaction that is identified by the given id and which in
     * turn can act as map.
     *
     * @param resource
     * @return responsible map.
     * @throws DavException if no map could be retrieved.
     */ Modifier private ReferenceType TransactionMap getMap FormalParameter ReferenceType TransactionResource resource DavException LocalVariableDeclaration ReferenceType String VariableDeclarator txKey MethodInvocation resource getTransactionId IfStatement BinaryOperation == MemberReference txKey Literal null BlockStatement ReturnStatement MemberReference map BlockStatement IfStatement MethodInvocation ! map MemberReference txKey containsKey BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Transaction map '"" MemberReference map Literal "" does not contain a transaction with TransactionId '"" MemberReference txKey Literal ""'."" End LocalVariableDeclaration ReferenceType Transaction VariableDeclarator tx MethodInvocation map MemberReference txKey get IfStatement MethodInvocation tx isLocal BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED BinaryOperation + BinaryOperation + Literal ""TransactionId '"" MemberReference txKey Literal ""' points to a local transaction, that cannot act as transaction map"" IfStatement BinaryOperation && BinaryOperation != MethodInvocation tx getLock Literal null MethodInvocation tx MethodInvocation isExpired getLock BlockStatement StatementExpression MethodInvocation MemberReference tx MemberReference map MemberReference resource removeExpired ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_PRECONDITION_FAILED Literal ""Attempt to retrieve an expired global transaction."" End End ReturnStatement Cast ReferenceType TransactionMap MemberReference tx End MethodDeclaration /**
     * Rollbacks the specified transaction and releases the lock. This includes
     * the removal of all references.
     *
     * @param tx
     * @param responsibleMap
     * @param resource
     */ Modifier private static removeExpired FormalParameter ReferenceType Transaction tx FormalParameter ReferenceType TransactionMap responsibleMap FormalParameter ReferenceType TransactionResource resource StatementExpression MethodInvocation log BinaryOperation + Literal ""Removing expired transaction lock "" MemberReference tx info TryStatement StatementExpression MethodInvocation tx MemberReference resource rollback StatementExpression MethodInvocation MemberReference tx MemberReference responsibleMap MemberReference resource removeReferences CatchClause CatchClauseParameter DavException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Error while removing expired transaction lock: "" MethodInvocation e getMessage error MethodDeclaration /**
     * Create the required references to the new transaction specified by tx.
     *
     * @param tx
     * @param responsibleMap
     * @param resource
     * @throws DavException
     */ Modifier private static addReferences FormalParameter ReferenceType Transaction tx FormalParameter ReferenceType TransactionMap responsibleMap FormalParameter ReferenceType TransactionResource resource DavException StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Adding transactionId '"" MethodInvocation tx getId Literal ""' as session lock token."" info StatementExpression MethodInvocation resource MethodInvocation getRepositorySession MethodInvocation MethodInvocation tx getId addLockToken getSession StatementExpression MethodInvocation responsibleMap MethodInvocation tx getId MemberReference tx put StatementExpression MethodInvocation resource MethodInvocation MethodInvocation tx getId addReference getSession MethodDeclaration /**
     * Remove all references to the specified transaction.
     *
     * @param tx
     * @param responsibleMap
     * @param resource
     */ Modifier private static removeReferences FormalParameter ReferenceType Transaction tx FormalParameter ReferenceType TransactionMap responsibleMap FormalParameter ReferenceType TransactionResource resource StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Removing transactionId '"" MethodInvocation tx getId Literal ""' from session lock tokens."" info StatementExpression MethodInvocation resource MethodInvocation getRepositorySession MethodInvocation MethodInvocation tx getId removeLockToken getSession StatementExpression MethodInvocation responsibleMap MethodInvocation tx getId remove StatementExpression MethodInvocation resource MethodInvocation MethodInvocation tx getId removeReference getSession InterfaceDeclaration Modifier private /**
     * Internal <code>Transaction</code> interface
     */ Transaction MethodDeclaration ReferenceType TxActiveLock getLock MethodDeclaration /**
         * @return the id of this transaction.
         */ ReferenceType String getId MethodDeclaration /**
         * @return path of the lock holding resource
         */ ReferenceType String getResourcePath MethodDeclaration /**
         * @param resource
         * @return true if the lock defined by this transaction applies to the
         *         given resource, either due to the resource holding that lock or due
         *         to a deep lock hold by any ancestor resource.
         */ BasicType boolean appliesToResource FormalParameter ReferenceType DavResource resource MethodDeclaration /**
         * @return true if this transaction is used to allow for transient changes
         *         on the underlying repository, that may be persisted with the final
         *         UNLOCK request only.
         */ BasicType boolean isLocal MethodDeclaration /**
         * Start this transaction.
         *
         * @param resource
         * @throws DavException if an error occurs.
         */ start FormalParameter ReferenceType TransactionResource resource DavException MethodDeclaration /**
         * Commit this transaction
         *
         * @param resource
         * @throws DavException if an error occurs.
         */ commit FormalParameter ReferenceType TransactionResource resource DavException MethodDeclaration /**
         * Rollback this transaction.
         *
         * @param resource
         * @throws DavException if an error occurs.
         */ rollback FormalParameter ReferenceType TransactionResource resource DavException ClassDeclaration Modifier private static abstract /**
     * Abstract transaction covering functionally to both implementations.
     */ AbstractTransaction FieldDeclaration Modifier private final ReferenceType DavResourceLocator VariableDeclarator locator FieldDeclaration Modifier private final ReferenceType TxActiveLock VariableDeclarator lock ConstructorDeclaration Modifier private AbstractTransaction FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType TxActiveLock lock StatementExpression Assignment This MemberReference locator MemberReference locator = StatementExpression Assignment This MemberReference lock MemberReference lock = MethodDeclaration /**
         * @see #getLock()
         */ Modifier public ReferenceType TxActiveLock getLock ReturnStatement MemberReference lock MethodDeclaration /**
         * @see #getId()
         */ Modifier public ReferenceType String getId ReturnStatement MethodInvocation lock getToken MethodDeclaration /**
         * @see #getResourcePath()
         */ Modifier public ReferenceType String getResourcePath ReturnStatement MethodInvocation locator getResourcePath MethodDeclaration /**
         * @see #appliesToResource(DavResource)
         */ Modifier public BasicType boolean appliesToResource FormalParameter ReferenceType DavResource resource IfStatement MethodInvocation locator MethodInvocation resource getLocator isSameWorkspace BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator lockResourcePath MethodInvocation getResourcePath LocalVariableDeclaration ReferenceType String VariableDeclarator resPath MethodInvocation resource getResourcePath WhileStatement Literal ! MethodInvocation MemberReference resPath equals """" BlockStatement IfStatement MethodInvocation lockResourcePath MemberReference resPath equals BlockStatement ReturnStatement Literal true End StatementExpression Assignment MemberReference resPath MethodInvocation Text MemberReference resPath Literal 1 getRelativeParent = End End ReturnStatement Literal false ReferenceType TransactionMap ReferenceType Transaction ClassDeclaration Modifier private final static /**
     *
     */ LocalTransaction ConstructorDeclaration Modifier private LocalTransaction FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType TxActiveLock lock StatementExpression SuperConstructorInvocation MemberReference locator MemberReference lock MethodDeclaration Modifier public BasicType boolean isLocal ReturnStatement Literal true MethodDeclaration Modifier public start FormalParameter ReferenceType TransactionResource resource DavException TryStatement IfStatement MethodInvocation ! resource MethodInvocation getRepositorySession MethodInvocation MethodInvocation getResourcePath itemExists getSession BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_CONFLICT BinaryOperation + Literal ""Unable to start local transaction: no repository item present at "" MethodInvocation getResourcePath End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unexpected error: "" MethodInvocation e getMessage error ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration Modifier public commit FormalParameter ReferenceType TransactionResource resource DavException TryStatement StatementExpression MethodInvocation MethodInvocation save MemberReference resource getItem CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration Modifier public rollback FormalParameter ReferenceType TransactionResource resource DavException TryStatement StatementExpression MethodInvocation MethodInvocation Literal false refresh MemberReference resource getItem CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration Modifier private ReferenceType Item getItem FormalParameter ReferenceType TransactionResource resource PathNotFoundException RepositoryException LocalVariableDeclaration ReferenceType DavSession VariableDeclarator session MethodInvocation resource getSession LocalVariableDeclaration ReferenceType String VariableDeclarator itemPath MethodInvocation resource MethodInvocation getJcrPath getLocator ReturnStatement MethodInvocation session MethodInvocation MemberReference itemPath getItem getRepositorySession MethodDeclaration Modifier public ReferenceType Transaction put FormalParameter ReferenceType String key FormalParameter ReferenceType Transaction value DavException ThrowStatement ClassCreator ReferenceType DavException MemberReference WebdavResponse SC_PRECONDITION_FAILED Literal ""Attempt to nest a new transaction into a local one."" ReferenceType AbstractTransaction ClassDeclaration Modifier private static /**
     *
     */ GlobalTransaction FieldDeclaration Modifier private ReferenceType Xid VariableDeclarator xid ConstructorDeclaration Modifier private GlobalTransaction FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType TxActiveLock lock StatementExpression SuperConstructorInvocation MemberReference locator MemberReference lock StatementExpression Assignment MemberReference xid ClassCreator ReferenceType XidImpl MethodInvocation lock getToken = MethodDeclaration Modifier public BasicType boolean isLocal ReturnStatement Literal false MethodDeclaration Modifier public start FormalParameter ReferenceType TransactionResource resource DavException LocalVariableDeclaration ReferenceType XAResource VariableDeclarator xaRes MethodInvocation MemberReference resource getXAResource TryStatement StatementExpression MethodInvocation xaRes BinaryOperation / Cast BasicType int MethodInvocation MethodInvocation getTimeout getLock Literal 1000 setTransactionTimeout StatementExpression MethodInvocation xaRes MemberReference xid MemberReference XAResource TMNOFLAGS start CatchClause CatchClauseParameter XAException e ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_FORBIDDEN MethodInvocation e getMessage MethodDeclaration Modifier public commit FormalParameter ReferenceType TransactionResource resource DavException LocalVariableDeclaration ReferenceType XAResource VariableDeclarator xaRes MethodInvocation MemberReference resource getXAResource TryStatement StatementExpression MethodInvocation xaRes MemberReference xid Literal false commit StatementExpression MethodInvocation MemberReference resource removeLocalTxReferences CatchClause CatchClauseParameter XAException e ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_FORBIDDEN MethodInvocation e getMessage MethodDeclaration Modifier public rollback FormalParameter ReferenceType TransactionResource resource DavException LocalVariableDeclaration ReferenceType XAResource VariableDeclarator xaRes MethodInvocation MemberReference resource getXAResource TryStatement StatementExpression MethodInvocation xaRes MemberReference xid rollback StatementExpression MethodInvocation MemberReference resource removeLocalTxReferences CatchClause CatchClauseParameter XAException e ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_FORBIDDEN MethodInvocation e getMessage MethodDeclaration Modifier private ReferenceType XAResource getXAResource FormalParameter ReferenceType TransactionResource resource DavException ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_FORBIDDEN MethodDeclaration Modifier private removeLocalTxReferences FormalParameter ReferenceType TransactionResource resource LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation MethodInvocation iterator values WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Transaction VariableDeclarator tx Cast ReferenceType Transaction MethodInvocation it next StatementExpression MethodInvocation MemberReference tx This MemberReference resource removeReferences End MethodDeclaration Modifier public ReferenceType Transaction put FormalParameter ReferenceType String key FormalParameter ReferenceType Transaction value DavException IfStatement BinaryOperation instanceof MemberReference value ReferenceType LocalTransaction BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference WebdavResponse SC_PRECONDITION_FAILED Literal ""Attempt to nest global transaction into a global one."" End ReturnStatement Cast ReferenceType Transaction SuperMethodInvocation MemberReference key MemberReference value put ReferenceType AbstractTransaction ClassDeclaration Modifier private static /**
     *
     */ TransactionMap MethodDeclaration Modifier public ReferenceType Transaction get FormalParameter ReferenceType String key LocalVariableDeclaration ReferenceType Transaction VariableDeclarator tx Literal null IfStatement MethodInvocation MemberReference key containsKey BlockStatement StatementExpression Assignment MemberReference tx Cast ReferenceType Transaction SuperMethodInvocation MemberReference key get = End ReturnStatement MemberReference tx MethodDeclaration Modifier public ReferenceType Transaction put FormalParameter ReferenceType String key FormalParameter ReferenceType Transaction value DavException ReturnStatement Cast ReferenceType Transaction SuperMethodInvocation MemberReference key MemberReference value put ReferenceType HashMap ClassDeclaration Modifier private static /**
     * Private class implementing Xid interface.
     */ XidImpl FieldDeclaration Modifier private final ReferenceType String VariableDeclarator id ConstructorDeclaration Modifier private /**
         * Create a new Xid
         *
         * @param id
         */ XidImpl FormalParameter ReferenceType String id StatementExpression Assignment This MemberReference id MemberReference id = MethodDeclaration /**
         * @return 1
         * @see javax.transaction.xa.Xid#getFormatId()
         */ Modifier public BasicType int getFormatId ReturnStatement Literal 1 MethodDeclaration /**
         * @return an empty byte array.
         * @see javax.transaction.xa.Xid#getBranchQualifier()
         */ Modifier public BasicType byte getBranchQualifier ReturnStatement ArrayCreator BasicType byte Literal 0 MethodDeclaration /**
         * @return id as byte array
         * @see javax.transaction.xa.Xid#getGlobalTransactionId()
         */ Modifier public BasicType byte getGlobalTransactionId ReturnStatement MethodInvocation id getBytes ReferenceType Xid ReferenceType TxLockManager",0
583,583,,1
40,40,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.FilterIndexReader Import org.apache.lucene.index.TermDocs Import org.apache.lucene.index.Term Import java.util.IdentityHashMap Import java.util.Map Import java.util.BitSet Import java.io.IOException ClassDeclaration /**
 * Implements an <code>IndexReader</code>, that will close when all connected
 * clients are disconnected AND the <code>SharedIndexReader</code>s
 * <code>close()</code> method itself has been called.
 */ SharedIndexReader FieldDeclaration /**
     * Set to <code>true</code> if this index reader should be closed, when
     * all connected clients are disconnected.
     */ Modifier private BasicType boolean VariableDeclarator closeRequested Literal false FieldDeclaration /**
     * Map of all registered clients to this shared index reader. The Map
     * is rather used as a Set, because each value is the same Object as its
     * associated key.
     */ Modifier private final ReferenceType Map VariableDeclarator clients ClassCreator ReferenceType IdentityHashMap ConstructorDeclaration Modifier public /**
     * Creates a new <code>SharedIndexReader</code> which is based on
     * <code>in</code>.
     * @param in the underlying <code>IndexReader</code>.
     */ SharedIndexReader FormalParameter ReferenceType CachingIndexReader in StatementExpression SuperConstructorInvocation MemberReference in MethodDeclaration /**
     * Returns the <code>DocId</code> of the parent of <code>n</code> or
     * {@link DocId#NULL} if <code>n</code> does not have a parent
     * (<code>n</code> is the root node).
     *
     * @param n the document number.
     * @param deleted the documents that should be regarded as deleted.
     * @return the <code>DocId</code> of <code>n</code>'s parent.
     * @throws IOException if an error occurs while reading from the index.
     */ Modifier public ReferenceType DocId getParent FormalParameter BasicType int n FormalParameter ReferenceType BitSet deleted IOException ReturnStatement MethodInvocation MethodInvocation MemberReference n MemberReference deleted getParent getBase MethodDeclaration /**
     * Registeres <code>client</code> with this reader. As long as clients are
     * registered, this shared reader will not release resources on {@link
     * #close()} and will not actually close but only marks itself to close when
     * the last client is unregistered.
     *
     * @param client the client to register.
     */ Modifier public synchronized addClient FormalParameter ReferenceType Object client StatementExpression MethodInvocation clients MemberReference client MemberReference client put MethodDeclaration /**
     * Unregisters the <code>client</code> from this index reader.
     *
     * @param client a client of this reader.
     * @throws IOException if an error occurs while detaching the client from
     *                     this shared reader.
     */ Modifier public synchronized removeClient FormalParameter ReferenceType Object client IOException StatementExpression MethodInvocation clients MemberReference client remove IfStatement BinaryOperation && MethodInvocation clients isEmpty MemberReference closeRequested BlockStatement StatementExpression SuperMethodInvocation doClose End MethodDeclaration /**
     * Closes this index if no client is registered, otherwise this reader is
     * marked to close when the last client is disconnected.
     *
     * @throws IOException if an error occurs while closing.
     */ Modifier protected synchronized doClose IOException IfStatement MethodInvocation clients isEmpty BlockStatement StatementExpression SuperMethodInvocation doClose BlockStatement StatementExpression Assignment MemberReference closeRequested Literal true = End MethodDeclaration /**
     * Simply passes the call to the wrapped reader as is.<br/>
     * If <code>term</code> is for a {@link FieldNames#UUID} field and this
     * <code>SharedIndexReader</code> does not have such a document,
     * {@link CachingIndexReader#EMPTY} is returned.
     *
     * @param term the term to enumerate the docs for.
     * @return TermDocs for <code>term</code>.
     * @throws IOException if an error occurs while reading from the index.
     */ Modifier public ReferenceType TermDocs termDocs FormalParameter ReferenceType Term term IOException ReturnStatement MethodInvocation in MemberReference term termDocs MethodDeclaration /**
     * Returns the {@link CachingIndexReader} this reader is based on.
     *
     * @return the {@link CachingIndexReader} this reader is based on.
     */ Modifier public ReferenceType CachingIndexReader getBase ReturnStatement Cast ReferenceType CachingIndexReader MemberReference in ReferenceType FilterIndexReader",0
682,682,,0
139,139,"CompilationUnit PackageDeclaration org.apache.jmeter.protocol.java.control.gui Import java.awt.BorderLayout Import org.apache.jmeter.protocol.java.config.JavaConfig Import org.apache.jmeter.protocol.java.config.gui.ChainConfigGui Import org.apache.jmeter.protocol.java.sampler.ChainSampler Import org.apache.jmeter.samplers.gui.AbstractSamplerGui Import org.apache.jmeter.testelement.TestElement ClassDeclaration Modifier public /**
 * Sample GUI for Commons Chain Commands
 * 
 * @author Edgar Poce
 */ ChainTestSamplerGui FieldDeclaration /**
     * Comment for <code>serialVersionUID</code>
     */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 3256721766930788918L FieldDeclaration /** Panel containing the configuration options. */ Modifier private ReferenceType ChainConfigGui VariableDeclarator javaPanel Literal null ConstructorDeclaration Modifier public /**
     * Constructor for JavaTestSamplerGui
     */ ChainTestSamplerGui StatementExpression SuperConstructorInvocation StatementExpression MethodInvocation init MethodDeclaration Modifier public ReferenceType String getLabelResource ReturnStatement Literal ""chain_request"" MethodDeclaration /**
     * Initialize the GUI components and layout.
     */ Modifier private init StatementExpression MethodInvocation ClassCreator ReferenceType BorderLayout Literal 0 Literal 5 setLayout StatementExpression MethodInvocation MethodInvocation makeBorder setBorder StatementExpression MethodInvocation MethodInvocation makeTitlePanel MemberReference BorderLayout NORTH add StatementExpression Assignment MemberReference javaPanel ClassCreator ReferenceType ChainConfigGui Literal false = StatementExpression MethodInvocation MemberReference javaPanel MemberReference BorderLayout CENTER add MethodDeclaration Modifier public ReferenceType TestElement createTestElement LocalVariableDeclaration ReferenceType ChainSampler VariableDeclarator sampler ClassCreator ReferenceType ChainSampler StatementExpression MethodInvocation MemberReference sampler modifyTestElement ReturnStatement MemberReference sampler MethodDeclaration Modifier public modifyTestElement FormalParameter ReferenceType TestElement sampler StatementExpression MethodInvocation sampler clear LocalVariableDeclaration ReferenceType JavaConfig VariableDeclarator config Cast ReferenceType JavaConfig MethodInvocation javaPanel createTestElement StatementExpression MethodInvocation MemberReference sampler configureTestElement StatementExpression MethodInvocation sampler MemberReference config addTestElement MethodDeclaration Modifier public configure FormalParameter ReferenceType TestElement el StatementExpression SuperMethodInvocation MemberReference el configure StatementExpression MethodInvocation javaPanel MemberReference el configure ReferenceType AbstractSamplerGui",0
552,552,,0
358,358,"CompilationUnit PackageDeclaration org.apache.jackrabbit.xml Import java.io.ByteArrayOutputStream Import java.io.IOException Import java.io.InputStream Import java.util.regex.Matcher Import java.util.regex.Pattern Import javax.jcr.ItemVisitor Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.PathNotFoundException Import javax.jcr.Property Import javax.jcr.PropertyIterator Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.Value Import javax.jcr.ValueFormatException Import org.apache.commons.codec.binary.Base64 Import org.apache.jackrabbit.name.QName Import org.apache.xerces.util.XMLChar Import org.xml.sax.Attributes Import org.xml.sax.ContentHandler Import org.xml.sax.SAXException Import org.xml.sax.helpers.AttributesImpl ClassDeclaration Modifier public /**
 * Generic document view exporter for JCR content repositories.
 * This class can be used to implement the XML document view export
 * operations using nothing but the standard JCR interfaces. The
 * export operation is implemented as an ItemVisitor that generates
 * the document view SAX event stream as it traverses the selected
 * JCR content tree.
 *
 * <h2>Implementing a customized XML serializer</h2>
 * <p>
 * A client can extend this class to provide customized XML serialization
 * formats. By overriding the protected includeProperty() and includeNode()
 * methods, a subclass can select which properties and nodes will be included
 * in the serialized XML stream.
 * <p>
 * For example, the following code implements an XML serialization that only
 * contains the titles of the first two levels of the node tree.
 * <pre>
 *     ContentHandler handler = ...;
 *     final Node parent = ...;
 *     parent.accept(
 *         new DocumentViewExportVisitor(handler, true, false) {
 *
 *             protected boolean includeProperty(Property property)
 *                     throws RepositoryException {
 *                 return property.getName().equals(""title"");
 *             }
 *
 *             protected boolean includeNode(Node node)
 *                     throws RepositoryException {
 *                 return (node.getDepth() <= parent.getDepth() + 2);
 *             }
 *
 *         });
 * </pre>
 *
 * <h2>Implementing the standard export methods</h2>
 * <p>
 * The following is an example of the
 * Session.exportDocumentView(String, ContentHandler, boolean, boolean)
 * method implemented in terms of this exporter class:
 * <pre>
 *     public void exportDocumentView(
 *             String absPath, ContentHandler handler,
 *             boolean skipBinary, boolean noRecurse)
 *             throws PathNotFoundException, SAXException, RepositoryException {
 *         Item item = getItem(absPath);
 *         if (item.isNode()) {
 *             item.accept(new DocumentViewExportVisitor(
 *                     handler, skipBinary, noRecurse));
 *         } else {
 *             throw new PathNotFoundException(""Invalid node path: "" + path);
 *         }
 *     }
 * </pre>
 * <p>
 * The companion method
 * Session.exportDocumentView(String, OutputStream, boolean, boolean)
 * can be implemented in terms of the above method:
 * <pre>
 *     public void exportDocumentView(
 *             String absPath, OutputStream output,
 *             boolean skipBinary, boolean noRecurse)
 *             throws PathNotFoundException, IOException, RepositoryException {
 *         try {
 *             SAXTransformerFactory factory = (SAXTransformerFactory)
 *                 SAXTransformerFactory.newInstance();
 *             TransformerHandler handler = factory.newTransformerHandler();
 *             handler.setResult(new StreamResult(out));
 *             exportDocumentView(absPath, handler, skipBinary, noRecurse);
 *         } catch (TransformerConfigurationException e) {
 *             throw new IOException(
 *                     ""Unable to configure a SAX transformer: "" + e.getMessage());
 *         } catch (SAXException e) {
 *             throw new IOException(
 *                     ""Unable to serialize a SAX stream: "" + e.getMessage());
 *         }
 *     }
 * </pre>
 *
 * @see ItemVisitor
 * @see Session#exportDocumentView(String, ContentHandler, boolean, boolean)
 * @see Session#exportDocumentView(String, java.io.OutputStream, boolean, boolean)
 */ DocumentViewExportVisitor FieldDeclaration /**
     * The SAX content handler for the serialized XML stream.
     */ Modifier private final ReferenceType ContentHandler VariableDeclarator handler FieldDeclaration /**
     * Flag to skip all binary properties.
     */ Modifier private final BasicType boolean VariableDeclarator skipBinary FieldDeclaration /**
     * Flag to only serialize the selected node.
     */ Modifier private final BasicType boolean VariableDeclarator noRecurse FieldDeclaration /**
     * The root node of the serialization tree. This is the node that
     * is mapped to the root element of the serialized XML stream.
     */ Modifier private ReferenceType Node VariableDeclarator root FieldDeclaration /**
     * The current session.
     */ Modifier private ReferenceType Session VariableDeclarator session FieldDeclaration /**
     * The prefix mapped to the <code>http://www.jcp.org/jcr/1.0</code>
     * namespace in the current session.
     */ Modifier private ReferenceType String VariableDeclarator jcr ConstructorDeclaration Modifier public /**
     * Creates an visitor for exporting content using the document view
     * format. To actually perform the export operation, you need to pass
     * the visitor instance to the selected content node using the
     * Node.accept(ItemVisitor) method.
     *
     * @param handler the SAX event handler
     * @param skipBinary flag for ignoring binary properties
     * @param noRecurse flag for not exporting an entire content subtree
     */ DocumentViewExportVisitor FormalParameter ReferenceType ContentHandler handler FormalParameter BasicType boolean skipBinary FormalParameter BasicType boolean noRecurse StatementExpression Assignment This MemberReference handler MemberReference handler = StatementExpression Assignment This MemberReference skipBinary MemberReference skipBinary = StatementExpression Assignment This MemberReference noRecurse MemberReference noRecurse = StatementExpression Assignment This MemberReference root Literal null = MethodDeclaration /**
     * Ignored. Properties are included as attributes of node elements.
     *
     * @param property ignored property
     * @see ItemVisitor#visit(Property)
     */ Modifier public final visit FormalParameter ReferenceType Property property MethodDeclaration /**
     * Exports the visited node using the document view serialization format.
     * This method is the main entry point to the serialization mechanism.
     * It manages the opening and closing of the SAX event stream and the
     * registration of the namespace mappings. The process of actually
     * generating the document view SAX events is spread into various
     * private methods, and can be controlled by overriding the protected
     * includeProperty() and includeNode() methods.
     *
     * @param node the node to visit
     * @throws RepositoryException on repository errors
     * @see ItemVisitor#visit(Node)
     * @see #includeProperty(Property)
     * @see #includeNode(Node)
     */ Modifier public final visit FormalParameter ReferenceType Node node RepositoryException TryStatement IfStatement BinaryOperation == MemberReference root Literal null BlockStatement StatementExpression Assignment MemberReference root MemberReference node = StatementExpression Assignment MemberReference session MethodInvocation node getSession = StatementExpression Assignment MemberReference jcr MethodInvocation session MemberReference QName NS_JCR_URI getNamespacePrefix = StatementExpression MethodInvocation handler startDocument LocalVariableDeclaration ReferenceType String VariableDeclarator prefixes MethodInvocation session getNamespacePrefixes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference prefixes length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation session MemberReference ArraySelector MemberReference i prefixes getNamespaceURI IfStatement MethodInvocation ! uri MemberReference QName NS_XML_URI equals BlockStatement StatementExpression MethodInvocation handler MemberReference ArraySelector MemberReference i prefixes MemberReference uri startPrefixMapping End End End LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation node getName IfStatement MethodInvocation ! name BinaryOperation + MemberReference jcr Literal "":xmltext"" equals BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator colon MethodInvocation name Literal ':' indexOf IfStatement BinaryOperation != MemberReference colon Literal - 1 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator prefix MethodInvocation name Literal 0 MemberReference colon substring StatementExpression Assignment MemberReference name MethodInvocation name BinaryOperation + MemberReference colon Literal 1 substring = StatementExpression MethodInvocation MemberReference node MemberReference prefix MethodInvocation MemberReference name escapeName exportNode IfStatement BinaryOperation > MethodInvocation name length Literal 0 BlockStatement StatementExpression MethodInvocation MemberReference node Literal """" MethodInvocation MemberReference name escapeName exportNode BlockStatement StatementExpression MethodInvocation MemberReference node MemberReference jcr Literal ""root"" exportNode End End IfStatement BinaryOperation != MemberReference node MemberReference root BlockStatement StatementExpression MethodInvocation MemberReference node exportText BlockStatement ThrowStatement ClassCreator ReferenceType RepositoryException Literal ""Cannot export jcr:xmltext"" End End IfStatement BinaryOperation == MemberReference root MemberReference node BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator prefixes MethodInvocation session getNamespacePrefixes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference prefixes length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation session MemberReference ArraySelector MemberReference i prefixes getNamespaceURI IfStatement MethodInvocation ! uri MemberReference QName NS_XML_URI equals BlockStatement StatementExpression MethodInvocation handler MemberReference ArraySelector MemberReference i prefixes endPrefixMapping End End StatementExpression MethodInvocation handler endDocument End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e CatchClause CatchClauseParameter SAXException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * Checks whether the given property should be included in the XML
     * serialization. This method returns <code>true</code> by default,
     * but subclasses can override this method to implement more selective
     * XML serialization.
     *
     * @param property the property to check
     * @return true if the property should be included, false otherwise
     * @throws RepositoryException on repository errors
     */ Modifier protected BasicType boolean includeProperty FormalParameter ReferenceType Property property RepositoryException ReturnStatement Literal true MethodDeclaration /**
     * Checks whether the given node should be included in the XML
     * serialization. This method returns <code>true</code> by default,
     * but subclasses override this method to implement selective
     * XML serialization.
     * <p>
     * Note that this method is only called for the descendants of the
     * root node of the serialized tree. Also, this method is never called
     * if the noRecurse flag is set because no descendant nodes will be
     * serialized anyway.
     *
     * @param node the node to check
     * @return true if the node should be included, false otherwise
     * @throws RepositoryException on repository errors
     */ Modifier protected BasicType boolean includeNode FormalParameter ReferenceType Node node RepositoryException ReturnStatement Literal true MethodDeclaration /**
     * Serializes a special ""jcr:xmltext"" node. Only the contents of the
     * ""jcr:xmlcharacters"" property will be written as characters to the
     * XML stream and no elements or attributes will be generated for
     * this node or any other child nodes or properties.
     *
     * @param node the ""jcr:xmltext"" node
     * @throws SAXException on SAX errors
     * @throws RepositoryException on repository errors
     */ Modifier private exportText FormalParameter ReferenceType Node node SAXException RepositoryException TryStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator property MethodInvocation node BinaryOperation + MemberReference jcr Literal "":xmlcharacters"" getProperty LocalVariableDeclaration BasicType char VariableDeclarator characters MethodInvocation MethodInvocation property getString filterXML StatementExpression MethodInvocation handler MemberReference characters Literal 0 MemberReference characters length characters CatchClause CatchClauseParameter PathNotFoundException ex CatchClause CatchClauseParameter ValueFormatException ex MethodDeclaration /**
     * Serializes the given node to the XML stream. Generates an element
     * with the given name, and maps node properties to attributes of the
     * generated element. If the noRecurse flag is false, then child nodes
     * are serialized as sub-elements.
     *
     * @param node the given node
     * @param prefix namespace prefix
     * @param name escaped local name
     * @throws IOException if a problem with binary values occurred
     * @throws SAXException on SAX errors
     * @throws RepositoryException on repository errors
     */ Modifier private exportNode FormalParameter ReferenceType Node node FormalParameter ReferenceType String prefix FormalParameter ReferenceType String name IOException SAXException RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator prefixedName MemberReference name IfStatement BinaryOperation > MethodInvocation prefix length Literal 0 BlockStatement StatementExpression Assignment MemberReference prefixedName BinaryOperation + BinaryOperation + MemberReference prefix Literal "":"" MemberReference name = BlockStatement StatementExpression Assignment MemberReference prefixedName MemberReference name = End LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation session MemberReference prefix getNamespaceURI IfStatement BinaryOperation == MethodInvocation uri length Literal 0 BlockStatement StatementExpression Assignment MemberReference uri Literal null = End StatementExpression MethodInvocation handler MemberReference uri MemberReference name MemberReference prefixedName MethodInvocation MemberReference node getAttributes startElement IfStatement MemberReference ! noRecurse BlockStatement LocalVariableDeclaration ReferenceType NodeIterator VariableDeclarator children MethodInvocation node getNodes WhileStatement MethodInvocation children hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child MethodInvocation children nextNode IfStatement MethodInvocation MemberReference child includeNode BlockStatement StatementExpression MethodInvocation child This accept End End End StatementExpression MethodInvocation handler MemberReference uri MemberReference name MemberReference prefixedName endElement MethodDeclaration /**
     * Returns the document view attributes of the given Node. The
     * properties of the node are mapped to XML attributes directly as
     * name-value pairs.
     *
     * @param node the given node
     * @return document view attributes of the node
     * @throws IOException if a problem with binary values occurred
     * @throws RepositoryException on repository errors
     */ Modifier private ReferenceType Attributes getAttributes FormalParameter ReferenceType Node node IOException RepositoryException LocalVariableDeclaration ReferenceType AttributesImpl VariableDeclarator attributes ClassCreator ReferenceType AttributesImpl LocalVariableDeclaration ReferenceType PropertyIterator VariableDeclarator properties MethodInvocation node getProperties WhileStatement MethodInvocation properties hasNext BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator property MethodInvocation properties nextProperty IfStatement BinaryOperation && BinaryOperation && MemberReference skipBinary BinaryOperation == MethodInvocation property getType MemberReference PropertyType BINARY MethodInvocation MemberReference property includeProperty BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation property getName LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation MemberReference property escapeValue LocalVariableDeclaration ReferenceType String VariableDeclarator prefixedName LocalVariableDeclaration ReferenceType String VariableDeclarator uri LocalVariableDeclaration BasicType int VariableDeclarator colon MethodInvocation name Literal ':' indexOf IfStatement BinaryOperation != MemberReference colon Literal - 1 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator prefix MethodInvocation name Literal 0 MemberReference colon substring StatementExpression Assignment MemberReference uri MethodInvocation session MemberReference prefix getNamespaceURI = StatementExpression Assignment MemberReference name MethodInvocation MethodInvocation name BinaryOperation + MemberReference colon Literal 1 substring escapeName = StatementExpression Assignment MemberReference prefixedName BinaryOperation + BinaryOperation + MemberReference prefix Literal "":"" MemberReference name = BlockStatement StatementExpression Assignment MemberReference uri MethodInvocation session Literal """" getNamespaceURI = StatementExpression Assignment MemberReference name MethodInvocation MemberReference name escapeName = StatementExpression Assignment MemberReference prefixedName MemberReference name = End StatementExpression MethodInvocation attributes MemberReference uri MemberReference name MemberReference prefixedName Literal ""CDATA"" MemberReference value addAttribute End End ReturnStatement MemberReference attributes MethodDeclaration Modifier private static BasicType char filterXML FormalParameter ReferenceType String value LocalVariableDeclaration BasicType char VariableDeclarator characters MethodInvocation value toCharArray ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference characters length MemberReference ++ i BlockStatement IfStatement MethodInvocation XMLChar MemberReference ArraySelector MemberReference i characters isInvalid BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i characters Literal ' ' = End End ReturnStatement MemberReference characters MethodDeclaration /**
     * Escapes the given JCR name according to the rules of section
     * 6.4.3 of the JSR 170 specification.
     *
     * @param name JCR name
     * @return escaped name
     */ Modifier private static ReferenceType String escapeName FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buffer ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType int VariableDeclarator colon MethodInvocation name Literal ':' indexOf IfStatement BinaryOperation != MemberReference colon Literal - 1 BlockStatement StatementExpression MethodInvocation buffer MethodInvocation name Literal 0 BinaryOperation + MemberReference colon Literal 1 substring append StatementExpression Assignment MemberReference name MethodInvocation name BinaryOperation + MemberReference colon Literal 1 substring = End LocalVariableDeclaration ReferenceType Pattern VariableDeclarator pattern MethodInvocation Pattern Literal ""_([0-9a-fA-F]{4}_)"" compile LocalVariableDeclaration ReferenceType Matcher VariableDeclarator matcher MethodInvocation pattern MemberReference name matcher LocalVariableDeclaration BasicType char VariableDeclarator characters MethodInvocation MethodInvocation matcher Literal ""_x005f_$1"" replaceAll filterXML ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference characters length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator ch MemberReference ArraySelector MemberReference i characters IfStatement TernaryExpression BinaryOperation == MemberReference i Literal 0 MethodInvocation XMLChar MemberReference ch isNCNameStart MethodInvocation XMLChar MemberReference ch isNCName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator hex MethodInvocation Integer Cast BasicType int MemberReference ch toHexString StatementExpression MethodInvocation buffer Literal ""_x"" append ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 4 BinaryOperation > MemberReference j MethodInvocation hex length MemberReference -- j BlockStatement StatementExpression MethodInvocation buffer Literal '0' append End StatementExpression MethodInvocation buffer MemberReference hex append StatementExpression MethodInvocation buffer Literal '_' append BlockStatement StatementExpression MethodInvocation buffer MemberReference ch append End End ReturnStatement MethodInvocation buffer toString MethodDeclaration /**
     * Returns the string representation of the given value. Binary values
     * are encoded in Base64, while other values are just converted to their
     * string format.
     *
     * @param value original value
     * @param escape whether to apply value escapes
     * @return escaped value
     * @throws IOException if a problem with binary values occurred
     * @throws RepositoryException on repository errors
     */ Modifier private static ReferenceType String escapeValue FormalParameter ReferenceType Value value FormalParameter BasicType boolean escape IOException RepositoryException IfStatement BinaryOperation == MethodInvocation value getType MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator buffer ClassCreator ReferenceType ByteArrayOutputStream LocalVariableDeclaration ReferenceType InputStream VariableDeclarator input MethodInvocation value getStream TryStatement LocalVariableDeclaration BasicType byte VariableDeclarator bytes ArrayCreator BasicType byte Literal 4096 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator n MethodInvocation input MemberReference bytes read BinaryOperation != MemberReference n Literal - 1 Assignment MemberReference n MethodInvocation input MemberReference bytes read = BlockStatement StatementExpression MethodInvocation buffer MemberReference bytes Literal 0 MemberReference n write End StatementExpression MethodInvocation input close ReturnStatement ClassCreator ReferenceType String MethodInvocation Base64 MethodInvocation buffer toByteArray encodeBase64 Literal ""ASCII"" IfStatement MemberReference escape BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buffer ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType Pattern VariableDeclarator pattern MethodInvocation Pattern Literal ""_([0-9a-fA-F]{4}_)"" compile LocalVariableDeclaration ReferenceType Matcher VariableDeclarator matcher MethodInvocation pattern MethodInvocation value getString matcher LocalVariableDeclaration BasicType char VariableDeclarator characters MethodInvocation MethodInvocation matcher Literal ""_x005f_$1"" replaceAll filterXML ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference characters length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i characters Literal ' ' BlockStatement StatementExpression MethodInvocation buffer Literal ""_x0020_"" append IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i characters Literal '\t' BlockStatement StatementExpression MethodInvocation buffer Literal ""_x0009_"" append IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i characters Literal '\r' BlockStatement StatementExpression MethodInvocation buffer Literal ""_x000D_"" append IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i characters Literal '\n' BlockStatement StatementExpression MethodInvocation buffer Literal ""_x000A_"" append BlockStatement StatementExpression MethodInvocation buffer MemberReference ArraySelector MemberReference i characters append End End End End End ReturnStatement MethodInvocation buffer toString BlockStatement ReturnStatement ClassCreator ReferenceType String MethodInvocation MethodInvocation value getString filterXML End End MethodDeclaration /**
     * Returns the document view representation of the given property.
     * Multiple values are combined into a space-separated list of
     * space-escaped string values, binary values are encoded using the
     * Base64 encoding, and other values are simply returned using their
     * default string representation.
     *
     * @param property the given property
     * @return document view representation of the property value
     * @throws IOException if a problem with binary values occurred
     * @throws RepositoryException on repository errors
     */ Modifier private static ReferenceType String escapeValue FormalParameter ReferenceType Property property IOException RepositoryException IfStatement MethodInvocation property MethodInvocation isMultiple getDefinition BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buffer ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType Value VariableDeclarator values MethodInvocation property getValues ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation buffer Literal ' ' append End StatementExpression MethodInvocation buffer MethodInvocation MemberReference ArraySelector MemberReference i values Literal true escapeValue append End ReturnStatement MethodInvocation buffer toString BlockStatement ReturnStatement MethodInvocation MethodInvocation property getValue Literal false escapeValue End ReferenceType ItemVisitor",1
777,777,,0
309,309,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.observation Import org.apache.jackrabbit.webdav.property.DavPropertyName Import org.apache.jackrabbit.webdav.xml.Namespace InterfaceDeclaration Modifier public /**
 * <code>ObservationConstants</code> interface provide constants for request
 * and response headers, Xml elements and property names used for handling
 * observation over WebDAV. There exists no public standard for this
 * functionality.
 */ ObservationConstants ConstantDeclaration /**
     * The namespace
     */ Modifier public final static ReferenceType Namespace VariableDeclarator NAMESPACE MethodInvocation Namespace Literal ""dcr"" Literal ""http://www.day.com/jcr/webdav/1.0"" getNamespace ConstantDeclaration /**
     * The SubscriptionId request header<br>
     */ Modifier public final static ReferenceType String VariableDeclarator HEADER_SUBSCRIPTIONID Literal ""SubscriptionId"" ConstantDeclaration /**
     * subscription Xml element<br>
     * Mandatory element inside the {@link #SUBSCRIPTIONDISCOVERY subscriptiondiscovery}
     * property indicating the event listeners present for this session.<br>
     * NOTE, that this will not reveal any subscription made by another session.
     */ Modifier public final static ReferenceType String VariableDeclarator XML_SUBSCRIPTION Literal ""subscription"" ConstantDeclaration /**
     * Xml elements
     */ Modifier public final static ReferenceType String VariableDeclarator XML_SUBSCRIPTIONINFO Literal ""subscriptioninfo"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_EVENTTYPE Literal ""eventtype"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_NOLOCAL Literal ""nolocal"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_FILTER Literal ""filter"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_SUBSCRIPTIONID Literal ""subscriptionid"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_UUID Literal ""uuid"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_NODETYPE_NAME Literal ""nodetype-name"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_EVENTDISCOVERY Literal ""eventdiscovery"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_EVENTBUNDLE Literal ""eventbundle"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_EVENT Literal ""event"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_EVENTUSERID Literal ""eventuserid"" ConstantDeclaration /**
     * Element representing the 'nodeadded' event type.
     * @see javax.jcr.observation.Event#NODE_ADDED
     */ Modifier public final static ReferenceType String VariableDeclarator EVENT_NODEADDED Literal ""nodeadded"" ConstantDeclaration /**
     * Element representing the 'noderemoved' event type.
     * @see javax.jcr.observation.Event#NODE_REMOVED
     */ Modifier public final static ReferenceType String VariableDeclarator EVENT_NODEREMOVED Literal ""noderemoved"" ConstantDeclaration /**
     * Element representing the 'propertyadded' event type.
     * @see javax.jcr.observation.Event#PROPERTY_ADDED
     */ Modifier public final static ReferenceType String VariableDeclarator EVENT_PROPERTYADDED Literal ""propertyadded"" ConstantDeclaration /**
     * Element representing the 'propertyremoved' event type.
     * @see javax.jcr.observation.Event#PROPERTY_REMOVED
     */ Modifier public final static ReferenceType String VariableDeclarator EVENT_PROPERTYREMOVED Literal ""propertyremoved"" ConstantDeclaration /**
     * Element representing the 'propertychanged' event type.
     * @see javax.jcr.observation.Event#PROPERTY_CHANGED
     */ Modifier public final static ReferenceType String VariableDeclarator EVENT_PROPERTYCHANGED Literal ""propertychanged"" ConstantDeclaration /**
     * The protected subscription discovery property is used to find out about
     * existing subscriptions present on the specified resource.
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator SUBSCRIPTIONDISCOVERY MethodInvocation DavPropertyName Literal ""subscriptiondiscovery"" MemberReference NAMESPACE create",1
297,297,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav Import org.apache.jackrabbit.webdav.lock.ActiveLock Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import javax.servlet.http.HttpServletResponse Import java.io.IOException InterfaceDeclaration Modifier public /**
 * <code>WebdavResponse</code> extends the HttpServletResponse by
 * Webdav specific status codes and METHODS.
 */ DavServletResponse ConstantDeclaration /**
     * The 102 (Processing) status code is an interim response used to
     * inform the client that the server has accepted the complete request,
     * but has not yet completed it.
     */ BasicType int VariableDeclarator SC_PROCESSING Literal 102 ConstantDeclaration /**
     * Status code (207) indicating that the response requires
     * providing status for multiple independent operations.
     */ BasicType int VariableDeclarator SC_MULTI_STATUS Literal 207 ConstantDeclaration /**
     * The 422 (Unprocessable Entity) status code means the server understands
     * the content type of the request entity (hence a 415(Unsupported Media Type)
     * status code is inappropriate), and the syntax of the request entity is
     * correct (thus a 400 (Bad Request) status code is inappropriate) but was
     * unable to process the contained instructions. For example, this error
     * condition may occur if an XML request body contains well-formed (i.e.,
     * syntactically correct), but semantically erroneous XML instructions.
     */ BasicType int VariableDeclarator SC_UNPROCESSABLE_ENTITY Literal 422 ConstantDeclaration /**
     * Status code (423) indicating the destination resource of a
     * method is locked, and either the request did not contain a
     * valid Lock-Info header, or the Lock-Info header identifies
     * a lock held by another principal.
     */ BasicType int VariableDeclarator SC_LOCKED Literal 423 ConstantDeclaration /**
     * Status code (424) incidating that the method could not be
     * performed on the resource, because the requested action depended
     * on another action which failed.
     */ BasicType int VariableDeclarator SC_FAILED_DEPENDENCY Literal 424 ConstantDeclaration /**
     * Status code (507) indicating that the resource does not have
     * sufficient space to record the state of the resource after the
     * execution of this method.
     */ BasicType int VariableDeclarator SC_INSUFFICIENT_SPACE_ON_RESOURCE Literal 507 MethodDeclaration /**
     * Send a response body given more detailed information about the error
     * occured.
     *
     * @param error
     * @throws IOException
     */ Modifier public sendError FormalParameter ReferenceType DavException error IOException MethodDeclaration /**
     * Send the multistatus response to the client. A multistatus response
     * is returned in response to a successful PROPFIND and PROPPATCH request.
     * In addition multistatus response is required response in case a COPY,
     * MOVE, DELETE, LOCK or PROPPATCH request fails.
     *
     * @param multistatus
     * @throws IOException
     * @see #SC_MULTI_STATUS
     */ Modifier public sendMultiStatus FormalParameter ReferenceType MultiStatus multistatus IOException MethodDeclaration /**
     * Send the lock response for a successful LOCK request. The given <code>ActiveLock</code>
     * object is included in the lockdiscovery property of the response
     * body as required by RFC 2518.
     *
     * @param lock
     * @throws IOException
     * @see DavConstants#PROPERTY_LOCKDISCOVERY
     */ Modifier public sendLockResponse FormalParameter ReferenceType ActiveLock lock IOException MethodDeclaration /**
     * Send the lock response for a successful LOCK request, that was intended
     * to refresh an existing lock. The locks array must contain at least
     * a single element; the <code>ActiveLock</code> objects are then
     * included in the lockdiscovery property of the response body as required
     * by RFC 2518.
     *
     * @param locks
     * @throws IOException
     * @see DavConstants#PROPERTY_LOCKDISCOVERY
     */ Modifier public sendRefreshLockResponse FormalParameter ReferenceType ActiveLock locks IOException MethodDeclaration /**
     * Generic method to return an Xml response body.
     *
     * @param serializable object that can be converted to the root Xml element
     * of the document to be sent as response body.
     * @param status Status code to be used with {@link #setStatus(int)}.
     * @throws IOException
     */ Modifier public sendXmlResponse FormalParameter ReferenceType XmlSerializable serializable FormalParameter BasicType int status IOException ReferenceType HttpServletResponse",0
633,633,,0
823,823,,0
694,694,,1
744,744,,0
843,843,,0
631,631,,0
725,725,,1
389,389,"CompilationUnit PackageDeclaration org.apache.jackrabbit.extension Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import java.io.UnsupportedEncodingException Import java.util.List Import javax.jcr.RepositoryException Import javax.jcr.Workspace Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.core.nodetype.InvalidNodeTypeDefException Import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl Import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry Import org.apache.jackrabbit.core.nodetype.compact.CompactNodeTypeDefReader Import org.apache.jackrabbit.core.nodetype.compact.ParseException ClassDeclaration /**
 * The <code>NodeTypeSupport</code> contains a single utility method
 * {@link #registerNodeType(Workspace)} to register the required mixin node
 * type <code>rep:jarFile</code> with the repository.
 * <p>
 * If the class loader is not used on a Jackrabbit based repository, loading
 * this class or calling the {@link #registerNodeType(Workspace)} methods may
 * fail with link errors.
 *
 * @author Felix Meschberger
 * @version $Rev:$, $Date$
 */ NodeTypeSupport FieldDeclaration /** Default log */ Modifier private final static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType NodeTypeSupport getLog FieldDeclaration /**
     * The name of the class path resource containing the node type definition
     * file used by the {@link #registerNodeType(Workspace)} method to register
     * the required mixin node type (value is ""type.cnd"").
     */ Modifier private final static ReferenceType String VariableDeclarator TYPE_FILE Literal ""type.cnd"" FieldDeclaration /**
     * The encoding used to read the node type definition file (value is
     * ""ISO-8859-1"").
     */ Modifier private final static ReferenceType String VariableDeclarator ENCODING Literal ""ISO-8859-1"" MethodDeclaration /**
     * Registers the required node type (<code>rep:jarFile</code>) with the
     * node type manager available from the given <code>workspace</code>.
     * <p>
     * The <code>NodeTypeManager</code> returned by the <code>workspace</code>
     * is expected to be of type
     * <code>org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl</code> for
     * the node type registration to succeed.
     * <p>
     * This method is not synchronized. It is up to the calling method to
     * prevent paralell execution.
     *
     * @param workspace The <code>Workspace</code> providing the node type
     *      manager through which the node type is to be registered.
     *
     * @return <code>true</code> if this class can be used to handle archive
     *      class path entries. See above for a description of the test used.
     */ Modifier static BasicType boolean registerNodeType FormalParameter ReferenceType Workspace workspace LocalVariableDeclaration ReferenceType InputStream VariableDeclarator ins ClassReference MethodInvocation MemberReference TYPE_FILE getResourceAsStream ReferenceType NodeTypeSupport IfStatement BinaryOperation == MemberReference ins Literal null BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Node type definition file "" MemberReference TYPE_FILE Literal "" not in class path. Cannot define required node type"" error ReturnStatement Literal false End LocalVariableDeclaration ReferenceType InputStreamReader VariableDeclarator reader Literal null TryStatement StatementExpression Assignment MemberReference reader ClassCreator ReferenceType InputStreamReader MemberReference ins MemberReference ENCODING = CatchClause CatchClauseParameter UnsupportedEncodingException uee StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Required Encoding "" MemberReference ENCODING Literal "" not supported, "" Literal ""using platform default encoding"" MemberReference uee warn StatementExpression Assignment MemberReference reader ClassCreator ReferenceType InputStreamReader MemberReference ins = TryStatement LocalVariableDeclaration ReferenceType CompactNodeTypeDefReader VariableDeclarator cndReader ClassCreator ReferenceType CompactNodeTypeDefReader MemberReference reader MemberReference TYPE_FILE LocalVariableDeclaration ReferenceType List VariableDeclarator ntdList MethodInvocation cndReader getNodeTypeDefs LocalVariableDeclaration ReferenceType NodeTypeManagerImpl VariableDeclarator ntmgr Cast ReferenceType NodeTypeManagerImpl MethodInvocation workspace getNodeTypeManager LocalVariableDeclaration ReferenceType NodeTypeRegistry VariableDeclarator ntreg MethodInvocation ntmgr getNodeTypeRegistry StatementExpression MethodInvocation ntreg MemberReference ntdList registerNodeTypes ReturnStatement Literal true CatchClause CatchClauseParameter ParseException pe StatementExpression MethodInvocation log BinaryOperation + Literal ""Unexpected failure to parse compact node defintion "" MemberReference TYPE_FILE MemberReference pe error CatchClause CatchClauseParameter InvalidNodeTypeDefException ie StatementExpression MethodInvocation log Literal ""Cannot define required node type"" MemberReference ie error CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log Literal ""General problem accessing the repository"" MemberReference re error CatchClause CatchClauseParameter ClassCastException cce StatementExpression MethodInvocation log Literal ""Unexpected object type encountered"" MemberReference cce error TryStatement StatementExpression MethodInvocation reader close CatchClause CatchClauseParameter IOException ioe ReturnStatement Literal false",1
61,61,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.util Import java.text.SimpleDateFormat Import java.util.Locale Import java.util.TimeZone ClassDeclaration Modifier public /**
 * <code>HttpDateFormat</code>...
 */ HttpDateFormat FieldDeclaration Modifier private final static ReferenceType TimeZone VariableDeclarator GMT_TIMEZONE MethodInvocation TimeZone Literal ""GMT"" getTimeZone ConstructorDeclaration Modifier public HttpDateFormat FormalParameter ReferenceType String pattern StatementExpression SuperConstructorInvocation MemberReference pattern MemberReference Locale ENGLISH StatementExpression SuperMethodInvocation MemberReference GMT_TIMEZONE setTimeZone ReferenceType SimpleDateFormat",0
785,785,,1
889,889,,0
161,161,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.commons.collections.map.LRUMap Import org.apache.jackrabbit.core.ItemId Import org.apache.log4j.Logger Import java.util.Collection Import java.util.Collections Import java.util.Set ClassDeclaration Modifier public /**
 * An <code>ItemStateCache</code> implementation that internally uses a
 * {@link LRUMap} to maintain a cache of <code>ItemState</code> objects.
 */ LRUItemStateCache FieldDeclaration /** Logger instance */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType LRUItemStateCache getLogger FieldDeclaration /** default maximum size of this cache */ Modifier public final static BasicType int VariableDeclarator DEFAULT_MAX_SIZE Literal 1000 FieldDeclaration /**
     * A cache for <code>ItemState</code> instances
     */ Modifier private final ReferenceType LRUMap VariableDeclarator cache ConstructorDeclaration Modifier public /**
     * Constructs a new, empty <code>ItemStateCache</code> with a maximum size
     * of 1000.
     */ LRUItemStateCache StatementExpression ExplicitConstructorInvocation MemberReference DEFAULT_MAX_SIZE ConstructorDeclaration Modifier public /**
     * Constructs a new, empty <code>ItemStateCache</code> with the specified
     * maximum size.
     *
     * @param maxSize the maximum size of the cache, -1 for no limit,
     */ LRUItemStateCache FormalParameter BasicType int maxSize StatementExpression Assignment MemberReference cache ClassCreator ReferenceType LRUMap MemberReference maxSize Literal true = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isCached FormalParameter ReferenceType ItemId id ReturnStatement MethodInvocation cache MemberReference id containsKey MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType ItemState retrieve FormalParameter ReferenceType ItemId id ReturnStatement Cast ReferenceType ItemState MethodInvocation cache MemberReference id get MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public cache FormalParameter ReferenceType ItemState state LocalVariableDeclaration ReferenceType ItemId VariableDeclarator id MethodInvocation state getId IfStatement MethodInvocation cache MemberReference id containsKey BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""overwriting cached entry "" MemberReference id warn End StatementExpression MethodInvocation cache MemberReference id MemberReference state put MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public evict FormalParameter ReferenceType ItemId id StatementExpression MethodInvocation cache MemberReference id remove MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public evictAll StatementExpression MethodInvocation cache clear MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isEmpty ReturnStatement MethodInvocation cache isEmpty MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int size ReturnStatement MethodInvocation cache size MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Set keySet ReturnStatement MethodInvocation Collections MethodInvocation cache keySet unmodifiableSet MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Collection values ReturnStatement MethodInvocation Collections MethodInvocation cache values unmodifiableCollection ReferenceType ItemStateCache",0
12,12,"CompilationUnit PackageDeclaration org.apache.jackrabbit.j2ee Import org.apache.jackrabbit.server.AbstractWebdavServlet Import org.apache.jackrabbit.server.BasicCredentialsProvider Import org.apache.jackrabbit.server.SessionProvider Import org.apache.jackrabbit.server.SessionProviderImpl Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavLocatorFactory Import org.apache.jackrabbit.webdav.DavMethods Import org.apache.jackrabbit.webdav.DavResource Import org.apache.jackrabbit.webdav.DavResourceFactory Import org.apache.jackrabbit.webdav.DavSessionProvider Import org.apache.jackrabbit.webdav.WebdavRequest Import org.apache.jackrabbit.webdav.WebdavResponse Import org.apache.jackrabbit.webdav.jcr.DavLocatorFactoryImpl Import org.apache.jackrabbit.webdav.lock.LockManager Import org.apache.jackrabbit.webdav.lock.SimpleLockManager Import org.apache.jackrabbit.webdav.simple.DavSessionProviderImpl Import org.apache.jackrabbit.webdav.simple.ResourceConfig Import org.apache.jackrabbit.webdav.simple.ResourceFactoryImpl Import org.apache.log4j.Logger Import javax.jcr.Repository Import javax.servlet.ServletContext Import javax.servlet.ServletException Import java.io.IOException Import java.net.MalformedURLException ClassDeclaration Modifier public /**
 * WebdavServlet provides webdav support (level 1 and 2 complient) for repository
 * resources.
 */ SimpleWebdavServlet FieldDeclaration /**
     * the default logger
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType SimpleWebdavServlet getLogger FieldDeclaration /**
     * init param name of the repository prefix
     */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_RESOURCE_PATH_PREFIX Literal ""resource-path-prefix"" FieldDeclaration /**
     * Name of the optional init parameter that defines the value of the
     * 'WWW-Authenticate' header.<p/>
     * If the parameter is omitted the default value
     * {@link #DEFAULT_AUTHENTICATE_HEADER ""Basic Realm=Jackrabbit Webdav Server""}
     * is used.
     *
     * @see #getAuthenticateHeaderValue()
     */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_AUTHENTICATE_HEADER Literal ""authenticate-header"" FieldDeclaration /** the 'missing-auth-mapping' init parameter */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_MISSING_AUTH_MAPPING Literal ""missing-auth-mapping"" FieldDeclaration /**
     * Name of the init parameter that specify a separate configuration used
     * for filtering the resources displayed.
     */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_RESOURCE_CONFIG Literal ""resource-config"" FieldDeclaration /**
     * Servlet context attribute used to store the path prefix instead of
     * having a static field with this servlet. The latter causes problems
     * when running multiple
     */ Modifier public final static ReferenceType String VariableDeclarator CTX_ATTR_RESOURCE_PATH_PREFIX Literal ""jackrabbit.webdav.simple.resourcepath"" FieldDeclaration /**
     * the resource path prefix
     */ Modifier private ReferenceType String VariableDeclarator resourcePathPrefix FieldDeclaration /**
     * Header value as specified in the {@link #INIT_PARAM_AUTHENTICATE_HEADER} parameter.
     */ Modifier private ReferenceType String VariableDeclarator authenticate_header FieldDeclaration /**
     * Map used to remember any webdav lock created without being reflected
     * in the underlying repository.
     * This is needed because some clients rely on a successful locking
     * mechanism in order to perform properly (e.g. mac OSX built-in dav client)
     */ Modifier private ReferenceType LockManager VariableDeclarator lockManager FieldDeclaration /**
     * the resource factory
     */ Modifier private ReferenceType DavResourceFactory VariableDeclarator resourceFactory FieldDeclaration /**
     * the locator factory
     */ Modifier private ReferenceType DavLocatorFactory VariableDeclarator locatorFactory FieldDeclaration /**
     * the jcr repository
     */ Modifier private ReferenceType Repository VariableDeclarator repository FieldDeclaration /**
     * the webdav session provider
     */ Modifier private ReferenceType DavSessionProvider VariableDeclarator davSessionProvider FieldDeclaration /**
     * the repository session provider
     */ Modifier private ReferenceType SessionProvider VariableDeclarator sessionProvider FieldDeclaration /**
     * The config
     */ Modifier private ReferenceType ResourceConfig VariableDeclarator config MethodDeclaration /**
     * Init this servlet
     *
     * @throws ServletException
     */ Modifier public init ServletException StatementExpression SuperMethodInvocation init StatementExpression Assignment MemberReference resourcePathPrefix MethodInvocation MemberReference INIT_PARAM_RESOURCE_PATH_PREFIX getInitParameter = IfStatement BinaryOperation == MemberReference resourcePathPrefix Literal null BlockStatement StatementExpression MethodInvocation log Literal ""Missing path prefix > setting to empty string."" debug StatementExpression Assignment MemberReference resourcePathPrefix Literal """" = IfStatement MethodInvocation resourcePathPrefix Literal ""/"" endsWith BlockStatement StatementExpression MethodInvocation log Literal ""Path prefix ends with '/' > removing trailing slash."" debug StatementExpression Assignment MemberReference resourcePathPrefix MethodInvocation resourcePathPrefix Literal 0 BinaryOperation - MethodInvocation resourcePathPrefix length Literal 1 substring = End End StatementExpression MethodInvocation MethodInvocation MemberReference CTX_ATTR_RESOURCE_PATH_PREFIX MemberReference resourcePathPrefix setAttribute getServletContext StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + MemberReference INIT_PARAM_RESOURCE_PATH_PREFIX Literal "" = '"" MemberReference resourcePathPrefix Literal ""'"" info StatementExpression Assignment MemberReference authenticate_header MethodInvocation MemberReference INIT_PARAM_AUTHENTICATE_HEADER getInitParameter = IfStatement BinaryOperation == MemberReference authenticate_header Literal null BlockStatement StatementExpression Assignment MemberReference authenticate_header MemberReference DEFAULT_AUTHENTICATE_HEADER = End StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""WWW-Authenticate header = '"" MemberReference authenticate_header Literal ""'"" info LocalVariableDeclaration ReferenceType String VariableDeclarator configParam MethodInvocation MemberReference INIT_PARAM_RESOURCE_CONFIG getInitParameter IfStatement BinaryOperation != MemberReference configParam Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference config ClassCreator ReferenceType ResourceConfig = StatementExpression MethodInvocation config MethodInvocation MethodInvocation MemberReference configParam getResource getServletContext parse CatchClause CatchClauseParameter MalformedURLException e StatementExpression MethodInvocation log Literal ""Unable to build resource filter provider."" debug End MethodDeclaration /**
     * Executes the respective method in the given webdav context.
     * The method is overridden since not all webdav methods should be
     * supported by this servlet.
     *
     * @param request
     * @param response
     * @param method
     * @param resource
     * @return
     * @throws ServletException
     * @throws IOException
     * @throws org.apache.jackrabbit.webdav.DavException
     */ Modifier protected BasicType boolean execute FormalParameter ReferenceType WebdavRequest request FormalParameter ReferenceType WebdavResponse response FormalParameter BasicType int method FormalParameter ReferenceType DavResource resource ServletException IOException DavException SwitchStatement MemberReference method SwitchStatementCase MemberReference DavMethods DAV_HEAD StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doHead BreakStatement SwitchStatementCase MemberReference DavMethods DAV_GET StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doGet BreakStatement SwitchStatementCase MemberReference DavMethods DAV_OPTIONS StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doOptions BreakStatement SwitchStatementCase MemberReference DavMethods DAV_PROPFIND StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doPropFind BreakStatement SwitchStatementCase MemberReference DavMethods DAV_PROPPATCH StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doPropPatch BreakStatement SwitchStatementCase MemberReference DavMethods DAV_PUT StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doPut BreakStatement SwitchStatementCase MemberReference DavMethods DAV_POST StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doPost BreakStatement SwitchStatementCase MemberReference DavMethods DAV_DELETE StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doDelete BreakStatement SwitchStatementCase MemberReference DavMethods DAV_COPY StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doCopy BreakStatement SwitchStatementCase MemberReference DavMethods DAV_MOVE StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doMove BreakStatement SwitchStatementCase MemberReference DavMethods DAV_MKCOL StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doMkCol BreakStatement SwitchStatementCase MemberReference DavMethods DAV_LOCK StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doLock BreakStatement SwitchStatementCase MemberReference DavMethods DAV_UNLOCK StatementExpression MethodInvocation MemberReference request MemberReference response MemberReference resource doUnlock BreakStatement SwitchStatementCase ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected BasicType boolean isPreconditionValid FormalParameter ReferenceType WebdavRequest request FormalParameter ReferenceType DavResource resource ReturnStatement BinaryOperation || MethodInvocation ! resource exists MethodInvocation request MemberReference resource matchesIfHeader MethodDeclaration /**
     * Returns the configured path prefix
     *
     * @return resourcePathPrefix
     * @see #INIT_PARAM_RESOURCE_PATH_PREFIX
     */ Modifier public ReferenceType String getPathPrefix ReturnStatement MemberReference resourcePathPrefix MethodDeclaration /**
     * Returns the configured path prefix
     *
     * @return resourcePathPrefix
     * @see #INIT_PARAM_RESOURCE_PATH_PREFIX
     */ Modifier public static ReferenceType String getPathPrefix FormalParameter ReferenceType ServletContext ctx ReturnStatement Cast ReferenceType String MethodInvocation ctx MemberReference CTX_ATTR_RESOURCE_PATH_PREFIX getAttribute MethodDeclaration /**
     * Returns the <code>DavLocatorFactory</code>. If no locator factory has
     * been set or created a new instance of {@link org.apache.jackrabbit.webdav.simple.LocatorFactoryImpl} is
     * returned.
     *
     * @return the locator factory
     * @see AbstractWebdavServlet#getLocatorFactory()
     */ Modifier public ReferenceType DavLocatorFactory getLocatorFactory IfStatement BinaryOperation == MemberReference locatorFactory Literal null BlockStatement StatementExpression Assignment MemberReference locatorFactory ClassCreator ReferenceType DavLocatorFactoryImpl MemberReference resourcePathPrefix = End ReturnStatement MemberReference locatorFactory MethodDeclaration /**
     * Sets the <code>DavLocatorFactory</code>.
     *
     * @param locatorFactory
     * @see AbstractWebdavServlet#setLocatorFactory(DavLocatorFactory)
     */ Modifier public setLocatorFactory FormalParameter ReferenceType DavLocatorFactory locatorFactory StatementExpression Assignment This MemberReference locatorFactory MemberReference locatorFactory = MethodDeclaration /**
     * Returns the <code>LockManager</code>. If no lock manager has
     * been set or created a new instance of {@link SimpleLockManager} is
     * returned.
     *
     * @return the lock manager
     */ Modifier public ReferenceType LockManager getLockManager IfStatement BinaryOperation == MemberReference lockManager Literal null BlockStatement StatementExpression Assignment MemberReference lockManager ClassCreator ReferenceType SimpleLockManager = End ReturnStatement MemberReference lockManager MethodDeclaration /**
     * Sets the <code>LockManager</code>.
     *
     * @param lockManager
     */ Modifier public setLockManager FormalParameter ReferenceType LockManager lockManager StatementExpression Assignment This MemberReference lockManager MemberReference lockManager = MethodDeclaration /**
     * Returns the <code>DavResourceFactory</code>. If no request factory has
     * been set or created a new instance of {@link ResourceFactoryImpl} is
     * returned.
     *
     * @return the resource factory
     * @see org.apache.jackrabbit.server.AbstractWebdavServlet#getResourceFactory()
     */ Modifier public ReferenceType DavResourceFactory getResourceFactory IfStatement BinaryOperation == MemberReference resourceFactory Literal null BlockStatement StatementExpression Assignment MemberReference resourceFactory ClassCreator ReferenceType ResourceFactoryImpl MethodInvocation getLockManager MethodInvocation getResourceConfig = End ReturnStatement MemberReference resourceFactory MethodDeclaration /**
     * Sets the <code>DavResourceFactory</code>.
     *
     * @param resourceFactory
     * @see AbstractWebdavServlet#setResourceFactory(org.apache.jackrabbit.webdav.DavResourceFactory)
     */ Modifier public setResourceFactory FormalParameter ReferenceType DavResourceFactory resourceFactory StatementExpression Assignment This MemberReference resourceFactory MemberReference resourceFactory = MethodDeclaration /**
     * Returns the <code>SessionProvider</code>. If no session provider has been
     * set or created a new instance of {@link SessionProviderImpl} that extracts
     * credentials from the request's <code>Authorization</code> header is
     * returned.
     *
     * @return the session provider
     */ Modifier public synchronized ReferenceType SessionProvider getSessionProvider IfStatement BinaryOperation == MemberReference sessionProvider Literal null BlockStatement StatementExpression Assignment MemberReference sessionProvider ClassCreator ReferenceType SessionProviderImpl ClassCreator ReferenceType BasicCredentialsProvider MethodInvocation MemberReference INIT_PARAM_MISSING_AUTH_MAPPING getInitParameter = End ReturnStatement MemberReference sessionProvider MethodDeclaration /**
     * Sets the <code>SessionProvider</code>.
     *
     * @param sessionProvider
     */ Modifier public synchronized setSessionProvider FormalParameter ReferenceType SessionProvider sessionProvider StatementExpression Assignment This MemberReference sessionProvider MemberReference sessionProvider = MethodDeclaration /**
     * Returns the <code>DavSessionProvider</code>. If no session provider has
     * been set or created a new instance of {@link DavSessionProviderImpl}
     * is returned.
     *
     * @return the session provider
     * @see org.apache.jackrabbit.server.AbstractWebdavServlet#getDavSessionProvider()
     */ Modifier public synchronized ReferenceType DavSessionProvider getDavSessionProvider IfStatement BinaryOperation == MemberReference davSessionProvider Literal null BlockStatement StatementExpression Assignment MemberReference davSessionProvider ClassCreator ReferenceType DavSessionProviderImpl MethodInvocation getRepository MethodInvocation getSessionProvider = End ReturnStatement MemberReference davSessionProvider MethodDeclaration /**
     * Sets the <code>DavSessionProvider</code>.
     *
     * @param sessionProvider
     * @see AbstractWebdavServlet#setDavSessionProvider(org.apache.jackrabbit.webdav.DavSessionProvider)
     */ Modifier public synchronized setDavSessionProvider FormalParameter ReferenceType DavSessionProvider sessionProvider StatementExpression Assignment This MemberReference davSessionProvider MemberReference sessionProvider = MethodDeclaration /**
     * Returns the header value retrieved from the {@link #INIT_PARAM_AUTHENTICATE_HEADER}
     * init parameter. If the parameter is missing, the value defaults to
     * {@link #DEFAULT_AUTHENTICATE_HEADER}.
     *
     * @return the header value retrieved from the corresponding init parameter
     * or {@link #DEFAULT_AUTHENTICATE_HEADER}.
     * @see org.apache.jackrabbit.server.AbstractWebdavServlet#getAuthenticateHeaderValue()
     */ Modifier public ReferenceType String getAuthenticateHeaderValue ReturnStatement MemberReference authenticate_header MethodDeclaration /**
     * Returns the resource configuration to be applied
     *
     * @return the resource configuration.
     */ Modifier public ReferenceType ResourceConfig getResourceConfig IfStatement BinaryOperation == MemberReference config Literal null BlockStatement StatementExpression Assignment MemberReference config ClassCreator ReferenceType ResourceConfig = End ReturnStatement MemberReference config MethodDeclaration /**
     * Set the resource configuration
     *
     * @param config
     */ Modifier public setResourceConfig FormalParameter ReferenceType ResourceConfig config StatementExpression Assignment This MemberReference config MemberReference config = MethodDeclaration /**
     * Returns the <code>Repository</code>. If no repository has been set or
     * created the repository initialized by <code>RepositoryAccessServlet</code>
     * is returned.
     *
     * @return repository
     * @see RepositoryAccessServlet#getRepository(ServletContext)
     */ Modifier public ReferenceType Repository getRepository IfStatement BinaryOperation == MemberReference repository Literal null BlockStatement StatementExpression Assignment MemberReference repository MethodInvocation RepositoryAccessServlet MethodInvocation getServletContext getRepository = End ReturnStatement MemberReference repository MethodDeclaration /**
     * Sets the <code>Repository</code>.
     *
     * @param repository
     */ Modifier public setRepository FormalParameter ReferenceType Repository repository StatementExpression Assignment This MemberReference repository MemberReference repository = ReferenceType AbstractWebdavServlet",0
799,799,,1
468,468,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.xml Import org.apache.jackrabbit.name.IllegalNameException Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.name.UnknownPrefixException Import org.xml.sax.Attributes Import org.xml.sax.SAXException Import javax.jcr.InvalidSerializedDataException Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import java.io.IOException Import java.util.ArrayList Import java.util.Iterator Import java.util.Stack ClassDeclaration /**
 * <code>SysViewImportHandler</code>  ...
 */ SysViewImportHandler FieldDeclaration /**
     * stack of ImportState instances; an instance is pushed onto the stack
     * in the startElement method every time a sv:node element is encountered;
     * the same instance is popped from the stack in the endElement method
     * when the corresponding sv:node element is encountered.
     */ Modifier private final ReferenceType Stack VariableDeclarator stack ClassCreator ReferenceType Stack FieldDeclaration /**
     * fields used temporarily while processing sv:property and sv:value elements
     */ Modifier private ReferenceType QName VariableDeclarator currentPropName FieldDeclaration Modifier private BasicType int VariableDeclarator currentPropType MemberReference PropertyType UNDEFINED FieldDeclaration Modifier private ReferenceType ArrayList VariableDeclarator currentPropValues ClassCreator ReferenceType ArrayList FieldDeclaration Modifier private ReferenceType AppendableValue VariableDeclarator currentPropValue ConstructorDeclaration /**
     * Constructs a new <code>SysViewImportHandler</code>.
     *
     * @param importer
     * @param nsContext
     */ SysViewImportHandler FormalParameter ReferenceType Importer importer FormalParameter ReferenceType NamespaceResolver nsContext StatementExpression SuperConstructorInvocation MemberReference importer MemberReference nsContext MethodDeclaration Modifier private processNode FormalParameter ReferenceType ImportState state FormalParameter BasicType boolean start FormalParameter BasicType boolean end SAXException IfStatement BinaryOperation && MemberReference ! start MemberReference ! end BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType Importer ReferenceType NodeInfo VariableDeclarator node ClassCreator ReferenceType Importer ReferenceType NodeInfo StatementExpression MethodInvocation node MemberReference state nodeName setName StatementExpression MethodInvocation node MemberReference state nodeTypeName setNodeTypeName IfStatement BinaryOperation != MemberReference state mixinNames Literal null BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator mixins Cast ReferenceType QName MethodInvocation state.mixinNames ArrayCreator ReferenceType QName MethodInvocation state.mixinNames size toArray StatementExpression MethodInvocation node MemberReference mixins setMixinNames End StatementExpression MethodInvocation node MemberReference state uuid setUUID TryStatement IfStatement MemberReference start BlockStatement StatementExpression MethodInvocation importer MemberReference node MemberReference state props MemberReference nsContext startNode ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation state.props iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Importer ReferenceType PropInfo VariableDeclarator pi Cast ReferenceType Importer ReferenceType PropInfo MethodInvocation iter next StatementExpression MethodInvocation MemberReference pi disposePropertyValues End End IfStatement MemberReference end BlockStatement StatementExpression MethodInvocation importer MemberReference node endNode End CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType SAXException MemberReference re MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public startDocument SAXException TryStatement StatementExpression MethodInvocation importer start CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType SAXException MemberReference re MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public startElement FormalParameter ReferenceType String namespaceURI FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName FormalParameter ReferenceType Attributes atts SAXException IfStatement MethodInvocation ! QName.NS_SV_URI MemberReference namespaceURI equals BlockStatement ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""invalid namespace for element in system view xml document: "" MemberReference namespaceURI End IfStatement MethodInvocation SysViewSAXEventGenerator.NODE_ELEMENT MemberReference localName equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation atts MemberReference SysViewSAXEventGenerator PREFIXED_NAME_ATTRIBUTE getValue IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException Literal ""missing mandatory sv:name attribute of element sv:node"" End IfStatement MethodInvocation ! stack isEmpty BlockStatement LocalVariableDeclaration ReferenceType ImportState VariableDeclarator current Cast ReferenceType ImportState MethodInvocation stack peek IfStatement MemberReference ! current started BlockStatement StatementExpression MethodInvocation MemberReference current Literal true Literal false processNode StatementExpression Assignment MemberReference current started Literal true = End End LocalVariableDeclaration ReferenceType ImportState VariableDeclarator state ClassCreator ReferenceType ImportState TryStatement StatementExpression Assignment MemberReference state nodeName MethodInvocation QName MemberReference name MemberReference nsContext fromJCRName = CatchClause CatchClauseParameter IllegalNameException ine ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""illegal node name: "" MemberReference name MemberReference ine CatchClause CatchClauseParameter UnknownPrefixException upe ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""illegal node name: "" MemberReference name MemberReference upe StatementExpression MethodInvocation stack MemberReference state push IfStatement MethodInvocation SysViewSAXEventGenerator.PROPERTY_ELEMENT MemberReference localName equals BlockStatement StatementExpression MethodInvocation currentPropValues clear LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation atts MemberReference SysViewSAXEventGenerator PREFIXED_NAME_ATTRIBUTE getValue IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException Literal ""missing mandatory sv:name attribute of element sv:property"" End TryStatement StatementExpression Assignment MemberReference currentPropName MethodInvocation QName MemberReference name MemberReference nsContext fromJCRName = CatchClause CatchClauseParameter IllegalNameException ine ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""illegal property name: "" MemberReference name MemberReference ine CatchClause CatchClauseParameter UnknownPrefixException upe ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""illegal property name: "" MemberReference name MemberReference upe LocalVariableDeclaration ReferenceType String VariableDeclarator type MethodInvocation atts MemberReference SysViewSAXEventGenerator PREFIXED_TYPE_ATTRIBUTE getValue IfStatement BinaryOperation == MemberReference type Literal null BlockStatement ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException Literal ""missing mandatory sv:type attribute of element sv:property"" End StatementExpression Assignment MemberReference currentPropType MethodInvocation PropertyType MemberReference type valueFromName = IfStatement MethodInvocation SysViewSAXEventGenerator.VALUE_ELEMENT MemberReference localName equals BlockStatement StatementExpression Assignment MemberReference currentPropValue ClassCreator ReferenceType BufferedStringValue = BlockStatement ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""unexpected element found in system view xml document: "" MemberReference localName End End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public characters FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length SAXException IfStatement BinaryOperation != MemberReference currentPropValue Literal null BlockStatement TryStatement StatementExpression MethodInvocation currentPropValue MemberReference ch MemberReference start MemberReference length append CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType SAXException Literal ""error while processing property value"" MemberReference ioe End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ignorableWhitespace FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length SAXException IfStatement BinaryOperation != MemberReference currentPropValue Literal null BlockStatement TryStatement StatementExpression MethodInvocation currentPropValue MemberReference ch MemberReference start MemberReference length append CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType SAXException Literal ""error while processing property value"" MemberReference ioe End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public endElement FormalParameter ReferenceType String namespaceURI FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName SAXException LocalVariableDeclaration ReferenceType ImportState VariableDeclarator state Cast ReferenceType ImportState MethodInvocation stack peek IfStatement MethodInvocation SysViewSAXEventGenerator.NODE_ELEMENT MemberReference localName equals BlockStatement IfStatement MemberReference ! state started BlockStatement StatementExpression MethodInvocation MemberReference state Literal true Literal true processNode StatementExpression Assignment MemberReference state started Literal true = BlockStatement StatementExpression MethodInvocation MemberReference state Literal false Literal true processNode End StatementExpression MethodInvocation stack pop IfStatement MethodInvocation SysViewSAXEventGenerator.PROPERTY_ELEMENT MemberReference localName equals BlockStatement IfStatement MethodInvocation currentPropName MemberReference QName JCR_PRIMARYTYPE equals BlockStatement LocalVariableDeclaration ReferenceType AppendableValue VariableDeclarator val Cast ReferenceType AppendableValue MethodInvocation currentPropValues Literal 0 get LocalVariableDeclaration ReferenceType String VariableDeclarator s Literal null TryStatement StatementExpression Assignment MemberReference s MethodInvocation val retrieve = StatementExpression Assignment MemberReference state nodeTypeName MethodInvocation QName MemberReference s MemberReference nsContext fromJCRName = CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType SAXException Literal ""error while retrieving value"" MemberReference ioe CatchClause CatchClauseParameter IllegalNameException ine ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""illegal node type name: "" MemberReference s MemberReference ine CatchClause CatchClauseParameter UnknownPrefixException upe ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""illegal node type name: "" MemberReference s MemberReference upe IfStatement MethodInvocation currentPropName MemberReference QName JCR_MIXINTYPES equals BlockStatement IfStatement BinaryOperation == MemberReference state mixinNames Literal null BlockStatement StatementExpression Assignment MemberReference state mixinNames ClassCreator ReferenceType ArrayList MethodInvocation currentPropValues size = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation currentPropValues size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType AppendableValue VariableDeclarator val Cast ReferenceType AppendableValue MethodInvocation currentPropValues MemberReference i get LocalVariableDeclaration ReferenceType String VariableDeclarator s Literal null TryStatement StatementExpression Assignment MemberReference s MethodInvocation val retrieve = LocalVariableDeclaration ReferenceType QName VariableDeclarator mixin MethodInvocation QName MemberReference s MemberReference nsContext fromJCRName StatementExpression MethodInvocation state.mixinNames MemberReference mixin add CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType SAXException Literal ""error while retrieving value"" MemberReference ioe CatchClause CatchClauseParameter IllegalNameException ine ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""illegal mixin type name: "" MemberReference s MemberReference ine CatchClause CatchClauseParameter UnknownPrefixException upe ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""illegal mixin type name: "" MemberReference s MemberReference upe End IfStatement MethodInvocation currentPropName MemberReference QName JCR_UUID equals BlockStatement LocalVariableDeclaration ReferenceType AppendableValue VariableDeclarator val Cast ReferenceType AppendableValue MethodInvocation currentPropValues Literal 0 get TryStatement StatementExpression Assignment MemberReference state uuid MethodInvocation val retrieve = CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType SAXException Literal ""error while retrieving value"" MemberReference ioe BlockStatement LocalVariableDeclaration ReferenceType Importer ReferenceType PropInfo VariableDeclarator prop ClassCreator ReferenceType Importer ReferenceType PropInfo StatementExpression MethodInvocation prop MemberReference currentPropName setName StatementExpression MethodInvocation prop MemberReference currentPropType setType StatementExpression MethodInvocation prop Cast ReferenceType Importer ReferenceType TextValue MethodInvocation currentPropValues ArrayCreator ReferenceType Importer ReferenceType TextValue MethodInvocation currentPropValues size toArray setValues StatementExpression MethodInvocation state.props MemberReference prop add End End End StatementExpression MethodInvocation currentPropValues clear IfStatement MethodInvocation SysViewSAXEventGenerator.VALUE_ELEMENT MemberReference localName equals BlockStatement StatementExpression MethodInvocation currentPropValues MemberReference currentPropValue add StatementExpression Assignment MemberReference currentPropValue Literal null = BlockStatement ThrowStatement ClassCreator ReferenceType SAXException ClassCreator ReferenceType InvalidSerializedDataException BinaryOperation + Literal ""invalid element in system view xml document: "" MemberReference localName End End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public endDocument SAXException TryStatement StatementExpression MethodInvocation importer end CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType SAXException MemberReference re ClassDeclaration ImportState FieldDeclaration /**
         * name of current node
         */ ReferenceType QName VariableDeclarator nodeName FieldDeclaration /**
         * primary type of current node
         */ ReferenceType QName VariableDeclarator nodeTypeName FieldDeclaration /**
         * list of mixin types of current node
         */ ReferenceType ArrayList VariableDeclarator mixinNames FieldDeclaration /**
         * uuid of current node
         */ ReferenceType String VariableDeclarator uuid FieldDeclaration /**
         * list of PropInfo instances representing properties of current node
         */ ReferenceType ArrayList VariableDeclarator props ClassCreator ReferenceType ArrayList FieldDeclaration /**
         * flag indicating whether startNode() has been called for current node
         */ BasicType boolean VariableDeclarator started Literal false ReferenceType TargetImportHandler",0
302,302,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.xml Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.util.TransientFileFactory Import org.apache.log4j.Logger Import org.xml.sax.helpers.DefaultHandler Import java.io.File Import java.io.FileReader Import java.io.IOException Import java.io.Reader Import java.io.StringReader Import java.io.Writer Import java.io.FileOutputStream Import java.io.OutputStreamWriter ClassDeclaration Modifier abstract /**
 * <code>TargetImportHandler</code> serves as the base class for the concrete
 * classes <code>{@link DocViewImportHandler}</code> and
 * <code>{@link SysViewImportHandler}</code>.
 */ TargetImportHandler FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType TargetImportHandler getLogger FieldDeclaration Modifier final protected ReferenceType Importer VariableDeclarator importer FieldDeclaration Modifier final protected ReferenceType NamespaceResolver VariableDeclarator nsContext ConstructorDeclaration Modifier protected TargetImportHandler FormalParameter ReferenceType Importer importer FormalParameter ReferenceType NamespaceResolver nsContext StatementExpression Assignment This MemberReference importer MemberReference importer = StatementExpression Assignment This MemberReference nsContext MemberReference nsContext = MethodDeclaration /**
     * Disposes all instances of <code>AppendableValue</code> contained in the
     * given property info's value array.
     *
     * @param prop property info
     */ Modifier protected disposePropertyValues FormalParameter ReferenceType Importer ReferenceType PropInfo prop LocalVariableDeclaration ReferenceType Importer ReferenceType TextValue VariableDeclarator vals MethodInvocation prop getValues ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference vals length MemberReference ++ i BlockStatement IfStatement BinaryOperation instanceof MemberReference ArraySelector MemberReference i vals ReferenceType AppendableValue BlockStatement TryStatement StatementExpression Cast ReferenceType AppendableValue MemberReference ArraySelector MemberReference i vals CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation log Literal ""error while disposing temporary value"" MemberReference ioe warn End End InterfaceDeclaration Modifier public /**
     * <code>AppendableValue</code> represents a serialized value that is
     * appendable.
     * <p/>
     * <b>Important:</b> Note that in order to free resources
     * <code>{@link #dispose()}</code> should be called as soon as an
     * <code>AppendableValue</code> object is not used anymore.
     */ AppendableValue MethodDeclaration /**
         * Append a portion of an array of characters.
         *
         * @param chars  the characters to be appended
         * @param start  the index of the first character to append
         * @param length the number of characters to append
         * @throws IOException if an I/O error occurs
         */ append FormalParameter BasicType char chars FormalParameter BasicType int start FormalParameter BasicType int length IOException MethodDeclaration /**
         * Close this value. Once a value has been closed,
         * further append() invocations will cause an IOException to be thrown.
         *
         * @throws IOException if an I/O error occurs
         */ close IOException MethodDeclaration /**
         * Dispose this value, i.e. free all bound resources. Once a value has
         * been disposed, further method invocations will cause an IOException
         * to be thrown.
         *
         * @throws IOException if an I/O error occurs
         */ dispose IOException ReferenceType Importer ReferenceType TextValue ClassDeclaration Modifier protected /**
     * <code>StringValue</code> represents an immutable serialized value.
     */ StringValue FieldDeclaration Modifier private final ReferenceType String VariableDeclarator value ConstructorDeclaration Modifier protected /**
         * Constructs a new <code>StringValue</code> representing the given
         * value.
         *
         * @param value
         */ StringValue FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType long length ReturnStatement MethodInvocation value length MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType String retrieve ReturnStatement MemberReference value MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType Reader reader ReturnStatement ClassCreator ReferenceType StringReader MemberReference value ReferenceType Importer ReferenceType TextValue ClassDeclaration Modifier protected /**
     * <code>BufferedStringValue</code> represents an appendable
     * serialized value that is either buffered in-memory or backed
     * by a temporary file if its size exceeds a certain limit.
     * <p/>
     * <b>Important:</b> Note that in order to free resources
     * <code>{@link #dispose()}</code> should be called as soon as
     * <code>BufferedStringValue</code> instance is not used anymore.
     */ BufferedStringValue FieldDeclaration /**
         * max size for buffering data in memory
         */ Modifier private final static BasicType int VariableDeclarator MAX_BUFFER_SIZE Literal 0x10000 FieldDeclaration /**
         * size of increment if capacity buffer needs to be enlarged
         */ Modifier private final static BasicType int VariableDeclarator BUFFER_INCREMENT Literal 0x2000 FieldDeclaration /**
         * in-memory buffer
         */ Modifier private BasicType char VariableDeclarator buffer FieldDeclaration /**
         * current position within buffer (size of actual data in buffer)
         */ Modifier private BasicType int VariableDeclarator bufferPos FieldDeclaration /**
         * backing temporary file created when size of data exceeds
         * MAX_BUFFER_SIZE
         */ Modifier private ReferenceType File VariableDeclarator tmpFile FieldDeclaration /**
         * writer used to write to tmpFile; writer & tmpFile are always
         * instantiated together, i.e. they are either both null or both not null.
         */ Modifier private ReferenceType Writer VariableDeclarator writer ConstructorDeclaration Modifier protected /**
         * Constructs a new empty <code>BufferedStringValue</code>.
         */ BufferedStringValue StatementExpression Assignment MemberReference buffer ArrayCreator BasicType char Literal 0x2000 = StatementExpression Assignment MemberReference bufferPos Literal 0 = StatementExpression Assignment MemberReference tmpFile Literal null = StatementExpression Assignment MemberReference writer Literal null = MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType long length IOException IfStatement BinaryOperation != MemberReference buffer Literal null BlockStatement ReturnStatement MemberReference bufferPos IfStatement BinaryOperation != MemberReference tmpFile Literal null BlockStatement StatementExpression MethodInvocation writer flush ReturnStatement MethodInvocation tmpFile length BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""this instance has already been disposed"" End End MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType String retrieve IOException IfStatement BinaryOperation != MemberReference buffer Literal null BlockStatement ReturnStatement ClassCreator ReferenceType String MemberReference buffer Literal 0 MemberReference bufferPos IfStatement BinaryOperation != MemberReference tmpFile Literal null BlockStatement StatementExpression MethodInvocation writer flush IfStatement BinaryOperation > MethodInvocation tmpFile length MemberReference Integer MAX_VALUE BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""size of value is too big, use reader()"" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer Cast BasicType int MethodInvocation tmpFile length LocalVariableDeclaration BasicType char VariableDeclarator chunk ArrayCreator BasicType char Literal 0x2000 LocalVariableDeclaration BasicType int VariableDeclarator read LocalVariableDeclaration ReferenceType Reader VariableDeclarator reader ClassCreator ReferenceType FileReader MemberReference tmpFile TryStatement WhileStatement BinaryOperation > Assignment MemberReference read MethodInvocation reader MemberReference chunk read = Literal - 1 BlockStatement StatementExpression MethodInvocation sb MemberReference chunk Literal 0 MemberReference read append End StatementExpression MethodInvocation reader close ReturnStatement MethodInvocation sb toString BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""this instance has already been disposed"" End End MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType Reader reader IOException IfStatement BinaryOperation != MemberReference buffer Literal null BlockStatement ReturnStatement ClassCreator ReferenceType StringReader ClassCreator ReferenceType String MemberReference buffer Literal 0 MemberReference bufferPos IfStatement BinaryOperation != MemberReference tmpFile Literal null BlockStatement StatementExpression MethodInvocation writer flush ReturnStatement ClassCreator ReferenceType FileReader MemberReference tmpFile BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""this instance has already been disposed"" End End MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public append FormalParameter BasicType char chars FormalParameter BasicType int start FormalParameter BasicType int length IOException IfStatement BinaryOperation != MemberReference buffer Literal null BlockStatement IfStatement BinaryOperation > BinaryOperation + MemberReference bufferPos MemberReference length MemberReference MAX_BUFFER_SIZE BlockStatement LocalVariableDeclaration ReferenceType TransientFileFactory VariableDeclarator fileFactory MethodInvocation TransientFileFactory getInstance StatementExpression Assignment MemberReference tmpFile MethodInvocation fileFactory Literal ""txt"" Literal null Literal null createTransientFile = LocalVariableDeclaration Modifier final ReferenceType FileOutputStream VariableDeclarator fout ClassCreator ReferenceType FileOutputStream MemberReference tmpFile StatementExpression Assignment MemberReference writer ClassCreator ReferenceType OutputStreamWriter MemberReference fout MethodDeclaration Modifier public flush IOException StatementExpression SuperMethodInvocation flush StatementExpression MethodInvocation fout MethodInvocation sync getFD = StatementExpression MethodInvocation writer MemberReference buffer Literal 0 MemberReference bufferPos write StatementExpression MethodInvocation writer MemberReference chars MemberReference start MemberReference length write StatementExpression Assignment MemberReference buffer Literal null = StatementExpression Assignment MemberReference bufferPos Literal 0 = BlockStatement IfStatement BinaryOperation > BinaryOperation + MemberReference bufferPos MemberReference length MemberReference buffer length BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator newBuffer ArrayCreator BasicType char BinaryOperation + MemberReference buffer length MemberReference BUFFER_INCREMENT StatementExpression MethodInvocation System MemberReference buffer Literal 0 MemberReference newBuffer Literal 0 MemberReference bufferPos arraycopy StatementExpression Assignment MemberReference buffer MemberReference newBuffer = End StatementExpression MethodInvocation System MemberReference chars MemberReference start MemberReference buffer MemberReference bufferPos MemberReference length arraycopy StatementExpression Assignment MemberReference bufferPos MemberReference length += End IfStatement BinaryOperation != MemberReference tmpFile Literal null BlockStatement StatementExpression MethodInvocation writer MemberReference chars MemberReference start MemberReference length write BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""this instance has already been disposed"" End End MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public close IOException IfStatement BinaryOperation != MemberReference buffer Literal null BlockStatement IfStatement BinaryOperation != MemberReference tmpFile Literal null BlockStatement StatementExpression MethodInvocation writer close BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""this instance has already been disposed"" End End MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public dispose IOException IfStatement BinaryOperation != MemberReference buffer Literal null BlockStatement StatementExpression Assignment MemberReference buffer Literal null = StatementExpression Assignment MemberReference bufferPos Literal 0 = IfStatement BinaryOperation != MemberReference tmpFile Literal null BlockStatement StatementExpression MethodInvocation writer close StatementExpression MethodInvocation tmpFile delete StatementExpression Assignment MemberReference tmpFile Literal null = StatementExpression Assignment MemberReference writer Literal null = BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""this instance has already been disposed"" End End ReferenceType AppendableValue ReferenceType DefaultHandler",1
472,472,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import javax.jcr.RepositoryException Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory Import javax.jcr.version.VersionIterator Import java.util.Calendar ClassDeclaration Modifier public /**
 * This Class implements a generic version selector that either selects a
 * version by name, label or creation date. If no version is found and the
 * 'returnLatest' flag is set to <code>true</code>, the latest version is
 * returned.
 */ GenericVersionSelector FieldDeclaration /**
     * a versionname hint
     */ Modifier private ReferenceType String VariableDeclarator name Literal null FieldDeclaration /**
     * a versionlabel hint
     */ Modifier private ReferenceType String VariableDeclarator label Literal null FieldDeclaration /**
     * a version date hint
     */ Modifier private ReferenceType Calendar VariableDeclarator date Literal null FieldDeclaration /**
     * flag indicating that it should return the latest version, if no other found
     */ Modifier private BasicType boolean VariableDeclarator returnLatest Literal true ConstructorDeclaration Modifier public /**
     * Creates a default <code>GenericVersionSelector</code> that always selects
     * the latest version.
     */ GenericVersionSelector ConstructorDeclaration Modifier public /**
     * Creates a <code>GenericVersionSelector</code> that will try to select a
     * version with the given label.
     *
     * @param label
     */ GenericVersionSelector FormalParameter ReferenceType String label StatementExpression Assignment This MemberReference label MemberReference label = ConstructorDeclaration Modifier public /**
     * Creates a <code>GenericVersionSelector</code> that will select the oldest
     * version of all those that are more recent than the given date.
     *
     * @param date
     */ GenericVersionSelector FormalParameter ReferenceType Calendar date StatementExpression Assignment This MemberReference date MemberReference date = MethodDeclaration /**
     * Returns the name hint.
     *
     * @return
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * Sets the name hint
     *
     * @param name
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * Returns the label hint
     *
     * @return
     */ Modifier public ReferenceType String getLabel ReturnStatement MemberReference label MethodDeclaration /**
     * Sets the label hint
     *
     * @param label
     */ Modifier public setLabel FormalParameter ReferenceType String label StatementExpression Assignment This MemberReference label MemberReference label = MethodDeclaration /**
     * Returns the date hint
     *
     * @return
     */ Modifier public ReferenceType Calendar getDate ReturnStatement MemberReference date MethodDeclaration /**
     * Sets the date hint
     *
     * @param date
     */ Modifier public setDate FormalParameter ReferenceType Calendar date StatementExpression Assignment This MemberReference date MemberReference date = MethodDeclaration /**
     * Returns the flag, if the latest version should be selected, if no
     * version can be found using the given hint.
     *
     * @return
     */ Modifier public BasicType boolean isReturnLatest ReturnStatement MemberReference returnLatest MethodDeclaration /**
     * Sets the flag, if the latest version should be selected, if no
     * version can be found using the given hint.
     *
     * @param returnLatest
     */ Modifier public setReturnLatest FormalParameter BasicType boolean returnLatest StatementExpression Assignment This MemberReference returnLatest MemberReference returnLatest = MethodDeclaration /**
     * Selects a version from the given version history using the previously
     * assigned hint in the following order: name, label, date, latest.
     *
     * @param versionHistory
     * @return
     * @throws RepositoryException
     */ Modifier public ReferenceType Version select FormalParameter ReferenceType VersionHistory versionHistory RepositoryException LocalVariableDeclaration ReferenceType Version VariableDeclarator selected Literal null IfStatement BinaryOperation != MemberReference name Literal null BlockStatement StatementExpression Assignment MemberReference selected MethodInvocation MemberReference versionHistory MemberReference name selectByName = End IfStatement BinaryOperation && BinaryOperation == MemberReference selected Literal null BinaryOperation != MemberReference label Literal null BlockStatement StatementExpression Assignment MemberReference selected MethodInvocation MemberReference versionHistory MemberReference label selectByLabel = End IfStatement BinaryOperation && BinaryOperation == MemberReference selected Literal null BinaryOperation != MemberReference date Literal null BlockStatement StatementExpression Assignment MemberReference selected MethodInvocation MemberReference versionHistory MemberReference date selectByDate = End IfStatement BinaryOperation && BinaryOperation == MemberReference selected Literal null MemberReference returnLatest BlockStatement StatementExpression Assignment MemberReference selected MethodInvocation MemberReference versionHistory Literal null selectByDate = End ReturnStatement MemberReference selected MethodDeclaration /**
     * Selects a version by version name.
     *
     * @param history
     * @param name
     * @return the version with the given name or <code>null</code>
     * @throws RepositoryException
     */ Modifier public static ReferenceType Version selectByName FormalParameter ReferenceType VersionHistory history FormalParameter ReferenceType String name RepositoryException IfStatement MethodInvocation history MemberReference name hasNode BlockStatement ReturnStatement MethodInvocation history MemberReference name getVersion BlockStatement ReturnStatement Literal null End MethodDeclaration /**
     * Selects a version by label
     *
     * @param history
     * @param label
     * @return the version with the given label or <code>null</code>
     * @throws RepositoryException
     */ Modifier public static ReferenceType Version selectByLabel FormalParameter ReferenceType VersionHistory history FormalParameter ReferenceType String label RepositoryException ReturnStatement MethodInvocation history MemberReference label getVersionByLabel MethodDeclaration /**
     * Selects a version by date.
     *
     * @param history
     * @param date
     * @return the latest version newer than the given date date or <code>null</code>
     * @throws RepositoryException
     */ Modifier public static ReferenceType Version selectByDate FormalParameter ReferenceType VersionHistory history FormalParameter ReferenceType Calendar date RepositoryException LocalVariableDeclaration BasicType long VariableDeclarator time TernaryExpression BinaryOperation != MemberReference date Literal null MethodInvocation date getTimeInMillis MemberReference Long MAX_VALUE LocalVariableDeclaration BasicType long VariableDeclarator latestDate MemberReference Long MIN_VALUE LocalVariableDeclaration ReferenceType Version VariableDeclarator latestVersion Literal null LocalVariableDeclaration ReferenceType VersionIterator VariableDeclarator iter MethodInvocation history getAllVersions WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Version VariableDeclarator v MethodInvocation iter nextVersion LocalVariableDeclaration BasicType long VariableDeclarator c MethodInvocation v MethodInvocation getTimeInMillis getCreated IfStatement BinaryOperation && BinaryOperation > MemberReference c MemberReference latestDate BinaryOperation <= MemberReference c MemberReference time BlockStatement StatementExpression Assignment MemberReference latestDate MemberReference c = StatementExpression Assignment MemberReference latestVersion MemberReference v = End End ReturnStatement MemberReference latestVersion ReferenceType VersionSelector",0
748,748,,1
88,88,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype Import org.apache.jackrabbit.name.QName Import javax.jcr.version.OnParentVersionAction ClassDeclaration Modifier public abstract /**
 * This abstract class implements the <code>ItemDef</code>
 * interface and additionally provides setter methods for the
 * various item definition attributes.
 */ ItemDefImpl FieldDeclaration /**
     * The name of the child item.
     */ Modifier private ReferenceType QName VariableDeclarator name MemberReference ItemDef ANY_NAME FieldDeclaration /**
     * The name of the declaring node type.
     */ Modifier protected ReferenceType QName VariableDeclarator declaringNodeType Literal null FieldDeclaration /**
     * The 'autoCreated' flag.
     */ Modifier private BasicType boolean VariableDeclarator autoCreated Literal false FieldDeclaration /**
     * The 'onParentVersion' attribute.
     */ Modifier private BasicType int VariableDeclarator onParentVersion MemberReference OnParentVersionAction COPY FieldDeclaration /**
     * The 'protected' flag.
     */ Modifier private BasicType boolean VariableDeclarator writeProtected Literal false FieldDeclaration /**
     * The 'mandatory' flag.
     */ Modifier private BasicType boolean VariableDeclarator mandatory Literal false ConstructorDeclaration Modifier public /**
     * Default constructor.
     */ ItemDefImpl MethodDeclaration /**
     * Sets the name of declaring node type.
     *
     * @param declaringNodeType name of the declaring node type (must not be
     *                          <code>null</code>)
     */ Modifier public setDeclaringNodeType FormalParameter ReferenceType QName declaringNodeType IfStatement BinaryOperation == MemberReference declaringNodeType Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""declaringNodeType can not be null"" End StatementExpression Assignment This MemberReference declaringNodeType MemberReference declaringNodeType = MethodDeclaration /**
     * Sets the name of the child item.
     *
     * @param name name of child item (must not be  <code>null</code>)
     */ Modifier public setName FormalParameter ReferenceType QName name IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""name can not be null"" End StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * Sets the 'autoCreated' flag.
     *
     * @param autoCreated a <code>boolean</code>
     */ Modifier public setAutoCreated FormalParameter BasicType boolean autoCreated StatementExpression Assignment This MemberReference autoCreated MemberReference autoCreated = MethodDeclaration /**
     * Sets the 'onParentVersion' attribute.
     *
     * @param onParentVersion any of the following constants:
     * <UL>
     *    <LI><code>OnParentVersionAction.COPY</code>
     *    <LI><code>OnParentVersionAction.VERSION</code>
     *    <LI><code>OnParentVersionAction.INITIALIZE</code>
     *    <LI><code>OnParentVersionAction.COMPUTE</code>
     *    <LI><code>OnParentVersionAction.IGNORE</code>
     *    <LI><code>OnParentVersionAction.ABORT</code>
     * </UL>
     */ Modifier public setOnParentVersion FormalParameter BasicType int onParentVersion StatementExpression Assignment This MemberReference onParentVersion MemberReference onParentVersion = MethodDeclaration /**
     * Sets the 'protected' flag.
     *
     * @param writeProtected a <code>boolean</code>
     */ Modifier public setProtected FormalParameter BasicType boolean writeProtected StatementExpression Assignment This MemberReference writeProtected MemberReference writeProtected = MethodDeclaration /**
     * Sets the 'mandatory' flag.
     *
     * @param mandatory a <code>boolean</code>
     */ Modifier public setMandatory FormalParameter BasicType boolean mandatory StatementExpression Assignment This MemberReference mandatory MemberReference mandatory = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType QName getDeclaringNodeType ReturnStatement MemberReference declaringNodeType MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType QName getName ReturnStatement MemberReference name MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isAutoCreated ReturnStatement MemberReference autoCreated MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int getOnParentVersion ReturnStatement MemberReference onParentVersion MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isProtected ReturnStatement MemberReference writeProtected MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isMandatory ReturnStatement MemberReference mandatory MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean definesResidual ReturnStatement MethodInvocation name MemberReference ItemDef ANY_NAME equals MethodDeclaration /**
     * Compares two item definitions for equality. Returns <code>true</code>
     * if the given object is an item defintion and has the same attributes
     * as this item definition.
     *
     * @param obj the object to compare this item definition with
     * @return <code>true</code> if the object is equal to this item definition,
     *         <code>false</code> otherwise
     * @see Object#equals(Object)
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType ItemDefImpl BlockStatement LocalVariableDeclaration ReferenceType ItemDefImpl VariableDeclarator other Cast ReferenceType ItemDefImpl MemberReference obj ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && TernaryExpression BinaryOperation == MemberReference declaringNodeType Literal null BinaryOperation == MemberReference other declaringNodeType Literal null MethodInvocation declaringNodeType MemberReference other declaringNodeType equals TernaryExpression BinaryOperation == MemberReference name Literal null BinaryOperation == MemberReference other name Literal null MethodInvocation name MemberReference other name equals BinaryOperation == MemberReference autoCreated MemberReference other autoCreated BinaryOperation == MemberReference onParentVersion MemberReference other onParentVersion BinaryOperation == MemberReference writeProtected MemberReference other writeProtected BinaryOperation == MemberReference mandatory MemberReference other mandatory End ReturnStatement Literal false MethodDeclaration /**
     * Returns zero to satisfy the Object equals/hashCode contract.
     * This class is mutable and not meant to be used as a hash key.
     *
     * @return always zero
     * @see Object#hashCode()
     */ Modifier public BasicType int hashCode ReturnStatement Literal 0 ReferenceType ItemDef",0
53,53,"CompilationUnit PackageDeclaration org.apache.jackrabbit.decorator Import javax.jcr.Item Import javax.jcr.Node Import javax.jcr.Property Import javax.jcr.Repository Import javax.jcr.Session Import javax.jcr.Workspace Import javax.jcr.ValueFactory Import javax.jcr.ItemVisitor Import javax.jcr.query.Query Import javax.jcr.query.QueryResult Import javax.jcr.query.QueryManager Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory Import javax.jcr.lock.Lock ClassDeclaration Modifier public /**
 * Default implementation of a {@link DecoratorFactory}. All decorator instances
 * simply wrap the original instance and forward the call to it.
 */ DefaultDecoratorFactory MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Repository getRepositoryDecorator FormalParameter ReferenceType Repository repository ReturnStatement ClassCreator ReferenceType RepositoryDecorator This MemberReference repository MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Session getSessionDecorator FormalParameter ReferenceType Repository repository FormalParameter ReferenceType Session session ReturnStatement ClassCreator ReferenceType SessionDecorator This MemberReference repository MemberReference session MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Workspace getWorkspaceDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType Workspace workspace ReturnStatement ClassCreator ReferenceType WorkspaceDecorator This MemberReference session MemberReference workspace MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Node getNodeDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType Node node IfStatement BinaryOperation instanceof MemberReference node ReferenceType Version BlockStatement ReturnStatement MethodInvocation MemberReference session Cast ReferenceType Version MemberReference node getVersionDecorator IfStatement BinaryOperation instanceof MemberReference node ReferenceType VersionHistory BlockStatement ReturnStatement MethodInvocation MemberReference session Cast ReferenceType VersionHistory MemberReference node getVersionHistoryDecorator BlockStatement ReturnStatement ClassCreator ReferenceType NodeDecorator This MemberReference session MemberReference node End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Property getPropertyDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType Property property ReturnStatement ClassCreator ReferenceType PropertyDecorator This MemberReference session MemberReference property MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Lock getLockDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType Lock lock ReturnStatement ClassCreator ReferenceType LockDecorator This MemberReference session MemberReference lock MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Version getVersionDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType Version version ReturnStatement ClassCreator ReferenceType VersionDecorator This MemberReference session MemberReference version MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType VersionHistory getVersionHistoryDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType VersionHistory versionHistory ReturnStatement ClassCreator ReferenceType VersionHistoryDecorator This MemberReference session MemberReference versionHistory MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Item getItemDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType Item item IfStatement BinaryOperation instanceof MemberReference item ReferenceType Version BlockStatement ReturnStatement MethodInvocation MemberReference session Cast ReferenceType Version MemberReference item getVersionDecorator IfStatement BinaryOperation instanceof MemberReference item ReferenceType VersionHistory BlockStatement ReturnStatement MethodInvocation MemberReference session Cast ReferenceType VersionHistory MemberReference item getVersionHistoryDecorator IfStatement BinaryOperation instanceof MemberReference item ReferenceType Node BlockStatement ReturnStatement MethodInvocation MemberReference session Cast ReferenceType Node MemberReference item getNodeDecorator IfStatement BinaryOperation instanceof MemberReference item ReferenceType Property BlockStatement ReturnStatement MethodInvocation MemberReference session Cast ReferenceType Property MemberReference item getPropertyDecorator BlockStatement ReturnStatement ClassCreator ReferenceType ItemDecorator This MemberReference session MemberReference item End End End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType QueryManager getQueryManagerDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType QueryManager queryManager ReturnStatement ClassCreator ReferenceType QueryManagerDecorator This MemberReference session MemberReference queryManager MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Query getQueryDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType Query query ReturnStatement ClassCreator ReferenceType QueryDecorator This MemberReference session MemberReference query MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType QueryResult getQueryResultDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType QueryResult result ReturnStatement ClassCreator ReferenceType QueryResultDecorator This MemberReference session MemberReference result MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType ValueFactory getValueFactoryDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType ValueFactory valueFactory ReturnStatement ClassCreator ReferenceType ValueFactoryDecorator This MemberReference session MemberReference valueFactory MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType ItemVisitor getItemVisitorDecorator FormalParameter ReferenceType Session session FormalParameter ReferenceType ItemVisitor visitor ReturnStatement ClassCreator ReferenceType ItemVisitorDecorator This MemberReference session MemberReference visitor ReferenceType DecoratorFactory",0
770,770,,1
740,740,,0
608,608,,0
51,51,"CompilationUnit PackageDeclaration org.apache.jackrabbit.decorator Import org.apache.jackrabbit.decorator.DecoratorFactory Import org.apache.jackrabbit.decorator.NodeDecorator Import javax.jcr.query.QueryManager Import javax.jcr.query.Query Import javax.jcr.query.InvalidQueryException Import javax.jcr.RepositoryException Import javax.jcr.Node Import javax.jcr.Session ClassDeclaration Modifier public /**
 */ QueryManagerDecorator FieldDeclaration Modifier final protected ReferenceType QueryManager VariableDeclarator manager ConstructorDeclaration Modifier public QueryManagerDecorator FormalParameter ReferenceType DecoratorFactory factory FormalParameter ReferenceType Session session FormalParameter ReferenceType QueryManager manager StatementExpression SuperConstructorInvocation MemberReference factory MemberReference session StatementExpression Assignment This MemberReference manager MemberReference manager = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Query createQuery FormalParameter ReferenceType String statement FormalParameter ReferenceType String language InvalidQueryException RepositoryException ReturnStatement MethodInvocation factory MemberReference session MethodInvocation manager MemberReference statement MemberReference language createQuery getQueryDecorator MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Query getQuery FormalParameter ReferenceType Node node InvalidQueryException RepositoryException LocalVariableDeclaration ReferenceType Query VariableDeclarator query MethodInvocation manager MethodInvocation NodeDecorator MemberReference node unwrap getQuery ReturnStatement MethodInvocation factory MemberReference session MemberReference query getQueryDecorator MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType String getSupportedQueryLanguages RepositoryException ReturnStatement MethodInvocation manager getSupportedQueryLanguages ReferenceType AbstractDecorator ReferenceType QueryManager",0
184,184,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.orm Import java.io.Serializable ClassDeclaration Modifier public /**
 * <p>This class represents a node reference, that is to say a property that
 * points to a specific node.</p>
 */ ORMNodeReference FieldDeclaration Modifier private ReferenceType String VariableDeclarator targetId FieldDeclaration Modifier private ReferenceType String VariableDeclarator propertyParentUUID FieldDeclaration Modifier private ReferenceType String VariableDeclarator propertyName FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator dbId ConstructorDeclaration Modifier public ORMNodeReference ConstructorDeclaration Modifier public ORMNodeReference FormalParameter ReferenceType String targetId FormalParameter ReferenceType String propertyParentUUID FormalParameter ReferenceType String propertyName StatementExpression Assignment This MemberReference targetId MemberReference targetId = StatementExpression Assignment This MemberReference propertyParentUUID MemberReference propertyParentUUID = StatementExpression Assignment This MemberReference propertyName MemberReference propertyName = MethodDeclaration Modifier public setTargetId FormalParameter ReferenceType String targetId StatementExpression Assignment This MemberReference targetId MemberReference targetId = MethodDeclaration Modifier public setPropertyParentUUID FormalParameter ReferenceType String propertyParentUUID StatementExpression Assignment This MemberReference propertyParentUUID MemberReference propertyParentUUID = MethodDeclaration Modifier public setPropertyName FormalParameter ReferenceType String propertyName StatementExpression Assignment This MemberReference propertyName MemberReference propertyName = MethodDeclaration Modifier public setDbId FormalParameter ReferenceType Integer dbId StatementExpression Assignment This MemberReference dbId MemberReference dbId = MethodDeclaration Modifier public ReferenceType String getTargetId ReturnStatement MemberReference targetId MethodDeclaration Modifier public ReferenceType String getPropertyParentUUID ReturnStatement MemberReference propertyParentUUID MethodDeclaration Modifier public ReferenceType String getPropertyName ReturnStatement MemberReference propertyName MethodDeclaration Modifier public ReferenceType Integer getDbId ReturnStatement MemberReference dbId MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType ORMNodeParent BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ORMNodeReference VariableDeclarator right Cast ReferenceType ORMNodeReference MemberReference obj IfStatement BinaryOperation && BinaryOperation && MethodInvocation MethodInvocation MethodInvocation right getTargetId equals getTargetId MethodInvocation MethodInvocation MethodInvocation right getPropertyParentUUID equals getPropertyParentUUID MethodInvocation MethodInvocation MethodInvocation right getPropertyName equals getPropertyName BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier public BasicType int hashCode ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation getTargetId MethodInvocation getPropertyParentUUID MethodInvocation getPropertyName ReferenceType Serializable",0
644,644,,1
627,627,,0
339,339,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.lock Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Unlock the current working <code>Node</code>
 */ Unlock FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType Unlock getLog FieldDeclaration /** Node path key */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""Unlocking node at "" MemberReference path debug End StatementExpression MethodInvocation CommandHelper MethodInvocation unlock MemberReference ctx MemberReference path getNode ReturnStatement Literal false MethodDeclaration /**
     * @return the path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param pathKey
     *        the path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String pathKey StatementExpression Assignment This MemberReference pathKey MemberReference pathKey = ReferenceType Command",1
485,485,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.search Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.xml.Namespace Import org.apache.jackrabbit.webdav.search.SearchResource Import org.apache.jackrabbit.webdav.search.QueryGrammerSet Import org.apache.jackrabbit.webdav.search.SearchInfo Import org.apache.jackrabbit.webdav.jcr.JcrDavException Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.DavResourceLocator Import org.apache.jackrabbit.webdav.MultiStatus Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.webdav.MultiStatusResponse Import org.apache.jackrabbit.JcrConstants Import javax.jcr.query.QueryManager Import javax.jcr.query.Query Import javax.jcr.query.QueryResult Import javax.jcr.query.InvalidQueryException Import javax.jcr.query.RowIterator Import javax.jcr.query.Row Import javax.jcr.RepositoryException Import javax.jcr.Node Import javax.jcr.Value ClassDeclaration Modifier public /**
 * <code>SearchResourceImpl</code>...
 */ SearchResourceImpl FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType SearchResourceImpl getLogger FieldDeclaration Modifier private final ReferenceType DavSession VariableDeclarator session FieldDeclaration Modifier private final ReferenceType DavResourceLocator VariableDeclarator locator ConstructorDeclaration Modifier public SearchResourceImpl FormalParameter ReferenceType DavResourceLocator locator FormalParameter ReferenceType DavSession session StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference locator MemberReference locator = MethodDeclaration /**
     * @see SearchResource#getQueryGrammerSet()
     */ Modifier public ReferenceType QueryGrammerSet getQueryGrammerSet LocalVariableDeclaration ReferenceType QueryGrammerSet VariableDeclarator qgs ClassCreator ReferenceType QueryGrammerSet TryStatement LocalVariableDeclaration ReferenceType QueryManager VariableDeclarator qMgr MethodInvocation session MethodInvocation getWorkspace MethodInvocation getQueryManager getRepositorySession LocalVariableDeclaration ReferenceType String VariableDeclarator langs MethodInvocation qMgr getSupportedQueryLanguages ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference langs length MemberReference ++ i BlockStatement StatementExpression MethodInvocation qgs MemberReference ArraySelector MemberReference i langs MemberReference Namespace EMPTY_NAMESPACE addQueryLanguage End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage debug ReturnStatement MemberReference qgs MethodDeclaration /**
     * Execute the query defined by the given <code>sInfo</code>.
     *
     * @see SearchResource#search(org.apache.jackrabbit.webdav.search.SearchInfo)
     */ Modifier public ReferenceType MultiStatus search FormalParameter ReferenceType SearchInfo sInfo DavException TryStatement LocalVariableDeclaration ReferenceType Query VariableDeclarator q MethodInvocation MemberReference sInfo getQuery LocalVariableDeclaration ReferenceType QueryResult VariableDeclarator qR MethodInvocation q execute ReturnStatement MethodInvocation MemberReference qR queryResultToMultiStatus CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Create a query from the information present in the <code>sInfo</code>
     * object.<br>The following JCR specific logic is applied:
     * <ul>
     * <li>If the requested resource represents a node with nodetype nt:query, the
     * request body is ignored and the query defined with the node is executed
     * instead.</li>
     * <li>If the requested resource does not represent an existing item, the
     * specified query is persisted by calling {@link Query#storeAsNode(String)}.</li>
     * </ul>
     * @param sInfo defining the query to be executed
     * @return <code>Query</code> object.
     * @throws javax.jcr.query.InvalidQueryException if the query defined by <code>sInfo</code> is invalid
     * @throws RepositoryException the query manager cannot be accessed or if
     * another error occurs.
     * @throws DavException if <code>sInfo</code> is <code>null</code> and
     * the underlying repository item is not an nt:query node or if an error
     * occurs when calling {@link Query#storeAsNode(String)}/
     */ Modifier private ReferenceType Query getQuery FormalParameter ReferenceType SearchInfo sInfo InvalidQueryException RepositoryException DavException LocalVariableDeclaration ReferenceType Node VariableDeclarator rootNode MethodInvocation session MethodInvocation getRootNode getRepositorySession LocalVariableDeclaration ReferenceType QueryManager VariableDeclarator qMgr MethodInvocation session MethodInvocation getWorkspace MethodInvocation getQueryManager getRepositorySession LocalVariableDeclaration ReferenceType String VariableDeclarator itemPath MethodInvocation locator getJcrPath IfStatement MethodInvocation ! rootNode MethodInvocation MemberReference itemPath equals getPath BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator qNodeRelPath MethodInvocation itemPath Literal 1 substring IfStatement MethodInvocation rootNode MemberReference qNodeRelPath hasNode BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator qNode MethodInvocation rootNode MemberReference qNodeRelPath getNode IfStatement MethodInvocation qNode MemberReference JcrConstants NT_QUERY isNodeType BlockStatement ReturnStatement MethodInvocation qMgr MemberReference qNode getQuery End End End LocalVariableDeclaration ReferenceType Query VariableDeclarator q IfStatement BinaryOperation != MemberReference sInfo Literal null BlockStatement StatementExpression Assignment MemberReference q MethodInvocation qMgr MethodInvocation sInfo getQuery MethodInvocation sInfo getLanguageName createQuery = BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST BinaryOperation + MethodInvocation locator getResourcePath Literal "" is not a nt:query node -> searchRequest body required."" End IfStatement MethodInvocation ! session MethodInvocation MemberReference itemPath itemExists getRepositorySession BlockStatement TryStatement StatementExpression MethodInvocation q MemberReference itemPath storeAsNode CatchClause CatchClauseParameter RepositoryException e StatementExpression ClassCreator ReferenceType JcrDavException MemberReference e End ReturnStatement MemberReference q MethodDeclaration /**
     * Build a <code>MultiStatus</code> object from the specified query result.
     *
     * @param qResult <code>QueryResult</code> as obtained from {@link javax.jcr.query.Query#execute()}.
     * @return <code>MultiStatus</code> object listing the query result in
     * Webdav compatible form.
     * @throws RepositoryException
     */ Modifier private ReferenceType MultiStatus queryResultToMultiStatus FormalParameter ReferenceType QueryResult qResult RepositoryException LocalVariableDeclaration ReferenceType MultiStatus VariableDeclarator ms ClassCreator ReferenceType MultiStatus LocalVariableDeclaration ReferenceType String VariableDeclarator columnNames MethodInvocation qResult getColumnNames LocalVariableDeclaration ReferenceType RowIterator VariableDeclarator rowIter MethodInvocation qResult getRows WhileStatement MethodInvocation rowIter hasNext BlockStatement LocalVariableDeclaration ReferenceType Row VariableDeclarator row MethodInvocation rowIter nextRow LocalVariableDeclaration ReferenceType Value VariableDeclarator values MethodInvocation row getValues LocalVariableDeclaration ReferenceType String VariableDeclarator itemPath MethodInvocation row MethodInvocation getString MemberReference JcrConstants JCR_PATH getValue LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator loc MethodInvocation locator MethodInvocation MethodInvocation locator getPrefix MethodInvocation locator getWorkspacePath MemberReference itemPath Literal false createResourceLocator getFactory LocalVariableDeclaration ReferenceType String VariableDeclarator href MethodInvocation loc Literal true getHref LocalVariableDeclaration ReferenceType MultiStatusResponse VariableDeclarator resp ClassCreator ReferenceType MultiStatusResponse MemberReference href Literal null LocalVariableDeclaration ReferenceType SearchResultProperty VariableDeclarator srp ClassCreator ReferenceType SearchResultProperty MemberReference columnNames MemberReference values StatementExpression MethodInvocation resp MemberReference srp add StatementExpression MethodInvocation ms MemberReference resp addResponse End ReturnStatement MemberReference ms ReferenceType SearchResource",0
164,164,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.property Import org.apache.jackrabbit.webdav.property.AbstractDavProperty Import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.w3c.dom.Element Import org.w3c.dom.Document ClassDeclaration Modifier public /**
 * <code>LengthsProperty</code> extends {@link org.apache.jackrabbit.webdav.property.DavProperty} providing
 * utilities to handle the multiple lengths of the property item represented
 * by this resource.
 */ LengthsProperty FieldDeclaration Modifier private final BasicType long VariableDeclarator value ConstructorDeclaration Modifier public /**
     * Create a new <code>LengthsProperty</code> from the given long array.
     *
     * @param lengths as retrieved from the JCR property
     */ LengthsProperty FormalParameter BasicType long lengths StatementExpression SuperConstructorInvocation MemberReference JCR_LENGTHS Literal true StatementExpression Assignment This MemberReference value MemberReference lengths = MethodDeclaration /**
     * Returns an array of {@link long}s representing the value of this
     * property.
     *
     * @return an array of {@link long}s
     */ Modifier public ReferenceType Object getValue ReturnStatement MemberReference value MethodDeclaration /**
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator elem MethodInvocation MethodInvocation MemberReference document toXml getName ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference value length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator txtContent MethodInvocation String MemberReference ArraySelector MemberReference i value valueOf StatementExpression MethodInvocation DomUtil MemberReference elem MemberReference XML_LENGTH MemberReference ItemResourceConstants NAMESPACE MemberReference txtContent addChildElement End ReturnStatement MemberReference elem ReferenceType AbstractDavProperty ReferenceType ItemResourceConstants",0
877,877,,0
10,10,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.bdb Import com.sleepycat.je.Database Import com.sleepycat.je.DatabaseConfig Import com.sleepycat.je.DatabaseEntry Import com.sleepycat.je.Environment Import com.sleepycat.je.EnvironmentConfig Import com.sleepycat.je.LockMode Import com.sleepycat.je.OperationStatus Import com.sleepycat.je.Transaction Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.fs.FileSystem Import org.apache.jackrabbit.core.fs.local.LocalFileSystem Import org.apache.jackrabbit.core.state.AbstractPersistenceManager Import org.apache.jackrabbit.core.state.ChangeLog Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.NoSuchItemStateException Import org.apache.jackrabbit.core.state.NodeReferences Import org.apache.jackrabbit.core.state.NodeReferencesId Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PMContext Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.util.BLOBStore Import org.apache.jackrabbit.core.state.util.FileSystemBLOBStore Import java.io.File ClassDeclaration Modifier public BerkeleyDBPersistenceManager FieldDeclaration Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType BerkeleyDBPersistenceManager getLog FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator ENCODING Literal ""UTF-8"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator initialized Literal false FieldDeclaration Modifier private ReferenceType Environment VariableDeclarator environment FieldDeclaration Modifier private ReferenceType Database VariableDeclarator database FieldDeclaration Modifier private ReferenceType FileSystem VariableDeclarator blobFS FieldDeclaration Modifier private ReferenceType BLOBStore VariableDeclarator blobStore FieldDeclaration Modifier private ReferenceType ThreadLocal VariableDeclarator localTransaction ClassCreator ReferenceType ThreadLocal MethodDeclaration Modifier public init FormalParameter ReferenceType PMContext context Exception IfStatement MemberReference initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""already initialized"" End LocalVariableDeclaration ReferenceType File VariableDeclarator envDir ClassCreator ReferenceType File MethodInvocation context getHomeDir Literal ""db"" IfStatement MethodInvocation ! envDir exists BlockStatement StatementExpression MethodInvocation envDir mkdirs End StatementExpression MethodInvocation log BinaryOperation + Literal ""init berkeleyDb environment at "" MethodInvocation envDir getAbsolutePath debug LocalVariableDeclaration ReferenceType EnvironmentConfig VariableDeclarator config ClassCreator ReferenceType EnvironmentConfig StatementExpression MethodInvocation config Literal true setAllowCreate StatementExpression MethodInvocation config Literal true setTransactional StatementExpression Assignment MemberReference environment ClassCreator ReferenceType Environment MemberReference envDir MemberReference config = LocalVariableDeclaration ReferenceType DatabaseConfig VariableDeclarator dbConfig ClassCreator ReferenceType DatabaseConfig StatementExpression MethodInvocation dbConfig Literal true setAllowCreate StatementExpression MethodInvocation dbConfig Literal false setSortedDuplicates StatementExpression MethodInvocation dbConfig Literal true setTransactional StatementExpression Assignment MemberReference database MethodInvocation environment Literal null Literal ""jcrStore"" MemberReference dbConfig openDatabase = LocalVariableDeclaration ReferenceType LocalFileSystem VariableDeclarator blobFS ClassCreator ReferenceType LocalFileSystem StatementExpression MethodInvocation blobFS ClassCreator ReferenceType File MethodInvocation context getHomeDir Literal ""blobs"" setRoot StatementExpression MethodInvocation blobFS init StatementExpression Assignment This MemberReference blobFS MemberReference blobFS = StatementExpression Assignment MemberReference blobStore ClassCreator ReferenceType FileSystemBLOBStore MemberReference blobFS = StatementExpression Assignment MemberReference initialized Literal true = MethodDeclaration Modifier public close Exception IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End StatementExpression MethodInvocation log Literal ""close berkeleyDb environment"" debug StatementExpression MethodInvocation database close StatementExpression MethodInvocation environment close StatementExpression MethodInvocation blobFS close StatementExpression Assignment MemberReference blobFS Literal null = StatementExpression Assignment MemberReference blobStore Literal null = StatementExpression Assignment MemberReference initialized Literal false = MethodDeclaration Modifier public ReferenceType NodeState load FormalParameter ReferenceType NodeId id NoSuchItemStateException ItemStateException TryStatement LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType NodeStateTupleBinding VariableDeclarator tupleBinding ClassCreator ReferenceType NodeStateTupleBinding MemberReference id StatementExpression MethodInvocation key MethodInvocation id MethodInvocation MemberReference ENCODING getBytes toString setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database Literal null MemberReference key MemberReference value MemberReference LockMode DEFAULT get IfStatement MethodInvocation operationStatus MemberReference OperationStatus NOTFOUND equals BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException End ReturnStatement Cast ReferenceType NodeState MethodInvocation tupleBinding MemberReference value entryToObject CatchClause CatchClauseParameter NoSuchItemStateException e ThrowStatement MemberReference e CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier public ReferenceType PropertyState load FormalParameter ReferenceType PropertyId id NoSuchItemStateException ItemStateException TryStatement LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType PropertyStateTupleBinding VariableDeclarator tupleBinding ClassCreator ReferenceType PropertyStateTupleBinding MemberReference id MemberReference blobStore StatementExpression MethodInvocation key MethodInvocation id MethodInvocation MemberReference ENCODING getBytes toString setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database Literal null MemberReference key MemberReference value MemberReference LockMode DEFAULT get IfStatement MethodInvocation operationStatus MemberReference OperationStatus NOTFOUND equals BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException End ReturnStatement Cast ReferenceType PropertyState MethodInvocation tupleBinding MemberReference value entryToObject CatchClause CatchClauseParameter NoSuchItemStateException e ThrowStatement MemberReference e CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier public ReferenceType NodeReferences load FormalParameter ReferenceType NodeReferencesId id NoSuchItemStateException ItemStateException TryStatement LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType NodeReferencesTupleBinding VariableDeclarator tupleBinding ClassCreator ReferenceType NodeReferencesTupleBinding MemberReference id StatementExpression MethodInvocation key BinaryOperation + MethodInvocation id toString Literal "".references"" setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database Literal null MemberReference key MemberReference value MemberReference LockMode DEFAULT get IfStatement MethodInvocation operationStatus MemberReference OperationStatus NOTFOUND equals BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException End ReturnStatement Cast ReferenceType NodeReferences MethodInvocation tupleBinding MemberReference value entryToObject CatchClause CatchClauseParameter NoSuchItemStateException e ThrowStatement MemberReference e CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier public BasicType boolean exists FormalParameter ReferenceType NodeId id ItemStateException TryStatement LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry StatementExpression MethodInvocation key MethodInvocation id MethodInvocation MemberReference ENCODING getBytes toString setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database Literal null MemberReference key MemberReference value MemberReference LockMode DEFAULT get ReturnStatement MethodInvocation operationStatus MemberReference OperationStatus SUCCESS equals CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier public BasicType boolean exists FormalParameter ReferenceType PropertyId id ItemStateException TryStatement LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry StatementExpression MethodInvocation key MethodInvocation id MethodInvocation MemberReference ENCODING getBytes toString setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database Literal null MemberReference key MemberReference value MemberReference LockMode DEFAULT get ReturnStatement MethodInvocation operationStatus MemberReference OperationStatus SUCCESS equals CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier public BasicType boolean exists FormalParameter ReferenceType NodeReferencesId targetId ItemStateException TryStatement LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry StatementExpression MethodInvocation key BinaryOperation + MethodInvocation targetId toString Literal "".references"" setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database Literal null MemberReference key MemberReference value MemberReference LockMode DEFAULT get ReturnStatement MethodInvocation operationStatus MemberReference OperationStatus SUCCESS equals CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier public synchronized store FormalParameter ReferenceType ChangeLog changeLog ItemStateException LocalVariableDeclaration ReferenceType Transaction VariableDeclarator transaction Literal null TryStatement StatementExpression Assignment MemberReference transaction MethodInvocation environment Literal null Literal null beginTransaction = StatementExpression MethodInvocation localTransaction MemberReference transaction set StatementExpression SuperMethodInvocation MemberReference changeLog store StatementExpression MethodInvocation transaction commit CatchClause CatchClauseParameter Exception e TryStatement StatementExpression MethodInvocation transaction abort CatchClause CatchClauseParameter Exception fe StatementExpression MethodInvocation log MemberReference fe fatal ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e StatementExpression MethodInvocation localTransaction Literal null set MethodDeclaration Modifier protected store FormalParameter ReferenceType NodeState state ItemStateException TryStatement LocalVariableDeclaration ReferenceType Transaction VariableDeclarator transaction Cast ReferenceType Transaction MethodInvocation localTransaction get LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType NodeStateTupleBinding VariableDeclarator tupleBinding ClassCreator ReferenceType NodeStateTupleBinding StatementExpression MethodInvocation key MethodInvocation state MethodInvocation toString MethodInvocation MemberReference ENCODING getBytes getId setData StatementExpression MethodInvocation tupleBinding MemberReference state MemberReference value objectToEntry LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database MemberReference transaction MemberReference key MemberReference value put IfStatement MethodInvocation ! operationStatus MemberReference OperationStatus SUCCESS equals BlockStatement ThrowStatement ClassCreator ReferenceType ItemStateException MethodInvocation operationStatus toString End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier protected store FormalParameter ReferenceType PropertyState state ItemStateException TryStatement LocalVariableDeclaration ReferenceType Transaction VariableDeclarator transaction Cast ReferenceType Transaction MethodInvocation localTransaction get LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType PropertyStateTupleBinding VariableDeclarator tupleBinding ClassCreator ReferenceType PropertyStateTupleBinding MemberReference blobStore StatementExpression MethodInvocation key MethodInvocation state MethodInvocation toString MethodInvocation MemberReference ENCODING getBytes getId setData StatementExpression MethodInvocation tupleBinding MemberReference state MemberReference value objectToEntry LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database MemberReference transaction MemberReference key MemberReference value put IfStatement MethodInvocation ! operationStatus MemberReference OperationStatus SUCCESS equals BlockStatement ThrowStatement ClassCreator ReferenceType ItemStateException MethodInvocation operationStatus toString End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier protected store FormalParameter ReferenceType NodeReferences refs ItemStateException TryStatement LocalVariableDeclaration ReferenceType Transaction VariableDeclarator transaction Cast ReferenceType Transaction MethodInvocation localTransaction get LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator value ClassCreator ReferenceType DatabaseEntry LocalVariableDeclaration ReferenceType NodeReferencesTupleBinding VariableDeclarator tupleBinding ClassCreator ReferenceType NodeReferencesTupleBinding StatementExpression MethodInvocation key BinaryOperation + MethodInvocation refs MethodInvocation toString getTargetId Literal "".references"" setData StatementExpression MethodInvocation tupleBinding MemberReference refs MemberReference value objectToEntry LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database MemberReference transaction MemberReference key MemberReference value put IfStatement MethodInvocation ! operationStatus MemberReference OperationStatus SUCCESS equals BlockStatement ThrowStatement ClassCreator ReferenceType ItemStateException MethodInvocation operationStatus toString End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier protected destroy FormalParameter ReferenceType NodeState state ItemStateException TryStatement LocalVariableDeclaration ReferenceType Transaction VariableDeclarator transaction Cast ReferenceType Transaction MethodInvocation localTransaction get LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry StatementExpression MethodInvocation key MethodInvocation state MethodInvocation toString MethodInvocation MemberReference ENCODING getBytes getId setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database MemberReference transaction MemberReference key delete IfStatement MethodInvocation ! operationStatus MemberReference OperationStatus SUCCESS equals BlockStatement ThrowStatement ClassCreator ReferenceType ItemStateException MethodInvocation operationStatus toString End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier protected destroy FormalParameter ReferenceType PropertyState state ItemStateException TryStatement LocalVariableDeclaration ReferenceType Transaction VariableDeclarator transaction Cast ReferenceType Transaction MethodInvocation localTransaction get LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry StatementExpression MethodInvocation key MethodInvocation state MethodInvocation toString MethodInvocation MemberReference ENCODING getBytes getId setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database MemberReference transaction MemberReference key delete IfStatement MethodInvocation ! operationStatus MemberReference OperationStatus SUCCESS equals BlockStatement ThrowStatement ClassCreator ReferenceType ItemStateException MethodInvocation operationStatus toString End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration Modifier protected destroy FormalParameter ReferenceType NodeReferences refs ItemStateException TryStatement LocalVariableDeclaration ReferenceType Transaction VariableDeclarator transaction Cast ReferenceType Transaction MethodInvocation localTransaction get LocalVariableDeclaration ReferenceType DatabaseEntry VariableDeclarator key ClassCreator ReferenceType DatabaseEntry StatementExpression MethodInvocation key BinaryOperation + MethodInvocation refs MethodInvocation toString getTargetId Literal "".references"" setData LocalVariableDeclaration ReferenceType OperationStatus VariableDeclarator operationStatus MethodInvocation database MemberReference transaction MemberReference key delete IfStatement MethodInvocation ! operationStatus MemberReference OperationStatus SUCCESS equals BlockStatement ThrowStatement ClassCreator ReferenceType ItemStateException MethodInvocation operationStatus toString End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MemberReference e error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e ReferenceType AbstractPersistenceManager",0
449,449,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.orm Import java.io.Serializable ClassDeclaration Modifier public /**
 * <p>This class represents a single entry of a mixin type for a node.</p>
 */ ORMNodeMixinType FieldDeclaration Modifier private ReferenceType String VariableDeclarator nodeUUID FieldDeclaration Modifier private ReferenceType String VariableDeclarator mixinTypeName FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator dbId FieldDeclaration Modifier private ReferenceType ORMNodeState VariableDeclarator node ConstructorDeclaration Modifier public ORMNodeMixinType ConstructorDeclaration Modifier public ORMNodeMixinType FormalParameter ReferenceType ORMNodeState node FormalParameter ReferenceType String nodeUUID FormalParameter ReferenceType String mixinTypeName StatementExpression Assignment This MemberReference node MemberReference node = StatementExpression Assignment This MemberReference nodeUUID MemberReference nodeUUID = StatementExpression Assignment This MemberReference mixinTypeName MemberReference mixinTypeName = MethodDeclaration Modifier public setNodeUUID FormalParameter ReferenceType String nodeUUID StatementExpression Assignment This MemberReference nodeUUID MemberReference nodeUUID = MethodDeclaration Modifier public setMixinTypeName FormalParameter ReferenceType String mixinTypeName StatementExpression Assignment This MemberReference mixinTypeName MemberReference mixinTypeName = MethodDeclaration Modifier public setDbId FormalParameter ReferenceType Integer dbId StatementExpression Assignment This MemberReference dbId MemberReference dbId = MethodDeclaration Modifier public setNode FormalParameter ReferenceType ORMNodeState node StatementExpression Assignment This MemberReference node MemberReference node = MethodDeclaration Modifier public ReferenceType String getNodeUUID ReturnStatement MemberReference nodeUUID MethodDeclaration Modifier public ReferenceType String getMixinTypeName ReturnStatement MemberReference mixinTypeName MethodDeclaration Modifier public ReferenceType Integer getDbId ReturnStatement MemberReference dbId MethodDeclaration Modifier public ReferenceType ORMNodeState getNode ReturnStatement MemberReference node MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType ORMChildNodeEntry BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ORMNodeMixinType VariableDeclarator right Cast ReferenceType ORMNodeMixinType MemberReference obj IfStatement MethodInvocation MethodInvocation MethodInvocation right getMixinTypeName equals getMixinTypeName BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier public BasicType int hashCode ReturnStatement MethodInvocation MethodInvocation hashCode getMixinTypeName ReferenceType Serializable",0
399,399,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import javax.jcr.nodetype.ItemDefinition Import javax.jcr.nodetype.NodeType Import org.apache.jackrabbit.rmi.remote.RemoteItemDefinition Import org.apache.jackrabbit.rmi.remote.RemoteNodeType ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link javax.jcr.nodetype.ItemDefinition ItemDefinition}
 * interface. This class makes a local item definition available as an
 * RMI service using the
 * {@link org.apache.jackrabbit.rmi.remote.RemoteItemDefinition RemoteItemDefinition}
 * interface. Used mainly as the base class for the
 * {@link org.apache.jackrabbit.rmi.server.ServerPropertyDefinition ServerPropertyDefinition}
 * and
 * {@link org.apache.jackrabbit.rmi.server.ServerNodeDefinition ServerNodeDefinition}
 * adapters.
 *
 * @author Jukka Zitting
 * @see javax.jcr.nodetype.ItemDefinition
 * @see org.apache.jackrabbit.rmi.remote.RemoteItemDefinition
 */ ServerItemDefinition FieldDeclaration /** The adapted local item definition. */ Modifier private ReferenceType ItemDefinition VariableDeclarator def ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local item definition.
     *
     * @param def local item definition
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerItemDefinition FormalParameter ReferenceType ItemDefinition def FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference def MemberReference def = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteNodeType getDeclaringNodeType RemoteException LocalVariableDeclaration ReferenceType NodeType VariableDeclarator nt MethodInvocation def getDeclaringNodeType IfStatement BinaryOperation == MemberReference nt Literal null BlockStatement ReturnStatement Literal null BlockStatement ReturnStatement MethodInvocation MethodInvocation MemberReference nt getRemoteNodeType getFactory End MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getName RemoteException ReturnStatement MethodInvocation def getName MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isAutoCreated RemoteException ReturnStatement MethodInvocation def isAutoCreated MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isMandatory RemoteException ReturnStatement MethodInvocation def isMandatory MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType int getOnParentVersion RemoteException ReturnStatement MethodInvocation def getOnParentVersion MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isProtected RemoteException ReturnStatement MethodInvocation def isProtected ReferenceType ServerObject ReferenceType RemoteItemDefinition",1
429,429,"CompilationUnit PackageDeclaration org.apache.jackrabbit.decorator Import javax.jcr.ValueFactory Import javax.jcr.Value Import javax.jcr.ValueFormatException Import javax.jcr.Node Import javax.jcr.RepositoryException Import javax.jcr.Session Import java.util.Calendar Import java.io.InputStream ClassDeclaration Modifier public /**
 */ ValueFactoryDecorator FieldDeclaration Modifier final protected ReferenceType ValueFactory VariableDeclarator valueFactory ConstructorDeclaration Modifier public ValueFactoryDecorator FormalParameter ReferenceType DecoratorFactory factory FormalParameter ReferenceType Session session FormalParameter ReferenceType ValueFactory valueFactory StatementExpression SuperConstructorInvocation MemberReference factory MemberReference session StatementExpression Assignment This MemberReference valueFactory MemberReference valueFactory = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Value createValue FormalParameter ReferenceType String value ReturnStatement MethodInvocation valueFactory MemberReference value createValue MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Value createValue FormalParameter ReferenceType String value FormalParameter BasicType int type ValueFormatException ReturnStatement MethodInvocation valueFactory MemberReference value MemberReference type createValue MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Value createValue FormalParameter BasicType long value ReturnStatement MethodInvocation valueFactory MemberReference value createValue MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Value createValue FormalParameter BasicType double value ReturnStatement MethodInvocation valueFactory MemberReference value createValue MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Value createValue FormalParameter BasicType boolean value ReturnStatement MethodInvocation valueFactory MemberReference value createValue MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Value createValue FormalParameter ReferenceType Calendar value ReturnStatement MethodInvocation valueFactory MemberReference value createValue MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Value createValue FormalParameter ReferenceType InputStream value ReturnStatement MethodInvocation valueFactory MemberReference value createValue MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Value createValue FormalParameter ReferenceType Node value RepositoryException ReturnStatement MethodInvocation valueFactory MethodInvocation NodeDecorator MemberReference value unwrap createValue ReferenceType AbstractDecorator ReferenceType ValueFactory",0
393,393,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import org.apache.jackrabbit.core.ItemLifeCycleListener Import org.apache.jackrabbit.core.ItemManager Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.NodeImpl Import org.apache.jackrabbit.core.state.NodeState Import org.apache.log4j.Logger Import javax.jcr.Item Import javax.jcr.RepositoryException Import javax.jcr.UnsupportedRepositoryOperationException Import javax.jcr.NodeIterator Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.ConstraintViolationException Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory Import java.util.Calendar ClassDeclaration Modifier public abstract /**
 * Base implementation of the {@link javax.jcr.version.Version} interface.
 */ AbstractVersion FieldDeclaration /**
     * Logger instance.
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType AbstractVersion getLogger ConstructorDeclaration Modifier protected /**
     * Create a new instance of this class.
     * @param itemMgr item manager
     * @param session session
     * @param id node id
     * @param state node state
     * @param definition node definition
     * @param listeners life cycle listeners
     */ AbstractVersion FormalParameter ReferenceType ItemManager itemMgr FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType NodeId id FormalParameter ReferenceType NodeState state FormalParameter ReferenceType NodeDefinition definition FormalParameter ReferenceType ItemLifeCycleListener listeners StatementExpression SuperConstructorInvocation MemberReference itemMgr MemberReference session MemberReference id MemberReference state MemberReference definition MemberReference listeners MethodDeclaration /**
     * Returns the internal version. Subclass responsibility.
     * @return internal version
     * @throws RepositoryException if the internal version is not available
     */ Modifier protected abstract ReferenceType InternalVersion getInternalVersion RepositoryException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Calendar getCreated RepositoryException ReturnStatement MethodInvocation MethodInvocation getCreated getInternalVersion MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Version getSuccessors RepositoryException LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator suc MethodInvocation MethodInvocation getSuccessors getInternalVersion LocalVariableDeclaration ReferenceType Version VariableDeclarator ret ArrayCreator ReferenceType Version MemberReference suc length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference suc length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i ret Cast ReferenceType Version MethodInvocation session MemberReference ArraySelector MemberReference i MethodInvocation getId suc getNodeByUUID = End ReturnStatement MemberReference ret MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Version getPredecessors RepositoryException LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator pred MethodInvocation MethodInvocation getPredecessors getInternalVersion LocalVariableDeclaration ReferenceType Version VariableDeclarator ret ArrayCreator ReferenceType Version MemberReference pred length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pred length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i ret Cast ReferenceType Version MethodInvocation session MemberReference ArraySelector MemberReference i MethodInvocation getId pred getNodeByUUID = End ReturnStatement MemberReference ret MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String getUUID UnsupportedRepositoryOperationException RepositoryException ReturnStatement MethodInvocation MethodInvocation getId getInternalVersion MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType VersionHistory getContainingHistory RepositoryException ReturnStatement Cast ReferenceType VersionHistory MethodInvocation getParent MethodDeclaration /**
     * Returns the frozen node of this version
     *
     * @return
     * @throws javax.jcr.RepositoryException
     */ Modifier public ReferenceType InternalFrozenNode getFrozenNode RepositoryException ReturnStatement MethodInvocation MethodInvocation getFrozenNode getInternalVersion MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isSame FormalParameter ReferenceType Item otherItem IfStatement BinaryOperation instanceof MemberReference otherItem ReferenceType AbstractVersion BlockStatement TryStatement LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator other Cast ReferenceType AbstractVersion MemberReference otherItem ReturnStatement MethodInvocation other MethodInvocation MethodInvocation MethodInvocation getId getInternalVersion equals getId CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to retrieve internal version objects: "" MethodInvocation e getMessage warn StatementExpression MethodInvocation log Literal ""Stack dump:"" MemberReference e debug End ReturnStatement Literal false MethodDeclaration /**
     * Checks if this version is more recent than the given version <code>v</code>.
     * A version is more recent if and only if it is a successor (or a successor
     * of a successor, etc., to any degree of separation) of the compared one.
     *
     * @param v the version to check
     * @return <code>true</code> if the version is more recent;
     *         <code>false</code> otherwise.
     */ Modifier public BasicType boolean isMoreRecent FormalParameter ReferenceType AbstractVersion v RepositoryException ReturnStatement MethodInvocation MethodInvocation MethodInvocation v getInternalVersion isMoreRecent getInternalVersion MethodDeclaration /**
     * Checks if this is the root version.
     * @return <code>true</code> if this version is the root version;
     *         <code>false</code> otherwise.
     */ Modifier public BasicType boolean isRootVersion RepositoryException ReturnStatement MethodInvocation MethodInvocation isRootVersion getInternalVersion MethodDeclaration /**
     * Always throws a {@link javax.jcr.nodetype.ConstraintViolationException} since this node
     * is protected.
     *
     * @throws javax.jcr.nodetype.ConstraintViolationException
     */ Modifier public update FormalParameter ReferenceType String srcWorkspaceName ConstraintViolationException LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""update operation not allowed on a version node: "" MethodInvocation safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg MethodDeclaration /**
     * Always throws a {@link javax.jcr.nodetype.ConstraintViolationException} since this node
     * is protected.
     *
     * @throws javax.jcr.nodetype.ConstraintViolationException
     */ Modifier public ReferenceType NodeIterator merge FormalParameter ReferenceType String srcWorkspace FormalParameter BasicType boolean bestEffort ConstraintViolationException LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""merge operation not allowed on a version node: "" MethodInvocation safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg ReferenceType NodeImpl ReferenceType Version",1
501,501,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.observation Import java.util.Collection ClassDeclaration /**
 * The <code>DispatchAction</code> class is a simple struct that defines what
 * <code>EventState</code>s should be dispatched to which
 * <code>EventConsumer</code>s.
 */ DispatchAction FieldDeclaration /**
     * The collection of <code>EventState</code>s
     */ Modifier private final ReferenceType EventStateCollection VariableDeclarator eventStates FieldDeclaration /**
     * <code>EventStates</code> are dispatched to these
     * <code>EventConsumer</code>s.
     */ Modifier private final ReferenceType Collection VariableDeclarator eventConsumers ConstructorDeclaration /**
     * Creates a new <code>DispatchAction</code> struct with
     * <code>eventStates</code> and <code>eventConsumers</code>.
     */ DispatchAction FormalParameter ReferenceType EventStateCollection eventStates FormalParameter ReferenceType Collection eventConsumers StatementExpression Assignment This MemberReference eventStates MemberReference eventStates = StatementExpression Assignment This MemberReference eventConsumers MemberReference eventConsumers = MethodDeclaration /**
     * Returns a collection of {@link EventState}s to dispatch.
     *
     * @return a collection of {@link EventState}s to dispatch.
     */ ReferenceType EventStateCollection getEventStates ReturnStatement MemberReference eventStates MethodDeclaration /**
     * Returns a <code>Collection</code> of {@link EventConsumer}s where
     * the events should be dispatched to.
     *
     * @return a <code>Collection</code> of {@link EventConsumer}s.
     */ ReferenceType Collection getEventConsumers ReturnStatement MemberReference eventConsumers",0
881,881,,0
815,815,,0
782,782,,1
681,681,,0
573,573,,0
589,589,,0
753,753,,0
838,838,,0
605,605,,1
738,738,,0
502,502,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.version.report Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.version.DeltaVResource Import org.apache.jackrabbit.webdav.version.report.Report Import org.apache.jackrabbit.webdav.version.report.ReportType Import org.apache.jackrabbit.webdav.version.report.ReportInfo Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants Import org.w3c.dom.Element Import org.w3c.dom.Document Import javax.jcr.NamespaceRegistry Import javax.jcr.RepositoryException ClassDeclaration Modifier public /**
 * <code>RegisteredNamespacesReport</code> let the client retrieve the namespaces
 * registered on the repository.<p/>
 *
 * Request body:
 * <pre>
 * &lt;!ELEMENT registerednamespaces EMPTY &gt;
 * </pre>
 *
 * Response body:
 * <pre>
 * &lt;!ELEMENT registerednamespaces-report (namespace)* &gt;
 * &lt;!ELEMENT namespace (prefix, uri) &gt;
 * &lt;!ELEMENT prefix (#PCDATA) &gt;
 * &lt;!ELEMENT uri (#PCDATA) &gt;
 * </pre>
 *
 * @see javax.jcr.Workspace#getNamespaceRegistry() 
 */ RegisteredNamespacesReport FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType RegisteredNamespacesReport getLogger FieldDeclaration /**
     * The registered type of this report.
     */ Modifier public final static ReferenceType ReportType VariableDeclarator REGISTERED_NAMESPACES_REPORT MethodInvocation ReportType Literal ""registerednamespaces"" MemberReference ItemResourceConstants NAMESPACE ClassReference ReferenceType RegisteredNamespacesReport register FieldDeclaration Modifier private ReferenceType NamespaceRegistry VariableDeclarator nsReg MethodDeclaration /**
     * Returns {@link #REGISTERED_NAMESPACES_REPORT} type.
     * @return {@link #REGISTERED_NAMESPACES_REPORT}
     * @see org.apache.jackrabbit.webdav.version.report.Report#getType()
     */ Modifier public ReferenceType ReportType getType ReturnStatement MemberReference REGISTERED_NAMESPACES_REPORT MethodDeclaration /**
     * Always returns <code>false</code>.
     *
     * @return false
     * @see org.apache.jackrabbit.webdav.version.report.Report#isMultiStatusReport()
     */ Modifier public BasicType boolean isMultiStatusReport ReturnStatement Literal false MethodDeclaration /**
     * @see Report#init(org.apache.jackrabbit.webdav.version.DeltaVResource, org.apache.jackrabbit.webdav.version.report.ReportInfo)
     */ Modifier public init FormalParameter ReferenceType DeltaVResource resource FormalParameter ReferenceType ReportInfo info DavException IfStatement BinaryOperation == MemberReference info Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""ReportInfo must not be null."" End IfStatement BinaryOperation == MemberReference resource Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""Resource must not be null."" End IfStatement MethodInvocation ! MethodInvocation MemberReference info isRequestedReportType getType BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""registerednamespaces element expected."" End TryStatement LocalVariableDeclaration ReferenceType DavSession VariableDeclarator session MethodInvocation resource getSession IfStatement BinaryOperation || BinaryOperation == MemberReference session Literal null BinaryOperation == MethodInvocation session getRepositorySession Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""The resource must provide a non-null session object in order to create the registerednamespaces report."" End StatementExpression Assignment MemberReference nsReg MethodInvocation session MethodInvocation getWorkspace MethodInvocation getNamespaceRegistry getRepositorySession = CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_INTERNAL_SERVER_ERROR MethodDeclaration /**
     * Returns a Xml representation of the registered namespace(s).
     *
     * @return Xml representation of the registered namespace(s)
     * error occurs while retrieving the namespaces.
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator report MethodInvocation DomUtil MemberReference document Literal ""registerednamespaces-report"" MemberReference NAMESPACE createElement TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator prefixes MethodInvocation nsReg getPrefixes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference prefixes length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator elem MethodInvocation DomUtil MemberReference report MemberReference XML_NAMESPACE MemberReference NAMESPACE addChildElement StatementExpression MethodInvocation DomUtil MemberReference elem MemberReference XML_PREFIX MemberReference NAMESPACE MemberReference ArraySelector MemberReference i prefixes addChildElement StatementExpression MethodInvocation DomUtil MemberReference elem MemberReference XML_URI MemberReference NAMESPACE MethodInvocation nsReg MemberReference ArraySelector MemberReference i prefixes getURI addChildElement End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage error ReturnStatement MemberReference report ReferenceType Report ReferenceType ItemResourceConstants",0
296,296,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query Import java.io.CharArrayReader Import java.io.CharArrayWriter Import java.io.IOException Import java.util.HashMap Import java.util.Map Import javax.jcr.RepositoryException Import org.apache.jackrabbit.core.query.lucene.FieldNames Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.value.BLOBFileValue Import org.apache.jackrabbit.core.value.InternalValue Import org.pdfbox.pdfparser.PDFParser Import org.pdfbox.pdmodel.PDDocument Import org.pdfbox.util.PDFTextStripper ClassDeclaration Modifier public /**
 * Extracts texts from Adobe PDF document binary data.
 * Taken from Jakarta Slide class
 * <code>org.apache.slide.extractor.PDFExtractor</code>
 */ PdfTextFilter MethodDeclaration /**
     * @return <code>true</code> for <code>application/pdf</code>, <code>false</code> otherwise.
     */ Modifier public BasicType boolean canFilter FormalParameter ReferenceType String mimeType ReturnStatement Literal MethodInvocation MemberReference mimeType equalsIgnoreCase ""application/pdf"" MethodDeclaration /**
     * Returns a map with a single entry for field {@link FieldNames#FULLTEXT}.
     * @param data object containing Adobe PDF document data.
     * @param encoding text encoding is not used, since it is specified in the data.
     * @return a map with a single Reader value for field {@link FieldNames#FULLTEXT}.
     * @throws RepositoryException if data is a multi-value property or it does not
     * contain valid PDF document.
     */ Modifier public ReferenceType Map doFilter FormalParameter ReferenceType PropertyState data FormalParameter ReferenceType String encoding RepositoryException LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation data getValues IfStatement BinaryOperation > MemberReference values length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType BLOBFileValue VariableDeclarator blob Cast ReferenceType BLOBFileValue MemberReference ArraySelector Literal 0 MethodInvocation internalValue values TryStatement LocalVariableDeclaration ReferenceType PDFParser VariableDeclarator parser ClassCreator ReferenceType PDFParser MethodInvocation blob getStream StatementExpression MethodInvocation parser parse LocalVariableDeclaration ReferenceType PDDocument VariableDeclarator document MethodInvocation parser getPDDocument LocalVariableDeclaration ReferenceType CharArrayWriter VariableDeclarator writer ClassCreator ReferenceType CharArrayWriter LocalVariableDeclaration ReferenceType PDFTextStripper VariableDeclarator stripper ClassCreator ReferenceType PDFTextStripper StatementExpression MethodInvocation stripper Literal ""\n"" setLineSeparator StatementExpression MethodInvocation stripper MemberReference document MemberReference writer writeText StatementExpression MethodInvocation document close StatementExpression MethodInvocation writer close LocalVariableDeclaration ReferenceType Map VariableDeclarator result ClassCreator ReferenceType HashMap StatementExpression MethodInvocation result MemberReference FieldNames FULLTEXT ClassCreator ReferenceType CharArrayReader MethodInvocation writer toCharArray put ReturnStatement MemberReference result CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference ex BlockStatement ThrowStatement ClassCreator ReferenceType RepositoryException Literal ""Multi-valued binary properties not supported."" End ReferenceType TextFilter",1
660,660,,0
498,498,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.value Import java.io.Serializable Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.ValueFormatException ClassDeclaration Modifier public /**
 * The <code>PathValue</code> class implements the committed value state for
 * Path values as a part of the State design pattern (Gof) used by this package.
 *
 * @author Felix Meschberger
 * @since 0.16.4.1
 */ PathValue FieldDeclaration /** The serial version UID */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 961536566073928748L FieldDeclaration /** The path value. */ Modifier private final ReferenceType String VariableDeclarator value ConstructorDeclaration Modifier protected /**
     * Creates an instance for the given path <code>value</code>.
     */ PathValue FormalParameter ReferenceType String value ValueFormatException StatementExpression Assignment This MemberReference value MethodInvocation MemberReference value toPath = MethodDeclaration /**
     * Checks whether the string value adheres to the path syntax.
     *
     * @param value The string to check for synthactical compliance with a
     *      path value.
     *
     * @return The input value.
     *
     * @throws ValueFormatException if the string <code>value</code> is not a
     *      synthactically correct path.
     */ Modifier protected static ReferenceType String toPath FormalParameter ReferenceType String value ValueFormatException ReturnStatement MemberReference value MethodDeclaration /**
     * Returns <code>PropertyType.PATH</code>.
     */ Modifier public BasicType int getType ReturnStatement MemberReference PropertyType PATH MethodDeclaration /**
     * Returns the string representation of the path value.
     */ Modifier public ReferenceType String getString ValueFormatException RepositoryException ReturnStatement MemberReference value ReferenceType BaseNonStreamValue ReferenceType Serializable ReferenceType StatefulValue",0
850,850,,0
388,388,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.version.report Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants Import org.apache.jackrabbit.webdav.jcr.JcrDavException Import org.apache.jackrabbit.webdav.version.DeltaVResource Import org.apache.jackrabbit.webdav.version.report.Report Import org.apache.jackrabbit.webdav.version.report.ReportType Import org.apache.jackrabbit.webdav.version.report.ReportInfo Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.util.Text Import org.xml.sax.SAXException Import org.w3c.dom.Element Import org.w3c.dom.Document Import javax.jcr.Session Import javax.jcr.RepositoryException Import javax.jcr.PathNotFoundException Import javax.xml.parsers.DocumentBuilderFactory Import javax.xml.parsers.ParserConfigurationException Import java.io.File Import java.io.FileOutputStream Import java.io.InputStream Import java.io.FileInputStream Import java.io.FileNotFoundException Import java.io.IOException ClassDeclaration Modifier public /**
 * <code>ExportViewReport</code> handles REPORT requests for the 'exportview'
 * report. The 'exportview' report is used to export
 * {@link Session#exportDocumentView(String, java.io.OutputStream, boolean, boolean) DocView}
 * and {@link Session#exportSystemView(String, java.io.OutputStream, boolean, boolean) SysView}
 * of the {@link javax.jcr.Item item} represented by the requested resource.
 * <p/>
 * The request body must contain a {@link ItemResourceConstants#NAMESPACE dcr}:exportview
 * element:
 * <pre>
 * &lt;!ELEMENT exportview  ( (sysview | docview)?, skipbinary?, norecurse ) &gt;
 * &lt;!ELEMENT sysview EMPTY &gt;
 * &lt;!ELEMENT docview EMPTY &gt;
 * &lt;!ELEMENT skipbinary EMPTY &gt;
 * &lt;!ELEMENT norecurse EMPTY &gt;
 * </pre>
 * If no view type is specified the DocView is generated.
 */ ExportViewReport FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ExportViewReport getLogger FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator REPORT_NAME Literal ""exportview"" FieldDeclaration /**
     * The exportview report type
     */ Modifier public final static ReferenceType ReportType VariableDeclarator EXPORTVIEW_REPORT MethodInvocation ReportType MemberReference REPORT_NAME MemberReference ItemResourceConstants NAMESPACE ClassReference ReferenceType ExportViewReport register FieldDeclaration Modifier private ReferenceType String VariableDeclarator absItemPath FieldDeclaration Modifier private ReferenceType Session VariableDeclarator session FieldDeclaration Modifier private ReferenceType ReportInfo VariableDeclarator info MethodDeclaration /**
     * Returns {@link #EXPORTVIEW_REPORT} report type.
     *
     * @return {@link #EXPORTVIEW_REPORT}
     * @see org.apache.jackrabbit.webdav.version.report.Report#getType()
     */ Modifier public ReferenceType ReportType getType ReturnStatement MemberReference EXPORTVIEW_REPORT MethodDeclaration /**
     * Always returns <code>false</code>.
     *
     * @return false
     */ Modifier public BasicType boolean isMultiStatusReport ReturnStatement Literal false MethodDeclaration /**
     * @see Report#init(org.apache.jackrabbit.webdav.version.DeltaVResource, org.apache.jackrabbit.webdav.version.report.ReportInfo)
     */ Modifier public init FormalParameter ReferenceType DeltaVResource resource FormalParameter ReferenceType ReportInfo info DavException IfStatement MethodInvocation ! MethodInvocation MemberReference info isRequestedReportType getType BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""dcr:exportview element expected."" End IfStatement BinaryOperation == MemberReference resource Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""Resource must not be null."" End StatementExpression Assignment This MemberReference info MemberReference info = LocalVariableDeclaration ReferenceType DavSession VariableDeclarator davSession MethodInvocation resource getSession IfStatement BinaryOperation || BinaryOperation == MemberReference davSession Literal null BinaryOperation == MethodInvocation davSession getRepositorySession Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""The resource must provide a non-null session object in order to create the exportview report."" End StatementExpression Assignment MemberReference session MethodInvocation davSession getRepositorySession = StatementExpression Assignment MemberReference absItemPath MethodInvocation resource MethodInvocation getJcrPath getLocator = TryStatement IfStatement MethodInvocation ! session MemberReference absItemPath itemExists BlockStatement ThrowStatement ClassCreator ReferenceType JcrDavException ClassCreator ReferenceType PathNotFoundException BinaryOperation + MemberReference absItemPath Literal "" does not exist."" End CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Creates a Xml document from the generated view.
     *
     * @param document
     * @return Xml element representing the output of the specified view.
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration BasicType boolean VariableDeclarator skipBinary MethodInvocation info Literal ""skipbinary"" MemberReference ItemResourceConstants NAMESPACE containsContentElement LocalVariableDeclaration BasicType boolean VariableDeclarator noRecurse MethodInvocation info Literal ""norecurse"" MemberReference ItemResourceConstants NAMESPACE containsContentElement TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator prefix BinaryOperation + Literal ""_tmp_"" MethodInvocation Text MemberReference absItemPath getName LocalVariableDeclaration ReferenceType File VariableDeclarator tmpfile MethodInvocation File MemberReference prefix Literal null Literal null createTempFile StatementExpression MethodInvocation tmpfile deleteOnExit LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator out ClassCreator ReferenceType FileOutputStream MemberReference tmpfile IfStatement MethodInvocation info Literal ""sysview"" MemberReference ItemResourceConstants NAMESPACE containsContentElement BlockStatement StatementExpression MethodInvocation session MemberReference absItemPath MemberReference out MemberReference skipBinary MemberReference noRecurse exportSystemView BlockStatement StatementExpression MethodInvocation session MemberReference absItemPath MemberReference out MemberReference skipBinary MemberReference noRecurse exportDocumentView End StatementExpression MethodInvocation out close LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in ClassCreator ReferenceType FileInputStream MemberReference tmpfile LocalVariableDeclaration ReferenceType Document VariableDeclarator tmpDoc MethodInvocation DocumentBuilderFactory MethodInvocation newDocumentBuilder MethodInvocation MemberReference in parse newInstance LocalVariableDeclaration ReferenceType Element VariableDeclarator rootElem Cast ReferenceType Element MethodInvocation document MethodInvocation tmpDoc getDocumentElement Literal true importNode ReturnStatement MemberReference rootElem CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage error CatchClause CatchClauseParameter FileNotFoundException e StatementExpression MethodInvocation log MethodInvocation e getMessage error CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation log MethodInvocation e getMessage error CatchClause CatchClauseParameter ParserConfigurationException e StatementExpression MethodInvocation log MethodInvocation e getMessage error CatchClause CatchClauseParameter SAXException e StatementExpression MethodInvocation log MethodInvocation e getMessage error ReturnStatement Literal null ReferenceType Report",1
684,684,,0
487,487,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.version Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.property.HrefProperty Import org.apache.jackrabbit.webdav.property.DefaultDavProperty Import org.apache.jackrabbit.webdav.property.ResourceType Import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants Import org.apache.jackrabbit.webdav.jcr.JcrDavException Import org.apache.jackrabbit.webdav.jcr.DefaultItemCollection Import org.apache.jackrabbit.webdav.version.VersionHistoryResource Import org.apache.jackrabbit.webdav.version.VersionResource Import org.apache.jackrabbit.webdav.DavResourceLocator Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.DavResourceFactory Import org.apache.jackrabbit.webdav.DavResource Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavServletResponse Import javax.jcr.RepositoryException Import javax.jcr.Item Import javax.jcr.version.VersionHistory Import javax.jcr.version.VersionIterator Import java.util.ArrayList ClassDeclaration Modifier public /**
 * <code>VersionHistoryItemCollection</code> represents a JCR version history.
 *
 * @see VersionHistory
 */ VersionHistoryItemCollection FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType VersionHistoryItemCollection getLogger ConstructorDeclaration Modifier public /**
     * Create a new <code>VersionHistoryItemCollection</code> resource.
     *
     * @param resourcePath
     * @param session
     * @param factory
     */ VersionHistoryItemCollection FormalParameter ReferenceType DavResourceLocator resourcePath FormalParameter ReferenceType DavSession session FormalParameter ReferenceType DavResourceFactory factory FormalParameter ReferenceType Item item StatementExpression SuperConstructorInvocation MemberReference resourcePath MemberReference session MemberReference factory MemberReference item IfStatement BinaryOperation || BinaryOperation == MemberReference item Literal null BinaryOperation instanceof MemberReference item ReferenceType VersionHistory BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""VersionHistory item expected."" End MethodDeclaration /**
     * @see org.apache.jackrabbit.webdav.DavResource#getSupportedMethods()
     */ Modifier public ReferenceType String getSupportedMethods LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer MemberReference ItemResourceConstants METHODS StatementExpression MethodInvocation sb MethodInvocation MemberReference VersionHistoryResource METHODS append Literal "", "" append ReturnStatement MethodInvocation sb toString MethodDeclaration /**
     * Removing a version resource is achieved by calling <code>removeVersion</code>
     * on the versionhistory item this version belongs to.
     *
     * @throws DavException if the version does not exist or if an error occurs
     * while deleting.
     * @see DavResource#removeMember(org.apache.jackrabbit.webdav.DavResource)
     */ Modifier public removeMember FormalParameter ReferenceType DavResource member DavException IfStatement MethodInvocation exists BlockStatement LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator versionHistory Cast ReferenceType VersionHistory MemberReference item TryStatement StatementExpression MethodInvocation versionHistory MethodInvocation MethodInvocation member MethodInvocation getJcrPath getLocator getItemName removeVersion CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_NOT_FOUND End MethodDeclaration /**
     * Return an array of {@link VersionResource}s representing all versions
     * present in the underlying JCR version history.
     *
     * @return array of {@link VersionResource}s representing all versions
     * present in the underlying JCR version history.
     * @throws DavException
     * @see org.apache.jackrabbit.webdav.version.VersionHistoryResource#getVersions()
     */ Modifier public ReferenceType VersionResource getVersions DavException TryStatement LocalVariableDeclaration ReferenceType VersionIterator VariableDeclarator vIter Cast ReferenceType VersionHistory MemberReference item LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator l ClassCreator ReferenceType ArrayList WhileStatement MethodInvocation vIter hasNext BlockStatement LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator versionLoc MethodInvocation MethodInvocation vIter nextVersion getLocatorFromItem LocalVariableDeclaration ReferenceType DavResource VariableDeclarator vr MethodInvocation MemberReference versionLoc createResourceFromLocator StatementExpression MethodInvocation l MemberReference vr add End ReturnStatement Cast ReferenceType VersionResource MethodInvocation l ArrayCreator ReferenceType VersionResource MethodInvocation l size toArray CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Fill the property set for this resource.
     */ Modifier protected initProperties StatementExpression SuperMethodInvocation initProperties StatementExpression MethodInvocation properties ClassCreator ReferenceType ResourceType MemberReference ResourceType VERSION_HISTORY add TryStatement StatementExpression MethodInvocation properties ClassCreator ReferenceType DefaultDavProperty MemberReference JCR_VERSIONABLEUUID Cast ReferenceType VersionHistory MemberReference item add CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage error TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator rootVersionHref MethodInvocation MethodInvocation Literal true getHref Cast ReferenceType VersionHistory MemberReference item getLocatorFromItem StatementExpression MethodInvocation properties ClassCreator ReferenceType HrefProperty MemberReference VersionHistoryResource ROOT_VERSION MemberReference rootVersionHref Literal true add CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage error TryStatement LocalVariableDeclaration ReferenceType VersionIterator VariableDeclarator vIter Cast ReferenceType VersionHistory MemberReference item StatementExpression MethodInvocation MemberReference VersionHistoryResource VERSION_SET MemberReference vIter Literal true addHrefProperty CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log MethodInvocation e getMessage error ReferenceType DefaultItemCollection ReferenceType VersionHistoryResource",1
155,155,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib.traverser Import java.util.Collection Import java.util.Comparator Import javax.jcr.Node Import javax.jcr.RepositoryException Import org.apache.commons.collections.Predicate InterfaceDeclaration Modifier public /**
 * Traverser implementations are responsible of collecting nodes from the root
 * node base on custom strategies.
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ Traverser MethodDeclaration /**
     * Parameter that optionally affect the Traverser behaviour. <br>
     * 
     * @param expression
     */ Modifier public setParameter FormalParameter ReferenceType Object parameter MethodDeclaration /**
     * Set a node filter
     * 
     * @param node
     */ Modifier public setFilter FormalParameter ReferenceType Predicate predicate MethodDeclaration /**
     * Set the comparator to order the nodes
     * 
     * @param node
     */ Modifier public setOrder FormalParameter ReferenceType Comparator comparator MethodDeclaration /**
     * Set the node to traverse from
     * 
     * @param node
     */ Modifier public setNode FormalParameter ReferenceType Node node MethodDeclaration /**
     * Set the depth
     * 
     * @param depth
     */ Modifier public setDepth FormalParameter BasicType int depth MethodDeclaration /**
     * Perform traverse
     */ Modifier public traverse RepositoryException MethodDeclaration /**
     * Get the nodes
     * 
     * @return
     */ Modifier public ReferenceType Collection getNodes",0
669,669,,0
114,114,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.search.Query Import org.apache.lucene.search.Weight Import org.apache.lucene.search.Searcher Import org.apache.lucene.search.Scorer Import org.apache.lucene.search.Explanation Import org.apache.lucene.search.Similarity Import org.apache.lucene.search.BooleanQuery Import org.apache.lucene.index.Term Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.TermEnum Import org.apache.lucene.index.TermDocs Import org.apache.log4j.Logger Import org.apache.commons.collections.map.LRUMap Import java.io.IOException Import java.util.BitSet Import java.util.Map Import java.util.WeakHashMap ClassDeclaration Modifier public /**
 * Implements a variant of the lucene class {@link org.apache.lucene.search.RangeQuery}.
 * This class does not rewrite to basic {@link org.apache.lucene.search.TermQuery}
 * but will calculate the matching documents itself. That way a
 * <code>TooManyClauses</code> can be avoided.
 */ RangeQuery FieldDeclaration /**
     * Logger instance for this class.
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType RangeQuery getLogger FieldDeclaration /**
     * Simple result cache for previously calculated hits.
     * key=IndexReader value=Map{key=String:range,value=BitSet:hits}
     */ Modifier private final static ReferenceType Map VariableDeclarator cache ClassCreator ReferenceType WeakHashMap FieldDeclaration /**
     * The lower term. May be <code>null</code> if <code>upperTerm</code> is not
     * <code>null</code>.
     */ Modifier private ReferenceType Term VariableDeclarator lowerTerm FieldDeclaration /**
     * The upper term. May be <code>null</code> if <code>lowerTerm</code> is not
     * <code>null</code>.
     */ Modifier private ReferenceType Term VariableDeclarator upperTerm FieldDeclaration /**
     * If <code>true</code> the range interval is inclusive.
     */ Modifier private BasicType boolean VariableDeclarator inclusive ConstructorDeclaration Modifier public /**
     * Creates a new RangeQuery. The lower or the upper term may be
     * <code>null</code>, but not both!
     *
     * @param lowerTerm the lower term of the interval, or <code>null</code>
     * @param upperTerm the upper term of the interval, or <code>null</code>.
     * @param inclusive if <code>true</code> the interval is inclusive.
     */ RangeQuery FormalParameter ReferenceType Term lowerTerm FormalParameter ReferenceType Term upperTerm FormalParameter BasicType boolean inclusive IfStatement BinaryOperation && BinaryOperation == MemberReference lowerTerm Literal null BinaryOperation == MemberReference upperTerm Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""At least one term must be non-null"" End IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference lowerTerm Literal null BinaryOperation != MemberReference upperTerm Literal null BinaryOperation != MethodInvocation lowerTerm field MethodInvocation upperTerm field BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Both terms must be for the same field"" End IfStatement BinaryOperation != MemberReference lowerTerm Literal null BlockStatement StatementExpression Assignment This MemberReference lowerTerm MemberReference lowerTerm = BlockStatement StatementExpression Assignment This MemberReference lowerTerm ClassCreator ReferenceType Term MethodInvocation upperTerm field Literal """" = End StatementExpression Assignment This MemberReference upperTerm MemberReference upperTerm = StatementExpression Assignment This MemberReference inclusive MemberReference inclusive = MethodDeclaration /**
     * Tries to rewrite this query into a standard lucene RangeQuery.
     * This rewrite might fail with a TooManyClauses exception. If that
     * happens, we use our own implementation.
     *
     * @param reader the index reader.
     * @return the rewritten query or this query if rewriting is not possible.
     * @throws IOException if an error occurs.
     */ Modifier public ReferenceType Query rewrite FormalParameter ReferenceType IndexReader reader IOException LocalVariableDeclaration ReferenceType Query VariableDeclarator stdRangeQueryImpl ClassCreator ReferenceType org ReferenceType apache ReferenceType lucene ReferenceType search ReferenceType RangeQuery MemberReference lowerTerm MemberReference upperTerm MemberReference inclusive TryStatement ReturnStatement MethodInvocation stdRangeQueryImpl MemberReference reader rewrite CatchClause CatchClauseParameter BooleanQuery.TooManyClauses e StatementExpression MethodInvocation log Literal ""Too many terms to enumerate, using custom RangeQuery"" debug ReturnStatement This MethodDeclaration /**
     * Creates the <code>Weight</code> for this query.
     *
     * @param searcher the searcher to use for the <code>Weight</code>.
     * @return the <code>Weigth</code> for this query.
     */ Modifier protected ReferenceType Weight createWeight FormalParameter ReferenceType Searcher searcher ReturnStatement ClassCreator ReferenceType RangeQueryWeight MemberReference searcher MethodDeclaration /**
     * Returns a string representation of this query.
     * @param field the field name for which to create a string representation.
     * @return a string representation of this query.
     */ Modifier public ReferenceType String toString FormalParameter ReferenceType String field LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buffer ClassCreator ReferenceType StringBuffer IfStatement MethodInvocation ! MethodInvocation MemberReference field equals getField BlockStatement StatementExpression MethodInvocation buffer MethodInvocation getField append StatementExpression MethodInvocation buffer Literal "":"" append End StatementExpression MethodInvocation buffer TernaryExpression MemberReference inclusive Literal ""["" Literal ""{"" append StatementExpression MethodInvocation buffer TernaryExpression BinaryOperation != MemberReference lowerTerm Literal null MethodInvocation lowerTerm text Literal ""null"" append StatementExpression MethodInvocation buffer Literal "" TO "" append StatementExpression MethodInvocation buffer TernaryExpression BinaryOperation != MemberReference upperTerm Literal null MethodInvocation upperTerm text Literal ""null"" append StatementExpression MethodInvocation buffer TernaryExpression MemberReference inclusive Literal ""]"" Literal ""}"" append IfStatement BinaryOperation != MethodInvocation getBoost Literal 1.0f BlockStatement StatementExpression MethodInvocation buffer Literal ""^"" append StatementExpression MethodInvocation buffer MethodInvocation Float MethodInvocation getBoost toString append End ReturnStatement MethodInvocation buffer toString MethodDeclaration /**
     * Returns the field name for this query.
     */ Modifier private ReferenceType String getField ReturnStatement TernaryExpression BinaryOperation != MemberReference lowerTerm Literal null MethodInvocation lowerTerm field MethodInvocation upperTerm field ClassDeclaration Modifier private /**
     * The <code>Weight</code> implementation for this <code>RangeQuery</code>.
     */ RangeQueryWeight FieldDeclaration /**
         * The searcher in use
         */ Modifier private final ReferenceType Searcher VariableDeclarator searcher ConstructorDeclaration /**
         * Creates a new <code>RangeQueryWeight</code> instance using
         * <code>searcher</code>.
         *
         * @param searcher a <code>Searcher</code> instance.
         */ RangeQueryWeight FormalParameter ReferenceType Searcher searcher StatementExpression Assignment This MemberReference searcher MemberReference searcher = MethodDeclaration /**
         * Returns this <code>RangeQuery</code>.
         *
         * @return this <code>RangeQuery</code>.
         */ Modifier public ReferenceType Query getQuery ReturnStatement This RangeQuery MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType float getValue ReturnStatement Literal 1.0f MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType float sumOfSquaredWeights IOException ReturnStatement Literal 1.0f MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public normalize FormalParameter BasicType float norm MethodDeclaration /**
         * Creates a scorer for this <code>Rangequery</code>.
         *
         * @param reader a reader for accessing the index.
         * @return a <code>RangeQueryScorer</code>.
         * @throws IOException if an error occurs while reading from the index.
         */ Modifier public ReferenceType Scorer scorer FormalParameter ReferenceType IndexReader reader IOException ReturnStatement ClassCreator ReferenceType RangeQueryScorer MethodInvocation searcher getSimilarity MemberReference reader MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType Explanation explain FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int doc IOException ReturnStatement ClassCreator ReferenceType Explanation ReferenceType Weight ClassDeclaration Modifier private final /**
     * Implements a <code>Scorer</code> for this <code>RangeQuery</code>.
     */ RangeQueryScorer FieldDeclaration /**
         * The index reader to use for calculating the matching documents.
         */ Modifier private final ReferenceType IndexReader VariableDeclarator reader FieldDeclaration /**
         * The documents ids that match this range query.
         */ Modifier private final ReferenceType BitSet VariableDeclarator hits FieldDeclaration /**
         * Set to <code>true</code> when the hits have been calculated.
         */ Modifier private BasicType boolean VariableDeclarator hitsCalculated Literal false FieldDeclaration /**
         * The next document id to return
         */ Modifier private BasicType int VariableDeclarator nextDoc Literal - 1 FieldDeclaration /**
         * The cache key to use to store the results.
         */ Modifier private final ReferenceType String VariableDeclarator cacheKey FieldDeclaration /**
         * The map to store the results.
         */ Modifier private final ReferenceType Map VariableDeclarator resultMap ConstructorDeclaration /**
         * Creates a new RangeQueryScorer.
         * @param similarity the similarity implementation.
         * @param reader the index reader to use.
         */ RangeQueryScorer FormalParameter ReferenceType Similarity similarity FormalParameter ReferenceType IndexReader reader StatementExpression SuperConstructorInvocation MemberReference similarity StatementExpression Assignment This MemberReference reader MemberReference reader = LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator key ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation key TernaryExpression BinaryOperation != MemberReference lowerTerm Literal null MethodInvocation lowerTerm field MethodInvocation upperTerm field append StatementExpression MethodInvocation key Literal '￿' append StatementExpression MethodInvocation key TernaryExpression BinaryOperation != MemberReference lowerTerm Literal null MethodInvocation lowerTerm text Literal """" append StatementExpression MethodInvocation key Literal '￿' append StatementExpression MethodInvocation key TernaryExpression BinaryOperation != MemberReference upperTerm Literal null MethodInvocation upperTerm text Literal """" append StatementExpression MethodInvocation key Literal '￿' append StatementExpression MethodInvocation key MemberReference inclusive append StatementExpression Assignment This MemberReference cacheKey MethodInvocation key toString = SynchronizedStatement MemberReference cache LocalVariableDeclaration ReferenceType Map VariableDeclarator m Cast ReferenceType Map MethodInvocation cache MemberReference reader get IfStatement BinaryOperation == MemberReference m Literal null BlockStatement StatementExpression Assignment MemberReference m ClassCreator ReferenceType LRUMap Literal 10 = StatementExpression MethodInvocation cache MemberReference reader MemberReference m put End StatementExpression Assignment MemberReference resultMap MemberReference m = SynchronizedStatement MemberReference resultMap LocalVariableDeclaration ReferenceType BitSet VariableDeclarator result Cast ReferenceType BitSet MethodInvocation resultMap MemberReference cacheKey get IfStatement BinaryOperation == MemberReference result Literal null BlockStatement StatementExpression Assignment MemberReference result ClassCreator ReferenceType BitSet MethodInvocation reader maxDoc = BlockStatement StatementExpression Assignment MemberReference hitsCalculated Literal true = End StatementExpression Assignment MemberReference hits MemberReference result = MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean next IOException StatementExpression MethodInvocation calculateHits StatementExpression Assignment MemberReference nextDoc MethodInvocation hits BinaryOperation + MemberReference nextDoc Literal 1 nextSetBit = ReturnStatement BinaryOperation > MemberReference nextDoc Literal - 1 MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType int doc ReturnStatement MemberReference nextDoc MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType float score ReturnStatement Literal 1.0f MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean skipTo FormalParameter BasicType int target StatementExpression Assignment MemberReference nextDoc MethodInvocation hits MemberReference target nextSetBit = ReturnStatement BinaryOperation > MemberReference nextDoc Literal - 1 MethodDeclaration /**
         * Returns an empty Explanation object.
         * @return an empty Explanation object.
         */ Modifier public ReferenceType Explanation explain FormalParameter BasicType int doc ReturnStatement ClassCreator ReferenceType Explanation MethodDeclaration /**
         * Calculates the ids of the documents matching this range query.
         * @throws IOException if an error occurs while reading from the index.
         */ Modifier private calculateHits IOException IfStatement MemberReference hitsCalculated BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType TermEnum VariableDeclarator enumerator MethodInvocation reader MemberReference lowerTerm terms TryStatement LocalVariableDeclaration BasicType boolean VariableDeclarator checkLower Literal false IfStatement MemberReference ! inclusive BlockStatement StatementExpression Assignment MemberReference checkLower Literal true = End LocalVariableDeclaration ReferenceType String VariableDeclarator testField MethodInvocation getField LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator docs MethodInvocation reader termDocs TryStatement DoStatement MethodInvocation enumerator next BlockStatement LocalVariableDeclaration ReferenceType Term VariableDeclarator term MethodInvocation enumerator term IfStatement BinaryOperation && BinaryOperation != MemberReference term Literal null BinaryOperation == MethodInvocation term field MemberReference testField BlockStatement IfStatement BinaryOperation || MemberReference ! checkLower BinaryOperation > MethodInvocation term MethodInvocation MethodInvocation lowerTerm text compareTo text Literal 0 BlockStatement StatementExpression Assignment MemberReference checkLower Literal false = IfStatement BinaryOperation != MemberReference upperTerm Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator compare MethodInvocation upperTerm MethodInvocation MethodInvocation term text compareTo text IfStatement BinaryOperation || BinaryOperation < MemberReference compare Literal 0 BinaryOperation && MemberReference ! inclusive BinaryOperation == MemberReference compare Literal 0 BlockStatement BreakStatement End End StatementExpression MethodInvocation docs MemberReference enumerator seek WhileStatement MethodInvocation docs next BlockStatement StatementExpression MethodInvocation hits MethodInvocation docs doc set End End BlockStatement BreakStatement End End StatementExpression MethodInvocation docs close StatementExpression MethodInvocation enumerator close StatementExpression Assignment MemberReference hitsCalculated Literal true = SynchronizedStatement MemberReference resultMap StatementExpression MethodInvocation resultMap MemberReference cacheKey MemberReference hits put ReferenceType Scorer ReferenceType Query",0
697,697,,0
202,202,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.rmi.RemoteException Import javax.jcr.Value Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.PropertyDefinition Import org.apache.jackrabbit.rmi.remote.RemoteNodeDefinition Import org.apache.jackrabbit.rmi.remote.RemoteNodeType Import org.apache.jackrabbit.rmi.remote.RemotePropertyDefinition Import org.apache.jackrabbit.rmi.value.SerialValueFactory ClassDeclaration Modifier public /**
 * Local adapter for the JCR-RMI
 * {@link org.apache.jackrabbit.rmi.remote.RemoteNodeType RemoteNodeType}
 * inteface. This class makes a remote node type locally available using
 * the JCR {@link javax.jcr.nodetype.NodeType NodeType} interface.
 *
 * @author Jukka Zitting
 * @see javax.jcr.nodetype.NodeType
 * @see org.apache.jackrabbit.rmi.remote.RemoteNodeType
 */ ClientNodeType FieldDeclaration /** The adapted remote node type. */ Modifier private ReferenceType RemoteNodeType VariableDeclarator remote ConstructorDeclaration Modifier public /**
     * Creates a local adapter for the given remote node type.
     *
     * @param remote remote node type
     * @param factory local adapter factory
     */ ClientNodeType FormalParameter ReferenceType RemoteNodeType remote FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration /**
     * Utility method for creating an array of local node definition
     * adapters for an array of remote node definitions. The node
     * definition adapters are created using the local adapter factory.
     * <p>
     * A <code>null</code> input is treated as an empty array.
     *
     * @param remotes remote node definitions
     * @return local node definition array
     */ Modifier private ReferenceType NodeDefinition getNodeDefArray FormalParameter ReferenceType RemoteNodeDefinition remotes IfStatement BinaryOperation != MemberReference remotes Literal null BlockStatement LocalVariableDeclaration ReferenceType NodeDefinition VariableDeclarator defs ArrayCreator ReferenceType NodeDefinition MemberReference remotes length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference remotes length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i defs MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i remotes getNodeDef getFactory = End ReturnStatement MemberReference defs BlockStatement ReturnStatement ArrayCreator ReferenceType NodeDefinition Literal 0 End MethodDeclaration /**
     * Utility method for creating an array of local property definition
     * adapters for an array of remote property definitions. The property
     * definition adapters are created using the local adapter factory.
     * <p>
     * A <code>null</code> input is treated as an empty array.
     *
     * @param remotes remote property definitions
     * @return local property definition array
     */ Modifier protected ReferenceType PropertyDefinition getPropertyDefArray FormalParameter ReferenceType RemotePropertyDefinition remotes IfStatement BinaryOperation != MemberReference remotes Literal null BlockStatement LocalVariableDeclaration ReferenceType PropertyDefinition VariableDeclarator defs ArrayCreator ReferenceType PropertyDefinition MemberReference remotes length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference remotes length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i defs MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i remotes getPropertyDef getFactory = End ReturnStatement MemberReference defs BlockStatement ReturnStatement ArrayCreator ReferenceType PropertyDefinition Literal 0 End MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getName TryStatement ReturnStatement MethodInvocation remote getName CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isMixin TryStatement ReturnStatement MethodInvocation remote isMixin CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean hasOrderableChildNodes TryStatement ReturnStatement MethodInvocation remote hasOrderableChildNodes CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeType getSupertypes TryStatement ReturnStatement MethodInvocation MethodInvocation remote getSupertypes getNodeTypeArray CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeType getDeclaredSupertypes TryStatement ReturnStatement MethodInvocation MethodInvocation remote getDeclaredSupertypes getNodeTypeArray CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean isNodeType FormalParameter ReferenceType String type TryStatement ReturnStatement MethodInvocation remote MemberReference type isNodeType CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType PropertyDefinition getPropertyDefinitions TryStatement ReturnStatement MethodInvocation MethodInvocation remote getPropertyDefs getPropertyDefArray CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType PropertyDefinition getDeclaredPropertyDefinitions TryStatement ReturnStatement MethodInvocation MethodInvocation remote getDeclaredPropertyDefs getPropertyDefArray CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeDefinition getChildNodeDefinitions TryStatement ReturnStatement MethodInvocation MethodInvocation remote getChildNodeDefs getNodeDefArray CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeDefinition getDeclaredChildNodeDefinitions TryStatement ReturnStatement MethodInvocation MethodInvocation remote getDeclaredChildNodeDefs getNodeDefArray CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean canSetProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value value TryStatement ReturnStatement MethodInvocation remote MemberReference name MethodInvocation SerialValueFactory MemberReference value makeSerialValue canSetProperty CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean canSetProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value values TryStatement LocalVariableDeclaration ReferenceType Value VariableDeclarator serials MethodInvocation SerialValueFactory MemberReference values makeSerialValueArray ReturnStatement MethodInvocation remote MemberReference name MemberReference serials canSetProperty CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean canAddChildNode FormalParameter ReferenceType String name TryStatement ReturnStatement MethodInvocation remote MemberReference name canAddChildNode CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean canAddChildNode FormalParameter ReferenceType String name FormalParameter ReferenceType String type TryStatement ReturnStatement MethodInvocation remote MemberReference name MemberReference type canAddChildNode CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean canRemoveItem FormalParameter ReferenceType String name TryStatement ReturnStatement MethodInvocation remote MemberReference name canRemoveItem CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getPrimaryItemName TryStatement ReturnStatement MethodInvocation remote getPrimaryItemName CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex ReferenceType ClientObject ReferenceType NodeType",1
123,123,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib Import java.util.Iterator Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.query.Query Import javax.jcr.query.QueryResult Import javax.servlet.jsp.JspException Import javax.servlet.jsp.JspTagException Import javax.servlet.jsp.jstl.core.LoopTagSupport Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.taglib.utils.JCRTagConstants Import org.apache.jackrabbit.taglib.utils.JCRTagUtils Import org.apache.taglibs.standard.tag.el.core.ExpressionUtil ClassDeclaration Modifier public /**
 * <p>
 * Iterates over the nodes returned by the given query.
 * </p>
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ QueryTag FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType QueryTag getLog FieldDeclaration /** tag name */ Modifier public static ReferenceType String VariableDeclarator TAG_NAME Literal ""query"" FieldDeclaration /**
     * Name of the scoped variable where the jcr session is stored. If not set
     * then JCRTagConstants.KEY_SESSION is used.
     */ Modifier private ReferenceType String VariableDeclarator session FieldDeclaration /**
     * Query
     */ Modifier private ReferenceType String VariableDeclarator stmt FieldDeclaration /**
     * Query type ( SQL | XPATH )
     */ Modifier private ReferenceType String VariableDeclarator lang FieldDeclaration /**
     * Children Nodes
     */ Modifier private ReferenceType Iterator VariableDeclarator nodes ConstructorDeclaration Modifier public /**
     * Constructor
     */ QueryTag StatementExpression SuperConstructorInvocation StatementExpression This MethodInvocation init MethodDeclaration /**
     * @inheritDoc
     */ Modifier protected BasicType boolean hasNext JspTagException ReturnStatement MethodInvocation nodes hasNext MethodDeclaration /**
     * @inheritDoc
     */ Modifier protected ReferenceType Object next JspTagException ReturnStatement MethodInvocation nodes next MethodDeclaration /**
     * @inheritDoc
     */ Modifier protected prepare JspTagException TryStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator s MethodInvocation JCRTagUtils MemberReference TAG_NAME This MemberReference session This This MemberReference pageContext getSession LocalVariableDeclaration ReferenceType Query VariableDeclarator q MethodInvocation s MethodInvocation getQueryManager MethodInvocation This MethodInvocation getStmt This MethodInvocation getLang createQuery getWorkspace LocalVariableDeclaration ReferenceType QueryResult VariableDeclarator qr MethodInvocation q execute StatementExpression Assignment This MemberReference nodes MethodInvocation qr getNodes = CatchClause CatchClauseParameter RepositoryException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType JspTagException MemberReference msg CatchClause CatchClauseParameter JspException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg warn ThrowStatement ClassCreator ReferenceType JspTagException MemberReference msg MethodDeclaration /**
     * Sets the session
     * 
     * @param session
     */ Modifier public setSession FormalParameter ReferenceType String session StatementExpression Assignment This MemberReference session MemberReference session = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public release StatementExpression SuperMethodInvocation release StatementExpression This MethodInvocation init MethodDeclaration /**
     * init
     *  
     */ Modifier private init StatementExpression Assignment This MemberReference nodes Literal null = StatementExpression Assignment This MemberReference stmt Literal null = StatementExpression Assignment This MemberReference lang Literal ""xpath"" = StatementExpression Assignment This MemberReference session BinaryOperation + BinaryOperation + Literal ""${"" MemberReference JCRTagConstants KEY_SESSION Literal ""}"" = MethodDeclaration /**
     * @return the query
     * @throws JspException
     */ Modifier private ReferenceType String getStmt JspException ReturnStatement Cast ReferenceType String MethodInvocation ExpressionUtil MemberReference TAG_NAME Literal ""query"" This MemberReference stmt ClassReference ReferenceType String This This MemberReference pageContext evalNotNull MethodDeclaration /**
     * Sets the query
     * 
     * @param query
     */ Modifier public setStmt FormalParameter ReferenceType String query StatementExpression Assignment This MemberReference stmt MemberReference query = MethodDeclaration /**
     * Gets the query type
     * 
     * @return @throws
     *         JspTagException
     */ Modifier private ReferenceType String getLang JspTagException IfStatement This MemberReference lang MethodInvocation Literal ""xpath"" equalsIgnoreCase BlockStatement ReturnStatement MemberReference Query XPATH IfStatement This MemberReference lang MethodInvocation Literal ""sql"" equalsIgnoreCase BlockStatement ReturnStatement MemberReference Query SQL BlockStatement ThrowStatement ClassCreator ReferenceType JspTagException BinaryOperation + Literal ""No such Query type. "" This MemberReference lang End End MethodDeclaration /**
     * Sets the query type
     * 
     * @param type
     */ Modifier public setLang FormalParameter ReferenceType String language StatementExpression Assignment This MemberReference lang MemberReference language = ReferenceType LoopTagSupport",1
120,120,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.fs Import java.io.IOException Import java.io.OutputStream ClassDeclaration Modifier public abstract /**
 * Extends the regular <code>java.io.OutputStream</code> with a random
 * access facility. Multiple <code>write()</code> operations can be
 * positioned off sequence with the {@link #seek} method.
 */ RandomAccessOutputStream MethodDeclaration /**
     * Sets the current position in the resource where the next write
     * will occur.
     *
     * @param position the new position in the resource.
     * @throws IOException if an error occurs while seeking to the position.
     */ Modifier public abstract seek FormalParameter BasicType long position IOException ReferenceType OutputStream",0
852,852,,0
639,639,,0
384,384,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.version Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.ElementIterator Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.property.DavPropertyNameSet Import org.w3c.dom.Element Import org.w3c.dom.Document Import java.util.ArrayList Import java.util.List ClassDeclaration Modifier public /**
 * <code>MergeInfo</code> encapsulates the information present in the DAV:merge
 * element, that forms the mandatory request body of a MERGE request.<br>
 * The DAV:merge element is specified to have the following form.
 * <pre>
 * &lt;!ELEMENT merge ANY&gt;
 * ANY value: A sequence of elements with one DAV:source element, at most one
 * DAV:no-auto-merge element, at most one DAV:no-checkout element, at most one
 * DAV:prop element, and any legal set of elements that can occur in a DAV:checkout
 * element.
 * &lt;!ELEMENT source (href+)&gt;
 * &lt;!ELEMENT no-auto-merge EMPTY&gt;
 * &lt;!ELEMENT no-checkout EMPTY&gt;
 * prop: see <a href=""http://www.ietf.org/rfc/rfc2518.txt"">RFC 2518, Section 12.11</a>
 * </pre>
 */ MergeInfo FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType MergeInfo getLogger FieldDeclaration Modifier private final ReferenceType Element VariableDeclarator mergeElement FieldDeclaration Modifier private final ReferenceType DavPropertyNameSet VariableDeclarator propertyNameSet ConstructorDeclaration Modifier public /**
     * Create a new <code>MergeInfo</code>
     *
     * @param mergeElement
     * @throws IllegalArgumentException if the mergeElement is <code>null</code>
     * or not a DAV:merge element.
     */ MergeInfo FormalParameter ReferenceType Element mergeElement IfStatement MethodInvocation ! DomUtil MemberReference mergeElement MemberReference XML_MERGE MemberReference NAMESPACE matches BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""'DAV:merge' element expected"" End LocalVariableDeclaration ReferenceType Element VariableDeclarator propElem MethodInvocation DomUtil MemberReference mergeElement MemberReference DavConstants XML_PROP MemberReference DavConstants NAMESPACE getChildElement IfStatement BinaryOperation != MemberReference propElem Literal null BlockStatement StatementExpression Assignment MemberReference propertyNameSet ClassCreator ReferenceType DavPropertyNameSet MemberReference propElem = StatementExpression MethodInvocation mergeElement MemberReference propElem removeChild BlockStatement StatementExpression Assignment MemberReference propertyNameSet ClassCreator ReferenceType DavPropertyNameSet = End StatementExpression Assignment This MemberReference mergeElement MemberReference mergeElement = MethodDeclaration /**
     * Returns the URL specified with the DAV:source element or <code>null</code>
     * if no such child element is present in the DAV:merge element.
     *
     * @return href present in the DAV:source child element or <code>null</code>.
     */ Modifier public ReferenceType String getSourceHrefs LocalVariableDeclaration ReferenceType List VariableDeclarator sourceHrefs ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Element VariableDeclarator srcElem MethodInvocation DomUtil MemberReference mergeElement MemberReference DavConstants XML_SOURCE MemberReference DavConstants NAMESPACE getChildElement IfStatement BinaryOperation != MemberReference srcElem Literal null BlockStatement LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator it MethodInvocation DomUtil MemberReference srcElem MemberReference DavConstants XML_HREF MemberReference DavConstants NAMESPACE getChildren WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator href MethodInvocation DomUtil MethodInvocation it nextElement getTextTrim IfStatement BinaryOperation != MemberReference href Literal null BlockStatement StatementExpression MethodInvocation sourceHrefs MemberReference href add End End End ReturnStatement Cast ReferenceType String MethodInvocation sourceHrefs ArrayCreator ReferenceType String MethodInvocation sourceHrefs size toArray MethodDeclaration /**
     * Returns true if the DAV:merge element contains a DAV:no-auto-merge child element.
     *
     * @return true if the DAV:merge element contains a DAV:no-auto-merge child.
     */ Modifier public BasicType boolean isNoAutoMerge ReturnStatement MethodInvocation DomUtil MemberReference mergeElement MemberReference XML_N0_AUTO_MERGE MemberReference NAMESPACE hasChildElement MethodDeclaration /**
     * Returns true if the DAV:merge element contains a DAV:no-checkout child element.
     *
     * @return true if the DAV:merge element contains a DAV:no-checkout child
     */ Modifier public BasicType boolean isNoCheckout ReturnStatement MethodInvocation DomUtil MemberReference mergeElement MemberReference XML_N0_CHECKOUT MemberReference NAMESPACE hasChildElement MethodDeclaration /**
     * Returns a {@link DavPropertyNameSet}. If the DAV:merge element contains
     * a DAV:prop child element the properties specified therein are included
     * in the set. Otherwise an empty set is returned.<br>
     *
     * <b>WARNING:</b> modifying the DavPropertyNameSet returned by this method does
     * not modify this <code>UpdateInfo</code>.
     *
     * @return set listing the properties specified in the DAV:prop element indicating
     * those properties that must be reported in the response body.
     */ Modifier public ReferenceType DavPropertyNameSet getPropertyNameSet ReturnStatement MemberReference propertyNameSet MethodDeclaration /**
     * Returns the DAV:merge element used to create this <code>MergeInfo</code>
     * object.
     *
     * @return DAV:merge element
     */ Modifier public ReferenceType Element getMergeElement ReturnStatement MemberReference mergeElement MethodDeclaration /**
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator elem Cast ReferenceType Element MethodInvocation document MemberReference mergeElement Literal true importNode IfStatement MethodInvocation ! propertyNameSet isEmpty BlockStatement StatementExpression MethodInvocation elem MethodInvocation propertyNameSet MemberReference document toXml appendChild End ReturnStatement MemberReference elem ReferenceType DeltaVConstants ReferenceType XmlSerializable",1
690,690,,1
510,510,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.xml Import org.apache.jackrabbit.BaseException Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.util.ISO9075 Import org.apache.jackrabbit.value.ValueHelper Import org.apache.log4j.Logger Import org.xml.sax.ContentHandler Import org.xml.sax.SAXException Import org.xml.sax.helpers.AttributesImpl Import javax.jcr.Node Import javax.jcr.Property Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Value Import java.util.ArrayList Import java.util.Iterator Import java.util.List ClassDeclaration Modifier public /**
 * A <code>DocViewSAXEventGenerator</code> instance can be used to generate
 * SAX events representing the serialized form of an item in Document View XML.
 */ DocViewSAXEventGenerator FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType DocViewSAXEventGenerator getLogger FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator CDATA_TYPE Literal ""CDATA"" FieldDeclaration Modifier private final ReferenceType List VariableDeclarator props ConstructorDeclaration Modifier public /**
     * Constructor
     *
     * @param node           the node state which should be serialized
     * @param noRecurse      if true, only <code>node</code> and its properties
     *                       will be serialized; otherwise the entire hierarchy
     *                       starting with <code>node</code> will be serialized.
     * @param skipBinary     flag governing whether binary properties are to be
     *                       serialized.
     * @param contentHandler the content handler to feed the SAX events to
     * @throws RepositoryException if an error occurs
     */ DocViewSAXEventGenerator FormalParameter ReferenceType Node node FormalParameter BasicType boolean noRecurse FormalParameter BasicType boolean skipBinary FormalParameter ReferenceType ContentHandler contentHandler RepositoryException StatementExpression SuperConstructorInvocation MemberReference node MemberReference noRecurse MemberReference skipBinary MemberReference contentHandler StatementExpression Assignment MemberReference props ClassCreator ReferenceType ArrayList = MethodDeclaration Modifier private ReferenceType QName getQName FormalParameter ReferenceType String rawName RepositoryException TryStatement ReturnStatement MethodInvocation QName MemberReference rawName MemberReference nsResolver fromJCRName CatchClause CatchClauseParameter BaseException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""internal error: failed to resolve namespace mappings"" StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected entering FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException SAXException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected enteringProperties FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException SAXException StatementExpression MethodInvocation props clear MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected leavingProperties FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException SAXException LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation node getName IfStatement MethodInvocation name MemberReference jcrXMLText equals BlockStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation props iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator prop Cast ReferenceType Property MethodInvocation iter next LocalVariableDeclaration ReferenceType String VariableDeclarator propName MethodInvocation prop getName IfStatement MethodInvocation propName MemberReference jcrXMLCharacters equals BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator chars MethodInvocation prop MethodInvocation getString MethodInvocation toCharArray getValue StatementExpression MethodInvocation contentHandler MemberReference chars Literal 0 MemberReference chars length characters End End BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator elemName IfStatement BinaryOperation == MethodInvocation node getDepth Literal 0 BlockStatement StatementExpression Assignment MemberReference elemName MemberReference jcrRoot = BlockStatement StatementExpression Assignment MemberReference elemName MethodInvocation ISO9075 MemberReference name encode = End LocalVariableDeclaration ReferenceType AttributesImpl VariableDeclarator attrs ClassCreator ReferenceType AttributesImpl LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation props iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator prop Cast ReferenceType Property MethodInvocation iter next LocalVariableDeclaration ReferenceType String VariableDeclarator propName MethodInvocation prop getName LocalVariableDeclaration ReferenceType String VariableDeclarator attrName MethodInvocation ISO9075 MemberReference propName encode LocalVariableDeclaration ReferenceType QName VariableDeclarator qName MethodInvocation MemberReference attrName getQName IfStatement BinaryOperation && BinaryOperation == MethodInvocation prop getType MemberReference PropertyType BINARY MemberReference skipBinary BlockStatement StatementExpression MethodInvocation attrs MethodInvocation qName getNamespaceURI MethodInvocation qName getLocalName MemberReference attrName MemberReference CDATA_TYPE Literal """" addAttribute BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator attrValue ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType boolean VariableDeclarator multiValued MethodInvocation prop MethodInvocation isMultiple getDefinition LocalVariableDeclaration ReferenceType Value VariableDeclarator vals IfStatement MemberReference multiValued BlockStatement StatementExpression Assignment MemberReference vals MethodInvocation prop getValues = BlockStatement StatementExpression Assignment MemberReference vals ArrayCreator ReferenceType Value ArrayInitializer MethodInvocation prop getValue = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference vals length MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation attrValue Literal "" "" append End StatementExpression MethodInvocation attrValue MethodInvocation ValueHelper MemberReference ArraySelector MemberReference i vals Literal true serialize append End StatementExpression MethodInvocation attrs MethodInvocation qName getNamespaceURI MethodInvocation qName getLocalName MemberReference attrName MemberReference CDATA_TYPE MethodInvocation attrValue toString addAttribute End End LocalVariableDeclaration ReferenceType QName VariableDeclarator qName MethodInvocation MemberReference elemName getQName StatementExpression MethodInvocation contentHandler MethodInvocation qName getNamespaceURI MethodInvocation qName getLocalName MemberReference elemName MemberReference attrs startElement End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected leaving FormalParameter ReferenceType Node node FormalParameter BasicType int level RepositoryException SAXException LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation node getName IfStatement MethodInvocation name MemberReference jcrXMLText equals BlockStatement ReturnStatement End StatementExpression Assignment MemberReference name MethodInvocation ISO9075 MemberReference name encode = LocalVariableDeclaration ReferenceType String VariableDeclarator elemName IfStatement BinaryOperation == MethodInvocation node getDepth Literal 0 BlockStatement StatementExpression Assignment MemberReference elemName MemberReference jcrRoot = BlockStatement StatementExpression Assignment MemberReference elemName MethodInvocation ISO9075 MemberReference name encode = End LocalVariableDeclaration ReferenceType QName VariableDeclarator qName MethodInvocation MemberReference elemName getQName StatementExpression MethodInvocation contentHandler MethodInvocation qName getNamespaceURI MethodInvocation qName getLocalName MemberReference elemName endElement MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected entering FormalParameter ReferenceType Property prop FormalParameter BasicType int level RepositoryException SAXException StatementExpression MethodInvocation props MemberReference prop add MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected leaving FormalParameter ReferenceType Property prop FormalParameter BasicType int level RepositoryException SAXException ReferenceType AbstractSAXEventGenerator",0
257,257,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.FilterIndexReader Import org.apache.lucene.index.TermDocs Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermPositions Import java.util.BitSet Import java.io.IOException ClassDeclaration /**
 * Overwrites the methods that would modify the index and throws an
 * {@link UnsupportedOperationException} in each of those methods. A
 * <code>ReadOnlyIndexReader</code> will always show all documents that have
 * not been deleted at the time when the index reader is created.
 */ ReadOnlyIndexReader FieldDeclaration /**
     * The underlying shared reader.
     */ Modifier private final ReferenceType SharedIndexReader VariableDeclarator reader FieldDeclaration /**
     * The deleted documents as initially read from the IndexReader passed
     * in the constructor of this class.
     */ Modifier private final ReferenceType BitSet VariableDeclarator deleted ConstructorDeclaration Modifier public /**
     * Creates a new index reader based on <code>reader</code> at
     * <code>modificationTick</code>.
     * @param reader the underlying <code>IndexReader</code>.
     * @param deleted the documents that are deleted in <code>reader</code>.
     */ ReadOnlyIndexReader FormalParameter ReferenceType SharedIndexReader reader FormalParameter ReferenceType BitSet deleted StatementExpression SuperConstructorInvocation MemberReference reader StatementExpression Assignment This MemberReference reader MemberReference reader = StatementExpression Assignment This MemberReference deleted MemberReference deleted = StatementExpression MethodInvocation reader This addClient MethodDeclaration /**
     * Returns the <code>DocId</code> of the parent of <code>n</code> or
     * {@link DocId#NULL} if <code>n</code> does not have a parent
     * (<code>n</code> is the root node).
     *
     * @param n the document number.
     * @return the <code>DocId</code> of <code>n</code>'s parent.
     * @throws IOException if an error occurs while reading from the index.
     */ Modifier public ReferenceType DocId getParent FormalParameter BasicType int n IOException ReturnStatement MethodInvocation MethodInvocation MemberReference n MemberReference deleted getParent getBase MethodDeclaration /**
     * Returns the {@link SharedIndexReader} this reader is based on.
     *
     * @return the {@link SharedIndexReader} this reader is based on.
     */ Modifier public ReferenceType SharedIndexReader getBase ReturnStatement Cast ReferenceType SharedIndexReader MemberReference in MethodDeclaration /**
     * Returns true if document <code>n</code> has been deleted
     * @param n the document number
     * @return true if document <code>n</code> has been deleted
     */ Modifier public BasicType boolean isDeleted FormalParameter BasicType int n ReturnStatement MethodInvocation deleted MemberReference n get MethodDeclaration /**
     * Returns <code>true</code> if any documents have been deleted.
     *
     * @return <code>true</code> if any documents have been deleted.
     */ Modifier public BasicType boolean hasDeletions ReturnStatement MethodInvocation ! deleted isEmpty MethodDeclaration /**
     * Returns the number of documents in this index reader.
     *
     * @return the number of documents in this index reader.
     */ Modifier public BasicType int numDocs ReturnStatement BinaryOperation - MethodInvocation maxDoc MethodInvocation deleted cardinality MethodDeclaration /**
     * @exception UnsupportedOperationException always
     */ Modifier final protected doDelete FormalParameter BasicType int docNum ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""IndexReader is read-only"" MethodDeclaration /**
     * @exception UnsupportedOperationException always
     */ Modifier final protected doUndeleteAll ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""IndexReader is read-only"" MethodDeclaration /**
     * @exception UnsupportedOperationException always
     */ Modifier final protected doCommit ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""IndexReader is read-only"" MethodDeclaration /**
     * Unregisters this reader from the shared index reader. Specifically, this
     * method does <b>not</b> close the underlying index reader, because it is
     * shared by multiple <code>ReadOnlyIndexReader</code>s.
     * @throws IOException if an error occurs while closing the reader.
     */ Modifier protected doClose IOException StatementExpression MethodInvocation reader This removeClient MethodDeclaration /**
     * Wraps the underlying <code>TermDocs</code> and filters out documents
     * marked as deleted.<br/>
     * If <code>term</code> is for a {@link FieldNames#UUID} field and this
     * <code>ReadOnlyIndexReader</code> does not have such a document,
     * {@link CachingIndexReader#EMPTY} is returned.
     *
     * @param term the term to enumerate the docs for.
     * @return TermDocs for <code>term</code>.
     * @throws IOException if an error occurs while reading from the index.
     */ Modifier public ReferenceType TermDocs termDocs FormalParameter ReferenceType Term term IOException LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator td MethodInvocation reader MemberReference term termDocs IfStatement BinaryOperation != MemberReference td MemberReference CachingIndexReader EMPTY BlockStatement StatementExpression Assignment MemberReference td ClassCreator ReferenceType FilteredTermDocs MemberReference td = End ReturnStatement MemberReference td MethodDeclaration /**
     * Wraps the underlying <code>TermDocs</code> and filters out documents
     * marked as deleted.
     *
     * @return TermDocs over the whole index.
     * @throws IOException if an error occurs while reading from the index.
     */ Modifier public ReferenceType TermDocs termDocs IOException ReturnStatement ClassCreator ReferenceType FilteredTermDocs SuperMethodInvocation termDocs MethodDeclaration /**
     * Wraps the underlying <code>TermPositions</code> and filters out documents
     * marked as deleted.
     *
     * @return TermPositions over the whole index.
     * @throws IOException if an error occurs while reading from the index.
     */ Modifier public ReferenceType TermPositions termPositions IOException ReturnStatement ClassCreator ReferenceType FilteredTermPositions SuperMethodInvocation termPositions ClassDeclaration Modifier private /**
     * Filters a wrapped TermDocs by omitting documents marked as deleted.
     */ FilteredTermDocs ConstructorDeclaration Modifier public /**
         * Creates a new filtered TermDocs based on <code>in</code>.
         *
         * @param in the TermDocs to filter.
         */ FilteredTermDocs FormalParameter ReferenceType TermDocs in StatementExpression SuperConstructorInvocation MemberReference in MethodDeclaration /**
         * @inheritDoc
         */ Modifier public BasicType boolean next IOException LocalVariableDeclaration BasicType boolean VariableDeclarator hasNext SuperMethodInvocation next WhileStatement BinaryOperation && MemberReference hasNext MethodInvocation deleted SuperMethodInvocation doc get BlockStatement StatementExpression Assignment MemberReference hasNext SuperMethodInvocation next = End ReturnStatement MemberReference hasNext MethodDeclaration /**
         * @inheritDoc
         */ Modifier public BasicType int read FormalParameter BasicType int docs FormalParameter BasicType int freqs IOException LocalVariableDeclaration BasicType int VariableDeclarator count ForStatement ForControl Assignment MemberReference count Literal 0 = BinaryOperation && BinaryOperation < MemberReference count MemberReference docs length MethodInvocation next MemberReference ++ count BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference count docs MethodInvocation doc = StatementExpression Assignment MemberReference ArraySelector MemberReference count freqs MethodInvocation freq = End ReturnStatement MemberReference count MethodDeclaration /**
         * @inheritDoc
         */ Modifier public BasicType boolean skipTo FormalParameter BasicType int i IOException LocalVariableDeclaration BasicType boolean VariableDeclarator exists SuperMethodInvocation MemberReference i skipTo WhileStatement BinaryOperation && MemberReference exists MethodInvocation deleted MethodInvocation doc get BlockStatement StatementExpression Assignment MemberReference exists MethodInvocation next = End ReturnStatement MemberReference exists ReferenceType FilterTermDocs ClassDeclaration Modifier private final /**
     * Filters a wrapped TermPositions by omitting documents marked as deleted.
     */ FilteredTermPositions ConstructorDeclaration Modifier public /**
         * Creates a new filtered TermPositions based on <code>in</code>.
         *
         * @param in the TermPositions to filter.
         */ FilteredTermPositions FormalParameter ReferenceType TermPositions in StatementExpression SuperConstructorInvocation MemberReference in MethodDeclaration /**
         * @inheritDoc
         */ Modifier public BasicType int nextPosition IOException ReturnStatement Cast ReferenceType TermPositions This MemberReference in ReferenceType FilteredTermDocs ReferenceType TermPositions ReferenceType FilterIndexReader",1
423,423,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype Import javax.jcr.PropertyType Import java.util.ArrayList Import java.util.Arrays Import java.util.HashMap Import java.util.HashSet Import java.util.Iterator Import java.util.List ClassDeclaration Modifier public /**
 * A <code>NodeTypeDefDiff</code> represents the result of the comparison of
 * two node type definitions.
 * <p/>
 * The result of the comparison can be categorized as one of the following types:
 * <p/>
 * <b><code>NONE</code></b> inidcates that there is no modification at all.
 * <p/>
 * A <b><code>TRIVIAL</code></b> modification has no impact on the consistency
 * of existing content and does not affect existing/assigned definition id's.
 * The following modifications are considered <code>TRIVIAL</code>:
 * <ul>
 * <li>changing node type <code>orderableChildNodes</code> flag
 * <li>changing node type <code>primaryItemName</code> value
 * <li>adding non-<code>mandatory</code> property/child node
 * <li>changing property/child node <code>protected</code> flag
 * <li>changing property/child node <code>onParentVersion</code> value
 * <li>changing property/child node <code>mandatory</code> flag to <code>false</code>
 * <li>changing property/child node <code>autoCreated</code> flag
 * <li>changing child node <code>defaultPrimaryType</code>
 * <li>changing child node <code>sameNameSiblings</code> flag to <code>true</code>
 * <li>weaken property <code>valueConstraints</code> (e.g. by removing completely
 * or by adding to existing or by making a single constraint less restrictive)
 * <li>changing property <code>defaultValues</code>
 * </ul>
 * <p/>
 * A <b><code>MINOR</code></b> modification has no impact on the consistency
 * of existing content but <i>does</i> affect existing/assigned definition id's.
 * The following modifications are considered <code>MINOR</code>:
 * <ul>
 * <li>changing specific property/child node <code>name</code> to <code>*</code>
 * <li>weaken child node <code>requiredPrimaryTypes</code> (e.g. by removing)
 * <li>changing specific property <code>requiredType</code> to <code>undefined</code>
 * <li>changing property <code>multiple</code> flag to <code>true</code>
 * </ul>
 * <p/>
 * A <b><code>MAJOR</code></b> modification <i>affects</i> the consistency of
 * existing content and <i>does</i> change existing/assigned definition id's.
 * All modifications that are neither <b><code>TRIVIAL</code></b> nor
 * <b><code>MINOR</code></b> are considered <b><code>MAJOR</code></b>.
 *
 * @see #getType()
 */ NodeTypeDefDiff FieldDeclaration /**
     * no modification
     */ Modifier public final static BasicType int VariableDeclarator NONE Literal 0 FieldDeclaration /**
     * trivial modification: does neither affect consistency of existing content
     * nor does it change existing/assigned definition id's
     */ Modifier public final static BasicType int VariableDeclarator TRIVIAL Literal 1 FieldDeclaration /**
     * minor modification: does not affect consistency of existing content but
     * <i>does</i> change existing/assigned definition id's
     */ Modifier public final static BasicType int VariableDeclarator MINOR Literal 2 FieldDeclaration /**
     * major modification: <i>does</i> affect consistency of existing content
     * and <i>does</i> change existing/assigned definition id's
     */ Modifier public final static BasicType int VariableDeclarator MAJOR Literal 3 FieldDeclaration Modifier private final ReferenceType NodeTypeDef VariableDeclarator oldDef FieldDeclaration Modifier private final ReferenceType NodeTypeDef VariableDeclarator newDef FieldDeclaration Modifier private BasicType int VariableDeclarator type FieldDeclaration Modifier private ReferenceType List VariableDeclarator propDefDiffs ClassCreator ReferenceType ArrayList FieldDeclaration Modifier private ReferenceType List VariableDeclarator childNodeDefDiffs ClassCreator ReferenceType ArrayList ConstructorDeclaration Modifier private /**
     * Constructor
     */ NodeTypeDefDiff FormalParameter ReferenceType NodeTypeDef oldDef FormalParameter ReferenceType NodeTypeDef newDef StatementExpression Assignment This MemberReference oldDef MemberReference oldDef = StatementExpression Assignment This MemberReference newDef MemberReference newDef = StatementExpression MethodInvocation init MethodDeclaration /**
     *
     */ Modifier private init IfStatement MethodInvocation oldDef MemberReference newDef equals BlockStatement StatementExpression Assignment MemberReference type MemberReference NONE = BlockStatement StatementExpression Assignment MemberReference type MemberReference TRIVIAL = IfStatement MethodInvocation supertypesChanged BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = End IfStatement BinaryOperation != MethodInvocation oldDef isMixin MethodInvocation newDef isMixin BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = End LocalVariableDeclaration BasicType int VariableDeclarator tmpType MethodInvocation buildPropDefDiffs IfStatement BinaryOperation > MemberReference tmpType MemberReference type BlockStatement StatementExpression Assignment MemberReference type MemberReference tmpType = End StatementExpression Assignment MemberReference tmpType MethodInvocation buildChildNodeDefDiffs = IfStatement BinaryOperation > MemberReference tmpType MemberReference type BlockStatement StatementExpression Assignment MemberReference type MemberReference tmpType = End End MethodDeclaration /**
     * @param oldDef
     * @param newDef
     * @return
     */ Modifier public static ReferenceType NodeTypeDefDiff create FormalParameter ReferenceType NodeTypeDef oldDef FormalParameter ReferenceType NodeTypeDef newDef IfStatement BinaryOperation || BinaryOperation == MemberReference oldDef Literal null BinaryOperation == MemberReference newDef Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""arguments can not be null"" End IfStatement MethodInvocation ! oldDef MethodInvocation MethodInvocation newDef getName equals getName BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""at least node type names must be matching"" End ReturnStatement ClassCreator ReferenceType NodeTypeDefDiff MemberReference oldDef MemberReference newDef MethodDeclaration /**
     * @return
     */ Modifier public BasicType boolean isModified ReturnStatement BinaryOperation != MemberReference type MemberReference NONE MethodDeclaration /**
     * @return
     */ Modifier public BasicType boolean isTrivial ReturnStatement BinaryOperation == MemberReference type MemberReference TRIVIAL MethodDeclaration /**
     * @return
     */ Modifier public BasicType boolean isMinor ReturnStatement BinaryOperation == MemberReference type MemberReference MINOR MethodDeclaration /**
     * @return
     */ Modifier public BasicType boolean isMajor ReturnStatement BinaryOperation == MemberReference type MemberReference MAJOR MethodDeclaration /**
     * Returns the type of modification as expressed by the following constants:
     * <ul>
     * <li><b><code>NONE</code></b>: no modification at all
     * <li><b><code>TRIVIAL</code></b>: does neither affect consistency of
     * existing content nor does it change existing/assigned definition id's
     * <li><b><code>MINOR</code></b>: does not affect consistency of existing
     * content but <i>does</i> change existing/assigned definition id's
     * <li><b><code>MAJOR</code></b>: <i>does</i> affect consistency of existing
     * content and <i>does</i> change existing/assigned definition id's
     * </ul>
     *
     * @return the type of modification
     */ Modifier public BasicType int getType ReturnStatement MemberReference type MethodDeclaration /**
     * @return
     */ Modifier public BasicType boolean supertypesChanged ReturnStatement MethodInvocation ! Arrays MethodInvocation oldDef getSupertypes MethodInvocation newDef getSupertypes equals MethodDeclaration /**
     * @return
     */ Modifier public BasicType boolean propertyDefsChanged ReturnStatement MethodInvocation ! Arrays MethodInvocation oldDef getPropertyDefs MethodInvocation newDef getPropertyDefs equals MethodDeclaration /**
     * @return
     */ Modifier public BasicType boolean childNodeDefsChanged ReturnStatement MethodInvocation ! Arrays MethodInvocation oldDef getChildNodeDefs MethodInvocation newDef getChildNodeDefs equals MethodDeclaration /**
     * @return
     */ Modifier private BasicType int buildPropDefDiffs LocalVariableDeclaration BasicType int VariableDeclarator maxType MemberReference NONE LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pda1 MethodInvocation oldDef getPropertyDefs LocalVariableDeclaration ReferenceType HashMap VariableDeclarator defs1 ClassCreator ReferenceType HashMap ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pda1 length MemberReference ++ i BlockStatement StatementExpression MethodInvocation defs1 MemberReference ArraySelector MemberReference i MethodInvocation getId pda1 MemberReference ArraySelector MemberReference i pda1 put End LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pda2 MethodInvocation newDef getPropertyDefs LocalVariableDeclaration ReferenceType HashMap VariableDeclarator defs2 ClassCreator ReferenceType HashMap ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pda2 length MemberReference ++ i BlockStatement StatementExpression MethodInvocation defs2 MemberReference ArraySelector MemberReference i MethodInvocation getId pda2 MemberReference ArraySelector MemberReference i pda2 put End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation defs1 MethodInvocation iterator keySet WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType PropDefId VariableDeclarator id Cast ReferenceType PropDefId MethodInvocation iter next LocalVariableDeclaration ReferenceType PropDef VariableDeclarator def1 Cast ReferenceType PropDef MethodInvocation defs1 MemberReference id get LocalVariableDeclaration ReferenceType PropDef VariableDeclarator def2 Cast ReferenceType PropDef MethodInvocation defs2 MemberReference id get LocalVariableDeclaration ReferenceType PropDefDiff VariableDeclarator diff ClassCreator ReferenceType PropDefDiff MemberReference def1 MemberReference def2 IfStatement BinaryOperation > MethodInvocation diff getType MemberReference maxType BlockStatement StatementExpression Assignment MemberReference maxType MethodInvocation diff getType = End StatementExpression MethodInvocation propDefDiffs MemberReference diff add StatementExpression MethodInvocation defs2 MemberReference id remove End StatementExpression Assignment MemberReference iter MethodInvocation defs2 MethodInvocation iterator keySet = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType PropDefId VariableDeclarator id Cast ReferenceType PropDefId MethodInvocation iter next LocalVariableDeclaration ReferenceType PropDef VariableDeclarator def Cast ReferenceType PropDef MethodInvocation defs2 MemberReference id get LocalVariableDeclaration ReferenceType PropDefDiff VariableDeclarator diff ClassCreator ReferenceType PropDefDiff Literal null MemberReference def IfStatement BinaryOperation > MethodInvocation diff getType MemberReference maxType BlockStatement StatementExpression Assignment MemberReference maxType MethodInvocation diff getType = End StatementExpression MethodInvocation propDefDiffs MemberReference diff add End ReturnStatement MemberReference maxType MethodDeclaration /**
     * @return
     */ Modifier private BasicType int buildChildNodeDefDiffs LocalVariableDeclaration BasicType int VariableDeclarator maxType MemberReference NONE LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator cnda1 MethodInvocation oldDef getChildNodeDefs LocalVariableDeclaration ReferenceType HashMap VariableDeclarator defs1 ClassCreator ReferenceType HashMap ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference cnda1 length MemberReference ++ i BlockStatement StatementExpression MethodInvocation defs1 MemberReference ArraySelector MemberReference i MethodInvocation getId cnda1 MemberReference ArraySelector MemberReference i cnda1 put End LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator cnda2 MethodInvocation newDef getChildNodeDefs LocalVariableDeclaration ReferenceType HashMap VariableDeclarator defs2 ClassCreator ReferenceType HashMap ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference cnda1 length MemberReference ++ i BlockStatement StatementExpression MethodInvocation defs2 MemberReference ArraySelector MemberReference i MethodInvocation getId cnda2 MemberReference ArraySelector MemberReference i cnda2 put End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation defs1 MethodInvocation iterator keySet WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeDefId VariableDeclarator id Cast ReferenceType NodeDefId MethodInvocation iter next LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator def1 Cast ReferenceType NodeDef MethodInvocation defs1 MemberReference id get LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator def2 Cast ReferenceType NodeDef MethodInvocation defs2 MemberReference id get LocalVariableDeclaration ReferenceType ChildNodeDefDiff VariableDeclarator diff ClassCreator ReferenceType ChildNodeDefDiff MemberReference def1 MemberReference def2 IfStatement BinaryOperation > MethodInvocation diff getType MemberReference maxType BlockStatement StatementExpression Assignment MemberReference maxType MethodInvocation diff getType = End StatementExpression MethodInvocation childNodeDefDiffs MemberReference diff add StatementExpression MethodInvocation defs2 MemberReference id remove End StatementExpression Assignment MemberReference iter MethodInvocation defs2 MethodInvocation iterator keySet = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeDefId VariableDeclarator id Cast ReferenceType NodeDefId MethodInvocation iter next LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator def Cast ReferenceType NodeDef MethodInvocation defs2 MemberReference id get LocalVariableDeclaration ReferenceType ChildNodeDefDiff VariableDeclarator diff ClassCreator ReferenceType ChildNodeDefDiff Literal null MemberReference def IfStatement BinaryOperation > MethodInvocation diff getType MemberReference maxType BlockStatement StatementExpression Assignment MemberReference maxType MethodInvocation diff getType = End StatementExpression MethodInvocation childNodeDefDiffs MemberReference diff add End ReturnStatement MemberReference maxType ClassDeclaration Modifier abstract ChildItemDefDiff FieldDeclaration Modifier final protected ReferenceType ItemDef VariableDeclarator oldDef FieldDeclaration Modifier final protected ReferenceType ItemDef VariableDeclarator newDef FieldDeclaration Modifier protected BasicType int VariableDeclarator type ConstructorDeclaration ChildItemDefDiff FormalParameter ReferenceType ItemDef oldDef FormalParameter ReferenceType ItemDef newDef StatementExpression Assignment This MemberReference oldDef MemberReference oldDef = StatementExpression Assignment This MemberReference newDef MemberReference newDef = StatementExpression MethodInvocation init MethodDeclaration Modifier protected init IfStatement MethodInvocation isAdded BlockStatement IfStatement MethodInvocation ! newDef isMandatory BlockStatement StatementExpression Assignment MemberReference type MemberReference TRIVIAL = BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = End IfStatement MethodInvocation isRemoved BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = BlockStatement IfStatement MethodInvocation oldDef MemberReference newDef equals BlockStatement StatementExpression Assignment MemberReference type MemberReference NONE = BlockStatement IfStatement BinaryOperation && BinaryOperation != MethodInvocation oldDef isMandatory MethodInvocation newDef isMandatory MethodInvocation newDef isMandatory BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = BlockStatement IfStatement BinaryOperation && MethodInvocation ! oldDef definesResidual MethodInvocation newDef definesResidual BlockStatement StatementExpression Assignment MemberReference type MemberReference MINOR = BlockStatement IfStatement MethodInvocation ! oldDef MethodInvocation MethodInvocation newDef getName equals getName BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = BlockStatement StatementExpression Assignment MemberReference type MemberReference TRIVIAL = End End End End End End MethodDeclaration Modifier public BasicType int getType ReturnStatement MemberReference type MethodDeclaration Modifier public BasicType boolean isAdded ReturnStatement BinaryOperation && BinaryOperation == MemberReference oldDef Literal null BinaryOperation != MemberReference newDef Literal null MethodDeclaration Modifier public BasicType boolean isRemoved ReturnStatement BinaryOperation && BinaryOperation != MemberReference oldDef Literal null BinaryOperation == MemberReference newDef Literal null MethodDeclaration Modifier public BasicType boolean isModified ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference oldDef Literal null BinaryOperation != MemberReference newDef Literal null MethodInvocation ! oldDef MemberReference newDef equals ClassDeclaration Modifier public PropDefDiff ConstructorDeclaration PropDefDiff FormalParameter ReferenceType PropDef oldDef FormalParameter ReferenceType PropDef newDef StatementExpression SuperConstructorInvocation MemberReference oldDef MemberReference newDef MethodDeclaration Modifier public ReferenceType PropDef getOldDef ReturnStatement Cast ReferenceType PropDef MemberReference oldDef MethodDeclaration Modifier public ReferenceType PropDef getNewDef ReturnStatement Cast ReferenceType PropDef MemberReference newDef MethodDeclaration Modifier protected init StatementExpression SuperMethodInvocation init IfStatement BinaryOperation && BinaryOperation && MethodInvocation isModified BinaryOperation != MemberReference type MemberReference NONE BinaryOperation != MemberReference type MemberReference MAJOR BlockStatement LocalVariableDeclaration ReferenceType ValueConstraint VariableDeclarator vca1 MethodInvocation MethodInvocation getValueConstraints getOldDef LocalVariableDeclaration ReferenceType HashSet VariableDeclarator set1 ClassCreator ReferenceType HashSet ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference vca1 length MemberReference ++ i BlockStatement StatementExpression MethodInvocation set1 MemberReference ArraySelector MemberReference i MethodInvocation getDefinition vca1 add End LocalVariableDeclaration ReferenceType ValueConstraint VariableDeclarator vca2 MethodInvocation MethodInvocation getValueConstraints getNewDef LocalVariableDeclaration ReferenceType HashSet VariableDeclarator set2 ClassCreator ReferenceType HashSet ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference vca2 length MemberReference ++ i BlockStatement StatementExpression MethodInvocation set2 MemberReference ArraySelector MemberReference i MethodInvocation getDefinition vca2 add End IfStatement BinaryOperation && MethodInvocation set1 isEmpty MethodInvocation ! set2 isEmpty BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = IfStatement BinaryOperation && MethodInvocation ! set2 MemberReference set1 containsAll MethodInvocation ! set2 isEmpty BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = End End IfStatement BinaryOperation == MemberReference type MemberReference TRIVIAL BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator t1 MethodInvocation MethodInvocation getRequiredType getOldDef LocalVariableDeclaration BasicType int VariableDeclarator t2 MethodInvocation MethodInvocation getRequiredType getNewDef IfStatement BinaryOperation != MemberReference t1 MemberReference t2 BlockStatement IfStatement BinaryOperation == MemberReference t2 MemberReference PropertyType UNDEFINED BlockStatement StatementExpression Assignment MemberReference type MemberReference MINOR = BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = End End LocalVariableDeclaration BasicType boolean VariableDeclarator b1 MethodInvocation MethodInvocation isMultiple getOldDef LocalVariableDeclaration BasicType boolean VariableDeclarator b2 MethodInvocation MethodInvocation isMultiple getNewDef IfStatement BinaryOperation != MemberReference b1 MemberReference b2 BlockStatement IfStatement MemberReference b2 BlockStatement StatementExpression Assignment MemberReference type MemberReference MINOR = BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = End End End End ReferenceType ChildItemDefDiff ClassDeclaration Modifier public ChildNodeDefDiff ConstructorDeclaration ChildNodeDefDiff FormalParameter ReferenceType NodeDef oldDef FormalParameter ReferenceType NodeDef newDef StatementExpression SuperConstructorInvocation MemberReference oldDef MemberReference newDef MethodDeclaration Modifier public ReferenceType NodeDef getOldDef ReturnStatement Cast ReferenceType NodeDef MemberReference oldDef MethodDeclaration Modifier public ReferenceType NodeDef getNewDef ReturnStatement Cast ReferenceType NodeDef MemberReference newDef MethodDeclaration Modifier protected init StatementExpression SuperMethodInvocation init IfStatement BinaryOperation && BinaryOperation && MethodInvocation isModified BinaryOperation != MemberReference type MemberReference NONE BinaryOperation != MemberReference type MemberReference MAJOR BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator b1 MethodInvocation MethodInvocation allowsSameNameSiblings getOldDef LocalVariableDeclaration BasicType boolean VariableDeclarator b2 MethodInvocation MethodInvocation allowsSameNameSiblings getNewDef IfStatement BinaryOperation && BinaryOperation != MemberReference b1 MemberReference b2 MemberReference ! b2 BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = End IfStatement BinaryOperation == MemberReference type MemberReference TRIVIAL BlockStatement LocalVariableDeclaration ReferenceType List VariableDeclarator l1 MethodInvocation Arrays MethodInvocation MethodInvocation getRequiredPrimaryTypes getOldDef asList LocalVariableDeclaration ReferenceType List VariableDeclarator l2 MethodInvocation Arrays MethodInvocation MethodInvocation getRequiredPrimaryTypes getNewDef asList IfStatement MethodInvocation ! l1 MemberReference l2 equals BlockStatement IfStatement MethodInvocation l1 MemberReference l2 containsAll BlockStatement StatementExpression Assignment MemberReference type MemberReference MINOR = BlockStatement StatementExpression Assignment MemberReference type MemberReference MAJOR = End End End End ReferenceType ChildItemDefDiff",0
527,527,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.QName Import org.apache.log4j.Logger Import javax.jcr.nodetype.NoSuchNodeTypeException Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType ClassDeclaration Modifier public /**
 * This class implements the <code>NodeDefinition</code> interface.
 * All method calls are delegated to the wrapped {@link NodeDef},
 * performing the translation from <code>QName</code>s to JCR names
 * (and vice versa) where necessary.
 */ NodeDefinitionImpl FieldDeclaration /**
     * Logger instance for this class
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType NodeDefinitionImpl getLogger ConstructorDeclaration /**
     * Package private constructor.
     *
     * @param nodeDef    child node definition
     * @param ntMgr      node type manager
     * @param nsResolver namespace resolver
     */ NodeDefinitionImpl FormalParameter ReferenceType NodeDef nodeDef FormalParameter ReferenceType NodeTypeManagerImpl ntMgr FormalParameter ReferenceType NamespaceResolver nsResolver StatementExpression SuperConstructorInvocation MemberReference nodeDef MemberReference ntMgr MemberReference nsResolver MethodDeclaration /**
     * Returns the wrapped node definition.
     *
     * @return the wrapped node definition.
     */ Modifier public ReferenceType NodeDef unwrap ReturnStatement Cast ReferenceType NodeDef MemberReference itemDef MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeType getDefaultPrimaryType LocalVariableDeclaration ReferenceType QName VariableDeclarator ntName Cast ReferenceType NodeDef MemberReference itemDef IfStatement BinaryOperation == MemberReference ntName Literal null BlockStatement ReturnStatement Literal null End TryStatement ReturnStatement MethodInvocation ntMgr MemberReference ntName getNodeType CatchClause CatchClauseParameter NoSuchNodeTypeException e StatementExpression MethodInvocation log BinaryOperation + Literal ""invalid default node type "" MemberReference ntName MemberReference e error ReturnStatement Literal null MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeType getRequiredPrimaryTypes LocalVariableDeclaration ReferenceType QName VariableDeclarator ntNames Cast ReferenceType NodeDef MemberReference itemDef TryStatement IfStatement BinaryOperation || BinaryOperation == MemberReference ntNames Literal null BinaryOperation == MemberReference ntNames length Literal 0 BlockStatement ReturnStatement ArrayCreator ReferenceType NodeType ArrayInitializer MethodInvocation ntMgr MemberReference QName NT_BASE getNodeType BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator nodeTypes ArrayCreator ReferenceType NodeType MemberReference ntNames length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ntNames length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i nodeTypes MethodInvocation ntMgr MemberReference ArraySelector MemberReference i ntNames getNodeType = End ReturnStatement MemberReference nodeTypes End CatchClause CatchClauseParameter NoSuchNodeTypeException e StatementExpression MethodInvocation log Literal ""required node type does not exist"" MemberReference e error ReturnStatement ArrayCreator ReferenceType NodeType Literal 0 MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean allowsSameNameSiblings ReturnStatement Cast ReferenceType NodeDef MemberReference itemDef ReferenceType ItemDefinitionImpl ReferenceType NodeDefinition",1
400,400,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.version Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Remove the <code>Version</code> from the <code>VersionHistory</code> that
 * match the given label
 */ RemoveVersionByLabel FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType RemoveVersionByLabel getLog FieldDeclaration /** node path */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" FieldDeclaration /** version label key */ Modifier private ReferenceType String VariableDeclarator labelKey Literal ""label"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator label Cast ReferenceType String MethodInvocation ctx This MemberReference labelKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Remove version with label "" MemberReference label Literal "" from node "" MemberReference path debug End LocalVariableDeclaration ReferenceType VersionHistory VariableDeclarator vh MethodInvocation CommandHelper MethodInvocation getVersionHistory MemberReference ctx MemberReference path getNode LocalVariableDeclaration ReferenceType Version VariableDeclarator v MethodInvocation vh MemberReference label getVersionByLabel StatementExpression MethodInvocation vh MethodInvocation v getName removeVersion ReturnStatement Literal false MethodDeclaration /**
     * @return the path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param pathKey
     *        the path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String pathKey StatementExpression Assignment This MemberReference pathKey MemberReference pathKey = MethodDeclaration /**
     * @return the version name key
     */ Modifier public ReferenceType String getLabelKey ReturnStatement MemberReference labelKey MethodDeclaration /**
     * @param versionNameKey
     *        the version name key to set
     */ Modifier public setLabelKey FormalParameter ReferenceType String versionNameKey StatementExpression Assignment This MemberReference labelKey MemberReference versionNameKey = ReferenceType Command",0
283,283,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.net.MalformedURLException Import java.rmi.Naming Import java.rmi.NotBoundException Import java.rmi.RemoteException Import java.util.Hashtable Import javax.jcr.Repository Import javax.naming.Context Import javax.naming.Name Import javax.naming.NamingException Import javax.naming.RefAddr Import javax.naming.Reference Import javax.naming.spi.ObjectFactory Import org.apache.jackrabbit.rmi.remote.RemoteRepository ClassDeclaration Modifier public /**
 * Object factory for JCR-RMI clients. This factory can be used either
 * directly or as a JNDI object factory.
 *
 * @author Jukka Zitting
 * @see ClientRepository
 */ ClientRepositoryFactory FieldDeclaration /**
     * The JNDI parameter name for configuring the RMI URL of
     * a remote repository.
     */ Modifier public final static ReferenceType String VariableDeclarator URL_PARAMETER Literal ""url"" FieldDeclaration /**
     * Local adapter factory.
     */ Modifier private ReferenceType LocalAdapterFactory VariableDeclarator factory ConstructorDeclaration Modifier public /**
     * Creates a JCR-RMI client factory with the default adapter factory.
     */ ClientRepositoryFactory StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType ClientAdapterFactory ConstructorDeclaration Modifier public /**
     * Creates a JCR-RMI client factory with the given adapter factory.
     *
     * @param factory local adapter factory
     */ ClientRepositoryFactory FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression Assignment This MemberReference factory MemberReference factory = MethodDeclaration /**
     * Returns a client wrapper for a remote content repository. The remote
     * repository is looked up from the RMI registry using the given URL and
     * wrapped into a {@link ClientRepository ClientRepository} adapter.
     *
     * @param url the RMI URL of the remote repository
     * @return repository client
     * @throws ClassCastException    if the URL points to an unknown object
     * @throws MalformedURLException if the URL is malformed
     * @throws NotBoundException     if the URL points to nowhere
     * @throws RemoteException       on RMI errors
     */ Modifier public synchronized ReferenceType Repository getRepository FormalParameter ReferenceType String url ClassCastException MalformedURLException NotBoundException RemoteException LocalVariableDeclaration ReferenceType RemoteRepository VariableDeclarator remote Cast ReferenceType RemoteRepository MethodInvocation Naming MemberReference url lookup ReturnStatement MethodInvocation factory MemberReference remote getRepository MethodDeclaration /**
     * Utility method for looking up the URL within the given RefAddr object.
     * Feeds the content of the RefAddr object to
     * {@link #getRepository(String) getRepository(String)} and wraps all
     * errors to {@link NamingException NamingExceptions}.
     * <p>
     * Used by {@link #getObjectInstance(Object, Name, Context, Hashtable) getObjectInstance()}.
     *
     * @param url the URL reference
     * @return repository client
     * @throws NamingException on all errors
     */ Modifier private ReferenceType Repository getRepository FormalParameter ReferenceType RefAddr url NamingException TryStatement ReturnStatement MethodInvocation Cast ReferenceType String MethodInvocation url getContent getRepository CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType NamingException MethodInvocation ex getMessage MethodDeclaration /**
     * JNDI factory method for creating JCR-RMI clients. Looks up a
     * remote repository using the reference parameter ""url"" as the RMI URL
     * and returns a client wrapper for the remote repository.
     *
     * @param object      reference parameters
     * @param name        unused
     * @param context     unused
     * @param environment unused
     * @return repository client
     * @throws NamingException on all errors
     */ Modifier public ReferenceType Object getObjectInstance FormalParameter ReferenceType Object object FormalParameter ReferenceType Name name FormalParameter ReferenceType Context context FormalParameter ReferenceType Hashtable environment NamingException IfStatement BinaryOperation instanceof MemberReference object ReferenceType Reference BlockStatement LocalVariableDeclaration ReferenceType Reference VariableDeclarator reference Cast ReferenceType Reference MemberReference object IfStatement ClassReference MethodInvocation getName MethodInvocation MethodInvocation reference getClassName equals ReferenceType Repository BlockStatement LocalVariableDeclaration ReferenceType RefAddr VariableDeclarator url MethodInvocation reference MemberReference URL_PARAMETER get IfStatement BinaryOperation != MemberReference url Literal null BlockStatement ReturnStatement MethodInvocation MemberReference url getRepository End End End ReturnStatement Literal null ReferenceType ObjectFactory",1
405,405,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.version Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Remove a label from the <code>VersionHistory</code>
 */ RemoveVersionLabel FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType RemoveVersionLabel getLog FieldDeclaration /** node path */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" FieldDeclaration /** version label key */ Modifier private ReferenceType String VariableDeclarator labelKey Literal ""label"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator versionLabel Cast ReferenceType String MethodInvocation ctx This MemberReference labelKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Remove label "" MemberReference versionLabel Literal "" from node "" MemberReference path debug End StatementExpression MethodInvocation CommandHelper MethodInvocation getVersionHistory MethodInvocation MemberReference versionLabel removeVersionLabel MemberReference ctx MemberReference path getNode ReturnStatement Literal false MethodDeclaration /**
     * @return returns the path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param pathKey
     *        the path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String pathKey StatementExpression Assignment This MemberReference pathKey MemberReference pathKey = MethodDeclaration /**
     * @return the version label key.
     */ Modifier public ReferenceType String getLabelKey ReturnStatement MemberReference labelKey MethodDeclaration /**
     * @param versionLabelKey
     *        the version label key to set
     */ Modifier public setLabelKey FormalParameter ReferenceType String versionLabelKey StatementExpression Assignment This MemberReference labelKey MemberReference versionLabelKey = ReferenceType Command",0
144,144,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import org.apache.commons.collections.map.ReferenceMap Import org.apache.jackrabbit.core.ItemId Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.NoSuchItemStateException Import org.apache.jackrabbit.core.state.NodeReferences Import org.apache.jackrabbit.core.state.NodeReferencesId Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.SharedItemStateManager Import org.apache.jackrabbit.core.state.ItemStateListener Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider Import org.apache.jackrabbit.core.virtual.VirtualNodeState Import org.apache.jackrabbit.core.virtual.VirtualPropertyState Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.uuid.UUID Import org.apache.log4j.Logger Import javax.jcr.RepositoryException ClassDeclaration /**
 * This Class implements a virtual item state provider.
 */ VersionItemStateProvider FieldDeclaration /**
     * the default logger
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType VersionItemStateProvider getLogger FieldDeclaration /**
     * The version manager
     */ Modifier private final ReferenceType VersionManagerImpl VariableDeclarator vMgr FieldDeclaration /**
     * The root node UUID for the version storage
     */ Modifier private final ReferenceType NodeId VariableDeclarator historyRootId FieldDeclaration /**
     * The item state manager directly on the version persistence mgr
     */ Modifier private final ReferenceType SharedItemStateManager VariableDeclarator stateMgr FieldDeclaration /**
     * Map of returned items. this is kept for invalidating
     */ Modifier private ReferenceType ReferenceMap VariableDeclarator items ClassCreator ReferenceType ReferenceMap MemberReference ReferenceMap HARD MemberReference ReferenceMap WEAK ConstructorDeclaration Modifier public /**
     * Creates a bew vesuion manager
     *
     */ VersionItemStateProvider FormalParameter ReferenceType VersionManagerImpl vMgr FormalParameter ReferenceType SharedItemStateManager stateMgr StatementExpression Assignment This MemberReference vMgr MemberReference vMgr = StatementExpression Assignment This MemberReference stateMgr MemberReference stateMgr = StatementExpression Assignment This MemberReference historyRootId MethodInvocation vMgr getHistoryRootId = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType boolean isVirtualRoot FormalParameter ReferenceType ItemId id ReturnStatement MethodInvocation id MemberReference historyRootId equals MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType NodeId getVirtualRootId ReturnStatement MemberReference historyRootId MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType VirtualPropertyState createPropertyState FormalParameter ReferenceType VirtualNodeState parent FormalParameter ReferenceType QName name FormalParameter BasicType int type FormalParameter BasicType boolean multiValued RepositoryException ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""VersionManager should never create a VirtualPropertyState"" MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType VirtualNodeState createNodeState FormalParameter ReferenceType VirtualNodeState parent FormalParameter ReferenceType QName name FormalParameter ReferenceType String uuid FormalParameter ReferenceType QName nodeTypeName RepositoryException ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""VersionManager should never create a VirtualNodeState"" MethodDeclaration /**
     * @inheritDoc
     */ Modifier public synchronized ReferenceType ItemState getItemState FormalParameter ReferenceType ItemId id NoSuchItemStateException ItemStateException LocalVariableDeclaration ReferenceType ItemState VariableDeclarator item Cast ReferenceType ItemState MethodInvocation items MemberReference id get IfStatement BinaryOperation == MemberReference item Literal null BlockStatement StatementExpression Assignment MemberReference item MethodInvocation stateMgr MemberReference id getItemState = StatementExpression MethodInvocation items MemberReference id MemberReference item put StatementExpression MethodInvocation item This addListener IfStatement BinaryOperation instanceof MemberReference item ReferenceType PropertyState BlockStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator prop Cast ReferenceType PropertyState MemberReference item IfStatement MethodInvocation prop MethodInvocation MemberReference QName JCR_SUCCESSORS equals getName BlockStatement TryStatement LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator v MethodInvocation vMgr MethodInvocation prop getParentUUID getVersion IfStatement BinaryOperation != MemberReference v Literal null BlockStatement LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator succs MethodInvocation v getSuccessors LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator succV ArrayCreator ReferenceType InternalValue MemberReference succs length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference succs length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i succV MethodInvocation InternalValue ClassCreator ReferenceType UUID MemberReference ArraySelector MemberReference i MethodInvocation getId succs create = End StatementExpression MethodInvocation prop MemberReference succV setValues End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to resolve jcr:successors property for "" MemberReference id warn End End End ReturnStatement MemberReference item MethodDeclaration /**
     * called by the version manager when a dynamic property needs to be
     * invalidated.
     *
     * @param id
     */ Modifier synchronized onPropertyChanged FormalParameter ReferenceType PropertyId id LocalVariableDeclaration ReferenceType ItemState VariableDeclarator item Cast ReferenceType ItemState MethodInvocation items MemberReference id get IfStatement BinaryOperation != MemberReference item Literal null BlockStatement StatementExpression MethodInvocation item discard End MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType boolean setNodeReferences FormalParameter ReferenceType NodeReferences refs ReturnStatement MethodInvocation vMgr MemberReference refs setNodeReferences MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType boolean hasItemState FormalParameter ReferenceType ItemId id ReturnStatement BinaryOperation || BinaryOperation != MethodInvocation items MemberReference id get Literal null MethodInvocation stateMgr MemberReference id hasItemState MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType NodeReferences getNodeReferences FormalParameter ReferenceType NodeReferencesId id NoSuchItemStateException ItemStateException ReturnStatement MethodInvocation stateMgr MemberReference id getNodeReferences MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType boolean hasNodeReferences FormalParameter ReferenceType NodeReferencesId id ReturnStatement MethodInvocation stateMgr MemberReference id hasNodeReferences MethodDeclaration /**
     * @inheritDoc
     */ Modifier public stateCreated FormalParameter ReferenceType ItemState created MethodDeclaration /**
     * @inheritDoc
     */ Modifier public stateModified FormalParameter ReferenceType ItemState modified MethodDeclaration /**
     * @inheritDoc
     */ Modifier public stateDestroyed FormalParameter ReferenceType ItemState destroyed StatementExpression MethodInvocation items MethodInvocation destroyed getId remove MethodDeclaration /**
     * @inheritDoc
     */ Modifier public stateDiscarded FormalParameter ReferenceType ItemState discarded StatementExpression MethodInvocation items MethodInvocation discarded getId remove ReferenceType VirtualItemStateProvider ReferenceType ItemStateListener",0
417,417,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core Import org.apache.jackrabbit.name.QName ClassDeclaration Modifier public /**
 * Property identifier. An instance of this class identifies a single
 * property using the UUID of the parent node and the qualified name of
 * the property. Once created a property identifier instance is immutable.
 */ PropertyId FieldDeclaration /** Serial version UID of this class. */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal - 3726624437800567892L FieldDeclaration /** UUID of the parent node. */ Modifier private final ReferenceType String VariableDeclarator parentUUID FieldDeclaration /** Qualified name of the property. */ Modifier private final ReferenceType QName VariableDeclarator propName ConstructorDeclaration Modifier public /**
     * Creates a property identifier instance for the identified property.
     *
     * @param parentUUID UUID of the parent node
     * @param propName qualified name of the property
     */ PropertyId FormalParameter ReferenceType String parentUUID FormalParameter ReferenceType QName propName IfStatement BinaryOperation == MemberReference parentUUID Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""parentUUID can not be null"" End IfStatement BinaryOperation == MemberReference propName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""propName can not be null"" End StatementExpression Assignment This MemberReference parentUUID MemberReference parentUUID = StatementExpression Assignment This MemberReference propName MemberReference propName = MethodDeclaration /**
     * Returns <code>false</code> as this class represents a property
     * identifier, not a node identifier.
     *
     * @return always <code>false</code>
     * @see ItemId#denotesNode()
     */ Modifier public BasicType boolean denotesNode ReturnStatement Literal false MethodDeclaration /**
     * Returns the UUID of the parent node.
     *
     * @return node UUID
     */ Modifier public ReferenceType String getParentUUID ReturnStatement MemberReference parentUUID MethodDeclaration /**
     * Returns the qualified name of the property.
     *
     * @return qualified name
     */ Modifier public ReferenceType QName getName ReturnStatement MemberReference propName MethodDeclaration /**
     * Returns a property identifier instance holding the value of the
     * specified string. The string must be in the format returned by the
     * {@link #toString() toString()} method of this class.
     *
     * @param s a <code>String</code> containing the <code>PropertyId</code>
     *          representation to be parsed.
     * @return the <code>PropertyId</code> represented by the argument
     * @throws IllegalArgumentException if the specified string can not be parsed
     *                                  as a <code>PropertyId</code>.
     * @see #toString()
     */ Modifier public static ReferenceType PropertyId valueOf FormalParameter ReferenceType String s IllegalArgumentException IfStatement BinaryOperation == MemberReference s Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""invalid PropertyId literal"" End LocalVariableDeclaration BasicType int VariableDeclarator i MethodInvocation s Literal '/' indexOf IfStatement BinaryOperation == MemberReference i Literal - 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""invalid PropertyId literal"" End LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation s Literal 0 MemberReference i substring LocalVariableDeclaration ReferenceType QName VariableDeclarator name MethodInvocation QName MethodInvocation s BinaryOperation + MemberReference i Literal 1 substring valueOf ReturnStatement ClassCreator ReferenceType PropertyId MemberReference uuid MemberReference name MethodDeclaration /**
     * Compares property identifiers for equality.
     *
     * @param obj other object
     * @return <code>true</code> if the given object is a property identifier
     *         instance that identifies the same property as this identifier,
     *         <code>false</code> otherwise
     * @see Object#equals(Object)
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType PropertyId BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator other Cast ReferenceType PropertyId MemberReference obj ReturnStatement BinaryOperation && MethodInvocation parentUUID MemberReference other parentUUID equals MethodInvocation propName MemberReference other propName equals End ReturnStatement Literal false MethodDeclaration /**
     * Returns a string representation of this property identifier.
     *
     * @return property identifier string
     * @see Object#toString()
     */ Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + MemberReference parentUUID Literal ""/"" MethodInvocation propName toString MethodDeclaration /**
     * Returns the hash code of this property identifier. The hash code
     * is computed from the parent node UUID and the property name. The
     * hash code is memorized for performance.
     *
     * @return hash code
     * @see Object#hashCode()
     */ Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator h MemberReference hash IfStatement BinaryOperation == MemberReference h Literal 0 BlockStatement StatementExpression Assignment MemberReference h Literal 17 = StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 37 MemberReference h MethodInvocation parentUUID hashCode = StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 37 MemberReference h MethodInvocation propName hashCode = StatementExpression Assignment MemberReference hash MemberReference h = End ReturnStatement MemberReference h ReferenceType ItemId",0
334,334,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.version Import org.apache.jackrabbit.webdav.property.DavPropertyName Import org.apache.jackrabbit.webdav.property.ResourceType Import org.apache.jackrabbit.webdav.DavException InterfaceDeclaration Modifier public /**
 * <code>VersionHistoryResource</code> represents a collection that has
 * all versions of a given version-controlled resource as members.
 * <p/>
 * RFC 3253 defines the following required properties for a version history:
 * <ul>
 * <li>DAV:version-set</li>
 * <li>DAV:root-version</li>
 * <li>all DeltaV-compliant resource properties.</li>
 * </ul>
 * <p/>
 * In addition a version history resource must support the following METHODS:
 * <ul>
 * <li>all DeltaV-compliant resource METHODS.</li>
 * </ul>
 *
 * NOTE: the {@link org.apache.jackrabbit.webdav.DavConstants#PROPERTY_RESOURCETYPE DAV:resourcetype}
 * property must indicate 'DAV:version-history'.
 *
 * @see DeltaVResource
 * @see ResourceType#VERSION_HISTORY
 */ VersionHistoryResource ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator COMPLIANCE_CLASS Literal """" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator METHODS Literal """" ConstantDeclaration /**
     * Computed (protected) property identifying the root version of this version
     * history.
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator ROOT_VERSION MethodInvocation DavPropertyName Literal ""root-version"" MemberReference DeltaVConstants NAMESPACE create ConstantDeclaration /**
     * The protected property DAV:version-set identifies each version of this
     * version history.
     *
     * @see #getVersions()
     */ Modifier public final static ReferenceType DavPropertyName VariableDeclarator VERSION_SET MethodInvocation DavPropertyName Literal ""version-set"" MemberReference DeltaVConstants NAMESPACE create MethodDeclaration /**
     * Returns an array of <code>VersionResource</code>s containing all versions
     * that are a member of this resource.
     *
     * @return all <code>VersionResource</code>s that belong to this version history.
     * @throws org.apache.jackrabbit.webdav.DavException
     * @see #VERSION_SET
     */ Modifier public ReferenceType VersionResource getVersions DavException ReferenceType DeltaVResource",1
193,193,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version ClassDeclaration Modifier abstract /**
 * Implements a <code>InternalVersionItem</code>.
 */ InternalVersionItemImpl FieldDeclaration /**
     * the version manager
     */ Modifier final protected ReferenceType AbstractVersionManager VariableDeclarator vMgr ConstructorDeclaration Modifier protected /**
     * Creates a new Internal version item impl
     *
     * @param vMgr
     */ InternalVersionItemImpl FormalParameter ReferenceType AbstractVersionManager vMgr StatementExpression Assignment This MemberReference vMgr MemberReference vMgr = MethodDeclaration /**
     * Returns the persistent version manager for this item
     *
     * @return
     */ Modifier protected ReferenceType AbstractVersionManager getVersionManager ReturnStatement MemberReference vMgr MethodDeclaration /**
     * Returns the external id of this item
     *
     * @return
     */ Modifier public abstract ReferenceType String getId MethodDeclaration /**
     * returns the parent version item or null
     *
     * @return
     */ Modifier public abstract ReferenceType InternalVersionItem getParent ReferenceType InternalVersionItem",0
48,48,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype Import org.apache.commons.collections.map.ReferenceMap Import org.apache.jackrabbit.name.IllegalNameException Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.name.UnknownPrefixException Import org.apache.jackrabbit.util.IteratorHelper Import org.apache.jackrabbit.core.util.Dumpable Import org.apache.log4j.Logger Import javax.jcr.RepositoryException Import javax.jcr.nodetype.NoSuchNodeTypeException Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.NodeTypeIterator Import javax.jcr.nodetype.NodeTypeManager Import java.io.PrintStream Import java.util.ArrayList Import java.util.Collections Import java.util.Iterator Import java.util.Map ClassDeclaration Modifier public /**
 * A <code>NodeTypeManagerImpl</code> implements a session dependant
 * NodeTypeManager.
 */ NodeTypeManagerImpl FieldDeclaration /**
     * Logger instance for this class
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType NodeTypeManagerImpl getLogger FieldDeclaration /**
     * The wrapped node type registry.
     */ Modifier private final ReferenceType NodeTypeRegistry VariableDeclarator ntReg FieldDeclaration /**
     * The root node definition.
     */ Modifier private final ReferenceType NodeDefinitionImpl VariableDeclarator rootNodeDef FieldDeclaration /**
     * The namespace resolver used to translate qualified names to JCR names.
     */ Modifier private final ReferenceType NamespaceResolver VariableDeclarator nsResolver FieldDeclaration /**
     * A cache for <code>NodeType</code> instances created by this
     * <code>NodeTypeManager</code>
     */ Modifier private final ReferenceType Map VariableDeclarator ntCache FieldDeclaration /**
     * A cache for <code>PropertyDefinition</code> instances created by this
     * <code>NodeTypeManager</code>
     */ Modifier private final ReferenceType Map VariableDeclarator pdCache FieldDeclaration /**
     * A cache for <code>NodeDefinition</code> instances created by this
     * <code>NodeTypeManager</code>
     */ Modifier private final ReferenceType Map VariableDeclarator ndCache ConstructorDeclaration Modifier public /**
     * Creates a new <code>NodeTypeManagerImpl</code> instance.
     *
     * @param ntReg      node type registry
     * @param nsResolver namespace resolver
     */ NodeTypeManagerImpl FormalParameter ReferenceType NodeTypeRegistry ntReg FormalParameter ReferenceType NamespaceResolver nsResolver StatementExpression Assignment This MemberReference nsResolver MemberReference nsResolver = StatementExpression Assignment This MemberReference ntReg MemberReference ntReg = StatementExpression This MemberReference ntReg MethodInvocation This addListener StatementExpression Assignment MemberReference ntCache ClassCreator ReferenceType ReferenceMap MemberReference ReferenceMap HARD MemberReference ReferenceMap SOFT = StatementExpression Assignment MemberReference pdCache ClassCreator ReferenceType ReferenceMap MemberReference ReferenceMap HARD MemberReference ReferenceMap SOFT = StatementExpression Assignment MemberReference ndCache ClassCreator ReferenceType ReferenceMap MemberReference ReferenceMap HARD MemberReference ReferenceMap SOFT = StatementExpression Assignment MemberReference rootNodeDef ClassCreator ReferenceType NodeDefinitionImpl MethodInvocation ntReg getRootNodeDef This MemberReference nsResolver = StatementExpression MethodInvocation ndCache MethodInvocation rootNodeDef MethodInvocation getId unwrap MemberReference rootNodeDef put MethodDeclaration /**
     * @return
     */ Modifier public ReferenceType NodeDefinitionImpl getRootNodeDefinition ReturnStatement MemberReference rootNodeDef MethodDeclaration /**
     * @param id
     * @return
     */ Modifier public ReferenceType NodeDefinitionImpl getNodeDefinition FormalParameter ReferenceType NodeDefId id SynchronizedStatement MemberReference ndCache LocalVariableDeclaration ReferenceType NodeDefinitionImpl VariableDeclarator ndi Cast ReferenceType NodeDefinitionImpl MethodInvocation ndCache MemberReference id get IfStatement BinaryOperation == MemberReference ndi Literal null BlockStatement LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator nd MethodInvocation ntReg MemberReference id getNodeDef IfStatement BinaryOperation != MemberReference nd Literal null BlockStatement StatementExpression Assignment MemberReference ndi ClassCreator ReferenceType NodeDefinitionImpl MemberReference nd This MemberReference nsResolver = StatementExpression MethodInvocation ndCache MemberReference id MemberReference ndi put End End ReturnStatement MemberReference ndi MethodDeclaration /**
     * @param id
     * @return
     */ Modifier public ReferenceType PropertyDefinitionImpl getPropertyDefinition FormalParameter ReferenceType PropDefId id SynchronizedStatement MemberReference pdCache LocalVariableDeclaration ReferenceType PropertyDefinitionImpl VariableDeclarator pdi Cast ReferenceType PropertyDefinitionImpl MethodInvocation pdCache MemberReference id get IfStatement BinaryOperation == MemberReference pdi Literal null BlockStatement LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pd MethodInvocation ntReg MemberReference id getPropDef IfStatement BinaryOperation != MemberReference pd Literal null BlockStatement StatementExpression Assignment MemberReference pdi ClassCreator ReferenceType PropertyDefinitionImpl MemberReference pd This MemberReference nsResolver = StatementExpression MethodInvocation pdCache MemberReference id MemberReference pdi put End End ReturnStatement MemberReference pdi MethodDeclaration /**
     * @param name
     * @return
     * @throws NoSuchNodeTypeException
     */ Modifier public ReferenceType NodeTypeImpl getNodeType FormalParameter ReferenceType QName name NoSuchNodeTypeException SynchronizedStatement MemberReference ntCache LocalVariableDeclaration ReferenceType NodeTypeImpl VariableDeclarator nt Cast ReferenceType NodeTypeImpl MethodInvocation ntCache MemberReference name get IfStatement BinaryOperation == MemberReference nt Literal null BlockStatement LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator ent MethodInvocation ntReg MemberReference name getEffectiveNodeType LocalVariableDeclaration ReferenceType NodeTypeDef VariableDeclarator def MethodInvocation ntReg MemberReference name getNodeTypeDef StatementExpression Assignment MemberReference nt ClassCreator ReferenceType NodeTypeImpl MemberReference ent MemberReference def This MemberReference nsResolver = StatementExpression MethodInvocation ntCache MemberReference name MemberReference nt put End ReturnStatement MemberReference nt MethodDeclaration /**
     * @return
     */ Modifier public ReferenceType NodeTypeRegistry getNodeTypeRegistry ReturnStatement MemberReference ntReg MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public nodeTypeRegistered FormalParameter ReferenceType QName ntName MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public nodeTypeReRegistered FormalParameter ReferenceType QName ntName StatementExpression MethodInvocation ntCache MemberReference ntName remove SynchronizedStatement MemberReference pdCache LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation pdCache MethodInvocation iterator values WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType PropertyDefinitionImpl VariableDeclarator pd Cast ReferenceType PropertyDefinitionImpl MethodInvocation iter next IfStatement MethodInvocation ntName MethodInvocation pd MethodInvocation getDeclaringNodeType unwrap equals BlockStatement StatementExpression MethodInvocation iter remove End End SynchronizedStatement MemberReference ndCache LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation ndCache MethodInvocation iterator values WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeDefinitionImpl VariableDeclarator nd Cast ReferenceType NodeDefinitionImpl MethodInvocation iter next IfStatement MethodInvocation ntName MethodInvocation nd MethodInvocation getDeclaringNodeType unwrap equals BlockStatement StatementExpression MethodInvocation iter remove End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public nodeTypeUnregistered FormalParameter ReferenceType QName ntName StatementExpression MethodInvocation ntCache MemberReference ntName remove SynchronizedStatement MemberReference pdCache LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation pdCache MethodInvocation iterator values WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType PropertyDefinitionImpl VariableDeclarator pd Cast ReferenceType PropertyDefinitionImpl MethodInvocation iter next IfStatement MethodInvocation ntName MethodInvocation pd MethodInvocation getDeclaringNodeType unwrap equals BlockStatement StatementExpression MethodInvocation iter remove End End SynchronizedStatement MemberReference ndCache LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation ndCache MethodInvocation iterator values WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeDefinitionImpl VariableDeclarator nd Cast ReferenceType NodeDefinitionImpl MethodInvocation iter next IfStatement MethodInvocation ntName MethodInvocation nd MethodInvocation getDeclaringNodeType unwrap equals BlockStatement StatementExpression MethodInvocation iter remove End End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeTypeIterator getAllNodeTypes RepositoryException LocalVariableDeclaration ReferenceType QName VariableDeclarator ntNames MethodInvocation ntReg getRegisteredNodeTypes LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator list ClassCreator ReferenceType ArrayList MemberReference ntNames length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ntNames length MemberReference ++ i BlockStatement StatementExpression MethodInvocation list MethodInvocation MemberReference ArraySelector MemberReference i ntNames getNodeType add End ReturnStatement ClassCreator ReferenceType IteratorHelper MethodInvocation Collections MemberReference list unmodifiableCollection MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeTypeIterator getPrimaryNodeTypes RepositoryException LocalVariableDeclaration ReferenceType QName VariableDeclarator ntNames MethodInvocation ntReg getRegisteredNodeTypes LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator list ClassCreator ReferenceType ArrayList MemberReference ntNames length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ntNames length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator nt MethodInvocation MemberReference ArraySelector MemberReference i ntNames getNodeType IfStatement MethodInvocation ! nt isMixin BlockStatement StatementExpression MethodInvocation list MemberReference nt add End End ReturnStatement ClassCreator ReferenceType IteratorHelper MethodInvocation Collections MemberReference list unmodifiableCollection MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeTypeIterator getMixinNodeTypes RepositoryException LocalVariableDeclaration ReferenceType QName VariableDeclarator ntNames MethodInvocation ntReg getRegisteredNodeTypes LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator list ClassCreator ReferenceType ArrayList MemberReference ntNames length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ntNames length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeType VariableDeclarator nt MethodInvocation MemberReference ArraySelector MemberReference i ntNames getNodeType IfStatement MethodInvocation nt isMixin BlockStatement StatementExpression MethodInvocation list MemberReference nt add End End ReturnStatement ClassCreator ReferenceType IteratorHelper MethodInvocation Collections MemberReference list unmodifiableCollection MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeType getNodeType FormalParameter ReferenceType String nodeTypeName NoSuchNodeTypeException TryStatement ReturnStatement MethodInvocation MethodInvocation QName MemberReference nodeTypeName MemberReference nsResolver fromJCRName getNodeType CatchClause CatchClauseParameter UnknownPrefixException upe ThrowStatement ClassCreator ReferenceType NoSuchNodeTypeException MemberReference nodeTypeName MemberReference upe CatchClause CatchClauseParameter IllegalNameException ine ThrowStatement ClassCreator ReferenceType NoSuchNodeTypeException MemberReference nodeTypeName MemberReference ine MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public dump FormalParameter ReferenceType PrintStream ps StatementExpression MethodInvocation ps BinaryOperation + BinaryOperation + Literal ""NodeTypeManager ("" This Literal "")"" println StatementExpression MethodInvocation ps println StatementExpression MethodInvocation ntReg MemberReference ps dump ReferenceType NodeTypeManager ReferenceType Dumpable ReferenceType NodeTypeRegistryListener",0
310,310,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core Import org.apache.jackrabbit.core.nodetype.EffectiveNodeType Import org.apache.jackrabbit.core.nodetype.NodeDef Import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException Import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry Import org.apache.jackrabbit.core.nodetype.PropDef Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.NoPrefixDeclaredException Import org.apache.jackrabbit.name.Path Import org.apache.jackrabbit.name.QName Import org.apache.log4j.Logger Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.nodetype.ConstraintViolationException Import java.util.Set ClassDeclaration Modifier public /**
 * Utility class for validating an item against constraints
 * specified by its definition.
 */ ItemValidator FieldDeclaration /**
     * Logger instance for this class
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ItemValidator getLogger FieldDeclaration /**
     * node type registry
     */ Modifier final protected ReferenceType NodeTypeRegistry VariableDeclarator ntReg FieldDeclaration /**
     * hierarchy manager used for generating error msg's
     * that contain human readable paths
     *
     * @see #safeGetJCRPath(ItemId)
     */ Modifier final protected ReferenceType HierarchyManager VariableDeclarator hierMgr FieldDeclaration /**
     * namespace resolver used for generating error msg's
     * that contain human readable paths
     *
     * @see #safeGetJCRPath(Path)
     */ Modifier final protected ReferenceType NamespaceResolver VariableDeclarator nsResolver ConstructorDeclaration Modifier public /**
     * Creates a new <code>ItemValidator</code> instance.
     *
     * @param ntReg      node type registry
     * @param hierMgr    hierarchy manager
     * @param nsResolver namespace resolver
     */ ItemValidator FormalParameter ReferenceType NodeTypeRegistry ntReg FormalParameter ReferenceType HierarchyManager hierMgr FormalParameter ReferenceType NamespaceResolver nsResolver StatementExpression Assignment This MemberReference ntReg MemberReference ntReg = StatementExpression Assignment This MemberReference hierMgr MemberReference hierMgr = StatementExpression Assignment This MemberReference nsResolver MemberReference nsResolver = MethodDeclaration /**
     * Checks whether the given node state satisfies the constraints specified
     * by its primary and mixin node types. The following validations/checks are
     * performed:
     * <ul>
     * <li>check if its node type satisfies the 'required node types' constraint
     * specified in its definition</li>
     * <li>check if all 'mandatory' child items exist</li>
     * <li>for every property: check if the property value satisfies the
     * value constraints specified in the property's definition</li>
     * </ul>
     *
     * @param nodeState state of node to be validated
     * @throws ConstraintViolationException if any of the validations fail
     * @throws RepositoryException          if another error occurs
     */ Modifier public validate FormalParameter ReferenceType NodeState nodeState ConstraintViolationException RepositoryException LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator entPrimary MethodInvocation ntReg MethodInvocation nodeState getNodeTypeName getEffectiveNodeType LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator entPrimaryAndMixins MethodInvocation MemberReference nodeState getEffectiveNodeType LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator def MethodInvocation ntReg MethodInvocation nodeState getDefinitionId getNodeDef LocalVariableDeclaration ReferenceType QName VariableDeclarator requiredPrimaryTypes MethodInvocation def getRequiredPrimaryTypes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference requiredPrimaryTypes length MemberReference ++ i BlockStatement IfStatement MethodInvocation ! entPrimary MemberReference ArraySelector MemberReference i requiredPrimaryTypes includesNodeType BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation nodeState getId safeGetJCRPath Literal "": missing required primary type "" MemberReference ArraySelector MemberReference i requiredPrimaryTypes StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pda MethodInvocation entPrimaryAndMixins getMandatoryPropDefs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pda length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pd MemberReference ArraySelector MemberReference i pda IfStatement MethodInvocation ! nodeState MethodInvocation pd getName hasPropertyName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation nodeState getId safeGetJCRPath Literal "": mandatory property "" MethodInvocation pd getName Literal "" does not exist"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator cnda MethodInvocation entPrimaryAndMixins getMandatoryNodeDefs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference cnda length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator cnd MemberReference ArraySelector MemberReference i cnda IfStatement MethodInvocation ! nodeState MethodInvocation cnd getName hasChildNodeEntry BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation nodeState getId safeGetJCRPath Literal "": mandatory child node "" MethodInvocation cnd getName Literal "" does not exist"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ConstraintViolationException MemberReference msg End End MethodDeclaration /**
     * Checks whether the given property state satisfies the constraints
     * specified by its definition. The following validations/checks are
     * performed:
     * <ul>
     * <li>check if the type of the property values does comply with the
     * requiredType specified in the property's definition</li>
     * <li>check if the property values satisfy the value constraints
     * specified in the property's definition</li>
     * </ul>
     *
     * @param propState state of property to be validated
     * @throws ConstraintViolationException if any of the validations fail
     * @throws RepositoryException          if another error occurs
     */ Modifier public validate FormalParameter ReferenceType PropertyState propState ConstraintViolationException RepositoryException LocalVariableDeclaration ReferenceType PropDef VariableDeclarator def MethodInvocation ntReg MethodInvocation propState getDefinitionId getPropDef LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation propState getValues LocalVariableDeclaration BasicType int VariableDeclarator type MemberReference PropertyType UNDEFINED ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference type MemberReference PropertyType UNDEFINED BlockStatement StatementExpression Assignment MemberReference type MemberReference ArraySelector MemberReference i MethodInvocation getType values = IfStatement BinaryOperation != MemberReference type MemberReference ArraySelector MemberReference i MethodInvocation getType values BlockStatement ThrowStatement ClassCreator ReferenceType ConstraintViolationException BinaryOperation + MethodInvocation MethodInvocation propState getId safeGetJCRPath Literal "": inconsistent value types"" End End IfStatement BinaryOperation && BinaryOperation != MethodInvocation def getRequiredType MemberReference PropertyType UNDEFINED BinaryOperation != MethodInvocation def getRequiredType MemberReference type BlockStatement ThrowStatement ClassCreator ReferenceType ConstraintViolationException BinaryOperation + MethodInvocation MethodInvocation propState getId safeGetJCRPath Literal "": requiredType constraint is not satisfied"" End End StatementExpression MethodInvocation EffectiveNodeType MemberReference def MemberReference values checkSetPropertyValueConstraints MethodDeclaration /**
     * Helper method that builds the effective (i.e. merged and resolved)
     * node type representation of the specified node's primary and mixin
     * node types.
     *
     * @param nodeState
     * @return the effective node type
     * @throws RepositoryException
     */ Modifier public ReferenceType EffectiveNodeType getEffectiveNodeType FormalParameter ReferenceType NodeState nodeState RepositoryException LocalVariableDeclaration ReferenceType Set VariableDeclarator set MethodInvocation nodeState getMixinTypeNames LocalVariableDeclaration ReferenceType QName VariableDeclarator types ArrayCreator ReferenceType QName BinaryOperation + MethodInvocation set size Literal 1 StatementExpression MethodInvocation set MemberReference types toArray StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference types length Literal 1 types MethodInvocation nodeState getNodeTypeName = TryStatement ReturnStatement MethodInvocation ntReg MemberReference types getEffectiveNodeType CatchClause CatchClauseParameter NodeTypeConflictException ntce LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to build effective node type for node "" MethodInvocation MethodInvocation nodeState getId safeGetJCRPath StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ntce MethodDeclaration /**
     * Failsafe conversion of internal <code>Path</code> to JCR path for use in
     * error messages etc.
     *
     * @param path path to convert
     * @return JCR path
     */ Modifier public ReferenceType String safeGetJCRPath FormalParameter ReferenceType Path path TryStatement ReturnStatement MethodInvocation path MemberReference nsResolver toJCRPath CatchClause CatchClauseParameter NoPrefixDeclaredException npde StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""failed to convert "" MethodInvocation path toString Literal "" to JCR path."" error ReturnStatement MethodInvocation path toString MethodDeclaration /**
     * Failsafe translation of internal <code>ItemId</code> to JCR path for use
     * in error messages etc.
     *
     * @param id id to translate
     * @return JCR path
     */ Modifier public ReferenceType String safeGetJCRPath FormalParameter ReferenceType ItemId id TryStatement ReturnStatement MethodInvocation MethodInvocation hierMgr MemberReference id getPath safeGetJCRPath CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log BinaryOperation + MemberReference id Literal "": failed to build path"" error ReturnStatement MethodInvocation id toString",0
872,872,,0
96,96,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.cli Import java.io.BufferedReader Import java.io.IOException Import java.io.InputStreamReader Import java.io.PrintWriter Import java.util.Locale Import java.util.ResourceBundle Import javax.jcr.InvalidItemStateException Import javax.jcr.Node Import javax.jcr.RepositoryException Import org.apache.commons.chain.Context Import org.apache.commons.chain.impl.ContextBase Import org.apache.commons.cli.BasicParser Import org.apache.commons.cli.CommandLine Import org.apache.commons.cli.HelpFormatter Import org.apache.commons.cli.Options Import org.apache.commons.cli.ParseException Import org.apache.commons.cli.Parser Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandException Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Command line interface client
 */ JcrClient FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType JcrClient getLog FieldDeclaration /** Resource bundle */ Modifier private ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation CommandHelper getBundle FieldDeclaration /** exit control variable */ Modifier private BasicType boolean VariableDeclarator exit Literal false FieldDeclaration /** Execution context */ Modifier private ReferenceType Context VariableDeclarator ctx FieldDeclaration /** run options */ Modifier private ReferenceType Options VariableDeclarator options ConstructorDeclaration /**
     * Constructor
     */ JcrClient StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference ctx ClassCreator ReferenceType ContextBase = StatementExpression MethodInvocation initOptions StatementExpression MethodInvocation initContext ConstructorDeclaration /**
     * Constructor
     * @param ctx
     *        the <code>Context</code>
     */ JcrClient FormalParameter ReferenceType Context ctx StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference ctx MemberReference ctx = MethodDeclaration /**
     * @param args
     *        the arguments
     */ Modifier public static main FormalParameter ReferenceType String args LocalVariableDeclaration ReferenceType JcrClient VariableDeclarator client ClassCreator ReferenceType JcrClient StatementExpression MethodInvocation client MemberReference args run MethodDeclaration /**
     * Run client
     * @param args
     *        the arguments
     */ Modifier private run FormalParameter ReferenceType String args TryStatement LocalVariableDeclaration ReferenceType Parser VariableDeclarator parser ClassCreator ReferenceType BasicParser LocalVariableDeclaration ReferenceType CommandLine VariableDeclarator cl MethodInvocation parser MemberReference options MemberReference args parse StatementExpression This MethodInvocation MemberReference cl setLocale StatementExpression MethodInvocation System.out MethodInvocation bundle Literal ""word.welcome"" getString println IfStatement MethodInvocation cl Literal ""source"" hasOption BlockStatement StatementExpression This MethodInvocation MemberReference cl runNonInteractive BlockStatement StatementExpression This MethodInvocation MemberReference cl runInteractive End CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType HelpFormatter VariableDeclarator hf ClassCreator ReferenceType HelpFormatter StatementExpression MethodInvocation hf Literal ""jcrclient"" MemberReference options printHelp StatementExpression MethodInvocation e printStackTrace ReturnStatement MethodDeclaration /**
     * Run in interactive mode
     * @param cl
     *        the <code>CommandLine</code>
     * @throws Exception
     *         if an Exception occurs
     */ Modifier private runInteractive FormalParameter ReferenceType CommandLine cl Exception WhileStatement MemberReference ! exit BlockStatement TryStatement StatementExpression MethodInvocation System.out BinaryOperation + This MethodInvocation getPrompt Literal "">"" print LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference System in LocalVariableDeclaration ReferenceType String VariableDeclarator input MethodInvocation br readLine StatementExpression MethodInvocation log BinaryOperation + Literal ""running: "" MemberReference input debug IfStatement BinaryOperation || MethodInvocation input MethodInvocation Literal ""exit"" equals trim MethodInvocation input MethodInvocation Literal ""quit"" equals trim BlockStatement StatementExpression Assignment MemberReference exit Literal true = StatementExpression MethodInvocation System.out Literal ""Good bye.."" println IfStatement BinaryOperation == MethodInvocation input MethodInvocation length trim Literal 0 BlockStatement BlockStatement StatementExpression This MethodInvocation MemberReference input runCommand End End CatchClause CatchClauseParameter JcrParserException e StatementExpression MethodInvocation System.out MethodInvocation e getLocalizedMessage println StatementExpression MethodInvocation System.out println CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation MemberReference e handleException End MethodDeclaration /**
     * Run in non interactive mode
     * @param cl
     *        the <code>CommandLine</code>
     * @throws Exception
     *         if an <code>Exception</code> occurs while running the
     *         <code>Command</code>
     */ Modifier private runNonInteractive FormalParameter ReferenceType CommandLine cl Exception StatementExpression This MethodInvocation BinaryOperation + Literal ""source "" MethodInvocation cl Literal ""source"" getOptionValue runCommand MethodDeclaration /**
     * Parses the input and runs the specified command
     * @param input
     *        the user's input
     * @throws Exception
     *         if an <code>Exception</code> occurs while running the
     *         <code>Command</code>
     */ runCommand FormalParameter ReferenceType String input Exception IfStatement BinaryOperation || MethodInvocation input Literal ""#"" startsWith BinaryOperation == MethodInvocation input length Literal 0 BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType JcrParser VariableDeclarator parser ClassCreator ReferenceType JcrParser StatementExpression MethodInvocation parser MemberReference input parse StatementExpression MethodInvocation parser MemberReference ctx populateContext LocalVariableDeclaration BasicType long VariableDeclarator start MethodInvocation System currentTimeMillis StatementExpression MethodInvocation parser MethodInvocation MemberReference ctx execute getCommand LocalVariableDeclaration BasicType long VariableDeclarator elapsed BinaryOperation - MethodInvocation System currentTimeMillis MemberReference start StatementExpression MethodInvocation parser MemberReference ctx depopulateContext StatementExpression MethodInvocation System.out println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation bundle Literal ""phrase.elapsedtime"" getString Literal "": "" MemberReference elapsed Literal "" ms."" println StatementExpression MethodInvocation System.out println MethodDeclaration /**
     * Handle the Exception. <br>
     * Shows a short message and prompt the user to show the entire stacktrace.
     * @param ex
     *        the <code>Exception</code> to handle
     */ Modifier private handleException FormalParameter ReferenceType Exception ex StatementExpression MethodInvocation System.out println StatementExpression MethodInvocation System.out MethodInvocation bundle Literal ""exception.occurred"" getString println StatementExpression MethodInvocation System.out println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + MethodInvocation bundle Literal ""exception"" getString Literal "": "" MethodInvocation ex MethodInvocation getName getClass println StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + MethodInvocation bundle Literal ""word.message"" getString Literal "": "" MethodInvocation ex getLocalizedMessage println StatementExpression MethodInvocation System.out println LocalVariableDeclaration ReferenceType String VariableDeclarator prompt BinaryOperation + MethodInvocation bundle Literal ""phrase.display.stacktrace"" getString Literal ""? [y/n]"" LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator in ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference System in LocalVariableDeclaration ReferenceType String VariableDeclarator str Literal """" LocalVariableDeclaration BasicType int VariableDeclarator tries Literal 0 WhileStatement BinaryOperation && BinaryOperation && MethodInvocation ! str Literal ""y"" equals MethodInvocation ! str Literal ""n"" equals BinaryOperation < MemberReference tries Literal 3 BlockStatement StatementExpression MemberReference ++ tries StatementExpression MethodInvocation System.out MemberReference prompt print TryStatement StatementExpression Assignment MemberReference str MethodInvocation in readLine = CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation e printStackTrace End IfStatement MethodInvocation str Literal ""y"" equals BlockStatement StatementExpression MethodInvocation ex printStackTrace End MethodDeclaration /**
     * Prompt message
     * @return prompt the prompt message
     * @throws RepositoryException
     *         if the current <code>Repository</code> throws a
     *         <code>RepositoryException</code>
     */ Modifier private ReferenceType String getPrompt RepositoryException TryStatement StatementExpression MethodInvocation CommandHelper MemberReference ctx getRepository CatchClause CatchClauseParameter CommandException e ReturnStatement MethodInvocation bundle Literal ""phrase.not.connected"" getString TryStatement StatementExpression MethodInvocation CommandHelper MemberReference ctx getSession CatchClause CatchClauseParameter CommandException e ReturnStatement MethodInvocation bundle Literal ""phrase.not.logged.in"" getString TryStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation CommandHelper MemberReference ctx getCurrentNode TryStatement ReturnStatement MethodInvocation n getPath CatchClause CatchClauseParameter InvalidItemStateException e StatementExpression MethodInvocation CommandHelper MemberReference ctx MethodInvocation CommandHelper MethodInvocation getRootNode MemberReference ctx getSession setCurrentNode ReturnStatement MethodInvocation CommandHelper MethodInvocation getPath MemberReference ctx getCurrentNode CatchClause CatchClauseParameter CommandException e ReturnStatement MethodInvocation bundle Literal ""phrase.not.logged.in"" getString MethodDeclaration /**
     * Init allowed CommandLine options
     */ Modifier private initOptions StatementExpression Assignment MemberReference options ClassCreator ReferenceType Options = StatementExpression MethodInvocation options Literal ""lang"" Literal ""code"" Literal true Literal ""Language code"" addOption StatementExpression MethodInvocation options Literal ""country"" Literal ""code"" Literal true Literal ""Country code"" addOption StatementExpression MethodInvocation options Literal ""source"" Literal ""path"" Literal true Literal ""Script for noninteractive mode"" addOption MethodDeclaration /**
     * Sets the default Locale for the given CommandLine
     * @param cl
     *        the CLI <code>CommandLine</code>
     * @throws ParseException
     *         if cl can't be parsed
     */ Modifier private setLocale FormalParameter ReferenceType CommandLine cl ParseException LocalVariableDeclaration ReferenceType Locale VariableDeclarator locale Literal null IfStatement BinaryOperation && MethodInvocation cl Literal ""lang"" hasOption MethodInvocation cl Literal ""country"" hasOption BlockStatement StatementExpression Assignment MemberReference locale ClassCreator ReferenceType Locale MethodInvocation cl Literal ""lang"" getOptionValue MethodInvocation cl Literal ""country"" getOptionValue = End IfStatement BinaryOperation && MethodInvocation cl Literal ""lang"" hasOption MethodInvocation ! cl Literal ""country"" hasOption BlockStatement StatementExpression Assignment MemberReference locale ClassCreator ReferenceType Locale MethodInvocation cl Literal ""lang"" getOptionValue = End IfStatement BinaryOperation != MemberReference locale Literal null BlockStatement StatementExpression MethodInvocation Locale MemberReference locale setDefault End MethodDeclaration /**
     * Init context. <br>
     * Sets the Context Output to the console
     */ Modifier private initContext StatementExpression MethodInvocation CommandHelper MemberReference ctx ClassCreator ReferenceType PrintWriter MemberReference System out Literal true setOutput",0
145,145,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.observation Import org.apache.jackrabbit.webdav.xml.XmlSerializable InterfaceDeclaration Modifier public /**
 * <code>EventBundle</code> defines an empty interface used to represent a bundle
 * of events.
 *
 * @see EventDiscovery#addEventBundle(EventBundle) 
 */ EventBundle ReferenceType XmlSerializable",0
729,729,,1
780,780,,1
189,189,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.rmi.RemoteException Import javax.jcr.RepositoryException Import javax.jcr.Value Import javax.jcr.query.Row Import org.apache.jackrabbit.rmi.remote.RemoteRow ClassDeclaration Modifier public /**
 * Local adapter for the JCR-RMI {@link RemoteRow RemoteRow}
 * inteface. This class makes a remote query row locally available using
 * the JCR {@link Row Row} interface.
 *
 * @author Philipp Koch
 * @see javax.jcr.query.Row Row
 * @see org.apache.jackrabbit.rmi.remote.RemoteRow
 */ ClientRow FieldDeclaration /** The remote query row. */ Modifier private ReferenceType RemoteRow VariableDeclarator remote ConstructorDeclaration Modifier public /**
     * Creates a client adapter for the given remote query row.
     *
     * @param remote remote query row
     */ ClientRow FormalParameter ReferenceType RemoteRow remote StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Value getValues RepositoryException TryStatement ReturnStatement MethodInvocation remote getValues CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Value getValue FormalParameter ReferenceType String s RepositoryException TryStatement ReturnStatement MethodInvocation remote MemberReference s getValue CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex ReferenceType Row",0
592,592,,0
892,892,,0
7,7,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import java.io.ByteArrayOutputStream Import java.io.IOException Import java.io.InputStream Import java.rmi.RemoteException Import javax.jcr.NamespaceRegistry Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.UnsupportedRepositoryOperationException Import javax.jcr.Workspace Import javax.jcr.nodetype.NodeTypeManager Import javax.jcr.observation.ObservationManager Import javax.jcr.query.QueryManager Import javax.jcr.version.Version Import org.apache.jackrabbit.rmi.remote.RemoteNamespaceRegistry Import org.apache.jackrabbit.rmi.remote.RemoteNodeTypeManager Import org.apache.jackrabbit.rmi.remote.RemoteQueryManager Import org.apache.jackrabbit.rmi.remote.RemoteWorkspace Import org.apache.jackrabbit.rmi.xml.WorkspaceImportContentHandler Import org.xml.sax.ContentHandler ClassDeclaration Modifier public /**
 * Local adapter for the JCR-RMI {@link RemoteWorkspace RemoteWorkspace}
 * interface. This class makes a remote workspace locally available using
 * the JCR {@link Workspace Workspace} interface.
 *
 * @author Jukka Zitting
 * @author Philipp Koch
 * @see javax.jcr.Workspace
 * @see org.apache.jackrabbit.rmi.remote.RemoteWorkspace
 */ ClientWorkspace FieldDeclaration /** The current session. */ Modifier private ReferenceType Session VariableDeclarator session FieldDeclaration /** The adapted remote workspace. */ Modifier private ReferenceType RemoteWorkspace VariableDeclarator remote FieldDeclaration /**
     * The adapted observation manager of this workspace. This field is set on
     * the first call to the {@link #getObservationManager()()} method assuming,
     * that the observation manager instance is not changing during the lifetime
     * of a workspace instance, that is, each call to the server-side
     * <code>Workspace.getObservationManager()</code> allways returns the same
     * object.
     */ Modifier private ReferenceType ObservationManager VariableDeclarator observationManager ConstructorDeclaration Modifier public /**
     * Creates a client adapter for the given remote workspace.
     *
     * @param session current session
     * @param remote remote workspace
     * @param factory local adapter factory
     */ ClientWorkspace FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteWorkspace remote FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration /**
     * Returns the current session without contacting the remote workspace.
     *
     * {@inheritDoc}
     */ Modifier public ReferenceType Session getSession ReturnStatement MemberReference session MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getName TryStatement ReturnStatement MethodInvocation remote getName CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRuntimeException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public copy FormalParameter ReferenceType String from FormalParameter ReferenceType String to RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference from MemberReference to copy CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public copy FormalParameter ReferenceType String workspace FormalParameter ReferenceType String from FormalParameter ReferenceType String to RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference workspace MemberReference from MemberReference to copy CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public move FormalParameter ReferenceType String from FormalParameter ReferenceType String to RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference from MemberReference to move CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType QueryManager getQueryManager RepositoryException TryStatement LocalVariableDeclaration ReferenceType RemoteQueryManager VariableDeclarator manager MethodInvocation remote getQueryManager ReturnStatement MethodInvocation MethodInvocation MemberReference session MemberReference manager getQueryManager getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NamespaceRegistry getNamespaceRegistry RepositoryException TryStatement LocalVariableDeclaration ReferenceType RemoteNamespaceRegistry VariableDeclarator registry MethodInvocation remote getNamespaceRegistry ReturnStatement MethodInvocation MethodInvocation MemberReference registry getNamespaceRegistry getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType NodeTypeManager getNodeTypeManager RepositoryException TryStatement LocalVariableDeclaration ReferenceType RemoteNodeTypeManager VariableDeclarator manager MethodInvocation remote getNodeTypeManager ReturnStatement MethodInvocation MethodInvocation MemberReference manager getNodeTypeManager getFactory CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType ObservationManager getObservationManager RepositoryException IfStatement BinaryOperation == MemberReference observationManager Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference observationManager MethodInvocation MethodInvocation This MethodInvocation remote getObservationManager getObservationManager getFactory = CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex End ReturnStatement MemberReference observationManager MethodDeclaration /** {@inheritDoc} */ Modifier public clone FormalParameter ReferenceType String workspace FormalParameter ReferenceType String src FormalParameter ReferenceType String dst FormalParameter BasicType boolean removeExisting RepositoryException TryStatement StatementExpression MethodInvocation remote MemberReference workspace MemberReference src MemberReference dst MemberReference removeExisting clone CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getAccessibleWorkspaceNames RepositoryException TryStatement ReturnStatement MethodInvocation remote getAccessibleWorkspaceNames CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType ContentHandler getImportContentHandler FormalParameter ReferenceType String path FormalParameter BasicType int uuidBehaviour RepositoryException ReturnStatement ClassCreator ReferenceType WorkspaceImportContentHandler This MemberReference path MemberReference uuidBehaviour MethodDeclaration /** {@inheritDoc} */ Modifier public importXML FormalParameter ReferenceType String path FormalParameter ReferenceType InputStream xml FormalParameter BasicType int uuidBehaviour IOException RepositoryException TryStatement LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator buffer ClassCreator ReferenceType ByteArrayOutputStream LocalVariableDeclaration BasicType byte VariableDeclarator bytes ArrayCreator BasicType byte Literal 4096 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator n MethodInvocation xml MemberReference bytes read BinaryOperation != MemberReference n Literal - 1 Assignment MemberReference n MethodInvocation xml MemberReference bytes read = BlockStatement StatementExpression MethodInvocation buffer MemberReference bytes Literal 0 MemberReference n write End StatementExpression MethodInvocation remote MemberReference path MethodInvocation buffer toByteArray MemberReference uuidBehaviour importXML CatchClause CatchClauseParameter RemoteException ex ThrowStatement ClassCreator ReferenceType RemoteRepositoryException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public restore FormalParameter ReferenceType Version versions FormalParameter BasicType boolean removeExisting RepositoryException ThrowStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException ReferenceType ClientObject ReferenceType Workspace",0
207,207,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.value Import java.io.IOException Import java.io.InputStream Import java.io.ObjectInputStream Import java.io.ObjectOutputStream Import java.io.Serializable Import java.util.Calendar Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Value Import javax.jcr.ValueFormatException ClassDeclaration Modifier final /**
 * The <code>StatefullValueAdapter</code> class implements the committed value
 * state for some JCR <code>Value</code> as a part of the State design pattern
 * (Gof) used by this package.
 * <p>
 * This class implements {@link #readObject(ObjectInputStream)} and
 * {@link #writeObject(ObjectOutputStream)} overwriting the default behaviour.
 * The reason for this is, that we cannot guarantee delegatee value to be
 * serializable in which case the {@link #writeObject(ObjectOutputStream)}
 * must first create a serializable value. The
 * {@link #readObject(ObjectInputStream)} method is here just to guarantee
 * symetric implementation.
 *
 * @author Felix Meschberger
 * @since 0.16.4.1
 * @see SerialValue
 */ StatefulValueAdapter FieldDeclaration /** The serial version UID */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal - 8467636003279312276L FieldDeclaration /** The delegatee value. */ Modifier private ReferenceType Value VariableDeclarator delegatee ConstructorDeclaration /**
     * Creates an instance adapting the given JCR <code>Value</code> to the
     * State design pattern.
     *
     * @param delegatee The JCR <code>Value</code> providing the value date.
     */ StatefulValueAdapter FormalParameter ReferenceType Value delegatee StatementExpression Assignment This MemberReference delegatee MemberReference delegatee = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType InputStream getStream ValueFormatException RepositoryException ReturnStatement MethodInvocation delegatee getStream MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType boolean getBoolean ValueFormatException RepositoryException ReturnStatement MethodInvocation delegatee getBoolean MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Calendar getDate ValueFormatException RepositoryException ReturnStatement MethodInvocation delegatee getDate MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType double getDouble ValueFormatException RepositoryException ReturnStatement MethodInvocation delegatee getDouble MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType long getLong ValueFormatException RepositoryException ReturnStatement MethodInvocation delegatee getLong MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getString ValueFormatException RepositoryException ReturnStatement MethodInvocation delegatee getString MethodDeclaration /** {@inheritDoc} */ Modifier public BasicType int getType ReturnStatement MethodInvocation delegatee getType MethodDeclaration /**
     * Writes the delegate value to the given <code>ObjectOutputStream</code>.
     * If the delegatee is {@link SerialValue} it is directly written. Otherwise
     * the {@link SerialValueFactory} is asked to create a {@link StatefullValue}
     * from the delegatee, which is then written. The newly created
     * {@link StatefullValue} value also replaces the original delegatee
     * internally.
     *
     * @param out The destination to write the delegatee to.
     *
     * @throws IOException If an error occurrs writing the value or if an
     *      error occurrs creating the {@link StatefullValue} from the
     *      delegatee.
     */ Modifier private writeObject FormalParameter ReferenceType ObjectOutputStream out IOException IfStatement BinaryOperation || BinaryOperation instanceof MemberReference delegatee ReferenceType StatefulValue BinaryOperation instanceof MemberReference delegatee ReferenceType SerialValue BlockStatement StatementExpression MethodInvocation out MemberReference delegatee writeObject ReturnStatement End TryStatement LocalVariableDeclaration ReferenceType SerialValueFactory VariableDeclarator factory MethodInvocation SerialValueFactory getInstance LocalVariableDeclaration ReferenceType Value VariableDeclarator toSend SwitchStatement MethodInvocation getType SwitchStatementCase MemberReference PropertyType BINARY StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getStream createBinaryValue = BreakStatement SwitchStatementCase MemberReference PropertyType BOOLEAN StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getBoolean createBooleanValue = BreakStatement SwitchStatementCase MemberReference PropertyType DATE StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getDate createDateValue = BreakStatement SwitchStatementCase MemberReference PropertyType DOUBLE StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getDouble createDoubleValue = BreakStatement SwitchStatementCase MemberReference PropertyType LONG StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getLong createLongValue = BreakStatement SwitchStatementCase MemberReference PropertyType NAME StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getString createNameValue = BreakStatement SwitchStatementCase MemberReference PropertyType PATH StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getString createPathValue = BreakStatement SwitchStatementCase MemberReference PropertyType REFERENCE StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getString createReferenceValue = BreakStatement SwitchStatementCase MemberReference PropertyType STRING StatementExpression Assignment MemberReference toSend MethodInvocation factory MethodInvocation getString createStringValue = BreakStatement SwitchStatementCase ThrowStatement ClassCreator ReferenceType IOException Literal ""Unknown value type"" End StatementExpression Assignment MemberReference delegatee MemberReference toSend = StatementExpression MethodInvocation out MemberReference toSend writeObject CatchClause CatchClauseParameter RepositoryException ex ThrowStatement ClassCreator ReferenceType IOException MethodInvocation ex getMessage MethodDeclaration /**
     * Reads an reconstructs the delegatee from the given
     * <code>ObjectInputStream</code>. The value read will either be an
     * instance of {@link SerialValue} or a {@link StatefullValue} depending
     * on the original delegatee written.
     *
     * @param in The <code>ObjectInputStream</code> from which to read the
     *      delegatee.
     *
     * @throws IOException If an error occurrs reading from the
     *      <code>ObjectInputStream</code> or if the runtime class of the
     *      value to be read cannot be found.
     */ Modifier private readObject FormalParameter ReferenceType ObjectInputStream in IOException TryStatement StatementExpression Assignment MemberReference delegatee Cast ReferenceType Value MethodInvocation in readObject = CatchClause CatchClauseParameter ClassNotFoundException cnfe ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""Cannot load value object class: "" MethodInvocation cnfe getMessage ReferenceType Serializable ReferenceType StatefulValue",1
95,95,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.fs.local Import org.apache.jackrabbit.core.fs.RandomAccessOutputStream Import java.io.IOException Import java.io.RandomAccessFile ClassDeclaration /**
 * Implements a buffered output stream on a random access file.
 */ RAFOutputStream FieldDeclaration /**
     * The default size of the write buffer in bytes.
     */ Modifier final static BasicType int VariableDeclarator DEFAULT_BUFFER_SIZE Literal 1024 FieldDeclaration /**
     * The write buffer.
     */ Modifier private final BasicType byte VariableDeclarator buffer FieldDeclaration /**
     * The underlying <code>RandomAccessFile</code>.
     */ Modifier protected ReferenceType RandomAccessFile VariableDeclarator raf FieldDeclaration /**
     * The starting position of the buffer in the code.
     */ Modifier private BasicType long VariableDeclarator bufferStart FieldDeclaration /**
     * The end of valid data in the buffer.
     */ Modifier private BasicType int VariableDeclarator bufferEnd FieldDeclaration /**
     * Dummy buffer for {@link #write(int)}.
     */ Modifier private BasicType byte VariableDeclarator one ArrayCreator BasicType byte Literal 1 ConstructorDeclaration Modifier public /**
     * Contructs a new output stream with the given buffer size.
     *
     * @param raf  the underlying <code>RandomAccessFile</code>.
     * @param size the size of the buffer.
     */ RAFOutputStream FormalParameter ReferenceType RandomAccessFile raf FormalParameter BasicType int size IOException StatementExpression Assignment This MemberReference raf MemberReference raf = StatementExpression Assignment This MemberReference buffer ArrayCreator BasicType byte MemberReference size = StatementExpression Assignment MemberReference bufferStart MethodInvocation raf getFilePointer = ConstructorDeclaration Modifier public /**
     * Contructs a new output stream with the default buffer size:
     * {@link #DEFAULT_BUFFER_SIZE}.
     *
     * @param raf the underlying <code>RandomAccessFile</code>.
     */ RAFOutputStream FormalParameter ReferenceType RandomAccessFile raf IOException StatementExpression ExplicitConstructorInvocation MemberReference raf MemberReference DEFAULT_BUFFER_SIZE MethodDeclaration /**
     * Returns the current filepointer
     *
     * @return the current filepointer
     */ Modifier public BasicType long getFilePointer ReturnStatement BinaryOperation + MemberReference bufferStart MemberReference bufferEnd MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public seek FormalParameter BasicType long position IOException StatementExpression MethodInvocation flush StatementExpression MethodInvocation raf MemberReference position seek StatementExpression Assignment MemberReference bufferStart MemberReference position = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public write FormalParameter BasicType int b IOException StatementExpression Assignment MemberReference ArraySelector Literal 0 one Cast BasicType byte MemberReference b = StatementExpression MethodInvocation MemberReference one Literal 0 Literal 1 write MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public write FormalParameter BasicType byte b IOException StatementExpression MethodInvocation MemberReference b Literal 0 MemberReference b length write MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public write FormalParameter BasicType byte b FormalParameter BasicType int off FormalParameter BasicType int len IOException IfStatement BinaryOperation > MemberReference len BinaryOperation - MemberReference buffer length MemberReference bufferEnd BlockStatement StatementExpression MethodInvocation flush StatementExpression MethodInvocation raf MemberReference b MemberReference off MemberReference len write BlockStatement StatementExpression MethodInvocation System MemberReference b MemberReference off MemberReference buffer MemberReference bufferEnd MemberReference len arraycopy StatementExpression Assignment MemberReference bufferEnd MemberReference len += End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public flush IOException StatementExpression MethodInvocation raf MemberReference buffer Literal 0 MemberReference bufferEnd write StatementExpression Assignment MemberReference bufferEnd Literal 0 = StatementExpression Assignment MemberReference bufferStart MethodInvocation raf getFilePointer = MethodDeclaration /**
     * This method also closes the underlying <code>RandomAccessFile</code>.
     * <p/>
     * {@inheritDoc}
     */ Modifier public close IOException StatementExpression MethodInvocation flush StatementExpression MethodInvocation raf close StatementExpression Assignment MemberReference raf Literal null = ReferenceType RandomAccessOutputStream",0
894,894,,0
57,57,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import org.apache.commons.collections.map.ReferenceMap Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.NodeImpl Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry Import org.apache.jackrabbit.core.observation.DelegatingObservationDispatcher Import org.apache.jackrabbit.core.observation.EventStateCollectionFactory Import org.apache.jackrabbit.core.observation.EventStateCollection Import org.apache.jackrabbit.core.state.ChangeLog Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.LocalItemStateManager Import org.apache.jackrabbit.core.state.NodeReferences Import org.apache.jackrabbit.core.state.NodeReferencesId Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PersistenceManager Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.SharedItemStateManager Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider Import org.apache.jackrabbit.name.QName Import org.apache.log4j.Logger Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.ReferentialIntegrityException Import javax.jcr.version.Version Import javax.jcr.version.VersionException Import javax.jcr.version.VersionHistory Import java.util.ArrayList Import java.util.Collections Import java.util.Iterator Import java.util.List Import java.util.Collection ClassDeclaration Modifier public /**
 * This Class implements a VersionManager.
 */ VersionManagerImpl FieldDeclaration /**
     * the default logger
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType VersionManager getLogger FieldDeclaration /**
     * The root node UUID for the version storage
     */ Modifier private final ReferenceType String VariableDeclarator VERSION_STORAGE_NODE_UUID FieldDeclaration /**
     * The persistence manager for the versions
     */ Modifier private final ReferenceType PersistenceManager VariableDeclarator pMgr FieldDeclaration /**
     * the shared state manager for the version storage
     */ Modifier private ReferenceType SharedItemStateManager VariableDeclarator sharedStateMgr FieldDeclaration /**
     * the virtual item state provider that exposes the version storage
     */ Modifier private final ReferenceType VersionItemStateProvider VariableDeclarator versProvider FieldDeclaration /**
     * the node type manager
     */ Modifier private ReferenceType NodeTypeRegistry VariableDeclarator ntReg FieldDeclaration /**
     * the observation manager
     */ Modifier private ReferenceType DelegatingObservationDispatcher VariableDeclarator obsMgr FieldDeclaration /**
     * Map of returned items. this is kept for invalidating
     */ Modifier private ReferenceType ReferenceMap VariableDeclarator versionItems ClassCreator ReferenceType ReferenceMap MemberReference ReferenceMap HARD MemberReference ReferenceMap WEAK FieldDeclaration /**
     * Session to be used when creating observation events.
     */ Modifier private transient ReferenceType SessionImpl VariableDeclarator eventSource FieldDeclaration /**
     * workaround for potential deadlock
     */ Modifier private final ReferenceType Object VariableDeclarator eventSourceLock ClassCreator ReferenceType Object ConstructorDeclaration Modifier public /**
     * Creates a bew vesuion manager
     *
     */ VersionManagerImpl FormalParameter ReferenceType PersistenceManager pMgr FormalParameter ReferenceType NodeTypeRegistry ntReg FormalParameter ReferenceType DelegatingObservationDispatcher obsMgr FormalParameter ReferenceType String rootUUID FormalParameter ReferenceType String rootParentUUID RepositoryException TryStatement StatementExpression Assignment This MemberReference pMgr MemberReference pMgr = StatementExpression Assignment This MemberReference ntReg MemberReference ntReg = StatementExpression Assignment This MemberReference obsMgr MemberReference obsMgr = StatementExpression Assignment This MemberReference VERSION_STORAGE_NODE_UUID MemberReference rootUUID = IfStatement MethodInvocation ! pMgr ClassCreator ReferenceType NodeId MemberReference rootUUID exists BlockStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator root MethodInvocation pMgr ClassCreator ReferenceType NodeId MemberReference rootUUID createNew StatementExpression MethodInvocation root MemberReference rootParentUUID setParentUUID StatementExpression MethodInvocation root MethodInvocation ntReg MethodInvocation MemberReference QName JCR_VERSIONSTORAGE MemberReference QName REP_VERSIONSTORAGE getApplicableChildNodeDef MethodInvocation getId MemberReference QName REP_SYSTEM getEffectiveNodeType setDefinitionId StatementExpression MethodInvocation root MemberReference QName REP_VERSIONSTORAGE setNodeTypeName LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator pt MethodInvocation pMgr ClassCreator ReferenceType PropertyId MemberReference rootUUID MemberReference QName JCR_PRIMARYTYPE createNew StatementExpression MethodInvocation pt MethodInvocation ntReg MethodInvocation MemberReference QName JCR_PRIMARYTYPE MemberReference PropertyType NAME Literal false getApplicablePropertyDef MethodInvocation getId MemberReference QName REP_SYSTEM getEffectiveNodeType setDefinitionId StatementExpression MethodInvocation pt Literal false setMultiValued StatementExpression MethodInvocation pt MemberReference PropertyType NAME setType StatementExpression MethodInvocation pt ArrayCreator ReferenceType InternalValue ArrayInitializer MethodInvocation InternalValue MemberReference QName REP_VERSIONSTORAGE create setValues StatementExpression MethodInvocation root MethodInvocation pt getName addPropertyName LocalVariableDeclaration ReferenceType ChangeLog VariableDeclarator cl ClassCreator ReferenceType ChangeLog StatementExpression MethodInvocation cl MemberReference root added StatementExpression MethodInvocation cl MemberReference pt added StatementExpression MethodInvocation pMgr MemberReference cl store End StatementExpression Assignment MemberReference sharedStateMgr ClassCreator ReferenceType VersionItemStateManager MemberReference pMgr MemberReference VERSION_STORAGE_NODE_UUID MemberReference ntReg = StatementExpression Assignment MemberReference stateMgr ClassCreator ReferenceType LocalItemStateManager MemberReference sharedStateMgr This = LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState Cast ReferenceType NodeState MethodInvocation stateMgr ClassCreator ReferenceType NodeId MemberReference VERSION_STORAGE_NODE_UUID getItemState StatementExpression Assignment MemberReference historyRoot ClassCreator ReferenceType NodeStateEx MemberReference stateMgr MemberReference ntReg MemberReference nodeState MemberReference QName JCR_VERSIONSTORAGE = StatementExpression Assignment MemberReference versProvider ClassCreator ReferenceType VersionItemStateProvider This MemberReference sharedStateMgr = CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType VirtualItemStateProvider getVirtualItemStateProvider ReturnStatement MemberReference versProvider MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public close Exception StatementExpression MethodInvocation pMgr close MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * This method must not be synchronized since it could cause deadlocks with
     * item-reading listeners in the observation thread.
     */ Modifier public ReferenceType VersionHistory createVersionHistory FormalParameter ReferenceType Session session FormalParameter ReferenceType NodeState node RepositoryException LocalVariableDeclaration ReferenceType InternalVersionHistory VariableDeclarator history SynchronizedStatement MemberReference eventSourceLock StatementExpression Assignment MemberReference eventSource Cast ReferenceType SessionImpl MemberReference session = StatementExpression Assignment MemberReference history MethodInvocation MemberReference node createVersionHistory = IfStatement BinaryOperation == MemberReference history Literal null BlockStatement ThrowStatement ClassCreator ReferenceType VersionException BinaryOperation + Literal ""History already exists for node "" MethodInvocation node getUUID End ReturnStatement Cast ReferenceType VersionHistory MethodInvocation session MethodInvocation history getId getNodeByUUID MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasItem FormalParameter ReferenceType String id ReturnStatement BinaryOperation || MethodInvocation versionItems MemberReference id containsKey MethodInvocation stateMgr ClassCreator ReferenceType NodeId MemberReference id hasItemState MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected synchronized ReferenceType InternalVersionItem getItem FormalParameter ReferenceType String uuid RepositoryException LocalVariableDeclaration ReferenceType NodeId VariableDeclarator id ClassCreator ReferenceType NodeId MemberReference uuid TryStatement LocalVariableDeclaration ReferenceType InternalVersionItem VariableDeclarator item Cast ReferenceType InternalVersionItem MethodInvocation versionItems MemberReference uuid get IfStatement BinaryOperation == MemberReference item Literal null BlockStatement IfStatement MethodInvocation stateMgr MemberReference id hasItemState BlockStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator state Cast ReferenceType NodeState MethodInvocation stateMgr MemberReference id getItemState LocalVariableDeclaration ReferenceType NodeStateEx VariableDeclarator pNode ClassCreator ReferenceType NodeStateEx MemberReference stateMgr MemberReference ntReg MemberReference state Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation pNode getParentUUID LocalVariableDeclaration ReferenceType InternalVersionItem VariableDeclarator parent TernaryExpression BinaryOperation != MemberReference parentUUID Literal null MethodInvocation MemberReference parentUUID getItem Literal null LocalVariableDeclaration ReferenceType QName VariableDeclarator ntName MethodInvocation state getNodeTypeName IfStatement MethodInvocation ntName MemberReference QName NT_FROZENNODE equals BlockStatement StatementExpression Assignment MemberReference item ClassCreator ReferenceType InternalFrozenNodeImpl This MemberReference pNode MemberReference parent = IfStatement MethodInvocation ntName MemberReference QName NT_VERSIONEDCHILD equals BlockStatement StatementExpression Assignment MemberReference item ClassCreator ReferenceType InternalFrozenVHImpl This MemberReference pNode MemberReference parent = IfStatement MethodInvocation ntName MemberReference QName NT_VERSION equals BlockStatement StatementExpression Assignment MemberReference item Cast ReferenceType InternalVersionHistory MemberReference parent = IfStatement MethodInvocation ntName MemberReference QName NT_VERSIONHISTORY equals BlockStatement StatementExpression Assignment MemberReference item ClassCreator ReferenceType InternalVersionHistoryImpl This MemberReference pNode = BlockStatement End End End End End IfStatement BinaryOperation != MemberReference item Literal null BlockStatement StatementExpression MethodInvocation versionItems MemberReference uuid MemberReference item put End End ReturnStatement MemberReference item CatchClause CatchClauseParameter ItemStateException e ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * This method must not be synchronized since it could cause deadlocks with
     * item-reading listeners in the observation thread.
     */ Modifier public ReferenceType Version checkin FormalParameter ReferenceType NodeImpl node RepositoryException LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator version SynchronizedStatement MemberReference eventSourceLock StatementExpression Assignment MemberReference eventSource Cast ReferenceType SessionImpl MethodInvocation node getSession = LocalVariableDeclaration ReferenceType String VariableDeclarator histUUID MethodInvocation node MethodInvocation getString MemberReference QName JCR_VERSIONHISTORY getProperty StatementExpression Assignment MemberReference version MethodInvocation Cast ReferenceType InternalVersionHistoryImpl MethodInvocation MemberReference histUUID getVersionHistory MemberReference node checkin = LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator preds MethodInvocation version getPredecessors ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference preds length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MemberReference ArraySelector MemberReference i MethodInvocation getId preds MemberReference QName JCR_SUCCESSORS StatementExpression MethodInvocation versProvider MemberReference propId onPropertyChanged End ReturnStatement Cast ReferenceType AbstractVersion MethodInvocation eventSource MethodInvocation version getId getNodeByUUID MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * This method must not be synchronized since it could cause deadlocks with
     * item-reading listeners in the observation thread.
     */ Modifier public removeVersion FormalParameter ReferenceType VersionHistory history FormalParameter ReferenceType QName name VersionException RepositoryException LocalVariableDeclaration ReferenceType AbstractVersionHistory VariableDeclarator historyImpl Cast ReferenceType AbstractVersionHistory MemberReference history IfStatement MethodInvocation ! historyImpl MemberReference name hasNode BlockStatement ThrowStatement ClassCreator ReferenceType VersionException BinaryOperation + BinaryOperation + Literal ""Version with name "" MethodInvocation name toString Literal "" does not exist in this VersionHistory"" End SynchronizedStatement MemberReference eventSourceLock StatementExpression Assignment MemberReference eventSource Cast ReferenceType SessionImpl MethodInvocation history getSession = LocalVariableDeclaration ReferenceType AbstractVersion VariableDeclarator version Cast ReferenceType AbstractVersion MethodInvocation historyImpl MemberReference name getNode LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator preds MethodInvocation version MethodInvocation getPredecessors getInternalVersion LocalVariableDeclaration ReferenceType InternalVersionHistoryImpl VariableDeclarator vh Cast ReferenceType InternalVersionHistoryImpl MethodInvocation historyImpl getInternalVersionHistory StatementExpression MethodInvocation MemberReference vh MemberReference name removeVersion ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference preds length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId ClassCreator ReferenceType PropertyId MemberReference ArraySelector MemberReference i MethodInvocation getId preds MemberReference QName JCR_SUCCESSORS StatementExpression MethodInvocation versProvider MemberReference propId onPropertyChanged End MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * This method must not be synchronized since it could cause deadlocks with
     * item-reading listeners in the observation thread.
     */ Modifier public ReferenceType Version setVersionLabel FormalParameter ReferenceType VersionHistory history FormalParameter ReferenceType QName version FormalParameter ReferenceType QName label FormalParameter BasicType boolean move RepositoryException LocalVariableDeclaration ReferenceType AbstractVersionHistory VariableDeclarator historyImpl Cast ReferenceType AbstractVersionHistory MemberReference history LocalVariableDeclaration ReferenceType InternalVersion VariableDeclarator v SynchronizedStatement MemberReference eventSourceLock StatementExpression Assignment MemberReference eventSource Cast ReferenceType SessionImpl MethodInvocation history getSession = LocalVariableDeclaration ReferenceType InternalVersionHistoryImpl VariableDeclarator vh Cast ReferenceType InternalVersionHistoryImpl MethodInvocation historyImpl getInternalVersionHistory StatementExpression Assignment MemberReference v MethodInvocation MemberReference vh MemberReference version MemberReference label MemberReference move setVersionLabel = IfStatement BinaryOperation == MemberReference v Literal null BlockStatement ReturnStatement Literal null BlockStatement ReturnStatement Cast ReferenceType Version MethodInvocation eventSource MethodInvocation v getId getNodeByUUID End MethodDeclaration /**
     * Invoked by some external source to indicate that some items in the
     * versions tree were updated. Version manager should flush its own
     * caches.
     * @param items items updated
     */ Modifier public itemsUpdated FormalParameter ReferenceType Collection items LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation items iterator WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression MethodInvocation Cast ReferenceType InternalVersionItem MethodInvocation iter next itemUpdated End MethodDeclaration /**
     * Update internal version item. Version histories are reloaded if possible.
     * Matching items are removed from the cache.
     * @param item item updated
     */ Modifier private itemUpdated FormalParameter ReferenceType InternalVersionItem item LocalVariableDeclaration ReferenceType InternalVersionItem VariableDeclarator cached Cast ReferenceType InternalVersionItem MethodInvocation versionItems MethodInvocation item getId remove IfStatement BinaryOperation != MemberReference cached Literal null BlockStatement IfStatement BinaryOperation instanceof MemberReference cached ReferenceType InternalVersionHistoryImpl BlockStatement LocalVariableDeclaration ReferenceType InternalVersionHistoryImpl VariableDeclarator vh Cast ReferenceType InternalVersionHistoryImpl MemberReference cached TryStatement StatementExpression MethodInvocation vh reload StatementExpression MethodInvocation versionItems MethodInvocation vh getId MemberReference vh put CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to update version history: "" MethodInvocation e toString warn End End MethodDeclaration Modifier public BasicType boolean setNodeReferences FormalParameter ReferenceType NodeReferences refs TryStatement LocalVariableDeclaration ReferenceType InternalVersionItem VariableDeclarator item MethodInvocation MethodInvocation refs MethodInvocation getUUID getTargetId getItem StatementExpression MethodInvocation MemberReference item MethodInvocation refs getReferences setItemReferences ReturnStatement Literal true CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Error while setting references: "" MethodInvocation e toString error ReturnStatement Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public setItemReferences FormalParameter ReferenceType InternalVersionItem item FormalParameter ReferenceType List references LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator refs ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation references iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator id Cast ReferenceType PropertyId MethodInvocation iter next IfStatement MethodInvocation ! MethodInvocation id getParentUUID hasItem BlockStatement StatementExpression MethodInvocation refs MemberReference id add End End StatementExpression MethodInvocation MemberReference item MemberReference refs internalSetItemReferences MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected ReferenceType List getItemReferences FormalParameter ReferenceType InternalVersionItem item TryStatement LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs MethodInvocation pMgr ClassCreator ReferenceType NodeReferencesId MethodInvocation item getId load ReturnStatement MethodInvocation refs getReferences CatchClause CatchClauseParameter ItemStateException e ReturnStatement MemberReference Collections EMPTY_LIST MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier private internalSetItemReferences FormalParameter ReferenceType InternalVersionItem item FormalParameter ReferenceType List references TryStatement LocalVariableDeclaration ReferenceType ChangeLog VariableDeclarator log ClassCreator ReferenceType ChangeLog LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs ClassCreator ReferenceType NodeReferences ClassCreator ReferenceType NodeReferencesId MethodInvocation item getId StatementExpression MethodInvocation refs MemberReference references addAllReferences StatementExpression MethodInvocation log MemberReference refs modified StatementExpression MethodInvocation pMgr MemberReference log store CatchClause CatchClauseParameter ItemStateException e StatementExpression MethodInvocation log Literal ""Error while storing"" MemberReference e error MethodDeclaration /**
     * returns the id of the version history root node
     *
     * @return the id of the version history root node
     */ ReferenceType NodeId getHistoryRootId ReturnStatement Cast ReferenceType NodeId MethodInvocation historyRoot MethodInvocation getId getState MethodDeclaration /**
     * Return the shared item state manager.
     */ ReferenceType SharedItemStateManager getSharedStateMgr ReturnStatement MemberReference sharedStateMgr MethodDeclaration /**
     * {@inheritDoc}
     * <p/>
     * This object uses one instance of a <code>LocalItemStateManager</code>
     * to update data on behalf of many sessions. In order to maintain the
     * association between update operation and session who actually invoked
     * the update, an internal event source is used.
     */ Modifier public synchronized ReferenceType EventStateCollection createEventStateCollection RepositoryException IfStatement BinaryOperation == MemberReference eventSource Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RepositoryException Literal ""Unknown event source."" End ReturnStatement MethodInvocation obsMgr MemberReference eventSource createEventStateCollection ClassDeclaration /**
     * Spezialized SharedItemStateManager that filters out NodeReferences to
     * non-versioning states.
     */ VersionItemStateManager ConstructorDeclaration Modifier public VersionItemStateManager FormalParameter ReferenceType PersistenceManager persistMgr FormalParameter ReferenceType String rootNodeUUID FormalParameter ReferenceType NodeTypeRegistry ntReg ItemStateException StatementExpression SuperConstructorInvocation MemberReference persistMgr MemberReference rootNodeUUID MemberReference ntReg Literal false MethodDeclaration Modifier protected checkReferentialIntegrity FormalParameter ReferenceType ChangeLog changes ReferentialIntegrityException ItemStateException ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation changes modifiedRefs MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs Cast ReferenceType NodeReferences MethodInvocation iter next LocalVariableDeclaration ReferenceType NodeId VariableDeclarator id ClassCreator ReferenceType NodeId MethodInvocation refs getUUID IfStatement MethodInvocation refs hasReferences BlockStatement IfStatement BinaryOperation && MethodInvocation ! changes MemberReference id has MethodInvocation ! MemberReference id hasItemState BlockStatement StatementExpression MethodInvocation iter remove End End End ReferenceType SharedItemStateManager ReferenceType AbstractVersionManager ReferenceType EventStateCollectionFactory",0
347,347,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.commons.collections.map.ReferenceMap Import org.apache.jackrabbit.core.ItemId Import org.apache.log4j.Logger Import java.io.IOException Import java.io.ObjectInputStream Import java.io.ObjectOutputStream Import java.io.Serializable Import java.util.Collections Import java.util.Iterator Import java.util.Map ClassDeclaration Modifier public abstract /**
 * <code>ItemState</code> represents the state of an <code>Item</code>.
 */ ItemState FieldDeclaration /** Serialization UID of this class. */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal 2017294661624942639L FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ItemState getLogger FieldDeclaration /**
     * flags defining the current status of this <code>ItemState</code> instance
     */ Modifier public final static BasicType int VariableDeclarator STATUS_UNDEFINED Literal 0 FieldDeclaration /**
     * 'existing', i.e. persistent state
     */ Modifier public final static BasicType int VariableDeclarator STATUS_EXISTING Literal 1 FieldDeclaration /**
     * 'existing', i.e. persistent state that has been transiently modified (copy-on-write)
     */ Modifier public final static BasicType int VariableDeclarator STATUS_EXISTING_MODIFIED Literal 2 FieldDeclaration /**
     * 'existing', i.e. persistent state that has been transiently removed (copy-on-write)
     */ Modifier public final static BasicType int VariableDeclarator STATUS_EXISTING_REMOVED Literal 3 FieldDeclaration /**
     * 'new' state
     */ Modifier public final static BasicType int VariableDeclarator STATUS_NEW Literal 4 FieldDeclaration /**
     * 'existing', i.e. persistent state that has been persistently modified by somebody else
     */ Modifier public final static BasicType int VariableDeclarator STATUS_STALE_MODIFIED Literal 5 FieldDeclaration /**
     * 'existing', i.e. persistent state that has been destroyed by somebody else
     */ Modifier public final static BasicType int VariableDeclarator STATUS_STALE_DESTROYED Literal 6 FieldDeclaration /**
     * the internal status of this item state
     */ Modifier protected BasicType int VariableDeclarator status MemberReference STATUS_UNDEFINED FieldDeclaration /**
     * the uuid of the (primary) parent node or <code>null</code> if this is the root node
     */ Modifier protected ReferenceType String VariableDeclarator parentUUID FieldDeclaration /**
     * a modification counter used to prevent concurrent modifications
     */ Modifier private BasicType short VariableDeclarator modCount FieldDeclaration Modifier protected ReferenceType ItemId VariableDeclarator id FieldDeclaration /**
     * Flag indicating whether this state is transient
     */ Modifier private final BasicType boolean VariableDeclarator isTransient FieldDeclaration /**
     * Listeners (weak references)
     */ Modifier private final transient ReferenceType Map VariableDeclarator listeners MethodInvocation Collections ClassCreator ReferenceType ReferenceMap MemberReference ReferenceMap WEAK MemberReference ReferenceMap WEAK synchronizedMap FieldDeclaration Modifier protected transient ReferenceType ItemState VariableDeclarator overlayedState ConstructorDeclaration Modifier protected /**
     * Protected constructor
     *
     * @param parentUUID    the UUID of the (primary) parent node or <code>null</code>
     * @param id            the id of the item state object
     * @param initialStatus the initial status of the item state object
     * @param isTransient   flag indicating whether this state is transient or not
     */ ItemState FormalParameter ReferenceType String parentUUID FormalParameter ReferenceType ItemId id FormalParameter BasicType int initialStatus FormalParameter BasicType boolean isTransient SwitchStatement MemberReference initialStatus SwitchStatementCase STATUS_EXISTING STATUS_NEW StatementExpression Assignment MemberReference status MemberReference initialStatus = BreakStatement SwitchStatementCase LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""illegal status: "" MemberReference initialStatus StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType IllegalArgumentException MemberReference msg End StatementExpression Assignment This MemberReference id MemberReference id = StatementExpression Assignment This MemberReference parentUUID MemberReference parentUUID = StatementExpression Assignment MemberReference modCount Literal 0 = StatementExpression Assignment MemberReference overlayedState Literal null = StatementExpression Assignment This MemberReference isTransient MemberReference isTransient = ConstructorDeclaration Modifier protected /**
     * Protected constructor
     *
     * @param initialStatus the initial status of the new <code>ItemState</code> instance
     * @param isTransient   flag indicating whether this state is transient or not
     */ ItemState FormalParameter BasicType int initialStatus FormalParameter BasicType boolean isTransient SwitchStatement MemberReference initialStatus SwitchStatementCase STATUS_EXISTING STATUS_EXISTING_MODIFIED STATUS_EXISTING_REMOVED StatementExpression Assignment MemberReference status MemberReference initialStatus = BreakStatement SwitchStatementCase LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""illegal status: "" MemberReference initialStatus StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType IllegalArgumentException MemberReference msg End StatementExpression Assignment This MemberReference isTransient MemberReference isTransient = MethodDeclaration /**
     * Copy state information from a state into this state
     * @param state source state information
     */ Modifier protected synchronized copy FormalParameter ReferenceType ItemState state SynchronizedStatement MemberReference state StatementExpression Assignment MemberReference parentUUID MethodInvocation state getParentUUID = StatementExpression Assignment MemberReference id MethodInvocation state getId = MethodDeclaration /**
     * Pull state information from overlayed state.
     */ pull IfStatement BinaryOperation != MemberReference overlayedState Literal null BlockStatement StatementExpression MethodInvocation MemberReference overlayedState copy StatementExpression Assignment MemberReference modCount MethodInvocation overlayedState getModCount = End MethodDeclaration /**
     * Push state information into overlayed state.
     */ push IfStatement BinaryOperation != MemberReference overlayedState Literal null BlockStatement StatementExpression MethodInvocation overlayedState This copy End MethodDeclaration /**
     * Called by <code>TransientItemStateManager</code> and
     * <code>LocalItemStateManager</code> when this item state has been disposed.
     */ onDisposed StatementExpression MethodInvocation listeners clear StatementExpression MethodInvocation disconnect StatementExpression Assignment MemberReference overlayedState Literal null = StatementExpression Assignment MemberReference status MemberReference STATUS_UNDEFINED = MethodDeclaration /**
     * Connect this state to some underlying overlayed state.
     */ Modifier protected connect FormalParameter ReferenceType ItemState overlayedState IfStatement BinaryOperation != This MemberReference overlayedState Literal null BlockStatement IfStatement BinaryOperation != This MemberReference overlayedState MemberReference overlayedState BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException BinaryOperation + Literal ""Item state already connected to another underlying state: "" This End End StatementExpression Assignment This MemberReference overlayedState MemberReference overlayedState = StatementExpression This MemberReference overlayedState MethodInvocation This addListener MethodDeclaration /**
     * Reconnect this state to the overlayed state that it has been
     * disconnected from earlier.
     */ Modifier protected reconnect IfStatement BinaryOperation == This MemberReference overlayedState Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException BinaryOperation + Literal ""Item state cannot be reconnected because there's no underlying state to reconnect to: "" This End StatementExpression This MemberReference overlayedState MethodInvocation This addListener MethodDeclaration /**
     * Disconnect this state from the underlying overlayed state.
     */ Modifier protected disconnect IfStatement BinaryOperation != MemberReference overlayedState Literal null BlockStatement StatementExpression MethodInvocation overlayedState This removeListener StatementExpression Assignment MemberReference overlayedState Literal null = End MethodDeclaration /**
     * Notify the listeners that the persistent state this object is
     * representing has been discarded.
     */ Modifier protected notifyStateDiscarded LocalVariableDeclaration ReferenceType ItemStateListener VariableDeclarator la ArrayCreator ReferenceType ItemStateListener MethodInvocation listeners size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation listeners MethodInvocation iterator values LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ cnt la Cast ReferenceType ItemStateListener MethodInvocation iter next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference la length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i la Literal null BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation This stateDiscarded la End End MethodDeclaration /**
     * Notify the listeners that the persistent state this object is
     * representing has been created.
     */ Modifier protected notifyStateCreated LocalVariableDeclaration ReferenceType ItemStateListener VariableDeclarator la ArrayCreator ReferenceType ItemStateListener MethodInvocation listeners size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation listeners MethodInvocation iterator values LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ cnt la Cast ReferenceType ItemStateListener MethodInvocation iter next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference la length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i la Literal null BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation This stateCreated la End End MethodDeclaration /**
     * Notify the listeners that the persistent state this object is
     * representing has been updated.
     */ Modifier public notifyStateUpdated LocalVariableDeclaration ReferenceType ItemStateListener VariableDeclarator la ArrayCreator ReferenceType ItemStateListener MethodInvocation listeners size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation listeners MethodInvocation iterator values LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ cnt la Cast ReferenceType ItemStateListener MethodInvocation iter next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference la length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i la Literal null BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation This stateModified la End End MethodDeclaration /**
     * Notify the listeners that the persistent state this object is
     * representing has been destroyed.
     */ Modifier protected notifyStateDestroyed LocalVariableDeclaration ReferenceType ItemStateListener VariableDeclarator la ArrayCreator ReferenceType ItemStateListener MethodInvocation listeners size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation listeners MethodInvocation iterator values LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ cnt la Cast ReferenceType ItemStateListener MethodInvocation iter next = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference la length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i la Literal null BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation This stateDestroyed la End End MethodDeclaration /**
     * Determines if this item state represents a node.
     *
     * @return true if this item state represents a node, otherwise false.
     */ Modifier public abstract BasicType boolean isNode MethodDeclaration /**
     * Returns the identifier of this item state.
     *
     * @return the identifier of this item state..
     */ Modifier public ReferenceType ItemId getId ReturnStatement MemberReference id MethodDeclaration /**
     * Returns <code>true</code> if this item state represents new or modified
     * state (i.e. the result of copy-on-write) or <code>false</code> if it
     * represents existing, unmodified state.
     *
     * @return <code>true</code> if this item state is modified or new,
     *         otherwise <code>false</code>
     */ Modifier public BasicType boolean isTransient ReturnStatement MemberReference isTransient MethodDeclaration /**
     * Determines whether this item state has become stale.
     * @return true if this item state has become stale, false otherwise.
     */ Modifier public BasicType boolean isStale IfStatement MemberReference isTransient BlockStatement ReturnStatement BinaryOperation || BinaryOperation == MemberReference status MemberReference STATUS_STALE_MODIFIED BinaryOperation == MemberReference status MemberReference STATUS_STALE_DESTROYED BlockStatement ReturnStatement BinaryOperation && BinaryOperation != MemberReference overlayedState Literal null BinaryOperation != MemberReference modCount MethodInvocation overlayedState getModCount End MethodDeclaration /**
     * Returns the UUID of the parent <code>NodeState</code> or <code>null</code>
     * if either this item state represents the root node or this item state is
     * 'free floating', i.e. not attached to the repository's hierarchy.
     *
     * @return the parent <code>NodeState</code>'s UUID
     */ Modifier public ReferenceType String getParentUUID ReturnStatement MemberReference parentUUID MethodDeclaration /**
     * Sets the UUID of the parent <code>NodeState</code>.
     *
     * @param parentUUID the parent <code>NodeState</code>'s UUID or <code>null</code>
     *                   if either this item state should represent the root node or this item state
     *                   should be 'free floating', i.e. detached from the repository's hierarchy.
     */ Modifier public setParentUUID FormalParameter ReferenceType String parentUUID StatementExpression Assignment This MemberReference parentUUID MemberReference parentUUID = MethodDeclaration /**
     * Returns the status of this item.
     *
     * @return the status of this item.
     */ Modifier public BasicType int getStatus ReturnStatement MemberReference status MethodDeclaration /**
     * Sets the new status of this item.
     *
     * @param newStatus the new status
     */ Modifier public setStatus FormalParameter BasicType int newStatus SwitchStatement MemberReference newStatus SwitchStatementCase STATUS_NEW STATUS_EXISTING STATUS_EXISTING_REMOVED STATUS_EXISTING_MODIFIED STATUS_STALE_MODIFIED STATUS_STALE_DESTROYED STATUS_UNDEFINED StatementExpression Assignment MemberReference status MemberReference newStatus = ReturnStatement SwitchStatementCase LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""illegal status: "" MemberReference newStatus StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType IllegalArgumentException MemberReference msg End MethodDeclaration /**
     * Returns the modification count.
     *
     * @return the modification count.
     */ Modifier public BasicType short getModCount ReturnStatement MemberReference modCount MethodDeclaration /**
     * Sets the modification count.
     *
     * @param modCount the modification count of this item
     */ Modifier public setModCount FormalParameter BasicType short modCount StatementExpression Assignment This MemberReference modCount MemberReference modCount = MethodDeclaration /**
     * Updates the modification count.
     */ Modifier synchronized touch StatementExpression MemberReference ++ modCount MethodDeclaration /**
     * Discards this instance, i.e. renders it 'invalid'.
     */ Modifier public discard IfStatement BinaryOperation != MemberReference status MemberReference STATUS_UNDEFINED BlockStatement StatementExpression MethodInvocation notifyStateDiscarded StatementExpression Assignment MemberReference status MemberReference STATUS_UNDEFINED = End MethodDeclaration /**
     * Determines if this item state is overlying persistent state.
     *
     * @return <code>true</code> if this item state is overlying persistent
     *         state, otherwise <code>false</code>.
     */ Modifier public BasicType boolean hasOverlayedState ReturnStatement BinaryOperation != MemberReference overlayedState Literal null MethodDeclaration /**
     * Returns the persistent state backing <i>this</i> transient state or
     * <code>null</code> if there is no persistent state (i.e.. <i>this</i>
     * state is purely transient).
     *
     * @return the persistent item state or <code>null</code> if there is
     *         no persistent state.
     */ Modifier public ReferenceType ItemState getOverlayedState ReturnStatement MemberReference overlayedState MethodDeclaration /**
     * Add an <code>ItemStateListener</code>
     *
     * @param listener the new listener to be informed on modifications
     */ Modifier public addListener FormalParameter ReferenceType ItemStateListener listener IfStatement MethodInvocation ! listeners MemberReference listener containsKey BlockStatement StatementExpression MethodInvocation listeners MemberReference listener MemberReference listener put End MethodDeclaration /**
     * Remove an <code>ItemStateListener</code>
     *
     * @param listener an existing listener
     */ Modifier public removeListener FormalParameter ReferenceType ItemStateListener listener StatementExpression MethodInvocation listeners MemberReference listener remove MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateCreated FormalParameter ReferenceType ItemState created StatementExpression Assignment MemberReference status MemberReference STATUS_EXISTING = StatementExpression MethodInvocation pull MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateDestroyed FormalParameter ReferenceType ItemState destroyed IfStatement MemberReference isTransient BlockStatement StatementExpression Assignment MemberReference status MemberReference STATUS_STALE_DESTROYED = BlockStatement StatementExpression Assignment MemberReference status MemberReference STATUS_EXISTING_REMOVED = StatementExpression MethodInvocation notifyStateDestroyed End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateModified FormalParameter ReferenceType ItemState modified IfStatement MemberReference isTransient BlockStatement StatementExpression Assignment MemberReference status MemberReference STATUS_STALE_MODIFIED = BlockStatement SynchronizedStatement This StatementExpression MethodInvocation pull StatementExpression MethodInvocation notifyStateUpdated End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateDiscarded FormalParameter ReferenceType ItemState discarded StatementExpression MethodInvocation discard MethodDeclaration Modifier private writeObject FormalParameter ReferenceType ObjectOutputStream out IOException StatementExpression MethodInvocation out defaultWriteObject MethodDeclaration Modifier private readObject FormalParameter ReferenceType ObjectInputStream in IOException ClassNotFoundException StatementExpression MethodInvocation in defaultReadObject ReferenceType ItemStateListener ReferenceType Serializable",1
63,63,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.xml Import java.io.ByteArrayOutputStream Import org.apache.xml.serialize.OutputFormat Import org.apache.xml.serialize.XMLSerializer Import org.xml.sax.Attributes Import org.xml.sax.ContentHandler Import org.xml.sax.Locator Import org.xml.sax.SAXException ClassDeclaration Modifier public abstract /**
 * Base class for a SAX content handler for importing XML data. This
 * class provides a general mechanism for converting a SAX event stream
 * to raw XML data and feeding the received byte array into an import
 * method. Subclasses can provide different import mechanisms simply by
 * implementing the abstract {@link #importXML(byte[]) importXML(byte[])}
 * method.
 *
 * @author Jukka Zitting
 */ ImportContentHandler FieldDeclaration /** Internal buffer for the XML byte stream. */ Modifier private ReferenceType ByteArrayOutputStream VariableDeclarator buffer FieldDeclaration /** The internal XML serializer. */ Modifier private ReferenceType ContentHandler VariableDeclarator handler ConstructorDeclaration Modifier public /**
     * Creates a SAX content handler for importing XML data.
     */ ImportContentHandler StatementExpression Assignment This MemberReference buffer ClassCreator ReferenceType ByteArrayOutputStream = StatementExpression Assignment This MemberReference handler ClassCreator ReferenceType XMLSerializer MemberReference buffer ClassCreator ReferenceType OutputFormat = MethodDeclaration /**
     * Imports the given XML data. This method is called by the
     * {@link #endDocument() endDocument()} method after the received
     * XML stream has been serialized.
     * <p>
     * Subclasses must implement this method to provide the actual
     * import mechanism.
     *
     * @param xml the XML data to import
     * @throws Exception on import errors
     */ Modifier protected abstract importXML FormalParameter BasicType byte xml Exception MethodDeclaration /** {@inheritDoc} */ Modifier public setDocumentLocator FormalParameter ReferenceType Locator locator StatementExpression MethodInvocation handler MemberReference locator setDocumentLocator MethodDeclaration /** {@inheritDoc} */ Modifier public startDocument SAXException StatementExpression MethodInvocation handler startDocument MethodDeclaration /** {@inheritDoc} */ Modifier public endDocument SAXException StatementExpression MethodInvocation handler endDocument TryStatement StatementExpression MethodInvocation MethodInvocation buffer toByteArray importXML CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex MethodDeclaration /** {@inheritDoc} */ Modifier public startPrefixMapping FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri SAXException StatementExpression MethodInvocation handler MemberReference prefix MemberReference uri startPrefixMapping MethodDeclaration /** {@inheritDoc} */ Modifier public endPrefixMapping FormalParameter ReferenceType String prefix SAXException StatementExpression MethodInvocation handler MemberReference prefix endPrefixMapping MethodDeclaration /** {@inheritDoc} */ Modifier public startElement FormalParameter ReferenceType String uri FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName FormalParameter ReferenceType Attributes atts SAXException StatementExpression MethodInvocation handler MemberReference uri MemberReference localName MemberReference qName MemberReference atts startElement MethodDeclaration /** {@inheritDoc} */ Modifier public endElement FormalParameter ReferenceType String uri FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName SAXException StatementExpression MethodInvocation handler MemberReference uri MemberReference localName MemberReference qName endElement MethodDeclaration /** {@inheritDoc} */ Modifier public characters FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length SAXException StatementExpression MethodInvocation handler MemberReference ch MemberReference start MemberReference length characters MethodDeclaration /** {@inheritDoc} */ Modifier public ignorableWhitespace FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length SAXException StatementExpression MethodInvocation handler MemberReference ch MemberReference start MemberReference length ignorableWhitespace MethodDeclaration /** {@inheritDoc} */ Modifier public processingInstruction FormalParameter ReferenceType String target FormalParameter ReferenceType String data SAXException StatementExpression MethodInvocation handler MemberReference target MemberReference data processingInstruction MethodDeclaration /** {@inheritDoc} */ Modifier public skippedEntity FormalParameter ReferenceType String name SAXException StatementExpression MethodInvocation handler MemberReference name skippedEntity ReferenceType ContentHandler",0
470,470,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.lock Import org.apache.jackrabbit.core.TransactionException Import org.apache.jackrabbit.core.NodeImpl Import org.apache.jackrabbit.core.SessionImpl Import org.apache.log4j.Logger Import javax.jcr.RepositoryException Import javax.jcr.lock.LockException Import javax.transaction.Status Import java.util.Map Import java.util.HashMap Import java.util.List Import java.util.ArrayList ClassDeclaration /**
 * Encapsulates operations that happen in an XA environment.
 */ XAEnvironment FieldDeclaration /**
     * Logger instance for this class
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType XAEnvironment getLogger FieldDeclaration /**
     * Global lock manager.
     */ Modifier private final ReferenceType LockManagerImpl VariableDeclarator lockMgr FieldDeclaration /**
     * Session owning this environment.
     */ Modifier private final ReferenceType SessionImpl VariableDeclarator session FieldDeclaration /**
     * Map of locked nodes, indexed by their (internal) id.
     */ Modifier private final ReferenceType Map VariableDeclarator lockedNodesMap ClassCreator ReferenceType HashMap FieldDeclaration /**
     * Map of unlocked nodes, indexed by their (internal) id.
     */ Modifier private final ReferenceType Map VariableDeclarator unlockedNodesMap ClassCreator ReferenceType HashMap FieldDeclaration /**
     * List of lock/unlock operations.
     */ Modifier private final ReferenceType List VariableDeclarator operations ClassCreator ReferenceType ArrayList FieldDeclaration /**
     * Operation index.
     */ Modifier private BasicType int VariableDeclarator opIndex FieldDeclaration /**
     * Current status.
     */ Modifier private BasicType int VariableDeclarator status ConstructorDeclaration Modifier public /**
     * Create a new instance of this class.
     * @param lockMgr global lock manager
     */ XAEnvironment FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType LockManagerImpl lockMgr StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference lockMgr MemberReference lockMgr = MethodDeclaration /**
     * Reset this environment.
     */ Modifier public reset StatementExpression MethodInvocation lockedNodesMap clear StatementExpression MethodInvocation unlockedNodesMap clear StatementExpression MethodInvocation operations clear StatementExpression Assignment MemberReference opIndex Literal 0 = MethodDeclaration /**
     * Lock some node.
     * @param node node to lock
     * @param isDeep <code>true</code> to deep lock this node;
     *               <code>false</code> otherwise
     * @param isSessionScoped <code>true</code> if lock should be session scoped;
     *                        <code>false</code> otherwise
     * @throws LockException if node is already locked
     * @throws RepositoryException if an error occurs
     */ Modifier public ReferenceType AbstractLockInfo lock FormalParameter ReferenceType NodeImpl node FormalParameter BasicType boolean isDeep FormalParameter BasicType boolean isSessionScoped LockException RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation node internalGetUUID LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation unlockedNodesMap MemberReference uuid get IfStatement BinaryOperation != MemberReference info Literal null BlockStatement IfStatement BinaryOperation && BinaryOperation == MemberReference info deep MemberReference isDeep BinaryOperation == MemberReference info sessionScoped MemberReference isSessionScoped BlockStatement StatementExpression MethodInvocation unlockedNodesMap MemberReference uuid remove StatementExpression MethodInvocation operations MemberReference info remove ReturnStatement MethodInvocation lockMgr MemberReference uuid getLockInfo End End IfStatement MethodInvocation MemberReference node isLocked BlockStatement ThrowStatement ClassCreator ReferenceType LockException Literal ""Node locked."" End StatementExpression Assignment MemberReference info ClassCreator ReferenceType LockInfo MemberReference node ClassCreator ReferenceType LockToken MethodInvocation node internalGetUUID MemberReference isSessionScoped MemberReference isDeep MethodInvocation node MethodInvocation getUserID getSession = LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator session Cast ReferenceType SessionImpl MethodInvocation node getSession StatementExpression MethodInvocation info MemberReference session setLockHolder StatementExpression MethodInvocation info Literal true setLive StatementExpression MethodInvocation session MethodInvocation info.lockToken toString Literal false addLockToken StatementExpression MethodInvocation lockedNodesMap MemberReference uuid MemberReference info put StatementExpression MethodInvocation operations MemberReference info add ReturnStatement MemberReference info MethodDeclaration /**
     * Unlock some node.
     * @param node node to unlock
     * @throws LockException if the node is not locked
     * @throws RepositoryException if an error occurs
     */ Modifier public unlock FormalParameter ReferenceType NodeImpl node LockException RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation node internalGetUUID LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation lockedNodesMap MemberReference uuid get IfStatement BinaryOperation != MemberReference info Literal null BlockStatement StatementExpression MethodInvocation lockedNodesMap MemberReference uuid remove StatementExpression MethodInvocation operations MemberReference info remove StatementExpression MethodInvocation info Literal false setLive BlockStatement StatementExpression Assignment MemberReference info MethodInvocation MemberReference node getLockInfo = IfStatement BinaryOperation || BinaryOperation == MemberReference info Literal null BinaryOperation != MethodInvocation info getUUID MemberReference uuid BlockStatement ThrowStatement ClassCreator ReferenceType LockException Literal ""Node not locked."" IfStatement BinaryOperation != MethodInvocation info getLockHolder MethodInvocation node getSession BlockStatement ThrowStatement ClassCreator ReferenceType LockException Literal ""Node not locked by this session."" End End StatementExpression Assignment MemberReference info ClassCreator ReferenceType LockInfo MemberReference node MemberReference info = StatementExpression MethodInvocation unlockedNodesMap MemberReference uuid MemberReference info put StatementExpression MethodInvocation operations MemberReference info add End MethodDeclaration /**
     * Return a flag indicating whether the specified node is locked.
     * @return <code>true</code> if this node is locked;
     *         <code>false</code> otherwise
     * @throws RepositoryException if an error occurs
     */ Modifier public BasicType boolean isLocked FormalParameter ReferenceType NodeImpl node RepositoryException LocalVariableDeclaration ReferenceType AbstractLockInfo VariableDeclarator info MethodInvocation MemberReference node getLockInfo ReturnStatement BinaryOperation != MemberReference info Literal null MethodDeclaration /**
     * Return the most appropriate lock information for a node. This is either
     * the lock info for the node itself, if it is locked, or a lock info for
     * one of its parents, if that one is deep locked.
     * @param node node
     * @return LockInfo lock info or <code>null</code> if node is not locked
     * @throws RepositoryException if an error occurs
     */ Modifier public ReferenceType AbstractLockInfo getLockInfo FormalParameter ReferenceType NodeImpl node RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation node internalGetUUID IfStatement MethodInvocation unlockedNodesMap MemberReference uuid containsKey BlockStatement ReturnStatement Literal null End IfStatement MethodInvocation ! lockedNodesMap isEmpty BlockStatement LocalVariableDeclaration ReferenceType NodeImpl VariableDeclarator current MemberReference node ForStatement ForControl BlockStatement LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation lockedNodesMap MethodInvocation current internalGetUUID get IfStatement BinaryOperation != MemberReference info Literal null BlockStatement IfStatement BinaryOperation || BinaryOperation == MethodInvocation info getUUID MemberReference uuid MemberReference info deep BlockStatement ReturnStatement MemberReference info End BreakStatement End IfStatement BinaryOperation == MethodInvocation current getDepth Literal 0 BlockStatement BreakStatement End StatementExpression Assignment MemberReference current Cast ReferenceType NodeImpl MethodInvocation current getParent = End End ReturnStatement MethodInvocation lockMgr MemberReference uuid getLockInfo MethodDeclaration /**
     * Add lock token to this environment.
     * @param lt lock token
     */ Modifier public addLockToken FormalParameter ReferenceType String lt MethodDeclaration /**
     * Remove lock token from this environment.
     * @param lt lock token
     */ Modifier public removeLockToken FormalParameter ReferenceType String lt MethodDeclaration /**
     * Prepare update. Locks global lock manager and feeds all lock/
     * unlock operations.
     */ Modifier public prepare TransactionException StatementExpression Assignment MemberReference status MemberReference Status STATUS_PREPARING = IfStatement MethodInvocation ! operations isEmpty BlockStatement StatementExpression MethodInvocation lockMgr beginUpdate TryStatement WhileStatement BinaryOperation < MemberReference opIndex MethodInvocation operations size BlockStatement TryStatement LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation operations MemberReference opIndex get StatementExpression MethodInvocation info update CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType TransactionException Literal ""Unable to update."" MemberReference e StatementExpression MemberReference ++ opIndex End IfStatement BinaryOperation < MemberReference opIndex MethodInvocation operations size BlockStatement WhileStatement BinaryOperation > MemberReference opIndex Literal 0 BlockStatement TryStatement LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation operations BinaryOperation - MemberReference opIndex Literal 1 get StatementExpression MethodInvocation info undo CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log Literal ""Unable to undo lock operation."" MemberReference e error StatementExpression MemberReference -- opIndex End StatementExpression MethodInvocation lockMgr cancelUpdate End End StatementExpression Assignment MemberReference status MemberReference Status STATUS_PREPARED = MethodDeclaration /**
     * Commit changes. This will finish the update and unlock the
     * global lock manager.
     */ Modifier public commit LocalVariableDeclaration BasicType int VariableDeclarator oldStatus MemberReference status StatementExpression Assignment MemberReference status MemberReference Status STATUS_COMMITTING = IfStatement BinaryOperation == MemberReference oldStatus MemberReference Status STATUS_PREPARED BlockStatement IfStatement MethodInvocation ! operations isEmpty BlockStatement StatementExpression MethodInvocation lockMgr endUpdate StatementExpression MethodInvocation reset End End StatementExpression Assignment MemberReference status MemberReference Status STATUS_COMMITTED = MethodDeclaration /**
     * Rollback changes. This will undo all updates and unlock the
     * global lock manager.
     */ Modifier public rollback LocalVariableDeclaration BasicType int VariableDeclarator oldStatus MemberReference status StatementExpression Assignment MemberReference status MemberReference Status STATUS_ROLLING_BACK = IfStatement BinaryOperation == MemberReference oldStatus MemberReference Status STATUS_PREPARED BlockStatement IfStatement MethodInvocation ! operations isEmpty BlockStatement WhileStatement BinaryOperation > MemberReference opIndex Literal 0 BlockStatement TryStatement LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator info Cast ReferenceType LockInfo MethodInvocation operations BinaryOperation - MemberReference opIndex Literal 1 get StatementExpression MethodInvocation info undo CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log Literal ""Unable to undo lock operation."" MemberReference e error StatementExpression MemberReference -- opIndex End StatementExpression MethodInvocation lockMgr cancelUpdate StatementExpression MethodInvocation reset End End StatementExpression Assignment MemberReference status MemberReference Status STATUS_ROLLEDBACK = MethodDeclaration /**
     * Return a flag indicating whether a lock info belongs to a different
     * XA environment.
     */ Modifier public BasicType boolean differentXAEnv FormalParameter ReferenceType AbstractLockInfo info IfStatement BinaryOperation instanceof MemberReference info ReferenceType LockInfo BlockStatement LocalVariableDeclaration ReferenceType LockInfo VariableDeclarator lockInfo Cast ReferenceType LockInfo MemberReference info ReturnStatement BinaryOperation != MethodInvocation lockInfo getXAEnv This End ReturnStatement Literal true ClassDeclaration /**
     * Information about a lock used inside transactions.
     */ LockInfo FieldDeclaration /**
         * Node being locked/unlocked.
         */ Modifier private final ReferenceType NodeImpl VariableDeclarator node FieldDeclaration /**
         * Flag indicating whether this info belongs to a unlock operation.
         */ Modifier private BasicType boolean VariableDeclarator isUnlock ConstructorDeclaration Modifier public /**
         * Create a new instance of this class.
         * @param lockToken     lock token
         * @param sessionScoped whether lock token is session scoped
         * @param deep          whether lock is deep
         * @param lockOwner     owner of lock
         */ LockInfo FormalParameter ReferenceType NodeImpl node FormalParameter ReferenceType LockToken lockToken FormalParameter BasicType boolean sessionScoped FormalParameter BasicType boolean deep FormalParameter ReferenceType String lockOwner StatementExpression SuperConstructorInvocation MemberReference lockToken MemberReference sessionScoped MemberReference deep MemberReference lockOwner StatementExpression Assignment This MemberReference node MemberReference node = ConstructorDeclaration Modifier public /**
         * Create a new instance of this class. Used to signal an
         * unlock operation on some existing lock information.
         */ LockInfo FormalParameter ReferenceType NodeImpl node FormalParameter ReferenceType AbstractLockInfo info StatementExpression SuperConstructorInvocation MemberReference info lockToken MemberReference info sessionScoped MemberReference info deep MemberReference info lockOwner StatementExpression Assignment This MemberReference node MemberReference node = StatementExpression Assignment This MemberReference isUnlock Literal true = MethodDeclaration /**
         * Return a flag indicating whether this info belongs to a unlock operation.
         * @return <code>true</code> if this info belongs to an unlock operation;
         *         otherwise <code>false</code>
         */ Modifier public BasicType boolean isUnlock ReturnStatement MemberReference isUnlock MethodDeclaration /**
         * Do operation.
         */ Modifier public update LockException RepositoryException IfStatement MemberReference isUnlock BlockStatement StatementExpression MethodInvocation lockMgr MemberReference node internalUnlock BlockStatement StatementExpression MethodInvocation lockMgr MemberReference node MemberReference deep MemberReference sessionScoped internalLock End MethodDeclaration /**
         * Undo operation.
         */ Modifier public undo LockException RepositoryException IfStatement MemberReference isUnlock BlockStatement StatementExpression MethodInvocation lockMgr MemberReference node MemberReference deep MemberReference sessionScoped internalLock BlockStatement StatementExpression MethodInvocation lockMgr MemberReference node internalUnlock End MethodDeclaration /**
         * Return parent environment.
         */ Modifier public ReferenceType XAEnvironment getXAEnv ReturnStatement This XAEnvironment MethodDeclaration /**
         * {@inheritDoc}
         * <p/>
         * As long as the XA environment is neither committed nor rolled back,
         * associated lock information is subject to change.
         */ Modifier public BasicType boolean mayChange IfStatement BinaryOperation && BinaryOperation != MemberReference status MemberReference Status STATUS_COMMITTED BinaryOperation != MemberReference status MemberReference Status STATUS_ROLLEDBACK BlockStatement ReturnStatement Literal true End ReturnStatement SuperMethodInvocation mayChange ReferenceType AbstractLockInfo",1
533,533,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.observation Import org.apache.jackrabbit.core.HierarchyManager Import org.apache.jackrabbit.core.HierarchyManagerImpl Import org.apache.jackrabbit.core.ItemId Import org.apache.jackrabbit.core.ZombieHierarchyManager Import org.apache.jackrabbit.core.state.ChangeLog Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.ItemStateManager Import org.apache.jackrabbit.core.state.NoSuchItemStateException Import org.apache.jackrabbit.core.state.NodeReferences Import org.apache.jackrabbit.core.state.NodeReferencesId Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.Path Import javax.jcr.ItemNotFoundException Import javax.jcr.RepositoryException Import java.util.HashMap Import java.util.Iterator Import java.util.Map ClassDeclaration /**
 * Implements a {@link HierarchyManager} that uses a {@link ChangeLog} for
 * the 'transient' changes on an underlying {@link ItemStateManager}.
 * {@link ItemState}s in attic are provided from the removed {@link ItemState}s
 * in the {@link ChangeLog}. The modified and added {@link ItemState}s in
 * the {@link ChangeLog} overlay the {@link ItemState}s in the
 * {@link ItemStateManager}.
 */ ChangeLogBasedHierarchyMgr FieldDeclaration ReferenceType ZombieHierarchyManager VariableDeclarator zombieHierMgr ConstructorDeclaration /**
     * Creates a new <code>ChangeLogBasedHierarchyMgr</code> that overlays
     * <code>manager</code> with <code>changes</code> and uses the deleted
     * map of the <code>changes</code> as an attic <code>ItemStateManager</code>.
     * @param rootNodeUUID the uuid of the root node.
     * @param manager the item state manager.
     * @param changes the changes that will be applied on the item state manager.
     * @param resolver the namespace resolver of the current session.
     */ ChangeLogBasedHierarchyMgr FormalParameter ReferenceType String rootNodeUUID FormalParameter ReferenceType ItemStateManager manager FormalParameter ReferenceType ChangeLog changes FormalParameter ReferenceType NamespaceResolver resolver StatementExpression SuperConstructorInvocation MemberReference rootNodeUUID ClassCreator ReferenceType ChangeLogItemStateManager MemberReference manager MemberReference changes MemberReference resolver StatementExpression Assignment MemberReference zombieHierMgr ClassCreator ReferenceType ZombieHierarchyManager MemberReference rootNodeUUID MemberReference provider ClassCreator ReferenceType AtticItemStateManager MemberReference changes MemberReference resolver = MethodDeclaration /**
     * Same as {@link #getPath(ItemId)}} except that the <i>old</i> path is
     * returned in case of a moved/removed item.
     *
     * @param id
     * @return
     * @throws ItemNotFoundException
     * @throws RepositoryException
     */ Modifier public ReferenceType Path getZombiePath FormalParameter ReferenceType ItemId id ItemNotFoundException RepositoryException ReturnStatement MethodInvocation zombieHierMgr MemberReference id getPath ClassDeclaration Modifier private static /**
     * Implements an ItemStateManager that is overlayed by a ChangeLog.
     */ ChangeLogItemStateManager FieldDeclaration /**
         * The changes that will be applied to the {@link #base}.
         */ Modifier private final ReferenceType ChangeLog VariableDeclarator changes FieldDeclaration /**
         * The underlying {@link ItemStateManager}.
         */ Modifier private final ReferenceType ItemStateManager VariableDeclarator base ConstructorDeclaration Modifier private /**
         * Creates a new <code>ChangeLogItemStateManager</code> that overlays
         * the {@link ItemState}s in <code>base</code> with the one found in
         * <code>changes</code>.
         * @param base the underlying {@link ItemStateManager}.
         * @param changes
         */ ChangeLogItemStateManager FormalParameter ReferenceType ItemStateManager base FormalParameter ReferenceType ChangeLog changes StatementExpression Assignment This MemberReference base MemberReference base = StatementExpression Assignment This MemberReference changes MemberReference changes = MethodDeclaration /**
         * Returns the {@link ItemState} with the <code>id</code>. This
         * ItemState manager first looks up the <code>ChangeLog</code> and then
         * tries to find the ItemState in the base {@link ItemStateManager}.
         * @param id the id of the {@link ItemState}.
         * @return the {@link ItemState} with <code>id</code>.
         * @throws NoSuchItemStateException if there is no ItemState with
         * <code>id</code>.
         * @throws ItemStateException if any other error occurs.
         */ Modifier public ReferenceType ItemState getItemState FormalParameter ReferenceType ItemId id NoSuchItemStateException ItemStateException TryStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation changes MemberReference id get IfStatement BinaryOperation != MemberReference state Literal null BlockStatement ReturnStatement MemberReference state End CatchClause CatchClauseParameter NoSuchItemStateException e ReturnStatement MethodInvocation base MemberReference id getItemState MethodDeclaration /**
         * Returns <code>true</code> if there exists a {@link ItemState} either
         * in the {@link ChangeLog} or the base {@link ItemStateManager};
         * otherwise <code>false</code> is returned.
         * @param id the id of the {@link ItemState}.
         * @return <code>true</code> if there exists a {@link ItemState} either
         * in the {@link ChangeLog} or the base {@link ItemStateManager};
         * otherwise <code>false</code>.
         */ Modifier public BasicType boolean hasItemState FormalParameter ReferenceType ItemId id TryStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation changes MemberReference id get IfStatement BinaryOperation != MemberReference state Literal null BlockStatement ReturnStatement Literal true End CatchClause CatchClauseParameter NoSuchItemStateException e ReturnStatement MethodInvocation base MemberReference id hasItemState MethodDeclaration /**
         * Always throws a {@link UnsupportedOperationException}.
         */ Modifier public ReferenceType NodeReferences getNodeReferences FormalParameter ReferenceType NodeReferencesId id NoSuchItemStateException ItemStateException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean hasNodeReferences FormalParameter ReferenceType NodeReferencesId id ReturnStatement Literal false ReferenceType ItemStateManager ClassDeclaration Modifier private static /**
     * Returns the removed {@link ItemState}s from the ChangeLog.
     */ AtticItemStateManager FieldDeclaration /**
         * Map of deleted {@link ItemState}s indexed by {@link ItemId}.
         */ Modifier private final ReferenceType Map VariableDeclarator deleted ClassCreator ReferenceType HashMap ConstructorDeclaration Modifier private /**
         * Creates a new <code>AtticItemStateManager</code> based on
         * <code>changes</code>.
         * @param changes deleted {@link ItemState} are retrieved from this
         *  <code>ChangeLog</code>.
         */ AtticItemStateManager FormalParameter ReferenceType ChangeLog changes ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation changes deletedStates MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation it next StatementExpression MethodInvocation deleted MethodInvocation state getId MemberReference state put End MethodDeclaration /**
         * Returns an {@link ItemState} if it is found in the deleted map of the
         * {@link ChangeLog}.
         * @param id the id of the {@link ItemState}.
         * @return the deleted {@link ItemState}.
         * @throws NoSuchItemStateException if the {@link ItemState} cannot
         * be found in the deleted map.
         * @throws ItemStateException if any other error occurs.
         */ Modifier public ReferenceType ItemState getItemState FormalParameter ReferenceType ItemId id NoSuchItemStateException ItemStateException LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation deleted MemberReference id get IfStatement BinaryOperation != MemberReference state Literal null BlockStatement ReturnStatement MemberReference state BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException End MethodDeclaration /**
         * Returns <code>true</code> if an {@link ItemState} with <code>id</code>
         * is found in the deleted map of the {@link ChangeLog}; <code>false</code>
         * otherwise.
         * @param id the id of the {@link ItemState}.
         * @return <code>true</code> if an {@link ItemState} with <code>id</code>
         * is found in the deleted map of the {@link ChangeLog}; <code>false</code>
         * otherwise.
         */ Modifier public BasicType boolean hasItemState FormalParameter ReferenceType ItemId id ReturnStatement MethodInvocation deleted MemberReference id containsKey MethodDeclaration /**
         * Always throws a {@link UnsupportedOperationException}.
         */ Modifier public ReferenceType NodeReferences getNodeReferences FormalParameter ReferenceType NodeReferencesId id NoSuchItemStateException ItemStateException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean hasNodeReferences FormalParameter ReferenceType NodeReferencesId id ReturnStatement Literal false ReferenceType ItemStateManager ReferenceType HierarchyManagerImpl",0
220,220,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server.io Import java.io.IOException Import java.io.InputStream ClassDeclaration Modifier public /**
 * This is a stream that will only supply bytes up to a certain length - if its
 * position goes above that, it will stop.
 * <p>
 * This is useful to wrap ServletInputStreams. The ServletInputStream will block
 * if you try to read content from it that isn't there, because it doesn't know
 * whether the content hasn't arrived yet or whether the content has finished.
 * So, one of these, initialized with the Content-length sent in the
 * ServletInputStream's header, will stop it blocking, providing it's been sent
 * with a correct content length.
 *
 * @version $Revision: 13729 $, $Date: 2004/06/04 15:48:16 $
 * @author InigoSurguy
 */ BoundedInputStream FieldDeclaration /** the wrapped input stream */ Modifier private final ReferenceType InputStream VariableDeclarator in FieldDeclaration /** the max length to provide */ Modifier private final BasicType int VariableDeclarator max FieldDeclaration /** the number of bytes already returned */ Modifier private BasicType int VariableDeclarator pos Literal 0 FieldDeclaration /** the marked position */ Modifier private BasicType int VariableDeclarator mark Literal - 1 FieldDeclaration /** flag if close shoud be propagated */ Modifier private BasicType boolean VariableDeclarator propagateClose Literal true ConstructorDeclaration Modifier public /**
     * Creates a new <code>BoundedInputStream</code> that wraps the given input
     * stream and limits it to a certain size.
     *
     * @param in The wrapped input stream
     * @param size The maximum number of bytes to return
     */ BoundedInputStream FormalParameter ReferenceType InputStream in FormalParameter BasicType long size StatementExpression Assignment This MemberReference max Cast BasicType int MemberReference size = StatementExpression Assignment This MemberReference in MemberReference in = ConstructorDeclaration Modifier public BoundedInputStream FormalParameter ReferenceType InputStream in StatementExpression ExplicitConstructorInvocation MemberReference in Literal - 1 MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int read IOException IfStatement BinaryOperation && BinaryOperation >= MemberReference max Literal 0 BinaryOperation == MemberReference pos MemberReference max BlockStatement ReturnStatement Literal - 1 End LocalVariableDeclaration BasicType int VariableDeclarator result MethodInvocation in read StatementExpression MemberReference ++ pos ReturnStatement MemberReference result MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int read FormalParameter BasicType byte b IOException ReturnStatement This MethodInvocation MemberReference b Literal 0 MemberReference b length read MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int read FormalParameter BasicType byte b FormalParameter BasicType int off FormalParameter BasicType int len IOException IfStatement BinaryOperation && BinaryOperation >= MemberReference max Literal 0 BinaryOperation >= MemberReference pos MemberReference max BlockStatement ReturnStatement Literal - 1 End LocalVariableDeclaration BasicType int VariableDeclarator maxRead TernaryExpression BinaryOperation >= MemberReference max Literal 0 MethodInvocation Math MemberReference len BinaryOperation - MemberReference max MemberReference pos min MemberReference len LocalVariableDeclaration BasicType int VariableDeclarator bytesRead MethodInvocation in MemberReference b MemberReference off MemberReference maxRead read IfStatement BinaryOperation == MemberReference bytesRead Literal - 1 BlockStatement ReturnStatement Literal - 1 End StatementExpression Assignment MemberReference pos MemberReference bytesRead += ReturnStatement MemberReference bytesRead MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType long skip FormalParameter BasicType long n IOException LocalVariableDeclaration BasicType long VariableDeclarator toSkip TernaryExpression BinaryOperation >= MemberReference max Literal 0 MethodInvocation Math MemberReference n BinaryOperation - MemberReference max MemberReference pos min MemberReference n LocalVariableDeclaration BasicType long VariableDeclarator skippedBytes MethodInvocation in MemberReference toSkip skip StatementExpression Assignment MemberReference pos MemberReference skippedBytes += ReturnStatement MemberReference skippedBytes MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int available IOException IfStatement BinaryOperation && BinaryOperation >= MemberReference max Literal 0 BinaryOperation >= MemberReference pos MemberReference max BlockStatement ReturnStatement Literal 0 End ReturnStatement MethodInvocation in available MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation in toString MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public close IOException IfStatement MemberReference propagateClose BlockStatement StatementExpression MethodInvocation in close End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized reset IOException StatementExpression MethodInvocation in reset StatementExpression Assignment MemberReference pos MemberReference mark = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized mark FormalParameter BasicType int readlimit StatementExpression MethodInvocation in MemberReference readlimit mark StatementExpression Assignment MemberReference mark MemberReference pos = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean markSupported ReturnStatement MethodInvocation in markSupported MethodDeclaration Modifier public BasicType boolean isPropagateClose ReturnStatement MemberReference propagateClose MethodDeclaration Modifier public setPropagateClose FormalParameter BasicType boolean propagateClose StatementExpression Assignment This MemberReference propagateClose MemberReference propagateClose = ReferenceType InputStream",1
657,657,,0
635,635,,0
707,707,,1
46,46,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.transaction Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.w3c.dom.Element Import org.w3c.dom.Document ClassDeclaration Modifier public /**
 * <code>TransactionInfo</code> class encapsultes the information present
 * in the {@link #XML_TRANSACTIONINFO} element that forms the request body of
 * the UNLOCk request for a transaction lock.
 *
 * @see TransactionConstants#XML_TRANSACTIONINFO
 * @see TransactionConstants#XML_TRANSACTION
 */ TransactionInfo FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType TransactionInfo getLogger FieldDeclaration Modifier private final BasicType boolean VariableDeclarator isCommit ConstructorDeclaration Modifier public /**
     * Creates a <code>TransactionInfo</code> object
     *
     * @param isCommit
     */ TransactionInfo FormalParameter BasicType boolean isCommit StatementExpression Assignment This MemberReference isCommit MemberReference isCommit = ConstructorDeclaration Modifier public /**
     * Creates a <code>TransactionInfo</code> object from the given 'transactionInfo'
     * element. The 'transactionInfo' must have the following form:
     * <pre>
     *
     *  &lt;!ELEMENT transactioninfo (transactionstatus) &gt;
     *  &lt;!ELEMENT transactionstatus ( commit | rollback ) &gt;
     *  &lt;!ELEMENT commit EMPTY &gt;
     *  &lt;!ELEMENT rollback EMPTY &gt;
     * </pre>
     * @param transactionInfo as present in the UNLOCK request body.
     * @throws IllegalArgumentException if the given transactionInfo element
     * is not valid.
     */ TransactionInfo FormalParameter ReferenceType Element transactionInfo IfStatement BinaryOperation || BinaryOperation == MemberReference transactionInfo Literal null MethodInvocation ! XML_TRANSACTIONINFO MethodInvocation transactionInfo getLocalName equals BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""transactionInfo element expected."" End LocalVariableDeclaration ReferenceType Element VariableDeclarator txStatus MethodInvocation DomUtil MemberReference transactionInfo MemberReference XML_TRANSACTIONSTATUS MemberReference NAMESPACE getChildElement IfStatement BinaryOperation != MemberReference txStatus Literal null BlockStatement StatementExpression Assignment MemberReference isCommit MethodInvocation DomUtil MemberReference txStatus MemberReference XML_COMMIT MemberReference NAMESPACE hasChildElement = BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""transactionInfo must contain a single 'transactionstatus' element."" End MethodDeclaration /**
     * Returns true, if this info requires a 'commit' action, false otherwise
     * (i.e. 'rollback' is requested).
     *
     * @return true if a 'commit' element was present. false otherwise.
     * @see #XML_COMMIT
     * @see #XML_ROLLBACK
     */ Modifier public BasicType boolean isCommit ReturnStatement MemberReference isCommit MethodDeclaration /**
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator elem MethodInvocation DomUtil MemberReference document MemberReference XML_TRANSACTIONINFO MemberReference NAMESPACE createElement LocalVariableDeclaration ReferenceType Element VariableDeclarator st MethodInvocation DomUtil MemberReference elem MemberReference XML_TRANSACTIONSTATUS MemberReference NAMESPACE addChildElement LocalVariableDeclaration ReferenceType String VariableDeclarator lName TernaryExpression MemberReference isCommit MemberReference XML_COMMIT MemberReference XML_ROLLBACK StatementExpression MethodInvocation DomUtil MemberReference st MemberReference lName MemberReference NAMESPACE addChildElement ReturnStatement MemberReference elem ReferenceType TransactionConstants ReferenceType XmlSerializable",0
861,861,,0
381,381,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.jackrabbit.core.fs.FileSystem Import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry Import javax.jcr.NamespaceRegistry Import java.io.File ClassDeclaration Modifier public /**
 * A <code>PMContext</code> is used to provide context information for a
 * <code>PersistenceManager</code>.
 *
 * @see PersistenceManager#init(PMContext)
 */ PMContext FieldDeclaration /**
     * the physcial home dir
     */ Modifier private final ReferenceType File VariableDeclarator physicalHomeDir FieldDeclaration /**
     * the virtual jackrabbit filesystem
     */ Modifier private final ReferenceType FileSystem VariableDeclarator fs FieldDeclaration /**
     * namespace registry
     */ Modifier private final ReferenceType NamespaceRegistry VariableDeclarator nsReg FieldDeclaration /**
     * node type registry
     */ Modifier private final ReferenceType NodeTypeRegistry VariableDeclarator ntReg FieldDeclaration /**
     * uuid of the root node
     */ Modifier private final ReferenceType String VariableDeclarator rootNodeUUID ConstructorDeclaration Modifier public /**
     * Creates a new <code>PMContext</code>.
     *
     * @param homeDir the physical home directory
     * @param fs the virtual jackrabbit filesystem
     * @param rootNodeUUID uuid of the root node
     * @param nsReg        namespace registry
     * @param ntReg        node type registry
     */ PMContext FormalParameter ReferenceType File homeDir FormalParameter ReferenceType FileSystem fs FormalParameter ReferenceType String rootNodeUUID FormalParameter ReferenceType NamespaceRegistry nsReg FormalParameter ReferenceType NodeTypeRegistry ntReg StatementExpression Assignment This MemberReference physicalHomeDir MemberReference homeDir = StatementExpression Assignment This MemberReference fs MemberReference fs = StatementExpression Assignment This MemberReference rootNodeUUID MemberReference rootNodeUUID = StatementExpression Assignment This MemberReference nsReg MemberReference nsReg = StatementExpression Assignment This MemberReference ntReg MemberReference ntReg = MethodDeclaration /**
     * Returns the physical home directory for this persistence manager
     * @return
     */ Modifier public ReferenceType File getHomeDir ReturnStatement MemberReference physicalHomeDir MethodDeclaration /**
     * Returns the virtual filesystem for this persistence manager
     * @return
     */ Modifier public ReferenceType FileSystem getFileSystem ReturnStatement MemberReference fs MethodDeclaration /**
     * Returns the uuid of the root node
     *
     * @return the uuid of the root node
     */ Modifier public ReferenceType String getRootNodeUUID ReturnStatement MemberReference rootNodeUUID MethodDeclaration /**
     * Returns the namespace registry
     *
     * @return the namespace registry
     */ Modifier public ReferenceType NamespaceRegistry getNamespaceRegistry ReturnStatement MemberReference nsReg MethodDeclaration /**
     * Returns the node type registry
     *
     * @return the node type registry
     */ Modifier public ReferenceType NodeTypeRegistry getNodeTypeRegistry ReturnStatement MemberReference ntReg",1
319,319,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import javax.jcr.RepositoryException Import javax.jcr.query.Query Import org.apache.jackrabbit.rmi.remote.RemoteQuery Import org.apache.jackrabbit.rmi.remote.RemoteQueryResult Import org.apache.jackrabbit.rmi.remote.RemoteNode ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link javax.jcr.query.Query Query} interface.
 * This class makes a local session available as an RMI service using the
 * {@link org.apache.jackrabbit.rmi.remote.RemoteQuery RemoteQuery}
 * interface.
 *
 * @author Philipp Koch
 * @see javax.jcr.query.Query
 * @see org.apache.jackrabbit.rmi.remote.RemoteQuery
 */ ServerQuery FieldDeclaration /** The adapted local query manager. */ Modifier private ReferenceType Query VariableDeclarator query ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local <code>Query</code>.
     *
     * @param query local <code>Query</code>
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerQuery FormalParameter ReferenceType Query query FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference query MemberReference query = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteQueryResult execute RepositoryException RemoteException ReturnStatement ClassCreator ReferenceType ServerQueryResult MethodInvocation query execute MethodInvocation getFactory MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getStatement RemoteException ReturnStatement MethodInvocation query getStatement MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getLanguage RemoteException ReturnStatement MethodInvocation query getLanguage MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getStoredQueryPath RepositoryException RemoteException ReturnStatement MethodInvocation query getStoredQueryPath MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteNode storeAsNode FormalParameter ReferenceType String absPath RepositoryException RemoteException ReturnStatement MethodInvocation MethodInvocation query MemberReference absPath storeAsNode getRemoteNode ReferenceType ServerObject ReferenceType RemoteQuery",0
238,238,"CompilationUnit PackageDeclaration org.apache.jackrabbit.tck.j2ee Import org.apache.log4j.PropertyConfigurator Import org.apache.log4j.Logger Import org.apache.jackrabbit.core.config.RepositoryConfig Import org.apache.jackrabbit.core.RepositoryImpl Import org.xml.sax.InputSource Import javax.servlet.http.HttpServlet Import javax.servlet.ServletException Import javax.jcr  Import java.io  Import java.util.Properties ClassDeclaration Modifier public /**
 * The RepositoryServlet connects (starts) to a jsr170 repository and
 * puts the reference into a class variable.
 */ RepositoryServlet FieldDeclaration /** the logger */ Modifier private static ReferenceType Logger VariableDeclarator log FieldDeclaration /** repository configuration path */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_REPOSITORY_CONFIG Literal ""repository-config"" FieldDeclaration /** repository home */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_REPOSITORY_HOME Literal ""repository-home"" FieldDeclaration /** repository name */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_REPOSITORY_NAME Literal ""repository-name"" FieldDeclaration /** user id name */ Modifier public final static ReferenceType String VariableDeclarator USER_ID Literal ""jcr-userid"" FieldDeclaration /** user password name */ Modifier public final static ReferenceType String VariableDeclarator USER_PASSWORD Literal ""jcr-password"" FieldDeclaration /** submit url name */ Modifier public final static ReferenceType String VariableDeclarator SUBMIT_URL Literal ""submit-url"" FieldDeclaration /** exclude list url name */ Modifier public final static ReferenceType String VariableDeclarator EXCLUDE_LIST_URL Literal ""exclude-list-url"" FieldDeclaration /** tck version checker gif path */ Modifier public final static ReferenceType String VariableDeclarator CHECK_TCK_VERSION_GIF_PATH Literal ""check-tck-version-gif"" FieldDeclaration /** exclude list version checker gif path */ Modifier public final static ReferenceType String VariableDeclarator CHECK_EXCLUDELIST_VERSION_GIF_PATH Literal ""check-excludelist-version-gif"" FieldDeclaration /** exclude list version checker gif path */ Modifier public final static ReferenceType String VariableDeclarator TCK_UPDATE_URL Literal ""tck-update-page"" FieldDeclaration /** tck webapp jar path name */ Modifier public final static ReferenceType String VariableDeclarator TCK_WEBAPP_JAR_PATH Literal ""tck-webapp-jar-path"" FieldDeclaration /** log4j config */ Modifier public final static ReferenceType String VariableDeclarator PARAM_LOG4J_CONFIG Literal ""log4j-config"" FieldDeclaration /** the repository to read/write test results and config */ Modifier private static ReferenceType RepositoryImpl VariableDeclarator repository FieldDeclaration /** the user id */ Modifier private static ReferenceType String VariableDeclarator uid FieldDeclaration /** the password */ Modifier private static ReferenceType String VariableDeclarator pw FieldDeclaration /** the submit url */ Modifier private static ReferenceType String VariableDeclarator submitUrl FieldDeclaration /** the tck webapp jar path */ Modifier private static ReferenceType String VariableDeclarator tckWebappJarPath FieldDeclaration /** the exclude list url */ Modifier private static ReferenceType String VariableDeclarator excludeListUrl FieldDeclaration /** tck version checker path */ Modifier private static ReferenceType String VariableDeclarator tckVersionCheckerPath FieldDeclaration /** the exclude list checker url */ Modifier private static ReferenceType String VariableDeclarator excludeListCheckerPath FieldDeclaration /** the update url */ Modifier private static ReferenceType String VariableDeclarator tckUpdateUrl MethodDeclaration /**
     * The init method starts the repository to read/write test results and configuration,
     * sets the jaas config and the user id and the user password
     *
     * @throws ServletException
     */ Modifier public init ServletException StatementExpression SuperMethodInvocation init TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator log4jConfig MethodInvocation MethodInvocation MemberReference PARAM_LOG4J_CONFIG getInitParameter getServletConfig LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation MethodInvocation MemberReference log4jConfig getResourceAsStream getServletContext IfStatement BinaryOperation == MemberReference in Literal null BlockStatement StatementExpression MethodInvocation PropertyConfigurator MemberReference log4jConfig configure BlockStatement TryStatement LocalVariableDeclaration ReferenceType Properties VariableDeclarator log4jProperties ClassCreator ReferenceType Properties StatementExpression MethodInvocation log4jProperties MemberReference in load StatementExpression MethodInvocation in close StatementExpression MethodInvocation PropertyConfigurator MemberReference log4jProperties configure CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + Literal ""Unable to load log4jProperties: "" MethodInvocation e toString End StatementExpression MethodInvocation Literal ""RepositoryServlet initializing.."" log_info LocalVariableDeclaration ReferenceType String VariableDeclarator repHome MethodInvocation MethodInvocation MemberReference INIT_PARAM_REPOSITORY_HOME getInitParameter getServletConfig IfStatement BinaryOperation == MemberReference repHome Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + MemberReference INIT_PARAM_REPOSITORY_HOME Literal "" missing."" log_info ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + MemberReference INIT_PARAM_REPOSITORY_HOME Literal "" missing."" End LocalVariableDeclaration ReferenceType File VariableDeclarator repositoryHome TryStatement StatementExpression Assignment MemberReference repositoryHome ClassCreator MethodInvocation getCanonicalFile ReferenceType File MemberReference repHome = CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + MemberReference INIT_PARAM_REPOSITORY_HOME Literal "" invalid."" MethodInvocation e toString log_info ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + BinaryOperation + MemberReference INIT_PARAM_REPOSITORY_HOME Literal "" invalid."" MethodInvocation e toString StatementExpression MethodInvocation BinaryOperation + Literal ""  repository-home = "" MethodInvocation repositoryHome getPath log_info LocalVariableDeclaration ReferenceType String VariableDeclarator repConfig MethodInvocation MethodInvocation MemberReference INIT_PARAM_REPOSITORY_CONFIG getInitParameter getServletConfig IfStatement BinaryOperation == MemberReference repConfig Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + MemberReference INIT_PARAM_REPOSITORY_CONFIG Literal "" missing."" log_info ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + MemberReference INIT_PARAM_REPOSITORY_CONFIG Literal "" missing."" End StatementExpression MethodInvocation BinaryOperation + Literal ""  repository-config = "" MemberReference repConfig log_info StatementExpression Assignment MemberReference in MethodInvocation MethodInvocation MemberReference repConfig getResourceAsStream getServletContext = IfStatement BinaryOperation == MemberReference in Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference in ClassCreator ReferenceType FileInputStream ClassCreator ReferenceType File MemberReference repositoryHome MemberReference repConfig = CatchClause CatchClauseParameter FileNotFoundException e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + MemberReference INIT_PARAM_REPOSITORY_CONFIG Literal "" invalid."" MethodInvocation e toString log_info ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + BinaryOperation + MemberReference INIT_PARAM_REPOSITORY_CONFIG Literal "" invalid."" MethodInvocation e toString End LocalVariableDeclaration ReferenceType String VariableDeclarator repositoryName MethodInvocation MethodInvocation MemberReference INIT_PARAM_REPOSITORY_NAME getInitParameter getServletConfig IfStatement BinaryOperation == MemberReference repositoryName Literal null BlockStatement StatementExpression Assignment MemberReference repositoryName Literal ""default"" = End StatementExpression MethodInvocation BinaryOperation + Literal ""  repository-name = "" MemberReference repositoryName log_info LocalVariableDeclaration ReferenceType InputSource VariableDeclarator is ClassCreator ReferenceType InputSource MemberReference in LocalVariableDeclaration ReferenceType RepositoryConfig VariableDeclarator config MethodInvocation RepositoryConfig MemberReference is MethodInvocation repositoryHome getPath create StatementExpression Assignment MemberReference repository MethodInvocation RepositoryImpl MemberReference config create = StatementExpression MethodInvocation Literal ""JSR170 RI Repository initialized."" log_info StatementExpression Assignment MemberReference uid MethodInvocation MethodInvocation MemberReference USER_ID getInitParameter getServletConfig = StatementExpression Assignment MemberReference pw MethodInvocation MethodInvocation MemberReference USER_PASSWORD getInitParameter getServletConfig = StatementExpression Assignment MemberReference submitUrl MethodInvocation MethodInvocation MemberReference SUBMIT_URL getInitParameter getServletConfig = StatementExpression Assignment MemberReference tckWebappJarPath MethodInvocation MethodInvocation MemberReference TCK_WEBAPP_JAR_PATH getInitParameter getServletConfig = StatementExpression Assignment MemberReference excludeListUrl MethodInvocation MethodInvocation MemberReference EXCLUDE_LIST_URL getInitParameter getServletConfig = StatementExpression Assignment MemberReference tckVersionCheckerPath MethodInvocation MethodInvocation MemberReference CHECK_TCK_VERSION_GIF_PATH getInitParameter getServletConfig = StatementExpression Assignment MemberReference excludeListCheckerPath MethodInvocation MethodInvocation MemberReference CHECK_EXCLUDELIST_VERSION_GIF_PATH getInitParameter getServletConfig = StatementExpression Assignment MemberReference tckUpdateUrl MethodInvocation MethodInvocation MemberReference TCK_UPDATE_URL getInitParameter getServletConfig = CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation BinaryOperation + Literal ""Unable to initialize repository: "" MethodInvocation e toString MemberReference e log_info ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + Literal ""Unable to initialize repository: "" MethodInvocation e toString MemberReference e MethodDeclaration Modifier public destroy StatementExpression SuperMethodInvocation destroy StatementExpression MethodInvocation repository shutdown StatementExpression MethodInvocation Literal ""RepositoryServlet shutting down..."" log_info MethodDeclaration Modifier private log_info FormalParameter ReferenceType String msg IfStatement BinaryOperation != MemberReference log Literal null BlockStatement StatementExpression MethodInvocation log MemberReference msg info BlockStatement StatementExpression MethodInvocation MemberReference msg log End MethodDeclaration Modifier private log_info FormalParameter ReferenceType String msg FormalParameter ReferenceType Throwable t IfStatement BinaryOperation != MemberReference log Literal null BlockStatement StatementExpression MethodInvocation log MemberReference msg MemberReference t info BlockStatement StatementExpression MethodInvocation MemberReference msg MemberReference t log End MethodDeclaration /**
     * Returns the JSR170 repository
     * @return a jsr170 repository
     */ Modifier public static ReferenceType Repository getRepository ReturnStatement MemberReference repository MethodDeclaration /**
     * Returns the jcr session
     *
     * @return
     */ Modifier public static ReferenceType Session getSession TryStatement ReturnStatement MethodInvocation login CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to retrieve session: "" MethodInvocation e toString error ReturnStatement Literal null MethodDeclaration /**
     * Logs in to the repository. The user to login is specified in the servlet config.
     * @throws RepositoryException
     */ Modifier public static ReferenceType Session login RepositoryException LocalVariableDeclaration ReferenceType Session VariableDeclarator repSession MethodInvocation repository ClassCreator ReferenceType SimpleCredentials MemberReference uid MethodInvocation pw toCharArray Literal null login ReturnStatement MemberReference repSession MethodDeclaration /**
     * Returns the url where the test result have to be submitted
     *
     * @return submit url
     */ Modifier public static ReferenceType String getSubmitUrl ReturnStatement MemberReference submitUrl MethodDeclaration /**
     * Returns the path where the tck webapp jar file is placed
     *
     * @return path to jar
     */ Modifier public static ReferenceType String getTckWebappJarPath ReturnStatement MemberReference tckWebappJarPath MethodDeclaration /**
     * Returns the exclude list url
     *
     * @return exclude list provider url
     */ Modifier public static ReferenceType String getExcludeListUrl ReturnStatement MemberReference excludeListUrl MethodDeclaration /**
     * Returns the tck version checker path.
     *
     * @return tck version checker path
     */ Modifier public static ReferenceType String getTckVersionCheckerPath ReturnStatement MemberReference tckVersionCheckerPath MethodDeclaration /**
     * Returns the excludelist checker url
     *
     * @return exclude list checker url
     */ Modifier public static ReferenceType String getExcludeListCheckerPath ReturnStatement MemberReference excludeListCheckerPath MethodDeclaration /**
     * Returns the tck update url
     *
     * @return url pointing to update page
     */ Modifier public static ReferenceType String getTckUpdateUrl ReturnStatement MemberReference tckUpdateUrl ReferenceType HttpServlet",0
537,537,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav InterfaceDeclaration Modifier public /**
 * <code>DavSessionProvider</code> is an interface for components that
 * can initiate and complete {@link DavSession}s. A provider is
 * responsible for supplying references from a {@link WebdavRequest}
 * to a {@link DavSession} when acquired and removing the references
 * when released.

 */ DavSessionProvider MethodDeclaration /**
     * Acquires a DavSession. Upon success, the WebdavRequest will
     * reference that session.
     *
     * A session will not be available if an exception is thrown.
     *
     * @param request
     * @return <code>true</code> if the session was attached to the request;
     *         <code>false</code> otherwise.
     * @throws DavException if a problem occurred while obtaining the session
     */ Modifier public BasicType boolean attachSession FormalParameter ReferenceType WebdavRequest request DavException MethodDeclaration /**
     * Releases the reference from the request to the session.
     *
     * @param request
     */ Modifier public releaseSession FormalParameter ReferenceType WebdavRequest request",0
273,273,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.observation Import org.apache.log4j.Logger Import javax.jcr.RepositoryException Import javax.jcr.observation.Event Import javax.jcr.observation.EventIterator Import java.util.Iterator Import java.util.NoSuchElementException Import java.util.Set ClassDeclaration /**
 */ FilteredEventIterator FieldDeclaration /**
     * Logger instance for this class
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType FilteredEventIterator getLogger FieldDeclaration /**
     * The actual {@link EventState}s fired by the workspace (unfiltered)
     */ Modifier private final ReferenceType Iterator VariableDeclarator actualEvents FieldDeclaration /**
     * For filtering the {@link javax.jcr.observation.Event}s.
     */ Modifier private final ReferenceType EventFilter VariableDeclarator filter FieldDeclaration /**
     * Set of <code>ItemId</code>s of denied <code>ItemState</code>s.
     */ Modifier private final ReferenceType Set VariableDeclarator denied FieldDeclaration /**
     * The next {@link javax.jcr.observation.Event} in this iterator
     */ Modifier private ReferenceType Event VariableDeclarator next FieldDeclaration /**
     * Current position
     */ Modifier private BasicType long VariableDeclarator pos Literal 0 ConstructorDeclaration Modifier public /**
     * Creates a new <code>FilteredEventIterator</code>.
     *
     * @param c      an unmodifiable Collection of {@link javax.jcr.observation.Event}s.
     * @param filter only event that pass the filter will be dispatched to the
     *               event listener.
     * @param denied <code>Set</code> of <code>ItemId</code>s of denied <code>ItemState</code>s
     *               rejected by the <code>AccessManager</code>. If
     *               <code>null</code> no <code>ItemState</code> is denied.
     */ FilteredEventIterator FormalParameter ReferenceType EventStateCollection c FormalParameter ReferenceType EventFilter filter FormalParameter ReferenceType Set denied StatementExpression Assignment MemberReference actualEvents MethodInvocation c iterator = StatementExpression Assignment This MemberReference filter MemberReference filter = StatementExpression Assignment This MemberReference denied MemberReference denied = StatementExpression MethodInvocation fetchNext MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Object next IfStatement BinaryOperation == MemberReference next Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchElementException End LocalVariableDeclaration ReferenceType Event VariableDeclarator e MemberReference next StatementExpression MethodInvocation fetchNext StatementExpression MemberReference ++ pos ReturnStatement MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Event nextEvent ReturnStatement Cast ReferenceType Event MethodInvocation next MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public skip FormalParameter BasicType long skipNum WhileStatement BinaryOperation > MemberReference -- skipNum Literal 0 BlockStatement StatementExpression MethodInvocation next End MethodDeclaration /**
     * Always returns <code>-1</code>.
     *
     * @return <code>-1</code>.
     */ Modifier public BasicType long getSize ReturnStatement Literal - 1 MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType long getPosition ReturnStatement MemberReference pos MethodDeclaration /**
     * This method is not supported.
     * Always throws a <code>UnsupportedOperationException</code>.
     */ Modifier public remove ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""EventIterator.remove()"" MethodDeclaration /**
     * Returns <tt>true</tt> if the iteration has more elements. (In other
     * words, returns <tt>true</tt> if <tt>next</tt> would return an element
     * rather than throwing an exception.)
     *
     * @return <tt>true</tt> if the iterator has more elements.
     */ Modifier public BasicType boolean hasNext ReturnStatement BinaryOperation != MemberReference next Literal null MethodDeclaration /**
     * Fetches the next Event from the collection of events
     * passed in the constructor of <code>FilteredEventIterator</code>
     * that is allowed by the {@link EventFilter}.
     */ Modifier private fetchNext LocalVariableDeclaration ReferenceType EventState VariableDeclarator state StatementExpression Assignment MemberReference next Literal null = WhileStatement BinaryOperation && BinaryOperation == MemberReference next Literal null MethodInvocation actualEvents hasNext BlockStatement StatementExpression Assignment MemberReference state Cast ReferenceType EventState MethodInvocation actualEvents next = IfStatement BinaryOperation || BinaryOperation == MemberReference denied Literal null MethodInvocation ! denied MethodInvocation state getId contains BlockStatement TryStatement StatementExpression Assignment MemberReference next TernaryExpression MethodInvocation filter MemberReference state blocks Literal null ClassCreator ReferenceType EventImpl MethodInvocation filter getSession MemberReference state = CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log Literal ""Exception while applying filter."" MemberReference e error End End ReferenceType EventIterator",1
11,11,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Node Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Add a node to the current working <code>Node</code>
 */ AddNode FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType AddNode getLog FieldDeclaration /** Node type key */ Modifier private ReferenceType String VariableDeclarator typeKey Literal ""type"" FieldDeclaration /** Node name key */ Modifier private ReferenceType String VariableDeclarator relPathKey Literal ""relPath"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType Node VariableDeclarator node MethodInvocation CommandHelper MemberReference ctx getCurrentNode LocalVariableDeclaration ReferenceType String VariableDeclarator nodeType Cast ReferenceType String MethodInvocation ctx This MemberReference typeKey get LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation ctx This MemberReference relPathKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""adding node at "" MethodInvocation node getPath Literal ""/"" MemberReference name debug End IfStatement BinaryOperation == MemberReference nodeType Literal null BlockStatement StatementExpression MethodInvocation node MemberReference name addNode BlockStatement StatementExpression MethodInvocation node MemberReference name MemberReference nodeType addNode End ReturnStatement Literal false MethodDeclaration /**
     * @return the nodeTypeKey.
     */ Modifier public ReferenceType String getTypeKey ReturnStatement MemberReference typeKey MethodDeclaration /**
     * @param nodeTypeKey
     *        Set the context attribute key for the node type attribute.
     */ Modifier public setTypeKey FormalParameter ReferenceType String nodeTypeKey StatementExpression Assignment This MemberReference typeKey MemberReference nodeTypeKey = MethodDeclaration /**
     * @return the relative path.
     */ Modifier public ReferenceType String getRelPathKey ReturnStatement MemberReference relPathKey MethodDeclaration /**
     * @param relPathKey
     *        the relative path key to set
     */ Modifier public setRelPathKey FormalParameter ReferenceType String relPathKey StatementExpression Assignment This MemberReference relPathKey MemberReference relPathKey = ReferenceType Command",1
518,518,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.observation Import org.apache.jackrabbit.webdav.DavServletResponse Import java.io.IOException InterfaceDeclaration Modifier public /**
 * <code>ObservationDavServletResponse</code> provides extensions to the
 * {@link DavServletResponse} interface used for dealing with observation.
 */ ObservationDavServletResponse MethodDeclaration /**
     * Send the response to a successful SUBSCRIBE request.
     *
     * @param subsription that needs to be represented in the response body.
     * @throws IOException
     */ Modifier public sendSubscriptionResponse FormalParameter ReferenceType Subscription subsription IOException MethodDeclaration /**
     * Send the response to a sucessful POLL request.
     *
     * @param eventdiscovery {@link EventDiscovery} object to be returned in
     * the response body.
     * @throws IOException
     */ Modifier public sendPollResponse FormalParameter ReferenceType EventDiscovery eventdiscovery IOException ReferenceType DavServletResponse",0
337,337,"CompilationUnit PackageDeclaration org.apache.jackrabbit.decorator Import javax.jcr.ItemVisitor Import javax.jcr.Property Import javax.jcr.RepositoryException Import javax.jcr.Node Import javax.jcr.Session ClassDeclaration Modifier public /**
 */ ItemVisitorDecorator FieldDeclaration Modifier final protected ReferenceType ItemVisitor VariableDeclarator visitor ConstructorDeclaration Modifier public ItemVisitorDecorator FormalParameter ReferenceType DecoratorFactory factory FormalParameter ReferenceType Session session FormalParameter ReferenceType ItemVisitor visitor StatementExpression SuperConstructorInvocation MemberReference factory MemberReference session StatementExpression Assignment This MemberReference visitor MemberReference visitor = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public visit FormalParameter ReferenceType Property property RepositoryException StatementExpression MethodInvocation visitor MethodInvocation factory MemberReference session MemberReference property getPropertyDecorator visit MethodDeclaration /**
     * @inheritDoc
     */ Modifier public visit FormalParameter ReferenceType Node node RepositoryException StatementExpression MethodInvocation visitor MethodInvocation factory MemberReference session MemberReference node getNodeDecorator visit ReferenceType AbstractDecorator ReferenceType ItemVisitor",0
654,654,,1
730,730,,0
483,483,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import java.util.Iterator Import javax.jcr.Node Import javax.jcr.RepositoryException Import org.apache.commons.chain.Context Import org.apache.jackrabbit.command.CommandHelper Import org.apache.jackrabbit.command.CommandException ClassDeclaration Modifier public /**
 * List items
 * <p>
 * <ul>
 * <li>name</li>
 * <li>type</li>
 * <li>isNode</li>
 * <li>isNew</li>
 * <li>isModified</li>
 * </ul>
 * </p>
 */ LsItems FieldDeclaration /** name pattern key */ Modifier private ReferenceType String VariableDeclarator patternKey Literal ""pattern"" MethodDeclaration /**
     * @return the name pattern
     */ Modifier public ReferenceType String getPatternKey ReturnStatement MemberReference patternKey MethodDeclaration /**
     * @param pattern
     *        the pattern
     */ Modifier public setPatternKey FormalParameter ReferenceType String pattern StatementExpression Assignment This MemberReference patternKey MemberReference pattern = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected ReferenceType Iterator getItems FormalParameter ReferenceType Context ctx CommandException RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator pattern Cast ReferenceType String MethodInvocation ctx This MemberReference patternKey get LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation CommandHelper MemberReference ctx getCurrentNode ReturnStatement MethodInvocation CommandHelper MemberReference ctx MemberReference n MemberReference pattern getItems ReferenceType AbstractLsItems",0
406,406,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import org.apache.jackrabbit.core.NodeImpl Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider Import org.apache.jackrabbit.name.QName Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory InterfaceDeclaration Modifier public /**
 * This interface defines the version manager. It gives access to the underlying
 * persistence layer of the versioning.
 */ VersionManager MethodDeclaration /**
     * returns the virtual item state provider that exposes the internal versions
     * as items.
     *
     * @return
     */ ReferenceType VirtualItemStateProvider getVirtualItemStateProvider MethodDeclaration /**
     * Creates a new version history. This action is needed either when creating
     * a new 'mix:versionable' node or when adding the 'mix:versionable' mixin
     * to a node.
     *
     * @param node
     * @return
     * @throws RepositoryException
     * @see #getVersionHistory(Session, NodeState) 
     */ ReferenceType VersionHistory createVersionHistory FormalParameter ReferenceType Session session FormalParameter ReferenceType NodeState node RepositoryException MethodDeclaration /**
     * Returns the version history of the specified <code>node</code> or
     * <code>null</code> if the given node doesn't (yet) have an associated
     * version history.
     *
     * @param session
     * @param node node whose version history should be returned
     * @return the version history of the specified <code>node</code> or
     *         <code>null</code> if the given node doesn't (yet) have an
     *        associated version history.
     * @throws RepositoryException if an error occurs
     * @see #createVersionHistory(Session, NodeState)
     */ ReferenceType VersionHistory getVersionHistory FormalParameter ReferenceType Session session FormalParameter ReferenceType NodeState node RepositoryException MethodDeclaration /**
     * invokes the checkin() on the persistent version manager and remaps the
     * newly created version objects.
     *
     * @param node
     * @return
     * @throws RepositoryException
     */ ReferenceType Version checkin FormalParameter ReferenceType NodeImpl node RepositoryException MethodDeclaration /**
     * Removes the specified version from the given version history.
     * @param history
     * @param versionName
     * @throws RepositoryException
     */ removeVersion FormalParameter ReferenceType VersionHistory history FormalParameter ReferenceType QName versionName RepositoryException MethodDeclaration /**
     * Sets the version <code>label</code> to the given <code>version</code>.
     * If the label is already assigned to another version, a VersionException is
     * thrown unless <code>move</code> is <code>true</code>. If <code>version</code>
     * is <code>null</code>, the label is removed from the respective version.
     * In either case, the version the label was previously assigned is returned,
     * or <code>null</code> of the label was not moved.
     *
     * @param history
     * @param version
     * @param label
     * @param move
     * @return
     * @throws RepositoryException
     */ ReferenceType Version setVersionLabel FormalParameter ReferenceType VersionHistory history FormalParameter ReferenceType QName version FormalParameter ReferenceType QName label FormalParameter BasicType boolean move RepositoryException MethodDeclaration /**
     * Checks if the version history with the given id exists
     *
     * @param id
     * @return
     */ BasicType boolean hasVersionHistory FormalParameter ReferenceType String id MethodDeclaration /**
     * Returns the version history with the given id
     *
     * @param id
     * @return
     * @throws RepositoryException
     */ ReferenceType InternalVersionHistory getVersionHistory FormalParameter ReferenceType String id RepositoryException MethodDeclaration /**
     * Checks if the version with the given id exists
     *
     * @param id
     * @return
     */ BasicType boolean hasVersion FormalParameter ReferenceType String id MethodDeclaration /**
     * Returns the version with the given id
     *
     * @param id
     * @return
     * @throws RepositoryException
     */ ReferenceType InternalVersion getVersion FormalParameter ReferenceType String id RepositoryException MethodDeclaration /**
     * Close this version manager. After having closed a persistence
     * manager, further operations on this object are treated as illegal
     * and throw
     *
     * @throws Exception if an error occurs
     */ close Exception",0
862,862,,0
81,81,"CompilationUnit PackageDeclaration org.apache.jackrabbit.xml Import java.util.List Import java.util.Stack Import javax.jcr.NamespaceException Import javax.jcr.Node Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.ValueFactory Import org.xml.sax.Attributes Import org.xml.sax.ContentHandler Import org.xml.sax.Locator Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * TODO
 */ SystemViewImportContentHandler FieldDeclaration Modifier private ReferenceType Session VariableDeclarator session FieldDeclaration Modifier private ReferenceType ValueFactory VariableDeclarator factory FieldDeclaration Modifier private ReferenceType Stack VariableDeclarator stack FieldDeclaration Modifier private ReferenceType Node VariableDeclarator node FieldDeclaration Modifier private ReferenceType StringBuffer VariableDeclarator text FieldDeclaration Modifier private BasicType int VariableDeclarator type FieldDeclaration Modifier private ReferenceType List VariableDeclarator values ConstructorDeclaration Modifier public SystemViewImportContentHandler FormalParameter ReferenceType Node parent RepositoryException StatementExpression Assignment This MemberReference session MethodInvocation parent getSession = StatementExpression Assignment This MemberReference factory MethodInvocation session getValueFactory = StatementExpression Assignment This MemberReference stack ClassCreator ReferenceType Stack = StatementExpression Assignment This MemberReference node MemberReference parent = StatementExpression Assignment This MemberReference text ClassCreator ReferenceType StringBuffer = MethodDeclaration Modifier private ReferenceType String getName FormalParameter ReferenceType String uri FormalParameter ReferenceType String local FormalParameter ReferenceType String qname RepositoryException IfStatement BinaryOperation || BinaryOperation == MemberReference uri Literal null BinaryOperation == MethodInvocation uri length Literal 0 BlockStatement ReturnStatement MemberReference local End TryStatement ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation session MemberReference uri getNamespacePrefix Literal "":"" MemberReference local CatchClause CatchClauseParameter NamespaceException ex LocalVariableDeclaration BasicType int VariableDeclarator i MethodInvocation qname Literal ':' indexOf LocalVariableDeclaration ReferenceType String VariableDeclarator prefix TernaryExpression BinaryOperation != MemberReference i Literal - 1 MethodInvocation qname Literal 0 MemberReference i substring Literal ""ext"" TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator base MemberReference prefix ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator no Literal 1 Literal true Assignment MemberReference prefix BinaryOperation + MemberReference base MemberReference ++ no = BlockStatement StatementExpression MethodInvocation session MemberReference prefix getNamespaceURI End CatchClause CatchClauseParameter NamespaceException ex StatementExpression MethodInvocation session MethodInvocation getNamespaceRegistry MethodInvocation MemberReference prefix MemberReference uri registerNamespace getWorkspace ReturnStatement MethodInvocation MemberReference uri MemberReference local MemberReference qname getName MethodDeclaration Modifier public startElement FormalParameter ReferenceType String uri FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName FormalParameter ReferenceType Attributes atts SAXException TryStatement StatementExpression MethodInvocation importText StatementExpression MethodInvocation stack MemberReference node push StatementExpression Assignment MemberReference node MethodInvocation node MethodInvocation MemberReference uri MemberReference localName MemberReference qName getName addNode = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation atts getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation MethodInvocation atts MemberReference i getURI MethodInvocation atts MemberReference i getLocalName MethodInvocation atts MemberReference i getQName getName StatementExpression MethodInvocation node MemberReference name MethodInvocation atts MemberReference i getValue setProperty End CatchClause CatchClauseParameter RepositoryException ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex MethodDeclaration /**
     * TODO
     * {@inheritDoc}
     */ Modifier public endElement FormalParameter ReferenceType String uri FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName SAXException TryStatement IfStatement BinaryOperation && MethodInvocation uri Literal ""SV"" equals MethodInvocation localName Literal ""value"" equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation text toString StatementExpression MethodInvocation values MethodInvocation factory MemberReference value MemberReference type createValue add StatementExpression MethodInvocation text Literal 0 setLength End StatementExpression MethodInvocation importText StatementExpression Assignment MemberReference node Cast ReferenceType Node MethodInvocation stack pop = CatchClause CatchClauseParameter RepositoryException ex ThrowStatement ClassCreator ReferenceType SAXException MemberReference ex MethodDeclaration /**
     * Appends the received characters to the current text buffer.
     * The accumulated contents of the text buffer is written to an
     * jcr:xmltext node when an element boundary is reached.
     * {@inheritDoc}
     */ Modifier public characters FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length SAXException StatementExpression MethodInvocation text MemberReference ch MemberReference start MemberReference length append MethodDeclaration /**
     * Imports the accumulated XML character data as an jcr:xmltext node.
     * The character data is stored as a jcr:xmlcharacters string property
     * of the created node. The character data buffer is then cleared.
     * <p>
     * This method does nothing if the character data buffer is empty, and
     * can therefore be invoked whenever an element boundary is reached to
     * handle the importing of any accumulated character data.
     *
     * @throws RepositoryException
     */ Modifier private importText RepositoryException IfStatement BinaryOperation > MethodInvocation text length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator xmltext MethodInvocation node Literal ""jcr:xmltext"" addNode StatementExpression MethodInvocation xmltext Literal ""jcr:xmlcharacters"" MethodInvocation text toString setProperty StatementExpression MethodInvocation text Literal 0 setLength End MethodDeclaration /** Ignored. */ Modifier public setDocumentLocator FormalParameter ReferenceType Locator locator MethodDeclaration /** Ignored. */ Modifier public startDocument MethodDeclaration /** Ignored. */ Modifier public endDocument MethodDeclaration /** Ignored. */ Modifier public startPrefixMapping FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri MethodDeclaration /** Ignored. */ Modifier public endPrefixMapping FormalParameter ReferenceType String prefix MethodDeclaration /** Ignored. */ Modifier public ignorableWhitespace FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length MethodDeclaration /** Ignored. */ Modifier public processingInstruction FormalParameter ReferenceType String target FormalParameter ReferenceType String data MethodDeclaration /** Ignored. */ Modifier public skippedEntity FormalParameter ReferenceType String name ReferenceType ContentHandler",0
255,255,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.nodetype.PropDefId Import org.apache.jackrabbit.core.value.BLOBFileValue Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.name.QName Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import java.io.IOException Import java.io.InputStream Import java.io.ObjectInputStream Import java.io.ObjectOutputStream ClassDeclaration Modifier public /**
 * <code>PropertyState</code> represents the state of a <code>Property</code>.
 */ PropertyState FieldDeclaration /**
     * Serialization UID of this class.
     */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal 4569719974514326906L FieldDeclaration Modifier protected ReferenceType QName VariableDeclarator name FieldDeclaration Modifier protected ReferenceType InternalValue VariableDeclarator values FieldDeclaration Modifier protected BasicType int VariableDeclarator type FieldDeclaration Modifier protected BasicType boolean VariableDeclarator multiValued FieldDeclaration Modifier protected ReferenceType PropDefId VariableDeclarator defId ConstructorDeclaration Modifier public /**
     * Create a new <code>PropertyState</code>
     *
     * @param overlayedState the backing property state being overlayed
     * @param initialStatus  the initial status of the property state object
     * @param isTransient    flag indicating whether this state is transient or not
     */ PropertyState FormalParameter ReferenceType PropertyState overlayedState FormalParameter BasicType int initialStatus FormalParameter BasicType boolean isTransient StatementExpression SuperConstructorInvocation MemberReference initialStatus MemberReference isTransient StatementExpression MethodInvocation MemberReference overlayedState connect StatementExpression MethodInvocation pull ConstructorDeclaration Modifier public /**
     * Create a new <code>PropertyState</code>
     *
     * @param name          name of the property
     * @param parentUUID    the uuid of the parent node
     * @param initialStatus the initial status of the property state object
     * @param isTransient   flag indicating whether this state is transient or not
     */ PropertyState FormalParameter ReferenceType QName name FormalParameter ReferenceType String parentUUID FormalParameter BasicType int initialStatus FormalParameter BasicType boolean isTransient StatementExpression SuperConstructorInvocation MemberReference parentUUID ClassCreator ReferenceType PropertyId MemberReference parentUUID MemberReference name MemberReference initialStatus MemberReference isTransient StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment MemberReference type MemberReference PropertyType UNDEFINED = StatementExpression Assignment MemberReference values MemberReference InternalValue EMPTY_ARRAY = StatementExpression Assignment MemberReference multiValued Literal false = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected synchronized copy FormalParameter ReferenceType ItemState state SynchronizedStatement MemberReference state StatementExpression SuperMethodInvocation MemberReference state copy LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator propState Cast ReferenceType PropertyState MemberReference state StatementExpression Assignment MemberReference name MethodInvocation propState getName = StatementExpression Assignment MemberReference type MethodInvocation propState getType = StatementExpression Assignment MemberReference defId MethodInvocation propState getDefinitionId = StatementExpression Assignment MemberReference values MethodInvocation propState getValues = StatementExpression Assignment MemberReference multiValued MethodInvocation propState isMultiValued = MethodDeclaration /**
     * Determines if this item state represents a node.
     *
     * @return always false
     * @see ItemState#isNode
     */ Modifier public BasicType boolean isNode ReturnStatement Literal false MethodDeclaration /**
     * Returns the name of this property.
     *
     * @return the name of this property.
     */ Modifier public ReferenceType QName getName ReturnStatement MemberReference name MethodDeclaration /**
     * Sets the type of this property.
     *
     * @param type the type to be set
     * @see PropertyType
     */ Modifier public setType FormalParameter BasicType int type StatementExpression Assignment This MemberReference type MemberReference type = MethodDeclaration /**
     * Sets the flag indicating whether this property is multi-valued.
     *
     * @param multiValued flag indicating whether this property is multi-valued
     */ Modifier public setMultiValued FormalParameter BasicType boolean multiValued StatementExpression Assignment This MemberReference multiValued MemberReference multiValued = MethodDeclaration /**
     * Returns the type of this property.
     *
     * @return the type of this property.
     * @see PropertyType
     */ Modifier public BasicType int getType ReturnStatement MemberReference type MethodDeclaration /**
     * Returns true if this property is multi-valued, otherwise false.
     *
     * @return true if this property is multi-valued, otherwise false.
     */ Modifier public BasicType boolean isMultiValued ReturnStatement MemberReference multiValued MethodDeclaration /**
     * Returns the id of the definition applicable to this property state.
     *
     * @return the id of the definition
     */ Modifier public ReferenceType PropDefId getDefinitionId ReturnStatement MemberReference defId MethodDeclaration /**
     * Sets the id of the definition applicable to this property state.
     *
     * @param defId the id of the definition
     */ Modifier public setDefinitionId FormalParameter ReferenceType PropDefId defId StatementExpression Assignment This MemberReference defId MemberReference defId = MethodDeclaration /**
     * Sets the value(s) of this property.
     *
     * @param values the new values
     */ Modifier public setValues FormalParameter ReferenceType InternalValue values StatementExpression Assignment This MemberReference values MemberReference values = MethodDeclaration /**
     * Returns the value(s) of this property.
     *
     * @return the value(s) of this property.
     */ Modifier public ReferenceType InternalValue getValues ReturnStatement MemberReference values MethodDeclaration Modifier private writeObject FormalParameter ReferenceType ObjectOutputStream out IOException StatementExpression MethodInvocation out MethodInvocation name toString writeUTF StatementExpression MethodInvocation out MemberReference type writeInt StatementExpression MethodInvocation out MemberReference multiValued writeBoolean IfStatement BinaryOperation == MemberReference values Literal null BlockStatement StatementExpression MethodInvocation out Literal - 1 writeShort BlockStatement StatementExpression MethodInvocation out MemberReference values length writeShort ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator val MemberReference ArraySelector MemberReference i values TryStatement IfStatement BinaryOperation == MemberReference type MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration ReferenceType BLOBFileValue VariableDeclarator blob Cast ReferenceType BLOBFileValue MethodInvocation val internalValue LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation blob getStream StatementExpression MethodInvocation out MethodInvocation blob getLength writeLong LocalVariableDeclaration BasicType byte VariableDeclarator buf ArrayCreator BasicType byte Literal 0x2000 TryStatement LocalVariableDeclaration BasicType int VariableDeclarator read WhileStatement BinaryOperation > Assignment MemberReference read MethodInvocation in MemberReference buf read = Literal 0 BlockStatement StatementExpression MethodInvocation out MemberReference buf Literal 0 MemberReference read write End StatementExpression MethodInvocation in close BlockStatement StatementExpression MethodInvocation out MethodInvocation val toString writeUTF End CatchClause CatchClauseParameter IllegalStateException ise ThrowStatement ClassCreator ReferenceType IOException MethodInvocation ise getMessage CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType IOException MethodInvocation re getMessage End End MethodDeclaration Modifier private readObject FormalParameter ReferenceType ObjectInputStream in IOException StatementExpression Assignment MemberReference name MethodInvocation QName MethodInvocation in readUTF valueOf = StatementExpression Assignment MemberReference type MethodInvocation in readInt = StatementExpression Assignment MemberReference multiValued MethodInvocation in readBoolean = LocalVariableDeclaration BasicType short VariableDeclarator count MethodInvocation in readShort IfStatement BinaryOperation < MemberReference count Literal 0 BlockStatement StatementExpression Assignment MemberReference values Literal null = BlockStatement StatementExpression Assignment MemberReference values ArrayCreator ReferenceType InternalValue MemberReference count = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference type MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration Modifier final BasicType long VariableDeclarator length MethodInvocation in readLong LocalVariableDeclaration Modifier final ReferenceType InputStream VariableDeclarator stream MemberReference in StatementExpression Assignment MemberReference ArraySelector MemberReference i values MethodInvocation InternalValue ClassCreator ReferenceType InputStream FieldDeclaration BasicType long VariableDeclarator consumed Literal 0 MethodDeclaration Modifier public BasicType int read IOException IfStatement BinaryOperation >= MemberReference consumed MemberReference length BlockStatement ReturnStatement Literal - 1 End LocalVariableDeclaration BasicType int VariableDeclarator b MethodInvocation stream read StatementExpression MemberReference ++ consumed ReturnStatement MemberReference b MethodDeclaration Modifier public BasicType int read FormalParameter BasicType byte b FormalParameter BasicType int off FormalParameter BasicType int len IOException IfStatement BinaryOperation >= MemberReference consumed MemberReference length BlockStatement ReturnStatement Literal - 1 End IfStatement BinaryOperation > BinaryOperation + MemberReference consumed MemberReference len MemberReference length BlockStatement StatementExpression Assignment MemberReference len Cast BasicType int BinaryOperation - MemberReference length MemberReference consumed = End LocalVariableDeclaration BasicType int VariableDeclarator read SuperMethodInvocation MemberReference b MemberReference off MemberReference len read StatementExpression Assignment MemberReference consumed MemberReference read += ReturnStatement MemberReference read MethodDeclaration Modifier public BasicType long skip FormalParameter BasicType long n IOException IfStatement BinaryOperation && BinaryOperation >= MemberReference consumed MemberReference length BinaryOperation > MemberReference n Literal 0 BlockStatement ReturnStatement Literal - 1 End IfStatement BinaryOperation > BinaryOperation + MemberReference consumed MemberReference n MemberReference length BlockStatement StatementExpression Assignment MemberReference n BinaryOperation - MemberReference length MemberReference consumed = End LocalVariableDeclaration BasicType long VariableDeclarator skipped SuperMethodInvocation MemberReference n skip StatementExpression Assignment MemberReference consumed MemberReference skipped += ReturnStatement MemberReference skipped MethodDeclaration Modifier public close create = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i values MethodInvocation InternalValue MethodInvocation in readUTF MemberReference type valueOf = End End End ReferenceType ItemState",1
870,870,,0
127,127,"CompilationUnit PackageDeclaration org.apache.jackrabbit.net Import java.io.UnsupportedEncodingException Import java.net.URLDecoder Import java.net.URLEncoder Import javax.jcr.Session ClassDeclaration /**
 * The <code>FileParts</code> class provides composing and parsing functionality
 * to create and analize JCR Repository URL file components.
 * <p>
 * The file component of a JCR Repository URL has the format
 * <pre>
 *      file = [ ""jcr:"" [ ""//"" authority ] ] ""/"" repository ""/"" workspace jarpath .
 *      authority = // URL authority specification
 *      repository = // URL encoded repository name
 *      workspace = // URL encoded workspace name
 *      jarpath = path [ ""!/"" [ entry ] ] .
 *      path = // The absolute item path (with a leading slash)
 *      entry = // The (relative) path to the entry in an archive
 * </pre>
 * <p>
 * To facitility use of this class with JCRJar URLs, the
 * {@link #FileParts(String)} supports file specifications which contains
 * the JCR Repository URL scheme name and an optional URL authority
 * specification. This prefix in front of the real file specification is
 * silently discarded. It is not included in the string representation returned
 * by the {@link #toString()} method.
 * <p>
 * To make sure parsing is not complicated by implementation and use case
 * specific repository and workspace names, those names are URL encoded using
 * the <code>URLEncoder</code> class and <i>UTF-8</i> character encoding.
 *
 * @author Felix Meschberger
 * @version $Rev:$, $Date:$
 */ FileParts FieldDeclaration /** The decoded name of the repository */ Modifier private final ReferenceType String VariableDeclarator repository FieldDeclaration /** The decoded name of the workspace */ Modifier private final ReferenceType String VariableDeclarator workspace FieldDeclaration /** The repository item path part of the URL path */ Modifier private final ReferenceType String VariableDeclarator path FieldDeclaration /**
     * The path to the entry in the archive, if the file spec contains the
     * jar entry separator <i>!/</i>. If no entry path is specified, this is
     * <code>null</code>. If no path is specified after the <i>!/</i> this
     * is an empty string.
     */ Modifier private final ReferenceType String VariableDeclarator entryPath ConstructorDeclaration /**
     * Creates a new instance for the root node of the given session. The
     * repository name is currently set to the fixed string ""_"" as there has not
     * been established a repository naming convention yet. The name of the
     * workspace is set to the name of the workspace to which the session is
     * attached. The path is set to <code>""/""</code> to indicate the root node
     * if the <code>path</code> argument is <code>null</code>.
     *
     * @param session The session for which to create this instance.
     * @param path The absolute item path to initialize this instance with. If
     *      <code>null</code> the item path is set to the <code>/</code>.
     * @param entryPath The path to the archive entry to set on this instance.
     *      This is expected to be a relative path without a leading slash and
     *      may be <code>null</code>.
     *
     * @throws NullPointerException if <code>session</code> is
     *      <code>null</code>.
     */ FileParts FormalParameter ReferenceType Session session FormalParameter ReferenceType String path FormalParameter ReferenceType String entryPath StatementExpression Assignment This MemberReference repository Literal ""_"" = StatementExpression Assignment This MemberReference workspace MethodInvocation session MethodInvocation getName getWorkspace = StatementExpression Assignment This MemberReference path TernaryExpression BinaryOperation == MemberReference path Literal null Literal ""/"" MemberReference path = StatementExpression Assignment This MemberReference entryPath MemberReference entryPath = ConstructorDeclaration /**
     * Creates an instance of this class setting the repository, workspace and
     * path fields from the given <code>file</code> specification.
     *
     * @param file The specification providing the repository, workspace and
     *      path values.
     *
     * @throws NullPointerException if <code>file</code> is
     *      <code>null</code>.
     * @throws IllegalArgumentException if <code>file</code> is not the
     *      correct format.
     */ FileParts FormalParameter ReferenceType String file IfStatement MethodInvocation ! file Literal ""/"" startsWith BlockStatement IfStatement MethodInvocation file BinaryOperation + MemberReference URLFactory REPOSITORY_SCHEME Literal "":"" startsWith BlockStatement StatementExpression Assignment MemberReference file MethodInvocation MemberReference file strip = BlockStatement ThrowStatement MethodInvocation Literal ""Not an absolute file"" MemberReference file failure End End LocalVariableDeclaration BasicType int VariableDeclarator slash0 Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator slash1 MethodInvocation file Literal '/' MemberReference slash0 indexOf IfStatement BinaryOperation || BinaryOperation < MemberReference slash1 Literal 0 BinaryOperation == BinaryOperation - MemberReference slash1 MemberReference slash0 Literal 0 BlockStatement ThrowStatement MethodInvocation Literal ""Missing repository name"" MemberReference file failure End StatementExpression Assignment This MemberReference repository MethodInvocation MethodInvocation file MemberReference slash0 MemberReference slash1 substring decode = StatementExpression Assignment MemberReference slash0 BinaryOperation + MemberReference slash1 Literal 1 = StatementExpression Assignment MemberReference slash1 MethodInvocation file Literal '/' MemberReference slash0 indexOf = IfStatement BinaryOperation || BinaryOperation < MemberReference slash1 Literal 0 BinaryOperation == BinaryOperation - MemberReference slash1 MemberReference slash0 Literal 0 BlockStatement ThrowStatement MethodInvocation Literal ""Missing workspace name"" MemberReference file failure End StatementExpression Assignment This MemberReference workspace MethodInvocation MethodInvocation file MemberReference slash0 MemberReference slash1 substring decode = LocalVariableDeclaration ReferenceType String VariableDeclarator fullPath MethodInvocation file MemberReference slash1 substring LocalVariableDeclaration BasicType int VariableDeclarator bangSlash MethodInvocation JCRJarURLHandler MemberReference fullPath indexOfBangSlash IfStatement BinaryOperation < MemberReference bangSlash Literal 0 BlockStatement StatementExpression Assignment This MemberReference path MemberReference fullPath = StatementExpression Assignment This MemberReference entryPath Literal null = BlockStatement StatementExpression Assignment This MemberReference path MethodInvocation fullPath Literal 0 BinaryOperation - MemberReference bangSlash Literal 1 substring = StatementExpression Assignment This MemberReference entryPath MethodInvocation fullPath BinaryOperation + MemberReference bangSlash Literal 1 substring = End MethodDeclaration /**
     * Returns the plain name of the repository.
     */ ReferenceType String getRepository ReturnStatement MemberReference repository MethodDeclaration /**
     * Returns the plain name of the workspace.
     */ ReferenceType String getWorkspace ReturnStatement MemberReference workspace MethodDeclaration /**
     * Returns the absolute repository path of the item.
     */ ReferenceType String getPath ReturnStatement MemberReference path MethodDeclaration /**
     * Returns the entry path of <code>null</code> if no entry exists.
     */ ReferenceType String getEntryPath ReturnStatement MemberReference entryPath MethodDeclaration /**
     * Returns a hash code for this instance composed of the hash codes of the
     * repository, workspace and path names.
     */ Modifier public BasicType int hashCode ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation hashCode getRepository BinaryOperation * Literal 17 MethodInvocation MethodInvocation hashCode getWorkspace BinaryOperation * Literal 33 MethodInvocation MethodInvocation hashCode getPath MethodDeclaration /**
     * Returns <code>true</code> if <code>obj</code> is the same as this or
     * if other is a <code>FileParts</code> with the same path, workspace and
     * repository. Otherwise <code>false</code> is returned.
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj This BlockStatement ReturnStatement Literal true IfStatement BinaryOperation instanceof MemberReference obj ReferenceType FileParts BlockStatement LocalVariableDeclaration ReferenceType FileParts VariableDeclarator other Cast ReferenceType FileParts MemberReference obj IfStatement BinaryOperation == MethodInvocation getEntryPath Literal null BlockStatement IfStatement BinaryOperation != MethodInvocation other getEntryPath Literal null BlockStatement ReturnStatement Literal false End End ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation && MethodInvocation MethodInvocation MethodInvocation other getPath equals getPath MethodInvocation MethodInvocation MethodInvocation other getWorkspace equals getWorkspace MethodInvocation MethodInvocation MethodInvocation other getRepository equals getRepository MethodInvocation MethodInvocation MethodInvocation other getEntryPath equals getEntryPath End End ReturnStatement Literal false MethodDeclaration /**
     * Returns the encoded string representation of this instance, which may
     * later be fed to the {@link #FileParts(String)} constructor to recreate
     * an equivalent instance.
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation buf MethodInvocation MethodInvocation MethodInvocation getRepository encode append Literal '/' append StatementExpression MethodInvocation buf MethodInvocation MethodInvocation MethodInvocation getWorkspace encode append Literal '/' append StatementExpression MethodInvocation buf MethodInvocation getPath append IfStatement BinaryOperation != MethodInvocation getEntryPath Literal null BlockStatement StatementExpression MethodInvocation buf MethodInvocation MethodInvocation getEntryPath append Literal ""!/"" append End ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * @throws IllegalArgumentException If there is no path element after the
     *      authority.
     */ Modifier private ReferenceType String strip FormalParameter ReferenceType String file LocalVariableDeclaration BasicType int VariableDeclarator start Literal 4 IfStatement BinaryOperation && BinaryOperation && BinaryOperation >= MethodInvocation file length BinaryOperation + MemberReference start Literal 2 BinaryOperation == MethodInvocation file MemberReference start charAt Literal '/' BinaryOperation == MethodInvocation file BinaryOperation + MemberReference start Literal 1 charAt Literal '/' BlockStatement StatementExpression Assignment MemberReference start MethodInvocation file Literal '/' BinaryOperation + MemberReference start Literal 2 indexOf = IfStatement BinaryOperation < MemberReference start Literal 0 BlockStatement ThrowStatement MethodInvocation Literal ""Missing path after authority"" MemberReference file failure End End ReturnStatement MethodInvocation file MemberReference start substring MethodDeclaration /**
     * Encodes the given string value using the <code>URLEncoder</code> and
     * <i>UTF-8</i> character encoding.
     *
     * @param value The string value to encode.
     *
     * @return The encoded string value.
     *
     * @throws InternalError If <code>UTF-8</code> character set encoding is
     *      not supported. As <code>UTF-8</code> is required to be implemented
     *      on any Java platform, this error is not expected.
     */ Modifier private ReferenceType String encode FormalParameter ReferenceType String value TryStatement ReturnStatement MethodInvocation URLEncoder MemberReference value Literal ""UTF-8"" encode CatchClause CatchClauseParameter UnsupportedEncodingException e ThrowStatement ClassCreator ReferenceType InternalError Literal ""UTF-8 not supported"" MethodDeclaration /**
     * Decodes the given string value using the <code>URLDecoder</code> and
     * <i>UTF-8</i> character encoding.
     *
     * @param value The string value to decode.
     *
     * @return The decoded string value.
     *
     * @throws InternalError If <code>UTF-8</code> character set encoding is
     *      not supported. As <code>UTF-8</code> is required to be implemented
     *      on any Java platform, this error is not expected.
     */ Modifier private ReferenceType String decode FormalParameter ReferenceType String value TryStatement ReturnStatement MethodInvocation URLDecoder MemberReference value Literal ""UTF-8"" decode CatchClause CatchClauseParameter UnsupportedEncodingException e ThrowStatement ClassCreator ReferenceType InternalError Literal ""UTF-8 not supported"" MethodDeclaration /**
     * Returns a <code>IllegalArgumentException</code> formatted with the
     * given reason and causing file specification.
     *
     * @param reason The failure reason.
     * @param file The original file specification leading to failure.
     *
     * @return A <code>IllegalArgumentException</code> with the given
     *      reason and causing file specification.
     */ Modifier private ReferenceType IllegalArgumentException failure FormalParameter ReferenceType String reason FormalParameter ReferenceType String file ReturnStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + BinaryOperation + MemberReference reason Literal "": '"" MemberReference file Literal ""'""",0
134,134,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.xml Import java.io.ByteArrayInputStream Import javax.jcr.Workspace ClassDeclaration Modifier public /**
 * SAX content handler for importing XML data to a JCR {@link Workspace Workspace}.
 * This utility class can be used to implement the
 * {@link Workspace#getImportContentHandler(String, int) Workspace.getImportContentHandler(String, int)}
 * method in terms of the
 * {@link Workspace#importXML(String, java.io.InputStream, int) Workspace.importXML(String, InputStream, int)}
 * method.
 *
 * @author Jukka Zitting
 */ WorkspaceImportContentHandler FieldDeclaration /** The repository workspace. */ Modifier private ReferenceType Workspace VariableDeclarator workspace FieldDeclaration /** The import content path. */ Modifier private ReferenceType String VariableDeclarator path FieldDeclaration /** The UUID behaviour. */ Modifier private BasicType int VariableDeclarator uuidBehaviour ConstructorDeclaration Modifier public /**
     * Creates a SAX content handler for importing XML data to the given
     * workspace and path using the given UUID behaviour.
     *
     * @param workspace repository workspace
     * @param path import content path
     * @param uuidBehaviour UUID behaviour
     */ WorkspaceImportContentHandler FormalParameter ReferenceType Workspace workspace FormalParameter ReferenceType String path FormalParameter BasicType int uuidBehaviour StatementExpression Assignment This MemberReference workspace MemberReference workspace = StatementExpression Assignment This MemberReference path MemberReference path = StatementExpression Assignment This MemberReference uuidBehaviour MemberReference uuidBehaviour = MethodDeclaration /**
     * Imports the serialized XML stream using the standard
     * {@link Workspace#importXML(String, java.io.InputStream, int) Workspace.importXML(String, InputStream, int)}
     * method.
     *
     * {@inheritDoc}
     */ Modifier protected importXML FormalParameter BasicType byte xml Exception StatementExpression MethodInvocation workspace MemberReference path ClassCreator ReferenceType ByteArrayInputStream MemberReference xml MemberReference uuidBehaviour importXML ReferenceType ImportContentHandler",0
37,37,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.orm Import java.io.Serializable Import java.util.ArrayList Import java.util.Collection Import java.util.HashSet Import java.util.Iterator Import java.util.List Import java.util.Set Import org.apache.jackrabbit.core.ItemId Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.core.nodetype.NodeDefId Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.NodeState.ChildNodeEntry Import org.apache.log4j.Logger ClassDeclaration Modifier public abstract /**
 * <p>This class represents an copy of Jackrabbit's node state, in an ORM
 * compatible format.</p>
 */ ORMNodeState FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ORMNodeState getLogger FieldDeclaration Modifier protected ReferenceType String VariableDeclarator uuid FieldDeclaration Modifier protected ReferenceType String VariableDeclarator parentUUID FieldDeclaration Modifier protected ReferenceType String VariableDeclarator nodeTypeName FieldDeclaration Modifier protected ReferenceType String VariableDeclarator definitionId ConstructorDeclaration Modifier public ORMNodeState ConstructorDeclaration Modifier public ORMNodeState FormalParameter ReferenceType ItemId id StatementExpression Assignment MemberReference uuid MethodInvocation id toString = ConstructorDeclaration Modifier public ORMNodeState FormalParameter ReferenceType NodeState state StatementExpression MethodInvocation MemberReference state fromPersistentNodeState MethodDeclaration Modifier public fromPersistentNodeState FormalParameter ReferenceType NodeState state StatementExpression MethodInvocation MethodInvocation clear getChildNodeEntries StatementExpression MethodInvocation MethodInvocation clear getPropertyEntries StatementExpression MethodInvocation MethodInvocation clear getMixinTypeNames StatementExpression MethodInvocation MethodInvocation clear getParentUUIDs StatementExpression Assignment MemberReference uuid MethodInvocation state getUUID = StatementExpression Assignment MemberReference parentUUID MethodInvocation state getParentUUID = IfStatement BinaryOperation != MethodInvocation state getNodeTypeName Literal null BlockStatement StatementExpression Assignment MemberReference nodeTypeName MethodInvocation state MethodInvocation toString getNodeTypeName = End IfStatement BinaryOperation != MethodInvocation state getDefinitionId Literal null BlockStatement StatementExpression Assignment MemberReference definitionId MethodInvocation state MethodInvocation toString getDefinitionId = End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator childNodeEntriesIter MethodInvocation state MethodInvocation iterator getChildNodeEntries LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 WhileStatement MethodInvocation childNodeEntriesIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator curChildNodeEntry Cast ReferenceType ChildNodeEntry MethodInvocation childNodeEntriesIter next StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""childNodeEntry "" MethodInvocation curChildNodeEntry getIndex Literal "" name="" MethodInvocation curChildNodeEntry getName Literal "" uuid="" MethodInvocation curChildNodeEntry getUUID debug LocalVariableDeclaration ReferenceType ORMChildNodeEntry VariableDeclarator childNode ClassCreator ReferenceType ORMChildNodeEntry This MemberReference curChildNodeEntry MemberReference uuid MemberReference i StatementExpression MethodInvocation MethodInvocation MemberReference childNode add getChildNodeEntries StatementExpression MemberReference ++ i End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator propertyNameIter MethodInvocation state MethodInvocation iterator getPropertyNames WhileStatement MethodInvocation propertyNameIter hasNext BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator curPropertyName Cast ReferenceType QName MethodInvocation propertyNameIter next StatementExpression MethodInvocation log BinaryOperation + Literal ""propertyEntry "" MemberReference curPropertyName debug LocalVariableDeclaration ReferenceType ORMPropertyEntry VariableDeclarator propertyEntry ClassCreator ReferenceType ORMPropertyEntry This MemberReference curPropertyName MemberReference uuid StatementExpression MethodInvocation MethodInvocation MemberReference propertyEntry add getPropertyEntries End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator mixinTypeIter MethodInvocation state MethodInvocation iterator getMixinTypeNames WhileStatement MethodInvocation mixinTypeIter hasNext BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator curName Cast ReferenceType QName MethodInvocation mixinTypeIter next StatementExpression MethodInvocation MethodInvocation ClassCreator ReferenceType ORMNodeMixinType This MemberReference uuid MethodInvocation curName toString add getMixinTypeNames End MethodDeclaration Modifier public ReferenceType String getUuid ReturnStatement MemberReference uuid MethodDeclaration Modifier public ReferenceType String getParentUUID ReturnStatement MemberReference parentUUID MethodDeclaration Modifier public ReferenceType String getNodeTypeName ReturnStatement MemberReference nodeTypeName MethodDeclaration Modifier public ReferenceType String getDefinitionId ReturnStatement MemberReference definitionId MethodDeclaration Modifier public abstract ReferenceType Collection getChildNodeEntries MethodDeclaration Modifier public abstract ReferenceType Collection getPropertyEntries MethodDeclaration Modifier public abstract ReferenceType Collection getMixinTypeNames MethodDeclaration Modifier public abstract ReferenceType Collection getParentUUIDs MethodDeclaration Modifier public setUuid FormalParameter ReferenceType String uuid StatementExpression Assignment This MemberReference uuid MemberReference uuid = MethodDeclaration Modifier public setParentUUID FormalParameter ReferenceType String parentUUID StatementExpression Assignment This MemberReference parentUUID MemberReference parentUUID = MethodDeclaration Modifier public setNodeTypeName FormalParameter ReferenceType String nodeTypeName StatementExpression Assignment This MemberReference nodeTypeName MemberReference nodeTypeName = MethodDeclaration Modifier public setDefinitionId FormalParameter ReferenceType String definitionId StatementExpression Assignment This MemberReference definitionId MemberReference definitionId = MethodDeclaration Modifier public abstract setChildNodeEntries FormalParameter ReferenceType Collection childNodeEntries MethodDeclaration Modifier public abstract setPropertyEntries FormalParameter ReferenceType Collection propertyEntries MethodDeclaration Modifier public abstract setMixinTypeNames FormalParameter ReferenceType Collection mixinTypeNames MethodDeclaration Modifier public abstract setParentUUIDs FormalParameter ReferenceType Collection parentUUIDs MethodDeclaration Modifier public toPersistentNodeState FormalParameter ReferenceType NodeState state StatementExpression MethodInvocation state MethodInvocation NodeDefId MethodInvocation getDefinitionId valueOf setDefinitionId StatementExpression MethodInvocation state MethodInvocation QName MethodInvocation getNodeTypeName valueOf setNodeTypeName StatementExpression MethodInvocation state MethodInvocation getParentUUID setParentUUID LocalVariableDeclaration ReferenceType Iterator VariableDeclarator childNodeEntryIter MethodInvocation MethodInvocation iterator getChildNodeEntries WhileStatement MethodInvocation childNodeEntryIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ORMChildNodeEntry VariableDeclarator curChildNodeEntry Cast ReferenceType ORMChildNodeEntry MethodInvocation childNodeEntryIter next StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""  Loaded child node "" MethodInvocation QName MethodInvocation curChildNodeEntry getName valueOf Literal "" uuid="" MethodInvocation curChildNodeEntry getUuid debug StatementExpression MethodInvocation state MethodInvocation QName MethodInvocation curChildNodeEntry getName valueOf MethodInvocation curChildNodeEntry getUuid addChildNodeEntry End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator propertyEntryIter MethodInvocation MethodInvocation iterator getPropertyEntries WhileStatement MethodInvocation propertyEntryIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ORMPropertyEntry VariableDeclarator curPropertyEntry Cast ReferenceType ORMPropertyEntry MethodInvocation propertyEntryIter next StatementExpression MethodInvocation log BinaryOperation + Literal ""  Loaded property "" MethodInvocation QName MethodInvocation curPropertyEntry getName valueOf debug StatementExpression MethodInvocation state MethodInvocation QName MethodInvocation curPropertyEntry getName valueOf addPropertyName End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator mixinTypeNameIter MethodInvocation MethodInvocation iterator getMixinTypeNames LocalVariableDeclaration ReferenceType Set VariableDeclarator mixinTypeQNames ClassCreator ReferenceType HashSet WhileStatement MethodInvocation mixinTypeNameIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ORMNodeMixinType VariableDeclarator curMixinType Cast ReferenceType ORMNodeMixinType MethodInvocation mixinTypeNameIter next StatementExpression MethodInvocation mixinTypeQNames MethodInvocation QName MethodInvocation curMixinType getMixinTypeName valueOf add End StatementExpression MethodInvocation state MemberReference mixinTypeQNames setMixinTypeNames MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType ORMNodeState BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ORMNodeState VariableDeclarator right Cast ReferenceType ORMNodeState MemberReference obj IfStatement MethodInvocation MethodInvocation MethodInvocation right getUuid equals getUuid BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier public BasicType int hashCode ReturnStatement MethodInvocation MethodInvocation hashCode getUuid ReferenceType Serializable",1
666,666,,0
900,900,,0
128,128,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client Import javax.jcr.Item Import javax.jcr.NamespaceRegistry Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.Property Import javax.jcr.PropertyIterator Import javax.jcr.Repository Import javax.jcr.Session Import javax.jcr.Workspace Import javax.jcr.lock.Lock Import javax.jcr.nodetype.ItemDefinition Import javax.jcr.nodetype.NodeDefinition Import javax.jcr.nodetype.NodeType Import javax.jcr.nodetype.NodeTypeIterator Import javax.jcr.nodetype.NodeTypeManager Import javax.jcr.nodetype.PropertyDefinition Import javax.jcr.observation.ObservationManager Import javax.jcr.query.Query Import javax.jcr.query.QueryManager Import javax.jcr.query.QueryResult Import javax.jcr.query.Row Import javax.jcr.query.RowIterator Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory Import javax.jcr.version.VersionIterator Import org.apache.jackrabbit.rmi.remote.RemoteItem Import org.apache.jackrabbit.rmi.remote.RemoteItemDefinition Import org.apache.jackrabbit.rmi.remote.RemoteIterator Import org.apache.jackrabbit.rmi.remote.RemoteLock Import org.apache.jackrabbit.rmi.remote.RemoteNamespaceRegistry Import org.apache.jackrabbit.rmi.remote.RemoteNode Import org.apache.jackrabbit.rmi.remote.RemoteNodeDefinition Import org.apache.jackrabbit.rmi.remote.RemoteNodeType Import org.apache.jackrabbit.rmi.remote.RemoteNodeTypeManager Import org.apache.jackrabbit.rmi.remote.RemoteObservationManager Import org.apache.jackrabbit.rmi.remote.RemoteProperty Import org.apache.jackrabbit.rmi.remote.RemotePropertyDefinition Import org.apache.jackrabbit.rmi.remote.RemoteQuery Import org.apache.jackrabbit.rmi.remote.RemoteQueryManager Import org.apache.jackrabbit.rmi.remote.RemoteQueryResult Import org.apache.jackrabbit.rmi.remote.RemoteRepository Import org.apache.jackrabbit.rmi.remote.RemoteRow Import org.apache.jackrabbit.rmi.remote.RemoteSession Import org.apache.jackrabbit.rmi.remote.RemoteVersion Import org.apache.jackrabbit.rmi.remote.RemoteVersionHistory Import org.apache.jackrabbit.rmi.remote.RemoteWorkspace InterfaceDeclaration Modifier public /**
 * Factory interface for creating local adapters for remote references.
 * This interface defines how remote JCR-RMI references are adapted
 * back to the normal JCR interfaces. The adaption mechanism can be
 * modified (for example to add extra features) by changing the
 * local adapter factory used by the repository client.
 * <p>
 * Note that the
 * {@link org.apache.jackrabbit.rmi.client.ClientObject ClientObject}
 * base class provides a number of utility methods designed to work with
 * a local adapter factory. Adapter implementations may want to inherit
 * that functionality by subclassing from ClientObject.
 *
 * @author Jukka Zitting
 * @author Philipp Koch
 * @see org.apache.jackrabbit.rmi.server.RemoteAdapterFactory
 * @see org.apache.jackrabbit.rmi.client.ClientAdapterFactory
 * @see org.apache.jackrabbit.rmi.client.ClientObject
 */ LocalAdapterFactory MethodDeclaration /**
     * Factory method for creating a local adapter for a remote repository.
     *
     * @param remote remote repository
     * @return local repository adapter
     */ ReferenceType Repository getRepository FormalParameter ReferenceType RemoteRepository remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote session.
     *
     * @param repository current repository
     * @param remote remote session
     * @return local session adapter
     */ ReferenceType Session getSession FormalParameter ReferenceType Repository repository FormalParameter ReferenceType RemoteSession remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote workspace.
     *
     * @param session current session
     * @param remote remote workspace
     * @return local workspace adapter
     */ ReferenceType Workspace getWorkspace FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteWorkspace remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote observation
     * manager.
     *
     * @param workspace current workspace
     * @param remote remote observation manager
     * @return local observation manager adapter
     */ ReferenceType ObservationManager getObservationManager FormalParameter ReferenceType Workspace workspace FormalParameter ReferenceType RemoteObservationManager remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote namespace
     * registry.
     *
     * @param remote remote namespace registry
     * @return local namespace registry adapter
     */ ReferenceType NamespaceRegistry getNamespaceRegistry FormalParameter ReferenceType RemoteNamespaceRegistry remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote node type
     * manager.
     *
     * @param remote remote node type manager
     * @return local node type manager adapter
     */ ReferenceType NodeTypeManager getNodeTypeManager FormalParameter ReferenceType RemoteNodeTypeManager remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote item.
     * Note that before calling this method, the client may want to
     * introspect the remote item reference to determine whether to use the
     * {@link #getNode(Session, RemoteNode) getNode} or
     * {@link #getProperty(Session, RemoteProperty) getProperty} method
     * instead, as the adapter returned by this method will only cover
     * the basic {@link Item Item} interface.
     *
     * @param session current session
     * @param remote remote item
     * @return local item adapter
     */ ReferenceType Item getItem FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteItem remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote property.
     *
     * @param session current session
     * @param remote remote property
     * @return local property adapter
     */ ReferenceType Property getProperty FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteProperty remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote node.
     *
     * @param session current session
     * @param remote remote node
     * @return local node adapter
     */ ReferenceType Node getNode FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteNode remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote version.
     *
     * @param session current session
     * @param remote remote version
     * @return local version adapter
     */ ReferenceType Version getVersion FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteVersion remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote version history.
     *
     * @param session current session
     * @param remote remote version history
     * @return local version history adapter
     */ ReferenceType VersionHistory getVersionHistory FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteVersionHistory remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote node type.
     *
     * @param remote remote node type
     * @return local node type adapter
     */ ReferenceType NodeType getNodeType FormalParameter ReferenceType RemoteNodeType remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote item
     * definition. Note that before calling this method, the client may want to
     * introspect the remote item definition to determine whether to use the
     * {@link #getNodeDef(RemoteNodeDefinition) getNodeDef} or
     * {@link #getPropertyDef(RemotePropertyDefinition) getPropertyDef} method
     * instead, as the adapter returned by this method will only cover
     * the {@link ItemDefinition ItemDef} base interface.
     *
     * @param remote remote item definition
     * @return local item definition adapter
     */ ReferenceType ItemDefinition getItemDef FormalParameter ReferenceType RemoteItemDefinition remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote node
     * definition.
     *
     * @param remote remote node definition
     * @return local node definition adapter
     */ ReferenceType NodeDefinition getNodeDef FormalParameter ReferenceType RemoteNodeDefinition remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote property
     * definition.
     *
     * @param remote remote property definition
     * @return local property definition adapter
     */ ReferenceType PropertyDefinition getPropertyDef FormalParameter ReferenceType RemotePropertyDefinition remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote lock.
     *
     * @param node current node
     * @param remote remote lock
     * @return local lock adapter
     */ ReferenceType Lock getLock FormalParameter ReferenceType Node node FormalParameter ReferenceType RemoteLock remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote query manager.
     *
     * @param session current session
     * @param remote remote query manager
     * @return local query manager adapter
     */ ReferenceType QueryManager getQueryManager FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteQueryManager remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote query.
     *
     * @param session current session
     * @param remote remote query
     * @return local query adapter
     */ ReferenceType Query getQuery FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteQuery remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote query result.
     *
     * @param session current session
     * @param remote remote query result
     * @return local query result adapter
     */ ReferenceType QueryResult getQueryResult FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteQueryResult remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote query row.
     *
     * @param remote remote query row
     * @return local query row adapter
     */ ReferenceType Row getRow FormalParameter ReferenceType RemoteRow remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote node iterator.
     *
     * @param session current session
     * @param remote remote node iterator
     * @return local node iterator adapter
     */ ReferenceType NodeIterator getNodeIterator FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteIterator remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote property iterator.
     *
     * @param session current session
     * @param remote remote property iterator
     * @return local property iterator adapter
     */ ReferenceType PropertyIterator getPropertyIterator FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteIterator remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote version iterator.
     *
     * @param session current session
     * @param remote remote version iterator
     * @return local version iterator adapter
     */ ReferenceType VersionIterator getVersionIterator FormalParameter ReferenceType Session session FormalParameter ReferenceType RemoteIterator remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote
     * node type iterator.
     *
     * @param remote remote node type iterator
     * @return local node type iterator adapter
     */ ReferenceType NodeTypeIterator getNodeTypeIterator FormalParameter ReferenceType RemoteIterator remote MethodDeclaration /**
     * Factory method for creating a local adapter for a remote row iterator.
     *
     * @param remote remote row iterator
     * @return local row iterator adapter
     */ ReferenceType RowIterator getRowIterator FormalParameter ReferenceType RemoteIterator remote",0
751,751,,1
509,509,"CompilationUnit PackageDeclaration org.apache.jackrabbit.j2ee Import org.apache.log4j.Logger Import org.apache.log4j.PropertyConfigurator Import org.apache.log4j.xml.DOMConfigurator Import org.w3c.dom.Document Import org.w3c.dom.Element Import org.xml.sax.SAXException Import org.xml.sax.EntityResolver Import org.xml.sax.InputSource Import javax.servlet.http.HttpServlet Import javax.servlet.ServletException Import javax.xml.parsers.DocumentBuilderFactory Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.ParserConfigurationException Import java.util.Properties Import java.io.IOException Import java.io.InputStream Import java.io.FileInputStream Import java.io.FileNotFoundException Import java.net.URI Import java.net.URISyntaxException ClassDeclaration Modifier public /**
 * This Class implements a servlet that is used for initializing the log4j
 * facitilies for the containing webapp. since all classes in a webapp share
 * the same Log4J repository, this servlet offers a centralized mechanism to
 * configure the different loggers.
 * <p/>
 * please note, that Log4J holds its logging repository in static class variables,
 * so the configuration spans all classes using the same classloader hierarchy.
 * in a typical j2ee 4 classloaders are provided by the appserver: a shared,
 * a server, a container and an application classloader:
 * <xmp>
 *       Bootstrap
 *          |
 *        System
 *          |
 *        Shared
 *       /      \
 *  Server     Container
 *                /   \
 *           Webapp1  Webapp2 ...
 *
 * </xmp>
 * Classes are searched in the classloader hierarchy by aksing the parent
 * classloader first. so if you put the log4j.jar in the 'shared' classloader,
 * all webapps will shared the same log4j logger repository. if every webapp
 * should use it's own hierarchy, the log4j.jar must be put in the classpath
 * of the webapp classloader, usually WEB-INF/lib.
 * <p/>
 * Please note further that the exact way how the classloader hierarchy is
 * set-up depends on the appserver you are using.
 */ LoggingServlet FieldDeclaration /**
     * The init param for the log4j configuration. this can either point to
     * a resource inside the application or a filepath. if the filename ends with
     * "".xml"", the {@link DOMConfigurator} is used to configure Log4J, otherwise
     * the {@link PropertyConfigurator} is used.
     */ Modifier public final static ReferenceType String VariableDeclarator INIT_PARAM_LOG4J_CONFIG Literal ""log4j-config"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public init ServletException StatementExpression MethodInvocation configure StatementExpression MethodInvocation Logger MethodInvocation Literal ""Logging initialized."" info getRootLogger MethodDeclaration /**
     * Configures Log4J using the config specified by the
     * {@link #INIT_PARAM_LOG4J_CONFIG} init parameter.
     *
     * @throws ServletException
     */ Modifier private configure ServletException LocalVariableDeclaration ReferenceType String VariableDeclarator log4jConfig MethodInvocation MethodInvocation MemberReference INIT_PARAM_LOG4J_CONFIG getInitParameter getServletConfig LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation MethodInvocation MemberReference log4jConfig getResourceAsStream getServletContext IfStatement BinaryOperation == MemberReference in Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference in ClassCreator ReferenceType FileInputStream MemberReference log4jConfig = CatchClause CatchClauseParameter FileNotFoundException e ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + Literal ""Unable to initialize log4j: "" MethodInvocation e toString BlockStatement StatementExpression Assignment MemberReference log4jConfig BinaryOperation + Literal ""ctx:"" MemberReference log4jConfig = End TryStatement IfStatement MethodInvocation log4jConfig Literal "".xml"" endsWith BlockStatement LocalVariableDeclaration ReferenceType InputSource VariableDeclarator ins ClassCreator ReferenceType InputSource MemberReference in StatementExpression MethodInvocation ins MemberReference log4jConfig setSystemId StatementExpression MethodInvocation MemberReference ins configureXML BlockStatement StatementExpression MethodInvocation MemberReference in configureProperties End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType ServletException BinaryOperation + Literal ""Unable to initialize log4j: "" MethodInvocation e toString TryStatement StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException e MethodDeclaration /**
     * Configures Log4J using the {@link DOMConfigurator}
     *
     * @param in
     * @throws ServletException
     * @throws IOException
     */ Modifier private configureXML FormalParameter ReferenceType InputSource in ServletException IOException TryStatement LocalVariableDeclaration ReferenceType DocumentBuilderFactory VariableDeclarator factory MethodInvocation DocumentBuilderFactory newInstance LocalVariableDeclaration ReferenceType DocumentBuilder VariableDeclarator builder MethodInvocation factory newDocumentBuilder IfStatement MethodInvocation in MethodInvocation Literal ""ctx:"" startsWith getSystemId BlockStatement StatementExpression MethodInvocation builder ClassCreator ReferenceType ContextResolver setEntityResolver End LocalVariableDeclaration ReferenceType Document VariableDeclarator document MethodInvocation builder MemberReference in parse LocalVariableDeclaration ReferenceType Element VariableDeclarator root MethodInvocation document getDocumentElement StatementExpression MethodInvocation DOMConfigurator MemberReference root configure CatchClause CatchClauseParameter ParserConfigurationException e ThrowStatement ClassCreator ReferenceType ServletException Literal ""Unable to create configuration XML parser"" MemberReference e CatchClause CatchClauseParameter SAXException e ThrowStatement ClassCreator ReferenceType ServletException Literal ""Configuration file syntax error."" MemberReference e MethodDeclaration /**
     * Configures Log4J using the {@link PropertyConfigurator}
     *
     * @param in
     * @throws ServletException
     * @throws IOException
     */ Modifier private configureProperties FormalParameter ReferenceType InputStream in ServletException IOException LocalVariableDeclaration ReferenceType Properties VariableDeclarator log4jProperties ClassCreator ReferenceType Properties StatementExpression MethodInvocation log4jProperties MemberReference in load StatementExpression MethodInvocation PropertyConfigurator MemberReference log4jProperties configure ClassDeclaration Modifier private /**
     * own EntityResolver to resolve entities inside servlet context
     */ ContextResolver MethodDeclaration Modifier public ReferenceType InputSource resolveEntity FormalParameter ReferenceType String publicId FormalParameter ReferenceType String systemId SAXException IOException TryStatement LocalVariableDeclaration ReferenceType URI VariableDeclarator uri ClassCreator ReferenceType URI MemberReference systemId IfStatement MethodInvocation uri MethodInvocation Literal ""ctx"" equals getScheme BlockStatement LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation MethodInvocation MethodInvocation uri getPath getResourceAsStream getServletContext IfStatement BinaryOperation != MemberReference in Literal null BlockStatement LocalVariableDeclaration ReferenceType InputSource VariableDeclarator ins ClassCreator ReferenceType InputSource MemberReference in StatementExpression MethodInvocation ins MemberReference systemId setSystemId ReturnStatement MemberReference ins End End StatementExpression MethodInvocation BinaryOperation + Literal ""Error while resolving entity. Unkwon systemid: "" MemberReference systemId log CatchClause CatchClauseParameter URISyntaxException e StatementExpression MethodInvocation BinaryOperation + Literal ""Error while resolving entity: "" MethodInvocation e toString log ReturnStatement Literal null ReferenceType EntityResolver ReferenceType HttpServlet",0
181,181,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.version.report Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.version.DeltaVResource Import org.apache.jackrabbit.webdav.version.report.Report Import org.apache.jackrabbit.webdav.version.report.ReportType Import org.apache.jackrabbit.webdav.version.report.ReportInfo Import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants Import org.apache.jackrabbit.webdav.jcr.JcrDavException Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.MultiStatus Import org.apache.jackrabbit.webdav.DavException Import org.apache.jackrabbit.webdav.DavServletResponse Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.DavSession Import org.apache.jackrabbit.webdav.DavResourceLocator Import org.apache.jackrabbit.webdav.DavResource Import org.w3c.dom.Element Import org.w3c.dom.Document Import javax.jcr.Node Import javax.jcr.RepositoryException ClassDeclaration Modifier public /**
 * <code>LocateByUuidReport</code> handles REPORT requests for the 'locate-by-uuid'
 * report.
 * <p/>
 * The request body must be a 'dcr:locate-by-uuid' XML element:
 * <pre>
 * &lt;!ELEMENT locate-by-uuid ( href , prop? ) &gt;
 * </pre>
 * The response to a successful report request will be a Multi-Status response.
 */ LocateByUuidReport FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType LocateByUuidReport getLogger FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator REPORT_NAME Literal ""locate-by-uuid"" FieldDeclaration /**
     * The exportview report type
     */ Modifier public final static ReferenceType ReportType VariableDeclarator LOCATE_BY_UUID_REPORT MethodInvocation ReportType MemberReference REPORT_NAME MemberReference ItemResourceConstants NAMESPACE ClassReference ReferenceType LocateByUuidReport register FieldDeclaration Modifier private ReferenceType MultiStatus VariableDeclarator ms MethodDeclaration /**
     * Returns {@link #LOCATE_BY_UUID_REPORT} report type.
     *
     * @return {@link #LOCATE_BY_UUID_REPORT}
     * @see org.apache.jackrabbit.webdav.version.report.Report#getType()
     */ Modifier public ReferenceType ReportType getType ReturnStatement MemberReference LOCATE_BY_UUID_REPORT MethodDeclaration /**
     * Always returns <code>true</code>.
     *
     * @return true
     * @see org.apache.jackrabbit.webdav.version.report.Report#isMultiStatusReport()
     */ Modifier public BasicType boolean isMultiStatusReport ReturnStatement Literal true MethodDeclaration /**
     * @see Report#init(org.apache.jackrabbit.webdav.version.DeltaVResource, org.apache.jackrabbit.webdav.version.report.ReportInfo)
     */ Modifier public init FormalParameter ReferenceType DeltaVResource resource FormalParameter ReferenceType ReportInfo info DavException IfStatement MethodInvocation ! MethodInvocation MemberReference info isRequestedReportType getType BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""dcr:locate-by-uuid element expected."" End IfStatement MethodInvocation ! info MemberReference DavConstants XML_HREF MemberReference DavConstants NAMESPACE containsContentElement BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""dcr:locate-by-uuid element must at least contain a single DAV:href child."" End IfStatement BinaryOperation == MemberReference resource Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""Resource must not be null."" End LocalVariableDeclaration ReferenceType DavSession VariableDeclarator davSession MethodInvocation resource getSession IfStatement BinaryOperation || BinaryOperation == MemberReference davSession Literal null BinaryOperation == MethodInvocation davSession getRepositorySession Literal null BlockStatement ThrowStatement ClassCreator ReferenceType DavException MemberReference DavServletResponse SC_BAD_REQUEST Literal ""The resource must provide a non-null session object in order to create the locate-by-uuid report."" End TryStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator hrefElem MethodInvocation info MemberReference DavConstants XML_HREF MemberReference DavConstants NAMESPACE getContentElement LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation DomUtil MemberReference hrefElem getTextTrim LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator resourceLoc MethodInvocation resource getLocator LocalVariableDeclaration ReferenceType Node VariableDeclarator n MethodInvocation davSession MethodInvocation MemberReference uuid getNodeByUUID getRepositorySession LocalVariableDeclaration ReferenceType DavResourceLocator VariableDeclarator loc MethodInvocation resourceLoc MethodInvocation MethodInvocation resourceLoc getPrefix MethodInvocation resourceLoc getWorkspacePath MethodInvocation n getPath Literal false createResourceLocator getFactory LocalVariableDeclaration ReferenceType DavResource VariableDeclarator locatedResource MethodInvocation resource MethodInvocation MemberReference loc MemberReference davSession createResource getFactory StatementExpression Assignment MemberReference ms ClassCreator ReferenceType MultiStatus = StatementExpression MethodInvocation ms MemberReference locatedResource MethodInvocation info getPropertyNameSet MethodInvocation info getDepth addResourceProperties CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType JcrDavException MemberReference e MethodDeclaration /**
     * Creates a Xml document from the generated view.
     *
     * @param document
     * @return Xml element representing the output of the specified view.
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document ReturnStatement MethodInvocation ms MemberReference document toXml ReferenceType Report",1
718,718,,1
784,784,,1
754,754,,0
438,438,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.xml Import org.apache.jackrabbit.BaseException Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.util.ISO9075 Import org.apache.log4j.Logger Import org.xml.sax.Attributes Import org.xml.sax.SAXException Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import java.io.IOException Import java.io.Reader Import java.util.ArrayList Import java.util.Stack ClassDeclaration /**
 * <code>DocViewImportHandler</code> processes Document View XML SAX events
 * and 'translates' them into <code>{@link Importer}</code> method calls.
 */ DocViewImportHandler FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType DocViewImportHandler getLogger FieldDeclaration /**
     * stack of NodeInfo instances; an instance is pushed onto the stack
     * in the startElement method and is popped from the stack in the
     * endElement method.
     */ Modifier private final ReferenceType Stack VariableDeclarator stack ClassCreator ReferenceType Stack FieldDeclaration Modifier private ReferenceType BufferedStringValue VariableDeclarator textHandler ClassCreator ReferenceType BufferedStringValue ConstructorDeclaration /**
     * Constructs a new <code>DocViewImportHandler</code>.
     *
     * @param importer
     * @param nsContext
     */ DocViewImportHandler FormalParameter ReferenceType Importer importer FormalParameter ReferenceType NamespaceResolver nsContext StatementExpression SuperConstructorInvocation MemberReference importer MemberReference nsContext MethodDeclaration /**
     * Appends the given character data to the internal buffer.
     *
     * @param ch     the characters to be appended
     * @param start  the index of the first character to append
     * @param length the number of characters to append
     * @throws SAXException if an error occurs
     * @see #characters(char[], int, int)
     * @see #ignorableWhitespace(char[], int, int)
     * @see #processCharacters()
     */ Modifier private appendCharacters FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length SAXException IfStatement BinaryOperation == MemberReference textHandler Literal null BlockStatement StatementExpression Assignment MemberReference textHandler ClassCreator ReferenceType BufferedStringValue = End TryStatement StatementExpression MethodInvocation textHandler MemberReference ch MemberReference start MemberReference length append CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""internal error while processing internal buffer data"" StatementExpression MethodInvocation log MemberReference msg MemberReference ioe error ThrowStatement ClassCreator ReferenceType SAXException MemberReference msg MemberReference ioe MethodDeclaration /**
     * Translates character data reported by the
     * <code>{@link #characters(char[], int, int)}</code> &
     * <code>{@link #ignorableWhitespace(char[], int, int)}</code> SAX events
     * into a  <code>jcr:xmltext</code> child node with one
     * <code>jcr:xmlcharacters</code> property.
     *
     * @throws SAXException if an error occurs
     * @see #appendCharacters(char[], int, int)
     */ Modifier private processCharacters SAXException TryStatement IfStatement BinaryOperation && BinaryOperation != MemberReference textHandler Literal null BinaryOperation > MethodInvocation textHandler length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Reader VariableDeclarator reader MethodInvocation textHandler reader TryStatement LocalVariableDeclaration BasicType int VariableDeclarator ch WhileStatement BinaryOperation != Assignment MemberReference ch MethodInvocation reader read = Literal - 1 BlockStatement IfStatement BinaryOperation > MemberReference ch Literal 0x20 BlockStatement BreakStatement End End IfStatement BinaryOperation == MemberReference ch Literal - 1 BlockStatement StatementExpression MethodInvocation log Literal ""ignoring pure whitespace character data..."" debug StatementExpression MethodInvocation textHandler dispose StatementExpression Assignment MemberReference textHandler Literal null = ReturnStatement End StatementExpression MethodInvocation reader close LocalVariableDeclaration ReferenceType Importer ReferenceType NodeInfo VariableDeclarator node ClassCreator ReferenceType Importer ReferenceType NodeInfo MemberReference QName JCR_XMLTEXT Literal null Literal null Literal null LocalVariableDeclaration ReferenceType Importer ReferenceType TextValue VariableDeclarator values ArrayCreator ReferenceType Importer ReferenceType TextValue ArrayInitializer MemberReference textHandler LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator props ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Importer ReferenceType PropInfo VariableDeclarator prop ClassCreator ReferenceType Importer ReferenceType PropInfo MemberReference QName JCR_XMLCHARACTERS MemberReference PropertyType STRING MemberReference values StatementExpression MethodInvocation props MemberReference prop add StatementExpression MethodInvocation importer MemberReference node MemberReference props MemberReference nsContext startNode StatementExpression MethodInvocation importer MemberReference node endNode StatementExpression MethodInvocation textHandler dispose StatementExpression Assignment MemberReference textHandler Literal null = End CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""internal error while processing internal buffer data"" StatementExpression MethodInvocation log MemberReference msg MemberReference ioe error ThrowStatement ClassCreator ReferenceType SAXException MemberReference msg MemberReference ioe CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType SAXException MemberReference re MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public startDocument SAXException TryStatement StatementExpression MethodInvocation importer start CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType SAXException MemberReference re MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public startElement FormalParameter ReferenceType String namespaceURI FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName FormalParameter ReferenceType Attributes atts SAXException StatementExpression MethodInvocation processCharacters TryStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator nodeName ClassCreator ReferenceType QName MemberReference namespaceURI MemberReference localName StatementExpression Assignment MemberReference nodeName MethodInvocation ISO9075 MemberReference nodeName decode = LocalVariableDeclaration ReferenceType String VariableDeclarator uuid Literal null LocalVariableDeclaration ReferenceType QName VariableDeclarator nodeTypeName Literal null LocalVariableDeclaration ReferenceType QName VariableDeclarator mixinTypes Literal null LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator props ClassCreator ReferenceType ArrayList MethodInvocation atts getLength ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation atts getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator propName ClassCreator ReferenceType QName MethodInvocation atts MemberReference i getURI MethodInvocation atts MemberReference i getLocalName StatementExpression Assignment MemberReference propName MethodInvocation ISO9075 MemberReference propName decode = LocalVariableDeclaration ReferenceType String VariableDeclarator attrValue MethodInvocation atts MemberReference i getValue LocalVariableDeclaration ReferenceType Importer ReferenceType TextValue VariableDeclarator propValues IfStatement MethodInvocation propName MemberReference QName JCR_PRIMARYTYPE equals BlockStatement IfStatement BinaryOperation > MethodInvocation attrValue length Literal 0 BlockStatement TryStatement StatementExpression Assignment MemberReference nodeTypeName MethodInvocation QName MemberReference attrValue MemberReference nsContext fromJCRName = CatchClause CatchClauseParameter BaseException be ThrowStatement ClassCreator ReferenceType SAXException BinaryOperation + Literal ""illegal jcr:primaryType value: "" MemberReference attrValue MemberReference be End IfStatement MethodInvocation propName MemberReference QName JCR_MIXINTYPES equals BlockStatement IfStatement BinaryOperation > MethodInvocation attrValue length Literal 0 BlockStatement TryStatement StatementExpression Assignment MemberReference mixinTypes ArrayCreator ReferenceType QName ArrayInitializer MethodInvocation QName MemberReference attrValue MemberReference nsContext fromJCRName = CatchClause CatchClauseParameter BaseException be ThrowStatement ClassCreator ReferenceType SAXException BinaryOperation + Literal ""illegal jcr:mixinTypes value: "" MemberReference attrValue MemberReference be End IfStatement MethodInvocation propName MemberReference QName JCR_UUID equals BlockStatement IfStatement BinaryOperation > MethodInvocation attrValue length Literal 0 BlockStatement StatementExpression Assignment MemberReference uuid MemberReference attrValue = End BlockStatement StatementExpression Assignment MemberReference propValues ArrayCreator ReferenceType Importer ReferenceType TextValue Literal 1 = StatementExpression Assignment MemberReference ArraySelector Literal 0 propValues ClassCreator ReferenceType StringValue MethodInvocation atts MemberReference i getValue = StatementExpression MethodInvocation props ClassCreator ReferenceType Importer ReferenceType PropInfo MemberReference propName MemberReference PropertyType UNDEFINED MemberReference propValues add End End End End LocalVariableDeclaration ReferenceType Importer ReferenceType NodeInfo VariableDeclarator node ClassCreator ReferenceType Importer ReferenceType NodeInfo MemberReference nodeName MemberReference nodeTypeName MemberReference mixinTypes MemberReference uuid StatementExpression MethodInvocation importer MemberReference node MemberReference props MemberReference nsContext startNode StatementExpression MethodInvocation stack MemberReference node push CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType SAXException MemberReference re MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public characters FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length SAXException StatementExpression MethodInvocation MemberReference ch MemberReference start MemberReference length appendCharacters MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ignorableWhitespace FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int length SAXException StatementExpression MethodInvocation MemberReference ch MemberReference start MemberReference length appendCharacters MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public endElement FormalParameter ReferenceType String namespaceURI FormalParameter ReferenceType String localName FormalParameter ReferenceType String qName SAXException StatementExpression MethodInvocation processCharacters LocalVariableDeclaration ReferenceType Importer ReferenceType NodeInfo VariableDeclarator node Cast ReferenceType Importer ReferenceType NodeInfo MethodInvocation stack peek TryStatement StatementExpression MethodInvocation importer MemberReference node endNode CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType SAXException MemberReference re StatementExpression MethodInvocation stack pop MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public endDocument SAXException TryStatement StatementExpression MethodInvocation importer end CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType SAXException MemberReference re ReferenceType TargetImportHandler",0
691,691,,1
851,851,,0
776,776,,1
239,239,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib Import java.io.IOException Import java.text.DecimalFormat Import java.text.NumberFormat Import java.util.Iterator Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.servlet.jsp.JspException Import javax.servlet.jsp.JspTagException Import javax.servlet.jsp.tagext.TagSupport Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.taglib.filter.ItemFilter Import org.apache.jackrabbit.taglib.size.SizeCalculator Import org.apache.jackrabbit.taglib.traverser.Traverser Import org.apache.jackrabbit.taglib.utils.JCRTagConstants Import org.apache.jackrabbit.taglib.utils.JCRTagUtils Import org.apache.taglibs.standard.tag.common.core.NullAttributeException Import org.apache.taglibs.standard.tag.el.core.ExpressionUtil ClassDeclaration Modifier public /**
 * Estimates the cumulative size of the nodes returned by the given
 * <code>Traverser</code> and displays the value.
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ SizeTag FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType SizeTag getLog FieldDeclaration /** tag name */ Modifier public static ReferenceType String VariableDeclarator TAG_NAME Literal ""size"" FieldDeclaration /** number format */ Modifier private static ReferenceType NumberFormat VariableDeclarator NF StatementExpression Assignment MemberReference NF ClassCreator ReferenceType DecimalFormat Literal ""###,##0.0"" = StatementExpression MethodInvocation NF Literal 2 setMaximumFractionDigits FieldDeclaration /**
     * Name of the scoped variable where the jcr session is stored. If not set
     * then JCRTagConstants.KEY_SESSION is used.
     */ Modifier private ReferenceType String VariableDeclarator session FieldDeclaration /**
     * JSTL expression or full path. <br>
     * e.g. /mynode <br>
     * or ${mynode}
     */ Modifier private ReferenceType String VariableDeclarator node FieldDeclaration /**
     * Traverser ID.
     */ Modifier private ReferenceType String VariableDeclarator traverserID FieldDeclaration /**
     * Expression that affects Traverser behaviour
     */ Modifier private ReferenceType String VariableDeclarator traverserParam FieldDeclaration /**
     * Traverse depth
     */ Modifier private BasicType int VariableDeclarator traverserDepth Literal 0 FieldDeclaration /**
     * NodePredicate ID.
     */ Modifier private ReferenceType String VariableDeclarator filterID FieldDeclaration /**
     * Expression used by the NodePredicate to evaluate nodes. The evaluation
     * must return a Boolean instance.
     */ Modifier private ReferenceType String VariableDeclarator filterExp FieldDeclaration /**
     * Storage calculator ID.
     */ Modifier private ReferenceType String VariableDeclarator calculatorID FieldDeclaration /**
     * Unit.
     */ Modifier private BasicType int VariableDeclarator unit FieldDeclaration /**
     * Decimal format pattern
     */ Modifier private ReferenceType String VariableDeclarator format ConstructorDeclaration Modifier public /**
     * Constructor
     */ SizeTag StatementExpression SuperConstructorInvocation StatementExpression This MethodInvocation init MethodDeclaration /**
     * Sets the filter expression
     * 
     * @param filterExp
     */ Modifier public setFilterExp FormalParameter ReferenceType String filterExp StatementExpression Assignment This MemberReference filterExp MemberReference filterExp = MethodDeclaration /**
     * Sets the filter ID
     * 
     * @param filterID
     */ Modifier public setFilterID FormalParameter ReferenceType String filterID StatementExpression Assignment This MemberReference filterID MemberReference filterID = MethodDeclaration /**
     * Sets the node
     * 
     * @param node
     */ Modifier public setNode FormalParameter ReferenceType String node StatementExpression Assignment This MemberReference node MemberReference node = MethodDeclaration /**
     * Sets the session
     * 
     * @param session
     */ Modifier public setSession FormalParameter ReferenceType String session StatementExpression Assignment This MemberReference session MemberReference session = MethodDeclaration /**
     * Sets the traverser depth
     * 
     * @param traverseDepth
     */ Modifier public setTraverserDepth FormalParameter BasicType int traverseDepth StatementExpression Assignment This MemberReference traverserDepth MemberReference traverseDepth = MethodDeclaration /**
     * Sets the traverser ID
     * 
     * @param traverseID
     */ Modifier public setTraverserID FormalParameter ReferenceType String traverseID StatementExpression Assignment This MemberReference traverserID MemberReference traverseID = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public release StatementExpression SuperMethodInvocation release StatementExpression This MethodInvocation init MethodDeclaration /**
     * init
     *  
     */ Modifier private init StatementExpression Assignment This MemberReference filterExp Literal null = StatementExpression Assignment This MemberReference filterID Cast ReferenceType String MethodInvocation JCRTagUtils MemberReference JCRTagConstants JNDI_DEFAULT_ITEM_FILTER lookup = StatementExpression Assignment This MemberReference node Literal ""/"" = StatementExpression Assignment This MemberReference session BinaryOperation + BinaryOperation + Literal ""${"" MemberReference JCRTagConstants KEY_SESSION Literal ""}"" = StatementExpression Assignment This MemberReference traverserDepth Literal 1 = StatementExpression Assignment This MemberReference traverserID Cast ReferenceType String MethodInvocation JCRTagUtils MemberReference JCRTagConstants JNDI_DEFAULT_TRAVERSER lookup = StatementExpression Assignment This MemberReference calculatorID Cast ReferenceType String MethodInvocation JCRTagUtils MemberReference JCRTagConstants JNDI_DEFAULT_SIZE_CALCULATOR lookup = StatementExpression Assignment This MemberReference unit MemberReference SizeCalculator BYTES = StatementExpression Assignment This MemberReference format Literal null = MethodDeclaration /**
     * Sets the traverser parameter
     * 
     * @param traverserExp
     */ Modifier public setTraverserParam FormalParameter ReferenceType String traverserExp StatementExpression Assignment This MemberReference traverserParam MemberReference traverserExp = MethodDeclaration /**
     * gets the traverser parameter evaluation
     * 
     * @return @throws
     *         JspException
     */ Modifier private ReferenceType Object getTraverserParam JspException LocalVariableDeclaration ReferenceType Object VariableDeclarator o Literal null TryStatement StatementExpression Assignment MemberReference o MethodInvocation ExpressionUtil MemberReference TAG_NAME Literal ""traverserParam"" This MemberReference traverserParam ClassReference ReferenceType Object This This MemberReference pageContext evalNotNull = CatchClause CatchClauseParameter NullAttributeException e ReturnStatement MemberReference o MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType int doEndTag JspException TryStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator s MethodInvocation JCRTagUtils MemberReference TAG_NAME This MemberReference session This This MemberReference pageContext getSession LocalVariableDeclaration ReferenceType Node VariableDeclarator jcrNode Cast ReferenceType Node MethodInvocation JCRTagUtils MemberReference TAG_NAME This MemberReference node This This MemberReference pageContext MemberReference s getItem LocalVariableDeclaration ReferenceType Traverser VariableDeclarator traverser Cast ReferenceType Traverser MethodInvocation JCRTagUtils This MemberReference traverserID getBean StatementExpression MethodInvocation traverser This MemberReference traverserDepth setDepth StatementExpression MethodInvocation traverser MemberReference jcrNode setNode StatementExpression MethodInvocation traverser This MethodInvocation getTraverserParam setParameter IfStatement BinaryOperation != This MemberReference filterExp Literal null BlockStatement LocalVariableDeclaration ReferenceType ItemFilter VariableDeclarator predicate Cast ReferenceType ItemFilter MethodInvocation JCRTagUtils This MemberReference filterID getBean StatementExpression MethodInvocation predicate This MemberReference filterExp setExpression StatementExpression MethodInvocation traverser MemberReference predicate setFilter End StatementExpression MethodInvocation traverser traverse LocalVariableDeclaration ReferenceType SizeCalculator VariableDeclarator calculator Cast ReferenceType SizeCalculator MethodInvocation JCRTagUtils This MemberReference calculatorID getBean StatementExpression MethodInvocation calculator This MemberReference unit setUnit LocalVariableDeclaration BasicType double VariableDeclarator size Literal 0 LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation traverser MethodInvocation iterator getNodes WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator n Cast ReferenceType Node MethodInvocation iter next StatementExpression Assignment MemberReference size BinaryOperation + MemberReference size MethodInvocation calculator MemberReference n getSize = End StatementExpression MethodInvocation pageContext MethodInvocation This MethodInvocation getNumberFormat MethodInvocation MemberReference size format write getOut CatchClause CatchClauseParameter PathNotFoundException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e warn ThrowStatement ClassCreator ReferenceType JspTagException MemberReference msg CatchClause CatchClauseParameter RepositoryException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType JspTagException MemberReference msg CatchClause CatchClauseParameter IOException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType JspTagException MemberReference msg ReturnStatement MemberReference EVAL_PAGE MethodDeclaration /**
     * Sets the unit ( bytes | kb | mb | gb )
     * 
     * @param unit
     * @throws JspTagException
     */ Modifier public setUnit FormalParameter ReferenceType String unit JspTagException IfStatement MethodInvocation unit Literal ""bytes"" equalsIgnoreCase BlockStatement StatementExpression Assignment This MemberReference unit MemberReference SizeCalculator BYTES = IfStatement MethodInvocation unit Literal ""kb"" equalsIgnoreCase BlockStatement StatementExpression Assignment This MemberReference unit MemberReference SizeCalculator KILOBYTES = IfStatement MethodInvocation unit Literal ""mb"" equalsIgnoreCase BlockStatement StatementExpression Assignment This MemberReference unit MemberReference SizeCalculator MEGABYTES = IfStatement MethodInvocation unit Literal ""gb"" equalsIgnoreCase BlockStatement StatementExpression Assignment This MemberReference unit MemberReference SizeCalculator GIGABYTES = BlockStatement ThrowStatement ClassCreator ReferenceType JspTagException BinaryOperation + Literal ""No such unit. "" MemberReference unit End End End End MethodDeclaration /**
     * Sets the storage calculator ID
     * 
     * @param calculatorID
     */ Modifier public setCalculatorID FormalParameter ReferenceType String calculatorID StatementExpression Assignment This MemberReference calculatorID MemberReference calculatorID = MethodDeclaration /**
     * Sets the format pattern
     * 
     * @param format
     */ Modifier public setFormat FormalParameter ReferenceType String format StatementExpression Assignment This MemberReference format MemberReference format = MethodDeclaration /**
     * @return the number format
     */ Modifier private ReferenceType NumberFormat getNumberFormat IfStatement BinaryOperation == This MemberReference format Literal null BlockStatement ReturnStatement MemberReference NF BlockStatement ReturnStatement ClassCreator ReferenceType DecimalFormat This MemberReference format End ReferenceType TagSupport",0
492,492,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.bdb Import com.sleepycat.bind.tuple.TupleBinding Import com.sleepycat.bind.tuple.TupleInput Import com.sleepycat.bind.tuple.TupleOutput Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.util.BLOBStore Import org.apache.jackrabbit.core.state.util.Serializer ClassDeclaration Modifier public PropertyStateTupleBinding FieldDeclaration Modifier private ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType PropertyStateTupleBinding getLog FieldDeclaration Modifier private ReferenceType BLOBStore VariableDeclarator blobStore FieldDeclaration Modifier private ReferenceType PropertyId VariableDeclarator id ConstructorDeclaration Modifier public PropertyStateTupleBinding FormalParameter ReferenceType BLOBStore blobStore StatementExpression Assignment This MemberReference blobStore MemberReference blobStore = ConstructorDeclaration Modifier public PropertyStateTupleBinding FormalParameter ReferenceType PropertyId propertyId FormalParameter ReferenceType BLOBStore blobStore StatementExpression Assignment This MemberReference blobStore MemberReference blobStore = StatementExpression Assignment This MemberReference id MemberReference propertyId = MethodDeclaration Modifier public ReferenceType Object entryToObject FormalParameter ReferenceType TupleInput in LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator state ClassCreator ReferenceType PropertyState MethodInvocation id getName MethodInvocation id getParentUUID MemberReference PropertyState STATUS_NEW Literal false TryStatement StatementExpression MethodInvocation Serializer MemberReference state MemberReference in MemberReference blobStore deserialize CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""error while deserializing property state"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference msg MemberReference e ReturnStatement MemberReference state MethodDeclaration Modifier public objectToEntry FormalParameter ReferenceType Object o FormalParameter ReferenceType TupleOutput out TryStatement StatementExpression MethodInvocation Serializer Cast ReferenceType PropertyState MemberReference o MemberReference out MemberReference blobStore serialize CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""error while serializing property state"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RuntimeException MemberReference msg MemberReference e ReferenceType TupleBinding",0
149,149,"CompilationUnit PackageDeclaration org.apache.jackrabbit.util.nodetype Import org.apache.jackrabbit.core.nodetype.NodeDef Import org.apache.jackrabbit.core.nodetype.NodeDefImpl Import org.apache.jackrabbit.core.nodetype.NodeTypeDef Import org.apache.jackrabbit.core.nodetype.PropDef Import org.apache.jackrabbit.core.nodetype.PropDefImpl Import org.apache.jackrabbit.core.nodetype.ValueConstraint Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.name.QName Import org.apache.xerces.impl.xs.XMLSchemaLoader Import org.apache.xerces.xs.XSAttributeDeclaration Import org.apache.xerces.xs.XSAttributeUse Import org.apache.xerces.xs.XSComplexTypeDefinition Import org.apache.xerces.xs.XSConstants Import org.apache.xerces.xs.XSElementDeclaration Import org.apache.xerces.xs.XSModel Import org.apache.xerces.xs.XSModelGroup Import org.apache.xerces.xs.XSNamedMap Import org.apache.xerces.xs.XSObjectList Import org.apache.xerces.xs.XSParticle Import org.apache.xerces.xs.XSSimpleTypeDefinition Import org.apache.xerces.xs.XSTerm Import org.apache.xerces.xs.XSTypeDefinition Import org.apache.xerces.xs.XSWildcard Import javax.jcr.PropertyType Import javax.jcr.version.OnParentVersionAction Import java.io.File Import java.util  ClassDeclaration Modifier public /**
 * SchemaConverter
 * Converts an XML Schema into a set of node type defintions (NodeTypeDef objects)
 * which can then be registered in a repository.
 */ SchemaConverter FieldDeclaration Modifier private final static ReferenceType QName VariableDeclarator XML_TEXT_NODETYPE_NAME ClassCreator ReferenceType QName MemberReference QName NS_JCR_URI Literal ""Xmltext"" FieldDeclaration Modifier private final static ReferenceType QName VariableDeclarator XML_CONTENT_PROPERTY_NAME ClassCreator ReferenceType QName MemberReference QName NS_JCR_URI Literal ""xmlContent"" FieldDeclaration Modifier private final ReferenceType HashMap VariableDeclarator nodeTypeDefs ClassCreator ReferenceType HashMap FieldDeclaration Modifier private final ReferenceType HashMap VariableDeclarator nodeTypeBaseNames ClassCreator ReferenceType HashMap ConstructorDeclaration Modifier public /**
     * Constructor
     */ SchemaConverter FormalParameter ReferenceType String fileName SchemaConversionException LocalVariableDeclaration ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MemberReference fileName StatementExpression MethodInvocation MemberReference file convertSchema ConstructorDeclaration Modifier public /**
     * Constructor
     */ SchemaConverter FormalParameter ReferenceType File file SchemaConversionException StatementExpression MethodInvocation MemberReference file convertSchema MethodDeclaration /**
     * getNodeTypeDefs
     */ Modifier public ReferenceType List getNodeTypeDefs ReturnStatement ClassCreator ReferenceType ArrayList MethodInvocation nodeTypeDefs values MethodDeclaration /**
     * convertSchema
     */ Modifier private convertSchema FormalParameter ReferenceType File file SchemaConversionException LocalVariableDeclaration ReferenceType XMLSchemaLoader VariableDeclarator loader ClassCreator ReferenceType XMLSchemaLoader LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation file MethodInvocation toString toURI LocalVariableDeclaration ReferenceType XSModel VariableDeclarator xsModel MethodInvocation loader MemberReference uri loadURI LocalVariableDeclaration ReferenceType XSNamedMap VariableDeclarator map MethodInvocation xsModel MemberReference XSConstants TYPE_DEFINITION getComponents ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation map getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType XSTypeDefinition VariableDeclarator tDef Cast ReferenceType XSTypeDefinition MethodInvocation map MemberReference i item StatementExpression MethodInvocation MemberReference tDef Literal null Literal null checkAndConvert End StatementExpression Assignment MemberReference map MethodInvocation xsModel MemberReference XSConstants ELEMENT_DECLARATION getComponents = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation map getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType XSElementDeclaration VariableDeclarator eDec Cast ReferenceType XSElementDeclaration MethodInvocation map MemberReference i item LocalVariableDeclaration ReferenceType XSTypeDefinition VariableDeclarator tDef MethodInvocation eDec getTypeDefinition StatementExpression MethodInvocation MemberReference tDef MethodInvocation eDec getNamespace MethodInvocation eDec getName checkAndConvert End MethodDeclaration /**
     * checkAndConvert
     */ Modifier private checkAndConvert FormalParameter ReferenceType XSTypeDefinition tDef FormalParameter ReferenceType String namespace FormalParameter ReferenceType String nameHint SchemaConversionException IfStatement BinaryOperation == MethodInvocation tDef getTypeCategory MemberReference XSTypeDefinition COMPLEX_TYPE BlockStatement LocalVariableDeclaration ReferenceType XSComplexTypeDefinition VariableDeclarator ctDef Cast ReferenceType XSComplexTypeDefinition MemberReference tDef IfStatement BinaryOperation || BinaryOperation || BinaryOperation != MethodInvocation ctDef getContentType MemberReference XSComplexTypeDefinition CONTENTTYPE_SIMPLE BinaryOperation > MethodInvocation ctDef MethodInvocation getLength getAttributeUses Literal 0 BinaryOperation != MethodInvocation ctDef getAttributeWildcard Literal null BlockStatement StatementExpression MethodInvocation MemberReference ctDef MemberReference namespace MemberReference nameHint convertComplexTypeDef End End MethodDeclaration /**
     * convertComplexTypeDef
     */ Modifier private ReferenceType QName convertComplexTypeDef FormalParameter ReferenceType XSComplexTypeDefinition ctDef FormalParameter ReferenceType String namespace FormalParameter ReferenceType String nameHint SchemaConversionException LocalVariableDeclaration ReferenceType NodeTypeDef VariableDeclarator ntd IfStatement MethodInvocation nodeTypeDefs MemberReference ctDef containsKey BlockStatement StatementExpression Assignment MemberReference ntd Cast ReferenceType NodeTypeDef MethodInvocation nodeTypeDefs MemberReference ctDef get = ReturnStatement MethodInvocation ntd getName End LocalVariableDeclaration ReferenceType NodeTypeDef VariableDeclarator ntDef ClassCreator ReferenceType NodeTypeDef StatementExpression MethodInvocation nodeTypeDefs MemberReference ctDef MemberReference ntDef put LocalVariableDeclaration ReferenceType QName VariableDeclarator ntName IfStatement MethodInvocation ctDef getAnonymous BlockStatement IfStatement BinaryOperation == MemberReference nameHint Literal null BlockStatement ThrowStatement ClassCreator ReferenceType SchemaConversionException Literal ""Anonymous complex type definition encountered without name hint"" End StatementExpression Assignment MemberReference namespace MethodInvocation MemberReference namespace noNull = LocalVariableDeclaration ReferenceType QName VariableDeclarator baseName ClassCreator ReferenceType QName MemberReference namespace BinaryOperation + MemberReference nameHint Literal ""Type"" LocalVariableDeclaration ReferenceType Integer VariableDeclarator count Cast ReferenceType Integer MethodInvocation nodeTypeBaseNames MemberReference baseName get IfStatement BinaryOperation == MemberReference count Literal null BlockStatement StatementExpression MethodInvocation nodeTypeBaseNames MemberReference baseName ClassCreator ReferenceType Integer Literal 0 put StatementExpression Assignment MemberReference ntName MemberReference baseName = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator newCount BinaryOperation + MethodInvocation count intValue Literal 1 StatementExpression Assignment MemberReference ntName ClassCreator ReferenceType QName MemberReference namespace BinaryOperation + BinaryOperation + MemberReference nameHint Literal ""Type_"" MethodInvocation Integer MemberReference newCount toString = StatementExpression MethodInvocation nodeTypeBaseNames MemberReference baseName ClassCreator ReferenceType Integer MemberReference newCount put End BlockStatement StatementExpression Assignment MemberReference ntName ClassCreator ReferenceType QName MethodInvocation MethodInvocation ctDef getNamespace noNull MethodInvocation ctDef getName = End StatementExpression MethodInvocation ntDef MemberReference ntName setName StatementExpression MethodInvocation MemberReference ntDef MemberReference ctDef buildNodeTypeDef ReturnStatement MemberReference ntName MethodDeclaration /**
     * buildNodeTypeDef
     */ Modifier private buildNodeTypeDef FormalParameter ReferenceType NodeTypeDef nodeTypeDef FormalParameter ReferenceType XSComplexTypeDefinition ctdef SchemaConversionException LocalVariableDeclaration ReferenceType List VariableDeclarator propDefList ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType List VariableDeclarator nodeDefList ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation nodeTypeDef ArrayCreator ReferenceType QName ArrayInitializer MemberReference QName NT_BASE setSupertypes StatementExpression MethodInvocation nodeTypeDef Literal false setMixin LocalVariableDeclaration BasicType boolean VariableDeclarator orderable Literal false StatementExpression MethodInvocation nodeTypeDef Literal null setPrimaryItemName LocalVariableDeclaration ReferenceType XSObjectList VariableDeclarator list MethodInvocation ctdef getAttributeUses ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation list getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType XSAttributeUse VariableDeclarator attribUse Cast ReferenceType XSAttributeUse MethodInvocation list MemberReference i item LocalVariableDeclaration ReferenceType PropDef VariableDeclarator propDef MethodInvocation MemberReference attribUse attributeUseToPropDef StatementExpression MethodInvocation propDefList MemberReference propDef add End LocalVariableDeclaration ReferenceType XSWildcard VariableDeclarator wildcard MethodInvocation ctdef getAttributeWildcard IfStatement BinaryOperation != MemberReference wildcard Literal null BlockStatement LocalVariableDeclaration ReferenceType PropDef VariableDeclarator propDef MethodInvocation wildcardPropDef StatementExpression MethodInvocation propDefList MemberReference propDef add End IfStatement BinaryOperation == MethodInvocation ctdef getContentType MemberReference XSComplexTypeDefinition CONTENTTYPE_SIMPLE BlockStatement LocalVariableDeclaration ReferenceType XSSimpleTypeDefinition VariableDeclarator stdef MethodInvocation ctdef getSimpleType LocalVariableDeclaration ReferenceType PropDef VariableDeclarator propDef MethodInvocation MemberReference stdef MemberReference XML_CONTENT_PROPERTY_NAME Literal false Literal false simpleTypeToPropDef StatementExpression MethodInvocation propDefList MemberReference propDef add IfStatement BinaryOperation || BinaryOperation == MethodInvocation ctdef getContentType MemberReference XSComplexTypeDefinition CONTENTTYPE_ELEMENT BinaryOperation == MethodInvocation ctdef getContentType MemberReference XSComplexTypeDefinition CONTENTTYPE_MIXED BlockStatement LocalVariableDeclaration ReferenceType XSParticle VariableDeclarator p MethodInvocation ctdef getParticle StatementExpression Assignment MemberReference orderable MethodInvocation MemberReference p MemberReference propDefList MemberReference nodeDefList particleToDefs = IfStatement BinaryOperation == MethodInvocation ctdef getContentType MemberReference XSComplexTypeDefinition CONTENTTYPE_EMPTY BlockStatement BlockStatement ThrowStatement ClassCreator ReferenceType SchemaConversionException Literal ""Unrecognized content type"" End End End IfStatement BinaryOperation == MethodInvocation ctdef getContentType MemberReference XSComplexTypeDefinition CONTENTTYPE_MIXED BlockStatement StatementExpression Assignment MemberReference orderable Literal true = StatementExpression MethodInvocation nodeDefList MethodInvocation createXMLTextNodeDef add StatementExpression MethodInvocation addXMLTextNodeType End StatementExpression MethodInvocation nodeTypeDef MemberReference orderable setOrderableChildNodes LocalVariableDeclaration ReferenceType QName VariableDeclarator nodeTypeName MethodInvocation nodeTypeDef getName ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation propDefList listIterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType PropDefImpl VariableDeclarator propDef Cast ReferenceType PropDefImpl MethodInvocation i next StatementExpression MethodInvocation propDef MemberReference nodeTypeName setDeclaringNodeType End ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation nodeDefList listIterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeDefImpl VariableDeclarator nodeDef Cast ReferenceType NodeDefImpl MethodInvocation i next StatementExpression MethodInvocation nodeDef MemberReference nodeTypeName setDeclaringNodeType End StatementExpression MethodInvocation nodeTypeDef Cast ReferenceType PropDef MethodInvocation propDefList ArrayCreator ReferenceType PropDef MethodInvocation propDefList size toArray setPropertyDefs StatementExpression MethodInvocation nodeTypeDef Cast ReferenceType NodeDef MethodInvocation nodeDefList ArrayCreator ReferenceType NodeDef MethodInvocation nodeDefList size toArray setChildNodeDefs MethodDeclaration /**
     * particleToDefs
     */ Modifier private BasicType boolean particleToDefs FormalParameter ReferenceType XSParticle particle FormalParameter ReferenceType List propDefList FormalParameter ReferenceType List nodeDefList SchemaConversionException LocalVariableDeclaration BasicType boolean VariableDeclarator orderable Literal false LocalVariableDeclaration ReferenceType XSTerm VariableDeclarator term MethodInvocation particle getTerm IfStatement BinaryOperation == MethodInvocation particle getMaxOccurs Literal 0 BlockStatement ReturnStatement MemberReference orderable End LocalVariableDeclaration BasicType boolean VariableDeclarator mandatory Literal false IfStatement BinaryOperation > MethodInvocation particle getMinOccurs Literal 0 BlockStatement StatementExpression Assignment MemberReference mandatory Literal true = End LocalVariableDeclaration BasicType boolean VariableDeclarator multiple Literal false IfStatement BinaryOperation || BinaryOperation > MethodInvocation particle getMaxOccurs Literal 1 MethodInvocation particle getMaxOccursUnbounded BlockStatement StatementExpression Assignment MemberReference multiple Literal true = End IfStatement BinaryOperation == MethodInvocation term getType MemberReference XSConstants ELEMENT_DECLARATION BlockStatement LocalVariableDeclaration ReferenceType XSElementDeclaration VariableDeclarator eDec Cast ReferenceType XSElementDeclaration MemberReference term LocalVariableDeclaration ReferenceType QName VariableDeclarator name ClassCreator ReferenceType QName MethodInvocation MethodInvocation eDec getNamespace noNull MethodInvocation eDec getName LocalVariableDeclaration ReferenceType XSTypeDefinition VariableDeclarator tDef MethodInvocation eDec getTypeDefinition IfStatement BinaryOperation == MethodInvocation tDef getTypeCategory MemberReference XSTypeDefinition SIMPLE_TYPE BlockStatement LocalVariableDeclaration ReferenceType XSSimpleTypeDefinition VariableDeclarator stDef Cast ReferenceType XSSimpleTypeDefinition MemberReference tDef LocalVariableDeclaration ReferenceType PropDef VariableDeclarator propDef MethodInvocation MemberReference stDef MemberReference name MemberReference mandatory MemberReference multiple simpleTypeToPropDef StatementExpression MethodInvocation propDefList MemberReference propDef add IfStatement BinaryOperation == MethodInvocation tDef getTypeCategory MemberReference XSTypeDefinition COMPLEX_TYPE BlockStatement LocalVariableDeclaration ReferenceType XSComplexTypeDefinition VariableDeclarator ctDef Cast ReferenceType XSComplexTypeDefinition MemberReference tDef IfStatement BinaryOperation && BinaryOperation && BinaryOperation == MethodInvocation ctDef getContentType MemberReference XSComplexTypeDefinition CONTENTTYPE_SIMPLE BinaryOperation == MethodInvocation ctDef MethodInvocation getLength getAttributeUses Literal 0 BinaryOperation == MethodInvocation ctDef getAttributeWildcard Literal null BlockStatement LocalVariableDeclaration ReferenceType XSSimpleTypeDefinition VariableDeclarator std MethodInvocation ctDef getSimpleType LocalVariableDeclaration ReferenceType PropDef VariableDeclarator pd MethodInvocation MemberReference std MemberReference name MemberReference mandatory MemberReference multiple simpleTypeToPropDef StatementExpression MethodInvocation propDefList MemberReference pd add BlockStatement LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator nd MethodInvocation MemberReference ctDef MemberReference name MemberReference mandatory MemberReference multiple complexTypeToNodeDef StatementExpression MethodInvocation nodeDefList MemberReference nd add End End End IfStatement BinaryOperation == MethodInvocation term getType MemberReference XSConstants WILDCARD BlockStatement StatementExpression MethodInvocation nodeDefList MethodInvocation wildcardNodeDef add IfStatement BinaryOperation == MethodInvocation term getType MemberReference XSConstants MODEL_GROUP BlockStatement LocalVariableDeclaration ReferenceType XSModelGroup VariableDeclarator mg Cast ReferenceType XSModelGroup MemberReference term IfStatement BinaryOperation == MethodInvocation mg getCompositor MemberReference XSModelGroup COMPOSITOR_SEQUENCE BlockStatement StatementExpression Assignment MemberReference orderable Literal true = End LocalVariableDeclaration ReferenceType XSObjectList VariableDeclarator list MethodInvocation mg getParticles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation list getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType XSParticle VariableDeclarator pp Cast ReferenceType XSParticle MethodInvocation list MemberReference i item StatementExpression MethodInvocation MemberReference pp MemberReference propDefList MemberReference nodeDefList particleToDefs End End End End ReturnStatement MemberReference orderable MethodDeclaration /**
     * attributeUseToPropDef
     */ Modifier private ReferenceType PropDef attributeUseToPropDef FormalParameter ReferenceType XSAttributeUse au LocalVariableDeclaration BasicType boolean VariableDeclarator mandatory MethodInvocation au getRequired LocalVariableDeclaration ReferenceType XSAttributeDeclaration VariableDeclarator ad MethodInvocation au getAttrDeclaration LocalVariableDeclaration ReferenceType QName VariableDeclarator name ClassCreator ReferenceType QName MethodInvocation MethodInvocation ad getNamespace noNull MethodInvocation ad getName LocalVariableDeclaration BasicType boolean VariableDeclarator multiple Literal false LocalVariableDeclaration ReferenceType XSSimpleTypeDefinition VariableDeclarator std MethodInvocation ad getTypeDefinition ReturnStatement MethodInvocation MemberReference std MemberReference name MemberReference mandatory MemberReference multiple simpleTypeToPropDef MethodDeclaration /**
     * simpleTypeToPropDef
     */ Modifier private ReferenceType PropDef simpleTypeToPropDef FormalParameter ReferenceType XSSimpleTypeDefinition std FormalParameter ReferenceType QName propertyName FormalParameter BasicType boolean mandatory FormalParameter BasicType boolean multiple LocalVariableDeclaration ReferenceType PropDefImpl VariableDeclarator propDef ClassCreator ReferenceType PropDefImpl StatementExpression MethodInvocation propDef MemberReference propertyName setName StatementExpression MethodInvocation propDef MemberReference mandatory setMandatory StatementExpression MethodInvocation propDef MemberReference multiple setMultiple LocalVariableDeclaration BasicType short VariableDeclarator kind MethodInvocation std getBuiltInKind LocalVariableDeclaration BasicType int VariableDeclarator propertyType MethodInvocation MemberReference kind convertBuiltInKindToPropertyType StatementExpression MethodInvocation propDef MemberReference propertyType setRequiredType StatementExpression MethodInvocation propDef ArrayCreator ReferenceType ValueConstraint ArrayInitializer setValueConstraints StatementExpression MethodInvocation propDef ArrayCreator ReferenceType InternalValue ArrayInitializer setDefaultValues StatementExpression MethodInvocation propDef Literal false setAutoCreated StatementExpression MethodInvocation propDef MemberReference OnParentVersionAction COPY setOnParentVersion StatementExpression MethodInvocation propDef Literal false setProtected ReturnStatement MemberReference propDef MethodDeclaration /**
     * complexTypeToNodeDef
     */ Modifier private ReferenceType NodeDef complexTypeToNodeDef FormalParameter ReferenceType XSComplexTypeDefinition ctDef FormalParameter ReferenceType QName nodeName FormalParameter BasicType boolean mandatory FormalParameter BasicType boolean multiple SchemaConversionException LocalVariableDeclaration ReferenceType NodeDefImpl VariableDeclarator nodeDef ClassCreator ReferenceType NodeDefImpl StatementExpression MethodInvocation nodeDef MemberReference nodeName setName StatementExpression MethodInvocation nodeDef MemberReference mandatory setMandatory StatementExpression MethodInvocation nodeDef MemberReference multiple setAllowsSameNameSiblings LocalVariableDeclaration ReferenceType QName VariableDeclarator nodeTypeName MethodInvocation MemberReference ctDef MethodInvocation nodeName getNamespaceURI MethodInvocation nodeName getLocalName convertComplexTypeDef StatementExpression MethodInvocation nodeDef MemberReference nodeTypeName setDefaultPrimaryType StatementExpression MethodInvocation nodeDef ArrayCreator ReferenceType QName ArrayInitializer MemberReference nodeTypeName setRequiredPrimaryTypes StatementExpression MethodInvocation nodeDef Literal false setAutoCreated StatementExpression MethodInvocation nodeDef MemberReference OnParentVersionAction COPY setOnParentVersion StatementExpression MethodInvocation nodeDef Literal false setProtected ReturnStatement MemberReference nodeDef MethodDeclaration /**
     * attributeWildcardToPropDef
     */ Modifier private ReferenceType PropDef wildcardPropDef LocalVariableDeclaration ReferenceType PropDefImpl VariableDeclarator propDef ClassCreator ReferenceType PropDefImpl StatementExpression MethodInvocation propDef MemberReference PropDef ANY_NAME setName StatementExpression MethodInvocation propDef Literal false setMandatory StatementExpression MethodInvocation propDef Literal false setMultiple StatementExpression MethodInvocation propDef MemberReference PropertyType UNDEFINED setRequiredType StatementExpression MethodInvocation propDef ArrayCreator ReferenceType ValueConstraint ArrayInitializer setValueConstraints StatementExpression MethodInvocation propDef ArrayCreator ReferenceType InternalValue ArrayInitializer setDefaultValues StatementExpression MethodInvocation propDef Literal false setAutoCreated StatementExpression MethodInvocation propDef MemberReference OnParentVersionAction COPY setOnParentVersion StatementExpression MethodInvocation propDef Literal false setProtected ReturnStatement MemberReference propDef MethodDeclaration /**
     * wildcardToNodeDef
     */ Modifier private ReferenceType NodeDef wildcardNodeDef LocalVariableDeclaration ReferenceType NodeDefImpl VariableDeclarator nodeDef ClassCreator ReferenceType NodeDefImpl StatementExpression MethodInvocation nodeDef MemberReference NodeDef ANY_NAME setName StatementExpression MethodInvocation nodeDef Literal false setMandatory StatementExpression MethodInvocation nodeDef Literal false setAllowsSameNameSiblings StatementExpression MethodInvocation nodeDef MemberReference NodeDef ANY_NAME setDefaultPrimaryType StatementExpression MethodInvocation nodeDef ArrayCreator ReferenceType QName ArrayInitializer setRequiredPrimaryTypes StatementExpression MethodInvocation nodeDef Literal false setAutoCreated StatementExpression MethodInvocation nodeDef MemberReference OnParentVersionAction COPY setOnParentVersion StatementExpression MethodInvocation nodeDef Literal false setProtected ReturnStatement MemberReference nodeDef MethodDeclaration /**
     * createXMLtextNodeDef
     */ Modifier private ReferenceType NodeDef createXMLTextNodeDef LocalVariableDeclaration ReferenceType NodeDefImpl VariableDeclarator nodeDef ClassCreator ReferenceType NodeDefImpl StatementExpression MethodInvocation nodeDef MemberReference QName JCR_XMLTEXT setName StatementExpression MethodInvocation nodeDef Literal false setMandatory StatementExpression MethodInvocation nodeDef Literal true setAllowsSameNameSiblings StatementExpression MethodInvocation nodeDef MemberReference XML_TEXT_NODETYPE_NAME setDefaultPrimaryType StatementExpression MethodInvocation nodeDef ArrayCreator ReferenceType QName ArrayInitializer MemberReference XML_TEXT_NODETYPE_NAME setRequiredPrimaryTypes StatementExpression MethodInvocation nodeDef Literal false setAutoCreated StatementExpression MethodInvocation nodeDef MemberReference OnParentVersionAction COPY setOnParentVersion StatementExpression MethodInvocation nodeDef Literal false setProtected ReturnStatement MemberReference nodeDef MethodDeclaration /**
     * addXMLTextNodeType
     */ Modifier private addXMLTextNodeType IfStatement MethodInvocation nodeTypeDefs MemberReference XML_TEXT_NODETYPE_NAME containsKey ReturnStatement End LocalVariableDeclaration ReferenceType NodeTypeDef VariableDeclarator ntd ClassCreator ReferenceType NodeTypeDef StatementExpression MethodInvocation ntd MemberReference XML_TEXT_NODETYPE_NAME setName StatementExpression MethodInvocation ntd ArrayCreator ReferenceType QName ArrayInitializer MemberReference QName NT_BASE setSupertypes StatementExpression MethodInvocation ntd Literal null setPrimaryItemName StatementExpression MethodInvocation ntd Literal false setMixin StatementExpression MethodInvocation ntd Literal false setOrderableChildNodes StatementExpression MethodInvocation ntd ArrayCreator ReferenceType NodeDef ArrayInitializer setChildNodeDefs LocalVariableDeclaration ReferenceType PropDefImpl VariableDeclarator pd ClassCreator ReferenceType PropDefImpl StatementExpression MethodInvocation pd MemberReference QName JCR_XMLCHARACTERS setName StatementExpression MethodInvocation pd MemberReference XML_TEXT_NODETYPE_NAME setDeclaringNodeType StatementExpression MethodInvocation pd Literal false setAutoCreated StatementExpression MethodInvocation pd ArrayCreator ReferenceType InternalValue ArrayInitializer setDefaultValues StatementExpression MethodInvocation pd Literal false setMandatory StatementExpression MethodInvocation pd Literal false setMultiple StatementExpression MethodInvocation pd MemberReference OnParentVersionAction COPY setOnParentVersion StatementExpression MethodInvocation pd Literal false setProtected StatementExpression MethodInvocation pd MemberReference PropertyType STRING setRequiredType StatementExpression MethodInvocation pd ArrayCreator ReferenceType ValueConstraint ArrayInitializer setValueConstraints StatementExpression MethodInvocation ntd ArrayCreator ReferenceType PropDef ArrayInitializer MemberReference pd setPropertyDefs StatementExpression MethodInvocation nodeTypeDefs MethodInvocation ntd getName MemberReference ntd put MethodDeclaration /**
     * convertBuiltInKindToPropertyType
     */ Modifier private BasicType int convertBuiltInKindToPropertyType FormalParameter BasicType short kind LocalVariableDeclaration BasicType int VariableDeclarator propertyType SwitchStatement MemberReference kind SwitchStatementCase MemberReference XSConstants ANYSIMPLETYPE_DT MemberReference XSConstants STRING_DT MemberReference XSConstants ID_DT MemberReference XSConstants ENTITY_DT MemberReference XSConstants NOTATION_DT MemberReference XSConstants NORMALIZEDSTRING_DT MemberReference XSConstants TOKEN_DT MemberReference XSConstants LANGUAGE_DT MemberReference XSConstants NMTOKEN_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType STRING = BreakStatement SwitchStatementCase MemberReference XSConstants BOOLEAN_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType BOOLEAN = BreakStatement SwitchStatementCase MemberReference XSConstants DECIMAL_DT MemberReference XSConstants FLOAT_DT MemberReference XSConstants DOUBLE_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType DOUBLE = BreakStatement SwitchStatementCase MemberReference XSConstants DURATION_DT MemberReference XSConstants DATETIME_DT MemberReference XSConstants TIME_DT MemberReference XSConstants DATE_DT MemberReference XSConstants GYEARMONTH_DT MemberReference XSConstants GYEAR_DT MemberReference XSConstants GMONTHDAY_DT MemberReference XSConstants GDAY_DT MemberReference XSConstants GMONTH_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType DATE = BreakStatement SwitchStatementCase MemberReference XSConstants HEXBINARY_DT MemberReference XSConstants BASE64BINARY_DT MemberReference XSConstants ANYURI_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType BINARY = BreakStatement SwitchStatementCase MemberReference XSConstants QNAME_DT MemberReference XSConstants NAME_DT MemberReference XSConstants NCNAME_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType NAME = BreakStatement SwitchStatementCase MemberReference XSConstants IDREF_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType REFERENCE = BreakStatement SwitchStatementCase MemberReference XSConstants INTEGER_DT MemberReference XSConstants NONPOSITIVEINTEGER_DT MemberReference XSConstants NEGATIVEINTEGER_DT MemberReference XSConstants LONG_DT MemberReference XSConstants INT_DT MemberReference XSConstants SHORT_DT MemberReference XSConstants BYTE_DT MemberReference XSConstants NONNEGATIVEINTEGER_DT MemberReference XSConstants UNSIGNEDLONG_DT MemberReference XSConstants UNSIGNEDINT_DT MemberReference XSConstants UNSIGNEDSHORT_DT MemberReference XSConstants UNSIGNEDBYTE_DT MemberReference XSConstants POSITIVEINTEGER_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType LONG = BreakStatement SwitchStatementCase MemberReference XSConstants LISTOFUNION_DT MemberReference XSConstants LIST_DT MemberReference XSConstants UNAVAILABLE_DT StatementExpression Assignment MemberReference propertyType MemberReference PropertyType STRING = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference propertyType MemberReference PropertyType STRING = BreakStatement End ReturnStatement MemberReference propertyType MethodDeclaration Modifier private ReferenceType String noNull FormalParameter ReferenceType String s ReturnStatement TernaryExpression BinaryOperation != MemberReference s Literal null MemberReference s Literal """"",0
99,99,"CompilationUnit PackageDeclaration org.apache.jackrabbit.decorator Import org.apache.jackrabbit.decorator.DecoratorFactory Import org.apache.jackrabbit.decorator.DecoratingRangeIterator Import javax.jcr.version.VersionIterator Import javax.jcr.version.Version Import javax.jcr.Session ClassDeclaration Modifier public /**
 */ DecoratingVersionIterator ConstructorDeclaration Modifier public /**
     * Creates a decorating version iterator.
     *
     * @param factory decorator factory
     * @param session decorated session
     * @param iterator underlying version iterator
     */ DecoratingVersionIterator FormalParameter ReferenceType DecoratorFactory factory FormalParameter ReferenceType Session session FormalParameter ReferenceType VersionIterator iterator StatementExpression SuperConstructorInvocation MemberReference factory MemberReference session MemberReference iterator MethodDeclaration /**
     * @inheritDoc
     */ Modifier public ReferenceType Version nextVersion ReturnStatement Cast ReferenceType Version MethodInvocation next ReferenceType DecoratingRangeIterator ReferenceType VersionIterator",0
236,236,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.xml.ElementIterator Import org.apache.jackrabbit.webdav.property.DavProperty Import org.apache.jackrabbit.webdav.property.DefaultDavProperty Import org.apache.jackrabbit.webdav.property.DavPropertyName Import org.apache.jackrabbit.webdav.property.DavPropertyNameSet Import org.apache.jackrabbit.webdav.property.PropContainer Import org.apache.jackrabbit.webdav.property.DavPropertyIterator Import org.apache.jackrabbit.webdav.property.DavPropertyNameIterator Import org.apache.jackrabbit.webdav.property.DavPropertySet Import org.w3c.dom.Element Import org.w3c.dom.Document Import java.util.HashMap Import java.util.Iterator ClassDeclaration Modifier public /**
 * <code>Response</code>...
 */ MultiStatusResponse FieldDeclaration Modifier private final static BasicType int VariableDeclarator TYPE_PROPSTAT Literal 0 FieldDeclaration Modifier private final static BasicType int VariableDeclarator TYPE_HREFSTATUS Literal 1 FieldDeclaration /**
     * The type of MultiStatusResponse
     */ Modifier private final BasicType int VariableDeclarator type FieldDeclaration /**
     * The content the 'href' element for this response
     */ Modifier private final ReferenceType String VariableDeclarator href FieldDeclaration /**
     * An optional response description.
     */ Modifier private final ReferenceType String VariableDeclarator responseDescription FieldDeclaration /**
     * Type of MultiStatus response: Href + Status
     */ Modifier private ReferenceType Status VariableDeclarator status FieldDeclaration /**
     * Type of MultiStatus response: PropStat
     * Hashmap containing all status
     */ Modifier private ReferenceType HashMap VariableDeclarator statusMap ClassCreator ReferenceType HashMap ConstructorDeclaration Modifier private MultiStatusResponse FormalParameter ReferenceType String href FormalParameter ReferenceType String responseDescription FormalParameter BasicType int type IfStatement MethodInvocation ! MemberReference href isValidHref BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + BinaryOperation + Literal ""Invalid href ('"" MemberReference href Literal ""')"" End StatementExpression Assignment This MemberReference href MemberReference href = StatementExpression Assignment This MemberReference responseDescription MemberReference responseDescription = StatementExpression Assignment This MemberReference type MemberReference type = ConstructorDeclaration Modifier public /**
     * Constructs an WebDAV multistatus response
     *
     * @param href
     * @param status
     * @param responseDescription
     */ MultiStatusResponse FormalParameter ReferenceType String href FormalParameter ReferenceType Status status FormalParameter ReferenceType String responseDescription StatementExpression ExplicitConstructorInvocation MemberReference href MemberReference responseDescription MemberReference TYPE_HREFSTATUS IfStatement BinaryOperation == MemberReference status Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Status must not be null in case of a multistatus reponse that consists of href + status only."" End StatementExpression Assignment This MemberReference status MemberReference status = ConstructorDeclaration Modifier public /**
     * Constructs an WebDAV multistatus response for a given resource. This
     * would be used by COPY, MOVE, DELETE, LOCK that require a multistatus
     * in case of error with a resource other than the resource identified in the
     * Request-URI.<br>
     * The response description is set to <code>null</code>.
     *
     * @param href
     * @param statusCode
     */ MultiStatusResponse FormalParameter ReferenceType String href FormalParameter BasicType int statusCode StatementExpression ExplicitConstructorInvocation MemberReference href MemberReference statusCode Literal null ConstructorDeclaration Modifier public /**
     * Constructs an WebDAV multistatus response for a given resource. This
     * would be used by COPY, MOVE, DELETE, LOCK that require a multistatus
     * in case of error with a resource other than the resource identified in the
     * Request-URI.
     *
     * @param href
     * @param statusCode
     * @param responseDescription
     */ MultiStatusResponse FormalParameter ReferenceType String href FormalParameter BasicType int statusCode FormalParameter ReferenceType String responseDescription StatementExpression ExplicitConstructorInvocation MemberReference href ClassCreator ReferenceType Status MemberReference statusCode MemberReference responseDescription ConstructorDeclaration Modifier public /**
     * Constructs an empty WebDAV multistatus response of type 'PropStat'
     */ MultiStatusResponse FormalParameter ReferenceType String href FormalParameter ReferenceType String responseDescription StatementExpression ExplicitConstructorInvocation MemberReference href MemberReference responseDescription MemberReference TYPE_PROPSTAT ConstructorDeclaration Modifier public /**
     * Constucts a WebDAV multistatus response and retrieves the resource properties
     * according to the given <code>DavPropertyNameSet</code>.
     *
     * @param resource
     * @param propNameSet
     */ MultiStatusResponse FormalParameter ReferenceType DavResource resource FormalParameter ReferenceType DavPropertyNameSet propNameSet StatementExpression ExplicitConstructorInvocation MemberReference resource MemberReference propNameSet MemberReference PROPFIND_BY_PROPERTY ConstructorDeclaration Modifier public /**
     * Constucts a WebDAV multistatus response and retrieves the resource properties
     * according to the given <code>DavPropertyNameSet</code>. It adds all known
     * property to the '200' set, while unknown properties are added to the '404' set.
     * <p/>
     * Note, that the set of property names is ignored in case of a {@link #PROPFIND_ALL_PROP}
     * and {@link #PROPFIND_PROPERTY_NAMES} propFindType.
     *
     * @param resource     The resource to retrieve the property from
     * @param propNameSet  The property name set as obtained from the request body.
     * @param propFindType any of the following values: {@link #PROPFIND_ALL_PROP},
     *                     {@link #PROPFIND_BY_PROPERTY}, {@link #PROPFIND_PROPERTY_NAMES}
     */ MultiStatusResponse FormalParameter ReferenceType DavResource resource FormalParameter ReferenceType DavPropertyNameSet propNameSet FormalParameter BasicType int propFindType StatementExpression ExplicitConstructorInvocation MethodInvocation resource getHref Literal null MemberReference TYPE_PROPSTAT IfStatement BinaryOperation == MemberReference propFindType MemberReference PROPFIND_PROPERTY_NAMES BlockStatement LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator status200 MethodInvocation MemberReference DavServletResponse SC_OK Literal true getPropContainer LocalVariableDeclaration ReferenceType DavPropertyName VariableDeclarator propNames MethodInvocation resource getPropertyNames ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference propNames length MemberReference ++ i BlockStatement StatementExpression MethodInvocation status200 MemberReference ArraySelector MemberReference i propNames addContent End BlockStatement LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator status200 MethodInvocation MemberReference DavServletResponse SC_OK Literal false getPropContainer StatementExpression Assignment MemberReference propNameSet ClassCreator ReferenceType DavPropertyNameSet MemberReference propNameSet = LocalVariableDeclaration ReferenceType DavPropertyIterator VariableDeclarator iter MethodInvocation resource MethodInvocation iterator getProperties WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType DavProperty VariableDeclarator property MethodInvocation iter nextProperty IfStatement BinaryOperation || BinaryOperation && BinaryOperation == MemberReference propFindType MemberReference PROPFIND_ALL_PROP MethodInvocation ! property isProtected MethodInvocation propNameSet MethodInvocation property getName remove BlockStatement StatementExpression MethodInvocation status200 MemberReference property addContent End End IfStatement BinaryOperation && MethodInvocation ! propNameSet isEmpty BinaryOperation != MemberReference propFindType MemberReference PROPFIND_ALL_PROP BlockStatement LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator status404 MethodInvocation MemberReference DavServletResponse SC_NOT_FOUND Literal true getPropContainer LocalVariableDeclaration ReferenceType DavPropertyNameIterator VariableDeclarator iter1 MethodInvocation propNameSet iterator WhileStatement MethodInvocation iter1 hasNext BlockStatement LocalVariableDeclaration ReferenceType DavPropertyName VariableDeclarator propName MethodInvocation iter1 nextPropertyName StatementExpression MethodInvocation status404 MemberReference propName addContent End End End MethodDeclaration /**
     * Returns the href
     *
     * @return href
     * @see MultiStatusResponse#getHref()
     */ Modifier public ReferenceType String getHref ReturnStatement MemberReference href MethodDeclaration /**
     * @return responseDescription
     * @see MultiStatusResponse#getResponseDescription()
     */ Modifier public ReferenceType String getResponseDescription ReturnStatement MemberReference responseDescription MethodDeclaration /**
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(org.w3c.dom.Document)
     * @param document
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator response MethodInvocation DomUtil MemberReference document MemberReference XML_RESPONSE MemberReference NAMESPACE createElement StatementExpression MethodInvocation response MethodInvocation DomUtil MethodInvocation getHref MemberReference document hrefToXml appendChild IfStatement BinaryOperation == MemberReference type MemberReference TYPE_PROPSTAT BlockStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation statusMap MethodInvocation iterator keySet WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Integer VariableDeclarator statusKey Cast ReferenceType Integer MethodInvocation iter next LocalVariableDeclaration ReferenceType Status VariableDeclarator status ClassCreator ReferenceType Status MethodInvocation statusKey intValue LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator propCont Cast ReferenceType PropContainer MethodInvocation statusMap MemberReference statusKey get LocalVariableDeclaration ReferenceType Element VariableDeclarator propstat MethodInvocation DomUtil MemberReference document MemberReference XML_PROPSTAT MemberReference NAMESPACE createElement StatementExpression MethodInvocation propstat MethodInvocation propCont MemberReference document toXml appendChild StatementExpression MethodInvocation propstat MethodInvocation status MemberReference document toXml appendChild StatementExpression MethodInvocation response MemberReference propstat appendChild End BlockStatement StatementExpression MethodInvocation response MethodInvocation status MemberReference document toXml appendChild End LocalVariableDeclaration ReferenceType String VariableDeclarator description MethodInvocation getResponseDescription IfStatement BinaryOperation != MemberReference description Literal null BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator desc MethodInvocation DomUtil MemberReference document MemberReference XML_RESPONSEDESCRIPTION MemberReference NAMESPACE createElement StatementExpression MethodInvocation DomUtil MemberReference desc MemberReference description setText StatementExpression MethodInvocation response MemberReference desc appendChild End ReturnStatement MemberReference response MethodDeclaration /**
     * Adds a property to this response '200' propstat set.
     *
     * @param property the property to add
     */ Modifier public add FormalParameter ReferenceType DavProperty property StatementExpression MethodInvocation MemberReference TYPE_PROPSTAT checkType LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator status200 MethodInvocation MemberReference DavServletResponse SC_OK Literal false getPropContainer StatementExpression MethodInvocation status200 MemberReference property addContent MethodDeclaration /**
     * Adds a property name to this response '200' propstat set.
     *
     * @param propertyName the property name to add
     */ Modifier public add FormalParameter ReferenceType DavPropertyName propertyName StatementExpression MethodInvocation MemberReference TYPE_PROPSTAT checkType LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator status200 MethodInvocation MemberReference DavServletResponse SC_OK Literal true getPropContainer StatementExpression MethodInvocation status200 MemberReference propertyName addContent MethodDeclaration /**
     * Adds a property to this response
     *
     * @param property the property to add
     * @param status   the status of the response set to select
     */ Modifier public add FormalParameter ReferenceType DavProperty property FormalParameter BasicType int status StatementExpression MethodInvocation MemberReference TYPE_PROPSTAT checkType LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator propCont MethodInvocation MemberReference status Literal false getPropContainer StatementExpression MethodInvocation propCont MemberReference property addContent MethodDeclaration /**
     * Adds a property name to this response
     *
     * @param propertyName the property name to add
     * @param status       the status of the response set to select
     */ Modifier public add FormalParameter ReferenceType DavPropertyName propertyName FormalParameter BasicType int status StatementExpression MethodInvocation MemberReference TYPE_PROPSTAT checkType LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator propCont MethodInvocation MemberReference status Literal true getPropContainer StatementExpression MethodInvocation propCont MemberReference propertyName addContent MethodDeclaration /**
     *
     * @param status
     * @return
     */ Modifier private ReferenceType PropContainer getPropContainer FormalParameter BasicType int status FormalParameter BasicType boolean forNames LocalVariableDeclaration ReferenceType Integer VariableDeclarator statusKey ClassCreator ReferenceType Integer MemberReference status LocalVariableDeclaration ReferenceType PropContainer VariableDeclarator propContainer LocalVariableDeclaration ReferenceType Object VariableDeclarator entry MethodInvocation statusMap MemberReference statusKey get IfStatement BinaryOperation == MemberReference entry Literal null BlockStatement IfStatement MemberReference forNames BlockStatement StatementExpression Assignment MemberReference propContainer ClassCreator ReferenceType DavPropertyNameSet = BlockStatement StatementExpression Assignment MemberReference propContainer ClassCreator ReferenceType DavPropertySet = End StatementExpression MethodInvocation statusMap MemberReference statusKey MemberReference propContainer put BlockStatement StatementExpression Assignment MemberReference propContainer Cast ReferenceType PropContainer MemberReference entry = End ReturnStatement MemberReference propContainer MethodDeclaration Modifier private checkType FormalParameter BasicType int type IfStatement BinaryOperation != This MemberReference type MemberReference type BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""The given MultiStatusResponse is not of the required type."" End MethodDeclaration /**
     * Get properties present in this response for the given status code. In case
     * this MultiStatusResponse does not represent a 'propstat' response, always
     * an empty {@link DavPropertySet} will be returned.
     *
     * @param status
     * @return property set
     */ Modifier public ReferenceType DavPropertySet getProperties FormalParameter BasicType int status LocalVariableDeclaration ReferenceType Integer VariableDeclarator key ClassCreator ReferenceType Integer MemberReference status IfStatement MethodInvocation statusMap MemberReference key containsKey BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator mapEntry MethodInvocation statusMap MemberReference key get IfStatement BinaryOperation && BinaryOperation != MemberReference mapEntry Literal null BinaryOperation instanceof MemberReference mapEntry ReferenceType DavPropertySet BlockStatement ReturnStatement Cast ReferenceType DavPropertySet MemberReference mapEntry End End ReturnStatement ClassCreator ReferenceType DavPropertySet MethodDeclaration /**
     * Get property names present in this response for the given status code. In case
     * this MultiStatusResponse does not represent a 'propstat' response, always
     * an empty {@link DavPropertyNameSet} will be returned.
     *
     * @param status
     * @return property names
     */ Modifier public ReferenceType DavPropertyNameSet getPropertyNames FormalParameter BasicType int status LocalVariableDeclaration ReferenceType Integer VariableDeclarator key ClassCreator ReferenceType Integer MemberReference status IfStatement MethodInvocation statusMap MemberReference key containsKey BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator mapEntry MethodInvocation statusMap MemberReference key get IfStatement BinaryOperation && BinaryOperation != MemberReference mapEntry Literal null BinaryOperation instanceof MemberReference mapEntry ReferenceType DavPropertyNameSet BlockStatement ReturnStatement Cast ReferenceType DavPropertyNameSet MemberReference mapEntry End End ReturnStatement ClassCreator ReferenceType DavPropertyNameSet MethodDeclaration /**
     * Build a new response object from the given xml element.
     *
     * @param responseElement
     * @return new <code>MultiStatusResponse</code> instance
     * @throws IllegalArgumentException if the specified element is <code>null</code>
     * or not a DAV:response element or if the mandatory DAV:href child is
     * missing.
     */ Modifier public static ReferenceType MultiStatusResponse createFromXml FormalParameter ReferenceType Element responseElement IfStatement MethodInvocation ! DomUtil MemberReference responseElement MemberReference XML_RESPONSE MemberReference NAMESPACE matches BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""DAV:response element required."" End LocalVariableDeclaration ReferenceType String VariableDeclarator href MethodInvocation DomUtil MemberReference responseElement MemberReference XML_HREF MemberReference NAMESPACE getChildTextTrim IfStatement BinaryOperation == MemberReference href Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""DAV:response element must contain a DAV:href element expected."" End LocalVariableDeclaration ReferenceType String VariableDeclarator statusLine MethodInvocation DomUtil MemberReference responseElement MemberReference XML_STATUS MemberReference NAMESPACE getChildText LocalVariableDeclaration ReferenceType String VariableDeclarator responseDescription MethodInvocation DomUtil MemberReference responseElement MemberReference XML_RESPONSEDESCRIPTION MemberReference NAMESPACE getChildText LocalVariableDeclaration ReferenceType MultiStatusResponse VariableDeclarator response IfStatement BinaryOperation != MemberReference statusLine Literal null BlockStatement LocalVariableDeclaration ReferenceType Status VariableDeclarator status MethodInvocation Status MemberReference statusLine parse StatementExpression Assignment MemberReference response ClassCreator ReferenceType MultiStatusResponse MemberReference href MemberReference status MemberReference responseDescription = BlockStatement StatementExpression Assignment MemberReference response ClassCreator ReferenceType MultiStatusResponse MemberReference href MemberReference responseDescription MemberReference TYPE_PROPSTAT = LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator it MethodInvocation DomUtil MemberReference responseElement MemberReference XML_PROPSTAT MemberReference NAMESPACE getChildren WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator propstat MethodInvocation it nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator propstatus MethodInvocation DomUtil MemberReference propstat MemberReference XML_STATUS MemberReference NAMESPACE getChildText LocalVariableDeclaration ReferenceType Element VariableDeclarator prop MethodInvocation DomUtil MemberReference propstat MemberReference XML_PROP MemberReference NAMESPACE getChildElement IfStatement BinaryOperation && BinaryOperation != MemberReference propstatus Literal null BinaryOperation != MemberReference prop Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator statusCode MethodInvocation Status MethodInvocation getStatusCode MemberReference propstatus parse LocalVariableDeclaration ReferenceType ElementIterator VariableDeclarator propIt MethodInvocation DomUtil MemberReference prop getChildren WhileStatement MethodInvocation propIt hasNext BlockStatement LocalVariableDeclaration ReferenceType Element VariableDeclarator el MethodInvocation propIt nextElement IfStatement MethodInvocation DomUtil MemberReference el hasContent BlockStatement LocalVariableDeclaration ReferenceType DavProperty VariableDeclarator property MethodInvocation DefaultDavProperty MemberReference el createFromXml StatementExpression MethodInvocation response MemberReference property MemberReference statusCode add BlockStatement LocalVariableDeclaration ReferenceType DavPropertyName VariableDeclarator propName MethodInvocation DavPropertyName MemberReference el createFromXml StatementExpression MethodInvocation response MemberReference propName MemberReference statusCode add End End End End End ReturnStatement MemberReference response MethodDeclaration /**
     * @param href
     * @return false if the given href is <code>null</code> or empty string.
     */ Modifier private static BasicType boolean isValidHref FormalParameter ReferenceType String href ReturnStatement BinaryOperation && BinaryOperation != MemberReference href Literal null Literal ! MethodInvocation MemberReference href equals """" ReferenceType XmlSerializable ReferenceType DavConstants",0
564,564,,0
258,258,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.util Import java.util.ArrayList Import java.util.HashMap Import java.util.Iterator ClassDeclaration Modifier public /**
 * Simple helper class that can be used to keep track of uuid mappings
 * (e.g. if the uuid of an imported or copied node is mapped to a new uuid)
 * and processed (e.g. imported or copied) reference properties that might
 * need correcting depending on the uuid mappings.
 */ ReferenceChangeTracker FieldDeclaration /**
     * mapping <original uuid> to <new uuid> of mix:referenceable nodes
     */ Modifier private final ReferenceType HashMap VariableDeclarator uuidMap ClassCreator ReferenceType HashMap FieldDeclaration /**
     * list of processed reference properties that might need correcting
     */ Modifier private final ReferenceType ArrayList VariableDeclarator references ClassCreator ReferenceType ArrayList ConstructorDeclaration Modifier public /**
     * Creates a new instance.
     */ ReferenceChangeTracker MethodDeclaration /**
     * Resets all internal state.
     */ Modifier public clear StatementExpression MethodInvocation uuidMap clear StatementExpression MethodInvocation references clear MethodDeclaration /**
     * Store the given uuid mapping for later lookup using
     * <code>{@link #getMappedUUID(String)}</code>.
     *
     * @param oldUUID old uuid
     * @param newUUID new uuid
     */ Modifier public mappedUUID FormalParameter ReferenceType String oldUUID FormalParameter ReferenceType String newUUID StatementExpression MethodInvocation uuidMap MemberReference oldUUID MemberReference newUUID put MethodDeclaration /**
     * Store the given reference property for later retrieval using
     * <code>{@link #getProcessedReferences()}</code>.
     *
     * @param refProp reference property
     */ Modifier public processedReference FormalParameter ReferenceType Object refProp StatementExpression MethodInvocation references MemberReference refProp add MethodDeclaration /**
     * Returns the new UUID to which <code>oldUUID</code> has been mapped
     * or <code>null</code> if no such mapping exists.
     *
     * @param oldUUID old uuid
     * @return mapped new uuid or <code>null</code> if no such mapping exists
     * @see #mappedUUID(String, String)
     */ Modifier public ReferenceType String getMappedUUID FormalParameter ReferenceType String oldUUID ReturnStatement Cast ReferenceType String MethodInvocation uuidMap MemberReference oldUUID get MethodDeclaration /**
     * Returns an iterator over all processed reference properties.
     *
     * @return an iterator over all processed reference properties
     * @see #processedReference(Object)
     */ Modifier public ReferenceType Iterator getProcessedReferences ReturnStatement MethodInvocation references iterator",1
556,556,,0
883,883,,0
689,689,,1
329,329,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core Import java.io.IOException Import java.io.InputStream Import java.util.Collections Import java.util.HashSet Import java.util.List Import java.util.Properties Import java.util.Set Import javax.jcr.Credentials Import javax.jcr.Repository Import javax.jcr.RepositoryException Import javax.jcr.Session Import org.apache.jackrabbit.core.config.ConfigurationException Import org.apache.jackrabbit.core.config.RepositoryConfig Import org.apache.log4j.Logger ClassDeclaration Modifier public /**
 * A repository proxy that automatically initializes and shuts down the
 * underlying repository instance when the first session is opened
 * or the last one closed. As long as all sessions are properly closed
 * when no longer used, this class can be used to avoid having to explicitly
 * shut down the repository.
 */ TransientRepository FieldDeclaration /**
     * The logger instance used to log the repository and session lifecycles.
     */ Modifier private final static ReferenceType Logger VariableDeclarator logger MethodInvocation Logger ClassReference ReferenceType TransientRepository getLogger InterfaceDeclaration Modifier public /**
     * Factory interface for creating {@link RepositoryImpl} instances.
     * Used to give greater control of the repository initialization process
     * to users of the TransientRepository class.
     */ RepositoryFactory MethodDeclaration /**
         * Creates and intializes a repository instance. The returned instance
         * will be used and finally shut down by the caller of this method.
         *
         * @return initialized repository instance
         * @throws RepositoryException if an instance can not be created
         */ ReferenceType RepositoryImpl getRepository RepositoryException FieldDeclaration /**
     * The repository configuration. Set in the constructor and used to
     * initialize the repository instance when the first session is opened.
     */ Modifier private final ReferenceType RepositoryFactory VariableDeclarator factory FieldDeclaration /**
     * The initialized repository instance. Set when the first session is
     * opened and cleared when the last one is closed.
     */ Modifier private ReferenceType RepositoryImpl VariableDeclarator repository FieldDeclaration /**
     * The set of open sessions. When no more open sessions remain, the
     * repository instance is automatically shut down until a new session
     * is opened.
     */ Modifier private final ReferenceType Set VariableDeclarator sessions FieldDeclaration /**
     * The static repository descriptors. The default {@link RepositoryImpl}
     * descriptors are loaded as the static descriptors and used whenever a
     * live repository instance is not available (no open sessions).
     */ Modifier private final ReferenceType Properties VariableDeclarator descriptors ConstructorDeclaration Modifier public /**
     * Creates a transient repository proxy that will use the given repository
     * factory to initialize the underlying repository instances.
     * 
     * @param factory repository factory
     * @throws IOException if the static repository descriptors cannot be loaded
     */ TransientRepository FormalParameter ReferenceType RepositoryFactory factory IOException StatementExpression Assignment This MemberReference factory MemberReference factory = StatementExpression Assignment This MemberReference repository Literal null = StatementExpression Assignment This MemberReference sessions ClassCreator ReferenceType HashSet = StatementExpression Assignment This MemberReference descriptors ClassCreator ReferenceType Properties = LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in ClassReference MethodInvocation Literal ""repository.properties"" getResourceAsStream ReferenceType RepositoryImpl TryStatement StatementExpression MethodInvocation descriptors MemberReference in load StatementExpression MethodInvocation in close ConstructorDeclaration Modifier public /**
     * Creates a transient repository proxy that will use the given repository
     * configuration to initialize the underlying repository instances.
     * 
     * @param config repository configuration
     * @throws IOException if the static repository descriptors cannot be loaded
     */ TransientRepository FormalParameter Modifier final ReferenceType RepositoryConfig config IOException StatementExpression ExplicitConstructorInvocation ClassCreator ReferenceType RepositoryFactory MethodDeclaration Modifier public ReferenceType RepositoryImpl getRepository RepositoryException ReturnStatement MethodInvocation RepositoryImpl MemberReference config create ConstructorDeclaration Modifier public /**
     * Creates a transient repository proxy that will use the given repository
     * configuration file and home directory paths to initialize the underlying
     * repository instances.
     * 
     * @param config repository configuration file
     * @param home repository home directory
     * @throws ConfigurationException if the configuration file is invalid
     * @throws IOException if the static repository descriptors cannot be loaded
     */ TransientRepository FormalParameter ReferenceType String config FormalParameter ReferenceType String home ConfigurationException IOException StatementExpression ExplicitConstructorInvocation MethodInvocation RepositoryConfig MemberReference config MemberReference home create MethodDeclaration /**
     * Returns the available descriptor keys. If the underlying repository
     * is initialized, then the call is proxied to it, otherwise the static
     * descriptor keys are returned.
     *
     * @return descriptor keys
     * @see Repository#getDescriptorKeys()
     */ Modifier public synchronized ReferenceType String getDescriptorKeys IfStatement BinaryOperation != MemberReference repository Literal null BlockStatement ReturnStatement MethodInvocation repository getDescriptorKeys BlockStatement LocalVariableDeclaration ReferenceType List VariableDeclarator keys MethodInvocation Collections MethodInvocation descriptors propertyNames list StatementExpression MethodInvocation Collections MemberReference keys sort ReturnStatement Cast ReferenceType String MethodInvocation keys ArrayCreator ReferenceType String MethodInvocation keys size toArray End MethodDeclaration /**
     * Returns the identified repository descriptor. If the underlying
     * repository is initialized, then the call is proxied to it, otherwise
     * the static descriptors are used.
     *
     * @param key descriptor key
     * @return descriptor value
     * @see Repository#getDescriptor(String)
     */ Modifier public synchronized ReferenceType String getDescriptor FormalParameter ReferenceType String key IfStatement BinaryOperation != MemberReference repository Literal null BlockStatement ReturnStatement MethodInvocation repository MemberReference key getDescriptor BlockStatement ReturnStatement MethodInvocation descriptors MemberReference key getProperty End MethodDeclaration /**
     * Removes the given session from the set of open sessions. If no open
     * sessions remain, then the underlying repository instance is shut down.
     *
     * @param session closed session
     */ Modifier private synchronized removeSession FormalParameter ReferenceType SessionImpl session StatementExpression MethodInvocation sessions MemberReference session remove StatementExpression MethodInvocation logger Literal ""Session closed"" info IfStatement MethodInvocation sessions isEmpty BlockStatement StatementExpression MethodInvocation repository MemberReference session loggedOut StatementExpression MethodInvocation logger Literal ""Shutting down transient repository"" debug StatementExpression MethodInvocation repository shutdown StatementExpression MethodInvocation logger Literal ""Transient repository shut down"" info StatementExpression Assignment MemberReference repository Literal null = End MethodDeclaration /**
     * Logs in to the content repository. Initializes the underlying repository
     * instance if needed. The opened session is added to the set of open
     * sessions and a session listener is added to track when the session gets
     * closed.
     *
     * @param credentials login credentials
     * @param workspaceName workspace name
     * @return new session
     * @throws RepositoryException if the session could not be created
     * @see Repository#login(Credentials,String)
     */ Modifier public synchronized ReferenceType Session login FormalParameter ReferenceType Credentials credentials FormalParameter ReferenceType String workspaceName RepositoryException IfStatement BinaryOperation == MemberReference repository Literal null BlockStatement StatementExpression MethodInvocation logger Literal ""Initializing transient repository"" debug StatementExpression Assignment MemberReference repository MethodInvocation factory getRepository = StatementExpression MethodInvocation logger Literal ""Transient repository initialized"" info End StatementExpression MethodInvocation logger Literal ""Opening a new session"" debug LocalVariableDeclaration ReferenceType SessionImpl VariableDeclarator session Cast ReferenceType SessionImpl MethodInvocation repository MemberReference credentials MemberReference workspaceName login StatementExpression MethodInvocation sessions MemberReference session add StatementExpression MethodInvocation session ClassCreator ReferenceType SessionListener MethodDeclaration Modifier public loggedOut FormalParameter ReferenceType SessionImpl session StatementExpression MethodInvocation MemberReference session removeSession MethodDeclaration Modifier public loggingOut FormalParameter ReferenceType SessionImpl session addListener StatementExpression MethodInvocation logger Literal ""Session opened"" info ReturnStatement MemberReference session MethodDeclaration /**
     * Calls {@link #login(Credentials, String)} with a <code>null</code>
     * workspace name.
     *
     * @param credentials login credentials
     * @return new session
     * @throws RepositoryException if the session could not be created
     * @see Repository#login(Credentials)
     */ Modifier public ReferenceType Session login FormalParameter ReferenceType Credentials credentials RepositoryException ReturnStatement MethodInvocation MemberReference credentials Literal null login MethodDeclaration /**
     * Calls {@link #login(Credentials, String)} with <code>null</code> login
     * credentials.
     *
     * @param workspaceName workspace name
     * @return new session
     * @throws RepositoryException if the session could not be created
     * @see Repository#login(String)
     */ Modifier public ReferenceType Session login FormalParameter ReferenceType String workspaceName RepositoryException ReturnStatement MethodInvocation Literal null MemberReference workspaceName login MethodDeclaration /**
     * Calls {@link #login(Credentials, String)} with <code>null</code> login
     * credentials and a <code>null</code> workspace name.
     *
     * @return new session
     * @throws RepositoryException if the session could not be created
     * @see Repository#login(Credentials)
     */ Modifier public ReferenceType Session login RepositoryException ReturnStatement MethodInvocation Literal null Literal null login ReferenceType Repository",1
356,356,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib.filter Import javax.jcr.Item Import org.apache.commons.jexl.Expression Import org.apache.commons.jexl.ExpressionFactory Import org.apache.commons.jexl.JexlContext Import org.apache.commons.jexl.JexlHelper Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory ClassDeclaration Modifier public /**
 * It evaluates any javax.jcr.Item based on a JEXL valid expression which
 * returns a Boolean instance. The javax.jcr.Item is added to the JEXLContext
 * with the name of ""item"". A valid JEXL expression would be
 * ""item.name.equals('MyNodeName')"".
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ JEXLItemFilter FieldDeclaration Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType JEXLItemFilter getLog FieldDeclaration /** Contex */ ReferenceType JexlContext VariableDeclarator jc MethodInvocation JexlHelper createContext FieldDeclaration Modifier private ReferenceType Expression VariableDeclarator expression MethodDeclaration /**
     * Set the expression to evaluate
     */ Modifier public setExpression FormalParameter ReferenceType String exp TryStatement StatementExpression Assignment This MemberReference expression MethodInvocation ExpressionFactory MemberReference exp createExpression = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to create expression. "" MethodInvocation e getMessage MemberReference e error MethodDeclaration /**
     * Evaluate a node. <br>
     */ Modifier public BasicType boolean evaluate FormalParameter ReferenceType Object o TryStatement LocalVariableDeclaration ReferenceType Item VariableDeclarator item Cast ReferenceType Item MemberReference o StatementExpression MethodInvocation jc MethodInvocation clear getVars StatementExpression MethodInvocation jc MethodInvocation Literal ""item"" MemberReference item put getVars ReturnStatement Cast ReferenceType Boolean This MemberReference expression MethodInvocation MemberReference jc evaluate CatchClause CatchClauseParameter Exception e IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to evalute "" MethodInvocation e getMessage MemberReference e debug End ReturnStatement Literal false ReferenceType ItemFilter",1
371,371,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import java.io.BufferedReader Import java.io.IOException Import java.io.PrintWriter Import java.io.StringReader Import javax.jcr.Item Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.Property Import javax.jcr.RepositoryException Import javax.jcr.Value Import javax.jcr.ValueFormatException Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.jackrabbit.command.CommandHelper Import org.apache.jackrabbit.command.CommandException ClassDeclaration Modifier public /**
 * Display the content of a <code>Property</code> or a <code>Node</code> of
 * type nt:file or nt:resource.
 */ Cat FieldDeclaration /** property name */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" FieldDeclaration /** index. [optional] argument to display multivalue properties */ Modifier private ReferenceType String VariableDeclarator indexKey Literal ""index"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get LocalVariableDeclaration ReferenceType Item VariableDeclarator item MethodInvocation CommandHelper MemberReference ctx MemberReference path getItem IfStatement MethodInvocation item isNode BlockStatement StatementExpression MethodInvocation MemberReference ctx Cast ReferenceType Node MemberReference item printNode BlockStatement StatementExpression MethodInvocation MemberReference ctx Cast ReferenceType Property MemberReference item printProperty End ReturnStatement Literal false MethodDeclaration /**
     * @return the path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param path
     *        the path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String path StatementExpression Assignment This MemberReference pathKey MemberReference path = MethodDeclaration /**
     * @param ctx
     *        the <code>Context</code>
     * @param n
     *        the <code>Node</code>
     * @throws PathNotFoundException
     * @throws CommandException
     * @throws RepositoryException
     * @throws IllegalStateException
     * @throws IOException
     */ Modifier private printNode FormalParameter ReferenceType Context ctx FormalParameter ReferenceType Node n PathNotFoundException CommandException RepositoryException IllegalStateException IOException IfStatement MethodInvocation n Literal ""nt:file"" isNodeType BlockStatement StatementExpression MethodInvocation MemberReference ctx MethodInvocation n MethodInvocation Literal ""jcr:data"" getProperty MethodInvocation getValue Literal ""jcr:content"" getNode printValue IfStatement MethodInvocation n Literal ""nt:resource"" isNodeType BlockStatement StatementExpression MethodInvocation MemberReference ctx MethodInvocation n MethodInvocation getValue Literal ""jcr:data"" getProperty printValue BlockStatement ThrowStatement ClassCreator ReferenceType CommandException Literal ""exception.cat.unsupported.type"" ArrayCreator ReferenceType String ArrayInitializer MethodInvocation n MethodInvocation getName getPrimaryNodeType End End MethodDeclaration /**
     * @param ctx
     *        the <code>Context</code>
     * @param p
     *        the <code>Property</code>
     * @throws CommandException
     * @throws ValueFormatException
     * @throws IllegalStateException
     * @throws RepositoryException
     * @throws IOException
     */ Modifier private printProperty FormalParameter ReferenceType Context ctx FormalParameter ReferenceType Property p CommandException ValueFormatException IllegalStateException RepositoryException IOException LocalVariableDeclaration ReferenceType String VariableDeclarator indexStr Cast ReferenceType String MethodInvocation ctx This MemberReference indexKey get LocalVariableDeclaration BasicType int VariableDeclarator index Literal 0 IfStatement BinaryOperation != MemberReference indexStr Literal null BlockStatement StatementExpression Assignment MemberReference index MethodInvocation Integer MemberReference indexStr parseInt = End IfStatement MethodInvocation p MethodInvocation isMultiple getDefinition BlockStatement StatementExpression MethodInvocation MemberReference ctx MethodInvocation p ArraySelector MemberReference index getValues printValue BlockStatement StatementExpression MethodInvocation MemberReference ctx MethodInvocation p getValue printValue End MethodDeclaration /**
     * Read the value
     * @param ctx
     *        the <code>Context</code>
     * @param value
     *        the <code>Value</code>
     * @throws ValueFormatException
     * @throws IllegalStateException
     * @throws RepositoryException
     * @throws IOException
     */ Modifier private printValue FormalParameter ReferenceType Context ctx FormalParameter ReferenceType Value value ValueFormatException IllegalStateException RepositoryException IOException LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator out MethodInvocation CommandHelper MemberReference ctx getOutput StatementExpression MethodInvocation out println LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator in ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType StringReader MethodInvocation value getString LocalVariableDeclaration ReferenceType String VariableDeclarator str Literal null WhileStatement BinaryOperation != Assignment MemberReference str MethodInvocation in readLine = Literal null BlockStatement StatementExpression MethodInvocation out MemberReference str println End MethodDeclaration /**
     * @return the index key
     */ Modifier public ReferenceType String getIndexKey ReturnStatement MemberReference indexKey MethodDeclaration /**
     * @param indexKey
     *        the index key to set
     */ Modifier public setIndexKey FormalParameter ReferenceType String indexKey StatementExpression Assignment This MemberReference indexKey MemberReference indexKey = ReferenceType Command",0
165,165,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.util Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.fs.FileSystem Import org.apache.jackrabbit.core.fs.FileSystemPathUtil Import org.apache.jackrabbit.core.fs.FileSystemResource Import java.io.BufferedOutputStream Import java.io.InputStream Import java.io.OutputStream ClassDeclaration Modifier public /**
 * <code>FileSystemBLOBStore</code> is a <code>ResourceBasedBLOBStore</code>
 * implementation that stores BLOB data in a <code>FileSystem</code>.
 */ FileSystemBLOBStore FieldDeclaration /**
     * the file system where the BLOBs are stored
     */ Modifier private final ReferenceType FileSystem VariableDeclarator fs ConstructorDeclaration Modifier public /**
     * Creates a new <code>FileSystemBLOBStore</code> instance.
     *
     * @param fs file system for storing the BLOB data
     */ FileSystemBLOBStore FormalParameter ReferenceType FileSystem fs StatementExpression Assignment This MemberReference fs MemberReference fs = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String createId FormalParameter ReferenceType PropertyId id FormalParameter BasicType int index LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType char VariableDeclarator chars MethodInvocation id MethodInvocation toCharArray getParentUUID LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference chars length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i chars Literal '-' BlockStatement ContinueStatement End IfStatement BinaryOperation || BinaryOperation == MemberReference cnt Literal 2 BinaryOperation == MemberReference cnt Literal 4 BlockStatement StatementExpression MethodInvocation sb MemberReference FileSystem SEPARATOR_CHAR append End StatementExpression MethodInvocation sb MemberReference ArraySelector MemberReference i chars append StatementExpression MemberReference ++ cnt End StatementExpression MethodInvocation sb MemberReference FileSystem SEPARATOR_CHAR append StatementExpression MethodInvocation sb MethodInvocation FileSystemPathUtil MethodInvocation id MethodInvocation toString getName escapeName append StatementExpression MethodInvocation sb Literal '.' append StatementExpression MethodInvocation sb MemberReference index append StatementExpression MethodInvocation sb Literal "".bin"" append ReturnStatement MethodInvocation sb toString MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType InputStream get FormalParameter ReferenceType String blobId Exception ReturnStatement MethodInvocation MethodInvocation getInputStream MemberReference blobId getResource MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public put FormalParameter ReferenceType String blobId FormalParameter ReferenceType InputStream in FormalParameter BasicType long size Exception LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out Literal null LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator internalBlobFile ClassCreator ReferenceType FileSystemResource MemberReference fs MemberReference blobId StatementExpression MethodInvocation internalBlobFile makeParentDirs TryStatement StatementExpression Assignment MemberReference out ClassCreator ReferenceType BufferedOutputStream MethodInvocation internalBlobFile getOutputStream = LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte Literal 8192 LocalVariableDeclaration BasicType int VariableDeclarator read WhileStatement BinaryOperation > Assignment MemberReference read MethodInvocation in MemberReference buffer read = Literal 0 BlockStatement StatementExpression MethodInvocation out MemberReference buffer Literal 0 MemberReference read write End StatementExpression MethodInvocation out close MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean remove FormalParameter ReferenceType String blobId Exception LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator res ClassCreator ReferenceType FileSystemResource MemberReference fs MemberReference blobId IfStatement MethodInvocation ! res exists BlockStatement ReturnStatement Literal false End StatementExpression MethodInvocation res Literal true delete ReturnStatement Literal true MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType FileSystemResource getResource FormalParameter ReferenceType String blobId Exception ReturnStatement ClassCreator ReferenceType FileSystemResource MemberReference fs MemberReference blobId ReferenceType ResourceBasedBLOBStore",0
544,544,,0
705,705,,0
270,270,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib.size Import javax.jcr.Node Import javax.jcr.Property Import javax.jcr.PropertyIterator Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.ValueFormatException Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory ClassDeclaration Modifier public /**
 * SizeCalculator for testing purposes.
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ SimpleSizeCalculator FieldDeclaration /** Logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType SimpleSizeCalculator getLog ConstructorDeclaration Modifier public /**
     * Constructor
     */ SimpleSizeCalculator StatementExpression SuperConstructorInvocation MethodDeclaration /** @inheritDoc */ Modifier public BasicType double getSize FormalParameter ReferenceType Node node LocalVariableDeclaration BasicType double VariableDeclarator size Literal 0 TryStatement LocalVariableDeclaration ReferenceType PropertyIterator VariableDeclarator iter MethodInvocation node getProperties WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator prop MethodInvocation iter nextProperty StatementExpression Assignment MemberReference size BinaryOperation + MemberReference size This MethodInvocation MemberReference prop getSize = End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to get properties from node. "" MethodInvocation e getMessage MemberReference e error ReturnStatement MemberReference size MethodDeclaration /** @inheritDoc */ Modifier public BasicType double getSize FormalParameter ReferenceType Property property LocalVariableDeclaration BasicType long VariableDeclarator bits Literal 0 TryStatement SwitchStatement MethodInvocation property getType SwitchStatementCase MemberReference PropertyType BINARY StatementExpression Assignment MemberReference bits This MethodInvocation MemberReference property getBinarySize = BreakStatement SwitchStatementCase MemberReference PropertyType BOOLEAN IfStatement MethodInvocation property MethodInvocation isMultiple getDefinition BlockStatement StatementExpression Assignment MemberReference bits BinaryOperation * MethodInvocation property MemberReference length getValues Literal 1 = BlockStatement StatementExpression Assignment MemberReference bits Literal 1 = End BreakStatement SwitchStatementCase MemberReference PropertyType DOUBLE MemberReference PropertyType DATE MemberReference PropertyType LONG IfStatement MethodInvocation property MethodInvocation isMultiple getDefinition BlockStatement StatementExpression Assignment MemberReference bits BinaryOperation * MethodInvocation property MemberReference length getValues Literal 64 = BlockStatement StatementExpression Assignment MemberReference bits Literal 64 = End BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference bits This MethodInvocation MemberReference property getStringSize = BreakStatement End CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to get values from property. "" MethodInvocation e getMessage MemberReference e error ReturnStatement This MethodInvocation MemberReference bits This MemberReference unit convert MethodDeclaration /**
     * @param property
     * @return the size in bits of a binary property
     * @throws ValueFormatException
     * @throws RepositoryException
     */ Modifier private BasicType long getBinarySize FormalParameter ReferenceType Property prop ValueFormatException RepositoryException IfStatement MethodInvocation prop MethodInvocation isMultiple getDefinition BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator sizes MethodInvocation prop getLengths LocalVariableDeclaration BasicType long VariableDeclarator size Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sizes length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference size BinaryOperation + MemberReference size MemberReference ArraySelector MemberReference i sizes = End ReturnStatement BinaryOperation * MemberReference size Literal 8 BlockStatement ReturnStatement BinaryOperation * MethodInvocation prop getLength Literal 8 End MethodDeclaration /**
     * @param prop
     * @return size in bits
     * @throws ValueFormatException
     * @throws RepositoryException
     */ Modifier private BasicType long getStringSize FormalParameter ReferenceType Property prop ValueFormatException RepositoryException IfStatement MethodInvocation prop MethodInvocation isMultiple getDefinition BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator sizes MethodInvocation prop getLengths LocalVariableDeclaration BasicType long VariableDeclarator size Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sizes length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference size BinaryOperation + MemberReference size BinaryOperation * MemberReference ArraySelector MemberReference i sizes Literal 16 = End ReturnStatement MemberReference size BlockStatement ReturnStatement BinaryOperation * MethodInvocation prop getLength Literal 16 End ReferenceType AbstractSizeCalculator",1
677,677,,1
625,625,,0
864,864,,0
528,528,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.util Import org.apache.jackrabbit.core.PropertyId Import java.io.InputStream InterfaceDeclaration Modifier public /**
 * <code>BLOBStore</code> represents an abstract store for binary property
 * values (BLOBs).
 *
 * @see ResourceBasedBLOBStore
 */ BLOBStore MethodDeclaration /**
     * Creates a unique identifier for the BLOB data associated with the given
     * property id and value subscript.
     *
     * @param id    id of the property associated with the BLOB data
     * @param index subscript of the value holding the BLOB data
     * @return a string identifying the BLOB data
     */ ReferenceType String createId FormalParameter ReferenceType PropertyId id FormalParameter BasicType int index MethodDeclaration /**
     * Stores the BLOB data and returns a unique identifier.
     *
     * @param blobId identifier of the BLOB data as returned by
     *               {@link #createId(PropertyId, int)}
     * @param in     stream containing the BLOB data
     * @param size   size of the BLOB data
     * @throws Exception if an error occured
     */ put FormalParameter ReferenceType String blobId FormalParameter ReferenceType InputStream in FormalParameter BasicType long size Exception MethodDeclaration /**
     * Retrieves the BLOB data with the specified id as a binary stream.
     *
     * @param blobId identifier of the BLOB data as returned by
     *               {@link #createId(PropertyId, int)}
     * @return an input stream that delivers the BLOB data
     * @throws Exception if an error occured
     */ ReferenceType InputStream get FormalParameter ReferenceType String blobId Exception MethodDeclaration /**
     * Removes the BLOB data with the specified id.
     *
     * @param blobId identifier of the BLOB data as returned by
     *               {@link #createId(PropertyId, int)}
     * @return <code>true</code> if BLOB data with the given id exists and has
     *         been successfully removed, <code>false</code> if there's no BLOB
     *         data with the given id.
     * @throws Exception if an error occured
     */ BasicType boolean remove FormalParameter ReferenceType String blobId Exception",0
526,526,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype Import org.apache.jackrabbit.core.util.Dumpable Import org.apache.jackrabbit.name.QName Import java.io.PrintStream Import java.util.HashMap Import java.util.Iterator Import java.util.TreeSet Import java.util.Collection Import java.util.Collections Import java.util.Set ClassDeclaration /**
 * <code>EffectiveNodeTypeCache</code> ...
 */ EffectiveNodeTypeCache FieldDeclaration /** ordered set of keys */ Modifier final ReferenceType TreeSet VariableDeclarator sortedKeys FieldDeclaration /** cache of pre-built aggregations of node types */ Modifier final ReferenceType HashMap VariableDeclarator aggregates ConstructorDeclaration EffectiveNodeTypeCache StatementExpression Assignment MemberReference sortedKeys ClassCreator ReferenceType TreeSet = StatementExpression Assignment MemberReference aggregates ClassCreator ReferenceType HashMap = ConstructorDeclaration EffectiveNodeTypeCache FormalParameter ReferenceType EffectiveNodeTypeCache entCache StatementExpression Assignment MemberReference sortedKeys ClassCreator ReferenceType TreeSet MemberReference entCache sortedKeys = StatementExpression Assignment MemberReference aggregates ClassCreator ReferenceType HashMap MemberReference entCache aggregates = MethodDeclaration put FormalParameter ReferenceType EffectiveNodeType ent LocalVariableDeclaration BasicType int VariableDeclarator weight MethodInvocation ent MemberReference length getAllNodeTypes LocalVariableDeclaration ReferenceType WeightedKey VariableDeclarator k ClassCreator ReferenceType WeightedKey MethodInvocation ent getMergedNodeTypes MemberReference weight StatementExpression MethodInvocation aggregates MemberReference k MemberReference ent put StatementExpression MethodInvocation sortedKeys MemberReference k add MethodDeclaration BasicType boolean contains FormalParameter ReferenceType QName ntNames ReturnStatement MethodInvocation aggregates ClassCreator ReferenceType WeightedKey MemberReference ntNames containsKey MethodDeclaration BasicType boolean contains FormalParameter ReferenceType WeightedKey key ReturnStatement MethodInvocation aggregates MemberReference key containsKey MethodDeclaration ReferenceType EffectiveNodeType get FormalParameter ReferenceType QName ntNames ReturnStatement Cast ReferenceType EffectiveNodeType MethodInvocation aggregates ClassCreator ReferenceType WeightedKey MemberReference ntNames get MethodDeclaration ReferenceType EffectiveNodeType get FormalParameter ReferenceType WeightedKey key ReturnStatement Cast ReferenceType EffectiveNodeType MethodInvocation aggregates MemberReference key get MethodDeclaration ReferenceType EffectiveNodeType remove FormalParameter ReferenceType QName ntNames ReturnStatement MethodInvocation ClassCreator ReferenceType WeightedKey MemberReference ntNames remove MethodDeclaration ReferenceType EffectiveNodeType remove FormalParameter ReferenceType WeightedKey key LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator removed Cast ReferenceType EffectiveNodeType MethodInvocation aggregates MemberReference key remove IfStatement BinaryOperation != MemberReference removed Literal null BlockStatement LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation sortedKeys iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType WeightedKey VariableDeclarator k Cast ReferenceType WeightedKey MethodInvocation iter next IfStatement MethodInvocation key MemberReference k equals BlockStatement StatementExpression MethodInvocation sortedKeys MemberReference k remove BreakStatement End End End ReturnStatement MemberReference removed MethodDeclaration /**
     * Returns an iterator over the keys. The order of the returned keys is:
     * <ol>
     * <li>descending weight</li>
     * <li>ascending key (i.e. unique identifier of aggregate)</li>
     * </ol>
     *
     * @see WeightedKey#compareTo
     */ ReferenceType Iterator keys ReturnStatement MethodInvocation sortedKeys iterator MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public dump FormalParameter ReferenceType PrintStream ps StatementExpression MethodInvocation ps BinaryOperation + BinaryOperation + Literal ""EffectiveNodeTypeCache ("" This Literal "")"" println StatementExpression MethodInvocation ps println StatementExpression MethodInvocation ps Literal ""EffectiveNodeTypes in cache:"" println StatementExpression MethodInvocation ps println LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation sortedKeys iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType WeightedKey VariableDeclarator k Cast ReferenceType WeightedKey MethodInvocation iter next StatementExpression MethodInvocation ps MemberReference k println End ClassDeclaration Modifier static /**
     * A <code>WeightedKey</code> uniquely identifies
     * a combination (i.e. an aggregation) of one or more node types.
     * The weight is an indicator for the cost involved in building such an
     * aggregate (e.g. an aggregation of multiple complex node types with deep
     * inheritance trees is more costly to build/validate than an agreggation
     * of two very simple node types with just one property definition each).
     * <p/>
     * A very simple (and not very accurate) approximation of the weight would
     * be the number of explicitly aggregated node types (ignoring inheritance
     * and complexity of each involved node type). A better approximation would
     * be the number of <b>all</b>, explicitly and implicitly (note that
     * inheritance is also an aggregation) aggregated node types.
     * <p/>
     * The more accurate the weight definition, the more efficient is the
     * the building of new aggregates.
     * <p/>
     * It is important to note that the weight is not part of the key value,
     * i.e. it is not considered by the <code>hashCode()</code> and
     * <code>equals(Object)</code> methods. It does however affect the order
     * of <code>WeightedKey</code> instances. See
     * <code>{@link #compareTo(Object)}</code> for more information.
     * <p/>
     * Let's assume we have an aggregation of node types named ""b"", ""a"" and ""c"".
     * Its key would be ""[a, b, c]"" and the weight 3 (using the simple
     * approximation).
     */ WeightedKey FieldDeclaration /**
         * set of node type names, sorted in ascending order
         */ Modifier private final ReferenceType TreeSet VariableDeclarator set FieldDeclaration Modifier private final BasicType int VariableDeclarator weight ConstructorDeclaration /**
         * @param ntNames
         */ WeightedKey FormalParameter ReferenceType QName ntNames StatementExpression ExplicitConstructorInvocation MemberReference ntNames MemberReference ntNames length ConstructorDeclaration /**
         * @param ntNames
         * @param weight
         */ WeightedKey FormalParameter ReferenceType QName ntNames FormalParameter BasicType int weight StatementExpression Assignment This MemberReference weight MemberReference weight = StatementExpression Assignment MemberReference set ClassCreator ReferenceType TreeSet = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ntNames length MemberReference ++ i BlockStatement StatementExpression MethodInvocation set MemberReference ArraySelector MemberReference i ntNames add End ConstructorDeclaration /**
         * @param ntNames
         */ WeightedKey FormalParameter ReferenceType Collection ntNames StatementExpression ExplicitConstructorInvocation MemberReference ntNames MethodInvocation ntNames size ConstructorDeclaration /**
         * @param ntNames
         * @param weight
         */ WeightedKey FormalParameter ReferenceType Collection ntNames FormalParameter BasicType int weight StatementExpression Assignment This MemberReference weight MemberReference weight = StatementExpression Assignment MemberReference set ClassCreator ReferenceType TreeSet MemberReference ntNames = MethodDeclaration /**
         * The key is the string representation of this sorted set
         * (e.g. the key for a set containing entries ""c"", ""b"" and ""a"" would
         * be ""[a, b, c]"").
         *
         * @return string representation of this sorted set
         * @see java.util.AbstractCollection#toString
         */ ReferenceType String getKey ReturnStatement MethodInvocation set toString MethodDeclaration /**
         * @return
         */ BasicType int getWeight ReturnStatement MemberReference weight MethodDeclaration BasicType int size ReturnStatement MethodInvocation set size MethodDeclaration ReferenceType Iterator iterator ReturnStatement MethodInvocation Collections MethodInvocation iterator MemberReference set unmodifiableSortedSet MethodDeclaration ReferenceType Set getSet ReturnStatement MethodInvocation Collections MemberReference set unmodifiableSortedSet MethodDeclaration ReferenceType QName toArray ReturnStatement Cast ReferenceType QName MethodInvocation set ArrayCreator ReferenceType QName MethodInvocation set size toArray MethodDeclaration BasicType boolean contains FormalParameter ReferenceType WeightedKey otherKey ReturnStatement MethodInvocation set MethodInvocation otherKey getSet containsAll MethodDeclaration ReferenceType WeightedKey subtract FormalParameter ReferenceType WeightedKey otherKey LocalVariableDeclaration ReferenceType Set VariableDeclarator tmp Cast ReferenceType Set MethodInvocation set clone StatementExpression MethodInvocation tmp MethodInvocation otherKey getSet removeAll ReturnStatement ClassCreator ReferenceType WeightedKey MemberReference tmp MethodDeclaration /**
         * The resulting sort-order is: 1. descending weight, 2. ascending key
         * (i.e. string representation of this sorted set).
         *
         * @param o
         * @return
         */ Modifier public BasicType int compareTo FormalParameter ReferenceType Object o LocalVariableDeclaration ReferenceType WeightedKey VariableDeclarator other Cast ReferenceType WeightedKey MemberReference o IfStatement BinaryOperation > MethodInvocation getWeight MethodInvocation other getWeight BlockStatement ReturnStatement Literal - 1 IfStatement BinaryOperation < MethodInvocation getWeight MethodInvocation other getWeight BlockStatement ReturnStatement Literal 1 End End ReturnStatement MethodInvocation MethodInvocation MethodInvocation other getKey compareTo getKey MethodDeclaration Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator h Literal 17 LocalVariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation set iterator WhileStatement MethodInvocation i hasNext BlockStatement StatementExpression Assignment MemberReference h Literal 37 *= LocalVariableDeclaration ReferenceType Object VariableDeclarator obj MethodInvocation i next IfStatement BinaryOperation != MemberReference obj Literal null BlockStatement StatementExpression Assignment MemberReference h MethodInvocation obj hashCode += End End ReturnStatement MemberReference h MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType WeightedKey BlockStatement LocalVariableDeclaration ReferenceType WeightedKey VariableDeclarator other Cast ReferenceType WeightedKey MemberReference obj ReturnStatement MethodInvocation set MemberReference other set equals End ReturnStatement Literal false MethodDeclaration Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation set toString Literal "" ("" MemberReference weight Literal "")"" ReferenceType Comparable ReferenceType Dumpable",1
763,763,,1
874,874,,0
111,111,"CompilationUnit PackageDeclaration org.apache.jackrabbit.extension.configuration Import java.util.ArrayList Import java.util.Calendar Import java.util.HashSet Import java.util.Iterator Import java.util.List Import java.util.Set Import javax.jcr.NodeIterator Import javax.jcr.PathNotFoundException Import javax.jcr.Property Import javax.jcr.PropertyIterator Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.Value Import javax.jcr.ValueFactory Import org.apache.commons.configuration.ConfigurationException Import org.apache.commons.configuration.ConfigurationKey Import org.apache.commons.configuration.HierarchicalConfiguration Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.extension.ExtensionDescriptor ClassDeclaration Modifier public /**
 * The <code>ItemConfiguration</code> extends the
 * <code>HierarchicalConfiguration</code> class providing support to load the
 * configuration from a repository. It represents the repository subtree from
 * which the configuration is loaded as a configuration tree of configuration
 * nodes and attributes.
 * <p>
 * The configuration is rooted at a user supplied repository node which must be
 * defined such, that properties and child nodes of any type and name may be
 * added. The best way to achieve this is to define the node as of type
 * <code>nt:unstructured</code>.
 * <p>
 * <b>Note on names</b>
 * <p>
 * This implementation uses the repository item names as (basis of) the names of
 * the hierarchy configuration nodes. As such there exists a restriction on
 * those names: The <code>HierarchicalConfiguration</code> extended by this
 * class uses dots (<code>.</code>) as hierarchy level separators. Therefore
 * any configuration node's name with a dot in it will likely lead to unsuable
 * configuration.
 * <p>
 * <i>Therefore it is strongly recommended to not use dots in repository element
 * names to be used by this configuration class.</i>
 * <p id=""dataTypeConversion"">
 * <b>Data Type Conversion</b>
 * <p>
 * This implementation tries its best to preserve the configuration data type
 * when loading or saving the configuration data. Because the mapping between
 * Java data types supported by the configuration objects and the data types
 * supported by the repository, a mapping has to be applied, which may lead to a
 * certain but acceptable loss of accuracy.
 * <p>
 * When loading values from the repository, the following type conversion
 * applies: <table>
 * <tr>
 * <th>JCR Type
 * <th>Java Type</tr>
 * <tr>
 * <td>Boolean
 * <td>Boolean</tr>
 * <tr>
 * <td>Date
 * <td>Calendar</tr>
 * <tr>
 * <td>Double
 * <td>Double</tr>
 * <tr>
 * <td>Long
 * <td>Long</tr>
 * <tr>
 * <td>Binary, Name, Path, Reference, String, Undefined
 * <td>String</tr>
 * </table>
 * <p>
 * When saveing configuaration data to the repository, the following type
 * conversion applies: <table>
 * <tr>
 * <th>Java Type
 * <th>JCR Type</tr>
 * <tr>
 * <td>String
 * <td>String</tr>
 * <tr>
 * <td>Boolean
 * <td>Boolean</tr>
 * <tr>
 * <td>Calendar
 * <td>Date</tr>
 * <tr>
 * <td>Double or Float
 * <td>Double</tr>
 * <tr>
 * <td>Number except Double and Float
 * <td>Long</tr>
 * <tr>
 * <td>Other types, incl. <code>null</code>
 * <td>String</tr>
 * </table>
 *
 * @author Felix Meschberger
 * @version $Rev:$, $Date$
 */ ItemConfiguration FieldDeclaration /** default log */ Modifier private final static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ExtensionDescriptor getLog FieldDeclaration /**
     * The name of the property providing the configuration value of a
     * configuration node.
     */ Modifier private final static ReferenceType String VariableDeclarator NODE_CONTENT_PROPERTY Literal ""__DEFAULT__"" FieldDeclaration /**
     * The <code>Node</code> to which this configuration is attached. The
     * configuration data itself is loaded and saved from/to the
     * <code>configuration</code> child node of this node.
     *
     * @see #load(javax.jcr.Node)
     * @see #save(javax.jcr.Node)
     */ Modifier private ReferenceType javax ReferenceType jcr ReferenceType Node VariableDeclarator jcrNode FieldDeclaration /**
     * The backlog of absolute paths of items which backed removed configuration
     * data. This set is worked through to remove the items when the
     * configuration is saved.
     *
     * @see #save(javax.jcr.Node)
     * @see ItemNode#removeReference()
     */ Modifier private ReferenceType Set VariableDeclarator deleteBackLog ConstructorDeclaration Modifier public /**
     * Creates an empty configuration not hooked to any node.
     */ ItemConfiguration StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Creates a configuration attached to the given <code>node</code> and
     * load the configuration data from the <code>configuration</code> child
     * node.
     * <p>
     * If <code>node</code> is <code>null</code>, this constructor has the same
     * effect as the default constructor ({@link #ItemConfiguration()} in that
     * this configuration is not attached to a <code>Node</code> and
     * configuration is not loaded.
     *
     * @param node The <code>Node</code> containing the configuration data.
     *
     * @throws ConfigurationException If an error occurrs loading the
     *      configuration data.
     */ ItemConfiguration FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node node ConfigurationException StatementExpression SuperConstructorInvocation StatementExpression MethodInvocation MemberReference node setNode StatementExpression MethodInvocation load MethodDeclaration /**
     * Returns the <code>Node</code> to which this configuration is attached.
     * If this configuration is not attached to a node, this method returns
     * <code>null</code>.
     */ Modifier public ReferenceType javax ReferenceType jcr ReferenceType Node getNode ReturnStatement MemberReference jcrNode MethodDeclaration /**
     * Attaches this configuration to the given node to provide
     * ({@link #load(javax.jcr.Node)}) or take ({@link #save(javax.jcr.Node)})
     * configuration data. To detach this configuration from the repository,
     * set <code>node</code> to <code>null</code>.
     *
     * @param node The <code>Node</code> to which this configuration is
     *            attached or <code>null</code> to detach the configuration.
     */ Modifier public setNode FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node node IfStatement MethodInvocation MemberReference node isDifferent BlockStatement StatementExpression MethodInvocation MethodInvocation getRoot removeReferences End StatementExpression Assignment This MemberReference jcrNode MemberReference node = MethodDeclaration /**
     * Creates an instance of the <code>ItemNode</code> class with an empty
     * reference.
     * <p>
     * As noted in the class comment, the name should not contain a dot,
     * otherwise the <code>HierarchicalConfiguration</code> class will have
     * problems resolving the configuration.
     *
     * @param name The name of the new configuratio node.
     */ Modifier protected ReferenceType Node createNode FormalParameter ReferenceType String name ReturnStatement ClassCreator ReferenceType ItemNode MemberReference name Literal null MethodDeclaration /**
     * Loads the configuration data from the <code>Node</code> to which this
     * configuration is attached. If this configuration is not attached to
     * a <code>Node</code>, this method has no effect.
     * <p>
     * If configuration data is already present in this configuration, the data
     * is extended by the data loaded from the <code>Node</code>. To prevent
     * such additions, clear this configuration before loading new data.
     *
     * @throws ConfigurationException If an error occurrs loading the
     *      configuration data.
     *
     * @see #load(javax.jcr.Node)
     */ Modifier public load ConfigurationException IfStatement BinaryOperation != MemberReference jcrNode Literal null BlockStatement StatementExpression MethodInvocation MemberReference jcrNode load End MethodDeclaration /**
     * Loads the configuration data from the given <code>node</code>. If
     * <code>node</code> is <code>null</code>, a <code>NullPointerException</code>
     * is thrown.
     * <p>
     * If configuration data is already present in this configuration, the data
     * is extended by the data loaded from the <code>Node</code>. To prevent
     * such additions, clear this configuration before loading new data.
     *
     * @param node The <code>Node</code> containing the configuration to be
     *      loaded into this configuration. This must no be <code>null</code>.
     *
     * @throws NullPointerException if <code>node</code> is <code>null</code>.
     * @throws ConfigurationException If an error occurrs loading the
     *      configuration data.
     */ Modifier public load FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node node ConfigurationException TryStatement LocalVariableDeclaration BasicType boolean VariableDeclarator sameNode MethodInvocation ! MemberReference node isDifferent StatementExpression MethodInvocation MethodInvocation getRoot MemberReference node MemberReference sameNode constructHierarchy CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType ConfigurationException MemberReference re MethodDeclaration /**
     * Saves the configuration data to the <code>Node</code> to which this
     * configuration is attached. If this configuration is not attached to
     * a <code>Node</code>, this method has no effect.
     *
     * @throws ConfigurationException If an error occurrs saving the
     *      configuration data.
     *
     * @see #save(javax.jcr.Node)
     */ Modifier public save ConfigurationException IfStatement BinaryOperation != MemberReference jcrNode Literal null BlockStatement StatementExpression MethodInvocation MemberReference jcrNode save End MethodDeclaration /**
     * Saves the configuration data to the given <code>node</code>. If
     * <code>node</code> is <code>null</code>, a <code>NullPointerException</code>
     * is thrown.
     *
     * @param node The <code>Node</code> to store the configuration to. This
     *      must no be <code>null</code>.
     *
     * @throws NullPointerException if <code>node</code> is <code>null</code>.
     * @throws ConfigurationException If an error occurrs saving the
     *      configuration data.
     */ Modifier public save FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node node ConfigurationException LocalVariableDeclaration BasicType boolean VariableDeclarator lockable Literal false TryStatement IfStatement MethodInvocation MemberReference node isDifferent BlockStatement StatementExpression MethodInvocation MethodInvocation getRoot removeReferences End StatementExpression Assignment MemberReference lockable MethodInvocation node Literal ""mix:lockable"" isNodeType = IfStatement MemberReference lockable BlockStatement IfStatement MethodInvocation node isLocked BlockStatement StatementExpression Assignment MemberReference lockable Literal false = ThrowStatement ClassCreator ReferenceType ConfigurationException Literal ""Configuration node is locked"" End StatementExpression MethodInvocation node Literal true Literal true lock End LocalVariableDeclaration BasicType boolean VariableDeclarator versionable MethodInvocation node Literal ""mix:versionable"" isNodeType IfStatement BinaryOperation && MemberReference versionable MethodInvocation ! node isCheckedOut BlockStatement StatementExpression MethodInvocation node checkout End IfStatement BinaryOperation != MemberReference deleteBackLog Literal null BlockStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator session MethodInvocation node getSession ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator di MethodInvocation deleteBackLog iterator MethodInvocation di hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator itemPath Cast ReferenceType String MethodInvocation di next TryStatement StatementExpression MethodInvocation session MethodInvocation remove MemberReference itemPath getItem CatchClause CatchClauseParameter PathNotFoundException pnfe StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""Item "" MemberReference itemPath Literal "" cannot be accessed for removal"" MemberReference pnfe debug End End LocalVariableDeclaration ReferenceType ItemBuilderVisitor VariableDeclarator builder ClassCreator ReferenceType ItemBuilderVisitor MemberReference node StatementExpression MethodInvocation builder MethodInvocation getRoot processDocument StatementExpression MethodInvocation node save IfStatement MemberReference versionable BlockStatement StatementExpression MethodInvocation node checkin End CatchClause CatchClauseParameter RepositoryException re ThrowStatement ClassCreator ReferenceType ConfigurationException Literal ""Cannot save configuration"" MemberReference re TryStatement IfStatement MethodInvocation node isModified BlockStatement StatementExpression MethodInvocation node Literal false refresh BlockStatement StatementExpression Assignment MemberReference deleteBackLog Literal null = End CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log Literal ""Problem refreshing persistent config state"" MemberReference re error TryStatement IfStatement BinaryOperation && MemberReference lockable MethodInvocation node isLocked BlockStatement StatementExpression MethodInvocation node unlock End CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log Literal ""Cannot unlock configuration node"" MemberReference re warn MethodDeclaration /**
     * Returns <code>true</code> if <code>newNode</code> is not the same
     * repository <code>Node</code> as the <code>Node</code> to which this
     * configuration is currently associated.
     * <p>
     * Removing the references makes sure that the complete configuration data
     * is written to the repository the next time {@link #save()} is called.
     *
     * @param newNode The repository <code>Node</code> to which the current
     *      base <code>Node</code> is compared.
     *
     * @return <code>true</code> if <code>newNode</code> is different to the
     *      <code>Node</code> to which the configuration is currently attached.
     */ Modifier private BasicType boolean isDifferent FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node newNode IfStatement BinaryOperation == MemberReference jcrNode MemberReference newNode BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MemberReference jcrNode Literal null BlockStatement ReturnStatement BinaryOperation != MemberReference newNode Literal null End IfStatement BinaryOperation == MemberReference newNode Literal null BlockStatement ReturnStatement BinaryOperation != MemberReference jcrNode Literal null End TryStatement ReturnStatement MethodInvocation ! jcrNode MemberReference newNode isSame CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log BinaryOperation + Literal ""Cannot check whether the current and new nodes "" Literal ""are different, assuming they are"" MemberReference re warn ReturnStatement Literal true MethodDeclaration /**
     * Vists all configuration nodes starting from the given <code>node</code>
     * and resets all node's reference fields to <code>null</code>. This forces
     * complete configuration storage on the next call to the {@link #save()} or
     * {@link #save(javax.jcr.Node)} methods.
     *
     * @param node The <code>Node</code> at which to start removing references
     */ Modifier private static removeReferences FormalParameter ReferenceType Node node StatementExpression MethodInvocation node ClassCreator ReferenceType NodeVisitor MethodDeclaration Modifier public visitBeforeChildren FormalParameter ReferenceType Node node FormalParameter ReferenceType ConfigurationKey key StatementExpression MethodInvocation node Literal null setReference Literal null visit MethodDeclaration /**
     * Creates the internal configuration hierarchy of {@link ItemNode}s from
     * the items in the repository.
     *
     * @param node The configuration node to which the new configuration is
     *      attached.
     * @param element The JCR <code>Node</code> from which the configuration
     *      is read.
     * @param elemRefs <code>true</code> if the configuration nodes created
     *      while reading the repository items get the reference fields set to
     *      the corresponding repository item.
     *
     * @throws RepositoryException If an error occurrs reading from the
     *      repository.
     */ Modifier private constructHierarchy FormalParameter ReferenceType Node node FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node element FormalParameter BasicType boolean elemRefs RepositoryException StatementExpression MethodInvocation MemberReference node MemberReference element MemberReference elemRefs processAttributes LocalVariableDeclaration ReferenceType NodeIterator VariableDeclarator list MethodInvocation element getNodes WhileStatement MethodInvocation list hasNext BlockStatement LocalVariableDeclaration ReferenceType javax ReferenceType jcr ReferenceType Node VariableDeclarator jcrNode MethodInvocation list nextNode IfStatement MethodInvocation jcrNode MethodInvocation isProtected getDefinition BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType Node VariableDeclarator childNode ClassCreator ReferenceType ItemNode MethodInvocation jcrNode getName TernaryExpression MemberReference elemRefs MethodInvocation jcrNode getPath Literal null StatementExpression MethodInvocation MemberReference childNode MemberReference jcrNode MemberReference elemRefs constructHierarchy StatementExpression MethodInvocation node MemberReference childNode addChild End MethodDeclaration /**
     * Helper method for constructing node objects for the attributes of the
     * given XML element.
     *
     * @param node the actual node
     * @param element the actual XML element
     * @param elemRefs a flag whether references to the XML elements should be
     *            set
     * @param node The configuration node to which the new configuration is
     *      attached.
     * @param element The JCR <code>Node</code> whose properties are to be
     *      read and attached.
     * @param elemRefs <code>true</code> if the configuration nodes created
     *      while reading the properties get the reference fields set to the
     *      corresponding property.
     *
     * @throws RepositoryException If an error occurrs reading from the
     *      repository.
     */ Modifier private processAttributes FormalParameter ReferenceType Node node FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node element FormalParameter BasicType boolean elemRefs RepositoryException LocalVariableDeclaration ReferenceType PropertyIterator VariableDeclarator attributes MethodInvocation element getProperties WhileStatement MethodInvocation attributes hasNext BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator prop MethodInvocation attributes nextProperty IfStatement MethodInvocation prop MethodInvocation isProtected getDefinition BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType Value VariableDeclarator values IfStatement MethodInvocation prop MethodInvocation isMultiple getDefinition BlockStatement StatementExpression Assignment MemberReference values MethodInvocation prop getValues = BlockStatement StatementExpression Assignment MemberReference values ArrayCreator ReferenceType Value ArrayInitializer MethodInvocation prop getValue = End IfStatement MethodInvocation NODE_CONTENT_PROPERTY MethodInvocation prop getName equals BlockStatement IfStatement BinaryOperation > MemberReference values length Literal 0 BlockStatement StatementExpression MethodInvocation node MethodInvocation MemberReference ArraySelector Literal 0 values importValue setValue End BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation ConfigurationKey MethodInvocation prop getName constructAttributeKey LocalVariableDeclaration ReferenceType String VariableDeclarator ref TernaryExpression MemberReference elemRefs MethodInvocation prop getPath Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child ClassCreator ReferenceType ItemNode MemberReference name MemberReference ref StatementExpression MethodInvocation child MethodInvocation MemberReference ArraySelector MemberReference i values importValue setValue StatementExpression MethodInvocation node MemberReference child addChild End End End ClassDeclaration Modifier private /**
     * The <code>ItemNode</code> class extends the standard <code>Node</code>
     * class by support for removing underlying repository items in case of
     * removal of a configuration node.
     *
     * @author Felix Meschberger
     * @version $Rev:$, $Date$
     */ ItemNode FieldDeclaration /** fake serialVersionUID */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 1L ConstructorDeclaration Modifier protected /**
         * Creates an instance of this node type presetting the reference.
         *
         * @param name The name of the new configuration node.
         * @param reference The (optional) reference to initially set on the
         *      new configuration node. This may be <code>null</code>.
         */ ItemNode FormalParameter ReferenceType String name FormalParameter ReferenceType String reference StatementExpression SuperConstructorInvocation MemberReference name StatementExpression MethodInvocation MemberReference reference setReference MethodDeclaration /**
         * Removes the associated repository item if this node is removed
         * from the configuration.
         */ Modifier protected removeReference IfStatement BinaryOperation != MethodInvocation getReference Literal null BlockStatement IfStatement MethodInvocation ConfigurationKey MethodInvocation getName isAttributeKey BlockStatement LocalVariableDeclaration ReferenceType List VariableDeclarator list MethodInvocation MethodInvocation MethodInvocation getName getChildren getParent IfStatement BinaryOperation && BinaryOperation != MemberReference list Literal null BinaryOperation > MethodInvocation list size Literal 0 BlockStatement ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator ci MethodInvocation list iterator MethodInvocation ci hasNext BlockStatement StatementExpression Cast ReferenceType Node MethodInvocation ci next End End End IfStatement BinaryOperation == MemberReference deleteBackLog Literal null BlockStatement StatementExpression Assignment MemberReference deleteBackLog ClassCreator ReferenceType HashSet = End StatementExpression MethodInvocation deleteBackLog MethodInvocation getReference add End ReferenceType Node ClassDeclaration Modifier private static /**
     * The <code>ItemBuilderVisitor</code> class stores the configuration
     * rooted at a given <code>Node</code> to the repository <code>Node</code>
     * defined at construction time.
     * <p>
     * This visitor just adds nodes and properties to the repository and does
     * not care whether the operations actually overwrite data or not. It is
     * recommended that the JCR <code>Node</code> from which the visitor is
     * created be cleared before processing the configuration through the
     * {@link #processDocument(Node)} method.
     *
     * @author Felix Meschberger
     * @version $Rev:$, $Date$
     */ ItemBuilderVisitor FieldDeclaration /** Stores the document to be constructed. */ Modifier private ReferenceType javax ReferenceType jcr ReferenceType Node VariableDeclarator jcrNode ConstructorDeclaration Modifier public /**
         * Creates a new instance of <code>ItemBuilderVisitor</code> storing the
         * configuration at and below the given <code>jcrNode</code>.
         *
         * @param jcrNode The JCR <code>Node</code> to take the configuration.
         */ ItemBuilderVisitor FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node jcrNode StatementExpression Assignment This MemberReference jcrNode MemberReference jcrNode = MethodDeclaration /**
         * Processes the node hierarchy and adds new items to the repository
         *
         * @param rootNode The configuration <code>Node</code> to start at in
         *      the configuration hierarchy.
         */ Modifier public processDocument FormalParameter ReferenceType Node rootNode RepositoryException StatementExpression MethodInvocation rootNode MethodInvocation jcrNode getPath setReference StatementExpression MethodInvocation rootNode This Literal null visit MethodDeclaration /**
         * Inserts a new node. This implementation ensures that the correct XML
         * element is created and inserted between the given siblings.
         *
         * @param newNode the node to insert
         * @param parent the parent node
         * @param sibling1 the first sibling
         * @param sibling2 the second sibling
         * @return the new node
         */ Modifier protected ReferenceType Object insert FormalParameter ReferenceType Node newNode FormalParameter ReferenceType Node parent FormalParameter ReferenceType Node sibling1 FormalParameter ReferenceType Node sibling2 TryStatement LocalVariableDeclaration ReferenceType javax ReferenceType jcr ReferenceType Node VariableDeclarator parentNode IfStatement BinaryOperation == MethodInvocation parent getName Literal null BlockStatement StatementExpression Assignment MemberReference parentNode MemberReference jcrNode = BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator ref Cast ReferenceType String MethodInvocation parent getReference StatementExpression Assignment MemberReference parentNode Cast ReferenceType javax ReferenceType jcr ReferenceType Node MethodInvocation jcrNode MethodInvocation MemberReference ref getItem getSession = End IfStatement MethodInvocation ConfigurationKey MethodInvocation newNode getName isAttributeKey BlockStatement StatementExpression MethodInvocation MemberReference parent MemberReference parentNode MethodInvocation newNode getName updateAttribute ReturnStatement Literal null End LocalVariableDeclaration ReferenceType javax ReferenceType jcr ReferenceType Node VariableDeclarator elem MethodInvocation parentNode MethodInvocation newNode getName addNode IfStatement BinaryOperation != MethodInvocation newNode getValue Literal null BlockStatement LocalVariableDeclaration ReferenceType Value VariableDeclarator value MethodInvocation MethodInvocation elem MethodInvocation getValueFactory getSession MethodInvocation newNode getValue exportValue StatementExpression MethodInvocation elem MemberReference NODE_CONTENT_PROPERTY MemberReference value setProperty End IfStatement MethodInvocation parentNode MethodInvocation hasOrderableChildNodes getPrimaryNodeType BlockStatement IfStatement BinaryOperation != MemberReference sibling2 Literal null BlockStatement StatementExpression MethodInvocation parentNode MethodInvocation newNode getName MethodInvocation sibling2 getName orderBefore End End ReturnStatement MethodInvocation elem getPath CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log BinaryOperation + Literal ""Cannot update repository for configuration node "" MethodInvocation newNode getName MemberReference re warn ReturnStatement Literal null MethodDeclaration /**
         * Helper method for updating the value of the specified node's
         * attribute with the given name.
         *
         * @param node the affected node
         * @param elem the element that is associated with this node
         * @param name the name of the affected attribute
         */ Modifier private updateAttribute FormalParameter ReferenceType Node node FormalParameter ReferenceType javax ReferenceType jcr ReferenceType Node elem FormalParameter ReferenceType String name RepositoryException IfStatement BinaryOperation && BinaryOperation != MemberReference node Literal null BinaryOperation != MemberReference elem Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator propName MethodInvocation ConfigurationKey MemberReference name attributeName LocalVariableDeclaration ReferenceType List VariableDeclarator attrs MethodInvocation node MemberReference name getChildren LocalVariableDeclaration ReferenceType List VariableDeclarator values ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator ai MethodInvocation attrs iterator MethodInvocation ai hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator attr Cast ReferenceType Node MethodInvocation ai next IfStatement BinaryOperation != MethodInvocation attr getValue Literal null BlockStatement StatementExpression MethodInvocation values MethodInvocation attr getValue add End End IfStatement MethodInvocation elem MemberReference propName hasProperty BlockStatement StatementExpression MethodInvocation elem MethodInvocation remove MemberReference propName getProperty End LocalVariableDeclaration ReferenceType Property VariableDeclarator attrProp LocalVariableDeclaration ReferenceType ValueFactory VariableDeclarator vf MethodInvocation elem MethodInvocation getValueFactory getSession IfStatement BinaryOperation == MethodInvocation values size Literal 0 BlockStatement StatementExpression Assignment MemberReference attrProp Literal null = IfStatement BinaryOperation == MethodInvocation values size Literal 1 BlockStatement StatementExpression Assignment MemberReference attrProp MethodInvocation elem MemberReference propName MethodInvocation MemberReference vf MethodInvocation values Literal 0 get exportValue setProperty = BlockStatement LocalVariableDeclaration ReferenceType Value VariableDeclarator valArray ArrayCreator ReferenceType Value MethodInvocation values size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference valArray length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i valArray MethodInvocation MemberReference vf MethodInvocation values MemberReference i get exportValue = End StatementExpression Assignment MemberReference attrProp MethodInvocation elem MemberReference propName MemberReference valArray setProperty = End End LocalVariableDeclaration ReferenceType String VariableDeclarator ref TernaryExpression BinaryOperation != MemberReference attrProp Literal null MethodInvocation attrProp getPath Literal null ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator ai MethodInvocation attrs iterator MethodInvocation ai hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator attr Cast ReferenceType Node MethodInvocation ai next StatementExpression MethodInvocation attr MemberReference ref setReference End End ReferenceType BuilderVisitor MethodDeclaration /**
     * Converts the JCR <code>Value</code> object to a configuration value of
     * the corresponding runtime Java type. See the <a
     * href=""#dataTypeConversion"">class comment</a> for information on the type
     * conversion applied.
     *
     * @param jcrValue The JCR <code>Value</code> to convert into a
     *            configuration value object.
     * @return The configuration value object.
     * @throws NullPointerException if <code>jcrValue</code> is
     *             <code>null</code>.
     */ Modifier private static ReferenceType Object importValue FormalParameter ReferenceType Value jcrValue RepositoryException SwitchStatement MethodInvocation jcrValue getType SwitchStatementCase MemberReference PropertyType BOOLEAN ReturnStatement ClassCreator ReferenceType Boolean MethodInvocation jcrValue getBoolean SwitchStatementCase MemberReference PropertyType DATE ReturnStatement MethodInvocation jcrValue getDate SwitchStatementCase MemberReference PropertyType DOUBLE ReturnStatement ClassCreator ReferenceType Double MethodInvocation jcrValue getDouble SwitchStatementCase MemberReference PropertyType LONG ReturnStatement ClassCreator ReferenceType Long MethodInvocation jcrValue getLong SwitchStatementCase ReturnStatement MethodInvocation jcrValue getString End MethodDeclaration /**
     * Converts the value object to a JCR <code>Value</code> instance
     * according to the runtime type of the <code>value</code>. See the <a
     * href=""#dataTypeConversion"">class comment</a> for information on the type
     * conversion applied.
     *
     * @param vf The <code>ValueFactory</code> used to create JCR
     *            <code>Value</code> objects.
     * @param value The configuration value to convert (export) to a JCR
     *            <code>Value</code> object.
     * @return The JCR <code>Value</code> object representing the
     *         configuration value.
     */ Modifier private static ReferenceType Value exportValue FormalParameter ReferenceType ValueFactory vf FormalParameter ReferenceType Object value IfStatement BinaryOperation instanceof MemberReference value ReferenceType String BlockStatement ReturnStatement MethodInvocation vf Cast ReferenceType String MemberReference value createValue IfStatement BinaryOperation instanceof MemberReference value ReferenceType Boolean BlockStatement ReturnStatement MethodInvocation vf Cast ReferenceType Boolean MemberReference value createValue IfStatement BinaryOperation instanceof MemberReference value ReferenceType Calendar BlockStatement ReturnStatement MethodInvocation vf Cast ReferenceType Calendar MemberReference value createValue IfStatement BinaryOperation || BinaryOperation instanceof MemberReference value ReferenceType Double BinaryOperation instanceof MemberReference value ReferenceType Float BlockStatement ReturnStatement MethodInvocation vf Cast ReferenceType Number MemberReference value createValue IfStatement BinaryOperation instanceof MemberReference value ReferenceType Number BlockStatement ReturnStatement MethodInvocation vf Cast ReferenceType Number MemberReference value createValue BlockStatement ReturnStatement MethodInvocation vf MethodInvocation String MemberReference value valueOf createValue End End End End End ReferenceType HierarchicalConfiguration ReferenceType RepositoryConfiguration",0
326,326,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.iterator Import javax.jcr.observation.Event Import javax.jcr.observation.EventIterator ClassDeclaration Modifier public /**
 * Array implementation of the JCR
 * {@link javax.jcr.EventIterator EventIterator} interface.
 * This class is used by the JCR-RMI client adapters to convert
 * node arrays to iterators.
 *
 * @author Felix Meschberger
 */ ArrayEventIterator ConstructorDeclaration Modifier public /**
     * Creates an iterator for the given array of events.
     *
     * @param nodes the nodes to iterate
     */ ArrayEventIterator FormalParameter ReferenceType Event nodes StatementExpression SuperConstructorInvocation MemberReference nodes MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Event nextEvent ReturnStatement Cast ReferenceType Event MethodInvocation next ReferenceType ArrayIterator ReferenceType EventIterator",1
77,77,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import java.util.Calendar Import javax.jcr.RepositoryException Import javax.jcr.version.Version Import org.apache.jackrabbit.rmi.remote.RemoteVersion Import org.apache.jackrabbit.rmi.remote.RemoteVersionHistory ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link javax.jcr.version.Version Version} interface.
 * This class makes a local version available as an RMI service using
 * the {@link org.apache.jackrabbit.rmi.remote.RemoteVersion RemoteVersion}
 * interface.
 *
 * @author Felix Meschberger
 * @see javax.jcr.version.Version
 * @see org.apache.jackrabbit.rmi.remote.RemoteVersion
 */ ServerVersion FieldDeclaration /** The adapted local version. */ Modifier private ReferenceType Version VariableDeclarator version ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local version.
     *
     * @param version local version
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerVersion FormalParameter ReferenceType Version version FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference version MemberReference factory StatementExpression Assignment This MemberReference version MemberReference version = MethodDeclaration /**
     * Utility method for creating an array of remote references for
     * local versions. The remote references are created using the
     * remote adapter factory.
     * <p>
     * A <code>null</code> input is treated as an empty array.
     *
     * @param versions local version array
     * @return remote version array
     * @throws RemoteException on RMI errors
     */ Modifier private ReferenceType RemoteVersion getRemoteVersionArray FormalParameter ReferenceType Version versions RemoteException IfStatement BinaryOperation != MemberReference versions Literal null BlockStatement LocalVariableDeclaration ReferenceType RemoteVersion VariableDeclarator remotes ArrayCreator ReferenceType RemoteVersion MemberReference versions length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference remotes length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i remotes MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i versions getRemoteVersion getFactory = End ReturnStatement MemberReference remotes BlockStatement ReturnStatement ArrayCreator ReferenceType RemoteVersion Literal 0 End MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType Calendar getCreated RepositoryException TryStatement ReturnStatement MethodInvocation version getCreated CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteVersion getSuccessors RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation MethodInvocation version getSuccessors getRemoteVersionArray CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteVersion getPredecessors RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation MethodInvocation version getPredecessors getRemoteVersionArray CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteVersionHistory getContainingHistory RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation MethodInvocation MethodInvocation version getContainingHistory getRemoteVersionHistory getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException ReferenceType ServerNode ReferenceType RemoteVersion",0
442,442,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Node Import javax.jcr.Session Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Rename a <code>Node<code>
 */ Rename FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType Rename getLog FieldDeclaration /** source path */ Modifier private ReferenceType String VariableDeclarator srcPathKey Literal ""srcPath"" FieldDeclaration /** destination path */ Modifier private ReferenceType String VariableDeclarator destPathKey Literal ""destPath"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator from Cast ReferenceType String MethodInvocation ctx This MemberReference srcPathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator to Cast ReferenceType String MethodInvocation ctx This MemberReference destPathKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""renaming node from "" MemberReference from Literal "" to "" MemberReference to debug End LocalVariableDeclaration ReferenceType Session VariableDeclarator s MethodInvocation CommandHelper MemberReference ctx getSession LocalVariableDeclaration ReferenceType Node VariableDeclarator nodeFrom MethodInvocation CommandHelper MemberReference ctx MemberReference from getNode IfStatement BinaryOperation == MethodInvocation nodeFrom getDepth Literal 1 BlockStatement StatementExpression MethodInvocation s MethodInvocation nodeFrom getPath BinaryOperation + Literal ""/"" MemberReference to move BlockStatement StatementExpression MethodInvocation s MethodInvocation nodeFrom getPath BinaryOperation + BinaryOperation + MethodInvocation nodeFrom MethodInvocation getPath getParent Literal ""/"" MemberReference to move End ReturnStatement Literal false MethodDeclaration /**
     * @return the destination path key
     */ Modifier public ReferenceType String getDestPathKey ReturnStatement MemberReference destPathKey MethodDeclaration /**
     * @param destPathKey
     *        the destination path key to set
     */ Modifier public setDestPathKey FormalParameter ReferenceType String destPathKey StatementExpression Assignment This MemberReference destPathKey MemberReference destPathKey = MethodDeclaration /**
     * @return the source path key
     */ Modifier public ReferenceType String getSrcPathKey ReturnStatement MemberReference srcPathKey MethodDeclaration /**
     * @param srcPathKey
     *        the source path key to set
     */ Modifier public setSrcPathKey FormalParameter ReferenceType String srcPathKey StatementExpression Assignment This MemberReference srcPathKey MemberReference srcPathKey = ReferenceType Command",0
688,688,,1
849,849,,0
687,687,,0
840,840,,0
44,44,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.commons.collections.MapIterator Import org.apache.commons.collections.map.LinkedMap Import org.apache.commons.collections.map.ReferenceMap Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.nodetype.NodeDefId Import org.apache.jackrabbit.name.QName Import java.io.IOException Import java.io.ObjectInputStream Import java.io.ObjectOutputStream Import java.io.Serializable Import java.util.ArrayList Import java.util.Collection Import java.util.Collections Import java.util.HashMap Import java.util.HashSet Import java.util.Iterator Import java.util.List Import java.util.ListIterator Import java.util.Map Import java.util.Set ClassDeclaration Modifier public /**
 * <code>NodeState</code> represents the state of a <code>Node</code>.
 */ NodeState FieldDeclaration /** Serialization UID of this class. */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal - 4116945555530446652L FieldDeclaration /** the uuid of this node */ Modifier protected ReferenceType String VariableDeclarator uuid FieldDeclaration /** the name of this node's primary type */ Modifier protected ReferenceType QName VariableDeclarator nodeTypeName FieldDeclaration /** the names of this node's mixin types */ Modifier protected ReferenceType Set VariableDeclarator mixinTypeNames ClassCreator ReferenceType HashSet FieldDeclaration /** id of this node's definition */ Modifier protected ReferenceType NodeDefId VariableDeclarator defId FieldDeclaration /** insertion-ordered collection of ChildNodeEntry objects */ Modifier protected ReferenceType ChildNodeEntries VariableDeclarator childNodeEntries ClassCreator ReferenceType ChildNodeEntries FieldDeclaration /** set of property names (QName objects) */ Modifier protected ReferenceType Set VariableDeclarator propertyNames ClassCreator ReferenceType HashSet FieldDeclaration /**
     * Listeners (weak references)
     */ Modifier private final transient ReferenceType ReferenceMap VariableDeclarator listeners ClassCreator ReferenceType ReferenceMap MemberReference ReferenceMap WEAK MemberReference ReferenceMap WEAK ConstructorDeclaration Modifier public /**
     * Constructor
     *
     * @param overlayedState the backing node state being overlayed
     * @param initialStatus  the initial status of the node state object
     * @param isTransient    flag indicating whether this state is transient or not
     */ NodeState FormalParameter ReferenceType NodeState overlayedState FormalParameter BasicType int initialStatus FormalParameter BasicType boolean isTransient StatementExpression SuperConstructorInvocation MemberReference initialStatus MemberReference isTransient StatementExpression MethodInvocation MemberReference overlayedState connect StatementExpression MethodInvocation pull ConstructorDeclaration Modifier public /**
     * Constructor
     *
     * @param uuid          the UUID of the this node
     * @param nodeTypeName  node type of this node
     * @param parentUUID    the UUID of the parent node
     * @param initialStatus the initial status of the node state object
     * @param isTransient   flag indicating whether this state is transient or not
     */ NodeState FormalParameter ReferenceType String uuid FormalParameter ReferenceType QName nodeTypeName FormalParameter ReferenceType String parentUUID FormalParameter BasicType int initialStatus FormalParameter BasicType boolean isTransient StatementExpression SuperConstructorInvocation MemberReference parentUUID ClassCreator ReferenceType NodeId MemberReference uuid MemberReference initialStatus MemberReference isTransient StatementExpression Assignment This MemberReference nodeTypeName MemberReference nodeTypeName = StatementExpression Assignment This MemberReference uuid MemberReference uuid = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected synchronized copy FormalParameter ReferenceType ItemState state SynchronizedStatement MemberReference state StatementExpression SuperMethodInvocation MemberReference state copy LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState Cast ReferenceType NodeState MemberReference state StatementExpression Assignment MemberReference nodeTypeName MethodInvocation nodeState getNodeTypeName = StatementExpression Assignment MemberReference mixinTypeNames ClassCreator ReferenceType HashSet MethodInvocation nodeState getMixinTypeNames = StatementExpression Assignment MemberReference defId MethodInvocation nodeState getDefinitionId = StatementExpression Assignment MemberReference uuid MethodInvocation nodeState getUUID = StatementExpression Assignment MemberReference propertyNames ClassCreator ReferenceType HashSet MethodInvocation nodeState getPropertyNames = StatementExpression Assignment MemberReference childNodeEntries ClassCreator ReferenceType ChildNodeEntries = StatementExpression MethodInvocation childNodeEntries MethodInvocation nodeState getChildNodeEntries addAll MethodDeclaration /**
     * Determines if this item state represents a node.
     *
     * @return always true
     * @see ItemState#isNode
     */ Modifier public final BasicType boolean isNode ReturnStatement Literal true MethodDeclaration /**
     * Returns the name of this node's node type.
     *
     * @return the name of this node's node type.
     */ Modifier public ReferenceType QName getNodeTypeName ReturnStatement MemberReference nodeTypeName MethodDeclaration /**
     * Returns the names of this node's mixin types.
     *
     * @return a set of the names of this node's mixin types.
     */ Modifier public synchronized ReferenceType Set getMixinTypeNames ReturnStatement MethodInvocation Collections MemberReference mixinTypeNames unmodifiableSet MethodDeclaration /**
     * Sets the names of this node's mixin types.
     *
     * @param names set of names of mixin types
     */ Modifier public synchronized setMixinTypeNames FormalParameter ReferenceType Set names StatementExpression MethodInvocation mixinTypeNames clear StatementExpression MethodInvocation mixinTypeNames MemberReference names addAll MethodDeclaration /**
     * Returns the id of the definition applicable to this node state.
     *
     * @return the id of the definition
     */ Modifier public ReferenceType NodeDefId getDefinitionId ReturnStatement MemberReference defId MethodDeclaration /**
     * Sets the id of the definition applicable to this node state.
     *
     * @param defId the id of the definition
     */ Modifier public setDefinitionId FormalParameter ReferenceType NodeDefId defId StatementExpression Assignment This MemberReference defId MemberReference defId = MethodDeclaration /**
     * Returns the UUID of the repository node this node state is representing.
     *
     * @return the UUID
     */ Modifier public ReferenceType String getUUID ReturnStatement MemberReference uuid MethodDeclaration /**
     * Determines if there are any child node entries.
     *
     * @return <code>true</code> if there are child node entries,
     *         <code>false</code> otherwise.
     */ Modifier public BasicType boolean hasChildNodeEntries ReturnStatement MethodInvocation ! childNodeEntries isEmpty MethodDeclaration /**
     * Determines if there is a <code>ChildNodeEntry</code> with the
     * specified <code>name</code>.
     *
     * @param name <code>QName</code> object specifying a node name
     * @return <code>true</code> if there is a <code>ChildNodeEntry</code> with
     *         the specified <code>name</code>.
     */ Modifier public synchronized BasicType boolean hasChildNodeEntry FormalParameter ReferenceType QName name ReturnStatement MethodInvocation ! childNodeEntries MethodInvocation isEmpty MemberReference name get MethodDeclaration /**
     * Determines if there is a <code>ChildNodeEntry</code> with the
     * specified <code>uuid</code>.
     *
     * @param uuid UUID of the child node
     * @return <code>true</code> if there is a <code>ChildNodeEntry</code> with
     *         the specified <code>name</code>.
     */ Modifier public synchronized BasicType boolean hasChildNodeEntry FormalParameter ReferenceType String uuid ReturnStatement BinaryOperation != MethodInvocation childNodeEntries MemberReference uuid get Literal null MethodDeclaration /**
     * Determines if there is a <code>ChildNodeEntry</code> with the
     * specified <code>name</code> and <code>index</code>.
     *
     * @param name  <code>QName</code> object specifying a node name
     * @param index 1-based index if there are same-name child node entries
     * @return <code>true</code> if there is a <code>ChildNodeEntry</code> with
     *         the specified <code>name</code> and <code>index</code>.
     */ Modifier public synchronized BasicType boolean hasChildNodeEntry FormalParameter ReferenceType QName name FormalParameter BasicType int index ReturnStatement BinaryOperation != MethodInvocation childNodeEntries MemberReference name MemberReference index get Literal null MethodDeclaration /**
     * Determines if there is a property entry with the specified
     * <code>QName</code>.
     *
     * @param propName <code>QName</code> object specifying a property name
     * @return <code>true</code> if there is a property entry with the specified
     *         <code>QName</code>.
     */ Modifier public synchronized BasicType boolean hasPropertyName FormalParameter ReferenceType QName propName ReturnStatement MethodInvocation propertyNames MemberReference propName contains MethodDeclaration /**
     * Returns the <code>ChildNodeEntry</code> with the specified name and index
     * or <code>null</code> if there's no such entry.
     *
     * @param nodeName <code>QName</code> object specifying a node name
     * @param index    1-based index if there are same-name child node entries
     * @return the <code>ChildNodeEntry</code> with the specified name and index
     *         or <code>null</code> if there's no such entry.
     */ Modifier public synchronized ReferenceType ChildNodeEntry getChildNodeEntry FormalParameter ReferenceType QName nodeName FormalParameter BasicType int index ReturnStatement MethodInvocation childNodeEntries MemberReference nodeName MemberReference index get MethodDeclaration /**
     * Returns the <code>ChildNodeEntry</code> with the specified uuid or
     * <code>null</code> if there's no such entry.
     *
     * @param uuid UUID of the child node
     * @return the <code>ChildNodeEntry</code> with the specified uuid or
     *         <code>null</code> if there's no such entry.
     * @see #addChildNodeEntry
     * @see #removeChildNodeEntry
     */ Modifier public synchronized ReferenceType ChildNodeEntry getChildNodeEntry FormalParameter ReferenceType String uuid ReturnStatement MethodInvocation childNodeEntries MemberReference uuid get MethodDeclaration /**
     * Returns a list of <code>ChildNodeEntry</code> objects denoting the
     * child nodes of this node.
     *
     * @return list of <code>ChildNodeEntry</code> objects
     * @see #addChildNodeEntry
     * @see #removeChildNodeEntry
     */ Modifier public synchronized ReferenceType List getChildNodeEntries ReturnStatement MemberReference childNodeEntries MethodDeclaration /**
     * Returns a list of <code>ChildNodeEntry</code>s with the specified name.
     *
     * @param nodeName name of the child node entries that should be returned
     * @return list of <code>ChildNodeEntry</code> objects
     * @see #addChildNodeEntry
     * @see #removeChildNodeEntry
     */ Modifier public synchronized ReferenceType List getChildNodeEntries FormalParameter ReferenceType QName nodeName ReturnStatement MethodInvocation childNodeEntries MemberReference nodeName get MethodDeclaration /**
     * Adds a new <code>ChildNodeEntry</code>.
     *
     * @param nodeName <code>QName</code> object specifying the name of the new entry.
     * @param uuid     UUID the new entry is refering to.
     * @return the newly added <code>ChildNodeEntry</code>
     */ Modifier public synchronized ReferenceType ChildNodeEntry addChildNodeEntry FormalParameter ReferenceType QName nodeName FormalParameter ReferenceType String uuid LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator entry MethodInvocation childNodeEntries MemberReference nodeName MemberReference uuid add StatementExpression MethodInvocation MemberReference entry notifyNodeAdded ReturnStatement MemberReference entry MethodDeclaration /**
     * Renames a new <code>ChildNodeEntry</code>.
     *
     * @param oldName <code>QName</code> object specifying the entry's old name
     * @param index 1-based index if there are same-name child node entries
     * @param newName <code>QName</code> object specifying the entry's new name
     * @return <code>true</code> if the entry was sucessfully renamed;
     *         otherwise <code>false</code>
     */ Modifier public synchronized BasicType boolean renameChildNodeEntry FormalParameter ReferenceType QName oldName FormalParameter BasicType int index FormalParameter ReferenceType QName newName LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator oldEntry MethodInvocation childNodeEntries MemberReference oldName MemberReference index remove IfStatement BinaryOperation != MemberReference oldEntry Literal null BlockStatement LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator newEntry MethodInvocation childNodeEntries MemberReference newName MethodInvocation oldEntry getUUID add StatementExpression MethodInvocation MemberReference newEntry notifyNodeAdded StatementExpression MethodInvocation MemberReference oldEntry notifyNodeRemoved ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration /**
     * Removes a <code>ChildNodeEntry</code>.
     *
     * @param nodeName <code>ChildNodeEntry</code> object specifying a node name
     * @param index    1-based index if there are same-name child node entries
     * @return <code>true</code> if the specified child node entry was found
     *         in the list of child node entries and could be removed.
     */ Modifier public synchronized BasicType boolean removeChildNodeEntry FormalParameter ReferenceType QName nodeName FormalParameter BasicType int index LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator entry MethodInvocation childNodeEntries MemberReference nodeName MemberReference index remove IfStatement BinaryOperation != MemberReference entry Literal null BlockStatement StatementExpression MethodInvocation MemberReference entry notifyNodeRemoved End ReturnStatement BinaryOperation != MemberReference entry Literal null MethodDeclaration /**
     * Removes a <code>ChildNodeEntry</code>.
     *
     * @param uuid UUID of the entry to be removed
     * @return <code>true</code> if the specified child node entry was found
     *         in the list of child node entries and could be removed.
     */ Modifier public synchronized BasicType boolean removeChildNodeEntry FormalParameter ReferenceType String uuid LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator entry MethodInvocation childNodeEntries MemberReference uuid remove IfStatement BinaryOperation != MemberReference entry Literal null BlockStatement StatementExpression MethodInvocation MemberReference entry notifyNodeRemoved End ReturnStatement BinaryOperation != MemberReference entry Literal null MethodDeclaration /**
     * Removes all <code>ChildNodeEntry</code>s.
     */ Modifier public synchronized removeAllChildNodeEntries StatementExpression MethodInvocation childNodeEntries removeAll MethodDeclaration /**
     * Sets the list of <code>ChildNodeEntry</code> objects denoting the
     * child nodes of this node.
     */ Modifier public synchronized setChildNodeEntries FormalParameter ReferenceType List nodeEntries StatementExpression MethodInvocation childNodeEntries removeAll StatementExpression MethodInvocation childNodeEntries MemberReference nodeEntries addAll StatementExpression MethodInvocation notifyNodesReplaced MethodDeclaration /**
     * Returns the names of this node's properties as a set of
     * <code>QNames</code> objects.
     *
     * @return set of <code>QNames</code> objects
     * @see #addPropertyName
     * @see #removePropertyName
     */ Modifier public synchronized ReferenceType Set getPropertyNames ReturnStatement MethodInvocation Collections MemberReference propertyNames unmodifiableSet MethodDeclaration /**
     * Adds a property name entry.
     *
     * @param propName <code>QName</code> object specifying the property name
     */ Modifier public synchronized addPropertyName FormalParameter ReferenceType QName propName StatementExpression MethodInvocation propertyNames MemberReference propName add MethodDeclaration /**
     * Removes a property name entry.
     *
     * @param propName <code>QName</code> object specifying the property name
     * @return <code>true</code> if the specified property name was found
     *         in the list of property name entries and could be removed.
     */ Modifier public synchronized BasicType boolean removePropertyName FormalParameter ReferenceType QName propName ReturnStatement MethodInvocation propertyNames MemberReference propName remove MethodDeclaration /**
     * Removes all property name entries.
     */ Modifier public synchronized removeAllPropertyNames StatementExpression MethodInvocation propertyNames clear MethodDeclaration /**
     * Sets the set of <code>QName</code> objects denoting the
     * properties of this node.
     */ Modifier public synchronized setPropertyNames FormalParameter ReferenceType Set propNames StatementExpression MethodInvocation propertyNames clear StatementExpression MethodInvocation propertyNames MemberReference propNames addAll MethodDeclaration /**
     * Set the node type name. Needed for deserialization and should therefore
     * not change the internal status.
     *
     * @param nodeTypeName node type name
     */ Modifier public synchronized setNodeTypeName FormalParameter ReferenceType QName nodeTypeName StatementExpression Assignment This MemberReference nodeTypeName MemberReference nodeTypeName = MethodDeclaration /**
     * Returns a set of <code>QName</code>s denoting those properties that
     * do not exist in the overlayed node state but have been added to
     * <i>this</i> node state.
     *
     * @return set of <code>QName</code>s denoting the properties that have
     *         been added.
     */ Modifier public synchronized ReferenceType Set getAddedPropertyNames IfStatement MethodInvocation ! hasOverlayedState BlockStatement ReturnStatement MethodInvocation Collections MemberReference propertyNames unmodifiableSet End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator other Cast ReferenceType NodeState MethodInvocation getOverlayedState LocalVariableDeclaration ReferenceType HashSet VariableDeclarator set ClassCreator ReferenceType HashSet MemberReference propertyNames StatementExpression MethodInvocation set MemberReference other propertyNames removeAll ReturnStatement MemberReference set MethodDeclaration /**
     * Returns a list of child node entries that do not exist in the overlayed
     * node state but have been added to <i>this</i> node state.
     *
     * @return list of added child node entries
     */ Modifier public synchronized ReferenceType List getAddedChildNodeEntries IfStatement MethodInvocation ! hasOverlayedState BlockStatement ReturnStatement MemberReference childNodeEntries End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator other Cast ReferenceType NodeState MethodInvocation getOverlayedState ReturnStatement MethodInvocation childNodeEntries MemberReference other childNodeEntries removeAll MethodDeclaration /**
     * Returns a set of <code>QName</code>s denoting those properties that
     * exist in the overlayed node state but have been removed from
     * <i>this</i> node state.
     *
     * @return set of <code>QName</code>s denoting the properties that have
     *         been removed.
     */ Modifier public synchronized ReferenceType Set getRemovedPropertyNames IfStatement MethodInvocation ! hasOverlayedState BlockStatement ReturnStatement MemberReference Collections EMPTY_SET End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator other Cast ReferenceType NodeState MethodInvocation getOverlayedState LocalVariableDeclaration ReferenceType HashSet VariableDeclarator set ClassCreator ReferenceType HashSet MemberReference other propertyNames StatementExpression MethodInvocation set MemberReference propertyNames removeAll ReturnStatement MemberReference set MethodDeclaration /**
     * Returns a list of child node entries, that exist in the overlayed node state
     * but have been removed from <i>this</i> node state.
     *
     * @return list of removed child node entries
     */ Modifier public synchronized ReferenceType List getRemovedChildNodeEntries IfStatement MethodInvocation ! hasOverlayedState BlockStatement ReturnStatement MemberReference Collections EMPTY_LIST End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator other Cast ReferenceType NodeState MethodInvocation getOverlayedState ReturnStatement MethodInvocation other.childNodeEntries MemberReference childNodeEntries removeAll MethodDeclaration /**
     * Returns a list of child node entries that exist both in <i>this</i> node
     * state and in the overlayed node state but have been reordered.
     * <p/>
     * The list may include only the minimal set of nodes that have been
     * reordered. That is, even though a certain number of nodes have changed
     * their absolute position the list may include less that this number of
     * nodes.
     * <p/>
     * Example:<br/>
     * Initial state:
     * <pre>
     *  + node1
     *  + node2
     *  + node3
     * </pre>
     * After reorder:
     * <pre>
     *  + node2
     *  + node3
     *  + node1
     * </pre>
     * All nodes have changed their absolute position. The returned list however
     * may only return that <code>node1</code> has been reordered (from the
     * first position to the end).
     *
     * @return list of reordered child node enties.
     */ Modifier public synchronized ReferenceType List getReorderedChildNodeEntries IfStatement MethodInvocation ! hasOverlayedState BlockStatement ReturnStatement MemberReference Collections EMPTY_LIST End LocalVariableDeclaration ReferenceType List VariableDeclarator others ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation others Cast ReferenceType NodeState MethodInvocation getOverlayedState addAll LocalVariableDeclaration ReferenceType List VariableDeclarator ours ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation ours MemberReference childNodeEntries addAll LocalVariableDeclaration ReferenceType List VariableDeclarator reordered Literal null StatementExpression MethodInvocation ours MethodInvocation getAddedChildNodeEntries removeAll StatementExpression MethodInvocation others MethodInvocation getRemovedChildNodeEntries removeAll ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation ours size BlockStatement LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType ChildNodeEntry MethodInvocation ours MemberReference i get LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator other Cast ReferenceType ChildNodeEntry MethodInvocation others MemberReference i get IfStatement MethodInvocation ! entry MethodInvocation MethodInvocation other getUUID equals getUUID BlockStatement IfStatement BinaryOperation == MemberReference reordered Literal null BlockStatement StatementExpression Assignment MemberReference reordered ClassCreator ReferenceType ArrayList = End IfStatement BinaryOperation < BinaryOperation + MemberReference i Literal 1 MethodInvocation ours size BlockStatement IfStatement MethodInvocation entry MethodInvocation Cast ReferenceType ChildNodeEntry MethodInvocation others BinaryOperation + MemberReference i Literal 1 get equals getUUID BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j MemberReference i BinaryOperation < MemberReference j MethodInvocation ours size MemberReference ++ j BlockStatement IfStatement Cast ReferenceType ChildNodeEntry MethodInvocation ours MemberReference j get BlockStatement StatementExpression Assignment MemberReference entry Cast ReferenceType ChildNodeEntry MethodInvocation ours MemberReference j get = BreakStatement End End End End StatementExpression MethodInvocation reordered MemberReference entry add ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j MemberReference i BinaryOperation < MemberReference j MethodInvocation ours size MemberReference ++ j BlockStatement IfStatement Cast ReferenceType ChildNodeEntry MethodInvocation ours MemberReference j get BlockStatement StatementExpression MethodInvocation ours MemberReference j remove End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j MemberReference i BinaryOperation < MemberReference j MethodInvocation ours size MemberReference ++ j BlockStatement IfStatement Cast ReferenceType ChildNodeEntry MethodInvocation others MemberReference j get BlockStatement StatementExpression MethodInvocation others MemberReference j remove End End BlockStatement StatementExpression MemberReference ++ i End End IfStatement BinaryOperation == MemberReference reordered Literal null BlockStatement ReturnStatement MemberReference Collections EMPTY_LIST BlockStatement ReturnStatement MemberReference reordered End MethodDeclaration /**
     * {@inheritDoc}
     *
     * If the listener passed is at the same time a <code>NodeStateListener</code>
     * we add it to our list of specialized listeners.
     */ Modifier public addListener FormalParameter ReferenceType ItemStateListener listener IfStatement BinaryOperation instanceof MemberReference listener ReferenceType NodeStateListener BlockStatement SynchronizedStatement MemberReference listeners IfStatement MethodInvocation ! listeners MemberReference listener containsKey BlockStatement StatementExpression MethodInvocation listeners MemberReference listener MemberReference listener put End End StatementExpression SuperMethodInvocation MemberReference listener addListener MethodDeclaration /**
     * {@inheritDoc}
     *
     * If the listener passed is at the same time a <code>NodeStateListener</code>
     * we remove it from our list of specialized listeners.
     */ Modifier public removeListener FormalParameter ReferenceType ItemStateListener listener IfStatement BinaryOperation instanceof MemberReference listener ReferenceType NodeStateListener BlockStatement SynchronizedStatement MemberReference listeners StatementExpression MethodInvocation listeners MemberReference listener remove End StatementExpression SuperMethodInvocation MemberReference listener removeListener MethodDeclaration /**
     * Notify the listeners that a child node entry has been added
     */ Modifier protected notifyNodeAdded FormalParameter ReferenceType ChildNodeEntry added SynchronizedStatement MemberReference listeners LocalVariableDeclaration ReferenceType MapIterator VariableDeclarator iter MethodInvocation listeners mapIterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeStateListener VariableDeclarator l Cast ReferenceType NodeStateListener MethodInvocation iter next IfStatement BinaryOperation != MemberReference l Literal null BlockStatement StatementExpression MethodInvocation l This MethodInvocation added getName MethodInvocation added getIndex MethodInvocation added getUUID nodeAdded End End MethodDeclaration /**
     * Notify the listeners that the child node entries have been replaced
     */ Modifier protected notifyNodesReplaced SynchronizedStatement MemberReference listeners LocalVariableDeclaration ReferenceType MapIterator VariableDeclarator iter MethodInvocation listeners mapIterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeStateListener VariableDeclarator l Cast ReferenceType NodeStateListener MethodInvocation iter next IfStatement BinaryOperation != MemberReference l Literal null BlockStatement StatementExpression MethodInvocation l This nodesReplaced End End MethodDeclaration /**
     * Notify the listeners that a child node entry has been removed
     */ Modifier protected notifyNodeRemoved FormalParameter ReferenceType ChildNodeEntry removed SynchronizedStatement MemberReference listeners LocalVariableDeclaration ReferenceType MapIterator VariableDeclarator iter MethodInvocation listeners mapIterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeStateListener VariableDeclarator l Cast ReferenceType NodeStateListener MethodInvocation iter next IfStatement BinaryOperation != MemberReference l Literal null BlockStatement StatementExpression MethodInvocation l This MethodInvocation removed getName MethodInvocation removed getIndex MethodInvocation removed getUUID nodeRemoved End End MethodDeclaration Modifier private writeObject FormalParameter ReferenceType ObjectOutputStream out IOException StatementExpression MethodInvocation out defaultWriteObject MethodDeclaration Modifier private readObject FormalParameter ReferenceType ObjectInputStream in IOException ClassNotFoundException StatementExpression MethodInvocation in defaultReadObject ClassDeclaration Modifier private static /**
     * <code>ChildNodeEntries</code> represents an insertion-ordered
     * collection of <code>ChildNodeEntry</code>s that also maintains
     * the index values of same-name siblings on insertion and removal.
     * <p/>
     * <code>ChildNodeEntries</code> also provides an unmodifiable
     * <code>List</code> view.
     */ ChildNodeEntries FieldDeclaration ReferenceType LinkedMap VariableDeclarator entries FieldDeclaration ReferenceType Map VariableDeclarator nameMap ConstructorDeclaration ChildNodeEntries StatementExpression Assignment MemberReference entries ClassCreator ReferenceType LinkedMap = StatementExpression Assignment MemberReference nameMap ClassCreator ReferenceType HashMap = MethodDeclaration ReferenceType ChildNodeEntry add FormalParameter ReferenceType QName nodeName FormalParameter ReferenceType String uuid LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator sibling Cast ReferenceType ChildNodeEntry MethodInvocation nameMap MemberReference nodeName get WhileStatement BinaryOperation && BinaryOperation != MemberReference sibling Literal null BinaryOperation != MethodInvocation sibling getNextSibling Literal null BlockStatement StatementExpression Assignment MemberReference sibling MethodInvocation sibling getNextSibling = End LocalVariableDeclaration BasicType int VariableDeclarator index TernaryExpression BinaryOperation == MemberReference sibling Literal null Literal 1 BinaryOperation + MethodInvocation sibling getIndex Literal 1 LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator entry ClassCreator ReferenceType ChildNodeEntry MemberReference nodeName MemberReference uuid MemberReference index IfStatement BinaryOperation == MemberReference sibling Literal null BlockStatement StatementExpression MethodInvocation nameMap MemberReference nodeName MemberReference entry put BlockStatement StatementExpression MethodInvocation sibling MemberReference entry setNextSibling End StatementExpression MethodInvocation entries MemberReference uuid MemberReference entry put ReturnStatement MemberReference entry MethodDeclaration addAll FormalParameter ReferenceType List entriesList LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation entriesList iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType ChildNodeEntry MethodInvocation iter next StatementExpression MethodInvocation MethodInvocation entry getName MethodInvocation entry getUUID add End MethodDeclaration Modifier public removeAll StatementExpression MethodInvocation entries clear StatementExpression MethodInvocation nameMap clear MethodDeclaration ReferenceType ChildNodeEntry remove FormalParameter ReferenceType String uuid LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType ChildNodeEntry MethodInvocation entries MemberReference uuid get IfStatement BinaryOperation != MemberReference entry Literal null BlockStatement ReturnStatement MethodInvocation MethodInvocation entry getName MethodInvocation entry getIndex remove End ReturnStatement MemberReference entry MethodDeclaration Modifier public ReferenceType ChildNodeEntry remove FormalParameter ReferenceType ChildNodeEntry entry ReturnStatement MethodInvocation MethodInvocation entry getName MethodInvocation entry getIndex remove MethodDeclaration Modifier public ReferenceType ChildNodeEntry remove FormalParameter ReferenceType QName nodeName FormalParameter BasicType int index IfStatement BinaryOperation < MemberReference index Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""index is 1-based"" End LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator sibling Cast ReferenceType ChildNodeEntry MethodInvocation nameMap MemberReference nodeName get LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator prevSibling Literal null WhileStatement BinaryOperation != MemberReference sibling Literal null BlockStatement IfStatement BinaryOperation == MethodInvocation sibling getIndex MemberReference index BlockStatement BreakStatement End StatementExpression Assignment MemberReference prevSibling MemberReference sibling = StatementExpression Assignment MemberReference sibling MethodInvocation sibling getNextSibling = End IfStatement BinaryOperation == MemberReference sibling Literal null BlockStatement ReturnStatement Literal null End StatementExpression MethodInvocation entries MethodInvocation sibling getUUID remove IfStatement BinaryOperation != MemberReference prevSibling Literal null BlockStatement StatementExpression MethodInvocation prevSibling MethodInvocation sibling getNextSibling setNextSibling BlockStatement IfStatement BinaryOperation == MethodInvocation sibling getNextSibling Literal null BlockStatement StatementExpression MethodInvocation nameMap MemberReference nodeName remove BlockStatement StatementExpression MethodInvocation nameMap MemberReference nodeName MethodInvocation sibling getNextSibling put End End LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator nextSibling MethodInvocation sibling getNextSibling WhileStatement BinaryOperation != MemberReference nextSibling Literal null BlockStatement StatementExpression MethodInvocation nextSibling decIndex StatementExpression Assignment MemberReference nextSibling MethodInvocation nextSibling getNextSibling = End ReturnStatement MemberReference sibling MethodDeclaration ReferenceType List get FormalParameter ReferenceType QName nodeName LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator sibling Cast ReferenceType ChildNodeEntry MethodInvocation nameMap MemberReference nodeName get IfStatement BinaryOperation == MemberReference sibling Literal null BlockStatement ReturnStatement MemberReference Collections EMPTY_LIST End LocalVariableDeclaration ReferenceType List VariableDeclarator siblings ClassCreator ReferenceType ArrayList WhileStatement BinaryOperation != MemberReference sibling Literal null BlockStatement StatementExpression MethodInvocation siblings MemberReference sibling add StatementExpression Assignment MemberReference sibling MethodInvocation sibling getNextSibling = End ReturnStatement MemberReference siblings MethodDeclaration ReferenceType ChildNodeEntry get FormalParameter ReferenceType String uuid ReturnStatement Cast ReferenceType ChildNodeEntry MethodInvocation entries MemberReference uuid get MethodDeclaration ReferenceType ChildNodeEntry get FormalParameter ReferenceType QName nodeName FormalParameter BasicType int index IfStatement BinaryOperation < MemberReference index Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""index is 1-based"" End LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator sibling Cast ReferenceType ChildNodeEntry MethodInvocation nameMap MemberReference nodeName get WhileStatement BinaryOperation != MemberReference sibling Literal null BlockStatement IfStatement BinaryOperation == MethodInvocation sibling getIndex MemberReference index BlockStatement ReturnStatement MemberReference sibling End StatementExpression Assignment MemberReference sibling MethodInvocation sibling getNextSibling = End ReturnStatement Literal null MethodDeclaration /**
         * Returns a list of <code>ChildNodeEntry</code>s who do only exist in
         * <code>this</code> but not in <code>other</code>
         * <p/>
         * Note that two entries are considered identical in this context if
         * they have the same name and uuid, i.e. the index is disregarded
         * whereas <code>ChildNodeEntry.equals(Object)</code> also compares
         * the index.
         *
         * @param other entries to be removed
         * @return a new list of those entries that do only exist in
         *         <code>this</code> but not in <code>other</code>
         */ ReferenceType List removeAll FormalParameter ReferenceType ChildNodeEntries other IfStatement MethodInvocation entries isEmpty BlockStatement ReturnStatement MemberReference Collections EMPTY_LIST End IfStatement MethodInvocation other isEmpty BlockStatement ReturnStatement This End LocalVariableDeclaration ReferenceType List VariableDeclarator result ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType ChildNodeEntry MethodInvocation iter next LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator otherEntry Cast ReferenceType ChildNodeEntry MethodInvocation other MemberReference entry uuid get IfStatement BinaryOperation || BinaryOperation == MemberReference otherEntry Literal null MethodInvocation ! entry MethodInvocation MethodInvocation otherEntry getName equals getName BlockStatement StatementExpression MethodInvocation result MemberReference entry add End End ReturnStatement MemberReference result MethodDeclaration Modifier public BasicType boolean contains FormalParameter ReferenceType Object o IfStatement BinaryOperation instanceof MemberReference o ReferenceType ChildNodeEntry BlockStatement ReturnStatement MethodInvocation entries Cast ReferenceType ChildNodeEntry MemberReference o containsKey BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier public BasicType boolean containsAll FormalParameter ReferenceType Collection c LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation c iterator WhileStatement MethodInvocation iter hasNext BlockStatement IfStatement MethodInvocation ! MethodInvocation iter next contains BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration Modifier public ReferenceType Object get FormalParameter BasicType int index ReturnStatement MethodInvocation entries MemberReference index getValue MethodDeclaration Modifier public BasicType int indexOf FormalParameter ReferenceType Object o IfStatement BinaryOperation instanceof MemberReference o ReferenceType ChildNodeEntry BlockStatement ReturnStatement MethodInvocation entries Cast ReferenceType ChildNodeEntry MemberReference o indexOf BlockStatement ReturnStatement Literal - 1 End MethodDeclaration Modifier public BasicType boolean isEmpty ReturnStatement MethodInvocation entries isEmpty MethodDeclaration Modifier public BasicType int lastIndexOf FormalParameter ReferenceType Object o ReturnStatement MethodInvocation MemberReference o indexOf MethodDeclaration Modifier public ReferenceType Iterator iterator ReturnStatement ClassCreator ReferenceType OrderedMapIterator MethodInvocation entries MethodInvocation listIterator asList MemberReference entries MethodDeclaration Modifier public ReferenceType ListIterator listIterator ReturnStatement ClassCreator ReferenceType OrderedMapIterator MethodInvocation entries MethodInvocation listIterator asList MemberReference entries MethodDeclaration Modifier public ReferenceType ListIterator listIterator FormalParameter BasicType int index ReturnStatement ClassCreator ReferenceType OrderedMapIterator MethodInvocation entries MethodInvocation MemberReference index listIterator asList MemberReference entries MethodDeclaration Modifier public BasicType int size ReturnStatement MethodInvocation entries size MethodDeclaration Modifier public ReferenceType List subList FormalParameter BasicType int fromIndex FormalParameter BasicType int toIndex ReturnStatement MethodInvocation Collections ClassCreator MethodInvocation MemberReference fromIndex MemberReference toIndex subList ReferenceType ArrayList This unmodifiableList MethodDeclaration Modifier public ReferenceType Object toArray LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator array ArrayCreator ReferenceType ChildNodeEntry MethodInvocation size ReturnStatement MethodInvocation MemberReference array toArray MethodDeclaration Modifier public ReferenceType Object toArray FormalParameter ReferenceType Object a IfStatement MethodInvocation ! a MethodInvocation getComponentType MethodInvocation ClassReference ReferenceType ChildNodeEntry isAssignableFrom getClass BlockStatement ThrowStatement ClassCreator ReferenceType ArrayStoreException End IfStatement BinaryOperation < MemberReference a length MethodInvocation size BlockStatement StatementExpression Assignment MemberReference a ArrayCreator ReferenceType ChildNodeEntry MethodInvocation size = End LocalVariableDeclaration ReferenceType MapIterator VariableDeclarator iter MethodInvocation entries mapIterator LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression MethodInvocation iter next StatementExpression Assignment MemberReference ArraySelector MemberReference i a MethodInvocation entries MemberReference i getValue = StatementExpression MemberReference ++ i End WhileStatement BinaryOperation < MemberReference i MemberReference a length BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ i a Literal null = End ReturnStatement MemberReference a MethodDeclaration Modifier public add FormalParameter BasicType int index FormalParameter ReferenceType Object element ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public BasicType boolean add FormalParameter ReferenceType Object o ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public BasicType boolean addAll FormalParameter ReferenceType Collection c ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public BasicType boolean addAll FormalParameter BasicType int index FormalParameter ReferenceType Collection c ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public clear ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public ReferenceType Object remove FormalParameter BasicType int index ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public BasicType boolean remove FormalParameter ReferenceType Object o ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public BasicType boolean removeAll FormalParameter ReferenceType Collection c ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public BasicType boolean retainAll FormalParameter ReferenceType Collection c ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public ReferenceType Object set FormalParameter BasicType int index FormalParameter ReferenceType Object element ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier private writeObject FormalParameter ReferenceType ObjectOutputStream out IOException StatementExpression MethodInvocation out MethodInvocation size writeShort ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation iter next StatementExpression MethodInvocation out MethodInvocation entry MethodInvocation toString getName writeUTF StatementExpression MethodInvocation out MethodInvocation entry getUUID writeUTF End MethodDeclaration Modifier private readObject FormalParameter ReferenceType ObjectInputStream in IOException StatementExpression Assignment MemberReference entries ClassCreator ReferenceType LinkedMap = StatementExpression Assignment MemberReference nameMap ClassCreator ReferenceType HashMap = LocalVariableDeclaration BasicType short VariableDeclarator count MethodInvocation in readShort ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator name MethodInvocation QName MethodInvocation in readUTF valueOf LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation in readUTF StatementExpression MethodInvocation MemberReference name MemberReference s add End ClassDeclaration OrderedMapIterator FieldDeclaration Modifier final ReferenceType ListIterator VariableDeclarator keyIter FieldDeclaration Modifier final ReferenceType Map VariableDeclarator entries ConstructorDeclaration OrderedMapIterator FormalParameter ReferenceType ListIterator keyIter FormalParameter ReferenceType Map entries StatementExpression Assignment This MemberReference keyIter MemberReference keyIter = StatementExpression Assignment This MemberReference entries MemberReference entries = MethodDeclaration Modifier public BasicType boolean hasNext ReturnStatement MethodInvocation keyIter hasNext MethodDeclaration Modifier public ReferenceType Object next ReturnStatement MethodInvocation entries MethodInvocation keyIter next get MethodDeclaration Modifier public BasicType boolean hasPrevious ReturnStatement MethodInvocation keyIter hasPrevious MethodDeclaration Modifier public BasicType int nextIndex ReturnStatement MethodInvocation keyIter nextIndex MethodDeclaration Modifier public ReferenceType Object previous ReturnStatement MethodInvocation entries MethodInvocation keyIter previous get MethodDeclaration Modifier public BasicType int previousIndex ReturnStatement MethodInvocation keyIter previousIndex MethodDeclaration Modifier public add FormalParameter ReferenceType Object o ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public remove ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier public set FormalParameter ReferenceType Object o ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType ListIterator ReferenceType List ReferenceType Serializable ClassDeclaration Modifier public static /**
     * <code>ChildNodeEntry</code> specifies the name, index (in the case of
     * same-name siblings) and the UUID of a child node entry.
     */ ChildNodeEntry FieldDeclaration Modifier private ReferenceType QName VariableDeclarator name FieldDeclaration Modifier private BasicType int VariableDeclarator index FieldDeclaration Modifier private ReferenceType String VariableDeclarator uuid FieldDeclaration Modifier private ReferenceType ChildNodeEntry VariableDeclarator nextSibling ConstructorDeclaration Modifier private ChildNodeEntry FormalParameter ReferenceType QName name FormalParameter ReferenceType String uuid FormalParameter BasicType int index IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""name can not be null"" End StatementExpression Assignment This MemberReference name MemberReference name = IfStatement BinaryOperation == MemberReference uuid Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""uuid can not be null"" End StatementExpression Assignment This MemberReference uuid MemberReference uuid = IfStatement BinaryOperation < MemberReference index Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""index is 1-based"" End StatementExpression Assignment This MemberReference index MemberReference index = StatementExpression Assignment MemberReference nextSibling Literal null = MethodDeclaration Modifier public ReferenceType String getUUID ReturnStatement MemberReference uuid MethodDeclaration Modifier public ReferenceType QName getName ReturnStatement MemberReference name MethodDeclaration Modifier public BasicType int getIndex ReturnStatement MemberReference index MethodDeclaration Modifier public ReferenceType ChildNodeEntry getNextSibling ReturnStatement MemberReference nextSibling MethodDeclaration setNextSibling FormalParameter ReferenceType ChildNodeEntry nextSibling IfStatement BinaryOperation && BinaryOperation != MemberReference nextSibling Literal null MethodInvocation ! nextSibling MethodInvocation MemberReference name equals getName BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""not a same-name sibling entry"" End StatementExpression Assignment This MemberReference nextSibling MemberReference nextSibling = MethodDeclaration BasicType int incIndex ReturnStatement MemberReference ++ index MethodDeclaration BasicType int decIndex IfStatement BinaryOperation == MemberReference index Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType IndexOutOfBoundsException End ReturnStatement MemberReference -- index MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType ChildNodeEntry BlockStatement LocalVariableDeclaration ReferenceType ChildNodeEntry VariableDeclarator other Cast ReferenceType ChildNodeEntry MemberReference obj ReturnStatement BinaryOperation && BinaryOperation && MethodInvocation name MemberReference other name equals MethodInvocation uuid MemberReference other uuid equals BinaryOperation == MemberReference index MemberReference other index End ReturnStatement Literal false MethodDeclaration Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation name toString Literal ""["" MemberReference index Literal ""] -> "" MemberReference uuid MethodDeclaration /**
         * Returns zero to satisfy the Object equals/hashCode contract.
         * This class is mutable and not meant to be used as a hash key.
         *
         * @return always zero
         * @see Object#hashCode()
         */ Modifier public BasicType int hashCode ReturnStatement Literal 0 ReferenceType ItemState",0
444,444,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import java.util.Iterator ClassDeclaration Modifier public abstract /**
 * Implementation <code>PersistenceManager</code> that handles some
 * concepts.
 */ AbstractPersistenceManager MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeState createNew FormalParameter ReferenceType NodeId id ReturnStatement ClassCreator ReferenceType NodeState MethodInvocation id getUUID Literal null Literal null MemberReference NodeState STATUS_NEW Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType PropertyState createNew FormalParameter ReferenceType PropertyId id ReturnStatement ClassCreator ReferenceType PropertyState MethodInvocation id getName MethodInvocation id getParentUUID MemberReference PropertyState STATUS_NEW Literal false MethodDeclaration /**
     * Right now, this iterates over all items in the changelog and
     * calls the individual methods that handle single item states
     * or node references objects. Properly implemented, this method
     * should ensure that changes are either written completely to
     * the underlying persistence layer, or not at all.
     *
     * {@inheritDoc}
     */ Modifier public synchronized store FormalParameter ReferenceType ChangeLog changeLog ItemStateException LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation changeLog deletedStates WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation iter next IfStatement MethodInvocation state isNode BlockStatement StatementExpression MethodInvocation Cast ReferenceType NodeState MemberReference state destroy BlockStatement StatementExpression MethodInvocation Cast ReferenceType PropertyState MemberReference state destroy End End StatementExpression Assignment MemberReference iter MethodInvocation changeLog addedStates = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation iter next IfStatement MethodInvocation state isNode BlockStatement StatementExpression MethodInvocation Cast ReferenceType NodeState MemberReference state store BlockStatement StatementExpression MethodInvocation Cast ReferenceType PropertyState MemberReference state store End End StatementExpression Assignment MemberReference iter MethodInvocation changeLog modifiedStates = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation iter next IfStatement MethodInvocation state isNode BlockStatement StatementExpression MethodInvocation Cast ReferenceType NodeState MemberReference state store BlockStatement StatementExpression MethodInvocation Cast ReferenceType PropertyState MemberReference state store End End StatementExpression Assignment MemberReference iter MethodInvocation changeLog modifiedRefs = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs Cast ReferenceType NodeReferences MethodInvocation iter next IfStatement MethodInvocation refs hasReferences BlockStatement StatementExpression MethodInvocation MemberReference refs store BlockStatement IfStatement MethodInvocation MethodInvocation refs getTargetId exists BlockStatement StatementExpression MethodInvocation MemberReference refs destroy End End End MethodDeclaration /**
     * Store a node state. Subclass responsibility.
     *
     * @param state node state to store
     * @throws ItemStateException if an error occurs
     */ Modifier protected abstract store FormalParameter ReferenceType NodeState state ItemStateException MethodDeclaration /**
     * Store a property state. Subclass responsibility.
     *
     * @param state property state to store
     * @throws ItemStateException if an error occurs
     */ Modifier protected abstract store FormalParameter ReferenceType PropertyState state ItemStateException MethodDeclaration /**
     * Store a references object. Subclass responsibility.
     *
     * @param refs references object to store
     * @throws ItemStateException if an error occurs
     */ Modifier protected abstract store FormalParameter ReferenceType NodeReferences refs ItemStateException MethodDeclaration /**
     * Destroy a node state. Subclass responsibility.
     *
     * @param state node state to destroy
     * @throws ItemStateException if an error occurs
     */ Modifier protected abstract destroy FormalParameter ReferenceType NodeState state ItemStateException MethodDeclaration /**
     * Destroy a property state. Subclass responsibility.
     *
     * @param state property state to destroy
     * @throws ItemStateException if an error occurs
     */ Modifier protected abstract destroy FormalParameter ReferenceType PropertyState state ItemStateException MethodDeclaration /**
     * Destroy a node references object. Subclass responsibility.
     *
     * @param refs node references object to destroy
     * @throws ItemStateException if an error occurs
     */ Modifier protected abstract destroy FormalParameter ReferenceType NodeReferences refs ItemStateException ReferenceType PersistenceManager",0
692,692,,0
67,67,"CompilationUnit PackageDeclaration org.apache.jackrabbit.lite Import java.util.HashMap Import java.util.Iterator Import java.util.Map Import javax.jcr.NamespaceException Import javax.jcr.NamespaceRegistry Import javax.jcr.RepositoryException Import org.apache.jackrabbit.base.BaseNamespaceRegistry ClassDeclaration Modifier public /**
 * TODO
 */ LiteNamespaceRegistry FieldDeclaration Modifier private final ReferenceType Map VariableDeclarator namespaces ClassCreator ReferenceType HashMap ConstructorDeclaration Modifier public LiteNamespaceRegistry StatementExpression MethodInvocation Literal ""jcr"" Literal ""http://www.jcp.org/jcr/1.0"" addNamespace StatementExpression MethodInvocation Literal ""nt"" Literal ""http://www.jcp.org/jcr/nt/1.0"" addNamespace StatementExpression MethodInvocation Literal ""mix"" Literal ""http://www.jcp.org/jcr/mix/1.0"" addNamespace StatementExpression MethodInvocation Literal ""xml"" Literal ""http://www.w3.org/XML/1998/namespace"" addNamespace StatementExpression MethodInvocation Literal """" Literal """" addNamespace MethodDeclaration Modifier protected addNamespace FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri StatementExpression MethodInvocation namespaces MemberReference prefix MemberReference uri put MethodDeclaration Modifier public ReferenceType String getPrefix FormalParameter ReferenceType String uri RepositoryException LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iterator MethodInvocation namespaces MethodInvocation iterator entrySet WhileStatement MethodInvocation iterator hasNext BlockStatement LocalVariableDeclaration ReferenceType Map ReferenceType Entry VariableDeclarator entry Cast ReferenceType Map ReferenceType Entry MethodInvocation iterator next IfStatement MethodInvocation uri MethodInvocation entry getValue equals BlockStatement ReturnStatement Cast ReferenceType String MethodInvocation entry getKey End End ThrowStatement ClassCreator ReferenceType NamespaceException BinaryOperation + BinaryOperation + Literal ""Namespace URI "" MemberReference uri Literal "" not found"" MethodDeclaration Modifier public ReferenceType String getPrefixes RepositoryException ReturnStatement Cast ReferenceType String MethodInvocation namespaces MethodInvocation ArrayCreator ReferenceType String MethodInvocation namespaces size toArray keySet MethodDeclaration Modifier public ReferenceType String getURI FormalParameter ReferenceType String prefix RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator uri Cast ReferenceType String MethodInvocation namespaces MemberReference prefix get IfStatement BinaryOperation != MemberReference uri Literal null BlockStatement ReturnStatement MemberReference uri BlockStatement ThrowStatement ClassCreator ReferenceType NamespaceException BinaryOperation + BinaryOperation + Literal ""Prefix "" MemberReference prefix Literal "" not found"" End MethodDeclaration Modifier public ReferenceType String getURIs RepositoryException ReturnStatement Cast ReferenceType String MethodInvocation namespaces MethodInvocation ArrayCreator ReferenceType String MethodInvocation namespaces size toArray values ReferenceType BaseNamespaceRegistry ReferenceType NamespaceRegistry",1
39,39,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib Import java.util.Iterator Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.servlet.jsp.JspException Import javax.servlet.jsp.JspTagException Import javax.servlet.jsp.jstl.core.LoopTagSupport Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.taglib.comparator.ItemComparator Import org.apache.jackrabbit.taglib.filter.ItemFilter Import org.apache.jackrabbit.taglib.traverser.Traverser Import org.apache.jackrabbit.taglib.utils.JCRTagConstants Import org.apache.jackrabbit.taglib.utils.JCRTagUtils Import org.apache.taglibs.standard.tag.common.core.NullAttributeException Import org.apache.taglibs.standard.tag.el.core.ExpressionUtil ClassDeclaration Modifier public /**
 * Iterates through the traversed nodes from the given node
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ NodesTag FieldDeclaration Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType NodesTag getLog FieldDeclaration Modifier public static ReferenceType String VariableDeclarator TAG_NAME Literal ""nodes"" FieldDeclaration /**
     * Name of the scoped variable where the jcr session is stored.
     */ Modifier private ReferenceType String VariableDeclarator session FieldDeclaration /**
     * JSTL expression referencing a node or or full path. <br>
     * e.g. /mynode <br>
     * or ${mynode}
     */ Modifier private ReferenceType String VariableDeclarator node FieldDeclaration /**
     * NodeComparator ID
     */ Modifier private ReferenceType String VariableDeclarator sortID FieldDeclaration /**
     * Expression used by the NodeComparator to evaluate nodes. <br>
     * The evaluation must return a Comparable instance. <br>
     */ Modifier private ReferenceType String VariableDeclarator sortExp FieldDeclaration /**
     * Sort order <br>
     * true / false
     */ Modifier private BasicType boolean VariableDeclarator ascending Literal true FieldDeclaration /**
     * Traverser ID.
     */ Modifier private ReferenceType String VariableDeclarator traverserID FieldDeclaration /**
     * Parameter that affects Traverser behaviour
     */ Modifier private ReferenceType String VariableDeclarator traverserParam FieldDeclaration /**
     * Traverse depth
     */ Modifier private BasicType int VariableDeclarator traverserDepth Literal 0 FieldDeclaration /**
     * NodePredicate ID.
     */ Modifier private ReferenceType String VariableDeclarator filterID FieldDeclaration /**
     * Expression used by the NodePredicate to evaluate nodes. The evaluation
     * must return a Boolean instance.
     */ Modifier private ReferenceType String VariableDeclarator filterExp FieldDeclaration /**
     * Children Nodes
     */ Modifier private ReferenceType Iterator VariableDeclarator nodes ConstructorDeclaration Modifier public /**
     *  
     */ NodesTag StatementExpression SuperConstructorInvocation StatementExpression This MethodInvocation init MethodDeclaration /**
     * @inheritDoc
     */ Modifier protected BasicType boolean hasNext JspTagException ReturnStatement MethodInvocation nodes hasNext MethodDeclaration /**
     * @inheritDoc
     */ Modifier protected ReferenceType Object next JspTagException ReturnStatement MethodInvocation nodes next MethodDeclaration /**
     * @inheritDoc
     */ Modifier protected prepare JspTagException TryStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator jcrNode This MethodInvocation getNode LocalVariableDeclaration ReferenceType Traverser VariableDeclarator traverser Cast ReferenceType Traverser MethodInvocation JCRTagUtils This MemberReference traverserID getBean StatementExpression MethodInvocation traverser This MemberReference traverserDepth setDepth StatementExpression MethodInvocation traverser MemberReference jcrNode setNode StatementExpression MethodInvocation traverser This MethodInvocation getTraverserParam setParameter IfStatement BinaryOperation != This MemberReference sortExp Literal null BlockStatement LocalVariableDeclaration ReferenceType ItemComparator VariableDeclarator order Cast ReferenceType ItemComparator MethodInvocation JCRTagUtils This MemberReference sortID getBean StatementExpression MethodInvocation order This MemberReference sortExp setExpression StatementExpression MethodInvocation order This MemberReference ascending setAscending StatementExpression MethodInvocation traverser MemberReference order setOrder End IfStatement BinaryOperation != This MemberReference filterExp Literal null BlockStatement LocalVariableDeclaration ReferenceType ItemFilter VariableDeclarator predicate Cast ReferenceType ItemFilter MethodInvocation JCRTagUtils This MemberReference filterID getBean StatementExpression MethodInvocation predicate This MemberReference filterExp setExpression StatementExpression MethodInvocation traverser MemberReference predicate setFilter End StatementExpression MethodInvocation traverser traverse StatementExpression Assignment This MemberReference nodes MethodInvocation traverser MethodInvocation iterator getNodes = CatchClause CatchClauseParameter PathNotFoundException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e warn ThrowStatement ClassCreator ReferenceType JspTagException MemberReference msg CatchClause CatchClauseParameter RepositoryException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType JspTagException MemberReference msg CatchClause CatchClauseParameter JspException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg MethodInvocation JCRTagUtils MemberReference e getMessage StatementExpression MethodInvocation log MemberReference msg MemberReference e error ThrowStatement ClassCreator ReferenceType JspTagException MemberReference msg MethodDeclaration /**
     * Sets the order ( ascending | descending )
     * 
     * @param ascending
     */ Modifier public setAscending FormalParameter BasicType boolean ascending StatementExpression Assignment This MemberReference ascending MemberReference ascending = MethodDeclaration /**
     * Sets the filter expression
     * 
     * @param filterExp
     */ Modifier public setFilterExp FormalParameter ReferenceType String filterExp StatementExpression Assignment This MemberReference filterExp MemberReference filterExp = MethodDeclaration /**
     * Sets the filter ID
     * 
     * @param filterID
     */ Modifier public setFilterID FormalParameter ReferenceType String filterID StatementExpression Assignment This MemberReference filterID MemberReference filterID = MethodDeclaration /**
     * Sets the node
     * 
     * @param node
     */ Modifier public setNode FormalParameter ReferenceType String node StatementExpression Assignment This MemberReference node MemberReference node = MethodDeclaration /**
     * Sets the session
     * 
     * @param session
     */ Modifier public setSession FormalParameter ReferenceType String session StatementExpression Assignment This MemberReference session MemberReference session = MethodDeclaration /**
     * Sets the sort expression
     * 
     * @param sortExp
     */ Modifier public setSortExp FormalParameter ReferenceType String sortExp StatementExpression Assignment This MemberReference sortExp MemberReference sortExp = MethodDeclaration /**
     * Sets the sort ID
     * 
     * @param sortJNDI
     */ Modifier public setSortID FormalParameter ReferenceType String sortJNDI StatementExpression Assignment This MemberReference sortID MemberReference sortJNDI = MethodDeclaration /**
     * Sets the Traverser depth
     * 
     * @param traverseDepth
     */ Modifier public setTraverserDepth FormalParameter BasicType int traverseDepth StatementExpression Assignment This MemberReference traverserDepth MemberReference traverseDepth = MethodDeclaration /**
     * Sets the Traverser ID
     * 
     * @param traverseID
     */ Modifier public setTraverserID FormalParameter ReferenceType String traverseID StatementExpression Assignment This MemberReference traverserID MemberReference traverseID = MethodDeclaration /**
     * @inheritDoc
     */ Modifier public release StatementExpression SuperMethodInvocation release StatementExpression This MethodInvocation init MethodDeclaration /**
     * init
     *  
     */ Modifier private init StatementExpression Assignment This MemberReference ascending Literal true = StatementExpression Assignment This MemberReference filterExp Literal null = StatementExpression Assignment This MemberReference filterID Cast ReferenceType String MethodInvocation JCRTagUtils MemberReference JCRTagConstants JNDI_DEFAULT_ITEM_FILTER lookup = StatementExpression Assignment This MemberReference node Literal ""/"" = StatementExpression Assignment This MemberReference nodes Literal null = StatementExpression Assignment This MemberReference session BinaryOperation + BinaryOperation + Literal ""${"" MemberReference JCRTagConstants KEY_SESSION Literal ""}"" = StatementExpression Assignment This MemberReference sortExp Literal null = StatementExpression Assignment This MemberReference sortID Cast ReferenceType String MethodInvocation JCRTagUtils MemberReference JCRTagConstants JNDI_DEFAULT_ITEM_COMPARATOR lookup = StatementExpression Assignment This MemberReference traverserDepth Literal 1 = StatementExpression Assignment This MemberReference traverserID Cast ReferenceType String MethodInvocation JCRTagUtils MemberReference JCRTagConstants JNDI_DEFAULT_TRAVERSER lookup = MethodDeclaration /**
     * Sets the Traverer parameter
     * 
     * @param traverserExp
     */ Modifier public setTraverserParam FormalParameter ReferenceType String traverserExp StatementExpression Assignment This MemberReference traverserParam MemberReference traverserExp = MethodDeclaration /**
     * Gets the traverser parameter evaluation
     * 
     * @return @throws
     *         JspException
     */ Modifier private ReferenceType Object getTraverserParam JspException LocalVariableDeclaration ReferenceType Object VariableDeclarator o Literal null TryStatement StatementExpression Assignment MemberReference o MethodInvocation ExpressionUtil MemberReference TAG_NAME Literal ""traverserParam"" This MemberReference traverserParam ClassReference ReferenceType Object This This MemberReference pageContext evalNotNull = CatchClause CatchClauseParameter NullAttributeException e ReturnStatement MemberReference o MethodDeclaration /**
     * Retrieves the node
     * 
     * @return @throws
     *         JspException
     * @throws RepositoryException
     * @throws PathNotFoundException
     */ Modifier protected ReferenceType Node getNode PathNotFoundException JspException RepositoryException LocalVariableDeclaration ReferenceType Session VariableDeclarator jcrSession MethodInvocation JCRTagUtils MemberReference TAG_NAME This MemberReference session This This MemberReference pageContext getSession ReturnStatement Cast ReferenceType Node MethodInvocation JCRTagUtils MemberReference TAG_NAME This MemberReference node This This MemberReference pageContext MemberReference jcrSession getItem ReferenceType LoopTagSupport",1
56,56,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.client.iterator Import javax.jcr.query.Row Import javax.jcr.query.RowIterator Import org.apache.jackrabbit.rmi.client.LocalAdapterFactory Import org.apache.jackrabbit.rmi.remote.RemoteIterator Import org.apache.jackrabbit.rmi.remote.RemoteRow ClassDeclaration Modifier public /**
 * A ClientIterator for iterating remote rows.
 */ ClientRowIterator ConstructorDeclaration Modifier public /**
     * Creates a ClientRowIterator instance.
     *
     * @param iterator      remote iterator
     * @param factory       local adapter factory
     */ ClientRowIterator FormalParameter ReferenceType RemoteIterator iterator FormalParameter ReferenceType LocalAdapterFactory factory StatementExpression SuperConstructorInvocation MemberReference iterator MemberReference factory MethodDeclaration /**
     * Creates and returns a local adapter for the given remote row.
     *
     * @param remote remote reference
     * @return local adapter
     * @see ClientIterator#getObject(Object)
     */ Modifier protected ReferenceType Object getObject FormalParameter ReferenceType Object remote ReturnStatement MethodInvocation MethodInvocation Cast ReferenceType RemoteRow MemberReference remote getRow getFactory MethodDeclaration /**
     * Returns the next row in this iteration.
     *
     * @return next row
     * @see RowIterator#nextRow()
     */ Modifier public ReferenceType Row nextRow ReturnStatement Cast ReferenceType Row MethodInvocation next ReferenceType ClientIterator ReferenceType RowIterator",0
42,42,"CompilationUnit PackageDeclaration org.apache.jackrabbit.extension Import java.util.Iterator Import java.util.NoSuchElementException Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.RepositoryException Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory ClassDeclaration Modifier public /**
 * The <code>ExtensionIterator</code> class implements the iterator
 * over instances of the {@link ExtensionDescriptor}s.
 *
 * @author Felix Meschberger
 * @version $Rev:$, $Date$
 */ ExtensionIterator FieldDeclaration /** Default log */ Modifier private final static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ExtensionIterator getLog FieldDeclaration /**
     * The type of the extension descriptors returned.
     */ Modifier private final ReferenceType ExtensionType VariableDeclarator type FieldDeclaration /**
     * The underlying iterator of nodes containing the extension descriptors.
     */ Modifier private final ReferenceType NodeIterator VariableDeclarator nodes FieldDeclaration /**
     * The preloaded next <code>EventDescriptor</code>. If <code>null</code>
     * no more descriptors are available in this iterator.
     */ Modifier private ReferenceType ExtensionDescriptor VariableDeclarator next ConstructorDeclaration /**
     * Creates an instance for the given underlying iterator of nodes.
     *
     * @param nodes The underlying <code>NodeIterator</code>.
     */ ExtensionIterator FormalParameter ReferenceType ExtensionType type FormalParameter ReferenceType NodeIterator nodes StatementExpression Assignment This MemberReference type MemberReference type = StatementExpression Assignment This MemberReference nodes MemberReference nodes = StatementExpression MethodInvocation seek MethodDeclaration /**
     * Returns <code>true</code> if there is at least one more extension
     * descriptor available in this iterator.
     */ Modifier public BasicType boolean hasNext ReturnStatement BinaryOperation != MemberReference next Literal null MethodDeclaration /**
     * Returns the next available extension descriptor.
     *
     * @throws NoSuchElementException If no more extension descriptors are
     *      available.
     */ Modifier public ReferenceType Object next ReturnStatement MethodInvocation nextExtension MethodDeclaration /**
     * Returns the next available extension descriptor.
     *
     * @throws NoSuchElementException If no more extension descriptors are
     *      available.
     */ Modifier public ReferenceType ExtensionDescriptor nextExtension IfStatement BinaryOperation == MemberReference next Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchElementException Literal ""No more Descriptors"" End LocalVariableDeclaration ReferenceType ExtensionDescriptor VariableDeclarator toReturn MemberReference next StatementExpression MethodInvocation seek ReturnStatement MemberReference toReturn MethodDeclaration /**
     * Throws <code>UnsupportedOpertationException</code> because this
     * method is not supported by this implementation.
     */ Modifier public remove ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""remove"" MethodDeclaration /**
     * Preload the next <code>ExtensionDescriptor</code> from the next node
     * in the underlying node iterator.
     * <p>
     * If an error occurrs instantiating an extension descriptor for any
     * node in the iterator, the node is ignored and the next node is
     * used. This is repeated until either no more nodes are available in
     * the underlying iterator or an extension descriptor can sucessfully
     * be created.
     */ Modifier private seek WhileStatement MethodInvocation nodes hasNext BlockStatement TryStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator extNode MethodInvocation nodes nextNode LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation ExtensionDescriptor MemberReference extNode getExtensionName StatementExpression Assignment MemberReference next MethodInvocation type MemberReference name MemberReference extNode getOrCreateExtension = ReturnStatement CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log Literal ""Cannot get the extension name"" MemberReference re warn CatchClause CatchClauseParameter ExtensionException ee StatementExpression MethodInvocation log Literal ""Cannot create extensions descriptor"" MemberReference ee warn End StatementExpression Assignment MemberReference next Literal null = ReferenceType Iterator",0
276,276,"CompilationUnit PackageDeclaration org.apache.jackrabbit.base Import javax.jcr.Credentials Import javax.jcr.LoginException Import javax.jcr.Repository Import javax.jcr.RepositoryException Import javax.jcr.Session ClassDeclaration Modifier public /**
 * Repository base class. The dummy repository implemented by this class
 * contains no descriptors and forwards all login requests to the
 * canonical {@link #login(Credentials, String)} method.
 */ BaseRepository MethodDeclaration /**
     * Returns an empty to indicate that no descriptor keys are available.
     * Subclasses should override this method to return the available
     * descriptor keys.
     *
     * @return empty array
     * @see Repository#getDescriptorKeys()
     */ Modifier public ReferenceType String getDescriptorKeys ReturnStatement ArrayCreator ReferenceType String Literal 0 MethodDeclaration /**
     * Returns <code>null</code> to indicate that the requested descriptor
     * does not exist. Subclasses should override this method to return the
     * actual repository descriptor values.
     *
     * @param key descriptor key
     * @return always <code>null</code>
     * @see Repository#getDescriptor(String)
     */ Modifier public ReferenceType String getDescriptor FormalParameter ReferenceType String key ReturnStatement Literal null MethodDeclaration /**
     * Throws a {@link LoginException} to indicate that logins are
     * not available. Subclasses should override this method to allow
     * repository logins. Note that by default the other login methods
     * invoke this method, so all the login methods can be made to work
     * by overriding just this method. 
     *
     * @param credentials login credentials
     * @param workspaceName workspace name
     * @return nothing (throws a LoginException)
     * @see Repository#login(Credentials, String)
     */ Modifier public ReferenceType Session login FormalParameter ReferenceType Credentials credentials FormalParameter ReferenceType String workspaceName RepositoryException ThrowStatement ClassCreator ReferenceType LoginException MethodDeclaration /**
     * Implemented by calling {@link #login(Credentials, String)} with a
     * <code>null</code> workspace name. This default implementation
     * follows the JCR specification, so there should be little
     * reason for subclasses to override this method.
     *
     * @param credentials login credentials
     * @return repository session
     * @see Repository#login(Credentials)
     */ Modifier public ReferenceType Session login FormalParameter ReferenceType Credentials credentials RepositoryException ReturnStatement MethodInvocation MemberReference credentials Literal null login MethodDeclaration /**
     * Implemented by calling {@link #login(Credentials, String)} with
     * <code>null</code> credentials. This default implementation
     * follows the JCR specification, so there should be little
     * reason for subclasses to override this method.
     *
     * @param workspaceName workspace name
     * @return repository session
     * @see Repository#login(String)
     */ Modifier public ReferenceType Session login FormalParameter ReferenceType String workspaceName RepositoryException ReturnStatement MethodInvocation Literal null MemberReference workspaceName login MethodDeclaration /**
     * Implemented by calling {@link #login(Credentials, String)} with a
     * <code>null</code> workspace name and <code>null</code> credentials.
     * This default implementation follows the JCR specification, so there
     * should be little reason for subclasses to override this method.
     *
     * @return repository session
     * @see Repository#login()
     */ Modifier public ReferenceType Session login RepositoryException ReturnStatement MethodInvocation Literal null Literal null login ReferenceType Repository",1
445,445,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.remote Import java.rmi.Remote Import java.rmi.RemoteException Import javax.jcr.RepositoryException InterfaceDeclaration Modifier public /**
 * Remote version of the JCR
 * {@link javax.jcr.NamespaceRegistry NamespaceRegistry} interface.
 * Used by the
 * {@link org.apache.jackrabbit.rmi.server.ServerNamespaceRegistry ServerNamespaceRegistry}
 * and
 * {@link org.apache.jackrabbit.rmi.client.ClientNamespaceRegistry ClientNamespaceRegistry}
 * adapters to provide transparent RMI access to remote namespace registries.
 * <p>
 * The methods in this interface are documented only with a reference
 * to a corresponding NamespaceRegistry method. The remote object will
 * simply forward the method call to the underlying NamespaceRegistry instance.
 * Argument and return values, as well as possible exceptions, are copied
 * over the network. RMI errors are signalled with RemoteExceptions.
 *
 * @author Jukka Zitting
 * @see javax.jcr.NamespaceRegistry
 * @see org.apache.jackrabbit.rmi.client.ClientNamespaceRegistry
 * @see org.apache.jackrabbit.rmi.server.ServerNamespaceRegistry
 */ RemoteNamespaceRegistry MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.NamespaceRegistry#registerNamespace(String,String) NamespaceRegistry.registerNamespace(String,String)}
     * method.
     *
     * @param prefix namespace prefix
     * @param uri namespace uri
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ registerNamespace FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.NamespaceRegistry#unregisterNamespace(String) NamespaceRegistry.unregisterNamespace(String)}
     * method.
     *
     * @param prefix namespace prefix
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ unregisterNamespace FormalParameter ReferenceType String prefix RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.NamespaceRegistry#getPrefixes() NamespaceRegistry.getPrefixes()}
     * method.
     *
     * @return namespace prefixes
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType String getPrefixes RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.NamespaceRegistry#getURIs() NamespaceRegistry,getURIs()}
     * method.
     *
     * @return namespace uris
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType String getURIs RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.NamespaceRegistry#getURI(String) NamespaceRegistry.getURI(String)}
     * method.
     *
     * @param prefix namespace prefix
     * @return namespace uri
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType String getURI FormalParameter ReferenceType String prefix RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.NamespaceRegistry#getPrefix(String) NamespaceRegistry.getPrefix(String)}
     * method.
     *
     * @param uri namespace uri
     * @return namespace prefix
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType String getPrefix FormalParameter ReferenceType String uri RepositoryException RemoteException ReferenceType Remote",0
121,121,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.security Import javax.jcr.Credentials Import javax.security.auth.Subject Import javax.security.auth.login.LoginContext Import javax.security.auth.login.LoginException Import javax.security.auth.spi.LoginModule Import java.util.Collections Import java.util.Map ClassDeclaration Modifier public abstract /**
 * An authentication context used to authenticate users. It is similar to JAAS' <code>LoginContext</code>
 * but can work in a non-JAAS environment.
 * <p>
 * This class is abstract and has two implementations:
 * <ul>
 *   <li>{@link AuthContext.JAAS} which delegates to a regular JAAS <code>LoginContext</code></li>
 *   <li>{@link AuthContext.Local} which implements authentication using a locally-defined
 *       JAAS <code>LoginModule</code></li>
 * </ul>
 *
 * @version $Id$
 */ AuthContext MethodDeclaration /**
     * Perform the authentication and, if successful, associate Principals and Credentials
     * with the authenticated<code>Subject</code>.
     *
     * @see LoginContext#login()
     * @throws LoginException if the authentication fails.
     */ Modifier public abstract login LoginException MethodDeclaration /**
     * Return the authenticated Subject.
     *
     * @see LoginContext#getSubject()
     * @return the authenticated Subject or <code>null</code> if authentication failed.
     */ Modifier public abstract ReferenceType Subject getSubject MethodDeclaration /**
     * Logout the <code>Subject</code>.
     *
     * @see LoginContext#logout()
     * @exception LoginException if the logout fails.
     */ Modifier public abstract logout LoginException ClassDeclaration Modifier public static /**
     * An {@link AuthContext} implemented using a regular JAAS <code>LoginContext</code>.
     */ JAAS FieldDeclaration Modifier private final ReferenceType LoginContext VariableDeclarator ctx ConstructorDeclaration Modifier public /**
         * Creates an authentication context given a JAAS configuration name and some credentials.
         *
         * @param name the JAAS configuration index
         * @param creds the credentials
         * @throws LoginException if the JAAS context couldn't be created
         */ JAAS FormalParameter ReferenceType String name FormalParameter ReferenceType Credentials creds LoginException StatementExpression Assignment This MemberReference ctx ClassCreator ReferenceType LoginContext MemberReference name ClassCreator ReferenceType CredentialsCallbackHandler MemberReference creds = MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public login LoginException StatementExpression MethodInvocation ctx login MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType Subject getSubject ReturnStatement MethodInvocation ctx getSubject MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public logout LoginException StatementExpression MethodInvocation ctx logout ReferenceType AuthContext ClassDeclaration Modifier public static /**
     * An {@link AuthContext} implemented using a particular <code>LoginModule</code>.
     */ Local FieldDeclaration Modifier private final ReferenceType LoginModule VariableDeclarator module FieldDeclaration Modifier private final ReferenceType Map VariableDeclarator options FieldDeclaration Modifier private ReferenceType Subject VariableDeclarator subject FieldDeclaration Modifier private ReferenceType Credentials VariableDeclarator creds ConstructorDeclaration Modifier public /**
         * Creates an authentication context given a login module and some credentials.
         *
         * @param module the login module
         * @param options login module options
         * @param config the login module configuration
         * @param creds the credentials
         */ Local FormalParameter ReferenceType LoginModule module FormalParameter ReferenceType Map options FormalParameter ReferenceType Credentials creds StatementExpression Assignment This MemberReference module MemberReference module = StatementExpression Assignment This MemberReference options MemberReference options = StatementExpression Assignment This MemberReference creds MemberReference creds = MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public login LoginException StatementExpression Assignment This MemberReference subject ClassCreator ReferenceType Subject = StatementExpression This MemberReference module MethodInvocation This MemberReference subject ClassCreator ReferenceType CredentialsCallbackHandler This MemberReference creds MemberReference Collections EMPTY_MAP This MemberReference options initialize TryStatement IfStatement This MemberReference module MethodInvocation login BlockStatement StatementExpression This MemberReference module MethodInvocation commit End CatchClause CatchClauseParameter LoginException le TryStatement StatementExpression This MemberReference module MethodInvocation abort CatchClause CatchClauseParameter Exception e ThrowStatement MemberReference le MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType Subject getSubject ReturnStatement This MemberReference subject MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public logout LoginException IfStatement BinaryOperation == This MemberReference subject Literal null BlockStatement ThrowStatement ClassCreator ReferenceType LoginException Literal ""Logout called before login"" End StatementExpression This MemberReference module MethodInvocation logout ReferenceType AuthContext",0
713,713,,0
566,566,,0
198,198,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr Import org.apache.jackrabbit.webdav.property.DavPropertyName Import org.apache.jackrabbit.webdav.DavResource Import org.apache.jackrabbit.webdav.xml.Namespace Import org.apache.jackrabbit.webdav.version.DeltaVResource Import org.apache.jackrabbit.webdav.lock.Scope Import org.apache.jackrabbit.webdav.search.SearchResource Import org.apache.jackrabbit.webdav.observation.ObservationResource InterfaceDeclaration Modifier public /**
 * <code>ItemResourceConstants</code> provides constants for any resources
 * representing repository items.
 */ ItemResourceConstants ConstantDeclaration /**
     * Complience classes common to all item resources.
     */ Modifier public final static ReferenceType String VariableDeclarator COMPLIANCE_CLASS BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference DavResource COMPLIANCE_CLASS Literal "", "" MemberReference ObservationResource COMPLIANCE_CLASS Literal "", "" MemberReference DeltaVResource COMPLIANCE_CLASS ConstantDeclaration /**
     * Methods common to all item resources.
     */ Modifier public final static ReferenceType String VariableDeclarator METHODS BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference DavResource METHODS Literal "", "" MemberReference ObservationResource METHODS Literal "", "" MemberReference SearchResource METHODS Literal "", "" MemberReference DeltaVResource METHODS ConstantDeclaration /**
     * The resource path of the root-item-resource.
     */ Modifier public final static ReferenceType String VariableDeclarator ROOT_ITEM_PATH Literal ""/"" ConstantDeclaration /**
     * The version storage item resource path.
     */ Modifier public final static ReferenceType String VariableDeclarator VERSIONSTORAGE_PATH Literal ""/jcr:system/jcr:versionStorage"" ConstantDeclaration /**
     * The namespace for all jcr specific extensions.
     */ Modifier public final static ReferenceType Namespace VariableDeclarator NAMESPACE MethodInvocation Namespace Literal ""dcr"" Literal ""http://www.day.com/jcr/webdav/1.0"" getNamespace ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_PRIMARYNODETYPE Literal ""primarynodetype"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_VALUE Literal ""value"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_LENGTH Literal ""length"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_EXCLUSIVE_SESSION_SCOPED Literal ""exclusive-session-scoped"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_NAMESPACE Literal ""namespace"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_PREFIX Literal ""prefix"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_URI Literal ""uri"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_DESCRIPTOR Literal ""descriptor"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_DESCRIPTORKEY Literal ""descriptorkey"" ConstantDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_DESCRIPTORVALUE Literal ""descriptorvalue"" ConstantDeclaration /**
     * Extension to the WebDAV 'exclusive' lock, that allows to distinguish
     * the session-scoped and open-scoped locks on a JCR node.
     *
     * @see javax.jcr.Node#lock(boolean, boolean)
     */ Modifier public final static ReferenceType Scope VariableDeclarator EXCLUSIVE_SESSION MethodInvocation Scope MemberReference XML_EXCLUSIVE_SESSION_SCOPED MemberReference NAMESPACE create ConstantDeclaration /**
     * The 'removeexisting' element is not defined by RFC 3253. If it is present
     * in the UPDATE request body, uuid conflicts should be solved by removing
     * the existing nodes.
     *
     * @see javax.jcr.Node#restore(javax.jcr.version.Version, boolean)
     * @see javax.jcr.Workspace#restore(javax.jcr.version.Version[], boolean)
     * @see org.apache.jackrabbit.webdav.version.UpdateInfo
     */ Modifier public final static ReferenceType String VariableDeclarator XML_REMOVEEXISTING Literal ""removeexisting"" ConstantDeclaration /**
     * The 'relpath' element is not defined by RFC 3253. If it is present
     * in the UPDATE request body, the server is forced to used the text contained
     * as 'relPath' argument for the {@link javax.jcr.Node#restore(javax.jcr.version.Version, String, boolean)
     * Node.restore} call.
     *
     * @see javax.jcr.Node#restore(javax.jcr.version.Version, String, boolean)
     * @see org.apache.jackrabbit.webdav.version.UpdateInfo
     */ Modifier public final static ReferenceType String VariableDeclarator XML_RELPATH Literal ""relpath"" ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_NAME MethodInvocation DavPropertyName Literal ""name"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_PATH MethodInvocation DavPropertyName Literal ""path"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_DEPTH MethodInvocation DavPropertyName Literal ""depth"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_PARENT MethodInvocation DavPropertyName Literal ""parent"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_ISNEW MethodInvocation DavPropertyName Literal ""isnew"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_ISMODIFIED MethodInvocation DavPropertyName Literal ""ismodified"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_PRIMARYNODETYPE MethodInvocation DavPropertyName MemberReference XML_PRIMARYNODETYPE MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_MIXINNODETYPES MethodInvocation DavPropertyName Literal ""mixinnodetypes"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_INDEX MethodInvocation DavPropertyName Literal ""index"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_REFERENCES MethodInvocation DavPropertyName Literal ""references"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_UUID MethodInvocation DavPropertyName Literal ""uuid"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_PRIMARYITEM MethodInvocation DavPropertyName Literal ""primaryitem"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_TYPE MethodInvocation DavPropertyName Literal ""type"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_VALUE MethodInvocation DavPropertyName Literal ""value"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_VALUES MethodInvocation DavPropertyName Literal ""values"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_LENGTH MethodInvocation DavPropertyName Literal ""length"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_LENGTHS MethodInvocation DavPropertyName Literal ""lengths"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_NAMESPACES MethodInvocation DavPropertyName Literal ""namespaces"" MemberReference NAMESPACE create ConstantDeclaration Modifier public final static ReferenceType DavPropertyName VariableDeclarator JCR_VERSIONABLEUUID MethodInvocation DavPropertyName Literal ""versionableuuid"" MemberReference NAMESPACE create",0
899,899,,0
169,169,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.ItemStateManager Import org.apache.jackrabbit.core.state.NoSuchItemStateException Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.name.MalformedPathException Import org.apache.jackrabbit.name.NamespaceResolver Import org.apache.jackrabbit.name.NoPrefixDeclaredException Import org.apache.jackrabbit.name.Path Import org.apache.jackrabbit.name.QName Import org.apache.log4j.Logger Import javax.jcr.ItemNotFoundException Import javax.jcr.PathNotFoundException Import javax.jcr.RepositoryException ClassDeclaration Modifier public /**
 * <code>HierarchyManagerImpl</code> ...
 */ HierarchyManagerImpl FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType HierarchyManagerImpl getLogger FieldDeclaration /**
     * The parent name returned for orphaned or root nodes.
     * TODO: Is it proper to use an invalid QName for this.
     */ Modifier private final static ReferenceType QName VariableDeclarator EMPTY_NAME ClassCreator ReferenceType QName Literal """" Literal """" FieldDeclaration Modifier final protected ReferenceType NodeId VariableDeclarator rootNodeId FieldDeclaration Modifier final protected ReferenceType ItemStateManager VariableDeclarator provider FieldDeclaration Modifier final protected ReferenceType NamespaceResolver VariableDeclarator nsResolver ConstructorDeclaration Modifier public HierarchyManagerImpl FormalParameter ReferenceType String rootNodeUUID FormalParameter ReferenceType ItemStateManager provider FormalParameter ReferenceType NamespaceResolver nsResolver StatementExpression Assignment MemberReference rootNodeId ClassCreator ReferenceType NodeId MemberReference rootNodeUUID = StatementExpression Assignment This MemberReference provider MemberReference provider = StatementExpression Assignment This MemberReference nsResolver MemberReference nsResolver = MethodDeclaration Modifier public ReferenceType NodeId getRootNodeId ReturnStatement MemberReference rootNodeId MethodDeclaration Modifier public ReferenceType NamespaceResolver getNamespaceResolver ReturnStatement MemberReference nsResolver MethodDeclaration /**
     * Failsafe conversion of internal <code>Path</code> to JCR path for use in
     * error messages etc.
     *
     * @param path path to convert
     * @return JCR path
     */ Modifier public ReferenceType String safeGetJCRPath FormalParameter ReferenceType Path path TryStatement ReturnStatement MethodInvocation path MemberReference nsResolver toJCRPath CatchClause CatchClauseParameter NoPrefixDeclaredException npde StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""failed to convert "" MethodInvocation path toString Literal "" to JCR path."" error ReturnStatement MethodInvocation path toString MethodDeclaration /**
     * Failsafe translation of internal <code>ItemId</code> to JCR path for use
     * in error messages etc.
     *
     * @param id id to translate
     * @return JCR path
     */ Modifier public ReferenceType String safeGetJCRPath FormalParameter ReferenceType ItemId id TryStatement ReturnStatement MethodInvocation MethodInvocation MemberReference id getPath safeGetJCRPath CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log BinaryOperation + MemberReference id Literal "": failed to determine path to"" error ReturnStatement MethodInvocation id toString MethodDeclaration /**
     * Return an item state, given its item id.
     * <p/>
     * Low-level hook provided for specialized derived classes.
     *
     * @param id item id
     * @return item state
     * @throws NoSuchItemStateException if the item does not exist
     * @throws ItemStateException       if an error occurs
     * @see ZombieHierarchyManager#getItemState(ItemId)
     */ Modifier protected ReferenceType ItemState getItemState FormalParameter ReferenceType ItemId id NoSuchItemStateException ItemStateException ReturnStatement MethodInvocation provider MemberReference id getItemState MethodDeclaration /**
     * Determines whether an item state for a given item id exists.
     * <p/>
     * Low-level hook provided for specialized derived classes.
     *
     * @param id item id
     * @return <code>true</code> if an item state exists, otherwise
     *         <code>false</code>
     * @see ZombieHierarchyManager#hasItemState(ItemId)
     */ Modifier protected BasicType boolean hasItemState FormalParameter ReferenceType ItemId id ReturnStatement MethodInvocation provider MemberReference id hasItemState MethodDeclaration /**
     * Returns the <code>parentUUID</code> of the given item.
     * <p/>
     * Low-level hook provided for specialized derived classes.
     *
     * @param state item state
     * @return <code>parentUUID</code> of the given item
     * @see ZombieHierarchyManager#getParentUUID(ItemState)
     */ Modifier protected ReferenceType String getParentUUID FormalParameter ReferenceType ItemState state ReturnStatement MethodInvocation state getParentUUID MethodDeclaration /**
     * Returns the <code>ChildNodeEntry</code> of <code>parent</code> with the
     * specified <code>uuid</code> or <code>null</code> if there's no such entry.
     * <p/>
     * Low-level hook provided for specialized derived classes.
     *
     * @param parent node state
     * @param uuid   uuid of child node entry
     * @return the <code>ChildNodeEntry</code> of <code>parent</code> with
     *         the specified <code>uuid</code> or <code>null</code> if there's
     *         no such entry.
     * @see ZombieHierarchyManager#getChildNodeEntry(NodeState, String)
     */ Modifier protected ReferenceType NodeState ReferenceType ChildNodeEntry getChildNodeEntry FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType String uuid ReturnStatement MethodInvocation parent MemberReference uuid getChildNodeEntry MethodDeclaration /**
     * Returns the <code>ChildNodeEntry</code> of <code>parent</code> with the
     * specified <code>name</code> and <code>index</code> or <code>null</code>
     * if there's no such entry.
     * <p/>
     * Low-level hook provided for specialized derived classes.
     *
     * @param parent node state
     * @param name   name of child node entry
     * @param index  index of child node entry
     * @return the <code>ChildNodeEntry</code> of <code>parent</code> with
     *         the specified <code>name</code> and <code>index</code> or
     *         <code>null</code> if there's no such entry.
     * @see ZombieHierarchyManager#getChildNodeEntry(NodeState, QName, int)
     */ Modifier protected ReferenceType NodeState ReferenceType ChildNodeEntry getChildNodeEntry FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType QName name FormalParameter BasicType int index ReturnStatement MethodInvocation parent MemberReference name MemberReference index getChildNodeEntry MethodDeclaration /**
     * Resolve a path into an item id. Recursively invoked method that may be
     * overridden by some subclass to either return cached responses or add
     * response to cache.
     *
     * @param path full path of item to resolve
     * @param id   intermediate item id
     * @param next next path element index to resolve
     * @return the id of the item denoted by <code>path</code>
     */ Modifier protected ReferenceType ItemId resolvePath FormalParameter ReferenceType Path path FormalParameter ReferenceType ItemId id FormalParameter BasicType int next RepositoryException TryStatement ReturnStatement MethodInvocation MemberReference path MethodInvocation MemberReference id getItemState MemberReference next resolvePath CatchClause CatchClauseParameter NoSuchItemStateException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""failed to retrieve state of intermediary node"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference e CatchClause CatchClauseParameter ItemStateException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""failed to retrieve state of intermediary node"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference e MethodDeclaration /**
     * Resolve a path into an item id. Recursively invoked method that may be
     * overridden by some subclass to either return cached responses or add
     * response to cache.
     *
     * @param path  full path of item to resolve
     * @param state intermediate state
     * @param next  next path element index to resolve
     * @return the id of the item denoted by <code>path</code>
     */ Modifier protected ReferenceType ItemId resolvePath FormalParameter ReferenceType Path path FormalParameter ReferenceType ItemState state FormalParameter BasicType int next PathNotFoundException ItemStateException LocalVariableDeclaration ReferenceType Path ReferenceType PathElement VariableDeclarator elements MethodInvocation path getElements IfStatement BinaryOperation == MemberReference elements length MemberReference next BlockStatement ReturnStatement MethodInvocation state getId End LocalVariableDeclaration ReferenceType Path ReferenceType PathElement VariableDeclarator elem MemberReference ArraySelector MemberReference next elements LocalVariableDeclaration ReferenceType QName VariableDeclarator name MethodInvocation elem getName LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation elem getIndex IfStatement BinaryOperation == MemberReference index Literal 0 BlockStatement StatementExpression Assignment MemberReference index Literal 1 = End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator parentState Cast ReferenceType NodeState MemberReference state LocalVariableDeclaration ReferenceType ItemId VariableDeclarator childId IfStatement MethodInvocation parentState MemberReference name MemberReference index hasChildNodeEntry BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator nodeEntry MethodInvocation MemberReference parentState MemberReference name MemberReference index getChildNodeEntry StatementExpression Assignment MemberReference childId ClassCreator ReferenceType NodeId MethodInvocation nodeEntry getUUID = IfStatement MethodInvocation parentState MemberReference name hasPropertyName BlockStatement IfStatement BinaryOperation > MemberReference index Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MemberReference path safeGetJCRPath IfStatement BinaryOperation < MemberReference next BinaryOperation - MemberReference elements length Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MemberReference path safeGetJCRPath End End StatementExpression Assignment MemberReference childId ClassCreator ReferenceType PropertyId MethodInvocation parentState getUUID MemberReference name = BlockStatement ThrowStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation MemberReference path safeGetJCRPath End End ReturnStatement MethodInvocation MemberReference path MethodInvocation MemberReference childId getItemState BinaryOperation + MemberReference next Literal 1 resolvePath MethodDeclaration /**
     * Adds the path element of an item id to the path currently being built.
     * Recursively invoked method that may be overridden by some subclass to
     * either return cached responses or add response to cache. On exit,
     * <code>builder</code> contains the path of <code>state</code>.
     *
     * @param builder builder currently being used
     * @param state   item to find path of
     */ Modifier protected buildPath FormalParameter ReferenceType Path ReferenceType PathBuilder builder FormalParameter ReferenceType ItemState state ItemStateException RepositoryException IfStatement MethodInvocation state MethodInvocation MemberReference rootNodeId equals getId BlockStatement StatementExpression MethodInvocation builder addRoot ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation MemberReference state getParentUUID IfStatement BinaryOperation == MemberReference parentUUID Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + Literal ""failed to build path of "" MethodInvocation state getId Literal "": orphaned item"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemNotFoundException MemberReference msg End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator parent Cast ReferenceType NodeState MethodInvocation ClassCreator ReferenceType NodeId MemberReference parentUUID getItemState StatementExpression MethodInvocation MemberReference builder MemberReference parent buildPath IfStatement MethodInvocation state isNode BlockStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState Cast ReferenceType NodeState MemberReference state LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation nodeState getUUID LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry MethodInvocation MemberReference parent MemberReference uuid getChildNodeEntry IfStatement BinaryOperation == MemberReference entry Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""failed to build path of "" MethodInvocation state getId Literal "": "" MethodInvocation parent getUUID Literal "" has no child entry for "" MemberReference uuid StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemNotFoundException MemberReference msg End IfStatement BinaryOperation == MethodInvocation entry getIndex Literal 1 BlockStatement StatementExpression MethodInvocation builder MethodInvocation entry getName addLast BlockStatement StatementExpression MethodInvocation builder MethodInvocation entry getName MethodInvocation entry getIndex addLast End BlockStatement LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator propState Cast ReferenceType PropertyState MemberReference state LocalVariableDeclaration ReferenceType QName VariableDeclarator name MethodInvocation propState getName StatementExpression MethodInvocation builder MemberReference name addLast End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType ItemId resolvePath FormalParameter ReferenceType Path path PathNotFoundException RepositoryException IfStatement MethodInvocation path denotesRoot BlockStatement ReturnStatement MemberReference rootNodeId End IfStatement MethodInvocation ! path isCanonical BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""path is not canonical"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End ReturnStatement MethodInvocation MemberReference path MemberReference rootNodeId Literal 1 resolvePath MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Path getPath FormalParameter ReferenceType ItemId id ItemNotFoundException RepositoryException IfStatement MethodInvocation id MemberReference rootNodeId equals BlockStatement ReturnStatement MemberReference Path ROOT End LocalVariableDeclaration ReferenceType Path ReferenceType PathBuilder VariableDeclarator builder ClassCreator ReferenceType Path ReferenceType PathBuilder TryStatement StatementExpression MethodInvocation MemberReference builder MethodInvocation MemberReference id getItemState buildPath ReturnStatement MethodInvocation builder getPath CatchClause CatchClauseParameter NoSuchItemStateException nsise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to build path of "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemNotFoundException MemberReference msg MemberReference nsise CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to build path of "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise CatchClause CatchClauseParameter MalformedPathException mpe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to build path of "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference mpe MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType QName getName FormalParameter ReferenceType ItemId itemId ItemNotFoundException RepositoryException IfStatement MethodInvocation itemId denotesNode BlockStatement LocalVariableDeclaration ReferenceType NodeId VariableDeclarator nodeId Cast ReferenceType NodeId MemberReference itemId LocalVariableDeclaration ReferenceType NodeState VariableDeclarator parentState TryStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator nodeState Cast ReferenceType NodeState MethodInvocation MemberReference nodeId getItemState LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation MemberReference nodeState getParentUUID IfStatement BinaryOperation == MemberReference parentUUID Literal null BlockStatement ReturnStatement MemberReference EMPTY_NAME End StatementExpression Assignment MemberReference parentState Cast ReferenceType NodeState MethodInvocation ClassCreator ReferenceType NodeId MemberReference parentUUID getItemState = CatchClause CatchClauseParameter NoSuchItemStateException nsis LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to resolve name of "" MemberReference nodeId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemNotFoundException MethodInvocation nodeId toString CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to resolve name of "" MemberReference nodeId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry MethodInvocation MemberReference parentState MethodInvocation nodeId getUUID getChildNodeEntry IfStatement BinaryOperation == MemberReference entry Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to resolve name of "" MemberReference nodeId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg End ReturnStatement MethodInvocation entry getName BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId Cast ReferenceType PropertyId MemberReference itemId ReturnStatement MethodInvocation propId getName End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int getDepth FormalParameter ReferenceType ItemId id ItemNotFoundException RepositoryException IfStatement MethodInvocation id MemberReference rootNodeId equals BlockStatement ReturnStatement Literal 0 End TryStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation MemberReference id getItemState LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation MemberReference state getParentUUID LocalVariableDeclaration BasicType int VariableDeclarator depth Literal 0 WhileStatement BinaryOperation != MemberReference parentUUID Literal null BlockStatement StatementExpression MemberReference ++ depth StatementExpression Assignment MemberReference state MethodInvocation ClassCreator ReferenceType NodeId MemberReference parentUUID getItemState = StatementExpression Assignment MemberReference parentUUID MethodInvocation MemberReference state getParentUUID = End ReturnStatement MemberReference depth CatchClause CatchClauseParameter NoSuchItemStateException nsise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to determine depth of "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemNotFoundException MemberReference msg MemberReference nsise CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to determine depth of "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int getRelativeDepth FormalParameter ReferenceType NodeId ancestorId FormalParameter ReferenceType ItemId descendantId ItemNotFoundException RepositoryException IfStatement MethodInvocation ancestorId MemberReference descendantId equals BlockStatement ReturnStatement Literal 0 End LocalVariableDeclaration BasicType int VariableDeclarator depth Literal 1 TryStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation MemberReference descendantId getItemState LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation MemberReference state getParentUUID WhileStatement BinaryOperation != MemberReference parentUUID Literal null BlockStatement IfStatement MethodInvocation parentUUID MethodInvocation ancestorId getUUID equals BlockStatement ReturnStatement MemberReference depth End StatementExpression MemberReference ++ depth StatementExpression Assignment MemberReference state MethodInvocation ClassCreator ReferenceType NodeId MemberReference parentUUID getItemState = StatementExpression Assignment MemberReference parentUUID MethodInvocation MemberReference state getParentUUID = End ReturnStatement Literal - 1 CatchClause CatchClauseParameter NoSuchItemStateException nsise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""failed to determine depth of "" MemberReference descendantId Literal "" relative to "" MemberReference ancestorId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemNotFoundException MemberReference msg MemberReference nsise CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""failed to determine depth of "" MemberReference descendantId Literal "" relative to "" MemberReference ancestorId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isAncestor FormalParameter ReferenceType NodeId nodeId FormalParameter ReferenceType ItemId itemId ItemNotFoundException RepositoryException IfStatement MethodInvocation nodeId MemberReference itemId equals BlockStatement ReturnStatement Literal false End TryStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state MethodInvocation MemberReference itemId getItemState LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation MemberReference state getParentUUID WhileStatement BinaryOperation != MemberReference parentUUID Literal null BlockStatement IfStatement MethodInvocation parentUUID MethodInvocation nodeId getUUID equals BlockStatement ReturnStatement Literal true End StatementExpression Assignment MemberReference state MethodInvocation ClassCreator ReferenceType NodeId MemberReference parentUUID getItemState = StatementExpression Assignment MemberReference parentUUID MethodInvocation MemberReference state getParentUUID = End ReturnStatement Literal false CatchClause CatchClauseParameter NoSuchItemStateException nsise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""failed to determine degree of relationship of "" MemberReference nodeId Literal "" and "" MemberReference itemId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemNotFoundException MemberReference msg MemberReference nsise CatchClause CatchClauseParameter ItemStateException ise LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""failed to determine degree of relationship of "" MemberReference nodeId Literal "" and "" MemberReference itemId StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ise ReferenceType HierarchyManager",1
434,434,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermDocs Import org.apache.lucene.search.Explanation Import org.apache.lucene.search.HitCollector Import org.apache.lucene.search.Query Import org.apache.lucene.search.Scorer Import org.apache.lucene.search.Searcher Import org.apache.lucene.search.Similarity Import org.apache.lucene.search.TermQuery Import org.apache.lucene.search.Weight Import java.io.IOException Import java.util.ArrayList Import java.util.BitSet Import java.util.Iterator Import java.util.List ClassDeclaration /**
 * Implements a lucene <code>Query</code> which returns the nodes selected by
 * a reference property of the context node.
 */ DerefQuery FieldDeclaration /**
     * The context query
     */ Modifier private final ReferenceType Query VariableDeclarator contextQuery FieldDeclaration /**
     * The name of the reference property.
     */ Modifier private final ReferenceType String VariableDeclarator refProperty FieldDeclaration /**
     * The nameTest to apply on target node, or <code>null</code> if all
     * target nodes should be selected.
     */ Modifier private final ReferenceType String VariableDeclarator nameTest FieldDeclaration /**
     * The scorer of the context query
     */ Modifier private ReferenceType Scorer VariableDeclarator contextScorer FieldDeclaration /**
     * The scorer of the name test query
     */ Modifier private ReferenceType Scorer VariableDeclarator nameTestScorer ConstructorDeclaration /**
     * Creates a new <code>DerefQuery</code> based on a <code>context</code>
     * query.
     *
     * @param context the context for this query.
     * @param refProperty the name of the reference property.
     * @param nameTest a name test or <code>null</code> if any node is
     *  selected.
     */ DerefQuery FormalParameter ReferenceType Query context FormalParameter ReferenceType String refProperty FormalParameter ReferenceType String nameTest StatementExpression Assignment This MemberReference contextQuery MemberReference context = StatementExpression Assignment This MemberReference refProperty MemberReference refProperty = StatementExpression Assignment This MemberReference nameTest MemberReference nameTest = MethodDeclaration /**
     * Creates a <code>Weight</code> instance for this query.
     *
     * @param searcher the <code>Searcher</code> instance to use.
     * @return a <code>DerefWeight</code>.
     */ Modifier protected ReferenceType Weight createWeight FormalParameter ReferenceType Searcher searcher ReturnStatement ClassCreator ReferenceType DerefWeight MemberReference searcher MethodDeclaration /**
     * Always returns 'DerefQuery'.
     *
     * @param field the name of a field.
     * @return 'DerefQuery'.
     */ Modifier public ReferenceType String toString FormalParameter ReferenceType String field ReturnStatement Literal ""DerefQuery"" ClassDeclaration Modifier private /**
     * The <code>Weight</code> implementation for this <code>DerefQuery</code>.
     */ DerefWeight FieldDeclaration /**
         * The searcher in use
         */ Modifier private final ReferenceType Searcher VariableDeclarator searcher ConstructorDeclaration Modifier private /**
         * Creates a new <code>DerefWeight</code> instance using
         * <code>searcher</code>.
         *
         * @param searcher a <code>Searcher</code> instance.
         */ DerefWeight FormalParameter ReferenceType Searcher searcher StatementExpression Assignment This MemberReference searcher MemberReference searcher = MethodDeclaration /**
         * Returns this <code>DerefQuery</code>.
         *
         * @return this <code>DerefQuery</code>.
         */ Modifier public ReferenceType Query getQuery ReturnStatement This DerefQuery MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType float getValue ReturnStatement Literal 1.0f MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType float sumOfSquaredWeights IOException ReturnStatement Literal 1.0f MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public normalize FormalParameter BasicType float norm MethodDeclaration /**
         * Creates a scorer for this <code>DerefQuery</code>.
         *
         * @param reader a reader for accessing the index.
         * @return a <code>DerefScorer</code>.
         * @throws IOException if an error occurs while reading from the index.
         */ Modifier public ReferenceType Scorer scorer FormalParameter ReferenceType IndexReader reader IOException StatementExpression Assignment MemberReference contextScorer MethodInvocation contextQuery MethodInvocation MemberReference reader scorer MemberReference searcher weight = IfStatement BinaryOperation != MemberReference nameTest Literal null BlockStatement StatementExpression Assignment MemberReference nameTestScorer ClassCreator MethodInvocation MemberReference searcher weight MethodInvocation MemberReference reader scorer ReferenceType TermQuery ClassCreator ReferenceType Term MemberReference FieldNames LABEL MemberReference nameTest = End ReturnStatement ClassCreator ReferenceType DerefScorer MethodInvocation searcher getSimilarity MemberReference reader MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public ReferenceType Explanation explain FormalParameter ReferenceType IndexReader reader FormalParameter BasicType int doc IOException ReturnStatement ClassCreator ReferenceType Explanation ReferenceType Weight ClassDeclaration Modifier private /**
     * Implements a <code>Scorer</code> for this <code>DerefQuery</code>.
     */ DerefScorer FieldDeclaration /**
         * An <code>IndexReader</code> to access the index.
         */ Modifier private final ReferenceType IndexReader VariableDeclarator reader FieldDeclaration /**
         * BitSet storing the id's of selected documents
         */ Modifier private final ReferenceType BitSet VariableDeclarator hits FieldDeclaration /**
         * List of UUIDs of selected nodes
         */ Modifier private ReferenceType List VariableDeclarator uuids Literal null FieldDeclaration /**
         * The next document id to return
         */ Modifier private BasicType int VariableDeclarator nextDoc Literal - 1 ConstructorDeclaration Modifier protected /**
         * Creates a new <code>DerefScorer</code>.
         *
         * @param similarity the <code>Similarity</code> instance to use.
         * @param reader     for index access.
         */ DerefScorer FormalParameter ReferenceType Similarity similarity FormalParameter ReferenceType IndexReader reader StatementExpression SuperConstructorInvocation MemberReference similarity StatementExpression Assignment This MemberReference reader MemberReference reader = StatementExpression Assignment This MemberReference hits ClassCreator ReferenceType BitSet MethodInvocation reader maxDoc = MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean next IOException StatementExpression MethodInvocation calculateChildren StatementExpression Assignment MemberReference nextDoc MethodInvocation hits BinaryOperation + MemberReference nextDoc Literal 1 nextSetBit = ReturnStatement BinaryOperation > MemberReference nextDoc Literal - 1 MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType int doc ReturnStatement MemberReference nextDoc MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType float score IOException ReturnStatement Literal 1.0f MethodDeclaration /**
         * {@inheritDoc}
         */ Modifier public BasicType boolean skipTo FormalParameter BasicType int target IOException StatementExpression Assignment MemberReference nextDoc MethodInvocation hits MemberReference target nextSetBit = ReturnStatement BinaryOperation > MemberReference nextDoc Literal - 1 MethodDeclaration /**
         * {@inheritDoc}
         *
         * @throws UnsupportedOperationException this implementation always
         *                                       throws an <code>UnsupportedOperationException</code>.
         */ Modifier public ReferenceType Explanation explain FormalParameter BasicType int doc IOException ThrowStatement ClassCreator ReferenceType UnsupportedOperationException MethodDeclaration Modifier private calculateChildren IOException IfStatement BinaryOperation == MemberReference uuids Literal null BlockStatement StatementExpression Assignment MemberReference uuids ClassCreator ReferenceType ArrayList = StatementExpression MethodInvocation contextScorer ClassCreator ReferenceType HitCollector MethodDeclaration Modifier public collect FormalParameter BasicType int doc FormalParameter BasicType float score StatementExpression MethodInvocation hits MemberReference doc set score LocalVariableDeclaration Modifier final ReferenceType BitSet VariableDeclarator nameTestHits ClassCreator ReferenceType BitSet IfStatement BinaryOperation != MemberReference nameTestScorer Literal null BlockStatement StatementExpression MethodInvocation nameTestScorer ClassCreator ReferenceType HitCollector MethodDeclaration Modifier public collect FormalParameter BasicType int doc FormalParameter BasicType float score StatementExpression MethodInvocation nameTestHits MemberReference doc set score End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MethodInvocation hits Literal 0 nextSetBit BinaryOperation >= MemberReference i Literal 0 Assignment MemberReference i MethodInvocation hits BinaryOperation + MemberReference i Literal 1 nextSetBit = BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator values MethodInvocation reader MethodInvocation MemberReference FieldNames PROPERTIES getValues MemberReference i document LocalVariableDeclaration ReferenceType String VariableDeclarator prefix MethodInvocation FieldNames MemberReference refProperty Literal """" createNamedValue ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator v Literal 0 BinaryOperation < MemberReference v MemberReference values length MemberReference ++ v BlockStatement IfStatement MemberReference ArraySelector MemberReference v MethodInvocation MemberReference prefix startsWith values BlockStatement StatementExpression MethodInvocation uuids MemberReference ArraySelector MemberReference v MethodInvocation MethodInvocation prefix length substring values add End End End StatementExpression MethodInvocation hits clear ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation uuids iterator MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator node MethodInvocation reader ClassCreator ReferenceType Term MemberReference FieldNames UUID Cast ReferenceType String MethodInvocation it next termDocs TryStatement WhileStatement MethodInvocation node next BlockStatement StatementExpression MethodInvocation hits MethodInvocation node doc set End StatementExpression MethodInvocation node close End IfStatement BinaryOperation != MemberReference nameTestScorer Literal null BlockStatement StatementExpression MethodInvocation hits MemberReference nameTestHits and End End ReferenceType Scorer ReferenceType Query",1
412,412,CompilationUnit PackageDeclaration org.apache.jackrabbit.util.name Import javax.jcr.NamespaceRegistry Import javax.jcr.NamespaceException Import javax.jcr.UnsupportedRepositoryOperationException Import javax.jcr.RepositoryException Import java.util.Map Import java.util.Iterator ClassDeclaration Modifier public NamespaceAdder FieldDeclaration ReferenceType NamespaceRegistry VariableDeclarator registry ConstructorDeclaration Modifier public NamespaceAdder FormalParameter ReferenceType NamespaceRegistry nsr StatementExpression Assignment MemberReference registry MemberReference nsr = MethodDeclaration Modifier public addNamespaces FormalParameter ReferenceType NamespaceMapping nsm NamespaceException UnsupportedRepositoryOperationException RepositoryException LocalVariableDeclaration ReferenceType Map VariableDeclarator m MethodInvocation nsm getPrefixToURIMapping ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation m MethodInvocation iterator values MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType Map ReferenceType Entry VariableDeclarator e Cast ReferenceType Map ReferenceType Entry MethodInvocation i next LocalVariableDeclaration ReferenceType String VariableDeclarator prefix Cast ReferenceType String MethodInvocation e getKey LocalVariableDeclaration ReferenceType String VariableDeclarator uri Cast ReferenceType String MethodInvocation e getKey StatementExpression MethodInvocation registry MemberReference prefix MemberReference uri registerNamespace End MethodDeclaration Modifier public addNamespace FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri NamespaceException UnsupportedRepositoryOperationException RepositoryException StatementExpression MethodInvocation registry MemberReference prefix MemberReference uri registerNamespace,0
511,511,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.header Import org.apache.log4j.Logger Import javax.servlet.http.HttpServletRequest ClassDeclaration Modifier public /**
 * <code>CodedUrlHeader</code>...
 */ CodedUrlHeader FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType CodedUrlHeader getLogger FieldDeclaration Modifier private final ReferenceType String VariableDeclarator headerName FieldDeclaration Modifier private final ReferenceType String VariableDeclarator headerValue ConstructorDeclaration Modifier public CodedUrlHeader FormalParameter ReferenceType String headerName FormalParameter ReferenceType String headerValue StatementExpression Assignment This MemberReference headerName MemberReference headerName = IfStatement BinaryOperation && BinaryOperation != MemberReference headerValue Literal null BinaryOperation && MethodInvocation headerValue Literal ""<"" startsWith MethodInvocation headerValue Literal "">"" endsWith BlockStatement StatementExpression Assignment MemberReference headerValue BinaryOperation + BinaryOperation + Literal ""<"" MemberReference headerValue Literal "">"" = End StatementExpression Assignment This MemberReference headerValue MemberReference headerValue = MethodDeclaration /**
     * Return the name of the header
     *
     * @return header name
     * @see Header#getHeaderName()
     */ Modifier public ReferenceType String getHeaderName ReturnStatement MemberReference headerName MethodDeclaration /**
     * Return the value of the header
     *
     * @return value
     * @see Header#getHeaderValue()
     */ Modifier public ReferenceType String getHeaderValue ReturnStatement MemberReference headerValue MethodDeclaration /**
     * Returns the token present in the header value or <code>null</code>.
     * If the header contained multiple tokens separated by ',' the first value
     * is returned.
     *
     * @return token present in the CodedURL header or <code>null</code> if
     * the header is not present.
     * @see #getCodedUrls()
     */ Modifier public ReferenceType String getCodedUrl LocalVariableDeclaration ReferenceType String VariableDeclarator codedUrls MethodInvocation getCodedUrls ReturnStatement TernaryExpression BinaryOperation != MemberReference codedUrls Literal null MemberReference ArraySelector Literal 0 codedUrls Literal null MethodDeclaration /**
     * Return an array of coded urls as present in the header value or <code>null</code> if
     * no value is present.
     *
     * @return array of coded urls
     */ Modifier public ReferenceType String getCodedUrls LocalVariableDeclaration ReferenceType String VariableDeclarator codedUrls Literal null IfStatement BinaryOperation != MemberReference headerValue Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator values MethodInvocation headerValue Literal "","" split StatementExpression Assignment MemberReference codedUrls ArrayCreator ReferenceType String MemberReference values length = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator p1 MemberReference ArraySelector MemberReference i MethodInvocation Literal '<' indexOf values IfStatement BinaryOperation < MemberReference p1 Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Invalid CodedURL header value:"" MemberReference ArraySelector MemberReference i values End LocalVariableDeclaration BasicType int VariableDeclarator p2 MemberReference ArraySelector MemberReference i MethodInvocation Literal '>' MemberReference p1 indexOf values IfStatement BinaryOperation < MemberReference p2 Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Invalid CodedURL header value:"" MemberReference ArraySelector MemberReference i values End StatementExpression Assignment MemberReference ArraySelector MemberReference i codedUrls MemberReference ArraySelector MemberReference i MethodInvocation BinaryOperation + MemberReference p1 Literal 1 MemberReference p2 substring values = End End ReturnStatement MemberReference codedUrls MethodDeclaration /**
     * Retrieves the header with the given name and builds a new <code>CodedUrlHeader</code>.
     *
     * @param request
     * @param headerName
     * @return new <code>CodedUrlHeader</code> instance
     */ Modifier public static ReferenceType CodedUrlHeader parse FormalParameter ReferenceType HttpServletRequest request FormalParameter ReferenceType String headerName LocalVariableDeclaration ReferenceType String VariableDeclarator headerValue MethodInvocation request MemberReference headerName getHeader ReturnStatement ClassCreator ReferenceType CodedUrlHeader MemberReference headerName MemberReference headerValue ReferenceType Header",0
665,665,,0
604,604,,0
768,768,,1
243,243,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.orm.ojb Import java.util.ArrayList Import java.util.StringTokenizer Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.ojb.broker.accesslayer.conversions.ConversionException Import org.apache.ojb.broker.accesslayer.conversions.FieldConversion ClassDeclaration Modifier public /**
 * <p> Helper class to convert multi-valued properties into an encoded
 * string stored in a single database column.</p>
 */ ValuesToStringFieldConversion FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator SEPARATOR Literal ""#$#"" FieldDeclaration Modifier private BasicType int VariableDeclarator type ConstructorDeclaration Modifier public ValuesToStringFieldConversion ConstructorDeclaration Modifier public ValuesToStringFieldConversion FormalParameter BasicType int type StatementExpression Assignment This MemberReference type MemberReference type = MethodDeclaration Modifier public ReferenceType Object javaToSql FormalParameter ReferenceType Object object ConversionException LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values Cast ReferenceType InternalValue MemberReference object LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buffer ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression MethodInvocation buffer MemberReference ArraySelector MemberReference i MethodInvocation toString values append IfStatement BinaryOperation < MemberReference i BinaryOperation - MemberReference values length Literal 1 BlockStatement StatementExpression MethodInvocation buffer MemberReference SEPARATOR append End End ReturnStatement MethodInvocation buffer toString MethodDeclaration Modifier public ReferenceType Object sqlToJava FormalParameter ReferenceType Object object ConversionException LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator valueList ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tokenizer ClassCreator ReferenceType StringTokenizer Cast ReferenceType String MemberReference object MemberReference SEPARATOR WhileStatement MethodInvocation tokenizer hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator curValue MethodInvocation InternalValue MethodInvocation tokenizer nextToken MemberReference type valueOf StatementExpression MethodInvocation valueList MemberReference curValue add End ReturnStatement Cast ReferenceType InternalValue MethodInvocation valueList ArrayCreator ReferenceType InternalValue MethodInvocation valueList size toArray ReferenceType FieldConversion",1
542,542,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.xml Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.fs.BasedFileSystem Import org.apache.jackrabbit.core.fs.FileSystem Import org.apache.jackrabbit.core.fs.FileSystemException Import org.apache.jackrabbit.core.fs.FileSystemResource Import org.apache.jackrabbit.core.fs.local.LocalFileSystem Import org.apache.jackrabbit.core.nodetype.NodeDefId Import org.apache.jackrabbit.core.nodetype.PropDefId Import org.apache.jackrabbit.core.state.AbstractPersistenceManager Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.NoSuchItemStateException Import org.apache.jackrabbit.core.state.NodeReferences Import org.apache.jackrabbit.core.state.NodeReferencesId Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PMContext Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.util.BLOBStore Import org.apache.jackrabbit.core.state.util.FileSystemBLOBStore Import org.apache.jackrabbit.core.state.util.ResourceBasedBLOBStore Import org.apache.jackrabbit.core.util.DOMWalker Import org.apache.jackrabbit.core.value.BLOBFileValue Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.util.Text Import org.apache.log4j.Logger Import javax.jcr.PropertyType Import java.io.BufferedWriter Import java.io.File Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream Import java.io.OutputStreamWriter Import java.io.UnsupportedEncodingException Import java.io.Writer Import java.security.MessageDigest Import java.security.NoSuchAlgorithmException Import java.util.ArrayList Import java.util.HashSet Import java.util.Iterator Import java.util.Set ClassDeclaration Modifier public /**
 * <code>XMLPersistenceManager</code> is a <code>FileSystem</code>-based
 * <code>PersistenceManager</code> that persists <code>ItemState</code>
 * and <code>NodeReferences</code> objects in XML format.
 */ XMLPersistenceManager FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType XMLPersistenceManager getLogger FieldDeclaration /**
     * hexdigits for toString
     */ Modifier private final static BasicType char VariableDeclarator HEXDIGITS Literal MethodInvocation toCharArray ""0123456789abcdef"" FieldDeclaration /**
     * The default encoding used in serialization
     */ Modifier public final static ReferenceType String VariableDeclarator DEFAULT_ENCODING Literal ""UTF-8"" FieldDeclaration /**
     * The XML elements and attributes used in serialization
     */ Modifier private final static ReferenceType String VariableDeclarator NODE_ELEMENT Literal ""node"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator UUID_ATTRIBUTE Literal ""uuid"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODETYPE_ATTRIBUTE Literal ""nodeType"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator PARENTUUID_ATTRIBUTE Literal ""parentUUID"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DEFINITIONID_ATTRIBUTE Literal ""definitionId"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MODCOUNT_ATTRIBUTE Literal ""modCount"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MIXINTYPES_ELEMENT Literal ""mixinTypes"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MIXINTYPE_ELEMENT Literal ""mixinType"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator PROPERTIES_ELEMENT Literal ""properties"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator PROPERTY_ELEMENT Literal ""property"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NAME_ATTRIBUTE Literal ""name"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator TYPE_ATTRIBUTE Literal ""type"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MULTIVALUED_ATTRIBUTE Literal ""multiValued"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator VALUES_ELEMENT Literal ""values"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator VALUE_ELEMENT Literal ""value"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODES_ELEMENT Literal ""nodes"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODEREFERENCES_ELEMENT Literal ""references"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator TARGETID_ATTRIBUTE Literal ""targetId"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODEREFERENCE_ELEMENT Literal ""reference"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator PROPERTYID_ATTRIBUTE Literal ""propertyId"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODEFILENAME Literal "".node.xml"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODEREFSFILENAME Literal "".references.xml"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator initialized FieldDeclaration Modifier private ReferenceType FileSystem VariableDeclarator itemStateFS FieldDeclaration Modifier private ReferenceType FileSystem VariableDeclarator blobFS FieldDeclaration Modifier private ReferenceType BLOBStore VariableDeclarator blobStore ConstructorDeclaration Modifier public /**
     * Creates a new <code>XMLPersistenceManager</code> instance.
     */ XMLPersistenceManager StatementExpression Assignment MemberReference initialized Literal false = MethodDeclaration Modifier private ReferenceType String buildNodeFolderPath FormalParameter ReferenceType String uuid LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType char VariableDeclarator chars MethodInvocation uuid toCharArray LocalVariableDeclaration BasicType int VariableDeclarator cnt Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference chars length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i chars Literal '-' BlockStatement ContinueStatement End IfStatement BinaryOperation || BinaryOperation == MemberReference cnt Literal 4 BinaryOperation == MemberReference cnt Literal 8 BlockStatement StatementExpression MethodInvocation sb Literal '/' append End StatementExpression MethodInvocation sb MemberReference ArraySelector MemberReference i chars append StatementExpression MemberReference ++ cnt End ReturnStatement MethodInvocation sb toString MethodDeclaration Modifier private ReferenceType String buildPropFilePath FormalParameter ReferenceType String parentUUID FormalParameter ReferenceType QName propName LocalVariableDeclaration ReferenceType String VariableDeclarator fileName TryStatement LocalVariableDeclaration ReferenceType MessageDigest VariableDeclarator md5 MethodInvocation MessageDigest Literal ""MD5"" getInstance StatementExpression MethodInvocation md5 MethodInvocation propName MethodInvocation getBytes getNamespaceURI update StatementExpression MethodInvocation md5 MethodInvocation propName MethodInvocation getBytes getLocalName update LocalVariableDeclaration BasicType byte VariableDeclarator bytes MethodInvocation md5 digest LocalVariableDeclaration BasicType char VariableDeclarator chars ArrayCreator BasicType char Literal 32 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 VariableDeclarator j Literal 0 BinaryOperation < MemberReference i Literal 16 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j chars MemberReference ArraySelector BinaryOperation & BinaryOperation >> MemberReference ArraySelector MemberReference i bytes Literal 4 Literal 0x0f HEXDIGITS = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j chars MemberReference ArraySelector BinaryOperation & MemberReference ArraySelector MemberReference i bytes Literal 0x0f HEXDIGITS = End StatementExpression Assignment MemberReference fileName BinaryOperation + ClassCreator ReferenceType String MemberReference chars Literal "".xml"" = CatchClause CatchClauseParameter NoSuchAlgorithmException nsae LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""MD5 not available"" StatementExpression MethodInvocation log MemberReference msg MemberReference nsae fatal ThrowStatement ClassCreator ReferenceType InternalError BinaryOperation + MemberReference msg MemberReference nsae ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MemberReference parentUUID buildNodeFolderPath Literal ""/"" MemberReference fileName MethodDeclaration Modifier private ReferenceType String buildNodeFilePath FormalParameter ReferenceType String uuid ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MemberReference uuid buildNodeFolderPath Literal ""/"" MemberReference NODEFILENAME MethodDeclaration Modifier private ReferenceType String buildNodeReferencesFilePath FormalParameter ReferenceType String uuid ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MemberReference uuid buildNodeFolderPath Literal ""/"" MemberReference NODEREFSFILENAME MethodDeclaration Modifier private readState FormalParameter ReferenceType DOMWalker walker FormalParameter ReferenceType NodeState state ItemStateException IfStatement MethodInvocation ! walker MethodInvocation MemberReference NODE_ELEMENT equals getName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + Literal ""invalid serialization format (unexpected element: "" MethodInvocation walker getName Literal "")"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End IfStatement MethodInvocation ! state MethodInvocation MethodInvocation walker MemberReference UUID_ATTRIBUTE getAttribute equals getUUID BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""invalid serialized state: uuid mismatch"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End LocalVariableDeclaration ReferenceType String VariableDeclarator ntName MethodInvocation walker MemberReference NODETYPE_ATTRIBUTE getAttribute IfStatement MethodInvocation ! QName MethodInvocation MethodInvocation state getNodeTypeName equals MemberReference ntName valueOf BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""invalid serialized state: nodetype mismatch"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation walker MemberReference PARENTUUID_ATTRIBUTE getAttribute IfStatement BinaryOperation > MethodInvocation parentUUID length Literal 0 BlockStatement StatementExpression MethodInvocation state MemberReference parentUUID setParentUUID End LocalVariableDeclaration ReferenceType String VariableDeclarator definitionId MethodInvocation walker MemberReference DEFINITIONID_ATTRIBUTE getAttribute StatementExpression MethodInvocation state MethodInvocation NodeDefId MemberReference definitionId valueOf setDefinitionId LocalVariableDeclaration ReferenceType String VariableDeclarator modCount MethodInvocation walker MemberReference MODCOUNT_ATTRIBUTE getAttribute StatementExpression MethodInvocation state MethodInvocation Short MemberReference modCount parseShort setModCount IfStatement MethodInvocation walker MemberReference MIXINTYPES_ELEMENT enterElement BlockStatement LocalVariableDeclaration ReferenceType Set VariableDeclarator mixins ClassCreator ReferenceType HashSet WhileStatement MethodInvocation walker MemberReference MIXINTYPE_ELEMENT iterateElements BlockStatement StatementExpression MethodInvocation mixins MethodInvocation QName MethodInvocation walker MemberReference NAME_ATTRIBUTE getAttribute valueOf add End IfStatement BinaryOperation > MethodInvocation mixins size Literal 0 BlockStatement StatementExpression MethodInvocation state MemberReference mixins setMixinTypeNames End StatementExpression MethodInvocation walker leaveElement End IfStatement MethodInvocation walker MemberReference PROPERTIES_ELEMENT enterElement BlockStatement WhileStatement MethodInvocation walker MemberReference PROPERTY_ELEMENT iterateElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator propName MethodInvocation walker MemberReference NAME_ATTRIBUTE getAttribute StatementExpression MethodInvocation state MethodInvocation QName MemberReference propName valueOf addPropertyName End StatementExpression MethodInvocation walker leaveElement End IfStatement MethodInvocation walker MemberReference NODES_ELEMENT enterElement BlockStatement WhileStatement MethodInvocation walker MemberReference NODE_ELEMENT iterateElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator childName MethodInvocation walker MemberReference NAME_ATTRIBUTE getAttribute LocalVariableDeclaration ReferenceType String VariableDeclarator childUUID MethodInvocation walker MemberReference UUID_ATTRIBUTE getAttribute StatementExpression MethodInvocation state MethodInvocation QName MemberReference childName valueOf MemberReference childUUID addChildNodeEntry End StatementExpression MethodInvocation walker leaveElement End MethodDeclaration Modifier private readState FormalParameter ReferenceType DOMWalker walker FormalParameter ReferenceType PropertyState state ItemStateException IfStatement MethodInvocation ! walker MethodInvocation MemberReference PROPERTY_ELEMENT equals getName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + Literal ""invalid serialization format (unexpected element: "" MethodInvocation walker getName Literal "")"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End IfStatement MethodInvocation ! state MethodInvocation MethodInvocation QName MethodInvocation walker MemberReference NAME_ATTRIBUTE getAttribute valueOf equals getName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""invalid serialized state: name mismatch"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End LocalVariableDeclaration ReferenceType String VariableDeclarator parentUUID MethodInvocation walker MemberReference PARENTUUID_ATTRIBUTE getAttribute IfStatement MethodInvocation ! parentUUID MethodInvocation state getParentUUID equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""invalid serialized state: parentUUID mismatch"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End LocalVariableDeclaration ReferenceType String VariableDeclarator typeName MethodInvocation walker MemberReference TYPE_ATTRIBUTE getAttribute LocalVariableDeclaration BasicType int VariableDeclarator type TryStatement StatementExpression Assignment MemberReference type MethodInvocation PropertyType MemberReference typeName valueFromName = CatchClause CatchClauseParameter IllegalArgumentException iae ThrowStatement ClassCreator ReferenceType ItemStateException BinaryOperation + Literal ""unexpected property-type: "" MemberReference typeName MemberReference iae StatementExpression MethodInvocation state MemberReference type setType LocalVariableDeclaration ReferenceType String VariableDeclarator multiValued MethodInvocation walker MemberReference MULTIVALUED_ATTRIBUTE getAttribute StatementExpression MethodInvocation state MethodInvocation Boolean MemberReference multiValued getBoolean setMultiValued LocalVariableDeclaration ReferenceType String VariableDeclarator definitionId MethodInvocation walker MemberReference DEFINITIONID_ATTRIBUTE getAttribute StatementExpression MethodInvocation state MethodInvocation PropDefId MemberReference definitionId valueOf setDefinitionId LocalVariableDeclaration ReferenceType String VariableDeclarator modCount MethodInvocation walker MemberReference MODCOUNT_ATTRIBUTE getAttribute StatementExpression MethodInvocation state MethodInvocation Short MemberReference modCount parseShort setModCount LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator values ClassCreator ReferenceType ArrayList IfStatement MethodInvocation walker MemberReference VALUES_ELEMENT enterElement BlockStatement WhileStatement MethodInvocation walker MemberReference VALUE_ELEMENT iterateElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator content MethodInvocation walker getContent IfStatement BinaryOperation == MemberReference PropertyType STRING MemberReference type BlockStatement StatementExpression MethodInvocation values MethodInvocation InternalValue MemberReference content MemberReference type valueOf add IfStatement BinaryOperation > MethodInvocation content length Literal 0 BlockStatement IfStatement BinaryOperation == MemberReference type MemberReference PropertyType BINARY BlockStatement TryStatement IfStatement BinaryOperation instanceof MemberReference blobStore ReferenceType ResourceBasedBLOBStore BlockStatement LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator fsRes Cast ReferenceType ResourceBasedBLOBStore MemberReference blobStore StatementExpression MethodInvocation values MethodInvocation InternalValue MemberReference fsRes create add BlockStatement LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation blobStore MemberReference content get TryStatement StatementExpression MethodInvocation values MethodInvocation InternalValue MemberReference in create add TryStatement StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException e End CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""error while reading serialized binary value"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference e BlockStatement StatementExpression MethodInvocation values MethodInvocation InternalValue MemberReference content MemberReference type valueOf add End BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + MethodInvocation state getId Literal "": ignoring empty value of type "" MethodInvocation PropertyType MemberReference type nameFromValue warn End End End StatementExpression MethodInvocation walker leaveElement End StatementExpression MethodInvocation state Cast ReferenceType InternalValue MethodInvocation values ArrayCreator ReferenceType InternalValue MethodInvocation values size toArray setValues MethodDeclaration Modifier private readState FormalParameter ReferenceType DOMWalker walker FormalParameter ReferenceType NodeReferences refs ItemStateException IfStatement MethodInvocation ! walker MethodInvocation MemberReference NODEREFERENCES_ELEMENT equals getName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + Literal ""invalid serialization format (unexpected element: "" MethodInvocation walker getName Literal "")"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End IfStatement MethodInvocation ! refs MethodInvocation MethodInvocation NodeReferencesId MethodInvocation walker MemberReference TARGETID_ATTRIBUTE getAttribute valueOf equals getTargetId BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""invalid serialized state: targetId  mismatch"" StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg End StatementExpression MethodInvocation refs clearAllReferences WhileStatement MethodInvocation walker MemberReference NODEREFERENCE_ELEMENT iterateElements BlockStatement StatementExpression MethodInvocation refs MethodInvocation PropertyId MethodInvocation walker MemberReference PROPERTYID_ATTRIBUTE getAttribute valueOf addReference End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public init FormalParameter ReferenceType PMContext context Exception IfStatement MemberReference initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""already initialized"" End StatementExpression Assignment MemberReference itemStateFS ClassCreator ReferenceType BasedFileSystem MethodInvocation context getFileSystem Literal ""/data"" = LocalVariableDeclaration ReferenceType LocalFileSystem VariableDeclarator blobFS ClassCreator ReferenceType LocalFileSystem StatementExpression MethodInvocation blobFS ClassCreator ReferenceType File MethodInvocation context getHomeDir Literal ""blobs"" setRoot StatementExpression MethodInvocation blobFS init StatementExpression Assignment This MemberReference blobFS MemberReference blobFS = StatementExpression Assignment MemberReference blobStore ClassCreator ReferenceType FileSystemBLOBStore MemberReference blobFS = StatementExpression Assignment MemberReference initialized Literal true = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized close Exception IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End TryStatement StatementExpression MethodInvocation blobFS close StatementExpression Assignment MemberReference blobFS Literal null = StatementExpression Assignment MemberReference blobStore Literal null = StatementExpression Assignment MemberReference initialized Literal false = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized ReferenceType NodeState load FormalParameter ReferenceType NodeId id NoSuchItemStateException ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType Exception VariableDeclarator e Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator nodeFilePath MethodInvocation MethodInvocation id getUUID buildNodeFilePath TryStatement IfStatement MethodInvocation ! itemStateFS MemberReference nodeFilePath isFile BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException MethodInvocation id toString End LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation itemStateFS MemberReference nodeFilePath getInputStream TryStatement LocalVariableDeclaration ReferenceType DOMWalker VariableDeclarator walker ClassCreator ReferenceType DOMWalker MemberReference in LocalVariableDeclaration ReferenceType String VariableDeclarator ntName MethodInvocation walker MemberReference NODETYPE_ATTRIBUTE getAttribute LocalVariableDeclaration ReferenceType NodeState VariableDeclarator state MethodInvocation MemberReference id createNew StatementExpression MethodInvocation state MethodInvocation QName MemberReference ntName valueOf setNodeTypeName StatementExpression MethodInvocation MemberReference walker MemberReference state readState ReturnStatement MemberReference state StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException ioe StatementExpression Assignment MemberReference e MemberReference ioe = CatchClause CatchClauseParameter FileSystemException fse StatementExpression Assignment MemberReference e MemberReference fse = LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to read node state: "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized ReferenceType PropertyState load FormalParameter ReferenceType PropertyId id NoSuchItemStateException ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType Exception VariableDeclarator e Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator propFilePath MethodInvocation MethodInvocation id getParentUUID MethodInvocation id getName buildPropFilePath TryStatement IfStatement MethodInvocation ! itemStateFS MemberReference propFilePath isFile BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException MethodInvocation id toString End LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation itemStateFS MemberReference propFilePath getInputStream TryStatement LocalVariableDeclaration ReferenceType DOMWalker VariableDeclarator walker ClassCreator ReferenceType DOMWalker MemberReference in LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator state MethodInvocation MemberReference id createNew StatementExpression MethodInvocation MemberReference walker MemberReference state readState ReturnStatement MemberReference state StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException ioe StatementExpression Assignment MemberReference e MemberReference ioe = CatchClause CatchClauseParameter FileSystemException fse StatementExpression Assignment MemberReference e MemberReference fse = LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to read property state: "" MethodInvocation id toString StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected store FormalParameter ReferenceType NodeState state ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation state getUUID LocalVariableDeclaration ReferenceType String VariableDeclarator nodeFilePath MethodInvocation MemberReference uuid buildNodeFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator nodeFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference nodeFilePath TryStatement StatementExpression MethodInvocation nodeFile makeParentDirs LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator os MethodInvocation nodeFile getOutputStream LocalVariableDeclaration ReferenceType Writer VariableDeclarator writer Literal null TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator encoding MemberReference DEFAULT_ENCODING TryStatement StatementExpression Assignment MemberReference writer ClassCreator ReferenceType BufferedWriter ClassCreator ReferenceType OutputStreamWriter MemberReference os MemberReference encoding = CatchClause CatchClauseParameter UnsupportedEncodingException e LocalVariableDeclaration ReferenceType OutputStreamWriter VariableDeclarator osw ClassCreator ReferenceType OutputStreamWriter MemberReference os StatementExpression Assignment MemberReference encoding MethodInvocation osw getEncoding = StatementExpression Assignment MemberReference writer ClassCreator ReferenceType BufferedWriter MemberReference osw = StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""<?xml version=\""1.0\"" encoding=\"""" MemberReference encoding Literal ""\""?>\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<"" MemberReference NODE_ELEMENT Literal "" "" MemberReference UUID_ATTRIBUTE Literal ""=\"""" MethodInvocation state getUUID Literal ""\"" "" MemberReference PARENTUUID_ATTRIBUTE Literal ""=\"""" TernaryExpression BinaryOperation == MethodInvocation state getParentUUID Literal null Literal """" MethodInvocation state getParentUUID Literal ""\"" "" MemberReference DEFINITIONID_ATTRIBUTE Literal ""=\"""" MethodInvocation state MethodInvocation toString getDefinitionId Literal ""\"" "" MemberReference MODCOUNT_ATTRIBUTE Literal ""=\"""" MethodInvocation state getModCount Literal ""\"" "" MemberReference NODETYPE_ATTRIBUTE Literal ""=\"""" MethodInvocation Text MethodInvocation state MethodInvocation toString getNodeTypeName encodeIllegalXMLCharacters Literal ""\"">\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t<"" MemberReference MIXINTYPES_ELEMENT Literal "">\n"" write LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation state MethodInvocation iterator getMixinTypeNames WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\t\t<"" MemberReference MIXINTYPE_ELEMENT Literal "" "" MemberReference NAME_ATTRIBUTE Literal ""=\"""" MethodInvocation Text MethodInvocation iter MethodInvocation toString next encodeIllegalXMLCharacters Literal ""\""/>\n"" write End StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t</"" MemberReference MIXINTYPES_ELEMENT Literal "">\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t<"" MemberReference PROPERTIES_ELEMENT Literal "">\n"" write StatementExpression Assignment MemberReference iter MethodInvocation state MethodInvocation iterator getPropertyNames = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType QName VariableDeclarator propName Cast ReferenceType QName MethodInvocation iter next StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\t\t<"" MemberReference PROPERTY_ELEMENT Literal "" "" MemberReference NAME_ATTRIBUTE Literal ""=\"""" MethodInvocation Text MethodInvocation propName toString encodeIllegalXMLCharacters Literal ""\"">\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t\t</"" MemberReference PROPERTY_ELEMENT Literal "">\n"" write End StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t</"" MemberReference PROPERTIES_ELEMENT Literal "">\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t<"" MemberReference NODES_ELEMENT Literal "">\n"" write StatementExpression Assignment MemberReference iter MethodInvocation state MethodInvocation iterator getChildNodeEntries = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator entry Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation iter next StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\t\t<"" MemberReference NODE_ELEMENT Literal "" "" MemberReference NAME_ATTRIBUTE Literal ""=\"""" MethodInvocation Text MethodInvocation entry MethodInvocation toString getName encodeIllegalXMLCharacters Literal ""\"" "" MemberReference UUID_ATTRIBUTE Literal ""=\"""" MethodInvocation entry getUUID Literal ""\"">\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t\t</"" MemberReference NODE_ELEMENT Literal "">\n"" write End StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t</"" MemberReference NODES_ELEMENT Literal "">\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""</"" MemberReference NODE_ELEMENT Literal "">\n"" write StatementExpression MethodInvocation writer close CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to write node state: "" MemberReference uuid StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected store FormalParameter ReferenceType PropertyState state ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType String VariableDeclarator propFilePath MethodInvocation MethodInvocation state getParentUUID MethodInvocation state getName buildPropFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator propFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference propFilePath TryStatement StatementExpression MethodInvocation propFile makeParentDirs LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator os MethodInvocation propFile getOutputStream LocalVariableDeclaration ReferenceType Writer VariableDeclarator writer Literal null TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator encoding MemberReference DEFAULT_ENCODING TryStatement StatementExpression Assignment MemberReference writer ClassCreator ReferenceType BufferedWriter ClassCreator ReferenceType OutputStreamWriter MemberReference os MemberReference encoding = CatchClause CatchClauseParameter UnsupportedEncodingException e LocalVariableDeclaration ReferenceType OutputStreamWriter VariableDeclarator osw ClassCreator ReferenceType OutputStreamWriter MemberReference os StatementExpression Assignment MemberReference encoding MethodInvocation osw getEncoding = StatementExpression Assignment MemberReference writer ClassCreator ReferenceType BufferedWriter MemberReference osw = LocalVariableDeclaration ReferenceType String VariableDeclarator typeName LocalVariableDeclaration BasicType int VariableDeclarator type MethodInvocation state getType TryStatement StatementExpression Assignment MemberReference typeName MethodInvocation PropertyType MemberReference type nameFromValue = CatchClause CatchClauseParameter IllegalArgumentException iae ThrowStatement ClassCreator ReferenceType ItemStateException BinaryOperation + Literal ""unexpected property-type ordinal: "" MemberReference type MemberReference iae StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""<?xml version=\""1.0\"" encoding=\"""" MemberReference encoding Literal ""\""?>\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<"" MemberReference PROPERTY_ELEMENT Literal "" "" MemberReference NAME_ATTRIBUTE Literal ""=\"""" MethodInvocation Text MethodInvocation state MethodInvocation toString getName encodeIllegalXMLCharacters Literal ""\"" "" MemberReference PARENTUUID_ATTRIBUTE Literal ""=\"""" MethodInvocation state getParentUUID Literal ""\"" "" MemberReference MULTIVALUED_ATTRIBUTE Literal ""=\"""" MethodInvocation Boolean MethodInvocation state isMultiValued toString Literal ""\"" "" MemberReference DEFINITIONID_ATTRIBUTE Literal ""=\"""" MethodInvocation state MethodInvocation toString getDefinitionId Literal ""\"" "" MemberReference MODCOUNT_ATTRIBUTE Literal ""=\"""" MethodInvocation state getModCount Literal ""\"" "" MemberReference TYPE_ATTRIBUTE Literal ""=\"""" MemberReference typeName Literal ""\"">\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t<"" MemberReference VALUES_ELEMENT Literal "">\n"" write LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation state getValues IfStatement BinaryOperation != MemberReference values Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t\t<"" MemberReference VALUE_ELEMENT Literal "">"" write LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator val MemberReference ArraySelector MemberReference i values IfStatement BinaryOperation != MemberReference val Literal null BlockStatement IfStatement BinaryOperation == MemberReference type MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration ReferenceType BLOBFileValue VariableDeclarator blobVal Cast ReferenceType BLOBFileValue MethodInvocation val internalValue LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation blobVal getStream LocalVariableDeclaration ReferenceType String VariableDeclarator blobId MethodInvocation blobStore Cast ReferenceType PropertyId MethodInvocation state getId MemberReference i createId TryStatement StatementExpression MethodInvocation blobStore MemberReference blobId MemberReference in MethodInvocation blobVal getLength put TryStatement StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation writer MemberReference blobId write IfStatement BinaryOperation instanceof MemberReference blobStore ReferenceType ResourceBasedBLOBStore BlockStatement LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator fsRes Cast ReferenceType ResourceBasedBLOBStore MemberReference blobStore StatementExpression Assignment MemberReference ArraySelector MemberReference i values MethodInvocation InternalValue MemberReference fsRes create = BlockStatement StatementExpression Assignment MemberReference in MethodInvocation blobStore MemberReference blobId get = TryStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i values MethodInvocation InternalValue MemberReference in create = TryStatement StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException e End StatementExpression MethodInvocation blobVal discard BlockStatement StatementExpression MethodInvocation writer MethodInvocation Text MethodInvocation val toString encodeIllegalXMLCharacters write End End StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""</"" MemberReference VALUE_ELEMENT Literal "">\n"" write End End StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""\t</"" MemberReference VALUES_ELEMENT Literal "">\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""</"" MemberReference PROPERTY_ELEMENT Literal "">\n"" write StatementExpression MethodInvocation writer close CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""failed to store property state: "" MethodInvocation state getParentUUID Literal ""/"" MethodInvocation state getName StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected destroy FormalParameter ReferenceType NodeState state ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation state getUUID LocalVariableDeclaration ReferenceType String VariableDeclarator nodeFilePath MethodInvocation MemberReference uuid buildNodeFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator nodeFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference nodeFilePath TryStatement IfStatement MethodInvocation nodeFile exists BlockStatement StatementExpression MethodInvocation nodeFile Literal true delete End CatchClause CatchClauseParameter FileSystemException fse LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to delete node state: "" MemberReference uuid StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference fse MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected destroy FormalParameter ReferenceType PropertyState state ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation state getValues IfStatement BinaryOperation != MemberReference values Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator val MemberReference ArraySelector MemberReference i values IfStatement BinaryOperation != MemberReference val Literal null BlockStatement IfStatement BinaryOperation == MethodInvocation val getType MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration ReferenceType BLOBFileValue VariableDeclarator blobVal Cast ReferenceType BLOBFileValue MethodInvocation val internalValue StatementExpression MethodInvocation blobVal Literal true delete End End End End LocalVariableDeclaration ReferenceType String VariableDeclarator propFilePath MethodInvocation MethodInvocation state getParentUUID MethodInvocation state getName buildPropFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator propFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference propFilePath TryStatement IfStatement MethodInvocation propFile exists BlockStatement StatementExpression MethodInvocation propFile Literal true delete End CatchClause CatchClauseParameter FileSystemException fse LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""failed to delete property state: "" MethodInvocation state getParentUUID Literal ""/"" MethodInvocation state getName StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference fse MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized ReferenceType NodeReferences load FormalParameter ReferenceType NodeReferencesId id NoSuchItemStateException ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType Exception VariableDeclarator e Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation id getUUID LocalVariableDeclaration ReferenceType String VariableDeclarator refsFilePath MethodInvocation MemberReference uuid buildNodeReferencesFilePath TryStatement IfStatement MethodInvocation ! itemStateFS MemberReference refsFilePath isFile BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException MemberReference uuid End LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation itemStateFS MemberReference refsFilePath getInputStream TryStatement LocalVariableDeclaration ReferenceType DOMWalker VariableDeclarator walker ClassCreator ReferenceType DOMWalker MemberReference in LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs ClassCreator ReferenceType NodeReferences MemberReference id StatementExpression MethodInvocation MemberReference walker MemberReference refs readState ReturnStatement MemberReference refs StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException ioe StatementExpression Assignment MemberReference e MemberReference ioe = CatchClause CatchClauseParameter FileSystemException fse StatementExpression Assignment MemberReference e MemberReference fse = LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to load references: "" MemberReference uuid StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected store FormalParameter ReferenceType NodeReferences refs ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation refs getUUID LocalVariableDeclaration ReferenceType String VariableDeclarator refsFilePath MethodInvocation MemberReference uuid buildNodeReferencesFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator refsFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference refsFilePath TryStatement StatementExpression MethodInvocation refsFile makeParentDirs LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator os MethodInvocation refsFile getOutputStream LocalVariableDeclaration ReferenceType BufferedWriter VariableDeclarator writer Literal null TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator encoding MemberReference DEFAULT_ENCODING TryStatement StatementExpression Assignment MemberReference writer ClassCreator ReferenceType BufferedWriter ClassCreator ReferenceType OutputStreamWriter MemberReference os MemberReference encoding = CatchClause CatchClauseParameter UnsupportedEncodingException e LocalVariableDeclaration ReferenceType OutputStreamWriter VariableDeclarator osw ClassCreator ReferenceType OutputStreamWriter MemberReference os StatementExpression Assignment MemberReference encoding MethodInvocation osw getEncoding = StatementExpression Assignment MemberReference writer ClassCreator ReferenceType BufferedWriter MemberReference osw = StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""<?xml version=\""1.0\"" encoding=\"""" MemberReference encoding Literal ""\""?>\n"" write StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<"" MemberReference NODEREFERENCES_ELEMENT Literal "" "" MemberReference TARGETID_ATTRIBUTE Literal ""=\"""" MethodInvocation refs getTargetId Literal ""\"">\n"" write LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation refs MethodInvocation iterator getReferences WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator propId Cast ReferenceType PropertyId MethodInvocation iter next StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\t<"" MemberReference NODEREFERENCE_ELEMENT Literal "" "" MemberReference PROPERTYID_ATTRIBUTE Literal ""=\"""" MemberReference propId Literal ""\""/>\n"" write End StatementExpression MethodInvocation writer BinaryOperation + BinaryOperation + Literal ""</"" MemberReference NODEREFERENCES_ELEMENT Literal "">\n"" write StatementExpression MethodInvocation writer close CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to store references: "" MemberReference uuid StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference e MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected destroy FormalParameter ReferenceType NodeReferences refs ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation refs getUUID LocalVariableDeclaration ReferenceType String VariableDeclarator refsFilePath MethodInvocation MemberReference uuid buildNodeReferencesFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator refsFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference refsFilePath TryStatement IfStatement MethodInvocation refsFile exists BlockStatement StatementExpression MethodInvocation refsFile Literal true delete End CatchClause CatchClauseParameter FileSystemException fse LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to delete references: "" MemberReference uuid StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference fse MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized BasicType boolean exists FormalParameter ReferenceType NodeId id ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator nodeFilePath MethodInvocation MethodInvocation id getUUID buildNodeFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator nodeFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference nodeFilePath ReturnStatement MethodInvocation nodeFile exists CatchClause CatchClauseParameter FileSystemException fse LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to check existence of item state: "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference fse MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized BasicType boolean exists FormalParameter ReferenceType PropertyId id ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator propFilePath MethodInvocation MethodInvocation id getParentUUID MethodInvocation id getName buildPropFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator propFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference propFilePath ReturnStatement MethodInvocation propFile exists CatchClause CatchClauseParameter FileSystemException fse LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to check existence of item state: "" MemberReference id StatementExpression MethodInvocation log MemberReference msg MemberReference fse error ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference fse MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public synchronized BasicType boolean exists FormalParameter ReferenceType NodeReferencesId id ItemStateException IfStatement MemberReference ! initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""not initialized"" End TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator uuid MethodInvocation id getUUID LocalVariableDeclaration ReferenceType String VariableDeclarator refsFilePath MethodInvocation MemberReference uuid buildNodeReferencesFilePath LocalVariableDeclaration ReferenceType FileSystemResource VariableDeclarator refsFile ClassCreator ReferenceType FileSystemResource MemberReference itemStateFS MemberReference refsFilePath ReturnStatement MethodInvocation refsFile exists CatchClause CatchClauseParameter FileSystemException fse LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""failed to check existence of references: "" MemberReference id StatementExpression MethodInvocation log MemberReference msg debug ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference msg MemberReference fse ReferenceType AbstractPersistenceManager",0
732,732,,1
733,733,,0
315,315,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.xml Import org.apache.log4j.Logger ClassDeclaration Modifier public /**
 * <code>Namespace</code>
 */ Namespace FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType Namespace getLogger FieldDeclaration Modifier public final static ReferenceType Namespace VariableDeclarator EMPTY_NAMESPACE MethodInvocation Namespace Literal """" Literal """" getNamespace FieldDeclaration Modifier private final ReferenceType String VariableDeclarator prefix FieldDeclaration Modifier private final ReferenceType String VariableDeclarator uri ConstructorDeclaration Modifier private Namespace FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri StatementExpression Assignment This MemberReference prefix MemberReference prefix = StatementExpression Assignment This MemberReference uri MemberReference uri = MethodDeclaration Modifier public ReferenceType String getPrefix ReturnStatement MemberReference prefix MethodDeclaration Modifier public ReferenceType String getURI ReturnStatement MemberReference uri MethodDeclaration Modifier public BasicType boolean isSame FormalParameter ReferenceType String namespaceURI ReturnStatement MethodInvocation uri MemberReference namespaceURI equals MethodDeclaration Modifier public BasicType int hashCode ReturnStatement MethodInvocation uri hashCode MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj This BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType Namespace BlockStatement ReturnStatement MethodInvocation uri Cast ReferenceType Namespace MemberReference obj equals End ReturnStatement Literal false MethodDeclaration Modifier public static ReferenceType Namespace getNamespace FormalParameter ReferenceType String prefix FormalParameter ReferenceType String uri IfStatement BinaryOperation == MemberReference prefix Literal null BlockStatement StatementExpression Assignment MemberReference prefix Literal """" = End IfStatement BinaryOperation == MemberReference uri Literal null BlockStatement StatementExpression Assignment MemberReference uri Literal """" = End ReturnStatement ClassCreator ReferenceType Namespace MemberReference prefix MemberReference uri MethodDeclaration Modifier public static ReferenceType Namespace getNamespace FormalParameter ReferenceType String uri ReturnStatement MethodInvocation Literal """" MemberReference uri getNamespace",1
325,325,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version Import javax.jcr.RepositoryException Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory InterfaceDeclaration Modifier public /**
 * This Interface defines the version selector that needs to provide a version,
 * given some hints and a version history
 */ VersionSelector MethodDeclaration /**
     * Selects a version of the given version history. If this VersionSelector
     * is unable to select one, it can return <code>null</code>.
     *
     * @param versionHistory
     * @return A version or <code>null</code>.
     * @throws RepositoryException if an error occurrs.
     */ ReferenceType Version select FormalParameter ReferenceType VersionHistory versionHistory RepositoryException",0
357,357,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.lock Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.xml.DomUtil Import org.apache.jackrabbit.webdav.xml.Namespace Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.w3c.dom.Document Import org.w3c.dom.Element Import java.util.HashMap Import java.util.Map ClassDeclaration Modifier public /**
 * The <code>Type</code> class encapsulates the lock type as defined by RFC 2518.
 */ Type FieldDeclaration Modifier private static ReferenceType Map VariableDeclarator types ClassCreator ReferenceType HashMap FieldDeclaration Modifier public final static ReferenceType Type VariableDeclarator WRITE MethodInvocation Type MemberReference DavConstants XML_WRITE MemberReference DavConstants NAMESPACE create FieldDeclaration Modifier private final ReferenceType String VariableDeclarator localName FieldDeclaration Modifier private final ReferenceType Namespace VariableDeclarator namespace ConstructorDeclaration Modifier private /**
     * Private constructor.
     *
     * @param name
     * @param namespace
     */ Type FormalParameter ReferenceType String name FormalParameter ReferenceType Namespace namespace StatementExpression Assignment This MemberReference localName MemberReference name = StatementExpression Assignment This MemberReference namespace MemberReference namespace = MethodDeclaration /**
     * Returns the Xml representation of this lock <code>Type</code>.
     *
     * @return Xml representation
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document LocalVariableDeclaration ReferenceType Element VariableDeclarator lockType MethodInvocation DomUtil MemberReference document MemberReference DavConstants XML_LOCKTYPE MemberReference DavConstants NAMESPACE createElement StatementExpression MethodInvocation DomUtil MemberReference lockType MemberReference localName MemberReference namespace addChildElement ReturnStatement MemberReference lockType MethodDeclaration /**
     * Returns <code>true</code> if this Type is equal to the given one.
     *
     * @param obj
     * @return
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType Type BlockStatement LocalVariableDeclaration ReferenceType Type VariableDeclarator other Cast ReferenceType Type MemberReference obj ReturnStatement BinaryOperation && MethodInvocation localName MemberReference other localName equals MethodInvocation namespace MemberReference other namespace equals End ReturnStatement Literal false MethodDeclaration /**
     * Create a <code>Type</code> object from the given Xml element.
     *
     * @param lockType
     * @return <code>Type</code> object.
     */ Modifier public static ReferenceType Type createFromXml FormalParameter ReferenceType Element lockType IfStatement BinaryOperation && BinaryOperation != MemberReference lockType Literal null MethodInvocation DavConstants.XML_LOCKTYPE MethodInvocation lockType getLocalName equals BlockStatement StatementExpression Assignment MemberReference lockType MethodInvocation DomUtil MemberReference lockType getFirstChildElement = End IfStatement BinaryOperation == MemberReference lockType Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""'null' is not valid lock type entry."" End LocalVariableDeclaration ReferenceType Namespace VariableDeclarator namespace MethodInvocation Namespace MethodInvocation lockType getPrefix MethodInvocation lockType getNamespaceURI getNamespace ReturnStatement MethodInvocation MethodInvocation lockType getLocalName MemberReference namespace create MethodDeclaration /**
     * Create a <code>Type</code> object from the given localName and namespace.
     *
     * @param localName
     * @param namespace
     * @return <code>Type</code> object.
     */ Modifier public static ReferenceType Type create FormalParameter ReferenceType String localName FormalParameter ReferenceType Namespace namespace LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation DomUtil MemberReference localName MemberReference namespace getQualifiedName IfStatement MethodInvocation types MemberReference key containsKey BlockStatement ReturnStatement Cast ReferenceType Type MethodInvocation types MemberReference key get BlockStatement LocalVariableDeclaration ReferenceType Type VariableDeclarator type ClassCreator ReferenceType Type MemberReference localName MemberReference namespace StatementExpression MethodInvocation types MemberReference key MemberReference type put ReturnStatement MemberReference type End ReferenceType XmlSerializable",0
803,803,,1
97,97,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Item Import javax.jcr.Session Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Refresh the <code>Item</code> if specified or the <code>Session</code> to
 * reflect the current saved state.
 */ Refresh FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType Refresh getLog FieldDeclaration /** keep changes key */ Modifier private ReferenceType String VariableDeclarator keepChangesKey Literal ""keepChanges"" FieldDeclaration /** path to the node to refresh key */ Modifier private ReferenceType String VariableDeclarator pathKey Literal ""path"" MethodDeclaration /**
     * @return the keep changes key
     */ Modifier public ReferenceType String getKeepChangesKey ReturnStatement MemberReference keepChangesKey MethodDeclaration /**
     * @param keepChangesKey
     *        the keep changes key to set
     */ Modifier public setKeepChangesKey FormalParameter ReferenceType String keepChangesKey StatementExpression Assignment This MemberReference keepChangesKey MemberReference keepChangesKey = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration BasicType boolean VariableDeclarator keepChanges MethodInvocation Boolean MethodInvocation booleanValue Cast ReferenceType String MethodInvocation ctx This MemberReference keepChangesKey get valueOf LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference pathKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""refreshing. from node "" MemberReference path debug End IfStatement BinaryOperation == MemberReference path Literal null BlockStatement LocalVariableDeclaration ReferenceType Session VariableDeclarator s MethodInvocation CommandHelper MemberReference ctx getSession StatementExpression MethodInvocation s MemberReference keepChanges refresh BlockStatement LocalVariableDeclaration ReferenceType Item VariableDeclarator i MethodInvocation CommandHelper MemberReference ctx MemberReference path getItem StatementExpression MethodInvocation i MemberReference keepChanges refresh End ReturnStatement Literal false MethodDeclaration /**
     * @return the path key
     */ Modifier public ReferenceType String getPathKey ReturnStatement MemberReference pathKey MethodDeclaration /**
     * @param pathKey
     *        the path key to set
     */ Modifier public setPathKey FormalParameter ReferenceType String pathKey StatementExpression Assignment This MemberReference pathKey MemberReference pathKey = ReferenceType Command",0
263,263,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server.io Import org.apache.log4j.Logger Import javax.jcr.Node Import javax.jcr.RepositoryException Import javax.jcr.ImportUUIDBehavior Import javax.jcr.Session Import java.io.InputStream Import java.io.IOException Import java.io.OutputStream Import org.apache.jackrabbit.JcrConstants ClassDeclaration Modifier public /**
 * <code>XmlHandler</code> imports xml files and exports nodes that have
 * the proper {@link #XML_MIMETYPE} defined with their content. The export is
 * performed by running a {@link Session#exportDocumentView(String, OutputStream, boolean, boolean)
 * document view export} for the content of the export root defined with the
 * specified {@link ExportContext}.<br>
 * Please note that this handler is not suited for a generic system or document
 * view import/export of {@link Node}s because an extra root node is always
 * created during import and expected during export, respectively.
 */ XmlHandler FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType XmlHandler getLogger FieldDeclaration /**
     * the xml mimetype
     */ Modifier public final static ReferenceType String VariableDeclarator XML_MIMETYPE Literal ""text/xml"" ConstructorDeclaration Modifier public /**
     * Creates a new <code>XmlHandler</code> with default nodetype definitions:<br>
     * <ul>
     * <li>Nodetype for Collection: {@link JcrConstants#NT_UNSTRUCTURED nt:unstructured}</li>
     * <li>Nodetype for Non-Collection: {@link JcrConstants#NT_FILE nt:file}</li>
     * <li>Nodetype for Non-Collection content: {@link JcrConstants#NT_UNSTRUCTURED nt:unstructured}</li>
     * </ul>
     *
     * @param ioManager
     */ XmlHandler FormalParameter ReferenceType IOManager ioManager StatementExpression SuperConstructorInvocation MemberReference ioManager MemberReference JcrConstants NT_UNSTRUCTURED MemberReference JcrConstants NT_FILE MemberReference JcrConstants NT_UNSTRUCTURED ConstructorDeclaration Modifier public /**
     * Creates a new <code>XmlHandler</code>
     *
     * @param ioManager
     * @param collectionNodetype
     * @param defaultNodetype
     * @param contentNodetype
     */ XmlHandler FormalParameter ReferenceType IOManager ioManager FormalParameter ReferenceType String collectionNodetype FormalParameter ReferenceType String defaultNodetype FormalParameter ReferenceType String contentNodetype StatementExpression SuperConstructorInvocation MemberReference ioManager MemberReference collectionNodetype MemberReference defaultNodetype MemberReference contentNodetype MethodDeclaration /**
     * @see IOHandler#canImport(ImportContext, boolean)
     */ Modifier public BasicType boolean canImport FormalParameter ReferenceType ImportContext context FormalParameter BasicType boolean isCollection IfStatement BinaryOperation || BinaryOperation == MemberReference context Literal null MethodInvocation context isCompleted BlockStatement ReturnStatement Literal false End LocalVariableDeclaration BasicType boolean VariableDeclarator isXmlMimeType MethodInvocation XML_MIMETYPE MethodInvocation context getMimeType equals ReturnStatement BinaryOperation && BinaryOperation && MemberReference isXmlMimeType MethodInvocation context hasStream SuperMethodInvocation MemberReference context MemberReference isCollection canImport MethodDeclaration /**
     * @see DefaultHandler#importData(ImportContext, boolean, Node)
     */ Modifier protected BasicType boolean importData FormalParameter ReferenceType ImportContext context FormalParameter BasicType boolean isCollection FormalParameter ReferenceType Node contentNode IOException RepositoryException LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation context getInputStream LocalVariableDeclaration BasicType int VariableDeclarator uuidBehavior TernaryExpression MemberReference isCollection MemberReference ImportUUIDBehavior IMPORT_UUID_COLLISION_REMOVE_EXISTING MemberReference ImportUUIDBehavior IMPORT_UUID_CREATE_NEW TryStatement StatementExpression MethodInvocation contentNode MethodInvocation MethodInvocation contentNode getPath MemberReference in MemberReference uuidBehavior importXML getSession StatementExpression MethodInvocation in close ReturnStatement Literal true MethodDeclaration /**
     * @see DefaultHandler#importProperties(ImportContext, boolean, Node)
     */ Modifier protected BasicType boolean importProperties FormalParameter ReferenceType ImportContext context FormalParameter BasicType boolean isCollection FormalParameter ReferenceType Node contentNode LocalVariableDeclaration BasicType boolean VariableDeclarator success SuperMethodInvocation MemberReference context MemberReference isCollection MemberReference contentNode importProperties IfStatement MemberReference success BlockStatement TryStatement StatementExpression MethodInvocation contentNode MemberReference JcrConstants JCR_ENCODING Literal ""UTF-8"" setProperty CatchClause CatchClauseParameter RepositoryException e End ReturnStatement MemberReference success MethodDeclaration /**
     * @see IOHandler#canExport(ExportContext, boolean)
     */ Modifier public BasicType boolean canExport FormalParameter ReferenceType ExportContext context FormalParameter BasicType boolean isCollection IfStatement SuperMethodInvocation MemberReference context MemberReference isCollection canExport BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator mimeType Literal null TryStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator contentNode MethodInvocation MemberReference context MemberReference isCollection getContentNode IfStatement MethodInvocation contentNode MemberReference JcrConstants JCR_MIMETYPE hasProperty BlockStatement StatementExpression Assignment MemberReference mimeType MethodInvocation contentNode MethodInvocation getString MemberReference JcrConstants JCR_MIMETYPE getProperty = BlockStatement StatementExpression Assignment MemberReference mimeType MethodInvocation IOUtil.MIME_RESOLVER MethodInvocation context MethodInvocation getName getExportRoot getMimeType = End CatchClause CatchClauseParameter RepositoryException e ReturnStatement MethodInvocation XML_MIMETYPE MemberReference mimeType equals End ReturnStatement Literal false MethodDeclaration /**
     * @see DefaultHandler#exportProperties(ExportContext, boolean, Node)
     */ Modifier protected exportData FormalParameter ReferenceType ExportContext context FormalParameter BasicType boolean isCollection FormalParameter ReferenceType Node contentNode IOException RepositoryException IfStatement MethodInvocation contentNode MethodInvocation hasNext getNodes BlockStatement StatementExpression Assignment MemberReference contentNode MethodInvocation contentNode MethodInvocation nextNode getNodes = End LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out MethodInvocation context getOutputStream StatementExpression MethodInvocation contentNode MethodInvocation MethodInvocation contentNode getPath MemberReference out Literal true Literal false exportDocumentView getSession ReferenceType DefaultHandler",1
590,590,,0
216,216,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server Import javax.jcr.Repository Import javax.jcr.Session Import javax.jcr.LoginException Import javax.jcr.Credentials Import javax.jcr.RepositoryException Import javax.servlet.http.HttpServletRequest Import javax.servlet.ServletException ClassDeclaration Modifier public /**
 * This Class implements a default session provider uses a credentials provider.
 */ SessionProviderImpl FieldDeclaration /**
     * the credentials provider
     */ Modifier private ReferenceType CredentialsProvider VariableDeclarator cp ConstructorDeclaration Modifier public /**
     * Creates a new SessionProvider
     * @param cp
     */ SessionProviderImpl FormalParameter ReferenceType CredentialsProvider cp StatementExpression Assignment This MemberReference cp MemberReference cp = MethodDeclaration /**
     * {@inheritDoc }
     */ Modifier public ReferenceType Session getSession FormalParameter ReferenceType HttpServletRequest request FormalParameter ReferenceType Repository repository FormalParameter ReferenceType String workspace LoginException RepositoryException ServletException LocalVariableDeclaration ReferenceType Credentials VariableDeclarator creds MethodInvocation cp MemberReference request getCredentials ReturnStatement MethodInvocation repository MemberReference creds MemberReference workspace login MethodDeclaration /**
     * {@inheritDoc }
     */ Modifier public releaseSession FormalParameter ReferenceType Session session StatementExpression MethodInvocation session logout ReferenceType SessionProvider",1
383,383,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.remote Import java.rmi.Remote Import java.rmi.RemoteException Import javax.jcr.RepositoryException Import javax.jcr.Value InterfaceDeclaration Modifier public /**
 * Remote version of the JCR {@link javax.jcr.query.Row Row} interface.
 * Used by the  {@link org.apache.jackrabbit.rmi.server.ServerRow ServerRow}
 * and {@link org.apache.jackrabbit.rmi.client.ClientRow ClientRow}
 * adapter base classes to provide transparent RMI access to remote items.
 * <p>
 * RMI errors are signalled with RemoteExceptions.
 *
 * @author Philipp Koch
 * @see javax.jcr.query.Row
 * @see org.apache.jackrabbit.rmi.client.ClientRow
 * @see org.apache.jackrabbit.rmi.server.ServerRow
 */ RemoteRow MethodDeclaration /**
     * @see javax.jcr.query.Row#getValues()
     *
     * @return row values
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType Value getValues RepositoryException RemoteException MethodDeclaration /**
     * @see javax.jcr.query.Row#getValue(String)
     *
     * @param propertyName property name
     * @return identified value
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType Value getValue FormalParameter ReferenceType String propertyName RepositoryException RemoteException ReferenceType Remote",1
579,579,,0
103,103,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.version ClassDeclaration Modifier abstract /**
 * Implements a <code>InternalFreeze</code>
 */ InternalFreezeImpl FieldDeclaration /**
     * The parent item
     */ Modifier private final ReferenceType InternalVersionItem VariableDeclarator parent ConstructorDeclaration Modifier protected /**
     * Creates a new <code>InternalFreezeImpl</code>
     *
     * @param vMgr
     * @param parent
     */ InternalFreezeImpl FormalParameter ReferenceType AbstractVersionManager vMgr FormalParameter ReferenceType InternalVersionItem parent StatementExpression SuperConstructorInvocation MemberReference vMgr StatementExpression Assignment This MemberReference parent MemberReference parent = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType InternalVersionItem getParent ReturnStatement MemberReference parent ReferenceType InternalVersionItemImpl ReferenceType InternalFreeze",0
240,240,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.orm Import java.io.Serializable Import org.apache.jackrabbit.core.state.NodeState.ChildNodeEntry ClassDeclaration Modifier public /**
 * <p>This class represents a child node entry row in the ORM object graph.</p>
 */ ORMChildNodeEntry FieldDeclaration Modifier private ReferenceType String VariableDeclarator uuid FieldDeclaration Modifier private ReferenceType String VariableDeclarator parentUUID FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator sameNameIndex FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator dbId FieldDeclaration Modifier private ReferenceType ORMNodeState VariableDeclarator parent FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator childrenIndex ConstructorDeclaration Modifier public ORMChildNodeEntry ConstructorDeclaration Modifier public ORMChildNodeEntry FormalParameter ReferenceType ORMNodeState parent FormalParameter ReferenceType ChildNodeEntry childNodeEntry FormalParameter ReferenceType String parentUUID FormalParameter BasicType int childrenIndex StatementExpression Assignment This MemberReference parent MemberReference parent = StatementExpression Assignment MemberReference uuid MethodInvocation childNodeEntry getUUID = StatementExpression Assignment This MemberReference parentUUID MemberReference parentUUID = StatementExpression Assignment MemberReference name MethodInvocation childNodeEntry MethodInvocation toString getName = StatementExpression Assignment MemberReference sameNameIndex ClassCreator ReferenceType Integer MethodInvocation childNodeEntry getIndex = StatementExpression Assignment This MemberReference childrenIndex ClassCreator ReferenceType Integer MemberReference childrenIndex = MethodDeclaration Modifier public setUuid FormalParameter ReferenceType String uuid StatementExpression Assignment This MemberReference uuid MemberReference uuid = MethodDeclaration Modifier public setParentUUID FormalParameter ReferenceType String parentUUID StatementExpression Assignment This MemberReference parentUUID MemberReference parentUUID = MethodDeclaration Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration Modifier public setSameNameIndex FormalParameter ReferenceType Integer sameNameIndex StatementExpression Assignment This MemberReference sameNameIndex MemberReference sameNameIndex = MethodDeclaration Modifier public setDbId FormalParameter ReferenceType Integer dbId StatementExpression Assignment This MemberReference dbId MemberReference dbId = MethodDeclaration Modifier public setParent FormalParameter ReferenceType ORMNodeState parent StatementExpression Assignment This MemberReference parent MemberReference parent = MethodDeclaration Modifier public setChildrenIndex FormalParameter ReferenceType Integer childrenIndex StatementExpression Assignment This MemberReference childrenIndex MemberReference childrenIndex = MethodDeclaration Modifier public ReferenceType String getUuid ReturnStatement MemberReference uuid MethodDeclaration Modifier public ReferenceType String getParentUUID ReturnStatement MemberReference parentUUID MethodDeclaration Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration Modifier public ReferenceType Integer getSameNameIndex ReturnStatement MemberReference sameNameIndex MethodDeclaration Modifier public ReferenceType Integer getDbId ReturnStatement MemberReference dbId MethodDeclaration Modifier public ReferenceType ORMNodeState getParent ReturnStatement MemberReference parent MethodDeclaration Modifier public ReferenceType Integer getChildrenIndex ReturnStatement MemberReference childrenIndex MethodDeclaration Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType ORMChildNodeEntry BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType ORMChildNodeEntry VariableDeclarator right Cast ReferenceType ORMChildNodeEntry MemberReference obj IfStatement BinaryOperation && BinaryOperation && BinaryOperation && MethodInvocation MethodInvocation MethodInvocation right getUuid equals getUuid MethodInvocation MethodInvocation MethodInvocation right getName equals getName MethodInvocation getSameNameIndex MethodInvocation getChildrenIndex BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement Literal false End MethodDeclaration Modifier public BasicType int compareTo FormalParameter ReferenceType Object obj IfStatement MethodInvocation MemberReference obj equals BlockStatement ReturnStatement Literal 0 End LocalVariableDeclaration ReferenceType ORMChildNodeEntry VariableDeclarator right Cast ReferenceType ORMChildNodeEntry MemberReference obj ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation getChildrenIndex MethodInvocation getUuid MethodInvocation getName MethodInvocation getSameNameIndex MethodDeclaration Modifier public BasicType int hashCode ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation getChildrenIndex MethodInvocation getUuid MethodInvocation getName MethodInvocation getSameNameIndex ReferenceType Serializable ReferenceType Comparable",1
268,268,"CompilationUnit PackageDeclaration org.apache.jackrabbit.server.io Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.io.OutputContext Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.DavResource Import javax.jcr.Item Import java.util.Map Import java.util.HashMap Import java.util.Iterator Import java.util.Date Import java.io.File Import java.io.OutputStream Import java.io.FileInputStream Import java.io.IOException Import java.io.FileOutputStream ClassDeclaration Modifier public /**
 * <code>ExportContextImpl</code> implements an <code>ExportContext</code> that
 * wraps around the specified OutputContext as it was passed to
 * {@link DavResource#spool(OutputContext)}. If a stream is provided a temporary
 * file is created, which is deleted as soon as {@link #informCompleted(boolean)}
 * is called on this context. Note however, that the properties and the stream
 * are written to the  <code>OutputContext</code> but upon successful completion.
 *
 * @see #informCompleted(boolean)
 */ ExportContextImpl FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType ExportContextImpl getLogger FieldDeclaration Modifier private final ReferenceType Map VariableDeclarator properties ClassCreator ReferenceType HashMap FieldDeclaration Modifier private final ReferenceType OutputContext VariableDeclarator outputCtx FieldDeclaration Modifier private ReferenceType File VariableDeclarator outFile FieldDeclaration Modifier private ReferenceType OutputStream VariableDeclarator outStream ConstructorDeclaration Modifier public ExportContextImpl FormalParameter ReferenceType Item exportRoot FormalParameter ReferenceType OutputContext outputCtx IOException StatementExpression SuperConstructorInvocation MemberReference exportRoot TernaryExpression BinaryOperation != MemberReference outputCtx Literal null MethodInvocation outputCtx hasStream Literal false Literal null StatementExpression Assignment This MemberReference outputCtx MemberReference outputCtx = IfStatement MethodInvocation hasStream BlockStatement StatementExpression Assignment MemberReference outFile MethodInvocation File Literal ""__exportcontext"" Literal ""tmp"" createTempFile = End MethodDeclaration /**
     * Returns a new <code>OutputStream</code> to the temporary file or
     * <code>null</code> if this context provides no stream.
     *
     * @see ExportContext#getOutputStream()
     * @see #informCompleted(boolean)
     */ Modifier public ReferenceType OutputStream getOutputStream StatementExpression MethodInvocation checkCompleted IfStatement MethodInvocation hasStream BlockStatement TryStatement IfStatement BinaryOperation != MemberReference outStream Literal null BlockStatement StatementExpression MethodInvocation outStream close End StatementExpression Assignment MemberReference outStream ClassCreator ReferenceType FileOutputStream MemberReference outFile = ReturnStatement MemberReference outStream CatchClause CatchClauseParameter IOException e End ReturnStatement Literal null MethodDeclaration /**
     * @see ExportContext#setContentLanguage(String)
     */ Modifier public setContentLanguage FormalParameter ReferenceType String contentLanguage StatementExpression MethodInvocation properties MemberReference DavConstants HEADER_CONTENT_LANGUAGE MemberReference contentLanguage put MethodDeclaration /**
     * @see ExportContext#setContentLength(long)
     */ Modifier public setContentLength FormalParameter BasicType long contentLength StatementExpression MethodInvocation properties MemberReference DavConstants HEADER_CONTENT_LENGTH BinaryOperation + MemberReference contentLength Literal """" put MethodDeclaration /**
     * @see ExportContext#setContentType(String,String)
     */ Modifier public setContentType FormalParameter ReferenceType String mimeType FormalParameter ReferenceType String encoding StatementExpression MethodInvocation properties MemberReference DavConstants HEADER_CONTENT_TYPE MethodInvocation IOUtil MemberReference mimeType MemberReference encoding buildContentType put MethodDeclaration /**
     * Does nothing since the wrapped output context does not understand
     * creation time
     *
     * @param creationTime
     * @see ExportContext#setCreationTime(long)
     */ Modifier public setCreationTime FormalParameter BasicType long creationTime MethodDeclaration /**
     * @see ExportContext#setModificationTime(long)
     */ Modifier public setModificationTime FormalParameter BasicType long modificationTime IfStatement BinaryOperation <= MemberReference modificationTime MemberReference IOUtil UNDEFINED_TIME BlockStatement StatementExpression Assignment MemberReference modificationTime ClassCreator MethodInvocation getTime ReferenceType Date = End LocalVariableDeclaration ReferenceType String VariableDeclarator lastMod MethodInvocation IOUtil MemberReference modificationTime getLastModified StatementExpression MethodInvocation properties MemberReference DavConstants HEADER_LAST_MODIFIED MemberReference lastMod put MethodDeclaration /**
     * @see ExportContext#setETag(String)
     */ Modifier public setETag FormalParameter ReferenceType String etag StatementExpression MethodInvocation properties MemberReference DavConstants HEADER_ETAG MemberReference etag put MethodDeclaration /**
     * @see ExportContext#setProperty(Object, Object) 
     */ Modifier public setProperty FormalParameter ReferenceType Object propertyName FormalParameter ReferenceType Object propertyValue StatementExpression MethodInvocation properties MemberReference propertyName MemberReference propertyValue put MethodDeclaration /**
     * If success is true, the properties set before an the output stream are
     * written to the wrapped <code>OutputContext</code>.
     *
     * @param success
     * @see ExportContext#informCompleted(boolean)
     */ Modifier public informCompleted FormalParameter BasicType boolean success StatementExpression MethodInvocation checkCompleted StatementExpression Assignment MemberReference completed Literal true = IfStatement BinaryOperation != MemberReference outStream Literal null BlockStatement TryStatement StatementExpression MethodInvocation outStream close CatchClause CatchClauseParameter IOException e End IfStatement MemberReference success BlockStatement IfStatement BinaryOperation != MemberReference outputCtx Literal null BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator hasContentLength Literal false LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation properties MethodInvocation iterator keySet WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation it MethodInvocation toString next LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation properties MethodInvocation toString MemberReference name get StatementExpression MethodInvocation outputCtx MemberReference name MemberReference value setProperty StatementExpression Assignment MemberReference hasContentLength MethodInvocation DavConstants.HEADER_CONTENT_LENGTH MemberReference name equals = End IfStatement BinaryOperation && MethodInvocation outputCtx hasStream BinaryOperation != MemberReference outFile Literal null BlockStatement LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out MethodInvocation outputCtx getOutputStream TryStatement IfStatement MemberReference ! hasContentLength BlockStatement StatementExpression MethodInvocation outputCtx MethodInvocation outFile length setContentLength End LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator in ClassCreator ReferenceType FileInputStream MemberReference outFile StatementExpression MethodInvocation IOUtil MemberReference in MemberReference out spool CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation log MemberReference e error End End End IfStatement BinaryOperation != MemberReference outFile Literal null BlockStatement StatementExpression MethodInvocation outFile delete End ReferenceType AbstractExportContext",1
38,38,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.fs.local Import java.io.File Import java.io.FileInputStream Import java.io.FileOutputStream Import java.io.IOException ClassDeclaration Modifier public final /**
 * Static utility methods for recursively copying and deleting files and
 * directories.
 */ FileUtil ConstructorDeclaration Modifier private /**
     * private constructor
     */ FileUtil MethodDeclaration /**
     * Recursively copies the given file or directory to the
     * given destination.
     *
     * @param src source file or directory
     * @param dest destination file or directory
     * @throws IOException if the file or directory cannot be copied
     */ Modifier public static copy FormalParameter ReferenceType File src FormalParameter ReferenceType File dest IOException IfStatement MethodInvocation ! src canRead BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + MethodInvocation src getPath Literal "" can't be read from."" End IfStatement MethodInvocation src isDirectory BlockStatement IfStatement MethodInvocation dest isFile BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""can't copy a folder to a file"" End IfStatement MethodInvocation ! dest exists BlockStatement StatementExpression MethodInvocation dest mkdirs End IfStatement MethodInvocation ! dest canWrite BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""can't write to "" MethodInvocation dest getPath End LocalVariableDeclaration ReferenceType File VariableDeclarator children MethodInvocation src listFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference children length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i children ClassCreator ReferenceType File MemberReference dest MemberReference ArraySelector MemberReference i MethodInvocation getName children copy End BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator destParent IfStatement MethodInvocation dest isDirectory BlockStatement StatementExpression Assignment MemberReference destParent MemberReference dest = StatementExpression Assignment MemberReference dest ClassCreator ReferenceType File MemberReference destParent MethodInvocation src getName = BlockStatement StatementExpression Assignment MemberReference destParent MethodInvocation dest getParentFile = End IfStatement MethodInvocation ! destParent canWrite BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""can't write to "" MethodInvocation destParent getPath End LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fis ClassCreator ReferenceType FileInputStream MemberReference src LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator fos ClassCreator ReferenceType FileOutputStream MemberReference dest LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte Literal 8192 LocalVariableDeclaration BasicType int VariableDeclarator read Literal 0 WhileStatement BinaryOperation > Assignment MemberReference read MethodInvocation fis MemberReference buffer read = Literal 0 BlockStatement StatementExpression MethodInvocation fos MemberReference buffer Literal 0 MemberReference read write End StatementExpression MethodInvocation fis close StatementExpression MethodInvocation fos close End MethodDeclaration /**
     * Recursively deletes the given file or directory.
     *
     * @param f file or directory
     * @throws IOException if the file or directory cannot be deleted
     */ Modifier public static delete FormalParameter ReferenceType File f IOException IfStatement MethodInvocation f isDirectory BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator children MethodInvocation f listFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference children length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i children delete End End IfStatement MethodInvocation ! f delete BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + Literal ""Unable to delete "" MethodInvocation f getPath End",0
271,271,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.xml.XmlSerializable Import org.w3c.dom.Element Import org.w3c.dom.Document Import java.util.Properties Import java.io.IOException ClassDeclaration Modifier public /**
 * <code>DavException</code> extends the {@link Exception} class in order
 * to simplify handling of exceptional situations occuring during processing
 * of WebDAV requests and provides possibility to retrieve an Xml representation
 * of the error.
 */ DavException FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType DavException getLogger FieldDeclaration Modifier private static ReferenceType Properties VariableDeclarator statusPhrases ClassCreator ReferenceType Properties TryStatement StatementExpression MethodInvocation statusPhrases ClassReference MethodInvocation Literal ""statuscode.properties"" getResourceAsStream ReferenceType DavException load CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Failed to load status properties: "" MethodInvocation e getMessage error FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator XML_ERROR Literal ""error"" FieldDeclaration Modifier private BasicType int VariableDeclarator errorCode MemberReference DavServletResponse SC_INTERNAL_SERVER_ERROR ConstructorDeclaration Modifier public /**
     * Create a new <code>DavException</code>.
     *
     * @param errorCode integer specifying any of the status codes defined by
     * {@link DavServletResponse}.
     * @param message Human readable error message.
     */ DavException FormalParameter BasicType int errorCode FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message StatementExpression Assignment This MemberReference errorCode MemberReference errorCode = StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""DavException: ("" MemberReference errorCode Literal "") "" MemberReference message debug ConstructorDeclaration Modifier public /**
     * Create a new <code>DavException</code>.
     *
     * @param errorCode integer specifying any of the status codes defined by
     * {@link DavServletResponse}.
     */ DavException FormalParameter BasicType int errorCode StatementExpression ExplicitConstructorInvocation MemberReference errorCode MethodInvocation statusPhrases MethodInvocation String MemberReference errorCode valueOf getProperty MethodDeclaration /**
     * Return the error code attached to this <code>DavException</code>.
     *
     * @return errorCode
     */ Modifier public BasicType int getErrorCode ReturnStatement MemberReference errorCode MethodDeclaration /**
     * Return the status phrase corresponding to the error code attached to
     * this <code>DavException</code>.
     *
     * @return status phrase corresponding to the error code.
     * @see #getErrorCode()
     */ Modifier public ReferenceType String getStatusPhrase ReturnStatement MethodInvocation MemberReference errorCode getStatusPhrase MethodDeclaration /**
     * Returns the status phrase for the given error code.
     *
     * @param errorCode
     * @return status phrase corresponding to the given error code.
     */ Modifier public static ReferenceType String getStatusPhrase FormalParameter BasicType int errorCode ReturnStatement MethodInvocation statusPhrases BinaryOperation + MemberReference errorCode Literal """" getProperty MethodDeclaration /**
     * @return Always false
     */ Modifier public BasicType boolean hasErrorCondition ReturnStatement Literal false MethodDeclaration /**
     * Returns <code>null</code>
     *
     * @param document
     * @return <code>null</code>
     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
     */ Modifier public ReferenceType Element toXml FormalParameter ReferenceType Document document ReturnStatement Literal null ReferenceType Exception ReferenceType XmlSerializable",1
362,362,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context ClassDeclaration Modifier public /**
 * Describes the given <code>Node</code>.
 */ Describe MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context arg0 Exception ThrowStatement ClassCreator ReferenceType UnsupportedOperationException ReferenceType Command",1
71,71,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.virtual Import org.apache.jackrabbit.core.ItemId Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.nodetype.EffectiveNodeType Import org.apache.jackrabbit.core.nodetype.NodeDef Import org.apache.jackrabbit.core.nodetype.NodeDefId Import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException Import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry Import org.apache.jackrabbit.core.nodetype.PropDef Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.NoSuchItemStateException Import org.apache.jackrabbit.core.state.NodeReferences Import org.apache.jackrabbit.core.state.NodeReferencesId Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.ItemStateReferenceMap Import org.apache.jackrabbit.core.state.ItemStateListener Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.uuid.UUID Import org.apache.log4j.Logger Import javax.jcr.RepositoryException Import java.util.HashSet Import java.util.Iterator ClassDeclaration Modifier public abstract /**
 * This Class implements a virtual item state provider, in order to expose the
 * versions to the version storage.
 */ AbstractVISProvider FieldDeclaration /**
     * the default logger
     */ Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType AbstractVISProvider getLogger FieldDeclaration /**
     * the root node
     */ Modifier private ReferenceType VirtualNodeState VariableDeclarator root Literal null FieldDeclaration /**
     * the root node id
     */ Modifier final protected ReferenceType NodeId VariableDeclarator rootNodeId FieldDeclaration /**
     * the node type registry
     */ Modifier final protected ReferenceType NodeTypeRegistry VariableDeclarator ntReg FieldDeclaration /**
     * the cache node states. key=ItemId, value=ItemState
     */ Modifier private ReferenceType ItemStateReferenceMap VariableDeclarator nodes ClassCreator ReferenceType ItemStateReferenceMap ConstructorDeclaration Modifier public /**
     * Creates an abstract virtual item state provider
     *
     * @param ntReg
     * @param rootNodeId
     */ AbstractVISProvider FormalParameter ReferenceType NodeTypeRegistry ntReg FormalParameter ReferenceType NodeId rootNodeId StatementExpression Assignment This MemberReference ntReg MemberReference ntReg = StatementExpression Assignment This MemberReference rootNodeId MemberReference rootNodeId = MethodDeclaration /**
     * Creates the root node state.
     *
     * @return
     * @throws RepositoryException
     */ Modifier protected abstract ReferenceType VirtualNodeState createRootNodeState RepositoryException MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasItemState FormalParameter ReferenceType ItemId id IfStatement BinaryOperation instanceof MemberReference id ReferenceType NodeId BlockStatement IfStatement MethodInvocation nodes MemberReference id contains BlockStatement ReturnStatement Literal true IfStatement MethodInvocation id MemberReference rootNodeId equals BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement MethodInvocation Cast ReferenceType NodeId MemberReference id internalHasNodeState End End BlockStatement ReturnStatement MethodInvocation Cast ReferenceType PropertyId MemberReference id internalHasPropertyState End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType ItemState getItemState FormalParameter ReferenceType ItemId id NoSuchItemStateException ItemStateException IfStatement BinaryOperation instanceof MemberReference id ReferenceType NodeId BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator s IfStatement MethodInvocation nodes MemberReference id contains BlockStatement StatementExpression Assignment MemberReference s Cast ReferenceType ItemState MethodInvocation nodes MemberReference id get = IfStatement MethodInvocation id MemberReference rootNodeId equals BlockStatement StatementExpression Assignment MemberReference s MethodInvocation getRootState = BlockStatement StatementExpression Assignment MemberReference s MethodInvocation MethodInvocation Cast ReferenceType NodeId MemberReference id internalGetNodeState cache = End End ReturnStatement MemberReference s BlockStatement ReturnStatement MethodInvocation Cast ReferenceType PropertyId MemberReference id internalGetPropertyState End MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeReferences getNodeReferences FormalParameter ReferenceType NodeReferencesId id NoSuchItemStateException ItemStateException ThrowStatement ClassCreator ReferenceType NoSuchItemStateException MethodInvocation id getUUID MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean hasNodeReferences FormalParameter ReferenceType NodeReferencesId id ReturnStatement Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean isVirtualRoot FormalParameter ReferenceType ItemId id ReturnStatement MethodInvocation id MemberReference rootNodeId equals MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType NodeId getVirtualRootId ReturnStatement MemberReference rootNodeId MethodDeclaration /**
     * Returns the root state
     *
     * @return the root state
     */ Modifier public synchronized ReferenceType NodeState getRootState ItemStateException TryStatement IfStatement BinaryOperation == MemberReference root Literal null BlockStatement StatementExpression Assignment MemberReference root MethodInvocation createRootNodeState = End ReturnStatement MemberReference root CatchClause CatchClauseParameter RepositoryException e ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e MethodDeclaration /**
     * Checks if this provide has the node state of the given node id
     *
     * @param id
     * @return
     */ Modifier protected abstract BasicType boolean internalHasNodeState FormalParameter ReferenceType NodeId id MethodDeclaration /**
     * Retrieves the node state with the given node id
     *
     * @param id
     * @return
     * @throws NoSuchItemStateException
     * @throws ItemStateException
     */ Modifier protected abstract ReferenceType VirtualNodeState internalGetNodeState FormalParameter ReferenceType NodeId id NoSuchItemStateException ItemStateException MethodDeclaration /**
     * Checks if this provider has the property state of the given id.
     *
     * @param id
     * @return
     */ Modifier protected BasicType boolean internalHasPropertyState FormalParameter ReferenceType PropertyId id TryStatement LocalVariableDeclaration ReferenceType NodeState VariableDeclarator parent Cast ReferenceType NodeState MethodInvocation ClassCreator ReferenceType NodeId MethodInvocation id getParentUUID getItemState IfStatement BinaryOperation instanceof MemberReference parent ReferenceType VirtualNodeState BlockStatement ReturnStatement MethodInvocation parent MethodInvocation id getName hasPropertyName End CatchClause CatchClauseParameter ItemStateException e ReturnStatement Literal false MethodDeclaration /**
     * Retrieces the property state for the given id
     *
     * @param id
     * @return
     * @throws NoSuchItemStateException
     * @throws ItemStateException
     */ Modifier protected ReferenceType VirtualPropertyState internalGetPropertyState FormalParameter ReferenceType PropertyId id NoSuchItemStateException ItemStateException LocalVariableDeclaration ReferenceType NodeState VariableDeclarator parent Cast ReferenceType NodeState MethodInvocation ClassCreator ReferenceType NodeId MethodInvocation id getParentUUID getItemState IfStatement BinaryOperation instanceof MemberReference parent ReferenceType VirtualNodeState BlockStatement ReturnStatement Cast ReferenceType VirtualNodeState MemberReference parent End ThrowStatement ClassCreator ReferenceType NoSuchItemStateException MethodInvocation id toString MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType VirtualPropertyState createPropertyState FormalParameter ReferenceType VirtualNodeState parent FormalParameter ReferenceType QName name FormalParameter BasicType int type FormalParameter BasicType boolean multiValued RepositoryException LocalVariableDeclaration ReferenceType PropDef VariableDeclarator def MethodInvocation MemberReference parent MemberReference name MemberReference type MemberReference multiValued getApplicablePropertyDef LocalVariableDeclaration ReferenceType VirtualPropertyState VariableDeclarator prop ClassCreator ReferenceType VirtualPropertyState MemberReference name MethodInvocation parent getUUID StatementExpression MethodInvocation prop MemberReference type setType StatementExpression MethodInvocation prop MemberReference multiValued setMultiValued StatementExpression MethodInvocation prop MethodInvocation def getId setDefinitionId ReturnStatement MemberReference prop MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType VirtualNodeState createNodeState FormalParameter ReferenceType VirtualNodeState parent FormalParameter ReferenceType QName name FormalParameter ReferenceType String uuid FormalParameter ReferenceType QName nodeTypeName RepositoryException LocalVariableDeclaration ReferenceType NodeDefId VariableDeclarator def TryStatement StatementExpression Assignment MemberReference def MethodInvocation MethodInvocation getId MemberReference parent MemberReference name MemberReference nodeTypeName getApplicableChildNodeDef = CatchClause CatchClauseParameter RepositoryException re LocalVariableDeclaration ReferenceType NodeTypeRegistry VariableDeclarator ntReg MethodInvocation getNodeTypeRegistry LocalVariableDeclaration ReferenceType EffectiveNodeType VariableDeclarator ent MethodInvocation ntReg MemberReference QName NT_UNSTRUCTURED getEffectiveNodeType LocalVariableDeclaration ReferenceType NodeDef VariableDeclarator cnd MethodInvocation ent MemberReference name MemberReference nodeTypeName getApplicableChildNodeDef StatementExpression MethodInvocation ntReg MethodInvocation cnd getId getNodeDef StatementExpression Assignment MemberReference def MethodInvocation cnd getId = LocalVariableDeclaration ReferenceType VirtualNodeState VariableDeclarator state IfStatement BinaryOperation == MemberReference uuid Literal null BlockStatement StatementExpression Assignment MemberReference uuid MethodInvocation UUID MethodInvocation toString randomUUID = End StatementExpression Assignment MemberReference state ClassCreator ReferenceType VirtualNodeState This MethodInvocation parent getUUID MemberReference uuid MemberReference nodeTypeName ArrayCreator ReferenceType QName Literal 0 = StatementExpression MethodInvocation state MemberReference def setDefinitionId StatementExpression MethodInvocation MemberReference state cache ReturnStatement MemberReference state MethodDeclaration /**
     * returns the node type manager
     *
     * @return
     */ Modifier protected ReferenceType NodeTypeRegistry getNodeTypeRegistry ReturnStatement MemberReference ntReg MethodDeclaration /**
     * adds the node state to the cache
     *
     * @param state
     */ Modifier protected ReferenceType NodeState cache FormalParameter ReferenceType NodeState state IfStatement BinaryOperation != MemberReference state Literal null BlockStatement StatementExpression MethodInvocation nodes MemberReference state put StatementExpression MethodInvocation state This addListener StatementExpression MethodInvocation log BinaryOperation + Literal ""item added to cache. size="" MethodInvocation nodes size debug End ReturnStatement MemberReference state MethodDeclaration /**
     * removes the node state from the cache
     *
     * @param id
     */ Modifier protected evict FormalParameter ReferenceType NodeId id StatementExpression MethodInvocation nodes MemberReference id remove MethodDeclaration /**
     * invalidates the item
     *
     * @param id
     */ Modifier public invalidateItem FormalParameter ReferenceType ItemId id FormalParameter BasicType boolean recursive LocalVariableDeclaration ReferenceType VirtualNodeState VariableDeclarator state TernaryExpression MethodInvocation id MemberReference rootNodeId equals MemberReference root Cast ReferenceType VirtualNodeState MethodInvocation nodes MemberReference id get IfStatement BinaryOperation != MemberReference state Literal null BlockStatement IfStatement MemberReference recursive BlockStatement LocalVariableDeclaration ReferenceType VirtualPropertyState VariableDeclarator props MethodInvocation state getProperties ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference props length MemberReference ++ i BlockStatement StatementExpression MemberReference ArraySelector MemberReference i MethodInvocation notifyStateUpdated props End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation state MethodInvocation iterator getChildNodeEntries WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeState ReferenceType ChildNodeEntry VariableDeclarator pe Cast ReferenceType NodeState ReferenceType ChildNodeEntry MethodInvocation iter next StatementExpression MethodInvocation ClassCreator ReferenceType NodeId MethodInvocation pe getUUID Literal true invalidateItem End End StatementExpression MethodInvocation state notifyStateUpdated End MethodDeclaration /**
     * retrieves the property definition for the given contraints
     *
     * @param propertyName
     * @param type
     * @param multiValued
     * @return
     * @throws RepositoryException
     */ Modifier protected ReferenceType PropDef getApplicablePropertyDef FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType QName propertyName FormalParameter BasicType int type FormalParameter BasicType boolean multiValued RepositoryException ReturnStatement MethodInvocation MethodInvocation MemberReference propertyName MemberReference type MemberReference multiValued getApplicablePropertyDef MemberReference parent getEffectiveNodeType MethodDeclaration /**
     * Retrieves the node definition for the given contraints.
     *
     * @param nodeName
     * @param nodeTypeName
     * @return
     * @throws RepositoryException
     */ Modifier protected ReferenceType NodeDef getApplicableChildNodeDef FormalParameter ReferenceType NodeState parent FormalParameter ReferenceType QName nodeName FormalParameter ReferenceType QName nodeTypeName RepositoryException ReturnStatement MethodInvocation MethodInvocation MemberReference nodeName MemberReference nodeTypeName getApplicableChildNodeDef MemberReference parent getEffectiveNodeType MethodDeclaration /**
     * Returns the effective (i.e. merged and resolved) node type representation
     * of this node's primary and mixin node types.
     *
     * @return the effective node type
     * @throws RepositoryException
     */ Modifier protected ReferenceType EffectiveNodeType getEffectiveNodeType FormalParameter ReferenceType NodeState parent RepositoryException LocalVariableDeclaration ReferenceType NodeTypeRegistry VariableDeclarator ntReg MethodInvocation getNodeTypeRegistry LocalVariableDeclaration ReferenceType HashSet VariableDeclarator set ClassCreator ReferenceType HashSet MethodInvocation parent getMixinTypeNames StatementExpression MethodInvocation set MethodInvocation parent getNodeTypeName add TryStatement ReturnStatement MethodInvocation ntReg Cast ReferenceType QName MethodInvocation set ArrayCreator ReferenceType QName MethodInvocation set size toArray getEffectiveNodeType CatchClause CatchClauseParameter NodeTypeConflictException ntce LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""internal error: failed to build effective node type for node "" MethodInvocation parent getUUID ThrowStatement ClassCreator ReferenceType RepositoryException MemberReference msg MemberReference ntce MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateCreated FormalParameter ReferenceType ItemState created MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateModified FormalParameter ReferenceType ItemState modified MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateDestroyed FormalParameter ReferenceType ItemState destroyed StatementExpression MethodInvocation destroyed This removeListener IfStatement BinaryOperation && MethodInvocation destroyed isNode MethodInvocation destroyed MethodInvocation MemberReference rootNodeId equals getId BlockStatement TryStatement StatementExpression Assignment MemberReference root MethodInvocation createRootNodeState = CatchClause CatchClauseParameter RepositoryException e End StatementExpression MethodInvocation Cast ReferenceType NodeId MethodInvocation destroyed getId evict MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public stateDiscarded FormalParameter ReferenceType ItemState discarded StatementExpression MethodInvocation discarded This removeListener IfStatement BinaryOperation && MethodInvocation discarded isNode MethodInvocation discarded MethodInvocation MemberReference rootNodeId equals getId BlockStatement TryStatement StatementExpression Assignment MemberReference root MethodInvocation createRootNodeState = CatchClause CatchClauseParameter RepositoryException e End StatementExpression MethodInvocation Cast ReferenceType NodeId MethodInvocation discarded getId evict ReferenceType VirtualItemStateProvider ReferenceType ItemStateListener",1
94,94,"CompilationUnit PackageDeclaration org.apache.jackrabbit.classloader Import java.io.IOException Import java.io.InputStream Import java.net.MalformedURLException Import java.net.URL Import java.security.AccessControlException Import java.util.jar.JarException Import java.util.jar.JarInputStream Import javax.jcr.ItemNotFoundException Import javax.jcr.PathNotFoundException Import javax.jcr.Property Import javax.jcr.RepositoryException Import javax.jcr.Session Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.net.URLFactory ClassDeclaration Modifier abstract /**
 * The <code>ClassPathEntry</code> class encapsulates entries in the class path
 * of the {@link DynamicRepositoryClassLoader}. The main task is to retrieve
 * {@link ClassLoaderResource} instances for classes or resources to load from it.
 * <p>
 * This implementation is not currently integrated with Java security. That is
 * protection domains and security managers are not supported yet.
 * <p>
 * This class is not intended to be subclassed or instantiated by clients.
 *
 * @author Felix Meschberger
 * @version $Rev:$, $Date:$
 */ ClassPathEntry FieldDeclaration /** default logging */ Modifier private final static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ClassPathEntry getLog FieldDeclaration /** The session assigned to this class path entry */ Modifier final protected ReferenceType Session VariableDeclarator session FieldDeclaration /** The path to the item of this class path entry */ Modifier final protected ReferenceType String VariableDeclarator path FieldDeclaration /** The base URL for the class path entry to later construct resource URLs */ Modifier protected ReferenceType URL VariableDeclarator baseURL ConstructorDeclaration Modifier protected /**
     * Creates an instance of the <code>ClassPathEntry</code> assigning the
     * session and path.
     *
     * @param session The <code>Session</code> to access the Repository.
     * @param path The path of the class path entry, this is either the
     *      path of a node containing a jar archive or is the path
     *      of the root of a hierarchy to look up resources in.
     */ ClassPathEntry FormalParameter ReferenceType Session session FormalParameter ReferenceType String path StatementExpression Assignment This MemberReference path MemberReference path = StatementExpression Assignment This MemberReference session MemberReference session = ConstructorDeclaration Modifier protected /**
     * Clones this instance of the <code>ClassPathEntry</code> setting the
     * path and session to the same value as the base instance.
     * <p>
     * Note that this constructor does not duplicate the session from the base
     * instance.
     *
     * @param base The <code>ClassPathEntry</code> from which to copy the path
     *      and the session.
     */ ClassPathEntry FormalParameter ReferenceType ClassPathEntry base StatementExpression Assignment This MemberReference path MemberReference base path = StatementExpression Assignment This MemberReference session MemberReference base session = StatementExpression Assignment This MemberReference baseURL MemberReference base baseURL = MethodDeclaration /**
     * Returns an instance of the <code>ClassPathEntry</code> class. This
     * instance will be a subclass correctly handling the type (directory or
     * jar archive) of class path entry is to be created.
     * <p>
     * If the path given has a trailing slash, it is taken as a directory root
     * else the path is first tested, whether it contains an archive. If not
     * the path is treated as a directory.
     *
     * @param session The <code>Session</code> to access the Repository.
     * @param path The path of the class path entry, this is either the
     *      path of a node containing a jar archive or is the path
     *      of the root of a hierharchy to look up resources in.
     *
     * @return An initialized <code>ClassPathEntry</code> instance for the
     *      path or <code>null</code> if an error occurred creating the
     *      instance.
     */ Modifier static ReferenceType ClassPathEntry getInstance FormalParameter ReferenceType Session session FormalParameter ReferenceType String path TryStatement StatementExpression MethodInvocation session MemberReference path Literal ""read"" checkPermission CatchClause CatchClauseParameter AccessControlException ace StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + Literal ""getInstance: Access denied reading from "" MemberReference path Literal "", ignoring entry"" warn ReturnStatement Literal null CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log BinaryOperation + Literal ""getInstance: Cannot check permission to "" MemberReference path MemberReference re error IfStatement MethodInvocation ! path Literal ""/"" endsWith BlockStatement LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is Literal null LocalVariableDeclaration ReferenceType JarInputStream VariableDeclarator zip Literal null TryStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator prop MethodInvocation Util MethodInvocation session MemberReference path getItem getProperty IfStatement BinaryOperation != MemberReference prop Literal null BlockStatement StatementExpression Assignment MemberReference is MethodInvocation prop getStream = StatementExpression Assignment MemberReference zip ClassCreator ReferenceType JarInputStream MemberReference is = IfStatement BinaryOperation != MethodInvocation zip getNextJarEntry Literal null BlockStatement IfStatement MethodInvocation ExpandingArchiveClassPathEntry MemberReference session canExpandArchives BlockStatement ReturnStatement ClassCreator ReferenceType ExpandingArchiveClassPathEntry MemberReference prop MemberReference path End ReturnStatement ClassCreator ReferenceType ArchiveClassPathEntry MemberReference prop MemberReference path End StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""getInstance: "" MemberReference path Literal "" might not be a jar "" Literal ""archive, using as directory"" debug BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""getInstance: "" MemberReference path Literal "" does not resolve"" Literal "" to a property, using as directory"" debug End CatchClause CatchClauseParameter ItemNotFoundException infe CatchClause CatchClauseParameter PathNotFoundException pnfe CatchClause CatchClauseParameter RepositoryException re StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""getInstance: "" MemberReference path Literal "" cannot be read from, "" Literal ""using as directory"" debug CatchClause CatchClauseParameter JarException ze StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""getInstance: "" MemberReference path Literal "" does not contain an "" Literal ""archive, using as directory"" debug CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + Literal ""getInstance: "" MemberReference path Literal "" problem reading from "" Literal ""the archive, using as directory"" debug IfStatement BinaryOperation != MemberReference zip Literal null BlockStatement TryStatement StatementExpression MethodInvocation zip close CatchClause CatchClauseParameter IOException ignored IfStatement BinaryOperation != MemberReference is Literal null BlockStatement TryStatement StatementExpression MethodInvocation is close CatchClause CatchClauseParameter IOException ignored End End StatementExpression Assignment MemberReference path Literal ""/"" += End ReturnStatement ClassCreator ReferenceType DirectoryClassPathEntry MemberReference session MemberReference path MethodDeclaration /**
     * Returns the path on which this <code>ClassPathEntry</code> is based.
     */ Modifier public ReferenceType String getPath ReturnStatement MemberReference path MethodDeclaration /**
     * Returns this <code>ClassPathEntry</code> represented as an URL to be
     * used in a list of URLs to further work on. If there is a problem creating
     * the URL for this instance, <code>null</code> is returned instead.
     */ Modifier public ReferenceType URL toURL IfStatement BinaryOperation == MemberReference baseURL Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference baseURL MethodInvocation URLFactory MemberReference session MemberReference path createURL = CatchClause CatchClauseParameter MalformedURLException mue StatementExpression MethodInvocation log BinaryOperation + Literal ""DirectoryClassPathEntry: Creating baseURl for "" MemberReference path MemberReference mue warn End ReturnStatement MemberReference baseURL MethodDeclaration /**
     * Returns a <code>ClassPathEntry</code> with the same configuration as
     * this <code>ClassPathEntry</code>.
     * <p>
     * The returned object may be but need not be a new instance. If the original
     * implementation is an immutable class, the instance returned may well
     * be the same as this.
     */ Modifier abstract ReferenceType ClassPathEntry copy MethodDeclaration /**
     * Searches for the named resource. The name is looked up as is, it is not
     * further modified such as appended with "".class"" or made relative. That
     * is callers must make sure, that (1) this name is the full name of the
     * resource to find and that (2) it is a relative name, that is it should
     * not have a leading slash.
     * <p>
     * An example of a class to find would be : <code>com/day/test/Tester.class</code>
     * which is converted from the generally used value <code>com.day.test.Tester</code>
     * by the caller.
     *
     * @param name The name of the resource to find.
     */ Modifier public abstract ReferenceType ClassLoaderResource getResource FormalParameter ReferenceType String name MethodDeclaration /**
     * @see Object#toString()
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer SuperMethodInvocation toString StatementExpression MethodInvocation buf Literal "": path: "" append StatementExpression MethodInvocation buf MemberReference path append StatementExpression MethodInvocation buf Literal "", user: "" append StatementExpression MethodInvocation buf MethodInvocation session getUserID append ReturnStatement MethodInvocation buf toString",0
576,576,,0
3,3,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import java.util.Iterator Import java.util.ResourceBundle Import javax.jcr.NodeIterator Import javax.jcr.PropertyIterator Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public abstract /**
 * Ls superclass
 */ AbstractLs FieldDeclaration /** bundle */ Modifier private static ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation CommandHelper getBundle FieldDeclaration /** long width */ Modifier protected BasicType int VariableDeclarator longWidth Literal 9 FieldDeclaration /** max items to list */ Modifier private BasicType int VariableDeclarator defaultMaxItems Literal 100 FieldDeclaration /** max number of items */ Modifier private ReferenceType String VariableDeclarator maxItemsKey Literal ""maxItems"" FieldDeclaration /** show path flag */ Modifier private BasicType boolean VariableDeclarator path MethodDeclaration /**
     * Print the footer
     * @param ctx
     *        the <code>Context</code>
     * @param iter
     *        the <code>Iterator</code>
     */ Modifier protected printFooter FormalParameter ReferenceType Context ctx FormalParameter ReferenceType Iterator iter StatementExpression MethodInvocation CommandHelper MethodInvocation println MemberReference ctx getOutput StatementExpression MethodInvocation CommandHelper MethodInvocation MethodInvocation bundle Literal ""word.total"" getString println MemberReference ctx getOutput IfStatement BinaryOperation instanceof MemberReference iter ReferenceType NodeIterator BlockStatement StatementExpression MethodInvocation MemberReference ctx Cast ReferenceType NodeIterator MemberReference iter printFooter IfStatement BinaryOperation instanceof MemberReference iter ReferenceType PropertyIterator BlockStatement StatementExpression MethodInvocation MemberReference ctx Cast ReferenceType PropertyIterator MemberReference iter printFooter End End MethodDeclaration /**
     * Print footer
     * @param ctx
     *        the <code>Context</code>
     * @param iter
     *        the <code>Iterator</code>
     */ Modifier private printFooter FormalParameter ReferenceType Context ctx FormalParameter ReferenceType NodeIterator iter StatementExpression MethodInvocation CommandHelper MethodInvocation BinaryOperation + BinaryOperation + MethodInvocation iter getSize Literal "" "" MethodInvocation bundle Literal ""word.nodes"" getString println MemberReference ctx getOutput MethodDeclaration /**
     * Print footer
     * @param ctx
     *        the <code>Context</code>
     * @param iter
     *        the <code>Iterator</code>
     */ Modifier private printFooter FormalParameter ReferenceType Context ctx FormalParameter ReferenceType PropertyIterator iter StatementExpression MethodInvocation CommandHelper MethodInvocation BinaryOperation + BinaryOperation + MethodInvocation iter getSize Literal "" "" MethodInvocation bundle Literal ""word.properties"" getString println MemberReference ctx getOutput MethodDeclaration /**
     * @return the default max number of <code>Items</code> s to show
     */ Modifier public BasicType int getDefaultMaxItems ReturnStatement MemberReference defaultMaxItems MethodDeclaration /**
     * @param maxItems
     *        the default max number of <code>Items</code> s to set
     */ Modifier public setDefaultMaxItems FormalParameter BasicType int maxItems StatementExpression Assignment This MemberReference defaultMaxItems MemberReference maxItems = MethodDeclaration /**
     * @return the path
     */ Modifier public BasicType boolean isPath ReturnStatement MemberReference path MethodDeclaration /**
     * @param path
     *        the path to set
     */ Modifier public setPath FormalParameter BasicType boolean path StatementExpression Assignment This MemberReference path MemberReference path = MethodDeclaration /**
     * @return the max number of items key
     */ Modifier public ReferenceType String getMaxItemsKey ReturnStatement MemberReference maxItemsKey MethodDeclaration /**
     * @param maxItemsKey
     *        the max number of items key to set
     */ Modifier public setMaxItemsKey FormalParameter ReferenceType String maxItemsKey StatementExpression Assignment This MemberReference maxItemsKey MemberReference maxItemsKey = MethodDeclaration /**
     * @param ctx
     *        the <code>Context</code>
     * @return the max number of <code>Item</code> s to show
     */ Modifier protected BasicType int getMaxItems FormalParameter ReferenceType Context ctx LocalVariableDeclaration ReferenceType String VariableDeclarator maxItems Cast ReferenceType String MethodInvocation ctx This MemberReference maxItemsKey get IfStatement BinaryOperation == MemberReference maxItems Literal null BlockStatement StatementExpression Assignment MemberReference maxItems ClassCreator MethodInvocation toString ReferenceType Integer This MemberReference defaultMaxItems = End ReturnStatement MethodInvocation Integer MethodInvocation intValue MemberReference maxItems valueOf ReferenceType Command",0
308,308,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.lucene Import org.apache.lucene.index.IndexReader Import org.apache.lucene.index.Term Import org.apache.lucene.index.TermDocs Import java.io.IOException Import java.util.BitSet ClassDeclaration Modifier abstract /**
 * Implements a document id which can be based on a Node uuid or a lucene
 * document number.
 */ DocId FieldDeclaration /**
     * Indicates a null DocId. Will be returned if the root node is asked for
     * its parent.
     */ Modifier final static ReferenceType DocId VariableDeclarator NULL ClassCreator ReferenceType DocId MethodDeclaration /**
         * Always returns <code>-1</code>.
         * @param reader the index reader.
         * @return always <code>-1</code>.
         */ Modifier final BasicType int getDocumentNumber FormalParameter ReferenceType IndexReader reader ReturnStatement Literal - 1 MethodDeclaration /**
         * Always returns <code>this</code>.
         * @param offset the offset to apply.
         * @return always <code>this</code>.
         */ Modifier final ReferenceType DocId applyOffset FormalParameter BasicType int offset ReturnStatement This MethodDeclaration /**
         * Always returns <code>true</code>.
         * @param deleted the deleted documents.
         * @return always <code>true</code>.
         */ Modifier final BasicType boolean isValid FormalParameter ReferenceType BitSet deleted ReturnStatement Literal true MethodDeclaration /**
     * Returns the document number of this <code>DocId</code>. If this id is
     * invalid <code>-1</code> is returned.
     *
     * @param reader the IndexReader to resolve this <code>DocId</code>.
     * @return the document number of this <code>DocId</code> or <code>-1</code>
     *         if it is invalid (e.g. does not exist).
     * @throws IOException if an error occurs while reading from the index.
     */ Modifier abstract BasicType int getDocumentNumber FormalParameter ReferenceType IndexReader reader IOException MethodDeclaration /**
     * Applies an offset to this <code>DocId</code>. The returned <code>DocId</code>
     * may be the same as <code>this</code> if this <code>DocId</code> does
     * not need to know about an offset.
     *
     * @param offset the offset to apply to.
     * @return <code>DocId</code> with <code>offset</code> applied.
     */ Modifier abstract ReferenceType DocId applyOffset FormalParameter BasicType int offset MethodDeclaration /**
     * Returns <code>true</code> if this <code>DocId</code> is valid against the
     * set of <code>deleted</code> documents; otherwise <code>false</code>.
     *
     * @param deleted the deleted documents.
     * @return <code>true</code> if this <code>DocId</code> is not delted;
     *         otherwise <code>false</code>.
     */ Modifier abstract BasicType boolean isValid FormalParameter ReferenceType BitSet deleted MethodDeclaration /**
     * Creates a <code>DocId</code> based on a document number.
     *
     * @param docNumber the document number.
     * @return a <code>DocId</code> based on a document number.
     */ Modifier static ReferenceType DocId create FormalParameter BasicType int docNumber ReturnStatement ClassCreator ReferenceType PlainDocId MemberReference docNumber MethodDeclaration /**
     * Creates a <code>DocId</code> based on a node UUID.
     *
     * @param uuid the node uuid.
     * @return a <code>DocId</code> based on a node UUID.
     */ Modifier static ReferenceType DocId create FormalParameter ReferenceType String uuid ReturnStatement ClassCreator ReferenceType UUIDDocId MemberReference uuid ClassDeclaration Modifier private final static /**
     * <code>DocId</code> based on a document number.
     */ PlainDocId FieldDeclaration /**
         * The document number or <code>-1</code> if not set.
         */ Modifier private final BasicType int VariableDeclarator docNumber ConstructorDeclaration /**
         * Creates a <code>DocId</code> based on a document number.
         *
         * @param docNumber the lucene document number.
         */ PlainDocId FormalParameter BasicType int docNumber StatementExpression Assignment This MemberReference docNumber MemberReference docNumber = MethodDeclaration /**
         * @inheritDoc
         */ Modifier final BasicType int getDocumentNumber FormalParameter ReferenceType IndexReader reader ReturnStatement MemberReference docNumber MethodDeclaration /**
         * @inheritDoc
         */ Modifier final ReferenceType DocId applyOffset FormalParameter BasicType int offset ReturnStatement ClassCreator ReferenceType PlainDocId BinaryOperation + MemberReference docNumber MemberReference offset MethodDeclaration /**
         * @inheritDoc
         */ Modifier final BasicType boolean isValid FormalParameter ReferenceType BitSet deleted ReturnStatement MethodInvocation ! deleted MemberReference docNumber get MethodDeclaration /**
         * Returns a String representation for this <code>DocId</code>.
         *
         * @return a String representation for this <code>DocId</code>.
         */ Modifier final public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""PlainDocId("" MemberReference docNumber Literal "")"" ReferenceType DocId ClassDeclaration Modifier private final static /**
     * <code>DocId</code> based on a UUID.
     */ UUIDDocId FieldDeclaration /**
         * The node uuid or <code>null</code> if not set.
         */ Modifier private final ReferenceType String VariableDeclarator uuid FieldDeclaration /**
         * The index reader that was used to calculate the document number.
         * If <code>null</code> then the document number has not yet been
         * calculated.
         */ Modifier private ReferenceType IndexReader VariableDeclarator reader FieldDeclaration /**
         * The previously calculated document number.
         */ Modifier private BasicType int VariableDeclarator docNumber ConstructorDeclaration /**
         * Creates a <code>DocId</code> based on a Node uuid.
         *
         * @param uuid the Node uuid.
         */ UUIDDocId FormalParameter ReferenceType String uuid StatementExpression Assignment This MemberReference uuid MemberReference uuid = MethodDeclaration /**
         * @inheritDoc
         */ Modifier final BasicType int getDocumentNumber FormalParameter ReferenceType IndexReader reader IOException SynchronizedStatement This IfStatement BinaryOperation == MemberReference reader This MemberReference reader BlockStatement ReturnStatement MemberReference docNumber End LocalVariableDeclaration ReferenceType Term VariableDeclarator id ClassCreator ReferenceType Term MemberReference FieldNames UUID MemberReference uuid LocalVariableDeclaration ReferenceType TermDocs VariableDeclarator docs MethodInvocation reader MemberReference id termDocs LocalVariableDeclaration BasicType int VariableDeclarator doc Literal - 1 TryStatement IfStatement MethodInvocation docs next BlockStatement StatementExpression Assignment MemberReference doc MethodInvocation docs doc = End StatementExpression MethodInvocation docs close SynchronizedStatement This StatementExpression Assignment MemberReference docNumber MemberReference doc = StatementExpression Assignment This MemberReference reader MemberReference reader = ReturnStatement MemberReference doc MethodDeclaration /**
         * This implementation will return <code>this</code>. Document number is
         * not known until resolved in {@link #getDocumentNumber(IndexReader)}.
         *
         * @inheritDoc
         */ Modifier final ReferenceType DocId applyOffset FormalParameter BasicType int offset ReturnStatement This MethodDeclaration /**
         * Always returns <code>true</code>.
         *
         * @param deleted the deleted documents.
         * @return always <code>true</code>.
         */ Modifier final BasicType boolean isValid FormalParameter ReferenceType BitSet deleted ReturnStatement Literal true MethodDeclaration /**
         * Returns a String representation for this <code>DocId</code>.
         *
         * @return a String representation for this <code>DocId</code>.
         */ Modifier final public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""UUIDDocId("" MemberReference uuid Literal "")"" ReferenceType DocId",0
791,791,,0
897,897,,0
736,736,,0
652,652,,0
801,801,,1
367,367,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query Import org.apache.jackrabbit.name.QName ClassDeclaration Modifier public /**
 * Implements a query node that defines an exact match of a property and a
 * value.
 */ ExactQueryNode FieldDeclaration /**
     * The name of the property to match
     */ Modifier private final ReferenceType QName VariableDeclarator property FieldDeclaration /**
     * The value of the property to match
     */ Modifier private final ReferenceType QName VariableDeclarator value ConstructorDeclaration Modifier public /**
     * Creates a new <code>ExactQueryNode</code> instance.
     *
     * @param parent   the parent node for this <code>ExactQueryNode</code>.
     * @param property the name of the property to match.
     * @param value    the value of the property to match.
     */ ExactQueryNode FormalParameter ReferenceType QueryNode parent FormalParameter ReferenceType QName property FormalParameter ReferenceType QName value StatementExpression SuperConstructorInvocation MemberReference parent IfStatement BinaryOperation == MemberReference parent Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""parent"" End StatementExpression Assignment This MemberReference property MemberReference property = StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Object accept FormalParameter ReferenceType QueryNodeVisitor visitor FormalParameter ReferenceType Object data ReturnStatement MethodInvocation visitor This MemberReference data visit MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int getType ReturnStatement MemberReference QueryNode TYPE_EXACT MethodDeclaration /**
     * Returns the name of the property to match.
     *
     * @return the name of the property to match.
     */ Modifier public ReferenceType QName getPropertyName ReturnStatement MemberReference property MethodDeclaration /**
     * Returns the value of the property to match.
     *
     * @return the value of the property to match.
     */ Modifier public ReferenceType QName getValue ReturnStatement MemberReference value MethodDeclaration /**
     * @inheritDoc
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation instanceof MemberReference obj ReferenceType ExactQueryNode BlockStatement LocalVariableDeclaration ReferenceType ExactQueryNode VariableDeclarator other Cast ReferenceType ExactQueryNode MemberReference obj ReturnStatement BinaryOperation && TernaryExpression BinaryOperation == MemberReference value Literal null BinaryOperation == MemberReference other value Literal null MethodInvocation value MemberReference other value equals TernaryExpression BinaryOperation == MemberReference property Literal null BinaryOperation == MemberReference other property Literal null MethodInvocation property MemberReference other property equals End ReturnStatement Literal false ReferenceType QueryNode",1
734,734,,0
574,574,,0
277,277,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.nodetype Import org.apache.jackrabbit.name.QName Import java.io.Serializable Import java.util.TreeSet ClassDeclaration Modifier public /**
 * <code>NodeDefId</code> uniquely identifies a <code>NodeDef</code> in the
 * node type registry.
 */ NodeDefId FieldDeclaration /**
     * Serialization UID of this class.
     */ Modifier final static BasicType long VariableDeclarator serialVersionUID Literal 7020286139887664713L FieldDeclaration /**
     * The internal id is computed based on the characteristics of the
     * <code>NodeDef</code> that this <code>NodeDefId</code> identifies.
     */ Modifier private final BasicType int VariableDeclarator id ConstructorDeclaration /**
     * Creates a new <code>NodeDefId</code> that serves as identifier for
     * the given <code>NodeDef</code>. An internal id is computed based on
     * the characteristics of the <code>NodeDef</code> that it identifies.
     *
     * @param def <code>NodeDef</code> to create identifier for
     */ NodeDefId FormalParameter ReferenceType NodeDef def IfStatement BinaryOperation == MemberReference def Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""NodeDef argument can not be null"" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation sb MethodInvocation def MethodInvocation toString getDeclaringNodeType append StatementExpression MethodInvocation sb Literal '/' append IfStatement MethodInvocation def definesResidual BlockStatement StatementExpression MethodInvocation sb Literal '*' append BlockStatement StatementExpression MethodInvocation sb MethodInvocation def MethodInvocation toString getName append End StatementExpression MethodInvocation sb Literal '/' append LocalVariableDeclaration ReferenceType TreeSet VariableDeclarator set ClassCreator ReferenceType TreeSet LocalVariableDeclaration ReferenceType QName VariableDeclarator names MethodInvocation def getRequiredPrimaryTypes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference names length MemberReference ++ i BlockStatement StatementExpression MethodInvocation set MemberReference ArraySelector MemberReference i names add End StatementExpression MethodInvocation sb MethodInvocation set toString append StatementExpression Assignment MemberReference id MethodInvocation sb MethodInvocation hashCode toString = ConstructorDeclaration Modifier private /**
     * Private constructor that creates a <code>NodeDefId</code> using an
     * internal id
     *
     * @param id internal id
     */ NodeDefId FormalParameter BasicType int id StatementExpression Assignment This MemberReference id MemberReference id = MethodDeclaration /**
     * Returns a <code>NodeDefId</code> holding the value of the specified
     * string. The string must be in the format returned by the
     * <code>NodeDefId.toString()</code> method.
     *
     * @param s a <code>String</code> containing the <code>NodeDefId</code>
     *          representation to be parsed.
     * @return the <code>NodeDefId</code> represented by the argument
     * @throws IllegalArgumentException if the specified string can not be parsed
     *                                  as a <code>NodeDefId</code>.
     * @see #toString()
     */ Modifier public static ReferenceType NodeDefId valueOf FormalParameter ReferenceType String s IllegalArgumentException IfStatement BinaryOperation == MemberReference s Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""invalid NodeDefId literal"" End ReturnStatement ClassCreator ReferenceType NodeDefId MethodInvocation Integer MemberReference s parseInt MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType NodeDefId BlockStatement LocalVariableDeclaration ReferenceType NodeDefId VariableDeclarator other Cast ReferenceType NodeDefId MemberReference obj ReturnStatement BinaryOperation == MemberReference id MemberReference other id End ReturnStatement Literal false MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation Integer MemberReference id toString MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType int hashCode ReturnStatement MemberReference id ReferenceType Serializable",1
172,172,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state.orm.ojb Import java.io.ByteArrayInputStream Import java.io.ByteArrayOutputStream Import java.util.ArrayList Import java.util.Iterator Import javax.jcr.PropertyType Import org.apache.jackrabbit.core.value.BLOBFileValue Import org.apache.jackrabbit.core.value.InternalValue Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.name.QName Import org.apache.jackrabbit.core.state.ChangeLog Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.state.ItemStateException Import org.apache.jackrabbit.core.state.NoSuchItemStateException Import org.apache.jackrabbit.core.state.NodeReferences Import org.apache.jackrabbit.core.state.NodeReferencesId Import org.apache.jackrabbit.core.state.NodeState Import org.apache.jackrabbit.core.state.PMContext Import org.apache.jackrabbit.core.state.PersistenceManager Import org.apache.jackrabbit.core.state.PropertyState Import org.apache.jackrabbit.core.state.orm.ORMBlobValue Import org.apache.jackrabbit.core.state.orm.ORMNodeReference Import org.apache.jackrabbit.core.state.orm.ORMPropertyState Import org.apache.log4j.Logger Import org.apache.ojb.broker.PersistenceBroker Import org.apache.ojb.broker.PersistenceBrokerException Import org.apache.ojb.broker.PersistenceBrokerFactory Import org.apache.ojb.broker.query.Criteria Import org.apache.ojb.broker.query.QueryByCriteria Import org.apache.ojb.broker.query.QueryByIdentity ClassDeclaration Modifier public /**
 * OJB implementation of a Jackrabbit persistence manager.
 */ OJBPersistenceManager FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType OJBPersistenceManager getLogger FieldDeclaration Modifier private BasicType boolean VariableDeclarator initialized Literal false ConstructorDeclaration Modifier public OJBPersistenceManager MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.PersistenceManager#init
     */ Modifier public init FormalParameter ReferenceType PMContext context Exception IfStatement MemberReference initialized BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""already initialized"" End StatementExpression Assignment MemberReference initialized Literal true = MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.PersistenceManager#close
     */ Modifier public close Exception MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.PersistenceManager#load(NodeId)
     */ Modifier public ReferenceType NodeState load FormalParameter ReferenceType NodeId nodeId NoSuchItemStateException ItemStateException LocalVariableDeclaration ReferenceType PersistenceBroker VariableDeclarator broker MethodInvocation PersistenceBrokerFactory defaultPersistenceBroker TryStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""Request for "" MethodInvocation nodeId getUUID debug LocalVariableDeclaration ReferenceType OJBNodeState VariableDeclarator nodeState ClassCreator ReferenceType OJBNodeState StatementExpression MethodInvocation nodeState MethodInvocation nodeId getUUID setUuid LocalVariableDeclaration ReferenceType QueryByIdentity VariableDeclarator query ClassCreator ReferenceType QueryByIdentity MemberReference nodeState LocalVariableDeclaration ReferenceType OJBNodeState VariableDeclarator result Cast ReferenceType OJBNodeState MethodInvocation broker MemberReference query getObjectByQuery IfStatement BinaryOperation == MemberReference result Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException MethodInvocation nodeId getUUID End LocalVariableDeclaration ReferenceType NodeState VariableDeclarator state MethodInvocation MemberReference nodeId createNew StatementExpression MethodInvocation result MemberReference state toPersistentNodeState ReturnStatement MemberReference state CatchClause CatchClauseParameter PersistenceBrokerException e ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker close End MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.PersistenceManager#load(PropertyId)
     */ Modifier public ReferenceType PropertyState load FormalParameter ReferenceType PropertyId propId NoSuchItemStateException ItemStateException LocalVariableDeclaration ReferenceType PersistenceBroker VariableDeclarator broker MethodInvocation PersistenceBrokerFactory defaultPersistenceBroker TryStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""Request for property "" MemberReference propId debug LocalVariableDeclaration ReferenceType ORMPropertyState VariableDeclarator propState ClassCreator ReferenceType ORMPropertyState MemberReference propId LocalVariableDeclaration ReferenceType QueryByIdentity VariableDeclarator query ClassCreator ReferenceType QueryByIdentity MemberReference propState LocalVariableDeclaration ReferenceType PropertyState VariableDeclarator state MethodInvocation MemberReference propId createNew LocalVariableDeclaration ReferenceType ORMPropertyState VariableDeclarator result Cast ReferenceType ORMPropertyState MethodInvocation broker MemberReference query getObjectByQuery IfStatement BinaryOperation == MemberReference result Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchItemStateException BinaryOperation + Literal ""Couldn't find property "" MemberReference propId End StatementExpression MethodInvocation result MemberReference state toPersistentPropertyState IfStatement BinaryOperation == MethodInvocation result MethodInvocation intValue getType MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration ReferenceType ArrayList VariableDeclarator internalValueList ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Criteria VariableDeclarator criteria ClassCreator ReferenceType Criteria StatementExpression MethodInvocation criteria Literal ""parentUUID"" MethodInvocation state getParentUUID addEqualTo StatementExpression MethodInvocation criteria Literal ""propertyName"" MethodInvocation state MethodInvocation toString getName addEqualTo LocalVariableDeclaration ReferenceType QueryByCriteria VariableDeclarator blobQuery ClassCreator ReferenceType QueryByCriteria ClassReference ReferenceType ORMBlobValue MemberReference criteria LocalVariableDeclaration ReferenceType Iterator VariableDeclarator resultIter MethodInvocation broker MethodInvocation iterator MemberReference blobQuery getCollectionByQuery WhileStatement MethodInvocation resultIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ORMBlobValue VariableDeclarator ormBlobValue Cast ReferenceType ORMBlobValue MethodInvocation resultIter next LocalVariableDeclaration ReferenceType ByteArrayInputStream VariableDeclarator in ClassCreator ReferenceType ByteArrayInputStream MethodInvocation ormBlobValue getBlobValue TryStatement StatementExpression MethodInvocation internalValueList MethodInvocation InternalValue MemberReference in create add CatchClause CatchClauseParameter Throwable t ThrowStatement ClassCreator ReferenceType ItemStateException Literal ""Error while trying to load blob value"" MemberReference t End StatementExpression MethodInvocation state Cast ReferenceType InternalValue MethodInvocation internalValueList ArrayCreator ReferenceType InternalValue MethodInvocation internalValueList size toArray setValues End ReturnStatement MemberReference state CatchClause CatchClauseParameter PersistenceBrokerException e ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker close End MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.PersistenceManager#load(NodeReferencesId)
     */ Modifier public ReferenceType NodeReferences load FormalParameter ReferenceType NodeReferencesId targetId NoSuchItemStateException ItemStateException LocalVariableDeclaration ReferenceType PersistenceBroker VariableDeclarator broker MethodInvocation PersistenceBrokerFactory defaultPersistenceBroker TryStatement LocalVariableDeclaration ReferenceType ORMNodeReference VariableDeclarator nodeRef ClassCreator ReferenceType ORMNodeReference StatementExpression MethodInvocation nodeRef MethodInvocation targetId toString setTargetId LocalVariableDeclaration ReferenceType QueryByCriteria VariableDeclarator query ClassCreator ReferenceType QueryByCriteria MemberReference nodeRef LocalVariableDeclaration ReferenceType Iterator VariableDeclarator resultIter MethodInvocation broker MethodInvocation iterator MemberReference query getCollectionByQuery LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs ClassCreator ReferenceType NodeReferences MemberReference targetId WhileStatement MethodInvocation resultIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ORMNodeReference VariableDeclarator curNodeReference Cast ReferenceType ORMNodeReference MethodInvocation resultIter next StatementExpression MethodInvocation refs ClassCreator ReferenceType PropertyId MethodInvocation curNodeReference getPropertyParentUUID MethodInvocation QName MethodInvocation curNodeReference getPropertyName valueOf addReference End ReturnStatement MemberReference refs CatchClause CatchClauseParameter PersistenceBrokerException e ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker close End MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.PersistenceManager#exists(NodeId)
     */ Modifier public BasicType boolean exists FormalParameter ReferenceType NodeId id ItemStateException LocalVariableDeclaration ReferenceType PersistenceBroker VariableDeclarator broker MethodInvocation PersistenceBrokerFactory defaultPersistenceBroker TryStatement LocalVariableDeclaration ReferenceType OJBNodeState VariableDeclarator nodeState ClassCreator ReferenceType OJBNodeState MemberReference id LocalVariableDeclaration ReferenceType QueryByIdentity VariableDeclarator query ClassCreator ReferenceType QueryByIdentity MemberReference nodeState LocalVariableDeclaration ReferenceType OJBNodeState VariableDeclarator result Cast ReferenceType OJBNodeState MethodInvocation broker MemberReference query getObjectByQuery IfStatement BinaryOperation == MemberReference result Literal null BlockStatement ReturnStatement Literal false BlockStatement ReturnStatement Literal true End CatchClause CatchClauseParameter PersistenceBrokerException e ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker close End MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.PersistenceManager#exists(PropertyId)
     */ Modifier public BasicType boolean exists FormalParameter ReferenceType PropertyId id ItemStateException LocalVariableDeclaration ReferenceType PersistenceBroker VariableDeclarator broker MethodInvocation PersistenceBrokerFactory defaultPersistenceBroker TryStatement LocalVariableDeclaration ReferenceType ORMPropertyState VariableDeclarator propState ClassCreator ReferenceType ORMPropertyState MemberReference id LocalVariableDeclaration ReferenceType QueryByIdentity VariableDeclarator query ClassCreator ReferenceType QueryByIdentity MemberReference propState LocalVariableDeclaration ReferenceType ORMPropertyState VariableDeclarator result Cast ReferenceType ORMPropertyState MethodInvocation broker MemberReference query getObjectByQuery IfStatement BinaryOperation == MemberReference result Literal null BlockStatement ReturnStatement Literal false BlockStatement ReturnStatement Literal true End CatchClause CatchClauseParameter PersistenceBrokerException e ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker close End MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.PersistenceManager#exists(NodeReferencesId)
     */ Modifier public BasicType boolean exists FormalParameter ReferenceType NodeReferencesId targetId ItemStateException LocalVariableDeclaration ReferenceType PersistenceBroker VariableDeclarator broker MethodInvocation PersistenceBrokerFactory defaultPersistenceBroker TryStatement LocalVariableDeclaration ReferenceType ORMNodeReference VariableDeclarator nodeRef ClassCreator ReferenceType ORMNodeReference StatementExpression MethodInvocation nodeRef MethodInvocation targetId toString setTargetId LocalVariableDeclaration ReferenceType QueryByCriteria VariableDeclarator query ClassCreator ReferenceType QueryByCriteria MemberReference nodeRef LocalVariableDeclaration ReferenceType Iterator VariableDeclarator resultIter MethodInvocation broker MethodInvocation iterator MemberReference query getCollectionByQuery LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs ClassCreator ReferenceType NodeReferences MemberReference targetId IfStatement MethodInvocation resultIter hasNext BlockStatement ReturnStatement Literal true End ReturnStatement Literal false CatchClause CatchClauseParameter PersistenceBrokerException e ThrowStatement ClassCreator ReferenceType ItemStateException MemberReference e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker close End MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.AbstractPersistenceManager#store(NodeState)
     */ Modifier private store FormalParameter ReferenceType NodeState state FormalParameter ReferenceType PersistenceBroker broker ItemStateException StatementExpression MethodInvocation log BinaryOperation + Literal ""Request to store node "" MethodInvocation state getId debug LocalVariableDeclaration ReferenceType OJBNodeState VariableDeclarator nodeState ClassCreator ReferenceType OJBNodeState MethodInvocation state getId LocalVariableDeclaration ReferenceType QueryByIdentity VariableDeclarator query ClassCreator ReferenceType QueryByIdentity MemberReference nodeState LocalVariableDeclaration ReferenceType OJBNodeState VariableDeclarator result Cast ReferenceType OJBNodeState MethodInvocation broker MemberReference query getObjectByQuery IfStatement BinaryOperation == MemberReference result Literal null BlockStatement StatementExpression Assignment MemberReference result ClassCreator ReferenceType OJBNodeState = End StatementExpression MethodInvocation result MemberReference state fromPersistentNodeState StatementExpression MethodInvocation broker MemberReference result store MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.AbstractPersistenceManager#store(PropertyState)
     */ Modifier private store FormalParameter ReferenceType PropertyState state FormalParameter ReferenceType PersistenceBroker broker ItemStateException StatementExpression MethodInvocation log BinaryOperation + Literal ""Request to store property "" MethodInvocation state getId debug LocalVariableDeclaration ReferenceType ORMPropertyState VariableDeclarator propState ClassCreator ReferenceType ORMPropertyState MethodInvocation state getId LocalVariableDeclaration ReferenceType QueryByIdentity VariableDeclarator query ClassCreator ReferenceType QueryByIdentity MemberReference propState LocalVariableDeclaration ReferenceType ORMPropertyState VariableDeclarator result Cast ReferenceType ORMPropertyState MethodInvocation broker MemberReference query getObjectByQuery IfStatement BinaryOperation == MemberReference result Literal null BlockStatement StatementExpression Assignment MemberReference result ClassCreator ReferenceType ORMPropertyState = End StatementExpression MethodInvocation result MemberReference state fromPersistentPropertyState LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator values MethodInvocation state getValues IfStatement BinaryOperation != MemberReference values Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType InternalValue VariableDeclarator val MemberReference ArraySelector MemberReference i values IfStatement BinaryOperation != MemberReference val Literal null BlockStatement IfStatement BinaryOperation == MethodInvocation state getType MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration ReferenceType Criteria VariableDeclarator criteria ClassCreator ReferenceType Criteria StatementExpression MethodInvocation criteria Literal ""parentUUID"" MethodInvocation state getParentUUID addEqualTo StatementExpression MethodInvocation criteria Literal ""propertyName"" MethodInvocation state MethodInvocation toString getName addEqualTo StatementExpression MethodInvocation criteria Literal ""index"" ClassCreator ReferenceType Integer MemberReference i addEqualTo LocalVariableDeclaration ReferenceType QueryByCriteria VariableDeclarator blobQuery ClassCreator ReferenceType QueryByCriteria ClassReference ReferenceType ORMBlobValue MemberReference criteria LocalVariableDeclaration ReferenceType Iterator VariableDeclarator resultIter MethodInvocation broker MethodInvocation iterator MemberReference blobQuery getCollectionByQuery LocalVariableDeclaration ReferenceType ORMBlobValue VariableDeclarator ormBlobValue Literal null IfStatement MethodInvocation resultIter hasNext BlockStatement StatementExpression Assignment MemberReference ormBlobValue Cast ReferenceType ORMBlobValue MethodInvocation resultIter next = BlockStatement StatementExpression Assignment MemberReference ormBlobValue ClassCreator ReferenceType ORMBlobValue = StatementExpression MethodInvocation ormBlobValue MethodInvocation state getParentUUID setParentUUID StatementExpression MethodInvocation ormBlobValue MethodInvocation state MethodInvocation toString getName setPropertyName StatementExpression MethodInvocation ormBlobValue ClassCreator ReferenceType Integer MemberReference i setIndex End LocalVariableDeclaration ReferenceType BLOBFileValue VariableDeclarator blobVal Cast ReferenceType BLOBFileValue MethodInvocation val internalValue StatementExpression MethodInvocation result Literal """" setValues LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator out ClassCreator ReferenceType ByteArrayOutputStream TryStatement StatementExpression MethodInvocation blobVal MemberReference out spool CatchClause CatchClauseParameter Throwable t ThrowStatement ClassCreator ReferenceType ItemStateException MethodInvocation t getMessage MemberReference t StatementExpression MethodInvocation ormBlobValue ClassCreator ReferenceType Long MethodInvocation blobVal getLength setSize StatementExpression MethodInvocation ormBlobValue MethodInvocation out toByteArray setBlobValue StatementExpression MethodInvocation broker MemberReference ormBlobValue store End End End End StatementExpression MethodInvocation broker MemberReference result store MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.AbstractPersistenceManager#store(NodeReferences)
     */ Modifier private store FormalParameter ReferenceType NodeReferences refs FormalParameter ReferenceType PersistenceBroker broker ItemStateException StatementExpression MethodInvocation MemberReference refs MemberReference broker destroy LocalVariableDeclaration ReferenceType Iterator VariableDeclarator nodeRefPropIdIter MethodInvocation refs MethodInvocation iterator getReferences WhileStatement MethodInvocation nodeRefPropIdIter hasNext BlockStatement LocalVariableDeclaration ReferenceType PropertyId VariableDeclarator curPropertyId Cast ReferenceType PropertyId MethodInvocation nodeRefPropIdIter next LocalVariableDeclaration ReferenceType ORMNodeReference VariableDeclarator curNodeReference ClassCreator ReferenceType ORMNodeReference MethodInvocation refs MethodInvocation toString getTargetId MethodInvocation curPropertyId getParentUUID MethodInvocation curPropertyId MethodInvocation toString getName StatementExpression MethodInvocation broker MemberReference curNodeReference store End MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.AbstractPersistenceManager#destroy(NodeState)
     */ Modifier private destroy FormalParameter ReferenceType NodeState state FormalParameter ReferenceType PersistenceBroker broker ItemStateException StatementExpression MethodInvocation log BinaryOperation + Literal ""Deleting node "" MethodInvocation state getId debug LocalVariableDeclaration ReferenceType OJBNodeState VariableDeclarator nodeState ClassCreator ReferenceType OJBNodeState MethodInvocation state getId LocalVariableDeclaration ReferenceType QueryByIdentity VariableDeclarator query ClassCreator ReferenceType QueryByIdentity MemberReference nodeState LocalVariableDeclaration ReferenceType OJBNodeState VariableDeclarator result Cast ReferenceType OJBNodeState MethodInvocation broker MemberReference query getObjectByQuery IfStatement BinaryOperation == MemberReference result Literal null BlockStatement StatementExpression Assignment MemberReference result ClassCreator ReferenceType OJBNodeState = End StatementExpression MethodInvocation broker MemberReference result delete MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.AbstractPersistenceManager#destroy(PropertyState)
     */ Modifier private destroy FormalParameter ReferenceType PropertyState state FormalParameter ReferenceType PersistenceBroker broker ItemStateException LocalVariableDeclaration ReferenceType ORMPropertyState VariableDeclarator propState ClassCreator ReferenceType ORMPropertyState MemberReference state StatementExpression MethodInvocation broker MemberReference propState delete IfStatement BinaryOperation == MethodInvocation state getType MemberReference PropertyType BINARY BlockStatement LocalVariableDeclaration ReferenceType Criteria VariableDeclarator criteria ClassCreator ReferenceType Criteria StatementExpression MethodInvocation criteria Literal ""parentUUID"" MethodInvocation state getParentUUID addEqualTo StatementExpression MethodInvocation criteria Literal ""propertyName"" MethodInvocation state MethodInvocation toString getName addEqualTo LocalVariableDeclaration ReferenceType QueryByCriteria VariableDeclarator blobQuery ClassCreator ReferenceType QueryByCriteria ClassReference ReferenceType ORMBlobValue MemberReference criteria StatementExpression MethodInvocation broker MemberReference blobQuery deleteByQuery End MethodDeclaration /**
     * @see org.apache.jackrabbit.core.state.AbstractPersistenceManager#destroy(NodeReferences)
     */ Modifier private destroy FormalParameter ReferenceType NodeReferences refs FormalParameter ReferenceType PersistenceBroker broker ItemStateException LocalVariableDeclaration ReferenceType ORMNodeReference VariableDeclarator nodeRef ClassCreator ReferenceType ORMNodeReference StatementExpression MethodInvocation nodeRef MethodInvocation refs MethodInvocation toString getTargetId setTargetId LocalVariableDeclaration ReferenceType QueryByCriteria VariableDeclarator query ClassCreator ReferenceType QueryByCriteria MemberReference nodeRef LocalVariableDeclaration ReferenceType Iterator VariableDeclarator resultIter MethodInvocation broker MethodInvocation iterator MemberReference query getCollectionByQuery WhileStatement MethodInvocation resultIter hasNext BlockStatement LocalVariableDeclaration ReferenceType ORMNodeReference VariableDeclarator curNodeReference Cast ReferenceType ORMNodeReference MethodInvocation resultIter next StatementExpression MethodInvocation broker MemberReference curNodeReference delete End MethodDeclaration /**
     * @see PersistenceManager#createNew
     */ Modifier public ReferenceType NodeState createNew FormalParameter ReferenceType NodeId id ReturnStatement ClassCreator ReferenceType NodeState MethodInvocation id getUUID Literal null Literal null MemberReference NodeState STATUS_NEW Literal false MethodDeclaration /**
     * @see PersistenceManager#createNew
     */ Modifier public ReferenceType PropertyState createNew FormalParameter ReferenceType PropertyId id ReturnStatement ClassCreator ReferenceType PropertyState MethodInvocation id getName MethodInvocation id getParentUUID MemberReference PropertyState STATUS_NEW Literal false MethodDeclaration /**
     * @see PersistenceManager#store(ChangeLog)
     *
     * This method ensures that changes are either written completely to the
     * underlying persistence layer, or not at all.
     */ Modifier public store FormalParameter ReferenceType ChangeLog changeLog ItemStateException LocalVariableDeclaration ReferenceType PersistenceBroker VariableDeclarator broker MethodInvocation PersistenceBrokerFactory defaultPersistenceBroker TryStatement StatementExpression MethodInvocation broker beginTransaction LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation changeLog deletedStates WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation iter next IfStatement MethodInvocation state isNode BlockStatement StatementExpression MethodInvocation Cast ReferenceType NodeState MemberReference state MemberReference broker destroy BlockStatement StatementExpression MethodInvocation Cast ReferenceType PropertyState MemberReference state MemberReference broker destroy End End StatementExpression Assignment MemberReference iter MethodInvocation changeLog addedStates = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation iter next IfStatement MethodInvocation state isNode BlockStatement StatementExpression MethodInvocation Cast ReferenceType NodeState MemberReference state MemberReference broker store BlockStatement StatementExpression MethodInvocation Cast ReferenceType PropertyState MemberReference state MemberReference broker store End End StatementExpression Assignment MemberReference iter MethodInvocation changeLog modifiedStates = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator state Cast ReferenceType ItemState MethodInvocation iter next IfStatement MethodInvocation state isNode BlockStatement StatementExpression MethodInvocation Cast ReferenceType NodeState MemberReference state MemberReference broker store BlockStatement StatementExpression MethodInvocation Cast ReferenceType PropertyState MemberReference state MemberReference broker store End End StatementExpression Assignment MemberReference iter MethodInvocation changeLog modifiedRefs = WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType NodeReferences VariableDeclarator refs Cast ReferenceType NodeReferences MethodInvocation iter next IfStatement MethodInvocation refs hasReferences BlockStatement StatementExpression MethodInvocation MemberReference refs MemberReference broker store BlockStatement StatementExpression MethodInvocation MemberReference refs MemberReference broker destroy End End StatementExpression MethodInvocation broker commitTransaction CatchClause CatchClauseParameter ItemStateException e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker abortTransaction End ThrowStatement MemberReference e CatchClause CatchClauseParameter PersistenceBrokerException e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker abortTransaction End ThrowStatement ClassCreator ReferenceType ItemStateException Literal ""Unable to store"" MemberReference e IfStatement BinaryOperation != MemberReference broker Literal null StatementExpression MethodInvocation broker close End ReferenceType PersistenceManager",0
490,490,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.info Import java.util.ArrayList Import java.util.Collection Import java.util.Iterator Import java.util.ResourceBundle Import javax.jcr.Property Import javax.jcr.PropertyType Import javax.jcr.RepositoryException Import javax.jcr.Value Import javax.jcr.ValueFormatException Import org.apache.commons.chain.Context Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public abstract /**
 * List properties superclass
 */ AbstractLsProperties FieldDeclaration /** bundle */ Modifier private static ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation CommandHelper getBundle FieldDeclaration /** length of length field */ Modifier private final static BasicType int VariableDeclarator LENGTH_LENGTH Literal 8 MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public final BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration BasicType int VariableDeclarator width ArrayCreator BasicType int ArrayInitializer Literal 30 MemberReference longWidth MemberReference longWidth MemberReference LENGTH_LENGTH Literal 18 LocalVariableDeclaration ReferenceType String VariableDeclarator header ArrayCreator ReferenceType String ArrayInitializer MethodInvocation bundle Literal ""word.name"" getString MethodInvocation bundle Literal ""word.multiple"" getString MethodInvocation bundle Literal ""word.type"" getString MethodInvocation bundle Literal ""word.length"" getString MethodInvocation bundle Literal ""word.preview"" getString StatementExpression MethodInvocation PrintHelper MemberReference ctx MemberReference width MemberReference header printRow StatementExpression MethodInvocation PrintHelper MemberReference ctx MemberReference width Literal '-' printSeparatorRow LocalVariableDeclaration BasicType int VariableDeclarator index Literal 0 LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation MemberReference ctx getProperties LocalVariableDeclaration BasicType int VariableDeclarator maxItems MethodInvocation MemberReference ctx getMaxItems WhileStatement BinaryOperation && MethodInvocation iter hasNext BinaryOperation < MemberReference index MemberReference maxItems BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator p Cast ReferenceType Property MethodInvocation iter next LocalVariableDeclaration BasicType long VariableDeclarator length Literal 0 IfStatement MethodInvocation p MethodInvocation isMultiple getDefinition BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator lengths MethodInvocation p getLengths ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference lengths length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference length MemberReference ArraySelector MemberReference i lengths += End BlockStatement StatementExpression Assignment MemberReference length MethodInvocation p getLength = End LocalVariableDeclaration ReferenceType String VariableDeclarator multiple MethodInvocation Boolean MethodInvocation p MethodInvocation isMultiple getDefinition toString IfStatement MethodInvocation p MethodInvocation isMultiple getDefinition BlockStatement StatementExpression Assignment MemberReference multiple BinaryOperation + BinaryOperation + Literal ""["" MethodInvocation p MemberReference length getValues Literal ""]"" += End LocalVariableDeclaration ReferenceType Collection VariableDeclarator row ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation row MethodInvocation p getName add StatementExpression MethodInvocation row MemberReference multiple add StatementExpression MethodInvocation row MethodInvocation PropertyType MethodInvocation p getType nameFromValue add StatementExpression MethodInvocation row MethodInvocation Long MemberReference length toString add IfStatement MethodInvocation p MethodInvocation isMultiple getDefinition BlockStatement StatementExpression MethodInvocation row This MethodInvocation MemberReference p getMultiplePreview add BlockStatement StatementExpression MethodInvocation row This MethodInvocation MemberReference p getPreview add End StatementExpression MethodInvocation PrintHelper MemberReference ctx MemberReference width MemberReference row printRow StatementExpression MemberReference ++ index End StatementExpression MethodInvocation CommandHelper MethodInvocation println MemberReference ctx getOutput StatementExpression MethodInvocation MemberReference ctx MemberReference iter printFooter ReturnStatement Literal false MethodDeclaration /**
     * @param ctx
     *        the <code>Context</code>
     * @return collected <code>Property</code> s to display
     * @throws Exception
     *         if the <code>Property</code> s can't be retrieved
     */ Modifier protected abstract ReferenceType Iterator getProperties FormalParameter ReferenceType Context ctx Exception MethodDeclaration /**
     * @param property
     * @return the first 50 characters of single value properties
     * @throws RepositoryException
     */ Modifier private ReferenceType String getPreview FormalParameter ReferenceType Property p RepositoryException LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation p MethodInvocation getString getValue ReturnStatement MethodInvocation value Literal 0 MethodInvocation Math MethodInvocation value length Literal 50 min substring MethodDeclaration /**
     * @param property
     * @return a <code>Collection</code> in which element contains the first
     *         50 characters of the <code>Value</code>'s string
     *         representation
     * @throws RepositoryException
     * @throws ValueFormatException
     */ Modifier private ReferenceType Collection getMultiplePreview FormalParameter ReferenceType Property p ValueFormatException RepositoryException LocalVariableDeclaration ReferenceType Collection VariableDeclarator c ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Value VariableDeclarator values MethodInvocation p getValues ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference values length MemberReference ++ i BlockStatement TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator value MemberReference ArraySelector MemberReference i MethodInvocation getString values StatementExpression MethodInvocation c MethodInvocation value Literal 0 MethodInvocation Math MethodInvocation value length Literal 50 min substring add CatchClause CatchClauseParameter ValueFormatException e StatementExpression MethodInvocation c MethodInvocation bundle Literal ""phrase.notavailable"" getString add End ReturnStatement MemberReference c ReferenceType AbstractLs",1
78,78,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.state Import org.apache.jackrabbit.core.ItemId Import java.util.Set Import java.util.Collection InterfaceDeclaration Modifier public /**
 * <code>ItemStateStore</code> is similar to a typed <code>Map</code>:
 * <p/>
 * An <code>ItemStateStore</code> temporarily stores and retrieves
 * <code>ItemState</code> instances using their <code>ItemId</code>s as key.
 */ ItemStateStore MethodDeclaration /**
     * Returns <code>true</code> if this store contains an <code>ItemState</code>
     * object with the specified <code>id</code>.
     *
     * @param id id of <code>ItemState</code> object whose presence should be
     *           tested.
     * @return <code>true</code> if this store contains a corresponding entry,
     *         otherwise <code>false</code>.
     */ BasicType boolean contains FormalParameter ReferenceType ItemId id MethodDeclaration /**
     * Returns the <code>ItemState</code> object with the specified
     * <code>id</code> if it is present or <code>null</code> if no entry exists
     * with that <code>id</code>.
     *
     * @param id the id of the <code>ItemState</code> object to be returned.
     * @return the <code>ItemState</code> object with the specified
     *         <code>id</code> or or <code>null</code> if no entry exists
     *         with that <code>id</code>
     */ ReferenceType ItemState get FormalParameter ReferenceType ItemId id MethodDeclaration /**
     * Stores the specified <code>ItemState</code> object in the store
     * using its <code>ItemId</code> as the key.
     *
     * @param state the <code>ItemState</code> object to store
     */ put FormalParameter ReferenceType ItemState state MethodDeclaration /**
     * Removes the <code>ItemState</code> object with the specified id from
     * this store if it is present.
     *
     * @param id the id of the <code>ItemState</code> object which should be
     *           removed from this store.
     */ remove FormalParameter ReferenceType ItemId id MethodDeclaration /**
     * Removes all entries from this store.
     */ clear MethodDeclaration /**
     * Returns <code>true</code> if this store contains no entries.
     *
     * @return <code>true</code> if this store contains no entries.
     */ BasicType boolean isEmpty MethodDeclaration /**
     * Returns the number of entries in this store.
     *
     * @return number of entries in this store.
     */ BasicType int size MethodDeclaration /**
     * Returns an unmodifiable set view of the keys (i.e. <code>ItemId</code>
     * objects) contained in this store.
     *
     * @return a set view of the keys contained in this store.
     */ ReferenceType Set keySet MethodDeclaration /**
     * Returns an unmodifiable collection view of the values (i.e.
     * <code>ItemState</code> objects) contained in this store.
     *
     * @return a collection view of the values contained in this store.
     */ ReferenceType Collection values",0
217,217,"CompilationUnit PackageDeclaration org.apache.jackrabbit.taglib Import javax.jcr.Node Import javax.jcr.RepositoryException Import javax.jcr.version.Version Import javax.servlet.jsp.JspException Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory ClassDeclaration Modifier public /**
 * Iterates over the versions of the given node
 * 
 * @author <a href=""mailto:edgarpoce@gmail.com"">Edgar Poce </a>
 */ VersionsTag FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType VersionsTag getLog FieldDeclaration /** tag name */ Modifier public static ReferenceType String VariableDeclarator TAG_NAME Literal ""versions"" MethodDeclaration /**
     * Override superclass getNode.
     * @return the baseVersion of the given Node
     */ Modifier protected ReferenceType Node getNode JspException RepositoryException LocalVariableDeclaration ReferenceType Node VariableDeclarator node SuperMethodInvocation getNode LocalVariableDeclaration ReferenceType Version VariableDeclarator version MethodInvocation node getBaseVersion ReturnStatement MemberReference version ReferenceType NodesTag",1
292,292,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.io.ByteArrayInputStream Import java.io.IOException Import java.rmi.RemoteException Import javax.jcr.NamespaceRegistry Import javax.jcr.RepositoryException Import javax.jcr.Workspace Import javax.jcr.nodetype.NodeTypeManager Import javax.jcr.observation.ObservationManager Import javax.jcr.query.QueryManager Import org.apache.jackrabbit.rmi.remote.RemoteNamespaceRegistry Import org.apache.jackrabbit.rmi.remote.RemoteNodeTypeManager Import org.apache.jackrabbit.rmi.remote.RemoteObservationManager Import org.apache.jackrabbit.rmi.remote.RemoteQueryManager Import org.apache.jackrabbit.rmi.remote.RemoteWorkspace ClassDeclaration Modifier public /**
 * Remote adapter for the JCR {@link Workspace Workspace} interface.
 * This class makes a local workspace available as an RMI service using the
 * {@link RemoteWorkspace RemoteWorkspace} interface.
 *
 * @see Workspace
 * @see RemoteWorkspace
 */ ServerWorkspace FieldDeclaration /** The adapted local workspace. */ Modifier private ReferenceType Workspace VariableDeclarator workspace FieldDeclaration /**
     * The remote observation manager for this workspace. This field is assigned
     * on demand by the first call to {@link #getObservationManager()}. The
     * assumption is that there is only one observation manager instance per
     * workspace and that each call to the
     * <code>Workspace.getObservationManager()</code> method of a single
     * workspace will allways return the same object.
     */ Modifier private ReferenceType RemoteObservationManager VariableDeclarator remoteObservationManager ConstructorDeclaration Modifier public /**
     * Creates a remote adapter for the given local workspace.
     *
     * @param workspace local workspace
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerWorkspace FormalParameter ReferenceType Workspace workspace FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression SuperConstructorInvocation MemberReference factory StatementExpression Assignment This MemberReference workspace MemberReference workspace = MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getName RemoteException ReturnStatement MethodInvocation workspace getName MethodDeclaration /** {@inheritDoc} */ Modifier public copy FormalParameter ReferenceType String from FormalParameter ReferenceType String to RepositoryException RemoteException TryStatement StatementExpression MethodInvocation workspace MemberReference from MemberReference to copy CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public copy FormalParameter ReferenceType String workspace FormalParameter ReferenceType String from FormalParameter ReferenceType String to RepositoryException RemoteException TryStatement StatementExpression This MemberReference workspace MethodInvocation MemberReference workspace MemberReference from MemberReference to copy CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public clone FormalParameter ReferenceType String workspace FormalParameter ReferenceType String from FormalParameter ReferenceType String to FormalParameter BasicType boolean removeExisting RepositoryException RemoteException TryStatement StatementExpression This MemberReference workspace MethodInvocation MemberReference workspace MemberReference from MemberReference to MemberReference removeExisting clone CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public move FormalParameter ReferenceType String from FormalParameter ReferenceType String to RepositoryException RemoteException TryStatement StatementExpression MethodInvocation workspace MemberReference from MemberReference to move CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteNodeTypeManager getNodeTypeManager RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType NodeTypeManager VariableDeclarator manager MethodInvocation workspace getNodeTypeManager ReturnStatement MethodInvocation MethodInvocation MemberReference manager getRemoteNodeTypeManager getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteNamespaceRegistry getNamespaceRegistry RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType NamespaceRegistry VariableDeclarator registry MethodInvocation workspace getNamespaceRegistry ReturnStatement MethodInvocation MethodInvocation MemberReference registry getRemoteNamespaceRegistry getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteQueryManager getQueryManager RepositoryException RemoteException TryStatement LocalVariableDeclaration ReferenceType QueryManager VariableDeclarator queryManager MethodInvocation workspace getQueryManager ReturnStatement MethodInvocation MethodInvocation MemberReference queryManager getRemoteQueryManager getFactory CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType RemoteObservationManager getObservationManager RepositoryException RemoteException TryStatement IfStatement BinaryOperation == MemberReference remoteObservationManager Literal null BlockStatement LocalVariableDeclaration ReferenceType ObservationManager VariableDeclarator observationManager MethodInvocation workspace getObservationManager StatementExpression Assignment MemberReference remoteObservationManager MethodInvocation MethodInvocation MemberReference observationManager getRemoteObservationManager getFactory = End ReturnStatement MemberReference remoteObservationManager CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public ReferenceType String getAccessibleWorkspaceNames RepositoryException RemoteException TryStatement ReturnStatement MethodInvocation workspace getAccessibleWorkspaceNames CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException MethodDeclaration /** {@inheritDoc} */ Modifier public importXML FormalParameter ReferenceType String path FormalParameter BasicType byte xml FormalParameter BasicType int uuidBehaviour IOException RepositoryException RemoteException TryStatement StatementExpression MethodInvocation workspace MemberReference path ClassCreator ReferenceType ByteArrayInputStream MemberReference xml MemberReference uuidBehaviour importXML CatchClause CatchClauseParameter RepositoryException ex ThrowStatement MethodInvocation MemberReference ex getRepositoryException ReferenceType ServerObject ReferenceType RemoteWorkspace",1
323,323,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.observation Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.state.ChangeLog Import java.util.HashSet Import java.util.Iterator Import java.util.List ClassDeclaration Modifier public /**
 * This Class implements an observation dispatcher, that delegates events to
 * a set of underlying dispatchers.
 */ DelegatingObservationDispatcher FieldDeclaration /**
     * the set of dispatchers
     */ Modifier private final ReferenceType HashSet VariableDeclarator dispatchers ClassCreator ReferenceType HashSet MethodDeclaration /**
     * Adds a new observation factory to the set of dispatchers
     *
     * @param disp
     */ Modifier public addDispatcher FormalParameter ReferenceType ObservationManagerFactory disp StatementExpression MethodInvocation dispatchers MemberReference disp add MethodDeclaration /**
     * Removes a observation factory from the set of dispatchers
     *
     * @param disp
     */ Modifier public removeDispatcher FormalParameter ReferenceType ObservationManagerFactory disp StatementExpression MethodInvocation dispatchers MemberReference disp remove MethodDeclaration /**
     * Creates an <code>EventStateCollection</code> tied to the session
     * given as argument.
     *
     * @param session event source
     * @return new <code>EventStateCollection</code> instance
     */ Modifier public ReferenceType EventStateCollection createEventStateCollection FormalParameter ReferenceType SessionImpl session ReturnStatement ClassCreator ReferenceType EventStateCollection This MemberReference session MethodDeclaration /**
     * {@inheritDoc}
     */ prepareEvents FormalParameter ReferenceType EventStateCollection events MethodDeclaration /**
     * {@inheritDoc}
     */ prepareDeleted FormalParameter ReferenceType EventStateCollection events FormalParameter ReferenceType ChangeLog changes MethodDeclaration /**
     * {@inheritDoc}
     */ dispatchEvents FormalParameter ReferenceType EventStateCollection events StatementExpression MethodInvocation MethodInvocation events getEvents MethodInvocation events getSession dispatch MethodDeclaration /**
     * Dispatchers a list of events to all registered dispatchers. A new
     * {@link EventStateCollection} is created for every dispatcher, fille with
     * the given event list and then dispatched.
     *
     * @param eventList
     * @param session
     */ Modifier public dispatch FormalParameter ReferenceType List eventList FormalParameter ReferenceType SessionImpl session LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation dispatchers iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType ObservationManagerFactory VariableDeclarator fac Cast ReferenceType ObservationManagerFactory MethodInvocation iter next LocalVariableDeclaration ReferenceType EventStateCollection VariableDeclarator events ClassCreator ReferenceType EventStateCollection MemberReference fac MemberReference session StatementExpression MethodInvocation events MemberReference eventList addAll StatementExpression MethodInvocation events prepare StatementExpression MethodInvocation events dispatch End ReferenceType EventDispatcher",1
288,288,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.util Import org.w3c.dom.Attr Import org.w3c.dom.CharacterData Import org.w3c.dom.Document Import org.w3c.dom.Element Import org.w3c.dom.NamedNodeMap Import org.w3c.dom.Node Import org.w3c.dom.NodeList Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.DocumentBuilderFactory Import java.io.IOException Import java.io.InputStream Import java.util.Properties ClassDeclaration Modifier public final /**
 * Document walker class. This class provides an intuitive
 * interface for traversing a parsed DOM document.
 */ DOMWalker FieldDeclaration /** Static factory for creating stream to DOM transformers. */ Modifier private final static ReferenceType DocumentBuilderFactory VariableDeclarator factory MethodInvocation DocumentBuilderFactory newInstance FieldDeclaration /** The DOM document being traversed by this walker. */ Modifier private final ReferenceType Document VariableDeclarator document FieldDeclaration /** The current element. */ Modifier private ReferenceType Element VariableDeclarator current ConstructorDeclaration Modifier public /**
     * Creates a walker for traversing a DOM document read from the given
     * input stream. The root element of the document is set as the current
     * element.
     *
     * @param xml XML input stream
     * @throws IOException if a document cannot be read from the stream
     */ DOMWalker FormalParameter ReferenceType InputStream xml IOException TryStatement LocalVariableDeclaration ReferenceType DocumentBuilder VariableDeclarator builder MethodInvocation factory newDocumentBuilder StatementExpression Assignment MemberReference document MethodInvocation builder MemberReference xml parse = StatementExpression Assignment MemberReference current MethodInvocation document getDocumentElement = CatchClause CatchClauseParameter IOException e ThrowStatement MemberReference e CatchClause CatchClauseParameter Exception e ThrowStatement Cast ReferenceType IOException ClassCreator MethodInvocation MemberReference e initCause ReferenceType IOException MethodInvocation e getMessage MethodDeclaration /**
     * Returns the namespace mappings defined in the current element.
     * The returned property set contains the prefix to namespace
     * mappings specified by the <code>xmlns</code> attributes of the
     * current element.
     *
     * @return prefix to namespace mappings of the current element
     */ Modifier public ReferenceType Properties getNamespaces LocalVariableDeclaration ReferenceType Properties VariableDeclarator namespaces ClassCreator ReferenceType Properties LocalVariableDeclaration ReferenceType NamedNodeMap VariableDeclarator attributes MethodInvocation current getAttributes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation attributes getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Attr VariableDeclarator attribute Cast ReferenceType Attr MethodInvocation attributes MemberReference i item IfStatement MethodInvocation attribute MethodInvocation Literal ""xmlns:"" startsWith getName BlockStatement StatementExpression MethodInvocation namespaces MethodInvocation attribute MethodInvocation Literal 6 substring getName MethodInvocation attribute getValue setProperty End End ReturnStatement MemberReference namespaces MethodDeclaration /**
     * Returns the name of the current element.
     *
     * @return element name
     */ Modifier public ReferenceType String getName ReturnStatement MethodInvocation current getNodeName MethodDeclaration /**
     * Returns the value of the named attribute of the current element.
     *
     * @param name attribute name
     * @return attribute value, or <code>null</code> if not found
     */ Modifier public ReferenceType String getAttribute FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType Attr VariableDeclarator attribute MethodInvocation current MemberReference name getAttributeNode IfStatement BinaryOperation != MemberReference attribute Literal null BlockStatement ReturnStatement MethodInvocation attribute getValue BlockStatement ReturnStatement Literal null End MethodDeclaration /**
     * Returns the text content of the current element.
     *
     * @return text content
     */ Modifier public ReferenceType String getContent LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator content ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType NodeList VariableDeclarator nodes MethodInvocation current getChildNodes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nodes getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator node MethodInvocation nodes MemberReference i item IfStatement BinaryOperation == MethodInvocation node getNodeType MemberReference Node TEXT_NODE BlockStatement StatementExpression MethodInvocation content Cast ReferenceType CharacterData MemberReference node append End End ReturnStatement MethodInvocation content toString MethodDeclaration /**
     * Enters the named child element. If the named child element is
     * found, then it is made the current element and <code>true</code>
     * is returned. Otherwise the current element is not changed and
     * <code>false</code> is returned.
     * <p>
     * The standard call sequence for this method is show below.
     * <pre>
     *     DOMWalker walker = ...;
     *     if (walker.enterElement(""..."")) {
     *         ...;
     *         walker.leaveElement();
     *     }
     * </pre>
     *
     * @param name child element name
     * @return <code>true</code> if the element was entered,
     *         <code>false</code> otherwise
     */ Modifier public BasicType boolean enterElement FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType NodeList VariableDeclarator children MethodInvocation current getChildNodes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation children getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child MethodInvocation children MemberReference i item IfStatement BinaryOperation && BinaryOperation == MethodInvocation child getNodeType MemberReference Node ELEMENT_NODE MethodInvocation name MethodInvocation child getNodeName equals BlockStatement StatementExpression Assignment MemberReference current Cast ReferenceType Element MemberReference child = ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * Leaves the current element. The parent element is set as the new
     * current element.
     *
     * @see #enterElement(String)
     */ Modifier public leaveElement StatementExpression Assignment MemberReference current Cast ReferenceType Element MethodInvocation current getParentNode = MethodDeclaration /**
     * Iterates through the named child elements over multiple calls.
     * This method makes it possible to use the following code to
     * walk through all the child elements with the given name.
     * <pre>
     *     DOMWalker walker = ...;
     *     while (walker.iterateElements(""..."")) {
     *         ...;
     *     }
     * </pre>
     * <p>
     * <strong>WARNING:</strong> This method should only be used when
     * <code>walker.getName()</code> does not equal <code>name</code> when
     * the while loop is started. Otherwise the walker will not be positioned
     * at the same node when the while loop ends.
     *
     * @param name name of the iterated elements
     * @return <code>true</code> if another iterated element was entered, or
     *         <code>false</code> if no more iterated elements were found
     *         and the original element is restored as the current element
     */ Modifier public BasicType boolean iterateElements FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType Node VariableDeclarator next IfStatement MethodInvocation name MethodInvocation current getNodeName equals BlockStatement StatementExpression Assignment MemberReference next MethodInvocation current getNextSibling = BlockStatement StatementExpression Assignment MemberReference next MethodInvocation current getFirstChild = End WhileStatement BinaryOperation != MemberReference next Literal null BlockStatement IfStatement BinaryOperation && BinaryOperation == MethodInvocation next getNodeType MemberReference Node ELEMENT_NODE MethodInvocation name MethodInvocation next getNodeName equals BlockStatement StatementExpression Assignment MemberReference current Cast ReferenceType Element MemberReference next = ReturnStatement Literal true BlockStatement StatementExpression Assignment MemberReference next MethodInvocation next getNextSibling = End End IfStatement MethodInvocation name MethodInvocation current getNodeName equals BlockStatement StatementExpression Assignment MemberReference current Cast ReferenceType Element MethodInvocation current getParentNode = End ReturnStatement Literal false",1
764,764,,1
312,312,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.server Import java.rmi.RemoteException Import java.rmi.server.UnicastRemoteObject Import javax.jcr.AccessDeniedException Import javax.jcr.InvalidItemStateException Import javax.jcr.InvalidSerializedDataException Import javax.jcr.Item Import javax.jcr.ItemExistsException Import javax.jcr.ItemNotFoundException Import javax.jcr.LoginException Import javax.jcr.MergeException Import javax.jcr.NamespaceException Import javax.jcr.NoSuchWorkspaceException Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.Property Import javax.jcr.ReferentialIntegrityException Import javax.jcr.RepositoryException Import javax.jcr.UnsupportedRepositoryOperationException Import javax.jcr.ValueFormatException Import javax.jcr.lock.LockException Import javax.jcr.nodetype.ConstraintViolationException Import javax.jcr.nodetype.NoSuchNodeTypeException Import javax.jcr.nodetype.NodeType Import javax.jcr.query.InvalidQueryException Import javax.jcr.version.Version Import javax.jcr.version.VersionException Import javax.jcr.version.VersionHistory Import org.apache.jackrabbit.rmi.remote.RemoteItem Import org.apache.jackrabbit.rmi.remote.RemoteNode Import org.apache.jackrabbit.rmi.remote.RemoteNodeType ClassDeclaration Modifier public /**
 * Base class for remote adapters. The purpose of this class is to
 * centralize the handling of the RemoteAdapterFactory instance used
 * to instantiate new server adapters.
 */ ServerObject FieldDeclaration /** Factory for creating server adapters. */ Modifier private ReferenceType RemoteAdapterFactory VariableDeclarator factory ConstructorDeclaration Modifier protected /**
     * Creates a basic server adapter that uses the given factory
     * to create new adapters.
     *
     * @param factory remote adapter factory
     * @throws RemoteException on RMI errors
     */ ServerObject FormalParameter ReferenceType RemoteAdapterFactory factory RemoteException StatementExpression Assignment This MemberReference factory MemberReference factory = MethodDeclaration /**
     * Returns the remote adapter factory used to create new adapters.
     *
     * @return remote adapter factory
     */ Modifier protected ReferenceType RemoteAdapterFactory getFactory ReturnStatement MemberReference factory MethodDeclaration /**
     * Returns a cleaned version of the given exception. In some cases
     * the underlying repository implementation may throw exceptions
     * that are either unserializable, use exception subclasses that are
     * only locally available, contain references to unserializable or
     * only locally available classes. This method returns a cleaned
     * version of such an exception. The returned exception contains only
     * the message string from the original exception, and uses the public
     * JCR exception class that most specifically matches the original
     * exception.
     *
     * @param ex the original exception
     * @return clean exception
     */ Modifier protected ReferenceType RepositoryException getRepositoryException FormalParameter ReferenceType RepositoryException ex IfStatement BinaryOperation instanceof MemberReference ex ReferenceType AccessDeniedException BlockStatement ReturnStatement ClassCreator ReferenceType AccessDeniedException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType ConstraintViolationException BlockStatement ReturnStatement ClassCreator ReferenceType ConstraintViolationException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType InvalidItemStateException BlockStatement ReturnStatement ClassCreator ReferenceType InvalidItemStateException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType InvalidQueryException BlockStatement ReturnStatement ClassCreator ReferenceType InvalidQueryException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType InvalidSerializedDataException BlockStatement ReturnStatement ClassCreator ReferenceType InvalidSerializedDataException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType ItemExistsException BlockStatement ReturnStatement ClassCreator ReferenceType ItemExistsException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType ItemNotFoundException BlockStatement ReturnStatement ClassCreator ReferenceType ItemNotFoundException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType LockException BlockStatement ReturnStatement ClassCreator ReferenceType LockException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType LoginException BlockStatement ReturnStatement ClassCreator ReferenceType LoginException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType MergeException BlockStatement ReturnStatement ClassCreator ReferenceType MergeException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType NamespaceException BlockStatement ReturnStatement ClassCreator ReferenceType NamespaceException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType NoSuchNodeTypeException BlockStatement ReturnStatement ClassCreator ReferenceType NoSuchNodeTypeException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType NoSuchWorkspaceException BlockStatement ReturnStatement ClassCreator ReferenceType NoSuchWorkspaceException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType PathNotFoundException BlockStatement ReturnStatement ClassCreator ReferenceType PathNotFoundException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType ReferentialIntegrityException BlockStatement ReturnStatement ClassCreator ReferenceType ReferentialIntegrityException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType UnsupportedRepositoryOperationException BlockStatement ReturnStatement ClassCreator ReferenceType UnsupportedRepositoryOperationException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType ValueFormatException BlockStatement ReturnStatement ClassCreator ReferenceType ValueFormatException MethodInvocation ex getMessage IfStatement BinaryOperation instanceof MemberReference ex ReferenceType VersionException BlockStatement ReturnStatement ClassCreator ReferenceType VersionException MethodInvocation ex getMessage BlockStatement ReturnStatement ClassCreator ReferenceType RepositoryException MethodInvocation ex getMessage End End End End End End End End End End End End End End End End End End MethodDeclaration /**
     * Utility method for creating a remote reference for a local item.
     * Unlike the factory method for creating remote item references, this
     * method introspects the type of the local item and returns the
     * corresponding node, property, or item remote reference using the
     * remote adapter factory.
     * <p>
     * If the <code>item</code>, this method calls the
     * {@link #getRemoteNode(Node)} to return the correct remote type.
     *
     * @param item local node, property, or item
     * @return remote node, property, or item reference
     * @throws RemoteException on RMI errors
     */ Modifier protected ReferenceType RemoteItem getRemoteItem FormalParameter ReferenceType Item item RemoteException IfStatement BinaryOperation instanceof MemberReference item ReferenceType Property BlockStatement ReturnStatement MethodInvocation factory Cast ReferenceType Property MemberReference item getRemoteProperty IfStatement BinaryOperation instanceof MemberReference item ReferenceType Node BlockStatement ReturnStatement MethodInvocation Cast ReferenceType Node MemberReference item getRemoteNode BlockStatement ReturnStatement MethodInvocation factory MemberReference item getRemoteItem End End MethodDeclaration /**
     * Utility method for creating a remote reference for a local node.
     * Unlike the factory method for creating remote node references, this
     * method introspects the type of the local node and returns the
     * corresponding node, version, or version history remote reference using
     * the remote adapter factory.
     *
     * @param node local version, versionhistory, or normal node
     * @return remote node, property, or item reference
     * @throws RemoteException on RMI errors
     */ Modifier protected ReferenceType RemoteNode getRemoteNode FormalParameter ReferenceType Node node RemoteException IfStatement BinaryOperation instanceof MemberReference node ReferenceType Version BlockStatement ReturnStatement MethodInvocation factory Cast ReferenceType Version MemberReference node getRemoteVersion IfStatement BinaryOperation instanceof MemberReference node ReferenceType VersionHistory BlockStatement ReturnStatement MethodInvocation factory Cast ReferenceType VersionHistory MemberReference node getRemoteVersionHistory BlockStatement ReturnStatement MethodInvocation factory MemberReference node getRemoteNode End End MethodDeclaration /**
     * Utility method for creating an array of remote references for
     * local node types. The remote references are created using the
     * remote adapter factory.
     * <p>
     * A <code>null</code> input is treated as an empty array.
     *
     * @param types local node type array
     * @return remote node type array
     * @throws RemoteException on RMI errors
     */ Modifier protected ReferenceType RemoteNodeType getRemoteNodeTypeArray FormalParameter ReferenceType NodeType types RemoteException IfStatement BinaryOperation != MemberReference types Literal null BlockStatement LocalVariableDeclaration ReferenceType RemoteNodeType VariableDeclarator remotes ArrayCreator ReferenceType RemoteNodeType MemberReference types length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference types length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i remotes MethodInvocation factory MemberReference ArraySelector MemberReference i types getRemoteNodeType = End ReturnStatement MemberReference remotes BlockStatement ReturnStatement ArrayCreator ReferenceType RemoteNodeType Literal 0 End ReferenceType UnicastRemoteObject",1
482,482,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.observation Import javax.jcr.Session Import javax.jcr.observation.EventListener Import javax.jcr.observation.EventListenerIterator Import java.util.ArrayList Import java.util.Collection Import java.util.Iterator Import java.util.NoSuchElementException ClassDeclaration /**
 */ EventListenerIteratorImpl FieldDeclaration /**
     * This iterator will return {@link EventListener}s registered by this
     * <code>Session</code>.
     */ Modifier private final ReferenceType Session VariableDeclarator session FieldDeclaration /**
     * Iterator over {@link EventConsumer} instances
     */ Modifier private final ReferenceType Iterator VariableDeclarator consumers FieldDeclaration /**
     * The next <code>EventListener</code> that belongs to the session
     * passed in the constructor of this <code>EventListenerIteratorImpl</code>.
     */ Modifier private ReferenceType EventListener VariableDeclarator next FieldDeclaration /**
     * Current position
     */ Modifier private BasicType long VariableDeclarator pos Literal 0 ConstructorDeclaration /**
     * Creates a new <code>EventListenerIteratorImpl</code>.
     *
     * @param session
     * @param sConsumers synchronous consumers.
     * @param aConsumers asynchronous consumers.
     * @throws NullPointerException if <code>ticket</code> or <code>consumer</code>
     *                              is <code>null</code>.
     */ EventListenerIteratorImpl FormalParameter ReferenceType Session session FormalParameter ReferenceType Collection sConsumers FormalParameter ReferenceType Collection aConsumers NullPointerException IfStatement BinaryOperation == MemberReference session Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""session"" End IfStatement BinaryOperation == MemberReference sConsumers Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""consumers"" End IfStatement BinaryOperation == MemberReference aConsumers Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""consumers"" End StatementExpression Assignment This MemberReference session MemberReference session = LocalVariableDeclaration ReferenceType Collection VariableDeclarator allConsumers ClassCreator ReferenceType ArrayList MemberReference sConsumers StatementExpression MethodInvocation allConsumers MemberReference aConsumers addAll StatementExpression Assignment This MemberReference consumers MethodInvocation allConsumers iterator = StatementExpression MethodInvocation fetchNext MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType EventListener nextEventListener IfStatement BinaryOperation == MemberReference next Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NoSuchElementException End LocalVariableDeclaration ReferenceType EventListener VariableDeclarator l MemberReference next StatementExpression MethodInvocation fetchNext StatementExpression MemberReference ++ pos ReturnStatement MemberReference l MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public skip FormalParameter BasicType long skipNum WhileStatement BinaryOperation > MemberReference -- skipNum Literal 0 BlockStatement StatementExpression MethodInvocation next End MethodDeclaration /**
     * Always returns <code>-1</code>.
     *
     * @return <code>-1</code>.
     */ Modifier public BasicType long getSize ReturnStatement Literal - 1 MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType long getPosition ReturnStatement MemberReference pos MethodDeclaration /**
     * Remove is not supported on this Iterator.
     *
     * @throws UnsupportedOperationException
     */ Modifier public remove ThrowStatement ClassCreator ReferenceType UnsupportedOperationException Literal ""EventListenerIterator.remove()"" MethodDeclaration /**
     * Returns <tt>true</tt> if the iteration has more elements. (In other
     * words, returns <tt>true</tt> if <tt>next</tt> would return an element
     * rather than throwing an exception.)
     *
     * @return <tt>true</tt> if the consumers has more elements.
     */ Modifier public BasicType boolean hasNext ReturnStatement BinaryOperation != MemberReference next Literal null MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public ReferenceType Object next ReturnStatement MethodInvocation nextEventListener MethodDeclaration /**
     * Fetches the next {@link javax.jcr.observation.EventListener} associated
     * with the <code>Session</code> passed in the constructor of this
     * <code>EventListenerIteratorImpl</code> from all register
     * <code>EventListener</code>s
     */ Modifier private fetchNext LocalVariableDeclaration ReferenceType EventConsumer VariableDeclarator consumer StatementExpression Assignment MemberReference next Literal null = WhileStatement BinaryOperation && BinaryOperation == MemberReference next Literal null MethodInvocation consumers hasNext BlockStatement StatementExpression Assignment MemberReference consumer Cast ReferenceType EventConsumer MethodInvocation consumers next = IfStatement MethodInvocation consumer MethodInvocation MemberReference session equals getSession BlockStatement StatementExpression Assignment MemberReference next MethodInvocation consumer getEventListener = End End ReferenceType EventListenerIterator",1
538,538,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Property Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Read the <code>Value</code> of the given <code>Property</code> and store
 * it under the given <code>Context</code> attribute.
 */ ReadValue FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ReadValue getLog FieldDeclaration /** property path key */ Modifier private ReferenceType String VariableDeclarator srcPathKey Literal ""srcPath"" FieldDeclaration /** value index key */ Modifier private ReferenceType String VariableDeclarator srcIndexKey Literal ""srcIndex"" FieldDeclaration /** destination context attribute */ Modifier private ReferenceType String VariableDeclarator destKey Literal ""dest"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator path Cast ReferenceType String MethodInvocation ctx This MemberReference srcPathKey get LocalVariableDeclaration BasicType int VariableDeclarator index Literal 1 IfStatement BinaryOperation != MethodInvocation ctx This MemberReference srcIndexKey get Literal null BlockStatement StatementExpression Assignment MemberReference index MethodInvocation Integer MethodInvocation intValue Cast ReferenceType String MethodInvocation ctx This MemberReference srcIndexKey get valueOf = End LocalVariableDeclaration ReferenceType String VariableDeclarator dest Cast ReferenceType String MethodInvocation ctx This MemberReference destKey get IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""reading value from "" MemberReference path Literal ""["" MemberReference index Literal ""] to "" MemberReference dest debug End LocalVariableDeclaration ReferenceType Property VariableDeclarator p Cast ReferenceType Property MethodInvocation CommandHelper MemberReference ctx MemberReference path getItem IfStatement MethodInvocation p MethodInvocation isMultiple getDefinition BlockStatement StatementExpression MethodInvocation ctx MemberReference dest MethodInvocation p ArraySelector MemberReference index MethodInvocation getString getValues put BlockStatement StatementExpression MethodInvocation ctx MemberReference dest MethodInvocation p MethodInvocation getString getValue put End ReturnStatement Literal false MethodDeclaration /**
     * @return the destination key
     */ Modifier public ReferenceType String getDestKey ReturnStatement MemberReference destKey MethodDeclaration /**
     * @param destKey
     *        the destination key to set
     */ Modifier public setDestKey FormalParameter ReferenceType String destKey StatementExpression Assignment This MemberReference destKey MemberReference destKey = MethodDeclaration /**
     * @return the source index key
     */ Modifier public ReferenceType String getSrcIndexKey ReturnStatement MemberReference srcIndexKey MethodDeclaration /**
     * @param srcIndexKey
     *        the source index key to set
     */ Modifier public setSrcIndexKey FormalParameter ReferenceType String srcIndexKey StatementExpression Assignment This MemberReference srcIndexKey MemberReference srcIndexKey = MethodDeclaration /**
     * @return the source path key
     */ Modifier public ReferenceType String getSrcPathKey ReturnStatement MemberReference srcPathKey MethodDeclaration /**
     * @param srcPathKey
     *        the source path key to set
     */ Modifier public setSrcPathKey FormalParameter ReferenceType String srcPathKey StatementExpression Assignment This MemberReference srcPathKey MemberReference srcPathKey = ReferenceType Command",0
305,305,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.cli Import java.io.IOException Import java.io.InputStream Import java.net.URL Import java.util.ArrayList Import java.util.Collection Import java.util.HashMap Import java.util.Iterator Import java.util.List Import java.util.Map Import java.util.ResourceBundle Import java.util.TreeMap Import org.apache.commons.digester.Digester Import org.apache.commons.digester.xmlrules.DigesterLoader Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * Command line factory
 */ CommandLineFactory FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType CommandLineFactory getLog FieldDeclaration /** resource bundle */ Modifier private static ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation CommandHelper getBundle FieldDeclaration /** file name */ Modifier private final static ReferenceType String VariableDeclarator COMMAND_LINE_FILE Literal ""command-line.xml"" FieldDeclaration /** rules file name */ Modifier private final static ReferenceType String VariableDeclarator COMMAND_LINE_RULES_FILE Literal ""command-line-rules.xml"" FieldDeclaration /** singleton */ Modifier private static ReferenceType CommandLineFactory VariableDeclarator singleton FieldDeclaration /** command cache */ Modifier private ReferenceType Map VariableDeclarator cache ClassCreator ReferenceType TreeMap FieldDeclaration /** alias cache */ Modifier private ReferenceType Map VariableDeclarator alias ClassCreator ReferenceType HashMap ConstructorDeclaration Modifier private /**
     * private constructor
     */ CommandLineFactory StatementExpression SuperConstructorInvocation MethodDeclaration /**
     * @return singleton
     */ Modifier public static ReferenceType CommandLineFactory getInstance IfStatement BinaryOperation == MemberReference singleton Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType CommandLineFactory VariableDeclarator factory ClassCreator ReferenceType CommandLineFactory StatementExpression MethodInvocation factory init StatementExpression Assignment MemberReference singleton MemberReference factory = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation log MethodInvocation bundle Literal ""exception.unabletoinit"" getString MemberReference e error StatementExpression MethodInvocation e printStackTrace End ReturnStatement MemberReference singleton MethodDeclaration /**
     * @return all registered <code>Command</code> s
     */ Modifier public ReferenceType Collection getCommandLines LocalVariableDeclaration ReferenceType List VariableDeclarator cls ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation cache MethodInvocation iterator values WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType CommandLine VariableDeclarator cl Cast ReferenceType CommandLine MethodInvocation iter next StatementExpression MethodInvocation cls MethodInvocation cl clone add End ReturnStatement MemberReference cls MethodDeclaration /**
     * Get the <code>Command</code> for the given name
     * @param name
     *        the <code>Command</code> name
     * @return a new Command Line Instance for the given command name
     * @throws JcrParserException
     *         if there's no <code>Command</code> for the given name
     */ Modifier public ReferenceType CommandLine getCommandLine FormalParameter ReferenceType String name JcrParserException StatementExpression MethodInvocation log BinaryOperation + Literal ""lookup command "" MemberReference name debug LocalVariableDeclaration ReferenceType CommandLine VariableDeclarator original Cast ReferenceType CommandLine MethodInvocation cache MemberReference name get IfStatement BinaryOperation == MemberReference original Literal null BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""lookup alias "" MemberReference name debug StatementExpression Assignment MemberReference original Cast ReferenceType CommandLine MethodInvocation alias MemberReference name get = End IfStatement BinaryOperation == MemberReference original Literal null BlockStatement StatementExpression MethodInvocation log BinaryOperation + Literal ""command not found "" MemberReference name warn ThrowStatement ClassCreator ReferenceType JcrParserException Literal ""exception.no.command.for.name"" ArrayCreator ReferenceType String ArrayInitializer MemberReference name End ReturnStatement Cast ReferenceType CommandLine MethodInvocation original clone MethodDeclaration /**
     * parses the configuration file
     * @throws ConfigurationException
     *         an <code>Exception</code> occurs while parsing
     */ Modifier private init ConfigurationException TryStatement LocalVariableDeclaration ReferenceType URL VariableDeclarator rulesFile MethodInvocation MethodInvocation MemberReference COMMAND_LINE_RULES_FILE getResource getClass LocalVariableDeclaration ReferenceType URL VariableDeclarator clFile MethodInvocation MethodInvocation MemberReference COMMAND_LINE_FILE getResource getClass LocalVariableDeclaration ReferenceType Digester VariableDeclarator digester MethodInvocation DigesterLoader MemberReference rulesFile createDigester LocalVariableDeclaration ReferenceType List VariableDeclarator cls ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation digester MemberReference cls push LocalVariableDeclaration ReferenceType InputStream VariableDeclarator input MethodInvocation clFile openStream StatementExpression MethodInvocation digester MemberReference input parse StatementExpression MethodInvocation input close LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation cls iterator WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType CommandLine VariableDeclarator cl Cast ReferenceType CommandLine MethodInvocation iter next StatementExpression MethodInvocation cache MethodInvocation cl getName MemberReference cl put LocalVariableDeclaration ReferenceType Iterator VariableDeclarator aliasIt MethodInvocation cl MethodInvocation iterator getAlias WhileStatement MethodInvocation aliasIt hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator aliasName Cast ReferenceType String MethodInvocation aliasIt next IfStatement MethodInvocation alias MemberReference aliasName containsKey BlockStatement ThrowStatement ClassCreator ReferenceType ConfigurationException Literal ""exception.alias.already.in.use"" ArrayCreator ReferenceType String ArrayInitializer MemberReference aliasName MethodInvocation cl getName End StatementExpression MethodInvocation alias MemberReference aliasName MemberReference cl put End End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType ConfigurationException MethodInvocation e getLocalizedMessage CatchClause CatchClauseParameter SAXException e ThrowStatement ClassCreator ReferenceType ConfigurationException MethodInvocation e getLocalizedMessage",1
451,451,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.core Import javax.jcr.Workspace Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Copy a Node. <br>
 * If the source <code>Workspace</code> is unset it will create a copy of the
 * given <code>Node</code> from the current working <code>Workspace</code>.
 */ Copy FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType Copy getLog FieldDeclaration /**
     * Source workspace.
     */ Modifier private ReferenceType String VariableDeclarator srcWorkspaceKey Literal ""srcWorkspace"" FieldDeclaration /** source path */ Modifier private ReferenceType String VariableDeclarator srcAbsPathKey Literal ""srcAbsPath"" FieldDeclaration /** destination path */ Modifier private ReferenceType String VariableDeclarator destAbsPathKey Literal ""destAbsPath"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator srcWorkspace Cast ReferenceType String MethodInvocation ctx This MemberReference srcWorkspaceKey get LocalVariableDeclaration ReferenceType String VariableDeclarator srcAbsPath Cast ReferenceType String MethodInvocation ctx This MemberReference srcAbsPathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator destAbsPath Cast ReferenceType String MethodInvocation ctx This MemberReference destAbsPathKey get LocalVariableDeclaration ReferenceType Workspace VariableDeclarator w MethodInvocation CommandHelper MethodInvocation getWorkspace MemberReference ctx getSession IfStatement BinaryOperation == MemberReference srcWorkspace Literal null BlockStatement StatementExpression Assignment MemberReference srcWorkspace MethodInvocation w getName = End IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""copying node from ["" MemberReference srcWorkspace Literal "":"" MemberReference srcAbsPath Literal ""] to ["" MethodInvocation w getName Literal "":"" MemberReference destAbsPath Literal ""]"" debug End StatementExpression MethodInvocation w MemberReference srcWorkspace MemberReference srcAbsPath MemberReference destAbsPath copy ReturnStatement Literal false MethodDeclaration /**
     * @return the destination absolute path key
     */ Modifier public ReferenceType String getDestAbsPathKey ReturnStatement MemberReference destAbsPathKey MethodDeclaration /**
     * sets the destination absolute path key
     * @param destAbsPathKey
     *        the destination absolute path key
     */ Modifier public setDestAbsPathKey FormalParameter ReferenceType String destAbsPathKey StatementExpression Assignment This MemberReference destAbsPathKey MemberReference destAbsPathKey = MethodDeclaration /**
     * @return the source absolute path key
     */ Modifier public ReferenceType String getSrcAbsPathKey ReturnStatement MemberReference srcAbsPathKey MethodDeclaration /**
     * Sets the source absolute path key
     * @param srcAbsPathKey
     *        the source absolute path key
     */ Modifier public setSrcAbsPathKey FormalParameter ReferenceType String srcAbsPathKey StatementExpression Assignment This MemberReference srcAbsPathKey MemberReference srcAbsPathKey = MethodDeclaration /**
     * @return the source <code>Workspace</code> key
     */ Modifier public ReferenceType String getSrcWorkspaceKey ReturnStatement MemberReference srcWorkspaceKey MethodDeclaration /**
     * Sets the source <code>Workspace</code> key
     * @param srcWorkspaceKey
     *        the source <code>Workspace</code> key
     */ Modifier public setSrcWorkspaceKey FormalParameter ReferenceType String srcWorkspaceKey StatementExpression Assignment This MemberReference srcWorkspaceKey MemberReference srcWorkspaceKey = ReferenceType Command",0
645,645,,1
382,382,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command Import java.text.MessageFormat Import java.util.MissingResourceException Import java.util.ResourceBundle ClassDeclaration Modifier public /**
 * JCR command Exception
 */ CommandException FieldDeclaration /** Resource bundle */ Modifier private static ReferenceType ResourceBundle VariableDeclarator bundle MethodInvocation CommandHelper getBundle FieldDeclaration /**
     * Exception arguments
     */ Modifier private ReferenceType Object VariableDeclarator arguments FieldDeclaration /**
     * Comment for <code>serialVersionUID</code>
     */ Modifier private final static BasicType long VariableDeclarator serialVersionUID Literal 3978426922931860275L ConstructorDeclaration Modifier public /**
     * @param message
     *        the message
     */ CommandException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ConstructorDeclaration Modifier public /**
     * @param message
     *        the message
     * @param arguments
     *        the arguments
     */ CommandException FormalParameter ReferenceType String message FormalParameter ReferenceType Object arguments StatementExpression SuperConstructorInvocation MemberReference message StatementExpression Assignment This MemberReference arguments MemberReference arguments = ConstructorDeclaration Modifier public /**
     * @param message
     *        the message
     * @param cause
     *        the cause
     */ CommandException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable cause StatementExpression SuperConstructorInvocation MemberReference message MemberReference cause ConstructorDeclaration Modifier public /**
     * @param message
     *        the message
     * @param cause
     *        the cause
     * @param arguments
     *        the arguments
     */ CommandException FormalParameter ReferenceType String message FormalParameter ReferenceType Throwable cause FormalParameter ReferenceType Object arguments StatementExpression SuperConstructorInvocation MemberReference message MemberReference cause StatementExpression Assignment This MemberReference arguments MemberReference arguments = MethodDeclaration /**
     * @return the localized message
     */ Modifier public ReferenceType String getLocalizedMessage TryStatement IfStatement BinaryOperation == This MemberReference arguments Literal null BlockStatement ReturnStatement MethodInvocation bundle This MethodInvocation getMessage getString BlockStatement LocalVariableDeclaration ReferenceType MessageFormat VariableDeclarator f ClassCreator ReferenceType MessageFormat Literal """" StatementExpression MethodInvocation f MethodInvocation bundle This MethodInvocation getMessage getString applyPattern ReturnStatement MethodInvocation f This MemberReference arguments format End CatchClause CatchClauseParameter MissingResourceException e ReturnStatement This MethodInvocation getMessage ReferenceType Exception",1
341,341,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.client.methods Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.DavMethods Import org.apache.jackrabbit.webdav.version.DeltaVConstants ClassDeclaration Modifier public /**
 * <code>CheckinMethod</code>...
 */ CheckinMethod FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType CheckinMethod getLogger ConstructorDeclaration Modifier public CheckinMethod FormalParameter ReferenceType String uri StatementExpression SuperConstructorInvocation MemberReference uri MethodDeclaration Modifier public ReferenceType String getVersionUri StatementExpression MethodInvocation checkUsed ReturnStatement MethodInvocation MethodInvocation getValue MemberReference DeltaVConstants HEADER_LOCATION getResponseHeader MethodDeclaration /**
     * @see org.apache.commons.httpclient.HttpMethod#getName()
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference DavMethods METHOD_CHECKIN ReferenceType DavMethodBase",0
632,632,,0
20,20,"CompilationUnit PackageDeclaration org.apache.jackrabbit.decorator Import javax.jcr.Item Import javax.jcr.Node Import javax.jcr.Property Import javax.jcr.RangeIterator Import javax.jcr.Session Import javax.jcr.version.Version Import javax.jcr.version.VersionHistory ClassDeclaration Modifier public /**
 * Range iterator that decorates all iterated objects. This class is used
 * as the base class of the various decorating iterator utility classes used
 * by the decorator layer.
 * <p>
 * All the method calls are delegated to the underlying iterator,
 * and best effort is made to decorate the objects returned by the
 * {@link #next() next()} method.
 */ DecoratingRangeIterator FieldDeclaration /** The underlying iterator. */ Modifier final protected ReferenceType RangeIterator VariableDeclarator iterator ConstructorDeclaration Modifier public /**
     * Creates a decorating iterator.
     *
     * @param factory decorator factory
     * @param session decorated session
     * @param iterator underlying iterator
     */ DecoratingRangeIterator FormalParameter ReferenceType DecoratorFactory factory FormalParameter ReferenceType Session session FormalParameter ReferenceType RangeIterator iterator StatementExpression SuperConstructorInvocation MemberReference factory MemberReference session StatementExpression Assignment This MemberReference iterator MemberReference iterator = MethodDeclaration /**
     * Advances the underlying iterator.
     *
     * @param skipNum number of elements to skip
     * @see RangeIterator#skip(long)
     */ Modifier public skip FormalParameter BasicType long skipNum StatementExpression MethodInvocation iterator MemberReference skipNum skip MethodDeclaration /**
     * Returns the size of the underlying iterator.
     *
     * @return size of the iterator
     * @see RangeIterator#getSize()
     */ Modifier public BasicType long getSize ReturnStatement MethodInvocation iterator getSize MethodDeclaration /**
     * Returns the position of the underlying iterator.
     *
     * @return position of the iterator
     * @see RangeIterator#getPosition()
     */ Modifier public BasicType long getPosition ReturnStatement MethodInvocation iterator getPosition MethodDeclaration /**
     * Checks whether the underlying iterator has more elements.
     *
     * @return <code>true</code> if more elements exist,
     *         <code>false</code> otherwise
     * @see java.util.Iterator#hasNext()
     */ Modifier public BasicType boolean hasNext ReturnStatement MethodInvocation iterator hasNext MethodDeclaration /**
     * Decorates and returns the next objects from the underlying iterator.
     *
     * @return decorated object
     * @throws UnsupportedOperationException if the returned object can not
     *                                       be decorated
     * @see java.util.Iterator#next()
     */ Modifier public ReferenceType Object next LocalVariableDeclaration ReferenceType Object VariableDeclarator object MethodInvocation iterator next IfStatement BinaryOperation instanceof MemberReference object ReferenceType Version BlockStatement ReturnStatement MethodInvocation factory MemberReference session Cast ReferenceType Version MemberReference object getVersionDecorator IfStatement BinaryOperation instanceof MemberReference object ReferenceType VersionHistory BlockStatement ReturnStatement MethodInvocation factory MemberReference session Cast ReferenceType VersionHistory MemberReference object getVersionHistoryDecorator IfStatement BinaryOperation instanceof MemberReference object ReferenceType Node BlockStatement ReturnStatement MethodInvocation factory MemberReference session Cast ReferenceType Node MemberReference object getNodeDecorator IfStatement BinaryOperation instanceof MemberReference object ReferenceType Property BlockStatement ReturnStatement MethodInvocation factory MemberReference session Cast ReferenceType Property MemberReference object getPropertyDecorator IfStatement BinaryOperation instanceof MemberReference object ReferenceType Item BlockStatement ReturnStatement MethodInvocation factory MemberReference session Cast ReferenceType Item MemberReference object getItemDecorator BlockStatement ThrowStatement ClassCreator ReferenceType UnsupportedOperationException BinaryOperation + Literal ""No decorator available for "" MemberReference object End End End End End MethodDeclaration /**
     * Removes the current object from the underlying iterator.
     *
     * @see java.util.Iterator#remove()
     */ Modifier public remove StatementExpression MethodInvocation iterator remove ReferenceType AbstractDecorator ReferenceType RangeIterator",0
262,262,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.client.methods Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.DavMethods Import org.apache.jackrabbit.webdav.DavConstants Import org.apache.jackrabbit.webdav.ordering.OrderPatch Import org.apache.jackrabbit.webdav.ordering.Position Import org.apache.jackrabbit.webdav.ordering.OrderingConstants Import java.io.IOException ClassDeclaration Modifier public /**
 * <code>OrderPatchMethod</code>...
 */ OrderPatchMethod FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType OrderPatchMethod getLogger ConstructorDeclaration Modifier public /**
     * Create a new <code>OrderPatchMethod</code> with the given order patch
     * object.
     *
     * @param uri
     * @param orderPatch
     */ OrderPatchMethod FormalParameter ReferenceType String uri FormalParameter ReferenceType OrderPatch orderPatch IOException StatementExpression SuperConstructorInvocation MemberReference uri StatementExpression MethodInvocation MemberReference DavConstants HEADER_CONTENT_TYPE Literal ""text/xml; charset=UTF-8"" setRequestHeader StatementExpression MethodInvocation MemberReference orderPatch setRequestBody ConstructorDeclaration Modifier public /**
     * Create a new <code>OrderPatchMethod</code> that reorders the members
     * of the resource identified by 'uri': the member identified by 'memberSegment'
     * is moved to the first or to the last position, respectively.<br>
     * See the constructor taking an <code>OrderPatch</code> object for a ORDERPATCH call
     * that reorders multiple members at once.
     *
     * @param uri
     * @param orderingHref
     * @param memberSegment
     * @param first
     */ OrderPatchMethod FormalParameter ReferenceType String uri FormalParameter ReferenceType String orderingHref FormalParameter ReferenceType String memberSegment FormalParameter BasicType boolean first IOException StatementExpression SuperConstructorInvocation MemberReference uri LocalVariableDeclaration ReferenceType String VariableDeclarator orderType TernaryExpression MemberReference first MemberReference OrderingConstants XML_FIRST MemberReference OrderingConstants XML_LAST LocalVariableDeclaration ReferenceType Position VariableDeclarator p ClassCreator ReferenceType Position MemberReference orderType LocalVariableDeclaration ReferenceType OrderPatch VariableDeclarator op ClassCreator ReferenceType OrderPatch MemberReference orderingHref ClassCreator ReferenceType OrderPatch ReferenceType Member MemberReference memberSegment MemberReference p StatementExpression MethodInvocation MemberReference DavConstants HEADER_CONTENT_TYPE Literal ""text/xml; charset=UTF-8"" setRequestHeader StatementExpression MethodInvocation MemberReference op setRequestBody ConstructorDeclaration Modifier public /**
     * Create a new <code>OrderPatchMethod</code> that reorders the members
     * of the resource identified by 'uri': the member identified by 'memberSegment'
     * is reordered before or after the member identified by 'targetMemberSegmet'.<br>
     * See the constructor taking an <code>OrderPatch</code> object for a ORDERPATCH call
     * that reorders multiple members at once.
     *
     * @param uri
     * @param orderingHref
     * @param memberSegment
     * @param targetMemberSegmet
     * @param above
     */ OrderPatchMethod FormalParameter ReferenceType String uri FormalParameter ReferenceType String orderingHref FormalParameter ReferenceType String memberSegment FormalParameter ReferenceType String targetMemberSegmet FormalParameter BasicType boolean above IOException StatementExpression SuperConstructorInvocation MemberReference uri LocalVariableDeclaration ReferenceType String VariableDeclarator orderType TernaryExpression MemberReference above MemberReference OrderingConstants XML_AFTER MemberReference OrderingConstants XML_BEFORE LocalVariableDeclaration ReferenceType Position VariableDeclarator p ClassCreator ReferenceType Position MemberReference orderType MemberReference targetMemberSegmet LocalVariableDeclaration ReferenceType OrderPatch VariableDeclarator op ClassCreator ReferenceType OrderPatch MemberReference orderingHref ClassCreator ReferenceType OrderPatch ReferenceType Member MemberReference memberSegment MemberReference p StatementExpression MethodInvocation MemberReference DavConstants HEADER_CONTENT_TYPE Literal ""text/xml; charset=UTF-8"" setRequestHeader StatementExpression MethodInvocation MemberReference op setRequestBody MethodDeclaration /**
     * @see org.apache.commons.httpclient.HttpMethod#getName()
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference DavMethods METHOD_ORDERPATCH ReferenceType DavMethodBase",1
349,349,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.jcr.lock Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.lock.LockEntry Import org.apache.jackrabbit.webdav.lock.Scope Import org.apache.jackrabbit.webdav.lock.Type Import org.apache.jackrabbit.webdav.lock.AbstractLockEntry Import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants ClassDeclaration Modifier public /**
 * <code>SessionScopedLockEntry</code> represents the 'session-scoped' write
 * lock as defined by JCR.
 */ SessionScopedLockEntry FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType SessionScopedLockEntry getLogger MethodDeclaration /**
     * @return always returns {@link Type#WRITE write}.
     * @see LockEntry#getType()
     */ Modifier public ReferenceType Type getType ReturnStatement MemberReference Type WRITE MethodDeclaration /**
     * @return returns {@link ItemResourceConstants#EXCLUSIVE_SESSION}.
     * @see LockEntry#getScope()
     */ Modifier public ReferenceType Scope getScope ReturnStatement MemberReference ItemResourceConstants EXCLUSIVE_SESSION ReferenceType AbstractLockEntry",0
452,452,"CompilationUnit PackageDeclaration org.apache.jackrabbit.jca Import org.apache.jackrabbit.core.RepositoryImpl Import org.apache.jackrabbit.core.config.RepositoryConfig Import javax.jcr.RepositoryException Import java.util.HashMap Import java.util.Map ClassDeclaration Modifier public final /**
 * This class implements the repository manager.
 */ JCARepositoryManager FieldDeclaration /**
     * Instance of manager.
     */ Modifier private final static ReferenceType JCARepositoryManager VariableDeclarator INSTANCE ClassCreator ReferenceType JCARepositoryManager FieldDeclaration /**
     * References.
     */ Modifier private final ReferenceType Map VariableDeclarator references ConstructorDeclaration Modifier private /**
     * Construct the manager.
     */ JCARepositoryManager StatementExpression Assignment This MemberReference references ClassCreator ReferenceType HashMap = MethodDeclaration /**
     * Create repository.
     */ Modifier public ReferenceType RepositoryImpl createRepository FormalParameter ReferenceType String homeDir FormalParameter ReferenceType String configFile RepositoryException LocalVariableDeclaration ReferenceType Reference VariableDeclarator ref MethodInvocation MemberReference homeDir MemberReference configFile getReference ReturnStatement MethodInvocation ref create MethodDeclaration /**
     * Shutdown the repository.
     */ Modifier public shutdownRepository FormalParameter ReferenceType String homeDir FormalParameter ReferenceType String configFile LocalVariableDeclaration ReferenceType Reference VariableDeclarator ref MethodInvocation MemberReference homeDir MemberReference configFile getReference StatementExpression MethodInvocation ref shutdown MethodDeclaration /**
     * Return the reference.
     */ Modifier private synchronized ReferenceType Reference getReference FormalParameter ReferenceType String homeDir FormalParameter ReferenceType String configFile LocalVariableDeclaration ReferenceType Reference VariableDeclarator ref ClassCreator ReferenceType Reference MemberReference homeDir MemberReference configFile LocalVariableDeclaration ReferenceType Reference VariableDeclarator other Cast ReferenceType Reference MethodInvocation references MemberReference ref get IfStatement BinaryOperation == MemberReference other Literal null BlockStatement StatementExpression MethodInvocation references MemberReference ref MemberReference ref put ReturnStatement MemberReference ref BlockStatement ReturnStatement MemberReference other End MethodDeclaration /**
     * Return the instance.
     */ Modifier public static ReferenceType JCARepositoryManager getInstance ReturnStatement MemberReference INSTANCE ClassDeclaration Modifier private final /**
     * Repository reference implementation.
     */ Reference FieldDeclaration /**
         * Home directory.
         */ Modifier private final ReferenceType String VariableDeclarator homeDir FieldDeclaration /**
         * Configuration file.
         */ Modifier private final ReferenceType String VariableDeclarator configFile FieldDeclaration /**
         * Repository instance.
         */ Modifier private ReferenceType RepositoryImpl VariableDeclarator repository FieldDeclaration /**
         * Reference count.
         */ Modifier private BasicType int VariableDeclarator count ConstructorDeclaration Modifier private /**
         * Construct the manager.
         */ Reference FormalParameter ReferenceType String homeDir FormalParameter ReferenceType String configFile StatementExpression Assignment This MemberReference homeDir MemberReference homeDir = StatementExpression Assignment This MemberReference configFile MemberReference configFile = StatementExpression Assignment This MemberReference repository Literal null = StatementExpression Assignment This MemberReference count Literal 0 = MethodDeclaration /**
         * Return the repository.
         */ Modifier public ReferenceType RepositoryImpl create RepositoryException IfStatement BinaryOperation == MemberReference repository Literal null BlockStatement LocalVariableDeclaration ReferenceType RepositoryConfig VariableDeclarator config MethodInvocation RepositoryConfig MemberReference configFile MemberReference homeDir create StatementExpression Assignment MemberReference repository MethodInvocation RepositoryImpl MemberReference config create = End StatementExpression MemberReference ++ count ReturnStatement MemberReference repository MethodDeclaration /**
         * Shutdown the repository.
         */ Modifier public shutdown IfStatement BinaryOperation > MemberReference count Literal 0 BlockStatement StatementExpression MemberReference -- count IfStatement BinaryOperation == MemberReference count Literal 0 BlockStatement StatementExpression MethodInvocation repository shutdown StatementExpression Assignment MemberReference repository Literal null = End End MethodDeclaration /**
         * Return the hash code.
         */ Modifier public BasicType int hashCode LocalVariableDeclaration BasicType int VariableDeclarator result TernaryExpression BinaryOperation != MemberReference homeDir Literal null MethodInvocation homeDir hashCode Literal 0 StatementExpression Assignment MemberReference result BinaryOperation + BinaryOperation * Literal 37 MemberReference result TernaryExpression BinaryOperation != MemberReference configFile Literal null MethodInvocation configFile hashCode Literal 0 = ReturnStatement MemberReference result MethodDeclaration /**
         * Return true if equals.
         */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation == MemberReference o This BlockStatement ReturnStatement Literal true IfStatement BinaryOperation instanceof MemberReference o ReferenceType Reference BlockStatement ReturnStatement MethodInvocation Cast ReferenceType Reference MemberReference o equals BlockStatement ReturnStatement Literal false End End MethodDeclaration /**
         * Return true if equals.
         */ Modifier private BasicType boolean equals FormalParameter ReferenceType Reference o ReturnStatement BinaryOperation && MethodInvocation MemberReference homeDir MemberReference o homeDir equals MethodInvocation MemberReference configFile MemberReference o configFile equals MethodDeclaration /**
         * Return true if equals.
         */ Modifier private BasicType boolean equals FormalParameter ReferenceType String s1 FormalParameter ReferenceType String s2 IfStatement BinaryOperation == MemberReference s1 MemberReference s2 BlockStatement ReturnStatement Literal true IfStatement BinaryOperation || BinaryOperation == MemberReference s1 Literal null BinaryOperation == MemberReference s2 Literal null BlockStatement ReturnStatement Literal false BlockStatement ReturnStatement MethodInvocation s1 MemberReference s2 equals End End",0
333,333,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.remote Import java.rmi.RemoteException Import javax.jcr.RepositoryException Import javax.jcr.Value InterfaceDeclaration Modifier public /**
 * Remote version of the JCR {@link javax.jcr.Node Node} interface.
 * Used by the {@link org.apache.jackrabbit.rmi.server.ServerNode ServerNode}
 * and {@link org.apache.jackrabbit.rmi.client.ClientNode ClientNode}
 * adapters to provide transparent RMI access to remote nodes.
 * <p>
 * The methods in this interface are documented only with a reference
 * to a corresponding Node method. The remote object will simply forward
 * the method call to the underlying Node instance. Argument and return
 * values, as well as possible exceptions, are copied over the network.
 * Compex return values (like Nodes and Properties) are returned as remote
 * references to the corresponding remote interfaces. Iterator values
 * are transmitted as object arrays. RMI errors are signalled with
 * RemoteExceptions.
 * <p>
 * Note that only two generic setProperty methods are included in this
 * interface. Clients should implement the type-specific setProperty
 * methods by wrapping the argument values into generic Value objects
 * and calling the generic setProperty methods. Note also that the
 * Value objects must be serializable and implemented using classes
 * available on both the client and server side. The
 * {@link org.apache.jackrabbit.rmi.value.SerialValueFactory SerialValueFactory}
 * class provides two convenience methods to satisfy these requirements.
 *
 * @author Jukka Zitting
 * @see javax.jcr.Node
 * @see org.apache.jackrabbit.rmi.client.ClientNode
 * @see org.apache.jackrabbit.rmi.server.ServerNode
 */ RemoteNode MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#addNode(String) Node.addNode(Sring)} method.
     *
     * @param path relative path
     * @return new node
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNode addNode FormalParameter ReferenceType String path RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#addNode(String,String) Node.addNode(String,String)}
     * method.
     *
     * @param path relative path
     * @param type node type name
     * @return new node
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNode addNode FormalParameter ReferenceType String path FormalParameter ReferenceType String type RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getProperty(String) Node.getProperty(String)}
     * method.
     *
     * @param path relative path
     * @return node property
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteProperty getProperty FormalParameter ReferenceType String path RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getProperties() Node.getProperties()} method.
     *
     * @return node properties
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteIterator getProperties RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getProperties(String) Node.getProperties(String)}
     * method.
     *
     * @param pattern property name pattern
     * @return matching node properties
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteIterator getProperties FormalParameter ReferenceType String pattern RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getPrimaryItem() Node.getPrimaryItem()} method.
     *
     * @return primary item
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteItem getPrimaryItem RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getUUID() Node.getUUID()} method.
     *
     * @return node uuid
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType String getUUID RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getReferences() Node.getReferences()} method.
     *
     * @return reference properties
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteIterator getReferences RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getNodes() Node.getNodes()} method.
     *
     * @return child nodes
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteIterator getNodes RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getNodes(String) Node.getNodes(String)} method.
     *
     * @param pattern node name pattern
     * @return matching child nodes
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteIterator getNodes FormalParameter ReferenceType String pattern RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#hasNode(String) Node.hasNode(String)} method.
     *
     * @param path relative path
     * @return <code>true</code> if the identified node exists,
     *         <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean hasNode FormalParameter ReferenceType String path RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#hasProperty(String) Node.hasProperty()} method.
     *
     * @param path relative path
     * @return <code>true</code> if the identified property exists,
     *         <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean hasProperty FormalParameter ReferenceType String path RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#hasNodes() Node.hasNodes()} method.
     *
     * @return <code>true</code> if this node has child nodes,
     *         <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean hasNodes RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#hasProperties() Node.hasProperties()} method.
     *
     * @return <code>true</code> if this node has properties,
     *         <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean hasProperties RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getPrimaryNodeType() Node.getPrimaryNodeType()}
     * method.
     *
     * @return primary node type
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNodeType getPrimaryNodeType RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getMixinNodeTypes() Node.getMixinNodeTypes()}
     * method.
     *
     * @return mixin node types
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNodeType getMixinNodeTypes RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#isNodeType(String) Node.isNodeType(String)} method.
     *
     * @param type node type name
     * @return <code>true</code> if this node is an instance of the
     *         identified type, <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean isNodeType FormalParameter ReferenceType String type RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getNode(String) Node.getNode(String)} method.
     *
     * @param path relative path
     * @return node
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNode getNode FormalParameter ReferenceType String path RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#orderBefore(String,String) Node.orderBefore(String,String)}
     * method.
     *
     * @param src source path
     * @param dst destination path
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ orderBefore FormalParameter ReferenceType String src FormalParameter ReferenceType String dst RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#setProperty(String,Value) Node.setProperty(String,Value)}
     * method.
     *
     * @param name property name
     * @param value property value
     * @return property
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteProperty setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value value RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#setProperty(String,Value,int) Node.setProperty(String,Value)}
     * method.
     *
     * @param name property name
     * @param value property value
     * @param type property type
     * @return property
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteProperty setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value value FormalParameter BasicType int type RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#setProperty(String,Value[]) Node.setProperty(String,Value[])}
     * method.
     *
     * @param name property name
     * @param values property values
     * @return property
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteProperty setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value values RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#addMixin(String) Node.addMixin(String)} method.
     *
     * @param name mixin type name
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ addMixin FormalParameter ReferenceType String name RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#removeMixin(String) Node.removeMixin(String)}
     * method.
     *
     * @param name mixin type name
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ removeMixin FormalParameter ReferenceType String name RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#canAddMixin(String) Node.canAddMixin(String)}
     * method.
     *
     * @param name mixin type name
     * @return <code>true</code> if the mixin type can be added,
     *         <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean canAddMixin FormalParameter ReferenceType String name RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getDefinition() Node.getDefinition()} method.
     *
     * @return node definition
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNodeDefinition getDefinition RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#checkin() Node.checkin()} method.
     *
     * @return checked in version
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteVersion checkin RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#checkout() Node.checkout()} method.
     *
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ checkout RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#update(String) Node.update(String)} method.
     *
     * @param workspace source workspace name
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ update FormalParameter ReferenceType String workspace RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#merge(String,boolean) Node.merge(String,boolean)}
     * method.
     *
     * @param workspace source workspace name
     * @param bestEffort best effort flag
     * @return nodes that failed to merge
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteIterator merge FormalParameter ReferenceType String workspace FormalParameter BasicType boolean bestEffort RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#cancelMerge(javax.jcr.version.Version) Node.cancelMerge(Version)}
     * method.
     *
     * @param versionUUID The UUID of the version whose labels are to be returned.
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ cancelMerge FormalParameter ReferenceType String versionUUID RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#doneMerge(javax.jcr.version.Version) Node.doneMerge(Version)}
     * method.
     *
     * @param versionUUID The UUID of the version whose labels are to be returned.
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ doneMerge FormalParameter ReferenceType String versionUUID RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getCorrespondingNodePath(String) Node.getCorrespondingNodePath(String)}
     * method.
     *
     * @param workspace workspace name
     * @return corresponding node path
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType String getCorrespondingNodePath FormalParameter ReferenceType String workspace RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getIndex() Node.getIndex()} method.
     *
     * @return node index
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType int getIndex RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#restore(String,boolean) Node.restore(String,boolean)}
     * method.
     *
     * @param version version name
     * @param removeExisting flag to remove conflicting nodes
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ restore FormalParameter ReferenceType String version FormalParameter BasicType boolean removeExisting RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#restore(javax.jcr.version.Version, boolean) Node.restore(Version,boolean)}
     * method.
     * <p>
     * This method has been rename to prevent a naming clash with
     * {@link #restore(String, boolean)}.
     *
     * @param versionUUID The UUID of the version whose labels are to be returned.
     * @param removeExisting flag to remove conflicting nodes
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ restoreByUUID FormalParameter ReferenceType String versionUUID FormalParameter BasicType boolean removeExisting RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#restore(javax.jcr.version.Version, String, boolean) Node.restore(Version,String,boolean)}
     * method.
     *
     * @param versionUUID The UUID of the version whose labels are to be returned.
     * @param path the path to which the version is to be restored
     * @param removeExisting flag to remove conflicting nodes
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ restore FormalParameter ReferenceType String versionUUID FormalParameter ReferenceType String path FormalParameter BasicType boolean removeExisting RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#restoreByLabel(String,boolean) Node.restoreByLabel(String,boolean)}
     * method.
     *
     * @param label version label
     * @param removeExisting flag to remove conflicting nodes
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ restoreByLabel FormalParameter ReferenceType String label FormalParameter BasicType boolean removeExisting RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#unlock() Node.unlock()} method.
     *
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ unlock RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#holdsLock() Node.holdsLock()} method.
     *
     * @return <code>true</code> if this node holds a lock,
     *         <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean holdsLock RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#isLocked() Node.isLocked()} method.
     *
     * @return <code>true</code> if this node is locked,
     *         <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean isLocked RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#isCheckedOut() Node.isCheckedOut()} method.
     *
     * @return <code>true</code> if this node is checked out,
     *         <code>false</code> otherwise
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ BasicType boolean isCheckedOut RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getVersionHistory() Node.getVersionHistory()} method.
     *
     * @return the remote version history.
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteVersionHistory getVersionHistory RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getBaseVersion() Node.getBaseVersion()} method.
     *
     * @return the remote base version
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteVersion getBaseVersion RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#setProperty(String,Value[],int) Node.setProperty(String,Value[],int)}
     * method.
     *
     * @param name property name
     * @param values property values
     * @param type property type
     * @return property
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteProperty setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType Value values FormalParameter BasicType int type RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#lock(boolean,boolean) Node.lock(boolean,boolean)}
     * method.
     *
     * @param isDeep flag to create a deep lock
     * @param isSessionScoped flag to create a session-scoped lock
     * @return lock
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteLock lock FormalParameter BasicType boolean isDeep FormalParameter BasicType boolean isSessionScoped RepositoryException RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.Node#getLock() Node.getLock()} method.
     *
     * @return lock
     * @throws RepositoryException on repository errors
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteLock getLock RepositoryException RemoteException ReferenceType RemoteItem",1
253,253,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.fs Import java.io.BufferedOutputStream Import java.io.File Import java.io.FileOutputStream Import java.io.IOException Import java.io.InputStream Import javax.jcr.Node Import javax.jcr.NodeIterator Import javax.jcr.PathNotFoundException Import javax.jcr.RepositoryException Import javax.jcr.ValueFormatException Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandException Import org.apache.jackrabbit.command.CommandHelper ClassDeclaration Modifier public /**
 * Export a <code>Node</code> of type nt:file or nt:folder to the given file
 * system path.
 */ ExportFileSystem FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType ExportFileSystem getLog FieldDeclaration /** Node path key */ Modifier private ReferenceType String VariableDeclarator srcJcrPathKey Literal ""srcJcrPath"" FieldDeclaration /** File system path key */ Modifier private ReferenceType String VariableDeclarator destFsPathKey Literal ""destFsPath"" FieldDeclaration /** Overwrite flag key */ Modifier private ReferenceType String VariableDeclarator overwriteKey Literal ""overwrite"" MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception LocalVariableDeclaration ReferenceType String VariableDeclarator from Cast ReferenceType String MethodInvocation ctx This MemberReference srcJcrPathKey get LocalVariableDeclaration ReferenceType String VariableDeclarator to Cast ReferenceType String MethodInvocation ctx This MemberReference destFsPathKey get LocalVariableDeclaration BasicType boolean VariableDeclarator overwrite MethodInvocation Boolean MethodInvocation booleanValue Cast ReferenceType String MethodInvocation ctx This MemberReference overwriteKey get valueOf IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""exporting node at "" MemberReference from Literal "" to the filesystem ("" MemberReference to Literal "") overwrite="" MemberReference overwrite debug End LocalVariableDeclaration ReferenceType Node VariableDeclarator node MethodInvocation CommandHelper MemberReference ctx MemberReference from getNode LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MemberReference to IfStatement BinaryOperation && MethodInvocation f exists MemberReference ! overwrite BlockStatement ThrowStatement ClassCreator ReferenceType CommandException Literal ""exception.file.exists"" ArrayCreator ReferenceType String ArrayInitializer MemberReference to End IfStatement MethodInvocation node Literal ""nt:file"" isNodeType BlockStatement StatementExpression This MethodInvocation MemberReference node MemberReference f createFile IfStatement MethodInvocation node Literal ""nt:folder"" isNodeType BlockStatement StatementExpression This MethodInvocation MemberReference node MemberReference f addFolder BlockStatement ThrowStatement ClassCreator ReferenceType CommandException Literal ""exception.not.file.or.folder"" ArrayCreator ReferenceType String ArrayInitializer MethodInvocation node MethodInvocation getName getPrimaryNodeType End End ReturnStatement Literal false MethodDeclaration /**
     * Exports an nt:file to the file system
     * @param node
     *        the <code>Node</code>
     * @param file
     *        the <code>File</code>
     * @throws IOException
     *         if an IOException occurs
     * @throws CommandException
     *         if the <code>File</code> can't be created
     * @throws ValueFormatException
     *         if a <code>Value</code> can't be retrieved
     * @throws PathNotFoundException
     *         if the <code>Node</code> can't be found
     * @throws RepositoryException
     *         if the current working <code>Repository</code> throws an
     *         <code>Exception</code>
     */ Modifier private createFile FormalParameter ReferenceType Node node FormalParameter ReferenceType File file IOException CommandException ValueFormatException PathNotFoundException RepositoryException LocalVariableDeclaration BasicType boolean VariableDeclarator created MethodInvocation file createNewFile IfStatement MemberReference ! created BlockStatement ThrowStatement ClassCreator ReferenceType CommandException Literal ""exception.file.not.created"" ArrayCreator ReferenceType String ArrayInitializer MethodInvocation file getPath End LocalVariableDeclaration ReferenceType BufferedOutputStream VariableDeclarator out ClassCreator ReferenceType BufferedOutputStream ClassCreator ReferenceType FileOutputStream MemberReference file LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation node MethodInvocation Literal ""jcr:data"" getProperty MethodInvocation getStream Literal ""jcr:content"" getNode LocalVariableDeclaration BasicType int VariableDeclarator c WhileStatement BinaryOperation != Assignment MemberReference c MethodInvocation in read = Literal - 1 BlockStatement StatementExpression MethodInvocation out MemberReference c write End StatementExpression MethodInvocation in close StatementExpression MethodInvocation out flush StatementExpression MethodInvocation out close MethodDeclaration /**
     * Exports a nt:folder and all its children to the file system
     * @param node
     *        the <code>Node</code>
     * @param file
     *        <code>File</code>
     * @throws CommandException
     *         if the <code>File</code> can't be created
     * @throws RepositoryException
     *         if the current working <code>Repository</code> throws an
     *         <code>Exception</code>
     * @throws IOException
     *         if an IOException occurs
     */ Modifier private addFolder FormalParameter ReferenceType Node node FormalParameter ReferenceType File file CommandException RepositoryException IOException LocalVariableDeclaration BasicType boolean VariableDeclarator created MethodInvocation file mkdir IfStatement MemberReference ! created BlockStatement ThrowStatement ClassCreator ReferenceType CommandException Literal ""exception.folder.not.created"" ArrayCreator ReferenceType String ArrayInitializer MethodInvocation file getPath End LocalVariableDeclaration ReferenceType NodeIterator VariableDeclarator iter MethodInvocation node getNodes WhileStatement MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType Node VariableDeclarator child MethodInvocation iter nextNode IfStatement MethodInvocation child Literal ""nt:file"" isNodeType BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator childFile ClassCreator ReferenceType File MemberReference file MethodInvocation child getName StatementExpression MethodInvocation MemberReference child MemberReference childFile createFile IfStatement MethodInvocation child Literal ""nt:folder"" isNodeType BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator childFolder ClassCreator ReferenceType File MemberReference file MethodInvocation child getName StatementExpression MethodInvocation MemberReference child MemberReference childFolder addFolder End End End MethodDeclaration /**
     * @return the overwrite key
     */ Modifier public ReferenceType String getOverwriteKey ReturnStatement MemberReference overwriteKey MethodDeclaration /**
     * @param overwriteKey
     *        the overwrite key to set
     */ Modifier public setOverwriteKey FormalParameter ReferenceType String overwriteKey StatementExpression Assignment This MemberReference overwriteKey MemberReference overwriteKey = MethodDeclaration /**
     * @return the source jcr path key
     */ Modifier public ReferenceType String getSrcJcrPathKey ReturnStatement MemberReference srcJcrPathKey MethodDeclaration /**
     * @param srcJcrPathKey
     *        the source jcr path key to set
     */ Modifier public setSrcJcrPathKey FormalParameter ReferenceType String srcJcrPathKey StatementExpression Assignment This MemberReference srcJcrPathKey MemberReference srcJcrPathKey = MethodDeclaration /**
     * @return the destination file system path key
     */ Modifier public ReferenceType String getDestFsPathKey ReturnStatement MemberReference destFsPathKey MethodDeclaration /**
     * @param toFsPathKey
     *        the destination file system path key to set
     */ Modifier public setDestFsPathKey FormalParameter ReferenceType String toFsPathKey StatementExpression Assignment This MemberReference destFsPathKey MemberReference toFsPathKey = ReferenceType Command",1
546,546,,0
259,259,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query.sql Import org.apache.jackrabbit.name.QName ClassDeclaration Modifier public ASTIdentifier FieldDeclaration Modifier private ReferenceType QName VariableDeclarator name ConstructorDeclaration Modifier public ASTIdentifier FormalParameter BasicType int id StatementExpression SuperConstructorInvocation MemberReference id ConstructorDeclaration Modifier public ASTIdentifier FormalParameter ReferenceType JCRSQLParser p FormalParameter BasicType int id StatementExpression SuperConstructorInvocation MemberReference p MemberReference id MethodDeclaration Modifier public setName FormalParameter ReferenceType QName name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration Modifier public ReferenceType QName getName ReturnStatement MemberReference name MethodDeclaration /** Accept the visitor. **/ Modifier public ReferenceType Object jjtAccept FormalParameter ReferenceType JCRSQLParserVisitor visitor FormalParameter ReferenceType Object data ReturnStatement MethodInvocation visitor This MemberReference data visit MethodDeclaration Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + SuperMethodInvocation toString Literal "": "" MemberReference name ReferenceType SimpleNode",1
719,719,,1
778,778,,1
773,773,,1
555,555,,0
814,814,,0
572,572,,0
93,93,"CompilationUnit PackageDeclaration org.apache.jackrabbit.webdav.header Import org.apache.log4j.Logger Import org.apache.jackrabbit.webdav.DavConstants Import javax.servlet.http.HttpServletRequest ClassDeclaration Modifier public /**
 * <code>TimeoutHeader</code>...
 */ TimeoutHeader FieldDeclaration Modifier private static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType TimeoutHeader getLogger FieldDeclaration Modifier private final BasicType long VariableDeclarator timeout ConstructorDeclaration Modifier public TimeoutHeader FormalParameter BasicType long timeout StatementExpression Assignment This MemberReference timeout MemberReference timeout = MethodDeclaration Modifier public ReferenceType String getHeaderName ReturnStatement MemberReference DavConstants HEADER_TIMEOUT MethodDeclaration Modifier public ReferenceType String getHeaderValue ReturnStatement MethodInvocation String MemberReference timeout valueOf MethodDeclaration Modifier public BasicType long getTimeout ReturnStatement MemberReference timeout MethodDeclaration /**
     * Parse the request timeout header and convert the timeout value
     * into a long indicating the number of milliseconds until expiration time
     * is reached.<br>
     * NOTE: If the requested timeout is 'infinite' {@link Long.MAX_VALUE}
     * is returned. If the header is missing or is in an invalid format that
     * cannot be parsed, the default value is returned.
     *
     * @param request
     * @param defaultValue
     * @return long representing the timeout present in the header or the default
     * value if the header is missing or could not be parsed.
     */ Modifier public static ReferenceType TimeoutHeader parse FormalParameter ReferenceType HttpServletRequest request FormalParameter BasicType long defaultValue LocalVariableDeclaration ReferenceType String VariableDeclarator timeoutStr MethodInvocation request MemberReference HEADER_TIMEOUT getHeader LocalVariableDeclaration BasicType long VariableDeclarator timeout MemberReference defaultValue IfStatement BinaryOperation && BinaryOperation != MemberReference timeoutStr Literal null BinaryOperation > MethodInvocation timeoutStr length Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator secondsInd MethodInvocation timeoutStr Literal ""Second-"" indexOf IfStatement BinaryOperation >= MemberReference secondsInd Literal 0 BlockStatement StatementExpression Assignment MemberReference secondsInd Literal 7 += LocalVariableDeclaration BasicType int VariableDeclarator i MemberReference secondsInd WhileStatement BinaryOperation && BinaryOperation < MemberReference i MethodInvocation timeoutStr length MethodInvocation Character MethodInvocation timeoutStr MemberReference i charAt isDigit BlockStatement StatementExpression MemberReference ++ i End TryStatement StatementExpression Assignment MemberReference timeout BinaryOperation * Literal 1000L MethodInvocation Long MethodInvocation timeoutStr MemberReference secondsInd MemberReference i substring parseLong = CatchClause CatchClauseParameter NumberFormatException ignore StatementExpression MethodInvocation log BinaryOperation + Literal ""Invalid timeout format: "" MemberReference timeoutStr error IfStatement MethodInvocation timeoutStr MemberReference TIMEOUT_INFINITE equalsIgnoreCase BlockStatement StatementExpression Assignment MemberReference timeout MemberReference INFINITE_TIMEOUT = End End End ReturnStatement ClassCreator ReferenceType TimeoutHeader MemberReference timeout ReferenceType Header ReferenceType DavConstants",0
414,414,"CompilationUnit PackageDeclaration org.apache.jackrabbit.rmi.remote Import java.rmi.RemoteException InterfaceDeclaration Modifier public /**
 * Remote version of the JCR {@link javax.jcr.nodetype.NodeDefinition NodeDefinition}
 * interface. Used by the
 * {@link org.apache.jackrabbit.rmi.server.ServerNodeDefinition ServerNodeDefinition} and
 * {@link org.apache.jackrabbit.rmi.client.ClientNodeDefinition ClientNodeDefinition}
 * adapters to provide transparent RMI access to remote node definitions.
 * <p>
 * The methods in this interface are documented only with a reference
 * to a corresponding NodeDef method. The remote object will simply forward
 * the method call to the underlying NodeDef instance. Return values
 * and possible exceptions are copied over the network. Complex
 * {@link javax.jcr.nodetype.NodeType NodeType} return values
 * are returned as remote references to the
 * {@link org.apache.jackrabbit.rmi.remote.RemoteNodeType RemoteNodeType}
 * interface. RMI errors are signalled with RemoteExceptions.
 *
 * @author Jukka Zitting
 * @see javax.jcr.nodetype.NodeDefinition
 * @see org.apache.jackrabbit.rmi.client.ClientNodeDefinition
 * @see org.apache.jackrabbit.rmi.server.ServerNodeDefinition
 */ RemoteNodeDefinition MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.NodeDefinition#getRequiredPrimaryTypes() NodeDef.getRequiredPrimaryTypes()}
     * method.
     *
     * @return required primary node types
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNodeType getRequiredPrimaryTypes RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.NodeDefinition#getDefaultPrimaryType() NodeDef.getDefaultPrimaryType()}
     * method.
     *
     * @return default primary node type
     * @throws RemoteException on RMI errors
     */ ReferenceType RemoteNodeType getDefaultPrimaryType RemoteException MethodDeclaration /**
     * Remote version of the
     * {@link javax.jcr.nodetype.NodeDefinition#allowsSameNameSiblings() NodeDef.allowSameNameSibs()}
     * method.
     *
     * @return <code>true</code> if same name siblings are allowed,
     *         <code>false</code> otherwise
     * @throws RemoteException on RMI errors
     */ BasicType boolean allowsSameNameSiblings RemoteException ReferenceType RemoteItemDefinition",0
825,825,,0
304,304,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.query InterfaceDeclaration Modifier public /**
 * Defines the interface for a <code>QueryNodeVisitor</code>.
 */ QueryNodeVisitor MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType QueryRootNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType OrQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType AndQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType NotQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType ExactQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType NodeTypeQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType TextsearchQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType PathQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType LocationStepQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType RelationQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType OrderQueryNode node FormalParameter ReferenceType Object data MethodDeclaration ReferenceType Object visit FormalParameter ReferenceType DerefQueryNode node FormalParameter ReferenceType Object data",0
73,73,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.ext Import org.apache.commons.chain.Command Import org.apache.commons.chain.Context Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogFactory Import org.apache.jackrabbit.command.CommandHelper Import org.apache.jackrabbit.core.RepositoryImpl ClassDeclaration Modifier public /**
 * Stop Jackrabbit
 */ StopJackrabbit FieldDeclaration /** logger */ Modifier private static ReferenceType Log VariableDeclarator log MethodInvocation LogFactory ClassReference ReferenceType StopJackrabbit getLog MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier public BasicType boolean execute FormalParameter ReferenceType Context ctx Exception IfStatement MethodInvocation log isDebugEnabled BlockStatement StatementExpression MethodInvocation log Literal ""stopping jackrabbit"" debug End LocalVariableDeclaration ReferenceType RepositoryImpl VariableDeclarator repo Cast ReferenceType RepositoryImpl MethodInvocation CommandHelper MemberReference ctx getRepository IfStatement BinaryOperation == MemberReference repo Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""No current working repository"" End IfStatement BinaryOperation instanceof MemberReference repo ReferenceType RepositoryImpl BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""Jackrabbit is not the current working repository"" End StatementExpression MethodInvocation repo shutdown StatementExpression MethodInvocation CommandHelper MemberReference ctx Literal null setRepository ReturnStatement Literal false ReferenceType Command",0
55,55,"CompilationUnit PackageDeclaration org.apache.jackrabbit.core.observation Import org.apache.jackrabbit.core.ItemId Import org.apache.jackrabbit.core.NodeId Import org.apache.jackrabbit.core.PropertyId Import org.apache.jackrabbit.core.SessionImpl Import org.apache.jackrabbit.core.state.ItemState Import org.apache.jackrabbit.core.security.AccessManager Import org.apache.log4j.Logger Import javax.jcr.RepositoryException Import javax.jcr.Session Import javax.jcr.observation.Event Import javax.jcr.observation.EventIterator Import javax.jcr.observation.EventListener Import java.util.Collections Import java.util.HashSet Import java.util.Iterator Import java.util.Map Import java.util.Set Import java.util.WeakHashMap ClassDeclaration /**
 * The <code>EventConsumer</code> class combines the {@link
 * javax.jcr.observation.EventListener} with the implementation of specified
 * filter for the listener: {@link EventFilter}.
 * <p/>
 * Collections of {@link EventState} objects will be dispatched to {@link
 * #consumeEvents}.
 */ EventConsumer FieldDeclaration /**
     * The default Logger instance for this class.
     */ Modifier private final static ReferenceType Logger VariableDeclarator log MethodInvocation Logger ClassReference ReferenceType EventConsumer getLogger FieldDeclaration /**
     * The <code>Session</code> associated with this <code>EventConsumer</code>.
     */ Modifier private final ReferenceType SessionImpl VariableDeclarator session FieldDeclaration /**
     * The listener part of this <code>EventConsumer</code>.
     */ Modifier private final ReferenceType EventListener VariableDeclarator listener FieldDeclaration /**
     * The <code>EventFilter</code> for this <code>EventConsumer</code>.
     */ Modifier private final ReferenceType EventFilter VariableDeclarator filter FieldDeclaration /**
     * A map of <code>Set</code> objects that hold references to
     * <code>ItemId</code>s of denied <code>ItemState</code>s. The map uses the
     * <code>EventStateCollection</code> as the key to reference a deny Set.
     */ Modifier private final ReferenceType Map VariableDeclarator accessDenied MethodInvocation Collections ClassCreator ReferenceType WeakHashMap synchronizedMap FieldDeclaration /**
     * cached hash code value
     */ Modifier private BasicType int VariableDeclarator hashCode ConstructorDeclaration /**
     * An <code>EventConsumer</code> consists of a <code>Session</code>, the
     * attached <code>EventListener</code> and an <code>EventFilter</code>.
     *
     * @param session  the <code>Session</code> that created this
     *                 <code>EventConsumer</code>.
     * @param listener the actual <code>EventListener</code> to call back.
     * @param filter   only pass an <code>Event</code> to the listener if the
     *                 <code>EventFilter</code> allows the <code>Event</code>.
     * @throws NullPointerException if <code>session</code>, <code>listener</code>
     *                              or <code>filter</code> is<code>null</code>.
     */ EventConsumer FormalParameter ReferenceType SessionImpl session FormalParameter ReferenceType EventListener listener FormalParameter ReferenceType EventFilter filter NullPointerException IfStatement BinaryOperation == MemberReference session Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""session"" End IfStatement BinaryOperation == MemberReference listener Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""listener"" End IfStatement BinaryOperation == MemberReference filter Literal null BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""filter"" End StatementExpression Assignment This MemberReference session MemberReference session = StatementExpression Assignment This MemberReference listener MemberReference listener = StatementExpression Assignment This MemberReference filter MemberReference filter = MethodDeclaration /**
     * Returns the <code>Session</code> that is associated
     * with this <code>EventConsumer</code>.
     *
     * @return the <code>Session</code> of this <code>EventConsumer</code>.
     */ ReferenceType Session getSession ReturnStatement MemberReference session MethodDeclaration /**
     * Returns the <code>EventListener</code> that is associated with this
     * <code>EventConsumer</code>.
     *
     * @return the <code>EventListener</code> of this <code>EventConsumer</code>.
     */ ReferenceType EventListener getEventListener ReturnStatement MemberReference listener MethodDeclaration /**
     * Checks for what {@link EventState}s this <code>EventConsumer</code> has
     * enough access rights to see the event.
     *
     * @param events the collection of {@link EventState}s.
     */ prepareEvents FormalParameter ReferenceType EventStateCollection events LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation events iterator LocalVariableDeclaration ReferenceType Set VariableDeclarator denied Literal null WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType EventState VariableDeclarator state Cast ReferenceType EventState MethodInvocation it next IfStatement BinaryOperation || BinaryOperation == MethodInvocation state getType MemberReference Event NODE_REMOVED BinaryOperation == MethodInvocation state getType MemberReference Event PROPERTY_REMOVED BlockStatement IfStatement MethodInvocation session MethodInvocation state getSession equals BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType ItemId VariableDeclarator targetId IfStatement BinaryOperation == MethodInvocation state getChildUUID Literal null BlockStatement StatementExpression Assignment MemberReference targetId ClassCreator ReferenceType PropertyId MethodInvocation state getParentUUID MethodInvocation state MethodInvocation getName getChildRelPath = BlockStatement StatementExpression Assignment MemberReference targetId ClassCreator ReferenceType NodeId MethodInvocation state getChildUUID = End LocalVariableDeclaration BasicType boolean VariableDeclarator granted Literal false TryStatement StatementExpression Assignment MemberReference granted MethodInvocation session MethodInvocation MemberReference targetId MemberReference AccessManager READ isGranted getAccessManager = CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to check access rights for item: "" MemberReference targetId warn IfStatement MemberReference ! granted BlockStatement IfStatement BinaryOperation == MemberReference denied Literal null BlockStatement StatementExpression Assignment MemberReference denied ClassCreator ReferenceType HashSet = End StatementExpression MethodInvocation denied MethodInvocation state getId add End End End IfStatement BinaryOperation != MemberReference denied Literal null BlockStatement StatementExpression MethodInvocation accessDenied MemberReference events MemberReference denied put End MethodDeclaration /**
     * Checks for which deleted <code>ItemStates</code> this
     * <code>EventConsumer</code> has enough access rights to see the event.
     *
     * @param events       the collection of {@link EventState}s.
     * @param deletedItems Iterator of deleted <code>ItemState</code>s.
     */ prepareDeleted FormalParameter ReferenceType EventStateCollection events FormalParameter ReferenceType Iterator deletedItems LocalVariableDeclaration ReferenceType Set VariableDeclarator denied Literal null WhileStatement MethodInvocation deletedItems hasNext BlockStatement LocalVariableDeclaration ReferenceType ItemState VariableDeclarator item Cast ReferenceType ItemState MethodInvocation deletedItems next LocalVariableDeclaration BasicType boolean VariableDeclarator granted Literal false TryStatement StatementExpression Assignment MemberReference granted MethodInvocation session MethodInvocation MethodInvocation item getId MemberReference AccessManager READ isGranted getAccessManager = CatchClause CatchClauseParameter RepositoryException e StatementExpression MethodInvocation log BinaryOperation + Literal ""Unable to check access rights for item: "" MethodInvocation item getId warn IfStatement MemberReference ! granted BlockStatement IfStatement BinaryOperation == MemberReference denied Literal null BlockStatement StatementExpression Assignment MemberReference denied ClassCreator ReferenceType HashSet = End StatementExpression MethodInvocation denied MethodInvocation item getId add End End IfStatement BinaryOperation != MemberReference denied Literal null BlockStatement StatementExpression MethodInvocation accessDenied MemberReference events MemberReference denied put End MethodDeclaration /**
     * Dispatches the events to the <code>EventListener</code>.
     *
     * @param events a collection of {@link EventState}s
     *               to dispatch.
     */ consumeEvents FormalParameter ReferenceType EventStateCollection events RepositoryException LocalVariableDeclaration ReferenceType Set VariableDeclarator denied Cast ReferenceType Set MethodInvocation accessDenied MemberReference events remove ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation events iterator BinaryOperation && MethodInvocation it hasNext MethodInvocation session isLive BlockStatement LocalVariableDeclaration ReferenceType EventState VariableDeclarator state Cast ReferenceType EventState MethodInvocation it next IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MethodInvocation state getType MemberReference Event NODE_ADDED BinaryOperation == MethodInvocation state getType MemberReference Event PROPERTY_ADDED BinaryOperation == MethodInvocation state getType MemberReference Event PROPERTY_CHANGED BlockStatement LocalVariableDeclaration ReferenceType ItemId VariableDeclarator targetId IfStatement BinaryOperation == MethodInvocation state getChildUUID Literal null BlockStatement StatementExpression Assignment MemberReference targetId ClassCreator ReferenceType PropertyId MethodInvocation state getParentUUID MethodInvocation state MethodInvocation getName getChildRelPath = BlockStatement StatementExpression Assignment MemberReference targetId ClassCreator ReferenceType NodeId MethodInvocation state getChildUUID = End IfStatement MethodInvocation ! session MethodInvocation MemberReference targetId MemberReference AccessManager READ isGranted getAccessManager BlockStatement IfStatement BinaryOperation == MemberReference denied Literal null BlockStatement StatementExpression Assignment MemberReference denied ClassCreator ReferenceType HashSet = End StatementExpression MethodInvocation denied MethodInvocation state getId add End End End IfStatement MethodInvocation ! session isLive BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType EventIterator VariableDeclarator it ClassCreator ReferenceType FilteredEventIterator MemberReference events MemberReference filter MemberReference denied IfStatement MethodInvocation it hasNext BlockStatement StatementExpression MethodInvocation listener MemberReference it onEvent BlockStatement End MethodDeclaration /**
     * Returns <code>true</code> if this <code>EventConsumer</code> is equal to
     * some other object, <code>false</code> otherwise.
     * <p/>
     * Two <code>EventConsumer</code>s are considered equal if they refer to the
     * same <code>Session</code> and the <code>EventListener</code>s they
     * reference are equal. Note that the <code>EventFilter</code> is ignored in
     * this check.
     *
     * @param obj the reference object with which to compare.
     * @return <code>true</code> if this <code>EventConsumer</code> is equal the
     *         other <code>EventConsumer</code>.
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == This MemberReference obj BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType EventConsumer BlockStatement LocalVariableDeclaration ReferenceType EventConsumer VariableDeclarator other Cast ReferenceType EventConsumer MemberReference obj ReturnStatement BinaryOperation && MethodInvocation session MemberReference other session equals MethodInvocation listener MemberReference other listener equals End ReturnStatement Literal false MethodDeclaration /**
     * Returns the hash code for this <code>EventConsumer</code>.
     *
     * @return the hash code for this <code>EventConsumer</code>.
     */ Modifier public BasicType int hashCode IfStatement BinaryOperation == MemberReference hashCode Literal 0 BlockStatement StatementExpression Assignment MemberReference hashCode BinaryOperation ^ MethodInvocation session hashCode MethodInvocation listener hashCode = End ReturnStatement MemberReference hashCode",0
174,174,"CompilationUnit PackageDeclaration org.apache.jackrabbit.command.xml Import java.io.IOException Import java.io.OutputStream Import javax.jcr.Node Import javax.jcr.PathNotFoundException Import javax.jcr.RepositoryException ClassDeclaration Modifier public /**
 * Serialize the <code>Node</code> to the given file using the Document View
 * Format
 */ ExportDocViewToFile MethodDeclaration /**
     * {@inheritDoc}
     */ Modifier protected exportView FormalParameter ReferenceType Node node FormalParameter ReferenceType OutputStream out FormalParameter BasicType boolean skipBinary FormalParameter BasicType boolean noRecurse PathNotFoundException IOException RepositoryException StatementExpression MethodInvocation node MethodInvocation MethodInvocation node getPath MemberReference out MemberReference skipBinary MemberReference noRecurse exportDocumentView getSession ReferenceType AbstractExportViewToFile",0
808,808,,0
723,723,,1
