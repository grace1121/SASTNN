,id,code,label
374,374,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.io.IOException Import java.io.InputStream ClassDeclaration Modifier public /**
 *
 * Passes input requests tot he project object for demuxing into
 * individual tasks and threads.
 *
 * @since Ant 1.6
 */ DemuxInputStream FieldDeclaration /**
     * The project to from which to get input.
     */ Modifier private ReferenceType Project VariableDeclarator project ConstructorDeclaration Modifier public /**
     * Create a DemuxInputStream for the given project
     *
     * @param project the project instance
     */ DemuxInputStream FormalParameter ReferenceType Project project StatementExpression Assignment This MemberReference project MemberReference project = MethodDeclaration Modifier public BasicType int read IOException LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte Literal 1 IfStatement BinaryOperation == MethodInvocation project MemberReference buffer Literal 0 Literal 1 demuxInput Literal - 1 BlockStatement ReturnStatement Literal - 1 End ReturnStatement MemberReference ArraySelector Literal 0 buffer MethodDeclaration Modifier public BasicType int read FormalParameter BasicType byte buffer FormalParameter BasicType int offset FormalParameter BasicType int length IOException ReturnStatement MethodInvocation project MemberReference buffer MemberReference offset MemberReference length demuxInput ReferenceType InputStream",0
532,532,,0
280,280,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.extension Import java.io.File Import java.io.IOException Import java.util.ArrayList Import java.util.Iterator Import java.util.jar.JarFile Import java.util.jar.Manifest Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.FileSet ClassDeclaration Modifier public /**
 * A set of useful methods relating to extensions.
 *
 * @version $Revision$ $Date$
 */ ExtensionUtil ConstructorDeclaration Modifier private /**
     * Class is not meant to be instantiated.
     */ ExtensionUtil MethodDeclaration /**
     * Convert a list of extensionAdapter objects to extensions.
     *
     * @param adapters the list of ExtensionAdapterss to add to convert
     * @throws BuildException if an error occurs
     */ Modifier static ReferenceType ArrayList toExtensions FormalParameter Modifier final ReferenceType ArrayList adapters BuildException LocalVariableDeclaration Modifier final ReferenceType ArrayList VariableDeclarator results ClassCreator ReferenceType ArrayList LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation adapters size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType ExtensionAdapter VariableDeclarator adapter Cast ReferenceType ExtensionAdapter MethodInvocation adapters MemberReference i get LocalVariableDeclaration Modifier final ReferenceType Extension VariableDeclarator extension MethodInvocation adapter toExtension StatementExpression MethodInvocation results MemberReference extension add End ReturnStatement MemberReference results MethodDeclaration /**
     * Generate a list of extensions from a specified fileset.
     *
     * @param librarys the list to add extensions to
     * @param fileset the filesets containing librarys
     * @throws BuildException if an error occurs
     */ Modifier static extractExtensions FormalParameter Modifier final ReferenceType Project project FormalParameter Modifier final ReferenceType ArrayList librarys FormalParameter Modifier final ReferenceType ArrayList fileset BuildException IfStatement MethodInvocation ! fileset isEmpty BlockStatement LocalVariableDeclaration Modifier final ReferenceType Extension VariableDeclarator extensions MethodInvocation MemberReference project MemberReference fileset getExtensions ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference extensions length MemberReference ++ i BlockStatement StatementExpression MethodInvocation librarys MemberReference ArraySelector MemberReference i extensions add End End MethodDeclaration /**
     * Retrieve extensions from the specified librarys.
     *
     * @param librarys the filesets for librarys
     * @return the extensions contained in librarys
     * @throws BuildException if failing to scan librarys
     */ Modifier private static ReferenceType Extension getExtensions FormalParameter Modifier final ReferenceType Project project FormalParameter Modifier final ReferenceType ArrayList librarys BuildException LocalVariableDeclaration Modifier final ReferenceType ArrayList VariableDeclarator extensions ClassCreator ReferenceType ArrayList LocalVariableDeclaration Modifier final ReferenceType Iterator VariableDeclarator iterator MethodInvocation librarys iterator WhileStatement MethodInvocation iterator hasNext BlockStatement LocalVariableDeclaration Modifier final ReferenceType FileSet VariableDeclarator fileSet Cast ReferenceType FileSet MethodInvocation iterator next LocalVariableDeclaration BasicType boolean VariableDeclarator includeImpl Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator includeURL Literal true IfStatement BinaryOperation instanceof MemberReference fileSet ReferenceType LibFileSet BlockStatement LocalVariableDeclaration ReferenceType LibFileSet VariableDeclarator libFileSet Cast ReferenceType LibFileSet MemberReference fileSet StatementExpression Assignment MemberReference includeImpl MethodInvocation libFileSet isIncludeImpl = StatementExpression Assignment MemberReference includeURL MethodInvocation libFileSet isIncludeURL = End LocalVariableDeclaration Modifier final ReferenceType DirectoryScanner VariableDeclarator scanner MethodInvocation fileSet MemberReference project getDirectoryScanner LocalVariableDeclaration Modifier final ReferenceType File VariableDeclarator basedir MethodInvocation scanner getBasedir LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator files MethodInvocation scanner getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MemberReference basedir MemberReference ArraySelector MemberReference i files StatementExpression MethodInvocation MemberReference file MemberReference extensions MemberReference includeImpl MemberReference includeURL loadExtensions End End ReturnStatement Cast ReferenceType Extension MethodInvocation extensions ArrayCreator ReferenceType Extension MethodInvocation extensions size toArray MethodDeclaration /**
     * Load list of available extensions from specified file.
     *
     * @param file the file
     * @param extensionList the list to add available extensions to
     * @throws BuildException if there is an error
     */ Modifier private static loadExtensions FormalParameter Modifier final ReferenceType File file FormalParameter Modifier final ReferenceType ArrayList extensionList FormalParameter Modifier final BasicType boolean includeImpl FormalParameter Modifier final BasicType boolean includeURL BuildException TryStatement LocalVariableDeclaration Modifier final ReferenceType JarFile VariableDeclarator jarFile ClassCreator ReferenceType JarFile MemberReference file LocalVariableDeclaration Modifier final ReferenceType Extension VariableDeclarator extensions MethodInvocation Extension MethodInvocation jarFile getManifest getAvailable ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference extensions length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType Extension VariableDeclarator extension MemberReference ArraySelector MemberReference i extensions StatementExpression MethodInvocation MemberReference extensionList MemberReference extension MemberReference includeImpl MemberReference includeURL addExtension End CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MethodInvocation e getMessage MemberReference e MethodDeclaration /**
     * Add extension to list.
     * If extension should not have implementation details but
     * does strip them. If extension should not have url but does
     * then strip it.
     *
     * @param extensionList the list of extensions to add to
     * @param originalExtension the extension
     * @param includeImpl false to exclude implementation details
     * @param includeURL false to exclude implementation URL
     */ Modifier private static addExtension FormalParameter Modifier final ReferenceType ArrayList extensionList FormalParameter Modifier final ReferenceType Extension originalExtension FormalParameter Modifier final BasicType boolean includeImpl FormalParameter Modifier final BasicType boolean includeURL LocalVariableDeclaration ReferenceType Extension VariableDeclarator extension MemberReference originalExtension IfStatement BinaryOperation && MemberReference ! includeURL BinaryOperation != Literal null MethodInvocation extension getImplementationURL BlockStatement StatementExpression Assignment MemberReference extension ClassCreator ReferenceType Extension MethodInvocation extension getExtensionName MethodInvocation extension MethodInvocation toString getSpecificationVersion MethodInvocation extension getSpecificationVendor MethodInvocation extension MethodInvocation toString getImplementationVersion MethodInvocation extension getImplementationVendor MethodInvocation extension getImplementationVendorID Literal null = End LocalVariableDeclaration Modifier final BasicType boolean VariableDeclarator hasImplAttributes BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation != Literal null MethodInvocation extension getImplementationURL BinaryOperation != Literal null MethodInvocation extension getImplementationVersion BinaryOperation != Literal null MethodInvocation extension getImplementationVendorID BinaryOperation != Literal null MethodInvocation extension getImplementationVendor IfStatement BinaryOperation && MemberReference ! includeImpl MemberReference hasImplAttributes BlockStatement StatementExpression Assignment MemberReference extension ClassCreator ReferenceType Extension MethodInvocation extension getExtensionName MethodInvocation extension MethodInvocation toString getSpecificationVersion MethodInvocation extension getSpecificationVendor Literal null Literal null Literal null MethodInvocation extension getImplementationURL = End StatementExpression MethodInvocation extensionList MemberReference extension add MethodDeclaration /**
     * retrieve manifest for specified file.
     *
     * @param file the file
     * @return the manifest
     * @throws BuildException if errror occurs (file not exist,
     *         file not a jar, manifest not exist in file)
     */ Modifier static ReferenceType Manifest getManifest FormalParameter Modifier final ReferenceType File file BuildException TryStatement LocalVariableDeclaration Modifier final ReferenceType JarFile VariableDeclarator jarFile ClassCreator ReferenceType JarFile MemberReference file LocalVariableDeclaration ReferenceType Manifest VariableDeclarator m MethodInvocation jarFile getManifest IfStatement BinaryOperation == MemberReference m Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MemberReference file Literal "" doesn't have a MANIFEST"" End ReturnStatement MemberReference m CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException MethodInvocation ioe getMessage MemberReference ioe",0
468,468,,0
654,654,,0
594,594,,0
555,555,,0
185,185,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.regexp Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project ClassDeclaration Modifier public /***
 * Regular expression factory, which will create Regexp objects.  The
 * actual implementation class depends on the System or Ant Property:
 * <code>ant.regexp.regexpimpl</code>.
 *
 * @version $Revision$
 */ RegexpFactory ConstructorDeclaration Modifier public RegexpFactory MethodDeclaration /***
     * Create a new regular expression matcher instance.
     */ Modifier public ReferenceType Regexp newRegexp BuildException ReturnStatement Cast ReferenceType Regexp MethodInvocation Literal null newRegexp MethodDeclaration /***
     * Create a new regular expression matcher instance.
     *
     * @param p Project whose ant.regexp.regexpimpl property will be used.
     */ Modifier public ReferenceType Regexp newRegexp FormalParameter ReferenceType Project p BuildException LocalVariableDeclaration ReferenceType String VariableDeclarator systemDefault Literal null IfStatement BinaryOperation == MemberReference p Literal null BlockStatement StatementExpression Assignment MemberReference systemDefault MethodInvocation System Literal ""ant.regexp.regexpimpl"" getProperty = BlockStatement StatementExpression Assignment MemberReference systemDefault MethodInvocation p Literal ""ant.regexp.regexpimpl"" getProperty = End IfStatement BinaryOperation != MemberReference systemDefault Literal null BlockStatement ReturnStatement MethodInvocation MemberReference systemDefault createRegexpInstance End TryStatement StatementExpression MethodInvocation Literal ""java.util.regex.Matcher"" testAvailability ReturnStatement MethodInvocation Literal ""org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp"" createRegexpInstance CatchClause CatchClauseParameter BuildException be TryStatement StatementExpression MethodInvocation Literal ""org.apache.oro.text.regex.Pattern"" testAvailability ReturnStatement MethodInvocation Literal ""org.apache.tools.ant.util.regexp.JakartaOroRegexp"" createRegexpInstance CatchClause CatchClauseParameter BuildException be TryStatement StatementExpression MethodInvocation Literal ""org.apache.regexp.RE"" testAvailability ReturnStatement MethodInvocation Literal ""org.apache.tools.ant.util.regexp.JakartaRegexpRegexp"" createRegexpInstance CatchClause CatchClauseParameter BuildException be ThrowStatement ClassCreator ReferenceType BuildException Literal ""No supported regular expression matcher found"" MethodDeclaration /**
     * Wrapper over RegexpMatcherFactory.createInstance that ensures that
     * we are dealing with a Regexp implementation.
     *
     * @since 1.3
     *
     * @see RegexpMatcherFactory#createInstance(String)
     */ Modifier protected ReferenceType Regexp createRegexpInstance FormalParameter ReferenceType String classname BuildException LocalVariableDeclaration ReferenceType RegexpMatcher VariableDeclarator m MethodInvocation MemberReference classname createInstance IfStatement BinaryOperation instanceof MemberReference m ReferenceType Regexp BlockStatement ReturnStatement Cast ReferenceType Regexp MemberReference m BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MemberReference classname Literal "" doesn't implement the Regexp interface"" End ReferenceType RegexpMatcherFactory",0
78,78,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.perforce Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /** Checkout files for deletion.
 *
 * Example Usage:<br>
 * &lt;p4delete change=""${p4.change}"" view=""//depot/project/foo.txt"" /&gt;<br>
 *
 * Simple re-write of P4Edit changing 'edit' to 'delete'.<br>
 *
 * @todo What to do if file is already open in one of our changelists perhaps
 * (See also {@link P4Edit P4Edit})?<br>
 *
 *
 * @ant.task category=""scm""
 */ P4Delete FieldDeclaration /**
     * number of the change list to work on
     */ Modifier public ReferenceType String VariableDeclarator change Literal null MethodDeclaration /**
     * An existing changelist number for the deletion; optional
     * but strongly recommended.
     * @param change the number of a change list
     */ Modifier public setChange FormalParameter ReferenceType String change StatementExpression Assignment This MemberReference change MemberReference change = MethodDeclaration /**
     * executes the p4 delete task
     * @throws BuildException if there is no view specified
     */ Modifier public execute BuildException IfStatement BinaryOperation != MemberReference change Literal null BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + Literal ""-c "" MemberReference change = End IfStatement BinaryOperation == MemberReference P4View Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No view specified to delete"" End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""-s delete "" MemberReference P4CmdOpts Literal "" "" MemberReference P4View ClassCreator ReferenceType SimpleP4OutputHandler This execP4Command ReferenceType P4Base",0
244,244,"CompilationUnit PackageDeclaration org.apache.tools.bzip2 Import java.io.InputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * An input stream that decompresses from the BZip2 format (without the file
 * header chars) to be read as any other stream.
 *
 */ CBZip2InputStream MethodDeclaration Modifier private static cadvise StatementExpression MethodInvocation System.out Literal ""CRC Error"" println MethodDeclaration Modifier private static badBGLengths StatementExpression MethodInvocation cadvise MethodDeclaration Modifier private static bitStreamEOF StatementExpression MethodInvocation cadvise MethodDeclaration Modifier private static compressedStreamEOF StatementExpression MethodInvocation cadvise MethodDeclaration Modifier private makeMaps LocalVariableDeclaration BasicType int VariableDeclarator i StatementExpression Assignment MemberReference nInUse Literal 0 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 256 MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i inUse BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference nInUse seqToUnseq Cast BasicType char MemberReference i = StatementExpression Assignment MemberReference ArraySelector MemberReference i unseqToSeq Cast BasicType char MemberReference nInUse = StatementExpression MemberReference ++ nInUse End End FieldDeclaration Modifier private BasicType int VariableDeclarator last FieldDeclaration Modifier private BasicType int VariableDeclarator origPtr FieldDeclaration Modifier private BasicType int VariableDeclarator blockSize100k FieldDeclaration Modifier private BasicType boolean VariableDeclarator blockRandomised FieldDeclaration Modifier private BasicType int VariableDeclarator bsBuff FieldDeclaration Modifier private BasicType int VariableDeclarator bsLive FieldDeclaration Modifier private ReferenceType CRC VariableDeclarator mCrc ClassCreator ReferenceType CRC FieldDeclaration Modifier private BasicType boolean VariableDeclarator inUse ArrayCreator BasicType boolean Literal 256 FieldDeclaration Modifier private BasicType int VariableDeclarator nInUse FieldDeclaration Modifier private BasicType char VariableDeclarator seqToUnseq ArrayCreator BasicType char Literal 256 FieldDeclaration Modifier private BasicType char VariableDeclarator unseqToSeq ArrayCreator BasicType char Literal 256 FieldDeclaration Modifier private BasicType char VariableDeclarator selector ArrayCreator BasicType char MemberReference MAX_SELECTORS FieldDeclaration Modifier private BasicType char VariableDeclarator selectorMtf ArrayCreator BasicType char MemberReference MAX_SELECTORS FieldDeclaration Modifier private BasicType int VariableDeclarator tt FieldDeclaration Modifier private BasicType char VariableDeclarator ll8 FieldDeclaration Modifier private BasicType int VariableDeclarator unzftab ArrayCreator BasicType int Literal 256 FieldDeclaration Modifier private BasicType int VariableDeclarator limit ArrayCreator BasicType int MemberReference N_GROUPS MemberReference MAX_ALPHA_SIZE FieldDeclaration Modifier private BasicType int VariableDeclarator base ArrayCreator BasicType int MemberReference N_GROUPS MemberReference MAX_ALPHA_SIZE FieldDeclaration Modifier private BasicType int VariableDeclarator perm ArrayCreator BasicType int MemberReference N_GROUPS MemberReference MAX_ALPHA_SIZE FieldDeclaration Modifier private BasicType int VariableDeclarator minLens ArrayCreator BasicType int MemberReference N_GROUPS FieldDeclaration Modifier private ReferenceType InputStream VariableDeclarator bsStream FieldDeclaration Modifier private BasicType boolean VariableDeclarator streamEnd Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator currentChar Literal - 1 FieldDeclaration Modifier private final static BasicType int VariableDeclarator START_BLOCK_STATE Literal 1 FieldDeclaration Modifier private final static BasicType int VariableDeclarator RAND_PART_A_STATE Literal 2 FieldDeclaration Modifier private final static BasicType int VariableDeclarator RAND_PART_B_STATE Literal 3 FieldDeclaration Modifier private final static BasicType int VariableDeclarator RAND_PART_C_STATE Literal 4 FieldDeclaration Modifier private final static BasicType int VariableDeclarator NO_RAND_PART_A_STATE Literal 5 FieldDeclaration Modifier private final static BasicType int VariableDeclarator NO_RAND_PART_B_STATE Literal 6 FieldDeclaration Modifier private final static BasicType int VariableDeclarator NO_RAND_PART_C_STATE Literal 7 FieldDeclaration Modifier private BasicType int VariableDeclarator currentState MemberReference START_BLOCK_STATE FieldDeclaration Modifier private BasicType int VariableDeclarator storedBlockCRC VariableDeclarator storedCombinedCRC FieldDeclaration Modifier private BasicType int VariableDeclarator computedBlockCRC VariableDeclarator computedCombinedCRC FieldDeclaration BasicType int VariableDeclarator i2 VariableDeclarator count VariableDeclarator chPrev VariableDeclarator ch2 FieldDeclaration BasicType int VariableDeclarator i VariableDeclarator tPos FieldDeclaration BasicType int VariableDeclarator rNToGo Literal 0 FieldDeclaration BasicType int VariableDeclarator rTPos Literal 0 FieldDeclaration BasicType int VariableDeclarator j2 FieldDeclaration BasicType char VariableDeclarator z ConstructorDeclaration Modifier public CBZip2InputStream FormalParameter ReferenceType InputStream zStream StatementExpression Assignment MemberReference ll8 Literal null = StatementExpression Assignment MemberReference tt Literal null = StatementExpression MethodInvocation MemberReference zStream bsSetStream StatementExpression MethodInvocation initialize StatementExpression MethodInvocation initBlock StatementExpression MethodInvocation setupBlock MethodDeclaration Modifier public BasicType int read IfStatement MemberReference streamEnd BlockStatement ReturnStatement Literal - 1 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator retChar MemberReference currentChar SwitchStatement MemberReference currentState SwitchStatementCase START_BLOCK_STATE BreakStatement SwitchStatementCase RAND_PART_A_STATE BreakStatement SwitchStatementCase RAND_PART_B_STATE StatementExpression MethodInvocation setupRandPartB BreakStatement SwitchStatementCase RAND_PART_C_STATE StatementExpression MethodInvocation setupRandPartC BreakStatement SwitchStatementCase NO_RAND_PART_A_STATE BreakStatement SwitchStatementCase NO_RAND_PART_B_STATE StatementExpression MethodInvocation setupNoRandPartB BreakStatement SwitchStatementCase NO_RAND_PART_C_STATE StatementExpression MethodInvocation setupNoRandPartC BreakStatement SwitchStatementCase BreakStatement End ReturnStatement MemberReference retChar End MethodDeclaration Modifier private initialize LocalVariableDeclaration BasicType char VariableDeclarator magic3 VariableDeclarator magic4 StatementExpression Assignment MemberReference magic3 MethodInvocation bsGetUChar = StatementExpression Assignment MemberReference magic4 MethodInvocation bsGetUChar = IfStatement BinaryOperation || BinaryOperation || BinaryOperation != MemberReference magic3 Literal 'h' BinaryOperation < MemberReference magic4 Literal '1' BinaryOperation > MemberReference magic4 Literal '9' BlockStatement StatementExpression MethodInvocation bsFinishedWithStream StatementExpression Assignment MemberReference streamEnd Literal true = ReturnStatement End StatementExpression MethodInvocation BinaryOperation - MemberReference magic4 Literal '0' setDecompressStructureSizes StatementExpression Assignment MemberReference computedCombinedCRC Literal 0 = MethodDeclaration Modifier private initBlock LocalVariableDeclaration BasicType char VariableDeclarator magic1 VariableDeclarator magic2 VariableDeclarator magic3 VariableDeclarator magic4 LocalVariableDeclaration BasicType char VariableDeclarator magic5 VariableDeclarator magic6 StatementExpression Assignment MemberReference magic1 MethodInvocation bsGetUChar = StatementExpression Assignment MemberReference magic2 MethodInvocation bsGetUChar = StatementExpression Assignment MemberReference magic3 MethodInvocation bsGetUChar = StatementExpression Assignment MemberReference magic4 MethodInvocation bsGetUChar = StatementExpression Assignment MemberReference magic5 MethodInvocation bsGetUChar = StatementExpression Assignment MemberReference magic6 MethodInvocation bsGetUChar = IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == MemberReference magic1 Literal 0x17 BinaryOperation == MemberReference magic2 Literal 0x72 BinaryOperation == MemberReference magic3 Literal 0x45 BinaryOperation == MemberReference magic4 Literal 0x38 BinaryOperation == MemberReference magic5 Literal 0x50 BinaryOperation == MemberReference magic6 Literal 0x90 BlockStatement StatementExpression MethodInvocation complete ReturnStatement End IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation != MemberReference magic1 Literal 0x31 BinaryOperation != MemberReference magic2 Literal 0x41 BinaryOperation != MemberReference magic3 Literal 0x59 BinaryOperation != MemberReference magic4 Literal 0x26 BinaryOperation != MemberReference magic5 Literal 0x53 BinaryOperation != MemberReference magic6 Literal 0x59 BlockStatement StatementExpression MethodInvocation badBlockHeader StatementExpression Assignment MemberReference streamEnd Literal true = ReturnStatement End StatementExpression Assignment MemberReference storedBlockCRC MethodInvocation bsGetInt32 = IfStatement BinaryOperation == MethodInvocation Literal 1 bsR Literal 1 BlockStatement StatementExpression Assignment MemberReference blockRandomised Literal true = BlockStatement StatementExpression Assignment MemberReference blockRandomised Literal false = End StatementExpression MethodInvocation getAndMoveToFrontDecode StatementExpression MethodInvocation mCrc initialiseCRC StatementExpression Assignment MemberReference currentState MemberReference START_BLOCK_STATE = MethodDeclaration Modifier private endBlock StatementExpression Assignment MemberReference computedBlockCRC MethodInvocation mCrc getFinalCRC = IfStatement BinaryOperation != MemberReference storedBlockCRC MemberReference computedBlockCRC BlockStatement StatementExpression MethodInvocation crcError End StatementExpression Assignment MemberReference computedCombinedCRC BinaryOperation | BinaryOperation << MemberReference computedCombinedCRC Literal 1 BinaryOperation >>> MemberReference computedCombinedCRC Literal 31 = StatementExpression Assignment MemberReference computedCombinedCRC MemberReference computedBlockCRC ^= MethodDeclaration Modifier private complete StatementExpression Assignment MemberReference storedCombinedCRC MethodInvocation bsGetInt32 = IfStatement BinaryOperation != MemberReference storedCombinedCRC MemberReference computedCombinedCRC BlockStatement StatementExpression MethodInvocation crcError End StatementExpression MethodInvocation bsFinishedWithStream StatementExpression Assignment MemberReference streamEnd Literal true = MethodDeclaration Modifier private static blockOverrun StatementExpression MethodInvocation cadvise MethodDeclaration Modifier private static badBlockHeader StatementExpression MethodInvocation cadvise MethodDeclaration Modifier private static crcError StatementExpression MethodInvocation cadvise MethodDeclaration Modifier private bsFinishedWithStream TryStatement IfStatement BinaryOperation != This MemberReference bsStream Literal null BlockStatement IfStatement BinaryOperation != This MemberReference bsStream MemberReference System in BlockStatement StatementExpression This MemberReference bsStream MethodInvocation close StatementExpression Assignment This MemberReference bsStream Literal null = End End CatchClause CatchClauseParameter IOException ioe MethodDeclaration Modifier private bsSetStream FormalParameter ReferenceType InputStream f StatementExpression Assignment MemberReference bsStream MemberReference f = StatementExpression Assignment MemberReference bsLive Literal 0 = StatementExpression Assignment MemberReference bsBuff Literal 0 = MethodDeclaration Modifier private BasicType int bsR FormalParameter BasicType int n LocalVariableDeclaration BasicType int VariableDeclarator v WhileStatement BinaryOperation < MemberReference bsLive MemberReference n BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zzi LocalVariableDeclaration BasicType char VariableDeclarator thech Literal 0 TryStatement StatementExpression Assignment MemberReference thech Cast BasicType char MethodInvocation bsStream read = CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation compressedStreamEOF IfStatement BinaryOperation == MemberReference thech Literal - 1 BlockStatement StatementExpression MethodInvocation compressedStreamEOF End StatementExpression Assignment MemberReference zzi MemberReference thech = StatementExpression Assignment MemberReference bsBuff BinaryOperation | BinaryOperation << MemberReference bsBuff Literal 8 BinaryOperation & MemberReference zzi Literal 0xff = StatementExpression Assignment MemberReference bsLive Literal 8 += End StatementExpression Assignment MemberReference v BinaryOperation & BinaryOperation >> MemberReference bsBuff BinaryOperation - MemberReference bsLive MemberReference n BinaryOperation - BinaryOperation << Literal 1 MemberReference n Literal 1 = StatementExpression Assignment MemberReference bsLive MemberReference n -= ReturnStatement MemberReference v MethodDeclaration Modifier private BasicType char bsGetUChar ReturnStatement Cast BasicType char MethodInvocation Literal 8 bsR MethodDeclaration Modifier private BasicType int bsGetint LocalVariableDeclaration BasicType int VariableDeclarator u Literal 0 StatementExpression Assignment MemberReference u BinaryOperation | BinaryOperation << MemberReference u Literal 8 MethodInvocation Literal 8 bsR = StatementExpression Assignment MemberReference u BinaryOperation | BinaryOperation << MemberReference u Literal 8 MethodInvocation Literal 8 bsR = StatementExpression Assignment MemberReference u BinaryOperation | BinaryOperation << MemberReference u Literal 8 MethodInvocation Literal 8 bsR = StatementExpression Assignment MemberReference u BinaryOperation | BinaryOperation << MemberReference u Literal 8 MethodInvocation Literal 8 bsR = ReturnStatement MemberReference u MethodDeclaration Modifier private BasicType int bsGetIntVS FormalParameter BasicType int numBits ReturnStatement Cast BasicType int MethodInvocation MemberReference numBits bsR MethodDeclaration Modifier private BasicType int bsGetInt32 ReturnStatement Cast BasicType int MethodInvocation bsGetint MethodDeclaration Modifier private hbCreateDecodeTables FormalParameter BasicType int limit FormalParameter BasicType int base FormalParameter BasicType int perm FormalParameter BasicType char length FormalParameter BasicType int minLen FormalParameter BasicType int maxLen FormalParameter BasicType int alphaSize LocalVariableDeclaration BasicType int VariableDeclarator pp VariableDeclarator i VariableDeclarator j VariableDeclarator vec StatementExpression Assignment MemberReference pp Literal 0 = ForStatement ForControl Assignment MemberReference i MemberReference minLen = BinaryOperation <= MemberReference i MemberReference maxLen MemberReference ++ i BlockStatement ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation < MemberReference j MemberReference alphaSize MemberReference ++ j BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference j length MemberReference i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference pp perm MemberReference j = StatementExpression MemberReference ++ pp End End End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference MAX_CODE_LEN MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i base Literal 0 = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement StatementExpression MemberReference ++ ArraySelector BinaryOperation + MemberReference ArraySelector MemberReference i length Literal 1 base End ForStatement ForControl Assignment MemberReference i Literal 1 = BinaryOperation < MemberReference i MemberReference MAX_CODE_LEN MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i base MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 base += End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference MAX_CODE_LEN MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i limit Literal 0 = End StatementExpression Assignment MemberReference vec Literal 0 = ForStatement ForControl Assignment MemberReference i MemberReference minLen = BinaryOperation <= MemberReference i MemberReference maxLen MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference vec BinaryOperation - MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 base MemberReference ArraySelector MemberReference i base += StatementExpression Assignment MemberReference ArraySelector MemberReference i limit BinaryOperation - MemberReference vec Literal 1 = StatementExpression Assignment MemberReference vec Literal 1 <<= End ForStatement ForControl Assignment MemberReference i BinaryOperation + MemberReference minLen Literal 1 = BinaryOperation <= MemberReference i MemberReference maxLen MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i base BinaryOperation - BinaryOperation << BinaryOperation + MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 limit Literal 1 Literal 1 MemberReference ArraySelector MemberReference i base = End MethodDeclaration Modifier private recvDecodingTables LocalVariableDeclaration BasicType char VariableDeclarator len ArrayCreator BasicType char MemberReference N_GROUPS MemberReference MAX_ALPHA_SIZE LocalVariableDeclaration BasicType int VariableDeclarator i VariableDeclarator j VariableDeclarator t VariableDeclarator nGroups VariableDeclarator nSelectors VariableDeclarator alphaSize LocalVariableDeclaration BasicType int VariableDeclarator minLen VariableDeclarator maxLen LocalVariableDeclaration BasicType boolean VariableDeclarator inUse16 ArrayCreator BasicType boolean Literal 16 ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 16 MemberReference ++ i BlockStatement IfStatement BinaryOperation == MethodInvocation Literal 1 bsR Literal 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i inUse16 Literal true = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i inUse16 Literal false = End End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 256 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i inUse Literal false = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 16 MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i inUse16 BlockStatement ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation < MemberReference j Literal 16 MemberReference ++ j BlockStatement IfStatement BinaryOperation == MethodInvocation Literal 1 bsR Literal 1 BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + BinaryOperation * MemberReference i Literal 16 MemberReference j inUse Literal true = End End End End StatementExpression MethodInvocation makeMaps StatementExpression Assignment MemberReference alphaSize BinaryOperation + MemberReference nInUse Literal 2 = StatementExpression Assignment MemberReference nGroups MethodInvocation Literal 3 bsR = StatementExpression Assignment MemberReference nSelectors MethodInvocation Literal 15 bsR = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference nSelectors MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference j Literal 0 = WhileStatement BinaryOperation == MethodInvocation Literal 1 bsR Literal 1 BlockStatement StatementExpression MemberReference ++ j End StatementExpression Assignment MemberReference ArraySelector MemberReference i selectorMtf Cast BasicType char MemberReference j = End BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator pos ArrayCreator BasicType char MemberReference N_GROUPS LocalVariableDeclaration BasicType char VariableDeclarator tmp VariableDeclarator v ForStatement ForControl Assignment MemberReference v Literal 0 = BinaryOperation < MemberReference v MemberReference nGroups MemberReference ++ v BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference v pos MemberReference v = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference nSelectors MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference v MemberReference ArraySelector MemberReference i selectorMtf = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference v pos = WhileStatement BinaryOperation > MemberReference v Literal 0 BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference v pos MemberReference ArraySelector BinaryOperation - MemberReference v Literal 1 pos = StatementExpression MemberReference -- v End StatementExpression Assignment MemberReference ArraySelector Literal 0 pos MemberReference tmp = StatementExpression Assignment MemberReference ArraySelector MemberReference i selector MemberReference tmp = End ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator curr MethodInvocation Literal 5 bsR ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement WhileStatement BinaryOperation == MethodInvocation Literal 1 bsR Literal 1 BlockStatement IfStatement BinaryOperation == MethodInvocation Literal 1 bsR Literal 0 BlockStatement StatementExpression MemberReference ++ curr BlockStatement StatementExpression MemberReference -- curr End End StatementExpression Assignment MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len Cast BasicType char MemberReference curr = End End ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement StatementExpression Assignment MemberReference minLen Literal 32 = StatementExpression Assignment MemberReference maxLen Literal 0 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len MemberReference maxLen BlockStatement StatementExpression Assignment MemberReference maxLen MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len = End IfStatement BinaryOperation < MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len MemberReference minLen BlockStatement StatementExpression Assignment MemberReference minLen MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len = End End StatementExpression MethodInvocation MemberReference ArraySelector MemberReference t limit MemberReference ArraySelector MemberReference t base MemberReference ArraySelector MemberReference t perm MemberReference ArraySelector MemberReference t len MemberReference minLen MemberReference maxLen MemberReference alphaSize hbCreateDecodeTables StatementExpression Assignment MemberReference ArraySelector MemberReference t minLens MemberReference minLen = End MethodDeclaration Modifier private getAndMoveToFrontDecode LocalVariableDeclaration BasicType char VariableDeclarator yy ArrayCreator BasicType char Literal 256 LocalVariableDeclaration BasicType int VariableDeclarator i VariableDeclarator j VariableDeclarator nextSym VariableDeclarator limitLast LocalVariableDeclaration BasicType int VariableDeclarator EOB VariableDeclarator groupNo VariableDeclarator groupPos StatementExpression Assignment MemberReference limitLast BinaryOperation * MemberReference baseBlockSize MemberReference blockSize100k = StatementExpression Assignment MemberReference origPtr MethodInvocation Literal 24 bsGetIntVS = StatementExpression MethodInvocation recvDecodingTables StatementExpression Assignment MemberReference EOB BinaryOperation + MemberReference nInUse Literal 1 = StatementExpression Assignment MemberReference groupNo Literal - 1 = StatementExpression Assignment MemberReference groupPos Literal 0 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i Literal 255 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i unzftab Literal 0 = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i Literal 255 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i yy Cast BasicType char MemberReference i = End StatementExpression Assignment MemberReference last Literal - 1 = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zt VariableDeclarator zn VariableDeclarator zvec VariableDeclarator zj IfStatement BinaryOperation == MemberReference groupPos Literal 0 BlockStatement StatementExpression MemberReference ++ groupNo StatementExpression Assignment MemberReference groupPos MemberReference G_SIZE = End StatementExpression MemberReference -- groupPos StatementExpression Assignment MemberReference zt MemberReference ArraySelector MemberReference groupNo selector = StatementExpression Assignment MemberReference zn MemberReference ArraySelector MemberReference zt minLens = StatementExpression Assignment MemberReference zvec MethodInvocation MemberReference zn bsR = WhileStatement BinaryOperation > MemberReference zvec MemberReference ArraySelector MemberReference zt ArraySelector MemberReference zn limit BlockStatement StatementExpression MemberReference ++ zn BlockStatement BlockStatement WhileStatement BinaryOperation < MemberReference bsLive Literal 1 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zzi LocalVariableDeclaration BasicType char VariableDeclarator thech Literal 0 TryStatement StatementExpression Assignment MemberReference thech Cast BasicType char MethodInvocation bsStream read = CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation compressedStreamEOF IfStatement BinaryOperation == MemberReference thech Literal - 1 BlockStatement StatementExpression MethodInvocation compressedStreamEOF End StatementExpression Assignment MemberReference zzi MemberReference thech = StatementExpression Assignment MemberReference bsBuff BinaryOperation | BinaryOperation << MemberReference bsBuff Literal 8 BinaryOperation & MemberReference zzi Literal 0xff = StatementExpression Assignment MemberReference bsLive Literal 8 += End StatementExpression Assignment MemberReference zj BinaryOperation & BinaryOperation >> MemberReference bsBuff BinaryOperation - MemberReference bsLive Literal 1 Literal 1 = StatementExpression MemberReference -- bsLive StatementExpression Assignment MemberReference zvec BinaryOperation | BinaryOperation << MemberReference zvec Literal 1 MemberReference zj = End StatementExpression Assignment MemberReference nextSym MemberReference ArraySelector MemberReference zt ArraySelector BinaryOperation - MemberReference zvec MemberReference ArraySelector MemberReference zt ArraySelector MemberReference zn base perm = WhileStatement Literal true BlockStatement IfStatement BinaryOperation == MemberReference nextSym MemberReference EOB BlockStatement BreakStatement End IfStatement BinaryOperation || BinaryOperation == MemberReference nextSym MemberReference RUNA BinaryOperation == MemberReference nextSym MemberReference RUNB BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator ch LocalVariableDeclaration BasicType int VariableDeclarator s Literal - 1 LocalVariableDeclaration BasicType int VariableDeclarator N Literal 1 DoStatement BinaryOperation || BinaryOperation == MemberReference nextSym MemberReference RUNA BinaryOperation == MemberReference nextSym MemberReference RUNB BlockStatement IfStatement BinaryOperation == MemberReference nextSym MemberReference RUNA BlockStatement StatementExpression Assignment MemberReference s BinaryOperation + MemberReference s BinaryOperation * BinaryOperation + Literal 0 Literal 1 MemberReference N = IfStatement BinaryOperation == MemberReference nextSym MemberReference RUNB BlockStatement StatementExpression Assignment MemberReference s BinaryOperation + MemberReference s BinaryOperation * BinaryOperation + Literal 1 Literal 1 MemberReference N = End End StatementExpression Assignment MemberReference N BinaryOperation * MemberReference N Literal 2 = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zt VariableDeclarator zn VariableDeclarator zvec VariableDeclarator zj IfStatement BinaryOperation == MemberReference groupPos Literal 0 BlockStatement StatementExpression MemberReference ++ groupNo StatementExpression Assignment MemberReference groupPos MemberReference G_SIZE = End StatementExpression MemberReference -- groupPos StatementExpression Assignment MemberReference zt MemberReference ArraySelector MemberReference groupNo selector = StatementExpression Assignment MemberReference zn MemberReference ArraySelector MemberReference zt minLens = StatementExpression Assignment MemberReference zvec MethodInvocation MemberReference zn bsR = WhileStatement BinaryOperation > MemberReference zvec MemberReference ArraySelector MemberReference zt ArraySelector MemberReference zn limit BlockStatement StatementExpression MemberReference ++ zn BlockStatement BlockStatement WhileStatement BinaryOperation < MemberReference bsLive Literal 1 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zzi LocalVariableDeclaration BasicType char VariableDeclarator thech Literal 0 TryStatement StatementExpression Assignment MemberReference thech Cast BasicType char MethodInvocation bsStream read = CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation compressedStreamEOF IfStatement BinaryOperation == MemberReference thech Literal - 1 BlockStatement StatementExpression MethodInvocation compressedStreamEOF End StatementExpression Assignment MemberReference zzi MemberReference thech = StatementExpression Assignment MemberReference bsBuff BinaryOperation | BinaryOperation << MemberReference bsBuff Literal 8 BinaryOperation & MemberReference zzi Literal 0xff = StatementExpression Assignment MemberReference bsLive Literal 8 += End StatementExpression Assignment MemberReference zj BinaryOperation & BinaryOperation >> MemberReference bsBuff BinaryOperation - MemberReference bsLive Literal 1 Literal 1 = StatementExpression MemberReference -- bsLive StatementExpression Assignment MemberReference zvec BinaryOperation | BinaryOperation << MemberReference zvec Literal 1 MemberReference zj = End StatementExpression Assignment MemberReference nextSym MemberReference ArraySelector MemberReference zt ArraySelector BinaryOperation - MemberReference zvec MemberReference ArraySelector MemberReference zt ArraySelector MemberReference zn base perm = End StatementExpression MemberReference ++ s StatementExpression Assignment MemberReference ch MemberReference ArraySelector MemberReference ArraySelector Literal 0 yy seqToUnseq = StatementExpression Assignment MemberReference ArraySelector MemberReference ch unzftab MemberReference s += WhileStatement BinaryOperation > MemberReference s Literal 0 BlockStatement StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector MemberReference last ll8 MemberReference ch = StatementExpression MemberReference -- s End IfStatement BinaryOperation >= MemberReference last MemberReference limitLast BlockStatement StatementExpression MethodInvocation blockOverrun End ContinueStatement BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator tmp StatementExpression MemberReference ++ last IfStatement BinaryOperation >= MemberReference last MemberReference limitLast BlockStatement StatementExpression MethodInvocation blockOverrun End StatementExpression Assignment MemberReference tmp MemberReference ArraySelector BinaryOperation - MemberReference nextSym Literal 1 yy = StatementExpression MemberReference ++ ArraySelector MemberReference ArraySelector MemberReference tmp seqToUnseq unzftab StatementExpression Assignment MemberReference ArraySelector MemberReference last ll8 MemberReference ArraySelector MemberReference tmp seqToUnseq = StatementExpression Assignment MemberReference j BinaryOperation - MemberReference nextSym Literal 1 = ForStatement ForControl BinaryOperation > MemberReference j Literal 3 Assignment MemberReference j Literal 4 -= BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j yy MemberReference ArraySelector BinaryOperation - MemberReference j Literal 1 yy = StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference j Literal 1 yy MemberReference ArraySelector BinaryOperation - MemberReference j Literal 2 yy = StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference j Literal 2 yy MemberReference ArraySelector BinaryOperation - MemberReference j Literal 3 yy = StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference j Literal 3 yy MemberReference ArraySelector BinaryOperation - MemberReference j Literal 4 yy = End ForStatement ForControl BinaryOperation > MemberReference j Literal 0 MemberReference -- j BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j yy MemberReference ArraySelector BinaryOperation - MemberReference j Literal 1 yy = End StatementExpression Assignment MemberReference ArraySelector Literal 0 yy MemberReference tmp = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zt VariableDeclarator zn VariableDeclarator zvec VariableDeclarator zj IfStatement BinaryOperation == MemberReference groupPos Literal 0 BlockStatement StatementExpression MemberReference ++ groupNo StatementExpression Assignment MemberReference groupPos MemberReference G_SIZE = End StatementExpression MemberReference -- groupPos StatementExpression Assignment MemberReference zt MemberReference ArraySelector MemberReference groupNo selector = StatementExpression Assignment MemberReference zn MemberReference ArraySelector MemberReference zt minLens = StatementExpression Assignment MemberReference zvec MethodInvocation MemberReference zn bsR = WhileStatement BinaryOperation > MemberReference zvec MemberReference ArraySelector MemberReference zt ArraySelector MemberReference zn limit BlockStatement StatementExpression MemberReference ++ zn BlockStatement BlockStatement WhileStatement BinaryOperation < MemberReference bsLive Literal 1 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zzi LocalVariableDeclaration BasicType char VariableDeclarator thech Literal 0 TryStatement StatementExpression Assignment MemberReference thech Cast BasicType char MethodInvocation bsStream read = CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation compressedStreamEOF StatementExpression Assignment MemberReference zzi MemberReference thech = StatementExpression Assignment MemberReference bsBuff BinaryOperation | BinaryOperation << MemberReference bsBuff Literal 8 BinaryOperation & MemberReference zzi Literal 0xff = StatementExpression Assignment MemberReference bsLive Literal 8 += End StatementExpression Assignment MemberReference zj BinaryOperation & BinaryOperation >> MemberReference bsBuff BinaryOperation - MemberReference bsLive Literal 1 Literal 1 = StatementExpression MemberReference -- bsLive StatementExpression Assignment MemberReference zvec BinaryOperation | BinaryOperation << MemberReference zvec Literal 1 MemberReference zj = End StatementExpression Assignment MemberReference nextSym MemberReference ArraySelector MemberReference zt ArraySelector BinaryOperation - MemberReference zvec MemberReference ArraySelector MemberReference zt ArraySelector MemberReference zn base perm = ContinueStatement End End MethodDeclaration Modifier private setupBlock LocalVariableDeclaration BasicType int VariableDeclarator cftab ArrayCreator BasicType int Literal 257 LocalVariableDeclaration BasicType char VariableDeclarator ch StatementExpression Assignment MemberReference ArraySelector Literal 0 cftab Literal 0 = ForStatement ForControl Assignment MemberReference i Literal 1 = BinaryOperation <= MemberReference i Literal 256 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i cftab MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 unzftab = End ForStatement ForControl Assignment MemberReference i Literal 1 = BinaryOperation <= MemberReference i Literal 256 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i cftab MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 cftab += End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i MemberReference last MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ch Cast BasicType char MemberReference ArraySelector MemberReference i ll8 = StatementExpression Assignment MemberReference ArraySelector MemberReference ArraySelector MemberReference ch cftab tt MemberReference i = StatementExpression MemberReference ++ ArraySelector MemberReference ch cftab End StatementExpression Assignment MemberReference cftab Literal null = StatementExpression Assignment MemberReference tPos MemberReference ArraySelector MemberReference origPtr tt = StatementExpression Assignment MemberReference count Literal 0 = StatementExpression Assignment MemberReference i2 Literal 0 = StatementExpression Assignment MemberReference ch2 Literal 256 = IfStatement MemberReference blockRandomised BlockStatement StatementExpression Assignment MemberReference rNToGo Literal 0 = StatementExpression Assignment MemberReference rTPos Literal 0 = StatementExpression MethodInvocation setupRandPartA BlockStatement StatementExpression MethodInvocation setupNoRandPartA End MethodDeclaration Modifier private setupRandPartA IfStatement BinaryOperation <= MemberReference i2 MemberReference last BlockStatement StatementExpression Assignment MemberReference chPrev MemberReference ch2 = StatementExpression Assignment MemberReference ch2 MemberReference ArraySelector MemberReference tPos ll8 = StatementExpression Assignment MemberReference tPos MemberReference ArraySelector MemberReference tPos tt = IfStatement BinaryOperation == MemberReference rNToGo Literal 0 BlockStatement StatementExpression Assignment MemberReference rNToGo MemberReference ArraySelector MemberReference rTPos rNums = StatementExpression MemberReference ++ rTPos IfStatement BinaryOperation == MemberReference rTPos Literal 512 BlockStatement StatementExpression Assignment MemberReference rTPos Literal 0 = End End StatementExpression MemberReference -- rNToGo StatementExpression Assignment MemberReference ch2 Cast BasicType int TernaryExpression BinaryOperation == MemberReference rNToGo Literal 1 Literal 1 Literal 0 ^= StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference currentChar MemberReference ch2 = StatementExpression Assignment MemberReference currentState MemberReference RAND_PART_B_STATE = StatementExpression MethodInvocation mCrc MemberReference ch2 updateCRC BlockStatement StatementExpression MethodInvocation endBlock StatementExpression MethodInvocation initBlock StatementExpression MethodInvocation setupBlock End MethodDeclaration Modifier private setupNoRandPartA IfStatement BinaryOperation <= MemberReference i2 MemberReference last BlockStatement StatementExpression Assignment MemberReference chPrev MemberReference ch2 = StatementExpression Assignment MemberReference ch2 MemberReference ArraySelector MemberReference tPos ll8 = StatementExpression Assignment MemberReference tPos MemberReference ArraySelector MemberReference tPos tt = StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference currentChar MemberReference ch2 = StatementExpression Assignment MemberReference currentState MemberReference NO_RAND_PART_B_STATE = StatementExpression MethodInvocation mCrc MemberReference ch2 updateCRC BlockStatement StatementExpression MethodInvocation endBlock StatementExpression MethodInvocation initBlock StatementExpression MethodInvocation setupBlock End MethodDeclaration Modifier private setupRandPartB IfStatement BinaryOperation != MemberReference ch2 MemberReference chPrev BlockStatement StatementExpression Assignment MemberReference currentState MemberReference RAND_PART_A_STATE = StatementExpression Assignment MemberReference count Literal 1 = StatementExpression MethodInvocation setupRandPartA BlockStatement StatementExpression MemberReference ++ count IfStatement BinaryOperation >= MemberReference count Literal 4 BlockStatement StatementExpression Assignment MemberReference z MemberReference ArraySelector MemberReference tPos ll8 = StatementExpression Assignment MemberReference tPos MemberReference ArraySelector MemberReference tPos tt = IfStatement BinaryOperation == MemberReference rNToGo Literal 0 BlockStatement StatementExpression Assignment MemberReference rNToGo MemberReference ArraySelector MemberReference rTPos rNums = StatementExpression MemberReference ++ rTPos IfStatement BinaryOperation == MemberReference rTPos Literal 512 BlockStatement StatementExpression Assignment MemberReference rTPos Literal 0 = End End StatementExpression MemberReference -- rNToGo StatementExpression Assignment MemberReference z TernaryExpression BinaryOperation == MemberReference rNToGo Literal 1 Literal 1 Literal 0 ^= StatementExpression Assignment MemberReference j2 Literal 0 = StatementExpression Assignment MemberReference currentState MemberReference RAND_PART_C_STATE = StatementExpression MethodInvocation setupRandPartC BlockStatement StatementExpression Assignment MemberReference currentState MemberReference RAND_PART_A_STATE = StatementExpression MethodInvocation setupRandPartA End End MethodDeclaration Modifier private setupRandPartC IfStatement BinaryOperation < MemberReference j2 Cast BasicType int MemberReference z BlockStatement StatementExpression Assignment MemberReference currentChar MemberReference ch2 = StatementExpression MethodInvocation mCrc MemberReference ch2 updateCRC StatementExpression MemberReference ++ j2 BlockStatement StatementExpression Assignment MemberReference currentState MemberReference RAND_PART_A_STATE = StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference count Literal 0 = StatementExpression MethodInvocation setupRandPartA End MethodDeclaration Modifier private setupNoRandPartB IfStatement BinaryOperation != MemberReference ch2 MemberReference chPrev BlockStatement StatementExpression Assignment MemberReference currentState MemberReference NO_RAND_PART_A_STATE = StatementExpression Assignment MemberReference count Literal 1 = StatementExpression MethodInvocation setupNoRandPartA BlockStatement StatementExpression MemberReference ++ count IfStatement BinaryOperation >= MemberReference count Literal 4 BlockStatement StatementExpression Assignment MemberReference z MemberReference ArraySelector MemberReference tPos ll8 = StatementExpression Assignment MemberReference tPos MemberReference ArraySelector MemberReference tPos tt = StatementExpression Assignment MemberReference currentState MemberReference NO_RAND_PART_C_STATE = StatementExpression Assignment MemberReference j2 Literal 0 = StatementExpression MethodInvocation setupNoRandPartC BlockStatement StatementExpression Assignment MemberReference currentState MemberReference NO_RAND_PART_A_STATE = StatementExpression MethodInvocation setupNoRandPartA End End MethodDeclaration Modifier private setupNoRandPartC IfStatement BinaryOperation < MemberReference j2 Cast BasicType int MemberReference z BlockStatement StatementExpression Assignment MemberReference currentChar MemberReference ch2 = StatementExpression MethodInvocation mCrc MemberReference ch2 updateCRC StatementExpression MemberReference ++ j2 BlockStatement StatementExpression Assignment MemberReference currentState MemberReference NO_RAND_PART_A_STATE = StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference count Literal 0 = StatementExpression MethodInvocation setupNoRandPartA End MethodDeclaration Modifier private setDecompressStructureSizes FormalParameter BasicType int newSize100k IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation <= Literal 0 MemberReference newSize100k BinaryOperation <= MemberReference newSize100k Literal 9 BinaryOperation <= Literal 0 MemberReference blockSize100k BinaryOperation <= MemberReference blockSize100k Literal 9 BlockStatement End StatementExpression Assignment MemberReference blockSize100k MemberReference newSize100k = IfStatement BinaryOperation == MemberReference newSize100k Literal 0 BlockStatement ReturnStatement End LocalVariableDeclaration BasicType int VariableDeclarator n BinaryOperation * MemberReference baseBlockSize MemberReference newSize100k StatementExpression Assignment MemberReference ll8 ArrayCreator BasicType char MemberReference n = StatementExpression Assignment MemberReference tt ArrayCreator BasicType int MemberReference n = ReferenceType InputStream ReferenceType BZip2Constants",0
656,656,,0
498,498,,0
520,520,,0
397,397,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.rmic Import java.lang.reflect.Method Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * The implementation of the rmic for WebLogic
 *
 * @since Ant 1.4
 */ WLRmic MethodDeclaration Modifier public BasicType boolean execute BuildException StatementExpression MethodInvocation MethodInvocation Literal ""Using WebLogic rmic"" MemberReference Project MSG_VERBOSE log getRmic LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmd MethodInvocation ArrayCreator ReferenceType String ArrayInitializer Literal ""-noexit"" setupRmicCommand LocalVariableDeclaration ReferenceType AntClassLoader VariableDeclarator loader Literal null TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator c Literal null IfStatement BinaryOperation == MethodInvocation MethodInvocation getClasspath getRmic Literal null BlockStatement StatementExpression Assignment MemberReference c MethodInvocation Class Literal ""weblogic.rmic"" forName = BlockStatement StatementExpression Assignment MemberReference loader MethodInvocation MethodInvocation getProject MethodInvocation MethodInvocation MethodInvocation getClasspath getRmic createClassLoader getRmic = StatementExpression Assignment MemberReference c MethodInvocation Class Literal ""weblogic.rmic"" Literal true MemberReference loader forName = End LocalVariableDeclaration ReferenceType Method VariableDeclarator doRmic MethodInvocation c Literal ""main"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType String getMethod StatementExpression MethodInvocation doRmic Literal null ArrayCreator ReferenceType Object ArrayInitializer MethodInvocation cmd getArguments invoke ReturnStatement Literal true CatchClause CatchClauseParameter ClassNotFoundException ex ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Cannot use WebLogic rmic, as it is not "" Literal ""available.  A common solution is to "" Literal ""set the environment variable "" Literal ""CLASSPATH."" MethodInvocation MethodInvocation getLocation getRmic CatchClause CatchClauseParameter Exception ex IfStatement BinaryOperation instanceof MemberReference ex ReferenceType BuildException BlockStatement ThrowStatement Cast ReferenceType BuildException MemberReference ex BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Error starting WebLogic rmic: "" MemberReference ex MethodInvocation MethodInvocation getLocation getRmic End IfStatement BinaryOperation != MemberReference loader Literal null BlockStatement StatementExpression MethodInvocation loader cleanup End MethodDeclaration /**
     * Get the suffix for the rmic stub classes
     */ Modifier public ReferenceType String getStubClassSuffix ReturnStatement Literal ""_WLStub"" MethodDeclaration /**
     * Get the suffix for the rmic skeleton classes
     */ Modifier public ReferenceType String getSkelClassSuffix ReturnStatement Literal ""_WLSkel"" ReferenceType DefaultRmicAdapter",0
334,334,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.extension Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Simple holder for extra attributes in main section of manifest.
 *
 * @version $Revision$ $Date$
 * @todo Refactor this and all the other parameter, sysproperty,
 *   property etc into a single class in framework
 */ ExtraAttribute FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType String VariableDeclarator value MethodDeclaration /**
     * Set the name of the parameter.
     *
     * @param name the name of parameter
     */ Modifier public setName FormalParameter Modifier final ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * Set the value of the parameter.
     *
     * @param value the parameter value
     */ Modifier public setValue FormalParameter Modifier final ReferenceType String value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
     * Retrieve name of parameter.
     *
     * @return the name of parameter.
     */ ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * Retrieve the value of parameter.
     *
     * @return the value of parameter.
     */ ReferenceType String getValue ReturnStatement MemberReference value MethodDeclaration /**
     * Make sure that neither the name or the value
     * is null.
     *
     * @throws BuildException if the attribute is invalid.
     */ Modifier public validate BuildException IfStatement BinaryOperation == Literal null MemberReference name BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message Literal ""Missing name from parameter."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference message IfStatement BinaryOperation == Literal null MemberReference value BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message BinaryOperation + BinaryOperation + Literal ""Missing value from parameter "" MemberReference name Literal ""."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End End",0
336,336,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.metamata Import java.io.BufferedReader Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import java.io.OutputStream Import java.io.OutputStreamWriter Import java.text.DecimalFormat Import java.text.NumberFormat Import java.text.ParseException Import java.util.Date Import java.util.EmptyStackException Import java.util.Enumeration Import java.util.Stack Import java.util.Vector Import javax.xml.transform.OutputKeys Import javax.xml.transform.Transformer Import javax.xml.transform.TransformerFactory Import javax.xml.transform.sax.SAXTransformerFactory Import javax.xml.transform.sax.TransformerHandler Import javax.xml.transform.stream.StreamResult Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.taskdefs.ExecuteStreamHandler Import org.apache.tools.ant.util.DateUtils Import org.xml.sax.Attributes Import org.xml.sax.SAXException Import org.xml.sax.helpers.AttributesImpl ClassDeclaration Modifier public /**
 * A handy metrics handler. Most of this code was done only with the
 * screenshots on the documentation since the evaluation version as
 * of this writing does not allow to save metrics or to run it via
 * command line.
 * <p>
 * This class can be used to transform a text file or to process the
 * output stream directly.
 *
 */ MMetricsStreamHandler FieldDeclaration /** CLASS construct, it should be named something like 'MyClass' */ Modifier private final static ReferenceType String VariableDeclarator CLASS Literal ""class"" FieldDeclaration /** package construct, it should be look like 'com.mycompany.something' */ Modifier private final static ReferenceType String VariableDeclarator PACKAGE Literal ""package"" FieldDeclaration /** FILE construct, it should look like something 'MyClass.java' or 'MyClass.class' */ Modifier private final static ReferenceType String VariableDeclarator FILE Literal ""file"" FieldDeclaration /** METHOD construct, it should looke like something 'doSomething(...)' or 'doSomething()' */ Modifier private final static ReferenceType String VariableDeclarator METHOD Literal ""method"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator ATTRIBUTES ArrayInitializer Literal ""name"" Literal ""vg"" Literal ""loc"" Literal ""dit"" Literal ""noa"" Literal ""nrm"" Literal ""nlm"" Literal ""wmc"" Literal ""rfc"" Literal ""dac"" Literal ""fanout"" Literal ""cbo"" Literal ""lcom"" Literal ""nocl"" FieldDeclaration /** reader for stdout */ Modifier private ReferenceType InputStream VariableDeclarator metricsOutput FieldDeclaration /**
     * this is where the XML output will go, should mostly be a file
     * the caller is responsible for flushing and closing this stream
     */ Modifier private ReferenceType OutputStream VariableDeclarator xmlOutputStream FieldDeclaration /** metrics handler */ Modifier private ReferenceType TransformerHandler VariableDeclarator metricsHandler FieldDeclaration /** the task */ Modifier private ReferenceType Task VariableDeclarator task FieldDeclaration /**
     * the stack where are stored the metrics element so that they we can
     * know if we have to close an element or not.
     */ Modifier private ReferenceType Stack VariableDeclarator stack ClassCreator ReferenceType Stack ConstructorDeclaration /** initialize this handler */ MMetricsStreamHandler FormalParameter ReferenceType Task task FormalParameter ReferenceType OutputStream xmlOut StatementExpression Assignment This MemberReference task MemberReference task = StatementExpression Assignment This MemberReference xmlOutputStream MemberReference xmlOut = MethodDeclaration /** Ignore. */ Modifier public setProcessInputStream FormalParameter ReferenceType OutputStream p1 IOException MethodDeclaration /** Ignore. */ Modifier public setProcessErrorStream FormalParameter ReferenceType InputStream p1 IOException MethodDeclaration /** Set the inputstream */ Modifier public setProcessOutputStream FormalParameter ReferenceType InputStream is IOException StatementExpression Assignment MemberReference metricsOutput MemberReference is = MethodDeclaration Modifier public start IOException LocalVariableDeclaration ReferenceType TransformerFactory VariableDeclarator factory MethodInvocation TransformerFactory newInstance IfStatement MethodInvocation ! factory MemberReference SAXTransformerFactory FEATURE getFeature BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""Invalid Transformer factory feature"" End TryStatement StatementExpression Assignment MemberReference metricsHandler Cast ReferenceType SAXTransformerFactory MemberReference factory = StatementExpression MethodInvocation metricsHandler ClassCreator ReferenceType StreamResult ClassCreator ReferenceType OutputStreamWriter MemberReference xmlOutputStream Literal ""UTF-8"" setResult LocalVariableDeclaration ReferenceType Transformer VariableDeclarator transformer MethodInvocation metricsHandler getTransformer StatementExpression MethodInvocation transformer MemberReference OutputKeys INDENT Literal ""yes"" setOutputProperty LocalVariableDeclaration Modifier final ReferenceType Date VariableDeclarator now ClassCreator ReferenceType Date StatementExpression MethodInvocation metricsHandler startDocument LocalVariableDeclaration ReferenceType AttributesImpl VariableDeclarator attr ClassCreator ReferenceType AttributesImpl StatementExpression MethodInvocation attr Literal """" Literal ""company"" Literal ""company"" Literal ""CDATA"" Literal ""metamata"" addAttribute StatementExpression MethodInvocation attr Literal """" Literal ""snapshot_created"" Literal ""snapshot_created"" Literal ""CDATA"" MethodInvocation DateUtils MemberReference now MemberReference DateUtils ISO8601_DATETIME_PATTERN format addAttribute StatementExpression MethodInvocation attr Literal """" Literal ""program_start"" Literal ""program_start"" Literal ""CDATA"" MethodInvocation DateUtils ClassCreator ReferenceType Date MemberReference DateUtils ISO8601_DATETIME_PATTERN format addAttribute StatementExpression MethodInvocation metricsHandler Literal """" Literal ""metrics"" Literal ""metrics"" MemberReference attr startElement StatementExpression MethodInvocation parseOutput CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * Pretty dangerous business here.
     */ Modifier public stop TryStatement WhileStatement BinaryOperation > MethodInvocation stack size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType ElementEntry VariableDeclarator elem Cast ReferenceType ElementEntry MethodInvocation stack pop StatementExpression MethodInvocation metricsHandler Literal """" MethodInvocation elem getType MethodInvocation elem getType endElement End StatementExpression MethodInvocation metricsHandler Literal """" Literal ""metrics"" Literal ""metrics"" endElement StatementExpression MethodInvocation metricsHandler endDocument CatchClause CatchClauseParameter SAXException e StatementExpression MethodInvocation e printStackTrace ThrowStatement ClassCreator ReferenceType IllegalStateException MethodInvocation e getMessage MethodDeclaration /** read each line and process it */ Modifier protected parseOutput IOException SAXException LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference metricsOutput LocalVariableDeclaration ReferenceType String VariableDeclarator line Literal null WhileStatement BinaryOperation != Assignment MemberReference line MethodInvocation br readLine = Literal null BlockStatement StatementExpression MethodInvocation MemberReference line processLine End MethodDeclaration /**
     * Process a metrics line. If the metrics is invalid and that this is not
     * the header line, it is display as info.
     * @param line the line to process, it is normally a line full of metrics.
     */ Modifier protected processLine FormalParameter ReferenceType String line SAXException IfStatement MethodInvocation line Literal ""Construct\tV(G)\tLOC\tDIT\tNOA\tNRM\tNLM\tWMC\tRFC\tDAC\tFANOUT\tCBO\tLCOM\tNOCL"" startsWith BlockStatement ReturnStatement End TryStatement LocalVariableDeclaration ReferenceType MetricsElement VariableDeclarator elem MethodInvocation MetricsElement MemberReference line parse StatementExpression MethodInvocation MemberReference elem startElement CatchClause CatchClauseParameter ParseException e StatementExpression MethodInvocation task MemberReference line MemberReference Project MSG_INFO log MethodDeclaration /**
     * Start a new construct. Elements are popped until we are on the same
     * parent node, then the element type is guessed and pushed on the
     * stack.
     * @param elem the element to process.
     * @throws SAXException thrown if there is a problem when sending SAX events.
     */ Modifier protected startElement FormalParameter ReferenceType MetricsElement elem SAXException LocalVariableDeclaration BasicType int VariableDeclarator indent MethodInvocation elem getIndent IfStatement BinaryOperation > MethodInvocation stack size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType ElementEntry VariableDeclarator previous Cast ReferenceType ElementEntry MethodInvocation stack peek TryStatement WhileStatement BinaryOperation && BinaryOperation <= MemberReference indent MethodInvocation previous getIndent BinaryOperation > MethodInvocation stack size Literal 0 BlockStatement StatementExpression MethodInvocation stack pop StatementExpression MethodInvocation metricsHandler Literal """" MethodInvocation previous getType MethodInvocation previous getType endElement StatementExpression Assignment MemberReference previous Cast ReferenceType ElementEntry MethodInvocation stack peek = End CatchClause CatchClauseParameter EmptyStackException ignored End LocalVariableDeclaration ReferenceType String VariableDeclarator type MethodInvocation MemberReference elem getConstructType LocalVariableDeclaration ReferenceType Attributes VariableDeclarator attrs MethodInvocation MemberReference elem createAttributes StatementExpression MethodInvocation metricsHandler Literal """" MemberReference type MemberReference type MemberReference attrs startElement StatementExpression MethodInvocation stack ClassCreator ReferenceType ElementEntry MemberReference type MemberReference indent push MethodDeclaration /**
     * return the construct type of the element. We can hardly recognize the
     * type of a metrics element, so we are kind of forced to do some black
     * magic based on the name and indentation to recognize the type.
     * @param elem  the metrics element to guess for its type.
     * @return the type of the metrics element, either PACKAGE, FILE, CLASS or
     * METHOD.
     */ Modifier protected ReferenceType String getConstructType FormalParameter ReferenceType MetricsElement elem IfStatement MethodInvocation elem isCompilationUnit BlockStatement ReturnStatement MemberReference FILE End IfStatement MethodInvocation elem isMethod BlockStatement ReturnStatement MemberReference METHOD End IfStatement BinaryOperation == MethodInvocation stack size Literal 0 BlockStatement ReturnStatement MemberReference PACKAGE End LocalVariableDeclaration Modifier final ReferenceType ElementEntry VariableDeclarator previous Cast ReferenceType ElementEntry MethodInvocation stack peek LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator prevType MethodInvocation previous getType LocalVariableDeclaration Modifier final BasicType int VariableDeclarator prevIndent MethodInvocation previous getIndent LocalVariableDeclaration Modifier final BasicType int VariableDeclarator indent MethodInvocation elem getIndent IfStatement BinaryOperation && MethodInvocation prevType MemberReference FILE equals BinaryOperation > MemberReference indent MemberReference prevIndent BlockStatement ReturnStatement MemberReference CLASS End IfStatement BinaryOperation && MethodInvocation prevType MemberReference CLASS equals BinaryOperation >= MemberReference indent MemberReference prevIndent BlockStatement ReturnStatement MemberReference CLASS End ReturnStatement MemberReference PACKAGE MethodDeclaration /**
     * Create all attributes of a MetricsElement skipping those who have an
     * empty string
     */ Modifier protected ReferenceType Attributes createAttributes FormalParameter ReferenceType MetricsElement elem LocalVariableDeclaration ReferenceType AttributesImpl VariableDeclarator impl ClassCreator ReferenceType AttributesImpl LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration ReferenceType String VariableDeclarator name MemberReference ArraySelector MemberReference ++ i ATTRIBUTES StatementExpression MethodInvocation impl Literal """" MemberReference name MemberReference name Literal ""CDATA"" MethodInvocation elem getName addAttribute LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator metrics MethodInvocation elem getMetrics ForStatement ForControl MethodInvocation metrics hasMoreElements MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator value Cast ReferenceType String MethodInvocation metrics nextElement IfStatement BinaryOperation > MethodInvocation value length Literal 0 BlockStatement StatementExpression Assignment MemberReference name MemberReference ArraySelector MemberReference i ATTRIBUTES = StatementExpression MethodInvocation impl Literal """" MemberReference name MemberReference name Literal ""CDATA"" MemberReference value addAttribute End End ReturnStatement MemberReference impl ClassDeclaration Modifier private final static /**
     * helper class to keep track of elements via its type and indent
     * that's all we need to guess a type.
     */ ElementEntry FieldDeclaration Modifier private ReferenceType String VariableDeclarator type FieldDeclaration Modifier private BasicType int VariableDeclarator indent ConstructorDeclaration ElementEntry FormalParameter ReferenceType String type FormalParameter BasicType int indent StatementExpression Assignment This MemberReference type MemberReference type = StatementExpression Assignment This MemberReference indent MemberReference indent = MethodDeclaration Modifier public ReferenceType String getType ReturnStatement MemberReference type MethodDeclaration Modifier public BasicType int getIndent ReturnStatement MemberReference indent ReferenceType ExecuteStreamHandler ClassDeclaration MetricsElement FieldDeclaration Modifier private final static ReferenceType NumberFormat VariableDeclarator METAMATA_NF FieldDeclaration Modifier private final static ReferenceType NumberFormat VariableDeclarator NEUTRAL_NF StatementExpression Assignment MemberReference METAMATA_NF MethodInvocation NumberFormat getInstance = StatementExpression MethodInvocation METAMATA_NF Literal 1 setMaximumFractionDigits StatementExpression Assignment MemberReference NEUTRAL_NF MethodInvocation NumberFormat getInstance = IfStatement BinaryOperation instanceof MemberReference NEUTRAL_NF ReferenceType DecimalFormat BlockStatement StatementExpression Cast ReferenceType DecimalFormat MemberReference NEUTRAL_NF End StatementExpression MethodInvocation NEUTRAL_NF Literal 1 setMaximumFractionDigits FieldDeclaration Modifier private BasicType int VariableDeclarator indent FieldDeclaration Modifier private ReferenceType String VariableDeclarator construct FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator metrics ConstructorDeclaration MetricsElement FormalParameter BasicType int indent FormalParameter ReferenceType String construct FormalParameter ReferenceType Vector metrics StatementExpression Assignment This MemberReference indent MemberReference indent = StatementExpression Assignment This MemberReference construct MemberReference construct = StatementExpression Assignment This MemberReference metrics MemberReference metrics = MethodDeclaration Modifier public BasicType int getIndent ReturnStatement MemberReference indent MethodDeclaration Modifier public ReferenceType String getName ReturnStatement MemberReference construct MethodDeclaration Modifier public ReferenceType Enumeration getMetrics ReturnStatement MethodInvocation metrics elements MethodDeclaration Modifier public BasicType boolean isCompilationUnit ReturnStatement BinaryOperation || MethodInvocation construct Literal "".java"" endsWith MethodInvocation construct Literal "".class"" endsWith MethodDeclaration Modifier public BasicType boolean isMethod ReturnStatement BinaryOperation || MethodInvocation construct Literal ""(...)"" endsWith MethodInvocation construct Literal ""()"" endsWith MethodDeclaration Modifier public static ReferenceType MetricsElement parse FormalParameter ReferenceType String line ParseException LocalVariableDeclaration Modifier final ReferenceType Vector VariableDeclarator metrics ClassCreator ReferenceType Vector LocalVariableDeclaration BasicType int VariableDeclarator pos WhileStatement BinaryOperation != Assignment MemberReference pos MethodInvocation line Literal '\t' indexOf = Literal - 1 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator token MethodInvocation line Literal 0 MemberReference pos substring StatementExpression MethodInvocation metrics MemberReference token addElement StatementExpression Assignment MemberReference line MethodInvocation line BinaryOperation + MemberReference pos Literal 1 substring = End StatementExpression MethodInvocation metrics MemberReference line addElement IfStatement BinaryOperation != MethodInvocation metrics size Literal 14 BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Could not parse the following line as "" Literal ""a metrics: -->"" MemberReference line Literal ""<--"" Literal - 1 End LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation metrics Literal 0 elementAt StatementExpression MethodInvocation metrics Literal 0 removeElementAt LocalVariableDeclaration BasicType int VariableDeclarator indent Literal 0 StatementExpression Assignment MemberReference pos MethodInvocation name Literal '/' lastIndexOf = IfStatement BinaryOperation != MemberReference pos Literal - 1 BlockStatement StatementExpression Assignment MemberReference name MethodInvocation name BinaryOperation + MemberReference pos Literal 1 substring = StatementExpression Assignment MemberReference indent BinaryOperation + MemberReference pos Literal 1 = End ReturnStatement ClassCreator ReferenceType MetricsElement MemberReference indent MemberReference name MemberReference metrics",0
235,235,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.BufferedInputStream Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStream Import java.util.zip.GZIPInputStream Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.bzip2.CBZip2InputStream Import org.apache.tools.tar.TarEntry Import org.apache.tools.tar.TarInputStream ClassDeclaration Modifier public /**
 * Untar a file.
 * <p>For JDK 1.1 &quot;last modified time&quot; field is set to current time instead of being
 * carried from the archive file.</p>
 * <p>PatternSets are used to select files to extract
 * <I>from</I> the archive.  If no patternset is used, all files are extracted.
 * </p>
 * <p>FileSet>s may be used to select archived files
 * to perform unarchival upon.
 * </p>
 * <p>File permissions will not be restored on extracted files.</p>
 * <p>The untar task recognizes the long pathname entries used by GNU tar.<p>
 *
 * @since Ant 1.1
 *
 * @ant.task category=""packaging""
 */ Untar FieldDeclaration /**
     *   compression method
     */ Modifier private ReferenceType UntarCompressionMethod VariableDeclarator compression ClassCreator ReferenceType UntarCompressionMethod MethodDeclaration /**
     * Set decompression algorithm to use; default=none.
     *
     * Allowable values are
     * <ul>
     *   <li>none - no compression
     *   <li>gzip - Gzip compression
     *   <li>bzip2 - Bzip2 compression
     * </ul>
     *
     * @param method compression method
     */ Modifier public setCompression FormalParameter ReferenceType UntarCompressionMethod method StatementExpression Assignment MemberReference compression MemberReference method = MethodDeclaration /**
     * No encoding support in Untar.
     *
     * @since Ant 1.6
     */ Modifier public setEncoding FormalParameter ReferenceType String encoding ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The "" MethodInvocation getTaskName Literal "" task doesn't support the encoding"" Literal "" attribute"" MethodInvocation getLocation MethodDeclaration Modifier protected expandFile FormalParameter ReferenceType FileUtils fileUtils FormalParameter ReferenceType File srcF FormalParameter ReferenceType File dir LocalVariableDeclaration ReferenceType TarInputStream VariableDeclarator tis Literal null TryStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Expanding: "" MemberReference srcF Literal "" into "" MemberReference dir MemberReference Project MSG_INFO log StatementExpression Assignment MemberReference tis ClassCreator ReferenceType TarInputStream MethodInvocation compression MemberReference srcF ClassCreator ReferenceType BufferedInputStream ClassCreator ReferenceType FileInputStream MemberReference srcF decompress = LocalVariableDeclaration ReferenceType TarEntry VariableDeclarator te Literal null WhileStatement BinaryOperation != Assignment MemberReference te MethodInvocation tis getNextEntry = Literal null BlockStatement StatementExpression MethodInvocation MemberReference fileUtils MemberReference srcF MemberReference dir MemberReference tis MethodInvocation te getName MethodInvocation te getModTime MethodInvocation te isDirectory extractFile End StatementExpression MethodInvocation Literal ""expand complete"" MemberReference Project MSG_VERBOSE log CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Error while expanding "" MethodInvocation srcF getPath MemberReference ioe MethodInvocation getLocation IfStatement BinaryOperation != MemberReference tis Literal null BlockStatement TryStatement StatementExpression MethodInvocation tis close CatchClause CatchClauseParameter IOException e End ClassDeclaration Modifier public final static /**
     * Valid Modes for Compression attribute to Untar Task
     *
     */ UntarCompressionMethod FieldDeclaration /**
         *  No compression
         */ Modifier private final static ReferenceType String VariableDeclarator NONE Literal ""none"" FieldDeclaration /**
         *  GZIP compression
         */ Modifier private final static ReferenceType String VariableDeclarator GZIP Literal ""gzip"" FieldDeclaration /**
         *  BZIP2 compression
         */ Modifier private final static ReferenceType String VariableDeclarator BZIP2 Literal ""bzip2"" ConstructorDeclaration Modifier public /**
         *  Constructor
         */ UntarCompressionMethod StatementExpression SuperConstructorInvocation StatementExpression MethodInvocation MemberReference NONE setValue MethodDeclaration /**
         * Get valid enumeration values
         *
         * @return valid values
         */ Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer MemberReference NONE MemberReference GZIP MemberReference BZIP2 MethodDeclaration /**
         *  This method wraps the input stream with the
         *     corresponding decompression method
         *
         *  @param file provides location information for BuildException
         *  @param istream input stream
         *  @return input stream with on-the-fly decompression
         *  @exception IOException thrown by GZIPInputStream constructor
         *  @exception BuildException thrown if bzip stream does not
         *     start with expected magic values
         */ Modifier private ReferenceType InputStream decompress FormalParameter Modifier final ReferenceType File file FormalParameter Modifier final ReferenceType InputStream istream IOException BuildException LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator value MethodInvocation getValue IfStatement MethodInvocation GZIP MemberReference value equals BlockStatement ReturnStatement ClassCreator ReferenceType GZIPInputStream MemberReference istream BlockStatement IfStatement MethodInvocation BZIP2 MemberReference value equals BlockStatement LocalVariableDeclaration Modifier final BasicType char VariableDeclarator magic ArrayCreator BasicType char ArrayInitializer Literal 'B' Literal 'Z' ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference magic length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MethodInvocation istream read MemberReference ArraySelector MemberReference i magic BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Invalid bz2 file."" MethodInvocation file toString End End ReturnStatement ClassCreator ReferenceType CBZip2InputStream MemberReference istream End End ReturnStatement MemberReference istream ReferenceType EnumeratedAttribute ReferenceType Expand",1
363,363,"CompilationUnit PackageDeclaration org.apache.tools.ant.listener Import org.apache.commons.logging.Log Import org.apache.commons.logging.LogConfigurationException Import org.apache.commons.logging.LogFactory Import org.apache.tools.ant.BuildListener Import org.apache.tools.ant.BuildLogger Import org.apache.tools.ant.BuildEvent Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.UnknownElement Import java.io.PrintStream ClassDeclaration Modifier public /**
 * Jakarta Commons Logging listener.
 * Note: do not use the SimpleLog as your logger implementation as it
 * causes an infinite loop since it writes to System.err, which Ant traps
 * and reroutes to the logger/listener layer.
 *
 * The following names are used for the log:
 *  org.apache.tools.ant.Project.PROJECT_NAME  - for project events
 *  org.apache.tools.ant.Target.TARGET_NAME - for target events
 *  TASK_CLASS_NAME.TARGET_NAME - for events in individual targets.
 *
 * In all target and project names we replace ""."" and "" "" with ""-"".
 *
 * TODO: we should use the advanced context logging features (and expose them
 * in c-l first :-)
 * TODO: this is _very_ inefficient. Switching the out and tracking the logs
 * can be optimized a lot - but may require few more changes to the core.
 *
 * @since Ant 1.5
 */ CommonsLoggingListener FieldDeclaration /** Indicates if the listener was initialized. */ Modifier private BasicType boolean VariableDeclarator initialized Literal false FieldDeclaration Modifier private ReferenceType LogFactory VariableDeclarator logFactory ConstructorDeclaration Modifier public /**
     * Construct the listener and make sure that a LogFactory
     * can be obtained.
     */ CommonsLoggingListener MethodDeclaration Modifier private ReferenceType Log getLog FormalParameter ReferenceType String cat FormalParameter ReferenceType String suffix IfStatement BinaryOperation != MemberReference suffix Literal null BlockStatement StatementExpression Assignment MemberReference suffix MethodInvocation suffix Literal '.' Literal '-' replace = StatementExpression Assignment MemberReference suffix MethodInvocation suffix Literal ' ' Literal '-' replace = StatementExpression Assignment MemberReference cat BinaryOperation + BinaryOperation + MemberReference cat Literal ""."" MemberReference suffix = End LocalVariableDeclaration ReferenceType PrintStream VariableDeclarator tmpOut MemberReference System out LocalVariableDeclaration ReferenceType PrintStream VariableDeclarator tmpErr MemberReference System err StatementExpression MethodInvocation System MemberReference out setOut StatementExpression MethodInvocation System MemberReference err setErr IfStatement MemberReference ! initialized BlockStatement TryStatement StatementExpression Assignment MemberReference logFactory MethodInvocation LogFactory getFactory = CatchClause CatchClauseParameter LogConfigurationException e StatementExpression MethodInvocation e MemberReference System err printStackTrace ReturnStatement Literal null End StatementExpression Assignment MemberReference initialized Literal true = LocalVariableDeclaration ReferenceType Log VariableDeclarator log MethodInvocation logFactory MemberReference cat getInstance StatementExpression MethodInvocation System MemberReference tmpOut setOut StatementExpression MethodInvocation System MemberReference tmpErr setErr ReturnStatement MemberReference log MethodDeclaration /**
     * @see BuildListener#buildStarted
     */ Modifier public buildStarted FormalParameter ReferenceType BuildEvent event LocalVariableDeclaration ReferenceType String VariableDeclarator categoryString Literal ""org.apache.tools.ant.Project"" LocalVariableDeclaration ReferenceType Log VariableDeclarator log MethodInvocation MemberReference categoryString Literal null getLog IfStatement MemberReference initialized BlockStatement StatementExpression MethodInvocation MemberReference log Literal ""Build started."" MemberReference Project MSG_INFO Literal null realLog End MethodDeclaration /**
     * @see BuildListener#buildFinished
     */ Modifier public buildFinished FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator categoryString Literal ""org.apache.tools.ant.Project"" LocalVariableDeclaration ReferenceType Log VariableDeclarator log MethodInvocation MemberReference categoryString MethodInvocation event MethodInvocation getName getProject getLog IfStatement BinaryOperation == MethodInvocation event getException Literal null BlockStatement StatementExpression MethodInvocation MemberReference log Literal ""Build finished."" MemberReference Project MSG_INFO Literal null realLog BlockStatement StatementExpression MethodInvocation MemberReference log Literal ""Build finished with error."" MemberReference Project MSG_ERR MethodInvocation event getException realLog End End MethodDeclaration /**
     * @see BuildListener#targetStarted
     */ Modifier public targetStarted FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Log VariableDeclarator log MethodInvocation Literal ""org.apache.tools.ant.Target"" MethodInvocation event MethodInvocation getName getTarget getLog StatementExpression MethodInvocation MemberReference log BinaryOperation + Literal ""Start: "" MethodInvocation event MethodInvocation getName getTarget MemberReference Project MSG_DEBUG Literal null realLog End MethodDeclaration /**
     * @see BuildListener#targetFinished
     */ Modifier public targetFinished FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator targetName MethodInvocation event MethodInvocation getName getTarget LocalVariableDeclaration ReferenceType Log VariableDeclarator log MethodInvocation Literal ""org.apache.tools.ant.Target"" MethodInvocation event MethodInvocation getName getTarget getLog IfStatement BinaryOperation == MethodInvocation event getException Literal null BlockStatement StatementExpression MethodInvocation MemberReference log BinaryOperation + Literal ""Target end: "" MemberReference targetName MemberReference Project MSG_DEBUG Literal null realLog BlockStatement StatementExpression MethodInvocation MemberReference log BinaryOperation + BinaryOperation + Literal ""Target \"""" MemberReference targetName Literal ""\"" finished with error."" MemberReference Project MSG_ERR MethodInvocation event getException realLog End End MethodDeclaration /**
     * @see BuildListener#taskStarted
     */ Modifier public taskStarted FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Task VariableDeclarator task MethodInvocation event getTask LocalVariableDeclaration ReferenceType Object VariableDeclarator real MemberReference task IfStatement BinaryOperation instanceof MemberReference task ReferenceType UnknownElement BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator realObj Cast ReferenceType UnknownElement MemberReference task IfStatement BinaryOperation != MemberReference realObj Literal null BlockStatement StatementExpression Assignment MemberReference real MemberReference realObj = End End LocalVariableDeclaration ReferenceType Log VariableDeclarator log MethodInvocation MethodInvocation real MethodInvocation getName getClass Literal null getLog IfStatement MethodInvocation log isTraceEnabled BlockStatement StatementExpression MethodInvocation MemberReference log BinaryOperation + BinaryOperation + Literal ""Task \"""" MethodInvocation task getTaskName Literal ""\"" started "" MemberReference Project MSG_VERBOSE Literal null realLog End End MethodDeclaration /**
     * @see BuildListener#taskFinished
     */ Modifier public taskFinished FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Task VariableDeclarator task MethodInvocation event getTask LocalVariableDeclaration ReferenceType Object VariableDeclarator real MemberReference task IfStatement BinaryOperation instanceof MemberReference task ReferenceType UnknownElement BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator realObj Cast ReferenceType UnknownElement MemberReference task IfStatement BinaryOperation != MemberReference realObj Literal null BlockStatement StatementExpression Assignment MemberReference real MemberReference realObj = End End LocalVariableDeclaration ReferenceType Log VariableDeclarator log MethodInvocation MethodInvocation real MethodInvocation getName getClass Literal null getLog IfStatement BinaryOperation == MethodInvocation event getException Literal null BlockStatement IfStatement MethodInvocation log isTraceEnabled BlockStatement StatementExpression MethodInvocation MemberReference log BinaryOperation + BinaryOperation + Literal ""Task \"""" MethodInvocation task getTaskName Literal ""\"" finished."" MemberReference Project MSG_VERBOSE Literal null realLog End BlockStatement StatementExpression MethodInvocation MemberReference log BinaryOperation + BinaryOperation + Literal ""Task \"""" MethodInvocation task getTaskName Literal ""\"" finished with error."" MemberReference Project MSG_ERR MethodInvocation event getException realLog End End MethodDeclaration /**
     * @see BuildListener#messageLogged
     */ Modifier public messageLogged FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator categoryObject MethodInvocation event getTask LocalVariableDeclaration ReferenceType String VariableDeclarator categoryString Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator categoryDetail Literal null IfStatement BinaryOperation == MemberReference categoryObject Literal null BlockStatement StatementExpression Assignment MemberReference categoryObject MethodInvocation event getTarget = IfStatement BinaryOperation == MemberReference categoryObject Literal null BlockStatement StatementExpression Assignment MemberReference categoryObject MethodInvocation event getProject = StatementExpression Assignment MemberReference categoryString Literal ""org.apache.tools.ant.Project"" = StatementExpression Assignment MemberReference categoryDetail MethodInvocation event MethodInvocation getName getProject = BlockStatement StatementExpression Assignment MemberReference categoryString Literal ""org.apache.tools.ant.Target"" = StatementExpression Assignment MemberReference categoryDetail MethodInvocation event MethodInvocation getName getTarget = End BlockStatement IfStatement BinaryOperation != MethodInvocation event getTarget Literal null BlockStatement StatementExpression Assignment MemberReference categoryString MethodInvocation categoryObject MethodInvocation getName getClass = StatementExpression Assignment MemberReference categoryDetail MethodInvocation event MethodInvocation getName getTarget = BlockStatement StatementExpression Assignment MemberReference categoryString MethodInvocation categoryObject MethodInvocation getName getClass = End End LocalVariableDeclaration ReferenceType Log VariableDeclarator log MethodInvocation MemberReference categoryString MemberReference categoryDetail getLog LocalVariableDeclaration BasicType int VariableDeclarator priority MethodInvocation event getPriority LocalVariableDeclaration ReferenceType String VariableDeclarator message MethodInvocation event getMessage StatementExpression MethodInvocation MemberReference log MemberReference message MemberReference priority Literal null realLog End MethodDeclaration Modifier private realLog FormalParameter ReferenceType Log log FormalParameter ReferenceType String message FormalParameter BasicType int priority FormalParameter ReferenceType Throwable t LocalVariableDeclaration ReferenceType PrintStream VariableDeclarator tmpOut MemberReference System out LocalVariableDeclaration ReferenceType PrintStream VariableDeclarator tmpErr MemberReference System err StatementExpression MethodInvocation System MemberReference out setOut StatementExpression MethodInvocation System MemberReference err setErr SwitchStatement MemberReference priority SwitchStatementCase MemberReference Project MSG_ERR IfStatement BinaryOperation == MemberReference t Literal null BlockStatement StatementExpression MethodInvocation log MemberReference message error BlockStatement StatementExpression MethodInvocation log MemberReference message MemberReference t error End BreakStatement SwitchStatementCase MemberReference Project MSG_WARN IfStatement BinaryOperation == MemberReference t Literal null BlockStatement StatementExpression MethodInvocation log MemberReference message warn BlockStatement StatementExpression MethodInvocation log MemberReference message MemberReference t warn End BreakStatement SwitchStatementCase MemberReference Project MSG_INFO IfStatement BinaryOperation == MemberReference t Literal null BlockStatement StatementExpression MethodInvocation log MemberReference message info BlockStatement StatementExpression MethodInvocation log MemberReference message MemberReference t info End BreakStatement SwitchStatementCase MemberReference Project MSG_VERBOSE StatementExpression MethodInvocation log MemberReference message debug BreakStatement SwitchStatementCase MemberReference Project MSG_DEBUG StatementExpression MethodInvocation log MemberReference message debug BreakStatement SwitchStatementCase StatementExpression MethodInvocation log MemberReference message error BreakStatement End StatementExpression MethodInvocation System MemberReference tmpOut setOut StatementExpression MethodInvocation System MemberReference tmpErr setErr FieldDeclaration ReferenceType PrintStream VariableDeclarator out MemberReference System out FieldDeclaration ReferenceType PrintStream VariableDeclarator err MemberReference System err MethodDeclaration Modifier public setMessageOutputLevel FormalParameter BasicType int level MethodDeclaration Modifier public setOutputPrintStream FormalParameter ReferenceType PrintStream output StatementExpression Assignment This MemberReference out MemberReference output = MethodDeclaration Modifier public setEmacsMode FormalParameter BasicType boolean emacsMode MethodDeclaration Modifier public setErrorPrintStream FormalParameter ReferenceType PrintStream err StatementExpression Assignment This MemberReference err MemberReference err = ReferenceType BuildListener ReferenceType BuildLogger",0
621,621,,0
69,69,"CompilationUnit PackageDeclaration org.apache.tools.ant.launch ClassDeclaration Modifier public /**
 * Signals an error condition during launching
 *
 * @since Ant 1.6
 */ LaunchException ConstructorDeclaration Modifier public /**
     * Constructs an exception with the given descriptive message.
     *
     * @param message A description of or information about the exception.
     *            Should not be <code>null</code>.
     */ LaunchException FormalParameter ReferenceType String message StatementExpression SuperConstructorInvocation MemberReference message ReferenceType Exception",0
381,381,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.clearcase Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Performs ClearCase mkdir.
 *
 * <p>
 * The following attributes are interpreted:
 * <table border=""1"">
 *   <tr>
 *     <th>Attribute</th>
 *     <th>Values</th>
 *     <th>Required</th>
 *   </tr>
 *   <tr>
 *      <td>viewpath</td>
 *      <td>Path to the ClearCase view directory that the command will operate on</td>
 *      <td>Yes</td>
 *   <tr>
 *   <tr>
 *      <td>comment</td>
 *      <td>Specify a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>commentfile</td>
 *      <td>Specify a file containing a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>nocheckout</td>
 *      <td>Do not checkout after element creation</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>failonerr</td>
 *      <td>Throw an exception if the command fails. Default is true</td>
 *      <td>No</td>
 *   <tr>
 * </table>
 *
 */ CCMkdir FieldDeclaration Modifier private ReferenceType String VariableDeclarator mComment Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mCfile Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator mNoco Literal false MethodDeclaration /**
     * Executes the task.
     * <p>
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType Project VariableDeclarator aProj MethodInvocation getProject LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 IfStatement BinaryOperation == MethodInvocation getViewPath Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation aProj MethodInvocation getPath getBaseDir setViewPath End StatementExpression MethodInvocation commandLine MethodInvocation getClearToolCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_MKDIR setValue createArgument StatementExpression MethodInvocation MemberReference commandLine checkOptions IfStatement MethodInvocation ! getFailOnErr BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Ignoring any errors that occur for: "" MethodInvocation getViewPathBasename MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine run = IfStatement BinaryOperation && MethodInvocation Execute MemberReference result isFailure MethodInvocation getFailOnErr BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * Check the command line options.
     */ Modifier private checkOptions FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentCommand BlockStatement IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentFileCommand BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOCOMMENT setValue createArgument End End IfStatement MethodInvocation getNoCheckout BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOCHECKOUT setValue createArgument End StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getViewPath setValue createArgument MethodDeclaration /**
     * Sets the comment string.
     *
     * @param comment the comment string
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression Assignment MemberReference mComment MemberReference comment = MethodDeclaration /**
     * Get comment string
     *
     * @return String containing the comment
     */ Modifier public ReferenceType String getComment ReturnStatement MemberReference mComment MethodDeclaration /**
     * Specifies a file containing a comment.
     *
     * @param cfile the path to the comment file
     */ Modifier public setCommentFile FormalParameter ReferenceType String cfile StatementExpression Assignment MemberReference mCfile MemberReference cfile = MethodDeclaration /**
     * Get comment file
     *
     * @return String containing the path to the comment file
     */ Modifier public ReferenceType String getCommentFile ReturnStatement MemberReference mCfile MethodDeclaration /**
     * If true, do not checkout element after creation.
     *
     * @param co the status to set the flag to
     */ Modifier public setNoCheckout FormalParameter BasicType boolean co StatementExpression Assignment MemberReference mNoco MemberReference co = MethodDeclaration /**
     * Get no checkout flag status
     *
     * @return boolean containing status of noco flag
     */ Modifier public BasicType boolean getNoCheckout ReturnStatement MemberReference mNoco MethodDeclaration /**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or
     *            without the comment flag and string appended
     */ Modifier private getCommentCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENT setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getComment setValue createArgument End MethodDeclaration /**
     * Get the 'commentfile' command
     *
     * @param cmd containing the command line string with or
     *            without the commentfile flag and file appended
     */ Modifier private getCommentFileCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENTFILE setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getCommentFile setValue createArgument End FieldDeclaration /**
     * -c flag -- comment to attach to the directory
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENT Literal ""-c"" FieldDeclaration /**
     * -cfile flag -- file containing a comment to attach to the directory
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENTFILE Literal ""-cfile"" FieldDeclaration /**
     * -nc flag -- no comment is specified
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOCOMMENT Literal ""-nc"" FieldDeclaration /**
     * -nco flag -- do not checkout element after creation
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOCHECKOUT Literal ""-nco"" ReferenceType ClearCase",0
143,143,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.optional.image Import javax.media.jai.PlanarImage Import java.awt.BasicStroke Import java.awt.Graphics2D Import java.awt.geom.Ellipse2D Import java.awt.image.BufferedImage ClassDeclaration Modifier public /**
 *
 * @see org.apache.tools.ant.taskdefs.optional.image.Image
 */ Ellipse FieldDeclaration Modifier protected BasicType int VariableDeclarator width Literal 0 FieldDeclaration Modifier protected BasicType int VariableDeclarator height Literal 0 MethodDeclaration Modifier public setWidth FormalParameter BasicType int width StatementExpression Assignment This MemberReference width MemberReference width = MethodDeclaration Modifier public setHeight FormalParameter BasicType int height StatementExpression Assignment This MemberReference height MemberReference height = MethodDeclaration Modifier public ReferenceType PlanarImage executeDrawOperation LocalVariableDeclaration ReferenceType BufferedImage VariableDeclarator bi ClassCreator ReferenceType BufferedImage MemberReference width MemberReference height MemberReference BufferedImage TYPE_4BYTE_ABGR_PRE LocalVariableDeclaration ReferenceType Graphics2D VariableDeclarator graphics Cast ReferenceType Graphics2D MethodInvocation bi getGraphics IfStatement MethodInvocation ! stroke Literal ""transparent"" equals BlockStatement LocalVariableDeclaration ReferenceType BasicStroke VariableDeclarator b_stroke ClassCreator ReferenceType BasicStroke MemberReference stroke_width StatementExpression MethodInvocation graphics MethodInvocation ColorMapper MemberReference stroke getColorByName setColor StatementExpression MethodInvocation graphics MemberReference b_stroke setStroke StatementExpression MethodInvocation graphics ClassCreator ReferenceType Ellipse2D ReferenceType Double Literal 0 Literal 0 MemberReference width MemberReference height draw End IfStatement MethodInvocation ! fill Literal ""transparent"" equals BlockStatement StatementExpression MethodInvocation graphics MethodInvocation ColorMapper MemberReference fill getColorByName setColor StatementExpression MethodInvocation graphics ClassCreator ReferenceType Ellipse2D ReferenceType Double Literal 0 Literal 0 MemberReference width MemberReference height fill End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation instructions size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType ImageOperation VariableDeclarator instr Cast ReferenceType ImageOperation MethodInvocation instructions MemberReference i elementAt IfStatement BinaryOperation instanceof MemberReference instr ReferenceType DrawOperation BlockStatement LocalVariableDeclaration ReferenceType PlanarImage VariableDeclarator img Cast ReferenceType DrawOperation MemberReference instr StatementExpression MethodInvocation graphics MethodInvocation img getAsBufferedImage Literal null Literal 0 Literal 0 drawImage IfStatement BinaryOperation instanceof MemberReference instr ReferenceType TransformOperation BlockStatement StatementExpression Assignment MemberReference graphics Cast ReferenceType Graphics2D MethodInvocation bi getGraphics = LocalVariableDeclaration ReferenceType PlanarImage VariableDeclarator image Cast ReferenceType TransformOperation MemberReference instr StatementExpression Assignment MemberReference bi MethodInvocation image getAsBufferedImage = End End End ReturnStatement MethodInvocation PlanarImage MemberReference bi wrapRenderedImage ReferenceType BasicShape ReferenceType DrawOperation",1
72,72,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional Import java.io.BufferedReader Import java.io.BufferedWriter Import java.io.File Import java.io.FileInputStream Import java.io.FileReader Import java.io.FileOutputStream Import java.io.FileWriter Import java.io.InputStreamReader Import java.io.IOException Import java.io.OutputStreamWriter Import java.io.PrintWriter Import java.io.Reader Import java.io.Writer Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.RegularExpression Import org.apache.tools.ant.types.Substitution Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.ant.util.regexp.Regexp ClassDeclaration Modifier public /**
 * Performs regular expression string replacements in a text
 * file.  The input file(s) must be able to be properly processed by
 * a Reader instance.  That is, they must be text only, no binary.
 *
 * The syntax of the regular expression depends on the implementation that
 * you choose to use. The system property <code>ant.regexp.regexpimpl</code>
 * will be the classname of the implementation that will be used (the default
 * is <code>org.apache.tools.ant.util.regexp.JakartaOroRegexp</code> and
 * requires the Jakarta Oro Package).
 *
 * <pre>
 * For jdk  &lt;= 1.3, there are two available implementations:
 *   org.apache.tools.ant.util.regexp.JakartaOroRegexp (the default)
 *        Requires  the jakarta-oro package
 *
 *   org.apache.tools.ant.util.regexp.JakartaRegexpRegexp
 *        Requires the jakarta-regexp package
 *
 * For jdk &gt;= 1.4 an additional implementation is available:
 *   org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp
 *        Requires the jdk 1.4 built in regular expression package.
 *
 * Usage:
 *
 *   Call Syntax:
 *
 *     &lt;replaceregexp file=""file""
 *                    match=""pattern""
 *                    replace=""pattern""
 *                    flags=""options""?
 *                    byline=""true|false""? &gt;
 *       regexp?
 *       substitution?
 *       fileset*
 *     &lt;/replaceregexp&gt;
 *
 *    NOTE: You must have either the file attribute specified, or at least one fileset subelement
 *    to operation on.  You may not have the file attribute specified if you nest fileset elements
 *    inside this task.  Also, you cannot specify both match and a regular expression subelement at
 *    the same time, nor can you specify the replace attribute and the substitution subelement at
 *    the same time.
 *
 *   Attributes:
 *
 *     file    --&gt; A single file to operation on (mutually exclusive
 *                    with the fileset subelements)
 *     match   --&gt; The Regular expression to match
 *     replace --&gt; The Expression replacement string
 *     flags   --&gt; The options to give to the replacement
 *                 g = Substitute all occurrences. default is to replace only the first one
 *                 i = Case insensitive match
 *
 *     byline  --&gt; Should this file be processed a single line at a time (default is false)
 *                 ""true"" indicates to perform replacement on a line by line basis
 *                 ""false"" indicates to perform replacement on the whole file at once.
 *
 *  Example:
 *
 *     The following call could be used to replace an old property name in a "".properties""
 *     file with a new name.  In the replace attribute, you can refer to any part of the
 *     match expression in parenthesis using backslash followed by a number like '\1'.
 *
 *     &lt;replaceregexp file=""test.properties""
 *                    match=""MyProperty=(.*)""
 *                    replace=""NewProperty=\1""
 *                    byline=""true"" /&gt;
 *
 * </pre>
 *
 */ ReplaceRegExp FieldDeclaration Modifier private ReferenceType File VariableDeclarator file FieldDeclaration Modifier private ReferenceType String VariableDeclarator flags FieldDeclaration Modifier private BasicType boolean VariableDeclarator byline FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator filesets FieldDeclaration Modifier private ReferenceType RegularExpression VariableDeclarator regex FieldDeclaration Modifier private ReferenceType Substitution VariableDeclarator subs FieldDeclaration Modifier private ReferenceType FileUtils VariableDeclarator fileUtils MethodInvocation FileUtils newFileUtils FieldDeclaration /**
     * Encoding to assume for the files
     */ Modifier private ReferenceType String VariableDeclarator encoding Literal null ConstructorDeclaration Modifier public /** Default Constructor  */ ReplaceRegExp StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference file Literal null = StatementExpression Assignment This MemberReference filesets ClassCreator ReferenceType Vector = StatementExpression Assignment This MemberReference flags Literal """" = StatementExpression Assignment This MemberReference byline Literal false = StatementExpression Assignment This MemberReference regex Literal null = StatementExpression Assignment This MemberReference subs Literal null = MethodDeclaration /**
     * file for which the regular expression should be replaced;
     * required unless a nested fileset is supplied.
     * @param file The file for which the reg exp should be replaced.
     */ Modifier public setFile FormalParameter ReferenceType File file StatementExpression Assignment This MemberReference file MemberReference file = MethodDeclaration /**
     * the regular expression pattern to match in the file(s);
     * required if no nested &lt;regexp&gt; is used
     * @param match the match attribute.
     */ Modifier public setMatch FormalParameter ReferenceType String match IfStatement BinaryOperation != MemberReference regex Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one regular expression is allowed"" End StatementExpression Assignment MemberReference regex ClassCreator ReferenceType RegularExpression = StatementExpression MethodInvocation regex MemberReference match setPattern MethodDeclaration /**
     * The substitution pattern to place in the file(s) in place
     * of the regular expression.
     * Required if no nested &lt;substitution&gt; is used
     * @param replace the replace attribute
     */ Modifier public setReplace FormalParameter ReferenceType String replace IfStatement BinaryOperation != MemberReference subs Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Only one substitution expression is "" Literal ""allowed"" End StatementExpression Assignment MemberReference subs ClassCreator ReferenceType Substitution = StatementExpression MethodInvocation subs MemberReference replace setExpression MethodDeclaration /**
     * The flags to use when matching the regular expression.  For more
     * information, consult the Perl5 syntax.
     * <ul>
     *  <li>g : Global replacement.  Replace all occurrences found
     *  <li>i : Case Insensitive.  Do not consider case in the match
     *  <li>m : Multiline.  Treat the string as multiple lines of input,
     *         using ""^"" and ""$"" as the start or end of any line, respectively,
     *         rather than start or end of string.
     *  <li> s : Singleline.  Treat the string as a single line of input, using
     *        ""."" to match any character, including a newline, which normally,
     *        it would not match.
     *</ul>
     * @param flags the flags attribute
     */ Modifier public setFlags FormalParameter ReferenceType String flags StatementExpression Assignment This MemberReference flags MemberReference flags = MethodDeclaration /**
     * Process the file(s) one line at a time, executing the replacement
     * on one line at a time.  This is useful if you
     * want to only replace the first occurrence of a regular expression on
     * each line, which is not easy to do when processing the file as a whole.
     * Defaults to <i>false</i>.</td>
     * @param byline the byline attribute as a string
     * @deprecated - use setByLine(boolean)
     */ Modifier public setByLine FormalParameter ReferenceType String byline LocalVariableDeclaration ReferenceType Boolean VariableDeclarator res MethodInvocation Boolean MemberReference byline valueOf IfStatement BinaryOperation == MemberReference res Literal null BlockStatement StatementExpression Assignment MemberReference res MemberReference Boolean FALSE = End StatementExpression Assignment This MemberReference byline MethodInvocation res booleanValue = MethodDeclaration /**
     * Process the file(s) one line at a time, executing the replacement
     * on one line at a time.  This is useful if you
     * want to only replace the first occurrence of a regular expression on
     * each line, which is not easy to do when processing the file as a whole.
     * Defaults to <i>false</i>.</td>
     * @param byline the byline attribute
     */ Modifier public setByLine FormalParameter BasicType boolean byline StatementExpression Assignment This MemberReference byline MemberReference byline = MethodDeclaration /**
     * Specifies the encoding Ant expects the files to be in -
     * defaults to the platforms default encoding.
     * @param encoding the encoding attribute
     *
     * @since Ant 1.6
     */ Modifier public setEncoding FormalParameter ReferenceType String encoding StatementExpression Assignment This MemberReference encoding MemberReference encoding = MethodDeclaration /**
     * list files to apply the replacement to
     * @param set the fileset element
     */ Modifier public addFileset FormalParameter ReferenceType FileSet set StatementExpression MethodInvocation filesets MemberReference set addElement MethodDeclaration /**
     * A regular expression.
     * You can use this element to refer to a previously
     * defined regular expression datatype instance
     * @return the regular expression object to be configured as an element
     */ Modifier public ReferenceType RegularExpression createRegexp IfStatement BinaryOperation != MemberReference regex Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one regular expression is allowed."" End StatementExpression Assignment MemberReference regex ClassCreator ReferenceType RegularExpression = ReturnStatement MemberReference regex MethodDeclaration /**
     * A substitution pattern.  You can use this element to refer to a previously
     * defined substitution pattern datatype instance.
     * @return the substitution pattern object to be configured as an element
     */ Modifier public ReferenceType Substitution createSubstitution IfStatement BinaryOperation != MemberReference subs Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Only one substitution expression is "" Literal ""allowed"" End StatementExpression Assignment MemberReference subs ClassCreator ReferenceType Substitution = ReturnStatement MemberReference subs MethodDeclaration /**
     * Invoke a regular expression (r) on a string (input) using
     * substitutions (s) for a matching regex.
     *
     * @param r a regular expression
     * @param s a Substitution
     * @param input the string to do the replacement on
     * @param options The options for the regular expression
     * @return the replacement result
     */ Modifier protected ReferenceType String doReplace FormalParameter ReferenceType RegularExpression r FormalParameter ReferenceType Substitution s FormalParameter ReferenceType String input FormalParameter BasicType int options LocalVariableDeclaration ReferenceType String VariableDeclarator res MemberReference input LocalVariableDeclaration ReferenceType Regexp VariableDeclarator regexp MethodInvocation r MethodInvocation getProject getRegexp IfStatement MethodInvocation regexp MemberReference input MemberReference options matches BlockStatement StatementExpression MethodInvocation Literal ""Found match; substituting"" MemberReference Project MSG_DEBUG log StatementExpression Assignment MemberReference res MethodInvocation regexp MemberReference input MethodInvocation s MethodInvocation getProject getExpression MemberReference options substitute = End ReturnStatement MemberReference res MethodDeclaration /**
     *  Perform the replacement on a file
     *
     * @param f the file to perform the relacement on
     * @param options the regular expressions options
     * @exception IOException if an error occurs
     */ Modifier protected doReplace FormalParameter ReferenceType File f FormalParameter BasicType int options IOException LocalVariableDeclaration ReferenceType File VariableDeclarator temp MethodInvocation fileUtils Literal ""replace"" Literal "".txt"" Literal null createTempFile StatementExpression MethodInvocation temp deleteOnExit LocalVariableDeclaration ReferenceType Reader VariableDeclarator r Literal null LocalVariableDeclaration ReferenceType Writer VariableDeclarator w Literal null TryStatement IfStatement BinaryOperation == MemberReference encoding Literal null BlockStatement StatementExpression Assignment MemberReference r ClassCreator ReferenceType FileReader MemberReference f = StatementExpression Assignment MemberReference w ClassCreator ReferenceType FileWriter MemberReference temp = BlockStatement StatementExpression Assignment MemberReference r ClassCreator ReferenceType InputStreamReader ClassCreator ReferenceType FileInputStream MemberReference f MemberReference encoding = StatementExpression Assignment MemberReference w ClassCreator ReferenceType OutputStreamWriter ClassCreator ReferenceType FileOutputStream MemberReference temp MemberReference encoding = End LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br ClassCreator ReferenceType BufferedReader MemberReference r LocalVariableDeclaration ReferenceType BufferedWriter VariableDeclarator bw ClassCreator ReferenceType BufferedWriter MemberReference w LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator pw ClassCreator ReferenceType PrintWriter MemberReference bw LocalVariableDeclaration BasicType boolean VariableDeclarator changes Literal false StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Replacing pattern '"" MethodInvocation regex MethodInvocation getProject getPattern Literal ""' with '"" MethodInvocation subs MethodInvocation getProject getExpression Literal ""' in '"" MethodInvocation f getPath Literal ""'"" TernaryExpression MemberReference byline Literal "" by line"" Literal """" TernaryExpression BinaryOperation > MethodInvocation flags length Literal 0 BinaryOperation + BinaryOperation + Literal "" with flags: '"" MemberReference flags Literal ""'"" Literal """" Literal ""."" MemberReference Project MSG_VERBOSE log IfStatement MemberReference byline BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator linebuf ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType String VariableDeclarator line Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator res Literal null LocalVariableDeclaration BasicType int VariableDeclarator c LocalVariableDeclaration BasicType boolean VariableDeclarator hasCR Literal false DoStatement BinaryOperation >= MemberReference c Literal 0 BlockStatement StatementExpression Assignment MemberReference c MethodInvocation br read = IfStatement BinaryOperation == MemberReference c Literal '\r' BlockStatement IfStatement MemberReference hasCR BlockStatement StatementExpression Assignment MemberReference line MethodInvocation linebuf toString = StatementExpression Assignment MemberReference res MethodInvocation MemberReference regex MemberReference subs MemberReference line MemberReference options doReplace = IfStatement MethodInvocation ! res MemberReference line equals BlockStatement StatementExpression Assignment MemberReference changes Literal true = End StatementExpression MethodInvocation pw MemberReference res print StatementExpression MethodInvocation pw Literal '\r' print StatementExpression Assignment MemberReference linebuf ClassCreator ReferenceType StringBuffer = BlockStatement StatementExpression Assignment MemberReference hasCR Literal true = End IfStatement BinaryOperation == MemberReference c Literal '\n' BlockStatement StatementExpression Assignment MemberReference line MethodInvocation linebuf toString = StatementExpression Assignment MemberReference res MethodInvocation MemberReference regex MemberReference subs MemberReference line MemberReference options doReplace = IfStatement MethodInvocation ! res MemberReference line equals BlockStatement StatementExpression Assignment MemberReference changes Literal true = End StatementExpression MethodInvocation pw MemberReference res print IfStatement MemberReference hasCR BlockStatement StatementExpression MethodInvocation pw Literal '\r' print StatementExpression Assignment MemberReference hasCR Literal false = End StatementExpression MethodInvocation pw Literal '\n' print StatementExpression Assignment MemberReference linebuf ClassCreator ReferenceType StringBuffer = BlockStatement IfStatement BinaryOperation || MemberReference hasCR BinaryOperation < MemberReference c Literal 0 BlockStatement StatementExpression Assignment MemberReference line MethodInvocation linebuf toString = StatementExpression Assignment MemberReference res MethodInvocation MemberReference regex MemberReference subs MemberReference line MemberReference options doReplace = IfStatement MethodInvocation ! res MemberReference line equals BlockStatement StatementExpression Assignment MemberReference changes Literal true = End StatementExpression MethodInvocation pw MemberReference res print IfStatement MemberReference hasCR BlockStatement StatementExpression MethodInvocation pw Literal '\r' print StatementExpression Assignment MemberReference hasCR Literal false = End StatementExpression Assignment MemberReference linebuf ClassCreator ReferenceType StringBuffer = End IfStatement BinaryOperation >= MemberReference c Literal 0 BlockStatement StatementExpression MethodInvocation linebuf Cast BasicType char MemberReference c append End End End End StatementExpression MethodInvocation pw flush BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator buf MethodInvocation fileUtils MemberReference br readFully IfStatement BinaryOperation == MemberReference buf Literal null BlockStatement StatementExpression Assignment MemberReference buf Literal """" = End LocalVariableDeclaration ReferenceType String VariableDeclarator res MethodInvocation MemberReference regex MemberReference subs MemberReference buf MemberReference options doReplace IfStatement MethodInvocation ! res MemberReference buf equals BlockStatement StatementExpression Assignment MemberReference changes Literal true = End StatementExpression MethodInvocation pw MemberReference res print StatementExpression MethodInvocation pw flush End StatementExpression MethodInvocation r close StatementExpression Assignment MemberReference r Literal null = StatementExpression MethodInvocation w close StatementExpression Assignment MemberReference w Literal null = IfStatement MemberReference changes BlockStatement StatementExpression MethodInvocation Literal ""File has changed; saving the updated file"" MemberReference Project MSG_VERBOSE log TryStatement StatementExpression MethodInvocation fileUtils MemberReference temp MemberReference f rename StatementExpression Assignment MemberReference temp Literal null = CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Couldn't rename temporary file "" MemberReference temp MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation Literal ""No change made"" MemberReference Project MSG_DEBUG log End TryStatement IfStatement BinaryOperation != MemberReference r Literal null BlockStatement StatementExpression MethodInvocation r close End CatchClause CatchClauseParameter Exception e TryStatement IfStatement BinaryOperation != MemberReference w Literal null BlockStatement StatementExpression MethodInvocation w close End CatchClause CatchClauseParameter Exception e IfStatement BinaryOperation != MemberReference temp Literal null BlockStatement StatementExpression MethodInvocation temp delete End MethodDeclaration /**
     * Execute the task
     *
     * @throws BuildException is there is a problem in the task execution.
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference regex Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No expression to match."" End IfStatement BinaryOperation == MemberReference subs Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Nothing to replace expression with."" End IfStatement BinaryOperation && BinaryOperation != MemberReference file Literal null BinaryOperation > MethodInvocation filesets size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You cannot supply the 'file' attribute "" Literal ""and filesets at the same time."" End LocalVariableDeclaration BasicType int VariableDeclarator options Literal 0 IfStatement BinaryOperation != MethodInvocation flags Literal 'g' indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference options MemberReference Regexp REPLACE_ALL |= End IfStatement BinaryOperation != MethodInvocation flags Literal 'i' indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference options MemberReference Regexp MATCH_CASE_INSENSITIVE |= End IfStatement BinaryOperation != MethodInvocation flags Literal 'm' indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference options MemberReference Regexp MATCH_MULTILINE |= End IfStatement BinaryOperation != MethodInvocation flags Literal 's' indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference options MemberReference Regexp MATCH_SINGLELINE |= End IfStatement BinaryOperation && BinaryOperation != MemberReference file Literal null MethodInvocation file exists BlockStatement TryStatement StatementExpression MethodInvocation MemberReference file MemberReference options doReplace CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""An error occurred processing file: '"" MethodInvocation file getAbsolutePath Literal ""': "" MethodInvocation e toString MemberReference Project MSG_ERR log IfStatement BinaryOperation != MemberReference file Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""The following file is missing: '"" MethodInvocation file getAbsolutePath Literal ""'"" MemberReference Project MSG_ERR log End End LocalVariableDeclaration BasicType int VariableDeclarator sz MethodInvocation filesets size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sz MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MethodInvocation filesets MemberReference i elementAt LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation fs MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation ds getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference files length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MethodInvocation fs MethodInvocation getProject getDir MemberReference ArraySelector MemberReference j files IfStatement MethodInvocation f exists BlockStatement TryStatement StatementExpression MethodInvocation MemberReference f MemberReference options doReplace CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""An error occurred processing file: '"" MethodInvocation f getAbsolutePath Literal ""': "" MethodInvocation e toString MemberReference Project MSG_ERR log BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""The following file is missing: '"" MethodInvocation f getAbsolutePath Literal ""'"" MemberReference Project MSG_ERR log End End End ReferenceType Task",0
490,490,,0
255,255,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.sitraka Import java.io.File Import java.io.FileWriter Import java.io.IOException Import java.io.OutputStream Import java.io.PrintWriter Import java.io.StringWriter Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.CommandlineJava Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.util.JavaEnvUtils ClassDeclaration Modifier public /**
 * Runs Sitraka JProbe Coverage.
 *
 * Options are pretty numerous, you'd better check the manual for a full
 * descriptions of options. (not that simple since they differ from the online
 * help, from the usage command line and from the examples...)
 * <p>
 * For additional information, visit <a href=""http://www.sitraka.com"">www.sitraka.com</a>
 *
 *
 * @ant.task name=""jpcoverage"" category=""metrics""
 */ Coverage FieldDeclaration Modifier protected ReferenceType Commandline VariableDeclarator cmdl ClassCreator ReferenceType Commandline FieldDeclaration Modifier protected ReferenceType CommandlineJava VariableDeclarator cmdlJava ClassCreator ReferenceType CommandlineJava FieldDeclaration Modifier protected ReferenceType String VariableDeclarator function Literal ""coverage"" FieldDeclaration Modifier protected ReferenceType String VariableDeclarator seedName FieldDeclaration Modifier protected ReferenceType File VariableDeclarator inputFile FieldDeclaration Modifier protected ReferenceType File VariableDeclarator javaExe FieldDeclaration Modifier protected ReferenceType String VariableDeclarator vm FieldDeclaration Modifier protected BasicType boolean VariableDeclarator applet Literal false FieldDeclaration /** this is a somewhat annoying thing, set it to never */ Modifier protected ReferenceType String VariableDeclarator exitPrompt Literal ""never"" FieldDeclaration Modifier protected ReferenceType Filters VariableDeclarator filters ClassCreator ReferenceType Filters FieldDeclaration Modifier protected ReferenceType Triggers VariableDeclarator triggers FieldDeclaration Modifier protected ReferenceType String VariableDeclarator finalSnapshot Literal ""coverage"" FieldDeclaration Modifier protected ReferenceType String VariableDeclarator recordFromStart Literal ""coverage"" FieldDeclaration Modifier protected ReferenceType File VariableDeclarator snapshotDir FieldDeclaration Modifier protected ReferenceType File VariableDeclarator workingDir FieldDeclaration Modifier protected BasicType boolean VariableDeclarator trackNatives Literal false FieldDeclaration Modifier protected ReferenceType Socket VariableDeclarator socket FieldDeclaration Modifier protected BasicType int VariableDeclarator warnLevel Literal 0 FieldDeclaration Modifier protected ReferenceType Vector VariableDeclarator filesets ClassCreator ReferenceType Vector MethodDeclaration /** seed name for snapshot file. Can be null, default to snap */ Modifier public setSeedname FormalParameter ReferenceType String value StatementExpression Assignment MemberReference seedName MemberReference value = MethodDeclaration /**
     * @ant.attribute ignore=""true""
     */ Modifier public setInputfile FormalParameter ReferenceType File value StatementExpression Assignment MemberReference inputFile MemberReference value = MethodDeclaration /**
     * Path to the java executable.
     */ Modifier public setJavaexe FormalParameter ReferenceType File value StatementExpression Assignment MemberReference javaExe MemberReference value = ClassDeclaration Modifier public static Javavm MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""java2"" Literal ""jdk118"" Literal ""jdk117"" ReferenceType EnumeratedAttribute MethodDeclaration /**
     * Indicates which virtual machine to run: ""jdk117"", ""jdk118"" or ""java2"".
     * Can be null, default to ""java2"". */ Modifier public setVm FormalParameter ReferenceType Javavm value StatementExpression Assignment MemberReference vm MethodInvocation value getValue = MethodDeclaration /**
     * If true, run an applet.
     */ Modifier public setApplet FormalParameter BasicType boolean value StatementExpression Assignment MemberReference applet MemberReference value = MethodDeclaration /**
     * Toggles display of the console prompt: always, error, never
     */ Modifier public setExitprompt FormalParameter ReferenceType String value StatementExpression Assignment MemberReference exitPrompt MemberReference value = MethodDeclaration /**
     * Defines class/method filters based on pattern matching.
     * The syntax is filters is similar to a fileset.
     */ Modifier public ReferenceType Filters createFilters ReturnStatement MemberReference filters MethodDeclaration /**
     * Defines events to use for interacting with the
     * collection of data performed during coverage.
     *
     * For example you may run a whole application but only decide
     * to collect data once it reaches a certain method and once it
     * exits another one.
     */ Modifier public ReferenceType Triggers createTriggers IfStatement BinaryOperation == MemberReference triggers Literal null BlockStatement StatementExpression Assignment MemberReference triggers ClassCreator ReferenceType Triggers = End ReturnStatement MemberReference triggers MethodDeclaration /**
     * Define a host and port to connect to if you want to do
     * remote viewing.
     */ Modifier public ReferenceType Socket createSocket IfStatement BinaryOperation == MemberReference socket Literal null BlockStatement StatementExpression Assignment MemberReference socket ClassCreator ReferenceType Socket = End ReturnStatement MemberReference socket ClassDeclaration Modifier public static Finalsnapshot MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""coverage"" Literal ""none"" Literal ""all"" ReferenceType EnumeratedAttribute MethodDeclaration /**
     * Type of snapshot to send at program termination: none, coverage, all.
     * Can be null, default to none
     */ Modifier public setFinalsnapshot FormalParameter ReferenceType String value StatementExpression Assignment MemberReference finalSnapshot MemberReference value = ClassDeclaration Modifier public static Recordfromstart MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""coverage"" Literal ""none"" Literal ""all"" ReferenceType EnumeratedAttribute MethodDeclaration /**
     * ""all"", ""coverage"",  or ""none"".
     */ Modifier public setRecordfromstart FormalParameter ReferenceType Recordfromstart value StatementExpression Assignment MemberReference recordFromStart MethodInvocation value getValue = MethodDeclaration /**
     * Set warning level (0-3, where 0 is the least amount of warnings).
     */ Modifier public setWarnlevel FormalParameter ReferenceType Integer value StatementExpression Assignment MemberReference warnLevel MethodInvocation value intValue = MethodDeclaration /**
     * The path to the directory where snapshot files are stored.
     * Choose a directory that is reachable by both the remote
     * and local computers, and enter the same path on the command-line
     * and in the viewer.
     */ Modifier public setSnapshotdir FormalParameter ReferenceType File value StatementExpression Assignment MemberReference snapshotDir MemberReference value = MethodDeclaration /**
     * The physical path to the working directory for the VM.
     */ Modifier public setWorkingdir FormalParameter ReferenceType File value StatementExpression Assignment MemberReference workingDir MemberReference value = MethodDeclaration /**
     * If true, track native methods.
     */ Modifier public setTracknatives FormalParameter BasicType boolean value StatementExpression Assignment MemberReference trackNatives MemberReference value = MethodDeclaration /**
     * Adds a JVM argument.
     */ Modifier public ReferenceType Commandline ReferenceType Argument createJvmarg ReturnStatement MethodInvocation cmdlJava createVmArgument MethodDeclaration /**
     * Adds a command argument.
     */ Modifier public ReferenceType Commandline ReferenceType Argument createArg ReturnStatement MethodInvocation cmdlJava createArgument MethodDeclaration /**
     * classpath to run the files.
     */ Modifier public ReferenceType Path createClasspath ReturnStatement MethodInvocation cmdlJava MethodInvocation createPath MethodInvocation getProject createClasspath MethodDeclaration /**
     * classname to run as standalone or runner for filesets.
     */ Modifier public setClassname FormalParameter ReferenceType String value StatementExpression MethodInvocation cmdlJava MemberReference value setClassname MethodDeclaration /**
     * the classnames to execute.
     */ Modifier public addFileset FormalParameter ReferenceType FileSet fs StatementExpression MethodInvocation filesets MemberReference fs addElement ConstructorDeclaration Modifier public Coverage MethodDeclaration /** execute the jplauncher by providing a parameter file */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType File VariableDeclarator paramfile Literal null IfStatement BinaryOperation == MemberReference inputFile Literal null BlockStatement StatementExpression MethodInvocation checkOptions StatementExpression Assignment MemberReference paramfile MethodInvocation createParamFile = BlockStatement StatementExpression Assignment MemberReference paramfile MemberReference inputFile = End TryStatement StatementExpression MethodInvocation cmdl MethodInvocation Literal ""jplauncher"" findExecutable setExecutable StatementExpression MethodInvocation cmdl MethodInvocation BinaryOperation + Literal ""-jp_input="" MethodInvocation paramfile getAbsolutePath setValue createArgument LocalVariableDeclaration ReferenceType LogStreamHandler VariableDeclarator handler ClassCreator ReferenceType CoverageStreamHandler This LocalVariableDeclaration ReferenceType Execute VariableDeclarator exec ClassCreator ReferenceType Execute MemberReference handler StatementExpression MethodInvocation MethodInvocation cmdl describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation exec MethodInvocation cmdl getCommandline setCommandline LocalVariableDeclaration BasicType int VariableDeclarator exitValue MethodInvocation exec execute IfStatement MethodInvocation Execute MemberReference exitValue isFailure BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""JProbe Coverage failed ("" MemberReference exitValue Literal "")"" End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Failed to execute JProbe Coverage."" MemberReference e IfStatement BinaryOperation && BinaryOperation == MemberReference inputFile Literal null BinaryOperation != MemberReference paramfile Literal null BlockStatement StatementExpression MethodInvocation paramfile delete End MethodDeclaration /** wheck what is necessary to check, Coverage will do the job for us */ Modifier protected checkOptions BuildException IfStatement BinaryOperation || BinaryOperation == MethodInvocation getHome Literal null MethodInvocation ! MethodInvocation isDirectory getHome BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Invalid home directory. Must point to JProbe home directory"" End LocalVariableDeclaration ReferenceType File VariableDeclarator jar MethodInvocation findCoverageJar IfStatement MethodInvocation ! jar exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Cannot find Coverage directory: "" MethodInvocation getHome End IfStatement BinaryOperation == MemberReference snapshotDir Literal null BlockStatement StatementExpression Assignment MemberReference snapshotDir ClassCreator ReferenceType File Literal ""."" = End StatementExpression Assignment MemberReference snapshotDir MethodInvocation MethodInvocation MethodInvocation snapshotDir getPath resolveFile getProject = IfStatement BinaryOperation || MethodInvocation ! snapshotDir isDirectory MethodInvocation ! snapshotDir exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Snapshot directory does not exists :"" MemberReference snapshotDir End IfStatement BinaryOperation == MemberReference workingDir Literal null BlockStatement StatementExpression Assignment MemberReference workingDir ClassCreator ReferenceType File Literal ""."" = End StatementExpression Assignment MemberReference workingDir MethodInvocation MethodInvocation MethodInvocation workingDir getPath resolveFile getProject = IfStatement BinaryOperation && BinaryOperation == MemberReference javaExe Literal null BinaryOperation || BinaryOperation == MemberReference vm Literal null Literal MethodInvocation MemberReference vm equals ""java2"" BlockStatement IfStatement MethodInvocation ! JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_1 isJavaVersion BlockStatement IfStatement BinaryOperation == MemberReference vm Literal null BlockStatement StatementExpression Assignment MemberReference vm Literal ""java2"" = End StatementExpression Assignment MemberReference javaExe ClassCreator ReferenceType File MethodInvocation JavaEnvUtils Literal ""java"" getJreExecutable = End End MethodDeclaration /**
     * return the command line parameters. Parameters can either be passed
     * to the command line and stored to a file (then use the -jp_input=&lt;filename&gt;)
     * if they are too numerous.
     */ Modifier protected ReferenceType String getParameters LocalVariableDeclaration ReferenceType Vector VariableDeclarator params ClassCreator ReferenceType Vector StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_function="" MemberReference function addElement IfStatement BinaryOperation != MemberReference vm Literal null BlockStatement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_vm="" MemberReference vm addElement End IfStatement BinaryOperation != MemberReference javaExe Literal null BlockStatement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_java_exe="" MethodInvocation MethodInvocation MethodInvocation javaExe getPath resolveFile getProject addElement End StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_working_dir="" MethodInvocation workingDir getPath addElement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_snapshot_dir="" MethodInvocation snapshotDir getPath addElement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_record_from_start="" MemberReference recordFromStart addElement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_warn="" MemberReference warnLevel addElement IfStatement BinaryOperation != MemberReference seedName Literal null BlockStatement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_output_file="" MemberReference seedName addElement End StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_filter="" MethodInvocation filters toString addElement IfStatement BinaryOperation != MemberReference triggers Literal null BlockStatement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_trigger="" MethodInvocation triggers toString addElement End IfStatement BinaryOperation != MemberReference finalSnapshot Literal null BlockStatement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_final_snapshot="" MemberReference finalSnapshot addElement End StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_exit_prompt="" MemberReference exitPrompt addElement StatementExpression MethodInvocation params BinaryOperation + Literal ""-jp_track_natives="" MemberReference trackNatives addElement LocalVariableDeclaration ReferenceType String VariableDeclarator vmargs MethodInvocation cmdlJava MethodInvocation getArguments getVmCommand ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference vmargs length MemberReference ++ i BlockStatement StatementExpression MethodInvocation params MemberReference ArraySelector MemberReference i vmargs addElement End LocalVariableDeclaration ReferenceType Path VariableDeclarator classpath MethodInvocation cmdlJava getClasspath IfStatement BinaryOperation && BinaryOperation != MemberReference classpath Literal null BinaryOperation > MethodInvocation classpath size Literal 0 BlockStatement StatementExpression MethodInvocation params BinaryOperation + Literal ""-classpath "" MethodInvocation classpath toString addElement End IfStatement BinaryOperation != MethodInvocation cmdlJava getClassname Literal null BlockStatement StatementExpression MethodInvocation params MethodInvocation cmdlJava getClassname addElement End LocalVariableDeclaration ReferenceType String VariableDeclarator args MethodInvocation cmdlJava MethodInvocation getArguments getJavaCommand ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference args length MemberReference ++ i BlockStatement StatementExpression MethodInvocation params MemberReference ArraySelector MemberReference i args addElement End LocalVariableDeclaration ReferenceType String VariableDeclarator array ArrayCreator ReferenceType String MethodInvocation params size StatementExpression MethodInvocation params MemberReference array copyInto ReturnStatement MemberReference array MethodDeclaration /**
     * create the parameter file from the given options. The file is
     * created with a random name in the current directory.
     * @return the file object where are written the configuration to run
     * JProbe Coverage
     * @throws BuildException thrown if something bad happens while writing
     * the arguments to the file.
     */ Modifier protected ReferenceType File createParamFile BuildException LocalVariableDeclaration ReferenceType File VariableDeclarator file MethodInvocation Literal ""jpcov"" createTempFile StatementExpression MethodInvocation file deleteOnExit StatementExpression MethodInvocation BinaryOperation + Literal ""Creating parameter file: "" MemberReference file MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType StringWriter VariableDeclarator sw ClassCreator ReferenceType StringWriter LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator pw ClassCreator ReferenceType PrintWriter MemberReference sw LocalVariableDeclaration ReferenceType String VariableDeclarator params MethodInvocation getParameters ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference params length MemberReference ++ i BlockStatement StatementExpression MethodInvocation pw MemberReference ArraySelector MemberReference i params println End StatementExpression MethodInvocation pw flush StatementExpression MethodInvocation BinaryOperation + Literal ""JProbe Coverage parameters:\n"" MethodInvocation sw toString MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType FileWriter VariableDeclarator fw Literal null TryStatement StatementExpression Assignment MemberReference fw ClassCreator ReferenceType FileWriter MemberReference file = StatementExpression MethodInvocation fw MethodInvocation sw toString write StatementExpression MethodInvocation fw flush CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Could not write parameter file "" MemberReference file MemberReference e IfStatement BinaryOperation != MemberReference fw Literal null BlockStatement TryStatement StatementExpression MethodInvocation fw close CatchClause CatchClauseParameter IOException ignored End ReturnStatement MemberReference file ClassDeclaration Modifier static /** specific pumper to avoid those nasty stdin issues */ CoverageStreamHandler ConstructorDeclaration CoverageStreamHandler FormalParameter ReferenceType Task task StatementExpression SuperConstructorInvocation MemberReference task MemberReference Project MSG_INFO MemberReference Project MSG_WARN MethodDeclaration /**
         * there are some issues concerning all JProbe executable
         * In our case a 'Press ENTER to close this window..."" will
         * be displayed in the current window waiting for enter.
         * So I'm closing the stream right away to avoid problems.
         */ Modifier public setProcessInputStream FormalParameter ReferenceType OutputStream os TryStatement StatementExpression MethodInvocation os close CatchClause CatchClauseParameter IOException ignored ReferenceType LogStreamHandler ReferenceType CovBase",0
629,629,,0
592,592,,0
295,295,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.cvslib Import org.apache.tools.ant.taskdefs.AbstractCvsTask Import java.io.ByteArrayOutputStream Import java.util.StringTokenizer ClassDeclaration Modifier public /**
 * this task allows to find out the client and the server version of a
 * CVS installation
 *
 * example usage :
 * &lt;cvsversion
 * cvsRoot=&quot;:pserver:anoncvs@cvs.apache.org:/home/cvspublic&quot;
 * passfile=&quot;c:/programme/cygwin/home/antoine/.cvspass&quot;
 * clientversionproperty=&quot;apacheclient&quot;
 * serverversionproperty=&quot;apacheserver&quot;   /&gt;
 *
 * the task can be used also in the API by calling its execute method,
 * then calling getServerVersion and/or getClientVersion
 *
 * @ant.task category=""scm""
 * @since ant 1.6.1
 */ CvsVersion FieldDeclaration Modifier final static BasicType long VariableDeclarator VERSION_1_11_2 Literal 11102 FieldDeclaration Modifier final static BasicType long VariableDeclarator MULTIPLY Literal 100 FieldDeclaration Modifier private ReferenceType String VariableDeclarator clientVersion FieldDeclaration Modifier private ReferenceType String VariableDeclarator serverVersion FieldDeclaration Modifier private ReferenceType String VariableDeclarator clientVersionProperty FieldDeclaration Modifier private ReferenceType String VariableDeclarator serverVersionProperty MethodDeclaration /**
     * get the CVS client version
     * @return CVS client version
     */ Modifier public ReferenceType String getClientVersion ReturnStatement MemberReference clientVersion MethodDeclaration /**
     * get the CVS server version
     * @return CVS server version
     */ Modifier public ReferenceType String getServerVersion ReturnStatement MemberReference serverVersion MethodDeclaration /**
     * set a property where to store the CVS client version
     * @param clientVersionProperty  property for CVS client version
     */ Modifier public setClientVersionProperty FormalParameter ReferenceType String clientVersionProperty StatementExpression Assignment This MemberReference clientVersionProperty MemberReference clientVersionProperty = MethodDeclaration /**
     * set a property where to store the CVS server version
     * @param serverVersionProperty  property for CVS server version
     */ Modifier public setServerVersionProperty FormalParameter ReferenceType String serverVersionProperty StatementExpression Assignment This MemberReference serverVersionProperty MemberReference serverVersionProperty = MethodDeclaration /**
     * find out if the server version supports log with S option
     * @return  boolean indicating if the server version supports log with S option
     */ Modifier public BasicType boolean supportsCvsLogWithSOption IfStatement BinaryOperation == MemberReference serverVersion Literal null BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator mySt ClassCreator ReferenceType StringTokenizer MemberReference serverVersion Literal ""."" LocalVariableDeclaration BasicType long VariableDeclarator versionNumber LocalVariableDeclaration BasicType long VariableDeclarator counter BinaryOperation * MemberReference MULTIPLY MemberReference MULTIPLY LocalVariableDeclaration BasicType long VariableDeclarator version Literal 0 WhileStatement MethodInvocation mySt hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation mySt nextToken LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MethodInvocation s length MemberReference ++ i BlockStatement IfStatement MethodInvocation ! Character MethodInvocation s MemberReference i charAt isDigit BlockStatement BreakStatement End End LocalVariableDeclaration ReferenceType String VariableDeclarator s2 MethodInvocation s Literal 0 MemberReference i substring StatementExpression Assignment MemberReference version BinaryOperation + MemberReference version BinaryOperation * MemberReference counter MethodInvocation Long MemberReference s2 parseLong = IfStatement BinaryOperation == MemberReference counter Literal 1 BlockStatement BreakStatement End StatementExpression Assignment MemberReference counter BinaryOperation / MemberReference counter MemberReference MULTIPLY = End ReturnStatement BinaryOperation >= MemberReference version MemberReference VERSION_1_11_2 MethodDeclaration /**
     * the execute method running CvsVersion
     */ Modifier public execute LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator bos ClassCreator ReferenceType ByteArrayOutputStream StatementExpression This MethodInvocation MemberReference bos setOutputStream LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator berr ClassCreator ReferenceType ByteArrayOutputStream StatementExpression This MethodInvocation MemberReference berr setErrorStream StatementExpression MethodInvocation Literal ""version"" setCommand StatementExpression SuperMethodInvocation execute LocalVariableDeclaration ReferenceType String VariableDeclarator output MethodInvocation bos toString LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference output LocalVariableDeclaration BasicType boolean VariableDeclarator client Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator server Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator cvs Literal false WhileStatement MethodInvocation st hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator currentToken MethodInvocation st nextToken IfStatement MethodInvocation currentToken Literal ""Client:"" equals BlockStatement StatementExpression Assignment MemberReference client Literal true = IfStatement MethodInvocation currentToken Literal ""Server:"" equals BlockStatement StatementExpression Assignment MemberReference server Literal true = IfStatement MethodInvocation currentToken Literal ""(CVS)"" equals BlockStatement StatementExpression Assignment MemberReference cvs Literal true = End End End IfStatement BinaryOperation && MemberReference client MemberReference cvs BlockStatement IfStatement MethodInvocation st hasMoreTokens BlockStatement StatementExpression Assignment MemberReference clientVersion MethodInvocation st nextToken = End StatementExpression Assignment MemberReference client Literal false = StatementExpression Assignment MemberReference cvs Literal false = IfStatement BinaryOperation && MemberReference server MemberReference cvs BlockStatement IfStatement MethodInvocation st hasMoreTokens BlockStatement StatementExpression Assignment MemberReference serverVersion MethodInvocation st nextToken = End StatementExpression Assignment MemberReference server Literal false = StatementExpression Assignment MemberReference cvs Literal false = End End End IfStatement BinaryOperation != MemberReference clientVersionProperty Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference clientVersionProperty MemberReference clientVersion setNewProperty getProject End IfStatement BinaryOperation != MemberReference serverVersionProperty Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference serverVersionProperty MemberReference serverVersion setNewProperty getProject End ReferenceType AbstractCvsTask",0
54,54,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import java.io.BufferedReader Import java.io.File Import java.io.FileReader Import java.io.IOException Import java.util.Enumeration Import java.util.Stack Import java.util.StringTokenizer Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * Named collection of include/exclude tags.
 *
 * <p>Moved out of MatchingTask to make it a standalone object that
 * could be referenced (by scripts for example).
 *
 */ PatternSet FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator includeList ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator excludeList ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator includesFileList ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator excludesFileList ClassCreator ReferenceType Vector ClassDeclaration Modifier public /**
     * inner class to hold a name on list.  ""If"" and ""Unless"" attributes
     * may be used to invalidate the entry based on the existence of a
     * property (typically set thru the use of the Available task).
     */ NameEntry FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType String VariableDeclarator ifCond FieldDeclaration Modifier private ReferenceType String VariableDeclarator unlessCond MethodDeclaration /**
         * Sets the name pattern.
         *
         * @param name The pattern string.
         */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
         * Sets the if attribute. This attribute and the ""unless""
         * attribute are used to validate the name, based in the
         * existence of the property.
         *
         * @param cond A property name. If this property is not
         *             present, the name is invalid.
         */ Modifier public setIf FormalParameter ReferenceType String cond StatementExpression Assignment MemberReference ifCond MemberReference cond = MethodDeclaration /**
         * Sets the unless attribute. This attribute and the ""if""
         * attribute are used to validate the name, based in the
         * existence of the property.
         *
         * @param cond A property name. If this property is
         *             present, the name is invalid.
         */ Modifier public setUnless FormalParameter ReferenceType String cond StatementExpression Assignment MemberReference unlessCond MemberReference cond = MethodDeclaration /**
         * @return the name attribute.
         */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
         * This validates the name - checks the if and unless
         * properties.
         *
         * @param p the current project, used to check the presence or
         *          absence of a property.
         * @return  the name attribute or null if the ""if"" or ""unless""
         *          properties are not/are set.
         */ Modifier public ReferenceType String evalName FormalParameter ReferenceType Project p ReturnStatement TernaryExpression MethodInvocation MemberReference p valid MemberReference name Literal null MethodDeclaration Modifier private BasicType boolean valid FormalParameter ReferenceType Project p IfStatement BinaryOperation && BinaryOperation != MemberReference ifCond Literal null BinaryOperation == MethodInvocation p MemberReference ifCond getProperty Literal null BlockStatement ReturnStatement Literal false IfStatement BinaryOperation && BinaryOperation != MemberReference unlessCond Literal null BinaryOperation != MethodInvocation p MemberReference unlessCond getProperty Literal null BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration /**
         * @return a printable form of this object.
         */ Modifier public ReferenceType String toString IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Missing attribute \""name\"" for a pattern"" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer MemberReference name IfStatement BinaryOperation || BinaryOperation != MemberReference ifCond Literal null BinaryOperation != MemberReference unlessCond Literal null BlockStatement StatementExpression MethodInvocation buf Literal "":"" append LocalVariableDeclaration ReferenceType String VariableDeclarator connector Literal """" IfStatement BinaryOperation != MemberReference ifCond Literal null BlockStatement StatementExpression MethodInvocation buf Literal ""if->"" append StatementExpression MethodInvocation buf MemberReference ifCond append StatementExpression Assignment MemberReference connector Literal "";"" = End IfStatement BinaryOperation != MemberReference unlessCond Literal null BlockStatement StatementExpression MethodInvocation buf MemberReference connector append StatementExpression MethodInvocation buf Literal ""unless->"" append StatementExpression MethodInvocation buf MemberReference unlessCond append End End ReturnStatement MethodInvocation buf toString ConstructorDeclaration Modifier public /**
     * Creates a new <code>PatternSet</code> instance.
     */ PatternSet StatementExpression SuperConstructorInvocation MethodDeclaration /**
     * Makes this instance in effect a reference to another PatternSet
     * instance.
     *
     * <p>You must not set another attribute or nest elements inside
     * this element if you make it a reference.</p>
     * @param r the reference to another patternset.
     * @throws BuildException on error.
     */ Modifier public setRefid FormalParameter ReferenceType Reference r BuildException IfStatement BinaryOperation || MethodInvocation ! includeList isEmpty MethodInvocation ! excludeList isEmpty BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression SuperMethodInvocation MemberReference r setRefid MethodDeclaration /**
     * This is a patternset nested element.
     *
     * @param p a configured patternset nested element.
     */ Modifier public addConfiguredPatternset FormalParameter ReferenceType PatternSet p IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End LocalVariableDeclaration ReferenceType String VariableDeclarator nestedIncludes MethodInvocation p MethodInvocation getProject getIncludePatterns LocalVariableDeclaration ReferenceType String VariableDeclarator nestedExcludes MethodInvocation p MethodInvocation getProject getExcludePatterns IfStatement BinaryOperation != MemberReference nestedIncludes Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference nestedIncludes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i nestedIncludes setName createInclude End End IfStatement BinaryOperation != MemberReference nestedExcludes Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference nestedExcludes length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i nestedExcludes setName createExclude End End MethodDeclaration /**
     * add a name entry on the include list
     * @return a nested include element to be configured.
     */ Modifier public ReferenceType NameEntry createInclude IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End ReturnStatement MethodInvocation MemberReference includeList addPatternToList MethodDeclaration /**
     * add a name entry on the include files list
     * @return a nested includesfile element to be configured.
     */ Modifier public ReferenceType NameEntry createIncludesFile IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End ReturnStatement MethodInvocation MemberReference includesFileList addPatternToList MethodDeclaration /**
     * add a name entry on the exclude list
     * @return a nested exclude element to be configured.
     */ Modifier public ReferenceType NameEntry createExclude IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End ReturnStatement MethodInvocation MemberReference excludeList addPatternToList MethodDeclaration /**
     * add a name entry on the exclude files list
     * @return a nested excludesfile element to be configured.
     */ Modifier public ReferenceType NameEntry createExcludesFile IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End ReturnStatement MethodInvocation MemberReference excludesFileList addPatternToList MethodDeclaration /**
     * Appends <code>includes</code> to the current list of include patterns.
     * Patterns may be separated by a comma or a space.
     *
     * @param includes the string containing the include patterns
     */ Modifier public setIncludes FormalParameter ReferenceType String includes IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End IfStatement BinaryOperation && BinaryOperation != MemberReference includes Literal null BinaryOperation > MethodInvocation includes length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference includes Literal "", "" Literal false WhileStatement MethodInvocation tok hasMoreTokens BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation tok nextToken setName createInclude End End MethodDeclaration /**
     * Appends <code>excludes</code> to the current list of exclude patterns.
     * Patterns may be separated by a comma or a space.
     *
     * @param excludes the string containing the exclude patterns
     */ Modifier public setExcludes FormalParameter ReferenceType String excludes IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End IfStatement BinaryOperation && BinaryOperation != MemberReference excludes Literal null BinaryOperation > MethodInvocation excludes length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference excludes Literal "", "" Literal false WhileStatement MethodInvocation tok hasMoreTokens BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation tok nextToken setName createExclude End End MethodDeclaration /**
     * add a name entry to the given list
     */ Modifier private ReferenceType NameEntry addPatternToList FormalParameter ReferenceType Vector list LocalVariableDeclaration ReferenceType NameEntry VariableDeclarator result ClassCreator ReferenceType NameEntry StatementExpression MethodInvocation list MemberReference result addElement ReturnStatement MemberReference result MethodDeclaration /**
     * Sets the name of the file containing the includes patterns.
     *
     * @param includesFile The file to fetch the include patterns from.
     * @throws BuildException on error.
     */ Modifier public setIncludesfile FormalParameter ReferenceType File includesFile BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression MethodInvocation MethodInvocation MethodInvocation includesFile getAbsolutePath setName createIncludesFile MethodDeclaration /**
     * Sets the name of the file containing the excludes patterns.
     *
     * @param excludesFile The file to fetch the exclude patterns from.
     * @throws BuildException on error.
     */ Modifier public setExcludesfile FormalParameter ReferenceType File excludesFile BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression MethodInvocation MethodInvocation MethodInvocation excludesFile getAbsolutePath setName createExcludesFile MethodDeclaration /**
     *  Reads path matching patterns from a file and adds them to the
     *  includes or excludes list (as appropriate).
     */ Modifier private readPatterns FormalParameter ReferenceType File patternfile FormalParameter ReferenceType Vector patternlist FormalParameter ReferenceType Project p BuildException LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator patternReader Literal null TryStatement StatementExpression Assignment MemberReference patternReader ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType FileReader MemberReference patternfile = LocalVariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation patternReader readLine WhileStatement BinaryOperation != MemberReference line Literal null BlockStatement IfStatement BinaryOperation > MethodInvocation line length Literal 0 BlockStatement StatementExpression Assignment MemberReference line MethodInvocation p MemberReference line replaceProperties = StatementExpression MethodInvocation MethodInvocation MemberReference line setName MemberReference patternlist addPatternToList End StatementExpression Assignment MemberReference line MethodInvocation patternReader readLine = End CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""An error occurred while reading from pattern file: "" MemberReference patternfile ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference ioe IfStatement BinaryOperation != Literal null MemberReference patternReader BlockStatement TryStatement StatementExpression MethodInvocation patternReader close CatchClause CatchClauseParameter IOException ioe End MethodDeclaration /**
     * Adds the patterns of the other instance to this set.
     * @param other the other PatternSet instance.
     * @param p the current project.
     */ Modifier public append FormalParameter ReferenceType PatternSet other FormalParameter ReferenceType Project p IfStatement MethodInvocation isReference BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Cannot append to a reference"" End LocalVariableDeclaration ReferenceType String VariableDeclarator incl MethodInvocation other MemberReference p getIncludePatterns IfStatement BinaryOperation != MemberReference incl Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference incl length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i incl setName createInclude End End LocalVariableDeclaration ReferenceType String VariableDeclarator excl MethodInvocation other MemberReference p getExcludePatterns IfStatement BinaryOperation != MemberReference excl Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference excl length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i excl setName createExclude End End MethodDeclaration /**
     * Returns the filtered include patterns.
     * @param p the current project.
     * @return the filtered included patterns.
     */ Modifier public ReferenceType String getIncludePatterns FormalParameter ReferenceType Project p IfStatement MethodInvocation isReference BlockStatement ReturnStatement MethodInvocation MethodInvocation MemberReference p getIncludePatterns MemberReference p getRef BlockStatement StatementExpression MethodInvocation MemberReference p readFiles ReturnStatement MethodInvocation MemberReference includeList MemberReference p makeArray End MethodDeclaration /**
     * Returns the filtered include patterns.
     * @param p the current project.
     * @return the filtered excluded patterns.
     */ Modifier public ReferenceType String getExcludePatterns FormalParameter ReferenceType Project p IfStatement MethodInvocation isReference BlockStatement ReturnStatement MethodInvocation MethodInvocation MemberReference p getExcludePatterns MemberReference p getRef BlockStatement StatementExpression MethodInvocation MemberReference p readFiles ReturnStatement MethodInvocation MemberReference excludeList MemberReference p makeArray End MethodDeclaration /**
     * helper for FileSet.
     */ BasicType boolean hasPatterns FormalParameter ReferenceType Project p IfStatement MethodInvocation isReference BlockStatement ReturnStatement MethodInvocation MethodInvocation MemberReference p hasPatterns MemberReference p getRef BlockStatement ReturnStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation > MethodInvocation includesFileList size Literal 0 BinaryOperation > MethodInvocation excludesFileList size Literal 0 BinaryOperation > MethodInvocation includeList size Literal 0 BinaryOperation > MethodInvocation excludeList size Literal 0 End MethodDeclaration /**
     * Performs the check for circular references and returns the
     * referenced PatternSet.
     */ Modifier private ReferenceType PatternSet getRef FormalParameter ReferenceType Project p IfStatement MethodInvocation ! isChecked BlockStatement LocalVariableDeclaration ReferenceType Stack VariableDeclarator stk ClassCreator ReferenceType Stack StatementExpression MethodInvocation stk This push StatementExpression MethodInvocation MemberReference stk MemberReference p dieOnCircularReference End LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation MethodInvocation MemberReference p getReferencedObject getRefid IfStatement BinaryOperation instanceof MemberReference o ReferenceType PatternSet BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation MethodInvocation getRefId getRefid Literal "" doesn\'t denote a patternset"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg BlockStatement ReturnStatement Cast ReferenceType PatternSet MemberReference o End MethodDeclaration /**
     * Convert a vector of NameEntry elements into an array of Strings.
     */ Modifier private ReferenceType String makeArray FormalParameter ReferenceType Vector list FormalParameter ReferenceType Project p IfStatement BinaryOperation == MethodInvocation list size Literal 0 BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType Vector VariableDeclarator tmpNames ClassCreator ReferenceType Vector ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation list elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType NameEntry VariableDeclarator ne Cast ReferenceType NameEntry MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator pattern MethodInvocation ne MemberReference p evalName IfStatement BinaryOperation && BinaryOperation != MemberReference pattern Literal null BinaryOperation > MethodInvocation pattern length Literal 0 BlockStatement StatementExpression MethodInvocation tmpNames MemberReference pattern addElement End End LocalVariableDeclaration ReferenceType String VariableDeclarator result ArrayCreator ReferenceType String MethodInvocation tmpNames size StatementExpression MethodInvocation tmpNames MemberReference result copyInto ReturnStatement MemberReference result MethodDeclaration /**
     * Read includesfile ot excludesfile if not already done so.
     */ Modifier private readFiles FormalParameter ReferenceType Project p IfStatement BinaryOperation > MethodInvocation includesFileList size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation includesFileList elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType NameEntry VariableDeclarator ne Cast ReferenceType NameEntry MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator fileName MethodInvocation ne MemberReference p evalName IfStatement BinaryOperation != MemberReference fileName Literal null BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator inclFile MethodInvocation p MemberReference fileName resolveFile IfStatement MethodInvocation ! inclFile exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Includesfile "" MethodInvocation inclFile getAbsolutePath Literal "" not found."" End StatementExpression MethodInvocation MemberReference inclFile MemberReference includeList MemberReference p readPatterns End End StatementExpression MethodInvocation includesFileList removeAllElements End IfStatement BinaryOperation > MethodInvocation excludesFileList size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation excludesFileList elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType NameEntry VariableDeclarator ne Cast ReferenceType NameEntry MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator fileName MethodInvocation ne MemberReference p evalName IfStatement BinaryOperation != MemberReference fileName Literal null BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator exclFile MethodInvocation p MemberReference fileName resolveFile IfStatement MethodInvocation ! exclFile exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Excludesfile "" MethodInvocation exclFile getAbsolutePath Literal "" not found."" End StatementExpression MethodInvocation MemberReference exclFile MemberReference excludeList MemberReference p readPatterns End End StatementExpression MethodInvocation excludesFileList removeAllElements End MethodDeclaration /**
     * @return a printable form of this object.
     */ Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""patternSet{ includes: "" MemberReference includeList Literal "" excludes: "" MemberReference excludeList Literal "" }"" MethodDeclaration /**
     * @since Ant 1.6
     * @return a clone of this patternset.
     */ Modifier public ReferenceType Object clone IfStatement MethodInvocation isReference BlockStatement ReturnStatement MethodInvocation MethodInvocation clone MethodInvocation getProject getRef BlockStatement TryStatement LocalVariableDeclaration ReferenceType PatternSet VariableDeclarator ps Cast ReferenceType PatternSet SuperMethodInvocation clone StatementExpression Assignment MemberReference ps includeList Cast ReferenceType Vector MethodInvocation includeList clone = StatementExpression Assignment MemberReference ps excludeList Cast ReferenceType Vector MethodInvocation excludeList clone = StatementExpression Assignment MemberReference ps includesFileList Cast ReferenceType Vector MethodInvocation includesFileList clone = StatementExpression Assignment MemberReference ps excludesFileList Cast ReferenceType Vector MethodInvocation excludesFileList clone = ReturnStatement MemberReference ps CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e End ReferenceType DataType ReferenceType Cloneable",0
632,632,,0
349,349,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.clearcase Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Task to perform mklbtype command to ClearCase.
 * <p>
 * The following attributes are interpreted:
 * <table border=""1"">
 *   <tr>
 *     <th>Attribute</th>
 *     <th>Values</th>
 *     <th>Required</th>
 *   </tr>
 *   <tr>
 *      <td>typename</td>
 *      <td>Name of the label type to create</td>
 *      <td>Yes</td>
 *   <tr>
 *   <tr>
 *      <td>vob</td>
 *      <td>Name of the VOB</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>replace</td>
 *      <td>Replace an existing label definition of the same type</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>global</td>
 *      <td>Either global or ordinary can be specified, not both.
 *          Creates a label type that is global to the VOB or to
 *          VOBs that use this VOB</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>ordinary</td>
 *      <td>Either global or ordinary can be specified, not both.
 *          Creates a label type that can be used only in the current
 *          VOB. <B>Default</B></td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>pbranch</td>
 *      <td>Allows the label type to be used once per branch in a given
 *          element's version tree</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>shared</td>
 *      <td>Sets the way mastership is checked by ClearCase. See ClearCase
 *          documentation for details</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>comment</td>
 *      <td>Specify a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>commentfile</td>
 *      <td>Specify a file containing a comment. Only one of comment or
 *          cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>failonerr</td>
 *      <td>Throw an exception if the command fails. Default is true</td>
 *      <td>No</td>
 *   <tr>
 * </table>
 *
 */ CCMklbtype FieldDeclaration Modifier private ReferenceType String VariableDeclarator mTypeName Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mVOB Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mComment Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mCfile Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator mReplace Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mGlobal Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mOrdinary Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator mPbranch Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mShared Literal false MethodDeclaration /**
     * Executes the task.
     * <p>
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType Project VariableDeclarator aProj MethodInvocation getProject LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 IfStatement BinaryOperation == MethodInvocation getTypeName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Required attribute TypeName not specified"" End StatementExpression MethodInvocation commandLine MethodInvocation getClearToolCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_MKLBTYPE setValue createArgument StatementExpression MethodInvocation MemberReference commandLine checkOptions IfStatement MethodInvocation ! getFailOnErr BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Ignoring any errors that occur for: "" MethodInvocation getTypeSpecifier MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine run = IfStatement BinaryOperation && MethodInvocation Execute MemberReference result isFailure MethodInvocation getFailOnErr BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * Check the command line options.
     */ Modifier private checkOptions FormalParameter ReferenceType Commandline cmd IfStatement MethodInvocation getReplace BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_REPLACE setValue createArgument End IfStatement MethodInvocation getOrdinary BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_ORDINARY setValue createArgument BlockStatement IfStatement MethodInvocation getGlobal BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_GLOBAL setValue createArgument End End IfStatement MethodInvocation getPbranch BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_PBRANCH setValue createArgument End IfStatement MethodInvocation getShared BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_SHARED setValue createArgument End IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentCommand BlockStatement IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentFileCommand BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOCOMMENT setValue createArgument End End StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getTypeSpecifier setValue createArgument MethodDeclaration /**
     * Set type-name string
     *
     * @param tn the type-name string
     */ Modifier public setTypeName FormalParameter ReferenceType String tn StatementExpression Assignment MemberReference mTypeName MemberReference tn = MethodDeclaration /**
     * Get type-name string
     *
     * @return String containing the type-name
     */ Modifier public ReferenceType String getTypeName ReturnStatement MemberReference mTypeName MethodDeclaration /**
     * Set the VOB name
     *
     * @param vob the VOB name
     */ Modifier public setVOB FormalParameter ReferenceType String vob StatementExpression Assignment MemberReference mVOB MemberReference vob = MethodDeclaration /**
     * Get VOB name
     *
     * @return String containing VOB name
     */ Modifier public ReferenceType String getVOB ReturnStatement MemberReference mVOB MethodDeclaration /**
     * Set the replace flag
     *
     * @param repl the status to set the flag to
     */ Modifier public setReplace FormalParameter BasicType boolean repl StatementExpression Assignment MemberReference mReplace MemberReference repl = MethodDeclaration /**
     * Get replace flag status
     *
     * @return boolean containing status of replace flag
     */ Modifier public BasicType boolean getReplace ReturnStatement MemberReference mReplace MethodDeclaration /**
     * Set the global flag
     *
     * @param glob the status to set the flag to
     */ Modifier public setGlobal FormalParameter BasicType boolean glob StatementExpression Assignment MemberReference mGlobal MemberReference glob = MethodDeclaration /**
     * Get global flag status
     *
     * @return boolean containing status of global flag
     */ Modifier public BasicType boolean getGlobal ReturnStatement MemberReference mGlobal MethodDeclaration /**
     * Set the ordinary flag
     *
     * @param ordinary the status to set the flag to
     */ Modifier public setOrdinary FormalParameter BasicType boolean ordinary StatementExpression Assignment MemberReference mOrdinary MemberReference ordinary = MethodDeclaration /**
     * Get ordinary flag status
     *
     * @return boolean containing status of ordinary flag
     */ Modifier public BasicType boolean getOrdinary ReturnStatement MemberReference mOrdinary MethodDeclaration /**
     * Set the pbranch flag
     *
     * @param pbranch the status to set the flag to
     */ Modifier public setPbranch FormalParameter BasicType boolean pbranch StatementExpression Assignment MemberReference mPbranch MemberReference pbranch = MethodDeclaration /**
     * Get pbranch flag status
     *
     * @return boolean containing status of pbranch flag
     */ Modifier public BasicType boolean getPbranch ReturnStatement MemberReference mPbranch MethodDeclaration /**
     * Set the shared flag
     *
     * @param shared the status to set the flag to
     */ Modifier public setShared FormalParameter BasicType boolean shared StatementExpression Assignment MemberReference mShared MemberReference shared = MethodDeclaration /**
     * Get shared flag status
     *
     * @return boolean containing status of shared flag
     */ Modifier public BasicType boolean getShared ReturnStatement MemberReference mShared MethodDeclaration /**
     * Set comment string
     *
     * @param comment the comment string
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression Assignment MemberReference mComment MemberReference comment = MethodDeclaration /**
     * Get comment string
     *
     * @return String containing the comment
     */ Modifier public ReferenceType String getComment ReturnStatement MemberReference mComment MethodDeclaration /**
     * Set comment file
     *
     * @param cfile the path to the comment file
     */ Modifier public setCommentFile FormalParameter ReferenceType String cfile StatementExpression Assignment MemberReference mCfile MemberReference cfile = MethodDeclaration /**
     * Get comment file
     *
     * @return String containing the path to the comment file
     */ Modifier public ReferenceType String getCommentFile ReturnStatement MemberReference mCfile MethodDeclaration /**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or
     *        without the comment flag and string appended
     */ Modifier private getCommentCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENT setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getComment setValue createArgument End MethodDeclaration /**
     * Get the 'commentfile' command
     *
     * @param cmd containing the command line string with or
     *        without the commentfile flag and file appended
     */ Modifier private getCommentFileCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENTFILE setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getCommentFile setValue createArgument End MethodDeclaration /**
     * Get the type-name specifier
     *
     * @return the 'type-name-specifier' command if the attribute was
     *         specified, otherwise an empty string
     */ Modifier private ReferenceType String getTypeSpecifier LocalVariableDeclaration ReferenceType String VariableDeclarator typenm Literal null StatementExpression Assignment MemberReference typenm MethodInvocation getTypeName = IfStatement BinaryOperation != MethodInvocation getVOB Literal null BlockStatement StatementExpression Assignment MemberReference typenm BinaryOperation + Literal ""@"" MethodInvocation getVOB += End ReturnStatement MemberReference typenm FieldDeclaration /**
     * -replace flag -- replace existing label definition of the same type
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_REPLACE Literal ""-replace"" FieldDeclaration /**
     * -global flag -- creates a label type that is global to the VOB or to VOBs that use this VOB
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_GLOBAL Literal ""-global"" FieldDeclaration /**
     * -ordinary flag -- creates a label type that can be used only in the current VOB
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_ORDINARY Literal ""-ordinary"" FieldDeclaration /**
     * -pbranch flag -- allows label type to be used once per branch
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_PBRANCH Literal ""-pbranch"" FieldDeclaration /**
     * -shared flag -- sets the way mastership is checked by ClearCase
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_SHARED Literal ""-shared"" FieldDeclaration /**
     * -c flag -- comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENT Literal ""-c"" FieldDeclaration /**
     * -cfile flag -- file containing a comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENTFILE Literal ""-cfile"" FieldDeclaration /**
     * -nc flag -- no comment is specified
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOCOMMENT Literal ""-nc"" ReferenceType ClearCase",0
263,263,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.junit Import java.io.OutputStream Import javax.xml.transform.Result Import javax.xml.transform.Source Import javax.xml.transform.Transformer Import javax.xml.transform.TransformerFactory Import javax.xml.transform.dom.DOMSource Import javax.xml.transform.stream.StreamResult Import javax.xml.transform.stream.StreamSource Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Xalan executor via JAXP. Nothing special must exists in the classpath
 * besides of course, a parser, jaxp and xalan.
 *
 * @ant.task ignore=""true""
 */ Xalan2Executor FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator aPack Literal ""org.apache.xalan."" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator sPack Literal ""com.sun.org.apache.xalan."" FieldDeclaration Modifier private ReferenceType TransformerFactory VariableDeclarator tfactory MethodInvocation TransformerFactory newInstance MethodDeclaration Modifier protected ReferenceType String getImplementation BuildException ReturnStatement MethodInvocation tfactory MethodInvocation getName getClass MethodDeclaration Modifier protected ReferenceType String getProcVersion FormalParameter ReferenceType String classNameImpl BuildException TryStatement IfStatement BinaryOperation || MethodInvocation classNameImpl BinaryOperation + MemberReference aPack Literal ""processor.TransformerFactoryImpl"" equals MethodInvocation classNameImpl BinaryOperation + MemberReference aPack Literal ""xslt.XSLTProcessorFactory"" equals BlockStatement ReturnStatement MethodInvocation BinaryOperation + MemberReference aPack Literal ""processor.XSLProcessorVersion"" getXalanVersion End IfStatement MethodInvocation classNameImpl BinaryOperation + MemberReference aPack Literal ""xsltc.trax.TransformerFactoryImpl"" equals BlockStatement ReturnStatement MethodInvocation BinaryOperation + MemberReference aPack Literal ""xsltc.ProcessorVersion"" getXSLTCVersion End IfStatement MethodInvocation classNameImpl BinaryOperation + MemberReference sPack Literal ""internal.xsltc.trax.TransformerFactoryImpl"" equals BlockStatement ReturnStatement MethodInvocation BinaryOperation + MemberReference sPack Literal ""internal.xsltc.ProcessorVersion"" getXSLTCVersion End ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Could not find a valid processor version"" Literal "" implementation from "" MemberReference classNameImpl CatchClause CatchClauseParameter ClassNotFoundException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Could not find processor version "" Literal ""implementation"" MemberReference e MethodDeclaration execute Exception LocalVariableDeclaration ReferenceType String VariableDeclarator system_id MethodInvocation caller getStylesheetSystemId LocalVariableDeclaration ReferenceType Source VariableDeclarator xsl_src ClassCreator ReferenceType StreamSource MemberReference system_id LocalVariableDeclaration ReferenceType Transformer VariableDeclarator tformer MethodInvocation tfactory MemberReference xsl_src newTransformer LocalVariableDeclaration ReferenceType Source VariableDeclarator xml_src ClassCreator ReferenceType DOMSource MemberReference caller document LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator os MethodInvocation getOutputStream TryStatement StatementExpression MethodInvocation tformer Literal ""output.dir"" MethodInvocation caller.toDir getAbsolutePath setParameter LocalVariableDeclaration ReferenceType Result VariableDeclarator result ClassCreator ReferenceType StreamResult MemberReference os StatementExpression MethodInvocation tformer MemberReference xml_src MemberReference result transform StatementExpression MethodInvocation os close ReferenceType XalanExecutor",0
290,290,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors Import java.io.File Import org.apache.tools.ant.BuildException InterfaceDeclaration Modifier public /**
 * This is the interface to be used by all selectors.
 *
 * @since 1.5
 */ FileSelector MethodDeclaration /**
     * Method that each selector will implement to create their
     * selection behaviour. If there is a problem with the setup
     * of a selector, it can throw a BuildException to indicate
     * the problem.
     *
     * @param basedir A java.io.File object for the base directory
     * @param filename The name of the file to check
     * @param file A File object for this filename
     * @return whether the file should be selected or not
     * @exception BuildException if the selector was not configured correctly
     */ BasicType boolean isSelected FormalParameter ReferenceType File basedir FormalParameter ReferenceType String filename FormalParameter ReferenceType File file BuildException",0
581,581,,0
339,339,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.regexp ClassDeclaration Modifier public /***
 * Regular expression utilities class which handles flag operations
 *
 */ RegexpUtil MethodDeclaration Modifier public final static BasicType boolean hasFlag FormalParameter BasicType int options FormalParameter BasicType int flag ReturnStatement BinaryOperation > BinaryOperation & MemberReference options MemberReference flag Literal 0 MethodDeclaration Modifier public final static BasicType int removeFlag FormalParameter BasicType int options FormalParameter BasicType int flag ReturnStatement BinaryOperation & MemberReference options BinaryOperation - Literal 0xFFFFFFFF MemberReference flag",1
511,511,,0
33,33,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors.modifiedselector Import java.io.File Import java.io.FileInputStream Import java.io.FileOutputStream Import java.security.DigestInputStream Import java.security.MessageDigest Import java.security.NoSuchAlgorithmException Import java.security.NoSuchProviderException Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Computes a 'hashvalue' for the content of file using
 * java.security.MessageDigest.
 * Use of this algorithm doesn't require any additional nested <param>s.
 * Supported <param>s are:
 * <table>
 * <tr>
 *   <th>name</th><th>values</th><th>description</th><th>required</th>
 * </tr>
 * <tr>
 *   <td> algorithm.algorithm </td>
 *   <td> MD5 | SHA (default provider) </td>
 *   <td> name of the algorithm the provider should use </td>
 *   <td> no, defaults to MD5 </td>
 * </tr>
 * <tr>
 *   <td> algorithm.provider </td>
 *   <td> </td>
 *   <td> name of the provider to use </td>
 *   <td> no, defaults to <i>null</i> </td>
 * </tr>
 * </table>
 *
 * @version 2003-09-13
 * @since  Ant 1.6
 */ DigestAlgorithm FieldDeclaration /**
     * MessageDigest algorithm to be used.
     */ Modifier private ReferenceType String VariableDeclarator algorithm Literal ""MD5"" FieldDeclaration /**
     * MessageDigest Algorithm provider
     */ Modifier private ReferenceType String VariableDeclarator provider Literal null FieldDeclaration /**
     * Message Digest instance
     */ Modifier private ReferenceType MessageDigest VariableDeclarator messageDigest Literal null FieldDeclaration /**
     * Size of the read buffer to use.
     */ Modifier private BasicType int VariableDeclarator readBufferSize BinaryOperation * Literal 8 Literal 1024 MethodDeclaration /**
     * Specifies the algorithm to be used to compute the checksum.
     * Defaults to ""MD5"". Other popular algorithms like ""SHA"" may be used as well.
     * @param algorithm the digest algorithm to use
     */ Modifier public setAlgorithm FormalParameter ReferenceType String algorithm StatementExpression Assignment This MemberReference algorithm MemberReference algorithm = MethodDeclaration /**
     * Sets the MessageDigest algorithm provider to be used
     * to calculate the checksum.
     * @param provider provider to use
     */ Modifier public setProvider FormalParameter ReferenceType String provider StatementExpression Assignment This MemberReference provider MemberReference provider = MethodDeclaration /** Initialize the security message digest. */ Modifier public initMessageDigest IfStatement BinaryOperation != MemberReference messageDigest Literal null BlockStatement ReturnStatement End IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference provider Literal null Literal ! MethodInvocation MemberReference provider equals """" Literal ! MethodInvocation MemberReference provider equals ""null"" BlockStatement TryStatement StatementExpression Assignment MemberReference messageDigest MethodInvocation MessageDigest MemberReference algorithm MemberReference provider getInstance = CatchClause CatchClauseParameter NoSuchAlgorithmException noalgo ThrowStatement ClassCreator ReferenceType BuildException MemberReference noalgo CatchClause CatchClauseParameter NoSuchProviderException noprovider ThrowStatement ClassCreator ReferenceType BuildException MemberReference noprovider BlockStatement TryStatement StatementExpression Assignment MemberReference messageDigest MethodInvocation MessageDigest MemberReference algorithm getInstance = CatchClause CatchClauseParameter NoSuchAlgorithmException noalgo ThrowStatement ClassCreator ReferenceType BuildException MemberReference noalgo End MethodDeclaration /**
     * This algorithm doesn't need any configuration.
     * Therefore it's always valid.
     * @return <i>true</i> if all is ok, otherwise <i>false</i>.
     */ Modifier public BasicType boolean isValid ReturnStatement Literal true MethodDeclaration /**
     * Computes a value for a file content with the specified digest algorithm.
     * @param file    File object for which the value should be evaluated.
     * @return        The value for that file
     */ Modifier public ReferenceType String getValue FormalParameter ReferenceType File file StatementExpression MethodInvocation initMessageDigest LocalVariableDeclaration ReferenceType String VariableDeclarator checksum Literal null TryStatement IfStatement MethodInvocation ! file canRead BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fis Literal null LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator fos Literal null LocalVariableDeclaration BasicType byte VariableDeclarator buf ArrayCreator BasicType byte MemberReference readBufferSize TryStatement StatementExpression MethodInvocation messageDigest reset StatementExpression Assignment MemberReference fis ClassCreator ReferenceType FileInputStream MemberReference file = LocalVariableDeclaration ReferenceType DigestInputStream VariableDeclarator dis ClassCreator ReferenceType DigestInputStream MemberReference fis MemberReference messageDigest WhileStatement BinaryOperation != MethodInvocation dis MemberReference buf Literal 0 MemberReference readBufferSize read Literal - 1 BlockStatement End StatementExpression MethodInvocation dis close StatementExpression MethodInvocation fis close StatementExpression Assignment MemberReference fis Literal null = LocalVariableDeclaration BasicType byte VariableDeclarator fileDigest MethodInvocation messageDigest digest LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator checksumSb ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fileDigest length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator hexStr MethodInvocation Integer BinaryOperation & Literal 0x00ff MemberReference ArraySelector MemberReference i fileDigest toHexString IfStatement BinaryOperation < MethodInvocation hexStr length Literal 2 BlockStatement StatementExpression MethodInvocation checksumSb Literal ""0"" append End StatementExpression MethodInvocation checksumSb MemberReference hexStr append End StatementExpression Assignment MemberReference checksum MethodInvocation checksumSb toString = CatchClause CatchClauseParameter Exception e ReturnStatement Literal null CatchClause CatchClauseParameter Exception e ReturnStatement Literal null ReturnStatement MemberReference checksum MethodDeclaration /**
     * Override Object.toString().
     * @return some information about this algorithm.
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation buf Literal ""<DigestAlgorithm:"" append StatementExpression MethodInvocation buf MethodInvocation MemberReference algorithm append Literal ""algorithm="" append StatementExpression MethodInvocation buf MethodInvocation MemberReference provider append Literal "";provider="" append StatementExpression MethodInvocation buf Literal "">"" append ReturnStatement MethodInvocation buf toString ReferenceType Algorithm",1
314,314,"CompilationUnit PackageDeclaration org.apache.tools.ant InterfaceDeclaration Modifier public /**
 * Enables a task to control unknown attributes and elements.
 *
 * @since Ant 1.5
 */ DynamicConfigurator ReferenceType DynamicAttribute ReferenceType DynamicElement",0
442,442,,0
19,19,"CompilationUnit PackageDeclaration org.apache.tools.ant.launch Import java.util.Properties InterfaceDeclaration Modifier public /**
 * Interface used to bridge to the actual Main class without any
 * messy reflection
 *
 * @since Ant 1.6
 */ AntMain MethodDeclaration /**
     * Start Ant.
     *
     * @param args command line args
     * @param additionalUserProperties properties to set beyond those that
     *        may be specified on the args list
     * @param coreLoader - not used
     *
     * @since Ant 1.6
     */ startAnt FormalParameter ReferenceType String args FormalParameter ReferenceType Properties additionalUserProperties FormalParameter ReferenceType ClassLoader coreLoader",0
4,4,"CompilationUnit PackageDeclaration org.apache.tools.tar Import java.io.FilterInputStream Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream ClassDeclaration Modifier public /**
 * The TarInputStream reads a UNIX tar archive as an InputStream.
 * methods are provided to position at each successive entry in
 * the archive, and the read each entry as a normal input stream
 * using read().
 *
 */ TarInputStream FieldDeclaration Modifier protected BasicType boolean VariableDeclarator debug FieldDeclaration Modifier protected BasicType boolean VariableDeclarator hasHitEOF FieldDeclaration Modifier protected BasicType int VariableDeclarator entrySize FieldDeclaration Modifier protected BasicType int VariableDeclarator entryOffset FieldDeclaration Modifier protected BasicType byte VariableDeclarator oneBuf FieldDeclaration Modifier protected BasicType byte VariableDeclarator readBuf FieldDeclaration Modifier protected ReferenceType TarBuffer VariableDeclarator buffer FieldDeclaration Modifier protected ReferenceType TarEntry VariableDeclarator currEntry FieldDeclaration Modifier private BasicType boolean VariableDeclarator v7Format ConstructorDeclaration Modifier public TarInputStream FormalParameter ReferenceType InputStream is StatementExpression ExplicitConstructorInvocation MemberReference is MemberReference TarBuffer DEFAULT_BLKSIZE MemberReference TarBuffer DEFAULT_RCDSIZE ConstructorDeclaration Modifier public TarInputStream FormalParameter ReferenceType InputStream is FormalParameter BasicType int blockSize StatementExpression ExplicitConstructorInvocation MemberReference is MemberReference blockSize MemberReference TarBuffer DEFAULT_RCDSIZE ConstructorDeclaration Modifier public TarInputStream FormalParameter ReferenceType InputStream is FormalParameter BasicType int blockSize FormalParameter BasicType int recordSize StatementExpression SuperConstructorInvocation MemberReference is StatementExpression Assignment This MemberReference buffer ClassCreator ReferenceType TarBuffer MemberReference is MemberReference blockSize MemberReference recordSize = StatementExpression Assignment This MemberReference readBuf Literal null = StatementExpression Assignment This MemberReference oneBuf ArrayCreator BasicType byte Literal 1 = StatementExpression Assignment This MemberReference debug Literal false = StatementExpression Assignment This MemberReference hasHitEOF Literal false = StatementExpression Assignment This MemberReference v7Format Literal false = MethodDeclaration /**
     * Sets the debugging flag.
     *
     * @param debug True to turn on debugging.
     */ Modifier public setDebug FormalParameter BasicType boolean debug StatementExpression Assignment This MemberReference debug MemberReference debug = StatementExpression This MemberReference buffer MethodInvocation MemberReference debug setDebug MethodDeclaration /**
     * Closes this stream. Calls the TarBuffer's close() method.
     */ Modifier public close IOException StatementExpression This MemberReference buffer MethodInvocation close MethodDeclaration /**
     * Get the record size being used by this stream's TarBuffer.
     *
     * @return The TarBuffer record size.
     */ Modifier public BasicType int getRecordSize ReturnStatement This MemberReference buffer MethodInvocation getRecordSize MethodDeclaration /**
     * Get the available data that can be read from the current
     * entry in the archive. This does not indicate how much data
     * is left in the entire archive, only in the current entry.
     * This value is determined from the entry's size header field
     * and the amount of data already read from the current entry.
     *
     *
     * @return The number of available bytes for the current entry.
     */ Modifier public BasicType int available IOException ReturnStatement BinaryOperation - This MemberReference entrySize This MemberReference entryOffset MethodDeclaration /**
     * Skip bytes in the input buffer. This skips bytes in the
     * current entry's data, not the entire archive, and will
     * stop at the end of the current entry's data if the number
     * to skip extends beyond that point.
     *
     * @param numToSkip The number of bytes to skip.
     */ Modifier public BasicType long skip FormalParameter BasicType long numToSkip IOException LocalVariableDeclaration BasicType byte VariableDeclarator skipBuf ArrayCreator BasicType byte BinaryOperation * Literal 8 Literal 1024 LocalVariableDeclaration BasicType long VariableDeclarator skip MemberReference numToSkip WhileStatement BinaryOperation > MemberReference skip Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator realSkip Cast BasicType int TernaryExpression BinaryOperation > MemberReference skip MemberReference skipBuf length MemberReference skipBuf length MemberReference skip LocalVariableDeclaration BasicType int VariableDeclarator numRead This MethodInvocation MemberReference skipBuf Literal 0 MemberReference realSkip read IfStatement BinaryOperation == MemberReference numRead Literal - 1 BlockStatement BreakStatement End StatementExpression Assignment MemberReference skip MemberReference numRead -= End ReturnStatement BinaryOperation - MemberReference numToSkip MemberReference skip MethodDeclaration /**
     * Since we do not support marking just yet, we return false.
     *
     * @return False.
     */ Modifier public BasicType boolean markSupported ReturnStatement Literal false MethodDeclaration /**
     * Since we do not support marking just yet, we do nothing.
     *
     * @param markLimit The limit to mark.
     */ Modifier public mark FormalParameter BasicType int markLimit MethodDeclaration /**
     * Since we do not support marking just yet, we do nothing.
     */ Modifier public reset MethodDeclaration /**
     * Get the next entry in this tar archive. This will skip
     * over any remaining data in the current entry, if there
     * is one, and place the input stream at the header of the
     * next entry, and read the header and instantiate a new
     * TarEntry from the header bytes and return that entry.
     * If there are no more entries in the archive, null will
     * be returned to indicate that the end of the archive has
     * been reached.
     *
     * @return The next TarEntry in the archive, or null.
     */ Modifier public ReferenceType TarEntry getNextEntry IOException IfStatement This MemberReference hasHitEOF BlockStatement ReturnStatement Literal null End IfStatement BinaryOperation != This MemberReference currEntry Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator numToSkip BinaryOperation - This MemberReference entrySize This MemberReference entryOffset IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""TarInputStream: SKIP currENTRY '"" This MemberReference currEntry MethodInvocation getName Literal ""' SZ "" This MemberReference entrySize Literal "" OFF "" This MemberReference entryOffset Literal ""  skipping "" MemberReference numToSkip Literal "" bytes"" println End IfStatement BinaryOperation > MemberReference numToSkip Literal 0 BlockStatement StatementExpression This MethodInvocation MemberReference numToSkip skip End StatementExpression Assignment This MemberReference readBuf Literal null = End LocalVariableDeclaration BasicType byte VariableDeclarator headerBuf This MemberReference buffer MethodInvocation readRecord IfStatement BinaryOperation == MemberReference headerBuf Literal null BlockStatement IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err Literal ""READ NULL RECORD"" println End StatementExpression Assignment This MemberReference hasHitEOF Literal true = IfStatement This MemberReference buffer MethodInvocation MemberReference headerBuf isEOFRecord BlockStatement IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err Literal ""READ EOF RECORD"" println End StatementExpression Assignment This MemberReference hasHitEOF Literal true = End End IfStatement This MemberReference hasHitEOF BlockStatement StatementExpression Assignment This MemberReference currEntry Literal null = BlockStatement StatementExpression Assignment This MemberReference currEntry ClassCreator ReferenceType TarEntry MemberReference headerBuf = IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == MemberReference ArraySelector Literal 257 headerBuf Literal 'u' BinaryOperation == MemberReference ArraySelector Literal 258 headerBuf Literal 's' BinaryOperation == MemberReference ArraySelector Literal 259 headerBuf Literal 't' BinaryOperation == MemberReference ArraySelector Literal 260 headerBuf Literal 'a' BinaryOperation == MemberReference ArraySelector Literal 261 headerBuf Literal 'r' BlockStatement StatementExpression Assignment This MemberReference v7Format Literal true = End IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + BinaryOperation + BinaryOperation + Literal ""TarInputStream: SET CURRENTRY '"" This MemberReference currEntry MethodInvocation getName Literal ""' size = "" This MemberReference currEntry MethodInvocation getSize println End StatementExpression Assignment This MemberReference entryOffset Literal 0 = StatementExpression Assignment This MemberReference entrySize Cast BasicType int This MemberReference currEntry MethodInvocation getSize = End IfStatement BinaryOperation && BinaryOperation != This MemberReference currEntry Literal null This MemberReference currEntry MethodInvocation isGNULongNameEntry BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator longName ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte Literal 256 LocalVariableDeclaration BasicType int VariableDeclarator length Literal 0 WhileStatement BinaryOperation >= Assignment MemberReference length MethodInvocation MemberReference buffer read = Literal 0 BlockStatement StatementExpression MethodInvocation longName ClassCreator ReferenceType String MemberReference buffer Literal 0 MemberReference length append End StatementExpression MethodInvocation getNextEntry IfStatement BinaryOperation && BinaryOperation > MethodInvocation longName length Literal 0 BinaryOperation == MethodInvocation longName BinaryOperation - MethodInvocation longName length Literal 1 charAt Literal 0 BlockStatement StatementExpression MethodInvocation longName BinaryOperation - MethodInvocation longName length Literal 1 deleteCharAt End StatementExpression This MemberReference currEntry MethodInvocation MethodInvocation longName toString setName End ReturnStatement This MemberReference currEntry MethodDeclaration /**
     * Reads a byte from the current tar archive entry.
     *
     * This method simply calls read( byte[], int, int ).
     *
     * @return The byte read, or -1 at EOF.
     */ Modifier public BasicType int read IOException LocalVariableDeclaration BasicType int VariableDeclarator num This MethodInvocation This MemberReference oneBuf Literal 0 Literal 1 read IfStatement BinaryOperation == MemberReference num Literal - 1 BlockStatement ReturnStatement MemberReference num BlockStatement ReturnStatement Cast BasicType int This MemberReference oneBuf ArraySelector Literal 0 End MethodDeclaration /**
     * Reads bytes from the current tar archive entry.
     *
     * This method simply calls read( byte[], int, int ).
     *
     * @param buf The buffer into which to place bytes read.
     * @return The number of bytes read, or -1 at EOF.
     */ Modifier public BasicType int read FormalParameter BasicType byte buf IOException ReturnStatement This MethodInvocation MemberReference buf Literal 0 MemberReference buf length read MethodDeclaration /**
     * Reads bytes from the current tar archive entry.
     *
     * This method is aware of the boundaries of the current
     * entry in the archive and will deal with them as if they
     * were this stream's start and EOF.
     *
     * @param buf The buffer into which to place bytes read.
     * @param offset The offset at which to place bytes read.
     * @param numToRead The number of bytes to read.
     * @return The number of bytes read, or -1 at EOF.
     */ Modifier public BasicType int read FormalParameter BasicType byte buf FormalParameter BasicType int offset FormalParameter BasicType int numToRead IOException LocalVariableDeclaration BasicType int VariableDeclarator totalRead Literal 0 IfStatement BinaryOperation >= This MemberReference entryOffset This MemberReference entrySize BlockStatement ReturnStatement Literal - 1 End IfStatement BinaryOperation > BinaryOperation + MemberReference numToRead This MemberReference entryOffset This MemberReference entrySize BlockStatement StatementExpression Assignment MemberReference numToRead BinaryOperation - This MemberReference entrySize This MemberReference entryOffset = End IfStatement BinaryOperation != This MemberReference readBuf Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator sz TernaryExpression BinaryOperation > MemberReference numToRead This MemberReference readBuf MemberReference length This MemberReference readBuf MemberReference length MemberReference numToRead StatementExpression MethodInvocation System This MemberReference readBuf Literal 0 MemberReference buf MemberReference offset MemberReference sz arraycopy IfStatement BinaryOperation >= MemberReference sz This MemberReference readBuf MemberReference length BlockStatement StatementExpression Assignment This MemberReference readBuf Literal null = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator newLen BinaryOperation - This MemberReference readBuf MemberReference length MemberReference sz LocalVariableDeclaration BasicType byte VariableDeclarator newBuf ArrayCreator BasicType byte MemberReference newLen StatementExpression MethodInvocation System This MemberReference readBuf MemberReference sz MemberReference newBuf Literal 0 MemberReference newLen arraycopy StatementExpression Assignment This MemberReference readBuf MemberReference newBuf = End StatementExpression Assignment MemberReference totalRead MemberReference sz += StatementExpression Assignment MemberReference numToRead MemberReference sz -= StatementExpression Assignment MemberReference offset MemberReference sz += End WhileStatement BinaryOperation > MemberReference numToRead Literal 0 BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator rec This MemberReference buffer MethodInvocation readRecord IfStatement BinaryOperation == MemberReference rec Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + BinaryOperation + Literal ""unexpected EOF with "" MemberReference numToRead Literal "" bytes unread"" End LocalVariableDeclaration BasicType int VariableDeclarator sz MemberReference numToRead LocalVariableDeclaration BasicType int VariableDeclarator recLen MemberReference rec length IfStatement BinaryOperation > MemberReference recLen MemberReference sz BlockStatement StatementExpression MethodInvocation System MemberReference rec Literal 0 MemberReference buf MemberReference offset MemberReference sz arraycopy StatementExpression Assignment This MemberReference readBuf ArrayCreator BasicType byte BinaryOperation - MemberReference recLen MemberReference sz = StatementExpression MethodInvocation System MemberReference rec MemberReference sz This MemberReference readBuf Literal 0 BinaryOperation - MemberReference recLen MemberReference sz arraycopy BlockStatement StatementExpression Assignment MemberReference sz MemberReference recLen = StatementExpression MethodInvocation System MemberReference rec Literal 0 MemberReference buf MemberReference offset MemberReference recLen arraycopy End StatementExpression Assignment MemberReference totalRead MemberReference sz += StatementExpression Assignment MemberReference numToRead MemberReference sz -= StatementExpression Assignment MemberReference offset MemberReference sz += End StatementExpression Assignment This MemberReference entryOffset MemberReference totalRead += ReturnStatement MemberReference totalRead MethodDeclaration /**
     * Copies the contents of the current tar archive entry directly into
     * an output stream.
     *
     * @param out The OutputStream into which to write the entry's data.
     */ Modifier public copyEntryContents FormalParameter ReferenceType OutputStream out IOException LocalVariableDeclaration BasicType byte VariableDeclarator buf ArrayCreator BasicType byte BinaryOperation * Literal 32 Literal 1024 WhileStatement Literal true BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator numRead This MethodInvocation MemberReference buf Literal 0 MemberReference buf length read IfStatement BinaryOperation == MemberReference numRead Literal - 1 BlockStatement BreakStatement End StatementExpression MethodInvocation out MemberReference buf Literal 0 MemberReference numRead write End ReferenceType FilterInputStream",0
169,169,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.sitraka Import java.util.Vector Import org.apache.tools.ant.util.regexp.RegexpMatcher Import org.apache.tools.ant.util.regexp.RegexpMatcherFactory ClassDeclaration Modifier public /**
 * Filters information from coverage, somewhat similar to a <tt>FileSet</tt>.
 *
 */ ReportFilters FieldDeclaration /** user defined filters */ Modifier protected ReferenceType Vector VariableDeclarator filters ClassCreator ReferenceType Vector FieldDeclaration /** cached matcher for each filter */ Modifier protected ReferenceType Vector VariableDeclarator matchers Literal null ConstructorDeclaration Modifier public ReportFilters MethodDeclaration Modifier public addInclude FormalParameter ReferenceType Include incl StatementExpression MethodInvocation filters MemberReference incl addElement MethodDeclaration Modifier public addExclude FormalParameter ReferenceType Exclude excl StatementExpression MethodInvocation filters MemberReference excl addElement MethodDeclaration Modifier public BasicType int size ReturnStatement MethodInvocation filters size MethodDeclaration /**
     * Check whether a given &lt;classname&gt;&lt;method&gt;() is accepted by the list
     * of filters or not.
     * @param methodname the full method name in the format &lt;classname&gt;&lt;method&gt;()
     */ Modifier public BasicType boolean accept FormalParameter ReferenceType String methodname IfStatement BinaryOperation == MemberReference matchers Literal null BlockStatement StatementExpression MethodInvocation createMatchers End LocalVariableDeclaration BasicType boolean VariableDeclarator result Literal false LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation filters size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FilterElement VariableDeclarator filter Cast ReferenceType FilterElement MethodInvocation filters MemberReference i elementAt LocalVariableDeclaration ReferenceType RegexpMatcher VariableDeclarator matcher Cast ReferenceType RegexpMatcher MethodInvocation matchers MemberReference i elementAt IfStatement BinaryOperation instanceof MemberReference filter ReferenceType Include BlockStatement StatementExpression Assignment MemberReference result BinaryOperation || MemberReference result MethodInvocation matcher MemberReference methodname matches = IfStatement BinaryOperation instanceof MemberReference filter ReferenceType Exclude BlockStatement StatementExpression Assignment MemberReference result BinaryOperation && MemberReference result MethodInvocation ! matcher MemberReference methodname matches = BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Invalid filter element: "" MethodInvocation filter MethodInvocation getName getClass End End End ReturnStatement MemberReference result MethodDeclaration /** should be called only once to cache matchers */ Modifier protected createMatchers LocalVariableDeclaration ReferenceType RegexpMatcherFactory VariableDeclarator factory ClassCreator ReferenceType RegexpMatcherFactory LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation filters size StatementExpression Assignment MemberReference matchers ClassCreator ReferenceType Vector = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FilterElement VariableDeclarator filter Cast ReferenceType FilterElement MethodInvocation filters MemberReference i elementAt LocalVariableDeclaration ReferenceType RegexpMatcher VariableDeclarator matcher MethodInvocation factory newRegexpMatcher LocalVariableDeclaration ReferenceType String VariableDeclarator pattern MethodInvocation filter getAsPattern StatementExpression MethodInvocation matcher MemberReference pattern setPattern StatementExpression MethodInvocation matchers MemberReference matcher addElement End ClassDeclaration Modifier public static abstract /** default abstract filter element class */ FilterElement FieldDeclaration Modifier protected ReferenceType String VariableDeclarator clazz Literal ""*"" FieldDeclaration Modifier protected ReferenceType String VariableDeclarator method Literal ""*"" MethodDeclaration Modifier public setClass FormalParameter ReferenceType String value StatementExpression Assignment MemberReference clazz MemberReference value = MethodDeclaration Modifier public setMethod FormalParameter ReferenceType String value StatementExpression Assignment MemberReference method MemberReference value = MethodDeclaration Modifier public ReferenceType String getAsPattern LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer MethodInvocation toString StatementExpression MethodInvocation StringUtil MemberReference buf Literal ""."" Literal ""\\."" replace StatementExpression MethodInvocation StringUtil MemberReference buf Literal ""*"" Literal "".*"" replace StatementExpression MethodInvocation StringUtil MemberReference buf Literal ""("" Literal ""\\("" replace StatementExpression MethodInvocation StringUtil MemberReference buf Literal "")"" Literal ""\\)"" replace ReturnStatement MethodInvocation buf toString MethodDeclaration Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + MemberReference clazz Literal ""."" MemberReference method Literal ""()"" ClassDeclaration Modifier public static /** concrete include class */ Include ReferenceType FilterElement ClassDeclaration Modifier public static /** concrete exclude class */ Exclude ReferenceType FilterElement",0
638,638,,0
206,206,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import java.util.Enumeration Import java.util.Properties Import java.util.Vector Import java.util.List Import java.util.LinkedList Import java.util.ListIterator Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.util.JavaEnvUtils ClassDeclaration Modifier public /**
 * A representation of a Java command line that is
 * a composite of 2 <tt>Commandline</tt>. One is used for the
 * vm/options and one for the classname/arguments. It provides
 * specific methods for a java command line.
 *
 */ CommandlineJava FieldDeclaration /**
     * commands to the JVM
     */ Modifier private ReferenceType Commandline VariableDeclarator vmCommand ClassCreator ReferenceType Commandline FieldDeclaration /**
     * actual java commands
     */ Modifier private ReferenceType Commandline VariableDeclarator javaCommand ClassCreator ReferenceType Commandline FieldDeclaration /**
     * properties to add using -D
     */ Modifier private ReferenceType SysProperties VariableDeclarator sysProperties ClassCreator ReferenceType SysProperties FieldDeclaration Modifier private ReferenceType Path VariableDeclarator classpath Literal null FieldDeclaration Modifier private ReferenceType Path VariableDeclarator bootclasspath Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator vmVersion FieldDeclaration Modifier private ReferenceType String VariableDeclarator maxMemory Literal null FieldDeclaration /**
     *  any assertions to make? Currently only supported in forked JVMs
     */ Modifier private ReferenceType Assertions VariableDeclarator assertions Literal null FieldDeclaration /**
     * Indicate whether it will execute a jar file or not, in this case
     * the first vm option must be a -jar and the 'executable' is a jar file.
     */ Modifier private BasicType boolean VariableDeclarator executeJar Literal false ClassDeclaration Modifier public static /**
     * Specialized Environment class for System properties
     */ SysProperties FieldDeclaration ReferenceType Properties VariableDeclarator sys Literal null FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator propertySets ClassCreator ReferenceType Vector MethodDeclaration /**
         * get the properties as an array; this is an override of the
         * superclass, as it evaluates all the properties
         * @return the array of definitions; may be null
         * @throws BuildException
         */ Modifier public ReferenceType String getVariables BuildException LocalVariableDeclaration ReferenceType List VariableDeclarator definitions ClassCreator ReferenceType LinkedList LocalVariableDeclaration ReferenceType ListIterator VariableDeclarator list MethodInvocation definitions listIterator StatementExpression MethodInvocation MemberReference list addDefinitionsToList IfStatement BinaryOperation == MethodInvocation definitions size Literal 0 BlockStatement ReturnStatement Literal null BlockStatement ReturnStatement Cast ReferenceType String MethodInvocation definitions ArrayCreator ReferenceType String Literal 0 toArray End MethodDeclaration /**
         * add all definitions (including property sets) to a list
         * @param listIt list iterator supporting add method
         */ Modifier public addDefinitionsToList FormalParameter ReferenceType ListIterator listIt LocalVariableDeclaration ReferenceType String VariableDeclarator props SuperMethodInvocation getVariables IfStatement BinaryOperation != MemberReference props Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference props length MemberReference ++ i BlockStatement StatementExpression MethodInvocation listIt BinaryOperation + Literal ""-D"" MemberReference ArraySelector MemberReference i props add End End LocalVariableDeclaration ReferenceType Properties VariableDeclarator propertySets MethodInvocation mergePropertySets ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation propertySets keys MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator key Cast ReferenceType String MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation propertySets MemberReference key getProperty StatementExpression MethodInvocation listIt BinaryOperation + BinaryOperation + BinaryOperation + Literal ""-D"" MemberReference key Literal ""="" MemberReference value add End MethodDeclaration /**
         * This method gets the size of the sysproperties instance. This merges all
         * property sets, so is not an O(1) operation.
         * @return the size of the sysproperties instance
         */ Modifier public BasicType int size LocalVariableDeclaration ReferenceType Properties VariableDeclarator p MethodInvocation mergePropertySets ReturnStatement BinaryOperation + MethodInvocation variables size MethodInvocation p size MethodDeclaration /**
         * cache the system properties and set the system properties to the
         * new values
         * @throws BuildException if Security prevented this operation
         */ Modifier public setSystem BuildException TryStatement StatementExpression Assignment MemberReference sys MethodInvocation System getProperties = LocalVariableDeclaration ReferenceType Properties VariableDeclarator p ClassCreator ReferenceType Properties ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation sys keys MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation e nextElement StatementExpression MethodInvocation p MemberReference o MethodInvocation sys MemberReference o get put End StatementExpression MethodInvocation p MethodInvocation mergePropertySets putAll ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation variables elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Environment ReferenceType Variable VariableDeclarator v Cast ReferenceType Environment ReferenceType Variable MethodInvocation e nextElement StatementExpression MethodInvocation p MethodInvocation v getKey MethodInvocation v getValue put End StatementExpression MethodInvocation System MemberReference p setProperties CatchClause CatchClauseParameter SecurityException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Cannot modify system properties"" MemberReference e MethodDeclaration /**
         * restore the system properties to the cached value
         * @throws BuildException  if Security prevented this operation, or
         * there was no system properties to restore
         */ Modifier public restoreSystem BuildException IfStatement BinaryOperation == MemberReference sys Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unbalanced nesting of SysProperties"" End TryStatement StatementExpression MethodInvocation System MemberReference sys setProperties StatementExpression Assignment MemberReference sys Literal null = CatchClause CatchClauseParameter SecurityException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Cannot modify system properties"" MemberReference e MethodDeclaration /**
         *  deep clone
         * @return a cloned instance of SysProperties
         */ Modifier public ReferenceType Object clone TryStatement LocalVariableDeclaration ReferenceType SysProperties VariableDeclarator c Cast ReferenceType SysProperties SuperMethodInvocation clone StatementExpression Assignment MemberReference c variables Cast ReferenceType Vector MethodInvocation variables clone = StatementExpression Assignment MemberReference c propertySets Cast ReferenceType Vector MethodInvocation propertySets clone = ReturnStatement MemberReference c CatchClause CatchClauseParameter CloneNotSupportedException e ReturnStatement Literal null MethodDeclaration /**
         * add a propertyset to the total set
         * @param ps the new property set
         */ Modifier public addSyspropertyset FormalParameter ReferenceType PropertySet ps StatementExpression MethodInvocation propertySets MemberReference ps addElement MethodDeclaration /**
         * merge all property sets into a single Properties object
         * @return the merged object
         */ Modifier private ReferenceType Properties mergePropertySets LocalVariableDeclaration ReferenceType Properties VariableDeclarator p ClassCreator ReferenceType Properties ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation propertySets elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType PropertySet VariableDeclarator ps Cast ReferenceType PropertySet MethodInvocation e nextElement StatementExpression MethodInvocation p MethodInvocation ps getProperties putAll End ReturnStatement MemberReference p ReferenceType Environment ReferenceType Cloneable ConstructorDeclaration Modifier public /**
     * constructor uses the VM we are running on now.
     */ CommandlineJava StatementExpression MethodInvocation MethodInvocation JavaEnvUtils Literal ""java"" getJreExecutable setVm StatementExpression MethodInvocation MethodInvocation JavaEnvUtils getJavaVersion setVmversion MethodDeclaration /**
     * create a new argument to the java program
     * @return an argument to be configured
     */ Modifier public ReferenceType Commandline ReferenceType Argument createArgument ReturnStatement MethodInvocation javaCommand createArgument MethodDeclaration /**
     * create a new JVM argument
     * @return an argument to be configured
     */ Modifier public ReferenceType Commandline ReferenceType Argument createVmArgument ReturnStatement MethodInvocation vmCommand createArgument MethodDeclaration /**
     * add a system property
     * @param sysp a property to be set in the JVM
     */ Modifier public addSysproperty FormalParameter ReferenceType Environment ReferenceType Variable sysp StatementExpression MethodInvocation sysProperties MemberReference sysp addVariable MethodDeclaration /**
     * add a set of system properties
     * @param sysp a set of properties
     */ Modifier public addSyspropertyset FormalParameter ReferenceType PropertySet sysp StatementExpression MethodInvocation sysProperties MemberReference sysp addSyspropertyset MethodDeclaration /**
     * set the executable used to start the new JVM
     * @param vm
     */ Modifier public setVm FormalParameter ReferenceType String vm StatementExpression MethodInvocation vmCommand MemberReference vm setExecutable MethodDeclaration /**
     * set the JVM version required
     * @param value
     */ Modifier public setVmversion FormalParameter ReferenceType String value StatementExpression Assignment MemberReference vmVersion MemberReference value = MethodDeclaration /**
     * get the current assertions
     * @return assertions or null
     */ Modifier public ReferenceType Assertions getAssertions ReturnStatement MemberReference assertions MethodDeclaration /**
     *  add an assertion set to the command
     * @param assertions assertions to make
     */ Modifier public setAssertions FormalParameter ReferenceType Assertions assertions StatementExpression Assignment This MemberReference assertions MemberReference assertions = MethodDeclaration /**
     * set a jar file to execute via the -jar option.
     * @param jarpathname the pathname of the jar to execute
     */ Modifier public setJar FormalParameter ReferenceType String jarpathname StatementExpression MethodInvocation javaCommand MemberReference jarpathname setExecutable StatementExpression Assignment MemberReference executeJar Literal true = MethodDeclaration /**
     * @return the pathname of the jar file to run via -jar option
     * or <tt>null</tt> if there is no jar to run.
     * @see #getClassname()
     */ Modifier public ReferenceType String getJar IfStatement MemberReference executeJar BlockStatement ReturnStatement MethodInvocation javaCommand getExecutable End ReturnStatement Literal null MethodDeclaration /**
     * set the classname to execute
     * @param classname the fully qualified classname.
     */ Modifier public setClassname FormalParameter ReferenceType String classname StatementExpression MethodInvocation javaCommand MemberReference classname setExecutable StatementExpression Assignment MemberReference executeJar Literal false = MethodDeclaration /**
     * @return the name of the class to run or <tt>null</tt> if there is no class.
     * @see #getJar()
     */ Modifier public ReferenceType String getClassname IfStatement MemberReference ! executeJar BlockStatement ReturnStatement MethodInvocation javaCommand getExecutable End ReturnStatement Literal null MethodDeclaration Modifier public ReferenceType Path createClasspath FormalParameter ReferenceType Project p IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath ClassCreator ReferenceType Path MemberReference p = End ReturnStatement MemberReference classpath MethodDeclaration /**
     * @since Ant 1.6
     */ Modifier public ReferenceType Path createBootclasspath FormalParameter ReferenceType Project p IfStatement BinaryOperation == MemberReference bootclasspath Literal null BlockStatement StatementExpression Assignment MemberReference bootclasspath ClassCreator ReferenceType Path MemberReference p = End ReturnStatement MemberReference bootclasspath MethodDeclaration Modifier public ReferenceType String getVmversion ReturnStatement MemberReference vmVersion MethodDeclaration /**
     * get the command line to run a java vm.
     * @return the list of all arguments necessary to run the vm.
     */ Modifier public ReferenceType String getCommandline LocalVariableDeclaration ReferenceType List VariableDeclarator commands ClassCreator ReferenceType LinkedList LocalVariableDeclaration Modifier final ReferenceType ListIterator VariableDeclarator listIterator MethodInvocation commands listIterator StatementExpression MethodInvocation MemberReference listIterator addCommandsToList ReturnStatement Cast ReferenceType String MethodInvocation commands ArrayCreator ReferenceType String Literal 0 toArray MethodDeclaration /**
     * add all the commands to a list identified by the iterator passed in
     * @param listIterator an iterator that supports the add method
     * @since Ant1.6
     */ Modifier private addCommandsToList FormalParameter Modifier final ReferenceType ListIterator listIterator StatementExpression MethodInvocation MethodInvocation MemberReference listIterator addCommandToList getActualVMCommand StatementExpression MethodInvocation sysProperties MemberReference listIterator addDefinitionsToList IfStatement MethodInvocation Literal true haveBootclasspath BlockStatement StatementExpression MethodInvocation listIterator BinaryOperation + Literal ""-Xbootclasspath:"" MethodInvocation bootclasspath toString add End IfStatement MethodInvocation haveClasspath BlockStatement StatementExpression MethodInvocation listIterator Literal ""-classpath"" add StatementExpression MethodInvocation listIterator MethodInvocation classpath MethodInvocation toString Literal ""ignore"" concatSystemClasspath add End IfStatement BinaryOperation != MethodInvocation getAssertions Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference listIterator applyAssertions getAssertions End IfStatement MemberReference executeJar BlockStatement StatementExpression MethodInvocation listIterator Literal ""-jar"" add End StatementExpression MethodInvocation javaCommand MemberReference listIterator addCommandToList MethodDeclaration /**
     * Specify max memory of the JVM
     * -mx or -Xmx depending on VM version
     */ Modifier public setMaxmemory FormalParameter ReferenceType String max StatementExpression Assignment This MemberReference maxMemory MemberReference max = MethodDeclaration /**
     * get a string description.
     * @return the command line as a string
     */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation Commandline MethodInvocation getCommandline toString MethodDeclaration /**
     * Returns a String that describes the command and arguments
     * suitable for verbose output before a call to
     * <code>Runtime.exec(String[])<code>
     *
     * @since Ant 1.5
     */ Modifier public ReferenceType String describeCommand ReturnStatement MethodInvocation Commandline MethodInvocation getCommandline describeCommand MethodDeclaration /**
     * Returns a String that describes the java command and arguments
     * for in VM executions.
     *
     * <p>The class name is the executable in this context.</p>
     *
     * @since Ant 1.5
     */ Modifier public ReferenceType String describeJavaCommand ReturnStatement MethodInvocation Commandline MethodInvocation getJavaCommand describeCommand MethodDeclaration /**
     * Get the VM command parameters, including memory settings
     * @return the VM command parameters
     */ Modifier protected ReferenceType Commandline getActualVMCommand LocalVariableDeclaration ReferenceType Commandline VariableDeclarator actualVMCommand Cast ReferenceType Commandline MethodInvocation vmCommand clone IfStatement BinaryOperation != MemberReference maxMemory Literal null BlockStatement IfStatement MethodInvocation vmVersion Literal ""1.1"" startsWith BlockStatement StatementExpression MethodInvocation actualVMCommand MethodInvocation BinaryOperation + Literal ""-mx"" MemberReference maxMemory setValue createArgument BlockStatement StatementExpression MethodInvocation actualVMCommand MethodInvocation BinaryOperation + Literal ""-Xmx"" MemberReference maxMemory setValue createArgument End End ReturnStatement MemberReference actualVMCommand MethodDeclaration /**
     * The size of the java command line. This is a fairly intensive
     * operation, as it has to evaluate the size of many components.
     * @return the total number of arguments in the java command line.
     * @see #getCommandline()
     * @deprecated please dont use this -it effectively creates the entire command.
     */ Modifier public BasicType int size LocalVariableDeclaration BasicType int VariableDeclarator size BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation size getActualVMCommand MethodInvocation javaCommand size MethodInvocation sysProperties size IfStatement MethodInvocation haveClasspath BlockStatement StatementExpression Assignment MemberReference size Literal 2 += End IfStatement MethodInvocation Literal true haveBootclasspath BlockStatement StatementExpression MemberReference ++ size End IfStatement MemberReference executeJar BlockStatement StatementExpression MemberReference ++ size End IfStatement BinaryOperation != MethodInvocation getAssertions Literal null BlockStatement StatementExpression Assignment MemberReference size MethodInvocation MethodInvocation size getAssertions += End ReturnStatement MemberReference size MethodDeclaration /**
     * get the Java command to be used.
     * @return the java command -not a clone.
     */ Modifier public ReferenceType Commandline getJavaCommand ReturnStatement MemberReference javaCommand MethodDeclaration /**
     * Get the VM command, including memory.
     * @return A deep clone of the instance's VM command, with memory settings added
     */ Modifier public ReferenceType Commandline getVmCommand ReturnStatement MethodInvocation getActualVMCommand MethodDeclaration /**
     * get the classpath for the command
     * @return the classpath or null
     */ Modifier public ReferenceType Path getClasspath ReturnStatement MemberReference classpath MethodDeclaration /**
     * get the boot classpath
     * @return boot classpath or null
     */ Modifier public ReferenceType Path getBootclasspath ReturnStatement MemberReference bootclasspath MethodDeclaration /**
     * cache current system properties and set them to those in this
     * java command
     * @throws BuildException  if Security prevented this operation
     */ Modifier public setSystemProperties BuildException StatementExpression MethodInvocation sysProperties setSystem MethodDeclaration /**
     * @throws BuildException  if Security prevented this operation, or
     * there was no system properties to restore
     */ Modifier public restoreSystemProperties BuildException StatementExpression MethodInvocation sysProperties restoreSystem MethodDeclaration /**
     * get the system properties object
     * @return The system properties object
     */ Modifier public ReferenceType SysProperties getSystemProperties ReturnStatement MemberReference sysProperties MethodDeclaration /**
     * clone the object; clone of all fields in the class
     * @return a CommandlineJava object
     */ Modifier public ReferenceType Object clone TryStatement LocalVariableDeclaration ReferenceType CommandlineJava VariableDeclarator c Cast ReferenceType CommandlineJava SuperMethodInvocation clone StatementExpression Assignment MemberReference c vmCommand Cast ReferenceType Commandline MethodInvocation vmCommand clone = StatementExpression Assignment MemberReference c javaCommand Cast ReferenceType Commandline MethodInvocation javaCommand clone = StatementExpression Assignment MemberReference c sysProperties Cast ReferenceType SysProperties MethodInvocation sysProperties clone = IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference c classpath Cast ReferenceType Path MethodInvocation classpath clone = End IfStatement BinaryOperation != MemberReference bootclasspath Literal null BlockStatement StatementExpression Assignment MemberReference c bootclasspath Cast ReferenceType Path MethodInvocation bootclasspath clone = End IfStatement BinaryOperation != MemberReference assertions Literal null BlockStatement StatementExpression Assignment MemberReference c assertions Cast ReferenceType Assertions MethodInvocation assertions clone = End ReturnStatement MemberReference c CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * Clear out the java arguments.
     */ Modifier public clearJavaArgs StatementExpression MethodInvocation javaCommand clearArgs MethodDeclaration /**
     * Has the classpath been specified and shall it really be used or
     * will build.sysclasspath null it?
     *
     * @since Ant 1.6
     */ Modifier protected BasicType boolean haveClasspath LocalVariableDeclaration ReferenceType Path VariableDeclarator fullClasspath TernaryExpression BinaryOperation != MemberReference classpath Literal null MethodInvocation classpath Literal ""ignore"" concatSystemClasspath Literal null ReturnStatement BinaryOperation && BinaryOperation != MemberReference fullClasspath Literal null BinaryOperation > MethodInvocation fullClasspath MethodInvocation trim MethodInvocation length toString Literal 0 MethodDeclaration /**
     * Has the bootclasspath been specified and shall it really be
     * used (build.sysclasspath could be set or the VM may not support
     * it)?
     *
     * @param log whether to log a warning if a bootclasspath has been
     * specified but will be ignored.
     *
     * @since Ant 1.6
     */ Modifier protected BasicType boolean haveBootclasspath FormalParameter BasicType boolean log IfStatement BinaryOperation && BinaryOperation != MemberReference bootclasspath Literal null BinaryOperation > MethodInvocation bootclasspath MethodInvocation trim MethodInvocation length toString Literal 0 BlockStatement IfStatement MethodInvocation ! bootclasspath MethodInvocation MethodInvocation bootclasspath MethodInvocation toString Literal ""ignore"" concatSystemClasspath equals toString BlockStatement IfStatement MemberReference log BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + Literal ""Ignoring bootclasspath as "" Literal ""build.sysclasspath has been set."" println End IfStatement MethodInvocation vmVersion Literal ""1.1"" startsWith BlockStatement IfStatement MemberReference log BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + Literal ""Ignoring bootclasspath as "" Literal ""the target VM doesn't support it."" println End BlockStatement ReturnStatement Literal true End End End ReturnStatement Literal false ReferenceType Cloneable",0
23,23,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.vss Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Performs CP (Change Project) commands to Microsoft Visual SourceSafe.
 * <p>This task is typically used before a VssAdd in order to set the target project</p>
 *
 * @ant.task name=""vsscp"" category=""scm""
 */ MSVSSCP MethodDeclaration /**
     * Builds a command line to execute ss.
     * @return     The constructed commandline.
     */ Modifier protected ReferenceType Commandline buildCmdLine LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline IfStatement BinaryOperation == MethodInvocation getVsspath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""vsspath attribute must be set!"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End StatementExpression MethodInvocation commandLine MethodInvocation getSSCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_CP setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getVsspath setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getAutoresponse setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getLogin setValue createArgument ReturnStatement MemberReference commandLine MethodDeclaration /**
     * Autoresponce behaviour. Valid options are Y and N.
     *
     * @param response The auto response value.
     */ Modifier public setAutoresponse FormalParameter ReferenceType String response StatementExpression SuperMethodInvocation MemberReference response setInternalAutoResponse ReferenceType MSVSS",0
431,431,,0
202,202,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.optional.image ClassDeclaration Modifier public abstract BasicShape FieldDeclaration Modifier protected BasicType int VariableDeclarator stroke_width Literal 0 FieldDeclaration Modifier protected ReferenceType String VariableDeclarator fill Literal ""transparent"" FieldDeclaration Modifier protected ReferenceType String VariableDeclarator stroke Literal ""black"" MethodDeclaration Modifier public setFill FormalParameter ReferenceType String col StatementExpression Assignment MemberReference fill MemberReference col = MethodDeclaration Modifier public setStroke FormalParameter ReferenceType String col StatementExpression Assignment MemberReference stroke MemberReference col = MethodDeclaration Modifier public setStrokewidth FormalParameter BasicType int width StatementExpression Assignment MemberReference stroke_width MemberReference width = ReferenceType ImageOperation ReferenceType DrawOperation",0
92,92,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.cvslib Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Represents a CVS user with a userID and a full name.
 *
 * @version $Revision$ $Date$
 */ CvsUser FieldDeclaration /** The user's Id */ Modifier private ReferenceType String VariableDeclarator m_userID FieldDeclaration /** The user's full name */ Modifier private ReferenceType String VariableDeclarator m_displayName MethodDeclaration /**
     * Set the user's fullname
     *
     * @param displayName the user's full name
     */ Modifier public setDisplayname FormalParameter Modifier final ReferenceType String displayName StatementExpression Assignment MemberReference m_displayName MemberReference displayName = MethodDeclaration /**
     * Set the user's id
     *
     * @param userID the user's new id value.
     */ Modifier public setUserid FormalParameter Modifier final ReferenceType String userID StatementExpression Assignment MemberReference m_userID MemberReference userID = MethodDeclaration /**
     * Get the user's id.
     *
     * @return The userID value
     */ ReferenceType String getUserID ReturnStatement MemberReference m_userID MethodDeclaration /**
     * Get the user's full name
     *
     * @return the user's full name
     */ ReferenceType String getDisplayname ReturnStatement MemberReference m_displayName MethodDeclaration /**
     * validate that this object is configured.
     *
     * @exception BuildException if the instance has not be correctly
     *            configured.
     */ validate BuildException IfStatement BinaryOperation == Literal null MemberReference m_userID BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message Literal ""Username attribute must be set."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End IfStatement BinaryOperation == Literal null MemberReference m_displayName BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message BinaryOperation + Literal ""Displayname attribute must be set for userID "" MemberReference m_userID ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End",0
525,525,,1
84,84,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.io.Reader Import java.io.IOException InterfaceDeclaration Modifier public /**
 * input stream tokenizers implement this interface
 *
 * @version Ant 1.6
 */ Tokenizer MethodDeclaration /**
     * get the next token from the input stream
     * @param in the input stream
     * @return the next token, or null for the end
     *         of the stream
     * @throws IOException if an error occurs
     */ ReferenceType String getToken FormalParameter ReferenceType Reader in IOException MethodDeclaration /**
     * return the string between tokens, after the
     * previous token.
     * @return the intra-token string
     */ ReferenceType String getPostToken",0
267,267,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs InterfaceDeclaration Modifier public /**
 * @since Ant 1.5
 */ XSLTLogger MethodDeclaration /**
     * Log a message.
     */ log FormalParameter ReferenceType String msg",0
360,360,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.dotnet Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Task Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * definitions can be conditional. What .NET conditions can not be
 * is in any state other than defined and undefined; you cannot give
 * a definition a value.
 */ DotnetDefine FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType String VariableDeclarator ifCond FieldDeclaration Modifier private ReferenceType String VariableDeclarator unlessCond MethodDeclaration /**
     * the name of a property which must be defined for
     * the definition to be set. Optional.
     * @param condition the name of the property
     */ Modifier public setIf FormalParameter ReferenceType String condition StatementExpression Assignment This MemberReference ifCond MemberReference condition = MethodDeclaration /**
     * the name of a property which must be undefined for
     * the definition to be set. Optional.
     * @param condition the name of the property
     */ Modifier public setUnless FormalParameter ReferenceType String condition StatementExpression Assignment This MemberReference unlessCond MemberReference condition = MethodDeclaration Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * the name of the definition. Required.
     * @param name
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * This method gets the value of this definition. Will be null if a condition
     * was declared and not met
     * @param owner owning task
     * @return The value of the definition.
     * @throws BuildException
     */ Modifier public ReferenceType String getValue FormalParameter ReferenceType Task owner BuildException IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No name provided for the define element"" MethodInvocation owner getLocation End IfStatement MethodInvocation ! MemberReference owner isSet BlockStatement ReturnStatement Literal null End ReturnStatement MemberReference name MethodDeclaration /**
     * logic taken from patternset
     * @param owner
     * @return true if the condition is valid
     */ Modifier public BasicType boolean isSet FormalParameter ReferenceType Task owner LocalVariableDeclaration ReferenceType Project VariableDeclarator p MethodInvocation owner getProject IfStatement BinaryOperation && BinaryOperation != MemberReference ifCond Literal null BinaryOperation == MethodInvocation p MemberReference ifCond getProperty Literal null BlockStatement ReturnStatement Literal false IfStatement BinaryOperation && BinaryOperation != MemberReference unlessCond Literal null BinaryOperation != MethodInvocation p MemberReference unlessCond getProperty Literal null BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true",0
666,666,,1
443,443,,0
523,523,,0
546,546,,0
277,277,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.BufferedReader Import java.io.File Import java.io.FileReader Import java.io.FileWriter Import java.io.IOException Import java.io.PrintWriter Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.util.StringUtils ClassDeclaration Modifier public /**
 * Adds an new entry to a CVS password file.
 *
 * @version $Revision$
 *
 * @since Ant 1.4
 *
 * @ant.task category=""scm""
 */ CVSPass FieldDeclaration /** CVS Root */ Modifier private ReferenceType String VariableDeclarator cvsRoot Literal null FieldDeclaration /** Password file to add password to */ Modifier private ReferenceType File VariableDeclarator passFile Literal null FieldDeclaration /** Password to add to file */ Modifier private ReferenceType String VariableDeclarator password Literal null FieldDeclaration /** Array contain char conversion data */ Modifier private final BasicType char VariableDeclarator shifts ArrayInitializer Literal 0 Literal 1 Literal 2 Literal 3 Literal 4 Literal 5 Literal 6 Literal 7 Literal 8 Literal 9 Literal 10 Literal 11 Literal 12 Literal 13 Literal 14 Literal 15 Literal 16 Literal 17 Literal 18 Literal 19 Literal 20 Literal 21 Literal 22 Literal 23 Literal 24 Literal 25 Literal 26 Literal 27 Literal 28 Literal 29 Literal 30 Literal 31 Literal 114 Literal 120 Literal 53 Literal 79 Literal 96 Literal 109 Literal 72 Literal 108 Literal 70 Literal 64 Literal 76 Literal 67 Literal 116 Literal 74 Literal 68 Literal 87 Literal 111 Literal 52 Literal 75 Literal 119 Literal 49 Literal 34 Literal 82 Literal 81 Literal 95 Literal 65 Literal 112 Literal 86 Literal 118 Literal 110 Literal 122 Literal 105 Literal 41 Literal 57 Literal 83 Literal 43 Literal 46 Literal 102 Literal 40 Literal 89 Literal 38 Literal 103 Literal 45 Literal 50 Literal 42 Literal 123 Literal 91 Literal 35 Literal 125 Literal 55 Literal 54 Literal 66 Literal 124 Literal 126 Literal 59 Literal 47 Literal 92 Literal 71 Literal 115 Literal 78 Literal 88 Literal 107 Literal 106 Literal 56 Literal 36 Literal 121 Literal 117 Literal 104 Literal 101 Literal 100 Literal 69 Literal 73 Literal 99 Literal 63 Literal 94 Literal 93 Literal 39 Literal 37 Literal 61 Literal 48 Literal 58 Literal 113 Literal 32 Literal 90 Literal 44 Literal 98 Literal 60 Literal 51 Literal 33 Literal 97 Literal 62 Literal 77 Literal 84 Literal 80 Literal 85 Literal 223 Literal 225 Literal 216 Literal 187 Literal 166 Literal 229 Literal 189 Literal 222 Literal 188 Literal 141 Literal 249 Literal 148 Literal 200 Literal 184 Literal 136 Literal 248 Literal 190 Literal 199 Literal 170 Literal 181 Literal 204 Literal 138 Literal 232 Literal 218 Literal 183 Literal 255 Literal 234 Literal 220 Literal 247 Literal 213 Literal 203 Literal 226 Literal 193 Literal 174 Literal 172 Literal 228 Literal 252 Literal 217 Literal 201 Literal 131 Literal 230 Literal 197 Literal 211 Literal 145 Literal 238 Literal 161 Literal 179 Literal 160 Literal 212 Literal 207 Literal 221 Literal 254 Literal 173 Literal 202 Literal 146 Literal 224 Literal 151 Literal 140 Literal 196 Literal 205 Literal 130 Literal 135 Literal 133 Literal 143 Literal 246 Literal 192 Literal 159 Literal 244 Literal 239 Literal 185 Literal 168 Literal 215 Literal 144 Literal 139 Literal 165 Literal 180 Literal 157 Literal 147 Literal 186 Literal 214 Literal 176 Literal 227 Literal 231 Literal 219 Literal 169 Literal 175 Literal 156 Literal 206 Literal 198 Literal 129 Literal 164 Literal 150 Literal 210 Literal 154 Literal 177 Literal 134 Literal 127 Literal 182 Literal 128 Literal 158 Literal 208 Literal 162 Literal 132 Literal 167 Literal 209 Literal 149 Literal 241 Literal 153 Literal 251 Literal 237 Literal 236 Literal 171 Literal 195 Literal 243 Literal 233 Literal 253 Literal 240 Literal 194 Literal 250 Literal 191 Literal 155 Literal 142 Literal 137 Literal 245 Literal 235 Literal 163 Literal 242 Literal 178 Literal 152 ConstructorDeclaration Modifier public /**
     * Create a CVS task using the default cvspass file location.
     */ CVSPass StatementExpression Assignment MemberReference passFile ClassCreator ReferenceType File BinaryOperation + BinaryOperation + MethodInvocation System Literal ""cygwin.user.home"" MethodInvocation System Literal ""user.home"" getProperty getProperty MemberReference File separatorChar Literal "".cvspass"" = MethodDeclaration /**
     * Does the work.
     *
     * @exception BuildException if something goes wrong with the build
     */ Modifier public final execute BuildException IfStatement BinaryOperation == MemberReference cvsRoot Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""cvsroot is required"" End IfStatement BinaryOperation == MemberReference password Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""password is required"" End StatementExpression MethodInvocation BinaryOperation + Literal ""cvsRoot: "" MemberReference cvsRoot MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation BinaryOperation + Literal ""password: "" MemberReference password MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation BinaryOperation + Literal ""passFile: "" MemberReference passFile MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator reader Literal null LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator writer Literal null TryStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer IfStatement MethodInvocation passFile exists BlockStatement StatementExpression Assignment MemberReference reader ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType FileReader MemberReference passFile = LocalVariableDeclaration ReferenceType String VariableDeclarator line Literal null WhileStatement BinaryOperation != Assignment MemberReference line MethodInvocation reader readLine = Literal null BlockStatement IfStatement MethodInvocation ! line MemberReference cvsRoot startsWith BlockStatement StatementExpression MethodInvocation buf MethodInvocation MemberReference StringUtils LINE_SEP append MemberReference line append End End End LocalVariableDeclaration ReferenceType String VariableDeclarator pwdfile BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation buf toString MemberReference cvsRoot Literal "" A"" MethodInvocation MemberReference password mangle StatementExpression MethodInvocation BinaryOperation + Literal ""Writing -> "" MemberReference pwdfile MemberReference Project MSG_DEBUG log StatementExpression Assignment MemberReference writer ClassCreator ReferenceType PrintWriter ClassCreator ReferenceType FileWriter MemberReference passFile = StatementExpression MethodInvocation writer MemberReference pwdfile println CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e IfStatement BinaryOperation != MemberReference reader Literal null BlockStatement TryStatement StatementExpression MethodInvocation reader close CatchClause CatchClauseParameter IOException e End IfStatement BinaryOperation != MemberReference writer Literal null BlockStatement StatementExpression MethodInvocation writer close End MethodDeclaration Modifier private final ReferenceType String mangle FormalParameter ReferenceType String password LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation password length MemberReference ++ i BlockStatement StatementExpression MethodInvocation buf MemberReference ArraySelector MethodInvocation password MemberReference i charAt shifts append End ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * The CVS repository to add an entry for.
     *
     * @param cvsRoot the CVS repository
     */ Modifier public setCvsroot FormalParameter ReferenceType String cvsRoot StatementExpression Assignment This MemberReference cvsRoot MemberReference cvsRoot = MethodDeclaration /**
     * Password file to add the entry to.
     *
     * @param passFile the password file.
     */ Modifier public setPassfile FormalParameter ReferenceType File passFile StatementExpression Assignment This MemberReference passFile MemberReference passFile = MethodDeclaration /**
     * Password to be added to the password file.
     *
     * @param password the password.
     */ Modifier public setPassword FormalParameter ReferenceType String password StatementExpression Assignment This MemberReference password MemberReference password = ReferenceType Task",0
223,223,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ide Import java.awt.BorderLayout Import java.awt.Button Import java.awt.Choice Import java.awt.Dialog Import java.awt.FileDialog Import java.awt.FlowLayout Import java.awt.Font Import java.awt.Frame Import java.awt.GridBagConstraints Import java.awt.GridBagLayout Import java.awt.Insets Import java.awt.Label Import java.awt.List Import java.awt.Menu Import java.awt.MenuBar Import java.awt.MenuItem Import java.awt.Panel Import java.awt.SystemColor Import java.awt.TextArea Import java.awt.TextField Import java.awt.Toolkit Import java.awt.event.ActionEvent Import java.awt.event.ActionListener Import java.awt.event.ItemEvent Import java.awt.event.ItemListener Import java.awt.event.TextEvent Import java.awt.event.TextListener Import java.awt.event.WindowEvent Import java.awt.event.WindowListener Import java.beans.PropertyChangeListener Import java.util.Vector Import org.apache.tools.ant.BuildEvent Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.BuildListener Import org.apache.tools.ant.Project Import org.apache.tools.ant.util.DateUtils Import org.apache.tools.ant.util.StringUtils ClassDeclaration Modifier public /**
 * This is a simple grafical user interface to provide the information needed
 * by ANT and to start the build-process within IBM VisualAge for Java.
 * <p>
 * I was using AWT to make it independent from the JDK-version. Please don't
 * ask me for a Swing-version:I am very familiar with Swing and I really think
 * that it's not necessary for such a simple gui!
 * <p>
 * It is completely developed in VAJ using the visual composition editor.
 * About 90% of the code is generated by VAJ,
 * but in fact I did a lot of <i>code-beautification</i> ;-).
 * <p>
 * @version 1.0 h
 */ VAJAntToolGUI FieldDeclaration /**
     * Members
     */ Modifier private ReferenceType VAJBuildLogger VariableDeclarator logger ClassCreator ReferenceType VAJBuildLogger FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator lineSeparator Literal ""\r\n"" FieldDeclaration Modifier private ReferenceType PrivateEventHandler VariableDeclarator iEventHandler ClassCreator ReferenceType PrivateEventHandler FieldDeclaration /**
     * Members of the main-window
     */ Modifier private ReferenceType VAJBuildInfo VariableDeclarator iBuildInfo Literal null FieldDeclaration Modifier private ReferenceType MenuBar VariableDeclarator iAntMakeMenuBar Literal null FieldDeclaration Modifier private ReferenceType Menu VariableDeclarator iFileMenu Literal null FieldDeclaration Modifier private ReferenceType MenuItem VariableDeclarator iSaveMenuItem Literal null FieldDeclaration Modifier private ReferenceType MenuItem VariableDeclarator iMenuSeparator Literal null FieldDeclaration Modifier private ReferenceType MenuItem VariableDeclarator iShowLogMenuItem Literal null FieldDeclaration Modifier private ReferenceType Menu VariableDeclarator iHelpMenu Literal null FieldDeclaration Modifier private ReferenceType MenuItem VariableDeclarator iAboutMenuItem Literal null FieldDeclaration Modifier private ReferenceType Panel VariableDeclarator iContentsPane Literal null FieldDeclaration Modifier private ReferenceType Panel VariableDeclarator iOptionenPanel Literal null FieldDeclaration Modifier private ReferenceType Panel VariableDeclarator iCommandButtonPanel Literal null FieldDeclaration Modifier private ReferenceType Label VariableDeclarator iProjectLabel Literal null FieldDeclaration Modifier private ReferenceType Label VariableDeclarator iProjectText Literal null FieldDeclaration Modifier private ReferenceType Label VariableDeclarator iBuildFileLabel Literal null FieldDeclaration Modifier private ReferenceType TextField VariableDeclarator iBuildFileTextField Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator iConnPtoP2Aligning Literal false FieldDeclaration Modifier private ReferenceType Button VariableDeclarator iBrowseButton Literal null FieldDeclaration Modifier private ReferenceType FileDialog VariableDeclarator iFileDialog Literal null FieldDeclaration Modifier private ReferenceType Choice VariableDeclarator iMessageOutputLevelChoice Literal null FieldDeclaration Modifier private ReferenceType Label VariableDeclarator iMessageOutputLevelLabel Literal null FieldDeclaration Modifier private ReferenceType Label VariableDeclarator iTargetLabel Literal null FieldDeclaration Modifier private ReferenceType List VariableDeclarator iTargetList Literal null FieldDeclaration Modifier private ReferenceType Button VariableDeclarator iBuildButton Literal null FieldDeclaration Modifier private ReferenceType Button VariableDeclarator iReloadButton Literal null FieldDeclaration Modifier private ReferenceType Button VariableDeclarator iCloseButton Literal null FieldDeclaration /**
     * log-Window
     */ Modifier private ReferenceType Frame VariableDeclarator iMessageFrame Literal null FieldDeclaration Modifier private ReferenceType Panel VariableDeclarator iMessageCommandPanel Literal null FieldDeclaration Modifier private ReferenceType Panel VariableDeclarator iMessageContentPanel Literal null FieldDeclaration Modifier private ReferenceType TextArea VariableDeclarator iMessageTextArea Literal null FieldDeclaration Modifier private ReferenceType Button VariableDeclarator iMessageOkButton Literal null FieldDeclaration Modifier private ReferenceType Button VariableDeclarator iMessageClearLogButton Literal null FieldDeclaration /**
     * About-dialog
     */ Modifier private ReferenceType Dialog VariableDeclarator iAboutDialog Literal null FieldDeclaration Modifier private ReferenceType Panel VariableDeclarator iAboutDialogContentPanel Literal null FieldDeclaration Modifier private ReferenceType Panel VariableDeclarator iAboutInfoPanel Literal null FieldDeclaration Modifier private ReferenceType Panel VariableDeclarator iAboutCommandPanel Literal null FieldDeclaration Modifier private ReferenceType Label VariableDeclarator iAboutTitleLabel Literal null FieldDeclaration Modifier private ReferenceType Label VariableDeclarator iAboutDevLabel Literal null FieldDeclaration Modifier private ReferenceType Label VariableDeclarator iAboutContactLabel Literal null FieldDeclaration Modifier private ReferenceType Button VariableDeclarator iAboutOkButton Literal null ClassDeclaration Modifier private /**
     * This internal BuildLogger, to be honest, is just a BuildListener.
     * It does nearly the same as the DefaultLogger, but uses the Loggin-Window for output.
     */ VAJBuildLogger FieldDeclaration Modifier private BasicType long VariableDeclarator startTime MethodInvocation System currentTimeMillis ConstructorDeclaration Modifier public /**
         * VAJBuildLogger constructor comment.
         */ VAJBuildLogger StatementExpression SuperConstructorInvocation MethodDeclaration /**
         *  Fired after the last target has finished. This event
         *  will still be thrown if an error occurred during the build.
         *
         *  @see BuildEvent#getException()
         */ Modifier public buildFinished FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation MethodInvocation Literal false setEnabled getStopButton StatementExpression MethodInvocation MethodInvocation Literal true setEnabled getBuildButton StatementExpression MethodInvocation MethodInvocation requestFocus getBuildButton LocalVariableDeclaration ReferenceType Throwable VariableDeclarator error MethodInvocation event getException IfStatement BinaryOperation == MemberReference error Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + MemberReference lineSeparator Literal ""BUILD SUCCESSFUL"" append getMessageTextArea BlockStatement StatementExpression MethodInvocation MemberReference error logException End StatementExpression MethodInvocation MethodInvocation BinaryOperation + BinaryOperation + MemberReference lineSeparator Literal ""Total time: "" MethodInvocation DateUtils BinaryOperation - MethodInvocation System currentTimeMillis MemberReference startTime formatElapsedTime append getMessageTextArea MethodDeclaration /**
         *  Outputs an exception.
         */ Modifier public logException FormalParameter ReferenceType Throwable error StatementExpression MethodInvocation MethodInvocation BinaryOperation + BinaryOperation + MemberReference lineSeparator Literal ""BUILD FAILED"" MemberReference lineSeparator append getMessageTextArea IfStatement BinaryOperation instanceof MemberReference error ReferenceType BuildException BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation error toString append getMessageTextArea LocalVariableDeclaration ReferenceType Throwable VariableDeclarator nested Cast ReferenceType BuildException MemberReference error IfStatement BinaryOperation != MemberReference nested Literal null BlockStatement StatementExpression MethodInvocation nested MemberReference System err printStackTrace End BlockStatement StatementExpression MethodInvocation error MemberReference System err printStackTrace End MethodDeclaration /**
         *  Fired before any targets are started.
         */ Modifier public buildStarted FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation MethodInvocation Literal true setEnabled getStopButton StatementExpression MethodInvocation MethodInvocation Literal false setEnabled getBuildButton StatementExpression MethodInvocation MethodInvocation requestFocus getStopButton StatementExpression Assignment MemberReference startTime MethodInvocation System currentTimeMillis = StatementExpression MethodInvocation MethodInvocation MemberReference lineSeparator append getMessageTextArea MethodDeclaration /**
         *  Fired whenever a message is logged.
         *
         *  @see BuildEvent#getMessage()
         *  @see BuildEvent#getPriority()
         */ Modifier public messageLogged FormalParameter ReferenceType BuildEvent event IfStatement BinaryOperation <= MethodInvocation event getPriority MethodInvocation MethodInvocation getOutputMessageLevel getBuildInfo BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal """" IfStatement BinaryOperation != MethodInvocation event getTask Literal null BlockStatement StatementExpression Assignment MemberReference msg BinaryOperation + BinaryOperation + Literal ""["" MethodInvocation event MethodInvocation getTaskName getTask Literal ""] "" = End StatementExpression MethodInvocation MethodInvocation BinaryOperation + BinaryOperation + MemberReference lineSeparator MemberReference msg MethodInvocation event getMessage append getMessageTextArea End MethodDeclaration /**
         *  Fired when a target has finished. This event will
         *  still be thrown if an error occurred during the build.
         *
         *  @see BuildEvent#getException()
         */ Modifier public targetFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
         *  Fired when a target is started.
         *
         *  @see BuildEvent#getTarget()
         */ Modifier public targetStarted FormalParameter ReferenceType BuildEvent event IfStatement BinaryOperation <= MethodInvocation MethodInvocation getOutputMessageLevel getBuildInfo MemberReference Project MSG_INFO BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + BinaryOperation + MemberReference lineSeparator MethodInvocation event MethodInvocation getName getTarget Literal "":"" append getMessageTextArea End MethodDeclaration /**
         *  Fired when a task has finished. This event will still
         *  be throw if an error occurred during the build.
         *
         *  @see BuildEvent#getException()
         */ Modifier public taskFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
         *  Fired when a task is started.
         *
         *  @see BuildEvent#getTask()
         */ Modifier public taskStarted FormalParameter ReferenceType BuildEvent event ReferenceType BuildListener ClassDeclaration Modifier private /**
     * Eventhandler to handle all AWT-events
     */ PrivateEventHandler MethodDeclaration /**
         * ActionListener method
         */ Modifier public actionPerformed FormalParameter ReferenceType ActionEvent e TryStatement IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getBrowseButton BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation MethodInvocation getText MethodInvocation Literal 0 BinaryOperation + MethodInvocation MethodInvocation getText MethodInvocation Literal '\\' lastIndexOf getBuildFileTextField Literal 1 substring getBuildFileTextField setDirectory getFileDialog StatementExpression MethodInvocation MethodInvocation Literal ""*.xml"" setFile getFileDialog StatementExpression MethodInvocation MethodInvocation show getFileDialog IfStatement MethodInvocation ! MethodInvocation getFile MethodInvocation Literal """" equals getFileDialog BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + MethodInvocation MethodInvocation getDirectory getFileDialog MethodInvocation MethodInvocation getFile getFileDialog setText getBuildFileTextField End End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getCloseButton BlockStatement StatementExpression MethodInvocation dispose StatementExpression MethodInvocation System Literal 0 exit End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getBuildButton BlockStatement StatementExpression MethodInvocation executeTarget End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getStopButton BlockStatement StatementExpression MethodInvocation MethodInvocation cancelBuild getBuildInfo End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getReloadButton BlockStatement TryStatement StatementExpression MethodInvocation MethodInvocation updateTargetList getBuildInfo StatementExpression MethodInvocation fillList CatchClause CatchClauseParameter Throwable fileNotFound StatementExpression MethodInvocation MemberReference fileNotFound handleException StatementExpression MethodInvocation MethodInvocation removeAll getTargetList StatementExpression MethodInvocation MethodInvocation Literal false setEnabled getBuildButton End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getSaveMenuItem BlockStatement StatementExpression MethodInvocation saveBuildInfo End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getAboutMenuItem BlockStatement StatementExpression MethodInvocation MethodInvocation show getAboutDialog End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getShowLogMenuItem BlockStatement StatementExpression MethodInvocation MethodInvocation show getMessageFrame End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getAboutOkButton BlockStatement StatementExpression MethodInvocation MethodInvocation dispose getAboutDialog End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getMessageOkButton BlockStatement StatementExpression MethodInvocation MethodInvocation dispose getMessageFrame End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getMessageClearLogButton BlockStatement StatementExpression MethodInvocation MethodInvocation Literal """" setText getMessageTextArea End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getMessageOkButton BlockStatement StatementExpression MethodInvocation MethodInvocation dispose getMessageFrame End CatchClause CatchClauseParameter Throwable exc StatementExpression MethodInvocation MemberReference exc handleException MethodDeclaration /**
         * ItemListener method
         */ Modifier public itemStateChanged FormalParameter ReferenceType ItemEvent e TryStatement IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getTargetList BlockStatement StatementExpression MethodInvocation MethodInvocation Literal true setEnabled getBuildButton End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getMessageOutputLevelChoice BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation MethodInvocation getSelectedIndex getMessageOutputLevelChoice setOutputMessageLevel getBuildInfo End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getTargetList BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation MethodInvocation getSelectedItem getTargetList setTarget getBuildInfo End CatchClause CatchClauseParameter Throwable exc StatementExpression MethodInvocation MemberReference exc handleException MethodDeclaration /**
         * PropertyChangeListener method
         */ Modifier public propertyChange FormalParameter ReferenceType java ReferenceType beans ReferenceType PropertyChangeEvent evt IfStatement BinaryOperation && BinaryOperation == MethodInvocation evt getSource This VAJAntToolGUI MethodInvocation getBuildInfo MethodInvocation evt getPropertyName BlockStatement StatementExpression MethodInvocation connectProjectNameToLabel End IfStatement BinaryOperation && BinaryOperation == MethodInvocation evt getSource This VAJAntToolGUI MethodInvocation getBuildInfo MethodInvocation evt getPropertyName BlockStatement StatementExpression MethodInvocation connectBuildFileNameToTextField End MethodDeclaration /**
         * TextListener method
         */ Modifier public textValueChanged FormalParameter ReferenceType TextEvent e IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getBuildFileTextField BlockStatement StatementExpression MethodInvocation connectTextFieldToBuildFileName End MethodDeclaration /**
         * WindowListener methods
         */ Modifier public windowClosing FormalParameter ReferenceType WindowEvent e TryStatement IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI BlockStatement StatementExpression MethodInvocation dispose StatementExpression MethodInvocation System Literal 0 exit End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getAboutDialog BlockStatement StatementExpression MethodInvocation MethodInvocation dispose getAboutDialog End IfStatement BinaryOperation == MethodInvocation e getSource This VAJAntToolGUI MethodInvocation getMessageFrame BlockStatement StatementExpression MethodInvocation MethodInvocation dispose getMessageFrame End CatchClause CatchClauseParameter Throwable exc StatementExpression MethodInvocation MemberReference exc handleException MethodDeclaration Modifier public windowActivated FormalParameter ReferenceType WindowEvent e MethodDeclaration Modifier public windowClosed FormalParameter ReferenceType WindowEvent e MethodDeclaration Modifier public windowDeactivated FormalParameter ReferenceType WindowEvent e MethodDeclaration Modifier public windowDeiconified FormalParameter ReferenceType WindowEvent e MethodDeclaration Modifier public windowIconified FormalParameter ReferenceType WindowEvent e MethodDeclaration Modifier public windowOpened FormalParameter ReferenceType WindowEvent e ReferenceType ActionListener ReferenceType ItemListener ReferenceType TextListener ReferenceType WindowListener ReferenceType PropertyChangeListener ConstructorDeclaration Modifier private /**
     * AntMake default-constructor.
     */ VAJAntToolGUI StatementExpression SuperConstructorInvocation StatementExpression MethodInvocation initialize ConstructorDeclaration Modifier public /**
     * AntMake constructor called by VAJAntTool integration.
     * @param newBuildInfo VAJBuildInfo
     */ VAJAntToolGUI FormalParameter ReferenceType VAJBuildInfo newBuildInfo StatementExpression SuperConstructorInvocation StatementExpression MethodInvocation MemberReference newBuildInfo setBuildInfo StatementExpression MethodInvocation initialize MethodDeclaration /**
     * This method is used to center dialogs.
     */ Modifier public static centerDialog FormalParameter ReferenceType Dialog dialog StatementExpression MethodInvocation dialog BinaryOperation - BinaryOperation / MethodInvocation Toolkit MethodInvocation getScreenSize MemberReference width getDefaultToolkit Literal 2 BinaryOperation / MethodInvocation dialog MemberReference width getSize Literal 2 BinaryOperation - BinaryOperation / MethodInvocation java.awt.Toolkit MethodInvocation getScreenSize MemberReference height getDefaultToolkit Literal 2 BinaryOperation / MethodInvocation dialog MemberReference height getSize Literal 2 setLocation MethodDeclaration /**
     * connectBuildFileNameToTextField:  (BuildInfo.buildFileName <--> BuildFileTextField.text)
     */ Modifier private connectBuildFileNameToTextField TryStatement IfStatement BinaryOperation == MemberReference iConnPtoP2Aligning Literal false BlockStatement StatementExpression Assignment MemberReference iConnPtoP2Aligning Literal true = IfStatement BinaryOperation != MethodInvocation getBuildInfo Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation MethodInvocation getBuildFileName getBuildInfo setText getBuildFileTextField End StatementExpression Assignment MemberReference iConnPtoP2Aligning Literal false = End CatchClause CatchClauseParameter Throwable iExc StatementExpression Assignment MemberReference iConnPtoP2Aligning Literal false = StatementExpression MethodInvocation MemberReference iExc handleException MethodDeclaration /**
     * connectProjectNameToLabel:  (BuildInfo.vajProjectName <--> ProjectText.text)
     */ Modifier private connectProjectNameToLabel TryStatement IfStatement BinaryOperation != MethodInvocation getBuildInfo Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation MethodInvocation getVAJProjectName getBuildInfo setText getProjectText End CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException MethodDeclaration /**
     * connectTextFieldToBuildFileName:  (BuildInfo.buildFileName <--> BuildFileTextField.text)
     */ Modifier private connectTextFieldToBuildFileName TryStatement IfStatement BinaryOperation == MemberReference iConnPtoP2Aligning Literal false BlockStatement StatementExpression Assignment MemberReference iConnPtoP2Aligning Literal true = IfStatement BinaryOperation != MethodInvocation getBuildInfo Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation MethodInvocation getText getBuildFileTextField setBuildFileName getBuildInfo End StatementExpression Assignment MemberReference iConnPtoP2Aligning Literal false = End CatchClause CatchClauseParameter Throwable iExc StatementExpression Assignment MemberReference iConnPtoP2Aligning Literal false = StatementExpression MethodInvocation MemberReference iExc handleException MethodDeclaration /**
     * external build of a .jar-file
     */ Modifier private executeTarget TryStatement StatementExpression MethodInvocation MethodInvocation show getMessageFrame StatementExpression MethodInvocation MethodInvocation MemberReference logger executeProject getBuildInfo CatchClause CatchClauseParameter Throwable exc StatementExpression MethodInvocation logger MemberReference exc logException ReturnStatement MethodDeclaration /**
     * Fills the taget-list with project-targets
     */ Modifier private fillList StatementExpression MethodInvocation MethodInvocation removeAll getTargetList LocalVariableDeclaration ReferenceType Vector VariableDeclarator targets MethodInvocation MethodInvocation getProjectTargets getBuildInfo ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation targets size MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation targets MethodInvocation toString MemberReference i elementAt add getTargetList End StatementExpression MethodInvocation MethodInvocation MethodInvocation iBuildInfo MethodInvocation MethodInvocation iBuildInfo getTarget indexOf getProjectTargets select getTargetList IfStatement BinaryOperation >= MethodInvocation MethodInvocation getSelectedIndex getTargetList Literal 0 BlockStatement StatementExpression MethodInvocation MethodInvocation Literal true setEnabled getBuildButton End MethodDeclaration /**
     * Return the AboutCommandPanel property value.
     * @return java.awt.Panel
     */ Modifier private ReferenceType Panel getAboutCommandPanel IfStatement BinaryOperation == MemberReference iAboutCommandPanel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutCommandPanel ClassCreator ReferenceType Panel = StatementExpression MethodInvocation iAboutCommandPanel Literal ""AboutCommandPanel"" setName StatementExpression MethodInvocation iAboutCommandPanel ClassCreator ReferenceType java ReferenceType awt ReferenceType FlowLayout setLayout StatementExpression MethodInvocation MethodInvocation MethodInvocation getAboutOkButton MethodInvocation MethodInvocation getName getAboutOkButton add getAboutCommandPanel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutCommandPanel MethodDeclaration /**
     * Return the AboutContactLabel property value.
     * @return java.awt.Label
     */ Modifier private ReferenceType Label getAboutContactLabel IfStatement BinaryOperation == MemberReference iAboutContactLabel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutContactLabel ClassCreator ReferenceType Label = StatementExpression MethodInvocation iAboutContactLabel Literal ""AboutContactLabel"" setName StatementExpression MethodInvocation iAboutContactLabel MemberReference java.awt.Label CENTER setAlignment StatementExpression MethodInvocation iAboutContactLabel BinaryOperation + Literal ""contact: wolf.siberski@tui.de or "" Literal ""christoph.wilhelms@tui.de"" setText CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutContactLabel MethodDeclaration /**
     * Return the AboutDevLabel property value.
     * @return java.awt.Label
     */ Modifier private ReferenceType Label getAboutDevLabel IfStatement BinaryOperation == MemberReference iAboutDevLabel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutDevLabel ClassCreator ReferenceType Label = StatementExpression MethodInvocation iAboutDevLabel Literal ""AboutDevLabel"" setName StatementExpression MethodInvocation iAboutDevLabel MemberReference java.awt.Label CENTER setAlignment StatementExpression MethodInvocation iAboutDevLabel Literal ""developed by Wolf Siberski & Christoph Wilhelms"" setText CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutDevLabel MethodDeclaration /**
     * Return the AboutDialog property value.
     * @return java.awt.Dialog
     */ Modifier private ReferenceType Dialog getAboutDialog IfStatement BinaryOperation == MemberReference iAboutDialog Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutDialog ClassCreator ReferenceType Dialog This = StatementExpression MethodInvocation iAboutDialog Literal ""AboutDialog"" setName StatementExpression MethodInvocation iAboutDialog Literal false setResizable StatementExpression MethodInvocation iAboutDialog ClassCreator ReferenceType java ReferenceType awt ReferenceType BorderLayout setLayout StatementExpression MethodInvocation iAboutDialog Literal 550 Literal 14 Literal 383 Literal 142 setBounds StatementExpression MethodInvocation iAboutDialog Literal true setModal StatementExpression MethodInvocation iAboutDialog Literal ""About..."" setTitle StatementExpression MethodInvocation MethodInvocation MethodInvocation getAboutDialogContentPanel Literal ""Center"" add getAboutDialog StatementExpression MethodInvocation iAboutDialog pack StatementExpression MethodInvocation MemberReference iAboutDialog centerDialog CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutDialog MethodDeclaration /**
     * Return the AboutDialogContentPanel property value.
     * @return java.awt.Panel
     */ Modifier private ReferenceType Panel getAboutDialogContentPanel IfStatement BinaryOperation == MemberReference iAboutDialogContentPanel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutDialogContentPanel ClassCreator ReferenceType Panel = StatementExpression MethodInvocation iAboutDialogContentPanel Literal ""AboutDialogContentPanel"" setName StatementExpression MethodInvocation iAboutDialogContentPanel ClassCreator ReferenceType java ReferenceType awt ReferenceType BorderLayout setLayout StatementExpression MethodInvocation MethodInvocation MethodInvocation getAboutCommandPanel Literal ""South"" add getAboutDialogContentPanel StatementExpression MethodInvocation MethodInvocation MethodInvocation getAboutInfoPanel Literal ""Center"" add getAboutDialogContentPanel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutDialogContentPanel MethodDeclaration /**
     * Return the AboutInfoPanel property value.
     * @return java.awt.Panel
     */ Modifier private ReferenceType Panel getAboutInfoPanel IfStatement BinaryOperation == MemberReference iAboutInfoPanel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutInfoPanel ClassCreator ReferenceType Panel = StatementExpression MethodInvocation iAboutInfoPanel Literal ""AboutInfoPanel"" setName StatementExpression MethodInvocation iAboutInfoPanel ClassCreator ReferenceType GridBagLayout setLayout LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsAboutTitleLabel ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsAboutTitleLabel gridx Literal 0 = StatementExpression Assignment MemberReference constraintsAboutTitleLabel gridy Literal 0 = StatementExpression Assignment MemberReference constraintsAboutTitleLabel fill MemberReference GridBagConstraints HORIZONTAL = StatementExpression Assignment MemberReference constraintsAboutTitleLabel weightx Literal 1.0 = StatementExpression Assignment MemberReference constraintsAboutTitleLabel weighty Literal 1.0 = StatementExpression Assignment MemberReference constraintsAboutTitleLabel insets ClassCreator ReferenceType Insets Literal 4 Literal 0 Literal 4 Literal 0 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getAboutTitleLabel MemberReference constraintsAboutTitleLabel add getAboutInfoPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsAboutDevLabel ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsAboutDevLabel gridx Literal 0 = StatementExpression Assignment MemberReference constraintsAboutDevLabel gridy Literal 1 = StatementExpression Assignment MemberReference constraintsAboutDevLabel fill MemberReference GridBagConstraints HORIZONTAL = StatementExpression Assignment MemberReference constraintsAboutDevLabel weightx Literal 1.0 = StatementExpression Assignment MemberReference constraintsAboutDevLabel insets ClassCreator ReferenceType Insets Literal 4 Literal 0 Literal 0 Literal 0 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getAboutDevLabel MemberReference constraintsAboutDevLabel add getAboutInfoPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsAboutContactLabel ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsAboutContactLabel gridx Literal 0 = StatementExpression Assignment MemberReference constraintsAboutContactLabel gridy Literal 2 = StatementExpression Assignment MemberReference constraintsAboutContactLabel fill MemberReference GridBagConstraints HORIZONTAL = StatementExpression Assignment MemberReference constraintsAboutContactLabel weightx Literal 1.0 = StatementExpression Assignment MemberReference constraintsAboutContactLabel insets ClassCreator ReferenceType Insets Literal 2 Literal 0 Literal 4 Literal 0 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getAboutContactLabel MemberReference constraintsAboutContactLabel add getAboutInfoPanel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutInfoPanel MethodDeclaration /**
     * Return the AboutMenuItem property value.
     * @return java.awt.MenuItem
     */ Modifier private ReferenceType MenuItem getAboutMenuItem IfStatement BinaryOperation == MemberReference iAboutMenuItem Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutMenuItem ClassCreator ReferenceType MenuItem = StatementExpression MethodInvocation iAboutMenuItem Literal ""About..."" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutMenuItem MethodDeclaration /**
     * Return the AboutOkButton property value.
     * @return java.awt.Button
     */ Modifier private ReferenceType Button getAboutOkButton IfStatement BinaryOperation == MemberReference iAboutOkButton Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutOkButton ClassCreator ReferenceType Button = StatementExpression MethodInvocation iAboutOkButton Literal ""AboutOkButton"" setName StatementExpression MethodInvocation iAboutOkButton Literal ""OK"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutOkButton MethodDeclaration /**
     * Return the AboutTitleLabel property value.
     * @return java.awt.Label
     */ Modifier private ReferenceType Label getAboutTitleLabel IfStatement BinaryOperation == MemberReference iAboutTitleLabel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAboutTitleLabel ClassCreator ReferenceType Label = StatementExpression MethodInvocation iAboutTitleLabel Literal ""AboutTitleLabel"" setName StatementExpression MethodInvocation iAboutTitleLabel ClassCreator ReferenceType Font Literal ""Arial"" Literal 1 Literal 12 setFont StatementExpression MethodInvocation iAboutTitleLabel MemberReference Label CENTER setAlignment StatementExpression MethodInvocation iAboutTitleLabel Literal ""Ant VisualAge for Java Tool-Integration"" setText CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAboutTitleLabel MethodDeclaration /**
     * Return the AntMakeMenuBar property value.
     * @return java.awt.MenuBar
     */ Modifier private ReferenceType MenuBar getAntMakeMenuBar IfStatement BinaryOperation == MemberReference iAntMakeMenuBar Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iAntMakeMenuBar ClassCreator ReferenceType MenuBar = StatementExpression MethodInvocation iAntMakeMenuBar MethodInvocation getFileMenu add StatementExpression MethodInvocation iAntMakeMenuBar MethodInvocation getHelpMenu add CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iAntMakeMenuBar MethodDeclaration /**
     * Return the BrowseButton property value.
     * @return Button
     */ Modifier private ReferenceType Button getBrowseButton IfStatement BinaryOperation == MemberReference iBrowseButton Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iBrowseButton ClassCreator ReferenceType Button = StatementExpression MethodInvocation iBrowseButton Literal ""BrowseButton"" setName StatementExpression MethodInvocation iBrowseButton Literal ""..."" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iBrowseButton MethodDeclaration /**
     * Return the BuildButton property value.
     * @return java.awt.Button
     */ Modifier private ReferenceType Button getBuildButton IfStatement BinaryOperation == MemberReference iBuildButton Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iBuildButton ClassCreator ReferenceType Button = StatementExpression MethodInvocation iBuildButton Literal ""BuildButton"" setName StatementExpression MethodInvocation iBuildButton Literal ""Execute"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iBuildButton MethodDeclaration /**
     * Return the BuildFileLabel property value.
     * @return java.awt.Label
     */ Modifier private ReferenceType Label getBuildFileLabel IfStatement BinaryOperation == MemberReference iBuildFileLabel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iBuildFileLabel ClassCreator ReferenceType Label = StatementExpression MethodInvocation iBuildFileLabel Literal ""BuildFileLabel"" setName StatementExpression MethodInvocation iBuildFileLabel Literal ""Ant-Buildfile:"" setText CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iBuildFileLabel MethodDeclaration /**
     * Return the BuildFileTextField property value.
     * @return java.awt.TextField
     */ Modifier private ReferenceType TextField getBuildFileTextField IfStatement BinaryOperation == MemberReference iBuildFileTextField Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iBuildFileTextField ClassCreator ReferenceType TextField = StatementExpression MethodInvocation iBuildFileTextField Literal ""BuildFileTextField"" setName StatementExpression MethodInvocation iBuildFileTextField MemberReference SystemColor textHighlightText setBackground CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iBuildFileTextField MethodDeclaration /**
     * Return the BuildInfo property value.
     * @return org.apache.tools.ant.taskdefs.optional.ide.VAJBuildInfo
     */ Modifier private ReferenceType VAJBuildInfo getBuildInfo ReturnStatement MemberReference iBuildInfo MethodDeclaration /**
     * Return the CloseButton property value.
     * @return java.awt.Button
     */ Modifier private ReferenceType Button getCloseButton IfStatement BinaryOperation == MemberReference iCloseButton Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iCloseButton ClassCreator ReferenceType Button = StatementExpression MethodInvocation iCloseButton Literal ""CloseButton"" setName StatementExpression MethodInvocation iCloseButton Literal ""Close"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iCloseButton MethodDeclaration /**
     * Return the CommandButtonPanel property value.
     * @return java.awt.Panel
     */ Modifier private ReferenceType Panel getCommandButtonPanel IfStatement BinaryOperation == MemberReference iCommandButtonPanel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iCommandButtonPanel ClassCreator ReferenceType Panel = StatementExpression MethodInvocation iCommandButtonPanel Literal ""CommandButtonPanel"" setName StatementExpression MethodInvocation iCommandButtonPanel MethodInvocation getCommandButtonPanelFlowLayout setLayout StatementExpression MethodInvocation iCommandButtonPanel MemberReference SystemColor control setBackground StatementExpression MethodInvocation iCommandButtonPanel MethodInvocation getReloadButton add StatementExpression MethodInvocation iCommandButtonPanel MethodInvocation getBuildButton add StatementExpression MethodInvocation iCommandButtonPanel MethodInvocation getStopButton add StatementExpression MethodInvocation iCommandButtonPanel MethodInvocation getCloseButton add CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iCommandButtonPanel MethodDeclaration /**
     * Return the CommandButtonPanelFlowLayout property value.
     * @return java.awt.FlowLayout
     */ Modifier private ReferenceType FlowLayout getCommandButtonPanelFlowLayout LocalVariableDeclaration ReferenceType FlowLayout VariableDeclarator iCommandButtonPanelFlowLayout Literal null TryStatement StatementExpression Assignment MemberReference iCommandButtonPanelFlowLayout ClassCreator ReferenceType FlowLayout = StatementExpression MethodInvocation iCommandButtonPanelFlowLayout MemberReference FlowLayout RIGHT setAlignment CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException ReturnStatement MemberReference iCommandButtonPanelFlowLayout MethodDeclaration /**
     * Return the ContentsPane property value.
     * @return java.awt.Panel
     */ Modifier private ReferenceType Panel getContentsPane IfStatement BinaryOperation == MemberReference iContentsPane Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iContentsPane ClassCreator ReferenceType Panel = StatementExpression MethodInvocation iContentsPane Literal ""ContentsPane"" setName StatementExpression MethodInvocation iContentsPane ClassCreator ReferenceType BorderLayout setLayout StatementExpression MethodInvocation MethodInvocation MethodInvocation getCommandButtonPanel Literal ""South"" add getContentsPane StatementExpression MethodInvocation MethodInvocation MethodInvocation getOptionenPanel Literal ""Center"" add getContentsPane CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iContentsPane MethodDeclaration /**
     * Return the FileDialog property value.
     * @return java.awt.FileDialog
     */ Modifier private ReferenceType FileDialog getFileDialog IfStatement BinaryOperation == MemberReference iFileDialog Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iFileDialog ClassCreator ReferenceType FileDialog This = StatementExpression MethodInvocation iFileDialog Literal ""FileDialog"" setName StatementExpression MethodInvocation iFileDialog Literal null setLayout StatementExpression MethodInvocation MemberReference iFileDialog centerDialog CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iFileDialog MethodDeclaration /**
     * Return the FileMenu property value.
     * @return java.awt.Menu
     */ Modifier private ReferenceType Menu getFileMenu IfStatement BinaryOperation == MemberReference iFileMenu Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iFileMenu ClassCreator ReferenceType Menu = StatementExpression MethodInvocation iFileMenu Literal ""File"" setLabel StatementExpression MethodInvocation iFileMenu MethodInvocation getSaveMenuItem add StatementExpression MethodInvocation iFileMenu MethodInvocation getMenuSeparator add StatementExpression MethodInvocation iFileMenu MethodInvocation getShowLogMenuItem add CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iFileMenu MethodDeclaration /**
     * Return the HelpMenu property value.
     * @return java.awt.Menu
     */ Modifier private ReferenceType Menu getHelpMenu IfStatement BinaryOperation == MemberReference iHelpMenu Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iHelpMenu ClassCreator ReferenceType Menu = StatementExpression MethodInvocation iHelpMenu Literal ""Help"" setLabel StatementExpression MethodInvocation iHelpMenu MethodInvocation getAboutMenuItem add CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iHelpMenu MethodDeclaration /**
     * Return the MenuSeparator1 property value.
     * @return java.awt.MenuItem
     */ Modifier private ReferenceType MenuItem getMenuSeparator IfStatement BinaryOperation == MemberReference iMenuSeparator Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMenuSeparator ClassCreator ReferenceType MenuItem = StatementExpression MethodInvocation iMenuSeparator Literal ""-"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMenuSeparator MethodDeclaration /**
     * Return the MessageClearLogButton property value.
     * @return java.awt.Button
     */ Modifier private ReferenceType Button getMessageClearLogButton IfStatement BinaryOperation == MemberReference iMessageClearLogButton Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMessageClearLogButton ClassCreator ReferenceType Button = StatementExpression MethodInvocation iMessageClearLogButton Literal ""MessageClearLogButton"" setName StatementExpression MethodInvocation iMessageClearLogButton Literal ""Clear Log"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMessageClearLogButton MethodDeclaration /**
     * Return the MessageCommandPanel property value.
     * @return java.awt.Panel
     */ Modifier private ReferenceType Panel getMessageCommandPanel IfStatement BinaryOperation == MemberReference iMessageCommandPanel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMessageCommandPanel ClassCreator ReferenceType Panel = StatementExpression MethodInvocation iMessageCommandPanel Literal ""MessageCommandPanel"" setName StatementExpression MethodInvocation iMessageCommandPanel ClassCreator ReferenceType FlowLayout setLayout StatementExpression MethodInvocation MethodInvocation MethodInvocation getMessageClearLogButton MethodInvocation MethodInvocation getName getMessageClearLogButton add getMessageCommandPanel StatementExpression MethodInvocation MethodInvocation MethodInvocation getMessageOkButton MethodInvocation MethodInvocation getName getMessageOkButton add getMessageCommandPanel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMessageCommandPanel MethodDeclaration /**
     * Return the MessageContentPanel property value.
     * @return java.awt.Panel
     */ Modifier private ReferenceType Panel getMessageContentPanel IfStatement BinaryOperation == MemberReference iMessageContentPanel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMessageContentPanel ClassCreator ReferenceType Panel = StatementExpression MethodInvocation iMessageContentPanel Literal ""MessageContentPanel"" setName StatementExpression MethodInvocation iMessageContentPanel ClassCreator ReferenceType BorderLayout setLayout StatementExpression MethodInvocation iMessageContentPanel MemberReference SystemColor control setBackground StatementExpression MethodInvocation MethodInvocation MethodInvocation getMessageTextArea Literal ""Center"" add getMessageContentPanel StatementExpression MethodInvocation MethodInvocation MethodInvocation getMessageCommandPanel Literal ""South"" add getMessageContentPanel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMessageContentPanel MethodDeclaration /**
     * Return the MessageFrame property value.
     * @return java.awt.Frame
     */ Modifier private ReferenceType Frame getMessageFrame IfStatement BinaryOperation == MemberReference iMessageFrame Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMessageFrame ClassCreator ReferenceType Frame = StatementExpression MethodInvocation iMessageFrame Literal ""MessageFrame"" setName StatementExpression MethodInvocation iMessageFrame ClassCreator ReferenceType BorderLayout setLayout StatementExpression MethodInvocation iMessageFrame Literal 0 Literal 0 Literal 750 Literal 250 setBounds StatementExpression MethodInvocation iMessageFrame Literal ""Message Log"" setTitle StatementExpression MethodInvocation iMessageFrame MethodInvocation getMessageContentPanel Literal ""Center"" add StatementExpression MethodInvocation iMessageFrame BinaryOperation - BinaryOperation / MethodInvocation Toolkit MethodInvocation getScreenSize MemberReference width getDefaultToolkit Literal 2 BinaryOperation / MethodInvocation iMessageFrame MemberReference width getSize Literal 2 BinaryOperation / MethodInvocation java.awt.Toolkit MethodInvocation getScreenSize MemberReference height getDefaultToolkit Literal 2 setLocation CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMessageFrame MethodDeclaration /**
     * Return the MessageOkButton property value.
     * @return java.awt.Button
     */ Modifier private ReferenceType Button getMessageOkButton IfStatement BinaryOperation == MemberReference iMessageOkButton Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMessageOkButton ClassCreator ReferenceType Button = StatementExpression MethodInvocation iMessageOkButton Literal ""MessageOkButton"" setName StatementExpression MethodInvocation iMessageOkButton Literal ""Close"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMessageOkButton MethodDeclaration /**
     * Return the MessageOutputLevelChoice property value.
     * @return java.awt.Choice
     */ Modifier private ReferenceType Choice getMessageOutputLevelChoice IfStatement BinaryOperation == MemberReference iMessageOutputLevelChoice Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMessageOutputLevelChoice ClassCreator ReferenceType Choice = StatementExpression MethodInvocation iMessageOutputLevelChoice Literal ""MessageOutputLevelChoice"" setName StatementExpression MethodInvocation iMessageOutputLevelChoice Literal ""Error"" add StatementExpression MethodInvocation iMessageOutputLevelChoice Literal ""Warning"" add StatementExpression MethodInvocation iMessageOutputLevelChoice Literal ""Info"" add StatementExpression MethodInvocation iMessageOutputLevelChoice Literal ""Verbose"" add StatementExpression MethodInvocation iMessageOutputLevelChoice Literal ""Debug"" add StatementExpression MethodInvocation iMessageOutputLevelChoice Literal 2 select CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMessageOutputLevelChoice MethodDeclaration /**
     * Return the MessageOutputLevelLabel property value.
     * @return java.awt.Label
     */ Modifier private ReferenceType Label getMessageOutputLevelLabel IfStatement BinaryOperation == MemberReference iMessageOutputLevelLabel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMessageOutputLevelLabel ClassCreator ReferenceType Label = StatementExpression MethodInvocation iMessageOutputLevelLabel Literal ""MessageOutputLevelLabel"" setName StatementExpression MethodInvocation iMessageOutputLevelLabel Literal ""Message Level:"" setText CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMessageOutputLevelLabel MethodDeclaration /**
     * Return the MessageTextArea property value.
     * @return java.awt.TextArea
     */ Modifier private ReferenceType TextArea getMessageTextArea IfStatement BinaryOperation == MemberReference iMessageTextArea Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iMessageTextArea ClassCreator ReferenceType TextArea = StatementExpression MethodInvocation iMessageTextArea Literal ""MessageTextArea"" setName StatementExpression MethodInvocation iMessageTextArea ClassCreator ReferenceType Font Literal ""monospaced"" Literal 0 Literal 12 setFont StatementExpression MethodInvocation iMessageTextArea Literal """" setText StatementExpression MethodInvocation iMessageTextArea Literal false setEditable StatementExpression MethodInvocation iMessageTextArea Literal true setEnabled CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iMessageTextArea MethodDeclaration /**
     * Return the Panel1 property value.
     * @return java.awt.Panel
     */ Modifier private ReferenceType Panel getOptionenPanel IfStatement BinaryOperation == MemberReference iOptionenPanel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iOptionenPanel ClassCreator ReferenceType Panel = StatementExpression MethodInvocation iOptionenPanel Literal ""OptionenPanel"" setName StatementExpression MethodInvocation iOptionenPanel ClassCreator ReferenceType GridBagLayout setLayout StatementExpression MethodInvocation iOptionenPanel MemberReference SystemColor control setBackground LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsProjectLabel ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsProjectLabel gridx Literal 0 = StatementExpression Assignment MemberReference constraintsProjectLabel gridy Literal 0 = StatementExpression Assignment MemberReference constraintsProjectLabel anchor MemberReference GridBagConstraints WEST = StatementExpression Assignment MemberReference constraintsProjectLabel insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getProjectLabel MemberReference constraintsProjectLabel add getOptionenPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsBuildFileLabel ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsBuildFileLabel gridx Literal 0 = StatementExpression Assignment MemberReference constraintsBuildFileLabel gridy Literal 1 = StatementExpression Assignment MemberReference constraintsBuildFileLabel anchor MemberReference GridBagConstraints WEST = StatementExpression Assignment MemberReference constraintsBuildFileLabel insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getBuildFileLabel MemberReference constraintsBuildFileLabel add getOptionenPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsTargetLabel ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsTargetLabel gridx Literal 0 = StatementExpression Assignment MemberReference constraintsTargetLabel gridy Literal 2 = StatementExpression Assignment MemberReference constraintsTargetLabel anchor MemberReference GridBagConstraints NORTHWEST = StatementExpression Assignment MemberReference constraintsTargetLabel insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getTargetLabel MemberReference constraintsTargetLabel add getOptionenPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsProjectText ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsProjectText gridx Literal 1 = StatementExpression Assignment MemberReference constraintsProjectText gridy Literal 0 = StatementExpression Assignment MemberReference constraintsProjectText gridwidth Literal 2 = StatementExpression Assignment MemberReference constraintsProjectText fill MemberReference GridBagConstraints HORIZONTAL = StatementExpression Assignment MemberReference constraintsProjectText anchor MemberReference GridBagConstraints WEST = StatementExpression Assignment MemberReference constraintsProjectText insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getProjectText MemberReference constraintsProjectText add getOptionenPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsBuildFileTextField ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsBuildFileTextField gridx Literal 1 = StatementExpression Assignment MemberReference constraintsBuildFileTextField gridy Literal 1 = StatementExpression Assignment MemberReference constraintsBuildFileTextField fill MemberReference GridBagConstraints HORIZONTAL = StatementExpression Assignment MemberReference constraintsBuildFileTextField anchor MemberReference GridBagConstraints WEST = StatementExpression Assignment MemberReference constraintsBuildFileTextField weightx Literal 1.0 = StatementExpression Assignment MemberReference constraintsBuildFileTextField insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getBuildFileTextField MemberReference constraintsBuildFileTextField add getOptionenPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsBrowseButton ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsBrowseButton gridx Literal 2 = StatementExpression Assignment MemberReference constraintsBrowseButton gridy Literal 1 = StatementExpression Assignment MemberReference constraintsBrowseButton insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getBrowseButton MemberReference constraintsBrowseButton add getOptionenPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsTargetList ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsTargetList gridx Literal 1 = StatementExpression Assignment MemberReference constraintsTargetList gridy Literal 2 = StatementExpression Assignment MemberReference constraintsTargetList gridheight Literal 2 = StatementExpression Assignment MemberReference constraintsTargetList fill MemberReference GridBagConstraints BOTH = StatementExpression Assignment MemberReference constraintsTargetList weightx Literal 1.0 = StatementExpression Assignment MemberReference constraintsTargetList weighty Literal 1.0 = StatementExpression Assignment MemberReference constraintsTargetList insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getTargetList MemberReference constraintsTargetList add getOptionenPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsMessageOutputLevelLabel ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsMessageOutputLevelLabel gridx Literal 0 = StatementExpression Assignment MemberReference constraintsMessageOutputLevelLabel gridy Literal 4 = StatementExpression Assignment MemberReference constraintsMessageOutputLevelLabel anchor MemberReference GridBagConstraints WEST = StatementExpression Assignment MemberReference constraintsMessageOutputLevelLabel insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getMessageOutputLevelLabel MemberReference constraintsMessageOutputLevelLabel add getOptionenPanel LocalVariableDeclaration ReferenceType GridBagConstraints VariableDeclarator constraintsMessageOutputLevelChoice ClassCreator ReferenceType GridBagConstraints StatementExpression Assignment MemberReference constraintsMessageOutputLevelChoice gridx Literal 1 = StatementExpression Assignment MemberReference constraintsMessageOutputLevelChoice gridy Literal 4 = StatementExpression Assignment MemberReference constraintsMessageOutputLevelChoice fill MemberReference GridBagConstraints HORIZONTAL = StatementExpression Assignment MemberReference constraintsMessageOutputLevelChoice anchor MemberReference GridBagConstraints WEST = StatementExpression Assignment MemberReference constraintsMessageOutputLevelChoice weightx Literal 1.0 = StatementExpression Assignment MemberReference constraintsMessageOutputLevelChoice insets ClassCreator ReferenceType Insets Literal 4 Literal 4 Literal 4 Literal 4 = StatementExpression MethodInvocation MethodInvocation MethodInvocation getMessageOutputLevelChoice MemberReference constraintsMessageOutputLevelChoice add getOptionenPanel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iOptionenPanel MethodDeclaration /**
     * Return the ProjectLabel property value.
     * @return java.awt.Label
     */ Modifier private ReferenceType Label getProjectLabel IfStatement BinaryOperation == MemberReference iProjectLabel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iProjectLabel ClassCreator ReferenceType Label = StatementExpression MethodInvocation iProjectLabel Literal ""ProjectLabel"" setName StatementExpression MethodInvocation iProjectLabel Literal ""Projectname:"" setText CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iProjectLabel MethodDeclaration /**
     * Return the ProjectText property value.
     * @return java.awt.Label
     */ Modifier private ReferenceType Label getProjectText IfStatement BinaryOperation == MemberReference iProjectText Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iProjectText ClassCreator ReferenceType Label = StatementExpression MethodInvocation iProjectText Literal ""ProjectText"" setName StatementExpression MethodInvocation iProjectText Literal "" "" setText CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iProjectText MethodDeclaration /**
     * Return the ReloadButton property value.
     * @return java.awt.Button
     */ Modifier private ReferenceType Button getReloadButton IfStatement BinaryOperation == MemberReference iReloadButton Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iReloadButton ClassCreator ReferenceType Button = StatementExpression MethodInvocation iReloadButton Literal ""ReloadButton"" setName StatementExpression MethodInvocation iReloadButton Literal ""(Re)Load"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iReloadButton MethodDeclaration /**
     * Return the SaveMenuItem property value.
     * @return java.awt.MenuItem
     */ Modifier private ReferenceType MenuItem getSaveMenuItem IfStatement BinaryOperation == MemberReference iSaveMenuItem Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iSaveMenuItem ClassCreator ReferenceType MenuItem = StatementExpression MethodInvocation iSaveMenuItem Literal ""Save BuildInfo To Repository"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iSaveMenuItem MethodDeclaration /**
     * Return the ShowLogMenuItem property value.
     * @return java.awt.MenuItem
     */ Modifier private ReferenceType MenuItem getShowLogMenuItem IfStatement BinaryOperation == MemberReference iShowLogMenuItem Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iShowLogMenuItem ClassCreator ReferenceType MenuItem = StatementExpression MethodInvocation iShowLogMenuItem Literal ""Log"" setLabel CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iShowLogMenuItem MethodDeclaration /**
     * Return the TargetLabel property value.
     * @return java.awt.Label
     */ Modifier private ReferenceType Label getTargetLabel IfStatement BinaryOperation == MemberReference iTargetLabel Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iTargetLabel ClassCreator ReferenceType Label = StatementExpression MethodInvocation iTargetLabel Literal ""TargetLabel"" setName StatementExpression MethodInvocation iTargetLabel Literal ""Target:"" setText StatementExpression MethodInvocation iTargetLabel Literal true setEnabled CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iTargetLabel MethodDeclaration /**
     * Return the TargetList property value.
     * @return java.awt.List
     */ Modifier private ReferenceType List getTargetList IfStatement BinaryOperation == MemberReference iTargetList Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iTargetList ClassCreator ReferenceType List = StatementExpression MethodInvocation iTargetList Literal ""TargetList"" setName StatementExpression MethodInvocation iTargetList Literal true setEnabled CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iTargetList MethodDeclaration /**
     * Called whenever the part throws an exception.
     * @param exception Throwable
     */ Modifier private handleException FormalParameter ReferenceType Throwable exception LocalVariableDeclaration ReferenceType String VariableDeclarator trace MethodInvocation StringUtils MemberReference exception getStackTrace StatementExpression MethodInvocation MethodInvocation BinaryOperation + BinaryOperation + MemberReference lineSeparator MemberReference lineSeparator MemberReference trace append getMessageTextArea StatementExpression MethodInvocation MethodInvocation show getMessageFrame MethodDeclaration /**
     * Initializes connections
     * @exception Exception The exception description.
     */ Modifier private initConnections Exception StatementExpression This MethodInvocation MemberReference iEventHandler addWindowListener StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getBrowseButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getCloseButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getBuildButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getStopButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getSaveMenuItem StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getAboutOkButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getAboutMenuItem StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getMessageOkButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getMessageClearLogButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getMessageOkButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getShowLogMenuItem StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addWindowListener getAboutDialog StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addWindowListener getMessageFrame StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addActionListener getReloadButton StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addItemListener getTargetList StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addItemListener getMessageOutputLevelChoice StatementExpression MethodInvocation MethodInvocation MemberReference iEventHandler addTextListener getBuildFileTextField StatementExpression MethodInvocation connectProjectNameToLabel StatementExpression MethodInvocation connectBuildFileNameToTextField MethodDeclaration /**
     * Initialize the class.
     */ Modifier private initialize TryStatement StatementExpression MethodInvocation Literal ""AntMake"" setName StatementExpression MethodInvocation MethodInvocation getAntMakeMenuBar setMenuBar StatementExpression MethodInvocation ClassCreator ReferenceType java ReferenceType awt ReferenceType BorderLayout setLayout StatementExpression MethodInvocation Literal 389 Literal 222 setSize StatementExpression MethodInvocation Literal ""Ant VisualAge for Java Tool-Integration"" setTitle StatementExpression MethodInvocation MethodInvocation getContentsPane Literal ""Center"" add StatementExpression MethodInvocation initConnections CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException StatementExpression MethodInvocation BinaryOperation - BinaryOperation / MethodInvocation Toolkit MethodInvocation getScreenSize MemberReference width getDefaultToolkit Literal 2 BinaryOperation / MethodInvocation MemberReference width getSize Literal 2 BinaryOperation - BinaryOperation / MethodInvocation java.awt.Toolkit MethodInvocation getScreenSize MemberReference height getDefaultToolkit Literal 2 MethodInvocation getSize setLocation IfStatement BinaryOperation || BinaryOperation == MethodInvocation MethodInvocation getItemCount getTargetList Literal 0 BinaryOperation < MethodInvocation MethodInvocation getSelectedIndex getTargetList Literal 0 BlockStatement StatementExpression MethodInvocation MethodInvocation Literal false setEnabled getBuildButton End MethodDeclaration /**
     * Saves the build-informations to repository
     */ Modifier private saveBuildInfo TryStatement StatementExpression MethodInvocation VAJAntTool MethodInvocation getBuildInfo saveBuildData CatchClause CatchClauseParameter Throwable exc StatementExpression MethodInvocation MemberReference exc handleException ReturnStatement MethodDeclaration /**
     * Set the BuildInfo to a new value.
     * @param newValue org.apache.tools.ant.taskdefs.optional.vaj.VAJBuildInfo
     */ Modifier private setBuildInfo FormalParameter ReferenceType VAJBuildInfo newValue IfStatement BinaryOperation != MemberReference iBuildInfo MemberReference newValue BlockStatement TryStatement IfStatement BinaryOperation != MemberReference iBuildInfo Literal null BlockStatement StatementExpression MethodInvocation iBuildInfo MemberReference iEventHandler removePropertyChangeListener End StatementExpression Assignment MemberReference iBuildInfo MemberReference newValue = IfStatement BinaryOperation != MemberReference iBuildInfo Literal null BlockStatement StatementExpression MethodInvocation iBuildInfo MemberReference iEventHandler addPropertyChangeListener End StatementExpression MethodInvocation connectProjectNameToLabel StatementExpression MethodInvocation connectBuildFileNameToTextField StatementExpression MethodInvocation MethodInvocation MethodInvocation iBuildInfo getOutputMessageLevel select getMessageOutputLevelChoice StatementExpression MethodInvocation fillList IfStatement BinaryOperation || BinaryOperation == MethodInvocation iBuildInfo getVAJProjectName Literal null MethodInvocation iBuildInfo getVAJProjectName BlockStatement StatementExpression MethodInvocation MethodInvocation Literal false setEnabled getSaveMenuItem End CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End FieldDeclaration Modifier private ReferenceType Button VariableDeclarator iStopButton Literal null MethodDeclaration /**
     * Return the StopButton property value.
     * @return java.awt.Button
     */ Modifier private ReferenceType Button getStopButton IfStatement BinaryOperation == MemberReference iStopButton Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference iStopButton ClassCreator ReferenceType Button = StatementExpression MethodInvocation iStopButton Literal ""StopButton"" setName StatementExpression MethodInvocation iStopButton Literal ""Stop"" setLabel StatementExpression MethodInvocation iStopButton Literal false setEnabled CatchClause CatchClauseParameter Throwable iExc StatementExpression MethodInvocation MemberReference iExc handleException End ReturnStatement MemberReference iStopButton ReferenceType Frame",0
487,487,,0
243,243,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.vss Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * Performs CheckOut commands to Microsoft Visual SourceSafe.
 *
 *
 * @ant.task name=""vsscheckout"" category=""scm""
 * @ant.attribute.group name=""vdl"" description=""Only one of version, date or label""
 */ MSVSSCHECKOUT MethodDeclaration /**
     * Builds a command line to execute ss.
     * @return     The constructed commandline.
     */ Modifier protected ReferenceType Commandline buildCmdLine LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline IfStatement BinaryOperation == MethodInvocation getVsspath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""vsspath attribute must be set!"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End StatementExpression MethodInvocation commandLine MethodInvocation getSSCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_CHECKOUT setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getVsspath setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getLocalpath setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getAutoresponse setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getRecursive setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getVersionDateLabel setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getLogin setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getFileTimeStamp setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getWritableFiles setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getGetLocalCopy setValue createArgument ReturnStatement MemberReference commandLine MethodDeclaration /**
     * Override the project working directory.
     *
     * @param   localPath   The path on disk.
     */ Modifier public setLocalpath FormalParameter ReferenceType Path localPath StatementExpression SuperMethodInvocation MethodInvocation localPath toString setInternalLocalPath MethodDeclaration /**
     * Check-out files recursively. Defaults to false.
     *
     * @param recursive  The boolean value for recursive.
     */ Modifier public setRecursive FormalParameter BasicType boolean recursive StatementExpression SuperMethodInvocation MemberReference recursive setInternalRecursive MethodDeclaration /**
     * Version to check-out.
     *
     * @param  version The version to check-out.
     *
     * @ant.attribute group=""vdl""
     */ Modifier public setVersion FormalParameter ReferenceType String version StatementExpression SuperMethodInvocation MemberReference version setInternalVersion MethodDeclaration /**
     * Date to check-out.
     *
     * @param  date The date to check-out.
     *
     * @ant.attribute group=""vdl""
     */ Modifier public setDate FormalParameter ReferenceType String date StatementExpression SuperMethodInvocation MemberReference date setInternalDate MethodDeclaration /**
     * Label to check-out.
     *
     * @param  label The label to check-out.
     *
     * @ant.attribute group=""vdl""
     */ Modifier public setLabel FormalParameter ReferenceType String label StatementExpression SuperMethodInvocation MemberReference label setInternalLabel MethodDeclaration /**
     * Autoresponce behaviour. Valid options are Y and N.
     *
     * @param response The auto response value.
     */ Modifier public setAutoresponse FormalParameter ReferenceType String response StatementExpression SuperMethodInvocation MemberReference response setInternalAutoResponse MethodDeclaration /**
     * Date and time stamp given to the local copy. Defaults to <code>current</code>.
     *
     * @param timestamp     The file time stamping behaviour.
     */ Modifier public setFileTimeStamp FormalParameter ReferenceType CurrentModUpdated timestamp StatementExpression SuperMethodInvocation MemberReference timestamp setInternalFileTimeStamp MethodDeclaration /**
     * Action taken when local files are writable. Defaults to <code>fail</code>.
     * <p>
     * Due to ss.exe returning with an exit code of '100' for both errors and when
     * a file has been skipped, <code>failonerror</code> is set to false when using
     * the <code>skip</code> option.
     * </p>
     *
     * @param files     The writable files behaviour
     */ Modifier public setWritableFiles FormalParameter ReferenceType WritableFiles files StatementExpression SuperMethodInvocation MemberReference files setInternalWritableFiles MethodDeclaration /**
     * Retrieve a local copy during a checkout. Defaults to true.
     *
     * @param get   The get local copy behaviour
     */ Modifier public setGetLocalCopy FormalParameter BasicType boolean get StatementExpression SuperMethodInvocation MemberReference get setInternalGetLocalCopy ReferenceType MSVSS",0
192,192,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import java.util.Stack Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.util.regexp.Regexp Import org.apache.tools.ant.util.regexp.RegexpFactory ClassDeclaration Modifier public /***
 * A regular expression datatype.  Keeps an instance of the
 * compiled expression for speed purposes.  This compiled
 * expression is lazily evaluated (it is compiled the first
 * time it is needed).  The syntax is the dependent on which
 * regular expression type you are using.  The system property
 * ""ant.regexp.regexpimpl"" will be the classname of the implementation
 * that will be used.
 *
 * <pre>
 * For jdk  &lt;= 1.3, there are two available implementations:
 *   org.apache.tools.ant.util.regexp.JakartaOroRegexp (the default)
 *        Based on the jakarta-oro package
 *
 *   org.apache.tools.ant.util.regexp.JakartaRegexpRegexp
 *        Based on the jakarta-regexp package
 *
 * For jdk &gt;= 1.4 an additional implementation is available:
 *   org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp
 *        Based on the jdk 1.4 built in regular expression package.
 * </pre>
 *
 * <pre>
 *   &lt;regexp [ [id=""id""] pattern=""expression"" | refid=""id"" ]
 *   /&gt;
 * </pre>
 *
 * @see org.apache.oro.text.regex.Perl5Compiler
 * @see org.apache.regexp.RE
 * @see java.util.regex.Pattern
 *
 * @see org.apache.tools.ant.util.regexp.Regexp
 *
 * @ant.datatype name=""regexp""
 */ RegularExpression FieldDeclaration /** Name of this data type */ Modifier public final static ReferenceType String VariableDeclarator DATA_TYPE_NAME Literal ""regexp"" FieldDeclaration Modifier private final static ReferenceType RegexpFactory VariableDeclarator factory ClassCreator ReferenceType RegexpFactory FieldDeclaration Modifier private ReferenceType Regexp VariableDeclarator regexp ConstructorDeclaration Modifier public RegularExpression StatementExpression Assignment This MemberReference regexp MethodInvocation factory newRegexp = MethodDeclaration Modifier public setPattern FormalParameter ReferenceType String pattern StatementExpression This MemberReference regexp MethodInvocation MemberReference pattern setPattern MethodDeclaration /***
     * Gets the pattern string for this RegularExpression in the
     * given project.
     */ Modifier public ReferenceType String getPattern FormalParameter ReferenceType Project p IfStatement MethodInvocation isReference BlockStatement ReturnStatement MethodInvocation MethodInvocation MemberReference p getPattern MemberReference p getRef End ReturnStatement MethodInvocation regexp getPattern MethodDeclaration Modifier public ReferenceType Regexp getRegexp FormalParameter ReferenceType Project p IfStatement MethodInvocation isReference BlockStatement ReturnStatement MethodInvocation MethodInvocation MemberReference p getRegexp MemberReference p getRef End ReturnStatement This MemberReference regexp MethodDeclaration /***
     * Get the RegularExpression this reference refers to in
     * the given project.  Check for circular references too
     */ Modifier public ReferenceType RegularExpression getRef FormalParameter ReferenceType Project p IfStatement MethodInvocation ! isChecked BlockStatement LocalVariableDeclaration ReferenceType Stack VariableDeclarator stk ClassCreator ReferenceType Stack StatementExpression MethodInvocation stk This push StatementExpression MethodInvocation MemberReference stk MemberReference p dieOnCircularReference End LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation MethodInvocation MemberReference p getReferencedObject getRefid IfStatement BinaryOperation instanceof MemberReference o ReferenceType RegularExpression BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + MethodInvocation MethodInvocation getRefId getRefid Literal "" doesn\'t denote a "" MemberReference DATA_TYPE_NAME ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg BlockStatement ReturnStatement Cast ReferenceType RegularExpression MemberReference o End ReferenceType DataType",0
64,64,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.unix Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.taskdefs.condition.Os Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.FileSet ClassDeclaration Modifier public abstract /**
 * @since Ant 1.6
 *
 * @ant.task category=""filesystem""
 */ AbstractAccessTask ConstructorDeclaration Modifier public /**
     * Chmod task for setting file and directory permissions.
     */ AbstractAccessTask StatementExpression SuperMethodInvocation Literal true setParallel StatementExpression SuperMethodInvocation Literal true setSkipEmptyFilesets MethodDeclaration /**
     * Set the file which should have its access attributes modified.
     */ Modifier public setFile FormalParameter ReferenceType File src LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs ClassCreator ReferenceType FileSet StatementExpression MethodInvocation fs MemberReference src setFile StatementExpression MethodInvocation MemberReference fs addFileset MethodDeclaration /**
     * Prevent the user from specifying a different command.
     *
     * @ant.attribute ignore=""true""
     * @param cmdl A user supplied command line that we won't accept.
     */ Modifier public setCommand FormalParameter ReferenceType Commandline cmdl ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MethodInvocation getTaskType Literal "" doesn\'t support the command attribute"" MethodInvocation getLocation MethodDeclaration /**
     * Prevent the skipping of empty filesets
     *
     * @ant.attribute ignore=""true""
     * @param skip A user supplied boolean we won't accept.
     */ Modifier public setSkipEmptyFilesets FormalParameter BasicType boolean skip ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + MethodInvocation getTaskType Literal "" doesn\'t support the "" Literal ""skipemptyfileset attribute"" MethodInvocation getLocation MethodDeclaration /**
     * Prevent the use of the addsourcefile atribute.
     *
     * @ant.attribute ignore=""true""
     * @param b A user supplied boolean we won't accept.
     */ Modifier public setAddsourcefile FormalParameter BasicType boolean b ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MethodInvocation getTaskType Literal "" doesn\'t support the addsourcefile attribute"" MethodInvocation getLocation MethodDeclaration /**
     * Automatically approve Unix OS's.
     */ Modifier protected BasicType boolean isValidOs ReturnStatement BinaryOperation && MethodInvocation Os Literal ""unix"" isFamily SuperMethodInvocation isValidOs ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType ExecuteOn",0
613,613,,1
41,41,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.IOException Import java.io.OutputStream Import org.apache.tools.ant.Task ClassDeclaration Modifier public /**
 * Redirects text written to a stream thru the standard
 * ant logging mechanism. This class is useful for integrating
 * with tools that write to System.out and System.err. For example,
 * the following will cause all text written to System.out to be
 * logged with ""info"" priority:
 * <pre>System.setOut(new PrintStream(new TaskOutputStream(project, Project.MSG_INFO)));</pre>
 *
 * <p><strong>As of Ant 1.2, this class is considered to be dead code
 * by the Ant developers and is unmaintained.  Don't use
 * it.</strong></p>
 *
 * @deprecated use LogOutputStream instead.
 */ TaskOutputStream FieldDeclaration Modifier private ReferenceType Task VariableDeclarator task FieldDeclaration Modifier private ReferenceType StringBuffer VariableDeclarator line FieldDeclaration Modifier private BasicType int VariableDeclarator msgOutputLevel ConstructorDeclaration /**
     * Constructs a new JavacOutputStream with the given project
     * as the output source for messages.
     */ TaskOutputStream FormalParameter ReferenceType Task task FormalParameter BasicType int msgOutputLevel StatementExpression MethodInvocation System.err BinaryOperation + Literal ""As of Ant 1.2 released in October 2000, the "" Literal ""TaskOutputStream class"" println StatementExpression MethodInvocation System.err BinaryOperation + Literal ""is considered to be dead code by the Ant "" Literal ""developers and is unmaintained."" println StatementExpression MethodInvocation System.err Literal ""Don\'t use it!"" println StatementExpression Assignment This MemberReference task MemberReference task = StatementExpression Assignment This MemberReference msgOutputLevel MemberReference msgOutputLevel = StatementExpression Assignment MemberReference line ClassCreator ReferenceType StringBuffer = MethodDeclaration /**
     * Write a character to the output stream. This method looks
     * to make sure that there isn't an error being reported and
     * will flush each line of input out to the project's log stream.
     */ Modifier public write FormalParameter BasicType int c IOException LocalVariableDeclaration BasicType char VariableDeclarator cc Cast BasicType char MemberReference c IfStatement BinaryOperation || BinaryOperation == MemberReference cc Literal '\r' BinaryOperation == MemberReference cc Literal '\n' BlockStatement IfStatement BinaryOperation > MethodInvocation line length Literal 0 BlockStatement StatementExpression MethodInvocation processLine End BlockStatement StatementExpression MethodInvocation line MemberReference cc append End MethodDeclaration /**
     * Processes a line of input and determines if an error occurred.
     */ Modifier private processLine LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation line toString StatementExpression MethodInvocation task MemberReference s MemberReference msgOutputLevel log StatementExpression Assignment MemberReference line ClassCreator ReferenceType StringBuffer = ReferenceType OutputStream",0
481,481,,0
18,18,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.io.File ClassDeclaration Modifier public /**
 * Maps dotted package name matches to a directory name.
 * This is the inverse of the package mapper.
 * This is useful for matching XML formatter results against their JUnit test
 * cases.
 * <pre>
 * &lt;mapper classname=""org.apache.tools.ant.util.UnPackageNameMapper""
 *         from=""${test.data.dir}/TEST-*Test.xml"" to=""*Test.java""&gt;
 * </pre>
 *
 *
 */ UnPackageNameMapper MethodDeclaration /**
     *  Returns the part of the given string that matches the * in the
     *  &quot;from&quot; pattern replacing dots with file separators
     *
     *@param  name  Source filename
     *@return       Replaced variable part
     */ Modifier protected ReferenceType String extractVariablePart FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType String VariableDeclarator var MethodInvocation name MemberReference prefixLength BinaryOperation - MethodInvocation name length MemberReference postfixLength substring ReturnStatement MethodInvocation var Literal '.' MemberReference File separatorChar replace ReferenceType GlobPatternMapper",0
588,588,,1
177,177,"CompilationUnit PackageDeclaration org.apache.tools.ant.util ClassDeclaration Modifier public /**
 * Implementation of FileNameMapper that always returns the source
 * file name without any leading directory information.
 *
 * <p>This is the default FileNameMapper for the copy and move
 * tasks if the flatten attribute has been set.</p>
 *
 */ FlatFileNameMapper MethodDeclaration /**
     * Ignored.
     */ Modifier public setFrom FormalParameter ReferenceType String from MethodDeclaration /**
     * Ignored.
     */ Modifier public setTo FormalParameter ReferenceType String to MethodDeclaration /**
     * Returns an one-element array containing the source file name
     * without any leading directory information.
     */ Modifier public ReferenceType String mapFileName FormalParameter ReferenceType String sourceFileName ReturnStatement ArrayCreator ReferenceType String ArrayInitializer ClassCreator MethodInvocation getName ReferenceType java ReferenceType io ReferenceType File MemberReference sourceFileName ReferenceType FileNameMapper",0
618,618,,0
71,71,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.junit Import java.io.BufferedOutputStream Import java.io.File Import java.io.FileOutputStream Import java.io.IOException Import java.io.OutputStream Import java.io.OutputStreamWriter Import java.io.PrintWriter Import java.util.Enumeration Import java.util.Vector Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.DocumentBuilderFactory Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.util.DOMElementWriter Import org.apache.tools.ant.util.StringUtils Import org.w3c.dom.Document Import org.w3c.dom.Element Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * Aggregates all &lt;junit&gt; XML formatter testsuite data under
 * a specific directory and transforms the results via XSLT.
 * It is not particulary clean but
 * should be helpful while I am thinking about another technique.
 *
 * <p> The main problem is due to the fact that a JVM can be forked for a testcase
 * thus making it impossible to aggregate all testcases since the listener is
 * (obviously) in the forked JVM. A solution could be to write a
 * TestListener that will receive events from the TestRunner via sockets. This
 * is IMHO the simplest way to do it to avoid this file hacking thing.
 *
 *
 * @ant.task name=""junitreport"" category=""testing""
 */ XMLResultAggregator FieldDeclaration /** the list of all filesets, that should contains the xml to aggregate */ Modifier protected ReferenceType Vector VariableDeclarator filesets ClassCreator ReferenceType Vector FieldDeclaration /** the name of the result file */ Modifier protected ReferenceType String VariableDeclarator toFile FieldDeclaration /** the directory to write the file to */ Modifier protected ReferenceType File VariableDeclarator toDir FieldDeclaration Modifier protected ReferenceType Vector VariableDeclarator transformers ClassCreator ReferenceType Vector FieldDeclaration /** The default directory: <tt>&#046;</tt>. It is resolved from the project directory */ Modifier public final static ReferenceType String VariableDeclarator DEFAULT_DIR Literal ""."" FieldDeclaration /** the default file name: <tt>TESTS-TestSuites.xml</tt> */ Modifier public final static ReferenceType String VariableDeclarator DEFAULT_FILENAME Literal ""TESTS-TestSuites.xml"" MethodDeclaration /**
     * Generate a report based on the document created by the merge.
     */ Modifier public ReferenceType AggregateTransformer createReport LocalVariableDeclaration ReferenceType AggregateTransformer VariableDeclarator transformer ClassCreator ReferenceType AggregateTransformer This StatementExpression MethodInvocation transformers MemberReference transformer addElement ReturnStatement MemberReference transformer MethodDeclaration /**
     * Set the name of the aggregegated results file. It must be relative
     * from the <tt>todir</tt> attribute. If not set it will use {@link #DEFAULT_FILENAME}
     * @param  value   the name of the file.
     * @see #setTodir(File)
     */ Modifier public setTofile FormalParameter ReferenceType String value StatementExpression Assignment MemberReference toFile MemberReference value = MethodDeclaration /**
     * Set the destination directory where the results should be written. If not
     * set if will use {@link #DEFAULT_DIR}. When given a relative directory
     * it will resolve it from the project directory.
     * @param value    the directory where to write the results, absolute or
     * relative.
     */ Modifier public setTodir FormalParameter ReferenceType File value StatementExpression Assignment MemberReference toDir MemberReference value = MethodDeclaration /**
     * Add a new fileset containing the XML results to aggregate
     * @param    fs      the new fileset of xml results.
     */ Modifier public addFileSet FormalParameter ReferenceType FileSet fs StatementExpression MethodInvocation filesets MemberReference fs addElement MethodDeclaration /**
     * Aggregate all testsuites into a single document and write it to the
     * specified directory and file.
     * @throws  BuildException  thrown if there is a serious error while writing
     *          the document.
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Element VariableDeclarator rootElement MethodInvocation createDocument LocalVariableDeclaration ReferenceType File VariableDeclarator destFile MethodInvocation getDestinationFile TryStatement StatementExpression MethodInvocation MethodInvocation rootElement getOwnerDocument MemberReference destFile writeDOMTree CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Unable to write test aggregate to '"" MemberReference destFile Literal ""'"" MemberReference e LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation transformers elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType AggregateTransformer VariableDeclarator transformer Cast ReferenceType AggregateTransformer MethodInvocation e nextElement StatementExpression MethodInvocation transformer MethodInvocation rootElement getOwnerDocument setXmlDocument StatementExpression MethodInvocation transformer transform End MethodDeclaration /**
     * Get the full destination file where to write the result. It is made of
     * the <tt>todir</tt> and <tt>tofile</tt> attributes.
     * @return the destination file where should be written the result file.
     */ Modifier protected ReferenceType File getDestinationFile IfStatement BinaryOperation == MemberReference toFile Literal null BlockStatement StatementExpression Assignment MemberReference toFile MemberReference DEFAULT_FILENAME = End IfStatement BinaryOperation == MemberReference toDir Literal null BlockStatement StatementExpression Assignment MemberReference toDir MethodInvocation MethodInvocation MemberReference DEFAULT_DIR resolveFile getProject = End ReturnStatement ClassCreator ReferenceType File MemberReference toDir MemberReference toFile MethodDeclaration /**
     * Get all <code>.xml</code> files in the fileset.
     *
     * @return all files in the fileset that end with a '.xml'.
     */ Modifier protected ReferenceType File getFiles LocalVariableDeclaration ReferenceType Vector VariableDeclarator v ClassCreator ReferenceType Vector LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation filesets size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MethodInvocation filesets MemberReference i elementAt LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation fs MethodInvocation getProject getDirectoryScanner StatementExpression MethodInvocation ds scan LocalVariableDeclaration ReferenceType String VariableDeclarator f MethodInvocation ds getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference f length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator pathname MemberReference ArraySelector MemberReference j f IfStatement MethodInvocation pathname Literal "".xml"" endsWith BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MethodInvocation ds getBasedir MemberReference pathname StatementExpression Assignment MemberReference file MethodInvocation MethodInvocation MethodInvocation file getPath resolveFile getProject = StatementExpression MethodInvocation v MemberReference file addElement End End End LocalVariableDeclaration ReferenceType File VariableDeclarator files ArrayCreator ReferenceType File MethodInvocation v size StatementExpression MethodInvocation v MemberReference files copyInto ReturnStatement MemberReference files MethodDeclaration /**
     * Write the DOM tree to a file.
     * @param doc the XML document to dump to disk.
     * @param file the filename to write the document to. Should obviouslly be a .xml file.
     * @throws IOException thrown if there is an error while writing the content.
     */ Modifier protected writeDOMTree FormalParameter ReferenceType Document doc FormalParameter ReferenceType File file IOException LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out Literal null LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator wri Literal null TryStatement StatementExpression Assignment MemberReference out ClassCreator ReferenceType BufferedOutputStream ClassCreator ReferenceType FileOutputStream MemberReference file = StatementExpression Assignment MemberReference wri ClassCreator ReferenceType PrintWriter ClassCreator ReferenceType OutputStreamWriter MemberReference out Literal ""UTF8"" = StatementExpression MethodInvocation wri Literal ""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>\n"" write StatementExpression ClassCreator MethodInvocation MethodInvocation doc getDocumentElement MemberReference wri Literal 0 Literal ""  "" write ReferenceType DOMElementWriter StatementExpression MethodInvocation wri flush IfStatement MethodInvocation wri checkError BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""Error while writing DOM content"" End IfStatement BinaryOperation != MemberReference wri Literal null BlockStatement StatementExpression MethodInvocation wri close StatementExpression Assignment MemberReference out Literal null = End IfStatement BinaryOperation != MemberReference out Literal null BlockStatement StatementExpression MethodInvocation out close End MethodDeclaration /**
     * <p> Create a DOM tree.
     * Has 'testsuites' as firstchild and aggregates all
     * testsuite results that exists in the base directory.
     * @return  the root element of DOM tree that aggregates all testsuites.
     */ Modifier protected ReferenceType Element createDocument LocalVariableDeclaration ReferenceType DocumentBuilder VariableDeclarator builder MethodInvocation getDocumentBuilder LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation builder newDocument LocalVariableDeclaration ReferenceType Element VariableDeclarator rootElement MethodInvocation doc MemberReference TESTSUITES createElement StatementExpression MethodInvocation doc MemberReference rootElement appendChild LocalVariableDeclaration ReferenceType File VariableDeclarator files MethodInvocation getFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement TryStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Parsing file: '"" MemberReference ArraySelector MemberReference i files Literal ""'"" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType Document VariableDeclarator testsuiteDoc MethodInvocation builder BinaryOperation + Literal ""file:///"" MemberReference ArraySelector MemberReference i MethodInvocation getAbsolutePath files parse LocalVariableDeclaration ReferenceType Element VariableDeclarator elem MethodInvocation testsuiteDoc getDocumentElement IfStatement MethodInvocation TESTSUITE MethodInvocation elem getNodeName equals BlockStatement StatementExpression MethodInvocation MemberReference rootElement MemberReference elem addTestSuite BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""the file "" MemberReference ArraySelector MemberReference i files Literal "" is not a valid testsuite XML document"" MemberReference Project MSG_WARN log End CatchClause CatchClauseParameter SAXException e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The file "" MemberReference ArraySelector MemberReference i files Literal "" is not a valid XML document. "" Literal ""It is possibly corrupted."" MemberReference Project MSG_WARN log StatementExpression MethodInvocation MethodInvocation StringUtils MemberReference e getStackTrace MemberReference Project MSG_DEBUG log CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Error while accessing file "" MemberReference ArraySelector MemberReference i files Literal "": "" MethodInvocation e getMessage MemberReference Project MSG_ERR log End ReturnStatement MemberReference rootElement MethodDeclaration /**
     * <p> Add a new testsuite node to the document.
     * The main difference is that it
     * split the previous fully qualified name into a package and a name.
     * <p> For example: <tt>org.apache.Whatever</tt> will be split into
     * <tt>org.apache</tt> and <tt>Whatever</tt>.
     * @param root the root element to which the <tt>testsuite</tt> node should
     *        be appended.
     * @param testsuite the element to append to the given root. It will slightly
     *        modify the original node to change the name attribute and add
     *        a package one.
     */ Modifier protected addTestSuite FormalParameter ReferenceType Element root FormalParameter ReferenceType Element testsuite LocalVariableDeclaration ReferenceType String VariableDeclarator fullclassname MethodInvocation testsuite MemberReference ATTR_NAME getAttribute LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation fullclassname Literal '.' lastIndexOf LocalVariableDeclaration ReferenceType String VariableDeclarator pkgName TernaryExpression BinaryOperation == MemberReference pos Literal - 1 Literal """" MethodInvocation fullclassname Literal 0 MemberReference pos substring LocalVariableDeclaration ReferenceType String VariableDeclarator classname TernaryExpression BinaryOperation == MemberReference pos Literal - 1 MemberReference fullclassname MethodInvocation fullclassname BinaryOperation + MemberReference pos Literal 1 substring LocalVariableDeclaration ReferenceType Element VariableDeclarator copy Cast ReferenceType Element MethodInvocation DOMUtil MemberReference root MemberReference testsuite importNode StatementExpression MethodInvocation copy MemberReference ATTR_NAME MemberReference classname setAttribute StatementExpression MethodInvocation copy MemberReference ATTR_PACKAGE MemberReference pkgName setAttribute MethodDeclaration /**
     * Create a new document builder. Will issue an <tt>ExceptionInitializerError</tt>
     * if something is going wrong. It is fatal anyway.
     * @todo factorize this somewhere else. It is duplicated code.
     * @return a new document builder to create a DOM
     */ Modifier private static ReferenceType DocumentBuilder getDocumentBuilder TryStatement ReturnStatement MethodInvocation DocumentBuilderFactory MethodInvocation newDocumentBuilder newInstance CatchClause CatchClauseParameter Exception exc ThrowStatement ClassCreator ReferenceType ExceptionInInitializerError MemberReference exc ReferenceType Task ReferenceType XMLConstants",0
353,353,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.dotnet Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Task Import org.apache.tools.ant.Project Import org.apache.tools.ant.util.FileUtils Import java.io.File ClassDeclaration Modifier public /**
 * Task to take a .NET or Mono -generated managed executable and turn it
 * into ILASM assembly code. Useful when converting imported typelibs into
 * assembler before patching and recompiling, as one has to do when doing
 * advanced typelib work.
 * <p>
 * As well as generating the named output file, the ildasm program
 * will also generate resource files <code>Icons.resources</code>
 * <code>Message.resources</code> and a .res file whose filename stub is derived
 * from the source in ways to obscure to determine.
 * There is no way to control whether or not these files are created, or where they are created
 * (they are created in the current directory; their names come from inside the
 * executable and may be those used by the original developer). This task
 * creates the resources in the directory specified by <code>resourceDir</code> if
 * set, else in the same directory as the <code>destFile</code>.
 *
 * <p>
 * This task requires the .NET SDK installed and ildasm on the path.
 * To disassemble using alternate CLR systems, set the executable attribute
 * to the name/path of the alternate implementation -one that must
 * support all the classic ildasm commands.
 *
 * <p>
 * Dependency logic: the task executes the command if the output file is missing
 * or older than the source file. It does not take into account changes
 * in the options of the task, or timestamp differences in resource files.
 * When the underlying ildasm executable fails for some reason, it leaves the
 * .il file in place with some error message. To prevent this from confusing
 * the dependency logic, the file specified by the <code>dest</code>
 * attribute is <i>always</i> deleted after an unsuccessful build.
 * @ant.task category=""dotnet""
 */ Ildasm FieldDeclaration /**
     * source file (mandatory)
     */ Modifier private ReferenceType File VariableDeclarator sourceFile FieldDeclaration /**
     * dest file (mandatory)
     */ Modifier private ReferenceType File VariableDeclarator destFile FieldDeclaration /**
     * progress bar switch
     */ Modifier private BasicType boolean VariableDeclarator progressBar Literal false FieldDeclaration /**
     * what is our encoding
     */ Modifier private ReferenceType String VariableDeclarator encoding FieldDeclaration /**
     * /bytes flag for byte markup
     */ Modifier private BasicType boolean VariableDeclarator bytes Literal false FieldDeclaration /**
     * line numbers? /linenum
     */ Modifier private BasicType boolean VariableDeclarator linenumbers Literal false FieldDeclaration /**
     * /raweh flag for raw exception handling
     */ Modifier private BasicType boolean VariableDeclarator rawExceptionHandling Literal false FieldDeclaration /**
     * show the source; /source
     */ Modifier private BasicType boolean VariableDeclarator showSource Literal false FieldDeclaration /**
     * /quoteallnames to quote all names
     */ Modifier private BasicType boolean VariableDeclarator quoteallnames Literal false FieldDeclaration /**
     * /header for header information
     */ Modifier private BasicType boolean VariableDeclarator header Literal false FieldDeclaration /**
     * when false, sets the /noil attribute
     * to suppress assembly info
     */ Modifier private BasicType boolean VariableDeclarator assembler Literal true FieldDeclaration /**
     * include metadata
     * /tokens
     */ Modifier private BasicType boolean VariableDeclarator metadata Literal false FieldDeclaration /**
     * what visibility do we want.
     *
     */ Modifier private ReferenceType String VariableDeclarator visibility FieldDeclaration /**
     * specific item to disassemble
     */ Modifier private ReferenceType String VariableDeclarator item FieldDeclaration /**
     * override for the executable
     */ Modifier private ReferenceType String VariableDeclarator executable Literal ""ildasm"" FieldDeclaration /**
     *  name of the directory for resources to be created. We cannot control
     * their names, but we can say where they get created. If not set, the
     * directory of the dest file is used
     */ Modifier private ReferenceType File VariableDeclarator resourceDir MethodDeclaration /**
     * Set the name of the directory for resources to be created. We cannot control
     * their names, but we can say where they get created. If not set, the
     * directory of the dest file is used
     */ Modifier public setResourceDir FormalParameter ReferenceType File resourceDir StatementExpression Assignment This MemberReference resourceDir MemberReference resourceDir = MethodDeclaration /**
     * override the name of the executable (normally ildasm) or set
     * its full path. Do not set a relative path, as the ugly hacks
     * needed to create resource files in the dest directory
     * force us to change to this directory before running the application.
     * i.e use &lt;property location&gt to create an absolute path from a
     * relative one before setting this value.
     * @param executable
     */ Modifier public setExecutable FormalParameter ReferenceType String executable StatementExpression Assignment This MemberReference executable MemberReference executable = MethodDeclaration /**
     * Select the output encoding: ascii, utf8 or unicode
     * @param encoding
     */ Modifier public setEncoding FormalParameter ReferenceType EncodingTypes encoding StatementExpression Assignment This MemberReference encoding MethodInvocation encoding getValue = MethodDeclaration /**
     * enable (default) or disable assembly language in the output
     * @param assembler
     */ Modifier public setAssembler FormalParameter BasicType boolean assembler StatementExpression Assignment This MemberReference assembler MemberReference assembler = MethodDeclaration /**
     * enable or disable (default) the original bytes as comments
     * @param bytes
     */ Modifier public setBytes FormalParameter BasicType boolean bytes StatementExpression Assignment This MemberReference bytes MemberReference bytes = MethodDeclaration /**
     * the output file (required)
     * @param destFile
     */ Modifier public setDestFile FormalParameter ReferenceType File destFile StatementExpression Assignment This MemberReference destFile MemberReference destFile = MethodDeclaration /**
     * include header information; default false.
     * @param header
     */ Modifier public setHeader FormalParameter BasicType boolean header StatementExpression Assignment This MemberReference header MemberReference header = MethodDeclaration /**
     * name a single item to decode; a class or a method
     * e.g item=""Myclass::method"" or item=""namespace1::namespace2::Myclass:method(void(int32))
     * @param item
     */ Modifier public setItem FormalParameter ReferenceType String item StatementExpression Assignment This MemberReference item MemberReference item = MethodDeclaration /**
     * include line number information; default=false
     * @param linenumbers
     */ Modifier public setLinenumbers FormalParameter BasicType boolean linenumbers StatementExpression Assignment This MemberReference linenumbers MemberReference linenumbers = MethodDeclaration /**
     * include metadata information
     * @param metadata
     */ Modifier public setMetadata FormalParameter BasicType boolean metadata StatementExpression Assignment This MemberReference metadata MemberReference metadata = MethodDeclaration /**
     * show a graphical progress bar in a window during the process; off by default
     * @param progressBar
     */ Modifier public setProgressBar FormalParameter BasicType boolean progressBar StatementExpression Assignment This MemberReference progressBar MemberReference progressBar = MethodDeclaration /**
     * quote all names.
     * @param quoteallnames
     */ Modifier public setQuoteallnames FormalParameter BasicType boolean quoteallnames StatementExpression Assignment This MemberReference quoteallnames MemberReference quoteallnames = MethodDeclaration /**
     * enable raw exception handling (default = false)
     * @param rawExceptionHandling
     */ Modifier public setRawExceptionHandling FormalParameter BasicType boolean rawExceptionHandling StatementExpression Assignment This MemberReference rawExceptionHandling MemberReference rawExceptionHandling = MethodDeclaration /**
     * include the source as comments (default=false)
     */ Modifier public setShowSource FormalParameter BasicType boolean showSource StatementExpression Assignment This MemberReference showSource MemberReference showSource = MethodDeclaration /**
     * the file to disassemble -required
     * @param sourceFile
     */ Modifier public setSourceFile FormalParameter ReferenceType File sourceFile StatementExpression Assignment This MemberReference sourceFile MemberReference sourceFile = MethodDeclaration /**
     * alternate name for sourceFile
     * @param sourceFile
     */ Modifier public setSrcFile FormalParameter ReferenceType File sourceFile StatementExpression MethodInvocation MemberReference sourceFile setSourceFile MethodDeclaration /**
     * This method sets the visibility options. It chooses one or more of the following, with + signs to
     * concatenate them:
     * <pre>
     * pub : Public
     * pri : Private
     * fam : Family
     * asm : Assembly
     * faa : Family and Assembly
     * foa : Family or Assembly
     * psc : Private Scope
     *</pre>
     * e.g. visibility=""pub+pri"".
     * Family means <code>protected</code> in C#;
     * @param visibility
     */ Modifier public setVisibility FormalParameter ReferenceType String visibility StatementExpression Assignment This MemberReference visibility MemberReference visibility = MethodDeclaration /**
     *  verify that source and dest are ok
     */ Modifier private validate IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MemberReference sourceFile Literal null MethodInvocation ! sourceFile exists MethodInvocation ! sourceFile isFile BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""invalid source"" End IfStatement BinaryOperation || BinaryOperation == MemberReference destFile Literal null MethodInvocation destFile isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""invalid dest"" End IfStatement BinaryOperation && BinaryOperation != MemberReference resourceDir Literal null BinaryOperation || MethodInvocation ! resourceDir exists MethodInvocation ! resourceDir isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""invalid resource directory"" End MethodDeclaration /**
     * Test for disassembly being needed; use existence and granularity
     * correct date stamps
     * @return true iff a rebuild is required.
     */ Modifier private BasicType boolean isDisassemblyNeeded IfStatement MethodInvocation ! destFile exists BlockStatement StatementExpression MethodInvocation Literal ""Destination file does not exist: a build is required"" MemberReference Project MSG_VERBOSE log ReturnStatement Literal true End LocalVariableDeclaration BasicType long VariableDeclarator sourceTime MethodInvocation sourceFile lastModified LocalVariableDeclaration BasicType long VariableDeclarator destTime MethodInvocation destFile lastModified IfStatement BinaryOperation > MemberReference sourceTime BinaryOperation + MemberReference destTime MethodInvocation FileUtils MethodInvocation getFileTimestampGranularity newFileUtils BlockStatement StatementExpression MethodInvocation Literal ""Source file is newer than the dest file: a rebuild is required"" MemberReference Project MSG_VERBOSE log ReturnStatement Literal true BlockStatement StatementExpression MethodInvocation Literal ""The .il file is up to date"" MemberReference Project MSG_VERBOSE log ReturnStatement Literal false End MethodDeclaration /**
     * do the work
     * @throws BuildException
     */ Modifier public execute BuildException StatementExpression MethodInvocation validate IfStatement MethodInvocation ! isDisassemblyNeeded BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType NetCommand VariableDeclarator command ClassCreator ReferenceType NetCommand This Literal ""ildasm"" MemberReference executable StatementExpression MethodInvocation command Literal true setFailOnError StatementExpression MethodInvocation command Literal ""/text"" addArgument StatementExpression MethodInvocation command BinaryOperation + Literal ""/out="" MethodInvocation destFile toString addArgument IfStatement MemberReference ! progressBar BlockStatement StatementExpression MethodInvocation command Literal ""/nobar"" addArgument End IfStatement MemberReference linenumbers BlockStatement StatementExpression MethodInvocation command Literal ""/linenum"" addArgument End IfStatement MemberReference showSource BlockStatement StatementExpression MethodInvocation command Literal ""/source"" addArgument End IfStatement MemberReference quoteallnames BlockStatement StatementExpression MethodInvocation command Literal ""/quoteallnames"" addArgument End IfStatement MemberReference header BlockStatement StatementExpression MethodInvocation command Literal ""/header"" addArgument End IfStatement MemberReference ! assembler BlockStatement StatementExpression MethodInvocation command Literal ""/noil"" addArgument End IfStatement MemberReference metadata BlockStatement StatementExpression MethodInvocation command Literal ""/tokens"" addArgument End StatementExpression MethodInvocation command Literal ""/item:"" MemberReference item addArgument IfStatement MemberReference rawExceptionHandling BlockStatement StatementExpression MethodInvocation command Literal ""/raweh"" addArgument End StatementExpression MethodInvocation command MethodInvocation EncodingTypes MemberReference encoding getEncodingOption addArgument IfStatement MemberReference bytes BlockStatement StatementExpression MethodInvocation command Literal ""/bytes"" addArgument End StatementExpression MethodInvocation command Literal ""/vis:"" MemberReference visibility addArgument StatementExpression MethodInvocation command MethodInvocation sourceFile getAbsolutePath addArgument LocalVariableDeclaration ReferenceType File VariableDeclarator execDir MemberReference resourceDir IfStatement BinaryOperation == MemberReference execDir Literal null BlockStatement StatementExpression Assignment MemberReference execDir MethodInvocation destFile getParentFile = End StatementExpression MethodInvocation command MemberReference execDir setDirectory TryStatement StatementExpression MethodInvocation command runCommand CatchClause CatchClauseParameter BuildException e IfStatement MethodInvocation destFile exists BlockStatement StatementExpression MethodInvocation Literal ""Deleting destination file as it may be corrupt"" log StatementExpression MethodInvocation destFile delete End ThrowStatement MemberReference e ClassDeclaration Modifier public static /**
     * encoding options; the default is ascii
     */ EncodingTypes FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator UNICODE Literal ""unicode"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator UTF8 Literal ""utf8"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator ASCII Literal ""ascii"" MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer MemberReference ASCII MemberReference UTF8 MemberReference UNICODE MethodDeclaration /**
         * This method maps from an encoding enum to an encoding option.
         * @param enumValue
         * @return The encoding option indicated by the enum value.
         */ Modifier public static ReferenceType String getEncodingOption FormalParameter ReferenceType String enumValue IfStatement MethodInvocation UNICODE MemberReference enumValue equals BlockStatement ReturnStatement Literal ""/unicode"" End IfStatement MethodInvocation UTF8 MemberReference enumValue equals BlockStatement ReturnStatement Literal ""/utf8"" End ReturnStatement Literal null ReferenceType EnumeratedAttribute ClassDeclaration Modifier public static /**
     * visibility options for decoding
     */ VisibilityOptions MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""pub"" Literal ""pri"" Literal ""fam"" Literal ""asm"" Literal ""faa"" Literal ""foa"" Literal ""psc"" ReferenceType EnumeratedAttribute ReferenceType Task",0
403,403,,1
240,240,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional Import java.io.BufferedInputStream Import java.io.BufferedOutputStream Import java.io.File Import java.io.FileInputStream Import java.io.FileOutputStream Import java.io.IOException Import java.text.DateFormat Import java.text.DecimalFormat Import java.text.ParseException Import java.text.SimpleDateFormat Import java.util.Calendar Import java.util.Date Import java.util.Enumeration Import java.util.Hashtable Import java.util.Properties Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.EnumeratedAttribute ClassDeclaration Modifier public /**
 *Modifies settings in a property file.
 *
 * <p>
 *The following is an example of its usage:
 *    <ul>&lt;target name=""setState""&gt;<br>
 *    <ul>&lt;property<br>
 *        <ul>name=""header""<br>
 *        value=""##Generated file - do not modify!""/&gt;<br>
 *      &lt;propertyfile file=""apropfile.properties"" comment=""${header}""&gt;<br>
 *        &lt;entry key=""product.version.major"" type=""int""  value=""5""/&gt;<br>
 *        &lt;entry key=""product.version.minor"" type=""int""  value=""0""/&gt;<br>
 *        &lt;entry key=""product.build.major""   type=""int""  value=""0"" /&gt;<br>
 *        &lt;entry key=""product.build.minor""   type=""int""  operation=""+"" /&gt;<br>
 *        &lt;entry key=""product.build.date""    type=""date"" value=""now"" /&gt;<br>
 *        &lt;entry key=""intSet"" type=""int"" operation=""="" value=""681""/&gt;<br>
 *        &lt;entry key=""intDec"" type=""int"" operation=""-""/&gt;<br>
 *        &lt;entry key=""StringEquals"" type=""string"" value=""testValue""/&gt;<br>
 *     &lt;/propertyfile&gt;<br></ul>
 *   &lt;/target&gt;</ul><p>
 *
 *The &lt;propertyfile&gt; task must have:<br>
 *    <ul><li>file</li></ul>
 *Other parameters are:<br>
 *    <ul><li>comment, key, operation, type and value (the final four being
 *            eliminated shortly)</li></ul>
 *
 *The &lt;entry&gt; task must have:<br>
 *    <ul><li>key</li></ul>
 *Other parameters are:<br>
 *    <ul><li>operation</li>
 *        <li>type</li>
 *        <li>value</li>
 *        <li>default</li>
 *        <li>unit</li>
 *    </ul>
 *
 *If type is unspecified, it defaults to string
 *
 *Parameter values:<br>
 *    <ul><li>operation:</li>
 *        <ul><li>""="" (set -- default)</li>
 *        <li>""-"" (dec)</li>
 *        <li>""+"" (inc)</li>
 *
 *    <li>type:</li>
 *        <ul><li>""int""</li>
 *        <li>""date""</li>
 *        <li>""string""</li></ul></ul>
 *
 *    <li>value:</li>
 *      <ul><li>holds the default value, if the property
 *              was not found in property file</li>
 *          <li>""now"" In case of type ""date"", the
 *              value ""now"" will be replaced by the current
 *              date/time and used even if a valid date was
 *              found in the property file.</li></ul>
 *
 *
 *String property types can only use the ""="" operation.
 *Int property types can only use the ""="", ""-"" or ""+"" operations.<p>
 *
 *The message property is used for the property file header, with ""\\"" being
 *a newline delimiter character.
 *
 */ PropertyFile FieldDeclaration Modifier private ReferenceType String VariableDeclarator comment FieldDeclaration Modifier private ReferenceType Properties VariableDeclarator properties FieldDeclaration Modifier private ReferenceType File VariableDeclarator propertyfile FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator entries ClassCreator ReferenceType Vector MethodDeclaration Modifier public execute BuildException StatementExpression MethodInvocation checkParameters StatementExpression MethodInvocation readFile StatementExpression MethodInvocation executeOperation StatementExpression MethodInvocation writeFile MethodDeclaration Modifier public ReferenceType Entry createEntry LocalVariableDeclaration ReferenceType Entry VariableDeclarator e ClassCreator ReferenceType Entry StatementExpression MethodInvocation entries MemberReference e addElement ReturnStatement MemberReference e MethodDeclaration Modifier private executeOperation BuildException ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation entries elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Entry VariableDeclarator entry Cast ReferenceType Entry MethodInvocation e nextElement StatementExpression MethodInvocation entry MemberReference properties executeOn End MethodDeclaration Modifier private readFile BuildException StatementExpression Assignment MemberReference properties ClassCreator ReferenceType Properties = TryStatement IfStatement MethodInvocation propertyfile exists BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Updating property file: "" MethodInvocation propertyfile getAbsolutePath log LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fis Literal null TryStatement StatementExpression Assignment MemberReference fis ClassCreator ReferenceType FileInputStream MemberReference propertyfile = LocalVariableDeclaration ReferenceType BufferedInputStream VariableDeclarator bis ClassCreator ReferenceType BufferedInputStream MemberReference fis StatementExpression MethodInvocation properties MemberReference bis load IfStatement BinaryOperation != MemberReference fis Literal null BlockStatement StatementExpression MethodInvocation fis close End BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Creating new property file: "" MethodInvocation propertyfile getAbsolutePath log LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator out Literal null TryStatement StatementExpression Assignment MemberReference out ClassCreator ReferenceType FileOutputStream MethodInvocation propertyfile getAbsolutePath = StatementExpression MethodInvocation out flush IfStatement BinaryOperation != MemberReference out Literal null BlockStatement StatementExpression MethodInvocation out close End End CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException MethodInvocation ioe toString MethodDeclaration Modifier private checkParameters BuildException IfStatement MethodInvocation ! MemberReference propertyfile checkParam BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""file token must not be null."" MethodInvocation getLocation End MethodDeclaration /**
     * Location of the property file to be edited; required.
     */ Modifier public setFile FormalParameter ReferenceType File file StatementExpression Assignment MemberReference propertyfile MemberReference file = MethodDeclaration /**
     * optional header comment for the file
     */ Modifier public setComment FormalParameter ReferenceType String hdr StatementExpression Assignment MemberReference comment MemberReference hdr = MethodDeclaration Modifier private writeFile BuildException LocalVariableDeclaration ReferenceType BufferedOutputStream VariableDeclarator bos Literal null TryStatement StatementExpression Assignment MemberReference bos ClassCreator ReferenceType BufferedOutputStream ClassCreator ReferenceType FileOutputStream MemberReference propertyfile = StatementExpression MethodInvocation properties MemberReference bos MemberReference comment store CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException MemberReference ioe MethodInvocation getLocation IfStatement BinaryOperation != MemberReference bos Literal null BlockStatement TryStatement StatementExpression MethodInvocation bos close CatchClause CatchClauseParameter IOException ioex End MethodDeclaration Modifier private BasicType boolean checkParam FormalParameter ReferenceType File param ReturnStatement BinaryOperation == MemberReference param Literal null ClassDeclaration Modifier public static /**
     * Instance of this class represents nested elements of
     * a task propertyfile.
     */ Entry FieldDeclaration Modifier private final static BasicType int VariableDeclarator DEFAULT_INT_VALUE Literal 0 FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DEFAULT_DATE_VALUE Literal ""now"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DEFAULT_STRING_VALUE Literal """" FieldDeclaration Modifier private ReferenceType String VariableDeclarator key Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator type MemberReference Type STRING_TYPE FieldDeclaration Modifier private BasicType int VariableDeclarator operation MemberReference Operation EQUALS_OPER FieldDeclaration Modifier private ReferenceType String VariableDeclarator value Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator defaultValue Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator newValue Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator pattern Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator field MemberReference Calendar DATE MethodDeclaration /**
         * Name of the property name/value pair
         */ Modifier public setKey FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference key MemberReference value = MethodDeclaration /**
         * Value to set (=), to add (+) or subtract (-)
         */ Modifier public setValue FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
         * operation to apply.
         * &quot;+&quot; or &quot;=&quot;
         *(default) for all datatypes; &quot;-&quot; for date and int only)\.
         */ Modifier public setOperation FormalParameter ReferenceType Operation value StatementExpression Assignment This MemberReference operation MethodInvocation Operation MethodInvocation value getValue toOperation = MethodDeclaration /**
         * Regard the value as : int, date or string (default)
         */ Modifier public setType FormalParameter ReferenceType Type value StatementExpression Assignment This MemberReference type MethodInvocation Type MethodInvocation value getValue toType = MethodDeclaration /**
         * Initial value to set for a property if it is not
         * already defined in the property file.
         * For type date, an additional keyword is allowed: &quot;now&quot;
         */ Modifier public setDefault FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference defaultValue MemberReference value = MethodDeclaration /**
         * For int and date type only. If present, Values will
         * be parsed and formatted accordingly.
         */ Modifier public setPattern FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference pattern MemberReference value = MethodDeclaration /**
         * The unit of the value to be applied to date +/- operations.
         *            Valid Values are:
         *            <ul>
         *               <li>millisecond</li>
         *               <li>second</li>
         *               <li>minute</li>
         *               <li>hour</li>
         *               <li>day (default)</li>
         *               <li>week</li>
         *               <li>month</li>
         *               <li>year</li>
         *            </ul>
         *            This only applies to date types using a +/- operation.
         * @since Ant 1.5
         */ Modifier public setUnit FormalParameter ReferenceType PropertyFile ReferenceType Unit unit StatementExpression Assignment MemberReference field MethodInvocation unit getCalendarField = MethodDeclaration Modifier protected executeOn FormalParameter ReferenceType Properties props BuildException StatementExpression MethodInvocation checkParameters LocalVariableDeclaration ReferenceType String VariableDeclarator oldValue Cast ReferenceType String MethodInvocation props MemberReference key get TryStatement IfStatement BinaryOperation == MemberReference type MemberReference Type INTEGER_TYPE BlockStatement StatementExpression MethodInvocation MemberReference oldValue executeInteger IfStatement BinaryOperation == MemberReference type MemberReference Type DATE_TYPE BlockStatement StatementExpression MethodInvocation MemberReference oldValue executeDate IfStatement BinaryOperation == MemberReference type MemberReference Type STRING_TYPE BlockStatement StatementExpression MethodInvocation MemberReference oldValue executeString BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Unknown operation type: "" MemberReference type End End End CatchClause CatchClauseParameter NullPointerException npe StatementExpression MethodInvocation npe printStackTrace IfStatement BinaryOperation == MemberReference newValue Literal null BlockStatement StatementExpression Assignment MemberReference newValue Literal """" = End StatementExpression MethodInvocation props MemberReference key MemberReference newValue put MethodDeclaration /**
        * Handle operations for type <code>date</code>.
        *
        * @param oldValue the current value read from the property file or
        *                 <code>null</code> if the <code>key</code> was
        *                 not contained in the property file.
        */ Modifier private executeDate FormalParameter ReferenceType String oldValue BuildException LocalVariableDeclaration ReferenceType Calendar VariableDeclarator currentValue MethodInvocation Calendar getInstance IfStatement BinaryOperation == MemberReference pattern Literal null BlockStatement StatementExpression Assignment MemberReference pattern Literal ""yyyy/MM/dd HH:mm"" = End LocalVariableDeclaration ReferenceType DateFormat VariableDeclarator fmt ClassCreator ReferenceType SimpleDateFormat MemberReference pattern LocalVariableDeclaration ReferenceType String VariableDeclarator currentStringValue MethodInvocation MemberReference oldValue getCurrentValue IfStatement BinaryOperation == MemberReference currentStringValue Literal null BlockStatement StatementExpression Assignment MemberReference currentStringValue MemberReference DEFAULT_DATE_VALUE = End IfStatement Literal MethodInvocation MemberReference currentStringValue equals ""now"" BlockStatement StatementExpression MethodInvocation currentValue ClassCreator ReferenceType Date setTime BlockStatement TryStatement StatementExpression MethodInvocation currentValue MethodInvocation fmt MemberReference currentStringValue parse setTime CatchClause CatchClauseParameter ParseException pe End IfStatement BinaryOperation != MemberReference operation MemberReference Operation EQUALS_OPER BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator offset Literal 0 TryStatement StatementExpression Assignment MemberReference offset MethodInvocation Integer MemberReference value parseInt = IfStatement BinaryOperation == MemberReference operation MemberReference Operation DECREMENT_OPER BlockStatement StatementExpression Assignment MemberReference offset BinaryOperation * Literal - 1 MemberReference offset = End CatchClause CatchClauseParameter NumberFormatException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Value not an integer on "" MemberReference key StatementExpression MethodInvocation currentValue MemberReference field MemberReference offset add End StatementExpression Assignment MemberReference newValue MethodInvocation fmt MethodInvocation currentValue getTime format = MethodDeclaration /**
        * Handle operations for type <code>int</code>.
        *
        * @param oldValue the current value read from the property file or
        *                 <code>null</code> if the <code>key</code> was
        *                 not contained in the property file.
        */ Modifier private executeInteger FormalParameter ReferenceType String oldValue BuildException LocalVariableDeclaration BasicType int VariableDeclarator currentValue MemberReference DEFAULT_INT_VALUE LocalVariableDeclaration BasicType int VariableDeclarator newValue MemberReference DEFAULT_INT_VALUE LocalVariableDeclaration ReferenceType DecimalFormat VariableDeclarator fmt TernaryExpression BinaryOperation != MemberReference pattern Literal null ClassCreator ReferenceType DecimalFormat MemberReference pattern ClassCreator ReferenceType DecimalFormat TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator curval MethodInvocation MemberReference oldValue getCurrentValue IfStatement BinaryOperation != MemberReference curval Literal null BlockStatement StatementExpression Assignment MemberReference currentValue MethodInvocation fmt MethodInvocation intValue MemberReference curval parse = BlockStatement StatementExpression Assignment MemberReference currentValue Literal 0 = End CatchClause CatchClauseParameter NumberFormatException nfe CatchClause CatchClauseParameter ParseException pe IfStatement BinaryOperation == MemberReference operation MemberReference Operation EQUALS_OPER BlockStatement StatementExpression Assignment MemberReference newValue MemberReference currentValue = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator operationValue Literal 1 IfStatement BinaryOperation != MemberReference value Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference operationValue MethodInvocation fmt MethodInvocation intValue MemberReference value parse = CatchClause CatchClauseParameter NumberFormatException nfe CatchClause CatchClauseParameter ParseException pe End IfStatement BinaryOperation == MemberReference operation MemberReference Operation INCREMENT_OPER BlockStatement StatementExpression Assignment MemberReference newValue BinaryOperation + MemberReference currentValue MemberReference operationValue = IfStatement BinaryOperation == MemberReference operation MemberReference Operation DECREMENT_OPER BlockStatement StatementExpression Assignment MemberReference newValue BinaryOperation - MemberReference currentValue MemberReference operationValue = End End End StatementExpression Assignment This MemberReference newValue MethodInvocation fmt MemberReference newValue format = MethodDeclaration /**
        * Handle operations for type <code>string</code>.
        *
        * @param oldValue the current value read from the property file or
        *                 <code>null</code> if the <code>key</code> was
        *                 not contained in the property file.
        */ Modifier private executeString FormalParameter ReferenceType String oldValue BuildException LocalVariableDeclaration ReferenceType String VariableDeclarator newValue MemberReference DEFAULT_STRING_VALUE LocalVariableDeclaration ReferenceType String VariableDeclarator currentValue MethodInvocation MemberReference oldValue getCurrentValue IfStatement BinaryOperation == MemberReference currentValue Literal null BlockStatement StatementExpression Assignment MemberReference currentValue MemberReference DEFAULT_STRING_VALUE = End IfStatement BinaryOperation == MemberReference operation MemberReference Operation EQUALS_OPER BlockStatement StatementExpression Assignment MemberReference newValue MemberReference currentValue = IfStatement BinaryOperation == MemberReference operation MemberReference Operation INCREMENT_OPER BlockStatement StatementExpression Assignment MemberReference newValue BinaryOperation + MemberReference currentValue MemberReference value = End End StatementExpression Assignment This MemberReference newValue MemberReference newValue = MethodDeclaration /**
         * Check if parameter combinations can be supported
         * @todo make sure the 'unit' attribute is only specified on date
         *      fields
         */ Modifier private checkParameters BuildException IfStatement BinaryOperation && BinaryOperation == MemberReference type MemberReference Type STRING_TYPE BinaryOperation == MemberReference operation MemberReference Operation DECREMENT_OPER BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""- is not supported for string "" Literal ""properties (key:"" MemberReference key Literal "")"" End IfStatement BinaryOperation && BinaryOperation == MemberReference value Literal null BinaryOperation == MemberReference defaultValue Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\""value\"" and/or \""default\"" "" Literal ""attribute must be specified (key:"" MemberReference key Literal "")"" End IfStatement BinaryOperation == MemberReference key Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""key is mandatory"" End IfStatement BinaryOperation && BinaryOperation == MemberReference type MemberReference Type STRING_TYPE BinaryOperation != MemberReference pattern Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""pattern is not supported for string "" Literal ""properties (key:"" MemberReference key Literal "")"" End MethodDeclaration Modifier private ReferenceType String getCurrentValue FormalParameter ReferenceType String oldValue LocalVariableDeclaration ReferenceType String VariableDeclarator ret Literal null IfStatement BinaryOperation == MemberReference operation MemberReference Operation EQUALS_OPER BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference value Literal null BinaryOperation == MemberReference defaultValue Literal null BlockStatement StatementExpression Assignment MemberReference ret MemberReference value = End IfStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference value Literal null BinaryOperation != MemberReference defaultValue Literal null BinaryOperation != MemberReference oldValue Literal null BlockStatement StatementExpression Assignment MemberReference ret MemberReference oldValue = End IfStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference value Literal null BinaryOperation != MemberReference defaultValue Literal null BinaryOperation == MemberReference oldValue Literal null BlockStatement StatementExpression Assignment MemberReference ret MemberReference defaultValue = End IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference value Literal null BinaryOperation != MemberReference defaultValue Literal null BinaryOperation != MemberReference oldValue Literal null BlockStatement StatementExpression Assignment MemberReference ret MemberReference value = End IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference value Literal null BinaryOperation != MemberReference defaultValue Literal null BinaryOperation == MemberReference oldValue Literal null BlockStatement StatementExpression Assignment MemberReference ret MemberReference defaultValue = End BlockStatement StatementExpression Assignment MemberReference ret TernaryExpression BinaryOperation == MemberReference oldValue Literal null MemberReference defaultValue MemberReference oldValue = End ReturnStatement MemberReference ret ClassDeclaration Modifier public static /**
         * Enumerated attribute with the values ""+"", ""-"", ""=""
         */ Operation FieldDeclaration Modifier public final static BasicType int VariableDeclarator INCREMENT_OPER Literal 0 FieldDeclaration Modifier public final static BasicType int VariableDeclarator DECREMENT_OPER Literal 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator EQUALS_OPER Literal 2 MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""+"" Literal ""-"" Literal ""="" MethodDeclaration Modifier public static BasicType int toOperation FormalParameter ReferenceType String oper IfStatement Literal MethodInvocation MemberReference oper equals ""+"" BlockStatement ReturnStatement MemberReference INCREMENT_OPER IfStatement Literal MethodInvocation MemberReference oper equals ""-"" BlockStatement ReturnStatement MemberReference DECREMENT_OPER End End ReturnStatement MemberReference EQUALS_OPER ReferenceType EnumeratedAttribute ClassDeclaration Modifier public static /**
         * Enumerated attribute with the values ""int"", ""date"" and ""string"".
         */ Type FieldDeclaration Modifier public final static BasicType int VariableDeclarator INTEGER_TYPE Literal 0 FieldDeclaration Modifier public final static BasicType int VariableDeclarator DATE_TYPE Literal 1 FieldDeclaration Modifier public final static BasicType int VariableDeclarator STRING_TYPE Literal 2 MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""int"" Literal ""date"" Literal ""string"" MethodDeclaration Modifier public static BasicType int toType FormalParameter ReferenceType String type IfStatement Literal MethodInvocation MemberReference type equals ""int"" BlockStatement ReturnStatement MemberReference INTEGER_TYPE IfStatement Literal MethodInvocation MemberReference type equals ""date"" BlockStatement ReturnStatement MemberReference DATE_TYPE End End ReturnStatement MemberReference STRING_TYPE ReferenceType EnumeratedAttribute ClassDeclaration Modifier public static /**
     * Borrowed from Tstamp
     * @todo share all this time stuff across many tasks as a datetime datatype
     * @since Ant 1.5
     */ Unit FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MILLISECOND Literal ""millisecond"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator SECOND Literal ""second"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MINUTE Literal ""minute"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator HOUR Literal ""hour"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DAY Literal ""day"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator WEEK Literal ""week"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MONTH Literal ""month"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator YEAR Literal ""year"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator UNITS ArrayInitializer MemberReference MILLISECOND MemberReference SECOND MemberReference MINUTE MemberReference HOUR MemberReference DAY MemberReference WEEK MemberReference MONTH MemberReference YEAR FieldDeclaration Modifier private ReferenceType Hashtable VariableDeclarator calendarFields ClassCreator ReferenceType Hashtable ConstructorDeclaration Modifier public Unit StatementExpression MethodInvocation calendarFields MemberReference MILLISECOND ClassCreator ReferenceType Integer MemberReference Calendar MILLISECOND put StatementExpression MethodInvocation calendarFields MemberReference SECOND ClassCreator ReferenceType Integer MemberReference Calendar SECOND put StatementExpression MethodInvocation calendarFields MemberReference MINUTE ClassCreator ReferenceType Integer MemberReference Calendar MINUTE put StatementExpression MethodInvocation calendarFields MemberReference HOUR ClassCreator ReferenceType Integer MemberReference Calendar HOUR_OF_DAY put StatementExpression MethodInvocation calendarFields MemberReference DAY ClassCreator ReferenceType Integer MemberReference Calendar DATE put StatementExpression MethodInvocation calendarFields MemberReference WEEK ClassCreator ReferenceType Integer MemberReference Calendar WEEK_OF_YEAR put StatementExpression MethodInvocation calendarFields MemberReference MONTH ClassCreator ReferenceType Integer MemberReference Calendar MONTH put StatementExpression MethodInvocation calendarFields MemberReference YEAR ClassCreator ReferenceType Integer MemberReference Calendar YEAR put MethodDeclaration Modifier public BasicType int getCalendarField LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation MethodInvocation toLowerCase getValue LocalVariableDeclaration ReferenceType Integer VariableDeclarator i Cast ReferenceType Integer MethodInvocation calendarFields MemberReference key get ReturnStatement MethodInvocation i intValue MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement MemberReference UNITS ReferenceType EnumeratedAttribute ReferenceType Task",1
127,127,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors.modifiedselector Import java.util.Comparator ClassDeclaration Modifier public /**
 * Simple implementation of Comparator for use in CacheSelector.
 * compare() returns '0' (should not be selected) if both parameter
 * are equal otherwise '1' (should be selected).
 *
 * @version 2003-09-13
 * @since  Ant 1.6
 */ EqualComparator MethodDeclaration /**
     * Implements Comparator.compare().
     * @param o1 the first object
     * @param o2 the second object
     * @return 0, if both are equal, otherwise 1
     */ Modifier public BasicType int compare FormalParameter ReferenceType Object o1 FormalParameter ReferenceType Object o2 IfStatement BinaryOperation == MemberReference o1 Literal null BlockStatement IfStatement BinaryOperation == MemberReference o2 Literal null BlockStatement ReturnStatement Literal 1 BlockStatement ReturnStatement Literal 0 End BlockStatement ReturnStatement TernaryExpression MethodInvocation o1 MemberReference o2 equals Literal 0 Literal 1 End MethodDeclaration /**
     * Override Object.toString().
     * @return information about this comparator
     */ Modifier public ReferenceType String toString ReturnStatement Literal ""EqualComparator"" ReferenceType Comparator",1
479,479,,0
283,283,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.cvslib Import java.io.PrintWriter Import java.text.SimpleDateFormat Import java.util.Enumeration Import java.util.TimeZone ClassDeclaration /**
 * Class used to generate an XML changelog.
 *
 * @version $Revision$ $Date$
 */ ChangeLogWriter FieldDeclaration /** output format for dates written to xml file */ Modifier private final static ReferenceType SimpleDateFormat VariableDeclarator c_outputDate ClassCreator ReferenceType SimpleDateFormat Literal ""yyyy-MM-dd"" FieldDeclaration /** output format for times written to xml file */ Modifier private final static ReferenceType SimpleDateFormat VariableDeclarator c_outputTime ClassCreator ReferenceType SimpleDateFormat Literal ""HH:mm"" LocalVariableDeclaration ReferenceType TimeZone VariableDeclarator utc MethodInvocation TimeZone Literal ""UTC"" getTimeZone StatementExpression MethodInvocation c_outputDate MemberReference utc setTimeZone StatementExpression MethodInvocation c_outputTime MemberReference utc setTimeZone MethodDeclaration /**
     * Print out the specified entries.
     *
     * @param output writer to which to send output.
     * @param entries the entries to be written.
     */ Modifier public printChangeLog FormalParameter Modifier final ReferenceType PrintWriter output FormalParameter Modifier final ReferenceType CVSEntry entries StatementExpression MethodInvocation output Literal ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"" println StatementExpression MethodInvocation output Literal ""<changelog>"" println ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference entries length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType CVSEntry VariableDeclarator entry MemberReference ArraySelector MemberReference i entries StatementExpression MethodInvocation MemberReference output MemberReference entry printEntry End StatementExpression MethodInvocation output Literal ""</changelog>"" println StatementExpression MethodInvocation output flush StatementExpression MethodInvocation output close MethodDeclaration /**
     * Print out an individual entry in changelog.
     *
     * @param entry the entry to print
     * @param output writer to which to send output.
     */ Modifier private printEntry FormalParameter Modifier final ReferenceType PrintWriter output FormalParameter Modifier final ReferenceType CVSEntry entry StatementExpression MethodInvocation output Literal ""\t<entry>"" println StatementExpression MethodInvocation output BinaryOperation + BinaryOperation + Literal ""\t\t<date>"" MethodInvocation c_outputDate MethodInvocation entry getDate format Literal ""</date>"" println StatementExpression MethodInvocation output BinaryOperation + BinaryOperation + Literal ""\t\t<time>"" MethodInvocation c_outputTime MethodInvocation entry getDate format Literal ""</time>"" println StatementExpression MethodInvocation output BinaryOperation + BinaryOperation + Literal ""\t\t<author><![CDATA["" MethodInvocation entry getAuthor Literal ""]]></author>"" println LocalVariableDeclaration Modifier final ReferenceType Enumeration VariableDeclarator enumeration MethodInvocation entry MethodInvocation elements getFiles WhileStatement MethodInvocation enumeration hasMoreElements BlockStatement LocalVariableDeclaration Modifier final ReferenceType RCSFile VariableDeclarator file Cast ReferenceType RCSFile MethodInvocation enumeration nextElement StatementExpression MethodInvocation output Literal ""\t\t<file>"" println StatementExpression MethodInvocation output BinaryOperation + BinaryOperation + Literal ""\t\t\t<name>"" MethodInvocation file getName Literal ""</name>"" println StatementExpression MethodInvocation output BinaryOperation + BinaryOperation + Literal ""\t\t\t<revision>"" MethodInvocation file getRevision Literal ""</revision>"" println LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator previousRevision MethodInvocation file getPreviousRevision IfStatement BinaryOperation != MemberReference previousRevision Literal null BlockStatement StatementExpression MethodInvocation output BinaryOperation + BinaryOperation + Literal ""\t\t\t<prevrevision>"" MemberReference previousRevision Literal ""</prevrevision>"" println End StatementExpression MethodInvocation output Literal ""\t\t</file>"" println End StatementExpression MethodInvocation output BinaryOperation + BinaryOperation + Literal ""\t\t<msg><![CDATA["" MethodInvocation entry getComment Literal ""]]></msg>"" println StatementExpression MethodInvocation output Literal ""\t</entry>"" println",0
2,2,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.depend.constantpool Import java.io.DataInputStream Import java.io.IOException ClassDeclaration Modifier public abstract /**
 * An entry in the constant pool. This class contains a representation of the
 * constant pool entries. It is an abstract base class for all the different
 * forms of constant pool entry.
 *
 * @see ConstantPool
 */ ConstantPoolEntry FieldDeclaration /** Tag value for UTF8 entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_UTF8 Literal 1 FieldDeclaration /** Tag value for Integer entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_INTEGER Literal 3 FieldDeclaration /** Tag value for Float entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_FLOAT Literal 4 FieldDeclaration /** Tag value for Long entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_LONG Literal 5 FieldDeclaration /** Tag value for Double entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_DOUBLE Literal 6 FieldDeclaration /** Tag value for Class entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_CLASS Literal 7 FieldDeclaration /** Tag value for String entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_STRING Literal 8 FieldDeclaration /** Tag value for Field Reference entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_FIELDREF Literal 9 FieldDeclaration /** Tag value for Method Reference entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_METHODREF Literal 10 FieldDeclaration /** Tag value for Interface Method Reference entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_INTERFACEMETHODREF Literal 11 FieldDeclaration /** Tag value for Name and Type entries. */ Modifier public final static BasicType int VariableDeclarator CONSTANT_NAMEANDTYPE Literal 12 FieldDeclaration /**
     * This entry's tag which identifies the type of this constant pool
     * entry.
     */ Modifier private BasicType int VariableDeclarator tag FieldDeclaration /**
     * The number of slots in the constant pool, occupied by this entry.
     */ Modifier private BasicType int VariableDeclarator numEntries FieldDeclaration /**
     * A flag which indicates if this entry has been resolved or not.
     */ Modifier private BasicType boolean VariableDeclarator resolved ConstructorDeclaration Modifier public /**
     * Initialise the constant pool entry.
     *
     * @param tagValue the tag value which identifies which type of constant
     *      pool entry this is.
     * @param entries the number of constant pool entry slots this entry
     *      occupies.
     */ ConstantPoolEntry FormalParameter BasicType int tagValue FormalParameter BasicType int entries StatementExpression Assignment MemberReference tag MemberReference tagValue = StatementExpression Assignment MemberReference numEntries MemberReference entries = StatementExpression Assignment MemberReference resolved Literal false = MethodDeclaration /**
     * Read a constant pool entry from a stream. This is a factory method
     * which reads a constant pool entry form a stream and returns the
     * appropriate subclass for the entry.
     *
     * @param cpStream the stream from which the constant pool entry is to
     *      be read.
     * @return the appropriate ConstantPoolEntry subclass representing the
     *      constant pool entry from the stream.
     * @exception IOException if the constant pool entry cannot be read
     *      from the stream
     */ Modifier public static ReferenceType ConstantPoolEntry readEntry FormalParameter ReferenceType DataInputStream cpStream IOException LocalVariableDeclaration ReferenceType ConstantPoolEntry VariableDeclarator cpInfo Literal null LocalVariableDeclaration BasicType int VariableDeclarator cpTag MethodInvocation cpStream readUnsignedByte SwitchStatement MemberReference cpTag SwitchStatementCase CONSTANT_UTF8 StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType Utf8CPInfo = BreakStatement SwitchStatementCase CONSTANT_INTEGER StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType IntegerCPInfo = BreakStatement SwitchStatementCase CONSTANT_FLOAT StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType FloatCPInfo = BreakStatement SwitchStatementCase CONSTANT_LONG StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType LongCPInfo = BreakStatement SwitchStatementCase CONSTANT_DOUBLE StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType DoubleCPInfo = BreakStatement SwitchStatementCase CONSTANT_CLASS StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType ClassCPInfo = BreakStatement SwitchStatementCase CONSTANT_STRING StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType StringCPInfo = BreakStatement SwitchStatementCase CONSTANT_FIELDREF StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType FieldRefCPInfo = BreakStatement SwitchStatementCase CONSTANT_METHODREF StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType MethodRefCPInfo = BreakStatement SwitchStatementCase CONSTANT_INTERFACEMETHODREF StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType InterfaceMethodRefCPInfo = BreakStatement SwitchStatementCase CONSTANT_NAMEANDTYPE StatementExpression Assignment MemberReference cpInfo ClassCreator ReferenceType NameAndTypeCPInfo = BreakStatement SwitchStatementCase ThrowStatement ClassCreator ReferenceType ClassFormatError BinaryOperation + Literal ""Invalid Constant Pool entry Type "" MemberReference cpTag End StatementExpression MethodInvocation cpInfo MemberReference cpStream read ReturnStatement MemberReference cpInfo MethodDeclaration /**
     * Indicates whether this entry has been resolved. In general a constant
     * pool entry can reference another constant pool entry by its index
     * value. Resolution involves replacing this index value with the
     * constant pool entry at that index.
     *
     * @return true if this entry has been resolved.
     */ Modifier public BasicType boolean isResolved ReturnStatement MemberReference resolved MethodDeclaration /**
     * Resolve this constant pool entry with respect to its dependents in
     * the constant pool.
     *
     * @param constantPool the constant pool of which this entry is a member
     *      and against which this entry is to be resolved.
     */ Modifier public resolve FormalParameter ReferenceType ConstantPool constantPool StatementExpression Assignment MemberReference resolved Literal true = MethodDeclaration /**
     * read a constant pool entry from a class stream.
     *
     * @param cpStream the DataInputStream which contains the constant pool
     *      entry to be read.
     * @exception IOException if there is a problem reading the entry from
     *      the stream.
     */ Modifier public abstract read FormalParameter ReferenceType DataInputStream cpStream IOException MethodDeclaration /**
     * Get the Entry's type tag.
     *
     * @return The Tag value of this entry
     */ Modifier public BasicType int getTag ReturnStatement MemberReference tag MethodDeclaration /**
     * Get the number of Constant Pool Entry slots within the constant pool
     * occupied by this entry.
     *
     * @return the number of slots used.
     */ Modifier public final BasicType int getNumEntries ReturnStatement MemberReference numEntries",0
309,309,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.MatchingTask Import org.apache.tools.ant.taskdefs.Move Import org.apache.tools.ant.types.Mapper ClassDeclaration Modifier public /**
 *
 * @version 1.2
 *
 * @deprecated Use &lt;move&gt; instead
 */ RenameExtensions FieldDeclaration Modifier private ReferenceType String VariableDeclarator fromExtension Literal """" FieldDeclaration Modifier private ReferenceType String VariableDeclarator toExtension Literal """" FieldDeclaration Modifier private BasicType boolean VariableDeclarator replace Literal false FieldDeclaration Modifier private ReferenceType File VariableDeclarator srcDir FieldDeclaration Modifier private ReferenceType Mapper ReferenceType MapperType VariableDeclarator globType ConstructorDeclaration Modifier public /** Creates new RenameExtensions */ RenameExtensions StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference globType ClassCreator ReferenceType Mapper ReferenceType MapperType = StatementExpression MethodInvocation globType Literal ""glob"" setValue MethodDeclaration /**
     * The string that files must end in to be renamed
     *
     * @param from the extension of files being renamed.
     */ Modifier public setFromExtension FormalParameter ReferenceType String from StatementExpression Assignment MemberReference fromExtension MemberReference from = MethodDeclaration /**
     * The string that renamed files will end with on
     * completion
     *
     * @param to the extension of the renamed files.
     */ Modifier public setToExtension FormalParameter ReferenceType String to StatementExpression Assignment MemberReference toExtension MemberReference to = MethodDeclaration /**
     * store replace attribute - this determines whether the target file
     * should be overwritten if present
     *
     * @param replace if true overwrite any target files that exist.
     */ Modifier public setReplace FormalParameter BasicType boolean replace StatementExpression Assignment This MemberReference replace MemberReference replace = MethodDeclaration /**
     * Set the source dir to find the files to be renamed.
     *
     * @param srcDir the source directory.
     */ Modifier public setSrcDir FormalParameter ReferenceType File srcDir StatementExpression Assignment This MemberReference srcDir MemberReference srcDir = MethodDeclaration /**
     * Executes the task.
     *
     * @throws BuildException is there is a problem in the task execution.
     */ Modifier public execute BuildException IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MemberReference fromExtension Literal null BinaryOperation == MemberReference toExtension Literal null BinaryOperation == MemberReference srcDir Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""srcDir, fromExtension and toExtension "" Literal ""attributes must be set!"" End StatementExpression MethodInvocation Literal ""DEPRECATED - The renameext task is deprecated.  Use move instead."" MemberReference Project MSG_WARN log StatementExpression MethodInvocation Literal ""Replace this with:"" MemberReference Project MSG_INFO log StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<move todir=\"""" MemberReference srcDir Literal ""\"" overwrite=\"""" MemberReference replace Literal ""\"">"" MemberReference Project MSG_INFO log StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""  <fileset dir=\"""" MemberReference srcDir Literal ""\"" />"" MemberReference Project MSG_INFO log StatementExpression MethodInvocation Literal ""  <mapper type=\""glob\"""" MemberReference Project MSG_INFO log StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""          from=\""*"" MemberReference fromExtension Literal ""\"""" MemberReference Project MSG_INFO log StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""          to=\""*"" MemberReference toExtension Literal ""\"" />"" MemberReference Project MSG_INFO log StatementExpression MethodInvocation Literal ""</move>"" MemberReference Project MSG_INFO log StatementExpression MethodInvocation Literal ""using the same patterns on <fileset> as you\'ve used here"" MemberReference Project MSG_INFO log LocalVariableDeclaration ReferenceType Move VariableDeclarator move Cast ReferenceType Move MethodInvocation MethodInvocation Literal ""move"" createTask getProject StatementExpression MethodInvocation move MethodInvocation getOwningTarget setOwningTarget StatementExpression MethodInvocation move MethodInvocation getTaskName setTaskName StatementExpression MethodInvocation move MethodInvocation getLocation setLocation StatementExpression MethodInvocation move MemberReference srcDir setTodir StatementExpression MethodInvocation move MemberReference replace setOverwrite StatementExpression MethodInvocation fileset MemberReference srcDir setDir StatementExpression MethodInvocation move MemberReference fileset addFileset LocalVariableDeclaration ReferenceType Mapper VariableDeclarator me MethodInvocation move createMapper StatementExpression MethodInvocation me MemberReference globType setType StatementExpression MethodInvocation me BinaryOperation + Literal ""*"" MemberReference fromExtension setFrom StatementExpression MethodInvocation me BinaryOperation + Literal ""*"" MemberReference toExtension setTo StatementExpression MethodInvocation move execute ReferenceType MatchingTask",0
421,421,,0
197,197,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.compilers Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.taskdefs.Javac InterfaceDeclaration Modifier public /**
 * The interface that all compiler adapters must adhere to.
 *
 * <p>A compiler adapter is an adapter that interprets the javac's
 * parameters in preparation to be passed off to the compiler this
 * adapter represents.  As all the necessary values are stored in the
 * Javac task itself, the only thing all adapters need is the javac
 * task, the execute command and a parameterless constructor (for
 * reflection).</p>
 *
 * @since Ant 1.3
 */ CompilerAdapter MethodDeclaration /**
     * Sets the compiler attributes, which are stored in the Javac task.
     */ setJavac FormalParameter ReferenceType Javac attributes MethodDeclaration /**
     * Executes the task.
     *
     * @return has the compilation been successful
     */ BasicType boolean execute BuildException",0
203,203,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.clearcase Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Performs a ClearCase Lock command.
 *
 * <p>
 * The following attributes are interpreted:
 * <table border=""1"">
 *   <tr>
 *     <th>Attribute</th>
 *     <th>Values</th>
 *     <th>Required</th>
 *   </tr>
 *   <tr>
 *      <td>replace</td>
 *      <td>Specifies replacing an existing lock</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>nusers</td>
 *      <td>Specifies user(s) who can still modify the object/pname</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>obsolete</td>
 *      <td>Specifies that the object/pname should be marked obsolete</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>comment</td>
 *      <td>Specifies how to populate comments fields</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>pname</td>
 *      <td>Specifies the pathname to be locked.</td>
 *      <td>No</td>
 *   <tr>
 *      <td>objselect</td>
 *      <td>This variable is obsolete. Should use <i>objsel</i> instead.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>objsel</td>
 *      <td>Specifies the object(s) to be unlocked.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>failonerr</td>
 *      <td>Throw an exception if the command fails. Default is true</td>
 *      <td>No</td>
 *   <tr>
 * </table>
 *
 */ CCLock FieldDeclaration Modifier private BasicType boolean VariableDeclarator mReplace Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mObsolete Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator mComment Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mNusers Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mPname Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mObjselect Literal null MethodDeclaration /**
     * Executes the task.
     * <p>
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType Project VariableDeclarator aProj MethodInvocation getProject LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 IfStatement BinaryOperation == MethodInvocation getViewPath Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation aProj MethodInvocation getPath getBaseDir setViewPath End StatementExpression MethodInvocation commandLine MethodInvocation getClearToolCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_LOCK setValue createArgument StatementExpression MethodInvocation MemberReference commandLine checkOptions IfStatement MethodInvocation ! getFailOnErr BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Ignoring any errors that occur for: "" MethodInvocation getOpType MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine run = IfStatement BinaryOperation && MethodInvocation Execute MemberReference result isFailure MethodInvocation getFailOnErr BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * Check the command line options.
     */ Modifier private checkOptions FormalParameter ReferenceType Commandline cmd IfStatement MethodInvocation getReplace BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_REPLACE setValue createArgument End IfStatement MethodInvocation getObsolete BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_OBSOLETE setValue createArgument BlockStatement StatementExpression MethodInvocation MemberReference cmd getNusersCommand End StatementExpression MethodInvocation MemberReference cmd getCommentCommand IfStatement BinaryOperation && BinaryOperation == MethodInvocation getObjselect Literal null BinaryOperation == MethodInvocation getPname Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Should select either an element "" Literal ""(pname) or an object (objselect)"" End StatementExpression MethodInvocation MemberReference cmd getPnameCommand IfStatement BinaryOperation != MethodInvocation getObjselect Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getObjselect setValue createArgument End MethodDeclaration /**
     * If true, replace an existing lock.
     *
     * @param replace the status to set the flag to
     */ Modifier public setReplace FormalParameter BasicType boolean replace StatementExpression Assignment MemberReference mReplace MemberReference replace = MethodDeclaration /**
     * Get replace flag status
     *
     * @return boolean containing status of replace flag
     */ Modifier public BasicType boolean getReplace ReturnStatement MemberReference mReplace MethodDeclaration /**
     * If true, mark object as obsolete.
     *
     * @param obsolete the status to set the flag to
     */ Modifier public setObsolete FormalParameter BasicType boolean obsolete StatementExpression Assignment MemberReference mObsolete MemberReference obsolete = MethodDeclaration /**
     * Get obsolete flag status
     *
     * @return boolean containing status of obsolete flag
     */ Modifier public BasicType boolean getObsolete ReturnStatement MemberReference mObsolete MethodDeclaration /**
     * Sets the users who may continue to
     * edit the object while it is locked.
     *
     * @param nusers users excluded from lock
     */ Modifier public setNusers FormalParameter ReferenceType String nusers StatementExpression Assignment MemberReference mNusers MemberReference nusers = MethodDeclaration /**
     * Get nusers list
     *
     * @return String containing the list of users excluded from lock
     */ Modifier public ReferenceType String getNusers ReturnStatement MemberReference mNusers MethodDeclaration /**
     * Sets how comments should be written
     * for the event record(s)
     *
     * @param comment comment method to use
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression Assignment MemberReference mComment MemberReference comment = MethodDeclaration /**
     * Get comment method
     *
     * @return String containing the desired comment method
     */ Modifier public ReferenceType String getComment ReturnStatement MemberReference mComment MethodDeclaration /**
     * Sets the pathname to be locked
     *
     * @param pname pathname to be locked
     */ Modifier public setPname FormalParameter ReferenceType String pname StatementExpression Assignment MemberReference mPname MemberReference pname = MethodDeclaration /**
     * Get the pathname to be locked
     *
     * @return String containing the pathname to be locked
     */ Modifier public ReferenceType String getPname ReturnStatement MemberReference mPname MethodDeclaration /**
     * Sets the object(s) to be locked
     *
     * @param objsel objects to be locked
     * @since ant 1.6.1
     */ Modifier public setObjSel FormalParameter ReferenceType String objsel StatementExpression Assignment MemberReference mObjselect MemberReference objsel = MethodDeclaration /**
     * Sets the object(s) to be locked
     *
     * @param objselect objects to be locked
     */ Modifier public setObjselect FormalParameter ReferenceType String objselect StatementExpression Assignment MemberReference mObjselect MemberReference objselect = MethodDeclaration /**
     * Get list of objects to be locked
     *
     * @return String containing the objects to be locked
     */ Modifier public ReferenceType String getObjselect ReturnStatement MemberReference mObjselect MethodDeclaration /**
     * Get the 'nusers' command
     *
     * @param cmd containing the command line string with or
     *            without the nusers flag and value appended
     */ Modifier private getNusersCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation == MethodInvocation getNusers Literal null BlockStatement ReturnStatement BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NUSERS setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getNusers setValue createArgument End MethodDeclaration /**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or without the
     *            comment flag and value appended
     */ Modifier private getCommentCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation == MethodInvocation getComment Literal null BlockStatement ReturnStatement BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENT setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getComment setValue createArgument End MethodDeclaration /**
     * Get the 'pname' command
     *
     * @param cmd containing the command line string with or
     *            without the pname flag and value appended
     */ Modifier private getPnameCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation == MethodInvocation getPname Literal null BlockStatement ReturnStatement BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_PNAME setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getPname setValue createArgument End MethodDeclaration /**
     * Return which object/pname is being operated on
     *
     * @return String containing the object/pname being worked on
     */ Modifier private ReferenceType String getOpType IfStatement BinaryOperation != MethodInvocation getPname Literal null BlockStatement ReturnStatement MethodInvocation getPname BlockStatement ReturnStatement MethodInvocation getObjselect End FieldDeclaration /**
     *  -replace flag -- replace existing lock on object(s)
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_REPLACE Literal ""-replace"" FieldDeclaration /**
     * -nusers flag -- list of users to exclude from lock
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NUSERS Literal ""-nusers"" FieldDeclaration /**
     * -obsolete flag -- mark locked object as obsolete
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_OBSOLETE Literal ""-obsolete"" FieldDeclaration /**
     * -comment flag -- method to use for commenting events
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENT Literal ""-comment"" FieldDeclaration /**
     * -pname flag -- pathname to lock
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_PNAME Literal ""-pname"" ReferenceType ClearCase",0
462,462,,0
536,536,,0
292,292,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.clearcase Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Performs ClearCase checkout.
 *
 * <p>
 * The following attributes are interpreted:
 * <table border=""1"">
 *   <tr>
 *     <th>Attribute</th>
 *     <th>Values</th>
 *     <th>Required</th>
 *   </tr>
 *   <tr>
 *      <td>viewpath</td>
 *      <td>Path to the ClearCase view file or directory that the command will operate on</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>reserved</td>
 *      <td>Specifies whether to check out the file as reserved or not</td>
 *      <td>Yes</td>
 *   <tr>
 *   <tr>
 *      <td>out</td>
 *      <td>Creates a writable file under a different filename</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>nodata</td>
 *      <td>Checks out the file but does not create an editable file containing its data</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>branch</td>
 *      <td>Specify a branch to check out the file to</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>version</td>
 *      <td>Allows checkout of a version other than main latest</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>nowarn</td>
 *      <td>Suppress warning messages</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>comment</td>
 *      <td>Specify a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>commentfile</td>
 *      <td>Specify a file containing a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>notco</td>
 *      <td>Fail if it's already checked out to the current view. Set to false to ignore it.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>failonerr</td>
 *      <td>Throw an exception if the command fails. Default is true</td>
 *      <td>No</td>
 *   <tr>
 * </table>
 *
 */ CCCheckout FieldDeclaration Modifier private BasicType boolean VariableDeclarator mReserved Literal true FieldDeclaration Modifier private ReferenceType String VariableDeclarator mOut Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator mNdata Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator mBranch Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator mVersion Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mNwarn Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator mComment Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mCfile Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator mNotco Literal true MethodDeclaration /**
     * Executes the task.
     * <p>
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType Project VariableDeclarator aProj MethodInvocation getProject LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 IfStatement BinaryOperation == MethodInvocation getViewPath Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation aProj MethodInvocation getPath getBaseDir setViewPath End StatementExpression MethodInvocation commandLine MethodInvocation getClearToolCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_CHECKOUT setValue createArgument StatementExpression MethodInvocation MemberReference commandLine checkOptions IfStatement BinaryOperation && MethodInvocation ! getNotco MethodInvocation lsCheckout BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Already checked out in this view: "" MethodInvocation getViewPathBasename MemberReference Project MSG_VERBOSE log getProject ReturnStatement End IfStatement MethodInvocation ! getFailOnErr BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Ignoring any errors that occur for: "" MethodInvocation getViewPathBasename MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine run = IfStatement BinaryOperation && MethodInvocation Execute MemberReference result isFailure MethodInvocation getFailOnErr BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * Check to see if the element is checked out in the current view.
     */ Modifier private BasicType boolean lsCheckout LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmdl ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType String VariableDeclarator result StatementExpression MethodInvocation cmdl MethodInvocation getClearToolCommand setExecutable StatementExpression MethodInvocation cmdl MethodInvocation MemberReference COMMAND_LSCO setValue createArgument StatementExpression MethodInvocation cmdl MethodInvocation Literal ""-cview"" setValue createArgument StatementExpression MethodInvocation cmdl MethodInvocation Literal ""-short"" setValue createArgument StatementExpression MethodInvocation cmdl MethodInvocation Literal ""-d"" setValue createArgument StatementExpression MethodInvocation cmdl MethodInvocation MethodInvocation getViewPath setValue createArgument StatementExpression Assignment MemberReference result MethodInvocation MemberReference cmdl runS = ReturnStatement TernaryExpression BinaryOperation && BinaryOperation != MemberReference result Literal null BinaryOperation > MethodInvocation result length Literal 0 Literal true Literal false MethodDeclaration /**
     * Check the command line options.
     */ Modifier private checkOptions FormalParameter ReferenceType Commandline cmd IfStatement MethodInvocation getReserved BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_RESERVED setValue createArgument BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_UNRESERVED setValue createArgument End IfStatement BinaryOperation != MethodInvocation getOut Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getOutCommand BlockStatement IfStatement MethodInvocation getNoData BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NODATA setValue createArgument End End IfStatement BinaryOperation != MethodInvocation getBranch Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getBranchCommand BlockStatement IfStatement MethodInvocation getVersion BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_VERSION setValue createArgument End End IfStatement MethodInvocation getNoWarn BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOWARN setValue createArgument End IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentCommand BlockStatement IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentFileCommand BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOCOMMENT setValue createArgument End End StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getViewPath setValue createArgument MethodDeclaration /**
     * If true, checks out the file as reserved.
     *
     * @param reserved the status to set the flag to
     */ Modifier public setReserved FormalParameter BasicType boolean reserved StatementExpression Assignment MemberReference mReserved MemberReference reserved = MethodDeclaration /**
     * Get reserved flag status
     *
     * @return boolean containing status of reserved flag
     */ Modifier public BasicType boolean getReserved ReturnStatement MemberReference mReserved MethodDeclaration /**
     * If true, checkout fails if the element is already checked out to the current view.
     *
     * @param notco the status to set the flag to
     * @since ant 1.6.1
     */ Modifier public setNotco FormalParameter BasicType boolean notco StatementExpression Assignment MemberReference mNotco MemberReference notco = MethodDeclaration /**
     * Get notco flag status
     *
     * @return boolean containing status of notco flag
     * @since ant 1.6.1
     */ Modifier public BasicType boolean getNotco ReturnStatement MemberReference mNotco MethodDeclaration /**
     * Creates a writable file under a different filename.
     *
     * @param outf the path to the out file
     */ Modifier public setOut FormalParameter ReferenceType String outf StatementExpression Assignment MemberReference mOut MemberReference outf = MethodDeclaration /**
     * Get out file
     *
     * @return String containing the path to the out file
     */ Modifier public ReferenceType String getOut ReturnStatement MemberReference mOut MethodDeclaration /**
     * If true, checks out the file but does not create an
     * editable file containing its data.
     *
     * @param ndata the status to set the flag to
     */ Modifier public setNoData FormalParameter BasicType boolean ndata StatementExpression Assignment MemberReference mNdata MemberReference ndata = MethodDeclaration /**
     * Get nodata flag status
     *
     * @return boolean containing status of ndata flag
     */ Modifier public BasicType boolean getNoData ReturnStatement MemberReference mNdata MethodDeclaration /**
     * Specify a branch to check out the file to.
     *
     * @param branch the name of the branch
     */ Modifier public setBranch FormalParameter ReferenceType String branch StatementExpression Assignment MemberReference mBranch MemberReference branch = MethodDeclaration /**
     * Get branch name
     *
     * @return String containing the name of the branch
     */ Modifier public ReferenceType String getBranch ReturnStatement MemberReference mBranch MethodDeclaration /**
     * If true, allows checkout of a version other than main latest.
     *
     * @param version the status to set the flag to
     */ Modifier public setVersion FormalParameter BasicType boolean version StatementExpression Assignment MemberReference mVersion MemberReference version = MethodDeclaration /**
     * Get version flag status
     *
     * @return boolean containing status of version flag
     */ Modifier public BasicType boolean getVersion ReturnStatement MemberReference mVersion MethodDeclaration /**
     * If true, warning messages are suppressed.
     *
     * @param nwarn the status to set the flag to
     */ Modifier public setNoWarn FormalParameter BasicType boolean nwarn StatementExpression Assignment MemberReference mNwarn MemberReference nwarn = MethodDeclaration /**
     * Get nowarn flag status
     *
     * @return boolean containing status of nwarn flag
     */ Modifier public BasicType boolean getNoWarn ReturnStatement MemberReference mNwarn MethodDeclaration /**
     * Sets the comment string.
     *
     * @param comment the comment string
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression Assignment MemberReference mComment MemberReference comment = MethodDeclaration /**
     * Get comment string
     *
     * @return String containing the comment
     */ Modifier public ReferenceType String getComment ReturnStatement MemberReference mComment MethodDeclaration /**
     * Specifies a file containing a comment.
     *
     * @param cfile the path to the comment file
     */ Modifier public setCommentFile FormalParameter ReferenceType String cfile StatementExpression Assignment MemberReference mCfile MemberReference cfile = MethodDeclaration /**
     * Get comment file
     *
     * @return String containing the path to the comment file
     */ Modifier public ReferenceType String getCommentFile ReturnStatement MemberReference mCfile MethodDeclaration /**
     * Get the 'out' command
     *
     * @param cmd containing the command line string with or
     *                    without the out flag and path appended
     */ Modifier private getOutCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getOut Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_OUT setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getOut setValue createArgument End MethodDeclaration /**
     * Get the 'branch' command
     *
     * @param cmd containing the command line string with or
                          without the branch flag and name appended
     */ Modifier private getBranchCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getBranch Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_BRANCH setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getBranch setValue createArgument End MethodDeclaration /**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or
     *                    without the comment flag and string appended
     */ Modifier private getCommentCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENT setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getComment setValue createArgument End MethodDeclaration /**
     * Get the 'cfile' command
     *
     * @param cmd containing the command line string with or
     *                    without the cfile flag and file appended
     */ Modifier private getCommentFileCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENTFILE setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getCommentFile setValue createArgument End FieldDeclaration /**
     *  -reserved flag -- check out the file as reserved
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_RESERVED Literal ""-reserved"" FieldDeclaration /**
     *  -reserved flag -- check out the file as unreserved
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_UNRESERVED Literal ""-unreserved"" FieldDeclaration /**
     * -out flag -- create a writable file under a different filename
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_OUT Literal ""-out"" FieldDeclaration /**
     * -ndata flag -- checks out the file but does not create an editable file containing its data
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NODATA Literal ""-ndata"" FieldDeclaration /**
     * -branch flag -- checks out the file on a specified branch
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_BRANCH Literal ""-branch"" FieldDeclaration /**
     * -version flag -- allows checkout of a version that is not main latest
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_VERSION Literal ""-version"" FieldDeclaration /**
     * -nwarn flag -- suppresses warning messages
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOWARN Literal ""-nwarn"" FieldDeclaration /**
     * -c flag -- comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENT Literal ""-c"" FieldDeclaration /**
     * -cfile flag -- file containing a comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENTFILE Literal ""-cfile"" FieldDeclaration /**
     * -nc flag -- no comment is specified
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOCOMMENT Literal ""-nc"" ReferenceType ClearCase",1
620,620,,0
324,324,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.vss Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Performs Label commands to Microsoft Visual SourceSafe.
 *
 * @ant.task name=""vsslabel"" category=""scm""
 */ MSVSSLABEL MethodDeclaration /**
     * Builds a command line to execute ss.
     * @return     The constructed commandline.
     */ ReferenceType Commandline buildCmdLine LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline IfStatement BinaryOperation == MethodInvocation getVsspath Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""vsspath attribute must be set!"" MethodInvocation getLocation End LocalVariableDeclaration ReferenceType String VariableDeclarator label MethodInvocation getLabel IfStatement MethodInvocation label Literal """" equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""label attribute must be set!"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End StatementExpression MethodInvocation commandLine MethodInvocation getSSCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_LABEL setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getVsspath setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getComment setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getAutoresponse setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MemberReference label setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getVersion setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getLogin setValue createArgument ReturnStatement MemberReference commandLine MethodDeclaration /**
     * Label to apply in SourceSafe.
     *
     * @param  label The label to apply.
     *
     * @ant.attribute group=""required""
     */ Modifier public setLabel FormalParameter ReferenceType String label StatementExpression SuperMethodInvocation MemberReference label setInternalLabel MethodDeclaration /**
     * Version to label.
     *
     * @param  version The version to label.
     */ Modifier public setVersion FormalParameter ReferenceType String version StatementExpression SuperMethodInvocation MemberReference version setInternalVersion MethodDeclaration /**
     * Comment to apply to files labeled in SourceSafe.
     *
     * @param comment The comment to apply in SourceSafe
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression SuperMethodInvocation MemberReference comment setInternalComment MethodDeclaration /**
     * Autoresponce behaviour. Valid options are Y and N.
     *
     * @param response The auto response value.
     */ Modifier public setAutoresponse FormalParameter ReferenceType String response StatementExpression SuperMethodInvocation MemberReference response setInternalAutoResponse ReferenceType MSVSS",0
529,529,,1
653,653,,0
575,575,,0
515,515,,0
398,398,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.compilers Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Performs a compile using javac externally.
 *
 * @since Ant 1.4
 */ JavacExternal MethodDeclaration /**
     * Performs a compile using the Javac externally.
     */ Modifier public BasicType boolean execute BuildException StatementExpression MethodInvocation attributes Literal ""Using external javac compiler"" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmd ClassCreator ReferenceType Commandline StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getJavacExecutable getJavac setExecutable StatementExpression MethodInvocation MemberReference cmd setupModernJavacCommandlineSwitches LocalVariableDeclaration BasicType int VariableDeclarator firstFileName TernaryExpression MethodInvocation assumeJava11 Literal - 1 MethodInvocation cmd size StatementExpression MethodInvocation MemberReference cmd logAndAddFilesToCompile ReturnStatement BinaryOperation == MethodInvocation MethodInvocation cmd getCommandline MemberReference firstFileName Literal true executeExternalCompile Literal 0 ReferenceType DefaultCompilerAdapter",0
254,254,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.sql.Connection Import java.sql.DatabaseMetaData Import java.sql.Driver Import java.sql.SQLException Import java.util.Hashtable Import java.util.Properties Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference ClassDeclaration Modifier public abstract /**
 * Handles JDBC configuration needed by SQL type tasks.
 * <p>
 * The following example class prints the contents of the first column of each row in TableName.
 *</p>
 *<code><pre>
package examples;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.JDBCTask;

public class SQLExampleTask extends JDBCTask {

    private String tableName;

    public void execute() throws BuildException {
        Connection conn = getConnection();
        Statement stmt=null;
        try {
            if (tableName == null) {
                throw new BuildException(""TableName must be specified"",location);
            }
            String sql = ""SELECT * FROM ""+tableName;
            stmt= conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                log(rs.getObject(1).toString());
            }
        } catch (SQLException e) {

        } finally {
            if (stmt != null) {
                try {stmt.close();}catch (SQLException ingore) {}
            }
            if (conn != null) {
                try {conn.close();}catch (SQLException ingore) {}
            }
        }
    }
    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

}


</pre></code>


 * @since Ant 1.5
 *
 */ JDBCTask FieldDeclaration /**
     * Used for caching loaders / driver. This is to avoid
     * getting an OutOfMemoryError when calling this task
     * multiple times in a row.
     */ Modifier private static ReferenceType Hashtable VariableDeclarator loaderMap ClassCreator ReferenceType Hashtable Literal 3 FieldDeclaration Modifier private BasicType boolean VariableDeclarator caching Literal true FieldDeclaration Modifier private ReferenceType Path VariableDeclarator classpath FieldDeclaration Modifier private ReferenceType AntClassLoader VariableDeclarator loader FieldDeclaration /**
     * Autocommit flag. Default value is false
     */ Modifier private BasicType boolean VariableDeclarator autocommit Literal false FieldDeclaration /**
     * DB driver.
     */ Modifier private ReferenceType String VariableDeclarator driver Literal null FieldDeclaration /**
     * DB url.
     */ Modifier private ReferenceType String VariableDeclarator url Literal null FieldDeclaration /**
     * User name.
     */ Modifier private ReferenceType String VariableDeclarator userId Literal null FieldDeclaration /**
     * Password
     */ Modifier private ReferenceType String VariableDeclarator password Literal null FieldDeclaration /**
     * RDBMS Product needed for this SQL.
     **/ Modifier private ReferenceType String VariableDeclarator rdbms Literal null FieldDeclaration /**
     * RDBMS Version needed for this SQL.
     **/ Modifier private ReferenceType String VariableDeclarator version Literal null MethodDeclaration /**
     * Sets the classpath for loading the driver.
     * @param classpath The classpath to set
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath StatementExpression Assignment This MemberReference classpath MemberReference classpath = MethodDeclaration /**
     * Caching loaders / driver. This is to avoid
     * getting an OutOfMemoryError when calling this task
     * multiple times in a row; default: true
     * @param enable
     */ Modifier public setCaching FormalParameter BasicType boolean enable StatementExpression Assignment MemberReference caching MemberReference enable = MethodDeclaration /**
     * Add a path to the classpath for loading the driver.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement This MemberReference classpath MethodInvocation createPath MethodDeclaration /**
     * Set the classpath for loading the driver
     * using the classpath reference.
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration /**
     * Class name of the JDBC driver; required.
     * @param driver The driver to set
     */ Modifier public setDriver FormalParameter ReferenceType String driver StatementExpression Assignment This MemberReference driver MemberReference driver = MethodDeclaration /**
     * Sets the database connection URL; required.
     * @param url The url to set
     */ Modifier public setUrl FormalParameter ReferenceType String url StatementExpression Assignment This MemberReference url MemberReference url = MethodDeclaration /**
     * Sets the password; required.
     * @param password The password to set
     */ Modifier public setPassword FormalParameter ReferenceType String password StatementExpression Assignment This MemberReference password MemberReference password = MethodDeclaration /**
     * Auto commit flag for database connection;
     * optional, default false.
     * @param autocommit The autocommit to set
     */ Modifier public setAutocommit FormalParameter BasicType boolean autocommit StatementExpression Assignment This MemberReference autocommit MemberReference autocommit = MethodDeclaration /**
     * Execute task only if the lower case product name
     * of the DB matches this
     * @param rdbms The rdbms to set
     */ Modifier public setRdbms FormalParameter ReferenceType String rdbms StatementExpression Assignment This MemberReference rdbms MemberReference rdbms = MethodDeclaration /**
     * Sets the version string, execute task only if
     * rdbms version match; optional.
     * @param version The version to set
     */ Modifier public setVersion FormalParameter ReferenceType String version StatementExpression Assignment This MemberReference version MemberReference version = MethodDeclaration /**
     * Verify we are connected to the correct RDBMS
     */ Modifier protected BasicType boolean isValidRdbms FormalParameter ReferenceType Connection conn IfStatement BinaryOperation && BinaryOperation == MemberReference rdbms Literal null BinaryOperation == MemberReference version Literal null BlockStatement ReturnStatement Literal true End TryStatement LocalVariableDeclaration ReferenceType DatabaseMetaData VariableDeclarator dmd MethodInvocation conn getMetaData IfStatement BinaryOperation != MemberReference rdbms Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator theVendor MethodInvocation dmd MethodInvocation toLowerCase getDatabaseProductName StatementExpression MethodInvocation BinaryOperation + Literal ""RDBMS = "" MemberReference theVendor MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation || BinaryOperation == MemberReference theVendor Literal null BinaryOperation < MethodInvocation theVendor MemberReference rdbms indexOf Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Not the required RDBMS: "" MemberReference rdbms MemberReference Project MSG_VERBOSE log ReturnStatement Literal false End End IfStatement BinaryOperation != MemberReference version Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator theVersion MethodInvocation dmd MethodInvocation toLowerCase getDatabaseProductVersion StatementExpression MethodInvocation BinaryOperation + Literal ""Version = "" MemberReference theVersion MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation || BinaryOperation == MemberReference theVersion Literal null BinaryOperation || MethodInvocation theVersion MemberReference version startsWith BinaryOperation >= MethodInvocation theVersion BinaryOperation + Literal "" "" MemberReference version indexOf Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Not the required version: \"""" MemberReference version Literal ""\"""" MemberReference Project MSG_VERBOSE log ReturnStatement Literal false End End CatchClause CatchClauseParameter SQLException e StatementExpression MethodInvocation Literal ""Failed to obtain required RDBMS information"" MemberReference Project MSG_ERR log ReturnStatement Literal false ReturnStatement Literal true MethodDeclaration Modifier protected static ReferenceType Hashtable getLoaderMap ReturnStatement MemberReference loaderMap MethodDeclaration Modifier protected ReferenceType AntClassLoader getLoader ReturnStatement MemberReference loader MethodDeclaration /**
     * Creates a new Connection as using the driver, url, userid and password
     * specified.
     *
     * The calling method is responsible for closing the connection.
     *
     * @return Connection the newly created connection.
     * @throws BuildException if the UserId/Password/Url is not set or there
     * is no suitable driver or the driver fails to load.
     */ Modifier protected ReferenceType Connection getConnection BuildException IfStatement BinaryOperation == MemberReference userId Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""User Id attribute must be set!"" MethodInvocation getLocation End IfStatement BinaryOperation == MemberReference password Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Password attribute must be set!"" MethodInvocation getLocation End IfStatement BinaryOperation == MemberReference url Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Url attribute must be set!"" MethodInvocation getLocation End TryStatement StatementExpression MethodInvocation BinaryOperation + Literal ""connecting to "" MethodInvocation getUrl MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType Properties VariableDeclarator info ClassCreator ReferenceType Properties StatementExpression MethodInvocation info Literal ""user"" MethodInvocation getUserId put StatementExpression MethodInvocation info Literal ""password"" MethodInvocation getPassword put LocalVariableDeclaration ReferenceType Connection VariableDeclarator conn MethodInvocation MethodInvocation MethodInvocation getUrl MemberReference info connect getDriver IfStatement BinaryOperation == MemberReference conn Literal null BlockStatement ThrowStatement ClassCreator ReferenceType SQLException BinaryOperation + Literal ""No suitable Driver for "" MemberReference url End StatementExpression MethodInvocation conn MemberReference autocommit setAutoCommit ReturnStatement MemberReference conn CatchClause CatchClauseParameter SQLException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation MethodDeclaration /**
     * Gets an instance of the required driver.
     * Uses the ant class loader and the optionally the provided classpath.
     * @return Driver
     * @throws BuildException
     */ Modifier private ReferenceType Driver getDriver BuildException IfStatement BinaryOperation == MemberReference driver Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Driver attribute must be set!"" MethodInvocation getLocation End LocalVariableDeclaration ReferenceType Driver VariableDeclarator driverInstance Literal null TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator dc IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement SynchronizedStatement MemberReference loaderMap IfStatement MemberReference caching BlockStatement StatementExpression Assignment MemberReference loader Cast ReferenceType AntClassLoader MethodInvocation loaderMap MemberReference driver get = End IfStatement BinaryOperation == MemberReference loader Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Loading "" MemberReference driver Literal "" using AntClassLoader with classpath "" MemberReference classpath MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference loader MethodInvocation MethodInvocation MemberReference classpath createClassLoader getProject = IfStatement MemberReference caching BlockStatement StatementExpression MethodInvocation loaderMap MemberReference driver MemberReference loader put End BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Loading "" MemberReference driver Literal "" using a cached AntClassLoader."" MemberReference Project MSG_VERBOSE log End StatementExpression Assignment MemberReference dc MethodInvocation loader MemberReference driver loadClass = BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Loading "" MemberReference driver Literal "" using system loader."" MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference dc MethodInvocation Class MemberReference driver forName = End StatementExpression Assignment MemberReference driverInstance Cast ReferenceType Driver MethodInvocation dc newInstance = CatchClause CatchClauseParameter ClassNotFoundException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Class Not Found: JDBC driver "" MemberReference driver Literal "" could not be loaded"" MethodInvocation getLocation CatchClause CatchClauseParameter IllegalAccessException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Illegal Access: JDBC driver "" MemberReference driver Literal "" could not be loaded"" MethodInvocation getLocation CatchClause CatchClauseParameter InstantiationException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Instantiation Exception: JDBC driver "" MemberReference driver Literal "" could not be loaded"" MethodInvocation getLocation ReturnStatement MemberReference driverInstance MethodDeclaration Modifier public isCaching FormalParameter BasicType boolean value StatementExpression Assignment MemberReference caching MemberReference value = MethodDeclaration /**
     * Gets the classpath.
     * @return Returns a Path
     */ Modifier public ReferenceType Path getClasspath ReturnStatement MemberReference classpath MethodDeclaration /**
     * Gets the autocommit.
     * @return Returns a boolean
     */ Modifier public BasicType boolean isAutocommit ReturnStatement MemberReference autocommit MethodDeclaration /**
     * Gets the url.
     * @return Returns a String
     */ Modifier public ReferenceType String getUrl ReturnStatement MemberReference url MethodDeclaration /**
     * Gets the userId.
     * @return Returns a String
     */ Modifier public ReferenceType String getUserId ReturnStatement MemberReference userId MethodDeclaration /**
     * Set the user name for the connection; required.
     * @param userId The userId to set
     */ Modifier public setUserid FormalParameter ReferenceType String userId StatementExpression Assignment This MemberReference userId MemberReference userId = MethodDeclaration /**
     * Gets the password.
     * @return Returns a String
     */ Modifier public ReferenceType String getPassword ReturnStatement MemberReference password MethodDeclaration /**
     * Gets the rdbms.
     * @return Returns a String
     */ Modifier public ReferenceType String getRdbms ReturnStatement MemberReference rdbms MethodDeclaration /**
     * Gets the version.
     * @return Returns a String
     */ Modifier public ReferenceType String getVersion ReturnStatement MemberReference version ReferenceType Task",0
219,219,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.email Import java.io.ByteArrayInputStream Import java.io.ByteArrayOutputStream Import java.io.File Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream Import java.io.PrintStream Import java.io.UnsupportedEncodingException Import java.util.Enumeration Import java.util.Properties Import java.util.StringTokenizer Import java.util.Vector Import java.security.Security Import java.security.Provider Import javax.activation.DataHandler Import javax.activation.FileDataSource Import javax.mail.Authenticator Import javax.mail.PasswordAuthentication Import javax.mail.Session Import javax.mail.Message Import javax.mail.Transport Import javax.mail.MessagingException Import javax.mail.internet.AddressException Import javax.mail.internet.InternetAddress Import javax.mail.internet.MimeBodyPart Import javax.mail.internet.MimeMessage Import javax.mail.internet.MimeMultipart Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Uses the JavaMail classes to send Mime format email.
 *
 * @since Ant 1.5
 */ MimeMailer FieldDeclaration /** Default character set */ Modifier private final static ReferenceType String VariableDeclarator DEFAULT_CHARSET MethodInvocation System Literal ""file.encoding"" getProperty ClassDeclaration /**
     * @since Ant 1.6
     */ StringDataSource FieldDeclaration Modifier private ReferenceType String VariableDeclarator data Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator type Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator charset Literal null FieldDeclaration Modifier private ReferenceType ByteArrayOutputStream VariableDeclarator out MethodDeclaration Modifier public ReferenceType InputStream getInputStream IOException IfStatement BinaryOperation && BinaryOperation == MemberReference data Literal null BinaryOperation == MemberReference out Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""No data"" BlockStatement IfStatement BinaryOperation != MemberReference out Literal null BlockStatement StatementExpression Assignment MemberReference data TernaryExpression BinaryOperation != MemberReference data Literal null MethodInvocation data MethodInvocation out MemberReference charset toString concat MethodInvocation out MemberReference charset toString = StatementExpression Assignment MemberReference out Literal null = End ReturnStatement ClassCreator ReferenceType ByteArrayInputStream MethodInvocation data MemberReference charset getBytes End MethodDeclaration Modifier public ReferenceType OutputStream getOutputStream IOException IfStatement BinaryOperation == MemberReference out Literal null BlockStatement StatementExpression Assignment MemberReference out ClassCreator ReferenceType ByteArrayOutputStream = End ReturnStatement MemberReference out MethodDeclaration Modifier public setContentType FormalParameter ReferenceType String type StatementExpression Assignment This MemberReference type MethodInvocation type toLowerCase = MethodDeclaration Modifier public ReferenceType String getContentType IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference type Literal null BinaryOperation > MethodInvocation type Literal ""charset"" indexOf Literal 0 MethodInvocation type Literal ""text/"" startsWith BlockStatement ReturnStatement MemberReference type End ReturnStatement TernaryExpression BinaryOperation != MemberReference type Literal null MethodInvocation type Literal MethodInvocation MemberReference charset concat ""; charset="" concat Literal MethodInvocation Literal MethodInvocation MemberReference charset concat ""; charset="" concat ""text/plain"" MethodDeclaration Modifier public ReferenceType String getName ReturnStatement Literal ""StringDataSource"" MethodDeclaration Modifier public setCharset FormalParameter ReferenceType String charset StatementExpression Assignment This MemberReference charset MemberReference charset = MethodDeclaration Modifier public ReferenceType String getCharset ReturnStatement MemberReference charset ReferenceType javax ReferenceType activation ReferenceType DataSource MethodDeclaration /** Sends the email  */ Modifier public send TryStatement LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties StatementExpression MethodInvocation props Literal ""mail.smtp.host"" MemberReference host put StatementExpression MethodInvocation props Literal ""mail.smtp.port"" MethodInvocation String MemberReference port valueOf put LocalVariableDeclaration ReferenceType Session VariableDeclarator sesh LocalVariableDeclaration ReferenceType Authenticator VariableDeclarator auth IfStatement MemberReference SSL BlockStatement TryStatement LocalVariableDeclaration ReferenceType Provider VariableDeclarator p Cast ReferenceType Provider MethodInvocation Class MethodInvocation newInstance Literal ""com.sun.net.ssl.internal.ssl.Provider"" forName StatementExpression MethodInvocation Security MemberReference p addProvider CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""could not instantiate ssl "" Literal ""security provider, check that you have JSSE in "" Literal ""your classpath"" LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator SSL_FACTORY Literal ""javax.net.ssl.SSLSocketFactory"" StatementExpression MethodInvocation props Literal ""mail.smtp.socketFactory.class"" MemberReference SSL_FACTORY put StatementExpression MethodInvocation props Literal ""mail.smtp.socketFactory.fallback"" Literal ""false"" put End IfStatement BinaryOperation && BinaryOperation == MemberReference user Literal null BinaryOperation == MemberReference password Literal null BlockStatement StatementExpression Assignment MemberReference sesh MethodInvocation Session MemberReference props Literal null getDefaultInstance = BlockStatement StatementExpression MethodInvocation props Literal ""mail.smtp.auth"" Literal ""true"" put StatementExpression Assignment MemberReference auth ClassCreator ReferenceType SimpleAuthenticator MemberReference user MemberReference password = StatementExpression Assignment MemberReference sesh MethodInvocation Session MemberReference props MemberReference auth getInstance = End LocalVariableDeclaration ReferenceType MimeMessage VariableDeclarator msg ClassCreator ReferenceType MimeMessage MemberReference sesh LocalVariableDeclaration ReferenceType MimeMultipart VariableDeclarator attachments ClassCreator ReferenceType MimeMultipart IfStatement BinaryOperation == MethodInvocation from getName Literal null BlockStatement StatementExpression MethodInvocation msg ClassCreator ReferenceType InternetAddress MethodInvocation from getAddress setFrom BlockStatement StatementExpression MethodInvocation msg ClassCreator ReferenceType InternetAddress MethodInvocation from getAddress MethodInvocation from getName setFrom End StatementExpression MethodInvocation msg MethodInvocation MemberReference replyToList internetAddresses setReplyTo StatementExpression MethodInvocation msg MemberReference Message.RecipientType TO MethodInvocation MemberReference toList internetAddresses setRecipients StatementExpression MethodInvocation msg MemberReference Message.RecipientType CC MethodInvocation MemberReference ccList internetAddresses setRecipients StatementExpression MethodInvocation msg MemberReference Message.RecipientType BCC MethodInvocation MemberReference bccList internetAddresses setRecipients LocalVariableDeclaration ReferenceType String VariableDeclarator charset MethodInvocation MethodInvocation message getMimeType parseCharSetFromMimeType IfStatement BinaryOperation != MemberReference charset Literal null BlockStatement StatementExpression MethodInvocation message MemberReference charset setCharset BlockStatement StatementExpression Assignment MemberReference charset MethodInvocation message getCharset = IfStatement BinaryOperation == MemberReference charset Literal null BlockStatement StatementExpression Assignment MemberReference charset MemberReference DEFAULT_CHARSET = StatementExpression MethodInvocation message MemberReference charset setCharset End End LocalVariableDeclaration ReferenceType StringDataSource VariableDeclarator sds ClassCreator ReferenceType StringDataSource StatementExpression MethodInvocation sds MethodInvocation message getMimeType setContentType StatementExpression MethodInvocation sds MemberReference charset setCharset IfStatement BinaryOperation != MemberReference subject Literal null BlockStatement StatementExpression MethodInvocation msg MemberReference subject MemberReference charset setSubject End StatementExpression MethodInvocation msg Literal ""Date"" MethodInvocation getDate addHeader LocalVariableDeclaration ReferenceType PrintStream VariableDeclarator out ClassCreator ReferenceType PrintStream MethodInvocation sds getOutputStream StatementExpression MethodInvocation message MemberReference out print StatementExpression MethodInvocation out close LocalVariableDeclaration ReferenceType MimeBodyPart VariableDeclarator textbody ClassCreator ReferenceType MimeBodyPart StatementExpression MethodInvocation textbody ClassCreator ReferenceType DataHandler MemberReference sds setDataHandler StatementExpression MethodInvocation attachments MemberReference textbody addBodyPart LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation files elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator file Cast ReferenceType File MethodInvocation e nextElement LocalVariableDeclaration ReferenceType MimeBodyPart VariableDeclarator body StatementExpression Assignment MemberReference body ClassCreator ReferenceType MimeBodyPart = IfStatement BinaryOperation || MethodInvocation ! file exists MethodInvocation ! file canRead BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""File \"""" MethodInvocation file getAbsolutePath Literal ""\"" does not exist or is not "" Literal ""readable."" End LocalVariableDeclaration ReferenceType FileDataSource VariableDeclarator fileData ClassCreator ReferenceType FileDataSource MemberReference file LocalVariableDeclaration ReferenceType DataHandler VariableDeclarator fileDataHandler ClassCreator ReferenceType DataHandler MemberReference fileData StatementExpression MethodInvocation body MemberReference fileDataHandler setDataHandler StatementExpression MethodInvocation body MethodInvocation file getName setFileName StatementExpression MethodInvocation attachments MemberReference body addBodyPart End StatementExpression MethodInvocation msg MemberReference attachments setContent StatementExpression MethodInvocation Transport MemberReference msg send CatchClause CatchClauseParameter MessagingException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Problem while sending mime mail:"" MemberReference e CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Problem while sending mime mail:"" MemberReference e MethodDeclaration Modifier private static ReferenceType InternetAddress internetAddresses FormalParameter ReferenceType Vector list AddressException UnsupportedEncodingException LocalVariableDeclaration ReferenceType InternetAddress VariableDeclarator addrs ArrayCreator ReferenceType InternetAddress MethodInvocation list size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation list size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType EmailAddress VariableDeclarator addr Cast ReferenceType EmailAddress MethodInvocation list MemberReference i elementAt IfStatement BinaryOperation == MethodInvocation addr getName Literal null BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i addrs ClassCreator ReferenceType InternetAddress MethodInvocation addr getAddress = BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i addrs ClassCreator ReferenceType InternetAddress MethodInvocation addr getAddress MethodInvocation addr getName = End End ReturnStatement MemberReference addrs MethodDeclaration Modifier private ReferenceType String parseCharSetFromMimeType FormalParameter ReferenceType String type LocalVariableDeclaration BasicType int VariableDeclarator pos IfStatement BinaryOperation || BinaryOperation == MemberReference type Literal null BinaryOperation < Assignment MemberReference pos MethodInvocation type Literal ""charset"" indexOf = Literal 0 BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator token ClassCreator ReferenceType StringTokenizer MethodInvocation type MemberReference pos substring Literal ""=; "" StatementExpression MethodInvocation token nextToken ReturnStatement MethodInvocation token nextToken ClassDeclaration Modifier static SimpleAuthenticator FieldDeclaration Modifier private ReferenceType String VariableDeclarator user Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator password Literal null ConstructorDeclaration Modifier public SimpleAuthenticator FormalParameter ReferenceType String user FormalParameter ReferenceType String password StatementExpression Assignment This MemberReference user MemberReference user = StatementExpression Assignment This MemberReference password MemberReference password = MethodDeclaration Modifier public ReferenceType PasswordAuthentication getPasswordAuthentication ReturnStatement ClassCreator ReferenceType PasswordAuthentication MemberReference user MemberReference password ReferenceType Authenticator ReferenceType Mailer",0
652,652,,0
285,285,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.io.File Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.DocumentBuilderFactory Import javax.xml.parsers.FactoryConfigurationError Import javax.xml.parsers.ParserConfigurationException Import javax.xml.parsers.SAXParser Import javax.xml.parsers.SAXParserFactory Import org.apache.tools.ant.BuildException Import org.xml.sax.Parser Import org.xml.sax.SAXException Import org.xml.sax.XMLReader ClassDeclaration Modifier public /**
 * Collection of helper methods that retrieve a ParserFactory or
 * Parsers and Readers.
 *
 * <p>This class will create only a single factory instance.</p>
 *
 *
 * @since Ant 1.5
 */ JAXPUtils FieldDeclaration /**
     * Helper for systemId.
     *
     * @since Ant 1.6
     */ Modifier private final static ReferenceType FileUtils VariableDeclarator fu MethodInvocation FileUtils newFileUtils FieldDeclaration /**
     * Parser factory to use to create parsers.
     * @see #getParserFactory
     *
     * @since Ant 1.5
     */ Modifier private static ReferenceType SAXParserFactory VariableDeclarator parserFactory Literal null FieldDeclaration /**
     * Parser Factory to create Namespace aware parsers.
     *
     * @since Ant 1.6
     */ Modifier private static ReferenceType SAXParserFactory VariableDeclarator nsParserFactory Literal null FieldDeclaration /**
     * Parser factory to use to create document builders.
     *
     * @since Ant 1.6
     */ Modifier private static ReferenceType DocumentBuilderFactory VariableDeclarator builderFactory Literal null MethodDeclaration /**
     * Returns the parser factory to use. Only one parser factory is
     * ever created by this method and is then cached for future use.
     *
     * @return a SAXParserFactory to use
     *
     * @since Ant 1.5
     */ Modifier public static synchronized ReferenceType SAXParserFactory getParserFactory BuildException IfStatement BinaryOperation == MemberReference parserFactory Literal null BlockStatement StatementExpression Assignment MemberReference parserFactory MethodInvocation newParserFactory = End ReturnStatement MemberReference parserFactory MethodDeclaration /**
     * Returns the parser factory to use to create namespace aware parsers.
     *
     * @return a SAXParserFactory to use which supports manufacture of
     * namespace aware parsers
     *
     * @since Ant 1.6
     */ Modifier public static synchronized ReferenceType SAXParserFactory getNSParserFactory BuildException IfStatement BinaryOperation == MemberReference nsParserFactory Literal null BlockStatement StatementExpression Assignment MemberReference nsParserFactory MethodInvocation newParserFactory = StatementExpression MethodInvocation nsParserFactory Literal true setNamespaceAware End ReturnStatement MemberReference nsParserFactory MethodDeclaration /**
     * Returns a new  parser factory instance.
     *
     * @since Ant 1.5
     */ Modifier public static ReferenceType SAXParserFactory newParserFactory BuildException TryStatement ReturnStatement MethodInvocation SAXParserFactory newInstance CatchClause CatchClauseParameter FactoryConfigurationError e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""XML parser factory has not been "" Literal ""configured correctly: "" MethodInvocation e getMessage MemberReference e MethodDeclaration /**
     * Returns a newly created SAX 1 Parser, using the default parser
     * factory.
     *
     * @return a SAX 1 Parser.
     * @see #getParserFactory
     * @since Ant 1.5
     */ Modifier public static ReferenceType Parser getParser BuildException TryStatement ReturnStatement MethodInvocation MethodInvocation getParser MethodInvocation getParserFactory newSAXParser CatchClause CatchClauseParameter SAXException e ThrowStatement MethodInvocation MemberReference e convertToBuildException MethodDeclaration /**
     * Returns a newly created SAX 2 XMLReader, using the default parser
     * factory.
     *
     * @return a SAX 2 XMLReader.
     * @see #getParserFactory
     * @since Ant 1.5
     */ Modifier public static ReferenceType XMLReader getXMLReader BuildException TryStatement ReturnStatement MethodInvocation MethodInvocation getXMLReader MethodInvocation getParserFactory newSAXParser CatchClause CatchClauseParameter SAXException e ThrowStatement MethodInvocation MemberReference e convertToBuildException MethodDeclaration /**
     * Returns a newly created SAX 2 XMLReader, which is namespace aware
     *
     * @return a SAX 2 XMLReader.
     * @see #getParserFactory
     * @since Ant 1.6
     */ Modifier public static ReferenceType XMLReader getNamespaceXMLReader BuildException TryStatement ReturnStatement MethodInvocation MethodInvocation getXMLReader MethodInvocation getNSParserFactory newSAXParser CatchClause CatchClauseParameter SAXException e ThrowStatement MethodInvocation MemberReference e convertToBuildException MethodDeclaration /**
     * This is a best attempt to provide a URL.toExternalForm() from
     * a file URL. Some parsers like Crimson choke on uri that are made of
     * backslashed paths (ie windows) as it is does not conform
     * URI specifications.
     * @param file the file to create the system id from.
     * @return the systemid corresponding to the given file.
     * @since Ant 1.5.2
     */ Modifier public static ReferenceType String getSystemId FormalParameter ReferenceType File file ReturnStatement MethodInvocation fu MethodInvocation file getAbsolutePath toURI MethodDeclaration /**
     * Returns a newly created DocumentBuilder.
     *
     * @return a DocumentBuilder
     * @since Ant 1.6
     */ Modifier public static ReferenceType DocumentBuilder getDocumentBuilder BuildException TryStatement ReturnStatement MethodInvocation MethodInvocation newDocumentBuilder getDocumentBuilderFactory CatchClause CatchClauseParameter ParserConfigurationException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * @return a new SAXParser instance as helper for getParser and
     * getXMLReader.
     *
     * @since Ant 1.5
     */ Modifier private static ReferenceType SAXParser newSAXParser FormalParameter ReferenceType SAXParserFactory factory BuildException TryStatement ReturnStatement MethodInvocation factory newSAXParser CatchClause CatchClauseParameter ParserConfigurationException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Cannot create parser for the given "" Literal ""configuration: "" MethodInvocation e getMessage MemberReference e CatchClause CatchClauseParameter SAXException e ThrowStatement MethodInvocation MemberReference e convertToBuildException MethodDeclaration /**
     * Translate a SAXException into a BuildException
     *
     * @since Ant 1.5
     */ Modifier private static ReferenceType BuildException convertToBuildException FormalParameter ReferenceType SAXException e LocalVariableDeclaration ReferenceType Exception VariableDeclarator nested MethodInvocation e getException IfStatement BinaryOperation != MemberReference nested Literal null BlockStatement ReturnStatement ClassCreator ReferenceType BuildException MemberReference nested BlockStatement ReturnStatement ClassCreator ReferenceType BuildException MemberReference e End MethodDeclaration /**
     * Obtains the default builder factory if not already.
     *
     * @since Ant 1.6
     */ Modifier private static synchronized ReferenceType DocumentBuilderFactory getDocumentBuilderFactory BuildException IfStatement BinaryOperation == MemberReference builderFactory Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference builderFactory MethodInvocation DocumentBuilderFactory newInstance = CatchClause CatchClauseParameter FactoryConfigurationError e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Document builder factory has not "" Literal ""been configured correctly: "" MethodInvocation e getMessage MemberReference e End ReturnStatement MemberReference builderFactory",0
382,382,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.compilers.CompilerAdapter Import org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference Import org.apache.tools.ant.util.GlobPatternMapper Import org.apache.tools.ant.util.JavaEnvUtils Import org.apache.tools.ant.util.SourceFileScanner Import org.apache.tools.ant.util.facade.FacadeTaskHelper ClassDeclaration Modifier public /**
 * Compiles Java source files. This task can take the following
 * arguments:
 * <ul>
 * <li>sourcedir
 * <li>destdir
 * <li>deprecation
 * <li>classpath
 * <li>bootclasspath
 * <li>extdirs
 * <li>optimize
 * <li>debug
 * <li>encoding
 * <li>target
 * <li>depend
 * <li>verbose
 * <li>failonerror
 * <li>includeantruntime
 * <li>includejavaruntime
 * <li>source
 * <li>compiler
 * </ul>
 * Of these arguments, the <b>sourcedir</b> and <b>destdir</b> are required.
 * <p>
 * When this task executes, it will recursively scan the sourcedir and
 * destdir looking for Java source files to compile. This task makes its
 * compile decision based on timestamp.
 *
 * @version $Revision$
 *
 * @since Ant 1.1
 *
 * @ant.task category=""java""
 */ Javac FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator FAIL_MSG Literal ""Compile failed; see the compiler error output for details."" FieldDeclaration Modifier private ReferenceType Path VariableDeclarator src FieldDeclaration Modifier private ReferenceType File VariableDeclarator destDir FieldDeclaration Modifier private ReferenceType Path VariableDeclarator compileClasspath FieldDeclaration Modifier private ReferenceType Path VariableDeclarator compileSourcepath FieldDeclaration Modifier private ReferenceType String VariableDeclarator encoding FieldDeclaration Modifier private BasicType boolean VariableDeclarator debug Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator optimize Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator deprecation Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator depend Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator verbose Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator target FieldDeclaration Modifier private ReferenceType Path VariableDeclarator bootclasspath FieldDeclaration Modifier private ReferenceType Path VariableDeclarator extdirs FieldDeclaration Modifier private BasicType boolean VariableDeclarator includeAntRuntime Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator includeJavaRuntime Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator fork Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator forkedExecutable Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator nowarn Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator memoryInitialSize FieldDeclaration Modifier private ReferenceType String VariableDeclarator memoryMaximumSize FieldDeclaration Modifier private ReferenceType FacadeTaskHelper VariableDeclarator facade Literal null FieldDeclaration Modifier protected BasicType boolean VariableDeclarator failOnError Literal true FieldDeclaration Modifier protected BasicType boolean VariableDeclarator listFiles Literal false FieldDeclaration Modifier protected ReferenceType File VariableDeclarator compileList ArrayCreator ReferenceType File Literal 0 FieldDeclaration Modifier private ReferenceType String VariableDeclarator source FieldDeclaration Modifier private ReferenceType String VariableDeclarator debugLevel FieldDeclaration Modifier private ReferenceType File VariableDeclarator tmpDir ConstructorDeclaration Modifier public /**
     * Javac task for compilation of Java files.
     */ Javac IfStatement MethodInvocation JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_1 isJavaVersion BlockStatement StatementExpression Assignment MemberReference facade ClassCreator ReferenceType FacadeTaskHelper Literal ""javac1.1"" = IfStatement MethodInvocation JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_2 isJavaVersion BlockStatement StatementExpression Assignment MemberReference facade ClassCreator ReferenceType FacadeTaskHelper Literal ""javac1.2"" = IfStatement MethodInvocation JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_3 isJavaVersion BlockStatement StatementExpression Assignment MemberReference facade ClassCreator ReferenceType FacadeTaskHelper Literal ""javac1.3"" = IfStatement MethodInvocation JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_4 isJavaVersion BlockStatement StatementExpression Assignment MemberReference facade ClassCreator ReferenceType FacadeTaskHelper Literal ""javac1.4"" = IfStatement MethodInvocation JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_5 isJavaVersion BlockStatement StatementExpression Assignment MemberReference facade ClassCreator ReferenceType FacadeTaskHelper Literal ""javac1.5"" = BlockStatement StatementExpression Assignment MemberReference facade ClassCreator ReferenceType FacadeTaskHelper Literal ""classic"" = End End End End End MethodDeclaration /**
     * Get the value of debugLevel.
     * @return value of debugLevel.
     */ Modifier public ReferenceType String getDebugLevel ReturnStatement MemberReference debugLevel MethodDeclaration /**
     * Keyword list to be appended to the -g command-line switch.
     *
     * This will be ignored by all implementations except modern
     * and classic(ver >= 1.2). Legal values are none or a
     * comma-separated list of the following keywords: lines, vars,
     * and source. If debuglevel is not specified, by default, :none
     * will be appended to -g. If debug is not turned on, this attribute
     * will be ignored.
     *
     * @param v  Value to assign to debugLevel.
     */ Modifier public setDebugLevel FormalParameter ReferenceType String v StatementExpression Assignment This MemberReference debugLevel MemberReference v = MethodDeclaration /**
     * Get the value of source.
     * @return value of source.
     */ Modifier public ReferenceType String getSource ReturnStatement MemberReference source MethodDeclaration /**
     * Value of the -source command-line switch; will be ignored
     * by all implementations except modern and jikes.
     *
     * If you use this attribute together with jikes, you must
     * make sure that your version of jikes supports the -source switch.
     * Legal values are 1.3, 1.4 and 1.5 - by default, no -source argument
     * will be used at all.
     *
     * @param v  Value to assign to source.
     */ Modifier public setSource FormalParameter ReferenceType String v StatementExpression Assignment This MemberReference source MemberReference v = MethodDeclaration /**
     * Adds a path for source compilation.
     *
     * @return a nested src element.
     */ Modifier public ReferenceType Path createSrc IfStatement BinaryOperation == MemberReference src Literal null BlockStatement StatementExpression Assignment MemberReference src ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation src createPath MethodDeclaration /**
     * Recreate src.
     *
     * @return a nested src element.
     */ Modifier protected ReferenceType Path recreateSrc StatementExpression Assignment MemberReference src Literal null = ReturnStatement MethodInvocation createSrc MethodDeclaration /**
     * Set the source directories to find the source Java files.
     * @param srcDir the source directories as a path
     */ Modifier public setSrcdir FormalParameter ReferenceType Path srcDir IfStatement BinaryOperation == MemberReference src Literal null BlockStatement StatementExpression Assignment MemberReference src MemberReference srcDir = BlockStatement StatementExpression MethodInvocation src MemberReference srcDir append End MethodDeclaration /**
     * Gets the source dirs to find the source java files.
     * @return the source directories as a path
     */ Modifier public ReferenceType Path getSrcdir ReturnStatement MemberReference src MethodDeclaration /**
     * Set the destination directory into which the Java source
     * files should be compiled.
     * @param destDir the destination director
     */ Modifier public setDestdir FormalParameter ReferenceType File destDir StatementExpression Assignment This MemberReference destDir MemberReference destDir = MethodDeclaration /**
     * Gets the destination directory into which the java source files
     * should be compiled.
     * @return the destination directory
     */ Modifier public ReferenceType File getDestdir ReturnStatement MemberReference destDir MethodDeclaration /**
     * Set the sourcepath to be used for this compilation.
     * @param sourcepath the source path
     */ Modifier public setSourcepath FormalParameter ReferenceType Path sourcepath IfStatement BinaryOperation == MemberReference compileSourcepath Literal null BlockStatement StatementExpression Assignment MemberReference compileSourcepath MemberReference sourcepath = BlockStatement StatementExpression MethodInvocation compileSourcepath MemberReference sourcepath append End MethodDeclaration /**
     * Gets the sourcepath to be used for this compilation.
     * @return the source path
     */ Modifier public ReferenceType Path getSourcepath ReturnStatement MemberReference compileSourcepath MethodDeclaration /**
     * Adds a path to sourcepath.
     * @return a sourcepath to be configured
     */ Modifier public ReferenceType Path createSourcepath IfStatement BinaryOperation == MemberReference compileSourcepath Literal null BlockStatement StatementExpression Assignment MemberReference compileSourcepath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation compileSourcepath createPath MethodDeclaration /**
     * Adds a reference to a source path defined elsewhere.
     * @param r a reference to a source path
     */ Modifier public setSourcepathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createSourcepath MethodDeclaration /**
     * Set the classpath to be used for this compilation.
     *
     * @param classpath an Ant Path object containing the compilation classpath.
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath IfStatement BinaryOperation == MemberReference compileClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compileClasspath MemberReference classpath = BlockStatement StatementExpression MethodInvocation compileClasspath MemberReference classpath append End MethodDeclaration /**
     * Gets the classpath to be used for this compilation.
     * @return the class path
     */ Modifier public ReferenceType Path getClasspath ReturnStatement MemberReference compileClasspath MethodDeclaration /**
     * Adds a path to the classpath.
     * @return a class path to be configured
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == MemberReference compileClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compileClasspath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation compileClasspath createPath MethodDeclaration /**
     * Adds a reference to a classpath defined elsewhere.
     * @param r a reference to a classpath
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration /**
     * Sets the bootclasspath that will be used to compile the classes
     * against.
     * @param bootclasspath a path to use as a boot class path (may be more
     *                      than one)
     */ Modifier public setBootclasspath FormalParameter ReferenceType Path bootclasspath IfStatement BinaryOperation == This MemberReference bootclasspath Literal null BlockStatement StatementExpression Assignment This MemberReference bootclasspath MemberReference bootclasspath = BlockStatement StatementExpression This MemberReference bootclasspath MethodInvocation MemberReference bootclasspath append End MethodDeclaration /**
     * Gets the bootclasspath that will be used to compile the classes
     * against.
     * @return the boot path
     */ Modifier public ReferenceType Path getBootclasspath ReturnStatement MemberReference bootclasspath MethodDeclaration /**
     * Adds a path to the bootclasspath.
     * @return a path to be configured
     */ Modifier public ReferenceType Path createBootclasspath IfStatement BinaryOperation == MemberReference bootclasspath Literal null BlockStatement StatementExpression Assignment MemberReference bootclasspath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation bootclasspath createPath MethodDeclaration /**
     * Adds a reference to a classpath defined elsewhere.
     * @param r a reference to a classpath
     */ Modifier public setBootClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createBootclasspath MethodDeclaration /**
     * Sets the extension directories that will be used during the
     * compilation.
     * @param extdirs a path
     */ Modifier public setExtdirs FormalParameter ReferenceType Path extdirs IfStatement BinaryOperation == This MemberReference extdirs Literal null BlockStatement StatementExpression Assignment This MemberReference extdirs MemberReference extdirs = BlockStatement StatementExpression This MemberReference extdirs MethodInvocation MemberReference extdirs append End MethodDeclaration /**
     * Gets the extension directories that will be used during the
     * compilation.
     * @return the extension directories as a path
     */ Modifier public ReferenceType Path getExtdirs ReturnStatement MemberReference extdirs MethodDeclaration /**
     * Adds a path to extdirs.
     * @return a path to be configured
     */ Modifier public ReferenceType Path createExtdirs IfStatement BinaryOperation == MemberReference extdirs Literal null BlockStatement StatementExpression Assignment MemberReference extdirs ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation extdirs createPath MethodDeclaration /**
     * If true, list the source files being handed off to the compiler.
     * @param list if true list the source files
     */ Modifier public setListfiles FormalParameter BasicType boolean list StatementExpression Assignment MemberReference listFiles MemberReference list = MethodDeclaration /**
     * Get the listfiles flag.
     * @return the listfiles flag
     */ Modifier public BasicType boolean getListfiles ReturnStatement MemberReference listFiles MethodDeclaration /**
     * Indicates whether the build will continue
     * even if there are compilation errors; defaults to true.
     * @param fail if true halt the build on failure
     */ Modifier public setFailonerror FormalParameter BasicType boolean fail StatementExpression Assignment MemberReference failOnError MemberReference fail = MethodDeclaration /**
     * @ant.attribute ignore=""true""
     * @param proceed inverse of failoferror
     */ Modifier public setProceed FormalParameter BasicType boolean proceed StatementExpression Assignment MemberReference failOnError MemberReference ! proceed = MethodDeclaration /**
     * Gets the failonerror flag.
     * @return the failonerror flag
     */ Modifier public BasicType boolean getFailonerror ReturnStatement MemberReference failOnError MethodDeclaration /**
     * Indicates whether source should be
     * compiled with deprecation information; defaults to off.
     * @param deprecation if true turn on deprecation information
     */ Modifier public setDeprecation FormalParameter BasicType boolean deprecation StatementExpression Assignment This MemberReference deprecation MemberReference deprecation = MethodDeclaration /**
     * Gets the deprecation flag.
     * @return the deprecation flag
     */ Modifier public BasicType boolean getDeprecation ReturnStatement MemberReference deprecation MethodDeclaration /**
     * The initial size of the memory for the underlying VM
     * if javac is run externally; ignored otherwise.
     * Defaults to the standard VM memory setting.
     * (Examples: 83886080, 81920k, or 80m)
     * @param memoryInitialSize string to pass to VM
     */ Modifier public setMemoryInitialSize FormalParameter ReferenceType String memoryInitialSize StatementExpression Assignment This MemberReference memoryInitialSize MemberReference memoryInitialSize = MethodDeclaration /**
     * Gets the memoryInitialSize flag.
     * @return the memoryInitialSize flag
     */ Modifier public ReferenceType String getMemoryInitialSize ReturnStatement MemberReference memoryInitialSize MethodDeclaration /**
     * The maximum size of the memory for the underlying VM
     * if javac is run externally; ignored otherwise.
     * Defaults to the standard VM memory setting.
     * (Examples: 83886080, 81920k, or 80m)
     * @param memoryMaximumSize string to pass to VM
     */ Modifier public setMemoryMaximumSize FormalParameter ReferenceType String memoryMaximumSize StatementExpression Assignment This MemberReference memoryMaximumSize MemberReference memoryMaximumSize = MethodDeclaration /**
     * Gets the memoryMaximumSize flag.
     * @return the memoryMaximumSize flag
     */ Modifier public ReferenceType String getMemoryMaximumSize ReturnStatement MemberReference memoryMaximumSize MethodDeclaration /**
     * Set the Java source file encoding name.
     * @param encoding the source file encoding
     */ Modifier public setEncoding FormalParameter ReferenceType String encoding StatementExpression Assignment This MemberReference encoding MemberReference encoding = MethodDeclaration /**
     * Gets the java source file encoding name.
     * @return the source file encoding name
     */ Modifier public ReferenceType String getEncoding ReturnStatement MemberReference encoding MethodDeclaration /**
     * Indicates whether source should be compiled
     * with debug information; defaults to off.
     * @param debug if true compile with debug information
     */ Modifier public setDebug FormalParameter BasicType boolean debug StatementExpression Assignment This MemberReference debug MemberReference debug = MethodDeclaration /**
     * Gets the debug flag.
     * @return the debug flag
     */ Modifier public BasicType boolean getDebug ReturnStatement MemberReference debug MethodDeclaration /**
     * If true, compiles with optimization enabled.
     * @param optimize if true compile with optimization enabled
     */ Modifier public setOptimize FormalParameter BasicType boolean optimize StatementExpression Assignment This MemberReference optimize MemberReference optimize = MethodDeclaration /**
     * Gets the optimize flag.
     * @return the optimize flag
     */ Modifier public BasicType boolean getOptimize ReturnStatement MemberReference optimize MethodDeclaration /**
     * Enables dependency-tracking for compilers
     * that support this (jikes and classic).
     * @param depend if true enable dependency-tracking
     */ Modifier public setDepend FormalParameter BasicType boolean depend StatementExpression Assignment This MemberReference depend MemberReference depend = MethodDeclaration /**
     * Gets the depend flag.
     * @return the depend flag
     */ Modifier public BasicType boolean getDepend ReturnStatement MemberReference depend MethodDeclaration /**
     * If true, asks the compiler for verbose output.
     * @param verbose if true, asks the compiler for verbose output
     */ Modifier public setVerbose FormalParameter BasicType boolean verbose StatementExpression Assignment This MemberReference verbose MemberReference verbose = MethodDeclaration /**
     * Gets the verbose flag.
     * @return the verbose flag
     */ Modifier public BasicType boolean getVerbose ReturnStatement MemberReference verbose MethodDeclaration /**
     * Sets the target VM that the classes will be compiled for. Valid
     * values depend on the compiler, for jdk 1.4 the valid values are
     * ""1.1"", ""1.2"", ""1.3"", ""1.4"" and ""1.5"".
     * @param target the target VM
     */ Modifier public setTarget FormalParameter ReferenceType String target StatementExpression Assignment This MemberReference target MemberReference target = MethodDeclaration /**
     * Gets the target VM that the classes will be compiled for.
     * @return the target VM
     */ Modifier public ReferenceType String getTarget ReturnStatement MemberReference target MethodDeclaration /**
     * If true, includes Ant's own classpath in the classpath.
     * @param include if true, includes Ant's own classpath in the classpath
     */ Modifier public setIncludeantruntime FormalParameter BasicType boolean include StatementExpression Assignment MemberReference includeAntRuntime MemberReference include = MethodDeclaration /**
     * Gets whether or not the ant classpath is to be included in the classpath.
     * @return whether or not the ant classpath is to be included in the classpath
     */ Modifier public BasicType boolean getIncludeantruntime ReturnStatement MemberReference includeAntRuntime MethodDeclaration /**
     * If true, includes the Java runtime libraries in the classpath.
     * @param include if true, includes the Java runtime libraries in the classpath
     */ Modifier public setIncludejavaruntime FormalParameter BasicType boolean include StatementExpression Assignment MemberReference includeJavaRuntime MemberReference include = MethodDeclaration /**
     * Gets whether or not the java runtime should be included in this
     * task's classpath.
     * @return the includejavaruntime attribute
     */ Modifier public BasicType boolean getIncludejavaruntime ReturnStatement MemberReference includeJavaRuntime MethodDeclaration /**
     * If true, forks the javac compiler.
     *
     * @param f ""true|false|on|off|yes|no""
     */ Modifier public setFork FormalParameter BasicType boolean f StatementExpression Assignment MemberReference fork MemberReference f = MethodDeclaration /**
     * Sets the name of the javac executable.
     *
     * <p>Ignored unless fork is true or extJavac has been specified
     * as the compiler.</p>
     * @param forkExec the name of the executable
     */ Modifier public setExecutable FormalParameter ReferenceType String forkExec StatementExpression Assignment MemberReference forkedExecutable MemberReference forkExec = MethodDeclaration /**
     * The value of the executable attribute, if any.
     *
     * @since Ant 1.6
     * @return the name of the java executable
     */ Modifier public ReferenceType String getExecutable ReturnStatement MemberReference forkedExecutable MethodDeclaration /**
     * Is this a forked invocation of JDK's javac?
     * @return true if this is a forked invocation
     */ Modifier public BasicType boolean isForkedJavac ReturnStatement BinaryOperation || MemberReference fork Literal MethodInvocation MethodInvocation getCompiler equals ""extJavac"" MethodDeclaration /**
     * The name of the javac executable to use in fork-mode.
     *
     * <p>This is either the name specified with the executable
     * attribute or the full path of the javac compiler of the VM Ant
     * is currently running in - guessed by Ant.</p>
     *
     * <p>You should <strong>not</strong> invoke this method if you
     * want to get the value of the executable command - use {@link
     * #getExecutable getExecutable} for this.</p>
     * @return the name of the javac executable
     */ Modifier public ReferenceType String getJavacExecutable IfStatement BinaryOperation && BinaryOperation == MemberReference forkedExecutable Literal null MethodInvocation isForkedJavac BlockStatement StatementExpression Assignment MemberReference forkedExecutable MethodInvocation getSystemJavac = IfStatement BinaryOperation && BinaryOperation != MemberReference forkedExecutable Literal null MethodInvocation ! isForkedJavac BlockStatement StatementExpression Assignment MemberReference forkedExecutable Literal null = End End ReturnStatement MemberReference forkedExecutable MethodDeclaration /**
     * If true, enables the -nowarn option.
     * @param flag if true, enable the -nowarn option
     */ Modifier public setNowarn FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference nowarn MemberReference flag = MethodDeclaration /**
     * Should the -nowarn option be used.
     * @return true if the -nowarn option should be used
     */ Modifier public BasicType boolean getNowarn ReturnStatement MemberReference nowarn MethodDeclaration /**
     * Adds an implementation specific command-line argument.
     * @return a ImplementationSpecificArgument to be configured
     */ Modifier public ReferenceType ImplementationSpecificArgument createCompilerArg LocalVariableDeclaration ReferenceType ImplementationSpecificArgument VariableDeclarator arg ClassCreator ReferenceType ImplementationSpecificArgument StatementExpression MethodInvocation facade MemberReference arg addImplementationArgument ReturnStatement MemberReference arg MethodDeclaration /**
     * Get the additional implementation specific command line arguments.
     * @return array of command line arguments, guaranteed to be non-null.
     */ Modifier public ReferenceType String getCurrentCompilerArgs LocalVariableDeclaration ReferenceType String VariableDeclarator chosen MethodInvocation facade getExplicitChoice StatementExpression MethodInvocation facade MethodInvocation getCompiler setImplementation TryStatement ReturnStatement MethodInvocation facade getArgs StatementExpression MethodInvocation facade MemberReference chosen setImplementation MethodDeclaration /**
     * Where Ant should place temporary files.
     *
     * @since Ant 1.6
     * @param tmpDir the temporary directory
     */ Modifier public setTempdir FormalParameter ReferenceType File tmpDir StatementExpression Assignment This MemberReference tmpDir MemberReference tmpDir = MethodDeclaration /**
     * Where Ant should place temporary files.
     *
     * @since Ant 1.6
     * @return the temporary directory
     */ Modifier public ReferenceType File getTempdir ReturnStatement MemberReference tmpDir MethodDeclaration /**
     * Executes the task.
     * @exception BuildException if an error occurs
     */ Modifier public execute BuildException StatementExpression MethodInvocation checkParameters StatementExpression MethodInvocation resetFileLists LocalVariableDeclaration ReferenceType String VariableDeclarator list MethodInvocation src list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference list length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator srcDir MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i list resolveFile getProject IfStatement MethodInvocation ! srcDir exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""srcdir \"""" MethodInvocation srcDir getPath Literal ""\"" does not exist!"" MethodInvocation getLocation End LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds This MethodInvocation MemberReference srcDir getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation ds getIncludedFiles StatementExpression MethodInvocation MemberReference srcDir TernaryExpression BinaryOperation != MemberReference destDir Literal null MemberReference destDir MemberReference srcDir MemberReference files scanDir End StatementExpression MethodInvocation compile MethodDeclaration /**
     * Clear the list of files to be compiled and copied..
     */ Modifier protected resetFileLists StatementExpression Assignment MemberReference compileList ArrayCreator ReferenceType File Literal 0 = MethodDeclaration /**
     * Scans the directory looking for source files to be compiled.
     * The results are returned in the class variable compileList
     *
     * @param srcDir   The source directory
     * @param destDir  The destination directory
     * @param files    An array of filenames
     */ Modifier protected scanDir FormalParameter ReferenceType File srcDir FormalParameter ReferenceType File destDir FormalParameter ReferenceType String files LocalVariableDeclaration ReferenceType GlobPatternMapper VariableDeclarator m ClassCreator ReferenceType GlobPatternMapper StatementExpression MethodInvocation m Literal ""*.java"" setFrom StatementExpression MethodInvocation m Literal ""*.class"" setTo LocalVariableDeclaration ReferenceType SourceFileScanner VariableDeclarator sfs ClassCreator ReferenceType SourceFileScanner This LocalVariableDeclaration ReferenceType File VariableDeclarator newFiles MethodInvocation sfs MemberReference files MemberReference srcDir MemberReference destDir MemberReference m restrictAsFiles IfStatement BinaryOperation > MemberReference newFiles length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator newCompileList ArrayCreator ReferenceType File BinaryOperation + MemberReference compileList length MemberReference newFiles length StatementExpression MethodInvocation System MemberReference compileList Literal 0 MemberReference newCompileList Literal 0 MemberReference compileList length arraycopy StatementExpression MethodInvocation System MemberReference newFiles Literal 0 MemberReference newCompileList MemberReference compileList length MemberReference newFiles length arraycopy StatementExpression Assignment MemberReference compileList MemberReference newCompileList = End MethodDeclaration /**
     * Gets the list of files to be compiled.
     * @return the list of files as an array
     */ Modifier public ReferenceType File getFileList ReturnStatement MemberReference compileList MethodDeclaration /**
     * Is the compiler implementation a jdk compiler
     *
     * @param compilerImpl the name of the compiler implementation
     * @return true if compilerImpl is ""modern"", ""classic"", ""javac1.1"",
     *                 ""javac1.2"", ""javac1.3"", ""javac1.4"" or ""javac1.5"".
     */ Modifier protected BasicType boolean isJdkCompiler FormalParameter ReferenceType String compilerImpl ReturnStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || Literal MethodInvocation MemberReference compilerImpl equals ""modern"" Literal MethodInvocation MemberReference compilerImpl equals ""classic"" Literal MethodInvocation MemberReference compilerImpl equals ""javac1.1"" Literal MethodInvocation MemberReference compilerImpl equals ""javac1.2"" Literal MethodInvocation MemberReference compilerImpl equals ""javac1.3"" Literal MethodInvocation MemberReference compilerImpl equals ""javac1.4"" Literal MethodInvocation MemberReference compilerImpl equals ""javac1.5"" MethodDeclaration /**
     * @return the executable name of the java compiler
     */ Modifier protected ReferenceType String getSystemJavac ReturnStatement MethodInvocation JavaEnvUtils Literal ""javac"" getJdkExecutable MethodDeclaration /**
     * Choose the implementation for this particular task.
     * @param compiler the name of the compiler
     * @since Ant 1.5
     */ Modifier public setCompiler FormalParameter ReferenceType String compiler StatementExpression MethodInvocation facade MemberReference compiler setImplementation MethodDeclaration /**
     * The implementation for this particular task.
     *
     * <p>Defaults to the build.compiler property but can be overridden
     * via the compiler and fork attributes.</p>
     *
     * <p>If fork has been set to true, the result will be extJavac
     * and not classic or java1.2 - no matter what the compiler
     * attribute looks like.</p>
     *
     * @see #getCompilerVersion
     *
     * @since Ant 1.5
     */ Modifier public ReferenceType String getCompiler LocalVariableDeclaration ReferenceType String VariableDeclarator compilerImpl MethodInvocation getCompilerVersion IfStatement MemberReference fork BlockStatement IfStatement MethodInvocation MemberReference compilerImpl isJdkCompiler BlockStatement IfStatement MethodInvocation facade hasBeenSet BlockStatement StatementExpression MethodInvocation Literal ""Since fork is true, ignoring compiler setting."" MemberReference Project MSG_WARN log End StatementExpression Assignment MemberReference compilerImpl Literal ""extJavac"" = BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Since compiler setting isn't classic or modern,"" Literal ""ignoring fork setting."" MemberReference Project MSG_WARN log End End ReturnStatement MemberReference compilerImpl MethodDeclaration /**
     * The implementation for this particular task.
     *
     * <p>Defaults to the build.compiler property but can be overridden
     * via the compiler attribute.</p>
     *
     * <p>This method does not take the fork attribute into
     * account.</p>
     *
     * @see #getCompiler
     *
     * @since Ant 1.5
     */ Modifier public ReferenceType String getCompilerVersion StatementExpression MethodInvocation facade MethodInvocation MethodInvocation Literal ""build.compiler"" getProperty getProject setMagicValue ReturnStatement MethodInvocation facade getImplementation MethodDeclaration /**
     * Check that all required attributes have been set and nothing
     * silly has been entered.
     *
     * @since Ant 1.5
     * @exception BuildException if an error occurs
     */ Modifier protected checkParameters BuildException IfStatement BinaryOperation == MemberReference src Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""srcdir attribute must be set!"" MethodInvocation getLocation End IfStatement BinaryOperation == MethodInvocation src size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""srcdir attribute must be set!"" MethodInvocation getLocation End IfStatement BinaryOperation && BinaryOperation != MemberReference destDir Literal null MethodInvocation ! destDir isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""destination directory \"""" MemberReference destDir Literal ""\"" does not exist "" Literal ""or is not a directory"" MethodInvocation getLocation End MethodDeclaration /**
     * Perform the compilation.
     *
     * @since Ant 1.5
     */ Modifier protected compile LocalVariableDeclaration ReferenceType String VariableDeclarator compilerImpl MethodInvocation getCompiler IfStatement BinaryOperation > MemberReference compileList length Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Compiling "" MemberReference compileList length Literal "" source file"" TernaryExpression BinaryOperation == MemberReference compileList length Literal 1 Literal """" Literal ""s"" TernaryExpression BinaryOperation != MemberReference destDir Literal null BinaryOperation + Literal "" to "" MemberReference destDir Literal """" log IfStatement MemberReference listFiles BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference compileList length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator filename MemberReference ArraySelector MemberReference i MethodInvocation getAbsolutePath compileList StatementExpression MethodInvocation MemberReference filename log End End LocalVariableDeclaration ReferenceType CompilerAdapter VariableDeclarator adapter MethodInvocation CompilerAdapterFactory MemberReference compilerImpl This getCompiler StatementExpression MethodInvocation adapter This setJavac IfStatement MethodInvocation ! adapter execute BlockStatement IfStatement MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference FAIL_MSG MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference FAIL_MSG MemberReference Project MSG_ERR log End End End ClassDeclaration Modifier public /**
     * Adds an ""compiler"" attribute to Commandline$Attribute used to
     * filter command line attributes based on the current
     * implementation.
     */ ImplementationSpecificArgument MethodDeclaration /**
         * @param impl the name of the compiler
         */ Modifier public setCompiler FormalParameter ReferenceType String impl StatementExpression SuperMethodInvocation MemberReference impl setImplementation ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType util ReferenceType facade ReferenceType ImplementationSpecificArgument ReferenceType MatchingTask",0
571,571,,0
210,210,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ide Import java.io.File Import java.util.Vector InterfaceDeclaration /**
 * Helper interface for VAJ tasks. Encapsulates
 * the interface to the VAJ tool API.
 *
 */ VAJUtil ConstantDeclaration Modifier final static BasicType int VariableDeclarator MSG_DEBUG Literal 4 ConstantDeclaration Modifier final static BasicType int VariableDeclarator MSG_ERR Literal 0 ConstantDeclaration Modifier final static BasicType int VariableDeclarator MSG_INFO Literal 2 ConstantDeclaration Modifier final static BasicType int VariableDeclarator MSG_VERBOSE Literal 3 ConstantDeclaration Modifier final static BasicType int VariableDeclarator MSG_WARN Literal 1 MethodDeclaration /**
     * export the array of Packages
     */ exportPackages FormalParameter ReferenceType File dest FormalParameter ReferenceType String includePatterns FormalParameter ReferenceType String excludePatterns FormalParameter BasicType boolean exportClasses FormalParameter BasicType boolean exportDebugInfo FormalParameter BasicType boolean exportResources FormalParameter BasicType boolean exportSources FormalParameter BasicType boolean useDefaultExcludes FormalParameter BasicType boolean overwrite MethodDeclaration /**
     * Do the import.
     */ importFiles FormalParameter ReferenceType String importProject FormalParameter ReferenceType File srcDir FormalParameter ReferenceType String includePatterns FormalParameter ReferenceType String excludePatterns FormalParameter BasicType boolean importClasses FormalParameter BasicType boolean importResources FormalParameter BasicType boolean importSources FormalParameter BasicType boolean useDefaultExcludes MethodDeclaration /**
     * Load specified projects.
     */ loadProjects FormalParameter ReferenceType Vector projectDescriptions MethodDeclaration /**
     * Logs a message with the specified log level.
     */ log FormalParameter ReferenceType String msg FormalParameter BasicType int level",0
46,46,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.condition Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Simple String comparison condition.
 *
 * @since Ant 1.4
 * @version $Revision$
 */ Equals FieldDeclaration Modifier private ReferenceType String VariableDeclarator arg1 VariableDeclarator arg2 FieldDeclaration Modifier private BasicType boolean VariableDeclarator trim Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator caseSensitive Literal true MethodDeclaration /**
     * Set the first string
     *
     * @param a1 the first string
     */ Modifier public setArg1 FormalParameter ReferenceType String a1 StatementExpression Assignment MemberReference arg1 MemberReference a1 = MethodDeclaration /**
     * Set the second string
     *
     * @param a2 the second string
     */ Modifier public setArg2 FormalParameter ReferenceType String a2 StatementExpression Assignment MemberReference arg2 MemberReference a2 = MethodDeclaration /**
     * Should we want to trim the arguments before comparing them?
     * @param b if true trim the arguments
     * @since Ant 1.5
     */ Modifier public setTrim FormalParameter BasicType boolean b StatementExpression Assignment MemberReference trim MemberReference b = MethodDeclaration /**
     * Should the comparison be case sensitive?
     * @param b if true use a case sensitive comparison (this is the
     *          default)
     * @since Ant 1.5
     */ Modifier public setCasesensitive FormalParameter BasicType boolean b StatementExpression Assignment MemberReference caseSensitive MemberReference b = MethodDeclaration /**
     * @return true if the two strings are equal
     * @exception BuildException if the attributes are not set correctly
     */ Modifier public BasicType boolean eval BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference arg1 Literal null BinaryOperation == MemberReference arg2 Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""both arg1 and arg2 are required in "" Literal ""equals"" End IfStatement MemberReference trim BlockStatement StatementExpression Assignment MemberReference arg1 MethodInvocation arg1 trim = StatementExpression Assignment MemberReference arg2 MethodInvocation arg2 trim = End ReturnStatement TernaryExpression MemberReference caseSensitive MethodInvocation arg1 MemberReference arg2 equals MethodInvocation arg1 MemberReference arg2 equalsIgnoreCase ReferenceType Condition",0
648,648,,0
626,626,,0
577,577,,0
86,86,"CompilationUnit PackageDeclaration org.apache.tools.ant.types ClassDeclaration Modifier public /**
 * describes a File or a ZipEntry
 *
 * this class is meant to be used by classes needing to record path
 * and date/time information about a file, a zip entry or some similar
 * resource (URL, archive in a version control repository, ...)
 *
 * @since Ant 1.5.2
 */ Resource FieldDeclaration Modifier private ReferenceType String VariableDeclarator name Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator exists Literal true FieldDeclaration Modifier private BasicType long VariableDeclarator lastmodified Literal 0 FieldDeclaration Modifier private BasicType boolean VariableDeclarator directory Literal false ConstructorDeclaration Modifier public /**
     * default constructor
     */ Resource ConstructorDeclaration Modifier public /**
     * only sets the name.
     *
     * <p>This is a dummy, used for not existing resources.</p>
     *
     * @param name relative path of the resource.  Expects
     * &quot;/&quot; to be used as the directory separator.
     */ Resource FormalParameter ReferenceType String name StatementExpression ExplicitConstructorInvocation MemberReference name Literal false Literal 0 Literal false ConstructorDeclaration Modifier public /**
     * sets the name, lastmodified flag, and exists flag
     *
     * @param name relative path of the resource.  Expects
     * &quot;/&quot; to be used as the directory separator.
     */ Resource FormalParameter ReferenceType String name FormalParameter BasicType boolean exists FormalParameter BasicType long lastmodified StatementExpression ExplicitConstructorInvocation MemberReference name MemberReference exists MemberReference lastmodified Literal false ConstructorDeclaration Modifier public /**
     * @param name relative path of the resource.  Expects
     * &quot;/&quot; to be used as the directory separator.
     */ Resource FormalParameter ReferenceType String name FormalParameter BasicType boolean exists FormalParameter BasicType long lastmodified FormalParameter BasicType boolean directory StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment This MemberReference exists MemberReference exists = StatementExpression Assignment This MemberReference lastmodified MemberReference lastmodified = StatementExpression Assignment This MemberReference directory MemberReference directory = MethodDeclaration /**
     * name attribute will contain the path of a file relative to the
     * root directory of its fileset or the recorded path of a zip
     * entry.
     *
     * <p>example for a file with fullpath /var/opt/adm/resource.txt
     * in a file set with root dir /var/opt it will be
     * adm/resource.txt.</p>
     *
     * <p>&quot;/&quot; will be used as the directory separator.</p>
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * @param name relative path of the resource.  Expects
     * &quot;/&quot; to be used as the directory separator.
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * the exists attribute tells whether a file exists
     */ Modifier public BasicType boolean isExists ReturnStatement MemberReference exists MethodDeclaration Modifier public setExists FormalParameter BasicType boolean exists StatementExpression Assignment This MemberReference exists MemberReference exists = MethodDeclaration /**
     * tells the modification time in milliseconds since 01.01.1970 of
     *
     * @return 0 if the resource does not exist to mirror the behavior
     * of {@link java.io.File File}.
     */ Modifier public BasicType long getLastModified ReturnStatement TernaryExpression BinaryOperation || MemberReference ! exists BinaryOperation < MemberReference lastmodified Literal 0 Literal 0 MemberReference lastmodified MethodDeclaration Modifier public setLastModified FormalParameter BasicType long lastmodified StatementExpression Assignment This MemberReference lastmodified MemberReference lastmodified = MethodDeclaration /**
     * tells if the resource is a directory
     * @return boolean flag indicating if the resource is a directory
     */ Modifier public BasicType boolean isDirectory ReturnStatement MemberReference directory MethodDeclaration Modifier public setDirectory FormalParameter BasicType boolean directory StatementExpression Assignment This MemberReference directory MemberReference directory = MethodDeclaration /**
     * @return copy of this
     */ Modifier public ReferenceType Object clone TryStatement ReturnStatement SuperMethodInvocation clone CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType Error BinaryOperation + Literal ""CloneNotSupportedException for a "" Literal ""Clonable Resource caught?"" MethodDeclaration /**
     * delegates to a comparison of names.
     *
     * @since Ant 1.6
     */ Modifier public BasicType int compareTo FormalParameter ReferenceType Object other IfStatement BinaryOperation instanceof MemberReference other ReferenceType Resource BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException BinaryOperation + Literal ""Can only be compared with "" Literal ""Resources"" End LocalVariableDeclaration ReferenceType Resource VariableDeclarator r Cast ReferenceType Resource MemberReference other ReturnStatement MethodInvocation MethodInvocation MethodInvocation r getName compareTo getName ReferenceType Cloneable ReferenceType Comparable",0
191,191,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.starteam Import com.starbase.starteam.File Import com.starbase.starteam.Folder Import com.starbase.starteam.Item Import com.starbase.starteam.Status Import com.starbase.starteam.View Import com.starbase.starteam.ViewConfiguration Import java.io.IOException Import java.text.SimpleDateFormat Import java.util.Enumeration Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * Produces a listing of the contents of the StarTeam repository
 * at the specified view and StarTeamFolder.
 *
 * Created: Tue Dec 25 06:51:14 2001
 *
 * @version 1.0
 *
 * @ant.task name=""stlist"" category=""scm""
 */ StarTeamList FieldDeclaration Modifier private BasicType boolean VariableDeclarator listUncontrolled Literal true MethodDeclaration /**
     * List files, dates, and statuses as of this label; optional.
     * The label must exist in starteam or an exception will be thrown.
     * If not specified, the most recent version of each file will be listed.
     *
     * @param label the label to be listed
     */ Modifier public setLabel FormalParameter ReferenceType String label StatementExpression MethodInvocation MemberReference label _setLabel MethodDeclaration /**
     * List files, dates, and statuses as of this date; optional.
     * If not specified, the most recent version of each file will be listed.
     *
     * @param asOfDateParam the date as of which the listing to be made
     * @since Ant 1.6
     */ Modifier public setAsOfDate FormalParameter ReferenceType String asOfDateParam StatementExpression MethodInvocation MemberReference asOfDateParam _setAsOfDate MethodDeclaration /**
     * Date Format with which asOfDate parameter to be parsed; optional.
     * Must be a SimpleDateFormat compatible string.
     * If not specified, and asOfDateParam is specified, parse will use ISO8601
     * datetime and date formats.
     *
     * @param asOfDateFormat the SimpleDateFormat-compatible format string
     * @since Ant 1.6
     */ Modifier public setAsOfDateFormat FormalParameter ReferenceType String asOfDateFormat StatementExpression MethodInvocation MemberReference asOfDateFormat _setAsOfDateFormat MethodDeclaration /**
     * Override of base-class abstract function creates an
     * appropriately configured view for checkoutlists - either
     * the current view or a view from this.label.
     *
     * @param raw the unconfigured <code>View</code>
     * @return the snapshot <code>View</code> appropriately configured.
     */ Modifier protected ReferenceType View createSnapshotView FormalParameter ReferenceType View raw LocalVariableDeclaration BasicType int VariableDeclarator labelID MethodInvocation MemberReference raw getLabelID IfStatement BinaryOperation >= MemberReference labelID Literal 0 BlockStatement ReturnStatement ClassCreator ReferenceType View MemberReference raw MethodInvocation ViewConfiguration MemberReference labelID createFromLabel End LocalVariableDeclaration ReferenceType View VariableDeclarator view MethodInvocation MemberReference raw getViewConfiguredByDate IfStatement BinaryOperation != MemberReference view Literal null BlockStatement ReturnStatement MemberReference view BlockStatement ReturnStatement ClassCreator ReferenceType View MemberReference raw MethodInvocation ViewConfiguration createTip End MethodDeclaration /**
     * Required base-class abstract function implementation checks for
     * incompatible parameters.
     *
     * @exception BuildException thrown on incompatible params specified
     */ Modifier protected testPreconditions BuildException IfStatement BinaryOperation && BinaryOperation != Literal null MethodInvocation getLabel BinaryOperation != Literal null MethodInvocation getAsOfDate BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Both label and asOfDate specified.  "" Literal ""Unable to process request."" End MethodDeclaration /**
     * extenders should emit to the log an entry describing the parameters
     * that will be used by this operation.
     *
     * @param starteamrootFolder
     *               root folder in StarTeam for the operation
     * @param targetrootFolder
     *               root local folder for the operation (whether specified by the user or not.
     */ Modifier protected logOperationDescription FormalParameter ReferenceType Folder starteamrootFolder FormalParameter ReferenceType java ReferenceType io ReferenceType File targetrootFolder StatementExpression MethodInvocation BinaryOperation + BinaryOperation + TernaryExpression This MethodInvocation isRecursive Literal ""Recursive"" Literal ""Non-recursive"" Literal "" Listing of: "" MethodInvocation starteamrootFolder getFolderHierarchy log StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Listing against local folder"" TernaryExpression BinaryOperation == Literal null MethodInvocation getRootLocalFolder Literal "" (default): "" Literal "": "" MethodInvocation targetrootFolder getAbsolutePath MemberReference Project MSG_INFO log StatementExpression MethodInvocation logLabel StatementExpression MethodInvocation logAsOfDate StatementExpression MethodInvocation logIncludes StatementExpression MethodInvocation logExcludes MethodDeclaration /**
     * Implements base-class abstract function to perform the checkout
     * operation on the files in each folder of the tree.
     *
     * @param starteamFolder the StarTeam folder from which files to be
     *                       checked out
     * @param targetFolder the local mapping of rootStarteamFolder
     */ Modifier protected visit FormalParameter ReferenceType Folder starteamFolder FormalParameter ReferenceType java ReferenceType io ReferenceType File targetFolder BuildException TryStatement IfStatement BinaryOperation != Literal null MethodInvocation getRootLocalFolder BlockStatement StatementExpression MethodInvocation starteamFolder MethodInvocation targetFolder getAbsolutePath setAlternatePathFragment End LocalVariableDeclaration ReferenceType Folder VariableDeclarator subFolders MethodInvocation starteamFolder getSubFolders LocalVariableDeclaration ReferenceType Item VariableDeclarator files MethodInvocation starteamFolder MethodInvocation MemberReference FILE getTypeNames getItems LocalVariableDeclaration ReferenceType UnmatchedFileMap VariableDeclarator ufm ClassCreator MethodInvocation MethodInvocation targetFolder getAbsoluteFile MemberReference starteamFolder init ReferenceType UnmatchedListingMap StatementExpression MethodInvocation Literal """" log StatementExpression MethodInvocation BinaryOperation + Literal ""Listing StarTeam folder "" MethodInvocation starteamFolder getFolderHierarchy log StatementExpression MethodInvocation BinaryOperation + Literal "" against local folder "" MethodInvocation targetFolder getAbsolutePath log ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator eachFile Cast ReferenceType File MemberReference ArraySelector MemberReference i files LocalVariableDeclaration ReferenceType String VariableDeclarator filename MethodInvocation eachFile getName LocalVariableDeclaration ReferenceType java ReferenceType io ReferenceType File VariableDeclarator localFile ClassCreator ReferenceType java ReferenceType io ReferenceType File MemberReference targetFolder MemberReference filename StatementExpression MethodInvocation ufm MemberReference localFile removeControlledItem IfStatement MethodInvocation ! MemberReference filename shouldProcess BlockStatement ContinueStatement End StatementExpression MethodInvocation MemberReference eachFile MemberReference localFile list End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference subFolders length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType java ReferenceType io ReferenceType File VariableDeclarator targetSubfolder ClassCreator ReferenceType java ReferenceType io ReferenceType File MemberReference targetFolder MemberReference ArraySelector MemberReference i MethodInvocation getName subFolders StatementExpression MethodInvocation ufm MemberReference targetSubfolder removeControlledItem IfStatement MethodInvocation isRecursive BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i subFolders MemberReference targetSubfolder visit End End IfStatement This MemberReference listUncontrolled BlockStatement StatementExpression MethodInvocation ufm processUncontrolledItems End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e FieldDeclaration Modifier private final static ReferenceType SimpleDateFormat VariableDeclarator SDF ClassCreator ReferenceType SimpleDateFormat Literal ""yyyy-MM-dd hh:mm:ss zzz"" MethodDeclaration Modifier protected list FormalParameter ReferenceType File reposFile FormalParameter ReferenceType java ReferenceType io ReferenceType File localFile IOException LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator b ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType int VariableDeclarator status MethodInvocation reposFile getStatus LocalVariableDeclaration ReferenceType java ReferenceType util ReferenceType Date VariableDeclarator displayDate Literal null IfStatement BinaryOperation == MemberReference status MemberReference Status NEW BlockStatement StatementExpression Assignment MemberReference displayDate ClassCreator ReferenceType java ReferenceType util ReferenceType Date MethodInvocation localFile lastModified = BlockStatement StatementExpression Assignment MemberReference displayDate MethodInvocation reposFile MethodInvocation createDate getModifiedTime = End StatementExpression MethodInvocation b MethodInvocation Literal ' ' append MethodInvocation MethodInvocation Status MemberReference status name Literal 12 pad append StatementExpression MethodInvocation b MethodInvocation Literal ' ' append MethodInvocation MethodInvocation SDF MemberReference displayDate format append MethodInvocation MethodInvocation MethodInvocation String MethodInvocation reposFile getSize valueOf Literal 9 rpad append MethodInvocation Literal ' ' append MethodInvocation MethodInvocation reposFile getName append MethodInvocation MethodInvocation MethodInvocation reposFile getLocker getUserName Literal 20 pad append StatementExpression MethodInvocation MethodInvocation b toString log FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator blankstr MethodInvocation Literal 30 blanks MethodDeclaration Modifier private static ReferenceType String blanks FormalParameter BasicType int len LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator b ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference len MemberReference ++ i BlockStatement StatementExpression MethodInvocation b Literal ' ' append End ReturnStatement MethodInvocation b toString MethodDeclaration Modifier protected static ReferenceType String pad FormalParameter ReferenceType String s FormalParameter BasicType int padlen ReturnStatement BinaryOperation + MemberReference s MemberReference blankstr MethodDeclaration Modifier protected static ReferenceType String rpad FormalParameter ReferenceType String s FormalParameter BasicType int padlen StatementExpression Assignment MemberReference s BinaryOperation + MemberReference blankstr MemberReference s = ReturnStatement MethodInvocation s BinaryOperation - MethodInvocation s length MemberReference padlen substring ClassDeclaration Modifier private /**
     * handles the list of uncontrolled items
     */ UnmatchedListingMap MethodDeclaration Modifier protected BasicType boolean isActive ReturnStatement This StarTeamList MemberReference listUncontrolled MethodDeclaration /**
         * lists uncontrolled items from the local tree.  It is assumed
         * that this method will not be called until all the items in the
         * corresponding folder have been processed, and that the internal map
         * will contain only uncontrolled items.
         */ processUncontrolledItems BuildException IfStatement This MethodInvocation isActive BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e This MethodInvocation keys WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType java ReferenceType io ReferenceType File VariableDeclarator local Cast ReferenceType java ReferenceType io ReferenceType File MethodInvocation e nextElement LocalVariableDeclaration ReferenceType Item VariableDeclarator remoteItem Cast ReferenceType Item This MethodInvocation MemberReference local get IfStatement MethodInvocation local isFile BlockStatement LocalVariableDeclaration ReferenceType com ReferenceType starbase ReferenceType starteam ReferenceType File VariableDeclarator remoteFile Cast ReferenceType com ReferenceType starbase ReferenceType starteam ReferenceType File MemberReference remoteItem TryStatement StatementExpression MethodInvocation MemberReference remoteFile MemberReference local list CatchClause CatchClauseParameter IOException ie ThrowStatement ClassCreator ReferenceType BuildException Literal ""IOError in stlist"" MemberReference ie End End StatementExpression Assignment MemberReference e This MethodInvocation keys = WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType java ReferenceType io ReferenceType File VariableDeclarator local Cast ReferenceType java ReferenceType io ReferenceType File MethodInvocation e nextElement LocalVariableDeclaration ReferenceType Item VariableDeclarator remoteItem Cast ReferenceType Item This MethodInvocation MemberReference local get IfStatement MethodInvocation local isDirectory BlockStatement LocalVariableDeclaration ReferenceType Folder VariableDeclarator folder Cast ReferenceType Folder MemberReference remoteItem IfStatement MethodInvocation isRecursive BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Listing uncontrolled folder "" MethodInvocation folder getFolderHierarchy Literal "" from "" MethodInvocation local getAbsoluteFile log LocalVariableDeclaration ReferenceType UnmatchedFileMap VariableDeclarator submap ClassCreator MethodInvocation MemberReference local MemberReference folder init ReferenceType UnmatchedListingMap StatementExpression MethodInvocation submap processUncontrolledItems End End End End ReferenceType UnmatchedFileMap ReferenceType TreeBasedTask",1
323,323,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.compilers Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * The implementation of the jvc compiler from microsoft.
 * This is primarily a cut-and-paste from the original javac task before it
 * was refactored.
 *
 * @since Ant 1.3
 */ Jvc MethodDeclaration /**
     * Run the compilation.
     *
     * @exception BuildException if the compilation has problems.
     */ Modifier public BasicType boolean execute BuildException StatementExpression MethodInvocation attributes Literal ""Using jvc compiler"" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType Path VariableDeclarator classpath ClassCreator ReferenceType Path MemberReference project IfStatement BinaryOperation != MemberReference bootclasspath Literal null BlockStatement StatementExpression MethodInvocation classpath MemberReference bootclasspath append End IfStatement MemberReference includeJavaRuntime BlockStatement StatementExpression MethodInvocation classpath MemberReference extdirs addExtdirs End StatementExpression MethodInvocation classpath MethodInvocation getCompileClasspath append IfStatement BinaryOperation != MemberReference compileSourcepath Literal null BlockStatement StatementExpression MethodInvocation classpath MemberReference compileSourcepath append BlockStatement StatementExpression MethodInvocation classpath MemberReference src append End LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmd ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType String VariableDeclarator exec MethodInvocation MethodInvocation getExecutable getJavac StatementExpression MethodInvocation cmd TernaryExpression BinaryOperation == MemberReference exec Literal null Literal ""jvc"" MemberReference exec setExecutable IfStatement BinaryOperation != MemberReference destDir Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""/d"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference destDir setFile createArgument End StatementExpression MethodInvocation cmd MethodInvocation Literal ""/cp:p"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference classpath setPath createArgument LocalVariableDeclaration BasicType boolean VariableDeclarator msExtensions Literal true LocalVariableDeclaration ReferenceType String VariableDeclarator mse MethodInvocation MethodInvocation Literal ""build.compiler.jvc.extensions"" getProperty getProject IfStatement BinaryOperation != MemberReference mse Literal null BlockStatement StatementExpression Assignment MemberReference msExtensions MethodInvocation Project MemberReference mse toBoolean = End IfStatement MemberReference msExtensions BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""/x-"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation Literal ""/nomessage"" setValue createArgument End StatementExpression MethodInvocation cmd MethodInvocation Literal ""/nologo"" setValue createArgument IfStatement MemberReference debug BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""/g"" setValue createArgument End IfStatement MemberReference optimize BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""/O"" setValue createArgument End IfStatement MemberReference verbose BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""/verbose"" setValue createArgument End StatementExpression MethodInvocation MemberReference cmd addCurrentCompilerArgs LocalVariableDeclaration BasicType int VariableDeclarator firstFileName MethodInvocation cmd size StatementExpression MethodInvocation MemberReference cmd logAndAddFilesToCompile ReturnStatement BinaryOperation == MethodInvocation MethodInvocation cmd getCommandline MemberReference firstFileName executeExternalCompile Literal 0 ReferenceType DefaultCompilerAdapter",0
646,646,,1
390,390,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.sos Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Retrieves a read-only copy of the specified project or file
 * from Visual SourceSafe via a SourceOffSite server.
 *
 *
 * @ant.task name=""sosget"" category=""scm""
 */ SOSGet MethodDeclaration /**
     * The Filename to act upon.
     * If no file is specified then the tasks
     * act upon the project.
     *
     * @param  filename  The new file value
     */ Modifier public final setFile FormalParameter ReferenceType String filename StatementExpression SuperMethodInvocation MemberReference filename setInternalFilename MethodDeclaration /**
     * Flag to recursively apply the action. Defaults to false
     *
     * @param  recursive  True for recursive operation.
     */ Modifier public setRecursive FormalParameter BasicType boolean recursive StatementExpression SuperMethodInvocation MemberReference recursive setInternalRecursive MethodDeclaration /**
     * Set the version number to get -
     * only works with SOSGet on a file.
     *
     * @param  version  The new version value
     */ Modifier public setVersion FormalParameter ReferenceType String version StatementExpression SuperMethodInvocation MemberReference version setInternalVersion MethodDeclaration /**
     * The labeled version to operate on in SourceSafe.
     *
     * @param  label  The new label value
     */ Modifier public setLabel FormalParameter ReferenceType String label StatementExpression SuperMethodInvocation MemberReference label setInternalLabel MethodDeclaration /**
     * Build the command line <br>
     *
     * GetFile required parameters: -server -name -password -database -project -file<br>
     * GetFile optional parameters: -workdir -revision -verbose -nocache -nocompression -soshome<br>
     *
     * GetProject required parameters: -server -name -password -database -project<br>
     * GetProject optional parameters: -label -workdir -recursive -verbose -nocache
     * -nocompression -soshome<br>
     *
     * @return    Commandline the generated command to be executed
     */ Modifier protected ReferenceType Commandline buildCmdLine StatementExpression Assignment MemberReference commandLine ClassCreator ReferenceType Commandline = IfStatement BinaryOperation != MethodInvocation getFilename Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_COMMAND setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd COMMAND_GET_FILE setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_FILE setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getFilename setValue createArgument IfStatement BinaryOperation != MethodInvocation getVersion Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_VERSION setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getVersion setValue createArgument End BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_COMMAND setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd COMMAND_GET_PROJECT setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getRecursive setValue createArgument IfStatement BinaryOperation != MethodInvocation getLabel Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_LABEL setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getLabel setValue createArgument End End StatementExpression MethodInvocation getRequiredAttributes StatementExpression MethodInvocation getOptionalAttributes ReturnStatement MemberReference commandLine ReferenceType SOS",0
539,539,,0
387,387,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.util.StringTokenizer Import java.util.Vector Import java.util.List Import java.util.ArrayList Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.taskdefs.condition.Os Import org.apache.tools.ant.types.DirSet Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.FileList Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference Import org.apache.tools.ant.types.Mapper Import org.apache.tools.ant.util.FileNameMapper ClassDeclaration Modifier public /**
 * Converts path and classpath information to a specific target OS
 * format. The resulting formatted path is placed into the specified property.
 *
 * @since Ant 1.4
 * @ant.task category=""utility""
 */ PathConvert FieldDeclaration /**
     * Path to be converted
     */ Modifier private ReferenceType Path VariableDeclarator path Literal null FieldDeclaration /**
     * Reference to path/fileset to convert
     */ Modifier private ReferenceType Reference VariableDeclarator refid Literal null FieldDeclaration /**
     * The target OS type
     */ Modifier private ReferenceType String VariableDeclarator targetOS Literal null FieldDeclaration /**
     * Set when targetOS is set to windows
     */ Modifier private BasicType boolean VariableDeclarator targetWindows Literal false FieldDeclaration /**
     * Set if we're running on windows
     */ Modifier private BasicType boolean VariableDeclarator onWindows Literal false FieldDeclaration /**
     * Set if we should create a new property even if the result is empty
     */ Modifier private BasicType boolean VariableDeclarator setonempty Literal true FieldDeclaration /**
     * The property to receive the conversion
     */ Modifier private ReferenceType String VariableDeclarator property Literal null FieldDeclaration /**
     * Path prefix map
     */ Modifier private ReferenceType Vector VariableDeclarator prefixMap ClassCreator ReferenceType Vector FieldDeclaration /**
     * User override on path sep char
     */ Modifier private ReferenceType String VariableDeclarator pathSep Literal null FieldDeclaration /**
     * User override on directory sep char
     */ Modifier private ReferenceType String VariableDeclarator dirSep Literal null FieldDeclaration /** Filename mapper */ Modifier private ReferenceType Mapper VariableDeclarator mapper Literal null ConstructorDeclaration Modifier public /**
     * constructor
     */ PathConvert StatementExpression Assignment MemberReference onWindows MethodInvocation Os Literal ""dos"" isFamily = ClassDeclaration Modifier public /**
     * Helper class, holds the nested &lt;map&gt; values. Elements will look like
     * this: &lt;map from=&quot;d:&quot; to=&quot;/foo&quot;/&gt;
     *
     * When running on windows, the prefix comparison will be case
     * insensitive.
     */ MapEntry MethodDeclaration /**
         * the prefix string to search for; required.
         * Note that this value is case-insensitive when the build is
         * running on a Windows platform and case-sensitive when running on
         * a Unix platform.
         * @param from
         */ Modifier public setFrom FormalParameter ReferenceType String from StatementExpression Assignment This MemberReference from MemberReference from = MethodDeclaration /**
         *  The replacement text to use when from is matched; required.
         * @param to new prefix
         */ Modifier public setTo FormalParameter ReferenceType String to StatementExpression Assignment This MemberReference to MemberReference to = MethodDeclaration /**
         * Apply this map entry to a given path element
         *
         * @param elem Path element to process
         * @return String Updated path element after mapping
         */ Modifier public ReferenceType String apply FormalParameter ReferenceType String elem IfStatement BinaryOperation || BinaryOperation == MemberReference from Literal null BinaryOperation == MemberReference to Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Both 'from' and 'to' must be set "" Literal ""in a map entry"" End LocalVariableDeclaration ReferenceType String VariableDeclarator cmpElem TernaryExpression MemberReference onWindows MethodInvocation elem toLowerCase MemberReference elem LocalVariableDeclaration ReferenceType String VariableDeclarator cmpFrom TernaryExpression MemberReference onWindows MethodInvocation from toLowerCase MemberReference from IfStatement MethodInvocation cmpElem MemberReference cmpFrom startsWith BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation from length IfStatement BinaryOperation >= MemberReference len MethodInvocation elem length BlockStatement StatementExpression Assignment MemberReference elem MemberReference to = BlockStatement StatementExpression Assignment MemberReference elem BinaryOperation + MemberReference to MethodInvocation elem MemberReference len substring = End End ReturnStatement MemberReference elem FieldDeclaration Modifier private ReferenceType String VariableDeclarator from Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator to Literal null ClassDeclaration Modifier public static /**
     * an enumeration of supported targets:
     * windows"", ""unix"", ""netware"", and ""os/2"".
     */ TargetOs MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""windows"" Literal ""unix"" Literal ""netware"" Literal ""os/2"" Literal ""tandem"" ReferenceType EnumeratedAttribute MethodDeclaration /** Create a nested PATH element  */ Modifier public ReferenceType Path createPath IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End IfStatement BinaryOperation == MemberReference path Literal null BlockStatement StatementExpression Assignment MemberReference path ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation path createPath MethodDeclaration /**
     * Create a nested MAP element
     * @return a Map to configure
     */ Modifier public ReferenceType MapEntry createMap LocalVariableDeclaration ReferenceType MapEntry VariableDeclarator entry ClassCreator ReferenceType MapEntry StatementExpression MethodInvocation prefixMap MemberReference entry addElement ReturnStatement MemberReference entry MethodDeclaration /**
     * Set targetos to a platform to one of
     * ""windows"", ""unix"", ""netware"", or ""os/2"".
     *
     * Required unless unless pathsep and/or dirsep are specified.
     *
     * @deprecated use the method taking a TargetOs argument instead
     * @see #setTargetos(PathConvert.TargetOs)
     */ Modifier public setTargetos FormalParameter ReferenceType String target LocalVariableDeclaration ReferenceType TargetOs VariableDeclarator to ClassCreator ReferenceType TargetOs StatementExpression MethodInvocation to MemberReference target setValue StatementExpression MethodInvocation MemberReference to setTargetos MethodDeclaration /**
     * Set targetos to a platform to one of
     * ""windows"", ""unix"", ""netware"", or ""os/2""; required unless
     * unless pathsep and/or dirsep are specified.
     *
     * @since Ant 1.5
     */ Modifier public setTargetos FormalParameter ReferenceType TargetOs target StatementExpression Assignment MemberReference targetOS MethodInvocation target getValue = StatementExpression Assignment MemberReference targetWindows BinaryOperation && MethodInvocation ! targetOS Literal ""unix"" equals MethodInvocation ! targetOS Literal ""tandem"" equals = MethodDeclaration /**
     * Set setonempty
     *
     * If false, don't set the new property if the result is the empty string.
     * @param setonempty true or false
     *
     * @since Ant 1.5
     */ Modifier public setSetonempty FormalParameter BasicType boolean setonempty StatementExpression Assignment This MemberReference setonempty MemberReference setonempty = MethodDeclaration /**
     * The property into which the converted path will be placed.
     */ Modifier public setProperty FormalParameter ReferenceType String p StatementExpression Assignment MemberReference property MemberReference p = MethodDeclaration /**
     * Adds a reference to a Path, FileSet, DirSet, or FileList defined
     * elsewhere.
     */ Modifier public setRefid FormalParameter ReferenceType Reference r IfStatement BinaryOperation != MemberReference path Literal null BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End StatementExpression Assignment MemberReference refid MemberReference r = MethodDeclaration /**
     * Set the default path separator string;
     * defaults to current JVM
     * {@link java.io.File#pathSeparator File.pathSeparator}
     * @param sep path separator string
     */ Modifier public setPathSep FormalParameter ReferenceType String sep StatementExpression Assignment MemberReference pathSep MemberReference sep = MethodDeclaration /**
     * Set the default directory separator string;
     * defaults to current JVM {@link java.io.File#separator File.separator}
     * @param sep directory separator string
     */ Modifier public setDirSep FormalParameter ReferenceType String sep StatementExpression Assignment MemberReference dirSep MemberReference sep = MethodDeclaration /**
     * Has the refid attribute of this element been set?
     * @return true if refid is valid
     */ Modifier public BasicType boolean isReference ReturnStatement BinaryOperation != MemberReference refid Literal null MethodDeclaration /** Do the execution.
     * @throws BuildException if something is invalid
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Path VariableDeclarator savedPath MemberReference path LocalVariableDeclaration ReferenceType String VariableDeclarator savedPathSep MemberReference pathSep LocalVariableDeclaration ReferenceType String VariableDeclarator savedDirSep MemberReference dirSep TryStatement IfStatement MethodInvocation isReference BlockStatement StatementExpression Assignment MemberReference path ClassCreator MethodInvocation createPath ReferenceType Path MethodInvocation getProject = LocalVariableDeclaration ReferenceType Object VariableDeclarator obj MethodInvocation refid MethodInvocation getProject getReferencedObject IfStatement BinaryOperation instanceof MemberReference obj ReferenceType Path BlockStatement StatementExpression MethodInvocation path MemberReference refid setRefid IfStatement BinaryOperation instanceof MemberReference obj ReferenceType FileSet BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MemberReference obj StatementExpression MethodInvocation path MemberReference fs addFileset IfStatement BinaryOperation instanceof MemberReference obj ReferenceType DirSet BlockStatement LocalVariableDeclaration ReferenceType DirSet VariableDeclarator ds Cast ReferenceType DirSet MemberReference obj StatementExpression MethodInvocation path MemberReference ds addDirset IfStatement BinaryOperation instanceof MemberReference obj ReferenceType FileList BlockStatement LocalVariableDeclaration ReferenceType FileList VariableDeclarator fl Cast ReferenceType FileList MemberReference obj StatementExpression MethodInvocation path MemberReference fl addFilelist BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""'refid' does not refer to a "" Literal ""path, fileset, dirset, or "" Literal ""filelist."" End End End End End StatementExpression MethodInvocation validateSetup LocalVariableDeclaration ReferenceType String VariableDeclarator fromDirSep TernaryExpression MemberReference onWindows Literal ""\\"" Literal ""/"" LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator rslt ClassCreator ReferenceType StringBuffer Literal 100 LocalVariableDeclaration ReferenceType String VariableDeclarator elems MethodInvocation path list IfStatement BinaryOperation != MemberReference mapper Literal null BlockStatement LocalVariableDeclaration ReferenceType FileNameMapper VariableDeclarator impl MethodInvocation mapper getImplementation LocalVariableDeclaration ReferenceType List VariableDeclarator ret ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elems length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator mapped MethodInvocation impl MemberReference ArraySelector MemberReference i elems mapFileName ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator m Literal 0 BinaryOperation && BinaryOperation != MemberReference mapped Literal null BinaryOperation < MemberReference m MemberReference mapped length MemberReference ++ m BlockStatement StatementExpression MethodInvocation ret MemberReference ArraySelector MemberReference m mapped add End End StatementExpression Assignment MemberReference elems Cast ReferenceType String MethodInvocation ret ArrayCreator ReferenceType String ArrayInitializer toArray = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elems length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator elem MemberReference ArraySelector MemberReference i elems StatementExpression Assignment MemberReference elem MethodInvocation MemberReference elem mapElement = IfStatement BinaryOperation != MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation rslt MemberReference pathSep append End LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator stDirectory ClassCreator ReferenceType StringTokenizer MemberReference elem MemberReference fromDirSep Literal true LocalVariableDeclaration ReferenceType String VariableDeclarator token Literal null WhileStatement MethodInvocation stDirectory hasMoreTokens BlockStatement StatementExpression Assignment MemberReference token MethodInvocation stDirectory nextToken = IfStatement MethodInvocation fromDirSep MemberReference token equals BlockStatement StatementExpression MethodInvocation rslt MemberReference dirSep append BlockStatement StatementExpression MethodInvocation rslt MemberReference token append End End End LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation rslt toString IfStatement MemberReference setonempty BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Set property "" MemberReference property Literal "" = "" MemberReference value MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation MethodInvocation MemberReference property MemberReference value setNewProperty getProject BlockStatement IfStatement BinaryOperation > MethodInvocation rslt length Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Set property "" MemberReference property Literal "" = "" MemberReference value MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation MethodInvocation MemberReference property MemberReference value setNewProperty getProject End End StatementExpression Assignment MemberReference path MemberReference savedPath = StatementExpression Assignment MemberReference dirSep MemberReference savedDirSep = StatementExpression Assignment MemberReference pathSep MemberReference savedPathSep = MethodDeclaration /**
     * Apply the configured map to a path element. The map is used to convert
     * between Windows drive letters and Unix paths. If no map is configured,
     * then the input string is returned unchanged.
     *
     * @param elem The path element to apply the map to
     * @return String Updated element
     */ Modifier private ReferenceType String mapElement FormalParameter ReferenceType String elem LocalVariableDeclaration BasicType int VariableDeclarator size MethodInvocation prefixMap size IfStatement BinaryOperation != MemberReference size Literal 0 BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType MapEntry VariableDeclarator entry Cast ReferenceType MapEntry MethodInvocation prefixMap MemberReference i elementAt LocalVariableDeclaration ReferenceType String VariableDeclarator newElem MethodInvocation entry MemberReference elem apply IfStatement BinaryOperation != MemberReference newElem MemberReference elem BlockStatement StatementExpression Assignment MemberReference elem MemberReference newElem = BreakStatement End End End ReturnStatement MemberReference elem MethodDeclaration /**
     * Add a mapper to convert the file names.
     *
     * @param mapper a <code>Mapper</code> value
     */ Modifier public addMapper FormalParameter ReferenceType Mapper mapper IfStatement BinaryOperation != This MemberReference mapper Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Cannot define more than one mapper"" End StatementExpression Assignment This MemberReference mapper MemberReference mapper = MethodDeclaration /**
     * Validate that all our parameters have been properly initialized.
     *
     * @throws BuildException if something is not setup properly
     */ Modifier private validateSetup BuildException IfStatement BinaryOperation == MemberReference path Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""You must specify a path to convert"" End IfStatement BinaryOperation == MemberReference property Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""You must specify a property"" End IfStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference targetOS Literal null BinaryOperation == MemberReference pathSep Literal null BinaryOperation == MemberReference dirSep Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You must specify at least one of "" Literal ""targetOS, dirSep, or pathSep"" End LocalVariableDeclaration ReferenceType String VariableDeclarator dsep MemberReference File separator LocalVariableDeclaration ReferenceType String VariableDeclarator psep MemberReference File pathSeparator IfStatement BinaryOperation != MemberReference targetOS Literal null BlockStatement StatementExpression Assignment MemberReference psep TernaryExpression MemberReference targetWindows Literal "";"" Literal "":"" = StatementExpression Assignment MemberReference dsep TernaryExpression MemberReference targetWindows Literal ""\\"" Literal ""/"" = End IfStatement BinaryOperation != MemberReference pathSep Literal null BlockStatement StatementExpression Assignment MemberReference psep MemberReference pathSep = End IfStatement BinaryOperation != MemberReference dirSep Literal null BlockStatement StatementExpression Assignment MemberReference dsep MemberReference dirSep = End StatementExpression Assignment MemberReference pathSep MemberReference psep = StatementExpression Assignment MemberReference dirSep MemberReference dsep = MethodDeclaration /**
     * Creates an exception that indicates that this XML element must not have
     * child elements if the refid attribute is set.
     */ Modifier private ReferenceType BuildException noChildrenAllowed ReturnStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You must not specify nested <path> "" Literal ""elements when using the refid attribute."" ReferenceType Task",0
214,214,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.clearcase Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Performs ClearCase mkelem.
 *
 * <p>
 * The following attributes are interpreted:
 * <table border=""1"">
 *   <tr>
 *     <th>Attribute</th>
 *     <th>Values</th>
 *     <th>Required</th>
 *   </tr>
 *   <tr>
 *      <td>viewpath</td>
 *      <td>Path to the ClearCase view file or directory that the command will operate on</td>
 *      <td>Yes</td>
 *   <tr>
 *   <tr>
 *      <td>comment</td>
 *      <td>Specify a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>commentfile</td>
 *      <td>Specify a file containing a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>nowarn</td>
 *      <td>Suppress warning messages</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>nocheckout</td>
 *      <td>Do not checkout after element creation</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>checkin</td>
 *      <td>Checkin element after creation</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>preservetime</td>
 *      <td>Preserve the modification time (for checkin)</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>master</td>
 *      <td>Assign mastership of the main branch to the current site</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>eltype</td>
 *      <td>Element type to use during element creation</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>failonerr</td>
 *      <td>Throw an exception if the command fails. Default is true</td>
 *      <td>No</td>
 *   <tr>
 * </table>
 *
 */ CCMkelem FieldDeclaration Modifier private ReferenceType String VariableDeclarator mComment Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mCfile Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator mNwarn Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mPtime Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mNoco Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mCheckin Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mMaster Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator mEltype Literal null MethodDeclaration /**
     * Executes the task.
     * <p>
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType Project VariableDeclarator aProj MethodInvocation getProject LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 IfStatement BinaryOperation == MethodInvocation getViewPath Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation aProj MethodInvocation getPath getBaseDir setViewPath End StatementExpression MethodInvocation commandLine MethodInvocation getClearToolCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_MKELEM setValue createArgument StatementExpression MethodInvocation MemberReference commandLine checkOptions IfStatement MethodInvocation ! getFailOnErr BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Ignoring any errors that occur for: "" MethodInvocation getViewPathBasename MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine run = IfStatement BinaryOperation && MethodInvocation Execute MemberReference result isFailure MethodInvocation getFailOnErr BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * Check the command line options.
     */ Modifier private checkOptions FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentCommand BlockStatement IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentFileCommand BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOCOMMENT setValue createArgument End End IfStatement MethodInvocation getNoWarn BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOWARN setValue createArgument End IfStatement BinaryOperation && MethodInvocation getNoCheckout MethodInvocation getCheckin BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Should choose either [nocheckout | checkin]"" End IfStatement MethodInvocation getNoCheckout BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOCHECKOUT setValue createArgument End IfStatement MethodInvocation getCheckin BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_CHECKIN setValue createArgument IfStatement MethodInvocation getPreserveTime BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_PRESERVETIME setValue createArgument End End IfStatement MethodInvocation getMaster BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_MASTER setValue createArgument End IfStatement BinaryOperation != MethodInvocation getEltype Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getEltypeCommand End StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getViewPath setValue createArgument MethodDeclaration /**
     * Sets the comment string.
     *
     * @param comment the comment string
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression Assignment MemberReference mComment MemberReference comment = MethodDeclaration /**
     * Get comment string
     *
     * @return String containing the comment
     */ Modifier public ReferenceType String getComment ReturnStatement MemberReference mComment MethodDeclaration /**
     * Specifies a file containing a comment.
     *
     * @param cfile the path to the comment file
     */ Modifier public setCommentFile FormalParameter ReferenceType String cfile StatementExpression Assignment MemberReference mCfile MemberReference cfile = MethodDeclaration /**
     * Get comment file
     *
     * @return String containing the path to the comment file
     */ Modifier public ReferenceType String getCommentFile ReturnStatement MemberReference mCfile MethodDeclaration /**
     * If true, suppress warning messages.
     *
     * @param nwarn the status to set the flag to
     */ Modifier public setNoWarn FormalParameter BasicType boolean nwarn StatementExpression Assignment MemberReference mNwarn MemberReference nwarn = MethodDeclaration /**
     * Get nowarn flag status
     *
     * @return boolean containing status of nwarn flag
     */ Modifier public BasicType boolean getNoWarn ReturnStatement MemberReference mNwarn MethodDeclaration /**
     * If true, preserve the modification time.
     *
     * @param ptime the status to set the flag to
     */ Modifier public setPreserveTime FormalParameter BasicType boolean ptime StatementExpression Assignment MemberReference mPtime MemberReference ptime = MethodDeclaration /**
     * Get preservetime flag status
     *
     * @return boolean containing status of preservetime flag
     */ Modifier public BasicType boolean getPreserveTime ReturnStatement MemberReference mPtime MethodDeclaration /**
     * If true, do not checkout element after creation.
     *
     * @param co the status to set the flag to
     */ Modifier public setNoCheckout FormalParameter BasicType boolean co StatementExpression Assignment MemberReference mNoco MemberReference co = MethodDeclaration /**
     * Get no checkout flag status
     *
     * @return boolean containing status of noco flag
     */ Modifier public BasicType boolean getNoCheckout ReturnStatement MemberReference mNoco MethodDeclaration /**
     * If true, checkin the element after creation
     *
     * @param ci the status to set the flag to
     */ Modifier public setCheckin FormalParameter BasicType boolean ci StatementExpression Assignment MemberReference mCheckin MemberReference ci = MethodDeclaration /**
     * Get ci flag status
     *
     * @return boolean containing status of ci flag
     */ Modifier public BasicType boolean getCheckin ReturnStatement MemberReference mCheckin MethodDeclaration /**
     * If true, changes mastership of the main branch
     * to the current site
     *
     * @param master the status to set the flag to
     */ Modifier public setMaster FormalParameter BasicType boolean master StatementExpression Assignment MemberReference mMaster MemberReference master = MethodDeclaration /**
     * Get master flag status
     *
     * @return boolean containing status of master flag
     */ Modifier public BasicType boolean getMaster ReturnStatement MemberReference mMaster MethodDeclaration /**
     * Specifies the element type to use.
     *
     * @param eltype to create element
     */ Modifier public setEltype FormalParameter ReferenceType String eltype StatementExpression Assignment MemberReference mEltype MemberReference eltype = MethodDeclaration /**
     * Get element type
     *
     * @return String containing the element type
     */ Modifier public ReferenceType String getEltype ReturnStatement MemberReference mEltype MethodDeclaration /**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or
     *            without the comment flag and string appended
     */ Modifier private getCommentCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENT setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getComment setValue createArgument End MethodDeclaration /**
     * Get the 'commentfile' command
     *
     * @param cmd containing the command line string with or
     *            without the commentfile flag and file appended
     */ Modifier private getCommentFileCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENTFILE setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getCommentFile setValue createArgument End MethodDeclaration /**
     * Get the 'element type' command
     *
     * @param cmd containing the command line string with or
     *            without the comment flag and string appended
     */ Modifier private getEltypeCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getEltype Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_ELTYPE setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getEltype setValue createArgument End FieldDeclaration /**
     * -c flag -- comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENT Literal ""-c"" FieldDeclaration /**
     * -cfile flag -- file containing a comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENTFILE Literal ""-cfile"" FieldDeclaration /**
     * -nc flag -- no comment is specified
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOCOMMENT Literal ""-nc"" FieldDeclaration /**
     * -nwarn flag -- suppresses warning messages
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOWARN Literal ""-nwarn"" FieldDeclaration /**
     * -ptime flag -- preserves the modification time on checkin
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_PRESERVETIME Literal ""-ptime"" FieldDeclaration /**
     * -nco flag -- do not checkout element after creation
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOCHECKOUT Literal ""-nco"" FieldDeclaration /**
     * -ci flag -- checkin element after creation
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_CHECKIN Literal ""-ci"" FieldDeclaration /**
     * -master flag -- change mastership of main branch to current site
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_MASTER Literal ""-master"" FieldDeclaration /**
     * -eltype flag -- element type to use during creation
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_ELTYPE Literal ""-eltype"" ReferenceType ClearCase",1
120,120,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.metamata Import java.io.File Import java.util.Vector Import org.apache.tools.ant.util.StringUtils Import org.apache.tools.ant.util.regexp.RegexpMatcher Import org.apache.tools.ant.util.regexp.RegexpMatcherFactory ClassDeclaration Modifier final /**
 * Parser that will parse an output line of MAudit and return an
 * interpreted violation if any.
 *
 * <p>
 * MAudit is supposed to be configured with -fullpath so that it can
 * correctly locate the file and attribute violation to the appropriate
 * file (there might be several classes with the same name in
 * different packages)
 * </p>
 *
 */ MAuditParser FieldDeclaration /** RE does not seems to support regexp pattern with comments so i'm stripping it*/ Modifier private final static ReferenceType String VariableDeclarator AUDIT_PATTERN Literal ""(?:file:)?(.+):(\\d+)\\s*:\\s+(.*)"" FieldDeclaration /** matcher that will be used to extract the info from the line */ Modifier private final ReferenceType RegexpMatcher VariableDeclarator matcher ConstructorDeclaration MAuditParser StatementExpression Assignment MemberReference matcher ClassCreator MethodInvocation newRegexpMatcher ReferenceType RegexpMatcherFactory = StatementExpression MethodInvocation matcher MemberReference AUDIT_PATTERN setPattern MethodDeclaration /**
     * Parse a line obtained from MAudit.
     * @param line a line obtained from the MAudit output.
     * @return the violation corresponding to the displayed line
     * or <tt>null</tt> if it could not parse it. (might be a
     * message info or copyright or summary).
     */ ReferenceType Violation parseLine FormalParameter ReferenceType String line LocalVariableDeclaration ReferenceType Vector VariableDeclarator matches MethodInvocation matcher MemberReference line getGroups IfStatement BinaryOperation == MemberReference matches Literal null BlockStatement ReturnStatement Literal null End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator file Cast ReferenceType String MethodInvocation matches Literal 1 elementAt LocalVariableDeclaration ReferenceType Violation VariableDeclarator violation ClassCreator ReferenceType Violation StatementExpression Assignment MemberReference violation file MemberReference file = StatementExpression Assignment MemberReference violation line Cast ReferenceType String MethodInvocation matches Literal 2 elementAt = StatementExpression Assignment MemberReference violation error Cast ReferenceType String MethodInvocation matches Literal 3 elementAt = LocalVariableDeclaration Modifier final BasicType int VariableDeclarator pos MethodInvocation file MemberReference File separatorChar lastIndexOf IfStatement BinaryOperation && BinaryOperation != MemberReference pos Literal - 1 BinaryOperation != MemberReference pos BinaryOperation - MethodInvocation file length Literal 1 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator filename MethodInvocation file BinaryOperation + MemberReference pos Literal 1 substring StatementExpression Assignment MemberReference violation error MethodInvocation StringUtils MemberReference violation error BinaryOperation + Literal ""file:"" MemberReference file MemberReference filename replace = End ReturnStatement MemberReference violation ClassDeclaration Modifier final static /** the inner class used to report violation information */ Violation FieldDeclaration ReferenceType String VariableDeclarator file FieldDeclaration ReferenceType String VariableDeclarator line FieldDeclaration ReferenceType String VariableDeclarator error",0
47,47,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.condition.Condition Import org.apache.tools.ant.taskdefs.condition.ConditionBase ClassDeclaration Modifier public /**
 * Task to set a property conditionally using &lt;uptodate&gt;, &lt;available&gt;,
 * and many other supported conditions.
 *
 * <p>This task supports boolean logic as well as pluggable conditions
 * to decide, whether a property should be set.</p>
 *
 * <p>This task does not extend Task to take advantage of
 * ConditionBase.</p>
 *
 * @version $Revision$
 *
 * @since Ant 1.4
 *
 * @ant.task category=""control""
 */ ConditionTask FieldDeclaration Modifier private ReferenceType String VariableDeclarator property Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator value Literal ""true"" MethodDeclaration /**
     * The name of the property to set. Required.
     * @param p the name of the property
     * @since Ant 1.4
     */ Modifier public setProperty FormalParameter ReferenceType String p StatementExpression Assignment MemberReference property MemberReference p = MethodDeclaration /**
     * The value for the property to set, if condition evaluates to true.
     * Defaults to ""true"".
     * @param v the value of the property
     * @since Ant 1.4
     */ Modifier public setValue FormalParameter ReferenceType String v StatementExpression Assignment MemberReference value MemberReference v = MethodDeclaration /**
     * See whether our nested condition holds and set the property.
     *
     * @since Ant 1.4
     * @exception BuildException if an error occurs
     */ Modifier public execute BuildException IfStatement BinaryOperation > MethodInvocation countConditions Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You must not nest more than one "" Literal ""condition into <condition>"" End IfStatement BinaryOperation < MethodInvocation countConditions Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You must nest a condition into "" Literal ""<condition>"" End IfStatement BinaryOperation == MemberReference property Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""The property attribute is required."" End LocalVariableDeclaration ReferenceType Condition VariableDeclarator c Cast ReferenceType Condition MethodInvocation MethodInvocation nextElement getConditions IfStatement MethodInvocation c eval BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Condition true; setting "" MemberReference property Literal "" to "" MemberReference value MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation MethodInvocation MemberReference property MemberReference value setNewProperty getProject BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Condition false; not setting "" MemberReference property MemberReference Project MSG_DEBUG log End ReferenceType ConditionBase",0
79,79,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.compilers Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * The implementation of the sj compiler.
 * Uses the defaults for DefaultCompilerAdapter
 *
 * @since Ant 1.4
 */ Sj MethodDeclaration /**
     * Performs a compile using the sj compiler from Symantec.
     */ Modifier public BasicType boolean execute BuildException StatementExpression MethodInvocation attributes Literal ""Using symantec java compiler"" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmd MethodInvocation setupJavacCommand LocalVariableDeclaration ReferenceType String VariableDeclarator exec MethodInvocation MethodInvocation getExecutable getJavac StatementExpression MethodInvocation cmd TernaryExpression BinaryOperation == MemberReference exec Literal null Literal ""sj"" MemberReference exec setExecutable LocalVariableDeclaration BasicType int VariableDeclarator firstFileName BinaryOperation - MethodInvocation cmd size MemberReference compileList length ReturnStatement BinaryOperation == MethodInvocation MethodInvocation cmd getCommandline MemberReference firstFileName executeExternalCompile Literal 0 ReferenceType DefaultCompilerAdapter",1
269,269,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.jsp Import java.io.File Import java.util.Date Import java.util.Enumeration Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.MatchingTask Import org.apache.tools.ant.taskdefs.optional.jsp.compilers.JspCompilerAdapter Import org.apache.tools.ant.taskdefs.optional.jsp.compilers.JspCompilerAdapterFactory Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference ClassDeclaration Modifier public /**
 * Runs a JSP compiler.
 *
 * <p> This task takes the given jsp files and compiles them into java
 * files. It is then up to the user to compile the java files into classes.
 *
 * <p> The task requires the srcdir and destdir attributes to be
 * set. This Task is a MatchingTask, so the files to be compiled can be
 * specified using includes/excludes attributes or nested include/exclude
 * elements. Optional attributes are verbose (set the verbosity level passed
 * to jasper), package (name of the destination package for generated java
 * classes and classpath (the classpath to use when running the jsp
 * compiler).
 * <p> This task supports the nested elements classpath (A Path) and
 * classpathref (A Reference) which can be used in preference to the
 * attribute classpath, if the jsp compiler is not already in the ant
 * classpath.
 *
 * <p><h4>Usage</h4>
 * <pre>
 * &lt;jspc srcdir=""${basedir}/src/war""
 *       destdir=""${basedir}/gensrc""
 *       package=""com.i3sp.jsp""
 *       verbose=""9""&gt;
 *   &lt;include name=""**\/*.jsp"" /&gt;
 * &lt;/jspc&gt;
 * </pre>
 *
 * @since 1.5
 */ JspC FieldDeclaration Modifier private ReferenceType Path VariableDeclarator classpath FieldDeclaration Modifier private ReferenceType Path VariableDeclarator compilerClasspath FieldDeclaration Modifier private ReferenceType Path VariableDeclarator src FieldDeclaration Modifier private ReferenceType File VariableDeclarator destDir FieldDeclaration Modifier private ReferenceType String VariableDeclarator packageName FieldDeclaration /** name of the compiler to use */ Modifier private ReferenceType String VariableDeclarator compilerName Literal ""jasper"" FieldDeclaration /**
     *  -ieplugin &lt;clsid&gt; Java Plugin classid for Internet Explorer
     */ Modifier private ReferenceType String VariableDeclarator iepluginid FieldDeclaration Modifier private BasicType boolean VariableDeclarator mapped FieldDeclaration Modifier private BasicType int VariableDeclarator verbose Literal 0 FieldDeclaration Modifier protected ReferenceType Vector VariableDeclarator compileList ClassCreator ReferenceType Vector FieldDeclaration ReferenceType Vector VariableDeclarator javaFiles ClassCreator ReferenceType Vector FieldDeclaration /**
     *  flag to control action on execution trouble
     */ Modifier protected BasicType boolean VariableDeclarator failOnError Literal true FieldDeclaration /**
     *  -uriroot &lt;dir&gt; The root directory that uri files should be resolved
     *  against,
     */ Modifier private ReferenceType File VariableDeclarator uriroot FieldDeclaration /**
     *  -webinc &lt;file&gt; Creates partial servlet mappings for the -webapp option
     */ Modifier private ReferenceType File VariableDeclarator webinc FieldDeclaration /**
     *  -webxml &lt;file&gt; Creates a complete web.xml when using the -webapp option.
     */ Modifier private ReferenceType File VariableDeclarator webxml FieldDeclaration /**
     *  web apps
     */ Modifier protected ReferenceType WebAppParameter VariableDeclarator webApp FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator FAIL_MSG Literal ""Compile failed, messages should have been provided."" MethodDeclaration /**
     * Set the path for source JSP files.
     */ Modifier public setSrcDir FormalParameter ReferenceType Path srcDir IfStatement BinaryOperation == MemberReference src Literal null BlockStatement StatementExpression Assignment MemberReference src MemberReference srcDir = BlockStatement StatementExpression MethodInvocation src MemberReference srcDir append End MethodDeclaration Modifier public ReferenceType Path getSrcDir ReturnStatement MemberReference src MethodDeclaration /**
     * Set the destination directory into which the JSP source
     * files should be compiled.
     */ Modifier public setDestdir FormalParameter ReferenceType File destDir StatementExpression Assignment This MemberReference destDir MemberReference destDir = MethodDeclaration Modifier public ReferenceType File getDestdir ReturnStatement MemberReference destDir MethodDeclaration /**
     * Set the name of the package the compiled jsp files should be in.
     */ Modifier public setPackage FormalParameter ReferenceType String pkg StatementExpression Assignment This MemberReference packageName MemberReference pkg = MethodDeclaration Modifier public ReferenceType String getPackage ReturnStatement MemberReference packageName MethodDeclaration /**
     * Set the verbose level of the compiler
     */ Modifier public setVerbose FormalParameter BasicType int i StatementExpression Assignment MemberReference verbose MemberReference i = MethodDeclaration Modifier public BasicType int getVerbose ReturnStatement MemberReference verbose MethodDeclaration /**
     * Whether or not the build should halt if compilation fails.
     * Defaults to <code>true</code>.
     */ Modifier public setFailonerror FormalParameter BasicType boolean fail StatementExpression Assignment MemberReference failOnError MemberReference fail = MethodDeclaration /**
     * Gets the failonerror flag.
     */ Modifier public BasicType boolean getFailonerror ReturnStatement MemberReference failOnError MethodDeclaration Modifier public ReferenceType String getIeplugin ReturnStatement MemberReference iepluginid MethodDeclaration /**
     * Java Plugin CLASSID for Internet Explorer
     */ Modifier public setIeplugin FormalParameter ReferenceType String iepluginid StatementExpression Assignment This MemberReference iepluginid MemberReference iepluginid = MethodDeclaration /**
     * If true, generate separate write() calls for each HTML line
     * in the JSP.
     * @return mapping status
     */ Modifier public BasicType boolean isMapped ReturnStatement MemberReference mapped MethodDeclaration /**
     * If true, generate separate write() calls for each HTML line
     * in the JSP.
     */ Modifier public setMapped FormalParameter BasicType boolean mapped StatementExpression Assignment This MemberReference mapped MemberReference mapped = MethodDeclaration /**
     * The URI context of relative URI references in the JSP pages.
     * If it does not exist then it is derived from the location
     * of the file relative to the declared or derived value of uriroot.
     *
     * @param  uribase  The new Uribase value
     */ Modifier public setUribase FormalParameter ReferenceType File uribase StatementExpression MethodInvocation Literal ""Uribase is currently an unused parameter"" MemberReference Project MSG_WARN log MethodDeclaration Modifier public ReferenceType File getUribase ReturnStatement MemberReference uriroot MethodDeclaration /**
     *  The root directory that uri files should be resolved
     *  against. (Default is the directory jspc is invoked from)
     *
     * @param  uriroot  The new Uribase value
     */ Modifier public setUriroot FormalParameter ReferenceType File uriroot StatementExpression Assignment This MemberReference uriroot MemberReference uriroot = MethodDeclaration Modifier public ReferenceType File getUriroot ReturnStatement MemberReference uriroot MethodDeclaration /**
     * Set the classpath to be used for this compilation.
     */ Modifier public setClasspath FormalParameter ReferenceType Path cp IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath MemberReference cp = BlockStatement StatementExpression MethodInvocation classpath MemberReference cp append End MethodDeclaration /**
     * Adds a path to the classpath.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation classpath createPath MethodDeclaration /**
     * Adds a reference to a classpath defined elsewhere
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration Modifier public ReferenceType Path getClasspath ReturnStatement MemberReference classpath MethodDeclaration /**
     * Set the classpath to be used to find this compiler adapter
     */ Modifier public setCompilerclasspath FormalParameter ReferenceType Path cp IfStatement BinaryOperation == MemberReference compilerClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compilerClasspath MemberReference cp = BlockStatement StatementExpression MethodInvocation compilerClasspath MemberReference cp append End MethodDeclaration /**
     * get the classpath used to find the compiler adapter
     */ Modifier public ReferenceType Path getCompilerclasspath ReturnStatement MemberReference compilerClasspath MethodDeclaration /**
     * Support nested compiler classpath, used to locate compiler adapter
     */ Modifier public ReferenceType Path createCompilerclasspath IfStatement BinaryOperation == MemberReference compilerClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compilerClasspath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation compilerClasspath createPath MethodDeclaration /**
     *  Filename for web.xml.
     *
     * @param  webxml  The new Webxml value
     */ Modifier public setWebxml FormalParameter ReferenceType File webxml StatementExpression Assignment This MemberReference webxml MemberReference webxml = MethodDeclaration /**
     * Filename for web.xml.
     * @return The filename for web.xml.
     */ Modifier public ReferenceType File getWebxml ReturnStatement This MemberReference webxml MethodDeclaration /**
     *  output filename for the fraction of web.xml that lists
     *  servlets.
     * @param  webinc  The new Webinc value
     */ Modifier public setWebinc FormalParameter ReferenceType File webinc StatementExpression Assignment This MemberReference webinc MemberReference webinc = MethodDeclaration Modifier public ReferenceType File getWebinc ReturnStatement This MemberReference webinc MethodDeclaration /**
     * Adds a single webapp.
     *
     * @param  webappParam  add a web app parameter
     */ Modifier public addWebApp FormalParameter ReferenceType WebAppParameter webappParam BuildException IfStatement BinaryOperation == MemberReference webApp Literal null BlockStatement StatementExpression Assignment MemberReference webApp MemberReference webappParam = BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one webapp can be specified"" End MethodDeclaration Modifier public ReferenceType WebAppParameter getWebApp ReturnStatement MemberReference webApp MethodDeclaration /**
     * Class name of a JSP compiler adapter.
     */ Modifier public setCompiler FormalParameter ReferenceType String compiler StatementExpression Assignment This MemberReference compilerName MemberReference compiler = MethodDeclaration /**
    * get the list of files to compile
    */ Modifier public ReferenceType Vector getCompileList ReturnStatement MemberReference compileList MethodDeclaration /**
     * execute by building up a list of files that
     * have changed and hand them off to a jsp compiler
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference destDir Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""destdir attribute must be set!"" MethodInvocation getLocation End IfStatement MethodInvocation ! destDir isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""destination directory \"""" MemberReference destDir Literal ""\"" does not exist or is not a directory"" MethodInvocation getLocation End LocalVariableDeclaration ReferenceType File VariableDeclarator dest MethodInvocation getActualDestDir LocalVariableDeclaration ReferenceType JspCompilerAdapter VariableDeclarator compiler MethodInvocation JspCompilerAdapterFactory MemberReference compilerName This MethodInvocation MethodInvocation MemberReference compilerClasspath createClassLoader getProject getCompiler IfStatement BinaryOperation != MemberReference webApp Literal null BlockStatement StatementExpression MethodInvocation MemberReference compiler doCompilation ReturnStatement End IfStatement BinaryOperation == MemberReference src Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""srcdir attribute must be set!"" MethodInvocation getLocation End LocalVariableDeclaration ReferenceType String VariableDeclarator list MethodInvocation src list IfStatement BinaryOperation == MemberReference list length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""srcdir attribute must be set!"" MethodInvocation getLocation End IfStatement MethodInvocation compiler implementsOwnDependencyChecking BlockStatement StatementExpression MethodInvocation MemberReference compiler doCompilation ReturnStatement End LocalVariableDeclaration ReferenceType JspMangler VariableDeclarator mangler MethodInvocation compiler createMangler StatementExpression MethodInvocation resetFileLists LocalVariableDeclaration BasicType int VariableDeclarator filecount Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference list length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator srcDir MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i list resolveFile getProject IfStatement MethodInvocation ! srcDir exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""srcdir \"""" MethodInvocation srcDir getPath Literal ""\"" does not exist!"" MethodInvocation getLocation End LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds This MethodInvocation MemberReference srcDir getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation ds getIncludedFiles StatementExpression Assignment MemberReference filecount MemberReference files length = StatementExpression MethodInvocation MemberReference srcDir MemberReference dest MemberReference mangler MemberReference files scanDir End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""compiling "" MethodInvocation compileList size Literal "" files"" MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation > MethodInvocation compileList size Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Compiling "" MethodInvocation compileList size Literal "" source file"" TernaryExpression BinaryOperation == MethodInvocation compileList size Literal 1 Literal """" Literal ""s"" Literal "" to "" MemberReference dest log StatementExpression MethodInvocation MemberReference compiler doCompilation BlockStatement IfStatement BinaryOperation == MemberReference filecount Literal 0 BlockStatement StatementExpression MethodInvocation Literal ""there were no files to compile"" MemberReference Project MSG_INFO log BlockStatement StatementExpression MethodInvocation Literal ""all files are up to date"" MemberReference Project MSG_VERBOSE log End End MethodDeclaration /**
     * calculate where the files will end up:
     * this is destDir or it id destDir + the package name
     */ Modifier private ReferenceType File getActualDestDir LocalVariableDeclaration ReferenceType File VariableDeclarator dest Literal null IfStatement BinaryOperation == MemberReference packageName Literal null BlockStatement StatementExpression Assignment MemberReference dest MemberReference destDir = BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator path BinaryOperation + BinaryOperation + MethodInvocation destDir getPath MemberReference File separatorChar MethodInvocation packageName Literal '.' MemberReference File separatorChar replace StatementExpression Assignment MemberReference dest ClassCreator ReferenceType File MemberReference path = End ReturnStatement MemberReference dest MethodDeclaration /**
     * do the compile
     */ Modifier private doCompilation FormalParameter ReferenceType JspCompilerAdapter compiler BuildException StatementExpression MethodInvocation compiler This setJspc IfStatement MethodInvocation ! compiler execute BlockStatement IfStatement MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference FAIL_MSG MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference FAIL_MSG MemberReference Project MSG_ERR log End End MethodDeclaration /**
     * Clear the list of files to be compiled and copied..
     */ Modifier protected resetFileLists StatementExpression MethodInvocation compileList removeAllElements MethodDeclaration /**
     * Scans the directory looking for source files to be compiled.
     * The results are returned in the class variable compileList
     */ Modifier protected scanDir FormalParameter ReferenceType File srcDir FormalParameter ReferenceType File dest FormalParameter ReferenceType JspMangler mangler FormalParameter ReferenceType String files LocalVariableDeclaration BasicType long VariableDeclarator now ClassCreator MethodInvocation getTime ReferenceType Date ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator filename MemberReference ArraySelector MemberReference i files LocalVariableDeclaration ReferenceType File VariableDeclarator srcFile ClassCreator ReferenceType File MemberReference srcDir MemberReference filename LocalVariableDeclaration ReferenceType File VariableDeclarator javaFile MethodInvocation MemberReference mangler MemberReference srcFile MemberReference srcDir MemberReference dest mapToJavaFile IfStatement BinaryOperation == MemberReference javaFile Literal null BlockStatement ContinueStatement End IfStatement BinaryOperation > MethodInvocation srcFile lastModified MemberReference now BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Warning: file modified in the future: "" MemberReference filename MemberReference Project MSG_WARN log End LocalVariableDeclaration BasicType boolean VariableDeclarator shouldCompile Literal false StatementExpression Assignment MemberReference shouldCompile MethodInvocation MemberReference srcFile MemberReference javaFile isCompileNeeded = IfStatement MemberReference shouldCompile BlockStatement StatementExpression MethodInvocation compileList MethodInvocation srcFile getAbsolutePath addElement StatementExpression MethodInvocation javaFiles MemberReference javaFile addElement End End MethodDeclaration /**
     * Test whether or not compilation is needed. A return value of
     * <code>true<code> means yes, <code>false</code> means
     * our tests do not indicate this, but as the TLDs are
     * not used for dependency checking this is not guaranteed.
     * The current tests are
     * <ol>
     * <li>no dest file
     * <li>dest file out of date w.r.t source
     * <li>dest file zero bytes long
     * </ol>
     * @param srcFile JSP source file
     * @param javaFile JSP dest file
     * @return true if a compile is definately needed.
     *
     */ Modifier private BasicType boolean isCompileNeeded FormalParameter ReferenceType File srcFile FormalParameter ReferenceType File javaFile LocalVariableDeclaration BasicType boolean VariableDeclarator shouldCompile Literal false IfStatement MethodInvocation ! javaFile exists BlockStatement StatementExpression Assignment MemberReference shouldCompile Literal true = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Compiling "" MethodInvocation srcFile getPath Literal "" because java file "" MethodInvocation javaFile getPath Literal "" does not exist"" MemberReference Project MSG_VERBOSE log BlockStatement IfStatement BinaryOperation > MethodInvocation srcFile lastModified MethodInvocation javaFile lastModified BlockStatement StatementExpression Assignment MemberReference shouldCompile Literal true = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Compiling "" MethodInvocation srcFile getPath Literal "" because it is out of date with respect to "" MethodInvocation javaFile getPath MemberReference Project MSG_VERBOSE log BlockStatement IfStatement BinaryOperation == MethodInvocation javaFile length Literal 0 BlockStatement StatementExpression Assignment MemberReference shouldCompile Literal true = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Compiling "" MethodInvocation srcFile getPath Literal "" because java file "" MethodInvocation javaFile getPath Literal "" is empty"" MemberReference Project MSG_VERBOSE log End End End ReturnStatement MemberReference shouldCompile MethodDeclaration /**
     * get a filename from our jsp file
     * @todo support packages and subdirs
     */ Modifier protected ReferenceType File mapToJavaFile FormalParameter ReferenceType JspMangler mangler FormalParameter ReferenceType File srcFile FormalParameter ReferenceType File srcDir FormalParameter ReferenceType File dest IfStatement MethodInvocation ! srcFile MethodInvocation Literal "".jsp"" endsWith getName BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType String VariableDeclarator javaFileName MethodInvocation mangler MemberReference srcFile mapJspToJavaName ReturnStatement ClassCreator ReferenceType File MemberReference dest MemberReference javaFileName MethodDeclaration /**
     * delete any java output files that are empty
     * this is to get around a little defect in jasper: when it
     * fails, it leaves incomplete files around.
     */ Modifier public deleteEmptyJavaFiles IfStatement BinaryOperation != MemberReference javaFiles Literal null BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation javaFiles elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator file Cast ReferenceType File MethodInvocation e nextElement IfStatement BinaryOperation && MethodInvocation file exists BinaryOperation == MethodInvocation file length Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""deleting empty output file "" MemberReference file log StatementExpression MethodInvocation file delete End End End ClassDeclaration Modifier public static /**
     * static inner class used as a parameter element
     */ WebAppParameter FieldDeclaration /**
         * the sole option
         */ Modifier private ReferenceType File VariableDeclarator directory MethodDeclaration /**
         * query current directory
         */ Modifier public ReferenceType File getDirectory ReturnStatement MemberReference directory MethodDeclaration /**
         * set directory; alternate syntax
         */ Modifier public setBaseDir FormalParameter ReferenceType File directory StatementExpression Assignment This MemberReference directory MemberReference directory = ReferenceType MatchingTask",0
88,88,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors Import java.io.File Import java.util.StringTokenizer Import java.util.Vector Import org.apache.tools.ant.types.Resource ClassDeclaration Modifier public final /**
 * <p>This is a utility class used by selectors and DirectoryScanner. The
 * functionality more properly belongs just to selectors, but unfortunately
 * DirectoryScanner exposed these as protected methods. Thus we have to
 * support any subclasses of DirectoryScanner that may access these methods.
 * </p>
 * <p>This is a Singleton.</p>
 *
 * @since 1.5
 */ SelectorUtils FieldDeclaration Modifier private static ReferenceType SelectorUtils VariableDeclarator instance ClassCreator ReferenceType SelectorUtils ConstructorDeclaration Modifier private /**
     * Private Constructor
     */ SelectorUtils MethodDeclaration /**
     * Retrieves the instance of the Singleton.
     * @return singleton instance
     */ Modifier public static ReferenceType SelectorUtils getInstance ReturnStatement MemberReference instance MethodDeclaration /**
     * Tests whether or not a given path matches the start of a given
     * pattern up to the first ""**"".
     * <p>
     * This is not a general purpose test and should only be used if you
     * can live with false positives. For example, <code>pattern=**\a</code>
     * and <code>str=b</code> will yield <code>true</code>.
     *
     * @param pattern The pattern to match against. Must not be
     *                <code>null</code>.
     * @param str     The path to match, as a String. Must not be
     *                <code>null</code>.
     *
     * @return whether or not a given path matches the start of a given
     * pattern up to the first ""**"".
     */ Modifier public static BasicType boolean matchPatternStart FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str ReturnStatement MethodInvocation MemberReference pattern MemberReference str Literal true matchPatternStart MethodDeclaration /**
     * Tests whether or not a given path matches the start of a given
     * pattern up to the first ""**"".
     * <p>
     * This is not a general purpose test and should only be used if you
     * can live with false positives. For example, <code>pattern=**\a</code>
     * and <code>str=b</code> will yield <code>true</code>.
     *
     * @param pattern The pattern to match against. Must not be
     *                <code>null</code>.
     * @param str     The path to match, as a String. Must not be
     *                <code>null</code>.
     * @param isCaseSensitive Whether or not matching should be performed
     *                        case sensitively.
     *
     * @return whether or not a given path matches the start of a given
     * pattern up to the first ""**"".
     */ Modifier public static BasicType boolean matchPatternStart FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str FormalParameter BasicType boolean isCaseSensitive IfStatement BinaryOperation != MethodInvocation str MemberReference File separator startsWith MethodInvocation pattern MemberReference File separator startsWith BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType String VariableDeclarator patDirs MethodInvocation MemberReference pattern tokenizePathAsArray LocalVariableDeclaration ReferenceType String VariableDeclarator strDirs MethodInvocation MemberReference str tokenizePathAsArray LocalVariableDeclaration BasicType int VariableDeclarator patIdxStart Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator patIdxEnd BinaryOperation - MemberReference patDirs length Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator strIdxStart Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator strIdxEnd BinaryOperation - MemberReference strDirs length Literal 1 WhileStatement BinaryOperation && BinaryOperation <= MemberReference patIdxStart MemberReference patIdxEnd BinaryOperation <= MemberReference strIdxStart MemberReference strIdxEnd BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator patDir MemberReference ArraySelector MemberReference patIdxStart patDirs IfStatement MethodInvocation patDir Literal ""**"" equals BlockStatement BreakStatement End IfStatement MethodInvocation ! MemberReference patDir MemberReference ArraySelector MemberReference strIdxStart strDirs MemberReference isCaseSensitive match BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ patIdxStart StatementExpression MemberReference ++ strIdxStart End IfStatement BinaryOperation > MemberReference strIdxStart MemberReference strIdxEnd BlockStatement ReturnStatement Literal true IfStatement BinaryOperation > MemberReference patIdxStart MemberReference patIdxEnd BlockStatement ReturnStatement Literal false BlockStatement ReturnStatement Literal true End End MethodDeclaration /**
     * Tests whether or not a given path matches a given pattern.
     *
     * @param pattern The pattern to match against. Must not be
     *                <code>null</code>.
     * @param str     The path to match, as a String. Must not be
     *                <code>null</code>.
     *
     * @return <code>true</code> if the pattern matches against the string,
     *         or <code>false</code> otherwise.
     */ Modifier public static BasicType boolean matchPath FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str ReturnStatement MethodInvocation MemberReference pattern MemberReference str Literal true matchPath MethodDeclaration /**
     * Tests whether or not a given path matches a given pattern.
     *
     * @param pattern The pattern to match against. Must not be
     *                <code>null</code>.
     * @param str     The path to match, as a String. Must not be
     *                <code>null</code>.
     * @param isCaseSensitive Whether or not matching should be performed
     *                        case sensitively.
     *
     * @return <code>true</code> if the pattern matches against the string,
     *         or <code>false</code> otherwise.
     */ Modifier public static BasicType boolean matchPath FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str FormalParameter BasicType boolean isCaseSensitive IfStatement BinaryOperation != MethodInvocation str MemberReference File separator startsWith MethodInvocation pattern MemberReference File separator startsWith BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType String VariableDeclarator patDirs MethodInvocation MemberReference pattern tokenizePathAsArray LocalVariableDeclaration ReferenceType String VariableDeclarator strDirs MethodInvocation MemberReference str tokenizePathAsArray LocalVariableDeclaration BasicType int VariableDeclarator patIdxStart Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator patIdxEnd BinaryOperation - MemberReference patDirs length Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator strIdxStart Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator strIdxEnd BinaryOperation - MemberReference strDirs length Literal 1 WhileStatement BinaryOperation && BinaryOperation <= MemberReference patIdxStart MemberReference patIdxEnd BinaryOperation <= MemberReference strIdxStart MemberReference strIdxEnd BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator patDir MemberReference ArraySelector MemberReference patIdxStart patDirs IfStatement MethodInvocation patDir Literal ""**"" equals BlockStatement BreakStatement End IfStatement MethodInvocation ! MemberReference patDir MemberReference ArraySelector MemberReference strIdxStart strDirs MemberReference isCaseSensitive match BlockStatement StatementExpression Assignment MemberReference patDirs Literal null = StatementExpression Assignment MemberReference strDirs Literal null = ReturnStatement Literal false End StatementExpression MemberReference ++ patIdxStart StatementExpression MemberReference ++ strIdxStart End IfStatement BinaryOperation > MemberReference strIdxStart MemberReference strIdxEnd BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference patIdxStart BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation Literal ""**"" equals patDirs BlockStatement StatementExpression Assignment MemberReference patDirs Literal null = StatementExpression Assignment MemberReference strDirs Literal null = ReturnStatement Literal false End End ReturnStatement Literal true BlockStatement IfStatement BinaryOperation > MemberReference patIdxStart MemberReference patIdxEnd BlockStatement StatementExpression Assignment MemberReference patDirs Literal null = StatementExpression Assignment MemberReference strDirs Literal null = ReturnStatement Literal false End End WhileStatement BinaryOperation && BinaryOperation <= MemberReference patIdxStart MemberReference patIdxEnd BinaryOperation <= MemberReference strIdxStart MemberReference strIdxEnd BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator patDir MemberReference ArraySelector MemberReference patIdxEnd patDirs IfStatement MethodInvocation patDir Literal ""**"" equals BlockStatement BreakStatement End IfStatement MethodInvocation ! MemberReference patDir MemberReference ArraySelector MemberReference strIdxEnd strDirs MemberReference isCaseSensitive match BlockStatement StatementExpression Assignment MemberReference patDirs Literal null = StatementExpression Assignment MemberReference strDirs Literal null = ReturnStatement Literal false End StatementExpression MemberReference -- patIdxEnd StatementExpression MemberReference -- strIdxEnd End IfStatement BinaryOperation > MemberReference strIdxStart MemberReference strIdxEnd BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference patIdxStart BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation Literal ""**"" equals patDirs BlockStatement StatementExpression Assignment MemberReference patDirs Literal null = StatementExpression Assignment MemberReference strDirs Literal null = ReturnStatement Literal false End End ReturnStatement Literal true End WhileStatement BinaryOperation && BinaryOperation != MemberReference patIdxStart MemberReference patIdxEnd BinaryOperation <= MemberReference strIdxStart MemberReference strIdxEnd BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator patIdxTmp Literal - 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation + MemberReference patIdxStart Literal 1 BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""**"" equals patDirs BlockStatement StatementExpression Assignment MemberReference patIdxTmp MemberReference i = BreakStatement End End IfStatement BinaryOperation == MemberReference patIdxTmp BinaryOperation + MemberReference patIdxStart Literal 1 BlockStatement StatementExpression MemberReference ++ patIdxStart ContinueStatement End LocalVariableDeclaration BasicType int VariableDeclarator patLength BinaryOperation - BinaryOperation - MemberReference patIdxTmp MemberReference patIdxStart Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator strLength BinaryOperation + BinaryOperation - MemberReference strIdxEnd MemberReference strIdxStart Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator foundIdx Literal - 1 ForStatement strLoop ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation <= MemberReference i BinaryOperation - MemberReference strLength MemberReference patLength MemberReference ++ i BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference patLength MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator subPat MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference patIdxStart MemberReference j Literal 1 patDirs LocalVariableDeclaration ReferenceType String VariableDeclarator subStr MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference strIdxStart MemberReference i MemberReference j strDirs IfStatement MethodInvocation ! MemberReference subPat MemberReference subStr MemberReference isCaseSensitive match BlockStatement ContinueStatement strLoop End End StatementExpression Assignment MemberReference foundIdx BinaryOperation + MemberReference strIdxStart MemberReference i = BreakStatement End IfStatement BinaryOperation == MemberReference foundIdx Literal - 1 BlockStatement StatementExpression Assignment MemberReference patDirs Literal null = StatementExpression Assignment MemberReference strDirs Literal null = ReturnStatement Literal false End StatementExpression Assignment MemberReference patIdxStart MemberReference patIdxTmp = StatementExpression Assignment MemberReference strIdxStart BinaryOperation + MemberReference foundIdx MemberReference patLength = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference patIdxStart BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation Literal ""**"" equals patDirs BlockStatement StatementExpression Assignment MemberReference patDirs Literal null = StatementExpression Assignment MemberReference strDirs Literal null = ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration /**
     * Tests whether or not a string matches against a pattern.
     * The pattern may contain two special characters:<br>
     * '*' means zero or more characters<br>
     * '?' means one and only one character
     *
     * @param pattern The pattern to match against.
     *                Must not be <code>null</code>.
     * @param str     The string which must be matched against the pattern.
     *                Must not be <code>null</code>.
     *
     * @return <code>true</code> if the string matches against the pattern,
     *         or <code>false</code> otherwise.
     */ Modifier public static BasicType boolean match FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str ReturnStatement MethodInvocation MemberReference pattern MemberReference str Literal true match MethodDeclaration /**
     * Tests whether or not a string matches against a pattern.
     * The pattern may contain two special characters:<br>
     * '*' means zero or more characters<br>
     * '?' means one and only one character
     *
     * @param pattern The pattern to match against.
     *                Must not be <code>null</code>.
     * @param str     The string which must be matched against the pattern.
     *                Must not be <code>null</code>.
     * @param isCaseSensitive Whether or not matching should be performed
     *                        case sensitively.
     *
     *
     * @return <code>true</code> if the string matches against the pattern,
     *         or <code>false</code> otherwise.
     */ Modifier public static BasicType boolean match FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str FormalParameter BasicType boolean isCaseSensitive LocalVariableDeclaration BasicType char VariableDeclarator patArr MethodInvocation pattern toCharArray LocalVariableDeclaration BasicType char VariableDeclarator strArr MethodInvocation str toCharArray LocalVariableDeclaration BasicType int VariableDeclarator patIdxStart Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator patIdxEnd BinaryOperation - MemberReference patArr length Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator strIdxStart Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator strIdxEnd BinaryOperation - MemberReference strArr length Literal 1 LocalVariableDeclaration BasicType char VariableDeclarator ch LocalVariableDeclaration BasicType boolean VariableDeclarator containsStar Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference patArr length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i patArr Literal '*' BlockStatement StatementExpression Assignment MemberReference containsStar Literal true = BreakStatement End End IfStatement MemberReference ! containsStar BlockStatement IfStatement BinaryOperation != MemberReference patIdxEnd MemberReference strIdxEnd BlockStatement ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ch MemberReference ArraySelector MemberReference i patArr = IfStatement BinaryOperation != MemberReference ch Literal '?' BlockStatement IfStatement BinaryOperation && MemberReference isCaseSensitive BinaryOperation != MemberReference ch MemberReference ArraySelector MemberReference i strArr BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation && MemberReference ! isCaseSensitive BinaryOperation != MethodInvocation Character MemberReference ch toUpperCase MethodInvocation Character MemberReference ArraySelector MemberReference i strArr toUpperCase BlockStatement ReturnStatement Literal false End End End ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference patIdxEnd Literal 0 BlockStatement ReturnStatement Literal true End WhileStatement BinaryOperation && BinaryOperation != Assignment MemberReference ch MemberReference ArraySelector MemberReference patIdxStart patArr = Literal '*' BinaryOperation <= MemberReference strIdxStart MemberReference strIdxEnd BlockStatement IfStatement BinaryOperation != MemberReference ch Literal '?' BlockStatement IfStatement BinaryOperation && MemberReference isCaseSensitive BinaryOperation != MemberReference ch MemberReference ArraySelector MemberReference strIdxStart strArr BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation && MemberReference ! isCaseSensitive BinaryOperation != MethodInvocation Character MemberReference ch toUpperCase MethodInvocation Character MemberReference ArraySelector MemberReference strIdxStart strArr toUpperCase BlockStatement ReturnStatement Literal false End End StatementExpression MemberReference ++ patIdxStart StatementExpression MemberReference ++ strIdxStart End IfStatement BinaryOperation > MemberReference strIdxStart MemberReference strIdxEnd BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference patIdxStart BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i patArr Literal '*' BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true End WhileStatement BinaryOperation && BinaryOperation != Assignment MemberReference ch MemberReference ArraySelector MemberReference patIdxEnd patArr = Literal '*' BinaryOperation <= MemberReference strIdxStart MemberReference strIdxEnd BlockStatement IfStatement BinaryOperation != MemberReference ch Literal '?' BlockStatement IfStatement BinaryOperation && MemberReference isCaseSensitive BinaryOperation != MemberReference ch MemberReference ArraySelector MemberReference strIdxEnd strArr BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation && MemberReference ! isCaseSensitive BinaryOperation != MethodInvocation Character MemberReference ch toUpperCase MethodInvocation Character MemberReference ArraySelector MemberReference strIdxEnd strArr toUpperCase BlockStatement ReturnStatement Literal false End End StatementExpression MemberReference -- patIdxEnd StatementExpression MemberReference -- strIdxEnd End IfStatement BinaryOperation > MemberReference strIdxStart MemberReference strIdxEnd BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference patIdxStart BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i patArr Literal '*' BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true End WhileStatement BinaryOperation && BinaryOperation != MemberReference patIdxStart MemberReference patIdxEnd BinaryOperation <= MemberReference strIdxStart MemberReference strIdxEnd BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator patIdxTmp Literal - 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation + MemberReference patIdxStart Literal 1 BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i patArr Literal '*' BlockStatement StatementExpression Assignment MemberReference patIdxTmp MemberReference i = BreakStatement End End IfStatement BinaryOperation == MemberReference patIdxTmp BinaryOperation + MemberReference patIdxStart Literal 1 BlockStatement StatementExpression MemberReference ++ patIdxStart ContinueStatement End LocalVariableDeclaration BasicType int VariableDeclarator patLength BinaryOperation - BinaryOperation - MemberReference patIdxTmp MemberReference patIdxStart Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator strLength BinaryOperation + BinaryOperation - MemberReference strIdxEnd MemberReference strIdxStart Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator foundIdx Literal - 1 ForStatement strLoop ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation <= MemberReference i BinaryOperation - MemberReference strLength MemberReference patLength MemberReference ++ i BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference patLength MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference ch MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference patIdxStart MemberReference j Literal 1 patArr = IfStatement BinaryOperation != MemberReference ch Literal '?' BlockStatement IfStatement BinaryOperation && MemberReference isCaseSensitive BinaryOperation != MemberReference ch MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference strIdxStart MemberReference i MemberReference j strArr BlockStatement ContinueStatement strLoop End IfStatement BinaryOperation && MemberReference ! isCaseSensitive BinaryOperation != MethodInvocation Character MemberReference ch toUpperCase MethodInvocation Character MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference strIdxStart MemberReference i MemberReference j strArr toUpperCase BlockStatement ContinueStatement strLoop End End End StatementExpression Assignment MemberReference foundIdx BinaryOperation + MemberReference strIdxStart MemberReference i = BreakStatement End IfStatement BinaryOperation == MemberReference foundIdx Literal - 1 BlockStatement ReturnStatement Literal false End StatementExpression Assignment MemberReference patIdxStart MemberReference patIdxTmp = StatementExpression Assignment MemberReference strIdxStart BinaryOperation + MemberReference foundIdx MemberReference patLength = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference patIdxStart BinaryOperation <= MemberReference i MemberReference patIdxEnd MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i patArr Literal '*' BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration /**
     * Breaks a path up into a Vector of path elements, tokenizing on
     * <code>File.separator</code>.
     *
     * @param path Path to tokenize. Must not be <code>null</code>.
     *
     * @return a Vector of path elements from the tokenized path
     */ Modifier public static ReferenceType Vector tokenizePath FormalParameter ReferenceType String path ReturnStatement MethodInvocation MemberReference path MemberReference File separator tokenizePath MethodDeclaration /**
     * Breaks a path up into a Vector of path elements, tokenizing on
     *
     * @param path Path to tokenize. Must not be <code>null</code>.
     * @param separator the separator against which to tokenize.
     *
     * @return a Vector of path elements from the tokenized path
     * @since Ant 1.6
     */ Modifier public static ReferenceType Vector tokenizePath FormalParameter ReferenceType String path FormalParameter ReferenceType String separator LocalVariableDeclaration ReferenceType Vector VariableDeclarator ret ClassCreator ReferenceType Vector LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference path MemberReference separator WhileStatement MethodInvocation st hasMoreTokens BlockStatement StatementExpression MethodInvocation ret MethodInvocation st nextToken addElement End ReturnStatement MemberReference ret MethodDeclaration /**
     * Same as {@link #tokenizePath tokenizePath} but hopefully faster.
     */ Modifier private static ReferenceType String tokenizePathAsArray FormalParameter ReferenceType String path LocalVariableDeclaration BasicType char VariableDeclarator sep MemberReference File separatorChar LocalVariableDeclaration BasicType int VariableDeclarator start Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation path length LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator pos Literal 0 BinaryOperation < MemberReference pos MemberReference len MemberReference ++ pos BlockStatement IfStatement BinaryOperation == MethodInvocation path MemberReference pos charAt MemberReference sep BlockStatement IfStatement BinaryOperation != MemberReference pos MemberReference start BlockStatement StatementExpression MemberReference ++ count End StatementExpression Assignment MemberReference start BinaryOperation + MemberReference pos Literal 1 = End End IfStatement BinaryOperation != MemberReference len MemberReference start BlockStatement StatementExpression MemberReference ++ count End LocalVariableDeclaration ReferenceType String VariableDeclarator l ArrayCreator ReferenceType String MemberReference count StatementExpression Assignment MemberReference count Literal 0 = StatementExpression Assignment MemberReference start Literal 0 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator pos Literal 0 BinaryOperation < MemberReference pos MemberReference len MemberReference ++ pos BlockStatement IfStatement BinaryOperation == MethodInvocation path MemberReference pos charAt MemberReference sep BlockStatement IfStatement BinaryOperation != MemberReference pos MemberReference start BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator tok MethodInvocation path MemberReference start MemberReference pos substring StatementExpression Assignment MemberReference ArraySelector MemberReference ++ count l MemberReference tok = End StatementExpression Assignment MemberReference start BinaryOperation + MemberReference pos Literal 1 = End End IfStatement BinaryOperation != MemberReference len MemberReference start BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator tok MethodInvocation path MemberReference start substring StatementExpression Assignment MemberReference ArraySelector MemberReference count l MemberReference tok = End ReturnStatement MemberReference l MethodDeclaration /**
     * Returns dependency information on these two files. If src has been
     * modified later than target, it returns true. If target doesn't exist,
     * it likewise returns true. Otherwise, target is newer than src and
     * is not out of date, thus the method returns false. It also returns
     * false if the src file doesn't even exist, since how could the
     * target then be out of date.
     *
     * @param src the original file
     * @param target the file being compared against
     * @param granularity the amount in seconds of slack we will give in
     *        determining out of dateness
     * @return whether the target is out of date
     */ Modifier public static BasicType boolean isOutOfDate FormalParameter ReferenceType File src FormalParameter ReferenceType File target FormalParameter BasicType int granularity IfStatement MethodInvocation ! src exists BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! target exists BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation > BinaryOperation - MethodInvocation src lastModified MemberReference granularity MethodInvocation target lastModified BlockStatement ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration /**
     * Returns dependency information on these two resources. If src has been
     * modified later than target, it returns true. If target doesn't exist,
     * it likewise returns true. Otherwise, target is newer than src and
     * is not out of date, thus the method returns false. It also returns
     * false if the src file doesn't even exist, since how could the
     * target then be out of date.
     *
     * @param src the original resource
     * @param target the resource being compared against
     * @param granularity the amount in seconds of slack we will give in
     *        determining out of dateness
     * @return whether the target is out of date
     */ Modifier public static BasicType boolean isOutOfDate FormalParameter ReferenceType Resource src FormalParameter ReferenceType Resource target FormalParameter BasicType int granularity IfStatement MethodInvocation ! src isExists BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! target isExists BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation > BinaryOperation - MethodInvocation src getLastModified MemberReference granularity MethodInvocation target getLastModified BlockStatement ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration /**
     * ""Flattens"" a string by removing all whitespace (space, tab, linefeed,
     * carriage return, and formfeed). This uses StringTokenizer and the
     * default set of tokens as documented in the single arguement constructor.
     *
     * @param input a String to remove all whitespace.
     * @return a String that has had all whitespace removed.
     */ Modifier public static ReferenceType String removeWhitespace FormalParameter ReferenceType String input LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator result ClassCreator ReferenceType StringBuffer IfStatement BinaryOperation != MemberReference input Literal null BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference input WhileStatement MethodInvocation st hasMoreTokens BlockStatement StatementExpression MethodInvocation result MethodInvocation st nextToken append End End ReturnStatement MethodInvocation result toString MethodDeclaration /**
     * Tests if a string contains stars or question marks
     * @param input a String which one wants to test for containing wildcard
     * @return true if the string contains at least a star or a question mark
     */ Modifier public static BasicType boolean hasWildcards FormalParameter ReferenceType String input ReturnStatement BinaryOperation || BinaryOperation != MethodInvocation input Literal '*' indexOf Literal - 1 BinaryOperation != MethodInvocation input Literal '?' indexOf Literal - 1 MethodDeclaration /**
     * removes from a pattern all tokens to the right containing wildcards
     * @param input the input string
     * @return the leftmost part of the pattern without wildcards
     */ Modifier public static ReferenceType String rtrimWildcardTokens FormalParameter ReferenceType String input LocalVariableDeclaration ReferenceType Vector VariableDeclarator v MethodInvocation MemberReference input MemberReference File separator tokenizePath LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator counter Literal 0 BinaryOperation < MemberReference counter MethodInvocation v size MemberReference ++ counter BlockStatement IfStatement MethodInvocation Cast ReferenceType String MethodInvocation v MemberReference counter elementAt hasWildcards BlockStatement BreakStatement End IfStatement BinaryOperation > MemberReference counter Literal 0 BlockStatement StatementExpression MethodInvocation sb MemberReference File separator append End StatementExpression MethodInvocation sb Cast ReferenceType String MethodInvocation v MemberReference counter elementAt append End ReturnStatement MethodInvocation sb toString",0
344,344,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional Import java.io.ByteArrayOutputStream Import java.io.File Import java.io.FileInputStream Import java.io.FileNotFoundException Import java.io.FileOutputStream Import java.io.IOException Import java.io.OutputStream Import java.io.OutputStreamWriter Import java.io.Writer Import java.util.Enumeration Import java.util.Hashtable Import java.util.Properties Import java.util.Vector Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.DocumentBuilderFactory Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.PropertySet Import org.apache.tools.ant.util.CollectionUtils Import org.apache.tools.ant.util.DOMElementWriter Import org.w3c.dom.Document Import org.w3c.dom.Element ClassDeclaration Modifier public /**
 *  Displays all the current properties in the build. The output can be sent to
 *  a file if desired. <P>
 *
 *  Attribute ""destfile"" defines a file to send the properties to. This can be
 *  processed as a standard property file later. <P>
 *
 *  Attribute ""prefix"" defines a prefix which is used to filter the properties
 *  only those properties starting with this prefix will be echoed. <P>
 *
 *  By default, the ""failonerror"" attribute is enabled. If an error occurs while
 *  writing the properties to a file, and this attribute is enabled, then a
 *  BuildException will be thrown. If disabled, then IO errors will be reported
 *  as a log statement, but no error will be thrown. <P>
 *
 *  Examples: <pre>
 *  &lt;echoproperties  /&gt;
 * </pre> Report the current properties to the log. <P>
 *
 *  <pre>
 *  &lt;echoproperties destfile=""my.properties"" /&gt;
 * </pre> Report the current properties to the file ""my.properties"", and will
 *  fail the build if the file could not be created or written to. <P>
 *
 *  <pre>
 *  &lt;echoproperties destfile=""my.properties"" failonerror=""false""
 *      prefix=""ant"" /&gt;
 * </pre> Report all properties beginning with 'ant' to the file
 *  ""my.properties"", and will log a message if the file could not be created or
 *  written to, but will still allow the build to continue.
 *
 *@since      Ant 1.5
 */ EchoProperties FieldDeclaration /**
     * the properties element.
     */ Modifier private final static ReferenceType String VariableDeclarator PROPERTIES Literal ""properties"" FieldDeclaration /**
     * the property element.
     */ Modifier private final static ReferenceType String VariableDeclarator PROPERTY Literal ""property"" FieldDeclaration /**
     * name attribute for property, testcase and testsuite elements.
     */ Modifier private final static ReferenceType String VariableDeclarator ATTR_NAME Literal ""name"" FieldDeclaration /**
     * value attribute for property elements.
     */ Modifier private final static ReferenceType String VariableDeclarator ATTR_VALUE Literal ""value"" FieldDeclaration /**
     * the input file.
     */ Modifier private ReferenceType File VariableDeclarator inFile Literal null FieldDeclaration /**
     *  File object pointing to the output file. If this is null, then
     *  we output to the project log, not to a file.
     */ Modifier private ReferenceType File VariableDeclarator destfile Literal null FieldDeclaration /**
     *  If this is true, then errors generated during file output will become
     *  build errors, and if false, then such errors will be logged, but not
     *  thrown.
     */ Modifier private BasicType boolean VariableDeclarator failonerror Literal true FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator propertySets ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType String VariableDeclarator format Literal ""text"" MethodDeclaration /**
     * Sets the input file.
     *
     * @param file  the input file
     */ Modifier public setSrcfile FormalParameter ReferenceType File file StatementExpression Assignment MemberReference inFile MemberReference file = MethodDeclaration /**
     *  Set a file to store the property output.  If this is never specified,
     *  then the output will be sent to the Ant log.
     *
     *@param destfile file to store the property output
     */ Modifier public setDestfile FormalParameter ReferenceType File destfile StatementExpression Assignment This MemberReference destfile MemberReference destfile = MethodDeclaration /**
     * If true, the task will fail if an error occurs writing the properties
     * file, otherwise errors are just logged.
     *
     *@param  failonerror  <tt>true</tt> if IO exceptions are reported as build
     *      exceptions, or <tt>false</tt> if IO exceptions are ignored.
     */ Modifier public setFailOnError FormalParameter BasicType boolean failonerror StatementExpression Assignment This MemberReference failonerror MemberReference failonerror = MethodDeclaration /**
     *  If the prefix is set, then only properties which start with this
     *  prefix string will be recorded.  If this is never set, or it is set
     *  to an empty string or <tt>null</tt>, then all properties will be
     *  recorded. <P>
     *
     *  For example, if the property is set as:
     *    <PRE>&lt;echoproperties  prefix=""ant."" /&gt;</PRE>
     *  then the property ""ant.home"" will be recorded, but ""ant-example""
     *  will not.
     *
     *@param  prefix  The new prefix value
     */ Modifier public setPrefix FormalParameter ReferenceType String prefix LocalVariableDeclaration ReferenceType PropertySet VariableDeclarator ps ClassCreator ReferenceType PropertySet StatementExpression MethodInvocation ps MethodInvocation getProject setProject StatementExpression MethodInvocation ps MemberReference prefix appendPrefix StatementExpression MethodInvocation MemberReference ps addPropertyset MethodDeclaration /**
     * A set of properties to write.
     *
     * @since Ant 1.6
     */ Modifier public addPropertyset FormalParameter ReferenceType PropertySet ps StatementExpression MethodInvocation propertySets MemberReference ps addElement MethodDeclaration Modifier public setFormat FormalParameter ReferenceType FormatAttribute ea StatementExpression Assignment MemberReference format MethodInvocation ea getValue = ClassDeclaration Modifier public static FormatAttribute FieldDeclaration Modifier private ReferenceType String VariableDeclarator formats ArrayCreator ReferenceType String ArrayInitializer Literal ""xml"" Literal ""text"" MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement MemberReference formats ReferenceType EnumeratedAttribute MethodDeclaration /**
     *  Run the task.
     *
     *@exception  BuildException  trouble, probably file IO
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator allProps ClassCreator ReferenceType Hashtable IfStatement BinaryOperation && BinaryOperation == MemberReference inFile Literal null BinaryOperation == MethodInvocation propertySets size Literal 0 BlockStatement StatementExpression MethodInvocation CollectionUtils MemberReference allProps MethodInvocation MethodInvocation getProperties getProject putAll IfStatement BinaryOperation != MemberReference inFile Literal null BlockStatement IfStatement BinaryOperation && MethodInvocation inFile exists MethodInvocation inFile isDirectory BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator message Literal ""srcfile is a directory!"" IfStatement MemberReference failonerror BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference message MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference message MemberReference Project MSG_ERR log End ReturnStatement End IfStatement BinaryOperation && MethodInvocation inFile exists MethodInvocation ! inFile canRead BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator message Literal ""Can not read from the specified srcfile!"" IfStatement MemberReference failonerror BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference message MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference message MemberReference Project MSG_ERR log End ReturnStatement End LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator in Literal null TryStatement StatementExpression Assignment MemberReference in ClassCreator ReferenceType FileInputStream MemberReference inFile = LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties StatementExpression MethodInvocation props MemberReference in load StatementExpression MethodInvocation CollectionUtils MemberReference allProps MemberReference props putAll CatchClause CatchClauseParameter FileNotFoundException fnfe LocalVariableDeclaration ReferenceType String VariableDeclarator message BinaryOperation + Literal ""Could not find file "" MethodInvocation inFile getAbsolutePath IfStatement MemberReference failonerror BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference message MemberReference fnfe MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference message MemberReference Project MSG_WARN log End ReturnStatement CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator message BinaryOperation + Literal ""Could not read file "" MethodInvocation inFile getAbsolutePath IfStatement MemberReference failonerror BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference message MemberReference ioe MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference message MemberReference Project MSG_WARN log End ReturnStatement TryStatement IfStatement BinaryOperation != Literal null MemberReference in BlockStatement StatementExpression MethodInvocation in close End CatchClause CatchClauseParameter IOException ioe End End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation propertySets elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType PropertySet VariableDeclarator ps Cast ReferenceType PropertySet MethodInvocation e nextElement StatementExpression MethodInvocation CollectionUtils MemberReference allProps MethodInvocation ps getProperties putAll End LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator os Literal null TryStatement IfStatement BinaryOperation == MemberReference destfile Literal null BlockStatement StatementExpression Assignment MemberReference os ClassCreator ReferenceType ByteArrayOutputStream = StatementExpression MethodInvocation MemberReference allProps MemberReference os saveProperties StatementExpression MethodInvocation MethodInvocation os toString MemberReference Project MSG_INFO log BlockStatement IfStatement BinaryOperation && MethodInvocation destfile exists MethodInvocation destfile isDirectory BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator message Literal ""destfile is a directory!"" IfStatement MemberReference failonerror BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference message MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference message MemberReference Project MSG_ERR log End ReturnStatement End IfStatement BinaryOperation && MethodInvocation destfile exists MethodInvocation ! destfile canWrite BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator message Literal ""Can not write to the specified destfile!"" IfStatement MemberReference failonerror BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference message MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference message MemberReference Project MSG_ERR log End ReturnStatement End StatementExpression Assignment MemberReference os ClassCreator ReferenceType FileOutputStream This MemberReference destfile = StatementExpression MethodInvocation MemberReference allProps MemberReference os saveProperties End CatchClause CatchClauseParameter IOException ioe IfStatement MemberReference failonerror BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference ioe MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MethodInvocation ioe getMessage MemberReference Project MSG_INFO log End IfStatement BinaryOperation != MemberReference os Literal null BlockStatement TryStatement StatementExpression MethodInvocation os close CatchClause CatchClauseParameter IOException ex End MethodDeclaration /**
     *  Send the key/value pairs in the hashtable to the given output stream.
     *  Only those properties matching the <tt>prefix</tt> constraint will be
     *  sent to the output stream.
     *  The output stream will be closed when this method returns.
     *
     *@param  allProps         propfile to save
     *@param  os               output stream
     *@exception  IOException  trouble
     */ Modifier protected saveProperties FormalParameter ReferenceType Hashtable allProps FormalParameter ReferenceType OutputStream os IOException BuildException LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation allProps keys WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation e MethodInvocation toString nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation allProps MethodInvocation toString MemberReference name get StatementExpression MethodInvocation props MemberReference name MemberReference value put End IfStatement Literal MethodInvocation MemberReference format equals ""text"" BlockStatement StatementExpression MethodInvocation MemberReference props MemberReference os Literal ""Ant properties"" jdkSaveProperties IfStatement Literal MethodInvocation MemberReference format equals ""xml"" BlockStatement StatementExpression MethodInvocation MemberReference props MemberReference os xmlSaveProperties End End MethodDeclaration Modifier protected xmlSaveProperties FormalParameter ReferenceType Properties props FormalParameter ReferenceType OutputStream os IOException LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation MethodInvocation newDocument getDocumentBuilder LocalVariableDeclaration ReferenceType Element VariableDeclarator rootElement MethodInvocation doc MemberReference PROPERTIES createElement LocalVariableDeclaration ReferenceType String VariableDeclarator name LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation props propertyNames WhileStatement MethodInvocation e hasMoreElements BlockStatement StatementExpression Assignment MemberReference name Cast ReferenceType String MethodInvocation e nextElement = LocalVariableDeclaration ReferenceType Element VariableDeclarator propElement MethodInvocation doc MemberReference PROPERTY createElement StatementExpression MethodInvocation propElement MemberReference ATTR_NAME MemberReference name setAttribute StatementExpression MethodInvocation propElement MemberReference ATTR_VALUE MethodInvocation props MemberReference name getProperty setAttribute StatementExpression MethodInvocation rootElement MemberReference propElement appendChild End LocalVariableDeclaration ReferenceType Writer VariableDeclarator wri Literal null TryStatement StatementExpression Assignment MemberReference wri ClassCreator ReferenceType OutputStreamWriter MemberReference os Literal ""UTF8"" = StatementExpression MethodInvocation wri Literal ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"" write StatementExpression ClassCreator MethodInvocation MemberReference rootElement MemberReference wri Literal 0 Literal ""\t"" write ReferenceType DOMElementWriter StatementExpression MethodInvocation wri flush CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unable to write XML file"" MemberReference ioe IfStatement BinaryOperation != MemberReference wri Literal null BlockStatement StatementExpression MethodInvocation wri close End MethodDeclaration /**
     *  JDK 1.2 allows for the safer method
     *  <tt>Properties.store(OutputStream, String)</tt>, which throws an
     *  <tt>IOException</tt> on an output error.
     *
     *@param props the properties to record
     *@param os record the properties to this output stream
     *@param header prepend this header to the property output
     *@exception IOException on an I/O error during a write.
     */ Modifier protected jdkSaveProperties FormalParameter ReferenceType Properties props FormalParameter ReferenceType OutputStream os FormalParameter ReferenceType String header IOException TryStatement StatementExpression MethodInvocation props MemberReference os MemberReference header store CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException MemberReference ioe MethodInvocation getLocation IfStatement BinaryOperation != MemberReference os Literal null BlockStatement TryStatement StatementExpression MethodInvocation os close CatchClause CatchClauseParameter IOException ioex StatementExpression MethodInvocation Literal ""Failed to close output stream"" log End MethodDeclaration /**
     * Uses the DocumentBuilderFactory to get a DocumentBuilder instance.
     *
     * @return   The DocumentBuilder instance
     */ Modifier private static ReferenceType DocumentBuilder getDocumentBuilder TryStatement ReturnStatement MethodInvocation DocumentBuilderFactory MethodInvocation newDocumentBuilder newInstance CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType ExceptionInInitializerError MemberReference e ReferenceType Task",0
180,180,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.io.File Import java.io.IOException Import java.util.Arrays Import java.util.Enumeration Import java.util.HashMap Import java.util.HashSet Import java.util.Hashtable Import java.util.Map Import java.util.Set Import java.util.Vector Import org.apache.tools.ant.taskdefs.condition.Os Import org.apache.tools.ant.types.Resource Import org.apache.tools.ant.types.ResourceFactory Import org.apache.tools.ant.types.selectors.FileSelector Import org.apache.tools.ant.types.selectors.SelectorScanner Import org.apache.tools.ant.types.selectors.SelectorUtils Import org.apache.tools.ant.util.FileUtils ClassDeclaration Modifier public /**
 * Class for scanning a directory for files/directories which match certain
 * criteria.
 * <p>
 * These criteria consist of selectors and patterns which have been specified.
 * With the selectors you can select which files you want to have included.
 * Files which are not selected are excluded. With patterns you can include
 * or exclude files based on their filename.
 * <p>
 * The idea is simple. A given directory is recursively scanned for all files
 * and directories. Each file/directory is matched against a set of selectors,
 * including special support for matching against filenames with include and
 * and exclude patterns. Only files/directories which match at least one
 * pattern of the include pattern list or other file selector, and don't match
 * any pattern of the exclude pattern list or fail to match against a required
 * selector will be placed in the list of files/directories found.
 * <p>
 * When no list of include patterns is supplied, ""**"" will be used, which
 * means that everything will be matched. When no list of exclude patterns is
 * supplied, an empty list is used, such that nothing will be excluded. When
 * no selectors are supplied, none are applied.
 * <p>
 * The filename pattern matching is done as follows:
 * The name to be matched is split up in path segments. A path segment is the
 * name of a directory or file, which is bounded by
 * <code>File.separator</code> ('/' under UNIX, '\' under Windows).
 * For example, ""abc/def/ghi/xyz.java"" is split up in the segments ""abc"",
 * ""def"",""ghi"" and ""xyz.java"".
 * The same is done for the pattern against which should be matched.
 * <p>
 * The segments of the name and the pattern are then matched against each
 * other. When '**' is used for a path segment in the pattern, it matches
 * zero or more path segments of the name.
 * <p>
 * There is a special case regarding the use of <code>File.separator</code>s
 * at the beginning of the pattern and the string to match:<br>
 * When a pattern starts with a <code>File.separator</code>, the string
 * to match must also start with a <code>File.separator</code>.
 * When a pattern does not start with a <code>File.separator</code>, the
 * string to match may not start with a <code>File.separator</code>.
 * When one of these rules is not obeyed, the string will not
 * match.
 * <p>
 * When a name path segment is matched against a pattern path segment, the
 * following special characters can be used:<br>
 * '*' matches zero or more characters<br>
 * '?' matches one character.
 * <p>
 * Examples:
 * <p>
 * ""**\*.class"" matches all .class files/dirs in a directory tree.
 * <p>
 * ""test\a??.java"" matches all files/dirs which start with an 'a', then two
 * more characters and then "".java"", in a directory called test.
 * <p>
 * ""**"" matches everything in a directory tree.
 * <p>
 * ""**\test\**\XYZ*"" matches all files/dirs which start with ""XYZ"" and where
 * there is a parent directory called test (e.g. ""abc\test\def\ghi\XYZ123"").
 * <p>
 * Case sensitivity may be turned off if necessary. By default, it is
 * turned on.
 * <p>
 * Example of usage:
 * <pre>
 *   String[] includes = {""**\\*.class""};
 *   String[] excludes = {""modules\\*\\**""};
 *   ds.setIncludes(includes);
 *   ds.setExcludes(excludes);
 *   ds.setBasedir(new File(""test""));
 *   ds.setCaseSensitive(true);
 *   ds.scan();
 *
 *   System.out.println(""FILES:"");
 *   String[] files = ds.getIncludedFiles();
 *   for (int i = 0; i < files.length; i++) {
 *     System.out.println(files[i]);
 *   }
 * </pre>
 * This will scan a directory called test for .class files, but excludes all
 * files in all proper subdirectories of a directory called ""modules""
 *
 */ DirectoryScanner FieldDeclaration /** Is OpenVMS the operating system we're running on? */ Modifier private final static BasicType boolean VariableDeclarator ON_VMS MethodInvocation Os Literal ""openvms"" isFamily FieldDeclaration /**
     * Patterns which should be excluded by default.
     *
     * <p>Note that you can now add patterns to the list of default
     * excludes.  Added patterns will not become part of this array
     * that has only been kept around for backwards compatibility
     * reasons.</p>
     *
     * @deprecated use the {@link #getDefaultExcludes
     * getDefaultExcludes} method instead.
     */ Modifier final protected static ReferenceType String VariableDeclarator DEFAULTEXCLUDES ArrayInitializer Literal ""**/*~"" Literal ""**/#*#"" Literal ""**/.#*"" Literal ""**/%*%"" Literal ""**/._*"" Literal ""**/CVS"" Literal ""**/CVS/**"" Literal ""**/.cvsignore"" Literal ""**/SCCS"" Literal ""**/SCCS/**"" Literal ""**/vssver.scc"" Literal ""**/.svn"" Literal ""**/.svn/**"" Literal ""**/.DS_Store"" FieldDeclaration /**
     * Patterns which should be excluded by default.
     *
     * @see #addDefaultExcludes()
     */ Modifier private static ReferenceType Vector VariableDeclarator defaultExcludes ClassCreator ReferenceType Vector StatementExpression MethodInvocation resetDefaultExcludes FieldDeclaration /** The base directory to be scanned. */ Modifier protected ReferenceType File VariableDeclarator basedir FieldDeclaration /** The patterns for the files to be included. */ Modifier protected ReferenceType String VariableDeclarator includes FieldDeclaration /** The patterns for the files to be excluded. */ Modifier protected ReferenceType String VariableDeclarator excludes FieldDeclaration /** Selectors that will filter which files are in our candidate list. */ Modifier protected ReferenceType FileSelector VariableDeclarator selectors Literal null FieldDeclaration /** The files which matched at least one include and no excludes
     *  and were selected.
     */ Modifier protected ReferenceType Vector VariableDeclarator filesIncluded FieldDeclaration /** The files which did not match any includes or selectors. */ Modifier protected ReferenceType Vector VariableDeclarator filesNotIncluded FieldDeclaration /**
     * The files which matched at least one include and at least
     * one exclude.
     */ Modifier protected ReferenceType Vector VariableDeclarator filesExcluded FieldDeclaration /** The directories which matched at least one include and no excludes
     *  and were selected.
     */ Modifier protected ReferenceType Vector VariableDeclarator dirsIncluded FieldDeclaration /** The directories which were found and did not match any includes. */ Modifier protected ReferenceType Vector VariableDeclarator dirsNotIncluded FieldDeclaration /**
     * The directories which matched at least one include and at least one
     * exclude.
     */ Modifier protected ReferenceType Vector VariableDeclarator dirsExcluded FieldDeclaration /** The files which matched at least one include and no excludes and
     *  which a selector discarded.
     */ Modifier protected ReferenceType Vector VariableDeclarator filesDeselected FieldDeclaration /** The directories which matched at least one include and no excludes
     *  but which a selector discarded.
     */ Modifier protected ReferenceType Vector VariableDeclarator dirsDeselected FieldDeclaration /** Whether or not our results were built by a slow scan. */ Modifier protected BasicType boolean VariableDeclarator haveSlowResults Literal false FieldDeclaration /**
     * Whether or not the file system should be treated as a case sensitive
     * one.
     */ Modifier protected BasicType boolean VariableDeclarator isCaseSensitive Literal true FieldDeclaration /**
     * Whether or not symbolic links should be followed.
     *
     * @since Ant 1.5
     */ Modifier private BasicType boolean VariableDeclarator followSymlinks Literal true FieldDeclaration /** Helper. */ Modifier private final static ReferenceType FileUtils VariableDeclarator FILE_UTILS MethodInvocation FileUtils newFileUtils FieldDeclaration /** Whether or not everything tested so far has been included. */ Modifier protected BasicType boolean VariableDeclarator everythingIncluded Literal true ConstructorDeclaration Modifier public /**
     * Sole constructor.
     */ DirectoryScanner MethodDeclaration /**
     * Tests whether or not a given path matches the start of a given
     * pattern up to the first ""**"".
     * <p>
     * This is not a general purpose test and should only be used if you
     * can live with false positives. For example, <code>pattern=**\a</code>
     * and <code>str=b</code> will yield <code>true</code>.
     *
     * @param pattern The pattern to match against. Must not be
     *                <code>null</code>.
     * @param str     The path to match, as a String. Must not be
     *                <code>null</code>.
     *
     * @return whether or not a given path matches the start of a given
     * pattern up to the first ""**"".
     */ Modifier protected static BasicType boolean matchPatternStart FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str ReturnStatement MethodInvocation SelectorUtils MemberReference pattern MemberReference str matchPatternStart MethodDeclaration /**
     * Tests whether or not a given path matches the start of a given
     * pattern up to the first ""**"".
     * <p>
     * This is not a general purpose test and should only be used if you
     * can live with false positives. For example, <code>pattern=**\a</code>
     * and <code>str=b</code> will yield <code>true</code>.
     *
     * @param pattern The pattern to match against. Must not be
     *                <code>null</code>.
     * @param str     The path to match, as a String. Must not be
     *                <code>null</code>.
     * @param isCaseSensitive Whether or not matching should be performed
     *                        case sensitively.
     *
     * @return whether or not a given path matches the start of a given
     * pattern up to the first ""**"".
     */ Modifier protected static BasicType boolean matchPatternStart FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str FormalParameter BasicType boolean isCaseSensitive ReturnStatement MethodInvocation SelectorUtils MemberReference pattern MemberReference str MemberReference isCaseSensitive matchPatternStart MethodDeclaration /**
     * Tests whether or not a given path matches a given pattern.
     *
     * @param pattern The pattern to match against. Must not be
     *                <code>null</code>.
     * @param str     The path to match, as a String. Must not be
     *                <code>null</code>.
     *
     * @return <code>true</code> if the pattern matches against the string,
     *         or <code>false</code> otherwise.
     */ Modifier protected static BasicType boolean matchPath FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str ReturnStatement MethodInvocation SelectorUtils MemberReference pattern MemberReference str matchPath MethodDeclaration /**
     * Tests whether or not a given path matches a given pattern.
     *
     * @param pattern The pattern to match against. Must not be
     *                <code>null</code>.
     * @param str     The path to match, as a String. Must not be
     *                <code>null</code>.
     * @param isCaseSensitive Whether or not matching should be performed
     *                        case sensitively.
     *
     * @return <code>true</code> if the pattern matches against the string,
     *         or <code>false</code> otherwise.
     */ Modifier protected static BasicType boolean matchPath FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str FormalParameter BasicType boolean isCaseSensitive ReturnStatement MethodInvocation SelectorUtils MemberReference pattern MemberReference str MemberReference isCaseSensitive matchPath MethodDeclaration /**
     * Tests whether or not a string matches against a pattern.
     * The pattern may contain two special characters:<br>
     * '*' means zero or more characters<br>
     * '?' means one and only one character
     *
     * @param pattern The pattern to match against.
     *                Must not be <code>null</code>.
     * @param str     The string which must be matched against the pattern.
     *                Must not be <code>null</code>.
     *
     * @return <code>true</code> if the string matches against the pattern,
     *         or <code>false</code> otherwise.
     */ Modifier public static BasicType boolean match FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str ReturnStatement MethodInvocation SelectorUtils MemberReference pattern MemberReference str match MethodDeclaration /**
     * Tests whether or not a string matches against a pattern.
     * The pattern may contain two special characters:<br>
     * '*' means zero or more characters<br>
     * '?' means one and only one character
     *
     * @param pattern The pattern to match against.
     *                Must not be <code>null</code>.
     * @param str     The string which must be matched against the pattern.
     *                Must not be <code>null</code>.
     * @param isCaseSensitive Whether or not matching should be performed
     *                        case sensitively.
     *
     *
     * @return <code>true</code> if the string matches against the pattern,
     *         or <code>false</code> otherwise.
     */ Modifier protected static BasicType boolean match FormalParameter ReferenceType String pattern FormalParameter ReferenceType String str FormalParameter BasicType boolean isCaseSensitive ReturnStatement MethodInvocation SelectorUtils MemberReference pattern MemberReference str MemberReference isCaseSensitive match MethodDeclaration /**
     * Get the list of patterns that should be excluded by default.
     *
     * @return An array of <code>String</code> based on the current
     *         contents of the <code>defaultExcludes</code>
     *         <code>Vector</code>.
     *
     * @since Ant 1.6
     */ Modifier public static ReferenceType String getDefaultExcludes ReturnStatement Cast ReferenceType String MethodInvocation defaultExcludes ArrayCreator ReferenceType String MethodInvocation defaultExcludes size toArray MethodDeclaration /**
     * Add a pattern to the default excludes unless it is already a
     * default exclude.
     *
     * @param s   A string to add as an exclude pattern.
     * @return    <code>true</code> if the string was added
     *            <code>false</code> if it already
     *            existed.
     *
     * @since Ant 1.6
     */ Modifier public static BasicType boolean addDefaultExclude FormalParameter ReferenceType String s IfStatement BinaryOperation == MethodInvocation defaultExcludes MemberReference s indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation defaultExcludes MemberReference s add ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration /**
     * Remove a string if it is a default exclude.
     *
     * @param s   The string to attempt to remove.
     * @return    <code>true</code> if <code>s</code> was a default
     *            exclude (and thus was removed),
     *            <code>false</code> if <code>s</code> was not
     *            in the default excludes list to begin with
     *
     * @since Ant 1.6
     */ Modifier public static BasicType boolean removeDefaultExclude FormalParameter ReferenceType String s ReturnStatement MethodInvocation defaultExcludes MemberReference s remove MethodDeclaration /**
     *  Go back to the hard wired default exclude patterns
     *
     * @since Ant 1.6
     */ Modifier public static resetDefaultExcludes StatementExpression Assignment MemberReference defaultExcludes ClassCreator ReferenceType Vector = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference DEFAULTEXCLUDES length MemberReference ++ i BlockStatement StatementExpression MethodInvocation defaultExcludes MemberReference ArraySelector MemberReference i DEFAULTEXCLUDES add End MethodDeclaration /**
     * Sets the base directory to be scanned. This is the directory which is
     * scanned recursively. All '/' and '\' characters are replaced by
     * <code>File.separatorChar</code>, so the separator used need not match
     * <code>File.separatorChar</code>.
     *
     * @param basedir The base directory to scan.
     *                Must not be <code>null</code>.
     */ Modifier public setBasedir FormalParameter ReferenceType String basedir StatementExpression MethodInvocation ClassCreator ReferenceType File MethodInvocation basedir MethodInvocation Literal '\\' MemberReference File separatorChar replace Literal '/' MemberReference File separatorChar replace setBasedir MethodDeclaration /**
     * Sets the base directory to be scanned. This is the directory which is
     * scanned recursively.
     *
     * @param basedir The base directory for scanning.
     *                Should not be <code>null</code>.
     */ Modifier public setBasedir FormalParameter ReferenceType File basedir StatementExpression Assignment This MemberReference basedir MemberReference basedir = MethodDeclaration /**
     * Returns the base directory to be scanned.
     * This is the directory which is scanned recursively.
     *
     * @return the base directory to be scanned
     */ Modifier public ReferenceType File getBasedir ReturnStatement MemberReference basedir MethodDeclaration /**
     * Find out whether include exclude patterns are matched in a
     * case sensitive way
     * @return whether or not the scanning is case sensitive
     * @since ant 1.6
     */ Modifier public BasicType boolean isCaseSensitive ReturnStatement MemberReference isCaseSensitive MethodDeclaration /**
     * Sets whether or not include and exclude patterns are matched
     * in a case sensitive way
     *
     * @param isCaseSensitive whether or not the file system should be
     *                        regarded as a case sensitive one
     */ Modifier public setCaseSensitive FormalParameter BasicType boolean isCaseSensitive StatementExpression Assignment This MemberReference isCaseSensitive MemberReference isCaseSensitive = MethodDeclaration /**
     * gets whether or not a DirectoryScanner follows symbolic links
     *
     * @return flag indicating whether symbolic links should be followed
     *
     * @since ant 1.6
     */ Modifier public BasicType boolean isFollowSymlinks ReturnStatement MemberReference followSymlinks MethodDeclaration /**
     * Sets whether or not symbolic links should be followed.
     *
     * @param followSymlinks whether or not symbolic links should be followed
     */ Modifier public setFollowSymlinks FormalParameter BasicType boolean followSymlinks StatementExpression Assignment This MemberReference followSymlinks MemberReference followSymlinks = MethodDeclaration /**
     * Sets the list of include patterns to use. All '/' and '\' characters
     * are replaced by <code>File.separatorChar</code>, so the separator used
     * need not match <code>File.separatorChar</code>.
     * <p>
     * When a pattern ends with a '/' or '\', ""**"" is appended.
     *
     * @param includes A list of include patterns.
     *                 May be <code>null</code>, indicating that all files
     *                 should be included. If a non-<code>null</code>
     *                 list is given, all elements must be
     * non-<code>null</code>.
     */ Modifier public setIncludes FormalParameter ReferenceType String includes IfStatement BinaryOperation == MemberReference includes Literal null BlockStatement StatementExpression Assignment This MemberReference includes Literal null = BlockStatement StatementExpression Assignment This MemberReference includes ArrayCreator ReferenceType String MemberReference includes length = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference includes length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator pattern StatementExpression Assignment MemberReference pattern MemberReference ArraySelector MemberReference i MethodInvocation Literal '/' MemberReference File separatorChar replace MethodInvocation Literal '\\' MemberReference File separatorChar replace includes = IfStatement MethodInvocation pattern MemberReference File separator endsWith BlockStatement StatementExpression Assignment MemberReference pattern Literal ""**"" += End StatementExpression Assignment This MemberReference includes ArraySelector MemberReference i MemberReference pattern = End End MethodDeclaration /**
     * Sets the list of exclude patterns to use. All '/' and '\' characters
     * are replaced by <code>File.separatorChar</code>, so the separator used
     * need not match <code>File.separatorChar</code>.
     * <p>
     * When a pattern ends with a '/' or '\', ""**"" is appended.
     *
     * @param excludes A list of exclude patterns.
     *                 May be <code>null</code>, indicating that no files
     *                 should be excluded. If a non-<code>null</code> list is
     *                 given, all elements must be non-<code>null</code>.
     */ Modifier public setExcludes FormalParameter ReferenceType String excludes IfStatement BinaryOperation == MemberReference excludes Literal null BlockStatement StatementExpression Assignment This MemberReference excludes Literal null = BlockStatement StatementExpression Assignment This MemberReference excludes ArrayCreator ReferenceType String MemberReference excludes length = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference excludes length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator pattern StatementExpression Assignment MemberReference pattern MemberReference ArraySelector MemberReference i MethodInvocation Literal '/' MemberReference File separatorChar replace MethodInvocation Literal '\\' MemberReference File separatorChar replace excludes = IfStatement MethodInvocation pattern MemberReference File separator endsWith BlockStatement StatementExpression Assignment MemberReference pattern Literal ""**"" += End StatementExpression Assignment This MemberReference excludes ArraySelector MemberReference i MemberReference pattern = End End MethodDeclaration /**
     * Sets the selectors that will select the filelist.
     *
     * @param selectors specifies the selectors to be invoked on a scan
     */ Modifier public setSelectors FormalParameter ReferenceType FileSelector selectors StatementExpression Assignment This MemberReference selectors MemberReference selectors = MethodDeclaration /**
     * Returns whether or not the scanner has included all the files or
     * directories it has come across so far.
     *
     * @return <code>true</code> if all files and directories which have
     *         been found so far have been included.
     */ Modifier public BasicType boolean isEverythingIncluded ReturnStatement MemberReference everythingIncluded MethodDeclaration /**
     * Scans the base directory for files which match at least one include
     * pattern and don't match any exclude patterns. If there are selectors
     * then the files must pass muster there, as well.
     *
     * @exception IllegalStateException if the base directory was set
     *            incorrectly (i.e. if it is <code>null</code>, doesn't exist,
     *            or isn't a directory).
     */ Modifier public scan IllegalStateException IfStatement BinaryOperation == MemberReference basedir Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""No basedir set"" End IfStatement MethodInvocation ! basedir exists BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException BinaryOperation + BinaryOperation + Literal ""basedir "" MemberReference basedir Literal "" does not exist"" End IfStatement MethodInvocation ! basedir isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException BinaryOperation + BinaryOperation + Literal ""basedir "" MemberReference basedir Literal "" is not a directory"" End IfStatement BinaryOperation == MemberReference includes Literal null BlockStatement StatementExpression Assignment MemberReference includes ArrayCreator ReferenceType String Literal 1 = StatementExpression Assignment MemberReference ArraySelector Literal 0 includes Literal ""**"" = End IfStatement BinaryOperation == MemberReference excludes Literal null BlockStatement StatementExpression Assignment MemberReference excludes ArrayCreator ReferenceType String Literal 0 = End StatementExpression Assignment MemberReference filesIncluded ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference filesNotIncluded ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference filesExcluded ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference filesDeselected ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference dirsIncluded ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference dirsNotIncluded ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference dirsExcluded ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference dirsDeselected ClassCreator ReferenceType Vector = IfStatement MethodInvocation Literal """" isIncluded BlockStatement IfStatement MethodInvocation ! Literal """" isExcluded BlockStatement IfStatement MethodInvocation Literal """" MemberReference basedir isSelected BlockStatement StatementExpression MethodInvocation dirsIncluded Literal """" addElement BlockStatement StatementExpression MethodInvocation dirsDeselected Literal """" addElement End BlockStatement StatementExpression MethodInvocation dirsExcluded Literal """" addElement End BlockStatement StatementExpression MethodInvocation dirsNotIncluded Literal """" addElement End StatementExpression MethodInvocation checkIncludePatterns StatementExpression MethodInvocation clearCaches MethodDeclaration /**
     * this routine is actually checking all the include patterns in
     * order to avoid scanning everything under base dir
     * @since ant1.6
     */ Modifier private checkIncludePatterns LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator newroots ClassCreator ReferenceType Hashtable ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator icounter Literal 0 BinaryOperation < MemberReference icounter MemberReference includes length MemberReference ++ icounter BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator newpattern MethodInvocation SelectorUtils MemberReference ArraySelector MemberReference icounter includes rtrimWildcardTokens StatementExpression MethodInvocation newroots MemberReference newpattern MemberReference ArraySelector MemberReference icounter includes put End IfStatement MethodInvocation newroots Literal """" containsKey BlockStatement StatementExpression MethodInvocation MemberReference basedir Literal """" Literal true scandir BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator enum2 MethodInvocation newroots keys LocalVariableDeclaration ReferenceType File VariableDeclarator canonBase Literal null TryStatement StatementExpression Assignment MemberReference canonBase MethodInvocation basedir getCanonicalFile = CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex WhileStatement MethodInvocation enum2 hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator currentelement Cast ReferenceType String MethodInvocation enum2 nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator originalpattern Cast ReferenceType String MethodInvocation newroots MemberReference currentelement get LocalVariableDeclaration ReferenceType File VariableDeclarator myfile ClassCreator ReferenceType File MemberReference basedir MemberReference currentelement IfStatement MethodInvocation myfile exists BlockStatement TryStatement LocalVariableDeclaration ReferenceType File VariableDeclarator canonFile MethodInvocation myfile getCanonicalFile LocalVariableDeclaration ReferenceType String VariableDeclarator path MethodInvocation FILE_UTILS MemberReference canonBase MemberReference canonFile removeLeadingPath IfStatement BinaryOperation || MethodInvocation ! path MemberReference currentelement equals MemberReference ON_VMS BlockStatement StatementExpression Assignment MemberReference myfile MethodInvocation MemberReference basedir MemberReference currentelement findFile = IfStatement BinaryOperation != MemberReference myfile Literal null BlockStatement StatementExpression Assignment MemberReference currentelement MethodInvocation FILE_UTILS MemberReference basedir MemberReference myfile removeLeadingPath = End End CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex End IfStatement BinaryOperation && BinaryOperation || BinaryOperation == MemberReference myfile Literal null MethodInvocation ! myfile exists MemberReference ! isCaseSensitive BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f MethodInvocation MemberReference basedir MemberReference currentelement findFileCaseInsensitive IfStatement MethodInvocation f exists BlockStatement StatementExpression Assignment MemberReference currentelement MethodInvocation FILE_UTILS MemberReference basedir MemberReference f removeLeadingPath = StatementExpression Assignment MemberReference myfile MemberReference f = End End IfStatement BinaryOperation && BinaryOperation != MemberReference myfile Literal null MethodInvocation myfile exists BlockStatement IfStatement BinaryOperation && MemberReference ! followSymlinks MethodInvocation MemberReference basedir MemberReference currentelement isSymlink BlockStatement ContinueStatement End IfStatement MethodInvocation myfile isDirectory BlockStatement IfStatement BinaryOperation && MethodInvocation MemberReference currentelement isIncluded BinaryOperation > MethodInvocation currentelement length Literal 0 BlockStatement StatementExpression MethodInvocation MemberReference currentelement MemberReference myfile Literal true accountForIncludedDir BlockStatement IfStatement BinaryOperation > MethodInvocation currentelement length Literal 0 BlockStatement IfStatement BinaryOperation != MethodInvocation currentelement BinaryOperation - MethodInvocation currentelement length Literal 1 charAt MemberReference File separatorChar BlockStatement StatementExpression Assignment MemberReference currentelement BinaryOperation + MemberReference currentelement MemberReference File separatorChar = End End StatementExpression MethodInvocation MemberReference myfile MemberReference currentelement Literal true scandir End BlockStatement IfStatement BinaryOperation && MemberReference isCaseSensitive MethodInvocation originalpattern MemberReference currentelement equals BlockStatement StatementExpression MethodInvocation MemberReference currentelement MemberReference myfile accountForIncludedFile IfStatement BinaryOperation && MemberReference ! isCaseSensitive MethodInvocation originalpattern MemberReference currentelement equalsIgnoreCase BlockStatement StatementExpression MethodInvocation MemberReference currentelement MemberReference myfile accountForIncludedFile End End End End End End MethodDeclaration /**
     * Top level invocation for a slow scan. A slow scan builds up a full
     * list of excluded/included files/directories, whereas a fast scan
     * will only have full results for included files, as it ignores
     * directories which can't possibly hold any included files/directories.
     * <p>
     * Returns immediately if a slow scan has already been completed.
     */ Modifier protected slowScan IfStatement MemberReference haveSlowResults BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator excl ArrayCreator ReferenceType String MethodInvocation dirsExcluded size StatementExpression MethodInvocation dirsExcluded MemberReference excl copyInto LocalVariableDeclaration ReferenceType String VariableDeclarator notIncl ArrayCreator ReferenceType String MethodInvocation dirsNotIncluded size StatementExpression MethodInvocation dirsNotIncluded MemberReference notIncl copyInto ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference excl length MemberReference ++ i BlockStatement IfStatement MethodInvocation ! MemberReference ArraySelector MemberReference i excl couldHoldIncluded BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType File MemberReference basedir MemberReference ArraySelector MemberReference i excl BinaryOperation + MemberReference ArraySelector MemberReference i excl MemberReference File separator Literal false scandir End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference notIncl length MemberReference ++ i BlockStatement IfStatement MethodInvocation ! MemberReference ArraySelector MemberReference i notIncl couldHoldIncluded BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType File MemberReference basedir MemberReference ArraySelector MemberReference i notIncl BinaryOperation + MemberReference ArraySelector MemberReference i notIncl MemberReference File separator Literal false scandir End End StatementExpression Assignment MemberReference haveSlowResults Literal true = MethodDeclaration /**
     * Scans the given directory for files and directories. Found files and
     * directories are placed in their respective collections, based on the
     * matching of includes, excludes, and the selectors.  When a directory
     * is found, it is scanned recursively.
     *
     * @param dir   The directory to scan. Must not be <code>null</code>.
     * @param vpath The path relative to the base directory (needed to
     *              prevent problems with an absolute path when using
     *              dir). Must not be <code>null</code>.
     * @param fast  Whether or not this call is part of a fast scan.
     *
     * @see #filesIncluded
     * @see #filesNotIncluded
     * @see #filesExcluded
     * @see #dirsIncluded
     * @see #dirsNotIncluded
     * @see #dirsExcluded
     * @see #slowScan
     */ Modifier protected scandir FormalParameter ReferenceType File dir FormalParameter ReferenceType String vpath FormalParameter BasicType boolean fast IfStatement BinaryOperation == MemberReference dir Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""dir must not be null."" IfStatement MethodInvocation ! dir exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MemberReference dir Literal "" doesn't exists."" IfStatement MethodInvocation ! dir isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MemberReference dir Literal "" is not a directory."" End End End IfStatement BinaryOperation && MemberReference fast MethodInvocation MemberReference vpath hasBeenScanned BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator newfiles MethodInvocation dir list IfStatement BinaryOperation == MemberReference newfiles Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""IO error scanning directory "" MethodInvocation dir getAbsolutePath End IfStatement MemberReference ! followSymlinks BlockStatement LocalVariableDeclaration ReferenceType Vector VariableDeclarator noLinks ClassCreator ReferenceType Vector ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference newfiles length MemberReference ++ i BlockStatement TryStatement IfStatement MethodInvocation FILE_UTILS MemberReference dir MemberReference ArraySelector MemberReference i newfiles isSymbolicLink BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name BinaryOperation + MemberReference vpath MemberReference ArraySelector MemberReference i newfiles LocalVariableDeclaration ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MemberReference dir MemberReference ArraySelector MemberReference i newfiles IfStatement MethodInvocation file isDirectory BlockStatement StatementExpression MethodInvocation dirsExcluded MemberReference name addElement BlockStatement StatementExpression MethodInvocation filesExcluded MemberReference name addElement End BlockStatement StatementExpression MethodInvocation noLinks MemberReference ArraySelector MemberReference i newfiles addElement End CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""IOException caught while checking "" Literal ""for links, couldn't get canonical path!"" StatementExpression MethodInvocation System.err MemberReference msg println StatementExpression MethodInvocation noLinks MemberReference ArraySelector MemberReference i newfiles addElement End StatementExpression Assignment MemberReference newfiles ArrayCreator ReferenceType String MethodInvocation noLinks size = StatementExpression MethodInvocation noLinks MemberReference newfiles copyInto End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference newfiles length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name BinaryOperation + MemberReference vpath MemberReference ArraySelector MemberReference i newfiles LocalVariableDeclaration ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MemberReference dir MemberReference ArraySelector MemberReference i newfiles IfStatement MethodInvocation file isDirectory BlockStatement IfStatement MethodInvocation MemberReference name isIncluded BlockStatement StatementExpression MethodInvocation MemberReference name MemberReference file MemberReference fast accountForIncludedDir BlockStatement StatementExpression Assignment MemberReference everythingIncluded Literal false = StatementExpression MethodInvocation dirsNotIncluded MemberReference name addElement IfStatement BinaryOperation && MemberReference fast MethodInvocation MemberReference name couldHoldIncluded BlockStatement StatementExpression MethodInvocation MemberReference file BinaryOperation + MemberReference name MemberReference File separator MemberReference fast scandir End End IfStatement MemberReference ! fast BlockStatement StatementExpression MethodInvocation MemberReference file BinaryOperation + MemberReference name MemberReference File separator MemberReference fast scandir End IfStatement MethodInvocation file isFile BlockStatement IfStatement MethodInvocation MemberReference name isIncluded BlockStatement StatementExpression MethodInvocation MemberReference name MemberReference file accountForIncludedFile BlockStatement StatementExpression Assignment MemberReference everythingIncluded Literal false = StatementExpression MethodInvocation filesNotIncluded MemberReference name addElement End End End End MethodDeclaration /**
     * process included file
     * @param name  path of the file relative to the directory of the fileset
     * @param file  included file
     */ Modifier private accountForIncludedFile FormalParameter ReferenceType String name FormalParameter ReferenceType File file IfStatement BinaryOperation && BinaryOperation && MethodInvocation ! filesIncluded MemberReference name contains MethodInvocation ! filesExcluded MemberReference name contains MethodInvocation ! filesDeselected MemberReference name contains BlockStatement IfStatement MethodInvocation ! MemberReference name isExcluded BlockStatement IfStatement MethodInvocation MemberReference name MemberReference file isSelected BlockStatement StatementExpression MethodInvocation filesIncluded MemberReference name addElement BlockStatement StatementExpression Assignment MemberReference everythingIncluded Literal false = StatementExpression MethodInvocation filesDeselected MemberReference name addElement End BlockStatement StatementExpression Assignment MemberReference everythingIncluded Literal false = StatementExpression MethodInvocation filesExcluded MemberReference name addElement End End MethodDeclaration /**
     *
     * @param name path of the directory relative to the directory of
     * the fileset
     * @param file directory as file
     * @param fast
     */ Modifier private accountForIncludedDir FormalParameter ReferenceType String name FormalParameter ReferenceType File file FormalParameter BasicType boolean fast IfStatement BinaryOperation && BinaryOperation && MethodInvocation ! dirsIncluded MemberReference name contains MethodInvocation ! dirsExcluded MemberReference name contains MethodInvocation ! dirsDeselected MemberReference name contains BlockStatement IfStatement MethodInvocation ! MemberReference name isExcluded BlockStatement IfStatement MethodInvocation MemberReference name MemberReference file isSelected BlockStatement StatementExpression MethodInvocation dirsIncluded MemberReference name addElement IfStatement MemberReference fast BlockStatement StatementExpression MethodInvocation MemberReference file BinaryOperation + MemberReference name MemberReference File separator MemberReference fast scandir End BlockStatement StatementExpression Assignment MemberReference everythingIncluded Literal false = StatementExpression MethodInvocation dirsDeselected MemberReference name addElement IfStatement BinaryOperation && MemberReference fast MethodInvocation MemberReference name couldHoldIncluded BlockStatement StatementExpression MethodInvocation MemberReference file BinaryOperation + MemberReference name MemberReference File separator MemberReference fast scandir End End BlockStatement StatementExpression Assignment MemberReference everythingIncluded Literal false = StatementExpression MethodInvocation dirsExcluded MemberReference name addElement IfStatement BinaryOperation && MemberReference fast MethodInvocation MemberReference name couldHoldIncluded BlockStatement StatementExpression MethodInvocation MemberReference file BinaryOperation + MemberReference name MemberReference File separator MemberReference fast scandir End End End MethodDeclaration /**
     * Tests whether or not a name matches against at least one include
     * pattern.
     *
     * @param name The name to match. Must not be <code>null</code>.
     * @return <code>true</code> when the name matches against at least one
     *         include pattern, or <code>false</code> otherwise.
     */ Modifier protected BasicType boolean isIncluded FormalParameter ReferenceType String name ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference includes length MemberReference ++ i BlockStatement IfStatement MethodInvocation MemberReference ArraySelector MemberReference i includes MemberReference name MemberReference isCaseSensitive matchPath BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * Tests whether or not a name matches the start of at least one include
     * pattern.
     *
     * @param name The name to match. Must not be <code>null</code>.
     * @return <code>true</code> when the name matches against the start of at
     *         least one include pattern, or <code>false</code> otherwise.
     */ Modifier protected BasicType boolean couldHoldIncluded FormalParameter ReferenceType String name ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference includes length MemberReference ++ i BlockStatement IfStatement MethodInvocation MemberReference ArraySelector MemberReference i includes MemberReference name MemberReference isCaseSensitive matchPatternStart BlockStatement IfStatement MethodInvocation MemberReference name MemberReference ArraySelector MemberReference i includes isMorePowerfulThanExcludes BlockStatement ReturnStatement Literal true End End End ReturnStatement Literal false MethodDeclaration /**
     *  find out whether one particular include pattern is more powerful
     *  than all the excludes
     *  note : the power comparison is based on the length of the include pattern
     *  and of the exclude patterns without the wildcards
     *  ideally the comparison should be done based on the depth
     *  of the match, that is to say how many file separators have been matched
     *  before the first ** or the end of the pattern
     *
     *  IMPORTANT : this function should return false ""with care""
     *
     *  @param name the relative path that one want to test
     *  @param includepattern  one include pattern
     *  @return true if there is no exclude pattern more powerful than this include pattern
     *  @since ant1.6
     */ Modifier private BasicType boolean isMorePowerfulThanExcludes FormalParameter ReferenceType String name FormalParameter ReferenceType String includepattern LocalVariableDeclaration ReferenceType String VariableDeclarator soughtexclude BinaryOperation + BinaryOperation + MemberReference name MemberReference File separator Literal ""**"" ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator counter Literal 0 BinaryOperation < MemberReference counter MemberReference excludes length MemberReference ++ counter BlockStatement IfStatement MemberReference ArraySelector MemberReference counter MethodInvocation MemberReference soughtexclude equals excludes BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration /**
     * Tests whether or not a name matches against at least one exclude
     * pattern.
     *
     * @param name The name to match. Must not be <code>null</code>.
     * @return <code>true</code> when the name matches against at least one
     *         exclude pattern, or <code>false</code> otherwise.
     */ Modifier protected BasicType boolean isExcluded FormalParameter ReferenceType String name ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference excludes length MemberReference ++ i BlockStatement IfStatement MethodInvocation MemberReference ArraySelector MemberReference i excludes MemberReference name MemberReference isCaseSensitive matchPath BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * Tests whether a name should be selected.
     *
     * @param name the filename to check for selecting
     * @param file the java.io.File object for this filename
     * @return <code>false</code> when the selectors says that the file
     *         should not be selected, <code>true</code> otherwise.
     */ Modifier protected BasicType boolean isSelected FormalParameter ReferenceType String name FormalParameter ReferenceType File file IfStatement BinaryOperation != MemberReference selectors Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference selectors length MemberReference ++ i BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation MemberReference basedir MemberReference name MemberReference file isSelected selectors BlockStatement ReturnStatement Literal false End End End ReturnStatement Literal true MethodDeclaration /**
     * Returns the names of the files which matched at least one of the
     * include patterns and none of the exclude patterns.
     * The names are relative to the base directory.
     *
     * @return the names of the files which matched at least one of the
     *         include patterns and none of the exclude patterns.
     */ Modifier public ReferenceType String getIncludedFiles LocalVariableDeclaration ReferenceType String VariableDeclarator files ArrayCreator ReferenceType String MethodInvocation filesIncluded size StatementExpression MethodInvocation filesIncluded MemberReference files copyInto StatementExpression MethodInvocation Arrays MemberReference files sort ReturnStatement MemberReference files MethodDeclaration /**
     * Returns the names of the files which matched none of the include
     * patterns. The names are relative to the base directory. This involves
     * performing a slow scan if one has not already been completed.
     *
     * @return the names of the files which matched none of the include
     *         patterns.
     *
     * @see #slowScan
     */ Modifier public ReferenceType String getNotIncludedFiles StatementExpression MethodInvocation slowScan LocalVariableDeclaration ReferenceType String VariableDeclarator files ArrayCreator ReferenceType String MethodInvocation filesNotIncluded size StatementExpression MethodInvocation filesNotIncluded MemberReference files copyInto ReturnStatement MemberReference files MethodDeclaration /**
     * Returns the names of the files which matched at least one of the
     * include patterns and at least one of the exclude patterns.
     * The names are relative to the base directory. This involves
     * performing a slow scan if one has not already been completed.
     *
     * @return the names of the files which matched at least one of the
     *         include patterns and at least one of the exclude patterns.
     *
     * @see #slowScan
     */ Modifier public ReferenceType String getExcludedFiles StatementExpression MethodInvocation slowScan LocalVariableDeclaration ReferenceType String VariableDeclarator files ArrayCreator ReferenceType String MethodInvocation filesExcluded size StatementExpression MethodInvocation filesExcluded MemberReference files copyInto ReturnStatement MemberReference files MethodDeclaration /**
     * <p>Returns the names of the files which were selected out and
     * therefore not ultimately included.</p>
     *
     * <p>The names are relative to the base directory. This involves
     * performing a slow scan if one has not already been completed.</p>
     *
     * @return the names of the files which were deselected.
     *
     * @see #slowScan
     */ Modifier public ReferenceType String getDeselectedFiles StatementExpression MethodInvocation slowScan LocalVariableDeclaration ReferenceType String VariableDeclarator files ArrayCreator ReferenceType String MethodInvocation filesDeselected size StatementExpression MethodInvocation filesDeselected MemberReference files copyInto ReturnStatement MemberReference files MethodDeclaration /**
     * Returns the names of the directories which matched at least one of the
     * include patterns and none of the exclude patterns.
     * The names are relative to the base directory.
     *
     * @return the names of the directories which matched at least one of the
     * include patterns and none of the exclude patterns.
     */ Modifier public ReferenceType String getIncludedDirectories LocalVariableDeclaration ReferenceType String VariableDeclarator directories ArrayCreator ReferenceType String MethodInvocation dirsIncluded size StatementExpression MethodInvocation dirsIncluded MemberReference directories copyInto StatementExpression MethodInvocation Arrays MemberReference directories sort ReturnStatement MemberReference directories MethodDeclaration /**
     * Returns the names of the directories which matched none of the include
     * patterns. The names are relative to the base directory. This involves
     * performing a slow scan if one has not already been completed.
     *
     * @return the names of the directories which matched none of the include
     * patterns.
     *
     * @see #slowScan
     */ Modifier public ReferenceType String getNotIncludedDirectories StatementExpression MethodInvocation slowScan LocalVariableDeclaration ReferenceType String VariableDeclarator directories ArrayCreator ReferenceType String MethodInvocation dirsNotIncluded size StatementExpression MethodInvocation dirsNotIncluded MemberReference directories copyInto ReturnStatement MemberReference directories MethodDeclaration /**
     * Returns the names of the directories which matched at least one of the
     * include patterns and at least one of the exclude patterns.
     * The names are relative to the base directory. This involves
     * performing a slow scan if one has not already been completed.
     *
     * @return the names of the directories which matched at least one of the
     * include patterns and at least one of the exclude patterns.
     *
     * @see #slowScan
     */ Modifier public ReferenceType String getExcludedDirectories StatementExpression MethodInvocation slowScan LocalVariableDeclaration ReferenceType String VariableDeclarator directories ArrayCreator ReferenceType String MethodInvocation dirsExcluded size StatementExpression MethodInvocation dirsExcluded MemberReference directories copyInto ReturnStatement MemberReference directories MethodDeclaration /**
     * <p>Returns the names of the directories which were selected out and
     * therefore not ultimately included.</p>
     *
     * <p>The names are relative to the base directory. This involves
     * performing a slow scan if one has not already been completed.</p>
     *
     * @return the names of the directories which were deselected.
     *
     * @see #slowScan
     */ Modifier public ReferenceType String getDeselectedDirectories StatementExpression MethodInvocation slowScan LocalVariableDeclaration ReferenceType String VariableDeclarator directories ArrayCreator ReferenceType String MethodInvocation dirsDeselected size StatementExpression MethodInvocation dirsDeselected MemberReference directories copyInto ReturnStatement MemberReference directories MethodDeclaration /**
     * Adds default exclusions to the current exclusions set.
     */ Modifier public addDefaultExcludes LocalVariableDeclaration BasicType int VariableDeclarator excludesLength TernaryExpression BinaryOperation == MemberReference excludes Literal null Literal 0 MemberReference excludes length LocalVariableDeclaration ReferenceType String VariableDeclarator newExcludes StatementExpression Assignment MemberReference newExcludes ArrayCreator ReferenceType String BinaryOperation + MemberReference excludesLength MethodInvocation defaultExcludes size = IfStatement BinaryOperation > MemberReference excludesLength Literal 0 BlockStatement StatementExpression MethodInvocation System MemberReference excludes Literal 0 MemberReference newExcludes Literal 0 MemberReference excludesLength arraycopy End LocalVariableDeclaration ReferenceType String VariableDeclarator defaultExcludesTemp MethodInvocation getDefaultExcludes ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference defaultExcludesTemp length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference i MemberReference excludesLength newExcludes MemberReference ArraySelector MemberReference i MethodInvocation Literal '/' MemberReference File separatorChar replace MethodInvocation Literal '\\' MemberReference File separatorChar replace defaultExcludesTemp = End StatementExpression Assignment MemberReference excludes MemberReference newExcludes = MethodDeclaration /**
     * Get the named resource
     * @param name path name of the file relative to the dir attribute.
     *
     * @return the resource with the given name.
     * @since Ant 1.5.2
     */ Modifier public ReferenceType Resource getResource FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType File VariableDeclarator f MethodInvocation FILE_UTILS MemberReference basedir MemberReference name resolveFile ReturnStatement ClassCreator ReferenceType Resource MemberReference name MethodInvocation f exists MethodInvocation f lastModified MethodInvocation f isDirectory FieldDeclaration /**
     * temporary table to speed up the various scanning methods below
     *
     * @since Ant 1.6
     */ Modifier private ReferenceType Map VariableDeclarator fileListMap ClassCreator ReferenceType HashMap MethodDeclaration /**
     * Returns a cached result of list performed on file, if
     * available.  Invokes the method and caches the result otherwise.
     *
     * @since Ant 1.6
     */ Modifier private ReferenceType String list FormalParameter ReferenceType File file LocalVariableDeclaration ReferenceType String VariableDeclarator files Cast ReferenceType String MethodInvocation fileListMap MemberReference file get IfStatement BinaryOperation == MemberReference files Literal null BlockStatement StatementExpression Assignment MemberReference files MethodInvocation file list = IfStatement BinaryOperation != MemberReference files Literal null BlockStatement StatementExpression MethodInvocation fileListMap MemberReference file MemberReference files put End End ReturnStatement MemberReference files MethodDeclaration /**
     * From <code>base</code> traverse the filesystem in a case
     * insensitive manner in order to find a file that matches the
     * given name.
     *
     * @return File object that points to the file in question.  if it
     * hasn't been found it will simply be <code>new File(base,
     * path)</code>.
     *
     * @since Ant 1.6
     */ Modifier private ReferenceType File findFileCaseInsensitive FormalParameter ReferenceType File base FormalParameter ReferenceType String path LocalVariableDeclaration ReferenceType File VariableDeclarator f MethodInvocation MemberReference base MethodInvocation SelectorUtils MemberReference path tokenizePath findFileCaseInsensitive ReturnStatement TernaryExpression BinaryOperation == MemberReference f Literal null ClassCreator ReferenceType File MemberReference base MemberReference path MemberReference f MethodDeclaration /**
     * From <code>base</code> traverse the filesystem in a case
     * insensitive manner in order to find a file that matches the
     * given stack of names.
     *
     * @return File object that points to the file in question or null.
     *
     * @since Ant 1.6
     */ Modifier private ReferenceType File findFileCaseInsensitive FormalParameter ReferenceType File base FormalParameter ReferenceType Vector pathElements IfStatement BinaryOperation == MethodInvocation pathElements size Literal 0 BlockStatement ReturnStatement MemberReference base BlockStatement IfStatement MethodInvocation ! base isDirectory BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation MemberReference base list IfStatement BinaryOperation == MemberReference files Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""IO error scanning directory "" MethodInvocation base getAbsolutePath End LocalVariableDeclaration ReferenceType String VariableDeclarator current Cast ReferenceType String MethodInvocation pathElements Literal 0 remove ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation MemberReference current equals files BlockStatement StatementExpression Assignment MemberReference base ClassCreator ReferenceType File MemberReference base MemberReference ArraySelector MemberReference i files = ReturnStatement MethodInvocation MemberReference base MemberReference pathElements findFileCaseInsensitive End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation MemberReference current equalsIgnoreCase files BlockStatement StatementExpression Assignment MemberReference base ClassCreator ReferenceType File MemberReference base MemberReference ArraySelector MemberReference i files = ReturnStatement MethodInvocation MemberReference base MemberReference pathElements findFileCaseInsensitive End End End ReturnStatement Literal null MethodDeclaration /**
     * From <code>base</code> traverse the filesystem in order to find
     * a file that matches the given name.
     *
     * @return File object that points to the file in question or null.
     *
     * @since Ant 1.6
     */ Modifier private ReferenceType File findFile FormalParameter ReferenceType File base FormalParameter ReferenceType String path ReturnStatement MethodInvocation MemberReference base MethodInvocation SelectorUtils MemberReference path tokenizePath findFile MethodDeclaration /**
     * From <code>base</code> traverse the filesystem in order to find
     * a file that matches the given stack of names.
     *
     * @return File object that points to the file in question or null.
     *
     * @since Ant 1.6
     */ Modifier private ReferenceType File findFile FormalParameter ReferenceType File base FormalParameter ReferenceType Vector pathElements IfStatement BinaryOperation == MethodInvocation pathElements size Literal 0 BlockStatement ReturnStatement MemberReference base BlockStatement IfStatement MethodInvocation ! base isDirectory BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation MemberReference base list IfStatement BinaryOperation == MemberReference files Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""IO error scanning directory "" MethodInvocation base getAbsolutePath End LocalVariableDeclaration ReferenceType String VariableDeclarator current Cast ReferenceType String MethodInvocation pathElements Literal 0 remove ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation MemberReference current equals files BlockStatement StatementExpression Assignment MemberReference base ClassCreator ReferenceType File MemberReference base MemberReference ArraySelector MemberReference i files = ReturnStatement MethodInvocation MemberReference base MemberReference pathElements findFile End End End ReturnStatement Literal null MethodDeclaration /**
     * Do we have to traverse a symlink when trying to reach path from
     * basedir?
     * @since Ant 1.6
     */ Modifier private BasicType boolean isSymlink FormalParameter ReferenceType File base FormalParameter ReferenceType String path ReturnStatement MethodInvocation MemberReference base MethodInvocation SelectorUtils MemberReference path tokenizePath isSymlink MethodDeclaration /**
     * Do we have to traverse a symlink when trying to reach path from
     * basedir?
     * @since Ant 1.6
     */ Modifier private BasicType boolean isSymlink FormalParameter ReferenceType File base FormalParameter ReferenceType Vector pathElements IfStatement BinaryOperation > MethodInvocation pathElements size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator current Cast ReferenceType String MethodInvocation pathElements Literal 0 remove TryStatement IfStatement MethodInvocation FILE_UTILS MemberReference base MemberReference current isSymbolicLink BlockStatement ReturnStatement Literal true BlockStatement StatementExpression Assignment MemberReference base ClassCreator ReferenceType File MemberReference base MemberReference current = ReturnStatement MethodInvocation MemberReference base MemberReference pathElements isSymlink End CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""IOException caught while checking "" Literal ""for links, couldn't get canonical path!"" StatementExpression MethodInvocation System.err MemberReference msg println ReturnStatement Literal false End ReturnStatement Literal false FieldDeclaration /**
     * List of all scanned directories.
     *
     * @since Ant 1.6
     */ Modifier private ReferenceType Set VariableDeclarator scannedDirs ClassCreator ReferenceType HashSet MethodDeclaration /**
     * Has the directory with the given path relative to the base
     * directory already been scanned?
     *
     * <p>Registers the given directory as scanned as a side effect.</p>
     *
     * @since Ant 1.6
     */ Modifier private BasicType boolean hasBeenScanned FormalParameter ReferenceType String vpath ReturnStatement MethodInvocation ! scannedDirs MemberReference vpath add MethodDeclaration /**
     * Clear internal caches.
     *
     * @since Ant 1.6
     */ Modifier private clearCaches StatementExpression MethodInvocation fileListMap clear StatementExpression MethodInvocation scannedDirs clear ReferenceType FileScanner ReferenceType SelectorScanner ReferenceType ResourceFactory",0
190,190,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.BufferedReader Import java.io.File Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import java.io.OutputStream Import java.util.Hashtable Import java.util.Iterator Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.ExecTask Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.ExecuteStreamHandler Import org.apache.tools.ant.taskdefs.Java Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * BorlandDeploymentTool is dedicated to the Borland Application Server 4.5 and 4.5.1
 * This task generates and compiles the stubs and skeletons for all ejb described into the
 * Deployment Descriptor, builds the jar file including the support files and verify
 * whether the produced jar is valid or not.
 * The supported options are:
 * <ul>
 * <li>debug  (boolean)    : turn on the debug mode for generation of
 *                           stubs and skeletons (default:false)</li>
 * <li>verify (boolean)    : turn on the verification at the end of the jar
 *                           production  (default:true) </li>
 * <li>verifyargs (String) : add optional argument to verify command
 *                           (see vbj com.inprise.ejb.util.Verify)</li>
 * <li>basdtd (String)     : location of the BAS DTD </li>
 * <li>generateclient (boolean) : turn on the client jar file generation </li>
 * <li>version (int)       : tell what is the Borland appserver version 4 or 5 </li>
 * </ul>
 *
 *<PRE>
 *
 *      &lt;ejbjar srcdir=&quot;${build.classes}&quot;
 *               basejarname=&quot;vsmp&quot;
 *               descriptordir=&quot;${rsc.dir}/hrmanager&quot;&gt;
 *        &lt;borland destdir=&quot;tstlib&quot;&gt;
 *          &lt;classpath refid=&quot;classpath&quot; /&gt;
 *        &lt;/borland&gt;
 *        &lt;include name=&quot;**\ejb-jar.xml&quot;/&gt;
 *        &lt;support dir=&quot;${build.classes}&quot;&gt;
 *          &lt;include name=&quot;demo\smp\*.class&quot;/&gt;
 *          &lt;include name=&quot;demo\helper\*.class&quot;/&gt;
 *         &lt;/support&gt;
 *     &lt;/ejbjar&gt;
 *</PRE>
 *
 */ BorlandDeploymentTool FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PUBLICID_BORLAND_EJB Literal ""-//Inprise Corporation//DTD Enterprise JavaBeans 1.1//EN"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_BAS45_EJB11_DTD_LOCATION Literal ""/com/inprise/j2ee/xml/dtds/ejb-jar.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_BAS_DTD_LOCATION Literal ""/com/inprise/j2ee/xml/dtds/ejb-inprise.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator BAS_DD Literal ""ejb-inprise.xml"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator BES_DD Literal ""ejb-borland.xml"" FieldDeclaration /** Java2iiop executable **/ Modifier final protected static ReferenceType String VariableDeclarator JAVA2IIOP Literal ""java2iiop"" FieldDeclaration /** Verify class */ Modifier final protected static ReferenceType String VariableDeclarator VERIFY Literal ""com.inprise.ejb.util.Verify"" FieldDeclaration /** Instance variable that stores the suffix for the borland jarfile. */ Modifier private ReferenceType String VariableDeclarator jarSuffix Literal ""-ejb.jar"" FieldDeclaration /** Instance variable that stores the location of the borland DTD file. */ Modifier private ReferenceType String VariableDeclarator borlandDTD FieldDeclaration /** Instance variable that determines whether the debug mode is on */ Modifier private BasicType boolean VariableDeclarator java2iiopdebug Literal false FieldDeclaration /** store additional param for java2iiop command used to build EJB Stubs */ Modifier private ReferenceType String VariableDeclarator java2iioparams Literal null FieldDeclaration /** Instance variable that determines whether the client jar file is generated */ Modifier private BasicType boolean VariableDeclarator generateclient Literal false FieldDeclaration /** Borland Enterprise Server = version 5 */ Modifier final static BasicType int VariableDeclarator BES Literal 5 FieldDeclaration /** Borland Application Server or Inprise Application Server  = version 4 */ Modifier final static BasicType int VariableDeclarator BAS Literal 4 FieldDeclaration /** borland appserver version 4 or 5 */ Modifier private BasicType int VariableDeclarator version MemberReference BAS FieldDeclaration /**
     * Instance variable that determines whether it is necessary to verify the
     * produced jar
     */ Modifier private BasicType boolean VariableDeclarator verify Literal true FieldDeclaration Modifier private ReferenceType String VariableDeclarator verifyArgs Literal """" FieldDeclaration Modifier private ReferenceType Hashtable VariableDeclarator _genfiles ClassCreator ReferenceType Hashtable MethodDeclaration /**
     * set the debug mode for java2iiop (default false)
     **/ Modifier public setDebug FormalParameter BasicType boolean debug StatementExpression Assignment This MemberReference java2iiopdebug MemberReference debug = MethodDeclaration /**
     * set the verify  mode for the produced jar (default true)
     **/ Modifier public setVerify FormalParameter BasicType boolean verify StatementExpression Assignment This MemberReference verify MemberReference verify = MethodDeclaration /**
     * Setter used to store the suffix for the generated borland jar file.
     * @param inString the string to use as the suffix.
     */ Modifier public setSuffix FormalParameter ReferenceType String inString StatementExpression Assignment This MemberReference jarSuffix MemberReference inString = MethodDeclaration /**
     * sets some additional args to send to verify command
     * @param args additional command line parameters
     */ Modifier public setVerifyArgs FormalParameter ReferenceType String args StatementExpression Assignment This MemberReference verifyArgs MemberReference args = MethodDeclaration /**
     * Setter used to store the location of the borland DTD. This can be a file on the system
     * or a resource on the classpath.
     * @param inString the string to use as the DTD location.
     */ Modifier public setBASdtd FormalParameter ReferenceType String inString StatementExpression Assignment This MemberReference borlandDTD MemberReference inString = MethodDeclaration /**
     * setter used to store whether the task will include the generate client task.
     * (see : BorlandGenerateClient task)
     */ Modifier public setGenerateclient FormalParameter BasicType boolean b StatementExpression Assignment This MemberReference generateclient MemberReference b = MethodDeclaration /**
     * setter used to store the borland appserver version [4 or 5]
     * @param version app server version 4 or 5
     */ Modifier public setVersion FormalParameter BasicType int version StatementExpression Assignment This MemberReference version MemberReference version = MethodDeclaration /**
     * If filled, the params are added to the java2iiop command.
     * (ex: -no_warn_missing_define)
     * @param params additional params for java2iiop
     */ Modifier public setJava2iiopParams FormalParameter ReferenceType String params StatementExpression Assignment This MemberReference java2iioparams MemberReference params = MethodDeclaration Modifier protected ReferenceType DescriptorHandler getBorlandDescriptorHandler FormalParameter Modifier final ReferenceType File srcDir LocalVariableDeclaration ReferenceType DescriptorHandler VariableDeclarator handler ClassCreator ReferenceType DescriptorHandler MethodInvocation getTask MemberReference srcDir MethodDeclaration Modifier protected processElement IfStatement MethodInvocation currentElement Literal ""type-storage"" equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fileNameWithMETA MemberReference currentText LocalVariableDeclaration ReferenceType String VariableDeclarator fileName MethodInvocation fileNameWithMETA MethodInvocation META_DIR length MethodInvocation fileNameWithMETA length substring LocalVariableDeclaration ReferenceType File VariableDeclarator descriptorFile ClassCreator ReferenceType File MemberReference srcDir MemberReference fileName StatementExpression MethodInvocation ejbFiles MemberReference fileNameWithMETA MemberReference descriptorFile put End StatementExpression MethodInvocation handler MemberReference PUBLICID_BORLAND_EJB TernaryExpression BinaryOperation == MemberReference borlandDTD Literal null MemberReference DEFAULT_BAS_DTD_LOCATION MemberReference borlandDTD registerDTD ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation MemberReference dtdLocations MethodInvocation iterator getConfig MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType EjbJar ReferenceType DTDLocation VariableDeclarator dtdLocation Cast ReferenceType EjbJar ReferenceType DTDLocation MethodInvocation i next StatementExpression MethodInvocation handler MethodInvocation dtdLocation getPublicId MethodInvocation dtdLocation getLocation registerDTD End ReturnStatement MemberReference handler MethodDeclaration /**
     * Add any vendor specific files which should be included in the
     * EJB Jar.
     */ Modifier protected addVendorFiles FormalParameter ReferenceType Hashtable ejbFiles FormalParameter ReferenceType String ddPrefix IfStatement BinaryOperation || BinaryOperation == MemberReference version MemberReference BES BinaryOperation == MemberReference version MemberReference BAS BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""version "" MemberReference version Literal "" is not supported"" End LocalVariableDeclaration ReferenceType String VariableDeclarator dd TernaryExpression BinaryOperation == MemberReference version MemberReference BES MemberReference BES_DD MemberReference BAS_DD StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""vendor file : "" MemberReference ddPrefix MemberReference dd MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType File VariableDeclarator borlandDD ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig BinaryOperation + MemberReference ddPrefix MemberReference dd IfStatement MethodInvocation borlandDD exists BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Borland specific file found "" MemberReference borlandDD MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation ejbFiles BinaryOperation + MemberReference META_DIR MemberReference dd MemberReference borlandDD put BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Unable to locate borland deployment descriptor. "" Literal ""It was expected to be in "" MethodInvocation borlandDD getPath MemberReference Project MSG_WARN log ReturnStatement End MethodDeclaration /**
     * Get the vendor specific name of the Jar that will be output. The modification date
     * of this jar will be checked against the dependent bean classes.
     */ ReferenceType File getVendorOutputJarFile FormalParameter ReferenceType String baseName ReturnStatement ClassCreator ReferenceType File MethodInvocation getDestDir BinaryOperation + MemberReference baseName MemberReference jarSuffix MethodDeclaration /**
     * Verify the produced jar file by invoking the Borland verify tool
     * @param sourceJar java.io.File representing the produced jar file
     */ Modifier private verifyBorlandJar FormalParameter ReferenceType File sourceJar IfStatement BinaryOperation == MemberReference version MemberReference BAS BlockStatement StatementExpression MethodInvocation MemberReference sourceJar verifyBorlandJarV4 ReturnStatement End IfStatement BinaryOperation == MemberReference version MemberReference BES BlockStatement StatementExpression MethodInvocation MemberReference sourceJar verifyBorlandJarV5 ReturnStatement End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""verify jar skipped because the version is invalid ["" MemberReference version Literal ""]"" MemberReference Project MSG_WARN log MethodDeclaration /**
     * Verify the produced jar file by invoking the Borland iastool tool
     * @param sourceJar java.io.File representing the produced jar file
     */ Modifier private verifyBorlandJarV5 FormalParameter ReferenceType File sourceJar StatementExpression MethodInvocation BinaryOperation + Literal ""verify BES "" MemberReference sourceJar MemberReference Project MSG_INFO log TryStatement LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType ExecTask VariableDeclarator execTask Literal null StatementExpression Assignment MemberReference execTask Cast ReferenceType ExecTask MethodInvocation MethodInvocation getProject MethodInvocation Literal ""exec"" createTask getTask = StatementExpression MethodInvocation execTask ClassCreator ReferenceType File Literal ""."" setDir StatementExpression MethodInvocation execTask Literal ""iastool"" setExecutable IfStatement BinaryOperation != MethodInvocation getCombinedClasspath Literal null BlockStatement StatementExpression MethodInvocation execTask MethodInvocation Literal ""-VBJclasspath"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation MethodInvocation toString getCombinedClasspath setValue createArg End IfStatement MemberReference java2iiopdebug BlockStatement StatementExpression MethodInvocation execTask MethodInvocation Literal ""-debug"" setValue createArg End StatementExpression MethodInvocation execTask MethodInvocation Literal ""-verify"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-src"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation sourceJar getPath setValue createArg StatementExpression MethodInvocation Literal ""Calling iastool"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation execTask execute CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Exception while calling generateclient Details: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e MethodDeclaration /**
     * Verify the produced jar file by invoking the Borland verify tool
     * @param sourceJar java.io.File representing the produced jar file
     */ Modifier private verifyBorlandJarV4 FormalParameter ReferenceType File sourceJar LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType Java VariableDeclarator javaTask Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""verify BAS "" MemberReference sourceJar MemberReference Project MSG_INFO log TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator args MemberReference verifyArgs StatementExpression Assignment MemberReference args BinaryOperation + Literal "" "" MethodInvocation sourceJar getPath += StatementExpression Assignment MemberReference javaTask Cast ReferenceType Java MethodInvocation MethodInvocation getProject MethodInvocation Literal ""java"" createTask getTask = StatementExpression MethodInvocation javaTask Literal ""verify"" setTaskName StatementExpression MethodInvocation javaTask MemberReference VERIFY setClassname LocalVariableDeclaration ReferenceType Commandline ReferenceType Argument VariableDeclarator arguments MethodInvocation javaTask createArg StatementExpression MethodInvocation arguments MemberReference args setLine LocalVariableDeclaration ReferenceType Path VariableDeclarator classpath MethodInvocation getCombinedClasspath IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement StatementExpression MethodInvocation javaTask MemberReference classpath setClasspath StatementExpression MethodInvocation javaTask Literal true setFork End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Calling "" MemberReference VERIFY Literal "" for "" MethodInvocation sourceJar toString MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation javaTask execute CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Exception while calling "" MemberReference VERIFY Literal "" Details: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e MethodDeclaration /**
     * Generate the client jar corresponding to the jar file passed as parameter
     * the method uses the BorlandGenerateClient task.
     * @param sourceJar java.io.File representing the produced jar file
     */ Modifier private generateClient FormalParameter ReferenceType File sourceJar StatementExpression MethodInvocation MethodInvocation getProject MethodInvocation Literal ""internal_bas_generateclient"" ClassReference org.apache.tools.ant.taskdefs.optional.ejb ReferenceType BorlandGenerateClient addTaskDefinition getTask LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType optional ReferenceType ejb ReferenceType BorlandGenerateClient VariableDeclarator gentask Literal null StatementExpression MethodInvocation BinaryOperation + Literal ""generate client for "" MemberReference sourceJar MemberReference Project MSG_INFO log TryStatement LocalVariableDeclaration ReferenceType Project VariableDeclarator project MethodInvocation MethodInvocation getProject getTask StatementExpression Assignment MemberReference gentask Cast ReferenceType BorlandGenerateClient MethodInvocation project Literal ""internal_bas_generateclient"" createTask = StatementExpression MethodInvocation gentask MemberReference sourceJar setEjbjar StatementExpression MethodInvocation gentask MemberReference java2iiopdebug setDebug LocalVariableDeclaration ReferenceType Path VariableDeclarator classpath MethodInvocation getCombinedClasspath IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement StatementExpression MethodInvocation gentask MemberReference classpath setClasspath End StatementExpression MethodInvocation gentask MemberReference version setVersion StatementExpression MethodInvocation gentask Literal ""generate client"" setTaskName StatementExpression MethodInvocation gentask execute CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Exception while calling "" MemberReference VERIFY Literal "" Details: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e MethodDeclaration /**
     * Generate stubs & skeleton for each home found into the DD
     * Add all the generate class file into the ejb files
     * @param ithomes : iterator on home class
     */ Modifier private buildBorlandStubs FormalParameter ReferenceType Iterator ithomes LocalVariableDeclaration ReferenceType Execute VariableDeclarator execTask Literal null StatementExpression Assignment MemberReference execTask ClassCreator ReferenceType Execute This = LocalVariableDeclaration ReferenceType Project VariableDeclarator project MethodInvocation MethodInvocation getProject getTask StatementExpression MethodInvocation execTask MemberReference project setAntRun StatementExpression MethodInvocation execTask MethodInvocation project getBaseDir setWorkingDirectory LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandline ClassCreator ReferenceType Commandline StatementExpression MethodInvocation commandline MemberReference JAVA2IIOP setExecutable IfStatement MemberReference java2iiopdebug BlockStatement StatementExpression MethodInvocation commandline MethodInvocation Literal ""-VBJdebug"" setValue createArgument End StatementExpression MethodInvocation commandline MethodInvocation Literal ""-VBJclasspath"" setValue createArgument StatementExpression MethodInvocation commandline MethodInvocation MethodInvocation getCombinedClasspath setPath createArgument StatementExpression MethodInvocation commandline MethodInvocation Literal ""-list_files"" setValue createArgument StatementExpression MethodInvocation commandline MethodInvocation Literal ""-no_tie"" setValue createArgument IfStatement BinaryOperation != MemberReference java2iioparams Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""additional  "" MemberReference java2iioparams Literal "" to java2iiop "" Literal 0 log StatementExpression MethodInvocation commandline MethodInvocation MemberReference java2iioparams setValue createArgument End StatementExpression MethodInvocation commandline MethodInvocation Literal ""-root_dir"" setValue createArgument StatementExpression MethodInvocation commandline MethodInvocation MethodInvocation MemberReference srcDir MethodInvocation getAbsolutePath getConfig setValue createArgument StatementExpression MethodInvocation commandline MethodInvocation Literal ""-compile"" setValue createArgument WhileStatement MethodInvocation ithomes hasNext BlockStatement StatementExpression MethodInvocation commandline MethodInvocation MethodInvocation ithomes MethodInvocation toString next setValue createArgument End TryStatement StatementExpression MethodInvocation Literal ""Calling java2iiop"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation MethodInvocation commandline describeCommand MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation execTask MethodInvocation commandline getCommandline setCommandline LocalVariableDeclaration BasicType int VariableDeclarator result MethodInvocation execTask execute IfStatement MethodInvocation Execute MemberReference result isFailure BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + Literal ""Failed executing java2iiop (ret code is "" MemberReference result Literal "")"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation MethodInvocation getLocation getTask End CatchClause CatchClauseParameter java.io.IOException e StatementExpression MethodInvocation BinaryOperation + Literal ""java2iiop exception :"" MethodInvocation e getMessage MemberReference Project MSG_ERR log ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation MethodInvocation getLocation getTask MethodDeclaration /**
     * Method used to encapsulate the writing of the JAR file. Iterates over the
     * filenames/java.io.Files in the Hashtable stored on the instance variable
     * ejbFiles.
     */ Modifier protected writeJar FormalParameter ReferenceType String baseName FormalParameter ReferenceType File jarFile FormalParameter ReferenceType Hashtable files FormalParameter ReferenceType String publicId BuildException LocalVariableDeclaration ReferenceType Vector VariableDeclarator homes ClassCreator ReferenceType Vector LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation files MethodInvocation iterator keySet WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator clazz Cast ReferenceType String MethodInvocation it next IfStatement MethodInvocation clazz Literal ""Home.class"" endsWith BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator home MethodInvocation MemberReference clazz toClass StatementExpression MethodInvocation homes MemberReference home add StatementExpression MethodInvocation BinaryOperation + Literal "" Home "" MemberReference home MemberReference Project MSG_VERBOSE log End End StatementExpression MethodInvocation MethodInvocation homes iterator buildBorlandStubs StatementExpression MethodInvocation files MemberReference _genfiles putAll StatementExpression SuperMethodInvocation MemberReference baseName MemberReference jarFile MemberReference files MemberReference publicId writeJar IfStatement MemberReference verify BlockStatement StatementExpression MethodInvocation MemberReference jarFile verifyBorlandJar End IfStatement MemberReference generateclient BlockStatement StatementExpression MethodInvocation MemberReference jarFile generateClient End MethodDeclaration /**
     * convert a class file name : A/B/C/toto.class
     * into    a class name: A.B.C.toto
     */ Modifier private ReferenceType String toClass FormalParameter ReferenceType String filename LocalVariableDeclaration ReferenceType String VariableDeclarator classname MethodInvocation filename Literal 0 MethodInvocation filename Literal "".class"" lastIndexOf substring StatementExpression Assignment MemberReference classname MethodInvocation classname Literal '\\' Literal '.' replace = ReturnStatement MemberReference classname MethodDeclaration /**
     * convert a file name : A/B/C/toto.java
     * into    a class name: A/B/C/toto.class
     */ Modifier private ReferenceType String toClassFile FormalParameter ReferenceType String filename LocalVariableDeclaration ReferenceType String VariableDeclarator classfile MethodInvocation filename Literal 0 MethodInvocation filename Literal "".java"" lastIndexOf substring StatementExpression Assignment MemberReference classfile BinaryOperation + MemberReference classfile Literal "".class"" = ReturnStatement MemberReference classfile MethodDeclaration Modifier public start IOException MethodDeclaration Modifier public stop MethodDeclaration Modifier public setProcessInputStream FormalParameter ReferenceType OutputStream param1 IOException MethodDeclaration /**
     *
     * @param is
     * @exception java.io.IOException
     */ Modifier public setProcessOutputStream FormalParameter ReferenceType InputStream is IOException TryStatement LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator reader ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference is LocalVariableDeclaration ReferenceType String VariableDeclarator javafile WhileStatement BinaryOperation != Assignment MemberReference javafile MethodInvocation reader readLine = Literal null BlockStatement IfStatement MethodInvocation javafile Literal "".java"" endsWith BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator classfile MethodInvocation MemberReference javafile toClassFile LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation classfile BinaryOperation + MethodInvocation MemberReference srcDir MethodInvocation getAbsolutePath MethodInvocation length getConfig Literal 1 substring StatementExpression MethodInvocation _genfiles MemberReference key ClassCreator ReferenceType File MemberReference classfile put End End StatementExpression MethodInvocation reader close CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Exception while parsing  java2iiop output. Details: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e MethodDeclaration Modifier public setProcessErrorStream FormalParameter ReferenceType InputStream is IOException LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator reader ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference is LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation reader readLine IfStatement BinaryOperation != MemberReference s Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""[java2iiop] "" MemberReference s MemberReference Project MSG_ERR log End ReferenceType GenericDeploymentTool ReferenceType ExecuteStreamHandler",1
55,55,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.optional.image Import javax.media.jai.PlanarImage Import java.awt.BasicStroke Import java.awt.Graphics2D Import java.awt.image.BufferedImage ClassDeclaration Modifier public /**
 *
 * @see org.apache.tools.ant.taskdefs.optional.image.Image
 */ Rectangle FieldDeclaration Modifier protected BasicType int VariableDeclarator width Literal 0 FieldDeclaration Modifier protected BasicType int VariableDeclarator height Literal 0 FieldDeclaration Modifier protected BasicType int VariableDeclarator arcwidth Literal 0 FieldDeclaration Modifier protected BasicType int VariableDeclarator archeight Literal 0 MethodDeclaration Modifier public setWidth FormalParameter BasicType int w StatementExpression Assignment MemberReference width MemberReference w = MethodDeclaration Modifier public setHeight FormalParameter BasicType int h StatementExpression Assignment MemberReference height MemberReference h = MethodDeclaration Modifier public setArcwidth FormalParameter BasicType int w StatementExpression Assignment MemberReference arcwidth MemberReference w = MethodDeclaration Modifier public setArcheight FormalParameter BasicType int h StatementExpression Assignment MemberReference archeight MemberReference h = MethodDeclaration Modifier public ReferenceType PlanarImage executeDrawOperation StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\tCreating Rectangle w="" MemberReference width Literal "" h="" MemberReference height Literal "" arcw="" MemberReference arcwidth Literal "" arch="" MemberReference archeight log LocalVariableDeclaration ReferenceType BufferedImage VariableDeclarator bi ClassCreator ReferenceType BufferedImage MemberReference width MemberReference height MemberReference BufferedImage TYPE_4BYTE_ABGR_PRE LocalVariableDeclaration ReferenceType Graphics2D VariableDeclarator graphics Cast ReferenceType Graphics2D MethodInvocation bi getGraphics IfStatement MethodInvocation ! stroke Literal ""transparent"" equals BlockStatement LocalVariableDeclaration ReferenceType BasicStroke VariableDeclarator b_stroke ClassCreator ReferenceType BasicStroke MemberReference stroke_width StatementExpression MethodInvocation graphics MethodInvocation ColorMapper MemberReference stroke getColorByName setColor StatementExpression MethodInvocation graphics MemberReference b_stroke setStroke IfStatement BinaryOperation || BinaryOperation != MemberReference arcwidth Literal 0 BinaryOperation != MemberReference archeight Literal 0 BlockStatement StatementExpression MethodInvocation graphics Literal 0 Literal 0 MemberReference width MemberReference height MemberReference arcwidth MemberReference archeight drawRoundRect BlockStatement StatementExpression MethodInvocation graphics Literal 0 Literal 0 MemberReference width MemberReference height drawRect End End IfStatement MethodInvocation ! fill Literal ""transparent"" equals BlockStatement StatementExpression MethodInvocation graphics MethodInvocation ColorMapper MemberReference fill getColorByName setColor IfStatement BinaryOperation || BinaryOperation != MemberReference arcwidth Literal 0 BinaryOperation != MemberReference archeight Literal 0 BlockStatement StatementExpression MethodInvocation graphics MemberReference stroke_width MemberReference stroke_width BinaryOperation - MemberReference width BinaryOperation * MemberReference stroke_width Literal 2 BinaryOperation - MemberReference height BinaryOperation * MemberReference stroke_width Literal 2 MemberReference arcwidth MemberReference archeight fillRoundRect BlockStatement StatementExpression MethodInvocation graphics MemberReference stroke_width MemberReference stroke_width BinaryOperation - MemberReference width BinaryOperation * MemberReference stroke_width Literal 2 BinaryOperation - MemberReference height BinaryOperation * MemberReference stroke_width Literal 2 fillRect End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation instructions size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType ImageOperation VariableDeclarator instr Cast ReferenceType ImageOperation MethodInvocation instructions MemberReference i elementAt IfStatement BinaryOperation instanceof MemberReference instr ReferenceType DrawOperation BlockStatement LocalVariableDeclaration ReferenceType PlanarImage VariableDeclarator img Cast ReferenceType DrawOperation MemberReference instr StatementExpression MethodInvocation graphics MethodInvocation img getAsBufferedImage Literal null Literal 0 Literal 0 drawImage IfStatement BinaryOperation instanceof MemberReference instr ReferenceType TransformOperation BlockStatement StatementExpression Assignment MemberReference graphics Cast ReferenceType Graphics2D MethodInvocation bi getGraphics = LocalVariableDeclaration ReferenceType PlanarImage VariableDeclarator image Cast ReferenceType TransformOperation MemberReference instr StatementExpression Assignment MemberReference bi MethodInvocation image getAsBufferedImage = End End End ReturnStatement MethodInvocation PlanarImage MemberReference bi wrapRenderedImage ReferenceType BasicShape ReferenceType DrawOperation",0
121,121,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import java.io.File Import java.util.Enumeration Import java.util.Locale Import java.util.Stack Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.PathTokenizer Import org.apache.tools.ant.Project Import org.apache.tools.ant.util.JavaEnvUtils ClassDeclaration Modifier public /**
 * This object represents a path as used by CLASSPATH or PATH
 * environment variable.
 * <p>
 * <code>
 * &lt;sometask&gt;<br>
 * &nbsp;&nbsp;&lt;somepath&gt;<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement location=""/path/to/file.jar"" /&gt;<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement path=""/path/to/file2.jar:/path/to/class2;/path/to/class3"" /&gt;<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement location=""/path/to/file3.jar"" /&gt;<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement location=""/path/to/file4.jar"" /&gt;<br>
 * &nbsp;&nbsp;&lt;/somepath&gt;<br>
 * &lt;/sometask&gt;<br>
 * </code>
 * <p>
 * The object implemention <code>sometask</code> must provide a method called
 * <code>createSomepath</code> which returns an instance of <code>Path</code>.
 * Nested path definitions are handled by the Path object and must be labeled
 * <code>pathelement</code>.<p>
 *
 * The path element takes a parameter <code>path</code> which will be parsed
 * and split into single elements. It will usually be used
 * to define a path from an environment variable.
 *
 */ Path FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator elements FieldDeclaration /** The system classspath as a Path object */ Modifier public static ReferenceType Path VariableDeclarator systemClasspath ClassCreator ReferenceType Path Literal null MethodInvocation System Literal ""java.class.path"" getProperty FieldDeclaration /**
     * The system bootclassspath as a Path object.
     *
     * @since Ant 1.6.2
     */ Modifier public static ReferenceType Path VariableDeclarator systemBootClasspath ClassCreator ReferenceType Path Literal null MethodInvocation System Literal ""sun.boot.class.path"" getProperty ClassDeclaration Modifier public /**
     * Helper class, holds the nested <code>&lt;pathelement&gt;</code> values.
     */ PathElement FieldDeclaration Modifier private ReferenceType String VariableDeclarator parts MethodDeclaration Modifier public setLocation FormalParameter ReferenceType File loc StatementExpression Assignment MemberReference parts ArrayCreator ReferenceType String ArrayInitializer MethodInvocation MethodInvocation loc getAbsolutePath translateFile = MethodDeclaration Modifier public setPath FormalParameter ReferenceType String path StatementExpression Assignment MemberReference parts MethodInvocation Path MethodInvocation getProject MemberReference path translatePath = MethodDeclaration Modifier public ReferenceType String getParts ReturnStatement MemberReference parts ConstructorDeclaration Modifier public /**
     * Invoked by IntrospectionHelper for <code>setXXX(Path p)</code>
     * attribute setters.
     */ Path FormalParameter ReferenceType Project p FormalParameter ReferenceType String path StatementExpression ExplicitConstructorInvocation MemberReference p StatementExpression MethodInvocation MethodInvocation MemberReference path setPath createPathElement ConstructorDeclaration Modifier public Path FormalParameter ReferenceType Project project StatementExpression MethodInvocation MemberReference project setProject StatementExpression Assignment MemberReference elements ClassCreator ReferenceType Vector = MethodDeclaration /**
     * Adds a element definition to the path.
     * @param location the location of the element to add (must not be
     * <code>null</code> nor empty.
     */ Modifier public setLocation FormalParameter ReferenceType File location BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression MethodInvocation MethodInvocation MemberReference location setLocation createPathElement MethodDeclaration /**
     * Parses a path definition and creates single PathElements.
     * @param path the path definition.
     */ Modifier public setPath FormalParameter ReferenceType String path BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression MethodInvocation MethodInvocation MemberReference path setPath createPathElement MethodDeclaration /**
     * Makes this instance in effect a reference to another Path instance.
     *
     * <p>You must not set another attribute or nest elements inside
     * this element if you make it a reference.</p>
     */ Modifier public setRefid FormalParameter ReferenceType Reference r BuildException IfStatement MethodInvocation ! elements isEmpty BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression MethodInvocation elements MemberReference r addElement StatementExpression SuperMethodInvocation MemberReference r setRefid MethodDeclaration /**
     * Creates the nested <code>&lt;pathelement&gt;</code> element.
     */ Modifier public ReferenceType PathElement createPathElement BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End LocalVariableDeclaration ReferenceType PathElement VariableDeclarator pe ClassCreator ReferenceType PathElement StatementExpression MethodInvocation elements MemberReference pe addElement ReturnStatement MemberReference pe MethodDeclaration /**
     * Adds a nested <code>&lt;fileset&gt;</code> element.
     */ Modifier public addFileset FormalParameter ReferenceType FileSet fs BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End StatementExpression MethodInvocation elements MemberReference fs addElement StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Adds a nested <code>&lt;filelist&gt;</code> element.
     */ Modifier public addFilelist FormalParameter ReferenceType FileList fl BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End StatementExpression MethodInvocation elements MemberReference fl addElement StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Adds a nested <code>&lt;dirset&gt;</code> element.
     */ Modifier public addDirset FormalParameter ReferenceType DirSet dset BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End StatementExpression MethodInvocation elements MemberReference dset addElement StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Adds a nested path
     * @since Ant 1.6
     */ Modifier public add FormalParameter ReferenceType Path path BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End StatementExpression MethodInvocation elements MemberReference path addElement StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Creates a nested <code>&lt;path&gt;</code> element.
     */ Modifier public ReferenceType Path createPath BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End LocalVariableDeclaration ReferenceType Path VariableDeclarator p ClassCreator ReferenceType Path MethodInvocation getProject StatementExpression MethodInvocation elements MemberReference p addElement StatementExpression MethodInvocation Literal false setChecked ReturnStatement MemberReference p MethodDeclaration /**
     * Append the contents of the other Path instance to this.
     */ Modifier public append FormalParameter ReferenceType Path other IfStatement BinaryOperation == MemberReference other Literal null BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator l MethodInvocation other list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference l length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MethodInvocation elements MemberReference ArraySelector MemberReference i l indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation elements MemberReference ArraySelector MemberReference i l addElement End End MethodDeclaration /**
     * Adds the components on the given path which exist to this
     * Path. Components that don't exist, aren't added.
     *
     * @param source - source path whose components are examined for existence
     */ Modifier public addExisting FormalParameter ReferenceType Path source StatementExpression MethodInvocation MemberReference source Literal false addExisting MethodDeclaration /** Same as addExisting, but support classpath behavior if tryUserDir
     * is true. Classpaths are relative to user dir, not the project base.
     * That used to break jspc test
     *
     * @param source
     * @param tryUserDir
     */ Modifier public addExisting FormalParameter ReferenceType Path source FormalParameter BasicType boolean tryUserDir LocalVariableDeclaration ReferenceType String VariableDeclarator list MethodInvocation source list LocalVariableDeclaration ReferenceType File VariableDeclarator userDir TernaryExpression MemberReference tryUserDir ClassCreator ReferenceType File MethodInvocation System Literal ""user.dir"" getProperty Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference list length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f Literal null IfStatement BinaryOperation != MethodInvocation getProject Literal null BlockStatement StatementExpression Assignment MemberReference f MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i list resolveFile getProject = BlockStatement StatementExpression Assignment MemberReference f ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i list = End IfStatement BinaryOperation && MemberReference tryUserDir MethodInvocation ! f exists BlockStatement StatementExpression Assignment MemberReference f ClassCreator ReferenceType File MemberReference userDir MemberReference ArraySelector MemberReference i list = End IfStatement MethodInvocation f exists BlockStatement StatementExpression MethodInvocation MemberReference f setLocation BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""dropping "" MemberReference f Literal "" from path as it doesn't exist"" MemberReference Project MSG_VERBOSE log End End MethodDeclaration /**
     * Returns all path elements defined by this and nested path objects.
     * @return list of path elements.
     */ Modifier public ReferenceType String list IfStatement MethodInvocation ! isChecked BlockStatement LocalVariableDeclaration ReferenceType Stack VariableDeclarator stk ClassCreator ReferenceType Stack StatementExpression MethodInvocation stk This push StatementExpression MethodInvocation MemberReference stk MethodInvocation getProject dieOnCircularReference End LocalVariableDeclaration ReferenceType Vector VariableDeclarator result ClassCreator ReferenceType Vector BinaryOperation * Literal 2 MethodInvocation elements size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation elements size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation elements MemberReference i elementAt IfStatement BinaryOperation instanceof MemberReference o ReferenceType Reference BlockStatement LocalVariableDeclaration ReferenceType Reference VariableDeclarator r Cast ReferenceType Reference MemberReference o StatementExpression Assignment MemberReference o MethodInvocation r MethodInvocation getProject getReferencedObject = IfStatement BinaryOperation instanceof MemberReference o ReferenceType Path BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + MethodInvocation r getRefId Literal "" doesn\'t denote a path "" MemberReference o ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End End IfStatement BinaryOperation instanceof MemberReference o ReferenceType String BlockStatement StatementExpression MethodInvocation MemberReference result Cast ReferenceType String MemberReference o addUnlessPresent IfStatement BinaryOperation instanceof MemberReference o ReferenceType PathElement BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator parts Cast ReferenceType PathElement MemberReference o IfStatement BinaryOperation == MemberReference parts Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You must either set location or"" Literal "" path on <pathelement>"" End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference parts length MemberReference ++ j BlockStatement StatementExpression MethodInvocation MemberReference result MemberReference ArraySelector MemberReference j parts addUnlessPresent End IfStatement BinaryOperation instanceof MemberReference o ReferenceType Path BlockStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator p Cast ReferenceType Path MemberReference o IfStatement BinaryOperation == MethodInvocation p getProject Literal null BlockStatement StatementExpression MethodInvocation p MethodInvocation getProject setProject End LocalVariableDeclaration ReferenceType String VariableDeclarator parts MethodInvocation p list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference parts length MemberReference ++ j BlockStatement StatementExpression MethodInvocation MemberReference result MemberReference ArraySelector MemberReference j parts addUnlessPresent End IfStatement BinaryOperation instanceof MemberReference o ReferenceType DirSet BlockStatement LocalVariableDeclaration ReferenceType DirSet VariableDeclarator dset Cast ReferenceType DirSet MemberReference o LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation dset MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation ds getIncludedDirectories LocalVariableDeclaration ReferenceType File VariableDeclarator dir MethodInvocation dset MethodInvocation getProject getDir StatementExpression MethodInvocation MemberReference result MemberReference dir MemberReference s addUnlessPresent IfStatement BinaryOperation instanceof MemberReference o ReferenceType FileSet BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MemberReference o LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation fs MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation ds getIncludedFiles LocalVariableDeclaration ReferenceType File VariableDeclarator dir MethodInvocation fs MethodInvocation getProject getDir StatementExpression MethodInvocation MemberReference result MemberReference dir MemberReference s addUnlessPresent IfStatement BinaryOperation instanceof MemberReference o ReferenceType FileList BlockStatement LocalVariableDeclaration ReferenceType FileList VariableDeclarator fl Cast ReferenceType FileList MemberReference o LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation fl MethodInvocation getProject getFiles LocalVariableDeclaration ReferenceType File VariableDeclarator dir MethodInvocation fl MethodInvocation getProject getDir StatementExpression MethodInvocation MemberReference result MemberReference dir MemberReference s addUnlessPresent End End End End End End End LocalVariableDeclaration ReferenceType String VariableDeclarator res ArrayCreator ReferenceType String MethodInvocation result size StatementExpression MethodInvocation result MemberReference res copyInto ReturnStatement MemberReference res MethodDeclaration /**
     * Returns a textual representation of the path, which can be used as
     * CLASSPATH or PATH environment variable definition.
     * @return a textual representation of the path.
     */ Modifier public ReferenceType String toString LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator list MethodInvocation list IfStatement BinaryOperation == MemberReference list length Literal 0 BlockStatement ReturnStatement Literal """" End LocalVariableDeclaration Modifier final ReferenceType StringBuffer VariableDeclarator result ClassCreator ReferenceType StringBuffer MemberReference ArraySelector Literal 0 MethodInvocation toString list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference list length MemberReference ++ i BlockStatement StatementExpression MethodInvocation result MemberReference File pathSeparatorChar append StatementExpression MethodInvocation result MemberReference ArraySelector MemberReference i list append End ReturnStatement MethodInvocation result toString MethodDeclaration /**
     * Splits a PATH (with : or ; as separators) into its parts.
     */ Modifier public static ReferenceType String translatePath FormalParameter ReferenceType Project project FormalParameter ReferenceType String source LocalVariableDeclaration Modifier final ReferenceType Vector VariableDeclarator result ClassCreator ReferenceType Vector IfStatement BinaryOperation == MemberReference source Literal null BlockStatement ReturnStatement ArrayCreator ReferenceType String Literal 0 End LocalVariableDeclaration ReferenceType PathTokenizer VariableDeclarator tok ClassCreator ReferenceType PathTokenizer MemberReference source LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator element ClassCreator ReferenceType StringBuffer WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator pathElement MethodInvocation tok nextToken TryStatement StatementExpression MethodInvocation element MethodInvocation MemberReference project MemberReference pathElement resolveFile append CatchClause CatchClauseParameter BuildException e StatementExpression MethodInvocation project BinaryOperation + BinaryOperation + Literal ""Dropping path element "" MemberReference pathElement Literal "" as it is not valid relative to the project"" MemberReference Project MSG_VERBOSE log ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation element length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference element MemberReference i translateFileSep End StatementExpression MethodInvocation result MethodInvocation element toString addElement StatementExpression Assignment MemberReference element ClassCreator ReferenceType StringBuffer = End LocalVariableDeclaration ReferenceType String VariableDeclarator res ArrayCreator ReferenceType String MethodInvocation result size StatementExpression MethodInvocation result MemberReference res copyInto ReturnStatement MemberReference res MethodDeclaration /**
     * Returns its argument with all file separator characters
     * replaced so that they match the local OS conventions.
     */ Modifier public static ReferenceType String translateFile FormalParameter ReferenceType String source IfStatement BinaryOperation == MemberReference source Literal null BlockStatement ReturnStatement Literal """" End LocalVariableDeclaration Modifier final ReferenceType StringBuffer VariableDeclarator result ClassCreator ReferenceType StringBuffer MemberReference source ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation result length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference result MemberReference i translateFileSep End ReturnStatement MethodInvocation result toString MethodDeclaration /**
     * Translates all occurrences of / or \ to correct separator of the
     * current platform and returns whether it had to do any
     * replacements.
     */ Modifier protected static BasicType boolean translateFileSep FormalParameter ReferenceType StringBuffer buffer FormalParameter BasicType int pos IfStatement BinaryOperation || BinaryOperation == MethodInvocation buffer MemberReference pos charAt Literal '/' BinaryOperation == MethodInvocation buffer MemberReference pos charAt Literal '\\' BlockStatement StatementExpression MethodInvocation buffer MemberReference pos MemberReference File separatorChar setCharAt ReturnStatement Literal true End ReturnStatement Literal false MethodDeclaration /**
     * How many parts does this Path instance consist of.
     */ Modifier public BasicType int size ReturnStatement MethodInvocation MemberReference length list MethodDeclaration /**
     * Return a Path that holds the same elements as this instance.
     */ Modifier public ReferenceType Object clone TryStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator p Cast ReferenceType Path SuperMethodInvocation clone StatementExpression Assignment MemberReference p elements Cast ReferenceType Vector MethodInvocation elements clone = ReturnStatement MemberReference p CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * Overrides the version of DataType to recurse on all DataType
     * child elements that may have been added.
     */ Modifier protected dieOnCircularReference FormalParameter ReferenceType Stack stk FormalParameter ReferenceType Project p BuildException IfStatement MethodInvocation isChecked BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation elements elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation e nextElement IfStatement BinaryOperation instanceof MemberReference o ReferenceType Reference BlockStatement StatementExpression Assignment MemberReference o Cast ReferenceType Reference MemberReference o = End IfStatement BinaryOperation instanceof MemberReference o ReferenceType DataType BlockStatement IfStatement MethodInvocation stk MemberReference o contains BlockStatement ThrowStatement MethodInvocation circularReference BlockStatement StatementExpression MethodInvocation stk MemberReference o push StatementExpression Cast ReferenceType DataType MemberReference o StatementExpression MethodInvocation stk pop End End End StatementExpression MethodInvocation Literal true setChecked MethodDeclaration /**
     * Resolve a filename with Project's help - if we know one that is.
     *
     * <p>Assume the filename is absolute if project is null.</p>
     */ Modifier private static ReferenceType String resolveFile FormalParameter ReferenceType Project project FormalParameter ReferenceType String relativeName IfStatement BinaryOperation != MemberReference project Literal null BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f MethodInvocation project MemberReference relativeName resolveFile ReturnStatement MethodInvocation f getAbsolutePath End ReturnStatement MemberReference relativeName MethodDeclaration /**
     * Adds a String to the Vector if it isn't already included.
     */ Modifier private static addUnlessPresent FormalParameter ReferenceType Vector v FormalParameter ReferenceType String s IfStatement BinaryOperation == MethodInvocation v MemberReference s indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation v MemberReference s addElement End MethodDeclaration /**
     * Adds absolute path names of listed files in the given directory
     * to the Vector if they are not already included.
     */ Modifier private static addUnlessPresent FormalParameter ReferenceType Vector v FormalParameter ReferenceType File dir FormalParameter ReferenceType String s ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference s length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator d ClassCreator ReferenceType File MemberReference dir MemberReference ArraySelector MemberReference j s LocalVariableDeclaration ReferenceType String VariableDeclarator absolutePath MethodInvocation d getAbsolutePath StatementExpression MethodInvocation MemberReference v MethodInvocation MemberReference absolutePath translateFile addUnlessPresent End MethodDeclaration /**
     * Concatenates the system class path in the order specified by
     * the ${build.sysclasspath} property - using &quot;last&quot; as
     * default value.
     */ Modifier public ReferenceType Path concatSystemClasspath ReturnStatement MethodInvocation Literal ""last"" concatSystemClasspath MethodDeclaration /**
     * Concatenates the system class path in the order specified by
     * the ${build.sysclasspath} property - using the supplied value
     * if ${build.sysclasspath} has not been set.
     */ Modifier public ReferenceType Path concatSystemClasspath FormalParameter ReferenceType String defValue LocalVariableDeclaration ReferenceType Path VariableDeclarator result ClassCreator ReferenceType Path MethodInvocation getProject LocalVariableDeclaration ReferenceType String VariableDeclarator order MemberReference defValue IfStatement BinaryOperation != MethodInvocation getProject Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator o MethodInvocation MethodInvocation Literal ""build.sysclasspath"" getProperty getProject IfStatement BinaryOperation != MemberReference o Literal null BlockStatement StatementExpression Assignment MemberReference order MemberReference o = End End IfStatement MethodInvocation order Literal ""only"" equals BlockStatement StatementExpression MethodInvocation result MemberReference Path systemClasspath Literal true addExisting IfStatement MethodInvocation order Literal ""first"" equals BlockStatement StatementExpression MethodInvocation result MemberReference Path systemClasspath Literal true addExisting StatementExpression MethodInvocation result This addExisting IfStatement MethodInvocation order Literal ""ignore"" equals BlockStatement StatementExpression MethodInvocation result This addExisting BlockStatement IfStatement MethodInvocation ! order Literal ""last"" equals BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""invalid value for build.sysclasspath: "" MemberReference order MemberReference Project MSG_WARN log End StatementExpression MethodInvocation result This addExisting StatementExpression MethodInvocation result MemberReference Path systemClasspath Literal true addExisting End End End ReturnStatement MemberReference result MethodDeclaration /**
     * Add the Java Runtime classes to this Path instance.
     */ Modifier public addJavaRuntime IfStatement Literal MethodInvocation MethodInvocation System Literal ""java.vm.name"" getProperty equals ""Kaffe"" BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator kaffeShare ClassCreator ReferenceType File BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal ""share"" MemberReference File separator Literal ""kaffe"" IfStatement MethodInvocation kaffeShare isDirectory BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator kaffeJarFiles ClassCreator ReferenceType FileSet StatementExpression MethodInvocation kaffeJarFiles MemberReference kaffeShare setDir StatementExpression MethodInvocation kaffeJarFiles Literal ""*.jar"" setIncludes StatementExpression MethodInvocation MemberReference kaffeJarFiles addFileset End IfStatement Literal MethodInvocation MethodInvocation System Literal ""java.vm.name"" getProperty equals ""GNU libgcj"" BlockStatement StatementExpression MethodInvocation MemberReference systemBootClasspath addExisting End End IfStatement BinaryOperation >= MethodInvocation System MethodInvocation MemberReference Locale US toLowerCase MethodInvocation Literal ""microsoft"" indexOf Literal ""java.vendor"" getProperty Literal 0 BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator msZipFiles ClassCreator ReferenceType FileSet StatementExpression MethodInvocation msZipFiles ClassCreator ReferenceType File BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal ""Packages"" setDir StatementExpression MethodInvocation msZipFiles Literal ""*.ZIP"" setIncludes StatementExpression MethodInvocation MemberReference msZipFiles addFileset IfStatement MethodInvocation JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_1 isJavaVersion BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType Path Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal ""lib"" MemberReference File separator Literal ""classes.zip"" addExisting BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType Path Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal ""lib"" MemberReference File separator Literal ""rt.jar"" addExisting StatementExpression MethodInvocation ClassCreator ReferenceType Path Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal ""jre"" MemberReference File separator Literal ""lib"" MemberReference File separator Literal ""rt.jar"" addExisting LocalVariableDeclaration ReferenceType String VariableDeclarator secJars ArrayInitializer Literal ""jce"" Literal ""jsse"" ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference secJars length MemberReference ++ i BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType Path Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal ""lib"" MemberReference File separator MemberReference ArraySelector MemberReference i secJars Literal "".jar"" addExisting StatementExpression MethodInvocation ClassCreator ReferenceType Path Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal "".."" MemberReference File separator Literal ""Classes"" MemberReference File separator MemberReference ArraySelector MemberReference i secJars Literal "".jar"" addExisting End LocalVariableDeclaration ReferenceType String VariableDeclarator ibmJars ArrayInitializer Literal ""core"" Literal ""graphics"" Literal ""security"" Literal ""server"" Literal ""xml"" ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ibmJars length MemberReference ++ i BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType Path Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal ""lib"" MemberReference File separator MemberReference ArraySelector MemberReference i ibmJars Literal "".jar"" addExisting End StatementExpression MethodInvocation ClassCreator ReferenceType Path Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal "".."" MemberReference File separator Literal ""Classes"" MemberReference File separator Literal ""classes.jar"" addExisting StatementExpression MethodInvocation ClassCreator ReferenceType Path Literal null BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation System Literal ""java.home"" getProperty MemberReference File separator Literal "".."" MemberReference File separator Literal ""Classes"" MemberReference File separator Literal ""ui.jar"" addExisting End End MethodDeclaration /**
     * Emulation of extdirs feature in java >= 1.2.
     * This method adds all files in the given
     * directories (but not in sub-directories!) to the classpath,
     * so that you don't have to specify them all one by one.
     * @param extdirs - Path to append files to
     */ Modifier public addExtdirs FormalParameter ReferenceType Path extdirs IfStatement BinaryOperation == MemberReference extdirs Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator extProp MethodInvocation System Literal ""java.ext.dirs"" getProperty IfStatement BinaryOperation != MemberReference extProp Literal null BlockStatement StatementExpression Assignment MemberReference extdirs ClassCreator ReferenceType Path MethodInvocation getProject MemberReference extProp = BlockStatement ReturnStatement End End LocalVariableDeclaration ReferenceType String VariableDeclarator dirs MethodInvocation extdirs list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference dirs length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator dir MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i dirs resolveFile getProject IfStatement BinaryOperation && MethodInvocation dir exists MethodInvocation dir isDirectory BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs ClassCreator ReferenceType FileSet StatementExpression MethodInvocation fs MemberReference dir setDir StatementExpression MethodInvocation fs Literal ""*"" setIncludes StatementExpression MethodInvocation MemberReference fs addFileset End End ReferenceType DataType ReferenceType Cloneable",0
406,406,,0
522,522,,1
116,116,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.Task Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.AntClassLoader Import java.net.URL ClassDeclaration Modifier public /**
 * Find a class or resource on the supplied classpath, or the
 * system classpath if none is supplied. The named property is set if
 * the item can be found. For example
 * <pre>
 * &lt;whichresource resource=""/log4j.properties""
 *   property=""log4j.url"" &gt;
 * </pre>
 * @since Ant 1.6
 * @ant.attribute.group name=""oneof"" description=""Exactly one of these two""
 */ WhichResource FieldDeclaration /**
     * our classpath
     */ Modifier private ReferenceType Path VariableDeclarator classpath FieldDeclaration /**
     * class to look for
     */ Modifier private ReferenceType String VariableDeclarator classname FieldDeclaration /**
     * resource to look for
     */ Modifier private ReferenceType String VariableDeclarator resource FieldDeclaration /**
     * property to set
     */ Modifier private ReferenceType String VariableDeclarator property MethodDeclaration /**
     * Set the classpath to be used for this compilation.
     * @param cp the classpath to be used.
     */ Modifier public setClasspath FormalParameter ReferenceType Path cp IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath MemberReference cp = BlockStatement StatementExpression MethodInvocation classpath MemberReference cp append End MethodDeclaration /**
     * Adds a path to the classpath.
     * @return a classpath to be configured.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation classpath createPath MethodDeclaration /**
     * validate
     */ Modifier private validate LocalVariableDeclaration BasicType int VariableDeclarator setcount Literal 0 IfStatement BinaryOperation != MemberReference classname Literal null BlockStatement StatementExpression MemberReference ++ setcount End IfStatement BinaryOperation != MemberReference resource Literal null BlockStatement StatementExpression MemberReference ++ setcount End IfStatement BinaryOperation == MemberReference setcount Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""One of classname or resource must be specified"" End IfStatement BinaryOperation > MemberReference setcount Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one of classname or resource can be specified"" End IfStatement BinaryOperation == MemberReference property Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No property defined"" End MethodDeclaration /**
     * execute it
     * @throws BuildException
     */ Modifier public execute BuildException StatementExpression MethodInvocation validate IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""using user supplied classpath: "" MemberReference classpath MemberReference Project MSG_DEBUG log getProject StatementExpression Assignment MemberReference classpath MethodInvocation classpath Literal ""ignore"" concatSystemClasspath = BlockStatement StatementExpression Assignment MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = StatementExpression Assignment MemberReference classpath MethodInvocation classpath Literal ""only"" concatSystemClasspath = StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""using system classpath: "" MemberReference classpath MemberReference Project MSG_DEBUG log getProject End LocalVariableDeclaration ReferenceType AntClassLoader VariableDeclarator loader StatementExpression Assignment MemberReference loader ClassCreator ReferenceType AntClassLoader MethodInvocation MethodInvocation getCoreLoader getProject MethodInvocation getProject MemberReference classpath Literal false = LocalVariableDeclaration ReferenceType String VariableDeclarator location Literal null IfStatement BinaryOperation != MemberReference classname Literal null BlockStatement StatementExpression Assignment MemberReference resource BinaryOperation + MethodInvocation classname Literal '.' Literal '/' replace Literal "".class"" = End IfStatement BinaryOperation == MemberReference resource Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""One of class or resource is required"" End IfStatement MethodInvocation resource Literal ""/"" startsWith BlockStatement StatementExpression Assignment MemberReference resource MethodInvocation resource Literal 1 substring = End StatementExpression MethodInvocation BinaryOperation + Literal ""Searching for "" MemberReference resource MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType URL VariableDeclarator url StatementExpression Assignment MemberReference url MethodInvocation loader MemberReference resource getResource = IfStatement BinaryOperation != MemberReference url Literal null BlockStatement StatementExpression Assignment MemberReference location MethodInvocation url toExternalForm = StatementExpression MethodInvocation MethodInvocation MemberReference property MemberReference location setNewProperty getProject End MethodDeclaration /**
     * name the resource to look for
     * @param resource the name of the resource to look for.
     * @ant.attribute group=""oneof""
     */ Modifier public setResource FormalParameter ReferenceType String resource StatementExpression Assignment This MemberReference resource MemberReference resource = MethodDeclaration /**
     * name the class to look for
     * @param classname the name of the class to look for.
     * @ant.attribute group=""oneof""
     */ Modifier public setClass FormalParameter ReferenceType String classname StatementExpression Assignment This MemberReference classname MemberReference classname = MethodDeclaration /**
     * the property to fill with the URL of the resource or class
     * @param property the property to be set.
     * @ant.attribute group=""required""
     */ Modifier public setProperty FormalParameter ReferenceType String property StatementExpression Assignment This MemberReference property MemberReference property = ReferenceType Task",0
159,159,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.lang.reflect.InvocationTargetException Import java.lang.reflect.Method Import java.util.Enumeration Import java.util.Vector ClassDeclaration /**
 * Destroys all registered <code>Process</code>es when the VM exits.
 *
 * @since Ant 1.5
 */ ProcessDestroyer FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator processes ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Method VariableDeclarator addShutdownHookMethod FieldDeclaration Modifier private ReferenceType Method VariableDeclarator removeShutdownHookMethod FieldDeclaration Modifier private ReferenceType ProcessDestroyerImpl VariableDeclarator destroyProcessThread Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator added Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator running Literal false ClassDeclaration Modifier private ProcessDestroyerImpl FieldDeclaration Modifier private BasicType boolean VariableDeclarator shouldDestroy Literal true ConstructorDeclaration Modifier public ProcessDestroyerImpl StatementExpression SuperConstructorInvocation Literal ""ProcessDestroyer Shutdown Hook"" MethodDeclaration Modifier public run IfStatement MemberReference shouldDestroy BlockStatement StatementExpression This ProcessDestroyer MethodInvocation run End MethodDeclaration Modifier public setShouldDestroy FormalParameter BasicType boolean shouldDestroy StatementExpression Assignment This MemberReference shouldDestroy MemberReference shouldDestroy = ReferenceType Thread ConstructorDeclaration Modifier public /**
     * Constructs a <code>ProcessDestroyer</code> and obtains
     * <code>Runtime.addShutdownHook()</code> and
     * <code>Runtime.removeShutdownHook()</code> through reflection. The
     * ProcessDestroyer manages a list of processes to be destroyed when the
     * VM exits. If a process is added when the list is empty,
     * this <code>ProcessDestroyer</code> is registered as a shutdown hook. If
     * removing a process results in an empty list, the
     * <code>ProcessDestroyer</code> is removed as a shutdown hook.
     */ ProcessDestroyer TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator paramTypes ArrayInitializer ClassReference ReferenceType Thread StatementExpression Assignment MemberReference addShutdownHookMethod ClassReference MethodInvocation Literal ""addShutdownHook"" MemberReference paramTypes getMethod ReferenceType Runtime = StatementExpression Assignment MemberReference removeShutdownHookMethod ClassReference MethodInvocation Literal ""removeShutdownHook"" MemberReference paramTypes getMethod ReferenceType Runtime = CatchClause CatchClauseParameter NoSuchMethodException e CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace MethodDeclaration /**
     * Registers this <code>ProcessDestroyer</code> as a shutdown hook,
     * uses reflection to ensure pre-JDK 1.3 compatibility.
     */ Modifier private addShutdownHook IfStatement BinaryOperation && BinaryOperation != MemberReference addShutdownHookMethod Literal null MemberReference ! running BlockStatement StatementExpression Assignment MemberReference destroyProcessThread ClassCreator ReferenceType ProcessDestroyerImpl = LocalVariableDeclaration ReferenceType Object VariableDeclarator args ArrayInitializer MemberReference destroyProcessThread TryStatement StatementExpression MethodInvocation addShutdownHookMethod MethodInvocation Runtime getRuntime MemberReference args invoke StatementExpression Assignment MemberReference added Literal true = CatchClause CatchClauseParameter IllegalAccessException e StatementExpression MethodInvocation e printStackTrace CatchClause CatchClauseParameter InvocationTargetException e LocalVariableDeclaration ReferenceType Throwable VariableDeclarator t MethodInvocation e getTargetException IfStatement BinaryOperation && BinaryOperation != MemberReference t Literal null BinaryOperation == MethodInvocation t getClass ClassReference ReferenceType IllegalStateException BlockStatement StatementExpression Assignment MemberReference running Literal true = BlockStatement StatementExpression MethodInvocation e printStackTrace End End MethodDeclaration /**
     * Removes this <code>ProcessDestroyer</code> as a shutdown hook,
     * uses reflection to ensure pre-JDK 1.3 compatibility
     */ Modifier private removeShutdownHook IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference removeShutdownHookMethod Literal null MemberReference added MemberReference ! running BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator args ArrayInitializer MemberReference destroyProcessThread TryStatement LocalVariableDeclaration ReferenceType Boolean VariableDeclarator removed Cast ReferenceType Boolean MethodInvocation removeShutdownHookMethod MethodInvocation Runtime getRuntime MemberReference args invoke IfStatement MethodInvocation ! removed booleanValue BlockStatement StatementExpression MethodInvocation System.err Literal ""Could not remove shutdown hook"" println End CatchClause CatchClauseParameter IllegalAccessException e StatementExpression MethodInvocation e printStackTrace CatchClause CatchClauseParameter InvocationTargetException e LocalVariableDeclaration ReferenceType Throwable VariableDeclarator t MethodInvocation e getTargetException IfStatement BinaryOperation && BinaryOperation != MemberReference t Literal null BinaryOperation == MethodInvocation t getClass ClassReference ReferenceType IllegalStateException BlockStatement StatementExpression Assignment MemberReference running Literal true = BlockStatement StatementExpression MethodInvocation e printStackTrace End StatementExpression MethodInvocation destroyProcessThread Literal false setShouldDestroy StatementExpression MethodInvocation destroyProcessThread start TryStatement StatementExpression MethodInvocation destroyProcessThread Literal 20000 join CatchClause CatchClauseParameter InterruptedException ie StatementExpression Assignment MemberReference destroyProcessThread Literal null = StatementExpression Assignment MemberReference added Literal false = End MethodDeclaration /**
     * Returns whether or not the ProcessDestroyer is registered as
     * as shutdown hook
     * @return true if this is currently added as shutdown hook
     */ Modifier public BasicType boolean isAddedAsShutdownHook ReturnStatement MemberReference added MethodDeclaration /**
     * Returns <code>true</code> if the specified <code>Process</code> was
     * successfully added to the list of processes to destroy upon VM exit.
     *
     * @param   process the process to add
     * @return  <code>true</code> if the specified <code>Process</code> was
     *          successfully added
     */ Modifier public BasicType boolean add FormalParameter ReferenceType Process process SynchronizedStatement MemberReference processes IfStatement BinaryOperation == MethodInvocation processes size Literal 0 BlockStatement StatementExpression MethodInvocation addShutdownHook End StatementExpression MethodInvocation processes MemberReference process addElement ReturnStatement MethodInvocation processes MemberReference process contains MethodDeclaration /**
     * Returns <code>true</code> if the specified <code>Process</code> was
     * successfully removed from the list of processes to destroy upon VM exit.
     *
     * @param   process the process to remove
     * @return  <code>true</code> if the specified <code>Process</code> was
     *          successfully removed
     */ Modifier public BasicType boolean remove FormalParameter ReferenceType Process process SynchronizedStatement MemberReference processes LocalVariableDeclaration BasicType boolean VariableDeclarator processRemoved MethodInvocation processes MemberReference process removeElement IfStatement BinaryOperation && MemberReference processRemoved BinaryOperation == MethodInvocation processes size Literal 0 BlockStatement StatementExpression MethodInvocation removeShutdownHook End ReturnStatement MemberReference processRemoved MethodDeclaration /**
     * Invoked by the VM when it is exiting.
     */ Modifier public run SynchronizedStatement MemberReference processes StatementExpression Assignment MemberReference running Literal true = LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation processes elements WhileStatement MethodInvocation e hasMoreElements BlockStatement StatementExpression Cast ReferenceType Process MethodInvocation e nextElement End ReferenceType Runnable",0
199,199,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors Import java.io.File ClassDeclaration Modifier public /**
 * Selector that filters files based on whether they are newer than
 * a matching file in another directory tree. It can contain a mapper
 * element, so isn't available as an ExtendSelector (since those
 * parameters can't hold other elements).
 *
 * @since 1.5
 */ DependSelector ConstructorDeclaration Modifier public /**
     * Creates a new <code>DependSelector</code> instance.
     *
     */ DependSelector MethodDeclaration /**
     * @return a string describing this object
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer Literal ""{dependselector targetdir: "" IfStatement BinaryOperation == MemberReference targetdir Literal null BlockStatement StatementExpression MethodInvocation buf Literal ""NOT YET SET"" append BlockStatement StatementExpression MethodInvocation buf MethodInvocation targetdir getName append End StatementExpression MethodInvocation buf Literal "" granularity: "" append StatementExpression MethodInvocation buf MemberReference granularity append IfStatement BinaryOperation != MemberReference map Literal null BlockStatement StatementExpression MethodInvocation buf Literal "" mapper: "" append StatementExpression MethodInvocation buf MethodInvocation map toString append IfStatement BinaryOperation != MemberReference mapperElement Literal null BlockStatement StatementExpression MethodInvocation buf Literal "" mapper: "" append StatementExpression MethodInvocation buf MethodInvocation mapperElement toString append End End StatementExpression MethodInvocation buf Literal ""}"" append ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * this test is our selection test that compared the file with the destfile
     * @param srcfile the source file
     * @param destfile the destination file
     * @return true if destination is out of date
     */ Modifier public BasicType boolean selectionTest FormalParameter ReferenceType File srcfile FormalParameter ReferenceType File destfile LocalVariableDeclaration BasicType boolean VariableDeclarator selected MethodInvocation SelectorUtils MemberReference srcfile MemberReference destfile MemberReference granularity isOutOfDate ReturnStatement MemberReference selected ReferenceType MappingSelector",0
326,326,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ssh Import com.jcraft.jsch.Channel Import com.jcraft.jsch.Session Import com.jcraft.jsch.JSchException Import java.io.File Import java.io.IOException Import java.io.InputStream Import java.io.FileInputStream Import java.io.OutputStream Import java.util.List Import java.util.Iterator ClassDeclaration Modifier public ScpToMessage FieldDeclaration Modifier private final BasicType int VariableDeclarator BUFFER_SIZE Literal 1024 FieldDeclaration Modifier private ReferenceType File VariableDeclarator localFile FieldDeclaration Modifier private ReferenceType String VariableDeclarator remotePath FieldDeclaration Modifier private ReferenceType List VariableDeclarator directoryList ConstructorDeclaration Modifier public /**
     * @since Ant 1.6.2
     */ ScpToMessage FormalParameter BasicType boolean verbose FormalParameter ReferenceType Session session FormalParameter ReferenceType File aLocalFile FormalParameter ReferenceType String aRemotePath StatementExpression ExplicitConstructorInvocation MemberReference verbose MemberReference session MemberReference aRemotePath StatementExpression Assignment This MemberReference localFile MemberReference aLocalFile = ConstructorDeclaration Modifier public /**
     * @since Ant 1.6.2
     */ ScpToMessage FormalParameter BasicType boolean verbose FormalParameter ReferenceType Session session FormalParameter ReferenceType List aDirectoryList FormalParameter ReferenceType String aRemotePath StatementExpression ExplicitConstructorInvocation MemberReference verbose MemberReference session MemberReference aRemotePath StatementExpression Assignment This MemberReference directoryList MemberReference aDirectoryList = ConstructorDeclaration Modifier private /**
     * @since Ant 1.6.2
     */ ScpToMessage FormalParameter BasicType boolean verbose FormalParameter ReferenceType Session session FormalParameter ReferenceType String aRemotePath StatementExpression SuperConstructorInvocation MemberReference verbose MemberReference session StatementExpression Assignment This MemberReference remotePath MemberReference aRemotePath = ConstructorDeclaration Modifier public ScpToMessage FormalParameter ReferenceType Session session FormalParameter ReferenceType File aLocalFile FormalParameter ReferenceType String aRemotePath StatementExpression ExplicitConstructorInvocation Literal false MemberReference session MemberReference aLocalFile MemberReference aRemotePath ConstructorDeclaration Modifier public ScpToMessage FormalParameter ReferenceType Session session FormalParameter ReferenceType List aDirectoryList FormalParameter ReferenceType String aRemotePath StatementExpression ExplicitConstructorInvocation Literal false MemberReference session MemberReference aDirectoryList MemberReference aRemotePath MethodDeclaration Modifier public execute IOException JSchException IfStatement BinaryOperation != MemberReference directoryList Literal null BlockStatement StatementExpression MethodInvocation doMultipleTransfer End IfStatement BinaryOperation != MemberReference localFile Literal null BlockStatement StatementExpression MethodInvocation doSingleTransfer End StatementExpression MethodInvocation Literal ""done.\n"" log MethodDeclaration Modifier private doSingleTransfer IOException JSchException LocalVariableDeclaration ReferenceType String VariableDeclarator cmd BinaryOperation + Literal ""scp -t "" MemberReference remotePath LocalVariableDeclaration ReferenceType Channel VariableDeclarator channel MethodInvocation MemberReference cmd openExecChannel TryStatement LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out MethodInvocation channel getOutputStream LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation channel getInputStream StatementExpression MethodInvocation channel connect StatementExpression MethodInvocation MemberReference in waitForAck StatementExpression MethodInvocation MemberReference localFile MemberReference in MemberReference out sendFileToRemote IfStatement BinaryOperation != MemberReference channel Literal null BlockStatement StatementExpression MethodInvocation channel disconnect End MethodDeclaration Modifier private doMultipleTransfer IOException JSchException LocalVariableDeclaration ReferenceType Channel VariableDeclarator channel MethodInvocation BinaryOperation + Literal ""scp -d -t "" MemberReference remotePath openExecChannel TryStatement LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out MethodInvocation channel getOutputStream LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in MethodInvocation channel getInputStream StatementExpression MethodInvocation channel connect StatementExpression MethodInvocation MemberReference in waitForAck ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation directoryList iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType Directory VariableDeclarator current Cast ReferenceType Directory MethodInvocation i next StatementExpression MethodInvocation MemberReference current MemberReference in MemberReference out sendDirectory End IfStatement BinaryOperation != MemberReference channel Literal null BlockStatement StatementExpression MethodInvocation channel disconnect End MethodDeclaration Modifier private sendDirectory FormalParameter ReferenceType Directory current FormalParameter ReferenceType InputStream in FormalParameter ReferenceType OutputStream out IOException ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator fileIt MethodInvocation current filesIterator MethodInvocation fileIt hasNext BlockStatement StatementExpression MethodInvocation Cast ReferenceType File MethodInvocation fileIt next MemberReference in MemberReference out sendFileToRemote End ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator dirIt MethodInvocation current directoryIterator MethodInvocation dirIt hasNext BlockStatement LocalVariableDeclaration ReferenceType Directory VariableDeclarator dir Cast ReferenceType Directory MethodInvocation dirIt next StatementExpression MethodInvocation MemberReference dir MemberReference in MemberReference out sendDirectoryToRemote End MethodDeclaration Modifier private sendDirectoryToRemote FormalParameter ReferenceType Directory directory FormalParameter ReferenceType InputStream in FormalParameter ReferenceType OutputStream out IOException LocalVariableDeclaration ReferenceType String VariableDeclarator command Literal ""D0755 0 "" StatementExpression Assignment MemberReference command MethodInvocation directory MethodInvocation getName getDirectory += StatementExpression Assignment MemberReference command Literal ""\n"" += StatementExpression MethodInvocation out MethodInvocation command getBytes write StatementExpression MethodInvocation out flush StatementExpression MethodInvocation MemberReference in waitForAck StatementExpression MethodInvocation MemberReference directory MemberReference in MemberReference out sendDirectory StatementExpression MethodInvocation out Literal MethodInvocation getBytes ""E\n"" write StatementExpression MethodInvocation MemberReference in waitForAck MethodDeclaration Modifier private sendFileToRemote FormalParameter ReferenceType File localFile FormalParameter ReferenceType InputStream in FormalParameter ReferenceType OutputStream out IOException LocalVariableDeclaration BasicType int VariableDeclarator filesize Cast BasicType int MethodInvocation localFile length LocalVariableDeclaration ReferenceType String VariableDeclarator command BinaryOperation + BinaryOperation + Literal ""C0644 "" MemberReference filesize Literal "" "" StatementExpression Assignment MemberReference command MethodInvocation localFile getName += StatementExpression Assignment MemberReference command Literal ""\n"" += StatementExpression MethodInvocation out MethodInvocation command getBytes write StatementExpression MethodInvocation out flush StatementExpression MethodInvocation MemberReference in waitForAck LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fis ClassCreator ReferenceType FileInputStream MemberReference localFile LocalVariableDeclaration BasicType byte VariableDeclarator buf ArrayCreator BasicType byte MemberReference BUFFER_SIZE LocalVariableDeclaration BasicType long VariableDeclarator startTime MethodInvocation System currentTimeMillis LocalVariableDeclaration BasicType int VariableDeclarator totalLength Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator trackProgress BinaryOperation && MethodInvocation getVerbose BinaryOperation > MemberReference filesize Literal 102400 LocalVariableDeclaration BasicType int VariableDeclarator initFilesize MemberReference filesize LocalVariableDeclaration BasicType int VariableDeclarator percentTransmitted Literal 0 TryStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Sending: "" MethodInvocation localFile getName Literal "" : "" MethodInvocation localFile length log WhileStatement Literal true BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator len MethodInvocation fis MemberReference buf Literal 0 MemberReference buf length read IfStatement BinaryOperation <= MemberReference len Literal 0 BlockStatement BreakStatement End StatementExpression MethodInvocation out MemberReference buf Literal 0 MemberReference len write StatementExpression Assignment MemberReference totalLength MemberReference len += IfStatement MemberReference trackProgress BlockStatement StatementExpression Assignment MemberReference percentTransmitted MethodInvocation MemberReference initFilesize MemberReference totalLength MemberReference percentTransmitted trackProgress = End End StatementExpression MethodInvocation out flush StatementExpression MethodInvocation MemberReference out sendAck StatementExpression MethodInvocation MemberReference in waitForAck LocalVariableDeclaration BasicType long VariableDeclarator endTime MethodInvocation System currentTimeMillis StatementExpression MethodInvocation MemberReference startTime MemberReference endTime MemberReference totalLength logStats StatementExpression MethodInvocation fis close MethodDeclaration Modifier public ReferenceType File getLocalFile ReturnStatement MemberReference localFile MethodDeclaration Modifier public ReferenceType String getRemotePath ReturnStatement MemberReference remotePath ReferenceType AbstractSshMessage",0
574,574,,0
582,582,,0
268,268,"CompilationUnit PackageDeclaration org.apache.tools.zip Import java.util.zip.ZipException InterfaceDeclaration Modifier public /**
 * General format of extra field data.
 *
 * <p>Extra fields usually appear twice per file, once in the local
 * file data and once in the central directory.  Usually they are the
 * same, but they don't have to be.  {@link
 * java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream} will
 * only use the local file data in both places.</p>
 *
 * @version $Revision$
 */ ZipExtraField MethodDeclaration /**
     * The Header-ID.
     *
     * @since 1.1
     */ ReferenceType ZipShort getHeaderId MethodDeclaration /**
     * Length of the extra field in the local file data - without
     * Header-ID or length specifier.
     *
     * @since 1.1
     */ ReferenceType ZipShort getLocalFileDataLength MethodDeclaration /**
     * Length of the extra field in the central directory - without
     * Header-ID or length specifier.
     *
     * @since 1.1
     */ ReferenceType ZipShort getCentralDirectoryLength MethodDeclaration /**
     * The actual data to put into local file data - without Header-ID
     * or length specifier.
     *
     * @since 1.1
     */ BasicType byte getLocalFileDataData MethodDeclaration /**
     * The actual data to put central directory - without Header-ID or
     * length specifier.
     *
     * @since 1.1
     */ BasicType byte getCentralDirectoryData MethodDeclaration /**
     * Populate data from this array as if it was in local file data.
     *
     * @since 1.1
     */ parseFromLocalFileData FormalParameter BasicType byte data FormalParameter BasicType int offset FormalParameter BasicType int length ZipException",0
42,42,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.regexp Import java.util.regex.Matcher Import java.util.regex.Pattern Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /***
 * Regular expression implementation using the JDK 1.4 regular expression package
 */ Jdk14RegexpRegexp ConstructorDeclaration Modifier public Jdk14RegexpRegexp StatementExpression SuperConstructorInvocation MethodDeclaration Modifier protected BasicType int getSubsOptions FormalParameter BasicType int options LocalVariableDeclaration BasicType int VariableDeclarator subsOptions MemberReference REPLACE_FIRST IfStatement MethodInvocation RegexpUtil MemberReference options MemberReference REPLACE_ALL hasFlag BlockStatement StatementExpression Assignment MemberReference subsOptions MemberReference REPLACE_ALL = End ReturnStatement MemberReference subsOptions MethodDeclaration Modifier public ReferenceType String substitute FormalParameter ReferenceType String input FormalParameter ReferenceType String argument FormalParameter BasicType int options BuildException LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator subst ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation argument length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation argument MemberReference i charAt IfStatement BinaryOperation == MemberReference c Literal '$' BlockStatement StatementExpression MethodInvocation subst Literal '\\' append StatementExpression MethodInvocation subst Literal '$' append IfStatement BinaryOperation == MemberReference c Literal '\\' BlockStatement IfStatement BinaryOperation < MemberReference ++ i MethodInvocation argument length BlockStatement StatementExpression Assignment MemberReference c MethodInvocation argument MemberReference i charAt = LocalVariableDeclaration BasicType int VariableDeclarator value MethodInvocation Character MemberReference c Literal 10 digit IfStatement BinaryOperation > MemberReference value Literal - 1 BlockStatement StatementExpression MethodInvocation subst MethodInvocation MemberReference value append Literal ""$"" append BlockStatement StatementExpression MethodInvocation subst MemberReference c append End BlockStatement StatementExpression MethodInvocation subst Literal '\\' append End BlockStatement StatementExpression MethodInvocation subst MemberReference c append End End End StatementExpression Assignment MemberReference argument MethodInvocation subst toString = LocalVariableDeclaration BasicType int VariableDeclarator sOptions MethodInvocation MemberReference options getSubsOptions LocalVariableDeclaration ReferenceType Pattern VariableDeclarator p MethodInvocation MemberReference options getCompiledPattern LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType Matcher VariableDeclarator m MethodInvocation p MemberReference input matcher IfStatement MethodInvocation RegexpUtil MemberReference sOptions MemberReference REPLACE_ALL hasFlag BlockStatement StatementExpression MethodInvocation sb MethodInvocation m MemberReference argument replaceAll append BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator res MethodInvocation m find IfStatement MemberReference res BlockStatement StatementExpression MethodInvocation m MemberReference sb MemberReference argument appendReplacement StatementExpression MethodInvocation m MemberReference sb appendTail BlockStatement StatementExpression MethodInvocation sb MemberReference input append End End ReturnStatement MethodInvocation sb toString ReferenceType Jdk14RegexpMatcher ReferenceType Regexp",0
352,352,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.FileInputStream Import java.io.InputStreamReader Import java.io.FileOutputStream Import java.io.OutputStreamWriter Import java.io.IOException Import java.io.PrintWriter Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.EnumeratedAttribute ClassDeclaration Modifier public /**
 * Creates a manifest file for inclusion in a JAR, Ant task wrapper
 * around {@link Manifest Manifest}.  This task can be used to write a
 * Manifest file, optionally replacing or updating an existing file.
 *
 *
 * @since Ant 1.5
 *
 * @ant.task category=""java""
 */ ManifestTask FieldDeclaration /**
     * Holds the real data.
     */ Modifier private ReferenceType Manifest VariableDeclarator nestedManifest ClassCreator ReferenceType Manifest FieldDeclaration /**
     * The file to which the manifest should be written when used as a task
     */ Modifier private ReferenceType File VariableDeclarator manifestFile FieldDeclaration /**
     * The mode with which the manifest file is written
     */ Modifier private ReferenceType Mode VariableDeclarator mode FieldDeclaration /**
     * The encoding of the manifest file
     */ Modifier private ReferenceType String VariableDeclarator encoding ClassDeclaration Modifier public static /**
     * Helper class for Manifest's mode attribute.
     */ Mode MethodDeclaration /**
         * Get Allowed values for the mode attribute.
         *
         * @return a String array of the allowed values.
         */ Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""update"" Literal ""replace"" ReferenceType EnumeratedAttribute ConstructorDeclaration Modifier public /**
     * Default constructor
     */ ManifestTask StatementExpression Assignment MemberReference mode ClassCreator ReferenceType Mode = StatementExpression MethodInvocation mode Literal ""replace"" setValue MethodDeclaration /**
     * Add a section to the manifest
     *
     * @param section the manifest section to be added
     *
     * @exception ManifestException if the section is not valid.
     */ Modifier public addConfiguredSection FormalParameter ReferenceType Manifest ReferenceType Section section ManifestException StatementExpression MethodInvocation nestedManifest MemberReference section addConfiguredSection MethodDeclaration /**
     * Add an attribute to the manifest - it is added to the main section.
     *
     * @param attribute the attribute to be added.
     *
     * @exception ManifestException if the attribute is not valid.
     */ Modifier public addConfiguredAttribute FormalParameter ReferenceType Manifest ReferenceType Attribute attribute ManifestException StatementExpression MethodInvocation nestedManifest MemberReference attribute addConfiguredAttribute MethodDeclaration /**
     * The name of the manifest file to create/update.
     * Required if used as a task.
     * @param f the Manifest file to be written
     */ Modifier public setFile FormalParameter ReferenceType File f StatementExpression Assignment MemberReference manifestFile MemberReference f = MethodDeclaration /**
     * The encoding to use for reading in an existing manifest file
     * @param encoding the manifest file encoding.
     */ Modifier public setEncoding FormalParameter ReferenceType String encoding StatementExpression Assignment This MemberReference encoding MemberReference encoding = MethodDeclaration /**
     * Update policy: either ""update"" or ""replace""; default is ""replace"".
     * @param m the mode value - update or replace.
     */ Modifier public setMode FormalParameter ReferenceType Mode m StatementExpression Assignment MemberReference mode MemberReference m = MethodDeclaration /**
     * Create or update the Manifest when used as a task.
     *
     * @throws BuildException if the manifest cannot be written.
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference manifestFile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""the file attribute is required"" End LocalVariableDeclaration ReferenceType Manifest VariableDeclarator toWrite MethodInvocation Manifest getDefaultManifest LocalVariableDeclaration ReferenceType Manifest VariableDeclarator current Literal null LocalVariableDeclaration ReferenceType BuildException VariableDeclarator error Literal null IfStatement MethodInvocation manifestFile exists BlockStatement LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fis Literal null LocalVariableDeclaration ReferenceType InputStreamReader VariableDeclarator isr Literal null TryStatement StatementExpression Assignment MemberReference fis ClassCreator ReferenceType FileInputStream MemberReference manifestFile = IfStatement BinaryOperation == MemberReference encoding Literal null BlockStatement StatementExpression Assignment MemberReference isr ClassCreator ReferenceType InputStreamReader MemberReference fis Literal ""UTF-8"" = BlockStatement StatementExpression Assignment MemberReference isr ClassCreator ReferenceType InputStreamReader MemberReference fis MemberReference encoding = End StatementExpression Assignment MemberReference current ClassCreator ReferenceType Manifest MemberReference isr = CatchClause CatchClauseParameter ManifestException m StatementExpression Assignment MemberReference error ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Existing manifest "" MemberReference manifestFile Literal "" is invalid"" MemberReference m MethodInvocation getLocation = CatchClause CatchClauseParameter IOException e StatementExpression Assignment MemberReference error ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Failed to read "" MemberReference manifestFile MemberReference e MethodInvocation getLocation = IfStatement BinaryOperation != MemberReference isr Literal null BlockStatement TryStatement StatementExpression MethodInvocation isr close CatchClause CatchClauseParameter IOException e End End TryStatement IfStatement BinaryOperation && MethodInvocation mode MethodInvocation Literal ""update"" equals getValue MethodInvocation manifestFile exists BlockStatement IfStatement BinaryOperation != MemberReference current Literal null BlockStatement StatementExpression MethodInvocation toWrite MemberReference current merge IfStatement BinaryOperation != MemberReference error Literal null BlockStatement ThrowStatement MemberReference error End End End StatementExpression MethodInvocation toWrite MemberReference nestedManifest merge CatchClause CatchClauseParameter ManifestException m ThrowStatement ClassCreator ReferenceType BuildException Literal ""Manifest is invalid"" MemberReference m MethodInvocation getLocation IfStatement MethodInvocation toWrite MemberReference current equals BlockStatement StatementExpression MethodInvocation Literal ""Manifest has not changed, do not recreate"" MemberReference Project MSG_VERBOSE log ReturnStatement End LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator w Literal null TryStatement LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator fos ClassCreator ReferenceType FileOutputStream MemberReference manifestFile LocalVariableDeclaration ReferenceType OutputStreamWriter VariableDeclarator osw ClassCreator ReferenceType OutputStreamWriter MemberReference fos Literal ""UTF-8"" StatementExpression Assignment MemberReference w ClassCreator ReferenceType PrintWriter MemberReference osw = StatementExpression MethodInvocation toWrite MemberReference w write CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Failed to write "" MemberReference manifestFile MemberReference e MethodInvocation getLocation IfStatement BinaryOperation != MemberReference w Literal null BlockStatement StatementExpression MethodInvocation w close End ReferenceType Task",0
473,473,,0
341,341,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.io.ByteArrayOutputStream Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStream Import java.lang.reflect.Constructor Import java.lang.reflect.InvocationTargetException Import java.lang.reflect.Method Import java.net.MalformedURLException Import java.net.URL Import java.util.Enumeration Import java.util.Hashtable Import java.util.Vector Import java.util.zip.ZipEntry Import java.util.zip.ZipFile Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.ant.util.JavaEnvUtils Import org.apache.tools.ant.util.LoaderUtils ClassDeclaration Modifier public /**
 * Used to load classes within ant with a different classpath from
 * that used to start ant. Note that it is possible to force a class
 * into this loader even when that class is on the system classpath by
 * using the forceLoadClass method. Any subsequent classes loaded by that
 * class will then use this loader rather than the system class loader.
 *
 */ AntClassLoader FieldDeclaration Modifier private final static ReferenceType FileUtils VariableDeclarator fileUtils MethodInvocation FileUtils newFileUtils ClassDeclaration Modifier private /**
     * An enumeration of all resources of a given name found within the
     * classpath of this class loader. This enumeration is used by the
     * ClassLoader.findResources method, which is in
     * turn used by the ClassLoader.getResources method.
     *
     * @see AntClassLoader#findResources(String)
     * @see java.lang.ClassLoader#getResources(String)
     */ ResourceEnumeration FieldDeclaration /**
         * The name of the resource being searched for.
         */ Modifier private ReferenceType String VariableDeclarator resourceName FieldDeclaration /**
         * The index of the next classpath element to search.
         */ Modifier private BasicType int VariableDeclarator pathElementsIndex FieldDeclaration /**
         * The URL of the next resource to return in the enumeration. If this
         * field is <code>null</code> then the enumeration has been completed,
         * i.e., there are no more elements to return.
         */ Modifier private ReferenceType URL VariableDeclarator nextResource ConstructorDeclaration /**
         * Constructs a new enumeration of resources of the given name found
         * within this class loader's classpath.
         *
         * @param name the name of the resource to search for.
         */ ResourceEnumeration FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference resourceName MemberReference name = StatementExpression Assignment This MemberReference pathElementsIndex Literal 0 = StatementExpression MethodInvocation findNextResource MethodDeclaration /**
         * Indicates whether there are more elements in the enumeration to
         * return.
         *
         * @return <code>true</code> if there are more elements in the
         *         enumeration; <code>false</code> otherwise.
         */ Modifier public BasicType boolean hasMoreElements ReturnStatement BinaryOperation != This MemberReference nextResource Literal null MethodDeclaration /**
         * Returns the next resource in the enumeration.
         *
         * @return the next resource in the enumeration
         */ Modifier public ReferenceType Object nextElement LocalVariableDeclaration ReferenceType URL VariableDeclarator ret This MemberReference nextResource StatementExpression MethodInvocation findNextResource ReturnStatement MemberReference ret MethodDeclaration /**
         * Locates the next resource of the correct name in the classpath and
         * sets <code>nextResource</code> to the URL of that resource. If no
         * more resources can be found, <code>nextResource</code> is set to
         * <code>null</code>.
         */ Modifier private findNextResource LocalVariableDeclaration ReferenceType URL VariableDeclarator url Literal null WhileStatement BinaryOperation && BinaryOperation < MemberReference pathElementsIndex MethodInvocation pathComponents size BinaryOperation == MemberReference url Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType File VariableDeclarator pathComponent Cast ReferenceType File MethodInvocation pathComponents MemberReference pathElementsIndex elementAt StatementExpression Assignment MemberReference url MethodInvocation MemberReference pathComponent This MemberReference resourceName getResourceURL = StatementExpression MemberReference ++ pathElementsIndex CatchClause CatchClauseParameter BuildException e End StatementExpression Assignment This MemberReference nextResource MemberReference url = ReferenceType Enumeration FieldDeclaration /**
     * The size of buffers to be used in this classloader.
     */ Modifier private final static BasicType int VariableDeclarator BUFFER_SIZE Literal 8192 FieldDeclaration /**
     * Number of array elements in a test array of strings
     */ Modifier private final static BasicType int VariableDeclarator NUMBER_OF_STRINGS Literal 256 FieldDeclaration /**
     * The components of the classpath that the classloader searches
     * for classes.
     */ Modifier private ReferenceType Vector VariableDeclarator pathComponents ClassCreator ReferenceType Vector FieldDeclaration /**
     * The project to which this class loader belongs.
     */ Modifier private ReferenceType Project VariableDeclarator project FieldDeclaration /**
     * Indicates whether the parent class loader should be
     * consulted before trying to load with this class loader.
     */ Modifier private BasicType boolean VariableDeclarator parentFirst Literal true FieldDeclaration /**
     * These are the package roots that are to be loaded by the parent class
     * loader regardless of whether the parent class loader is being searched
     * first or not.
     */ Modifier private ReferenceType Vector VariableDeclarator systemPackages ClassCreator ReferenceType Vector FieldDeclaration /**
     * These are the package roots that are to be loaded by this class loader
     * regardless of whether the parent class loader is being searched first
     * or not.
     */ Modifier private ReferenceType Vector VariableDeclarator loaderPackages ClassCreator ReferenceType Vector FieldDeclaration /**
     * Whether or not this classloader will ignore the base
     * classloader if it can't find a class.
     *
     * @see #setIsolated(boolean)
     */ Modifier private BasicType boolean VariableDeclarator ignoreBase Literal false FieldDeclaration /**
     * The parent class loader, if one is given or can be determined.
     */ Modifier private ReferenceType ClassLoader VariableDeclarator parent Literal null FieldDeclaration /**
     * A hashtable of zip files opened by the classloader (File to ZipFile).
     */ Modifier private ReferenceType Hashtable VariableDeclarator zipFiles ClassCreator ReferenceType Hashtable FieldDeclaration /**
     * The context loader saved when setting the thread's current
     * context loader.
     */ Modifier private ReferenceType ClassLoader VariableDeclarator savedContextLoader Literal null FieldDeclaration /**
     * Whether or not the context loader is currently saved.
     */ Modifier private BasicType boolean VariableDeclarator isContextLoaderSaved Literal false FieldDeclaration /**
     * Reflection method reference for getProtectionDomain;
     * used to avoid 1.1-compatibility problems.
     */ Modifier private static ReferenceType Method VariableDeclarator getProtectionDomain Literal null FieldDeclaration /**
     * Reflection method reference for defineClassProtectionDomain;
     * used to avoid 1.1-compatibility problems.
     */ Modifier private static ReferenceType Method VariableDeclarator defineClassProtectionDomain Literal null TryStatement StatementExpression Assignment MemberReference getProtectionDomain ClassReference MethodInvocation Literal ""getProtectionDomain"" ArrayCreator ReferenceType Class Literal 0 getMethod ReferenceType Class = LocalVariableDeclaration ReferenceType Class VariableDeclarator protectionDomain MethodInvocation Class Literal ""java.security.ProtectionDomain"" forName LocalVariableDeclaration ReferenceType Class VariableDeclarator args ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType String ClassReference BasicType byte MemberReference Integer TYPE MemberReference Integer TYPE MemberReference protectionDomain StatementExpression Assignment MemberReference defineClassProtectionDomain ClassReference MethodInvocation Literal ""defineClass"" MemberReference args getDeclaredMethod ReferenceType ClassLoader = CatchClause CatchClauseParameter Exception e ConstructorDeclaration Modifier public /**
     * Create an Ant Class Loader
     */ AntClassLoader StatementExpression MethodInvocation Literal null setParent ConstructorDeclaration Modifier public /**
     * Creates a classloader for the given project using the classpath given.
     *
     * @param project The project to which this classloader is to belong.
     *                Must not be <code>null</code>.
     * @param classpath The classpath to use to load the classes.  This
     *                is combined with the system classpath in a manner
     *                determined by the value of ${build.sysclasspath}.
     *                May be <code>null</code>, in which case no path
     *                elements are set up to start with.
     */ AntClassLoader FormalParameter ReferenceType Project project FormalParameter ReferenceType Path classpath StatementExpression MethodInvocation Literal null setParent StatementExpression MethodInvocation MemberReference project setProject StatementExpression MethodInvocation MemberReference classpath setClassPath ConstructorDeclaration Modifier public /**
     * Creates a classloader for the given project using the classpath given.
     *
     * @param parent The parent classloader to which unsatisfied loading
     *               attempts are delegated. May be <code>null</code>,
     *               in which case the classloader which loaded this
     *               class is used as the parent.
     * @param project The project to which this classloader is to belong.
     *                Must not be <code>null</code>.
     * @param classpath the classpath to use to load the classes.
     *                  May be <code>null</code>, in which case no path
     *                  elements are set up to start with.
     * @param parentFirst If <code>true</code>, indicates that the parent
     *                    classloader should be consulted  before trying to
     *                    load the a class through this loader.
     */ AntClassLoader FormalParameter ReferenceType ClassLoader parent FormalParameter ReferenceType Project project FormalParameter ReferenceType Path classpath FormalParameter BasicType boolean parentFirst StatementExpression ExplicitConstructorInvocation MemberReference project MemberReference classpath IfStatement BinaryOperation != MemberReference parent Literal null BlockStatement StatementExpression MethodInvocation MemberReference parent setParent End StatementExpression MethodInvocation MemberReference parentFirst setParentFirst StatementExpression MethodInvocation addJavaLibraries ConstructorDeclaration Modifier public /**
     * Creates a classloader for the given project using the classpath given.
     *
     * @param project The project to which this classloader is to belong.
     *                Must not be <code>null</code>.
     * @param classpath The classpath to use to load the classes. May be
     *                  <code>null</code>, in which case no path
     *                  elements are set up to start with.
     * @param parentFirst If <code>true</code>, indicates that the parent
     *                    classloader should be consulted before trying to
     *                    load the a class through this loader.
     */ AntClassLoader FormalParameter ReferenceType Project project FormalParameter ReferenceType Path classpath FormalParameter BasicType boolean parentFirst StatementExpression ExplicitConstructorInvocation Literal null MemberReference project MemberReference classpath MemberReference parentFirst ConstructorDeclaration Modifier public /**
     * Creates an empty class loader. The classloader should be configured
     * with path elements to specify where the loader is to look for
     * classes.
     *
     * @param parent The parent classloader to which unsatisfied loading
     *               attempts are delegated. May be <code>null</code>,
     *               in which case the classloader which loaded this
     *               class is used as the parent.
     * @param parentFirst If <code>true</code>, indicates that the parent
     *                    classloader should be consulted before trying to
     *                    load the a class through this loader.
     */ AntClassLoader FormalParameter ReferenceType ClassLoader parent FormalParameter BasicType boolean parentFirst StatementExpression MethodInvocation MemberReference parent setParent StatementExpression Assignment MemberReference project Literal null = StatementExpression Assignment This MemberReference parentFirst MemberReference parentFirst = MethodDeclaration /**
     * Set the project associated with this class loader
     *
     * @param project the project instance
     */ Modifier public setProject FormalParameter ReferenceType Project project StatementExpression Assignment This MemberReference project MemberReference project = IfStatement BinaryOperation != MemberReference project Literal null BlockStatement StatementExpression MethodInvocation project This addBuildListener End MethodDeclaration /**
     * Set the classpath to search for classes to load. This should not be
     * changed once the classloader starts to server classes
     *
     * @param classpath the search classpath consisting of directories and
     *        jar/zip files.
     */ Modifier public setClassPath FormalParameter ReferenceType Path classpath StatementExpression MethodInvocation pathComponents removeAllElements IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator actualClasspath MethodInvocation classpath Literal ""ignore"" concatSystemClasspath LocalVariableDeclaration ReferenceType String VariableDeclarator pathElements MethodInvocation actualClasspath list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pathElements length MemberReference ++ i BlockStatement TryStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i pathElements addPathElement CatchClause CatchClauseParameter BuildException e End End MethodDeclaration /**
     * Set the parent for this class loader. This is the class loader to which
     * this class loader will delegate to load classes
     *
     * @param parent the parent class loader.
     */ Modifier public setParent FormalParameter ReferenceType ClassLoader parent IfStatement BinaryOperation == MemberReference parent Literal null BlockStatement StatementExpression Assignment This MemberReference parent ClassReference MethodInvocation getClassLoader ReferenceType AntClassLoader = BlockStatement StatementExpression Assignment This MemberReference parent MemberReference parent = End MethodDeclaration /**
     * Control whether class lookup is delegated to the parent loader first
     * or after this loader. Use with extreme caution. Setting this to
     * false violates the class loader hierarchy and can lead to Linkage errors
     *
     * @param parentFirst if true, delegate initial class search to the parent
     *                    classloader.
     */ Modifier public setParentFirst FormalParameter BasicType boolean parentFirst StatementExpression Assignment This MemberReference parentFirst MemberReference parentFirst = MethodDeclaration /**
     * Logs a message through the project object if one has been provided.
     *
     * @param message The message to log.
     *                Should not be <code>null</code>.
     *
     * @param priority The logging priority of the message.
     */ Modifier protected log FormalParameter ReferenceType String message FormalParameter BasicType int priority IfStatement BinaryOperation != MemberReference project Literal null BlockStatement StatementExpression MethodInvocation project MemberReference message MemberReference priority log End MethodDeclaration /**
     * Sets the current thread's context loader to this classloader, storing
     * the current loader value for later resetting.
     */ Modifier public setThreadContextLoader IfStatement MemberReference isContextLoaderSaved BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Context loader has not been reset"" End IfStatement MethodInvocation LoaderUtils isContextLoaderAvailable BlockStatement StatementExpression Assignment MemberReference savedContextLoader MethodInvocation LoaderUtils getContextClassLoader = LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator loader This IfStatement BinaryOperation && BinaryOperation != MemberReference project Literal null Literal MethodInvocation MethodInvocation project Literal ""build.sysclasspath"" getProperty equals ""only"" BlockStatement StatementExpression Assignment MemberReference loader This MethodInvocation getClass MethodInvocation getClassLoader = End StatementExpression MethodInvocation LoaderUtils MemberReference loader setContextClassLoader StatementExpression Assignment MemberReference isContextLoaderSaved Literal true = End MethodDeclaration /**
     * Resets the current thread's context loader to its original value.
     */ Modifier public resetThreadContextLoader IfStatement BinaryOperation && MethodInvocation LoaderUtils isContextLoaderAvailable MemberReference isContextLoaderSaved BlockStatement StatementExpression MethodInvocation LoaderUtils MemberReference savedContextLoader setContextClassLoader StatementExpression Assignment MemberReference savedContextLoader Literal null = StatementExpression Assignment MemberReference isContextLoaderSaved Literal false = End MethodDeclaration /**
     * Adds an element to the classpath to be searched.
     *
     * @param pathElement The path element to add. Must not be
     *                    <code>null</code>.
     *
     * @exception BuildException if the given path element cannot be resolved
     *                           against the project.
     */ Modifier public addPathElement FormalParameter ReferenceType String pathElement BuildException LocalVariableDeclaration ReferenceType File VariableDeclarator pathComponent TernaryExpression BinaryOperation != MemberReference project Literal null MethodInvocation project MemberReference pathElement resolveFile ClassCreator ReferenceType File MemberReference pathElement TryStatement StatementExpression MethodInvocation MemberReference pathComponent addPathFile CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * Add a file to the path
     *
     * @param pathComponent the file which is to be added to the path for
     *                      this class loader
     *
     * @throws IOException if data needed from the file cannot be read.
     */ Modifier protected addPathFile FormalParameter ReferenceType File pathComponent IOException StatementExpression MethodInvocation pathComponents MemberReference pathComponent addElement MethodDeclaration /**
     * Returns the classpath this classloader will consult.
     *
     * @return the classpath used for this classloader, with elements
     *         separated by the path separator for the system.
     */ Modifier public ReferenceType String getClasspath LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType boolean VariableDeclarator firstPass Literal true LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator componentEnum MethodInvocation pathComponents elements WhileStatement MethodInvocation componentEnum hasMoreElements BlockStatement IfStatement MemberReference ! firstPass BlockStatement StatementExpression MethodInvocation sb MethodInvocation System Literal ""path.separator"" getProperty append BlockStatement StatementExpression Assignment MemberReference firstPass Literal false = End StatementExpression MethodInvocation sb Cast ReferenceType File MethodInvocation componentEnum nextElement append End ReturnStatement MethodInvocation sb toString MethodDeclaration /**
     * Sets whether this classloader should run in isolated mode. In
     * isolated mode, classes not found on the given classpath will
     * not be referred to the parent class loader but will cause a
     * ClassNotFoundException.
     *
     * @param isolated Whether or not this classloader should run in
     *                 isolated mode.
     */ Modifier public synchronized setIsolated FormalParameter BasicType boolean isolated StatementExpression Assignment MemberReference ignoreBase MemberReference isolated = MethodDeclaration /**
     * Forces initialization of a class in a JDK 1.1 compatible, albeit hacky
     * way.
     *
     * @param theClass The class to initialize.
     *                 Must not be <code>null</code>.
     *
     * @deprecated use Class.forName with initialize=true instead.
     */ Modifier public static initializeClass FormalParameter ReferenceType Class theClass LocalVariableDeclaration Modifier final ReferenceType Constructor VariableDeclarator cons MethodInvocation theClass getDeclaredConstructors IfStatement BinaryOperation != MemberReference cons Literal null BlockStatement IfStatement BinaryOperation && BinaryOperation > MemberReference cons length Literal 0 BinaryOperation != MemberReference ArraySelector Literal 0 cons Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator strs ArrayCreator ReferenceType String MemberReference NUMBER_OF_STRINGS TryStatement StatementExpression MemberReference ArraySelector Literal 0 MethodInvocation MemberReference strs newInstance cons CatchClause CatchClauseParameter Throwable t End End MethodDeclaration /**
     * Adds a package root to the list of packages which must be loaded on the
     * parent loader.
     *
     * All subpackages are also included.
     *
     * @param packageRoot The root of all packages to be included.
     *                    Should not be <code>null</code>.
     */ Modifier public addSystemPackageRoot FormalParameter ReferenceType String packageRoot StatementExpression MethodInvocation systemPackages BinaryOperation + MemberReference packageRoot TernaryExpression MethodInvocation packageRoot Literal ""."" endsWith Literal """" Literal ""."" addElement MethodDeclaration /**
     * Adds a package root to the list of packages which must be loaded using
     * this loader.
     *
     * All subpackages are also included.
     *
     * @param packageRoot The root of all packages to be included.
     *                    Should not be <code>null</code>.
     */ Modifier public addLoaderPackageRoot FormalParameter ReferenceType String packageRoot StatementExpression MethodInvocation loaderPackages BinaryOperation + MemberReference packageRoot TernaryExpression MethodInvocation packageRoot Literal ""."" endsWith Literal """" Literal ""."" addElement MethodDeclaration /**
     * Loads a class through this class loader even if that class is available
     * on the parent classpath.
     *
     * This ensures that any classes which are loaded by the returned class
     * will use this classloader.
     *
     * @param classname The name of the class to be loaded.
     *                  Must not be <code>null</code>.
     *
     * @return the required Class object
     *
     * @exception ClassNotFoundException if the requested class does not exist
     *                                   on this loader's classpath.
     */ Modifier public ReferenceType Class forceLoadClass FormalParameter ReferenceType String classname ClassNotFoundException StatementExpression MethodInvocation BinaryOperation + Literal ""force loading "" MemberReference classname MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType Class VariableDeclarator theClass MethodInvocation MemberReference classname findLoadedClass IfStatement BinaryOperation == MemberReference theClass Literal null BlockStatement StatementExpression Assignment MemberReference theClass MethodInvocation MemberReference classname findClass = End ReturnStatement MemberReference theClass MethodDeclaration /**
     * Loads a class through this class loader but defer to the parent class
     * loader.
     *
     * This ensures that instances of the returned class will be compatible
     * with instances which have already been loaded on the parent
     * loader.
     *
     * @param classname The name of the class to be loaded.
     *                  Must not be <code>null</code>.
     *
     * @return the required Class object
     *
     * @exception ClassNotFoundException if the requested class does not exist
     * on this loader's classpath.
     */ Modifier public ReferenceType Class forceLoadSystemClass FormalParameter ReferenceType String classname ClassNotFoundException StatementExpression MethodInvocation BinaryOperation + Literal ""force system loading "" MemberReference classname MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType Class VariableDeclarator theClass MethodInvocation MemberReference classname findLoadedClass IfStatement BinaryOperation == MemberReference theClass Literal null BlockStatement StatementExpression Assignment MemberReference theClass MethodInvocation MemberReference classname findBaseClass = End ReturnStatement MemberReference theClass MethodDeclaration /**
     * Returns a stream to read the requested resource name.
     *
     * @param name The name of the resource for which a stream is required.
     *             Must not be <code>null</code>.
     *
     * @return a stream to the required resource or <code>null</code> if the
     *         resource cannot be found on the loader's classpath.
     */ Modifier public ReferenceType InputStream getResourceAsStream FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType InputStream VariableDeclarator resourceStream Literal null IfStatement MethodInvocation MemberReference name isParentFirst BlockStatement StatementExpression Assignment MemberReference resourceStream MethodInvocation MemberReference name loadBaseResource = IfStatement BinaryOperation != MemberReference resourceStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""ResourceStream for "" MemberReference name Literal "" loaded from parent loader"" MemberReference Project MSG_DEBUG log BlockStatement StatementExpression Assignment MemberReference resourceStream MethodInvocation MemberReference name loadResource = IfStatement BinaryOperation != MemberReference resourceStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""ResourceStream for "" MemberReference name Literal "" loaded from ant loader"" MemberReference Project MSG_DEBUG log End End BlockStatement StatementExpression Assignment MemberReference resourceStream MethodInvocation MemberReference name loadResource = IfStatement BinaryOperation != MemberReference resourceStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""ResourceStream for "" MemberReference name Literal "" loaded from ant loader"" MemberReference Project MSG_DEBUG log BlockStatement StatementExpression Assignment MemberReference resourceStream MethodInvocation MemberReference name loadBaseResource = IfStatement BinaryOperation != MemberReference resourceStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""ResourceStream for "" MemberReference name Literal "" loaded from parent loader"" MemberReference Project MSG_DEBUG log End End End IfStatement BinaryOperation == MemberReference resourceStream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Couldn't load ResourceStream for "" MemberReference name MemberReference Project MSG_DEBUG log End ReturnStatement MemberReference resourceStream MethodDeclaration /**
     * Returns a stream to read the requested resource name from this loader.
     *
     * @param name The name of the resource for which a stream is required.
     *             Must not be <code>null</code>.
     *
     * @return a stream to the required resource or <code>null</code> if
     *         the resource cannot be found on the loader's classpath.
     */ Modifier private ReferenceType InputStream loadResource FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType InputStream VariableDeclarator stream Literal null LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation pathComponents elements WhileStatement BinaryOperation && MethodInvocation e hasMoreElements BinaryOperation == MemberReference stream Literal null BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator pathComponent Cast ReferenceType File MethodInvocation e nextElement StatementExpression Assignment MemberReference stream MethodInvocation MemberReference pathComponent MemberReference name getResourceStream = End ReturnStatement MemberReference stream MethodDeclaration /**
     * Finds a system resource (which should be loaded from the parent
     * classloader).
     *
     * @param name The name of the system resource to load.
     *             Must not be <code>null</code>.
     *
     * @return a stream to the named resource, or <code>null</code> if
     *         the resource cannot be found.
     */ Modifier private ReferenceType InputStream loadBaseResource FormalParameter ReferenceType String name IfStatement BinaryOperation == MemberReference parent Literal null BlockStatement ReturnStatement MethodInvocation MemberReference name getSystemResourceAsStream BlockStatement ReturnStatement MethodInvocation parent MemberReference name getResourceAsStream End MethodDeclaration /**
     * Returns an inputstream to a given resource in the given file which may
     * either be a directory or a zip file.
     *
     * @param file the file (directory or jar) in which to search for the
     *             resource. Must not be <code>null</code>.
     * @param resourceName The name of the resource for which a stream is
     *                     required. Must not be <code>null</code>.
     *
     * @return a stream to the required resource or <code>null</code> if
     *         the resource cannot be found in the given file.
     */ Modifier private ReferenceType InputStream getResourceStream FormalParameter ReferenceType File file FormalParameter ReferenceType String resourceName TryStatement IfStatement MethodInvocation ! file exists BlockStatement ReturnStatement Literal null End IfStatement MethodInvocation file isDirectory BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator resource ClassCreator ReferenceType File MemberReference file MemberReference resourceName IfStatement MethodInvocation resource exists BlockStatement ReturnStatement ClassCreator ReferenceType FileInputStream MemberReference resource End BlockStatement LocalVariableDeclaration ReferenceType ZipFile VariableDeclarator zipFile Cast ReferenceType ZipFile MethodInvocation zipFiles MemberReference file get IfStatement BinaryOperation == MemberReference zipFile Literal null BlockStatement StatementExpression Assignment MemberReference zipFile ClassCreator ReferenceType ZipFile MemberReference file = StatementExpression MethodInvocation zipFiles MemberReference file MemberReference zipFile put End LocalVariableDeclaration ReferenceType ZipEntry VariableDeclarator entry MethodInvocation zipFile MemberReference resourceName getEntry IfStatement BinaryOperation != MemberReference entry Literal null BlockStatement ReturnStatement MethodInvocation zipFile MemberReference entry getInputStream End End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Ignoring Exception "" MethodInvocation e MethodInvocation getName getClass Literal "": "" MethodInvocation e getMessage Literal "" reading resource "" MemberReference resourceName Literal "" from "" MemberReference file MemberReference Project MSG_VERBOSE log ReturnStatement Literal null MethodDeclaration /**
     * Tests whether or not the parent classloader should be checked for
     * a resource before this one. If the resource matches both the
     * ""use parent classloader first"" and the ""use this classloader first""
     * lists, the latter takes priority.
     *
     * @param resourceName The name of the resource to check.
     *                     Must not be <code>null</code>.
     *
     * @return whether or not the parent classloader should be checked for a
     *         resource before this one is.
     */ Modifier private BasicType boolean isParentFirst FormalParameter ReferenceType String resourceName LocalVariableDeclaration BasicType boolean VariableDeclarator useParentFirst MemberReference parentFirst ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation systemPackages elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator packageName Cast ReferenceType String MethodInvocation e nextElement IfStatement MethodInvocation resourceName MemberReference packageName startsWith BlockStatement StatementExpression Assignment MemberReference useParentFirst Literal true = BreakStatement End End ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation loaderPackages elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator packageName Cast ReferenceType String MethodInvocation e nextElement IfStatement MethodInvocation resourceName MemberReference packageName startsWith BlockStatement StatementExpression Assignment MemberReference useParentFirst Literal false = BreakStatement End End ReturnStatement MemberReference useParentFirst MethodDeclaration /**
     * Finds the resource with the given name. A resource is
     * some data (images, audio, text, etc) that can be accessed by class
     * code in a way that is independent of the location of the code.
     *
     * @param name The name of the resource for which a stream is required.
     *             Must not be <code>null</code>.
     *
     * @return a URL for reading the resource, or <code>null</code> if the
     *         resource could not be found or the caller doesn't have
     *         adequate privileges to get the resource.
     */ Modifier public ReferenceType URL getResource FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType URL VariableDeclarator url Literal null IfStatement MethodInvocation MemberReference name isParentFirst BlockStatement StatementExpression Assignment MemberReference url TernaryExpression BinaryOperation == MemberReference parent Literal null SuperMethodInvocation MemberReference name getResource MethodInvocation parent MemberReference name getResource = End IfStatement BinaryOperation != MemberReference url Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Resource "" MemberReference name Literal "" loaded from parent loader"" MemberReference Project MSG_DEBUG log BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation pathComponents elements WhileStatement BinaryOperation && MethodInvocation e hasMoreElements BinaryOperation == MemberReference url Literal null BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator pathComponent Cast ReferenceType File MethodInvocation e nextElement StatementExpression Assignment MemberReference url MethodInvocation MemberReference pathComponent MemberReference name getResourceURL = IfStatement BinaryOperation != MemberReference url Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Resource "" MemberReference name Literal "" loaded from ant loader"" MemberReference Project MSG_DEBUG log End End End IfStatement BinaryOperation && BinaryOperation == MemberReference url Literal null MethodInvocation ! MemberReference name isParentFirst BlockStatement StatementExpression Assignment MemberReference url TernaryExpression BinaryOperation == MemberReference parent Literal null SuperMethodInvocation MemberReference name getResource MethodInvocation parent MemberReference name getResource = IfStatement BinaryOperation != MemberReference url Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Resource "" MemberReference name Literal "" loaded from parent loader"" MemberReference Project MSG_DEBUG log End End IfStatement BinaryOperation == MemberReference url Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Couldn't load Resource "" MemberReference name MemberReference Project MSG_DEBUG log End ReturnStatement MemberReference url MethodDeclaration /**
     * Returns an enumeration of URLs representing all the resources with the
     * given name by searching the class loader's classpath.
     *
     * @param name The resource name to search for.
     *             Must not be <code>null</code>.
     * @return an enumeration of URLs for the resources
     * @exception IOException if I/O errors occurs (can't happen)
     */ Modifier protected ReferenceType Enumeration findResources FormalParameter ReferenceType String name IOException ReturnStatement ClassCreator ReferenceType ResourceEnumeration MemberReference name MethodDeclaration /**
     * Returns the URL of a given resource in the given file which may
     * either be a directory or a zip file.
     *
     * @param file The file (directory or jar) in which to search for
     *             the resource. Must not be <code>null</code>.
     * @param resourceName The name of the resource for which a stream
     *                     is required. Must not be <code>null</code>.
     *
     * @return a stream to the required resource or <code>null</code> if the
     *         resource cannot be found in the given file object.
     */ Modifier protected ReferenceType URL getResourceURL FormalParameter ReferenceType File file FormalParameter ReferenceType String resourceName TryStatement IfStatement MethodInvocation ! file exists BlockStatement ReturnStatement Literal null End IfStatement MethodInvocation file isDirectory BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator resource ClassCreator ReferenceType File MemberReference file MemberReference resourceName IfStatement MethodInvocation resource exists BlockStatement TryStatement ReturnStatement MethodInvocation fileUtils MemberReference resource getFileURL CatchClause CatchClauseParameter MalformedURLException ex ReturnStatement Literal null End BlockStatement LocalVariableDeclaration ReferenceType ZipFile VariableDeclarator zipFile Cast ReferenceType ZipFile MethodInvocation zipFiles MemberReference file get IfStatement BinaryOperation == MemberReference zipFile Literal null BlockStatement StatementExpression Assignment MemberReference zipFile ClassCreator ReferenceType ZipFile MemberReference file = StatementExpression MethodInvocation zipFiles MemberReference file MemberReference zipFile put End LocalVariableDeclaration ReferenceType ZipEntry VariableDeclarator entry MethodInvocation zipFile MemberReference resourceName getEntry IfStatement BinaryOperation != MemberReference entry Literal null BlockStatement TryStatement ReturnStatement ClassCreator ReferenceType URL BinaryOperation + BinaryOperation + BinaryOperation + Literal ""jar:"" MethodInvocation fileUtils MemberReference file getFileURL Literal ""!/"" MemberReference entry CatchClause CatchClauseParameter MalformedURLException ex ReturnStatement Literal null End End CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace ReturnStatement Literal null MethodDeclaration /**
     * Loads a class with this class loader.
     *
     * This class attempts to load the class in an order determined by whether
     * or not the class matches the system/loader package lists, with the
     * loader package list taking priority. If the classloader is in isolated
     * mode, failure to load the class in this loader will result in a
     * ClassNotFoundException.
     *
     * @param classname The name of the class to be loaded.
     *                  Must not be <code>null</code>.
     * @param resolve <code>true</code> if all classes upon which this class
     *                depends are to be loaded.
     *
     * @return the required Class object
     *
     * @exception ClassNotFoundException if the requested class does not exist
     * on the system classpath (when not in isolated mode) or this loader's
     * classpath.
     */ Modifier protected synchronized ReferenceType Class loadClass FormalParameter ReferenceType String classname FormalParameter BasicType boolean resolve ClassNotFoundException LocalVariableDeclaration ReferenceType Class VariableDeclarator theClass MethodInvocation MemberReference classname findLoadedClass IfStatement BinaryOperation != MemberReference theClass Literal null BlockStatement ReturnStatement MemberReference theClass End IfStatement MethodInvocation MemberReference classname isParentFirst BlockStatement TryStatement StatementExpression Assignment MemberReference theClass MethodInvocation MemberReference classname findBaseClass = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Class "" MemberReference classname Literal "" loaded from parent loader "" Literal ""(parentFirst)"" MemberReference Project MSG_DEBUG log CatchClause CatchClauseParameter ClassNotFoundException cnfe StatementExpression Assignment MemberReference theClass MethodInvocation MemberReference classname findClass = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Class "" MemberReference classname Literal "" loaded from ant loader "" Literal ""(parentFirst)"" MemberReference Project MSG_DEBUG log BlockStatement TryStatement StatementExpression Assignment MemberReference theClass MethodInvocation MemberReference classname findClass = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Class "" MemberReference classname Literal "" loaded from ant loader"" MemberReference Project MSG_DEBUG log CatchClause CatchClauseParameter ClassNotFoundException cnfe IfStatement MemberReference ignoreBase BlockStatement ThrowStatement MemberReference cnfe End StatementExpression Assignment MemberReference theClass MethodInvocation MemberReference classname findBaseClass = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Class "" MemberReference classname Literal "" loaded from parent loader"" MemberReference Project MSG_DEBUG log End IfStatement MemberReference resolve BlockStatement StatementExpression MethodInvocation MemberReference theClass resolveClass End ReturnStatement MemberReference theClass MethodDeclaration /**
     * Converts the class dot notation to a filesystem equivalent for
     * searching purposes.
     *
     * @param classname The class name in dot format (eg java.lang.Integer).
     *                  Must not be <code>null</code>.
     *
     * @return the classname in filesystem format (eg java/lang/Integer.class)
     */ Modifier private ReferenceType String getClassFilename FormalParameter ReferenceType String classname ReturnStatement BinaryOperation + MethodInvocation classname Literal '.' Literal '/' replace Literal "".class"" MethodDeclaration /**
     * Define a class given its bytes
     *
     * @param container the container from which the class data has been read
     *                  may be a directory or a jar/zip file.
     *
     * @param classData the bytecode data for the class
     * @param classname the name of the class
     *
     * @return the Class instance created from the given data
     *
     * @throws IOException if the class data cannot be read.
     */ Modifier protected ReferenceType Class defineClassFromData FormalParameter ReferenceType File container FormalParameter BasicType byte classData FormalParameter ReferenceType String classname IOException IfStatement BinaryOperation != MemberReference defineClassProtectionDomain Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator domain MethodInvocation getProtectionDomain ClassReference ReferenceType Project ArrayCreator ReferenceType Object Literal 0 invoke LocalVariableDeclaration ReferenceType Object VariableDeclarator args ArrayCreator ReferenceType Object ArrayInitializer MemberReference classname MemberReference classData ClassCreator ReferenceType Integer Literal 0 ClassCreator ReferenceType Integer MemberReference classData length MemberReference domain ReturnStatement Cast ReferenceType Class MethodInvocation defineClassProtectionDomain This MemberReference args invoke CatchClause CatchClauseParameter InvocationTargetException ite LocalVariableDeclaration ReferenceType Throwable VariableDeclarator t MethodInvocation ite getTargetException IfStatement BinaryOperation instanceof MemberReference t ReferenceType ClassFormatError BlockStatement ThrowStatement Cast ReferenceType ClassFormatError MemberReference t IfStatement BinaryOperation instanceof MemberReference t ReferenceType NoClassDefFoundError BlockStatement ThrowStatement Cast ReferenceType NoClassDefFoundError MemberReference t IfStatement BinaryOperation instanceof MemberReference t ReferenceType SecurityException BlockStatement ThrowStatement Cast ReferenceType SecurityException MemberReference t BlockStatement ThrowStatement ClassCreator ReferenceType IOException MethodInvocation t toString End End End CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType IOException MethodInvocation e toString BlockStatement ReturnStatement MethodInvocation MemberReference classname MemberReference classData Literal 0 MemberReference classData length defineClass End MethodDeclaration /**
     * Reads a class definition from a stream.
     *
     * @param stream The stream from which the class is to be read.
     *               Must not be <code>null</code>.
     * @param classname The name of the class in the stream.
     *                  Must not be <code>null</code>.
     * @param container the file or directory containing the class.
     *
     * @return the Class object read from the stream.
     *
     * @exception IOException if there is a problem reading the class from the
     * stream.
     * @exception SecurityException if there is a security problem while
     * reading the class from the stream.
     */ Modifier private ReferenceType Class getClassFromStream FormalParameter ReferenceType InputStream stream FormalParameter ReferenceType String classname FormalParameter ReferenceType File container IOException SecurityException LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator baos ClassCreator ReferenceType ByteArrayOutputStream LocalVariableDeclaration BasicType int VariableDeclarator bytesRead Literal - 1 LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte MemberReference BUFFER_SIZE WhileStatement BinaryOperation != Assignment MemberReference bytesRead MethodInvocation stream MemberReference buffer Literal 0 MemberReference BUFFER_SIZE read = Literal - 1 BlockStatement StatementExpression MethodInvocation baos MemberReference buffer Literal 0 MemberReference bytesRead write End LocalVariableDeclaration BasicType byte VariableDeclarator classData MethodInvocation baos toByteArray ReturnStatement MethodInvocation MemberReference container MemberReference classData MemberReference classname defineClassFromData MethodDeclaration /**
     * Searches for and load a class on the classpath of this class loader.
     *
     * @param name The name of the class to be loaded. Must not be
     *             <code>null</code>.
     *
     * @return the required Class object
     *
     * @exception ClassNotFoundException if the requested class does not exist
     *                                   on this loader's classpath.
     */ Modifier public ReferenceType Class findClass FormalParameter ReferenceType String name ClassNotFoundException StatementExpression MethodInvocation BinaryOperation + Literal ""Finding class "" MemberReference name MemberReference Project MSG_DEBUG log ReturnStatement MethodInvocation MemberReference name findClassInComponents MethodDeclaration /**
     * Indicate if the given file is in this loader's path
     *
     * @param component the file which is to be checked
     *
     * @return true if the file is in the class path
     */ Modifier protected BasicType boolean isInPath FormalParameter ReferenceType File component ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation pathComponents elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator pathComponent Cast ReferenceType File MethodInvocation e nextElement IfStatement MethodInvocation pathComponent MemberReference component equals BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * Finds a class on the given classpath.
     *
     * @param name The name of the class to be loaded. Must not be
     *             <code>null</code>.
     *
     * @return the required Class object
     *
     * @exception ClassNotFoundException if the requested class does not exist
     * on this loader's classpath.
     */ Modifier private ReferenceType Class findClassInComponents FormalParameter ReferenceType String name ClassNotFoundException LocalVariableDeclaration ReferenceType InputStream VariableDeclarator stream Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator classFilename MethodInvocation MemberReference name getClassFilename TryStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation pathComponents elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator pathComponent Cast ReferenceType File MethodInvocation e nextElement TryStatement StatementExpression Assignment MemberReference stream MethodInvocation MemberReference pathComponent MemberReference classFilename getResourceStream = IfStatement BinaryOperation != MemberReference stream Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Loaded from "" MemberReference pathComponent Literal "" "" MemberReference classFilename MemberReference Project MSG_DEBUG log ReturnStatement MethodInvocation MemberReference stream MemberReference name MemberReference pathComponent getClassFromStream End CatchClause CatchClauseParameter SecurityException se ThrowStatement MemberReference se CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Exception reading component "" MemberReference pathComponent Literal "" (reason: "" MethodInvocation ioe getMessage Literal "")"" MemberReference Project MSG_VERBOSE log End ThrowStatement ClassCreator ReferenceType ClassNotFoundException MemberReference name TryStatement IfStatement BinaryOperation != MemberReference stream Literal null BlockStatement StatementExpression MethodInvocation stream close End CatchClause CatchClauseParameter IOException e MethodDeclaration /**
     * Finds a system class (which should be loaded from the same classloader
     * as the Ant core).
     *
     * For JDK 1.1 compatibility, this uses the findSystemClass method if
     * no parent classloader has been specified.
     *
     * @param name The name of the class to be loaded.
     *             Must not be <code>null</code>.
     *
     * @return the required Class object
     *
     * @exception ClassNotFoundException if the requested class does not exist
     * on this loader's classpath.
     */ Modifier private ReferenceType Class findBaseClass FormalParameter ReferenceType String name ClassNotFoundException IfStatement BinaryOperation == MemberReference parent Literal null BlockStatement ReturnStatement MethodInvocation MemberReference name findSystemClass BlockStatement ReturnStatement MethodInvocation parent MemberReference name loadClass End MethodDeclaration /**
     * Cleans up any resources held by this classloader. Any open archive
     * files are closed.
     */ Modifier public synchronized cleanup ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation zipFiles elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType ZipFile VariableDeclarator zipFile Cast ReferenceType ZipFile MethodInvocation e nextElement TryStatement StatementExpression MethodInvocation zipFile close CatchClause CatchClauseParameter IOException ioe End StatementExpression Assignment MemberReference zipFiles ClassCreator ReferenceType Hashtable = IfStatement BinaryOperation != MemberReference project Literal null BlockStatement StatementExpression MethodInvocation project This removeBuildListener End StatementExpression Assignment MemberReference project Literal null = MethodDeclaration /**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the buildStarted event
     */ Modifier public buildStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Cleans up any resources held by this classloader at the end
     * of a build.
     *
     * @param event the buildFinished event
     */ Modifier public buildFinished FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation cleanup MethodDeclaration /**
     * Cleans up any resources held by this classloader at the end of
     * a subbuild if it has been created for the subbuild's project
     * instance.
     *
     * @param event the buildFinished event
     *
     * @since Ant 1.6.2
     */ Modifier public subBuildFinished FormalParameter ReferenceType BuildEvent event IfStatement BinaryOperation == MethodInvocation event getProject MemberReference project BlockStatement StatementExpression MethodInvocation cleanup End MethodDeclaration /**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the buildStarted event
     *
     * @since Ant 1.6.2
     */ Modifier public subBuildStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the targetStarted event
     */ Modifier public targetStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the targetFinished event
     */ Modifier public targetFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the taskStarted event
     */ Modifier public taskStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the taskFinished event
     */ Modifier public taskFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the messageLogged event
     */ Modifier public messageLogged FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * add any libraries that come with different java versions
     * here
     */ Modifier public addJavaLibraries LocalVariableDeclaration ReferenceType Vector VariableDeclarator packages MethodInvocation JavaEnvUtils getJrePackages LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation packages elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator packageName Cast ReferenceType String MethodInvocation e nextElement StatementExpression MethodInvocation MemberReference packageName addSystemPackageRoot End ReferenceType ClassLoader ReferenceType SubBuildListener",0
410,410,,0
609,609,,0
438,438,,0
607,607,,0
651,651,,0
589,589,,0
433,433,,0
584,584,,1
281,281,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.File Import java.io.FileInputStream Import java.io.FileOutputStream Import java.io.IOException Import java.io.InputStream Import java.util.ArrayList Import java.util.Enumeration Import java.util.Hashtable Import java.util.Iterator Import java.util.List Import java.util.jar.JarOutputStream Import java.util.jar.Manifest Import java.util.zip.ZipEntry Import javax.xml.parsers.SAXParser Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Location Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.util.depend.DependencyAnalyzer Import org.xml.sax.InputSource Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * A deployment tool which creates generic EJB jars. Generic jars contains
 * only those classes and META-INF entries specified in the EJB 1.1 standard
 *
 * This class is also used as a framework for the creation of vendor specific
 * deployment tools. A number of template methods are provided through which the
 * vendor specific tool can hook into the EJB creation process.
 *
 */ GenericDeploymentTool FieldDeclaration /** The standard META-INF directory in jar files */ Modifier final protected static ReferenceType String VariableDeclarator META_DIR Literal ""META-INF/"" FieldDeclaration /** The standard MANIFEST file */ Modifier final protected static ReferenceType String VariableDeclarator MANIFEST BinaryOperation + MemberReference META_DIR Literal ""MANIFEST.MF"" FieldDeclaration /** Name for EJB Deployment descriptor within EJB jars */ Modifier final protected static ReferenceType String VariableDeclarator EJB_DD Literal ""ejb-jar.xml"" FieldDeclaration /** A dependency analyzer name to find ancestor classes */ Modifier public final static ReferenceType String VariableDeclarator ANALYZER_SUPER Literal ""super"" FieldDeclaration /** A dependency analyzer name to find all related classes */ Modifier public final static ReferenceType String VariableDeclarator ANALYZER_FULL Literal ""full"" FieldDeclaration /** A dependency analyzer name for no analyzer */ Modifier public final static ReferenceType String VariableDeclarator ANALYZER_NONE Literal ""none"" FieldDeclaration /** The default analyzer */ Modifier public final static ReferenceType String VariableDeclarator DEFAULT_ANALYZER MemberReference ANALYZER_SUPER FieldDeclaration /** The analyzer class for the super analyzer */ Modifier public final static ReferenceType String VariableDeclarator ANALYZER_CLASS_SUPER Literal ""org.apache.tools.ant.util.depend.bcel.AncestorAnalyzer"" FieldDeclaration /** The analyzer class for the super analyzer */ Modifier public final static ReferenceType String VariableDeclarator ANALYZER_CLASS_FULL Literal ""org.apache.tools.ant.util.depend.bcel.FullAnalyzer"" FieldDeclaration /**
     * The configuration from the containing task. This config combined
     * with the settings of the individual attributes here constitues the
     * complete config for this deployment tool.
     */ Modifier private ReferenceType EjbJar ReferenceType Config VariableDeclarator config FieldDeclaration /** Stores a handle to the directory to put the Jar files in */ Modifier private ReferenceType File VariableDeclarator destDir FieldDeclaration /** The classpath to use with this deployment tool. This is appended to
        any paths from the ejbjar task itself.*/ Modifier private ReferenceType Path VariableDeclarator classpath FieldDeclaration /** Instance variable that stores the suffix for the generated jarfile. */ Modifier private ReferenceType String VariableDeclarator genericJarSuffix Literal ""-generic.jar"" FieldDeclaration /**
     * The task to which this tool belongs. This is used to access services
     * provided by the ant core, such as logging.
     */ Modifier private ReferenceType Task VariableDeclarator task FieldDeclaration /**
     * The classloader generated from the given classpath to load
     * the super classes and super interfaces.
     */ Modifier private ReferenceType ClassLoader VariableDeclarator classpathLoader Literal null FieldDeclaration /**
     * List of files have been loaded into the EJB jar
     */ Modifier private ReferenceType List VariableDeclarator addedfiles FieldDeclaration /**
     * Handler used to parse the EJB XML descriptor
     */ Modifier private ReferenceType DescriptorHandler VariableDeclarator handler FieldDeclaration /**
     * Dependency analyzer used to collect class dependencies
     */ Modifier private ReferenceType DependencyAnalyzer VariableDeclarator dependencyAnalyzer ConstructorDeclaration Modifier public GenericDeploymentTool MethodDeclaration /**
     * Set the destination directory; required.
     * @param inDir the destination directory.
     */ Modifier public setDestdir FormalParameter ReferenceType File inDir StatementExpression Assignment This MemberReference destDir MemberReference inDir = MethodDeclaration /**
     * Get the destination directory.
     *
     * @return the destination directory into which EJB jars are to be written
     */ Modifier protected ReferenceType File getDestDir ReturnStatement MemberReference destDir MethodDeclaration /**
     * Set the task which owns this tool
     *
     * @param task the Task to which this deployment tool is associated.
     */ Modifier public setTask FormalParameter ReferenceType Task task StatementExpression Assignment This MemberReference task MemberReference task = MethodDeclaration /**
     * Get the task for this tool.
     *
     * @return the Task instance this tool is associated with.
     */ Modifier protected ReferenceType Task getTask ReturnStatement MemberReference task MethodDeclaration /**
     * Get the basename terminator.
     *
     * @return an ejbjar task configuration
     */ Modifier protected ReferenceType EjbJar ReferenceType Config getConfig ReturnStatement MemberReference config MethodDeclaration /**
     * Indicate if this build is using the base jar name.
     *
     * @return true if the name of the generated jar is coming from the
     *              basejarname attribute
     */ Modifier protected BasicType boolean usingBaseJarName ReturnStatement BinaryOperation != MemberReference config baseJarName Literal null MethodDeclaration /**
     * Set the suffix for the generated jar file.
     * @param inString the string to use as the suffix.
     */ Modifier public setGenericJarSuffix FormalParameter ReferenceType String inString StatementExpression Assignment This MemberReference genericJarSuffix MemberReference inString = MethodDeclaration /**
     * Add the classpath for the user classes
     *
     * @return a Path instance to be configured by Ant.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath ClassCreator ReferenceType Path MethodInvocation task getProject = End ReturnStatement MethodInvocation classpath createPath MethodDeclaration /**
     * Set the classpath to be used for this compilation.
     *
     * @param classpath the classpath to be used for this build.
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath StatementExpression Assignment This MemberReference classpath MemberReference classpath = MethodDeclaration /**
     * Get the classpath by combining the one from the surrounding task, if any
     * and the one from this tool.
     *
     * @return the combined classpath
     */ Modifier protected ReferenceType Path getCombinedClasspath LocalVariableDeclaration ReferenceType Path VariableDeclarator combinedPath MemberReference classpath IfStatement BinaryOperation != MemberReference config classpath Literal null BlockStatement IfStatement BinaryOperation == MemberReference combinedPath Literal null BlockStatement StatementExpression Assignment MemberReference combinedPath MemberReference config classpath = BlockStatement StatementExpression MethodInvocation combinedPath MemberReference config classpath append End End ReturnStatement MemberReference combinedPath MethodDeclaration /**
     * Log a message to the Ant output.
     *
     * @param message the message to be logged.
     * @param level the severity of this message.
     */ Modifier protected log FormalParameter ReferenceType String message FormalParameter BasicType int level StatementExpression MethodInvocation MethodInvocation MemberReference message MemberReference level log getTask MethodDeclaration /**
     * Get the build file location associated with this element's task.
     *
     * @return the task's location instance.
     */ Modifier protected ReferenceType Location getLocation ReturnStatement MethodInvocation MethodInvocation getLocation getTask MethodDeclaration Modifier private createAnalyzer LocalVariableDeclaration ReferenceType String VariableDeclarator analyzer MemberReference config analyzer IfStatement BinaryOperation == MemberReference analyzer Literal null BlockStatement StatementExpression Assignment MemberReference analyzer MemberReference DEFAULT_ANALYZER = End IfStatement MethodInvocation analyzer MemberReference ANALYZER_NONE equals BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator analyzerClassName Literal null IfStatement MethodInvocation analyzer MemberReference ANALYZER_SUPER equals BlockStatement StatementExpression Assignment MemberReference analyzerClassName MemberReference ANALYZER_CLASS_SUPER = IfStatement MethodInvocation analyzer MemberReference ANALYZER_FULL equals BlockStatement StatementExpression Assignment MemberReference analyzerClassName MemberReference ANALYZER_CLASS_FULL = BlockStatement StatementExpression Assignment MemberReference analyzerClassName MemberReference analyzer = End End TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator analyzerClass MethodInvocation Class MemberReference analyzerClassName forName StatementExpression Assignment MemberReference dependencyAnalyzer Cast ReferenceType DependencyAnalyzer MethodInvocation analyzerClass newInstance = StatementExpression MethodInvocation dependencyAnalyzer ClassCreator ReferenceType Path MethodInvocation task getProject MethodInvocation config.srcDir getPath addClassPath StatementExpression MethodInvocation dependencyAnalyzer MemberReference config classpath addClassPath CatchClause CatchClauseParameter NoClassDefFoundError e StatementExpression Assignment MemberReference dependencyAnalyzer Literal null = StatementExpression MethodInvocation task BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to load dependency analyzer: "" MemberReference analyzerClassName Literal "" - dependent class not found: "" MethodInvocation e getMessage MemberReference Project MSG_WARN log CatchClause CatchClauseParameter Exception e StatementExpression Assignment MemberReference dependencyAnalyzer Literal null = StatementExpression MethodInvocation task BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to load dependency analyzer: "" MemberReference analyzerClassName Literal "" - exception: "" MethodInvocation e getMessage MemberReference Project MSG_WARN log MethodDeclaration /**
     * Configure this tool for use in the ejbjar task.
     *
     * @param config the configuration from the surrounding ejbjar task.
     */ Modifier public configure FormalParameter ReferenceType EjbJar ReferenceType Config config StatementExpression Assignment This MemberReference config MemberReference config = StatementExpression MethodInvocation createAnalyzer StatementExpression Assignment MemberReference classpathLoader Literal null = MethodDeclaration /**
     * Utility method that encapsulates the logic of adding a file entry to
     * a .jar file.  Used by execute() to add entries to the jar file as it is
     * constructed.
     * @param jStream A JarOutputStream into which to write the
     *        jar entry.
     * @param inputFile A File from which to read the
     *        contents the file being added.
     * @param logicalFilename A String representing the name, including
     *        all relevant path information, that should be stored for the entry
     *        being added.
     */ Modifier protected addFileToJar FormalParameter ReferenceType JarOutputStream jStream FormalParameter ReferenceType File inputFile FormalParameter ReferenceType String logicalFilename BuildException LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator iStream Literal null TryStatement IfStatement MethodInvocation ! addedfiles MemberReference logicalFilename contains BlockStatement StatementExpression Assignment MemberReference iStream ClassCreator ReferenceType FileInputStream MemberReference inputFile = LocalVariableDeclaration ReferenceType ZipEntry VariableDeclarator zipEntry ClassCreator ReferenceType ZipEntry MethodInvocation logicalFilename Literal '\\' Literal '/' replace StatementExpression MethodInvocation jStream MemberReference zipEntry putNextEntry LocalVariableDeclaration BasicType byte VariableDeclarator byteBuffer ArrayCreator BasicType byte BinaryOperation * Literal 2 Literal 1024 LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 DoStatement BinaryOperation != MemberReference count Literal - 1 BlockStatement StatementExpression MethodInvocation jStream MemberReference byteBuffer Literal 0 MemberReference count write StatementExpression Assignment MemberReference count MethodInvocation iStream MemberReference byteBuffer Literal 0 MemberReference byteBuffer length read = End StatementExpression MethodInvocation addedfiles MemberReference logicalFilename add End CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""WARNING: IOException while adding entry "" MemberReference logicalFilename Literal "" to jarfile from "" MethodInvocation inputFile getPath Literal "" "" MethodInvocation ioe MethodInvocation getName getClass Literal ""-"" MethodInvocation ioe getMessage MemberReference Project MSG_WARN log IfStatement BinaryOperation != MemberReference iStream Literal null BlockStatement TryStatement StatementExpression MethodInvocation iStream close CatchClause CatchClauseParameter IOException closeException End MethodDeclaration Modifier protected ReferenceType DescriptorHandler getDescriptorHandler FormalParameter ReferenceType File srcDir LocalVariableDeclaration ReferenceType DescriptorHandler VariableDeclarator handler ClassCreator ReferenceType DescriptorHandler MethodInvocation getTask MemberReference srcDir StatementExpression MethodInvocation MemberReference handler registerKnownDTDs ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation MemberReference dtdLocations MethodInvocation iterator getConfig MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType EjbJar ReferenceType DTDLocation VariableDeclarator dtdLocation Cast ReferenceType EjbJar ReferenceType DTDLocation MethodInvocation i next StatementExpression MethodInvocation handler MethodInvocation dtdLocation getPublicId MethodInvocation dtdLocation getLocation registerDTD End ReturnStatement MemberReference handler MethodDeclaration /**
     * Register the locations of all known DTDs.
     *
     * vendor-specific subclasses should override this method to define
     * the vendor-specific locations of the EJB DTDs
     */ Modifier protected registerKnownDTDs FormalParameter ReferenceType DescriptorHandler handler MethodDeclaration Modifier public processDescriptor FormalParameter ReferenceType String descriptorFileName FormalParameter ReferenceType SAXParser saxParser StatementExpression MethodInvocation MemberReference descriptorFileName MemberReference saxParser checkConfiguration TryStatement StatementExpression Assignment MemberReference handler MethodInvocation MemberReference config srcDir getDescriptorHandler = LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator ejbFiles MethodInvocation MemberReference descriptorFileName MemberReference saxParser parseEjbFiles StatementExpression MethodInvocation MemberReference ejbFiles addSupportClasses LocalVariableDeclaration ReferenceType String VariableDeclarator baseName MethodInvocation MemberReference descriptorFileName getJarBaseName LocalVariableDeclaration ReferenceType String VariableDeclarator ddPrefix MethodInvocation MemberReference baseName MemberReference descriptorFileName getVendorDDPrefix LocalVariableDeclaration ReferenceType File VariableDeclarator manifestFile MethodInvocation MemberReference ddPrefix getManifestFile IfStatement BinaryOperation != MemberReference manifestFile Literal null BlockStatement StatementExpression MethodInvocation ejbFiles MemberReference MANIFEST MemberReference manifestFile put End StatementExpression MethodInvocation ejbFiles BinaryOperation + MemberReference META_DIR MemberReference EJB_DD ClassCreator ReferenceType File MemberReference config descriptorDir MemberReference descriptorFileName put StatementExpression MethodInvocation MemberReference ejbFiles MemberReference ddPrefix addVendorFiles StatementExpression MethodInvocation MemberReference ejbFiles checkAndAddDependants IfStatement BinaryOperation && MemberReference config flatDestDir BinaryOperation != MethodInvocation baseName length Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator startName MethodInvocation baseName MemberReference File separator lastIndexOf IfStatement BinaryOperation == MemberReference startName Literal - 1 BlockStatement StatementExpression Assignment MemberReference startName Literal 0 = End LocalVariableDeclaration BasicType int VariableDeclarator endName MethodInvocation baseName length StatementExpression Assignment MemberReference baseName MethodInvocation baseName MemberReference startName MemberReference endName substring = End LocalVariableDeclaration ReferenceType File VariableDeclarator jarFile MethodInvocation MemberReference baseName getVendorOutputJarFile IfStatement MethodInvocation MemberReference ejbFiles MemberReference jarFile needToRebuild BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""building "" MethodInvocation jarFile getName Literal "" with "" MethodInvocation String MethodInvocation ejbFiles size valueOf Literal "" files"" MemberReference Project MSG_INFO log LocalVariableDeclaration ReferenceType String VariableDeclarator publicId MethodInvocation getPublicId StatementExpression MethodInvocation MemberReference baseName MemberReference jarFile MemberReference ejbFiles MemberReference publicId writeJar BlockStatement StatementExpression MethodInvocation BinaryOperation + MethodInvocation jarFile toString Literal "" is up to date."" MemberReference Project MSG_VERBOSE log End CatchClause CatchClauseParameter SAXException se LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""SAXException while parsing '"" MethodInvocation descriptorFileName toString Literal ""'. This probably indicates badly-formed XML."" Literal ""  Details: "" MethodInvocation se getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference se CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""IOException while parsing'"" MethodInvocation descriptorFileName toString Literal ""'.  This probably indicates that the descriptor"" Literal "" doesn't exist. Details: "" MethodInvocation ioe getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference ioe MethodDeclaration /**
     * This method is called as the first step in the processDescriptor method
     * to allow vendor-specific subclasses to validate the task configuration
     * prior to processing the descriptor.  If the configuration is invalid,
     * a BuildException should be thrown.
     *
     * @param descriptorFileName String representing the file name of an EJB
     *                           descriptor to be processed
     * @param saxParser          SAXParser which may be used to parse the XML
     *                           descriptor
     * @exception BuildException     Thrown if the configuration is invalid
     */ Modifier protected checkConfiguration FormalParameter ReferenceType String descriptorFileName FormalParameter ReferenceType SAXParser saxParser BuildException MethodDeclaration /**
     * This method returns a list of EJB files found when the specified EJB
     * descriptor is parsed and processed.
     *
     * @param descriptorFileName String representing the file name of an EJB
     *                           descriptor to be processed
     * @param saxParser          SAXParser which may be used to parse the XML
     *                           descriptor
     * @return                   Hashtable of EJB class (and other) files to be
     *                           added to the completed JAR file
     * @throws SAXException      Any SAX exception, possibly wrapping another
     *                           exception
     * @throws IOException       An IOException from the parser, possibly from a
     *                           the byte stream or character stream
     */ Modifier protected ReferenceType Hashtable parseEjbFiles FormalParameter ReferenceType String descriptorFileName FormalParameter ReferenceType SAXParser saxParser IOException SAXException LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator descriptorStream Literal null LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator ejbFiles Literal null TryStatement StatementExpression Assignment MemberReference descriptorStream ClassCreator ReferenceType FileInputStream ClassCreator ReferenceType File MemberReference config descriptorDir MemberReference descriptorFileName = StatementExpression MethodInvocation saxParser ClassCreator ReferenceType InputSource MemberReference descriptorStream MemberReference handler parse StatementExpression Assignment MemberReference ejbFiles MethodInvocation handler getFiles = IfStatement BinaryOperation != MemberReference descriptorStream Literal null BlockStatement TryStatement StatementExpression MethodInvocation descriptorStream close CatchClause CatchClauseParameter IOException closeException End ReturnStatement MemberReference ejbFiles MethodDeclaration /**
     * Adds any classes the user specifies using <i>support</i> nested elements
     * to the <code>ejbFiles</code> Hashtable.
     *
     * @param ejbFiles Hashtable of EJB classes (and other) files that will be
     *                 added to the completed JAR file
     */ Modifier protected addSupportClasses FormalParameter ReferenceType Hashtable ejbFiles LocalVariableDeclaration ReferenceType Project VariableDeclarator project MethodInvocation task getProject ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation config.supportFileSets iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator supportFileSet Cast ReferenceType FileSet MethodInvocation i next LocalVariableDeclaration ReferenceType File VariableDeclarator supportBaseDir MethodInvocation supportFileSet MemberReference project getDir LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator supportScanner MethodInvocation supportFileSet MemberReference project getDirectoryScanner StatementExpression MethodInvocation supportScanner scan LocalVariableDeclaration ReferenceType String VariableDeclarator supportFiles MethodInvocation supportScanner getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference supportFiles length MemberReference ++ j BlockStatement StatementExpression MethodInvocation ejbFiles MemberReference ArraySelector MemberReference j supportFiles ClassCreator ReferenceType File MemberReference supportBaseDir MemberReference ArraySelector MemberReference j supportFiles put End End MethodDeclaration /**
     * Using the EJB descriptor file name passed from the <code>ejbjar</code>
     * task, this method returns the ""basename"" which will be used to name the
     * completed JAR file.
     *
     * @param descriptorFileName String representing the file name of an EJB
     *                           descriptor to be processed
     * @return                   The ""basename"" which will be used to name the
     *                           completed JAR file
     */ Modifier protected ReferenceType String getJarBaseName FormalParameter ReferenceType String descriptorFileName LocalVariableDeclaration ReferenceType String VariableDeclarator baseName Literal """" IfStatement MethodInvocation config.namingScheme MethodInvocation MemberReference EjbJar.NamingScheme BASEJARNAME equals getValue BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator canonicalDescriptor MethodInvocation descriptorFileName Literal '\\' Literal '/' replace LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation canonicalDescriptor Literal '/' lastIndexOf IfStatement BinaryOperation != MemberReference index Literal - 1 BlockStatement StatementExpression Assignment MemberReference baseName MethodInvocation descriptorFileName Literal 0 BinaryOperation + MemberReference index Literal 1 substring = End StatementExpression Assignment MemberReference baseName MemberReference config baseJarName += IfStatement MethodInvocation config.namingScheme MethodInvocation MemberReference EjbJar.NamingScheme DESCRIPTOR equals getValue BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator lastSeparatorIndex MethodInvocation descriptorFileName MemberReference File separator lastIndexOf LocalVariableDeclaration BasicType int VariableDeclarator endBaseName Literal - 1 IfStatement BinaryOperation != MemberReference lastSeparatorIndex Literal - 1 BlockStatement StatementExpression Assignment MemberReference endBaseName MethodInvocation descriptorFileName MemberReference config baseNameTerminator MemberReference lastSeparatorIndex indexOf = BlockStatement StatementExpression Assignment MemberReference endBaseName MethodInvocation descriptorFileName MemberReference config baseNameTerminator indexOf = End IfStatement BinaryOperation != MemberReference endBaseName Literal - 1 BlockStatement StatementExpression Assignment MemberReference baseName MethodInvocation descriptorFileName Literal 0 MemberReference endBaseName substring = BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to determine jar name "" Literal ""from descriptor \"""" MemberReference descriptorFileName Literal ""\"""" End IfStatement MethodInvocation config.namingScheme MethodInvocation MemberReference EjbJar.NamingScheme DIRECTORY equals getValue BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator descriptorFile ClassCreator ReferenceType File MemberReference config descriptorDir MemberReference descriptorFileName LocalVariableDeclaration ReferenceType String VariableDeclarator path MethodInvocation descriptorFile getAbsolutePath LocalVariableDeclaration BasicType int VariableDeclarator lastSeparatorIndex MethodInvocation path MemberReference File separator lastIndexOf IfStatement BinaryOperation == MemberReference lastSeparatorIndex Literal - 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unable to determine directory name holding descriptor"" End LocalVariableDeclaration ReferenceType String VariableDeclarator dirName MethodInvocation path Literal 0 MemberReference lastSeparatorIndex substring LocalVariableDeclaration BasicType int VariableDeclarator dirSeparatorIndex MethodInvocation dirName MemberReference File separator lastIndexOf IfStatement BinaryOperation != MemberReference dirSeparatorIndex Literal - 1 BlockStatement StatementExpression Assignment MemberReference dirName MethodInvocation dirName BinaryOperation + MemberReference dirSeparatorIndex Literal 1 substring = End StatementExpression Assignment MemberReference baseName MemberReference dirName = IfStatement MethodInvocation config.namingScheme MethodInvocation MemberReference EjbJar.NamingScheme EJB_NAME equals getValue BlockStatement StatementExpression Assignment MemberReference baseName MethodInvocation handler getEjbName = End End End End ReturnStatement MemberReference baseName MethodDeclaration /**
     * Get the prefix for vendor deployment descriptors.
     *
     * This will contain the path and the start of the descriptor name,
     * depending on the naming scheme
     */ Modifier public ReferenceType String getVendorDDPrefix FormalParameter ReferenceType String baseName FormalParameter ReferenceType String descriptorFileName LocalVariableDeclaration ReferenceType String VariableDeclarator ddPrefix Literal null IfStatement MethodInvocation config.namingScheme MethodInvocation MemberReference EjbJar.NamingScheme DESCRIPTOR equals getValue BlockStatement StatementExpression Assignment MemberReference ddPrefix BinaryOperation + MemberReference baseName MemberReference config baseNameTerminator = IfStatement BinaryOperation || BinaryOperation || MethodInvocation config.namingScheme MethodInvocation MemberReference EjbJar.NamingScheme BASEJARNAME equals getValue MethodInvocation config.namingScheme MethodInvocation MemberReference EjbJar.NamingScheme EJB_NAME equals getValue MethodInvocation config.namingScheme MethodInvocation MemberReference EjbJar.NamingScheme DIRECTORY equals getValue BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator canonicalDescriptor MethodInvocation descriptorFileName Literal '\\' Literal '/' replace LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation canonicalDescriptor Literal '/' lastIndexOf IfStatement BinaryOperation == MemberReference index Literal - 1 BlockStatement StatementExpression Assignment MemberReference ddPrefix Literal """" = BlockStatement StatementExpression Assignment MemberReference ddPrefix MethodInvocation descriptorFileName Literal 0 BinaryOperation + MemberReference index Literal 1 substring = End End End ReturnStatement MemberReference ddPrefix MethodDeclaration /**
     * Add any vendor specific files which should be included in the
     * EJB Jar.
     */ Modifier protected addVendorFiles FormalParameter ReferenceType Hashtable ejbFiles FormalParameter ReferenceType String ddPrefix MethodDeclaration /**
     * Get the vendor specific name of the Jar that will be output. The modification date
     * of this jar will be checked against the dependent bean classes.
     */ ReferenceType File getVendorOutputJarFile FormalParameter ReferenceType String baseName ReturnStatement ClassCreator ReferenceType File MemberReference destDir BinaryOperation + MemberReference baseName MemberReference genericJarSuffix MethodDeclaration /**
     * This method checks the timestamp on each file listed in the <code>
     * ejbFiles</code> and compares them to the timestamp on the <code>jarFile
     * </code>.  If the <code>jarFile</code>'s timestamp is more recent than
     * each EJB file, <code>true</code> is returned.  Otherwise, <code>false
     * </code> is returned.
     * TODO: find a way to check the manifest-file, that is found by naming convention
     *
     * @param ejbFiles Hashtable of EJB classes (and other) files that will be
     *                 added to the completed JAR file
     * @param jarFile  JAR file which will contain all of the EJB classes (and
     *                 other) files
     * @return         boolean indicating whether or not the <code>jarFile</code>
     *                 is up to date
     */ Modifier protected BasicType boolean needToRebuild FormalParameter ReferenceType Hashtable ejbFiles FormalParameter ReferenceType File jarFile IfStatement MethodInvocation jarFile exists BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator lastBuild MethodInvocation jarFile lastModified LocalVariableDeclaration ReferenceType Iterator VariableDeclarator fileIter MethodInvocation ejbFiles MethodInvocation iterator values WhileStatement MethodInvocation fileIter hasNext BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator currentFile Cast ReferenceType File MethodInvocation fileIter next IfStatement BinaryOperation < MemberReference lastBuild MethodInvocation currentFile lastModified BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Build needed because "" MethodInvocation currentFile getPath Literal "" is out of date"" MemberReference Project MSG_VERBOSE log ReturnStatement Literal true End End ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration /**
     * Returns the Public ID of the DTD specified in the EJB descriptor.  Not
     * every vendor-specific <code>DeploymentTool</code> will need to reference
     * this value or may want to determine this value in a vendor-specific way.
     *
     * @return Public ID of the DTD specified in the EJB descriptor.
     */ Modifier protected ReferenceType String getPublicId ReturnStatement MethodInvocation handler getPublicId MethodDeclaration /**
     * Get the manifets file to use for building the generic jar.
     *
     * If the file does not exist the global manifest from the config is used
     * otherwise the default Ant manifest will be used.
     *
     * @param prefix the prefix where to llook for the manifest file based on
     *        the naming convention.
     *
     * @return the manifest file or null if the manifest file does not exist
     */ Modifier protected ReferenceType File getManifestFile FormalParameter ReferenceType String prefix LocalVariableDeclaration ReferenceType File VariableDeclarator manifestFile ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig BinaryOperation + MemberReference prefix Literal ""manifest.mf"" IfStatement MethodInvocation manifestFile exists BlockStatement ReturnStatement MemberReference manifestFile End IfStatement BinaryOperation != MemberReference config manifest Literal null BlockStatement ReturnStatement MemberReference config manifest End ReturnStatement Literal null MethodDeclaration /**
     * Method used to encapsulate the writing of the JAR file. Iterates over the
     * filenames/java.io.Files in the Hashtable stored on the instance variable
     * ejbFiles.
     */ Modifier protected writeJar FormalParameter ReferenceType String baseName FormalParameter ReferenceType File jarfile FormalParameter ReferenceType Hashtable files FormalParameter ReferenceType String publicId BuildException LocalVariableDeclaration ReferenceType JarOutputStream VariableDeclarator jarStream Literal null TryStatement StatementExpression Assignment MemberReference addedfiles ClassCreator ReferenceType ArrayList = IfStatement MethodInvocation jarfile exists BlockStatement StatementExpression MethodInvocation jarfile delete End StatementExpression MethodInvocation jarfile MethodInvocation mkdirs getParentFile StatementExpression MethodInvocation jarfile createNewFile LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in Literal null LocalVariableDeclaration ReferenceType Manifest VariableDeclarator manifest Literal null TryStatement LocalVariableDeclaration ReferenceType File VariableDeclarator manifestFile Cast ReferenceType File MethodInvocation files MemberReference MANIFEST get IfStatement BinaryOperation && BinaryOperation != MemberReference manifestFile Literal null MethodInvocation manifestFile exists BlockStatement StatementExpression Assignment MemberReference in ClassCreator ReferenceType FileInputStream MemberReference manifestFile = BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator defaultManifest Literal ""/org/apache/tools/ant/defaultManifest.mf"" StatementExpression Assignment MemberReference in This MethodInvocation getClass MethodInvocation MemberReference defaultManifest getResourceAsStream = IfStatement BinaryOperation == MemberReference in Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Could not find "" Literal ""default manifest: "" MemberReference defaultManifest End End StatementExpression Assignment MemberReference manifest ClassCreator ReferenceType Manifest MemberReference in = CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unable to read manifest"" MemberReference e MethodInvocation getLocation IfStatement BinaryOperation != MemberReference in Literal null BlockStatement StatementExpression MethodInvocation in close End StatementExpression Assignment MemberReference jarStream ClassCreator ReferenceType JarOutputStream ClassCreator ReferenceType FileOutputStream MemberReference jarfile MemberReference manifest = StatementExpression MethodInvocation jarStream MemberReference JarOutputStream DEFLATED setMethod ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator entryIterator MethodInvocation files MethodInvocation iterator keySet MethodInvocation entryIterator hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator entryName Cast ReferenceType String MethodInvocation entryIterator next IfStatement MethodInvocation entryName MemberReference MANIFEST equals BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType File VariableDeclarator entryFile Cast ReferenceType File MethodInvocation files MemberReference entryName get StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""adding file '"" MemberReference entryName Literal ""'"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation MemberReference jarStream MemberReference entryFile MemberReference entryName addFileToJar LocalVariableDeclaration ReferenceType InnerClassFilenameFilter VariableDeclarator flt ClassCreator ReferenceType InnerClassFilenameFilter MethodInvocation entryFile getName LocalVariableDeclaration ReferenceType File VariableDeclarator entryDir MethodInvocation entryFile getParentFile LocalVariableDeclaration ReferenceType String VariableDeclarator innerfiles MethodInvocation entryDir MemberReference flt list IfStatement BinaryOperation != MemberReference innerfiles Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 VariableDeclarator n MemberReference innerfiles length BinaryOperation < MemberReference i MemberReference n MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator entryIndex BinaryOperation - MethodInvocation entryName MethodInvocation entryFile getName lastIndexOf Literal 1 IfStatement BinaryOperation < MemberReference entryIndex Literal 0 BlockStatement StatementExpression Assignment MemberReference entryName MemberReference ArraySelector MemberReference i innerfiles = BlockStatement StatementExpression Assignment MemberReference entryName BinaryOperation + BinaryOperation + MethodInvocation entryName Literal 0 MemberReference entryIndex substring MemberReference File separatorChar MemberReference ArraySelector MemberReference i innerfiles = End StatementExpression Assignment MemberReference entryFile ClassCreator ReferenceType File MemberReference config srcDir MemberReference entryName = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""adding innerclass file '"" MemberReference entryName Literal ""'"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation MemberReference jarStream MemberReference entryFile MemberReference entryName addFileToJar End End End CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""IOException while processing ejb-jar file '"" MethodInvocation jarfile toString Literal ""'. Details: "" MethodInvocation ioe getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference ioe IfStatement BinaryOperation != MemberReference jarStream Literal null BlockStatement TryStatement StatementExpression MethodInvocation jarStream close CatchClause CatchClauseParameter IOException closeException End MethodDeclaration /**
     * Add all available classes, that depend on Remote, Home, Bean, PK
     * @param checkEntries files, that are extracted from the deployment descriptor
     */ Modifier protected checkAndAddDependants FormalParameter ReferenceType Hashtable checkEntries BuildException IfStatement BinaryOperation == MemberReference dependencyAnalyzer Literal null BlockStatement ReturnStatement End StatementExpression MethodInvocation dependencyAnalyzer reset LocalVariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation checkEntries MethodInvocation iterator keySet WhileStatement MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator entryName Cast ReferenceType String MethodInvocation i next IfStatement MethodInvocation entryName Literal "".class"" endsWith BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator className MethodInvocation entryName Literal 0 BinaryOperation - MethodInvocation entryName length Literal MethodInvocation length "".class"" substring StatementExpression Assignment MemberReference className MethodInvocation className MemberReference File separatorChar Literal '/' replace = StatementExpression Assignment MemberReference className MethodInvocation className Literal '/' Literal '.' replace = StatementExpression MethodInvocation dependencyAnalyzer MemberReference className addRootClass End End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation dependencyAnalyzer getClassDependencies WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator classname Cast ReferenceType String MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator location BinaryOperation + MethodInvocation classname Literal '.' MemberReference File separatorChar replace Literal "".class"" LocalVariableDeclaration ReferenceType File VariableDeclarator classFile ClassCreator ReferenceType File MemberReference config srcDir MemberReference location IfStatement MethodInvocation classFile exists BlockStatement StatementExpression MethodInvocation checkEntries MemberReference location MemberReference classFile put StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""dependent class: "" MemberReference classname Literal "" - "" MemberReference classFile MemberReference Project MSG_VERBOSE log End End MethodDeclaration /**
     * Returns a Classloader object which parses the passed in generic EjbJar classpath.
     * The loader is used to dynamically load classes from javax.ejb.* and the classes
     * being added to the jar.
     *
     */ Modifier protected ReferenceType ClassLoader getClassLoaderForBuild IfStatement BinaryOperation != MemberReference classpathLoader Literal null BlockStatement ReturnStatement MemberReference classpathLoader End LocalVariableDeclaration ReferenceType Path VariableDeclarator combinedClasspath MethodInvocation getCombinedClasspath IfStatement BinaryOperation == MemberReference combinedClasspath Literal null BlockStatement StatementExpression Assignment MemberReference classpathLoader MethodInvocation MethodInvocation getClassLoader getClass = BlockStatement StatementExpression Assignment MemberReference classpathLoader MethodInvocation MethodInvocation getProject MethodInvocation MemberReference combinedClasspath createClassLoader getTask = End ReturnStatement MemberReference classpathLoader MethodDeclaration /**
     * Called to validate that the tool parameters have been configured.
     *
     * @throws BuildException If the Deployment Tool's configuration isn't
     *                        valid
     */ Modifier public validateConfigured BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference destDir Literal null MethodInvocation destDir isDirectory BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""A valid destination directory must be specified "" Literal ""using the \""destdir\"" attribute."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End ReferenceType EJBDeploymentTool",0
602,602,,0
544,544,,0
590,590,,1
557,557,,0
628,628,,0
434,434,,0
455,455,,0
486,486,,0
583,583,,0
156,156,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ccm Import java.util.Date ClassDeclaration Modifier public /**
 * Performs Continuus checkin command.
 *
 */ CCMCheckin ConstructorDeclaration Modifier public /**
     * Default constructor - setup checkin command
     */ CCMCheckin StatementExpression SuperConstructorInvocation StatementExpression MethodInvocation MemberReference COMMAND_CHECKIN setCcmAction StatementExpression MethodInvocation BinaryOperation + Literal ""Checkin "" ClassCreator ReferenceType Date setComment ReferenceType CCMCheck",0
375,375,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import org.apache.tools.ant.Task Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * A task to provide ""nice-ness"" to the current thread, and/or to
 * query the current value.
 * Examples:
 * <pre> &lt;nice currentPriority=""current.value"" &gt;</pre><p>
 * Set <code>currentPriority</code> to the current priority
 * <pre> &lt;nice newPriority=""10"" &gt;</pre><p>
 * Raise the priority of the build process (But not forked programs)
 * <pre> &lt;nice currentPriority=""old"" newPriority=""3"" &gt;</pre><p>
 * Lower the priority of the build process (But not forked programs), and save
 * the old value to the property <code>old</code>.
 *
 * @ant.task name=""nice"" category=""control""
 */ Nice FieldDeclaration /**
     * the new priority
     */ Modifier private ReferenceType Integer VariableDeclarator newPriority FieldDeclaration /**
     * the current priority
     */ Modifier private ReferenceType String VariableDeclarator currentPriority MethodDeclaration /**
     * Execute the task
     * @exception BuildException if something goes wrong with the build
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Thread VariableDeclarator self MethodInvocation Thread currentThread LocalVariableDeclaration BasicType int VariableDeclarator priority MethodInvocation self getPriority IfStatement BinaryOperation != MemberReference currentPriority Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator current MethodInvocation Integer MemberReference priority toString StatementExpression MethodInvocation MethodInvocation MemberReference currentPriority MemberReference current setNewProperty getProject End IfStatement BinaryOperation && BinaryOperation != MemberReference newPriority Literal null BinaryOperation != MemberReference priority MethodInvocation newPriority intValue BlockStatement TryStatement StatementExpression MethodInvocation self MethodInvocation newPriority intValue setPriority CatchClause CatchClauseParameter SecurityException e StatementExpression MethodInvocation Literal ""Unable to set new priority -a security manager is in the way"" MemberReference Project MSG_WARN log CatchClause CatchClauseParameter IllegalArgumentException iae ThrowStatement ClassCreator ReferenceType BuildException Literal ""Priority out of range"" MemberReference iae End MethodDeclaration /**
     * The name of a property to set to the value of the current
     * thread priority. Optional
     * @param currentPriority the property name.
     */ Modifier public setCurrentPriority FormalParameter ReferenceType String currentPriority StatementExpression Assignment This MemberReference currentPriority MemberReference currentPriority = MethodDeclaration /**
     * the new priority, in the range 1-10.
     * @param newPriority the new priority value.
     */ Modifier public setNewPriority FormalParameter BasicType int newPriority IfStatement BinaryOperation || BinaryOperation < MemberReference newPriority MemberReference Thread MIN_PRIORITY BinaryOperation > MemberReference newPriority MemberReference Thread MAX_PRIORITY BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""The thread priority is out of the range 1-10"" End StatementExpression Assignment This MemberReference newPriority ClassCreator ReferenceType Integer MemberReference newPriority = ReferenceType Task",0
9,9,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.taskdefs.Java ClassDeclaration Modifier public /**
 * This is a primitive task to execute a unit test in the
 * org.apache.testlet framework.
 *
 * @deprecated testlet has been abandoned in favor of JUnit by the
 * Avalon community
 *
 * @ant.task ignore=""true""
 */ Test FieldDeclaration Modifier protected ReferenceType Vector VariableDeclarator m_tests ClassCreator ReferenceType Vector ClassDeclaration Modifier final protected static /**
     * testlet to run
     */ TestletEntry FieldDeclaration Modifier protected ReferenceType String VariableDeclarator m_testname Literal """" MethodDeclaration /** name of test. No property expansion takes place here */ Modifier public addText FormalParameter Modifier final ReferenceType String testname StatementExpression Assignment MemberReference m_testname MemberReference testname += MethodDeclaration Modifier public ReferenceType String toString ReturnStatement MemberReference m_testname ConstructorDeclaration Modifier public Test StatementExpression MethodInvocation Literal ""org.apache.testlet.engine.TextTestEngine"" setClassname MethodDeclaration /**
     * add a declaration of a testlet to run
     */ Modifier public ReferenceType TestletEntry createTestlet LocalVariableDeclaration Modifier final ReferenceType TestletEntry VariableDeclarator entry ClassCreator ReferenceType TestletEntry StatementExpression MethodInvocation m_tests MemberReference entry addElement ReturnStatement MemberReference entry MethodDeclaration /**
     * a boolean value indicating whether tests should display a
     * message on success; optional
     */ Modifier public setShowSuccess FormalParameter Modifier final BasicType boolean showSuccess StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""-s="" MemberReference showSuccess setValue createArg MethodDeclaration /**
     * a boolean value indicating whether a banner should be displayed
     * when starting testlet engine; optional.
     */ Modifier public setShowBanner FormalParameter Modifier final ReferenceType String showBanner StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""-b="" MemberReference showBanner setValue createArg MethodDeclaration /**
     * a boolean indicating that a stack trace is displayed on
     * error (but not normal failure); optional.
     */ Modifier public setShowTrace FormalParameter Modifier final BasicType boolean showTrace StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""-t="" MemberReference showTrace setValue createArg MethodDeclaration Modifier public setForceShowTrace FormalParameter Modifier final BasicType boolean forceShowTrace StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""-f="" MemberReference forceShowTrace setValue createArg MethodDeclaration Modifier public execute BuildException LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation m_tests size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation m_tests MethodInvocation toString MemberReference i elementAt setValue createArg End StatementExpression SuperMethodInvocation execute ReferenceType Java",0
639,639,,0
289,289,"CompilationUnit PackageDeclaration org.apache.tools.ant.types ClassDeclaration Modifier public /**
 * Helper class which can be used for Ant task attribute setter methods to allow
 * the build file to specify an integer in either decimal, octal, or hexadecimal
 * format.
 *
 * @see java.lang.Integer#decode(String)
 */ FlexInteger FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator value ConstructorDeclaration Modifier public /**
     * Constructor used by Ant's introspection mechanism for attribute population
     */ FlexInteger FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference value MethodInvocation Integer MemberReference value decode = MethodDeclaration /**
     * Returns the decimal integer value
     */ Modifier public BasicType int intValue ReturnStatement MethodInvocation value intValue MethodDeclaration /**
     * Overridden method to return the decimal value for display
     */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation value toString",0
250,250,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.condition Import java.util.Enumeration Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * &lt;and&gt; condition container.
 *
 * <p>Iterates over all conditions and returns false as soon as one
 * evaluates to false.</p>
 *
 * @since Ant 1.4
 * @version $Revision$
 */ And MethodDeclaration /**
     * @return true if all the contained conditions evaluates to true
     * @exception BuildException if an error occurs
     */ Modifier public BasicType boolean eval BuildException LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation getConditions WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Condition VariableDeclarator c Cast ReferenceType Condition MethodInvocation e nextElement IfStatement MethodInvocation ! c eval BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true ReferenceType ConditionBase ReferenceType Condition",0
175,175,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.perforce Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.util.StringUtils ClassDeclaration Modifier public /**
 * simple implementation of P4HandlerAdapter used by tasks which are not
 * actually processing the output from Perforce
 */ SimpleP4OutputHandler FieldDeclaration ReferenceType P4Base VariableDeclarator parent ConstructorDeclaration Modifier public /**
     * simple constructor
     * @param parent  a P4Base instance
     */ SimpleP4OutputHandler FormalParameter ReferenceType P4Base parent StatementExpression Assignment This MemberReference parent MemberReference parent = MethodDeclaration /**
     * process one line of stderr/stdout
     * if error conditions are detected, then setters are called on the
     * parent
     * @param line line of output
     * @throws BuildException does not throw exceptions any more
     */ Modifier public process FormalParameter ReferenceType String line BuildException IfStatement MethodInvocation parent.util Literal ""/^exit/"" MemberReference line match BlockStatement ReturnStatement End IfStatement BinaryOperation || MethodInvocation parent.util Literal ""/^error:/"" MemberReference line match MethodInvocation parent.util Literal ""/^Perforce client error:/"" MemberReference line match BlockStatement IfStatement BinaryOperation && MethodInvocation ! parent.util Literal ""/label in sync/"" MemberReference line match MethodInvocation ! parent.util Literal ""/up-to-date/"" MemberReference line match BlockStatement StatementExpression MethodInvocation parent Literal true setInError BlockStatement StatementExpression Assignment MemberReference line MethodInvocation parent.util Literal ""s/^[^:]*: //"" MemberReference line substitute = End IfStatement MethodInvocation parent.util Literal ""/^info.*?:/"" MemberReference line match BlockStatement StatementExpression Assignment MemberReference line MethodInvocation parent.util Literal ""s/^[^:]*: //"" MemberReference line substitute = End End StatementExpression MethodInvocation parent MemberReference line TernaryExpression MethodInvocation parent getInError MemberReference Project MSG_ERR MemberReference Project MSG_INFO log IfStatement MethodInvocation parent getInError BlockStatement StatementExpression MethodInvocation parent BinaryOperation + BinaryOperation + MethodInvocation parent getErrorMessage MemberReference line MemberReference StringUtils LINE_SEP setErrorMessage End ReferenceType P4HandlerAdapter",0
564,564,,0
150,150,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors.modifiedselector Import java.io.File ClassDeclaration Modifier public /**
 * Computes a 'hashvalue' for the content of file using String.hashValue().
 * Use of this algorithm doesn't require any additional nested <param>s and
 * doesn't support any.
 *
 * @version 2003-09-13
 * @since  Ant 1.6
 */ HashvalueAlgorithm MethodDeclaration /**
     * This algorithm doesn't need any configuration.
     * Therefore it's always valid.
     * @return always true
     */ Modifier public BasicType boolean isValid ReturnStatement Literal true MethodDeclaration /**
     * Computes a 'hashvalue' for a file content.
     * It reads the content of a file, convert that to String and use the
     * String.hashCode() method.
     * @param file  The file for which the value should be computed
     * @return the hashvalue or <i>null</i> if the file couldn't be read
     */ Modifier public ReferenceType String getValue FormalParameter ReferenceType File file TryStatement IfStatement MethodInvocation ! file canRead BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType java ReferenceType io ReferenceType FileInputStream VariableDeclarator fis ClassCreator ReferenceType java ReferenceType io ReferenceType FileInputStream MemberReference file LocalVariableDeclaration BasicType byte VariableDeclarator content ArrayCreator BasicType byte MethodInvocation fis available StatementExpression MethodInvocation fis MemberReference content read StatementExpression MethodInvocation fis close LocalVariableDeclaration ReferenceType String VariableDeclarator s ClassCreator ReferenceType String MemberReference content LocalVariableDeclaration BasicType int VariableDeclarator hash MethodInvocation s hashCode ReturnStatement MethodInvocation Integer MemberReference hash toString CatchClause CatchClauseParameter Exception e ReturnStatement Literal null MethodDeclaration /**
     * Override Object.toString().
     * @return information about this comparator
     */ Modifier public ReferenceType String toString ReturnStatement Literal ""HashvalueAlgorithm"" ReferenceType Algorithm",0
37,37,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.File Import java.io.IOException Import java.util.Hashtable Import javax.xml.parsers.SAXParser Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * This class is used to generate iPlanet Application Server (iAS) 6.0 stubs and
 * skeletons and build an EJB Jar file.  It is designed to be used with the Ant
 * <code>ejbjar</code> task.  If only stubs and skeletons need to be generated
 * (in other words, if no JAR file needs to be created), refer to the
 * <code>iplanet-ejbc</code> task and the <code>IPlanetEjbcTask</code> class.
 * <p>
 * The following attributes may be specified by the user:
 *   <ul>
 *     <li><i>destdir</i> -- The base directory into which the generated JAR
 *                           files will be written.  Each JAR file is written
 *                           in directories which correspond to their location
 *                           within the ""descriptordir"" namespace.  This is a
 *                           required attribute.
 *     <li><i>classpath</i> -- The classpath used when generating EJB stubs and
 *                             skeletons.  This is an optional attribute (if
 *                             omitted, the classpath specified in the ""ejbjar""
 *                             parent task will be used).  If specified, the
 *                             classpath elements will be prepended to the
 *                             classpath specified in the parent ""ejbjar"" task.
 *                             Note that nested ""classpath"" elements may also be
 *                             used.
 *     <li><i>keepgenerated</i> -- Indicates whether or not the Java source
 *                                 files which are generated by ejbc will be
 *                                 saved or automatically deleted.  If ""yes"",
 *                                 the source files will be retained.  This is
 *                                 an optional attribute (if omitted, it
 *                                 defaults to ""no"").
 *     <li><i>debug</i> -- Indicates whether or not the ejbc utility should
 *                         log additional debugging statements to the standard
 *                         output.  If ""yes"", the additional debugging statements
 *                         will be generated (if omitted, it defaults to ""no"").
 *     <li><i>iashome</i> -- May be used to specify the ""home"" directory for
 *                           this iPlanet Application server installation.  This
 *                           is used to find the ejbc utility if it isn't
 *                           included in the user's system path.  This is an
 *                           optional attribute (if specified, it should refer
 *                           to the <code>[install-location]/iplanet/ias6/ias
 *                           </code> directory).  If omitted, the ejbc utility
 *                           must be on the user's system path.
 *     <li><i>suffix</i> -- String value appended to the JAR filename when
 *                          creating each JAR.  This attribute is not required
 *                          (if omitted, it defaults to "".jar"").
 *   </ul>
 * <p>
 * For each EJB descriptor found in the ""ejbjar"" parent task, this deployment
 * tool will locate the three classes that comprise the EJB.  If these class
 * files cannot be located in the specified <code>srcdir</code> directory, the
 * task will fail.  The task will also attempt to locate the EJB stubs and
 * skeletons in this directory.  If found, the timestamps on the stubs and
 * skeletons will be checked to ensure they are up to date.  Only if these files
 * cannot be found or if they are out of date will ejbc be called.
 *
 * @see    IPlanetEjbc
 */ IPlanetDeploymentTool FieldDeclaration Modifier private ReferenceType File VariableDeclarator iashome FieldDeclaration Modifier private ReferenceType String VariableDeclarator jarSuffix Literal "".jar"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator keepgenerated Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator debug Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator descriptorName FieldDeclaration Modifier private ReferenceType String VariableDeclarator iasDescriptorName FieldDeclaration Modifier private ReferenceType String VariableDeclarator displayName FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator IAS_DD Literal ""ias-ejb-jar.xml"" MethodDeclaration /**
     * Setter method used to store the ""home"" directory of the user's iAS
     * installation.  The directory specified should typically be
     * <code>[install-location]/iplanet/ias6/ias</code>.
     *
     * @param iashome The home directory for the user's iAS installation.
     */ Modifier public setIashome FormalParameter ReferenceType File iashome StatementExpression Assignment This MemberReference iashome MemberReference iashome = MethodDeclaration /**
     * Setter method used to specify whether the Java source files generated by
     * the ejbc utility should be saved or automatically deleted.
     *
     * @param keepgenerated boolean which, if <code>true</code>, indicates that
     *                      Java source files generated by ejbc for the stubs
     *                      and skeletons should be kept.
     */ Modifier public setKeepgenerated FormalParameter BasicType boolean keepgenerated StatementExpression Assignment This MemberReference keepgenerated MemberReference keepgenerated = MethodDeclaration /**
     * Sets whether or not debugging output will be generated when ejbc is
     * executed.
     *
     * @param debug A boolean indicating if debugging output should be generated
     */ Modifier public setDebug FormalParameter BasicType boolean debug StatementExpression Assignment This MemberReference debug MemberReference debug = MethodDeclaration /**
     * Setter method used to specify the filename suffix (for example, "".jar"")
     * for the JAR files to be created.
     *
     * @param jarSuffix The string to use as the JAR filename suffix.
     */ Modifier public setSuffix FormalParameter ReferenceType String jarSuffix StatementExpression Assignment This MemberReference jarSuffix MemberReference jarSuffix = MethodDeclaration /**
     * Since iAS doesn't generate a ""generic"" JAR as part of its processing,
     * this attribute is ignored and a warning message is displayed to the user.
     *
     * @param inString the string to use as the suffix.  This parameter is
     *                 ignored.
     */ Modifier public setGenericJarSuffix FormalParameter ReferenceType String inString StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Since a generic JAR file is not created during processing, the "" Literal ""iPlanet Deployment Tool does not support the "" Literal ""\""genericjarsuffix\"" attribute.  It will be ignored."" MemberReference Project MSG_WARN log MethodDeclaration Modifier public processDescriptor FormalParameter ReferenceType String descriptorName FormalParameter ReferenceType SAXParser saxParser StatementExpression Assignment This MemberReference descriptorName MemberReference descriptorName = StatementExpression Assignment This MemberReference iasDescriptorName Literal null = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""iPlanet Deployment Tool processing: "" MemberReference descriptorName Literal "" (and "" MethodInvocation getIasDescriptorName Literal "")"" MemberReference Project MSG_VERBOSE log StatementExpression SuperMethodInvocation MemberReference descriptorName MemberReference saxParser processDescriptor MethodDeclaration /**
     * Verifies that the user selections are valid.
     *
     * @param descriptorFileName String representing the file name of an EJB
     *                           descriptor to be processed
     * @param saxParser          SAXParser which may be used to parse the XML
     *                           descriptor
     * @throws BuildException If the user selections are invalid.
     */ Modifier protected checkConfiguration FormalParameter ReferenceType String descriptorFileName FormalParameter ReferenceType SAXParser saxParser BuildException LocalVariableDeclaration BasicType int VariableDeclarator startOfName BinaryOperation + MethodInvocation descriptorFileName MemberReference File separatorChar lastIndexOf Literal 1 LocalVariableDeclaration ReferenceType String VariableDeclarator stdXml MethodInvocation descriptorFileName MemberReference startOfName substring IfStatement BinaryOperation && MethodInvocation stdXml MemberReference EJB_DD equals BinaryOperation == MethodInvocation MemberReference baseJarName getConfig Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""No name specified for the completed JAR file.  The EJB"" Literal "" descriptor should be prepended with the JAR "" Literal ""name or it should be specified using the "" Literal ""attribute \""basejarname\"" in the \""ejbjar\"" task."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End LocalVariableDeclaration ReferenceType File VariableDeclarator iasDescriptor ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig MethodInvocation getIasDescriptorName IfStatement BinaryOperation || MethodInvocation iasDescriptor exists MethodInvocation iasDescriptor isFile BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + Literal ""The iAS-specific EJB descriptor ("" MemberReference iasDescriptor Literal "") was not found."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End IfStatement BinaryOperation && BinaryOperation != MemberReference iashome Literal null MethodInvocation iashome isDirectory BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""If \""iashome\"" is specified, it must be a valid "" Literal ""directory (it was set to "" MemberReference iashome Literal "")."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * This method returns a list of EJB files found when the specified EJB
     * descriptor is parsed and processed.
     *
     * @param descriptorFileName String representing the file name of an EJB
     *                           descriptor to be processed
     * @param saxParser          SAXParser which may be used to parse the XML
     *                           descriptor
     * @return                   Hashtable of EJB class (and other) files to be
     *                           added to the completed JAR file
     * @throws IOException       An IOException from the parser, possibly from
     *                           the byte stream or character stream
     * @throws SAXException      Any SAX exception, possibly wrapping another
     *                           exception
     */ Modifier protected ReferenceType Hashtable parseEjbFiles FormalParameter ReferenceType String descriptorFileName FormalParameter ReferenceType SAXParser saxParser IOException SAXException LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator files LocalVariableDeclaration ReferenceType IPlanetEjbc VariableDeclarator ejbc ClassCreator ReferenceType IPlanetEjbc ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig MemberReference descriptorFileName ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig MethodInvocation getIasDescriptorName MethodInvocation MemberReference srcDir getConfig MethodInvocation MethodInvocation toString getCombinedClasspath MemberReference saxParser StatementExpression MethodInvocation ejbc MemberReference keepgenerated setRetainSource StatementExpression MethodInvocation ejbc MemberReference debug setDebugOutput IfStatement BinaryOperation != MemberReference iashome Literal null BlockStatement StatementExpression MethodInvocation ejbc MemberReference iashome setIasHomeDir End TryStatement StatementExpression MethodInvocation ejbc execute CatchClause CatchClauseParameter IPlanetEjbc.EjbcException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""An error has occurred while trying to "" Literal ""execute the iAS ejbc utility"" MemberReference e MethodInvocation getLocation StatementExpression Assignment MemberReference displayName MethodInvocation ejbc getDisplayName = StatementExpression Assignment MemberReference files MethodInvocation ejbc getEjbFiles = LocalVariableDeclaration ReferenceType String VariableDeclarator cmpDescriptors MethodInvocation ejbc getCmpDescriptors IfStatement BinaryOperation > MemberReference cmpDescriptors length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator baseDir MethodInvocation MemberReference descriptorDir getConfig LocalVariableDeclaration BasicType int VariableDeclarator endOfPath MethodInvocation descriptorFileName MemberReference File separator lastIndexOf LocalVariableDeclaration ReferenceType String VariableDeclarator relativePath MethodInvocation descriptorFileName Literal 0 BinaryOperation + MemberReference endOfPath Literal 1 substring ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference cmpDescriptors length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator endOfCmp MemberReference ArraySelector MemberReference i MethodInvocation Literal '/' lastIndexOf cmpDescriptors LocalVariableDeclaration ReferenceType String VariableDeclarator cmpDescriptor MemberReference ArraySelector MemberReference i MethodInvocation BinaryOperation + MemberReference endOfCmp Literal 1 substring cmpDescriptors LocalVariableDeclaration ReferenceType File VariableDeclarator cmpFile ClassCreator ReferenceType File MemberReference baseDir BinaryOperation + MemberReference relativePath MemberReference cmpDescriptor IfStatement MethodInvocation ! cmpFile exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""The CMP descriptor file ("" MemberReference cmpFile Literal "") could not be found."" MethodInvocation getLocation End StatementExpression MethodInvocation files MemberReference ArraySelector MemberReference i cmpDescriptors MemberReference cmpFile put End End ReturnStatement MemberReference files MethodDeclaration /**
     * Add the iAS-specific EJB descriptor to the list of files which will be
     * written to the JAR file.
     *
     * @param ejbFiles Hashtable of EJB class (and other) files to be added to
     *                 the completed JAR file.
     * @param ddPrefix not used
     */ Modifier protected addVendorFiles FormalParameter ReferenceType Hashtable ejbFiles FormalParameter ReferenceType String ddPrefix StatementExpression MethodInvocation ejbFiles BinaryOperation + MemberReference META_DIR MemberReference IAS_DD ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig MethodInvocation getIasDescriptorName put MethodDeclaration /**
     * Get the name of the Jar that will be written. The modification date
     * of this jar will be checked against the dependent bean classes.
     *
     * @param baseName String name of the EJB JAR file to be written (without
     *                 a filename extension).
     *
     * @return File representing the JAR file which will be written.
     */ ReferenceType File getVendorOutputJarFile FormalParameter ReferenceType String baseName LocalVariableDeclaration ReferenceType File VariableDeclarator jarFile ClassCreator ReferenceType File MethodInvocation getDestDir BinaryOperation + MemberReference baseName MemberReference jarSuffix StatementExpression MethodInvocation BinaryOperation + Literal ""JAR file name: "" MethodInvocation jarFile toString MemberReference Project MSG_VERBOSE log ReturnStatement MemberReference jarFile MethodDeclaration /**
     * The iAS ejbc utility doesn't require the Public ID of the descriptor's
     * DTD for it to process correctly--this method always returns <code>null
     * </code>.
     *
     * @return <code>null</code>.
     */ Modifier protected ReferenceType String getPublicId ReturnStatement Literal null MethodDeclaration /**
     * Determines the name of the iAS-specific EJB descriptor using the
     * specified standard EJB descriptor name.  In general, the standard
     * descriptor will be named ""[basename]-ejb-jar.xml"", and this method will
     * return ""[basename]-ias-ejb-jar.xml"".
     *
     * @return The name of the iAS-specific EJB descriptor file.
     */ Modifier private ReferenceType String getIasDescriptorName IfStatement BinaryOperation != MemberReference iasDescriptorName Literal null BlockStatement ReturnStatement MemberReference iasDescriptorName End LocalVariableDeclaration ReferenceType String VariableDeclarator path Literal """" LocalVariableDeclaration ReferenceType String VariableDeclarator basename LocalVariableDeclaration ReferenceType String VariableDeclarator remainder LocalVariableDeclaration BasicType int VariableDeclarator startOfFileName MethodInvocation descriptorName MemberReference File separatorChar lastIndexOf IfStatement BinaryOperation != MemberReference startOfFileName Literal - 1 BlockStatement StatementExpression Assignment MemberReference path MethodInvocation descriptorName Literal 0 BinaryOperation + MemberReference startOfFileName Literal 1 substring = End IfStatement MethodInvocation descriptorName MethodInvocation MemberReference EJB_DD equals BinaryOperation + MemberReference startOfFileName Literal 1 substring BlockStatement StatementExpression Assignment MemberReference basename Literal """" = StatementExpression Assignment MemberReference remainder MemberReference EJB_DD = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator endOfBaseName MethodInvocation descriptorName MethodInvocation MemberReference baseNameTerminator getConfig MemberReference startOfFileName indexOf IfStatement BinaryOperation < MemberReference endOfBaseName Literal 0 BlockStatement StatementExpression Assignment MemberReference endOfBaseName BinaryOperation - MethodInvocation descriptorName Literal '.' lastIndexOf Literal 1 = IfStatement BinaryOperation < MemberReference endOfBaseName Literal 0 BlockStatement StatementExpression Assignment MemberReference endOfBaseName BinaryOperation - MethodInvocation descriptorName length Literal 1 = End End StatementExpression Assignment MemberReference basename MethodInvocation descriptorName BinaryOperation + MemberReference startOfFileName Literal 1 BinaryOperation + MemberReference endOfBaseName Literal 1 substring = StatementExpression Assignment MemberReference remainder MethodInvocation descriptorName BinaryOperation + MemberReference endOfBaseName Literal 1 substring = End StatementExpression Assignment MemberReference iasDescriptorName BinaryOperation + BinaryOperation + BinaryOperation + MemberReference path MemberReference basename Literal ""ias-"" MemberReference remainder = ReturnStatement MemberReference iasDescriptorName ReferenceType GenericDeploymentTool",0
435,435,,0
446,446,,0
537,537,,0
340,340,"CompilationUnit PackageDeclaration org.apache.tools.ant.listener Import org.apache.log4j.Category Import org.apache.log4j.helpers.NullEnumeration Import org.apache.tools.ant.BuildEvent Import org.apache.tools.ant.BuildListener Import org.apache.tools.ant.Project Import org.apache.tools.ant.Target Import org.apache.tools.ant.Task ClassDeclaration Modifier public /**
 *  Listener which sends events to Log4j logging system
 *
 */ Log4jListener FieldDeclaration /** Indicates if the listener was initialized. */ Modifier private BasicType boolean VariableDeclarator initialized Literal false ConstructorDeclaration Modifier public /**
     * Construct the listener and make sure there is a valid appender.
     */ Log4jListener StatementExpression Assignment MemberReference initialized Literal false = LocalVariableDeclaration ReferenceType Category VariableDeclarator cat MethodInvocation Category Literal ""org.apache.tools.ant"" getInstance LocalVariableDeclaration ReferenceType Category VariableDeclarator rootCat MethodInvocation Category getRoot IfStatement BinaryOperation instanceof MethodInvocation rootCat getAllAppenders ReferenceType NullEnumeration BlockStatement StatementExpression Assignment MemberReference initialized Literal true = BlockStatement StatementExpression MethodInvocation cat Literal ""No log4j.properties in build area"" error End MethodDeclaration /**
     * @see BuildListener#buildStarted
     */ Modifier public buildStarted FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Category VariableDeclarator cat MethodInvocation Category ClassReference MethodInvocation getName ReferenceType Project getInstance StatementExpression MethodInvocation cat Literal ""Build started."" info End MethodDeclaration /**
     * @see BuildListener#buildFinished
     */ Modifier public buildFinished FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Category VariableDeclarator cat MethodInvocation Category ClassReference MethodInvocation getName ReferenceType Project getInstance IfStatement BinaryOperation == MethodInvocation event getException Literal null BlockStatement StatementExpression MethodInvocation cat Literal ""Build finished."" info BlockStatement StatementExpression MethodInvocation cat Literal ""Build finished with error."" MethodInvocation event getException error End End MethodDeclaration /**
     * @see BuildListener#targetStarted
     */ Modifier public targetStarted FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Category VariableDeclarator cat MethodInvocation Category ClassReference MethodInvocation getName ReferenceType Target getInstance StatementExpression MethodInvocation cat BinaryOperation + BinaryOperation + Literal ""Target \"""" MethodInvocation event MethodInvocation getName getTarget Literal ""\"" started."" info End MethodDeclaration /**
     * @see BuildListener#targetFinished
     */ Modifier public targetFinished FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator targetName MethodInvocation event MethodInvocation getName getTarget LocalVariableDeclaration ReferenceType Category VariableDeclarator cat MethodInvocation Category ClassReference MethodInvocation getName ReferenceType Target getInstance IfStatement BinaryOperation == MethodInvocation event getException Literal null BlockStatement StatementExpression MethodInvocation cat BinaryOperation + BinaryOperation + Literal ""Target \"""" MemberReference targetName Literal ""\"" finished."" info BlockStatement StatementExpression MethodInvocation cat BinaryOperation + BinaryOperation + Literal ""Target \"""" MemberReference targetName Literal ""\"" finished with error."" MethodInvocation event getException error End End MethodDeclaration /**
     * @see BuildListener#taskStarted
     */ Modifier public taskStarted FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Task VariableDeclarator task MethodInvocation event getTask LocalVariableDeclaration ReferenceType Category VariableDeclarator cat MethodInvocation Category MethodInvocation task MethodInvocation getName getClass getInstance StatementExpression MethodInvocation cat BinaryOperation + BinaryOperation + Literal ""Task \"""" MethodInvocation task getTaskName Literal ""\"" started."" info End MethodDeclaration /**
     * @see BuildListener#taskFinished
     */ Modifier public taskFinished FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Task VariableDeclarator task MethodInvocation event getTask LocalVariableDeclaration ReferenceType Category VariableDeclarator cat MethodInvocation Category MethodInvocation task MethodInvocation getName getClass getInstance IfStatement BinaryOperation == MethodInvocation event getException Literal null BlockStatement StatementExpression MethodInvocation cat BinaryOperation + BinaryOperation + Literal ""Task \"""" MethodInvocation task getTaskName Literal ""\"" finished."" info BlockStatement StatementExpression MethodInvocation cat BinaryOperation + BinaryOperation + Literal ""Task \"""" MethodInvocation task getTaskName Literal ""\"" finished with error."" MethodInvocation event getException error End End MethodDeclaration /**
     * @see BuildListener#messageLogged
     */ Modifier public messageLogged FormalParameter ReferenceType BuildEvent event IfStatement MemberReference initialized BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator categoryObject MethodInvocation event getTask IfStatement BinaryOperation == MemberReference categoryObject Literal null BlockStatement StatementExpression Assignment MemberReference categoryObject MethodInvocation event getTarget = IfStatement BinaryOperation == MemberReference categoryObject Literal null BlockStatement StatementExpression Assignment MemberReference categoryObject MethodInvocation event getProject = End End LocalVariableDeclaration ReferenceType Category VariableDeclarator cat MethodInvocation Category MethodInvocation categoryObject MethodInvocation getName getClass getInstance SwitchStatement MethodInvocation event getPriority SwitchStatementCase MemberReference Project MSG_ERR StatementExpression MethodInvocation cat MethodInvocation event getMessage error BreakStatement SwitchStatementCase MemberReference Project MSG_WARN StatementExpression MethodInvocation cat MethodInvocation event getMessage warn BreakStatement SwitchStatementCase MemberReference Project MSG_INFO StatementExpression MethodInvocation cat MethodInvocation event getMessage info BreakStatement SwitchStatementCase MemberReference Project MSG_VERBOSE StatementExpression MethodInvocation cat MethodInvocation event getMessage debug BreakStatement SwitchStatementCase MemberReference Project MSG_DEBUG StatementExpression MethodInvocation cat MethodInvocation event getMessage debug BreakStatement SwitchStatementCase StatementExpression MethodInvocation cat MethodInvocation event getMessage error BreakStatement End End ReferenceType BuildListener",0
350,350,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors Import java.io.File Import java.util.Enumeration ClassDeclaration Modifier public /**
 * This selector has a collection of other selectors, all of which have to
 * select a file in order for this selector to select it.
 *
 * @since 1.5
 */ AndSelector ConstructorDeclaration Modifier public /**
     * Default constructor.
     */ AndSelector MethodDeclaration /**
     * @return a string representation of the selector
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer IfStatement MethodInvocation hasSelectors BlockStatement StatementExpression MethodInvocation buf Literal ""{andselect: "" append StatementExpression MethodInvocation buf SuperMethodInvocation toString append StatementExpression MethodInvocation buf Literal ""}"" append End ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * Returns true (the file is selected) only if all other selectors
     * agree that the file should be selected.
     *
     * @param basedir the base directory the scan is being done from
     * @param filename the name of the file to check
     * @param file a java.io.File object for the filename that the selector
     * can use
     * @return whether the file should be selected or not
     */ Modifier public BasicType boolean isSelected FormalParameter ReferenceType File basedir FormalParameter ReferenceType String filename FormalParameter ReferenceType File file StatementExpression MethodInvocation validate LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation selectorElements LocalVariableDeclaration BasicType boolean VariableDeclarator result WhileStatement MethodInvocation e hasMoreElements BlockStatement StatementExpression Assignment MemberReference result Cast ReferenceType FileSelector MethodInvocation e nextElement = IfStatement MemberReference ! result BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true ReferenceType BaseSelectorContainer",0
205,205,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional Import java.io.BufferedReader Import java.io.File Import java.io.IOException Import java.io.PrintWriter Import java.io.StringReader Import java.io.StringWriter Import java.util.Enumeration Import java.util.Hashtable Import java.util.Properties Import java.util.StringTokenizer Import java.util.Vector Import netrexx.lang.Rexx Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.MatchingTask Import org.apache.tools.ant.types.EnumeratedAttribute ClassDeclaration Modifier public /**
 * Compiles NetRexx source files.
 * This task can take the following
 * arguments:
 * <ul>
 * <li>binary</li>
 * <li>classpath</li>
 * <li>comments</li>
 * <li>compile</li>
 * <li>console</li>
 * <li>crossref</li>
 * <li>decimal</li>
 * <li>destdir</li>
 * <li>diag</li>
 * <li>explicit</li>
 * <li>format</li>
 * <li>keep</li>
 * <li>logo</li>
 * <li>replace</li>
 * <li>savelog</li>
 * <li>srcdir</li>
 * <li>sourcedir</li>
 * <li>strictargs</li>
 * <li>strictassign</li>
 * <li>strictcase</li>
 * <li>strictimport</li>
 * <li>symbols</li>
 * <li>time</li>
 * <li>trace</li>
 * <li>utf8</li>
 * <li>verbose</li>
 * <li>suppressMethodArgumentNotUsed</li>
 * <li>suppressPrivatePropertyNotUsed</li>
 * <li>suppressVariableNotUsed</li>
 * <li>suppressExceptionNotSignalled</li>
 * <li>suppressDeprecation</li>
 * </ul>
 * Of these arguments, the <b>srcdir</b> argument is required.
 *
 * <p>When this task executes, it will recursively scan the srcdir
 * looking for NetRexx source files to compile. This task makes its
 * compile decision based on timestamp.
 * <p>Before files are compiled they and any other file in the
 * srcdir will be copied to the destdir allowing support files to be
 * located properly in the classpath. The reason for copying the source files
 * before the compile is that NetRexxC has only two destinations for classfiles:
 * <ol>
 * <li>The current directory, and,</li>
 * <li>The directory the source is in (see sourcedir option)
 * </ol>
 *
 */ NetRexxC FieldDeclaration Modifier private BasicType boolean VariableDeclarator binary FieldDeclaration Modifier private ReferenceType String VariableDeclarator classpath FieldDeclaration Modifier private BasicType boolean VariableDeclarator comments FieldDeclaration Modifier private BasicType boolean VariableDeclarator compact Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator compile Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator console FieldDeclaration Modifier private BasicType boolean VariableDeclarator crossref FieldDeclaration Modifier private BasicType boolean VariableDeclarator decimal Literal true FieldDeclaration Modifier private ReferenceType File VariableDeclarator destDir FieldDeclaration Modifier private BasicType boolean VariableDeclarator diag FieldDeclaration Modifier private BasicType boolean VariableDeclarator explicit FieldDeclaration Modifier private BasicType boolean VariableDeclarator format FieldDeclaration Modifier private BasicType boolean VariableDeclarator keep FieldDeclaration Modifier private BasicType boolean VariableDeclarator logo Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator replace FieldDeclaration Modifier private BasicType boolean VariableDeclarator savelog FieldDeclaration Modifier private ReferenceType File VariableDeclarator srcDir FieldDeclaration Modifier private BasicType boolean VariableDeclarator sourcedir Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator strictargs FieldDeclaration Modifier private BasicType boolean VariableDeclarator strictassign FieldDeclaration Modifier private BasicType boolean VariableDeclarator strictcase FieldDeclaration Modifier private BasicType boolean VariableDeclarator strictimport FieldDeclaration Modifier private BasicType boolean VariableDeclarator strictprops FieldDeclaration Modifier private BasicType boolean VariableDeclarator strictsignal FieldDeclaration Modifier private BasicType boolean VariableDeclarator symbols FieldDeclaration Modifier private BasicType boolean VariableDeclarator time FieldDeclaration Modifier private ReferenceType String VariableDeclarator trace Literal ""trace2"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator utf8 FieldDeclaration Modifier private ReferenceType String VariableDeclarator verbose Literal ""verbose3"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator suppressMethodArgumentNotUsed Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator suppressPrivatePropertyNotUsed Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator suppressVariableNotUsed Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator suppressExceptionNotSignalled Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator suppressDeprecation Literal false FieldDeclaration Modifier final static ReferenceType String VariableDeclarator MSG_METHOD_ARGUMENT_NOT_USED Literal ""Warning: Method argument is not used"" FieldDeclaration Modifier final static ReferenceType String VariableDeclarator MSG_PRIVATE_PROPERTY_NOT_USED Literal ""Warning: Private property is defined but not used"" FieldDeclaration Modifier final static ReferenceType String VariableDeclarator MSG_VARIABLE_NOT_USED Literal ""Warning: Variable is set but not used"" FieldDeclaration Modifier final static ReferenceType String VariableDeclarator MSG_EXCEPTION_NOT_SIGNALLED Literal ""is in SIGNALS list but is not signalled within the method"" FieldDeclaration Modifier final static ReferenceType String VariableDeclarator MSG_DEPRECATION Literal ""has been deprecated"" FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator compileList ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Hashtable VariableDeclarator filecopyList ClassCreator ReferenceType Hashtable MethodDeclaration /**
     * Set whether literals are treated as binary, rather than NetRexx types
     */ Modifier public setBinary FormalParameter BasicType boolean binary StatementExpression Assignment This MemberReference binary MemberReference binary = MethodDeclaration /** Set the classpath used for NetRexx compilation  */ Modifier public setClasspath FormalParameter ReferenceType String classpath StatementExpression Assignment This MemberReference classpath MemberReference classpath = MethodDeclaration /**
     * Set whether comments are passed through to the generated java source.
     * Valid true values are ""on"" or ""true"". Anything else sets the flag to
     * false. The default value is false
     */ Modifier public setComments FormalParameter BasicType boolean comments StatementExpression Assignment This MemberReference comments MemberReference comments = MethodDeclaration /**
     * Set whether error messages come out in compact or verbose format. Valid
     * true values are ""on"" or ""true"". Anything else sets the flag to false.
     * The default value is false
     */ Modifier public setCompact FormalParameter BasicType boolean compact StatementExpression Assignment This MemberReference compact MemberReference compact = MethodDeclaration /**
     * Set whether the NetRexx compiler should compile the generated java code
     * Valid true values are ""on"" or ""true"". Anything else sets the flag to
     * false. The default value is true. Setting this flag to false, will
     * automatically set the keep flag to true.
     */ Modifier public setCompile FormalParameter BasicType boolean compile StatementExpression Assignment This MemberReference compile MemberReference compile = IfStatement BinaryOperation && This ! MemberReference compile This ! MemberReference keep BlockStatement StatementExpression Assignment This MemberReference keep Literal true = End MethodDeclaration /**
     * Set whether or not messages should be displayed on the 'console' Valid
     * true values are ""on"" or ""true"". Anything else sets the flag to false.
     * The default value is true.
     */ Modifier public setConsole FormalParameter BasicType boolean console StatementExpression Assignment This MemberReference console MemberReference console = MethodDeclaration /** Whether variable cross references are generated  */ Modifier public setCrossref FormalParameter BasicType boolean crossref StatementExpression Assignment This MemberReference crossref MemberReference crossref = MethodDeclaration /**
     * Set whether decimal arithmetic should be used for the netrexx code.
     * Binary arithmetic is used when this flag is turned off. Valid true
     * values are ""on"" or ""true"". Anything else sets the flag to false. The
     * default value is true.
     */ Modifier public setDecimal FormalParameter BasicType boolean decimal StatementExpression Assignment This MemberReference decimal MemberReference decimal = MethodDeclaration /**
     * Set the destination directory into which the NetRexx source files
     * should be copied and then compiled.
     */ Modifier public setDestDir FormalParameter ReferenceType File destDirName StatementExpression Assignment MemberReference destDir MemberReference destDirName = MethodDeclaration /**
     * Whether diagnostic information about the compile is generated
     */ Modifier public setDiag FormalParameter BasicType boolean diag StatementExpression Assignment This MemberReference diag MemberReference diag = MethodDeclaration /**
     * Sets whether variables must be declared explicitly before use. Valid
     * true values are ""on"" or ""true"". Anything else sets the flag to false.
     * The default value is false.
     */ Modifier public setExplicit FormalParameter BasicType boolean explicit StatementExpression Assignment This MemberReference explicit MemberReference explicit = MethodDeclaration /**
     * Whether the generated java code is formatted nicely or left to match
     * NetRexx line numbers for call stack debugging
     */ Modifier public setFormat FormalParameter BasicType boolean format StatementExpression Assignment This MemberReference format MemberReference format = MethodDeclaration /**
     * Whether the generated java code is produced Valid true values are ""on""
     * or ""true"". Anything else sets the flag to false. The default value is
     * false.
     */ Modifier public setJava FormalParameter BasicType boolean java StatementExpression MethodInvocation Literal ""The attribute java is currently unused."" MemberReference Project MSG_WARN log MethodDeclaration /**
     * Sets whether the generated java source file should be kept after
     * compilation. The generated files will have an extension of .java.keep,
     * <b>not</b> .java Valid true values are ""on"" or ""true"". Anything else
     * sets the flag to false. The default value is false.
     */ Modifier public setKeep FormalParameter BasicType boolean keep StatementExpression Assignment This MemberReference keep MemberReference keep = MethodDeclaration /** Whether the compiler text logo is displayed when compiling  */ Modifier public setLogo FormalParameter BasicType boolean logo StatementExpression Assignment This MemberReference logo MemberReference logo = MethodDeclaration /**
     * Whether the generated .java file should be replaced when compiling
     * Valid true values are ""on"" or ""true"". Anything else sets the flag to
     * false. The default value is false.
     */ Modifier public setReplace FormalParameter BasicType boolean replace StatementExpression Assignment This MemberReference replace MemberReference replace = MethodDeclaration /**
     * Sets whether the compiler messages will be written to NetRexxC.log as
     * well as to the console Valid true values are ""on"" or ""true"". Anything
     * else sets the flag to false. The default value is false.
     */ Modifier public setSavelog FormalParameter BasicType boolean savelog StatementExpression Assignment This MemberReference savelog MemberReference savelog = MethodDeclaration /**
     * Tells the NetRexx compiler to store the class files in the same
     * directory as the source files. The alternative is the working directory
     * Valid true values are ""on"" or ""true"". Anything else sets the flag to
     * false. The default value is true.
     */ Modifier public setSourcedir FormalParameter BasicType boolean sourcedir StatementExpression Assignment This MemberReference sourcedir MemberReference sourcedir = MethodDeclaration /** Set the source dir to find the source Java files.  */ Modifier public setSrcDir FormalParameter ReferenceType File srcDirName StatementExpression Assignment MemberReference srcDir MemberReference srcDirName = MethodDeclaration /**
     * Tells the NetRexx compiler that method calls always need parentheses,
     * even if no arguments are needed, e.g. <code>aStringVar.getBytes</code>
     * vs. <code>aStringVar.getBytes()</code> Valid true values are ""on"" or
     * ""true"". Anything else sets the flag to false. The default value is
     * false.
     */ Modifier public setStrictargs FormalParameter BasicType boolean strictargs StatementExpression Assignment This MemberReference strictargs MemberReference strictargs = MethodDeclaration /**
     * Tells the NetRexx compile that assignments must match exactly on type
     */ Modifier public setStrictassign FormalParameter BasicType boolean strictassign StatementExpression Assignment This MemberReference strictassign MemberReference strictassign = MethodDeclaration /**
     * Specifies whether the NetRexx compiler should be case sensitive or not
     */ Modifier public setStrictcase FormalParameter BasicType boolean strictcase StatementExpression Assignment This MemberReference strictcase MemberReference strictcase = MethodDeclaration /**
     * Sets whether classes need to be imported explicitly using an <code>import</code>
     * statement. By default the NetRexx compiler will import certain packages
     * automatically Valid true values are ""on"" or ""true"". Anything else sets
     * the flag to false. The default value is false.
     */ Modifier public setStrictimport FormalParameter BasicType boolean strictimport StatementExpression Assignment This MemberReference strictimport MemberReference strictimport = MethodDeclaration /**
     * Sets whether local properties need to be qualified explicitly using
     * <code>this</code> Valid true values are ""on"" or ""true"". Anything else
     * sets the flag to false. The default value is false.
     */ Modifier public setStrictprops FormalParameter BasicType boolean strictprops StatementExpression Assignment This MemberReference strictprops MemberReference strictprops = MethodDeclaration /**
     * Whether the compiler should force catching of exceptions by explicitly
     * named types
     */ Modifier public setStrictsignal FormalParameter BasicType boolean strictsignal StatementExpression Assignment This MemberReference strictsignal MemberReference strictsignal = MethodDeclaration /**
     * Sets whether debug symbols should be generated into the class file
     * Valid true values are ""on"" or ""true"". Anything else sets the flag to
     * false. The default value is false.
     */ Modifier public setSymbols FormalParameter BasicType boolean symbols StatementExpression Assignment This MemberReference symbols MemberReference symbols = MethodDeclaration /**
     * Asks the NetRexx compiler to print compilation times to the console
     * Valid true values are ""on"" or ""true"". Anything else sets the flag to
     * false. The default value is false.
     */ Modifier public setTime FormalParameter BasicType boolean time StatementExpression Assignment This MemberReference time MemberReference time = MethodDeclaration Modifier public setTrace FormalParameter ReferenceType TraceAttr trace StatementExpression Assignment This MemberReference trace MethodInvocation trace getValue = MethodDeclaration /**
     * Turns on or off tracing and directs the resultant trace output Valid
     * values are: ""trace"", ""trace1"", ""trace2"" and ""notrace"". ""trace"" and
     * ""trace2""
     */ Modifier public setTrace FormalParameter ReferenceType String trace LocalVariableDeclaration ReferenceType TraceAttr VariableDeclarator t ClassCreator ReferenceType TraceAttr StatementExpression MethodInvocation t MemberReference trace setValue StatementExpression MethodInvocation MemberReference t setTrace MethodDeclaration /**
     * Tells the NetRexx compiler that the source is in UTF8 Valid true values
     * are ""on"" or ""true"". Anything else sets the flag to false. The default
     * value is false.
     */ Modifier public setUtf8 FormalParameter BasicType boolean utf8 StatementExpression Assignment This MemberReference utf8 MemberReference utf8 = MethodDeclaration /**
     * Whether lots of warnings and error messages should be generated
     */ Modifier public setVerbose FormalParameter ReferenceType VerboseAttr verbose StatementExpression Assignment This MemberReference verbose MethodInvocation verbose getValue = MethodDeclaration /**
     * Whether lots of warnings and error messages should be generated
     */ Modifier public setVerbose FormalParameter ReferenceType String verbose LocalVariableDeclaration ReferenceType VerboseAttr VariableDeclarator v ClassCreator ReferenceType VerboseAttr StatementExpression MethodInvocation v MemberReference verbose setValue StatementExpression MethodInvocation MemberReference v setVerbose MethodDeclaration /**
     * Whether the task should suppress the ""Method argument is not used"" in
     * strictargs-Mode, which can not be suppressed by the compiler itself.
     * The warning is logged as verbose message, though.
     */ Modifier public setSuppressMethodArgumentNotUsed FormalParameter BasicType boolean suppressMethodArgumentNotUsed StatementExpression Assignment This MemberReference suppressMethodArgumentNotUsed MemberReference suppressMethodArgumentNotUsed = MethodDeclaration /**
     * Whether the task should suppress the ""Private property is defined but
     * not used"" in strictargs-Mode, which can be quite annoying while
     * developing. The warning is logged as verbose message, though.
     */ Modifier public setSuppressPrivatePropertyNotUsed FormalParameter BasicType boolean suppressPrivatePropertyNotUsed StatementExpression Assignment This MemberReference suppressPrivatePropertyNotUsed MemberReference suppressPrivatePropertyNotUsed = MethodDeclaration /**
     * Whether the task should suppress the ""Variable is set but not used"" in
     * strictargs-Mode. Be careful with this one! The warning is logged as
     * verbose message, though.
     */ Modifier public setSuppressVariableNotUsed FormalParameter BasicType boolean suppressVariableNotUsed StatementExpression Assignment This MemberReference suppressVariableNotUsed MemberReference suppressVariableNotUsed = MethodDeclaration /**
     * Whether the task should suppress the ""FooException is in SIGNALS list
     * but is not signalled within the method"", which is sometimes rather
     * useless. The warning is logged as verbose message, though.
     */ Modifier public setSuppressExceptionNotSignalled FormalParameter BasicType boolean suppressExceptionNotSignalled StatementExpression Assignment This MemberReference suppressExceptionNotSignalled MemberReference suppressExceptionNotSignalled = MethodDeclaration /**
     * Tells whether we should filter out any deprecation-messages
     * of the compiler out.
     */ Modifier public setSuppressDeprecation FormalParameter BasicType boolean suppressDeprecation StatementExpression Assignment This MemberReference suppressDeprecation MemberReference suppressDeprecation = MethodDeclaration /**
     * init-Method sets defaults from Properties. That way, when ant is called
     * with arguments like -Dant.netrexxc.verbose=verbose5 one can easily take
     * control of all netrexxc-tasks.
     */ Modifier public init LocalVariableDeclaration ReferenceType String VariableDeclarator p IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.binary"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference binary MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.comments"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference comments MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.compact"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference compact MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.compile"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference compile MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.console"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference console MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.crossref"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference crossref MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.decimal"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference decimal MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.diag"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference diag MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.explicit"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference explicit MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.format"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference format MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.keep"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference keep MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.logo"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference logo MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.replace"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference replace MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.savelog"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference savelog MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.sourcedir"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference sourcedir MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.strictargs"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference strictargs MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.strictassign"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference strictassign MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.strictcase"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference strictcase MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.strictimport"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference strictimport MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.strictprops"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference strictprops MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.strictsignal"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference strictsignal MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.symbols"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference symbols MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.time"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference time MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.trace"" getProperty getProject = Literal null BlockStatement StatementExpression MethodInvocation MemberReference p setTrace End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.utf8"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference utf8 MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.verbose"" getProperty getProject = Literal null BlockStatement StatementExpression MethodInvocation MemberReference p setVerbose End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.suppressMethodArgumentNotUsed"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference suppressMethodArgumentNotUsed MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.suppressPrivatePropertyNotUsed"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference suppressPrivatePropertyNotUsed MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.suppressVariableNotUsed"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference suppressVariableNotUsed MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.suppressExceptionNotSignalled"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference suppressExceptionNotSignalled MethodInvocation Project MemberReference p toBoolean = End IfStatement BinaryOperation != Assignment MemberReference p MethodInvocation MethodInvocation Literal ""ant.netrexxc.suppressDeprecation"" getProperty getProject = Literal null BlockStatement StatementExpression Assignment This MemberReference suppressDeprecation MethodInvocation Project MemberReference p toBoolean = End MethodDeclaration /** Executes the task - performs the actual compiler call.  */ Modifier public execute BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference srcDir Literal null BinaryOperation == MemberReference destDir Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""srcDir and destDir attributes must be set!"" End LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation MemberReference srcDir getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation ds getIncludedFiles StatementExpression MethodInvocation MemberReference srcDir MemberReference destDir MemberReference files scanDir StatementExpression MethodInvocation copyFilesToDestination IfStatement BinaryOperation > MethodInvocation compileList size Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Compiling "" MethodInvocation compileList size Literal "" source file"" TernaryExpression BinaryOperation == MethodInvocation compileList size Literal 1 Literal """" Literal ""s"" Literal "" to "" MemberReference destDir log StatementExpression MethodInvocation doNetRexxCompile End MethodDeclaration /**
     * Scans the directory looking for source files to be compiled and support
     * files to be copied.
     */ Modifier private scanDir FormalParameter ReferenceType File srcDir FormalParameter ReferenceType File destDir FormalParameter ReferenceType String files ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator srcFile ClassCreator ReferenceType File MemberReference srcDir MemberReference ArraySelector MemberReference i files LocalVariableDeclaration ReferenceType File VariableDeclarator destFile ClassCreator ReferenceType File MemberReference destDir MemberReference ArraySelector MemberReference i files LocalVariableDeclaration ReferenceType String VariableDeclarator filename MemberReference ArraySelector MemberReference i files IfStatement MethodInvocation filename MethodInvocation Literal "".nrx"" endsWith toLowerCase BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator classFile ClassCreator ReferenceType File MemberReference destDir BinaryOperation + MethodInvocation filename Literal 0 MethodInvocation filename Literal '.' lastIndexOf substring Literal "".class"" IfStatement BinaryOperation || MemberReference ! compile BinaryOperation > MethodInvocation srcFile lastModified MethodInvocation classFile lastModified BlockStatement StatementExpression MethodInvocation filecopyList MethodInvocation srcFile getAbsolutePath MethodInvocation destFile getAbsolutePath put StatementExpression MethodInvocation compileList MethodInvocation destFile getAbsolutePath addElement End BlockStatement IfStatement BinaryOperation > MethodInvocation srcFile lastModified MethodInvocation destFile lastModified BlockStatement StatementExpression MethodInvocation filecopyList MethodInvocation srcFile getAbsolutePath MethodInvocation destFile getAbsolutePath put End End End MethodDeclaration /** Copy eligible files from the srcDir to destDir  */ Modifier private copyFilesToDestination IfStatement BinaryOperation > MethodInvocation filecopyList size Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Copying "" MethodInvocation filecopyList size Literal "" file"" TernaryExpression BinaryOperation == MethodInvocation filecopyList size Literal 1 Literal """" Literal ""s"" Literal "" to "" MethodInvocation destDir getAbsolutePath log LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation filecopyList keys WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fromFile Cast ReferenceType String MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator toFile Cast ReferenceType String MethodInvocation filecopyList MemberReference fromFile get TryStatement StatementExpression MethodInvocation MethodInvocation MemberReference fromFile MemberReference toFile copyFile getProject CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Failed to copy "" MemberReference fromFile Literal "" to "" MemberReference toFile Literal "" due to "" MethodInvocation ioe getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference ioe End End MethodDeclaration /** Performs a compile using the NetRexx 1.1.x compiler  */ Modifier private doNetRexxCompile BuildException StatementExpression MethodInvocation Literal ""Using NetRexx compiler"" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType String VariableDeclarator classpath MethodInvocation getCompileClasspath LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator compileOptions ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType String VariableDeclarator compileOptionsArray MethodInvocation getCompileOptionsAsArray LocalVariableDeclaration ReferenceType String VariableDeclarator fileListArray ArrayCreator ReferenceType String MethodInvocation compileList size LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation compileList elements LocalVariableDeclaration BasicType int VariableDeclarator j Literal 0 WhileStatement MethodInvocation e hasMoreElements BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j fileListArray Cast ReferenceType String MethodInvocation e nextElement = StatementExpression MemberReference ++ j End LocalVariableDeclaration ReferenceType String VariableDeclarator compileArgs ArrayCreator ReferenceType String BinaryOperation + MemberReference compileOptionsArray length MemberReference fileListArray length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference compileOptionsArray length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i compileArgs MemberReference ArraySelector MemberReference i compileOptionsArray = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fileListArray length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference i MemberReference compileOptionsArray length compileArgs MemberReference ArraySelector MemberReference i fileListArray = End StatementExpression MethodInvocation compileOptions Literal ""Compilation args: "" append ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference compileOptionsArray length MemberReference ++ i BlockStatement StatementExpression MethodInvocation compileOptions MemberReference ArraySelector MemberReference i compileOptionsArray append StatementExpression MethodInvocation compileOptions Literal "" "" append End StatementExpression MethodInvocation MethodInvocation compileOptions toString MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType String VariableDeclarator eol MethodInvocation System Literal ""line.separator"" getProperty LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator niceSourceList ClassCreator ReferenceType StringBuffer BinaryOperation + Literal ""Files to be compiled:"" MemberReference eol ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation compileList size MemberReference ++ i BlockStatement StatementExpression MethodInvocation niceSourceList Literal ""    "" append StatementExpression MethodInvocation niceSourceList MethodInvocation compileList MethodInvocation toString MemberReference i elementAt append StatementExpression MethodInvocation niceSourceList MemberReference eol append End StatementExpression MethodInvocation MethodInvocation niceSourceList toString MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType String VariableDeclarator currentClassPath MethodInvocation System Literal ""java.class.path"" getProperty LocalVariableDeclaration ReferenceType Properties VariableDeclarator currentProperties MethodInvocation System getProperties StatementExpression MethodInvocation currentProperties Literal ""java.class.path"" MemberReference classpath put TryStatement LocalVariableDeclaration ReferenceType StringWriter VariableDeclarator out ClassCreator ReferenceType StringWriter LocalVariableDeclaration BasicType int VariableDeclarator rc MethodInvocation COM.ibm.netrexx.process.NetRexxC ClassCreator ReferenceType Rexx MemberReference compileArgs ClassCreator ReferenceType PrintWriter MemberReference out main LocalVariableDeclaration ReferenceType String VariableDeclarator sdir MethodInvocation srcDir getAbsolutePath LocalVariableDeclaration ReferenceType String VariableDeclarator ddir MethodInvocation destDir getAbsolutePath LocalVariableDeclaration BasicType boolean VariableDeclarator doReplace MethodInvocation ! sdir MemberReference ddir equals LocalVariableDeclaration BasicType int VariableDeclarator dlen MethodInvocation ddir length LocalVariableDeclaration ReferenceType String VariableDeclarator l LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator in ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType StringReader MethodInvocation out toString StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""replacing destdir '"" MemberReference ddir Literal ""' through sourcedir '"" MemberReference sdir Literal ""'"" MemberReference Project MSG_VERBOSE log WhileStatement BinaryOperation != Assignment MemberReference l MethodInvocation in readLine = Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator idx WhileStatement BinaryOperation && MemberReference doReplace BinaryOperation != Assignment MemberReference idx MethodInvocation l MemberReference ddir indexOf = Literal - 1 BlockStatement StatementExpression Assignment MemberReference l ClassCreator MethodInvocation MemberReference idx BinaryOperation + MemberReference idx MemberReference dlen MemberReference sdir replace MethodInvocation toString ReferenceType StringBuffer MemberReference l = End IfStatement BinaryOperation && MemberReference suppressMethodArgumentNotUsed BinaryOperation != MethodInvocation l MemberReference MSG_METHOD_ARGUMENT_NOT_USED indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference l MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation && MemberReference suppressPrivatePropertyNotUsed BinaryOperation != MethodInvocation l MemberReference MSG_PRIVATE_PROPERTY_NOT_USED indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference l MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation && MemberReference suppressVariableNotUsed BinaryOperation != MethodInvocation l MemberReference MSG_VARIABLE_NOT_USED indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference l MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation && MemberReference suppressExceptionNotSignalled BinaryOperation != MethodInvocation l MemberReference MSG_EXCEPTION_NOT_SIGNALLED indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference l MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation && MemberReference suppressDeprecation BinaryOperation != MethodInvocation l MemberReference MSG_DEPRECATION indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference l MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation != MethodInvocation l Literal ""Error:"" indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference l MemberReference Project MSG_ERR log IfStatement BinaryOperation != MethodInvocation l Literal ""Warning:"" indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation MemberReference l MemberReference Project MSG_WARN log BlockStatement StatementExpression MethodInvocation MemberReference l MemberReference Project MSG_INFO log End End End End End End End End IfStatement BinaryOperation > MemberReference rc Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Compile failed, messages should "" Literal ""have been provided."" End CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Unexpected IOException while "" Literal ""playing with Strings"" MemberReference ioe StatementExpression Assignment MemberReference currentProperties MethodInvocation System getProperties = StatementExpression MethodInvocation currentProperties Literal ""java.class.path"" MemberReference currentClassPath put MethodDeclaration /** Builds the compilation classpath.  */ Modifier private ReferenceType String getCompileClasspath LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator classpath ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation classpath MethodInvocation destDir getAbsolutePath append IfStatement BinaryOperation != This MemberReference classpath Literal null BlockStatement StatementExpression MethodInvocation MemberReference classpath This MemberReference classpath addExistingToClasspath End ReturnStatement MethodInvocation classpath toString MethodDeclaration /** This  */ Modifier private ReferenceType String getCompileOptionsAsArray LocalVariableDeclaration ReferenceType Vector VariableDeclarator options ClassCreator ReferenceType Vector StatementExpression MethodInvocation options TernaryExpression MemberReference binary Literal ""-binary"" Literal ""-nobinary"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference comments Literal ""-comments"" Literal ""-nocomments"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference compile Literal ""-compile"" Literal ""-nocompile"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference compact Literal ""-compact"" Literal ""-nocompact"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference console Literal ""-console"" Literal ""-noconsole"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference crossref Literal ""-crossref"" Literal ""-nocrossref"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference decimal Literal ""-decimal"" Literal ""-nodecimal"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference diag Literal ""-diag"" Literal ""-nodiag"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference explicit Literal ""-explicit"" Literal ""-noexplicit"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference format Literal ""-format"" Literal ""-noformat"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference keep Literal ""-keep"" Literal ""-nokeep"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference logo Literal ""-logo"" Literal ""-nologo"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference replace Literal ""-replace"" Literal ""-noreplace"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference savelog Literal ""-savelog"" Literal ""-nosavelog"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference sourcedir Literal ""-sourcedir"" Literal ""-nosourcedir"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference strictargs Literal ""-strictargs"" Literal ""-nostrictargs"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference strictassign Literal ""-strictassign"" Literal ""-nostrictassign"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference strictcase Literal ""-strictcase"" Literal ""-nostrictcase"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference strictimport Literal ""-strictimport"" Literal ""-nostrictimport"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference strictprops Literal ""-strictprops"" Literal ""-nostrictprops"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference strictsignal Literal ""-strictsignal"" Literal ""-nostrictsignal"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference symbols Literal ""-symbols"" Literal ""-nosymbols"" addElement StatementExpression MethodInvocation options TernaryExpression MemberReference time Literal ""-time"" Literal ""-notime"" addElement StatementExpression MethodInvocation options BinaryOperation + Literal ""-"" MemberReference trace addElement StatementExpression MethodInvocation options TernaryExpression MemberReference utf8 Literal ""-utf8"" Literal ""-noutf8"" addElement StatementExpression MethodInvocation options BinaryOperation + Literal ""-"" MemberReference verbose addElement LocalVariableDeclaration ReferenceType String VariableDeclarator results ArrayCreator ReferenceType String MethodInvocation options size StatementExpression MethodInvocation options MemberReference results copyInto ReturnStatement MemberReference results MethodDeclaration /**
     * Takes a classpath-like string, and adds each element of this string to
     * a new classpath, if the components exist. Components that don't exist,
     * aren't added. We do this, because jikes issues warnings for
     * non-existant files/dirs in his classpath, and these warnings are pretty
     * annoying.
     *
     * @param target - target classpath
     * @param source - source classpath to get file objects.
     */ Modifier private addExistingToClasspath FormalParameter ReferenceType StringBuffer target FormalParameter ReferenceType String source LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference source MethodInvocation System Literal ""path.separator"" getProperty Literal false WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f MethodInvocation MethodInvocation MethodInvocation tok nextToken resolveFile getProject IfStatement MethodInvocation f exists BlockStatement StatementExpression MethodInvocation target MemberReference File pathSeparator append StatementExpression MethodInvocation target MethodInvocation f getAbsolutePath append BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Dropping from classpath: "" MethodInvocation f getAbsolutePath MemberReference Project MSG_VERBOSE log End End ClassDeclaration Modifier public static TraceAttr MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""trace"" Literal ""trace1"" Literal ""trace2"" Literal ""notrace"" ReferenceType EnumeratedAttribute ClassDeclaration Modifier public static VerboseAttr MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""verbose"" Literal ""verbose0"" Literal ""verbose1"" Literal ""verbose2"" Literal ""verbose3"" Literal ""verbose4"" Literal ""verbose5"" Literal ""noverbose"" ReferenceType EnumeratedAttribute ReferenceType MatchingTask",0
231,231,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.regexp Import java.util.Vector Import org.apache.oro.text.regex.MatchResult Import org.apache.oro.text.regex.Pattern Import org.apache.oro.text.regex.Perl5Compiler Import org.apache.oro.text.regex.Perl5Matcher Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Implementation of RegexpMatcher for Jakarta-ORO.
 *
 */ JakartaOroMatcher FieldDeclaration Modifier private ReferenceType String VariableDeclarator pattern FieldDeclaration Modifier final protected ReferenceType Perl5Compiler VariableDeclarator compiler ClassCreator ReferenceType Perl5Compiler FieldDeclaration Modifier final protected ReferenceType Perl5Matcher VariableDeclarator matcher ClassCreator ReferenceType Perl5Matcher ConstructorDeclaration Modifier public JakartaOroMatcher MethodDeclaration /**
     * Set the regexp pattern from the String description.
     */ Modifier public setPattern FormalParameter ReferenceType String pattern StatementExpression Assignment This MemberReference pattern MemberReference pattern = MethodDeclaration /**
     * Get a String representation of the regexp pattern
     */ Modifier public ReferenceType String getPattern ReturnStatement This MemberReference pattern MethodDeclaration /**
     * Get a compiled representation of the regexp pattern
     */ Modifier protected ReferenceType Pattern getCompiledPattern FormalParameter BasicType int options BuildException TryStatement LocalVariableDeclaration ReferenceType Pattern VariableDeclarator p MethodInvocation compiler MemberReference pattern MethodInvocation MemberReference options getCompilerOptions compile ReturnStatement MemberReference p CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * Does the given argument match the pattern?
     */ Modifier public BasicType boolean matches FormalParameter ReferenceType String argument BuildException ReturnStatement MethodInvocation MemberReference argument MemberReference MATCH_DEFAULT matches MethodDeclaration /**
     * Does the given argument match the pattern?
     */ Modifier public BasicType boolean matches FormalParameter ReferenceType String input FormalParameter BasicType int options BuildException LocalVariableDeclaration ReferenceType Pattern VariableDeclarator p MethodInvocation MemberReference options getCompiledPattern ReturnStatement MethodInvocation matcher MemberReference input MemberReference p contains MethodDeclaration /**
     * Returns a Vector of matched groups found in the argument.
     *
     * <p>Group 0 will be the full match, the rest are the
     * parenthesized subexpressions</p>.
     */ Modifier public ReferenceType Vector getGroups FormalParameter ReferenceType String argument BuildException ReturnStatement MethodInvocation MemberReference argument MemberReference MATCH_DEFAULT getGroups MethodDeclaration /**
     * Returns a Vector of matched groups found in the argument.
     *
     * <p>Group 0 will be the full match, the rest are the
     * parenthesized subexpressions</p>.
     */ Modifier public ReferenceType Vector getGroups FormalParameter ReferenceType String input FormalParameter BasicType int options BuildException IfStatement MethodInvocation ! MemberReference input MemberReference options matches BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType Vector VariableDeclarator v ClassCreator ReferenceType Vector LocalVariableDeclaration ReferenceType MatchResult VariableDeclarator mr MethodInvocation matcher getMatch LocalVariableDeclaration BasicType int VariableDeclarator cnt MethodInvocation mr groups ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference cnt MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator match MethodInvocation mr MemberReference i group IfStatement BinaryOperation == MemberReference match Literal null BlockStatement StatementExpression Assignment MemberReference match Literal """" = End StatementExpression MethodInvocation v MemberReference match addElement End ReturnStatement MemberReference v MethodDeclaration Modifier protected BasicType int getCompilerOptions FormalParameter BasicType int options LocalVariableDeclaration BasicType int VariableDeclarator cOptions MemberReference Perl5Compiler DEFAULT_MASK IfStatement MethodInvocation RegexpUtil MemberReference options MemberReference MATCH_CASE_INSENSITIVE hasFlag BlockStatement StatementExpression Assignment MemberReference cOptions MemberReference Perl5Compiler CASE_INSENSITIVE_MASK |= End IfStatement MethodInvocation RegexpUtil MemberReference options MemberReference MATCH_MULTILINE hasFlag BlockStatement StatementExpression Assignment MemberReference cOptions MemberReference Perl5Compiler MULTILINE_MASK |= End IfStatement MethodInvocation RegexpUtil MemberReference options MemberReference MATCH_SINGLELINE hasFlag BlockStatement StatementExpression Assignment MemberReference cOptions MemberReference Perl5Compiler SINGLELINE_MASK |= End ReturnStatement MemberReference cOptions ReferenceType RegexpMatcher",0
137,137,"CompilationUnit PackageDeclaration org.apache.tools.tar Import java.io.InputStream Import java.io.OutputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * The TarBuffer class implements the tar archive concept
 * of a buffered input stream. This concept goes back to the
 * days of blocked tape drives and special io devices. In the
 * Java universe, the only real function that this class
 * performs is to ensure that files have the correct ""block""
 * size, or other tars will complain.
 * <p>
 * You should never have a need to access this class directly.
 * TarBuffers are created by Tar IO Streams.
 *
 */ TarBuffer FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_RCDSIZE Literal 512 FieldDeclaration Modifier public final static BasicType int VariableDeclarator DEFAULT_BLKSIZE BinaryOperation * MemberReference DEFAULT_RCDSIZE Literal 20 FieldDeclaration Modifier private ReferenceType InputStream VariableDeclarator inStream FieldDeclaration Modifier private ReferenceType OutputStream VariableDeclarator outStream FieldDeclaration Modifier private BasicType byte VariableDeclarator blockBuffer FieldDeclaration Modifier private BasicType int VariableDeclarator currBlkIdx FieldDeclaration Modifier private BasicType int VariableDeclarator currRecIdx FieldDeclaration Modifier private BasicType int VariableDeclarator blockSize FieldDeclaration Modifier private BasicType int VariableDeclarator recordSize FieldDeclaration Modifier private BasicType int VariableDeclarator recsPerBlock FieldDeclaration Modifier private BasicType boolean VariableDeclarator debug ConstructorDeclaration Modifier public TarBuffer FormalParameter ReferenceType InputStream inStream StatementExpression ExplicitConstructorInvocation MemberReference inStream MemberReference TarBuffer DEFAULT_BLKSIZE ConstructorDeclaration Modifier public TarBuffer FormalParameter ReferenceType InputStream inStream FormalParameter BasicType int blockSize StatementExpression ExplicitConstructorInvocation MemberReference inStream MemberReference blockSize MemberReference TarBuffer DEFAULT_RCDSIZE ConstructorDeclaration Modifier public TarBuffer FormalParameter ReferenceType InputStream inStream FormalParameter BasicType int blockSize FormalParameter BasicType int recordSize StatementExpression Assignment This MemberReference inStream MemberReference inStream = StatementExpression Assignment This MemberReference outStream Literal null = StatementExpression This MethodInvocation MemberReference blockSize MemberReference recordSize initialize ConstructorDeclaration Modifier public TarBuffer FormalParameter ReferenceType OutputStream outStream StatementExpression ExplicitConstructorInvocation MemberReference outStream MemberReference TarBuffer DEFAULT_BLKSIZE ConstructorDeclaration Modifier public TarBuffer FormalParameter ReferenceType OutputStream outStream FormalParameter BasicType int blockSize StatementExpression ExplicitConstructorInvocation MemberReference outStream MemberReference blockSize MemberReference TarBuffer DEFAULT_RCDSIZE ConstructorDeclaration Modifier public TarBuffer FormalParameter ReferenceType OutputStream outStream FormalParameter BasicType int blockSize FormalParameter BasicType int recordSize StatementExpression Assignment This MemberReference inStream Literal null = StatementExpression Assignment This MemberReference outStream MemberReference outStream = StatementExpression This MethodInvocation MemberReference blockSize MemberReference recordSize initialize MethodDeclaration /**
     * Initialization common to all constructors.
     */ Modifier private initialize FormalParameter BasicType int blockSize FormalParameter BasicType int recordSize StatementExpression Assignment This MemberReference debug Literal false = StatementExpression Assignment This MemberReference blockSize MemberReference blockSize = StatementExpression Assignment This MemberReference recordSize MemberReference recordSize = StatementExpression Assignment This MemberReference recsPerBlock BinaryOperation / This MemberReference blockSize This MemberReference recordSize = StatementExpression Assignment This MemberReference blockBuffer ArrayCreator BasicType byte This MemberReference blockSize = IfStatement BinaryOperation != This MemberReference inStream Literal null BlockStatement StatementExpression Assignment This MemberReference currBlkIdx Literal - 1 = StatementExpression Assignment This MemberReference currRecIdx This MemberReference recsPerBlock = BlockStatement StatementExpression Assignment This MemberReference currBlkIdx Literal 0 = StatementExpression Assignment This MemberReference currRecIdx Literal 0 = End MethodDeclaration /**
     * Get the TAR Buffer's block size. Blocks consist of multiple records.
     */ Modifier public BasicType int getBlockSize ReturnStatement This MemberReference blockSize MethodDeclaration /**
     * Get the TAR Buffer's record size.
     */ Modifier public BasicType int getRecordSize ReturnStatement This MemberReference recordSize MethodDeclaration /**
     * Set the debugging flag for the buffer.
     *
     * @param debug If true, print debugging output.
     */ Modifier public setDebug FormalParameter BasicType boolean debug StatementExpression Assignment This MemberReference debug MemberReference debug = MethodDeclaration /**
     * Determine if an archive record indicate End of Archive. End of
     * archive is indicated by a record that consists entirely of null bytes.
     *
     * @param record The record data to check.
     */ Modifier public BasicType boolean isEOFRecord FormalParameter BasicType byte record ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 VariableDeclarator sz This MethodInvocation getRecordSize BinaryOperation < MemberReference i MemberReference sz MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i record Literal 0 BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration /**
     * Skip over a record on the input stream.
     */ Modifier public skipRecord IOException IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + BinaryOperation + BinaryOperation + Literal ""SkipRecord: recIdx = "" This MemberReference currRecIdx Literal "" blkIdx = "" This MemberReference currBlkIdx println End IfStatement BinaryOperation == This MemberReference inStream Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""reading (via skip) from an output buffer"" End IfStatement BinaryOperation >= This MemberReference currRecIdx This MemberReference recsPerBlock BlockStatement IfStatement This ! MethodInvocation readBlock BlockStatement ReturnStatement End End StatementExpression This ++ MemberReference currRecIdx MethodDeclaration /**
     * Read a record from the input stream and return the data.
     *
     * @return The record data.
     */ Modifier public BasicType byte readRecord IOException IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + BinaryOperation + BinaryOperation + Literal ""ReadRecord: recIdx = "" This MemberReference currRecIdx Literal "" blkIdx = "" This MemberReference currBlkIdx println End IfStatement BinaryOperation == This MemberReference inStream Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""reading from an output buffer"" End IfStatement BinaryOperation >= This MemberReference currRecIdx This MemberReference recsPerBlock BlockStatement IfStatement This ! MethodInvocation readBlock BlockStatement ReturnStatement Literal null End End LocalVariableDeclaration BasicType byte VariableDeclarator result ArrayCreator BasicType byte This MemberReference recordSize StatementExpression MethodInvocation System This MemberReference blockBuffer BinaryOperation * This MemberReference currRecIdx This MemberReference recordSize MemberReference result Literal 0 This MemberReference recordSize arraycopy StatementExpression This ++ MemberReference currRecIdx ReturnStatement MemberReference result MethodDeclaration /**
     * @return false if End-Of-File, else true
     */ Modifier private BasicType boolean readBlock IOException IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + Literal ""ReadBlock: blkIdx = "" This MemberReference currBlkIdx println End IfStatement BinaryOperation == This MemberReference inStream Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""reading from an output buffer"" End StatementExpression Assignment This MemberReference currRecIdx Literal 0 = LocalVariableDeclaration BasicType int VariableDeclarator offset Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator bytesNeeded This MemberReference blockSize WhileStatement BinaryOperation > MemberReference bytesNeeded Literal 0 BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator numBytes This MemberReference inStream MethodInvocation This MemberReference blockBuffer MemberReference offset MemberReference bytesNeeded read IfStatement BinaryOperation == MemberReference numBytes Literal - 1 BlockStatement BreakStatement End StatementExpression Assignment MemberReference offset MemberReference numBytes += StatementExpression Assignment MemberReference bytesNeeded MemberReference numBytes -= IfStatement BinaryOperation != MemberReference numBytes This MemberReference blockSize BlockStatement IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""ReadBlock: INCOMPLETE READ "" MemberReference numBytes Literal "" of "" This MemberReference blockSize Literal "" bytes read."" println End End End StatementExpression This ++ MemberReference currBlkIdx ReturnStatement Literal true MethodDeclaration /**
     * Get the current block number, zero based.
     *
     * @return The current zero based block number.
     */ Modifier public BasicType int getCurrentBlockNum ReturnStatement This MemberReference currBlkIdx MethodDeclaration /**
     * Get the current record number, within the current block, zero based.
     * Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.
     *
     * @return The current zero based record number.
     */ Modifier public BasicType int getCurrentRecordNum ReturnStatement BinaryOperation - This MemberReference currRecIdx Literal 1 MethodDeclaration /**
     * Write an archive record to the archive.
     *
     * @param record The record data to write to the archive.
     */ Modifier public writeRecord FormalParameter BasicType byte record IOException IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + BinaryOperation + BinaryOperation + Literal ""WriteRecord: recIdx = "" This MemberReference currRecIdx Literal "" blkIdx = "" This MemberReference currBlkIdx println End IfStatement BinaryOperation == This MemberReference outStream Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""writing to an input buffer"" End IfStatement BinaryOperation != MemberReference record length This MemberReference recordSize BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""record to write has length '"" MemberReference record length Literal ""' which is not the record size of '"" This MemberReference recordSize Literal ""'"" End IfStatement BinaryOperation >= This MemberReference currRecIdx This MemberReference recsPerBlock BlockStatement StatementExpression This MethodInvocation writeBlock End StatementExpression MethodInvocation System MemberReference record Literal 0 This MemberReference blockBuffer BinaryOperation * This MemberReference currRecIdx This MemberReference recordSize This MemberReference recordSize arraycopy StatementExpression This ++ MemberReference currRecIdx MethodDeclaration /**
     * Write an archive record to the archive, where the record may be
     * inside of a larger array buffer. The buffer must be ""offset plus
     * record size"" long.
     *
     * @param buf The buffer containing the record data to write.
     * @param offset The offset of the record data within buf.
     */ Modifier public writeRecord FormalParameter BasicType byte buf FormalParameter BasicType int offset IOException IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + BinaryOperation + BinaryOperation + Literal ""WriteRecord: recIdx = "" This MemberReference currRecIdx Literal "" blkIdx = "" This MemberReference currBlkIdx println End IfStatement BinaryOperation == This MemberReference outStream Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""writing to an input buffer"" End IfStatement BinaryOperation > BinaryOperation + MemberReference offset This MemberReference recordSize MemberReference buf length BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""record has length '"" MemberReference buf length Literal ""' with offset '"" MemberReference offset Literal ""' which is less than the record size of '"" This MemberReference recordSize Literal ""'"" End IfStatement BinaryOperation >= This MemberReference currRecIdx This MemberReference recsPerBlock BlockStatement StatementExpression This MethodInvocation writeBlock End StatementExpression MethodInvocation System MemberReference buf MemberReference offset This MemberReference blockBuffer BinaryOperation * This MemberReference currRecIdx This MemberReference recordSize This MemberReference recordSize arraycopy StatementExpression This ++ MemberReference currRecIdx MethodDeclaration /**
     * Write a TarBuffer block to the archive.
     */ Modifier private writeBlock IOException IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err BinaryOperation + Literal ""WriteBlock: blkIdx = "" This MemberReference currBlkIdx println End IfStatement BinaryOperation == This MemberReference outStream Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""writing to an input buffer"" End StatementExpression This MemberReference outStream MethodInvocation This MemberReference blockBuffer Literal 0 This MemberReference blockSize write StatementExpression This MemberReference outStream MethodInvocation flush StatementExpression Assignment This MemberReference currRecIdx Literal 0 = StatementExpression This ++ MemberReference currBlkIdx MethodDeclaration /**
     * Flush the current data block if it has any data in it.
     */ Modifier private flushBlock IOException IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err Literal ""TarBuffer.flushBlock() called."" println End IfStatement BinaryOperation == This MemberReference outStream Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IOException Literal ""writing to an input buffer"" End IfStatement BinaryOperation > This MemberReference currRecIdx Literal 0 BlockStatement StatementExpression This MethodInvocation writeBlock End MethodDeclaration /**
     * Close the TarBuffer. If this is an output buffer, also flush the
     * current block before closing.
     */ Modifier public close IOException IfStatement This MemberReference debug BlockStatement StatementExpression MethodInvocation System.err Literal ""TarBuffer.closeBuffer()."" println End IfStatement BinaryOperation != This MemberReference outStream Literal null BlockStatement StatementExpression This MethodInvocation flushBlock IfStatement BinaryOperation && BinaryOperation != This MemberReference outStream MemberReference System out BinaryOperation != This MemberReference outStream MemberReference System err BlockStatement StatementExpression This MemberReference outStream MethodInvocation close StatementExpression Assignment This MemberReference outStream Literal null = End IfStatement BinaryOperation != This MemberReference inStream Literal null BlockStatement IfStatement BinaryOperation != This MemberReference inStream MemberReference System in BlockStatement StatementExpression This MemberReference inStream MethodInvocation close StatementExpression Assignment This MemberReference inStream Literal null = End End End",1
448,448,,0
608,608,,0
330,330,"CompilationUnit PackageDeclaration org.apache.tools.ant.util ClassDeclaration Modifier public /**
 * Implementation of FileNameMapper that always returns the source file name.
 *
 * <p>This is the default FileNameMapper for the copy and move
 * tasks.</p>
 *
 */ IdentityMapper MethodDeclaration /**
     * Ignored.
     */ Modifier public setFrom FormalParameter ReferenceType String from MethodDeclaration /**
     * Ignored.
     */ Modifier public setTo FormalParameter ReferenceType String to MethodDeclaration /**
     * Returns an one-element array containing the source file name.
     */ Modifier public ReferenceType String mapFileName FormalParameter ReferenceType String sourceFileName ReturnStatement ArrayCreator ReferenceType String ArrayInitializer MemberReference sourceFileName ReferenceType FileNameMapper",0
362,362,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStream Import java.net.URL Import java.util.Enumeration Import java.util.Properties Import java.util.Stack Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.ProjectHelper Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference ClassDeclaration Modifier public /**
 * Sets a property by name, or set of properties (from file or
 * resource) in the project.  </p>
 * Properties are immutable: whoever sets a property first freezes it for the
 * rest of the build; they are most definitely not variable.
 * <p>There are five ways to set properties:</p>
 * <ul>
 *   <li>By supplying both the <i>name</i> and <i>value</i> attribute.</li>
 *   <li>By supplying both the <i>name</i> and <i>refid</i> attribute.</li>
 *   <li>By setting the <i>file</i> attribute with the filename of the property
 *     file to load. This property file has the format as defined by the file used
 *     in the class java.util.Properties.</li>
 *   <li>By setting the <i>resource</i> attribute with the resource name of the
 *     property file to load. This property file has the format as defined by the
 *     file used in the class java.util.Properties.</li>
 *   <li>By setting the <i>environment</i> attribute with a prefix to use.
 *     Properties will be defined for every environment variable by
 *     prefixing the supplied name and a period to the name of the variable.</li>
 * </ul>
 * <p>Although combinations of these ways are possible, only one should be used
 * at a time. Problems might occur with the order in which properties are set, for
 * instance.</p>
 * <p>The value part of the properties being set, might contain references to other
 * properties. These references are resolved at the time these properties are set.
 * This also holds for properties loaded from a property file.</p>
 * Properties are case sensitive.
 *
 * @since Ant 1.1
 *
 * @ant.attribute.group name=""name"" description=""One of these, when using the name attribute""
 * @ant.attribute.group name=""noname"" description=""One of these, when not using the name attribute""
 */ Property FieldDeclaration Modifier protected ReferenceType String VariableDeclarator name FieldDeclaration Modifier protected ReferenceType String VariableDeclarator value FieldDeclaration Modifier protected ReferenceType File VariableDeclarator file FieldDeclaration Modifier protected ReferenceType URL VariableDeclarator url FieldDeclaration Modifier protected ReferenceType String VariableDeclarator resource FieldDeclaration Modifier protected ReferenceType Path VariableDeclarator classpath FieldDeclaration Modifier protected ReferenceType String VariableDeclarator env FieldDeclaration Modifier protected ReferenceType Reference VariableDeclarator ref FieldDeclaration Modifier protected ReferenceType String VariableDeclarator prefix FieldDeclaration Modifier private ReferenceType Project VariableDeclarator fallback FieldDeclaration Modifier protected BasicType boolean VariableDeclarator userProperty ConstructorDeclaration Modifier public Property StatementExpression ExplicitConstructorInvocation Literal false ConstructorDeclaration Modifier protected /**
     * @since Ant 1.5
     */ Property FormalParameter BasicType boolean userProperty StatementExpression ExplicitConstructorInvocation MemberReference userProperty Literal null ConstructorDeclaration Modifier protected /**
     * @since Ant 1.5
     */ Property FormalParameter BasicType boolean userProperty FormalParameter ReferenceType Project fallback StatementExpression Assignment This MemberReference userProperty MemberReference userProperty = StatementExpression Assignment This MemberReference fallback MemberReference fallback = MethodDeclaration /**
     * The name of the property to set.
     * @param name property name
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * Sets the property to the absolute filename of the
     * given file. If the value of this attribute is an absolute path, it
     * is left unchanged (with / and \ characters converted to the
     * current platforms conventions). Otherwise it is taken as a path
     * relative to the project's basedir and expanded.
     * @param location path to set
     *
     * @ant.attribute group=""name""
     */ Modifier public setLocation FormalParameter ReferenceType File location StatementExpression MethodInvocation MethodInvocation location getAbsolutePath setValue MethodDeclaration /**
     * The value of the property.
     * @param value value to assign
     *
     * @ant.attribute group=""name""
     */ Modifier public setValue FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration Modifier public ReferenceType String getValue ReturnStatement MemberReference value MethodDeclaration /**
     * Filename of a property file to load.
     * @param file filename
     *
     * @ant.attribute group=""noname""
     */ Modifier public setFile FormalParameter ReferenceType File file StatementExpression Assignment This MemberReference file MemberReference file = MethodDeclaration Modifier public ReferenceType File getFile ReturnStatement MemberReference file MethodDeclaration /**
     * The url from which to load properties.
     * @param url url string
     *
     * @ant.attribute group=""noname""
     */ Modifier public setUrl FormalParameter ReferenceType URL url StatementExpression Assignment This MemberReference url MemberReference url = MethodDeclaration Modifier public ReferenceType URL getUrl ReturnStatement MemberReference url MethodDeclaration /**
     * Prefix to apply to properties loaded using <code>file</code>
     * or <code>resource</code>.
     * A ""."" is appended to the prefix if not specified.
     * @param prefix prefix string
     * @since Ant 1.5
     */ Modifier public setPrefix FormalParameter ReferenceType String prefix StatementExpression Assignment This MemberReference prefix MemberReference prefix = IfStatement MethodInvocation ! prefix Literal ""."" endsWith BlockStatement StatementExpression Assignment This MemberReference prefix Literal ""."" += End MethodDeclaration /**
     * @since Ant 1.5
     */ Modifier public ReferenceType String getPrefix ReturnStatement MemberReference prefix MethodDeclaration /**
     * Sets a reference to an Ant datatype
     * declared elsewhere.
     * Only yields reasonable results for references
     * PATH like structures or properties.
     * @param ref reference
     *
     * @ant.attribute group=""name""
     */ Modifier public setRefid FormalParameter ReferenceType Reference ref StatementExpression Assignment This MemberReference ref MemberReference ref = MethodDeclaration Modifier public ReferenceType Reference getRefid ReturnStatement MemberReference ref MethodDeclaration /**
     * The resource name of a property file to load
     * @param resource resource on classpath
     *
     * @ant.attribute group=""noname""
     */ Modifier public setResource FormalParameter ReferenceType String resource StatementExpression Assignment This MemberReference resource MemberReference resource = MethodDeclaration Modifier public ReferenceType String getResource ReturnStatement MemberReference resource MethodDeclaration /**
     * Prefix to use when retrieving environment variables.
     * Thus if you specify environment=&quot;myenv&quot;
     * you will be able to access OS-specific
     * environment variables via property names &quot;myenv.PATH&quot; or
     * &quot;myenv.TERM&quot;.
     * <p>
     * Note that if you supply a property name with a final
     * &quot;.&quot; it will not be doubled. ie environment=&quot;myenv.&quot; will still
     * allow access of environment variables through &quot;myenv.PATH&quot; and
     * &quot;myenv.TERM&quot;. This functionality is currently only implemented
     * on select platforms. Feel free to send patches to increase the number of platforms
     * this functionality is supported on ;).<br>
     * Note also that properties are case sensitive, even if the
     * environment variables on your operating system are not, e.g. it
     * will be ${env.Path} not ${env.PATH} on Windows 2000.
     * @param env prefix
     *
     * @ant.attribute group=""noname""
     */ Modifier public setEnvironment FormalParameter ReferenceType String env StatementExpression Assignment This MemberReference env MemberReference env = MethodDeclaration /**
     * @since Ant 1.5
     */ Modifier public ReferenceType String getEnvironment ReturnStatement MemberReference env MethodDeclaration /**
     * The classpath to use when looking up a resource.
     * @param classpath to add to any existing classpath
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath MemberReference classpath = BlockStatement StatementExpression This MemberReference classpath MethodInvocation MemberReference classpath append End MethodDeclaration /**
     * The classpath to use when looking up a resource.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement This MemberReference classpath MethodInvocation createPath MethodDeclaration /**
     * the classpath to use when looking up a resource,
     * given as reference to a &lt;path&gt; defined elsewhere
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration /**
     * @since Ant 1.5
     */ Modifier public ReferenceType Path getClasspath ReturnStatement MemberReference classpath MethodDeclaration /**
     * @deprecated This was never a supported feature and has been
     * deprecated without replacement
     * @ant.attribute ignore=""true""
     */ Modifier public setUserProperty FormalParameter BasicType boolean userProperty StatementExpression MethodInvocation BinaryOperation + Literal ""DEPRECATED: Ignoring request to set user property in Property"" Literal "" task."" MemberReference Project MSG_WARN log MethodDeclaration /**
     * get the value of this property
     * @return the current value or the empty string
     */ Modifier public ReferenceType String toString ReturnStatement TernaryExpression BinaryOperation == MemberReference value Literal null Literal """" MemberReference value MethodDeclaration /**
     * set the property in the project to the value.
     * if the task was give a file, resource or env attribute
     * here is where it is loaded
     */ Modifier public execute BuildException IfStatement BinaryOperation == MethodInvocation getProject Literal null BlockStatement ThrowStatement ClassCreator ReferenceType IllegalStateException Literal ""project has not been set"" End IfStatement BinaryOperation != MemberReference name Literal null BlockStatement IfStatement BinaryOperation && BinaryOperation == MemberReference value Literal null BinaryOperation == MemberReference ref Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You must specify value, location or "" Literal ""refid with the name attribute"" MethodInvocation getLocation End BlockStatement IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == MemberReference url Literal null BinaryOperation == MemberReference file Literal null BinaryOperation == MemberReference resource Literal null BinaryOperation == MemberReference env Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""You must specify url, file, resource or "" Literal ""environment when not using the "" Literal ""name attribute"" MethodInvocation getLocation End End IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation == MemberReference url Literal null BinaryOperation == MemberReference file Literal null BinaryOperation == MemberReference resource Literal null BinaryOperation != MemberReference prefix Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Prefix is only valid when loading from "" Literal ""a url, file or resource"" MethodInvocation getLocation End IfStatement BinaryOperation && BinaryOperation != MemberReference name Literal null BinaryOperation != MemberReference value Literal null BlockStatement StatementExpression MethodInvocation MemberReference name MemberReference value addProperty End IfStatement BinaryOperation != MemberReference file Literal null BlockStatement StatementExpression MethodInvocation MemberReference file loadFile End IfStatement BinaryOperation != MemberReference url Literal null BlockStatement StatementExpression MethodInvocation MemberReference url loadUrl End IfStatement BinaryOperation != MemberReference resource Literal null BlockStatement StatementExpression MethodInvocation MemberReference resource loadResource End IfStatement BinaryOperation != MemberReference env Literal null BlockStatement StatementExpression MethodInvocation MemberReference env loadEnvironment End IfStatement BinaryOperation && BinaryOperation != MemberReference name Literal null BinaryOperation != MemberReference ref Literal null BlockStatement TryStatement StatementExpression MethodInvocation MemberReference name MethodInvocation ref MethodInvocation toString MethodInvocation getProject getReferencedObject addProperty CatchClause CatchClauseParameter BuildException be IfStatement BinaryOperation != MemberReference fallback Literal null BlockStatement StatementExpression MethodInvocation MemberReference name MethodInvocation ref MethodInvocation toString MemberReference fallback getReferencedObject addProperty BlockStatement ThrowStatement MemberReference be End End MethodDeclaration /**
     * load properties from a url
     * @param url url to load from
     */ Modifier protected loadUrl FormalParameter ReferenceType URL url BuildException LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties StatementExpression MethodInvocation BinaryOperation + Literal ""Loading "" MemberReference url MemberReference Project MSG_VERBOSE log TryStatement LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is MethodInvocation url openStream TryStatement StatementExpression MethodInvocation props MemberReference is load IfStatement BinaryOperation != MemberReference is Literal null BlockStatement StatementExpression MethodInvocation is close End StatementExpression MethodInvocation MemberReference props addProperties CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex MethodInvocation getLocation MethodDeclaration /**
     * load properties from a file
     * @param file file to load
     */ Modifier protected loadFile FormalParameter ReferenceType File file BuildException LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties StatementExpression MethodInvocation BinaryOperation + Literal ""Loading "" MethodInvocation file getAbsolutePath MemberReference Project MSG_VERBOSE log TryStatement IfStatement MethodInvocation file exists BlockStatement LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fis ClassCreator ReferenceType FileInputStream MemberReference file TryStatement StatementExpression MethodInvocation props MemberReference fis load IfStatement BinaryOperation != MemberReference fis Literal null BlockStatement StatementExpression MethodInvocation fis close End StatementExpression MethodInvocation MemberReference props addProperties BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Unable to find property file: "" MethodInvocation file getAbsolutePath MemberReference Project MSG_VERBOSE log End CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex MethodInvocation getLocation MethodDeclaration /**
     * load properties from a resource in the current classpath
     * @param name name of resource to load
     */ Modifier protected loadResource FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties StatementExpression MethodInvocation BinaryOperation + Literal ""Resource Loading "" MemberReference name MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is Literal null TryStatement LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator cL Literal null IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference cL MethodInvocation MethodInvocation MemberReference classpath createClassLoader getProject = BlockStatement StatementExpression Assignment MemberReference cL This MethodInvocation getClass MethodInvocation getClassLoader = End IfStatement BinaryOperation == MemberReference cL Literal null BlockStatement StatementExpression Assignment MemberReference is MethodInvocation ClassLoader MemberReference name getSystemResourceAsStream = BlockStatement StatementExpression Assignment MemberReference is MethodInvocation cL MemberReference name getResourceAsStream = End IfStatement BinaryOperation != MemberReference is Literal null BlockStatement StatementExpression MethodInvocation props MemberReference is load StatementExpression MethodInvocation MemberReference props addProperties BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Unable to find resource "" MemberReference name MemberReference Project MSG_WARN log End CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex MethodInvocation getLocation IfStatement BinaryOperation != MemberReference is Literal null BlockStatement TryStatement StatementExpression MethodInvocation is close CatchClause CatchClauseParameter IOException e End MethodDeclaration /**
     * load the environment values
     * @param prefix prefix to place before them
     */ Modifier protected loadEnvironment FormalParameter ReferenceType String prefix LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties IfStatement MethodInvocation ! prefix Literal ""."" endsWith BlockStatement StatementExpression Assignment MemberReference prefix Literal ""."" += End StatementExpression MethodInvocation BinaryOperation + Literal ""Loading Environment "" MemberReference prefix MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType Vector VariableDeclarator osEnv MethodInvocation Execute getProcEnvironment ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation osEnv elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator entry Cast ReferenceType String MethodInvocation e nextElement LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation entry Literal '=' indexOf IfStatement BinaryOperation == MemberReference pos Literal - 1 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Ignoring: "" MemberReference entry MemberReference Project MSG_WARN log BlockStatement StatementExpression MethodInvocation props BinaryOperation + MemberReference prefix MethodInvocation entry Literal 0 MemberReference pos substring MethodInvocation entry BinaryOperation + MemberReference pos Literal 1 substring put End End StatementExpression MethodInvocation MemberReference props addProperties MethodDeclaration /**
     * iterate through a set of properties,
     * resolve them then assign them
     */ Modifier protected addProperties FormalParameter ReferenceType Properties props StatementExpression MethodInvocation MemberReference props resolveAllProperties LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation props keys WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation props MemberReference name getProperty LocalVariableDeclaration ReferenceType String VariableDeclarator v MethodInvocation MethodInvocation MemberReference value replaceProperties getProject IfStatement BinaryOperation != MemberReference prefix Literal null BlockStatement StatementExpression Assignment MemberReference name BinaryOperation + MemberReference prefix MemberReference name = End StatementExpression MethodInvocation MemberReference name MemberReference v addProperty End MethodDeclaration /**
     * add a name value pair to the project property set
     * @param n name of property
     * @param v value to set
     */ Modifier protected addProperty FormalParameter ReferenceType String n FormalParameter ReferenceType String v IfStatement MemberReference userProperty BlockStatement IfStatement BinaryOperation == MethodInvocation MethodInvocation MemberReference n getUserProperty getProject Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference n MemberReference v setInheritedProperty getProject BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Override ignored for "" MemberReference n MemberReference Project MSG_VERBOSE log End BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference n MemberReference v setNewProperty getProject End MethodDeclaration /**
     * resolve properties inside a properties hashtable
     * @param props properties object to resolve
     */ Modifier private resolveAllProperties FormalParameter ReferenceType Properties props BuildException ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation props keys MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation e nextElement LocalVariableDeclaration ReferenceType Stack VariableDeclarator referencesSeen ClassCreator ReferenceType Stack StatementExpression MethodInvocation MemberReference props MemberReference name MemberReference referencesSeen resolve End MethodDeclaration /**
     * Recursively expand the named property using the project's
     * reference table and the given set of properties - fail if a
     * circular definition is detected.
     *
     * @param props properties object to resolve
     * @param name of the property to resolve
     * @param referencesSeen stack of all property names that have
     * been tried to expand before coming here.
     */ Modifier private resolve FormalParameter ReferenceType Properties props FormalParameter ReferenceType String name FormalParameter ReferenceType Stack referencesSeen BuildException IfStatement MethodInvocation referencesSeen MemberReference name contains BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Property "" MemberReference name Literal "" was circularly "" Literal ""defined."" End LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation props MemberReference name getProperty LocalVariableDeclaration ReferenceType Vector VariableDeclarator fragments ClassCreator ReferenceType Vector LocalVariableDeclaration ReferenceType Vector VariableDeclarator propertyRefs ClassCreator ReferenceType Vector StatementExpression MethodInvocation ProjectHelper MemberReference value MemberReference fragments MemberReference propertyRefs parsePropertyString IfStatement BinaryOperation != MethodInvocation propertyRefs size Literal 0 BlockStatement StatementExpression MethodInvocation referencesSeen MemberReference name push LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator i MethodInvocation fragments elements LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator j MethodInvocation propertyRefs elements WhileStatement MethodInvocation i hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fragment Cast ReferenceType String MethodInvocation i nextElement IfStatement BinaryOperation == MemberReference fragment Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator propertyName Cast ReferenceType String MethodInvocation j nextElement StatementExpression Assignment MemberReference fragment MethodInvocation MethodInvocation MemberReference propertyName getProperty getProject = IfStatement BinaryOperation == MemberReference fragment Literal null BlockStatement IfStatement MethodInvocation props MemberReference propertyName containsKey BlockStatement StatementExpression MethodInvocation MemberReference props MemberReference propertyName MemberReference referencesSeen resolve StatementExpression Assignment MemberReference fragment MethodInvocation props MemberReference propertyName getProperty = BlockStatement StatementExpression Assignment MemberReference fragment BinaryOperation + BinaryOperation + Literal ""${"" MemberReference propertyName Literal ""}"" = End End End StatementExpression MethodInvocation sb MemberReference fragment append End StatementExpression Assignment MemberReference value MethodInvocation sb toString = StatementExpression MethodInvocation props MemberReference name MemberReference value put StatementExpression MethodInvocation referencesSeen pop End ReferenceType Task",0
578,578,,0
282,282,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.depend Import java.io.File Import java.io.IOException Import java.util.Enumeration Import java.util.Vector Import java.util.zip.ZipFile Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public abstract /**
 * An abstract implementation of the analyzer interface providing support
 * for the bulk of interface methods.
 *
 */ AbstractAnalyzer FieldDeclaration /** Maximum number of loops for looking for indirect dependencies. */ Modifier public final static BasicType int VariableDeclarator MAX_LOOPS Literal 1000 FieldDeclaration /** The source path for the source files */ Modifier private ReferenceType Path VariableDeclarator sourcePath ClassCreator ReferenceType Path Literal null FieldDeclaration /** The classpath containg dirs and jars of class files */ Modifier private ReferenceType Path VariableDeclarator classPath ClassCreator ReferenceType Path Literal null FieldDeclaration /** The list of root classes */ Modifier private ReferenceType Vector VariableDeclarator rootClasses ClassCreator ReferenceType Vector FieldDeclaration /** true if dependencies have been determined */ Modifier private BasicType boolean VariableDeclarator determined Literal false FieldDeclaration /** the list of File objects that the root classes depend upon */ Modifier private ReferenceType Vector VariableDeclarator fileDependencies FieldDeclaration /** the list of java classes the root classes depend upon */ Modifier private ReferenceType Vector VariableDeclarator classDependencies FieldDeclaration /** true if indirect dependencies should be gathered */ Modifier private BasicType boolean VariableDeclarator closure Literal true ConstructorDeclaration Modifier protected /** Setup the analyzer */ AbstractAnalyzer StatementExpression MethodInvocation reset MethodDeclaration /**
     * Set the closure flag. If this flag is true the analyzer will traverse
     * all class relationships until it has collected the entire set of
     * direct and indirect dependencies
     *
     * @param closure true if dependencies should be traversed to determine
     *      indirect dependencies.
     */ Modifier public setClosure FormalParameter BasicType boolean closure StatementExpression Assignment This MemberReference closure MemberReference closure = MethodDeclaration /**
     * Get the list of files in the file system upon which the root classes
     * depend. The files will be either the classfiles or jar files upon
     * which the root classes depend.
     *
     * @return an enumeration of File instances.
     */ Modifier public ReferenceType Enumeration getFileDependencies IfStatement MethodInvocation ! supportsFileDependencies BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + Literal ""File dependencies are not supported "" Literal ""by this analyzer"" End IfStatement MemberReference ! determined BlockStatement StatementExpression MethodInvocation MemberReference fileDependencies MemberReference classDependencies determineDependencies End ReturnStatement MethodInvocation fileDependencies elements MethodDeclaration /**
     * Get the list of classes upon which root classes depend. This is a
     * list of Java classnames in dot notation.
     *
     * @return an enumeration of Strings, each being the name of a Java
     *      class in dot notation.
     */ Modifier public ReferenceType Enumeration getClassDependencies IfStatement MemberReference ! determined BlockStatement StatementExpression MethodInvocation MemberReference fileDependencies MemberReference classDependencies determineDependencies End ReturnStatement MethodInvocation classDependencies elements MethodDeclaration /**
     * Get the file that contains the class definition
     *
     * @param classname the name of the required class
     * @return the file instance, zip or class, containing the
     *         class or null if the class could not be found.
     * @exception IOException if the files in the classpath cannot be read.
     */ Modifier public ReferenceType File getClassContainer FormalParameter ReferenceType String classname IOException LocalVariableDeclaration ReferenceType String VariableDeclarator classLocation BinaryOperation + MethodInvocation classname Literal '.' Literal '/' replace Literal "".class"" ReturnStatement MethodInvocation MemberReference classLocation MethodInvocation classPath list getResourceContainer MethodDeclaration /**
     * Get the file that contains the class source.
     *
     * @param classname the name of the required class
     * @return the file instance, zip or java, containing the
     *         source or null if the source for the class could not be found.
     * @exception IOException if the files in the sourcepath cannot be read.
     */ Modifier public ReferenceType File getSourceContainer FormalParameter ReferenceType String classname IOException LocalVariableDeclaration ReferenceType String VariableDeclarator sourceLocation BinaryOperation + MethodInvocation classname Literal '.' Literal '/' replace Literal "".java"" ReturnStatement MethodInvocation MemberReference sourceLocation MethodInvocation sourcePath list getResourceContainer MethodDeclaration /**
     * Add a source path to the source path used by this analyzer. The
     * elements in the given path contain the source files for the classes
     * being analyzed. Not all analyzers will use this information.
     *
     * @param sourcePath The Path instance specifying the source path
     *      elements.
     */ Modifier public addSourcePath FormalParameter ReferenceType Path sourcePath IfStatement BinaryOperation == MemberReference sourcePath Literal null BlockStatement ReturnStatement End StatementExpression This MemberReference sourcePath MethodInvocation MemberReference sourcePath append StatementExpression This MemberReference sourcePath MethodInvocation MethodInvocation sourcePath getProject setProject MethodDeclaration /**
     * Add a classpath to the classpath being used by the analyzer. The
     * classpath contains the binary classfiles for the classes being
     * analyzed The elements may either be the directories or jar files.Not
     * all analyzers will use this information.
     *
     * @param classPath the Path instance specifying the classpath elements
     */ Modifier public addClassPath FormalParameter ReferenceType Path classPath IfStatement BinaryOperation == MemberReference classPath Literal null BlockStatement ReturnStatement End StatementExpression This MemberReference classPath MethodInvocation MemberReference classPath append StatementExpression This MemberReference classPath MethodInvocation MethodInvocation classPath getProject setProject MethodDeclaration /**
     * Add a root class. The root classes are used to drive the
     * determination of dependency information. The analyzer will start at
     * the root classes and add dependencies from there.
     *
     * @param className the name of the class in Java dot notation.
     */ Modifier public addRootClass FormalParameter ReferenceType String className IfStatement BinaryOperation == MemberReference className Literal null BlockStatement ReturnStatement End IfStatement MethodInvocation ! rootClasses MemberReference className contains BlockStatement StatementExpression MethodInvocation rootClasses MemberReference className addElement End MethodDeclaration /**
     * Configure an aspect of the analyzer. The set of aspects that are
     * supported is specific to each analyzer instance.
     *
     * @param name the name of the aspect being configured
     * @param info the configuration info.
     */ Modifier public config FormalParameter ReferenceType String name FormalParameter ReferenceType Object info MethodDeclaration /**
     * Reset the dependency list. This will reset the determined
     * dependencies and the also list of root classes.
     */ Modifier public reset StatementExpression MethodInvocation rootClasses removeAllElements StatementExpression Assignment MemberReference determined Literal false = StatementExpression Assignment MemberReference fileDependencies ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference classDependencies ClassCreator ReferenceType Vector = MethodDeclaration /**
     * Get an enumeration of the root classes
     *
     * @return an enumeration of Strings, each of which is a class name
     *         for a root class.
     */ Modifier protected ReferenceType Enumeration getRootClasses ReturnStatement MethodInvocation rootClasses elements MethodDeclaration /**
     * Indicate if the analyzer is required to follow
     * indirect class relationships.
     *
     * @return true if indirect relationships should be followed.
     */ Modifier protected BasicType boolean isClosureRequired ReturnStatement MemberReference closure MethodDeclaration /**
     * Determine the dependencies of the current set of root classes
     *
     * @param files a vector into which Files upon which the root classes
     *      depend should be placed.
     * @param classes a vector of Strings into which the names of classes
     *      upon which the root classes depend should be placed.
     */ Modifier protected abstract determineDependencies FormalParameter ReferenceType Vector files FormalParameter ReferenceType Vector classes MethodDeclaration /**
     * Indicate if the particular subclass supports file dependency
     * information.
     *
     * @return true if file dependencies are supported.
     */ Modifier protected abstract BasicType boolean supportsFileDependencies MethodDeclaration /**
     * Get the file that contains the resource
     *
     * @param resourceLocation the name of the required resource.
     * @param paths the paths which will be searched for the resource.
     * @return the file instance, zip or class, containing the
     *         class or null if the class could not be found.
     * @exception IOException if the files in the given paths cannot be read.
     */ Modifier private ReferenceType File getResourceContainer FormalParameter ReferenceType String resourceLocation FormalParameter ReferenceType String paths IOException ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference paths length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator element ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i paths IfStatement MethodInvocation ! element exists BlockStatement ContinueStatement End IfStatement MethodInvocation element isDirectory BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator resource ClassCreator ReferenceType File MemberReference element MemberReference resourceLocation IfStatement MethodInvocation resource exists BlockStatement ReturnStatement MemberReference resource End BlockStatement LocalVariableDeclaration ReferenceType ZipFile VariableDeclarator zipFile Literal null TryStatement StatementExpression Assignment MemberReference zipFile ClassCreator ReferenceType ZipFile MemberReference element = IfStatement BinaryOperation != MethodInvocation zipFile MemberReference resourceLocation getEntry Literal null BlockStatement ReturnStatement MemberReference element End IfStatement BinaryOperation != MemberReference zipFile Literal null BlockStatement StatementExpression MethodInvocation zipFile close End End End ReturnStatement Literal null ReferenceType DependencyAnalyzer",0
437,437,,0
413,413,,1
596,596,,0
459,459,,0
480,480,,0
11,11,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.rmic Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.taskdefs.Rmic Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.util.FileNameMapper InterfaceDeclaration Modifier public /**
 * The interface that all rmic adapters must adher to.
 *
 * <p>A rmic adapter is an adapter that interprets the rmic's
 * parameters in preperation to be passed off to the compiler this
 * adapter represents.  As all the necessary values are stored in the
 * Rmic task itself, the only thing all adapters need is the rmic
 * task, the execute command and a parameterless constructor (for
 * reflection).</p>
 *
 * @since Ant 1.4
 */ RmicAdapter MethodDeclaration /**
     * Sets the rmic attributes, which are stored in the Rmic task.
     */ setRmic FormalParameter ReferenceType Rmic attributes MethodDeclaration /**
     * Executes the task.
     *
     * @return has the compilation been successful
     */ BasicType boolean execute BuildException MethodDeclaration /**
     * Maps source class files to the files generated by this rmic
     * implementation.
     */ ReferenceType FileNameMapper getMapper MethodDeclaration /**
     * The CLASSPATH this rmic process will use.
     */ ReferenceType Path getClasspath",1
40,40,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.util.EventListener InterfaceDeclaration Modifier public /**
 * Instances of classes that implement this interface can register
 * to be notified when things happened during a build.
 *
 * @see BuildEvent
 * @see Project#addBuildListener(BuildListener)
 *
 */ BuildListener MethodDeclaration /**
     * Signals that a build has started. This event
     * is fired before any targets have started.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     */ buildStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Signals that the last target has finished. This event
     * will still be fired if an error occurred during the build.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getException()
     */ buildFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Signals that a target is starting.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getTarget()
     */ targetStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Signals that a target has finished. This event will
     * still be fired if an error occurred during the build.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getException()
     */ targetFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Signals that a task is starting.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getTask()
     */ taskStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Signals that a task has finished. This event will still
     * be fired if an error occurred during the build.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getException()
     */ taskFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     * Signals a message logging event.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getMessage()
     * @see BuildEvent#getPriority()
     */ messageLogged FormalParameter ReferenceType BuildEvent event ReferenceType EventListener",0
405,405,,0
389,389,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.depend.constantpool Import java.io.DataInputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * A NameAndType CP Info
 *
 */ NameAndTypeCPInfo ConstructorDeclaration Modifier public /** Constructor. */ NameAndTypeCPInfo StatementExpression SuperConstructorInvocation MemberReference CONSTANT_NAMEANDTYPE Literal 1 MethodDeclaration /**
     * read a constant pool entry from a class stream.
     *
     * @param cpStream the DataInputStream which contains the constant pool
     *      entry to be read.
     * @exception IOException if there is a problem reading the entry from
     *      the stream.
     */ Modifier public read FormalParameter ReferenceType DataInputStream cpStream IOException StatementExpression Assignment MemberReference nameIndex MethodInvocation cpStream readUnsignedShort = StatementExpression Assignment MemberReference descriptorIndex MethodInvocation cpStream readUnsignedShort = MethodDeclaration /**
     * Print a readable version of the constant pool entry.
     *
     * @return the string representation of this constant pool entry.
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType String VariableDeclarator value IfStatement MethodInvocation isResolved BlockStatement StatementExpression Assignment MemberReference value BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Name = "" MemberReference name Literal "", type = "" MemberReference type = BlockStatement StatementExpression Assignment MemberReference value BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Name index = "" MemberReference nameIndex Literal "", descriptor index = "" MemberReference descriptorIndex = End ReturnStatement MemberReference value MethodDeclaration /**
     * Resolve this constant pool entry with respect to its dependents in
     * the constant pool.
     *
     * @param constantPool the constant pool of which this entry is a member
     *      and against which this entry is to be resolved.
     */ Modifier public resolve FormalParameter ReferenceType ConstantPool constantPool StatementExpression Assignment MemberReference name Cast ReferenceType Utf8CPInfo MethodInvocation constantPool MemberReference nameIndex getEntry = StatementExpression Assignment MemberReference type Cast ReferenceType Utf8CPInfo MethodInvocation constantPool MemberReference descriptorIndex getEntry = StatementExpression SuperMethodInvocation MemberReference constantPool resolve MethodDeclaration /**
     * Get the name component of this entry
     *
     * @return the name of this name and type entry
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * Get the type signature of this entry
     *
     * @return the type signature of this entry
     */ Modifier public ReferenceType String getType ReturnStatement MemberReference type FieldDeclaration /** the name component of this entry */ Modifier private ReferenceType String VariableDeclarator name FieldDeclaration /** the type component of this entry */ Modifier private ReferenceType String VariableDeclarator type FieldDeclaration /**
     * the index into the constant pool at which the name component's string
     * value is stored
     */ Modifier private BasicType int VariableDeclarator nameIndex FieldDeclaration /**
     * the index into the constant pool where the type descriptor string is
     * stored.
     */ Modifier private BasicType int VariableDeclarator descriptorIndex ReferenceType ConstantPoolEntry",0
317,317,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.email Import java.io.BufferedReader Import java.io.File Import java.io.FileReader Import java.io.IOException Import java.io.OutputStreamWriter Import java.io.PrintStream Import java.io.PrintWriter Import org.apache.tools.ant.ProjectComponent ClassDeclaration Modifier public /**
 * Class representing an email message.
 *
 * @since Ant 1.5
 */ Message FieldDeclaration Modifier private ReferenceType File VariableDeclarator messageSource Literal null FieldDeclaration Modifier private ReferenceType StringBuffer VariableDeclarator buffer ClassCreator ReferenceType StringBuffer FieldDeclaration Modifier private ReferenceType String VariableDeclarator mimeType Literal ""text/plain"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator specified Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator charset Literal null ConstructorDeclaration Modifier public /** Creates a new empty message  */ Message ConstructorDeclaration Modifier public /**
     * Creates a new message based on the given string
     *
     * @param text the message
     */ Message FormalParameter ReferenceType String text StatementExpression MethodInvocation MemberReference text addText ConstructorDeclaration Modifier public /**
     * Creates a new message using the contents of the given file.
     *
     * @param file the source of the message
     */ Message FormalParameter ReferenceType File file StatementExpression Assignment MemberReference messageSource MemberReference file = MethodDeclaration /**
     * Adds a textual part of the message
     *
     * @param text some text to add
     */ Modifier public addText FormalParameter ReferenceType String text StatementExpression MethodInvocation buffer MemberReference text append MethodDeclaration /**
     * Sets the source file of the message
     *
     * @param src the source of the message
     */ Modifier public setSrc FormalParameter ReferenceType File src StatementExpression Assignment This MemberReference messageSource MemberReference src = MethodDeclaration /**
     * Sets the content type for the message
     *
     * @param mimeType a mime type e.g. ""text/plain""
     */ Modifier public setMimeType FormalParameter ReferenceType String mimeType StatementExpression Assignment This MemberReference mimeType MemberReference mimeType = StatementExpression Assignment MemberReference specified Literal true = MethodDeclaration /**
     * Returns the content type
     *
     * @return the mime type
     */ Modifier public ReferenceType String getMimeType ReturnStatement MemberReference mimeType MethodDeclaration /**
     * Prints the message onto an output stream
     *
     * @param ps The print stream to write to
     * @throws IOException if an error occurs
     */ Modifier public print FormalParameter ReferenceType PrintStream ps IOException LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator out TernaryExpression BinaryOperation != MemberReference charset Literal null ClassCreator ReferenceType PrintWriter ClassCreator ReferenceType OutputStreamWriter MemberReference ps MemberReference charset ClassCreator ReferenceType PrintWriter MemberReference ps IfStatement BinaryOperation != MemberReference messageSource Literal null BlockStatement LocalVariableDeclaration ReferenceType FileReader VariableDeclarator freader ClassCreator ReferenceType FileReader MemberReference messageSource TryStatement LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator in ClassCreator ReferenceType BufferedReader MemberReference freader LocalVariableDeclaration ReferenceType String VariableDeclarator line Literal null WhileStatement BinaryOperation != Assignment MemberReference line MethodInvocation in readLine = Literal null BlockStatement StatementExpression MethodInvocation out MethodInvocation MethodInvocation MemberReference line replaceProperties getProject println End StatementExpression MethodInvocation freader close BlockStatement StatementExpression MethodInvocation out MethodInvocation MethodInvocation MethodInvocation buffer Literal 0 substring replaceProperties getProject println End StatementExpression MethodInvocation out flush MethodDeclaration /**
     * Returns true if the mimeType has been set.
     *
     * @return false if the default value is in use
     */ Modifier public BasicType boolean isMimeTypeSpecified ReturnStatement MemberReference specified MethodDeclaration /**
     * Sets the character set of mail message.
     * Will be ignored if mimeType contains ....; Charset=... substring.
     * @since Ant 1.6
     */ Modifier public setCharset FormalParameter ReferenceType String charset StatementExpression Assignment This MemberReference charset MemberReference charset = MethodDeclaration /**
     * Returns the charset of mail message.
     *
     * @return Charset of mail message.
     * @since Ant 1.6
     */ Modifier public ReferenceType String getCharset ReturnStatement MemberReference charset ReferenceType ProjectComponent",0
640,640,,0
429,429,,0
81,81,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.sound Import java.io.File Import java.io.IOException Import javax.sound.sampled.AudioFormat Import javax.sound.sampled.AudioInputStream Import javax.sound.sampled.AudioSystem Import javax.sound.sampled.Clip Import javax.sound.sampled.DataLine Import javax.sound.sampled.Line Import javax.sound.sampled.LineEvent Import javax.sound.sampled.LineListener Import javax.sound.sampled.LineUnavailableException Import javax.sound.sampled.UnsupportedAudioFileException Import org.apache.tools.ant.BuildEvent Import org.apache.tools.ant.BuildListener Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * This class is designed to be used by any AntTask that requires audio output.
 *
 * It implements the BuildListener interface to listen for BuildEvents and could
 * be easily extended to provide audio output upon any specific build events occuring.
 *
 * I have only tested this with .WAV and .AIFF sound file formats. Both seem to work fine.
 *
 * @version $Revision$, $Date$
 */ AntSoundPlayer FieldDeclaration Modifier private ReferenceType File VariableDeclarator fileSuccess Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator loopsSuccess Literal 0 FieldDeclaration Modifier private ReferenceType Long VariableDeclarator durationSuccess Literal null FieldDeclaration Modifier private ReferenceType File VariableDeclarator fileFail Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator loopsFail Literal 0 FieldDeclaration Modifier private ReferenceType Long VariableDeclarator durationFail Literal null ConstructorDeclaration Modifier public AntSoundPlayer MethodDeclaration /**
     * @param file the location of the audio file to be played when the
     *        build is successful
     * @param loops the number of times the file should be played when
     *        the build is successful
     * @param duration the number of milliseconds the file should be
     *        played when the build is successful
     */ Modifier public addBuildSuccessfulSound FormalParameter ReferenceType File file FormalParameter BasicType int loops FormalParameter ReferenceType Long duration StatementExpression Assignment This MemberReference fileSuccess MemberReference file = StatementExpression Assignment This MemberReference loopsSuccess MemberReference loops = StatementExpression Assignment This MemberReference durationSuccess MemberReference duration = MethodDeclaration /**
     * @param fileFail the location of the audio file to be played
     *        when the build fails
     * @param loopsFail the number of times the file should be played
     *        when the build is fails
     * @param durationFail the number of milliseconds the file should be
     *        played when the build fails
     */ Modifier public addBuildFailedSound FormalParameter ReferenceType File fileFail FormalParameter BasicType int loopsFail FormalParameter ReferenceType Long durationFail StatementExpression Assignment This MemberReference fileFail MemberReference fileFail = StatementExpression Assignment This MemberReference loopsFail MemberReference loopsFail = StatementExpression Assignment This MemberReference durationFail MemberReference durationFail = MethodDeclaration /**
     * Plays the file for duration milliseconds or loops.
     */ Modifier private play FormalParameter ReferenceType Project project FormalParameter ReferenceType File file FormalParameter BasicType int loops FormalParameter ReferenceType Long duration LocalVariableDeclaration ReferenceType Clip VariableDeclarator audioClip Literal null LocalVariableDeclaration ReferenceType AudioInputStream VariableDeclarator audioInputStream Literal null TryStatement StatementExpression Assignment MemberReference audioInputStream MethodInvocation AudioSystem MemberReference file getAudioInputStream = CatchClause CatchClauseParameter UnsupportedAudioFileException uafe StatementExpression MethodInvocation project BinaryOperation + Literal ""Audio format is not yet supported: "" MethodInvocation uafe getMessage log CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation ioe printStackTrace IfStatement BinaryOperation != MemberReference audioInputStream Literal null BlockStatement LocalVariableDeclaration ReferenceType AudioFormat VariableDeclarator format MethodInvocation audioInputStream getFormat LocalVariableDeclaration ReferenceType DataLine ReferenceType Info VariableDeclarator info ClassCreator ReferenceType DataLine ReferenceType Info ClassReference ReferenceType Clip MemberReference format MemberReference AudioSystem NOT_SPECIFIED TryStatement StatementExpression Assignment MemberReference audioClip Cast ReferenceType Clip MethodInvocation AudioSystem MemberReference info getLine = StatementExpression MethodInvocation audioClip This addLineListener StatementExpression MethodInvocation audioClip MemberReference audioInputStream open CatchClause CatchClauseParameter LineUnavailableException e StatementExpression MethodInvocation project Literal ""The sound device is currently unavailable"" log ReturnStatement CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation e printStackTrace IfStatement BinaryOperation != MemberReference duration Literal null BlockStatement StatementExpression MethodInvocation MemberReference audioClip MethodInvocation duration longValue playClip BlockStatement StatementExpression MethodInvocation MemberReference audioClip MemberReference loops playClip End StatementExpression MethodInvocation audioClip drain StatementExpression MethodInvocation audioClip close BlockStatement StatementExpression MethodInvocation project BinaryOperation + Literal ""Can't get data from file "" MethodInvocation file getName log End MethodDeclaration Modifier private playClip FormalParameter ReferenceType Clip clip FormalParameter BasicType int loops StatementExpression MethodInvocation clip MemberReference loops loop WhileStatement MethodInvocation clip isRunning BlockStatement End MethodDeclaration Modifier private playClip FormalParameter ReferenceType Clip clip FormalParameter BasicType long duration StatementExpression MethodInvocation clip MemberReference Clip LOOP_CONTINUOUSLY loop TryStatement StatementExpression MethodInvocation Thread MemberReference duration sleep CatchClause CatchClauseParameter InterruptedException e MethodDeclaration /**
     * This is implemented to listen for any line events and closes the
     * clip if required.
     */ Modifier public update FormalParameter ReferenceType LineEvent event IfStatement MethodInvocation event MethodInvocation MemberReference LineEvent.Type STOP equals getType BlockStatement LocalVariableDeclaration ReferenceType Line VariableDeclarator line MethodInvocation event getLine StatementExpression MethodInvocation line close IfStatement MethodInvocation event MethodInvocation MemberReference LineEvent.Type CLOSE equals getType BlockStatement End End MethodDeclaration /**
     *  Fired before any targets are started.
     */ Modifier public buildStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     *  Fired after the last target has finished. This event
     *  will still be thrown if an error occurred during the build.
     *
     *  @see BuildEvent#getException()
     */ Modifier public buildFinished FormalParameter ReferenceType BuildEvent event IfStatement BinaryOperation && BinaryOperation == MethodInvocation event getException Literal null BinaryOperation != MemberReference fileSuccess Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation event getProject MemberReference fileSuccess MemberReference loopsSuccess MemberReference durationSuccess play IfStatement BinaryOperation && BinaryOperation != MethodInvocation event getException Literal null BinaryOperation != MemberReference fileFail Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation event getProject MemberReference fileFail MemberReference loopsFail MemberReference durationFail play End End MethodDeclaration /**
     *  Fired when a target is started.
     *
     *  @see BuildEvent#getTarget()
     */ Modifier public targetStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     *  Fired when a target has finished. This event will
     *  still be thrown if an error occurred during the build.
     *
     *  @see BuildEvent#getException()
     */ Modifier public targetFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     *  Fired when a task is started.
     *
     *  @see BuildEvent#getTask()
     */ Modifier public taskStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     *  Fired when a task has finished. This event will still
     *  be throw if an error occurred during the build.
     *
     *  @see BuildEvent#getException()
     */ Modifier public taskFinished FormalParameter ReferenceType BuildEvent event MethodDeclaration /**
     *  Fired whenever a message is logged.
     *
     *  @see BuildEvent#getMessage()
     *  @see BuildEvent#getPriority()
     */ Modifier public messageLogged FormalParameter ReferenceType BuildEvent event ReferenceType LineListener ReferenceType BuildListener",0
165,165,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ide Import java.io.File ClassDeclaration Modifier public /**
 * A Remote Access to Tools Servlet to import a Project
 * from files into the Repository. The following
 * table describes the servlet parameters.
 *
 * <table>
 *   <tr>
 *     <td>Parameter</td>
 *     <td>Description</td>
 *   </tr>
 *   <tr>
 *     <td>project</td>
 *     <td>The name of the project where you want the imported
 *         items to go.
 *     </td>
 *   </tr>
 *   <tr>
 *     <td>dir</td>
 *     <td>The directory you want to import from.</td>
 *   </tr>
 * </table>
 *
 */ VAJImportServlet MethodDeclaration /**
     * Respond to a request to import files to the Repository
     */ Modifier protected executeRequest StatementExpression MethodInvocation MethodInvocation MethodInvocation MemberReference PROJECT_NAME_PARAM getFirstParamValueString ClassCreator ReferenceType File MethodInvocation MemberReference DIR_PARAM getFirstParamValueString MethodInvocation MemberReference INCLUDE_PARAM getParamValues MethodInvocation MemberReference EXCLUDE_PARAM getParamValues MethodInvocation MemberReference CLASSES_PARAM Literal false getBooleanParam MethodInvocation MemberReference RESOURCES_PARAM Literal true getBooleanParam MethodInvocation MemberReference SOURCES_PARAM Literal true getBooleanParam Literal false importFiles getUtil ReferenceType VAJToolsServlet",1
451,451,,0
303,303,"CompilationUnit PackageDeclaration org.apache.tools.ant.types ClassDeclaration Modifier public /**
 * <p>Helper class to handle the DTD nested element.  Instances of
 * this class correspond to the <code>PUBLIC</code> catalog entry type
 * of the <a
 * href=""http://oasis-open.org/committees/entity/spec-2001-08-06.html"">
 * OASIS ""Open Catalog"" standard</a>.</p>
 *
 * <p>Possible Future Enhancement: Bring the Ant element name into
 * conformance with the OASIS standard.</p>
 *
 * @see org.apache.xml.resolver.Catalog
 * @version $Id$
 */ DTDLocation ReferenceType ResourceLocation",0
478,478,,0
528,528,,0
318,318,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.BufferedReader Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import java.util.ArrayList Import java.util.Date Import java.util.HashMap Import java.util.Hashtable Import java.util.Iterator Import java.util.List Import java.util.Map Import java.util.Properties Import java.util.StringTokenizer Import javax.xml.parsers.SAXParser Import javax.xml.parsers.SAXParserFactory Import org.xml.sax.AttributeList Import org.xml.sax.HandlerBase Import org.xml.sax.InputSource Import org.xml.sax.SAXException ClassDeclaration Modifier public /**
 * Compiles EJB stubs and skeletons for the iPlanet Application
 * Server (iAS).  The class will read a standard EJB descriptor (as well as an
 * EJB descriptor specific to iPlanet Application Server) to identify one or
 * more EJBs to process.  It will search for EJB ""source"" classes (the remote
; * interface, home interface, and EJB implementation class) and the EJB stubs
 * and skeletons in the specified destination directory.  Only if the stubs and
 * skeletons cannot be found or if they're out of date will the iPlanet
 * Application Server ejbc utility be run.
 * <p>
 * Because this class (and it's assorted inner classes) may be bundled into the
 * iPlanet Application Server distribution at some point (and removed from the
 * Ant distribution), the class has been written to be independent of all
 * Ant-specific classes.  It is also for this reason (and to avoid cluttering
 * the Apache Ant source files) that this utility has been packaged into a
 * single source file.
 * <p>
 * For more information on Ant Tasks for iPlanet Application Server, see the
 * <code>IPlanetDeploymentTool</code> and <code>IPlanetEjbcTask</code> classes.
 *
 * @see    IPlanetDeploymentTool
 * @see    IPlanetEjbcTask
 * @ant.task ignore=""true""
 */ IPlanetEjbc FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator ENTITY_BEAN Literal ""entity"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator STATELESS_SESSION Literal ""stateless"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator STATEFUL_SESSION Literal ""stateful"" FieldDeclaration Modifier private ReferenceType File VariableDeclarator stdDescriptor FieldDeclaration Modifier private ReferenceType File VariableDeclarator iasDescriptor FieldDeclaration Modifier private ReferenceType File VariableDeclarator destDirectory FieldDeclaration Modifier private ReferenceType String VariableDeclarator classpath FieldDeclaration Modifier private ReferenceType String VariableDeclarator classpathElements FieldDeclaration Modifier private BasicType boolean VariableDeclarator retainSource Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator debugOutput Literal false FieldDeclaration Modifier private ReferenceType File VariableDeclarator iasHomeDir FieldDeclaration Modifier private ReferenceType SAXParser VariableDeclarator parser FieldDeclaration Modifier private ReferenceType EjbcHandler VariableDeclarator handler ClassCreator ReferenceType EjbcHandler FieldDeclaration Modifier private ReferenceType Hashtable VariableDeclarator ejbFiles ClassCreator ReferenceType Hashtable FieldDeclaration Modifier private ReferenceType String VariableDeclarator displayName ConstructorDeclaration Modifier public /**
     * Constructs an instance which may be used to process EJB descriptors and
     * generate EJB stubs and skeletons, if needed.
     *
     * @param stdDescriptor File referencing a standard EJB descriptor.
     * @param iasDescriptor File referencing an iAS-specific EJB descriptor.
     * @param destDirectory File referencing the base directory where both
     *                      EJB ""source"" files are found and where stubs and
     *                      skeletons will be written.
     * @param classpath     String representation of the classpath to be used
     *                      by the iAS ejbc utility.
     * @param parser        SAXParser to be used to process both of the EJB
     *                      descriptors.
     * @todo classpathElements is not needed here, its never used
     *       (at least IDEA tells me so! :)
     */ IPlanetEjbc FormalParameter ReferenceType File stdDescriptor FormalParameter ReferenceType File iasDescriptor FormalParameter ReferenceType File destDirectory FormalParameter ReferenceType String classpath FormalParameter ReferenceType SAXParser parser StatementExpression Assignment This MemberReference stdDescriptor MemberReference stdDescriptor = StatementExpression Assignment This MemberReference iasDescriptor MemberReference iasDescriptor = StatementExpression Assignment This MemberReference destDirectory MemberReference destDirectory = StatementExpression Assignment This MemberReference classpath MemberReference classpath = StatementExpression Assignment This MemberReference parser MemberReference parser = LocalVariableDeclaration ReferenceType List VariableDeclarator elements ClassCreator ReferenceType ArrayList IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference classpath MemberReference File pathSeparator WhileStatement MethodInvocation st hasMoreTokens BlockStatement StatementExpression MethodInvocation elements MethodInvocation st nextToken add End StatementExpression Assignment MemberReference classpathElements Cast ReferenceType String MethodInvocation elements ArrayCreator ReferenceType String MethodInvocation elements size toArray = End MethodDeclaration /**
     * If true, the Java source files which are generated by the
     * ejbc process are retained.
     *
     * @param retainSource A boolean indicating if the Java source files for
     *                     the stubs and skeletons should be retained.
     * @todo This is not documented in the HTML. On purpose?
     */ Modifier public setRetainSource FormalParameter BasicType boolean retainSource StatementExpression Assignment This MemberReference retainSource MemberReference retainSource = MethodDeclaration /**
     * If true, enables debugging output when ejbc is executed.
     *
     * @param debugOutput A boolean indicating if debugging output should be
     *                    generated
     */ Modifier public setDebugOutput FormalParameter BasicType boolean debugOutput StatementExpression Assignment This MemberReference debugOutput MemberReference debugOutput = MethodDeclaration /**
     * Registers the location of a local DTD file or resource.  By registering
     * a local DTD, EJB descriptors can be parsed even when the remote servers
     * which contain the ""public"" DTDs cannot be accessed.
     *
     * @param publicID The public DTD identifier found in an XML document.
     * @param location The file or resource name for the appropriate DTD stored
     *                 on the local machine.
     */ Modifier public registerDTD FormalParameter ReferenceType String publicID FormalParameter ReferenceType String location StatementExpression MethodInvocation handler MemberReference publicID MemberReference location registerDTD MethodDeclaration /**
     * May be used to specify the ""home"" directory for this iAS installation.
     * The directory specified should typically be
     * <code>[install-location]/iplanet/ias6/ias</code>.
     *
     * @param iasHomeDir The home directory for the user's iAS installation.
     */ Modifier public setIasHomeDir FormalParameter ReferenceType File iasHomeDir StatementExpression Assignment This MemberReference iasHomeDir MemberReference iasHomeDir = MethodDeclaration /**
     * Returns a Hashtable which contains a list of EJB class files processed by
     * the ejbc utility (both ""source"" class files as well as stubs and
     * skeletons). The key for the Hashtable is a String representing the path
     * to the class file (relative to the destination directory).  The value for
     * the Hashtable is a File object which reference the actual class file.
     *
     * @return The list of EJB files processed by the ejbc utility.
     */ Modifier public ReferenceType Hashtable getEjbFiles ReturnStatement MemberReference ejbFiles MethodDeclaration /**
     * Returns the display-name element read from the standard EJB descriptor.
     *
     * @return The EJB-JAR display name.
     */ Modifier public ReferenceType String getDisplayName ReturnStatement MemberReference displayName MethodDeclaration /**
     * Returns the list of CMP descriptors referenced in the EJB descriptors.
     *
     * @return An array of CMP descriptors.
     */ Modifier public ReferenceType String getCmpDescriptors LocalVariableDeclaration ReferenceType List VariableDeclarator returnList ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType EjbInfo VariableDeclarator ejbs MethodInvocation handler getEjbs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ejbs length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType List VariableDeclarator descriptors Cast ReferenceType List MemberReference ArraySelector MemberReference i MethodInvocation getCmpDescriptors ejbs StatementExpression MethodInvocation returnList MemberReference descriptors addAll End ReturnStatement Cast ReferenceType String MethodInvocation returnList ArrayCreator ReferenceType String MethodInvocation returnList size toArray MethodDeclaration /**
     * Main application method for the iPlanet Application Server ejbc utility.
     * If the application is run with no commandline arguments, a usage
     * statement is printed for the user.
     *
     * @param args The commandline arguments passed to the application.
     */ Modifier public static main FormalParameter ReferenceType String args LocalVariableDeclaration ReferenceType File VariableDeclarator stdDescriptor LocalVariableDeclaration ReferenceType File VariableDeclarator iasDescriptor LocalVariableDeclaration ReferenceType File VariableDeclarator destDirectory Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator classpath Literal null LocalVariableDeclaration ReferenceType SAXParser VariableDeclarator parser Literal null LocalVariableDeclaration BasicType boolean VariableDeclarator debug Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator retainSource Literal false LocalVariableDeclaration ReferenceType IPlanetEjbc VariableDeclarator ejbc IfStatement BinaryOperation || BinaryOperation < MemberReference args length Literal 2 BinaryOperation > MemberReference args length Literal 8 BlockStatement StatementExpression MethodInvocation usage ReturnStatement End StatementExpression Assignment MemberReference stdDescriptor ClassCreator ReferenceType File MemberReference ArraySelector BinaryOperation - MemberReference args length Literal 2 args = StatementExpression Assignment MemberReference iasDescriptor ClassCreator ReferenceType File MemberReference ArraySelector BinaryOperation - MemberReference args length Literal 1 args = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation - MemberReference args length Literal 2 MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""-classpath"" equals args BlockStatement StatementExpression Assignment MemberReference classpath MemberReference ArraySelector MemberReference ++ i args = IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""-d"" equals args BlockStatement StatementExpression Assignment MemberReference destDirectory ClassCreator ReferenceType File MemberReference ArraySelector MemberReference ++ i args = IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""-debug"" equals args BlockStatement StatementExpression Assignment MemberReference debug Literal true = IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""-keepsource"" equals args BlockStatement StatementExpression Assignment MemberReference retainSource Literal true = BlockStatement StatementExpression MethodInvocation usage ReturnStatement End End End End End IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement LocalVariableDeclaration ReferenceType Properties VariableDeclarator props MethodInvocation System getProperties StatementExpression Assignment MemberReference classpath MethodInvocation props Literal ""java.class.path"" getProperty = End IfStatement BinaryOperation == MemberReference destDirectory Literal null BlockStatement LocalVariableDeclaration ReferenceType Properties VariableDeclarator props MethodInvocation System getProperties StatementExpression Assignment MemberReference destDirectory ClassCreator ReferenceType File MethodInvocation props Literal ""user.dir"" getProperty = End LocalVariableDeclaration ReferenceType SAXParserFactory VariableDeclarator parserFactory MethodInvocation SAXParserFactory newInstance StatementExpression MethodInvocation parserFactory Literal true setValidating TryStatement StatementExpression Assignment MemberReference parser MethodInvocation parserFactory newSAXParser = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation System.out Literal ""An exception was generated while trying to "" println StatementExpression MethodInvocation System.out Literal ""create a new SAXParser."" println StatementExpression MethodInvocation e printStackTrace ReturnStatement StatementExpression Assignment MemberReference ejbc ClassCreator ReferenceType IPlanetEjbc MemberReference stdDescriptor MemberReference iasDescriptor MemberReference destDirectory MemberReference classpath MemberReference parser = StatementExpression MethodInvocation ejbc MemberReference debug setDebugOutput StatementExpression MethodInvocation ejbc MemberReference retainSource setRetainSource TryStatement StatementExpression MethodInvocation ejbc execute CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""An IOException has occurred while reading the "" Literal ""XML descriptors ("" MethodInvocation e getMessage Literal "")."" println ReturnStatement CatchClause CatchClauseParameter SAXException e StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""A SAXException has occurred while reading the "" Literal ""XML descriptors ("" MethodInvocation e getMessage Literal "")."" println ReturnStatement CatchClause CatchClauseParameter IPlanetEjbc.EjbcException e StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""An error has occurred while executing the ejbc "" Literal ""utility ("" MethodInvocation e getMessage Literal "")."" println ReturnStatement MethodDeclaration /**
     * Print a usage statement.
     */ Modifier private static usage StatementExpression MethodInvocation System.out Literal ""java org.apache.tools.ant.taskdefs.optional.ejb.IPlanetEjbc \\"" println StatementExpression MethodInvocation System.out Literal ""  [OPTIONS] [EJB 1.1 descriptor] [iAS EJB descriptor]"" println StatementExpression MethodInvocation System.out Literal """" println StatementExpression MethodInvocation System.out Literal ""Where OPTIONS are:"" println StatementExpression MethodInvocation System.out Literal ""  -debug -- for additional debugging output"" println StatementExpression MethodInvocation System.out Literal ""  -keepsource -- to retain Java source files generated"" println StatementExpression MethodInvocation System.out Literal ""  -classpath [classpath] -- classpath used for compilation"" println StatementExpression MethodInvocation System.out Literal ""  -d [destination directory] -- directory for compiled classes"" println StatementExpression MethodInvocation System.out Literal """" println StatementExpression MethodInvocation System.out Literal ""If a classpath is not specified, the system classpath"" println StatementExpression MethodInvocation System.out Literal ""will be used.  If a destination directory is not specified,"" println StatementExpression MethodInvocation System.out Literal ""the current working directory will be used (classes will"" println StatementExpression MethodInvocation System.out Literal ""still be placed in subfolders which correspond to their"" println StatementExpression MethodInvocation System.out Literal ""package name)."" println StatementExpression MethodInvocation System.out Literal """" println StatementExpression MethodInvocation System.out Literal ""The EJB home interface, remote interface, and implementation"" println StatementExpression MethodInvocation System.out Literal ""class must be found in the destination directory.  In"" println StatementExpression MethodInvocation System.out Literal ""addition, the destination will look for the stubs and skeletons"" println StatementExpression MethodInvocation System.out Literal ""in the destination directory to ensure they are up to date."" println MethodDeclaration /**
     * Compiles the stub and skeletons for the specified EJBs, if they need to
     * be updated.
     *
     * @throws EjbcException If the ejbc utility cannot be correctly configured
     *                       or if one or more of the EJB ""source"" classes
     *                       cannot be found in the destination directory
     * @throws IOException   If the parser encounters a problem reading the XML
     *                       file
     * @throws SAXException  If the parser encounters a problem processing the
     *                       XML descriptor (it may wrap another exception)
     */ Modifier public execute EjbcException IOException SAXException StatementExpression MethodInvocation checkConfiguration LocalVariableDeclaration ReferenceType EjbInfo VariableDeclarator ejbs MethodInvocation getEjbs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ejbs length MemberReference ++ i BlockStatement StatementExpression MethodInvocation Literal ""EJBInfo..."" log StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i MethodInvocation toString ejbs log End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference ejbs length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType EjbInfo VariableDeclarator ejb MemberReference ArraySelector MemberReference i ejbs StatementExpression MethodInvocation ejb MemberReference destDirectory checkConfiguration IfStatement MethodInvocation ejb MemberReference destDirectory mustBeRecompiled BlockStatement StatementExpression MethodInvocation BinaryOperation + MethodInvocation ejb getName Literal "" must be recompiled using ejbc."" log LocalVariableDeclaration ReferenceType String VariableDeclarator arguments MethodInvocation MemberReference ejb buildArgumentList StatementExpression MethodInvocation MemberReference arguments callEjbc BlockStatement StatementExpression MethodInvocation BinaryOperation + MethodInvocation ejb getName Literal "" is up to date."" log End End MethodDeclaration /**
     * Executes the iPlanet Application Server ejbc command-line utility.
     *
     * @param arguments Command line arguments to be passed to the ejbc utility.
     */ Modifier private callEjbc FormalParameter ReferenceType String arguments LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator args ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference arguments length MemberReference ++ i BlockStatement StatementExpression MethodInvocation args MethodInvocation Literal "" "" append MemberReference ArraySelector MemberReference i arguments append End LocalVariableDeclaration ReferenceType String VariableDeclarator command IfStatement BinaryOperation == MemberReference iasHomeDir Literal null BlockStatement StatementExpression Assignment MemberReference command Literal """" = BlockStatement StatementExpression Assignment MemberReference command BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation iasHomeDir toString MemberReference File separator Literal ""bin"" MemberReference File separator = End StatementExpression Assignment MemberReference command Literal ""ejbc "" += StatementExpression MethodInvocation BinaryOperation + MemberReference command MemberReference args log TryStatement LocalVariableDeclaration ReferenceType Process VariableDeclarator p MethodInvocation Runtime MethodInvocation BinaryOperation + MemberReference command MemberReference args exec getRuntime LocalVariableDeclaration ReferenceType RedirectOutput VariableDeclarator output ClassCreator ReferenceType RedirectOutput MethodInvocation p getInputStream LocalVariableDeclaration ReferenceType RedirectOutput VariableDeclarator error ClassCreator ReferenceType RedirectOutput MethodInvocation p getErrorStream StatementExpression MethodInvocation output start StatementExpression MethodInvocation error start StatementExpression MethodInvocation p waitFor StatementExpression MethodInvocation p destroy CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation Literal ""An IOException has occurred while trying to execute ejbc."" log StatementExpression MethodInvocation e printStackTrace CatchClause CatchClauseParameter InterruptedException e MethodDeclaration /**
     * Verifies that the user selections are valid.
     *
     * @throws EjbcException If the user selections are invalid.
     */ Modifier protected checkConfiguration EjbcException LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal """" IfStatement BinaryOperation == MemberReference stdDescriptor Literal null BlockStatement StatementExpression Assignment MemberReference msg Literal ""A standard XML descriptor file must be specified.  "" += End IfStatement BinaryOperation == MemberReference iasDescriptor Literal null BlockStatement StatementExpression Assignment MemberReference msg Literal ""An iAS-specific XML descriptor file must be specified.  "" += End IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference msg Literal ""A classpath must be specified.    "" += End IfStatement BinaryOperation == MemberReference parser Literal null BlockStatement StatementExpression Assignment MemberReference msg Literal ""An XML parser must be specified.    "" += End IfStatement BinaryOperation == MemberReference destDirectory Literal null BlockStatement StatementExpression Assignment MemberReference msg Literal ""A destination directory must be specified.  "" += IfStatement MethodInvocation ! destDirectory exists BlockStatement StatementExpression Assignment MemberReference msg Literal ""The destination directory specified does not exist.  "" += IfStatement MethodInvocation ! destDirectory isDirectory BlockStatement StatementExpression Assignment MemberReference msg Literal ""The destination specified is not a directory.  "" += End End End IfStatement BinaryOperation > MethodInvocation msg length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType EjbcException MemberReference msg End MethodDeclaration /**
     * Parses the EJB descriptors and returns a list of EJBs which may need to
     * be compiled.
     *
     * @return               An array of objects which describe the EJBs to be
     *                       processed.
     * @throws IOException   If the parser encounters a problem reading the XML
     *                       files
     * @throws SAXException  If the parser encounters a problem processing the
     *                       XML descriptor (it may wrap another exception)
     */ Modifier private ReferenceType EjbInfo getEjbs IOException SAXException LocalVariableDeclaration ReferenceType EjbInfo VariableDeclarator ejbs Literal null StatementExpression MethodInvocation parser MemberReference stdDescriptor MemberReference handler parse StatementExpression MethodInvocation parser MemberReference iasDescriptor MemberReference handler parse StatementExpression Assignment MemberReference ejbs MethodInvocation handler getEjbs = ReturnStatement MemberReference ejbs MethodDeclaration /**
     * Based on this object's instance variables as well as the EJB to be
     * processed, the correct flags and parameters are set for the ejbc
     * command-line utility.
     * @param ejb The EJB for which stubs and skeletons will be compiled.
     * @return    An array of Strings which are the command-line parameters for
     *            for the ejbc utility.
     */ Modifier private ReferenceType String buildArgumentList FormalParameter ReferenceType EjbInfo ejb LocalVariableDeclaration ReferenceType List VariableDeclarator arguments ClassCreator ReferenceType ArrayList IfStatement MemberReference debugOutput BlockStatement StatementExpression MethodInvocation arguments Literal ""-debug"" add End IfStatement MethodInvocation ejb MethodInvocation MemberReference STATELESS_SESSION equals getBeantype BlockStatement StatementExpression MethodInvocation arguments Literal ""-sl"" add IfStatement MethodInvocation ejb MethodInvocation MemberReference STATEFUL_SESSION equals getBeantype BlockStatement StatementExpression MethodInvocation arguments Literal ""-sf"" add End End IfStatement MethodInvocation ejb getIiop BlockStatement StatementExpression MethodInvocation arguments Literal ""-iiop"" add End IfStatement MethodInvocation ejb getCmp BlockStatement StatementExpression MethodInvocation arguments Literal ""-cmp"" add End IfStatement MemberReference retainSource BlockStatement StatementExpression MethodInvocation arguments Literal ""-gs"" add End IfStatement MethodInvocation ejb getHasession BlockStatement StatementExpression MethodInvocation arguments Literal ""-fo"" add End StatementExpression MethodInvocation arguments Literal ""-classpath"" add StatementExpression MethodInvocation arguments MemberReference classpath add StatementExpression MethodInvocation arguments Literal ""-d"" add StatementExpression MethodInvocation arguments MethodInvocation destDirectory toString add StatementExpression MethodInvocation arguments MethodInvocation ejb MethodInvocation getQualifiedClassName getHome add StatementExpression MethodInvocation arguments MethodInvocation ejb MethodInvocation getQualifiedClassName getRemote add StatementExpression MethodInvocation arguments MethodInvocation ejb MethodInvocation getQualifiedClassName getImplementation add ReturnStatement Cast ReferenceType String MethodInvocation arguments ArrayCreator ReferenceType String MethodInvocation arguments size toArray MethodDeclaration /**
     * Convenience method used to print messages to the user if debugging
     * messages are enabled.
     *
     * @param msg The String to print to standard output.
     */ Modifier private log FormalParameter ReferenceType String msg IfStatement MemberReference debugOutput BlockStatement StatementExpression MethodInvocation System.out MemberReference msg println End ClassDeclaration Modifier public /**
     * This inner class is used to signal any problems during the execution of
     * the ejbc compiler.
     *
     */ EjbcException ConstructorDeclaration Modifier public /**
         * Constructs an exception with the given descriptive message.
         *
         * @param msg Description of the exception which has occurred.
         */ EjbcException FormalParameter ReferenceType String msg StatementExpression SuperConstructorInvocation MemberReference msg ReferenceType Exception ClassDeclaration Modifier private /**
     * This inner class is an XML document handler that can be used to parse EJB
     * descriptors (both the standard EJB descriptor as well as the iAS-specific
     * descriptor that stores additional values for iAS).  Once the descriptors
     * have been processed, the list of EJBs found can be obtained by calling
     * the <code>getEjbs()</code> method.
     *
     * @see    IPlanetEjbc.EjbInfo
     */ EjbcHandler FieldDeclaration Modifier private ReferenceType Map VariableDeclarator resourceDtds ClassCreator ReferenceType HashMap FieldDeclaration Modifier private ReferenceType Map VariableDeclarator fileDtds ClassCreator ReferenceType HashMap FieldDeclaration Modifier private ReferenceType Map VariableDeclarator ejbs ClassCreator ReferenceType HashMap FieldDeclaration Modifier private ReferenceType EjbInfo VariableDeclarator currentEjb FieldDeclaration Modifier private BasicType boolean VariableDeclarator iasDescriptor Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator currentLoc Literal """" FieldDeclaration Modifier private ReferenceType String VariableDeclarator currentText FieldDeclaration Modifier private ReferenceType String VariableDeclarator ejbType ConstructorDeclaration Modifier public /**
         * Constructs a new instance of the handler and registers local copies
         * of the standard EJB 1.1 descriptor DTD as well as iAS's EJB
         * descriptor DTD.
         */ EjbcHandler LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator PUBLICID_EJB11 Literal ""-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"" LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator PUBLICID_IPLANET_EJB_60 Literal ""-//Sun Microsystems, Inc.//DTD iAS Enterprise JavaBeans 1.0//EN"" LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator DEFAULT_IAS60_EJB11_DTD_LOCATION Literal ""ejb-jar_1_1.dtd"" LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator DEFAULT_IAS60_DTD_LOCATION Literal ""IASEjb_jar_1_0.dtd"" StatementExpression MethodInvocation MemberReference PUBLICID_EJB11 MemberReference DEFAULT_IAS60_EJB11_DTD_LOCATION registerDTD StatementExpression MethodInvocation MemberReference PUBLICID_IPLANET_EJB_60 MemberReference DEFAULT_IAS60_DTD_LOCATION registerDTD MethodDeclaration /**
         * Returns the list of EJB objects found during the processing of the
         * standard EJB 1.1 descriptor and iAS-specific EJB descriptor.
         *
         * @return An array of EJBs which were found during the descriptor
         *         parsing.
         */ Modifier public ReferenceType EjbInfo getEjbs ReturnStatement Cast ReferenceType EjbInfo MethodInvocation ejbs MethodInvocation ArrayCreator ReferenceType EjbInfo MethodInvocation ejbs size toArray values MethodDeclaration /**
         * Returns the value of the display-name element found in the standard
         * EJB 1.1 descriptor.
         *
         * @return String display-name value.
         */ Modifier public ReferenceType String getDisplayName ReturnStatement MemberReference displayName MethodDeclaration /**
         * Registers a local DTD that will be used when parsing an EJB
         * descriptor.  When the DTD's public identifier is found in an XML
         * document, the parser will reference the local DTD rather than the
         * remote DTD.  This enables XML documents to be processed even when the
         * public DTD isn't available.
         *
         * @param publicID The DTD's public identifier.
         * @param location The location of the local DTD copy -- the location
         *                 may either be a resource found on the classpath or a
         *                 local file.
         */ Modifier public registerDTD FormalParameter ReferenceType String publicID FormalParameter ReferenceType String location StatementExpression MethodInvocation BinaryOperation + Literal ""Registering: "" MemberReference location log IfStatement BinaryOperation || BinaryOperation == MemberReference publicID Literal null BinaryOperation == MemberReference location Literal null BlockStatement ReturnStatement End IfStatement BinaryOperation != MethodInvocation ClassLoader MemberReference location getSystemResource Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Found resource: "" MemberReference location log StatementExpression MethodInvocation resourceDtds MemberReference publicID MemberReference location put BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator dtdFile ClassCreator ReferenceType File MemberReference location IfStatement BinaryOperation && MethodInvocation dtdFile exists MethodInvocation dtdFile isFile BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Found file: "" MemberReference location log StatementExpression MethodInvocation fileDtds MemberReference publicID MemberReference location put End End MethodDeclaration /**
         * Resolves an external entity found during XML processing.  If a public
         * ID is found that has been registered with the handler, an <code>
         * InputSource</code> will be returned which refers to the local copy.
         * If the public ID hasn't been registered or if an error occurs, the
         * superclass implementation is used.
         *
         * @param publicId The DTD's public identifier.
         * @param systemId The location of the DTD, as found in the XML document.
         */ Modifier public ReferenceType InputSource resolveEntity FormalParameter ReferenceType String publicId FormalParameter ReferenceType String systemId SAXException LocalVariableDeclaration ReferenceType InputStream VariableDeclarator inputStream Literal null TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator location Cast ReferenceType String MethodInvocation resourceDtds MemberReference publicId get IfStatement BinaryOperation != MemberReference location Literal null BlockStatement StatementExpression Assignment MemberReference inputStream MethodInvocation ClassLoader MethodInvocation openStream MemberReference location getSystemResource = BlockStatement StatementExpression Assignment MemberReference location Cast ReferenceType String MethodInvocation fileDtds MemberReference publicId get = IfStatement BinaryOperation != MemberReference location Literal null BlockStatement StatementExpression Assignment MemberReference inputStream ClassCreator ReferenceType FileInputStream MemberReference location = End End CatchClause CatchClauseParameter IOException e ReturnStatement SuperMethodInvocation MemberReference publicId MemberReference systemId resolveEntity IfStatement BinaryOperation == MemberReference inputStream Literal null BlockStatement ReturnStatement SuperMethodInvocation MemberReference publicId MemberReference systemId resolveEntity BlockStatement ReturnStatement ClassCreator ReferenceType InputSource MemberReference inputStream End MethodDeclaration /**
         * Receive notification that the start of an XML element has been found.
         *
         * @param name String name of the element found.
         * @param atts AttributeList of the attributes included with the element
         *             (if any).
         * @throws SAXException If the parser cannot process the document.
         */ Modifier public startElement FormalParameter ReferenceType String name FormalParameter ReferenceType AttributeList atts SAXException StatementExpression Assignment MemberReference currentLoc BinaryOperation + Literal ""\\"" MemberReference name += StatementExpression Assignment MemberReference currentText Literal """" = IfStatement MethodInvocation currentLoc Literal ""\\ejb-jar"" equals BlockStatement StatementExpression Assignment MemberReference iasDescriptor Literal false = IfStatement MethodInvocation currentLoc Literal ""\\ias-ejb-jar"" equals BlockStatement StatementExpression Assignment MemberReference iasDescriptor Literal true = End End IfStatement BinaryOperation || MethodInvocation name Literal ""session"" equals MethodInvocation name Literal ""entity"" equals BlockStatement StatementExpression Assignment MemberReference ejbType MemberReference name = End MethodDeclaration /**
         * Receive notification that character data has been found in the XML
         * document
         *
         * @param ch Array of characters which have been found in the document.
         * @param start Starting index of the data found in the document.
         * @param len The number of characters found in the document.
         * @throws SAXException If the parser cannot process the document.
         */ Modifier public characters FormalParameter BasicType char ch FormalParameter BasicType int start FormalParameter BasicType int len SAXException StatementExpression Assignment MemberReference currentText ClassCreator MethodInvocation MemberReference start BinaryOperation + MemberReference start MemberReference len substring ReferenceType String MemberReference ch += MethodDeclaration /**
         * Receive notification that the end of an XML element has been found.
         *
         * @param name String name of the element.
         * @throws SAXException If the parser cannot process the document.
         */ Modifier public endElement FormalParameter ReferenceType String name SAXException IfStatement MemberReference iasDescriptor BlockStatement StatementExpression MethodInvocation MemberReference currentText iasCharacters BlockStatement StatementExpression MethodInvocation MemberReference currentText stdCharacters End LocalVariableDeclaration BasicType int VariableDeclarator nameLength BinaryOperation + MethodInvocation name length Literal 1 LocalVariableDeclaration BasicType int VariableDeclarator locLength MethodInvocation currentLoc length StatementExpression Assignment MemberReference currentLoc MethodInvocation currentLoc Literal 0 BinaryOperation - MemberReference locLength MemberReference nameLength substring = MethodDeclaration /**
         * Receive notification that character data has been found in a standard
         * EJB 1.1 descriptor.  We're interested in retrieving the home
         * interface, remote interface, implementation class, the type of bean,
         * and if the bean uses CMP.
         *
         * @param value String data found in the XML document.
         */ Modifier private stdCharacters FormalParameter ReferenceType String value IfStatement MethodInvocation currentLoc Literal ""\\ejb-jar\\display-name"" equals BlockStatement StatementExpression Assignment MemberReference displayName MemberReference value = ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator base BinaryOperation + Literal ""\\ejb-jar\\enterprise-beans\\"" MemberReference ejbType IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\ejb-name"" equals BlockStatement StatementExpression Assignment MemberReference currentEjb Cast ReferenceType EjbInfo MethodInvocation ejbs MemberReference value get = IfStatement BinaryOperation == MemberReference currentEjb Literal null BlockStatement StatementExpression Assignment MemberReference currentEjb ClassCreator ReferenceType EjbInfo MemberReference value = StatementExpression MethodInvocation ejbs MemberReference value MemberReference currentEjb put End IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\home"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value setHome IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\remote"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value setRemote IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\ejb-class"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value setImplementation IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\prim-key-class"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value setPrimaryKey IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\session-type"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value setBeantype IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\persistence-type"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value setCmp End End End End End End End MethodDeclaration /**
         * Receive notification that character data has been found in an
         * iAS-specific descriptor.  We're interested in retrieving data
         * indicating whether the bean must support RMI/IIOP access, whether
         * the bean must provide highly available stubs and skeletons (in the
         * case of stateful session beans), and if this bean uses additional
         * CMP XML descriptors (in the case of entity beans with CMP).
         *
         * @param value String data found in the XML document.
         */ Modifier private iasCharacters FormalParameter ReferenceType String value LocalVariableDeclaration ReferenceType String VariableDeclarator base BinaryOperation + Literal ""\\ias-ejb-jar\\enterprise-beans\\"" MemberReference ejbType IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\ejb-name"" equals BlockStatement StatementExpression Assignment MemberReference currentEjb Cast ReferenceType EjbInfo MethodInvocation ejbs MemberReference value get = IfStatement BinaryOperation == MemberReference currentEjb Literal null BlockStatement StatementExpression Assignment MemberReference currentEjb ClassCreator ReferenceType EjbInfo MemberReference value = StatementExpression MethodInvocation ejbs MemberReference value MemberReference currentEjb put End IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\iiop"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value setIiop IfStatement MethodInvocation currentLoc BinaryOperation + MemberReference base Literal ""\\failover-required"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value setHasession IfStatement MethodInvocation currentLoc BinaryOperation + BinaryOperation + MemberReference base Literal ""\\persistence-manager"" Literal ""\\properties-file-location"" equals BlockStatement StatementExpression MethodInvocation currentEjb MemberReference value addCmpDescriptor End End End End ReferenceType HandlerBase ClassDeclaration Modifier private /**
     * This inner class represents an EJB that will be compiled using ejbc.
     *
     */ EjbInfo FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType Classname VariableDeclarator home FieldDeclaration Modifier private ReferenceType Classname VariableDeclarator remote FieldDeclaration Modifier private ReferenceType Classname VariableDeclarator implementation FieldDeclaration Modifier private ReferenceType Classname VariableDeclarator primaryKey FieldDeclaration Modifier private ReferenceType String VariableDeclarator beantype Literal ""entity"" FieldDeclaration Modifier private BasicType boolean VariableDeclarator cmp Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator iiop Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator hasession Literal false FieldDeclaration Modifier private ReferenceType List VariableDeclarator cmpDescriptors ClassCreator ReferenceType ArrayList ConstructorDeclaration Modifier public /**
         * Construct a new EJBInfo object with the given name.
         *
         * @param name The display name for the EJB.
         */ EjbInfo FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
         * Returns the display name of the EJB.  If a display name has not been
         * set, it returns the EJB implementation classname (if the
         * implementation class is not set, it returns ""[unnamed]"").
         *
         * @return The display name for the EJB.
         */ Modifier public ReferenceType String getName IfStatement BinaryOperation == MemberReference name Literal null BlockStatement IfStatement BinaryOperation == MemberReference implementation Literal null BlockStatement ReturnStatement Literal ""[unnamed]"" BlockStatement ReturnStatement MethodInvocation implementation getClassName End End ReturnStatement MemberReference name MethodDeclaration Modifier public setHome FormalParameter ReferenceType String home StatementExpression MethodInvocation ClassCreator ReferenceType Classname MemberReference home setHome MethodDeclaration Modifier public setHome FormalParameter ReferenceType Classname home StatementExpression Assignment This MemberReference home MemberReference home = MethodDeclaration Modifier public ReferenceType Classname getHome ReturnStatement MemberReference home MethodDeclaration Modifier public setRemote FormalParameter ReferenceType String remote StatementExpression MethodInvocation ClassCreator ReferenceType Classname MemberReference remote setRemote MethodDeclaration Modifier public setRemote FormalParameter ReferenceType Classname remote StatementExpression Assignment This MemberReference remote MemberReference remote = MethodDeclaration Modifier public ReferenceType Classname getRemote ReturnStatement MemberReference remote MethodDeclaration Modifier public setImplementation FormalParameter ReferenceType String implementation StatementExpression MethodInvocation ClassCreator ReferenceType Classname MemberReference implementation setImplementation MethodDeclaration Modifier public setImplementation FormalParameter ReferenceType Classname implementation StatementExpression Assignment This MemberReference implementation MemberReference implementation = MethodDeclaration Modifier public ReferenceType Classname getImplementation ReturnStatement MemberReference implementation MethodDeclaration Modifier public setPrimaryKey FormalParameter ReferenceType String primaryKey StatementExpression MethodInvocation ClassCreator ReferenceType Classname MemberReference primaryKey setPrimaryKey MethodDeclaration Modifier public setPrimaryKey FormalParameter ReferenceType Classname primaryKey StatementExpression Assignment This MemberReference primaryKey MemberReference primaryKey = MethodDeclaration Modifier public ReferenceType Classname getPrimaryKey ReturnStatement MemberReference primaryKey MethodDeclaration Modifier public setBeantype FormalParameter ReferenceType String beantype StatementExpression Assignment This MemberReference beantype MethodInvocation beantype toLowerCase = MethodDeclaration Modifier public ReferenceType String getBeantype ReturnStatement MemberReference beantype MethodDeclaration Modifier public setCmp FormalParameter BasicType boolean cmp StatementExpression Assignment This MemberReference cmp MemberReference cmp = MethodDeclaration Modifier public setCmp FormalParameter ReferenceType String cmp StatementExpression MethodInvocation MethodInvocation cmp Literal ""Container"" equals setCmp MethodDeclaration Modifier public BasicType boolean getCmp ReturnStatement MemberReference cmp MethodDeclaration Modifier public setIiop FormalParameter BasicType boolean iiop StatementExpression Assignment This MemberReference iiop MemberReference iiop = MethodDeclaration Modifier public setIiop FormalParameter ReferenceType String iiop StatementExpression MethodInvocation MethodInvocation iiop Literal ""true"" equals setIiop MethodDeclaration Modifier public BasicType boolean getIiop ReturnStatement MemberReference iiop MethodDeclaration Modifier public setHasession FormalParameter BasicType boolean hasession StatementExpression Assignment This MemberReference hasession MemberReference hasession = MethodDeclaration Modifier public setHasession FormalParameter ReferenceType String hasession StatementExpression MethodInvocation MethodInvocation hasession Literal ""true"" equals setHasession MethodDeclaration Modifier public BasicType boolean getHasession ReturnStatement MemberReference hasession MethodDeclaration Modifier public addCmpDescriptor FormalParameter ReferenceType String descriptor StatementExpression MethodInvocation cmpDescriptors MemberReference descriptor add MethodDeclaration Modifier public ReferenceType List getCmpDescriptors ReturnStatement MemberReference cmpDescriptors MethodDeclaration /**
         * Verifies that the EJB is valid--if it is invalid, an exception is
         * thrown
         *
         *
         * @param buildDir The directory where the EJB remote interface, home
         *                 interface, and implementation class must be found.
         * @throws EjbcException If the EJB is invalid.
         */ Modifier private checkConfiguration FormalParameter ReferenceType File buildDir EjbcException IfStatement BinaryOperation == MemberReference home Literal null BlockStatement ThrowStatement ClassCreator ReferenceType EjbcException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""A home interface was not found "" Literal ""for the "" MemberReference name Literal "" EJB."" End IfStatement BinaryOperation == MemberReference remote Literal null BlockStatement ThrowStatement ClassCreator ReferenceType EjbcException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""A remote interface was not found "" Literal ""for the "" MemberReference name Literal "" EJB."" End IfStatement BinaryOperation == MemberReference implementation Literal null BlockStatement ThrowStatement ClassCreator ReferenceType EjbcException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""An EJB implementation class was not "" Literal ""found for the "" MemberReference name Literal "" EJB."" End IfStatement BinaryOperation && BinaryOperation && MethodInvocation beantype MemberReference ENTITY_BEAN equals MethodInvocation beantype MemberReference STATELESS_SESSION equals MethodInvocation beantype MemberReference STATEFUL_SESSION equals BlockStatement ThrowStatement ClassCreator ReferenceType EjbcException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The beantype found ("" MemberReference beantype Literal "") "" Literal ""isn't valid in the "" MemberReference name Literal "" EJB."" End IfStatement BinaryOperation && MemberReference cmp MethodInvocation beantype MemberReference ENTITY_BEAN equals BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""CMP stubs and skeletons may not be generated"" Literal "" for a Session Bean -- the \""cmp\"" attribute will be"" Literal "" ignoredfor the "" MemberReference name Literal "" EJB."" println End IfStatement BinaryOperation && MemberReference hasession MethodInvocation beantype MemberReference STATEFUL_SESSION equals BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Highly available stubs and skeletons may "" Literal ""only be generated for a Stateful Session Bean -- the "" Literal ""\""hasession\"" attribute will be ignored for the "" MemberReference name Literal "" EJB."" println End IfStatement MethodInvocation ! remote MethodInvocation exists MemberReference buildDir getClassFile BlockStatement ThrowStatement ClassCreator ReferenceType EjbcException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The remote interface "" MethodInvocation remote getQualifiedClassName Literal "" could not be "" Literal ""found."" End IfStatement MethodInvocation ! home MethodInvocation exists MemberReference buildDir getClassFile BlockStatement ThrowStatement ClassCreator ReferenceType EjbcException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The home interface "" MethodInvocation home getQualifiedClassName Literal "" could not be "" Literal ""found."" End IfStatement MethodInvocation ! implementation MethodInvocation exists MemberReference buildDir getClassFile BlockStatement ThrowStatement ClassCreator ReferenceType EjbcException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The EJB implementation class "" MethodInvocation implementation getQualifiedClassName Literal "" could "" Literal ""not be found."" End MethodDeclaration /**
         * Determines if the ejbc utility needs to be run or not.  If the stubs
         * and skeletons can all be found in the destination directory AND all
         * of their timestamps are more recent than the EJB source classes
         * (home, remote, and implementation classes), the method returns
         * <code>false</code>.  Otherwise, the method returns <code>true</code>.
         *
         * @param destDir The directory where the EJB source classes, stubs and
         *                skeletons are located.
         * @return A boolean indicating whether or not the ejbc utility needs to
         *         be run to bring the stubs and skeletons up to date.
         */ Modifier public BasicType boolean mustBeRecompiled FormalParameter ReferenceType File destDir LocalVariableDeclaration BasicType long VariableDeclarator sourceModified MethodInvocation MemberReference destDir sourceClassesModified LocalVariableDeclaration BasicType long VariableDeclarator destModified MethodInvocation MemberReference destDir destClassesModified ReturnStatement BinaryOperation < MemberReference destModified MemberReference sourceModified MethodDeclaration /**
         * Examines each of the EJB source classes (home, remote, and
         * implementation) and returns the modification timestamp for the
         * ""oldest"" class.
         *
         * @param classpath The classpath to be used to find the source EJB
         *                  classes.  If <code>null</code>, the system classpath
         *                  is used.
         * @return The modification timestamp for the ""oldest"" EJB source class.
         * @throws BuildException If one of the EJB source classes cannot be
         *                        found on the classpath.
         */ Modifier private BasicType long sourceClassesModified FormalParameter ReferenceType File buildDir LocalVariableDeclaration BasicType long VariableDeclarator latestModified LocalVariableDeclaration BasicType long VariableDeclarator modified LocalVariableDeclaration ReferenceType File VariableDeclarator remoteFile LocalVariableDeclaration ReferenceType File VariableDeclarator homeFile LocalVariableDeclaration ReferenceType File VariableDeclarator implFile LocalVariableDeclaration ReferenceType File VariableDeclarator pkFile StatementExpression Assignment MemberReference remoteFile MethodInvocation remote MemberReference buildDir getClassFile = StatementExpression Assignment MemberReference modified MethodInvocation remoteFile lastModified = IfStatement BinaryOperation == MemberReference modified Literal - 1 BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The class "" MethodInvocation remote getQualifiedClassName Literal "" couldn't "" Literal ""be found on the classpath"" println ReturnStatement Literal - 1 End StatementExpression Assignment MemberReference latestModified MemberReference modified = StatementExpression Assignment MemberReference homeFile MethodInvocation home MemberReference buildDir getClassFile = StatementExpression Assignment MemberReference modified MethodInvocation homeFile lastModified = IfStatement BinaryOperation == MemberReference modified Literal - 1 BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The class "" MethodInvocation home getQualifiedClassName Literal "" couldn't be "" Literal ""found on the classpath"" println ReturnStatement Literal - 1 End StatementExpression Assignment MemberReference latestModified MethodInvocation Math MemberReference latestModified MemberReference modified max = IfStatement BinaryOperation != MemberReference primaryKey Literal null BlockStatement StatementExpression Assignment MemberReference pkFile MethodInvocation primaryKey MemberReference buildDir getClassFile = StatementExpression Assignment MemberReference modified MethodInvocation pkFile lastModified = IfStatement BinaryOperation == MemberReference modified Literal - 1 BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The class "" MethodInvocation primaryKey getQualifiedClassName Literal ""couldn't be "" Literal ""found on the classpath"" println ReturnStatement Literal - 1 End StatementExpression Assignment MemberReference latestModified MethodInvocation Math MemberReference latestModified MemberReference modified max = BlockStatement StatementExpression Assignment MemberReference pkFile Literal null = End StatementExpression Assignment MemberReference implFile MethodInvocation implementation MemberReference buildDir getClassFile = StatementExpression Assignment MemberReference modified MethodInvocation implFile lastModified = IfStatement BinaryOperation == MemberReference modified Literal - 1 BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""The class "" MethodInvocation implementation getQualifiedClassName Literal "" couldn't be found on the classpath"" println ReturnStatement Literal - 1 End LocalVariableDeclaration ReferenceType String VariableDeclarator pathToFile MethodInvocation remote getQualifiedClassName StatementExpression Assignment MemberReference pathToFile BinaryOperation + MethodInvocation pathToFile Literal '.' MemberReference File separatorChar replace Literal "".class"" = StatementExpression MethodInvocation ejbFiles MemberReference pathToFile MemberReference remoteFile put StatementExpression Assignment MemberReference pathToFile MethodInvocation home getQualifiedClassName = StatementExpression Assignment MemberReference pathToFile BinaryOperation + MethodInvocation pathToFile Literal '.' MemberReference File separatorChar replace Literal "".class"" = StatementExpression MethodInvocation ejbFiles MemberReference pathToFile MemberReference homeFile put StatementExpression Assignment MemberReference pathToFile MethodInvocation implementation getQualifiedClassName = StatementExpression Assignment MemberReference pathToFile BinaryOperation + MethodInvocation pathToFile Literal '.' MemberReference File separatorChar replace Literal "".class"" = StatementExpression MethodInvocation ejbFiles MemberReference pathToFile MemberReference implFile put IfStatement BinaryOperation != MemberReference pkFile Literal null BlockStatement StatementExpression Assignment MemberReference pathToFile MethodInvocation primaryKey getQualifiedClassName = StatementExpression Assignment MemberReference pathToFile BinaryOperation + MethodInvocation pathToFile Literal '.' MemberReference File separatorChar replace Literal "".class"" = StatementExpression MethodInvocation ejbFiles MemberReference pathToFile MemberReference pkFile put End ReturnStatement MemberReference latestModified MethodDeclaration /**
         * Examines each of the EJB stubs and skeletons in the destination
         * directory and returns the modification timestamp for the ""oldest""
         * class. If one of the stubs or skeletons cannot be found, <code>-1
         * </code> is returned.
         *
         * @param dest The directory in which the EJB stubs and skeletons are
         *             stored.
         * @return The modification timestamp for the ""oldest"" EJB stub or
         *         skeleton.  If one of the classes cannot be found, <code>-1
         *         </code> is returned.
         * @throws BuildException If the canonical path of the destination
         *                        directory cannot be found.
         */ Modifier private BasicType long destClassesModified FormalParameter ReferenceType File destDir LocalVariableDeclaration ReferenceType String VariableDeclarator classnames MethodInvocation classesToGenerate LocalVariableDeclaration BasicType long VariableDeclarator destClassesModified ClassCreator MethodInvocation getTime ReferenceType Date LocalVariableDeclaration BasicType boolean VariableDeclarator allClassesFound Literal true ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference classnames length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator pathToClass BinaryOperation + MemberReference ArraySelector MemberReference i MethodInvocation Literal '.' MemberReference File separatorChar replace classnames Literal "".class"" LocalVariableDeclaration ReferenceType File VariableDeclarator classFile ClassCreator ReferenceType File MemberReference destDir MemberReference pathToClass StatementExpression MethodInvocation ejbFiles MemberReference pathToClass MemberReference classFile put StatementExpression Assignment MemberReference allClassesFound BinaryOperation && MemberReference allClassesFound MethodInvocation classFile exists = IfStatement MemberReference allClassesFound BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator fileMod MethodInvocation classFile lastModified StatementExpression Assignment MemberReference destClassesModified MethodInvocation Math MemberReference destClassesModified MemberReference fileMod min = End End ReturnStatement TernaryExpression MemberReference allClassesFound MemberReference destClassesModified Literal - 1 MethodDeclaration /**
         * Builds an array of class names which represent the stubs and
         * skeletons which need to be generated for a given EJB.  The class
         * names are fully qualified.  Nine classes are generated for all EJBs
         * while an additional six classes are generated for beans requiring
         * RMI/IIOP access.
         *
         * @return An array of Strings representing the fully-qualified class
         *         names for the stubs and skeletons to be generated.
         */ Modifier private ReferenceType String classesToGenerate LocalVariableDeclaration ReferenceType String VariableDeclarator classnames TernaryExpression MemberReference iiop ArrayCreator ReferenceType String Literal 15 ArrayCreator ReferenceType String Literal 9 LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator remotePkg BinaryOperation + MethodInvocation remote getPackageName Literal ""."" LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator remoteClass MethodInvocation remote getClassName LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator homePkg BinaryOperation + MethodInvocation home getPackageName Literal ""."" LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator homeClass MethodInvocation home getClassName LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator implPkg BinaryOperation + MethodInvocation implementation getPackageName Literal ""."" LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator implFullClass MethodInvocation implementation getQualifiedWithUnderscores LocalVariableDeclaration BasicType int VariableDeclarator index Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference implPkg Literal ""ejb_fac_"" MemberReference implFullClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference implPkg Literal ""ejb_home_"" MemberReference implFullClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference implPkg Literal ""ejb_skel_"" MemberReference implFullClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference remotePkg Literal ""ejb_kcp_skel_"" MemberReference remoteClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference homePkg Literal ""ejb_kcp_skel_"" MemberReference homeClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference remotePkg Literal ""ejb_kcp_stub_"" MemberReference remoteClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference homePkg Literal ""ejb_kcp_stub_"" MemberReference homeClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference remotePkg Literal ""ejb_stub_"" MemberReference remoteClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference homePkg Literal ""ejb_stub_"" MemberReference homeClass = IfStatement MemberReference ! iiop BlockStatement ReturnStatement MemberReference classnames End StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""org.omg.stub."" MemberReference remotePkg Literal ""_"" MemberReference remoteClass Literal ""_Stub"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""org.omg.stub."" MemberReference homePkg Literal ""_"" MemberReference homeClass Literal ""_Stub"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""org.omg.stub."" MemberReference remotePkg Literal ""_ejb_RmiCorbaBridge_"" MemberReference remoteClass Literal ""_Tie"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""org.omg.stub."" MemberReference homePkg Literal ""_ejb_RmiCorbaBridge_"" MemberReference homeClass Literal ""_Tie"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference remotePkg Literal ""ejb_RmiCorbaBridge_"" MemberReference remoteClass = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ index classnames BinaryOperation + BinaryOperation + MemberReference homePkg Literal ""ejb_RmiCorbaBridge_"" MemberReference homeClass = ReturnStatement MemberReference classnames MethodDeclaration /**
         * Convenience method which creates a String representation of all the
         * instance variables of an EjbInfo object.
         *
         * @return A String representing the EjbInfo instance.
         */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType String VariableDeclarator s BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""EJB name: "" MemberReference name Literal ""\n\r              home:      "" MemberReference home Literal ""\n\r              remote:    "" MemberReference remote Literal ""\n\r              impl:      "" MemberReference implementation Literal ""\n\r              primaryKey: "" MemberReference primaryKey Literal ""\n\r              beantype:  "" MemberReference beantype Literal ""\n\r              cmp:       "" MemberReference cmp Literal ""\n\r              iiop:      "" MemberReference iiop Literal ""\n\r              hasession: "" MemberReference hasession LocalVariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation cmpDescriptors iterator WhileStatement MethodInvocation i hasNext BlockStatement StatementExpression Assignment MemberReference s BinaryOperation + Literal ""\n\r              CMP Descriptor: "" MethodInvocation i next += End ReturnStatement MemberReference s ClassDeclaration Modifier private static /**
     * Convenience class used to represent the fully qualified name of a Java
     * class.  It provides an easy way to retrieve components of the class name
     * in a format that is convenient for building iAS stubs and skeletons.
     *
     */ Classname FieldDeclaration Modifier private ReferenceType String VariableDeclarator qualifiedName FieldDeclaration Modifier private ReferenceType String VariableDeclarator packageName FieldDeclaration Modifier private ReferenceType String VariableDeclarator className ConstructorDeclaration Modifier public /**
         * This constructor builds an object which represents the name of a Java
         * class.
         *
         * @param qualifiedName String representing the fully qualified class
         *                      name of the Java class.
         */ Classname FormalParameter ReferenceType String qualifiedName IfStatement BinaryOperation == MemberReference qualifiedName Literal null BlockStatement ReturnStatement End StatementExpression Assignment This MemberReference qualifiedName MemberReference qualifiedName = LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation qualifiedName Literal '.' lastIndexOf IfStatement BinaryOperation == MemberReference index Literal - 1 BlockStatement StatementExpression Assignment MemberReference className MemberReference qualifiedName = StatementExpression Assignment MemberReference packageName Literal """" = BlockStatement StatementExpression Assignment MemberReference packageName MethodInvocation qualifiedName Literal 0 MemberReference index substring = StatementExpression Assignment MemberReference className MethodInvocation qualifiedName BinaryOperation + MemberReference index Literal 1 substring = End MethodDeclaration /**
         * Gets the fully qualified name of the Java class.
         *
         * @return String representing the fully qualified class name.
         */ Modifier public ReferenceType String getQualifiedClassName ReturnStatement MemberReference qualifiedName MethodDeclaration /**
         * Gets the package name for the Java class.
         *
         * @return String representing the package name for the class.
         */ Modifier public ReferenceType String getPackageName ReturnStatement MemberReference packageName MethodDeclaration /**
         * Gets the Java class name without the package structure.
         *
         * @return String representing the name for the class.
         */ Modifier public ReferenceType String getClassName ReturnStatement MemberReference className MethodDeclaration /**
         * Gets the fully qualified name of the Java class with underscores
         * separating the components of the class name rather than periods.
         * This format is used in naming some of the stub and skeleton classes
         * for the iPlanet Application Server.
         *
         * @return String representing the fully qualified class name using
         *         underscores instead of periods.
         */ Modifier public ReferenceType String getQualifiedWithUnderscores ReturnStatement MethodInvocation qualifiedName Literal '.' Literal '_' replace MethodDeclaration /**
         * Returns a File which references the class relative to the specified
         * directory.  Note that the class file may or may not exist.
         *
         * @param  directory A File referencing the base directory containing
         *                   class files.
         * @return File referencing this class.
         */ Modifier public ReferenceType File getClassFile FormalParameter ReferenceType File directory LocalVariableDeclaration ReferenceType String VariableDeclarator pathToFile BinaryOperation + MethodInvocation qualifiedName Literal '.' MemberReference File separatorChar replace Literal "".class"" ReturnStatement ClassCreator ReferenceType File MemberReference directory MemberReference pathToFile MethodDeclaration /**
         * String representation of this class name.  It returns the fully
         * qualified class name.
         *
         * @return String representing the fully qualified class name.
         */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation getQualifiedClassName ClassDeclaration Modifier private static /**
     * Thread class used to redirect output from an <code>InputStream</code> to
     * the JRE standard output.  This class may be used to redirect output from
     * an external process to the standard output.
     *
     */ RedirectOutput FieldDeclaration ReferenceType InputStream VariableDeclarator stream ConstructorDeclaration Modifier public /**
         * Constructs a new instance that will redirect output from the
         * specified stream to the standard output.
         *
         * @param stream InputStream which will be read and redirected to the
         *               standard output.
         */ RedirectOutput FormalParameter ReferenceType InputStream stream StatementExpression Assignment This MemberReference stream MemberReference stream = MethodDeclaration /**
         * Reads text from the input stream and redirects it to standard output
         * using a separate thread.
         */ Modifier public run LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator reader ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference stream LocalVariableDeclaration ReferenceType String VariableDeclarator text TryStatement WhileStatement BinaryOperation != Assignment MemberReference text MethodInvocation reader readLine = Literal null BlockStatement StatementExpression MethodInvocation System.out MemberReference text println End CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation e printStackTrace TryStatement StatementExpression MethodInvocation reader close CatchClause CatchClauseParameter IOException e ReferenceType Thread",0
379,379,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs ClassDeclaration Modifier public /**
 * Exception thrown indicating problems in a JAR Manifest
 *
 * @since Ant 1.4
 */ ManifestException ConstructorDeclaration Modifier public /**
     * Constructs an exception with the given descriptive message.
     * @param msg Description of or information about the exception.
     */ ManifestException FormalParameter ReferenceType String msg StatementExpression SuperConstructorInvocation MemberReference msg ReferenceType Exception",0
136,136,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.launch.Locator ClassDeclaration Modifier public /**
 * ClassLoader utility methods
 *
 */ LoaderUtils MethodDeclaration /**
     * Set the context classloader
     *
     * @param loader the ClassLoader to be used as the context class loader
     *      on the current thread.
     */ Modifier public static setContextClassLoader FormalParameter ReferenceType ClassLoader loader LocalVariableDeclaration ReferenceType Thread VariableDeclarator currentThread MethodInvocation Thread currentThread StatementExpression MethodInvocation currentThread MemberReference loader setContextClassLoader MethodDeclaration /**
     * JDK1.1 compatible access to set the context class loader.
     *
     * @return the ClassLoader instance being used as the context
     *      classloader on the current thread. Returns null on JDK 1.1
     */ Modifier public static ReferenceType ClassLoader getContextClassLoader LocalVariableDeclaration ReferenceType Thread VariableDeclarator currentThread MethodInvocation Thread currentThread ReturnStatement MethodInvocation currentThread getContextClassLoader MethodDeclaration /**
     * Indicates if the context class loader methods are available
     *
     * @return true if the get and set methods dealing with the context
     *      classloader are available.
     */ Modifier public static BasicType boolean isContextLoaderAvailable ReturnStatement Literal true MethodDeclaration /**
     * Normalize a source location
     *
     * @param source the source location to be normalized.
     *
     * @return the normalized source location.
     */ Modifier private static ReferenceType File normalizeSource FormalParameter ReferenceType File source IfStatement BinaryOperation != MemberReference source Literal null BlockStatement LocalVariableDeclaration ReferenceType FileUtils VariableDeclarator fileUtils MethodInvocation FileUtils newFileUtils TryStatement StatementExpression Assignment MemberReference source MethodInvocation fileUtils MethodInvocation source getAbsolutePath normalize = CatchClause CatchClauseParameter BuildException e End ReturnStatement MemberReference source MethodDeclaration /**
     * Find the directory or jar file the class has been loaded from.
     *
     * @param c the class whose location is required.
     * @return the file or jar with the class or null if we cannot
     *         determine the location.
     *
     * @since Ant 1.6
     */ Modifier public static ReferenceType File getClassSource FormalParameter ReferenceType Class c ReturnStatement MethodInvocation MethodInvocation Locator MemberReference c getClassSource normalizeSource MethodDeclaration /**
     * Find the directory or a give resource has been loaded from.
     *
     * @param c the classloader to be consulted for the source
     * @param resource the resource whose location is required.
     *
     * @return the file with the resource source or null if
     *         we cannot determine the location.
     *
     * @since Ant 1.6
     */ Modifier public static ReferenceType File getResourceSource FormalParameter ReferenceType ClassLoader c FormalParameter ReferenceType String resource IfStatement BinaryOperation == MemberReference c Literal null BlockStatement StatementExpression Assignment MemberReference c ClassReference MethodInvocation getClassLoader ReferenceType LoaderUtils = End ReturnStatement MethodInvocation MethodInvocation Locator MemberReference c MemberReference resource getResourceSource normalizeSource",1
637,637,,0
188,188,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.IOException Import java.util.Vector Import java.util.Enumeration Import org.apache.tools.ant.Task Import org.apache.tools.ant.Project Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.DirSet Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.FileList Import org.apache.tools.ant.types.PropertySet Import org.apache.tools.ant.types.Reference ClassDeclaration Modifier public /**
 * Calls a given target for all defined sub-builds. This is an extension
 * of ant for bulk project execution.
 * <p>
 * <h2> Use with directories </h2>
 * <p>
 * subant can be used with directory sets to execute a build from different directories.
 * 2 different options are offered
 * </p>
 * <ul>
 * <li>
 * run the same build file /somepath/otherpath/mybuild.xml
 * with different base directories use the genericantfile attribute
 * </li>
 * <li>if you want to run directory1/build.xml, directory2/build.xml, ....
 * use the antfile attribute. The base directory does not get set by the subant task in this case,
 * because you can specify it in each build file.
 * </li>
 * </ul>
 * @since Ant1.6
 * @ant.task name=""subant"" category=""control""
 */ SubAnt FieldDeclaration Modifier private ReferenceType Path VariableDeclarator buildpath FieldDeclaration Modifier private ReferenceType Ant VariableDeclarator ant Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator target Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator antfile Literal ""build.xml"" FieldDeclaration Modifier private ReferenceType File VariableDeclarator genericantfile Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator inheritAll Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator inheritRefs Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator failOnError Literal true FieldDeclaration Modifier private ReferenceType String VariableDeclarator output Literal null FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator properties ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator references ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator propertySets ClassCreator ReferenceType Vector MethodDeclaration /**
     * Pass output sent to System.out to the new project.
     *
     * @param output a line of output
     * @since Ant 1.6.2
     */ Modifier public handleOutput FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference ant Literal null BlockStatement StatementExpression MethodInvocation ant MemberReference output handleOutput BlockStatement StatementExpression SuperMethodInvocation MemberReference output handleOutput End MethodDeclaration /**
     * Process input into the ant task
     *
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read
     *
     * @return the number of bytes read
     *
     * @exception IOException if the data cannot be read
     *
     * @see Task#handleInput(byte[], int, int)
     *
     * @since Ant 1.6.2
     */ Modifier public BasicType int handleInput FormalParameter BasicType byte buffer FormalParameter BasicType int offset FormalParameter BasicType int length IOException IfStatement BinaryOperation != MemberReference ant Literal null BlockStatement ReturnStatement MethodInvocation ant MemberReference buffer MemberReference offset MemberReference length handleInput BlockStatement ReturnStatement SuperMethodInvocation MemberReference buffer MemberReference offset MemberReference length handleInput End MethodDeclaration /**
     * Pass output sent to System.out to the new project.
     *
     * @param output The output to log. Should not be <code>null</code>.
     *
     * @since Ant 1.6.2
     */ Modifier public handleFlush FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference ant Literal null BlockStatement StatementExpression MethodInvocation ant MemberReference output handleFlush BlockStatement StatementExpression SuperMethodInvocation MemberReference output handleFlush End MethodDeclaration /**
     * Pass output sent to System.err to the new project.
     *
     * @param output The error output to log. Should not be <code>null</code>.
     *
     * @since Ant 1.6.2
     */ Modifier public handleErrorOutput FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference ant Literal null BlockStatement StatementExpression MethodInvocation ant MemberReference output handleErrorOutput BlockStatement StatementExpression SuperMethodInvocation MemberReference output handleErrorOutput End MethodDeclaration /**
     * Pass output sent to System.err to the new project.
     *
     * @param output The error output to log. Should not be <code>null</code>.
     *
     * @since Ant 1.6.2
     */ Modifier public handleErrorFlush FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference ant Literal null BlockStatement StatementExpression MethodInvocation ant MemberReference output handleErrorFlush BlockStatement StatementExpression SuperMethodInvocation MemberReference output handleErrorFlush End MethodDeclaration /**
     * Runs the various sub-builds.
     */ Modifier public execute IfStatement BinaryOperation == MemberReference buildpath Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No buildpath specified"" End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator filenames MethodInvocation buildpath list LocalVariableDeclaration Modifier final BasicType int VariableDeclarator count MemberReference filenames length IfStatement BinaryOperation < MemberReference count Literal 1 BlockStatement StatementExpression MethodInvocation Literal ""No sub-builds to iterate on"" MemberReference Project MSG_WARN log ReturnStatement End LocalVariableDeclaration ReferenceType BuildException VariableDeclarator buildException Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator file Literal null LocalVariableDeclaration ReferenceType Throwable VariableDeclarator thrownException Literal null TryStatement LocalVariableDeclaration ReferenceType File VariableDeclarator directory Literal null StatementExpression Assignment MemberReference file ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i filenames = IfStatement MethodInvocation file isDirectory BlockStatement IfStatement BinaryOperation != MemberReference genericantfile Literal null BlockStatement StatementExpression Assignment MemberReference directory MemberReference file = StatementExpression Assignment MemberReference file MemberReference genericantfile = BlockStatement StatementExpression Assignment MemberReference file ClassCreator ReferenceType File MemberReference file MemberReference antfile = End End StatementExpression MethodInvocation MemberReference file MemberReference directory execute CatchClause CatchClauseParameter RuntimeException ex IfStatement MethodInvocation ! getProject BlockStatement ThrowStatement MemberReference ex End StatementExpression Assignment MemberReference thrownException MemberReference ex = CatchClause CatchClauseParameter Throwable ex IfStatement MethodInvocation ! getProject BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex End StatementExpression Assignment MemberReference thrownException MemberReference ex = IfStatement BinaryOperation != MemberReference thrownException Literal null BlockStatement IfStatement BinaryOperation instanceof MemberReference thrownException ReferenceType BuildException BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""File '"" MemberReference file Literal ""' failed with message '"" MethodInvocation thrownException getMessage Literal ""'."" MemberReference Project MSG_ERR log IfStatement BinaryOperation == MemberReference buildException Literal null BlockStatement StatementExpression Assignment MemberReference buildException Cast ReferenceType BuildException MemberReference thrownException = End BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Target '"" MemberReference file Literal ""' failed with message '"" MethodInvocation thrownException getMessage Literal ""'."" MemberReference Project MSG_ERR log StatementExpression MethodInvocation thrownException MemberReference System err printStackTrace IfStatement BinaryOperation == MemberReference buildException Literal null BlockStatement StatementExpression Assignment MemberReference buildException ClassCreator ReferenceType BuildException MemberReference thrownException = End End End End IfStatement BinaryOperation != MemberReference buildException Literal null BlockStatement ThrowStatement MemberReference buildException End MethodDeclaration /**
     * Runs the given target on the provided build file.
     *
     * @param  file the build file to execute
     * @param  directory the directory of the current iteration
     * @throws BuildException is the file cannot be found, read, is
     *         a directory, or the target called failed, but only if
     *         <code>failOnError</code> is <code>true</code>. Otherwise,
     *         a warning log message is simply output.
     */ Modifier private execute FormalParameter ReferenceType File file FormalParameter ReferenceType File directory BuildException IfStatement BinaryOperation || BinaryOperation || MethodInvocation ! file exists MethodInvocation file isDirectory MethodInvocation ! file canRead BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Invalid file: "" MemberReference file IfStatement MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End StatementExpression MethodInvocation MemberReference msg MemberReference Project MSG_WARN log ReturnStatement End StatementExpression Assignment MemberReference ant MethodInvocation MemberReference directory createAntTask = LocalVariableDeclaration ReferenceType String VariableDeclarator antfilename Literal null TryStatement StatementExpression Assignment MemberReference antfilename MethodInvocation file getCanonicalPath = CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e StatementExpression MethodInvocation ant MemberReference antfilename setAntfile TryStatement StatementExpression MethodInvocation ant execute CatchClause CatchClauseParameter BuildException e IfStatement MemberReference failOnError BlockStatement ThrowStatement MemberReference e End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Failure for target '"" MemberReference target Literal ""' of: "" MemberReference antfilename Literal ""\n"" MethodInvocation e getMessage MemberReference Project MSG_WARN log CatchClause CatchClauseParameter Throwable e IfStatement MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference e End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Failure for target '"" MemberReference target Literal ""' of: "" MemberReference antfilename Literal ""\n"" MethodInvocation e toString MemberReference Project MSG_WARN log StatementExpression Assignment MemberReference ant Literal null = MethodDeclaration /**
     * This method builds the file name to use in conjunction with directories.
     * 
     * <p>Defaults to ""build.xml"".
     * If <code>genericantfile</code> is set, this attribute is ignored.</p>
     *
     * @param  antfile the short build file name. Defaults to ""build.xml"".
     */ Modifier public setAntfile FormalParameter ReferenceType String antfile StatementExpression Assignment This MemberReference antfile MemberReference antfile = MethodDeclaration /**
     * This method builds a file path to use in conjunction with directories.
     * 
     * <p>Use <code>genericantfile</code>, in order to run the same build file
     * with different basedirs.</p>
     * If this attribute is set, <code>antfile</code> is ignored.
     *
     * @param afile (path of the generic ant file, absolute or relative to
     *               project base directory)
     * */ Modifier public setGenericAntfile FormalParameter ReferenceType File afile StatementExpression Assignment This MemberReference genericantfile MemberReference afile = MethodDeclaration /**
     * Sets whether to fail with a build exception on error, or go on.
     *
     * @param  failOnError the new value for this boolean flag.
     */ Modifier public setFailonerror FormalParameter BasicType boolean failOnError StatementExpression Assignment This MemberReference failOnError MemberReference failOnError = MethodDeclaration /**
     * The target to call on the different sub-builds. Set to """" to execute
     * the default target.
     * @param target the target
     * <p>
     */ Modifier public setTarget FormalParameter ReferenceType String target StatementExpression Assignment This MemberReference target MemberReference target = MethodDeclaration /**
     * Corresponds to <code>&lt;ant&gt;</code>'s
     * <code>output</code> attribute.
     *
     * @param  s the filename to write the output to.
     */ Modifier public setOutput FormalParameter ReferenceType String s StatementExpression Assignment This MemberReference output MemberReference s = MethodDeclaration /**
     * Corresponds to <code>&lt;ant&gt;</code>'s
     * <code>inheritall</code> attribute.
     *
     * @param  b the new value for this boolean flag.
     */ Modifier public setInheritall FormalParameter BasicType boolean b StatementExpression Assignment This MemberReference inheritAll MemberReference b = MethodDeclaration /**
     * Corresponds to <code>&lt;ant&gt;</code>'s
     * <code>inheritrefs</code> attribute.
     *
     * @param  b the new value for this boolean flag.
     */ Modifier public setInheritrefs FormalParameter BasicType boolean b StatementExpression Assignment This MemberReference inheritRefs MemberReference b = MethodDeclaration /**
     * Corresponds to <code>&lt;ant&gt;</code>'s
     * nested <code>&lt;property&gt;</code> element.
     *
     * @param  p the property to pass on explicitly to the sub-build.
     */ Modifier public addProperty FormalParameter ReferenceType Property p StatementExpression MethodInvocation properties MemberReference p addElement MethodDeclaration /**
     * Corresponds to <code>&lt;ant&gt;</code>'s
     * nested <code>&lt;reference&gt;</code> element.
     *
     * @param  r the reference to pass on explicitly to the sub-build.
     */ Modifier public addReference FormalParameter ReferenceType Ant ReferenceType Reference r StatementExpression MethodInvocation references MemberReference r addElement MethodDeclaration /**
     * Corresponds to <code>&lt;ant&gt;</code>'s
     * nested <code>&lt;propertyset&gt;</code> element.
     * @param ps the propertset
     */ Modifier public addPropertyset FormalParameter ReferenceType PropertySet ps StatementExpression MethodInvocation propertySets MemberReference ps addElement MethodDeclaration /**
     * Adds a directory set to the implicit build path.
     * <p>
     * <em>Note that the directories will be added to the build path
     * in no particular order, so if order is significant, one should
     * use a file list instead!</em>
     *
     * @param  set the directory set to add.
     */ Modifier public addDirset FormalParameter ReferenceType DirSet set StatementExpression MethodInvocation MethodInvocation MemberReference set addDirset getBuildpath MethodDeclaration /**
     * Adds a file set to the implicit build path.
     * <p>
     * <em>Note that the directories will be added to the build path
     * in no particular order, so if order is significant, one should
     * use a file list instead!</em>
     *
     * @param  set the file set to add.
     */ Modifier public addFileset FormalParameter ReferenceType FileSet set StatementExpression MethodInvocation MethodInvocation MemberReference set addFileset getBuildpath MethodDeclaration /**
     * Adds an ordered file list to the implicit build path.
     * <p>
     * <em>Note that contrary to file and directory sets, file lists
     * can reference non-existent files or directories!</em>
     *
     * @param  list the file list to add.
     */ Modifier public addFilelist FormalParameter ReferenceType FileList list StatementExpression MethodInvocation MethodInvocation MemberReference list addFilelist getBuildpath MethodDeclaration /**
     * Set the buildpath to be used to find sub-projects.
     *
     * @param  s an Ant Path object containing the buildpath.
     */ Modifier public setBuildpath FormalParameter ReferenceType Path s StatementExpression MethodInvocation MethodInvocation MemberReference s append getBuildpath MethodDeclaration /**
     * Creates a nested build path, and add it to the implicit build path.
     *
     * @return the newly created nested build path.
     */ Modifier public ReferenceType Path createBuildpath ReturnStatement MethodInvocation MethodInvocation createPath getBuildpath MethodDeclaration /**
     * Creates a nested <code>&lt;buildpathelement&gt;</code>,
     * and add it to the implicit build path.
     *
     * @return the newly created nested build path element.
     */ Modifier public ReferenceType Path ReferenceType PathElement createBuildpathElement ReturnStatement MethodInvocation MethodInvocation createPathElement getBuildpath MethodDeclaration /**
     * Gets the implicit build path, creating it if <code>null</code>.
     *
     * @return the implicit build path.
     */ Modifier private ReferenceType Path getBuildpath IfStatement BinaryOperation == MemberReference buildpath Literal null BlockStatement StatementExpression Assignment MemberReference buildpath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MemberReference buildpath MethodDeclaration /**
     * Buildpath to use, by reference.
     *
     * @param  r a reference to an Ant Path object containing the buildpath.
     */ Modifier public setBuildpathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createBuildpath MethodDeclaration /**
     * Creates the &lt;ant&gt; task configured to run a specific target.
     *
     * @param directory : if not null the directory where the build should run
     *
     * @return the ant task, configured with the explicit properties and
     *         references necessary to run the sub-build.
     */ Modifier private ReferenceType Ant createAntTask FormalParameter ReferenceType File directory LocalVariableDeclaration ReferenceType Ant VariableDeclarator ant Cast ReferenceType Ant MethodInvocation MethodInvocation Literal ""ant"" createTask getProject StatementExpression MethodInvocation ant MethodInvocation getOwningTarget setOwningTarget StatementExpression MethodInvocation ant MethodInvocation getTaskName setTaskName StatementExpression MethodInvocation ant init IfStatement BinaryOperation && BinaryOperation != MemberReference target Literal null BinaryOperation > MethodInvocation target length Literal 0 BlockStatement StatementExpression MethodInvocation ant MemberReference target setTarget End IfStatement BinaryOperation != MemberReference output Literal null BlockStatement StatementExpression MethodInvocation ant MemberReference output setOutput End IfStatement BinaryOperation != MemberReference directory Literal null BlockStatement StatementExpression MethodInvocation ant MemberReference directory setDir End StatementExpression MethodInvocation ant MemberReference inheritAll setInheritAll ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator i MethodInvocation properties elements MethodInvocation i hasMoreElements BlockStatement StatementExpression MethodInvocation MethodInvocation ant createProperty Cast ReferenceType Property MethodInvocation i nextElement copyProperty End ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator i MethodInvocation propertySets elements MethodInvocation i hasMoreElements BlockStatement StatementExpression MethodInvocation ant Cast ReferenceType PropertySet MethodInvocation i nextElement addPropertyset End StatementExpression MethodInvocation ant MemberReference inheritRefs setInheritRefs ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator i MethodInvocation references elements MethodInvocation i hasMoreElements BlockStatement StatementExpression MethodInvocation ant Cast ReferenceType Ant ReferenceType Reference MethodInvocation i nextElement addReference End ReturnStatement MemberReference ant MethodDeclaration /**
     * Assigns an Ant property to another.
     *
     * @param  to the destination property whose content is modified.
     * @param  from the source property whose content is copied.
     */ Modifier private static copyProperty FormalParameter ReferenceType Property to FormalParameter ReferenceType Property from StatementExpression MethodInvocation to MethodInvocation from getName setName IfStatement BinaryOperation != MethodInvocation from getValue Literal null BlockStatement StatementExpression MethodInvocation to MethodInvocation from getValue setValue End IfStatement BinaryOperation != MethodInvocation from getFile Literal null BlockStatement StatementExpression MethodInvocation to MethodInvocation from getFile setFile End IfStatement BinaryOperation != MethodInvocation from getResource Literal null BlockStatement StatementExpression MethodInvocation to MethodInvocation from getResource setResource End IfStatement BinaryOperation != MethodInvocation from getPrefix Literal null BlockStatement StatementExpression MethodInvocation to MethodInvocation from getPrefix setPrefix End IfStatement BinaryOperation != MethodInvocation from getRefid Literal null BlockStatement StatementExpression MethodInvocation to MethodInvocation from getRefid setRefid End IfStatement BinaryOperation != MethodInvocation from getEnvironment Literal null BlockStatement StatementExpression MethodInvocation to MethodInvocation from getEnvironment setEnvironment End IfStatement BinaryOperation != MethodInvocation from getClasspath Literal null BlockStatement StatementExpression MethodInvocation to MethodInvocation from getClasspath setClasspath End ReferenceType Task",0
420,420,,0
560,560,,0
542,542,,0
561,561,,0
540,540,,0
258,258,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters Import java.io.IOException Import java.io.Reader Import java.util.LinkedList Import org.apache.tools.ant.types.Parameter Import org.apache.tools.ant.util.LineTokenizer ClassDeclaration Modifier public final /**
 * Reads the last <code>n</code> lines of a stream. (Default is last10 lines.)
 *
 * Example:
 *
 * <pre>&lt;tailfilter lines=&quot;3&quot;/&gt;</pre>
 *
 * Or:
 *
 * <pre>&lt;filterreader classname=&quot;org.apache.tools.ant.filters.TailFilter&quot;&gt;
 *   &lt;param name=&quot;lines&quot; value=&quot;3&quot;/&gt;
 * &lt;/filterreader&gt;</pre>
 *
 */ TailFilter FieldDeclaration /** Parameter name for the number of lines to be returned. */ Modifier private final static ReferenceType String VariableDeclarator LINES_KEY Literal ""lines"" FieldDeclaration /** Parameter name for the number of lines to be skipped. */ Modifier private final static ReferenceType String VariableDeclarator SKIP_KEY Literal ""skip"" FieldDeclaration /** Default number of lines to show */ Modifier private final static BasicType int VariableDeclarator DEFAULT_NUM_LINES Literal 10 FieldDeclaration /** Number of lines to be returned in the filtered stream. */ Modifier private BasicType long VariableDeclarator lines MemberReference DEFAULT_NUM_LINES FieldDeclaration /** Number of lines to be skipped. */ Modifier private BasicType long VariableDeclarator skip Literal 0 FieldDeclaration /** Whether or not read-ahead been completed. */ Modifier private BasicType boolean VariableDeclarator completedReadAhead Literal false FieldDeclaration /** A line tokenizer */ Modifier private ReferenceType LineTokenizer VariableDeclarator lineTokenizer Literal null FieldDeclaration /** the current line from the input stream */ Modifier private ReferenceType String VariableDeclarator line Literal null FieldDeclaration /** the position in the current line */ Modifier private BasicType int VariableDeclarator linePos Literal 0 FieldDeclaration Modifier private ReferenceType LinkedList VariableDeclarator lineList ClassCreator ReferenceType LinkedList ConstructorDeclaration Modifier public /**
     * Constructor for ""dummy"" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */ TailFilter StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be <code>null</code>.
     */ TailFilter FormalParameter Modifier final ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in StatementExpression Assignment MemberReference lineTokenizer ClassCreator ReferenceType LineTokenizer = StatementExpression MethodInvocation lineTokenizer Literal true setIncludeDelims MethodDeclaration /**
     * Returns the next character in the filtered stream. If the read-ahead
     * has been completed, the next character in the buffer is returned.
     * Otherwise, the stream is read to the end and buffered (with the buffer
     * growing as necessary), then the appropriate position in the buffer is
     * set to read from.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */ Modifier public final BasicType int read IOException IfStatement MethodInvocation ! getInitialized BlockStatement StatementExpression MethodInvocation initialize StatementExpression MethodInvocation Literal true setInitialized End WhileStatement BinaryOperation || BinaryOperation == MemberReference line Literal null BinaryOperation == MethodInvocation line length Literal 0 BlockStatement StatementExpression Assignment MemberReference line MethodInvocation lineTokenizer MemberReference in getToken = StatementExpression Assignment MemberReference line MethodInvocation MemberReference line tailFilter = IfStatement BinaryOperation == MemberReference line Literal null BlockStatement ReturnStatement Literal - 1 End StatementExpression Assignment MemberReference linePos Literal 0 = End LocalVariableDeclaration BasicType int VariableDeclarator ch MethodInvocation line MemberReference linePos charAt StatementExpression MemberReference ++ linePos IfStatement BinaryOperation == MemberReference linePos MethodInvocation line length BlockStatement StatementExpression Assignment MemberReference line Literal null = End ReturnStatement MemberReference ch MethodDeclaration /**
     * Sets the number of lines to be returned in the filtered stream.
     *
     * @param lines the number of lines to be returned in the filtered stream
     */ Modifier public final setLines FormalParameter Modifier final BasicType long lines StatementExpression Assignment This MemberReference lines MemberReference lines = MethodDeclaration /**
     * Returns the number of lines to be returned in the filtered stream.
     *
     * @return the number of lines to be returned in the filtered stream
     */ Modifier private final BasicType long getLines ReturnStatement MemberReference lines MethodDeclaration /**
     * Sets the number of lines to be skipped in the filtered stream.
     *
     * @param skip the number of lines to be skipped in the filtered stream
     */ Modifier public final setSkip FormalParameter Modifier final BasicType long skip StatementExpression Assignment This MemberReference skip MemberReference skip = MethodDeclaration /**
     * Returns the number of lines to be skipped in the filtered stream.
     *
     * @return the number of lines to be skipped in the filtered stream
     */ Modifier private final BasicType long getSkip ReturnStatement MemberReference skip MethodDeclaration /**
     * Creates a new TailFilter using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be <code>null</code>.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */ Modifier public final ReferenceType Reader chain FormalParameter Modifier final ReferenceType Reader rdr LocalVariableDeclaration ReferenceType TailFilter VariableDeclarator newFilter ClassCreator ReferenceType TailFilter MemberReference rdr StatementExpression MethodInvocation newFilter MethodInvocation getLines setLines StatementExpression MethodInvocation newFilter MethodInvocation getSkip setSkip StatementExpression MethodInvocation newFilter Literal true setInitialized ReturnStatement MemberReference newFilter MethodDeclaration /**
     * Scans the parameters list for the ""lines"" parameter and uses
     * it to set the number of lines to be returned in the filtered stream.
     * also scan for ""skip"" parameter.
     */ Modifier private final initialize LocalVariableDeclaration ReferenceType Parameter VariableDeclarator params MethodInvocation getParameters IfStatement BinaryOperation != MemberReference params Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference params length MemberReference ++ i BlockStatement IfStatement MethodInvocation LINES_KEY MemberReference ArraySelector MemberReference i MethodInvocation getName params equals BlockStatement StatementExpression MethodInvocation ClassCreator MethodInvocation longValue ReferenceType Long MemberReference ArraySelector MemberReference i MethodInvocation getValue params setLines ContinueStatement End IfStatement MethodInvocation SKIP_KEY MemberReference ArraySelector MemberReference i MethodInvocation getName params equals BlockStatement StatementExpression Assignment MemberReference skip ClassCreator MethodInvocation longValue ReferenceType Long MemberReference ArraySelector MemberReference i MethodInvocation getValue params = ContinueStatement End End End MethodDeclaration /**
     * implement a tail filter on a stream of lines.
     * line = null is the end of the stream.
     * @return """" while reading in the lines,
     *         line while outputting the lines
     *         null at the end of outputting the lines
     */ Modifier private ReferenceType String tailFilter FormalParameter ReferenceType String line IfStatement MemberReference ! completedReadAhead BlockStatement IfStatement BinaryOperation != MemberReference line Literal null BlockStatement StatementExpression MethodInvocation lineList MemberReference line add IfStatement BinaryOperation == MemberReference lines Literal - 1 BlockStatement IfStatement BinaryOperation > MethodInvocation lineList size MemberReference skip BlockStatement ReturnStatement Cast ReferenceType String MethodInvocation lineList removeFirst End BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator linesToKeep BinaryOperation + MemberReference lines TernaryExpression BinaryOperation > MemberReference skip Literal 0 MemberReference skip Literal 0 IfStatement BinaryOperation < MemberReference linesToKeep MethodInvocation lineList size BlockStatement StatementExpression MethodInvocation lineList removeFirst End End ReturnStatement Literal """" End StatementExpression Assignment MemberReference completedReadAhead Literal true = IfStatement BinaryOperation > MemberReference skip Literal 0 BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference skip MemberReference ++ i BlockStatement StatementExpression MethodInvocation lineList removeLast End End IfStatement BinaryOperation > MemberReference lines Literal - 1 BlockStatement WhileStatement BinaryOperation > MethodInvocation lineList size MemberReference lines BlockStatement StatementExpression MethodInvocation lineList removeFirst End End End IfStatement BinaryOperation > MethodInvocation lineList size Literal 0 BlockStatement ReturnStatement Cast ReferenceType String MethodInvocation lineList removeFirst End ReturnStatement Literal null ReferenceType BaseParamFilterReader ReferenceType ChainableReader",0
414,414,,0
237,237,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.j2ee Import java.io.File Import java.util.Enumeration Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Task ClassDeclaration Modifier public /**
 *  Controls hot deployment tools for J2EE servers.
 *
 *  This class is used as a framework for the creation of vendor specific
 *  hot deployment tools.
 *
 *
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.HotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.AbstractHotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.GenericHotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.WebLogicHotDeploymentTool
 */ ServerDeploy FieldDeclaration /** The action to be performed.  IE: ""deploy"", ""delete"", etc... **/ Modifier private ReferenceType String VariableDeclarator action FieldDeclaration /** The source (fully-qualified path) to the component being deployed **/ Modifier private ReferenceType File VariableDeclarator source FieldDeclaration /** The vendor specific tool for deploying the component **/ Modifier private ReferenceType Vector VariableDeclarator vendorTools ClassCreator ReferenceType Vector MethodDeclaration /**
     *  Creates a generic deployment tool.
     *  <p>Ant calls this method on creation to handle embedded ""generic"" elements
     *  in the ServerDeploy task.
     *  @param tool An instance of GenericHotDeployment tool, passed in by Ant.
     */ Modifier public addGeneric FormalParameter ReferenceType GenericHotDeploymentTool tool StatementExpression MethodInvocation tool This setTask StatementExpression MethodInvocation vendorTools MemberReference tool addElement MethodDeclaration /**
     *  Creates a WebLogic deployment tool, for deployment to WebLogic servers.
     *  <p>Ant calls this method on creation to handle embedded ""weblogic"" elements
     *  in the ServerDeploy task.
     *  @param tool An instance of WebLogicHotDeployment tool, passed in by Ant.
     */ Modifier public addWeblogic FormalParameter ReferenceType WebLogicHotDeploymentTool tool StatementExpression MethodInvocation tool This setTask StatementExpression MethodInvocation vendorTools MemberReference tool addElement MethodDeclaration /**
     *  Creates a JOnAS deployment tool, for deployment to JOnAS servers.
     *  <p>Ant calls this method on creation to handle embedded ""jonas"" elements
     *  in the ServerDeploy task.
     *  @param tool An instance of JonasHotDeployment tool, passed in by Ant.
     */ Modifier public addJonas FormalParameter ReferenceType JonasHotDeploymentTool tool StatementExpression MethodInvocation tool This setTask StatementExpression MethodInvocation vendorTools MemberReference tool addElement MethodDeclaration /**
     *  Execute the task.
     *  <p>This method calls the deploy() method on each of the vendor-specific tools
     *  in the <code>vendorTools</code> collection.  This performs the actual
     *  process of deployment on each tool.
     *  @exception org.apache.tools.ant.BuildException if the attributes
     *  are invalid or incomplete, or a failure occurs in the deployment process.
     */ Modifier public execute BuildException ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation vendorTools elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType HotDeploymentTool VariableDeclarator tool Cast ReferenceType HotDeploymentTool MethodInvocation e nextElement StatementExpression MethodInvocation tool validateAttributes StatementExpression MethodInvocation tool deploy End MethodDeclaration /**
     *  Returns the action field.
     *  @return A string representing the ""action"" attribute.
     */ Modifier public ReferenceType String getAction ReturnStatement MemberReference action MethodDeclaration /**
     *  The action to be performed, usually ""deploy""; required.
     *   Some tools support additional actions, such as ""delete"", ""list"", ""undeploy"", ""update""...
     *  @param action A String representing the ""action"" attribute.
     */ Modifier public setAction FormalParameter ReferenceType String action StatementExpression Assignment This MemberReference action MemberReference action = MethodDeclaration /**
     *  Returns the source field (the path/filename of the component to be
     *  deployed.
     *  @return A File object representing the ""source"" attribute.
     */ Modifier public ReferenceType File getSource ReturnStatement MemberReference source MethodDeclaration /**
     *  The filename of the component to be deployed; optional
     *  depending upon the tool and the action.
     *  @param source String representing the ""source"" attribute.
     */ Modifier public setSource FormalParameter ReferenceType File source StatementExpression Assignment This MemberReference source MemberReference source = ReferenceType Task",0
506,506,,1
162,162,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.sitraka Import java.io.File Import java.io.IOException Import java.util.Vector Import javax.xml.transform.OutputKeys Import javax.xml.transform.Result Import javax.xml.transform.Source Import javax.xml.transform.Transformer Import javax.xml.transform.TransformerFactory Import javax.xml.transform.dom.DOMSource Import javax.xml.transform.stream.StreamResult Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.Path Import org.w3c.dom.Document ClassDeclaration Modifier public /**
 * Runs the JProbe Coverage 3.0 snapshot merge utility.
 *
 * @ant.task name=""jpcovreport"" category=""metrics""
 */ CovReport FieldDeclaration Modifier private ReferenceType String VariableDeclarator format Literal null FieldDeclaration /** the name of the output snapshot, mandatory */ Modifier private ReferenceType File VariableDeclarator tofile Literal null FieldDeclaration /** type of report, optional */ Modifier private ReferenceType String VariableDeclarator type Literal null FieldDeclaration /** threshold value for printing methods, optional */ Modifier private ReferenceType Integer VariableDeclarator percent Literal null FieldDeclaration /** comma separated list of filters (???)*/ Modifier private ReferenceType String VariableDeclarator filters Literal null FieldDeclaration /** name of the snapshot file to create report from */ Modifier private ReferenceType File VariableDeclarator snapshot Literal null FieldDeclaration /** sourcepath to use */ Modifier private ReferenceType Path VariableDeclarator sourcePath Literal null FieldDeclaration /** include the text for each line of code (xml report verydetailed)*/ Modifier private BasicType boolean VariableDeclarator includeSource Literal true FieldDeclaration Modifier private ReferenceType Path VariableDeclarator coveragePath Literal null FieldDeclaration /** */ Modifier private ReferenceType Reference VariableDeclarator reference Literal null ClassDeclaration Modifier public static ReportFormat MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""html"" Literal ""text"" Literal ""xml"" ReferenceType EnumeratedAttribute MethodDeclaration /**
     * set the format of the report: ""html"", ""text"", or ""xml""
     */ Modifier public setFormat FormalParameter ReferenceType ReportFormat value StatementExpression Assignment This MemberReference format MethodInvocation value getValue = ClassDeclaration Modifier public static ReportType MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""executive"" Literal ""summary"" Literal ""detailed"" Literal ""verydetailed"" ReferenceType EnumeratedAttribute MethodDeclaration /**
     * The type of report to be generated: ""executive"", ""summary"",
     * ""detailed"" or ""verydetailed"".
     */ Modifier public setType FormalParameter ReferenceType ReportType value StatementExpression Assignment This MemberReference type MethodInvocation value getValue = MethodDeclaration /**
     * If true, include text of the source code lines.
     * Only applies to format=""xml"" and type=""verydetailed""
     */ Modifier public setIncludesource FormalParameter BasicType boolean value StatementExpression Assignment This MemberReference includeSource MemberReference value = MethodDeclaration /**
     * A numeric value for the threshold for printing methods.
     * Must be between 0 and 100.
     */ Modifier public setPercent FormalParameter ReferenceType Integer value StatementExpression Assignment This MemberReference percent MemberReference value = MethodDeclaration /**
     * set the filters
     * @ant.attribute ignore=""true""
     */ Modifier public setFilters FormalParameter ReferenceType String values StatementExpression Assignment This MemberReference filters MemberReference values = MethodDeclaration /**
     * Adds a path to source files.
     */ Modifier public ReferenceType Path createSourcepath IfStatement BinaryOperation == MemberReference sourcePath Literal null BlockStatement StatementExpression Assignment MemberReference sourcePath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation sourcePath createPath MethodDeclaration /**
     * The name of the snapshot file that is the source to the report.
     */ Modifier public setSnapshot FormalParameter ReferenceType File value StatementExpression Assignment This MemberReference snapshot MemberReference value = MethodDeclaration /**
     * The name of the generated output file.
     */ Modifier public setTofile FormalParameter ReferenceType File value StatementExpression Assignment This MemberReference tofile MemberReference value = MethodDeclaration /**
     * @todo needs to be removed
     * @ant.element ignore=""true""
     */ Modifier public ReferenceType Path createCoveragepath IfStatement BinaryOperation == MemberReference coveragePath Literal null BlockStatement StatementExpression Assignment MemberReference coveragePath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation coveragePath createPath MethodDeclaration /**
     * Adds a set of classes whose coverage information will be
     * checked against.
     */ Modifier public ReferenceType Reference createReference IfStatement BinaryOperation == MemberReference reference Literal null BlockStatement StatementExpression Assignment MemberReference reference ClassCreator ReferenceType Reference = End ReturnStatement MemberReference reference ConstructorDeclaration Modifier public CovReport MethodDeclaration /** check for mandatory options */ Modifier protected checkOptions BuildException IfStatement BinaryOperation == MemberReference tofile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""'tofile' attribute must be set."" End IfStatement BinaryOperation == MemberReference snapshot Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""'snapshot' attribute must be set."" End IfStatement BinaryOperation == MethodInvocation getHome Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""'home' attribute must be set to JProbe home directory"" End LocalVariableDeclaration ReferenceType File VariableDeclarator jar MethodInvocation findCoverageJar IfStatement MethodInvocation ! jar exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Cannot find Coverage directory: "" MethodInvocation getHome End IfStatement BinaryOperation && BinaryOperation != MemberReference reference Literal null Literal ! MethodInvocation MemberReference format equals ""xml"" BlockStatement StatementExpression MethodInvocation Literal ""Ignored reference. It cannot be used in non XML report."" log StatementExpression Assignment MemberReference reference Literal null = End MethodDeclaration Modifier public execute BuildException StatementExpression MethodInvocation checkOptions TryStatement LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmdl ClassCreator ReferenceType Commandline StatementExpression MethodInvocation cmdl MethodInvocation Literal ""jpcovreport"" findExecutable setExecutable LocalVariableDeclaration ReferenceType String VariableDeclarator params MethodInvocation getParameters ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference params length MemberReference ++ i BlockStatement StatementExpression MethodInvocation cmdl MethodInvocation MemberReference ArraySelector MemberReference i params setValue createArgument End LocalVariableDeclaration ReferenceType LogStreamHandler VariableDeclarator handler ClassCreator ReferenceType LogStreamHandler This MemberReference Project MSG_INFO MemberReference Project MSG_WARN LocalVariableDeclaration ReferenceType Execute VariableDeclarator exec ClassCreator ReferenceType Execute MemberReference handler StatementExpression MethodInvocation MethodInvocation cmdl describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation exec MethodInvocation cmdl getCommandline setCommandline LocalVariableDeclaration BasicType int VariableDeclarator exitValue MethodInvocation exec execute IfStatement MethodInvocation Execute MemberReference exitValue isFailure BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""JProbe Coverage Report failed ("" MemberReference exitValue Literal "")"" End StatementExpression MethodInvocation BinaryOperation + Literal ""coveragePath: "" MemberReference coveragePath MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation BinaryOperation + Literal ""format: "" MemberReference format MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation && BinaryOperation != MemberReference reference Literal null Literal MethodInvocation MemberReference format equals ""xml"" BlockStatement StatementExpression MethodInvocation reference createEnhancedXMLReport End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Failed to execute JProbe Coverage Report."" MemberReference e MethodDeclaration Modifier protected ReferenceType String getParameters LocalVariableDeclaration ReferenceType Vector VariableDeclarator v ClassCreator ReferenceType Vector IfStatement BinaryOperation != MemberReference format Literal null BlockStatement StatementExpression MethodInvocation v BinaryOperation + Literal ""-format="" MemberReference format addElement End IfStatement BinaryOperation != MemberReference type Literal null BlockStatement StatementExpression MethodInvocation v BinaryOperation + Literal ""-type="" MemberReference type addElement End IfStatement BinaryOperation != MemberReference percent Literal null BlockStatement StatementExpression MethodInvocation v BinaryOperation + Literal ""-percent="" MemberReference percent addElement End IfStatement BinaryOperation != MemberReference filters Literal null BlockStatement StatementExpression MethodInvocation v BinaryOperation + Literal ""-filters="" MemberReference filters addElement End StatementExpression MethodInvocation v BinaryOperation + Literal ""-output="" MethodInvocation MethodInvocation MethodInvocation tofile getPath resolveFile getProject addElement StatementExpression MethodInvocation v BinaryOperation + Literal ""-snapshot="" MethodInvocation MethodInvocation MethodInvocation snapshot getPath resolveFile getProject addElement IfStatement BinaryOperation == MemberReference sourcePath Literal null BlockStatement StatementExpression Assignment MemberReference sourcePath ClassCreator ReferenceType Path MethodInvocation getProject = StatementExpression MethodInvocation sourcePath MethodInvocation MethodInvocation MethodInvocation Literal ""."" resolveFile getProject setLocation createPath End StatementExpression MethodInvocation v BinaryOperation + Literal ""-sourcepath="" MemberReference sourcePath addElement IfStatement BinaryOperation && Literal MethodInvocation MemberReference format equalsIgnoreCase ""verydetailed"" Literal MethodInvocation MemberReference type equalsIgnoreCase ""xml"" BlockStatement StatementExpression MethodInvocation v BinaryOperation + Literal ""-inc_src_text="" TernaryExpression MemberReference includeSource Literal ""on"" Literal ""off"" addElement End LocalVariableDeclaration ReferenceType String VariableDeclarator params ArrayCreator ReferenceType String MethodInvocation v size StatementExpression MethodInvocation v MemberReference params copyInto ReturnStatement MemberReference params ClassDeclaration Modifier public Reference FieldDeclaration Modifier protected ReferenceType Path VariableDeclarator classPath FieldDeclaration Modifier protected ReferenceType ReportFilters VariableDeclarator filters MethodDeclaration Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == MemberReference classPath Literal null BlockStatement StatementExpression Assignment MemberReference classPath ClassCreator ReferenceType Path This CovReport MethodInvocation getProject = End ReturnStatement MethodInvocation classPath createPath MethodDeclaration Modifier public ReferenceType ReportFilters createFilters IfStatement BinaryOperation == MemberReference filters Literal null BlockStatement StatementExpression Assignment MemberReference filters ClassCreator ReferenceType ReportFilters = End ReturnStatement MemberReference filters MethodDeclaration Modifier protected createEnhancedXMLReport BuildException IfStatement BinaryOperation == MemberReference classPath Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Need a 'classpath' element."" End LocalVariableDeclaration ReferenceType String VariableDeclarator paths MethodInvocation classPath list IfStatement BinaryOperation == MemberReference paths length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Coverage path is invalid. It does not contain any existing path."" End IfStatement BinaryOperation || BinaryOperation == MemberReference filters Literal null BinaryOperation == MethodInvocation filters size Literal 0 BlockStatement StatementExpression MethodInvocation createFilters StatementExpression MethodInvocation Literal ""Adding default include filter to *.*()"" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType ReportFilters ReferenceType Include VariableDeclarator include ClassCreator ReferenceType ReportFilters ReferenceType Include StatementExpression MethodInvocation filters MemberReference include addInclude End TryStatement StatementExpression MethodInvocation Literal ""Creating enhanced XML report"" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType XMLReport VariableDeclarator report ClassCreator ReferenceType XMLReport This CovReport MemberReference tofile StatementExpression MethodInvocation report MemberReference filters setReportFilters StatementExpression MethodInvocation report ClassCreator ReferenceType File MethodInvocation MethodInvocation getParent getHome setJProbehome LocalVariableDeclaration ReferenceType Document VariableDeclarator doc MethodInvocation report MemberReference paths createDocument LocalVariableDeclaration ReferenceType TransformerFactory VariableDeclarator tfactory MethodInvocation TransformerFactory newInstance LocalVariableDeclaration ReferenceType Transformer VariableDeclarator transformer MethodInvocation tfactory newTransformer StatementExpression MethodInvocation transformer MemberReference OutputKeys INDENT Literal ""yes"" setOutputProperty StatementExpression MethodInvocation transformer MemberReference OutputKeys METHOD Literal ""xml"" setOutputProperty LocalVariableDeclaration ReferenceType Source VariableDeclarator src ClassCreator ReferenceType DOMSource MemberReference doc LocalVariableDeclaration ReferenceType Result VariableDeclarator res ClassCreator ReferenceType StreamResult BinaryOperation + Literal ""file:///"" MethodInvocation tofile toString StatementExpression MethodInvocation transformer MemberReference src MemberReference res transform CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Error while performing enhanced XML "" Literal ""report from file "" MemberReference tofile MemberReference e ReferenceType CovBase",0
567,567,,0
512,512,,0
359,359,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.io.FileOutputStream Import java.io.IOException Import java.io.OutputStream Import java.io.OutputStreamWriter Import java.io.PrintStream Import java.io.Writer Import java.util.Hashtable Import java.util.Stack Import java.util.Enumeration Import javax.xml.parsers.DocumentBuilder Import javax.xml.parsers.DocumentBuilderFactory Import org.apache.tools.ant.util.DOMElementWriter Import org.apache.tools.ant.util.StringUtils Import org.w3c.dom.Document Import org.w3c.dom.Element Import org.w3c.dom.Text ClassDeclaration Modifier public /**
 * Generates a file in the current directory with
 * an XML description of what happened during a build.
 * The default filename is ""log.xml"", but this can be overridden
 * with the property <code>XmlLogger.file</code>.
 *
 * This implementation assumes in its sanity checking that only one
 * thread runs a particular target/task at a time. This is enforced
 * by the way that parallel builds and antcalls are done - and
 * indeed all but the simplest of tasks could run into problems
 * if executed in parallel.
 *
 * @see Project#addBuildListener(BuildListener)
 */ XmlLogger FieldDeclaration Modifier private BasicType int VariableDeclarator msgOutputLevel MemberReference Project MSG_DEBUG FieldDeclaration Modifier private ReferenceType PrintStream VariableDeclarator outStream FieldDeclaration /** DocumentBuilder to use when creating the document to start with. */ Modifier private static ReferenceType DocumentBuilder VariableDeclarator builder MethodInvocation getDocumentBuilder MethodDeclaration /**
     * Returns a default DocumentBuilder instance or throws an
     * ExceptionInInitializerError if it can't be created.
     *
     * @return a default DocumentBuilder instance.
     */ Modifier private static ReferenceType DocumentBuilder getDocumentBuilder TryStatement ReturnStatement MethodInvocation DocumentBuilderFactory MethodInvocation newDocumentBuilder newInstance CatchClause CatchClauseParameter Exception exc ThrowStatement ClassCreator ReferenceType ExceptionInInitializerError MemberReference exc FieldDeclaration /** XML element name for a build. */ Modifier private final static ReferenceType String VariableDeclarator BUILD_TAG Literal ""build"" FieldDeclaration /** XML element name for a target. */ Modifier private final static ReferenceType String VariableDeclarator TARGET_TAG Literal ""target"" FieldDeclaration /** XML element name for a task. */ Modifier private final static ReferenceType String VariableDeclarator TASK_TAG Literal ""task"" FieldDeclaration /** XML element name for a message. */ Modifier private final static ReferenceType String VariableDeclarator MESSAGE_TAG Literal ""message"" FieldDeclaration /** XML attribute name for a name. */ Modifier private final static ReferenceType String VariableDeclarator NAME_ATTR Literal ""name"" FieldDeclaration /** XML attribute name for a time. */ Modifier private final static ReferenceType String VariableDeclarator TIME_ATTR Literal ""time"" FieldDeclaration /** XML attribute name for a message priority. */ Modifier private final static ReferenceType String VariableDeclarator PRIORITY_ATTR Literal ""priority"" FieldDeclaration /** XML attribute name for a file location. */ Modifier private final static ReferenceType String VariableDeclarator LOCATION_ATTR Literal ""location"" FieldDeclaration /** XML attribute name for an error description. */ Modifier private final static ReferenceType String VariableDeclarator ERROR_ATTR Literal ""error"" FieldDeclaration /** XML element name for a stack trace. */ Modifier private final static ReferenceType String VariableDeclarator STACKTRACE_TAG Literal ""stacktrace"" FieldDeclaration /** The complete log document for this build. */ Modifier private ReferenceType Document VariableDeclarator doc MethodInvocation builder newDocument FieldDeclaration /** Mapping for when tasks started (Task to TimedElement). */ Modifier private ReferenceType Hashtable VariableDeclarator tasks ClassCreator ReferenceType Hashtable FieldDeclaration /** Mapping for when targets started (Task to TimedElement). */ Modifier private ReferenceType Hashtable VariableDeclarator targets ClassCreator ReferenceType Hashtable FieldDeclaration /**
     * Mapping of threads to stacks of elements
     * (Thread to Stack of TimedElement).
     */ Modifier private ReferenceType Hashtable VariableDeclarator threadStacks ClassCreator ReferenceType Hashtable FieldDeclaration /**
     * When the build started.
     */ Modifier private ReferenceType TimedElement VariableDeclarator buildElement Literal null ClassDeclaration Modifier private static /** Utility class representing the time an element started. */ TimedElement FieldDeclaration /**
         * Start time in milliseconds
         * (as returned by <code>System.currentTimeMillis()</code>).
         */ Modifier private BasicType long VariableDeclarator startTime FieldDeclaration /** Element created at the start time. */ Modifier private ReferenceType Element VariableDeclarator element MethodDeclaration Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation element getTagName Literal "":"" MethodInvocation element Literal ""name"" getAttribute ConstructorDeclaration Modifier public /**
     *  Constructs a new BuildListener that logs build events to an XML file.
     */ XmlLogger MethodDeclaration /**
     * Fired when the build starts, this builds the top-level element for the
     * document and remembers the time of the start of the build.
     *
     * @param event Ignored.
     */ Modifier public buildStarted FormalParameter ReferenceType BuildEvent event StatementExpression Assignment MemberReference buildElement ClassCreator ReferenceType TimedElement = StatementExpression Assignment MemberReference buildElement startTime MethodInvocation System currentTimeMillis = StatementExpression Assignment MemberReference buildElement element MethodInvocation doc MemberReference BUILD_TAG createElement = MethodDeclaration /**
     * Fired when the build finishes, this adds the time taken and any
     * error stacktrace to the build element and writes the document to disk.
     *
     * @param event An event with any relevant extra information.
     *              Will not be <code>null</code>.
     */ Modifier public buildFinished FormalParameter ReferenceType BuildEvent event LocalVariableDeclaration BasicType long VariableDeclarator totalTime BinaryOperation - MethodInvocation System currentTimeMillis MemberReference buildElement startTime StatementExpression MethodInvocation buildElement.element MemberReference TIME_ATTR MethodInvocation DefaultLogger MemberReference totalTime formatTime setAttribute IfStatement BinaryOperation != MethodInvocation event getException Literal null BlockStatement StatementExpression MethodInvocation buildElement.element MemberReference ERROR_ATTR MethodInvocation event MethodInvocation toString getException setAttribute LocalVariableDeclaration ReferenceType Throwable VariableDeclarator t MethodInvocation event getException LocalVariableDeclaration ReferenceType Text VariableDeclarator errText MethodInvocation doc MethodInvocation StringUtils MemberReference t getStackTrace createCDATASection LocalVariableDeclaration ReferenceType Element VariableDeclarator stacktrace MethodInvocation doc MemberReference STACKTRACE_TAG createElement StatementExpression MethodInvocation stacktrace MemberReference errText appendChild StatementExpression MethodInvocation buildElement.element MemberReference stacktrace appendChild End LocalVariableDeclaration ReferenceType String VariableDeclarator outFilename MethodInvocation event MethodInvocation Literal ""XmlLogger.file"" getProperty getProject IfStatement BinaryOperation == MemberReference outFilename Literal null BlockStatement StatementExpression Assignment MemberReference outFilename Literal ""log.xml"" = End LocalVariableDeclaration ReferenceType String VariableDeclarator xslUri MethodInvocation event MethodInvocation Literal ""ant.XmlLogger.stylesheet.uri"" getProperty getProject IfStatement BinaryOperation == MemberReference xslUri Literal null BlockStatement StatementExpression Assignment MemberReference xslUri Literal ""log.xsl"" = End LocalVariableDeclaration ReferenceType Writer VariableDeclarator out Literal null TryStatement LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator stream MemberReference outStream IfStatement BinaryOperation == MemberReference stream Literal null BlockStatement StatementExpression Assignment MemberReference stream ClassCreator ReferenceType FileOutputStream MemberReference outFilename = End StatementExpression Assignment MemberReference out ClassCreator ReferenceType OutputStreamWriter MemberReference stream Literal ""UTF8"" = StatementExpression MethodInvocation out Literal ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" write IfStatement BinaryOperation > MethodInvocation xslUri length Literal 0 BlockStatement StatementExpression MethodInvocation out BinaryOperation + BinaryOperation + Literal ""<?xml-stylesheet type=\""text/xsl\"" href=\"""" MemberReference xslUri Literal ""\""?>\n\n"" write End StatementExpression ClassCreator MethodInvocation MemberReference buildElement element MemberReference out Literal 0 Literal ""\t"" write ReferenceType DOMElementWriter StatementExpression MethodInvocation out flush CatchClause CatchClauseParameter IOException exc ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unable to write log file"" MemberReference exc IfStatement BinaryOperation != MemberReference out Literal null BlockStatement TryStatement StatementExpression MethodInvocation out close CatchClause CatchClauseParameter IOException e End StatementExpression Assignment MemberReference buildElement Literal null = MethodDeclaration /**
     * Returns the stack of timed elements for the current thread.
     * @return the stack of timed elements for the current thread
     */ Modifier private ReferenceType Stack getStack LocalVariableDeclaration ReferenceType Stack VariableDeclarator threadStack Cast ReferenceType Stack MethodInvocation threadStacks MethodInvocation Thread currentThread get IfStatement BinaryOperation == MemberReference threadStack Literal null BlockStatement StatementExpression Assignment MemberReference threadStack ClassCreator ReferenceType Stack = StatementExpression MethodInvocation threadStacks MethodInvocation Thread currentThread MemberReference threadStack put End ReturnStatement MemberReference threadStack MethodDeclaration /**
     * Fired when a target starts building, this pushes a timed element
     * for the target onto the stack of elements for the current thread,
     * remembering the current time and the name of the target.
     *
     * @param event An event with any relevant extra information.
     *              Will not be <code>null</code>.
     */ Modifier public targetStarted FormalParameter ReferenceType BuildEvent event LocalVariableDeclaration ReferenceType Target VariableDeclarator target MethodInvocation event getTarget LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator targetElement ClassCreator ReferenceType TimedElement StatementExpression Assignment MemberReference targetElement startTime MethodInvocation System currentTimeMillis = StatementExpression Assignment MemberReference targetElement element MethodInvocation doc MemberReference TARGET_TAG createElement = StatementExpression MethodInvocation targetElement.element MemberReference NAME_ATTR MethodInvocation target getName setAttribute StatementExpression MethodInvocation targets MemberReference target MemberReference targetElement put StatementExpression MethodInvocation MethodInvocation MemberReference targetElement push getStack MethodDeclaration /**
     * Fired when a target finishes building, this adds the time taken
     * and any error stacktrace to the appropriate target element in the log.
     *
     * @param event An event with any relevant extra information.
     *              Will not be <code>null</code>.
     */ Modifier public targetFinished FormalParameter ReferenceType BuildEvent event LocalVariableDeclaration ReferenceType Target VariableDeclarator target MethodInvocation event getTarget LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator targetElement Cast ReferenceType TimedElement MethodInvocation targets MemberReference target get IfStatement BinaryOperation != MemberReference targetElement Literal null BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator totalTime BinaryOperation - MethodInvocation System currentTimeMillis MemberReference targetElement startTime StatementExpression MethodInvocation targetElement.element MemberReference TIME_ATTR MethodInvocation DefaultLogger MemberReference totalTime formatTime setAttribute LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator parentElement Literal null LocalVariableDeclaration ReferenceType Stack VariableDeclarator threadStack MethodInvocation getStack IfStatement MethodInvocation ! threadStack empty BlockStatement LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator poppedStack Cast ReferenceType TimedElement MethodInvocation threadStack pop IfStatement BinaryOperation != MemberReference poppedStack MemberReference targetElement BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Mismatch - popped element = "" MemberReference poppedStack Literal "" finished target element = "" MemberReference targetElement End IfStatement MethodInvocation ! threadStack empty BlockStatement StatementExpression Assignment MemberReference parentElement Cast ReferenceType TimedElement MethodInvocation threadStack peek = End End IfStatement BinaryOperation == MemberReference parentElement Literal null BlockStatement StatementExpression MethodInvocation buildElement.element MemberReference targetElement element appendChild BlockStatement StatementExpression MethodInvocation parentElement.element MemberReference targetElement element appendChild End End StatementExpression MethodInvocation targets MemberReference target remove MethodDeclaration /**
     * Fired when a task starts building, this pushes a timed element
     * for the task onto the stack of elements for the current thread,
     * remembering the current time and the name of the task.
     *
     * @param event An event with any relevant extra information.
     *              Will not be <code>null</code>.
     */ Modifier public taskStarted FormalParameter ReferenceType BuildEvent event LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator taskElement ClassCreator ReferenceType TimedElement StatementExpression Assignment MemberReference taskElement startTime MethodInvocation System currentTimeMillis = StatementExpression Assignment MemberReference taskElement element MethodInvocation doc MemberReference TASK_TAG createElement = LocalVariableDeclaration ReferenceType Task VariableDeclarator task MethodInvocation event getTask LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation event MethodInvocation getTaskName getTask StatementExpression MethodInvocation taskElement.element MemberReference NAME_ATTR MemberReference name setAttribute StatementExpression MethodInvocation taskElement.element MemberReference LOCATION_ATTR MethodInvocation event MethodInvocation getLocation MethodInvocation toString getTask setAttribute StatementExpression MethodInvocation tasks MemberReference task MemberReference taskElement put StatementExpression MethodInvocation MethodInvocation MemberReference taskElement push getStack MethodDeclaration /**
     * Fired when a task finishes building, this adds the time taken
     * and any error stacktrace to the appropriate task element in the log.
     *
     * @param event An event with any relevant extra information.
     *              Will not be <code>null</code>.
     */ Modifier public taskFinished FormalParameter ReferenceType BuildEvent event LocalVariableDeclaration ReferenceType Task VariableDeclarator task MethodInvocation event getTask LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator taskElement Cast ReferenceType TimedElement MethodInvocation tasks MemberReference task get IfStatement BinaryOperation != MemberReference taskElement Literal null BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator totalTime BinaryOperation - MethodInvocation System currentTimeMillis MemberReference taskElement startTime StatementExpression MethodInvocation taskElement.element MemberReference TIME_ATTR MethodInvocation DefaultLogger MemberReference totalTime formatTime setAttribute LocalVariableDeclaration ReferenceType Target VariableDeclarator target MethodInvocation task getOwningTarget LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator targetElement Literal null IfStatement BinaryOperation != MemberReference target Literal null BlockStatement StatementExpression Assignment MemberReference targetElement Cast ReferenceType TimedElement MethodInvocation targets MemberReference target get = End IfStatement BinaryOperation == MemberReference targetElement Literal null BlockStatement StatementExpression MethodInvocation buildElement.element MemberReference taskElement element appendChild BlockStatement StatementExpression MethodInvocation targetElement.element MemberReference taskElement element appendChild End LocalVariableDeclaration ReferenceType Stack VariableDeclarator threadStack MethodInvocation getStack IfStatement MethodInvocation ! threadStack empty BlockStatement LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator poppedStack Cast ReferenceType TimedElement MethodInvocation threadStack pop IfStatement BinaryOperation != MemberReference poppedStack MemberReference taskElement BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Mismatch - popped element = "" MemberReference poppedStack Literal "" finished task element = "" MemberReference taskElement End End StatementExpression MethodInvocation tasks MemberReference task remove BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unknown task "" MemberReference task Literal "" not in "" MemberReference tasks End MethodDeclaration /**
     * Get the TimedElement associated with a task.
     *
     * Where the task is not found directly, search for unknown elements which
     * may be hiding the real task
     */ Modifier private ReferenceType TimedElement getTaskElement FormalParameter ReferenceType Task task LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator element Cast ReferenceType TimedElement MethodInvocation tasks MemberReference task get IfStatement BinaryOperation != MemberReference element Literal null BlockStatement ReturnStatement MemberReference element End ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation tasks keys MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Task VariableDeclarator key Cast ReferenceType Task MethodInvocation e nextElement IfStatement BinaryOperation instanceof MemberReference key ReferenceType UnknownElement BlockStatement IfStatement BinaryOperation == Cast ReferenceType UnknownElement MemberReference key MemberReference task BlockStatement ReturnStatement Cast ReferenceType TimedElement MethodInvocation tasks MemberReference key get End End End ReturnStatement Literal null MethodDeclaration /**
     * Fired when a message is logged, this adds a message element to the
     * most appropriate parent element (task, target or build) and records
     * the priority and text of the message.
     *
     * @param event An event with any relevant extra information.
     *              Will not be <code>null</code>.
     */ Modifier public messageLogged FormalParameter ReferenceType BuildEvent event LocalVariableDeclaration BasicType int VariableDeclarator priority MethodInvocation event getPriority IfStatement BinaryOperation > MemberReference priority MemberReference msgOutputLevel BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType Element VariableDeclarator messageElement MethodInvocation doc MemberReference MESSAGE_TAG createElement LocalVariableDeclaration ReferenceType String VariableDeclarator name Literal ""debug"" SwitchStatement MethodInvocation event getPriority SwitchStatementCase MemberReference Project MSG_ERR StatementExpression Assignment MemberReference name Literal ""error"" = BreakStatement SwitchStatementCase MemberReference Project MSG_WARN StatementExpression Assignment MemberReference name Literal ""warn"" = BreakStatement SwitchStatementCase MemberReference Project MSG_INFO StatementExpression Assignment MemberReference name Literal ""info"" = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference name Literal ""debug"" = BreakStatement End StatementExpression MethodInvocation messageElement MemberReference PRIORITY_ATTR MemberReference name setAttribute LocalVariableDeclaration ReferenceType Text VariableDeclarator messageText MethodInvocation doc MethodInvocation event getMessage createCDATASection StatementExpression MethodInvocation messageElement MemberReference messageText appendChild LocalVariableDeclaration ReferenceType TimedElement VariableDeclarator parentElement Literal null LocalVariableDeclaration ReferenceType Task VariableDeclarator task MethodInvocation event getTask LocalVariableDeclaration ReferenceType Target VariableDeclarator target MethodInvocation event getTarget IfStatement BinaryOperation != MemberReference task Literal null BlockStatement StatementExpression Assignment MemberReference parentElement MethodInvocation MemberReference task getTaskElement = End IfStatement BinaryOperation && BinaryOperation == MemberReference parentElement Literal null BinaryOperation != MemberReference target Literal null BlockStatement StatementExpression Assignment MemberReference parentElement Cast ReferenceType TimedElement MethodInvocation targets MemberReference target get = End IfStatement BinaryOperation != MemberReference parentElement Literal null BlockStatement StatementExpression MethodInvocation parentElement.element MemberReference messageElement appendChild BlockStatement StatementExpression MethodInvocation buildElement.element MemberReference messageElement appendChild End MethodDeclaration /**
     * Set the logging level when using this as a Logger
     *
     * @param level the logging level -
     *        see {@link org.apache.tools.ant.Project#MSG_ERR Project}
     *        class for level definitions
     */ Modifier public setMessageOutputLevel FormalParameter BasicType int level StatementExpression Assignment MemberReference msgOutputLevel MemberReference level = MethodDeclaration /**
     * Set the output stream to which logging output is sent when operating
     * as a logger.
     *
     * @param output the output PrintStream.
     */ Modifier public setOutputPrintStream FormalParameter ReferenceType PrintStream output StatementExpression Assignment This MemberReference outStream ClassCreator ReferenceType PrintStream MemberReference output Literal true = MethodDeclaration /**
     * Ignore emacs mode, as it has no meaning in XML format
     *
     * @param emacsMode true if logger should produce emacs compatible
     *        output
     */ Modifier public setEmacsMode FormalParameter BasicType boolean emacsMode MethodDeclaration /**
     * Ignore error print stream. All output will be written to
     * either the XML log file or the PrintStream provided to
     * setOutputPrintStream
     *
     * @param err the stream we are going to ignore.
     */ Modifier public setErrorPrintStream FormalParameter ReferenceType PrintStream err ReferenceType BuildLogger",0
52,52,"CompilationUnit PackageDeclaration org.apache.tools.zip ClassDeclaration Modifier public final /**
 * Utility class that represents a two byte integer with conversion
 * rules for the big endian byte order of ZIP files.
 *
 * @version $Revision$
 */ ZipShort FieldDeclaration Modifier private BasicType int VariableDeclarator value ConstructorDeclaration Modifier public /**
     * Create instance from a number.
     *
     * @since 1.1
     */ ZipShort FormalParameter BasicType int value StatementExpression Assignment This MemberReference value MemberReference value = ConstructorDeclaration Modifier public /**
     * Create instance from bytes.
     *
     * @since 1.1
     */ ZipShort FormalParameter BasicType byte bytes StatementExpression ExplicitConstructorInvocation MemberReference bytes Literal 0 ConstructorDeclaration Modifier public /**
     * Create instance from the two bytes starting at offset.
     *
     * @since 1.1
     */ ZipShort FormalParameter BasicType byte bytes FormalParameter BasicType int offset StatementExpression Assignment MemberReference value BinaryOperation & BinaryOperation << MemberReference ArraySelector BinaryOperation + MemberReference offset Literal 1 bytes Literal 8 Literal 0xFF00 = StatementExpression Assignment MemberReference value BinaryOperation & MemberReference ArraySelector MemberReference offset bytes Literal 0xFF += MethodDeclaration /**
     * Get value as two bytes in big endian byte order.
     *
     * @since 1.1
     */ Modifier public BasicType byte getBytes LocalVariableDeclaration BasicType byte VariableDeclarator result ArrayCreator BasicType byte Literal 2 StatementExpression Assignment MemberReference ArraySelector Literal 0 result Cast BasicType byte BinaryOperation & MemberReference value Literal 0xFF = StatementExpression Assignment MemberReference ArraySelector Literal 1 result Cast BasicType byte BinaryOperation >> BinaryOperation & MemberReference value Literal 0xFF00 Literal 8 = ReturnStatement MemberReference result MethodDeclaration /**
     * Get value as Java int.
     *
     * @since 1.1
     */ Modifier public BasicType int getValue ReturnStatement MemberReference value MethodDeclaration /**
     * Override to make two instances with same value equal.
     *
     * @since 1.1
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation || BinaryOperation == MemberReference o Literal null BinaryOperation instanceof MemberReference o ReferenceType ZipShort BlockStatement ReturnStatement Literal false End ReturnStatement BinaryOperation == MemberReference value Cast ReferenceType ZipShort MemberReference o MethodDeclaration /**
     * Override to make two instances with same value equal.
     *
     * @since 1.1
     */ Modifier public BasicType int hashCode ReturnStatement MemberReference value ReferenceType Cloneable",0
453,453,,0
447,447,,0
262,262,"CompilationUnit PackageDeclaration org.apache.tools.ant.types ClassDeclaration Modifier public /**
 * Moved out of MatchingTask to make it a standalone object that could
 * be referenced (by scripts for example).
 *
 */ FileSet ConstructorDeclaration Modifier public FileSet StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier protected FileSet FormalParameter ReferenceType FileSet fileset StatementExpression SuperConstructorInvocation MemberReference fileset MethodDeclaration /**
     * Return a FileSet that has the same basedir and same patternsets
     * as this one.
     */ Modifier public ReferenceType Object clone IfStatement MethodInvocation isReference BlockStatement ReturnStatement Cast ReferenceType FileSet MethodInvocation MethodInvocation getProject getRef BlockStatement ReturnStatement SuperMethodInvocation clone End ReferenceType AbstractFileSet",0
328,328,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.util.Date Import java.util.Enumeration Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.condition.Os Import org.apache.tools.ant.types.FileList Import org.apache.tools.ant.types.FileSet ClassDeclaration Modifier public /**
 * Examines and removes out of date target files.  If any of the target files
 * are out of date with respect to any of the source files, all target
 * files are removed.  This is useful where dependencies cannot be
 * computed (for example, dynamically interpreted parameters or files
 * that need to stay in synch but are not directly linked) or where
 * the ant task in question could compute them but does not (for
 * example, the linked DTD for an XML file using the style task).
 *
 * nested arguments:
 * <ul>
 * <li>srcfileset     (fileset describing the source files to examine)
 * <li>srcfilelist    (filelist describing the source files to examine)
 * <li>targetfileset  (fileset describing the target files to examine)
 * <li>targetfilelist (filelist describing the target files to examine)
 * </ul>
 * At least one instance of either a fileset or filelist for both source and
 * target are required.
 * <p>
 * This task will examine each of the source files against each of the target
 * files. If any target files are out of date with respect to any of the source
 * files, all targets are removed. If any files named in a (src or target)
 * filelist do not exist, all targets are removed.
 * Hint: If missing files should be ignored, specify them as include patterns
 * in filesets, rather than using filelists.
 * </p><p>
 * This task attempts to optimize speed of dependency checking.  It will stop
 * after the first out of date file is found and remove all targets, rather
 * than exhaustively checking every source vs target combination unnecessarily.
 * </p><p>
 * Example uses:
 * <ul><li>
 * Record the fact that an XML file must be up to date
 * with respect to its XSD (Schema file), even though the XML file
 * itself includes no reference to its XSD.
 * </li><li>
 * Record the fact that an XSL stylesheet includes other
 * sub-stylesheets
 * </li><li>
 * Record the fact that java files must be recompiled if the ant build
 * file changes
 * </li></ul>
 *
 * @ant.task category=""filesystem""
 * @version $Revision$ $Date$
 * @since Ant 1.4
 */ DependSet FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator sourceFileSets ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator sourceFileLists ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator targetFileSets ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator targetFileLists ClassCreator ReferenceType Vector ConstructorDeclaration Modifier public /**
     * Creates a new DependSet Task.
     **/ DependSet MethodDeclaration /**
     * Add a set of source files.
     */ Modifier public addSrcfileset FormalParameter ReferenceType FileSet fs StatementExpression MethodInvocation sourceFileSets MemberReference fs addElement MethodDeclaration /**
     * Add a list of source files.
     */ Modifier public addSrcfilelist FormalParameter ReferenceType FileList fl StatementExpression MethodInvocation sourceFileLists MemberReference fl addElement MethodDeclaration /**
     * Add a set of target files.
     */ Modifier public addTargetfileset FormalParameter ReferenceType FileSet fs StatementExpression MethodInvocation targetFileSets MemberReference fs addElement MethodDeclaration /**
     * Add a list of target files.
     */ Modifier public addTargetfilelist FormalParameter ReferenceType FileList fl StatementExpression MethodInvocation targetFileLists MemberReference fl addElement MethodDeclaration /**
     * Executes the task.
     */ Modifier public execute BuildException IfStatement BinaryOperation && BinaryOperation == MethodInvocation sourceFileSets size Literal 0 BinaryOperation == MethodInvocation sourceFileLists size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""At least one <srcfileset> or <srcfilelist>"" Literal "" element must be set"" End IfStatement BinaryOperation && BinaryOperation == MethodInvocation targetFileSets size Literal 0 BinaryOperation == MethodInvocation targetFileLists size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""At least one <targetfileset> or"" Literal "" <targetfilelist> element must be set"" End LocalVariableDeclaration BasicType long VariableDeclarator now ClassCreator MethodInvocation getTime ReferenceType Date IfStatement MethodInvocation Os Literal ""windows"" isFamily BlockStatement StatementExpression Assignment MemberReference now Literal 2000 += End LocalVariableDeclaration ReferenceType Vector VariableDeclarator allTargets ClassCreator ReferenceType Vector LocalVariableDeclaration BasicType long VariableDeclarator oldestTargetTime Literal 0 LocalVariableDeclaration ReferenceType File VariableDeclarator oldestTarget Literal null LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator enumTargetSets MethodInvocation targetFileSets elements WhileStatement MethodInvocation enumTargetSets hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator targetFS Cast ReferenceType FileSet MethodInvocation enumTargetSets nextElement IfStatement MethodInvocation ! targetFS MethodInvocation exists MethodInvocation getProject getDir BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator targetDS MethodInvocation targetFS MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator targetFiles MethodInvocation targetDS getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference targetFiles length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator dest ClassCreator ReferenceType File MethodInvocation targetFS MethodInvocation getProject getDir MemberReference ArraySelector MemberReference i targetFiles StatementExpression MethodInvocation allTargets MemberReference dest addElement IfStatement BinaryOperation > MethodInvocation dest lastModified MemberReference now BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Warning: "" MemberReference ArraySelector MemberReference i targetFiles Literal "" modified in the future."" MemberReference Project MSG_WARN log End IfStatement BinaryOperation || BinaryOperation == MemberReference oldestTarget Literal null BinaryOperation < MethodInvocation dest lastModified MemberReference oldestTargetTime BlockStatement StatementExpression Assignment MemberReference oldestTargetTime MethodInvocation dest lastModified = StatementExpression Assignment MemberReference oldestTarget MemberReference dest = End End End LocalVariableDeclaration BasicType boolean VariableDeclarator upToDate Literal true LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator enumTargetLists MethodInvocation targetFileLists elements WhileStatement MethodInvocation enumTargetLists hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType FileList VariableDeclarator targetFL Cast ReferenceType FileList MethodInvocation enumTargetLists nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator targetFiles MethodInvocation targetFL MethodInvocation getProject getFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference targetFiles length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator dest ClassCreator ReferenceType File MethodInvocation targetFL MethodInvocation getProject getDir MemberReference ArraySelector MemberReference i targetFiles IfStatement MethodInvocation ! dest exists BlockStatement StatementExpression MethodInvocation BinaryOperation + MemberReference ArraySelector MemberReference i targetFiles Literal "" does not exist."" MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference upToDate Literal false = ContinueStatement BlockStatement StatementExpression MethodInvocation allTargets MemberReference dest addElement End IfStatement BinaryOperation > MethodInvocation dest lastModified MemberReference now BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Warning: "" MemberReference ArraySelector MemberReference i targetFiles Literal "" modified in the future."" MemberReference Project MSG_WARN log End IfStatement BinaryOperation || BinaryOperation == MemberReference oldestTarget Literal null BinaryOperation < MethodInvocation dest lastModified MemberReference oldestTargetTime BlockStatement StatementExpression Assignment MemberReference oldestTargetTime MethodInvocation dest lastModified = StatementExpression Assignment MemberReference oldestTarget MemberReference dest = End End End IfStatement BinaryOperation != MemberReference oldestTarget Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + MemberReference oldestTarget Literal "" is oldest target file"" MemberReference Project MSG_VERBOSE log BlockStatement StatementExpression Assignment MemberReference upToDate Literal false = End IfStatement MemberReference upToDate BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator enumSourceLists MethodInvocation sourceFileLists elements WhileStatement BinaryOperation && MemberReference upToDate MethodInvocation enumSourceLists hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType FileList VariableDeclarator sourceFL Cast ReferenceType FileList MethodInvocation enumSourceLists nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator sourceFiles MethodInvocation sourceFL MethodInvocation getProject getFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation && MemberReference upToDate BinaryOperation < MemberReference i MemberReference sourceFiles length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator src ClassCreator ReferenceType File MethodInvocation sourceFL MethodInvocation getProject getDir MemberReference ArraySelector MemberReference i sourceFiles IfStatement BinaryOperation > MethodInvocation src lastModified MemberReference now BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Warning: "" MemberReference ArraySelector MemberReference i sourceFiles Literal "" modified in the future."" MemberReference Project MSG_WARN log End IfStatement MethodInvocation ! src exists BlockStatement StatementExpression MethodInvocation BinaryOperation + MemberReference ArraySelector MemberReference i sourceFiles Literal "" does not exist."" MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference upToDate Literal false = BreakStatement End IfStatement BinaryOperation > MethodInvocation src lastModified MemberReference oldestTargetTime BlockStatement StatementExpression Assignment MemberReference upToDate Literal false = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + MemberReference oldestTarget Literal "" is out of date with respect to "" MemberReference ArraySelector MemberReference i sourceFiles MemberReference Project MSG_VERBOSE log End End End End IfStatement MemberReference upToDate BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator enumSourceSets MethodInvocation sourceFileSets elements WhileStatement BinaryOperation && MemberReference upToDate MethodInvocation enumSourceSets hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator sourceFS Cast ReferenceType FileSet MethodInvocation enumSourceSets nextElement LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator sourceDS MethodInvocation sourceFS MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator sourceFiles MethodInvocation sourceDS getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation && MemberReference upToDate BinaryOperation < MemberReference i MemberReference sourceFiles length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator src ClassCreator ReferenceType File MethodInvocation sourceFS MethodInvocation getProject getDir MemberReference ArraySelector MemberReference i sourceFiles IfStatement BinaryOperation > MethodInvocation src lastModified MemberReference now BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Warning: "" MemberReference ArraySelector MemberReference i sourceFiles Literal "" modified in the future."" MemberReference Project MSG_WARN log End IfStatement BinaryOperation > MethodInvocation src lastModified MemberReference oldestTargetTime BlockStatement StatementExpression Assignment MemberReference upToDate Literal false = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + MemberReference oldestTarget Literal "" is out of date with respect to "" MemberReference ArraySelector MemberReference i sourceFiles MemberReference Project MSG_VERBOSE log End End End End IfStatement MemberReference ! upToDate BlockStatement StatementExpression MethodInvocation Literal ""Deleting all target files. "" MemberReference Project MSG_VERBOSE log ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation allTargets elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator fileToRemove Cast ReferenceType File MethodInvocation e nextElement StatementExpression MethodInvocation BinaryOperation + Literal ""Deleting file "" MethodInvocation fileToRemove getAbsolutePath MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation fileToRemove delete End End ReferenceType MatchingTask",0
338,338,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters Import java.io.IOException Import java.io.Reader Import java.util.Hashtable Import org.apache.tools.ant.types.Parameter Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public final /**
 * Replaces tokens in the original input with user-supplied values.
 *
 * Example:
 *
 * <pre>&lt;replacetokens begintoken=&quot;#&quot; endtoken=&quot;#&quot;&gt;
 *   &lt;token key=&quot;DATE&quot; value=&quot;${TODAY}&quot;/&gt;
 * &lt;/replacetokens&gt;</pre>
 *
 * Or:
 *
 * <pre>&lt;filterreader classname=""org.apache.tools.ant.filters.ReplaceTokens""&gt;
 *   &lt;param type=""tokenchar"" name=""begintoken"" value=""#""/&gt;
 *   &lt;param type=""tokenchar"" name=""endtoken"" value=""#""/&gt;
 *   &lt;param type=""token"" name=""DATE"" value=""${TODAY}""/&gt;
 * &lt;/filterreader&gt;</pre>
 *
 */ ReplaceTokens FieldDeclaration /** Default ""begin token"" character. */ Modifier private final static BasicType char VariableDeclarator DEFAULT_BEGIN_TOKEN Literal '@' FieldDeclaration /** Default ""end token"" character. */ Modifier private final static BasicType char VariableDeclarator DEFAULT_END_TOKEN Literal '@' FieldDeclaration /** Data to be used before reading from stream again */ Modifier private ReferenceType String VariableDeclarator queuedData Literal null FieldDeclaration /** replacement test from a token */ Modifier private ReferenceType String VariableDeclarator replaceData Literal null FieldDeclaration /** Index into replacement data */ Modifier private BasicType int VariableDeclarator replaceIndex Literal - 1 FieldDeclaration /** Index into queue data */ Modifier private BasicType int VariableDeclarator queueIndex Literal - 1 FieldDeclaration /** Hashtable to hold the replacee-replacer pairs (String to String). */ Modifier private ReferenceType Hashtable VariableDeclarator hash ClassCreator ReferenceType Hashtable FieldDeclaration /** Character marking the beginning of a token. */ Modifier private BasicType char VariableDeclarator beginToken MemberReference DEFAULT_BEGIN_TOKEN FieldDeclaration /** Character marking the end of a token. */ Modifier private BasicType char VariableDeclarator endToken MemberReference DEFAULT_END_TOKEN ConstructorDeclaration Modifier public /**
     * Constructor for ""dummy"" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */ ReplaceTokens StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be <code>null</code>.
     */ ReplaceTokens FormalParameter Modifier final ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in MethodDeclaration Modifier private BasicType int getNextChar IOException IfStatement BinaryOperation != MemberReference queueIndex Literal - 1 BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator ch MethodInvocation queuedData MemberReference ++ queueIndex charAt IfStatement BinaryOperation >= MemberReference queueIndex MethodInvocation queuedData length BlockStatement StatementExpression Assignment MemberReference queueIndex Literal - 1 = End ReturnStatement MemberReference ch End ReturnStatement MethodInvocation in read MethodDeclaration /**
     * Returns the next character in the filtered stream, replacing tokens
     * from the original stream.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */ Modifier public final BasicType int read IOException IfStatement MethodInvocation ! getInitialized BlockStatement StatementExpression MethodInvocation initialize StatementExpression MethodInvocation Literal true setInitialized End IfStatement BinaryOperation != MemberReference replaceIndex Literal - 1 BlockStatement LocalVariableDeclaration Modifier final BasicType int VariableDeclarator ch MethodInvocation replaceData MemberReference ++ replaceIndex charAt IfStatement BinaryOperation >= MemberReference replaceIndex MethodInvocation replaceData length BlockStatement StatementExpression Assignment MemberReference replaceIndex Literal - 1 = End ReturnStatement MemberReference ch End LocalVariableDeclaration BasicType int VariableDeclarator ch MethodInvocation getNextChar IfStatement BinaryOperation == MemberReference ch MemberReference beginToken BlockStatement LocalVariableDeclaration Modifier final ReferenceType StringBuffer VariableDeclarator key ClassCreator ReferenceType StringBuffer Literal """" DoStatement BinaryOperation != MemberReference ch MemberReference endToken BlockStatement StatementExpression Assignment MemberReference ch MethodInvocation getNextChar = IfStatement BinaryOperation != MemberReference ch Literal - 1 BlockStatement StatementExpression MethodInvocation key Cast BasicType char MemberReference ch append BlockStatement BreakStatement End End IfStatement BinaryOperation == MemberReference ch Literal - 1 BlockStatement IfStatement BinaryOperation || BinaryOperation == MemberReference queuedData Literal null BinaryOperation == MemberReference queueIndex Literal - 1 BlockStatement StatementExpression Assignment MemberReference queuedData MethodInvocation key toString = BlockStatement StatementExpression Assignment MemberReference queuedData BinaryOperation + MethodInvocation key toString MethodInvocation queuedData MemberReference queueIndex substring = End StatementExpression Assignment MemberReference queueIndex Literal 0 = ReturnStatement MemberReference beginToken BlockStatement StatementExpression MethodInvocation key BinaryOperation - MethodInvocation key length Literal 1 setLength LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator replaceWith Cast ReferenceType String MethodInvocation hash MethodInvocation key toString get IfStatement BinaryOperation != MemberReference replaceWith Literal null BlockStatement IfStatement BinaryOperation > MethodInvocation replaceWith length Literal 0 BlockStatement StatementExpression Assignment MemberReference replaceData MemberReference replaceWith = StatementExpression Assignment MemberReference replaceIndex Literal 0 = End ReturnStatement MethodInvocation read BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator newData BinaryOperation + MethodInvocation key toString MemberReference endToken IfStatement BinaryOperation || BinaryOperation == MemberReference queuedData Literal null BinaryOperation == MemberReference queueIndex Literal - 1 BlockStatement StatementExpression Assignment MemberReference queuedData MemberReference newData = BlockStatement StatementExpression Assignment MemberReference queuedData BinaryOperation + MemberReference newData MethodInvocation queuedData MemberReference queueIndex substring = End StatementExpression Assignment MemberReference queueIndex Literal 0 = ReturnStatement MemberReference beginToken End End End ReturnStatement MemberReference ch MethodDeclaration /**
     * Sets the ""begin token"" character.
     *
     * @param beginToken the character used to denote the beginning of a token
     */ Modifier public final setBeginToken FormalParameter Modifier final BasicType char beginToken StatementExpression Assignment This MemberReference beginToken MemberReference beginToken = MethodDeclaration /**
     * Returns the ""begin token"" character.
     *
     * @return the character used to denote the beginning of a token
     */ Modifier private final BasicType char getBeginToken ReturnStatement MemberReference beginToken MethodDeclaration /**
     * Sets the ""end token"" character.
     *
     * @param endToken the character used to denote the end of a token
     */ Modifier public final setEndToken FormalParameter Modifier final BasicType char endToken StatementExpression Assignment This MemberReference endToken MemberReference endToken = MethodDeclaration /**
     * Returns the ""end token"" character.
     *
     * @return the character used to denote the end of a token
     */ Modifier private final BasicType char getEndToken ReturnStatement MemberReference endToken MethodDeclaration /**
     * Adds a token element to the map of tokens to replace.
     *
     * @param token The token to add to the map of replacements.
     *              Must not be <code>null</code>.
     */ Modifier public final addConfiguredToken FormalParameter Modifier final ReferenceType Token token StatementExpression MethodInvocation hash MethodInvocation token getKey MethodInvocation token getValue put MethodDeclaration /**
     * Sets the map of tokens to replace.
     *
     * @param hash A map (String->String) of token keys to replacement
     * values. Must not be <code>null</code>.
     */ Modifier private setTokens FormalParameter Modifier final ReferenceType Hashtable hash StatementExpression Assignment This MemberReference hash MemberReference hash = MethodDeclaration /**
     * Returns the map of tokens which will be replaced.
     *
     * @return a map (String->String) of token keys to replacement
     * values
     */ Modifier private final ReferenceType Hashtable getTokens ReturnStatement MemberReference hash MethodDeclaration /**
     * Creates a new ReplaceTokens using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be <code>null</code>.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */ Modifier public final ReferenceType Reader chain FormalParameter Modifier final ReferenceType Reader rdr LocalVariableDeclaration ReferenceType ReplaceTokens VariableDeclarator newFilter ClassCreator ReferenceType ReplaceTokens MemberReference rdr StatementExpression MethodInvocation newFilter MethodInvocation getBeginToken setBeginToken StatementExpression MethodInvocation newFilter MethodInvocation getEndToken setEndToken StatementExpression MethodInvocation newFilter MethodInvocation getTokens setTokens StatementExpression MethodInvocation newFilter Literal true setInitialized ReturnStatement MemberReference newFilter MethodDeclaration /**
     * Initializes tokens and loads the replacee-replacer hashtable.
     */ Modifier private final initialize LocalVariableDeclaration ReferenceType Parameter VariableDeclarator params MethodInvocation getParameters IfStatement BinaryOperation != MemberReference params Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference params length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i params Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator type MemberReference ArraySelector MemberReference i MethodInvocation getType params IfStatement Literal MethodInvocation MemberReference type equals ""tokenchar"" BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator name MemberReference ArraySelector MemberReference i MethodInvocation getName params LocalVariableDeclaration ReferenceType String VariableDeclarator value MemberReference ArraySelector MemberReference i MethodInvocation getValue params IfStatement Literal MethodInvocation MemberReference name equals ""begintoken"" BlockStatement IfStatement BinaryOperation == MethodInvocation value length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Begin token cannot "" Literal ""be empty"" End StatementExpression Assignment MemberReference beginToken MemberReference ArraySelector MemberReference i MethodInvocation getValue MethodInvocation Literal 0 charAt params = IfStatement Literal MethodInvocation MemberReference name equals ""endtoken"" BlockStatement IfStatement BinaryOperation == MethodInvocation value length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""End token cannot "" Literal ""be empty"" End StatementExpression Assignment MemberReference endToken MemberReference ArraySelector MemberReference i MethodInvocation getValue MethodInvocation Literal 0 charAt params = End End IfStatement Literal MethodInvocation MemberReference type equals ""token"" BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator name MemberReference ArraySelector MemberReference i MethodInvocation getName params LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator value MemberReference ArraySelector MemberReference i MethodInvocation getValue params StatementExpression MethodInvocation hash MemberReference name MemberReference value put End End End End End ClassDeclaration Modifier public static /**
     * Holds a token
     */ Token FieldDeclaration /** Token key */ Modifier private ReferenceType String VariableDeclarator key FieldDeclaration /** Token value */ Modifier private ReferenceType String VariableDeclarator value MethodDeclaration /**
         * Sets the token key
         *
         * @param key The key for this token. Must not be <code>null</code>.
         */ Modifier public final setKey FormalParameter ReferenceType String key StatementExpression Assignment This MemberReference key MemberReference key = MethodDeclaration /**
         * Sets the token value
         *
         * @param value The value for this token. Must not be <code>null</code>.
         */ Modifier public final setValue FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
         * Returns the key for this token.
         *
         * @return the key for this token
         */ Modifier public final ReferenceType String getKey ReturnStatement MemberReference key MethodDeclaration /**
         * Returns the value for this token.
         *
         * @return the value for this token
         */ Modifier public final ReferenceType String getValue ReturnStatement MemberReference value ReferenceType BaseParamFilterReader ReferenceType ChainableReader",0
489,489,,0
20,20,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.jsp.compilers Import java.io.File Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Java Import org.apache.tools.ant.taskdefs.optional.jsp.JspC Import org.apache.tools.ant.taskdefs.optional.jsp.JspMangler Import org.apache.tools.ant.types.CommandlineJava Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * The implementation of the jasper compiler.
 * This is a cut-and-paste of the original Jspc task.
 *
 * @since ant1.5
 */ JasperC FieldDeclaration /**
     * what produces java classes from .jsp files
     */ ReferenceType JspMangler VariableDeclarator mangler ConstructorDeclaration Modifier public JasperC FormalParameter ReferenceType JspMangler mangler StatementExpression Assignment This MemberReference mangler MemberReference mangler = MethodDeclaration /**
     * our execute method
     */ Modifier public BasicType boolean execute BuildException StatementExpression MethodInvocation MethodInvocation Literal ""Using jasper compiler"" MemberReference Project MSG_VERBOSE log getJspc LocalVariableDeclaration ReferenceType CommandlineJava VariableDeclarator cmd MethodInvocation setupJasperCommand TryStatement LocalVariableDeclaration ReferenceType Java VariableDeclarator java Cast ReferenceType Java MethodInvocation getProject LocalVariableDeclaration ReferenceType Path VariableDeclarator p MethodInvocation getClasspath IfStatement BinaryOperation != MethodInvocation MethodInvocation getClasspath getJspc Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""using user supplied classpath: "" MemberReference p MemberReference Project MSG_DEBUG log getProject BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""using system classpath: "" MemberReference p MemberReference Project MSG_DEBUG log getProject End StatementExpression MethodInvocation java MemberReference p setClasspath StatementExpression MethodInvocation java MethodInvocation MethodInvocation getBaseDir getProject setDir StatementExpression MethodInvocation java Literal ""org.apache.jasper.JspC"" setClassname LocalVariableDeclaration ReferenceType String VariableDeclarator args MethodInvocation cmd MethodInvocation getArguments getJavaCommand ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference args length MemberReference ++ i BlockStatement StatementExpression MethodInvocation java MethodInvocation MemberReference ArraySelector MemberReference i args setValue createArg End StatementExpression MethodInvocation java MethodInvocation MethodInvocation getFailonerror getJspc setFailonerror StatementExpression MethodInvocation java Literal true setFork StatementExpression MethodInvocation java Literal ""jasperc"" setTaskName StatementExpression MethodInvocation java execute ReturnStatement Literal true CatchClause CatchClauseParameter Exception ex IfStatement BinaryOperation instanceof MemberReference ex ReferenceType BuildException BlockStatement ThrowStatement Cast ReferenceType BuildException MemberReference ex BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Error running jsp compiler: "" MemberReference ex MethodInvocation MethodInvocation getLocation getJspc End StatementExpression MethodInvocation MethodInvocation deleteEmptyJavaFiles getJspc MethodDeclaration /**
     * build up a command line
     * @return a command line for jasper
     */ Modifier private ReferenceType CommandlineJava setupJasperCommand LocalVariableDeclaration ReferenceType CommandlineJava VariableDeclarator cmd ClassCreator ReferenceType CommandlineJava LocalVariableDeclaration ReferenceType JspC VariableDeclarator jspc MethodInvocation getJspc StatementExpression MethodInvocation MemberReference cmd Literal ""-d"" MethodInvocation jspc getDestdir addArg StatementExpression MethodInvocation MemberReference cmd Literal ""-p"" MethodInvocation jspc getPackage addArg IfStatement MethodInvocation ! isTomcat5x BlockStatement StatementExpression MethodInvocation MemberReference cmd BinaryOperation + Literal ""-v"" MethodInvocation jspc getVerbose addArg BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + BinaryOperation + Literal ""this task doesn't support Tomcat 5.x properly, "" Literal ""please use the Tomcat provided jspc task "" Literal ""instead"" log getProject End StatementExpression MethodInvocation MemberReference cmd Literal ""-uriroot"" MethodInvocation jspc getUriroot addArg StatementExpression MethodInvocation MemberReference cmd Literal ""-uribase"" MethodInvocation jspc getUribase addArg StatementExpression MethodInvocation MemberReference cmd Literal ""-ieplugin"" MethodInvocation jspc getIeplugin addArg StatementExpression MethodInvocation MemberReference cmd Literal ""-webinc"" MethodInvocation jspc getWebinc addArg StatementExpression MethodInvocation MemberReference cmd Literal ""-webxml"" MethodInvocation jspc getWebxml addArg StatementExpression MethodInvocation MemberReference cmd Literal ""-die9"" addArg IfStatement MethodInvocation jspc isMapped BlockStatement StatementExpression MethodInvocation MemberReference cmd Literal ""-mapped"" addArg End IfStatement BinaryOperation != MethodInvocation jspc getWebApp Literal null BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator dir MethodInvocation jspc MethodInvocation getDirectory getWebApp StatementExpression MethodInvocation MemberReference cmd Literal ""-webapp"" MemberReference dir addArg End StatementExpression MethodInvocation MethodInvocation getJspc MethodInvocation MethodInvocation getCompileList getJspc MemberReference cmd logAndAddFilesToCompile ReturnStatement MemberReference cmd MethodDeclaration /**
     * @return an instance of the mangler this compiler uses
     */ Modifier public ReferenceType JspMangler createMangler ReturnStatement MemberReference mangler MethodDeclaration /**
     * @since Ant 1.6.2
     */ Modifier private ReferenceType Path getClasspath LocalVariableDeclaration ReferenceType Path VariableDeclarator p MethodInvocation MethodInvocation getClasspath getJspc IfStatement BinaryOperation == MemberReference p Literal null BlockStatement StatementExpression Assignment MemberReference p ClassCreator ReferenceType Path MethodInvocation getProject = ReturnStatement MethodInvocation p Literal ""only"" concatSystemClasspath BlockStatement ReturnStatement MethodInvocation p Literal ""ignore"" concatSystemClasspath End MethodDeclaration /**
     * @since Ant 1.6.2
     */ Modifier private BasicType boolean isTomcat5x LocalVariableDeclaration ReferenceType AntClassLoader VariableDeclarator l Literal null TryStatement StatementExpression Assignment MemberReference l MethodInvocation MethodInvocation MethodInvocation getClasspath createClassLoader getProject = StatementExpression MethodInvocation l Literal ""org.apache.jasper.tagplugins.jstl.If"" loadClass ReturnStatement Literal true CatchClause CatchClauseParameter ClassNotFoundException e ReturnStatement Literal false IfStatement BinaryOperation != MemberReference l Literal null BlockStatement StatementExpression MethodInvocation l cleanup End ReferenceType DefaultJspCompilerAdapter",0
228,228,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.sitraka Import java.io.File Import java.io.FileWriter Import java.io.IOException Import java.io.PrintWriter Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.FileSet ClassDeclaration Modifier public /**
 * Runs the snapshot merge utility for JProbe Coverage.
 *
 * @ant.task name=""jpcovmerge"" category=""metrics""
 */ CovMerge FieldDeclaration /** the name of the output snapshot */ Modifier private ReferenceType File VariableDeclarator tofile Literal null FieldDeclaration /** the filesets that will get all snapshots to merge */ Modifier private ReferenceType Vector VariableDeclarator filesets ClassCreator ReferenceType Vector FieldDeclaration Modifier private BasicType boolean VariableDeclarator verbose MethodDeclaration /**
     * Set the output snapshot file.
     */ Modifier public setTofile FormalParameter ReferenceType File value StatementExpression Assignment This MemberReference tofile MemberReference value = MethodDeclaration /**
     * If true, perform the merge in verbose mode giving details
     * about the snapshot processing.
     */ Modifier public setVerbose FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference verbose MemberReference flag = MethodDeclaration /**
     * add a fileset containing the snapshots to include.
     */ Modifier public addFileset FormalParameter ReferenceType FileSet fs StatementExpression MethodInvocation filesets MemberReference fs addElement ConstructorDeclaration Modifier public CovMerge MethodDeclaration /** execute the jpcovmerge by providing a parameter file */ Modifier public execute BuildException StatementExpression MethodInvocation checkOptions LocalVariableDeclaration ReferenceType File VariableDeclarator paramfile MethodInvocation createParamFile TryStatement LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmdl ClassCreator ReferenceType Commandline StatementExpression MethodInvocation cmdl MethodInvocation Literal ""jpcovmerge"" findExecutable setExecutable IfStatement MemberReference verbose BlockStatement StatementExpression MethodInvocation cmdl MethodInvocation Literal ""-v"" setValue createArgument End StatementExpression MethodInvocation cmdl MethodInvocation BinaryOperation + MethodInvocation getParamFileArgument MethodInvocation paramfile getAbsolutePath setValue createArgument IfStatement MethodInvocation isJProbe4Plus BlockStatement StatementExpression MethodInvocation cmdl MethodInvocation MethodInvocation tofile getPath setValue createArgument End LocalVariableDeclaration ReferenceType LogStreamHandler VariableDeclarator handler ClassCreator ReferenceType LogStreamHandler This MemberReference Project MSG_INFO MemberReference Project MSG_WARN LocalVariableDeclaration ReferenceType Execute VariableDeclarator exec ClassCreator ReferenceType Execute MemberReference handler StatementExpression MethodInvocation MethodInvocation cmdl describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation exec MethodInvocation cmdl getCommandline setCommandline LocalVariableDeclaration BasicType int VariableDeclarator exitValue MethodInvocation exec execute IfStatement MethodInvocation Execute MemberReference exitValue isFailure BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""JProbe Coverage Merging failed ("" MemberReference exitValue Literal "")"" End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Failed to run JProbe Coverage Merge: "" MemberReference e StatementExpression MethodInvocation paramfile delete MethodDeclaration /** check for mandatory options */ Modifier protected checkOptions BuildException IfStatement BinaryOperation == MemberReference tofile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""'tofile' attribute must be set."" End IfStatement BinaryOperation || BinaryOperation == MethodInvocation getHome Literal null MethodInvocation ! MethodInvocation isDirectory getHome BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Invalid home directory. Must point to JProbe home directory"" End LocalVariableDeclaration ReferenceType File VariableDeclarator jar MethodInvocation findCoverageJar IfStatement MethodInvocation ! jar exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Cannot find Coverage directory: "" MethodInvocation getHome End MethodDeclaration /** get the snapshots from the filesets */ Modifier protected ReferenceType File getSnapshots LocalVariableDeclaration ReferenceType Vector VariableDeclarator v ClassCreator ReferenceType Vector LocalVariableDeclaration Modifier final BasicType int VariableDeclarator size MethodInvocation filesets size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MethodInvocation filesets MemberReference i elementAt LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation fs MethodInvocation getProject getDirectoryScanner StatementExpression MethodInvocation ds scan LocalVariableDeclaration ReferenceType String VariableDeclarator f MethodInvocation ds getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference f length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator pathname MemberReference ArraySelector MemberReference j f LocalVariableDeclaration ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MethodInvocation ds getBasedir MemberReference pathname StatementExpression Assignment MemberReference file MethodInvocation MethodInvocation MethodInvocation file getPath resolveFile getProject = StatementExpression MethodInvocation v MemberReference file addElement End End LocalVariableDeclaration ReferenceType File VariableDeclarator files ArrayCreator ReferenceType File MethodInvocation v size StatementExpression MethodInvocation v MemberReference files copyInto ReturnStatement MemberReference files MethodDeclaration /**
     * create the parameters file that contains all file to merge
     * and the output filename.
     */ Modifier protected ReferenceType File createParamFile BuildException LocalVariableDeclaration ReferenceType File VariableDeclarator snapshots MethodInvocation getSnapshots LocalVariableDeclaration ReferenceType File VariableDeclarator file MethodInvocation Literal ""jpcovm"" createTempFile StatementExpression MethodInvocation file deleteOnExit LocalVariableDeclaration ReferenceType FileWriter VariableDeclarator fw Literal null TryStatement StatementExpression Assignment MemberReference fw ClassCreator ReferenceType FileWriter MemberReference file = LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator pw ClassCreator ReferenceType PrintWriter MemberReference fw ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference snapshots length MemberReference ++ i BlockStatement StatementExpression MethodInvocation pw MemberReference ArraySelector MemberReference i MethodInvocation getAbsolutePath snapshots println End IfStatement MethodInvocation ! isJProbe4Plus BlockStatement StatementExpression MethodInvocation pw MethodInvocation MethodInvocation MethodInvocation tofile getPath resolveFile getProject println End StatementExpression MethodInvocation pw flush CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""I/O error while writing to "" MemberReference file MemberReference e IfStatement BinaryOperation != MemberReference fw Literal null BlockStatement TryStatement StatementExpression MethodInvocation fw close CatchClause CatchClauseParameter IOException ignored End ReturnStatement MemberReference file ReferenceType CovBase",0
371,371,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.pvcs ClassDeclaration Modifier public /**
 * represents a project within the PVCS repository to extract files from.
 */ PvcsProject FieldDeclaration Modifier private ReferenceType String VariableDeclarator name ConstructorDeclaration Modifier public PvcsProject StatementExpression SuperConstructorInvocation MethodDeclaration /**
     * Set the name of the project
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This PvcsProject MemberReference name MemberReference name = MethodDeclaration /**
     * Get the name of the project
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name",0
610,610,,0
82,82,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.optional Import org.apache.tools.ant.filters.TokenFilter Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.util.ScriptRunner ClassDeclaration Modifier public /**
 * Most of this is CAP (Cut And Paste) from the Script task
 * ScriptFilter class, implements TokenFilter.Filter
 * for scripts to use.
 * This provides the same beans as the Script Task
 * to a script.
 * The script is meant to use get self.token and
 * set self.token in the reply.
 *
 *
 * @since Ant 1.6
 */ ScriptFilter FieldDeclaration /** Has this object been initialized ? */ Modifier private BasicType boolean VariableDeclarator initialized Literal false FieldDeclaration /** the token used by the script */ Modifier private ReferenceType String VariableDeclarator token FieldDeclaration Modifier private ReferenceType ScriptRunner VariableDeclarator runner ClassCreator ReferenceType ScriptRunner MethodDeclaration /**
     * Defines the language (required).
     *
     * @param language the scripting language name for the script.
     */ Modifier public setLanguage FormalParameter ReferenceType String language StatementExpression MethodInvocation runner MemberReference language setLanguage MethodDeclaration /**
     * Initialize.
     *
     * @exception BuildException if someting goes wrong
     */ Modifier private init BuildException IfStatement MemberReference initialized BlockStatement ReturnStatement End StatementExpression Assignment MemberReference initialized Literal true = StatementExpression MethodInvocation runner MethodInvocation MethodInvocation getProperties getProject addBeans StatementExpression MethodInvocation runner MethodInvocation MethodInvocation getUserProperties getProject addBeans StatementExpression MethodInvocation runner MethodInvocation MethodInvocation getTargets getProject addBeans StatementExpression MethodInvocation runner MethodInvocation MethodInvocation getReferences getProject addBeans StatementExpression MethodInvocation runner Literal ""project"" MethodInvocation getProject addBean StatementExpression MethodInvocation runner Literal ""self"" This addBean MethodDeclaration /**
     * The current token
     *
     * @param token the string filtered by the script
     */ Modifier public setToken FormalParameter ReferenceType String token StatementExpression Assignment This MemberReference token MemberReference token = MethodDeclaration /**
     * The current token
     *
     * @return the string filtered by the script
     */ Modifier public ReferenceType String getToken ReturnStatement MemberReference token MethodDeclaration /**
     * Called filter the token.
     * This sets the token in this object, calls
     * the script and returns the token.
     *
     * @param token the token to be filtered
     * @return the filtered token
     */ Modifier public ReferenceType String filter FormalParameter ReferenceType String token StatementExpression MethodInvocation init StatementExpression MethodInvocation MemberReference token setToken StatementExpression MethodInvocation runner Literal ""<ANT-Filter>"" executeScript ReturnStatement MethodInvocation getToken MethodDeclaration /**
     * Load the script from an external file ; optional.
     *
     * @param file the file containing the script source.
     */ Modifier public setSrc FormalParameter ReferenceType File file StatementExpression MethodInvocation runner MemberReference file setSrc MethodDeclaration /**
     * The script text.
     *
     * @param text a component of the script text to be added.
     */ Modifier public addText FormalParameter ReferenceType String text StatementExpression MethodInvocation runner MemberReference text addText ReferenceType TokenFilter ReferenceType ChainableReaderFilter",0
345,345,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.rmic Import java.io.IOException Import java.io.OutputStream Import java.lang.reflect.Constructor Import java.lang.reflect.Method Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.LogOutputStream Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * The implementation of the rmic for SUN's JDK.
 *
 * @since Ant 1.4
 */ SunRmic MethodDeclaration Modifier public BasicType boolean execute BuildException StatementExpression MethodInvocation MethodInvocation Literal ""Using SUN rmic compiler"" MemberReference Project MSG_VERBOSE log getRmic LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmd MethodInvocation setupRmicCommand LocalVariableDeclaration ReferenceType LogOutputStream VariableDeclarator logstr ClassCreator ReferenceType LogOutputStream MethodInvocation getRmic MemberReference Project MSG_WARN TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator c MethodInvocation Class Literal ""sun.rmi.rmic.Main"" forName LocalVariableDeclaration ReferenceType Constructor VariableDeclarator cons MethodInvocation c ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType OutputStream ClassReference ReferenceType String getConstructor LocalVariableDeclaration ReferenceType Object VariableDeclarator rmic MethodInvocation cons ArrayCreator ReferenceType Object ArrayInitializer MemberReference logstr Literal ""rmic"" newInstance LocalVariableDeclaration ReferenceType Method VariableDeclarator doRmic MethodInvocation c Literal ""compile"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType String getMethod LocalVariableDeclaration ReferenceType Boolean VariableDeclarator ok Cast ReferenceType Boolean MethodInvocation doRmic MemberReference rmic ArrayCreator ReferenceType Object ArrayInitializer MethodInvocation cmd getArguments invoke ReturnStatement MethodInvocation ok booleanValue CatchClause CatchClauseParameter ClassNotFoundException ex ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Cannot use SUN rmic, as it is not "" Literal ""available.  A common solution is to "" Literal ""set the environment variable "" Literal ""JAVA_HOME or CLASSPATH."" MethodInvocation MethodInvocation getLocation getRmic CatchClause CatchClauseParameter Exception ex IfStatement BinaryOperation instanceof MemberReference ex ReferenceType BuildException BlockStatement ThrowStatement Cast ReferenceType BuildException MemberReference ex BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Error starting SUN rmic: "" MemberReference ex MethodInvocation MethodInvocation getLocation getRmic End TryStatement StatementExpression MethodInvocation logstr close CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e ReferenceType DefaultRmicAdapter",0
441,441,,1
497,497,,1
407,407,,0
29,29,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.optional Import org.apache.tools.ant.util.WeakishReference Import java.lang.ref.WeakReference ClassDeclaration Modifier public /**
 * This is a reference that really is is Weak, as it uses the
 * appropriate java.lang.ref class.
 *
 */ WeakishReference12 FieldDeclaration Modifier private ReferenceType WeakReference VariableDeclarator weakref ConstructorDeclaration Modifier public /**
     * create a new soft reference, which is bound to a
     * Weak reference inside
     * @param reference
     * @see java.lang.ref.WeakReference
     */ WeakishReference12 FormalParameter ReferenceType Object reference StatementExpression Assignment This MemberReference weakref ClassCreator ReferenceType WeakReference MemberReference reference = MethodDeclaration /**
     * Returns this reference object's referent.
     *
     * @return referent.
     */ Modifier public ReferenceType Object get ReturnStatement MethodInvocation weakref get ReferenceType WeakishReference",1
445,445,,0
182,182,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.metamata Import java.io.File Import java.io.FileOutputStream Import java.io.IOException Import java.io.OutputStream Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.ExecuteStreamHandler Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * Invokes the Metamata Audit/ Webgain Quality Analyzer on a set of Java files.
 * <p>
 * <i>maudit</i> performs static analysis of the Java source code and byte
 * code files to find and report errors of style and potential problems related
 * to performance, maintenance and robustness. As a convenience, a stylesheet
 * is given in <tt>etc</tt> directory, so that an HTML report can be generated
 * from the XML file.
 *
 */ MAudit FieldDeclaration /** RE does not seems to support regexp pattern with comments so i'm stripping it*/ Modifier final static ReferenceType String VariableDeclarator AUDIT_PATTERN Literal ""(?:file:)?(.+):(\\d+)\\s*:\\s+(.*)"" FieldDeclaration Modifier private ReferenceType File VariableDeclarator outFile Literal null FieldDeclaration Modifier private ReferenceType Path VariableDeclarator searchPath Literal null FieldDeclaration Modifier private ReferenceType Path VariableDeclarator rulesPath Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator fix Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator list Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator unused Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator quiet Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator exit Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator offsets Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator verbose Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator fullsemanticize Literal false ConstructorDeclaration Modifier public /** default constructor */ MAudit StatementExpression SuperConstructorInvocation Literal ""com.metamata.gui.rc.MAudit"" MethodDeclaration /**
     * The XML file to which the Audit result should be written to; required
     */ Modifier public setTofile FormalParameter ReferenceType File outFile StatementExpression Assignment This MemberReference outFile MemberReference outFile = MethodDeclaration /**
     * Automatically fix certain errors
     * (those marked as fixable in the manual);
     * optional, default=false
     */ Modifier public setFix FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference fix MemberReference flag = MethodDeclaration /**
     * Creates listing file for each audited file; optional, default false.
     * When set, a .maudit file will be generated in the
     * same location as the source file.
     */ Modifier public setList FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference list MemberReference flag = MethodDeclaration /**
     * Finds declarations unused in search paths; optional, default false.
     * It will look for unused global declarations
     * in the source code within a use domain specified by the
     * <tt>searchpath</tt> element.
     */ Modifier public setUnused FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference unused MemberReference flag = MethodDeclaration /**
     * flag to suppress copyright and summary messages; default false.
     * internal/testing only
     * @ant.attribute ignore=""true""
     */ Modifier public setQuiet FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference quiet MemberReference flag = MethodDeclaration /**
     * flag to tell the task to exit after the first error.
     * internal/testing only
     * @ant.attribute ignore=""true""
     */ Modifier public setExit FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference exit MemberReference flag = MethodDeclaration /**
     * internal/testing only
     * @ant.attribute ignore=""true""
     */ Modifier public setOffsets FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference offsets MemberReference flag = MethodDeclaration /**
     * flag to print all messages; optional, default false.
     * internal/testing only
     * @ant.attribute ignore=""true""
     */ Modifier public setVerbose FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference verbose MemberReference flag = MethodDeclaration /**
     * internal/testing only
     * @ant.attribute ignore=""true""
     */ Modifier public setFullsemanticize FormalParameter BasicType boolean flag StatementExpression Assignment This MemberReference fullsemanticize MemberReference flag = MethodDeclaration /**
     * classpath for additional audit rules
     * these must be placed before metamata.jar !!
     */ Modifier public ReferenceType Path createRulespath IfStatement BinaryOperation == MemberReference rulesPath Literal null BlockStatement StatementExpression Assignment MemberReference rulesPath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MemberReference rulesPath MethodDeclaration /**
     * search path to use for unused global declarations;
     * required when <tt>unused</tt> is set.
     */ Modifier public ReferenceType Path createSearchpath IfStatement BinaryOperation == MemberReference searchPath Literal null BlockStatement StatementExpression Assignment MemberReference searchPath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MemberReference searchPath MethodDeclaration /**
     * create the option vector for the command
     */ Modifier protected ReferenceType Vector getOptions LocalVariableDeclaration ReferenceType Vector VariableDeclarator options ClassCreator ReferenceType Vector Literal 512 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation fileSets size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MethodInvocation fileSets MemberReference i elementAt LocalVariableDeclaration ReferenceType Path VariableDeclarator path MethodInvocation createSourcepath LocalVariableDeclaration ReferenceType File VariableDeclarator dir MethodInvocation fs MethodInvocation getProject getDir StatementExpression MethodInvocation path MemberReference dir setLocation End IfStatement BinaryOperation != MemberReference sourcePath Literal null BlockStatement StatementExpression MethodInvocation sourcePath MemberReference classPath append StatementExpression Assignment MemberReference classPath MemberReference sourcePath = StatementExpression Assignment MemberReference sourcePath Literal null = End IfStatement BinaryOperation != MemberReference classPath Literal null BlockStatement StatementExpression MethodInvocation options Literal ""-classpath"" addElement StatementExpression MethodInvocation options MethodInvocation classPath toString addElement End IfStatement MemberReference quiet BlockStatement StatementExpression MethodInvocation options Literal ""-quiet"" addElement End IfStatement MemberReference fullsemanticize BlockStatement StatementExpression MethodInvocation options Literal ""-full-semanticize"" addElement End IfStatement MemberReference verbose BlockStatement StatementExpression MethodInvocation options Literal ""-verbose"" addElement End IfStatement MemberReference offsets BlockStatement StatementExpression MethodInvocation options Literal ""-offsets"" addElement End IfStatement MemberReference exit BlockStatement StatementExpression MethodInvocation options Literal ""-exit"" addElement End IfStatement MemberReference fix BlockStatement StatementExpression MethodInvocation options Literal ""-fix"" addElement End StatementExpression MethodInvocation options Literal ""-fullpath"" addElement IfStatement MemberReference list BlockStatement StatementExpression MethodInvocation options Literal ""-list"" addElement End IfStatement BinaryOperation != MemberReference sourcePath Literal null BlockStatement StatementExpression MethodInvocation options Literal ""-sourcepath"" addElement StatementExpression MethodInvocation options MethodInvocation sourcePath toString addElement End StatementExpression MethodInvocation MemberReference options MethodInvocation includedFiles keys addAllVector IfStatement MemberReference unused BlockStatement StatementExpression MethodInvocation options Literal ""-unused"" addElement StatementExpression MethodInvocation options MethodInvocation searchPath toString addElement End ReturnStatement MemberReference options MethodDeclaration /**
     * validate the settings
     */ Modifier protected checkOptions BuildException StatementExpression SuperMethodInvocation checkOptions IfStatement BinaryOperation && MemberReference unused BinaryOperation == MemberReference searchPath Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""'searchpath' element must be set when "" Literal ""looking for 'unused' declarations."" End IfStatement BinaryOperation && MemberReference ! unused BinaryOperation != MemberReference searchPath Literal null BlockStatement StatementExpression MethodInvocation Literal ""'searchpath' element ignored. 'unused' attribute is disabled."" MemberReference Project MSG_WARN log End IfStatement BinaryOperation != MemberReference rulesPath Literal null BlockStatement StatementExpression MethodInvocation cmdl MethodInvocation MemberReference rulesPath addExisting MethodInvocation getProject createClasspath End MethodDeclaration Modifier protected ReferenceType ExecuteStreamHandler createStreamHandler BuildException IfStatement BinaryOperation == MemberReference outFile Literal null BlockStatement ReturnStatement ClassCreator ReferenceType LogStreamHandler This MemberReference Project MSG_INFO MemberReference Project MSG_ERR End LocalVariableDeclaration ReferenceType ExecuteStreamHandler VariableDeclarator handler Literal null LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator out Literal null TryStatement StatementExpression Assignment MemberReference out ClassCreator ReferenceType FileOutputStream MemberReference outFile = StatementExpression Assignment MemberReference handler ClassCreator ReferenceType MAuditStreamHandler This MemberReference out = CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e IfStatement BinaryOperation == MemberReference out Literal null BlockStatement TryStatement StatementExpression MethodInvocation out close CatchClause CatchClauseParameter IOException e End ReturnStatement MemberReference handler MethodDeclaration Modifier protected cleanUp BuildException StatementExpression SuperMethodInvocation cleanUp ReferenceType AbstractMetamataTask",0
173,173,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors Import java.io.File Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.Parameter ClassDeclaration Modifier public /**
 * Selector that selects a certain kind of file: directory or regular.
 *
 * @since 1.6
 */ TypeSelector FieldDeclaration Modifier private ReferenceType String VariableDeclarator type Literal null FieldDeclaration /** Key to used for parameterized custom selector */ Modifier public final static ReferenceType String VariableDeclarator TYPE_KEY Literal ""type"" ConstructorDeclaration Modifier public /**
     * Creates a new <code>TypeSelector</code> instance.
     *
     */ TypeSelector MethodDeclaration /**
     * @return a string describing this object
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer Literal ""{typeselector type: "" StatementExpression MethodInvocation buf MemberReference type append StatementExpression MethodInvocation buf Literal ""}"" append ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * Set the type of file to require.
     * @param fileTypes the type of file - file or dir
     */ Modifier public setType FormalParameter ReferenceType FileType fileTypes StatementExpression Assignment This MemberReference type MethodInvocation fileTypes getValue = MethodDeclaration /**
     * When using this as a custom selector, this method will be called.
     * It translates each parameter into the appropriate setXXX() call.
     *
     * @param parameters the complete set of parameters for this selector
     */ Modifier public setParameters FormalParameter ReferenceType Parameter parameters StatementExpression SuperMethodInvocation MemberReference parameters setParameters IfStatement BinaryOperation != MemberReference parameters Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference parameters length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator paramname MemberReference ArraySelector MemberReference i MethodInvocation getName parameters IfStatement MethodInvocation TYPE_KEY MemberReference paramname equalsIgnoreCase BlockStatement LocalVariableDeclaration ReferenceType FileType VariableDeclarator type ClassCreator ReferenceType FileType StatementExpression MethodInvocation type MemberReference ArraySelector MemberReference i MethodInvocation getValue parameters setValue StatementExpression MethodInvocation MemberReference type setType BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Invalid parameter "" MemberReference paramname setError End End End MethodDeclaration /**
     * Checks to make sure all settings are kosher. In this case, it
     * means that the pattern attribute has been set.
     *
     */ Modifier public verifySettings IfStatement BinaryOperation == MemberReference type Literal null BlockStatement StatementExpression MethodInvocation Literal ""The type attribute is required"" setError End MethodDeclaration /**
     * The heart of the matter. This is where the selector gets to decide
     * on the inclusion of a file in a particular fileset.
     *
     * @param basedir the base directory the scan is being done from
     * @param filename is the name of the file to check
     * @param file is a java.io.File object the selector can use
     * @return whether the file should be selected or not
     */ Modifier public BasicType boolean isSelected FormalParameter ReferenceType File basedir FormalParameter ReferenceType String filename FormalParameter ReferenceType File file StatementExpression MethodInvocation validate IfStatement MethodInvocation file isDirectory BlockStatement ReturnStatement MethodInvocation type MemberReference FileType DIR equals BlockStatement ReturnStatement MethodInvocation type MemberReference FileType FILE equals End ClassDeclaration Modifier public static /**
     * Enumerated attribute with the values for types of file
     */ FileType FieldDeclaration /** the string value for file */ Modifier public final static ReferenceType String VariableDeclarator FILE Literal ""file"" FieldDeclaration /** the string value for dir */ Modifier public final static ReferenceType String VariableDeclarator DIR Literal ""dir"" MethodDeclaration /**
         * @return the values as an array of strings
         */ Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer MemberReference FILE MemberReference DIR ReferenceType EnumeratedAttribute ReferenceType BaseExtendSelector",0
633,633,,0
426,426,,0
296,296,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import java.lang.reflect.Method Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStream Import java.net.MalformedURLException Import java.net.URL Import java.util.Enumeration Import java.util.Stack Import java.util.Vector Import javax.xml.parsers.ParserConfigurationException Import javax.xml.parsers.SAXParserFactory Import javax.xml.transform.Source Import javax.xml.transform.TransformerException Import javax.xml.transform.URIResolver Import javax.xml.transform.sax.SAXSource Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.ant.util.JAXPUtils Import org.xml.sax.EntityResolver Import org.xml.sax.InputSource Import org.xml.sax.SAXException Import org.xml.sax.XMLReader ClassDeclaration Modifier public /**
 * <p>This data type provides a catalog of resource locations (such as
 * DTDs and XML entities), based on the <a
 * href=""http://oasis-open.org/committees/entity/spec-2001-08-06.html"">
 * OASIS ""Open Catalog"" standard</a>.  The catalog entries are used
 * both for Entity resolution and URI resolution, in accordance with
 * the {@link org.xml.sax.EntityResolver EntityResolver} and {@link
 * javax.xml.transform.URIResolver URIResolver} interfaces as defined
 * in the <a href=""http://java.sun.com/xml/jaxp"">Java API for XML
 * Processing Specification</a>.</p>
 *
 * <p>Resource locations can be specified either in-line or in
 * external catalog file(s), or both.  In order to use an external
 * catalog file, the xml-commons resolver library (""resolver.jar"")
 * must be in your classpath.  External catalog files may be either <a
 * href=""http://oasis-open.org/committees/entity/background/9401.html"">
 * plain text format</a> or <a
 * href=""http://www.oasis-open.org/committees/entity/spec-2001-08-06.html"">
 * XML format</a>.  If the xml-commons resolver library is not found
 * in the classpath, external catalog files, specified in
 * <code>&lt;catalogpath&gt;</code> paths, will be ignored and a warning will
 * be logged.  In this case, however, processing of inline entries will proceed
 * normally.</p>
 *
 * <p>Currently, only <code>&lt;dtd&gt;</code> and
 * <code>&lt;entity&gt;</code> elements may be specified inline; these
 * correspond to OASIS catalog entry types <code>PUBLIC</code> and
 * <code>URI</code> respectively.</p>
 *
 * <p>The following is a usage example:</p>
 *
 * <code>
 * &lt;xmlcatalog&gt;<br>
 * &nbsp;&nbsp;&lt;dtd publicId="""" location=""/path/to/file.jar"" /&gt;<br>
 * &nbsp;&nbsp;&lt;dtd publicId="""" location=""/path/to/file2.jar"" /&gt;<br>
 * &nbsp;&nbsp;&lt;entity publicId="""" location=""/path/to/file3.jar"" /&gt;<br>
 * &nbsp;&nbsp;&lt;entity publicId="""" location=""/path/to/file4.jar"" /&gt;<br>
 * &nbsp;&nbsp;&lt;catalogpath&gt;<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement location=""/etc/sgml/catalog""/&gt;<br>
 * &nbsp;&nbsp;&lt;/catalogpath&gt;<br>
 * &nbsp;&nbsp;&lt;catalogfiles dir=""/opt/catalogs/"" includes=""**\catalog.xml"" /&gt;<br>
 * &lt;/xmlcatalog&gt;<br>
 * </code>
 * <p>
 * Tasks wishing to use <code>&lt;xmlcatalog&gt;</code> must provide a method called
 * <code>createXMLCatalog</code> which returns an instance of
 * <code>XMLCatalog</code>. Nested DTD and entity definitions are handled by
 * the XMLCatalog object and must be labeled <code>dtd</code> and
 * <code>entity</code> respectively.</p>
 *
 * <p>The following is a description of the resolution algorithm:
 * entities/URIs/dtds are looked up in each of the following contexts,
 * stopping when a valid and readable resource is found:
 * <ol>
 * <li>In the local filesystem</li>
 * <li>In the classpath</li>
 * <li>Using the Apache xml-commons resolver (if it is available)</li>
 * <li>In URL-space</li>
 * </ol>
 * </p>
 *
 * <p>See {@link
 * org.apache.tools.ant.taskdefs.optional.XMLValidateTask
 * XMLValidateTask} for an example of a task that has integrated
 * support for XMLCatalogs.</p>
 *
 * <p>Possible future extension could provide for additional OASIS
 * entry types to be specified inline.</p>
 *
 */ XMLCatalog FieldDeclaration /** helper for some File.toURL connversions */ Modifier private static ReferenceType FileUtils VariableDeclarator fileUtils MethodInvocation FileUtils newFileUtils FieldDeclaration /** Holds dtd/entity objects until needed. */ Modifier private ReferenceType Vector VariableDeclarator elements ClassCreator ReferenceType Vector FieldDeclaration /**
     * Classpath in which to attempt to resolve resources.
     */ Modifier private ReferenceType Path VariableDeclarator classpath FieldDeclaration /**
     * Path listing external catalog files to search when resolving entities
     */ Modifier private ReferenceType Path VariableDeclarator catalogPath FieldDeclaration /**
     * The name of the bridge to the Apache xml-commons resolver
     * class, used to determine whether resolver.jar is present in the
     * classpath.
     */ Modifier public final static ReferenceType String VariableDeclarator APACHE_RESOLVER Literal ""org.apache.tools.ant.types.resolver.ApacheCatalogResolver"" FieldDeclaration /**
     * Resolver base class
     */ Modifier public final static ReferenceType String VariableDeclarator CATALOG_RESOLVER Literal ""org.apache.xml.resolver.tools.CatalogResolver"" ConstructorDeclaration Modifier public /**
     * Default constructor
     */ XMLCatalog StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Returns the elements of the catalog - ResourceLocation objects.
     *
     * @return the elements of the catalog - ResourceLocation objects
     */ Modifier private ReferenceType Vector getElements ReturnStatement MethodInvocation MemberReference elements getRef MethodDeclaration /**
     * Returns the classpath in which to attempt to resolve resources.
     *
     * @return the classpath
     */ Modifier private ReferenceType Path getClasspath ReturnStatement MethodInvocation MemberReference classpath getRef MethodDeclaration /**
     * Set the list of ResourceLocation objects in the catalog.
     * Not allowed if this catalog is itself a reference to another catalog --
     * that is, a catalog cannot both refer to another <em>and</em> contain
     * elements or other attributes.
     *
     * @param aVector the new list of ResourceLocations
     * to use in the catalog.
     */ Modifier private setElements FormalParameter ReferenceType Vector aVector IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End StatementExpression Assignment MemberReference elements MemberReference aVector = MethodDeclaration /**
     * Allows nested classpath elements. Not allowed if this catalog
     * is itself a reference to another catalog -- that is, a catalog
     * cannot both refer to another <em>and</em> contain elements or
     * other attributes.
     *
     * @return a Path instance to be configured.
     */ Modifier public ReferenceType Path createClasspath IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = End StatementExpression MethodInvocation Literal false setChecked ReturnStatement This MemberReference classpath MethodInvocation createPath MethodDeclaration /**
     * Allows simple classpath string.  Not allowed if this catalog is
     * itself a reference to another catalog -- that is, a catalog
     * cannot both refer to another <em>and</em> contain elements or
     * other attributes.
     *
     * @param classpath the classpath to use to look up entities.
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath MemberReference classpath = BlockStatement StatementExpression This MemberReference classpath MethodInvocation MemberReference classpath append End StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Allows classpath reference.  Not allowed if this catalog is
     * itself a reference to another catalog -- that is, a catalog
     * cannot both refer to another <em>and</em> contain elements or
     * other attributes.
     *
     * @param r an Ant reference containing a classpath.
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /** Creates a nested <code>&lt;catalogpath&gt;</code> element.
     * Not allowed if this catalog is itself a reference to another
     * catalog -- that is, a catalog cannot both refer to another
     * <em>and</em> contain elements or other attributes.
     *
     * @return a path to be configured as the catalog path.
     * @exception BuildException
     * if this is a reference and no nested elements are allowed.
     */ Modifier public ReferenceType Path createCatalogPath IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End IfStatement BinaryOperation == This MemberReference catalogPath Literal null BlockStatement StatementExpression Assignment This MemberReference catalogPath ClassCreator ReferenceType Path MethodInvocation getProject = End StatementExpression MethodInvocation Literal false setChecked ReturnStatement This MemberReference catalogPath MethodInvocation createPath MethodDeclaration /**
     * Allows catalogpath reference.  Not allowed if this catalog is
     * itself a reference to another catalog -- that is, a catalog
     * cannot both refer to another <em>and</em> contain elements or
     * other attributes.
     *
     * @param r an Ant reference containing a classpath to be used as
     * the catalog path.
     */ Modifier public setCatalogPathRef FormalParameter ReferenceType Reference r IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createCatalogPath StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Returns the catalog path in which to attempt to resolve DTDs.
     *
     * @return the catalog path
     */ Modifier public ReferenceType Path getCatalogPath ReturnStatement MethodInvocation MemberReference catalogPath getRef MethodDeclaration /**
     * Creates the nested <code>&lt;dtd&gt;</code> element.  Not
     * allowed if this catalog is itself a reference to another
     * catalog -- that is, a catalog cannot both refer to another
     * <em>and</em> contain elements or other attributes.
     *
     * @param dtd the information about the PUBLIC resource mapping to
     *            be added to the catalog
     * @exception BuildException if this is a reference and no nested
     *       elements are allowed.
     */ Modifier public addDTD FormalParameter ReferenceType ResourceLocation dtd BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End StatementExpression MethodInvocation MethodInvocation MemberReference dtd addElement getElements StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Creates the nested <code>&lt;entity&gt;</code> element.    Not
     * allowed if this catalog is itself a reference to another
     * catalog -- that is, a catalog cannot both refer to another
     * <em>and</em> contain elements or other attributes.
     *
     * @param entity the information about the URI resource mapping to be
     *       added to the catalog.
     * @exception BuildException if this is a reference and no nested
     *       elements are allowed.
     */ Modifier public addEntity FormalParameter ReferenceType ResourceLocation entity BuildException StatementExpression MethodInvocation MemberReference entity addDTD MethodDeclaration /**
     * Loads a nested <code>&lt;xmlcatalog&gt;</code> into our
     * definition.  Not allowed if this catalog is itself a reference
     * to another catalog -- that is, a catalog cannot both refer to
     * another <em>and</em> contain elements or other attributes.
     *
     * @param catalog Nested XMLCatalog
     */ Modifier public addConfiguredXMLCatalog FormalParameter ReferenceType XMLCatalog catalog IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation noChildrenAllowed End LocalVariableDeclaration ReferenceType Vector VariableDeclarator newElements MethodInvocation catalog getElements LocalVariableDeclaration ReferenceType Vector VariableDeclarator ourElements MethodInvocation getElements LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation newElements elements WhileStatement MethodInvocation e hasMoreElements BlockStatement StatementExpression MethodInvocation ourElements MethodInvocation e nextElement addElement End LocalVariableDeclaration ReferenceType Path VariableDeclarator nestedClasspath MethodInvocation catalog getClasspath StatementExpression MethodInvocation MethodInvocation MemberReference nestedClasspath append createClasspath LocalVariableDeclaration ReferenceType Path VariableDeclarator nestedCatalogPath MethodInvocation catalog getCatalogPath StatementExpression MethodInvocation MethodInvocation MemberReference nestedCatalogPath append createCatalogPath StatementExpression MethodInvocation Literal false setChecked MethodDeclaration /**
     * Makes this instance in effect a reference to another XMLCatalog
     * instance.
     *
     * <p>You must not set another attribute or nest elements inside
     * this element if you make it a reference.  That is, a catalog
     * cannot both refer to another <em>and</em> contain elements or
     * attributes.</p>
     *
     * @param r the reference to which this catalog instance is associated
     * @exception BuildException if this instance already has been configured.
     */ Modifier public setRefid FormalParameter ReferenceType Reference r BuildException IfStatement MethodInvocation ! elements isEmpty BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression SuperMethodInvocation MemberReference r setRefid MethodDeclaration /**
     * Implements the EntityResolver.resolveEntity() interface method.
     *
     * @see org.xml.sax.EntityResolver#resolveEntity
     */ Modifier public ReferenceType InputSource resolveEntity FormalParameter ReferenceType String publicId FormalParameter ReferenceType String systemId SAXException IOException IfStatement MethodInvocation isReference BlockStatement ReturnStatement MethodInvocation MethodInvocation MemberReference publicId MemberReference systemId resolveEntity getRef End IfStatement MethodInvocation ! isChecked BlockStatement LocalVariableDeclaration ReferenceType Stack VariableDeclarator stk ClassCreator ReferenceType Stack StatementExpression MethodInvocation stk This push StatementExpression MethodInvocation MemberReference stk MethodInvocation getProject dieOnCircularReference End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""resolveEntity: '"" MemberReference publicId Literal ""': '"" MemberReference systemId Literal ""'"" MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType InputSource VariableDeclarator inputSource MethodInvocation MethodInvocation MemberReference publicId MemberReference systemId resolveEntity getCatalogResolver IfStatement BinaryOperation == MemberReference inputSource Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""No matching catalog entry found, parser will use: '"" MemberReference systemId Literal ""'"" MemberReference Project MSG_DEBUG log End ReturnStatement MemberReference inputSource MethodDeclaration /**
     * Implements the URIResolver.resolve() interface method.
     *
     * @see javax.xml.transform.URIResolver#resolve
     */ Modifier public ReferenceType Source resolve FormalParameter ReferenceType String href FormalParameter ReferenceType String base TransformerException IfStatement MethodInvocation isReference BlockStatement ReturnStatement MethodInvocation MethodInvocation MemberReference href MemberReference base resolve getRef End IfStatement MethodInvocation ! isChecked BlockStatement LocalVariableDeclaration ReferenceType Stack VariableDeclarator stk ClassCreator ReferenceType Stack StatementExpression MethodInvocation stk This push StatementExpression MethodInvocation MemberReference stk MethodInvocation getProject dieOnCircularReference End LocalVariableDeclaration ReferenceType SAXSource VariableDeclarator source Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation MemberReference href removeFragment StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""resolve: '"" MemberReference uri Literal ""' with base: '"" MemberReference base Literal ""'"" MemberReference Project MSG_DEBUG log StatementExpression Assignment MemberReference source Cast ReferenceType SAXSource MethodInvocation MethodInvocation MemberReference uri MemberReference base resolve getCatalogResolver = IfStatement BinaryOperation == MemberReference source Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""No matching catalog entry found, parser will use: '"" MemberReference href Literal ""'"" MemberReference Project MSG_DEBUG log StatementExpression Assignment MemberReference source ClassCreator ReferenceType SAXSource = LocalVariableDeclaration ReferenceType URL VariableDeclarator baseURL Literal null TryStatement IfStatement BinaryOperation == MemberReference base Literal null BlockStatement StatementExpression Assignment MemberReference baseURL MethodInvocation fileUtils MethodInvocation MethodInvocation getBaseDir getProject getFileURL = BlockStatement StatementExpression Assignment MemberReference baseURL ClassCreator ReferenceType URL MemberReference base = End LocalVariableDeclaration ReferenceType URL VariableDeclarator url TernaryExpression BinaryOperation == MethodInvocation uri length Literal 0 MemberReference baseURL ClassCreator ReferenceType URL MemberReference baseURL MemberReference uri StatementExpression MethodInvocation source ClassCreator ReferenceType InputSource MethodInvocation url toString setInputSource CatchClause CatchClauseParameter MalformedURLException ex StatementExpression MethodInvocation source ClassCreator ReferenceType InputSource MemberReference uri setInputSource End StatementExpression MethodInvocation MemberReference source setEntityResolver ReturnStatement MemberReference source MethodDeclaration /**
     * @since Ant 1.6
     */ Modifier private ReferenceType XMLCatalog getRef IfStatement MethodInvocation ! isReference BlockStatement ReturnStatement This End ReturnStatement Cast ReferenceType XMLCatalog MethodInvocation ClassReference ReferenceType XMLCatalog Literal ""xmlcatalog"" getCheckedRef FieldDeclaration /**
     * The instance of the CatalogResolver strategy to use.
     */ Modifier private ReferenceType CatalogResolver VariableDeclarator catalogResolver Literal null MethodDeclaration /**
     * Factory method for creating the appropriate CatalogResolver
     * strategy implementation.
     * <p> Until we query the classpath, we don't know whether the Apache
     * resolver (Norm Walsh's library from xml-commons) is available or not.
     * This method determines whether the library is available and creates the
     * appropriate implementation of CatalogResolver based on the answer.</p>
     * <p>This is an application of the Gang of Four Strategy Pattern
     * combined with Template Method.</p>
     */ Modifier private ReferenceType CatalogResolver getCatalogResolver IfStatement BinaryOperation == MemberReference catalogResolver Literal null BlockStatement LocalVariableDeclaration ReferenceType AntClassLoader VariableDeclarator loader Literal null StatementExpression Assignment MemberReference loader MethodInvocation MethodInvocation MemberReference Path systemClasspath createClassLoader getProject = TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator clazz MethodInvocation Class MemberReference APACHE_RESOLVER Literal true MemberReference loader forName LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator apacheResolverLoader MethodInvocation clazz getClassLoader LocalVariableDeclaration ReferenceType Class VariableDeclarator baseResolverClass MethodInvocation Class MemberReference CATALOG_RESOLVER Literal true MemberReference apacheResolverLoader forName LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator baseResolverLoader MethodInvocation baseResolverClass getClassLoader StatementExpression Assignment MemberReference clazz MethodInvocation Class MemberReference APACHE_RESOLVER Literal true MemberReference baseResolverLoader forName = LocalVariableDeclaration ReferenceType Object VariableDeclarator obj MethodInvocation clazz newInstance StatementExpression Assignment MemberReference catalogResolver ClassCreator ReferenceType ExternalResolver MemberReference clazz MemberReference obj = CatchClause CatchClauseParameter Throwable ex StatementExpression Assignment MemberReference catalogResolver ClassCreator ReferenceType InternalResolver = IfStatement BinaryOperation && BinaryOperation != MethodInvocation getCatalogPath Literal null BinaryOperation != MethodInvocation MethodInvocation list MemberReference length getCatalogPath Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Warning: catalogpath listing external catalogs"" Literal "" will be ignored"" MemberReference Project MSG_WARN log End StatementExpression MethodInvocation BinaryOperation + Literal ""Failed to load Apache resolver: "" MemberReference ex MemberReference Project MSG_DEBUG log End ReturnStatement MemberReference catalogResolver MethodDeclaration /**
     * <p>This is called from the URIResolver to set an EntityResolver
     * on the SAX parser to be used for new XML documents that are
     * encountered as a result of the document() function, xsl:import,
     * or xsl:include.  This is done because the XSLT processor calls
     * out to the SAXParserFactory itself to create a new SAXParser to
     * parse the new document.  The new parser does not automatically
     * inherit the EntityResolver of the original (although arguably
     * it should).  See below:</p>
     *
     * <tt>""If an application wants to set the ErrorHandler or
     * EntityResolver for an XMLReader used during a transformation,
     * it should use a URIResolver to return the SAXSource which
     * provides (with getXMLReader) a reference to the XMLReader""</tt>
     *
     * <p>...quoted from page 118 of the Java API for XML
     * Processing 1.1 specification</p>
     *
     */ Modifier private setEntityResolver FormalParameter ReferenceType SAXSource source TransformerException LocalVariableDeclaration ReferenceType XMLReader VariableDeclarator reader MethodInvocation source getXMLReader IfStatement BinaryOperation == MemberReference reader Literal null BlockStatement LocalVariableDeclaration ReferenceType SAXParserFactory VariableDeclarator spFactory MethodInvocation SAXParserFactory newInstance StatementExpression MethodInvocation spFactory Literal true setNamespaceAware TryStatement StatementExpression Assignment MemberReference reader MethodInvocation spFactory MethodInvocation getXMLReader newSAXParser = CatchClause CatchClauseParameter ParserConfigurationException ex ThrowStatement ClassCreator ReferenceType TransformerException MemberReference ex CatchClause CatchClauseParameter SAXException ex ThrowStatement ClassCreator ReferenceType TransformerException MemberReference ex End StatementExpression MethodInvocation reader This setEntityResolver StatementExpression MethodInvocation source MemberReference reader setXMLReader MethodDeclaration /**
     * Find a ResourceLocation instance for the given publicId.
     *
     * @param publicId the publicId of the Resource for which local information
     *        is required.
     * @return a ResourceLocation instance with information on the local location
     *         of the Resource or null if no such information is available.
     */ Modifier private ReferenceType ResourceLocation findMatchingEntry FormalParameter ReferenceType String publicId LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation MethodInvocation elements getElements LocalVariableDeclaration ReferenceType ResourceLocation VariableDeclarator element Literal null WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation e nextElement IfStatement BinaryOperation instanceof MemberReference o ReferenceType ResourceLocation BlockStatement StatementExpression Assignment MemberReference element Cast ReferenceType ResourceLocation MemberReference o = IfStatement MethodInvocation element MethodInvocation MemberReference publicId equals getPublicId BlockStatement ReturnStatement MemberReference element End End End ReturnStatement Literal null MethodDeclaration /**
     * Utility method to remove trailing fragment from a URI.
     * For example,
     * <code>http://java.sun.com/index.html#chapter1</code>
     * would return <code>http://java.sun.com/index.html</code>.
     *
     * @param uri The URI to process.  It may or may not contain a
     *            fragment.
     * @return The URI sans fragment.
     */ Modifier private ReferenceType String removeFragment FormalParameter ReferenceType String uri LocalVariableDeclaration ReferenceType String VariableDeclarator result MemberReference uri LocalVariableDeclaration BasicType int VariableDeclarator hashPos MethodInvocation uri Literal ""#"" indexOf IfStatement BinaryOperation >= MemberReference hashPos Literal 0 BlockStatement StatementExpression Assignment MemberReference result MethodInvocation uri Literal 0 MemberReference hashPos substring = End ReturnStatement MemberReference result MethodDeclaration /**
     * Utility method to lookup a ResourceLocation in the filesystem.
     *
     * @return An InputSource for reading the file, or <code>null</code>
     *     if the file does not exist or is not readable.
     */ Modifier private ReferenceType InputSource filesystemLookup FormalParameter ReferenceType ResourceLocation matchingEntry LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation matchingEntry getLocation StatementExpression Assignment MemberReference uri MethodInvocation uri MemberReference File separatorChar Literal '/' replace = LocalVariableDeclaration ReferenceType URL VariableDeclarator baseURL Literal null IfStatement BinaryOperation != MethodInvocation matchingEntry getBase Literal null BlockStatement StatementExpression Assignment MemberReference baseURL MethodInvocation matchingEntry getBase = BlockStatement TryStatement StatementExpression Assignment MemberReference baseURL MethodInvocation fileUtils MethodInvocation MethodInvocation getBaseDir getProject getFileURL = CatchClause CatchClauseParameter MalformedURLException ex ThrowStatement ClassCreator ReferenceType BuildException Literal ""Project basedir cannot be converted to a URL"" End LocalVariableDeclaration ReferenceType InputSource VariableDeclarator source Literal null LocalVariableDeclaration ReferenceType URL VariableDeclarator url Literal null TryStatement StatementExpression Assignment MemberReference url ClassCreator ReferenceType URL MemberReference baseURL MemberReference uri = CatchClause CatchClauseParameter MalformedURLException ex LocalVariableDeclaration ReferenceType File VariableDeclarator testFile ClassCreator ReferenceType File MemberReference uri IfStatement BinaryOperation && MethodInvocation testFile exists MethodInvocation testFile canRead BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""uri : '"" MemberReference uri Literal ""' matches a readable file"" MemberReference Project MSG_DEBUG log TryStatement StatementExpression Assignment MemberReference url MethodInvocation fileUtils MemberReference testFile getFileURL = CatchClause CatchClauseParameter MalformedURLException ex1 ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""could not find an URL for :"" MethodInvocation testFile getAbsolutePath BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""uri : '"" MemberReference uri Literal ""' does not match a readable file"" MemberReference Project MSG_DEBUG log End IfStatement BinaryOperation != MemberReference url Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fileName MethodInvocation url getFile IfStatement BinaryOperation != MemberReference fileName Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""fileName "" MemberReference fileName MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType File VariableDeclarator resFile ClassCreator ReferenceType File MemberReference fileName IfStatement BinaryOperation && MethodInvocation resFile exists MethodInvocation resFile canRead BlockStatement TryStatement StatementExpression Assignment MemberReference source ClassCreator ReferenceType InputSource ClassCreator ReferenceType FileInputStream MemberReference resFile = LocalVariableDeclaration ReferenceType String VariableDeclarator sysid MethodInvocation JAXPUtils MemberReference resFile getSystemId StatementExpression MethodInvocation source MemberReference sysid setSystemId StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""catalog entry matched a readable file: '"" MemberReference sysid Literal ""'"" MemberReference Project MSG_DEBUG log CatchClause CatchClauseParameter IOException ex End End End ReturnStatement MemberReference source MethodDeclaration /**
     * Utility method to lookup a ResourceLocation in the classpath.
     *
     * @return An InputSource for reading the resource, or <code>null</code>
     *    if the resource does not exist in the classpath or is not readable.
     */ Modifier private ReferenceType InputSource classpathLookup FormalParameter ReferenceType ResourceLocation matchingEntry LocalVariableDeclaration ReferenceType InputSource VariableDeclarator source Literal null LocalVariableDeclaration ReferenceType AntClassLoader VariableDeclarator loader Literal null LocalVariableDeclaration ReferenceType Path VariableDeclarator cp MemberReference classpath IfStatement BinaryOperation != MemberReference cp Literal null BlockStatement StatementExpression Assignment MemberReference cp MethodInvocation classpath Literal ""ignore"" concatSystemClasspath = BlockStatement StatementExpression Assignment MemberReference cp ClassCreator MethodInvocation Literal ""last"" concatSystemClasspath ReferenceType Path MethodInvocation getProject = End StatementExpression Assignment MemberReference loader MethodInvocation MethodInvocation MemberReference cp createClassLoader getProject = LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is MethodInvocation loader MethodInvocation matchingEntry getLocation getResourceAsStream IfStatement BinaryOperation != MemberReference is Literal null BlockStatement StatementExpression Assignment MemberReference source ClassCreator ReferenceType InputSource MemberReference is = LocalVariableDeclaration ReferenceType URL VariableDeclarator entryURL MethodInvocation loader MethodInvocation matchingEntry getLocation getResource LocalVariableDeclaration ReferenceType String VariableDeclarator sysid MethodInvocation entryURL toExternalForm StatementExpression MethodInvocation source MemberReference sysid setSystemId StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""catalog entry matched a resource in the classpath: '"" MemberReference sysid Literal ""'"" MemberReference Project MSG_DEBUG log End ReturnStatement MemberReference source MethodDeclaration /**
     * Utility method to lookup a ResourceLocation in URL-space.
     *
     * @return An InputSource for reading the resource, or <code>null</code>
     *    if the resource does not identify a valid URL or is not readable.
     */ Modifier private ReferenceType InputSource urlLookup FormalParameter ReferenceType ResourceLocation matchingEntry LocalVariableDeclaration ReferenceType String VariableDeclarator uri MethodInvocation matchingEntry getLocation LocalVariableDeclaration ReferenceType URL VariableDeclarator baseURL Literal null IfStatement BinaryOperation != MethodInvocation matchingEntry getBase Literal null BlockStatement StatementExpression Assignment MemberReference baseURL MethodInvocation matchingEntry getBase = BlockStatement TryStatement StatementExpression Assignment MemberReference baseURL MethodInvocation fileUtils MethodInvocation MethodInvocation getBaseDir getProject getFileURL = CatchClause CatchClauseParameter MalformedURLException ex ThrowStatement ClassCreator ReferenceType BuildException Literal ""Project basedir cannot be converted to a URL"" End LocalVariableDeclaration ReferenceType InputSource VariableDeclarator source Literal null LocalVariableDeclaration ReferenceType URL VariableDeclarator url Literal null TryStatement StatementExpression Assignment MemberReference url ClassCreator ReferenceType URL MemberReference baseURL MemberReference uri = CatchClause CatchClauseParameter MalformedURLException ex IfStatement BinaryOperation != MemberReference url Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is MethodInvocation url openStream IfStatement BinaryOperation != MemberReference is Literal null BlockStatement StatementExpression Assignment MemberReference source ClassCreator ReferenceType InputSource MemberReference is = LocalVariableDeclaration ReferenceType String VariableDeclarator sysid MethodInvocation url toExternalForm StatementExpression MethodInvocation source MemberReference sysid setSystemId StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""catalog entry matched as a URL: '"" MemberReference sysid Literal ""'"" MemberReference Project MSG_DEBUG log End CatchClause CatchClauseParameter IOException ex End ReturnStatement MemberReference source InterfaceDeclaration Modifier private /**
     * Interface implemented by both the InternalResolver strategy and
     * the ExternalResolver strategy.
     */ CatalogResolver MethodDeclaration ReferenceType InputSource resolveEntity FormalParameter ReferenceType String publicId FormalParameter ReferenceType String systemId MethodDeclaration ReferenceType Source resolve FormalParameter ReferenceType String href FormalParameter ReferenceType String base TransformerException ReferenceType URIResolver ReferenceType EntityResolver ClassDeclaration Modifier private /**
     * The InternalResolver strategy is used if the Apache resolver
     * library (Norm Walsh's library from xml-commons) is not
     * available.  In this case, external catalog files will be
     * ignored.
     *
     */ InternalResolver ConstructorDeclaration Modifier public InternalResolver StatementExpression MethodInvocation Literal ""Apache resolver library not found, internal resolver will be used"" MemberReference Project MSG_VERBOSE log MethodDeclaration Modifier public ReferenceType InputSource resolveEntity FormalParameter ReferenceType String publicId FormalParameter ReferenceType String systemId LocalVariableDeclaration ReferenceType InputSource VariableDeclarator result Literal null LocalVariableDeclaration ReferenceType ResourceLocation VariableDeclarator matchingEntry MethodInvocation MemberReference publicId findMatchingEntry IfStatement BinaryOperation != MemberReference matchingEntry Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Matching catalog entry found for publicId: '"" MethodInvocation matchingEntry getPublicId Literal ""' location: '"" MethodInvocation matchingEntry getLocation Literal ""'"" MemberReference Project MSG_DEBUG log StatementExpression Assignment MemberReference result MethodInvocation MemberReference matchingEntry filesystemLookup = IfStatement BinaryOperation == MemberReference result Literal null BlockStatement StatementExpression Assignment MemberReference result MethodInvocation MemberReference matchingEntry classpathLookup = End IfStatement BinaryOperation == MemberReference result Literal null BlockStatement StatementExpression Assignment MemberReference result MethodInvocation MemberReference matchingEntry urlLookup = End End ReturnStatement MemberReference result MethodDeclaration Modifier public ReferenceType Source resolve FormalParameter ReferenceType String href FormalParameter ReferenceType String base TransformerException LocalVariableDeclaration ReferenceType SAXSource VariableDeclarator result Literal null LocalVariableDeclaration ReferenceType InputSource VariableDeclarator source Literal null LocalVariableDeclaration ReferenceType ResourceLocation VariableDeclarator matchingEntry MethodInvocation MemberReference href findMatchingEntry IfStatement BinaryOperation != MemberReference matchingEntry Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Matching catalog entry found for uri: '"" MethodInvocation matchingEntry getPublicId Literal ""' location: '"" MethodInvocation matchingEntry getLocation Literal ""'"" MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType ResourceLocation VariableDeclarator entryCopy MemberReference matchingEntry IfStatement BinaryOperation != MemberReference base Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType URL VariableDeclarator baseURL ClassCreator ReferenceType URL MemberReference base StatementExpression Assignment MemberReference entryCopy ClassCreator ReferenceType ResourceLocation = StatementExpression MethodInvocation entryCopy MemberReference baseURL setBase CatchClause CatchClauseParameter MalformedURLException ex End StatementExpression MethodInvocation entryCopy MethodInvocation matchingEntry getPublicId setPublicId StatementExpression MethodInvocation entryCopy MethodInvocation matchingEntry getLocation setLocation StatementExpression Assignment MemberReference source MethodInvocation MemberReference entryCopy filesystemLookup = IfStatement BinaryOperation == MemberReference source Literal null BlockStatement StatementExpression Assignment MemberReference source MethodInvocation MemberReference entryCopy classpathLookup = End IfStatement BinaryOperation == MemberReference source Literal null BlockStatement StatementExpression Assignment MemberReference source MethodInvocation MemberReference entryCopy urlLookup = End IfStatement BinaryOperation != MemberReference source Literal null BlockStatement StatementExpression Assignment MemberReference result ClassCreator ReferenceType SAXSource MemberReference source = End End ReturnStatement MemberReference result ReferenceType CatalogResolver ClassDeclaration Modifier private /**
     * The ExternalResolver strategy is used if the Apache resolver
     * library (Norm Walsh's library from xml-commons) is available in
     * the classpath.  The ExternalResolver is a essentially a superset
     * of the InternalResolver.
     *
     */ ExternalResolver FieldDeclaration Modifier private ReferenceType Method VariableDeclarator setXMLCatalog Literal null FieldDeclaration Modifier private ReferenceType Method VariableDeclarator parseCatalog Literal null FieldDeclaration Modifier private ReferenceType Method VariableDeclarator resolveEntity Literal null FieldDeclaration Modifier private ReferenceType Method VariableDeclarator resolve Literal null FieldDeclaration /** The instance of the ApacheCatalogResolver bridge class */ Modifier private ReferenceType Object VariableDeclarator resolverImpl Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator externalCatalogsProcessed Literal false ConstructorDeclaration Modifier public ExternalResolver FormalParameter ReferenceType Class resolverImplClass FormalParameter ReferenceType Object resolverImpl StatementExpression Assignment This MemberReference resolverImpl MemberReference resolverImpl = TryStatement StatementExpression Assignment MemberReference setXMLCatalog MethodInvocation resolverImplClass Literal ""setXMLCatalog"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType XMLCatalog getMethod = StatementExpression Assignment MemberReference parseCatalog MethodInvocation resolverImplClass Literal ""parseCatalog"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType String getMethod = StatementExpression Assignment MemberReference resolveEntity MethodInvocation resolverImplClass Literal ""resolveEntity"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType String ClassReference ReferenceType String getMethod = StatementExpression Assignment MemberReference resolve MethodInvocation resolverImplClass Literal ""resolve"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType String ClassReference ReferenceType String getMethod = CatchClause CatchClauseParameter NoSuchMethodException ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex StatementExpression MethodInvocation Literal ""Apache resolver library found, xml-commons resolver will be used"" MemberReference Project MSG_VERBOSE log MethodDeclaration Modifier public ReferenceType InputSource resolveEntity FormalParameter ReferenceType String publicId FormalParameter ReferenceType String systemId LocalVariableDeclaration ReferenceType InputSource VariableDeclarator result Literal null StatementExpression MethodInvocation processExternalCatalogs LocalVariableDeclaration ReferenceType ResourceLocation VariableDeclarator matchingEntry MethodInvocation MemberReference publicId findMatchingEntry IfStatement BinaryOperation != MemberReference matchingEntry Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Matching catalog entry found for publicId: '"" MethodInvocation matchingEntry getPublicId Literal ""' location: '"" MethodInvocation matchingEntry getLocation Literal ""'"" MemberReference Project MSG_DEBUG log StatementExpression Assignment MemberReference result MethodInvocation MemberReference matchingEntry filesystemLookup = IfStatement BinaryOperation == MemberReference result Literal null BlockStatement StatementExpression Assignment MemberReference result MethodInvocation MemberReference matchingEntry classpathLookup = End IfStatement BinaryOperation == MemberReference result Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference result Cast ReferenceType InputSource MethodInvocation resolveEntity MemberReference resolverImpl ArrayCreator ReferenceType Object ArrayInitializer MemberReference publicId MemberReference systemId invoke = CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex End BlockStatement TryStatement StatementExpression Assignment MemberReference result Cast ReferenceType InputSource MethodInvocation resolveEntity MemberReference resolverImpl ArrayCreator ReferenceType Object ArrayInitializer MemberReference publicId MemberReference systemId invoke = CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex End ReturnStatement MemberReference result MethodDeclaration Modifier public ReferenceType Source resolve FormalParameter ReferenceType String href FormalParameter ReferenceType String base TransformerException LocalVariableDeclaration ReferenceType SAXSource VariableDeclarator result Literal null LocalVariableDeclaration ReferenceType InputSource VariableDeclarator source Literal null StatementExpression MethodInvocation processExternalCatalogs LocalVariableDeclaration ReferenceType ResourceLocation VariableDeclarator matchingEntry MethodInvocation MemberReference href findMatchingEntry IfStatement BinaryOperation != MemberReference matchingEntry Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Matching catalog entry found for uri: '"" MethodInvocation matchingEntry getPublicId Literal ""' location: '"" MethodInvocation matchingEntry getLocation Literal ""'"" MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType ResourceLocation VariableDeclarator entryCopy MemberReference matchingEntry IfStatement BinaryOperation != MemberReference base Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType URL VariableDeclarator baseURL ClassCreator ReferenceType URL MemberReference base StatementExpression Assignment MemberReference entryCopy ClassCreator ReferenceType ResourceLocation = StatementExpression MethodInvocation entryCopy MemberReference baseURL setBase CatchClause CatchClauseParameter MalformedURLException ex End StatementExpression MethodInvocation entryCopy MethodInvocation matchingEntry getPublicId setPublicId StatementExpression MethodInvocation entryCopy MethodInvocation matchingEntry getLocation setLocation StatementExpression Assignment MemberReference source MethodInvocation MemberReference entryCopy filesystemLookup = IfStatement BinaryOperation == MemberReference source Literal null BlockStatement StatementExpression Assignment MemberReference source MethodInvocation MemberReference entryCopy classpathLookup = End IfStatement BinaryOperation != MemberReference source Literal null BlockStatement StatementExpression Assignment MemberReference result ClassCreator ReferenceType SAXSource MemberReference source = BlockStatement TryStatement StatementExpression Assignment MemberReference result Cast ReferenceType SAXSource MethodInvocation resolve MemberReference resolverImpl ArrayCreator ReferenceType Object ArrayInitializer MemberReference href MemberReference base invoke = CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex End BlockStatement TryStatement StatementExpression Assignment MemberReference result Cast ReferenceType SAXSource MethodInvocation resolve MemberReference resolverImpl ArrayCreator ReferenceType Object ArrayInitializer MemberReference href MemberReference base invoke = CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex End ReturnStatement MemberReference result MethodDeclaration /**
         * Process each external catalog file specified in a
         * <code>&lt;catalogpath&gt;</code>.  It will be
         * parsed by the resolver library, and the individual elements
         * will be added back to us (that is, the controlling
         * XMLCatalog instance) via a callback mechanism.
         */ Modifier private processExternalCatalogs IfStatement MemberReference ! externalCatalogsProcessed BlockStatement TryStatement StatementExpression MethodInvocation setXMLCatalog MemberReference resolverImpl ArrayCreator ReferenceType Object ArrayInitializer This XMLCatalog invoke CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex LocalVariableDeclaration ReferenceType Path VariableDeclarator catPath MethodInvocation getCatalogPath IfStatement BinaryOperation != MemberReference catPath Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Using catalogpath '"" MethodInvocation getCatalogPath Literal ""'"" MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType String VariableDeclarator catPathList MethodInvocation MethodInvocation list getCatalogPath ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference catPathList length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator catFile ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i catPathList StatementExpression MethodInvocation BinaryOperation + Literal ""Parsing "" MemberReference catFile MemberReference Project MSG_DEBUG log TryStatement StatementExpression MethodInvocation parseCatalog MemberReference resolverImpl ArrayCreator ReferenceType Object ArrayInitializer MethodInvocation catFile getPath invoke CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex End End End StatementExpression Assignment MemberReference externalCatalogsProcessed Literal true = ReferenceType CatalogResolver ReferenceType DataType ReferenceType Cloneable ReferenceType EntityResolver ReferenceType URIResolver",0
85,85,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.extension ClassDeclaration Modifier public final /**
 * Enum used in (@link Extension) to indicate the compatability
 * of one extension to another. See (@link Extension) for instances
 * of object.
 *
 * WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
 *  This file is from excalibur.extension package. Dont edit this file
 * directly as there is no unit tests to make sure it is operational
 * in ant. Edit file in excalibur and run tests there before changing
 * ants file.
 * WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
 *
 * @version $Revision$ $Date$
 * @see Extension
 */ Compatability FieldDeclaration /**
     * A string representaiton of compatability level.
     */ Modifier private final ReferenceType String VariableDeclarator name ConstructorDeclaration /**
     * Create a compatability enum with specified name.
     *
     * @param name the name of compatability level
     */ Compatability FormalParameter Modifier final ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * Return name of compatability level.
     *
     * @return the name of compatability level
     */ Modifier public ReferenceType String toString ReturnStatement MemberReference name",0
176,176,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.net Import org.apache.commons.net.bsd.RExecClient Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream Import java.util.Calendar Import java.util.Enumeration Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task ClassDeclaration Modifier public /**
 * Automates the rexec protocol.
 *
 * @since Ant 1.6
 */ RExecTask FieldDeclaration /**
     *  The userid to login with, if automated login is used
     */ Modifier private ReferenceType String VariableDeclarator userid Literal null FieldDeclaration /**
     *  The password to login with, if automated login is used
     */ Modifier private ReferenceType String VariableDeclarator password Literal null FieldDeclaration /**
     *  The command to execute
     */ Modifier private ReferenceType String VariableDeclarator command Literal null FieldDeclaration /**
     *  The server to connect to.
     */ Modifier private ReferenceType String VariableDeclarator server Literal null FieldDeclaration /**
     *  The tcp port to connect to.
     */ Modifier private BasicType int VariableDeclarator port MemberReference RExecClient DEFAULT_PORT FieldDeclaration /**
     *  The list of read/write commands for this session
     */ Modifier private ReferenceType Vector VariableDeclarator rexecTasks ClassCreator ReferenceType Vector FieldDeclaration /**
     *  If true, adds a CR to beginning of login script
     */ Modifier private BasicType boolean VariableDeclarator addCarriageReturn Literal false FieldDeclaration /**
     *  Default time allowed for waiting for a valid response
     *  for all child reads.  A value of 0 means no limit.
     */ Modifier private ReferenceType Integer VariableDeclarator defaultTimeout Literal null ClassDeclaration Modifier public /**
     *  This class is the parent of the Read and Write tasks.
     *  It handles the common attributes for both.
     */ RExecSubTask FieldDeclaration Modifier protected ReferenceType String VariableDeclarator taskString Literal """" MethodDeclaration Modifier public execute FormalParameter ReferenceType AntRExecClient rexec BuildException ThrowStatement ClassCreator ReferenceType BuildException Literal ""Shouldn't be able instantiate a SubTask directly"" MethodDeclaration /**
         *  the message as nested text
         */ Modifier public addText FormalParameter ReferenceType String s StatementExpression MethodInvocation MethodInvocation MethodInvocation MemberReference s replaceProperties getProject setString MethodDeclaration /**
         * the message as an attribute
         */ Modifier public setString FormalParameter ReferenceType String s StatementExpression Assignment MemberReference taskString MemberReference s += ClassDeclaration Modifier public /**
     *  Sends text to the connected server
     */ RExecWrite FieldDeclaration Modifier private BasicType boolean VariableDeclarator echoString Literal true MethodDeclaration Modifier public execute FormalParameter ReferenceType AntRExecClient rexec BuildException StatementExpression MethodInvocation rexec MemberReference taskString MemberReference echoString sendString MethodDeclaration /**
         * Whether or not the message should be echoed to the log.
         * Defaults to <code>true</code>.
         */ Modifier public setEcho FormalParameter BasicType boolean b StatementExpression Assignment MemberReference echoString MemberReference b = ReferenceType RExecSubTask ClassDeclaration Modifier public /**
     *  Reads the output from the connected server
     *  until the required string is found or we time out.
     */ RExecRead FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator timeout Literal null MethodDeclaration Modifier public execute FormalParameter ReferenceType AntRExecClient rexec BuildException StatementExpression MethodInvocation rexec MemberReference taskString MemberReference timeout waitForString MethodDeclaration /**
         *  a timeout value that overrides any task wide timeout.
         */ Modifier public setTimeout FormalParameter ReferenceType Integer i StatementExpression Assignment This MemberReference timeout MemberReference i = MethodDeclaration /**
         * Sets the default timeout if none has been set already
         * @ant.attribute ignore=""true""
         */ Modifier public setDefaultTimeout FormalParameter ReferenceType Integer defaultTimeout IfStatement BinaryOperation == MemberReference timeout Literal null BlockStatement StatementExpression Assignment MemberReference timeout MemberReference defaultTimeout = End ReferenceType RExecSubTask ClassDeclaration Modifier public /**
     *  This class handles the abstraction of the rexec protocol.
     *  Currently it is a wrapper around <a
     *  href=""http://jakarta.apache.org/commons/net/index.html"">Jakarta
     *  Commons Net</a>.
     */ AntRExecClient MethodDeclaration /**
         * Read from the rexec session until the string we are
         * waiting for is found
         * @param s The string to wait on
         */ Modifier public waitForString FormalParameter ReferenceType String s StatementExpression MethodInvocation MemberReference s Literal null waitForString MethodDeclaration /**
         * Read from the rexec session until the string we are
         * waiting for is found or the timeout has been reached
         * @param s The string to wait on
         * @param timeout The maximum number of seconds to wait
         */ Modifier public waitForString FormalParameter ReferenceType String s FormalParameter ReferenceType Integer timeout LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is This MethodInvocation getInputStream TryStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer IfStatement BinaryOperation || BinaryOperation == MemberReference timeout Literal null BinaryOperation == MethodInvocation timeout intValue Literal 0 BlockStatement WhileStatement BinaryOperation == MethodInvocation sb MethodInvocation MemberReference s indexOf toString Literal - 1 BlockStatement StatementExpression MethodInvocation sb Cast BasicType char MethodInvocation is read append End BlockStatement LocalVariableDeclaration ReferenceType Calendar VariableDeclarator endTime MethodInvocation Calendar getInstance StatementExpression MethodInvocation endTime MemberReference Calendar SECOND MethodInvocation timeout intValue add WhileStatement BinaryOperation == MethodInvocation sb MethodInvocation MemberReference s indexOf toString Literal - 1 BlockStatement WhileStatement BinaryOperation && MethodInvocation Calendar MethodInvocation MemberReference endTime before getInstance BinaryOperation == MethodInvocation is available Literal 0 BlockStatement StatementExpression MethodInvocation Thread Literal 250 sleep End IfStatement BinaryOperation == MethodInvocation is available Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Response timed-out waiting for \"""" MemberReference s Literal '\""' MethodInvocation getLocation End StatementExpression MethodInvocation sb Cast BasicType char MethodInvocation is read append End End StatementExpression MethodInvocation MethodInvocation sb toString MemberReference Project MSG_INFO log CatchClause CatchClauseParameter BuildException be ThrowStatement MemberReference be CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation MethodDeclaration /**
         * Write this string to the rexec session.
         * @param echoString  Logs string sent
         */ Modifier public sendString FormalParameter ReferenceType String s FormalParameter BasicType boolean echoString LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator os This MethodInvocation getOutputStream TryStatement StatementExpression MethodInvocation os BinaryOperation + MemberReference s Literal ""\n"" write IfStatement MemberReference echoString BlockStatement StatementExpression MethodInvocation MemberReference s MemberReference Project MSG_INFO log End StatementExpression MethodInvocation os flush CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation MethodDeclaration /**
         * Read from the rexec session until the EOF is found or
         * the timeout has been reached
         * @param timeout The maximum number of seconds to wait
         */ Modifier public waitForEOF FormalParameter ReferenceType Integer timeout LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is This MethodInvocation getInputStream TryStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer IfStatement BinaryOperation || BinaryOperation == MemberReference timeout Literal null BinaryOperation == MethodInvocation timeout intValue Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator read WhileStatement BinaryOperation != Assignment MemberReference read MethodInvocation is read = Literal - 1 BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c Cast BasicType char MemberReference read StatementExpression MethodInvocation sb MemberReference c append IfStatement BinaryOperation == MemberReference c Literal '\n' BlockStatement StatementExpression MethodInvocation MethodInvocation sb toString MemberReference Project MSG_INFO log StatementExpression MethodInvocation sb Literal 0 MethodInvocation sb length delete End End BlockStatement LocalVariableDeclaration ReferenceType Calendar VariableDeclarator endTime MethodInvocation Calendar getInstance StatementExpression MethodInvocation endTime MemberReference Calendar SECOND MethodInvocation timeout intValue add LocalVariableDeclaration BasicType int VariableDeclarator read Literal 0 WhileStatement BinaryOperation != MemberReference read Literal - 1 BlockStatement WhileStatement BinaryOperation && MethodInvocation Calendar MethodInvocation MemberReference endTime before getInstance BinaryOperation == MethodInvocation is available Literal 0 BlockStatement StatementExpression MethodInvocation Thread Literal 250 sleep End IfStatement BinaryOperation == MethodInvocation is available Literal 0 BlockStatement StatementExpression MethodInvocation MethodInvocation sb toString MemberReference Project MSG_INFO log ThrowStatement ClassCreator ReferenceType BuildException Literal ""Response timed-out waiting for EOF"" MethodInvocation getLocation End StatementExpression Assignment MemberReference read MethodInvocation is read = IfStatement BinaryOperation != MemberReference read Literal - 1 BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c Cast BasicType char MemberReference read StatementExpression MethodInvocation sb MemberReference c append IfStatement BinaryOperation == MemberReference c Literal '\n' BlockStatement StatementExpression MethodInvocation MethodInvocation sb toString MemberReference Project MSG_INFO log StatementExpression MethodInvocation sb Literal 0 MethodInvocation sb length delete End End End End IfStatement BinaryOperation > MethodInvocation sb length Literal 0 BlockStatement StatementExpression MethodInvocation MethodInvocation sb toString MemberReference Project MSG_INFO log End CatchClause CatchClauseParameter BuildException be ThrowStatement MemberReference be CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation ReferenceType RExecClient MethodDeclaration /**
     *  A string to wait for from the server.
     *  A subTask &lt;read&gt; tag was found.  Create the object,
     *  Save it in our list, and return it.
     */ Modifier public ReferenceType RExecSubTask createRead LocalVariableDeclaration ReferenceType RExecSubTask VariableDeclarator task Cast ReferenceType RExecSubTask ClassCreator ReferenceType RExecRead StatementExpression MethodInvocation rexecTasks MemberReference task addElement ReturnStatement MemberReference task MethodDeclaration /**
     *  Add text to send to the server
     *  A subTask &lt;write&gt; tag was found.  Create the object,
     *  Save it in our list, and return it.
     */ Modifier public ReferenceType RExecSubTask createWrite LocalVariableDeclaration ReferenceType RExecSubTask VariableDeclarator task Cast ReferenceType RExecSubTask ClassCreator ReferenceType RExecWrite StatementExpression MethodInvocation rexecTasks MemberReference task addElement ReturnStatement MemberReference task MethodDeclaration /**
     *  Verify that all parameters are included.
     *  Connect and possibly login
     *  Iterate through the list of Reads and writes
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference server Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No Server Specified"" End IfStatement BinaryOperation && BinaryOperation == MemberReference userid Literal null BinaryOperation != MemberReference password Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No Userid Specified"" End IfStatement BinaryOperation && BinaryOperation == MemberReference password Literal null BinaryOperation != MemberReference userid Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No Password Specified"" End LocalVariableDeclaration ReferenceType AntRExecClient VariableDeclarator rexec Literal null TryStatement StatementExpression Assignment MemberReference rexec ClassCreator ReferenceType AntRExecClient = TryStatement StatementExpression MethodInvocation rexec MemberReference server MemberReference port connect CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Can't connect to "" MemberReference server IfStatement BinaryOperation && BinaryOperation != MemberReference userid Literal null BinaryOperation != MemberReference password Literal null BlockStatement StatementExpression MethodInvocation MemberReference rexec login End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator tasksToRun MethodInvocation rexecTasks elements WhileStatement BinaryOperation && BinaryOperation != MemberReference tasksToRun Literal null MethodInvocation tasksToRun hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType RExecSubTask VariableDeclarator task Cast ReferenceType RExecSubTask MethodInvocation tasksToRun nextElement IfStatement BinaryOperation && BinaryOperation instanceof MemberReference task ReferenceType RExecRead BinaryOperation != MemberReference defaultTimeout Literal null BlockStatement StatementExpression Cast ReferenceType RExecRead MemberReference task End StatementExpression MethodInvocation task MemberReference rexec execute End StatementExpression MethodInvocation rexec MemberReference defaultTimeout waitForEOF IfStatement BinaryOperation != MemberReference rexec Literal null BlockStatement TryStatement StatementExpression MethodInvocation rexec disconnect CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Error disconnecting from "" MemberReference server End MethodDeclaration /**
     *  Process a 'typical' login.  If it differs, use the read
     *  and write tasks explicitely
     */ Modifier private login FormalParameter ReferenceType AntRExecClient rexec IfStatement MemberReference addCarriageReturn BlockStatement StatementExpression MethodInvocation rexec Literal ""\n"" Literal true sendString End StatementExpression MethodInvocation rexec Literal ""ogin:"" waitForString StatementExpression MethodInvocation rexec MemberReference userid Literal true sendString StatementExpression MethodInvocation rexec Literal ""assword:"" waitForString StatementExpression MethodInvocation rexec MemberReference password Literal false sendString MethodDeclaration /**
     * Set the the comand to execute on the server;
     */ Modifier public setCommand FormalParameter ReferenceType String c StatementExpression Assignment This MemberReference command MemberReference c = MethodDeclaration /**
     *  send a carriage return after connecting; optional, defaults to false.
     */ Modifier public setInitialCR FormalParameter BasicType boolean b StatementExpression Assignment This MemberReference addCarriageReturn MemberReference b = MethodDeclaration /**
     *  Set the the login password to use
     * required if <tt>userid</tt> is set.
     */ Modifier public setPassword FormalParameter ReferenceType String p StatementExpression Assignment This MemberReference password MemberReference p = MethodDeclaration /**
     *  Set the tcp port to connect to; default is 23.
     */ Modifier public setPort FormalParameter BasicType int p StatementExpression Assignment This MemberReference port MemberReference p = MethodDeclaration /**
     *  Set the hostname or address of the remote server.
     */ Modifier public setServer FormalParameter ReferenceType String m StatementExpression Assignment This MemberReference server MemberReference m = MethodDeclaration /**
     * set a default timeout in seconds to wait for a response,
     * zero means forever (the default)
     */ Modifier public setTimeout FormalParameter ReferenceType Integer i StatementExpression Assignment This MemberReference defaultTimeout MemberReference i = MethodDeclaration /**
     * Set the the login id to use on the server;
     * required if <tt>password</tt> is set.
     */ Modifier public setUserid FormalParameter ReferenceType String u StatementExpression Assignment This MemberReference userid MemberReference u = ReferenceType Task",1
568,568,,0
366,366,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.io.Serializable Import java.util.ArrayList Import java.util.Collections Import java.util.Enumeration Import java.util.HashMap Import java.util.Hashtable Import java.util.List Import java.util.Locale Import java.util.Map Import java.util.Iterator Import org.apache.tools.ant.util.CollectionUtils Import org.xml.sax.AttributeList Import org.xml.sax.helpers.AttributeListImpl ClassDeclaration Modifier public /**
 * Wrapper class that holds the attributes of an element, its children, and
 * any text within it. It then takes care of configuring that element at
 * runtime.
 *
 */ RuntimeConfigurable FieldDeclaration /** Polymorphic attribute (May be XML NS attribute later) */ Modifier private final static ReferenceType String VariableDeclarator ANT_TYPE Literal ""ant-type"" FieldDeclaration /** Name of the element to configure. */ Modifier private ReferenceType String VariableDeclarator elementTag Literal null FieldDeclaration /** List of child element wrappers. */ Modifier private ReferenceType List VariableDeclarator children Literal null FieldDeclaration /** The element to configure. It is only used during
     * maybeConfigure.
     */ Modifier private transient ReferenceType Object VariableDeclarator wrappedObject Literal null FieldDeclaration /** the creator used to make the wrapped object */ Modifier private transient ReferenceType IntrospectionHelper ReferenceType Creator VariableDeclarator creator FieldDeclaration /**
     * @deprecated
     * XML attributes for the element.
     */ Modifier private transient ReferenceType AttributeList VariableDeclarator attributes FieldDeclaration /** Attribute names and values. While the XML spec doesn't require
     *  preserving the order ( AFAIK ), some ant tests do rely on the
     *  exact order. The following code is copied from AttributeImpl.
     *  We could also just use SAX2 Attributes and convert to SAX1 ( DOM
     *  attribute Nodes can also be stored in SAX2 Attributes )
     *  XXX under JDK 1.4 you can just use a LinkedHashMap for this purpose -jglick
     */ Modifier private ReferenceType List VariableDeclarator attributeNames Literal null FieldDeclaration /** Map of attribute names to values */ Modifier private ReferenceType Map VariableDeclarator attributeMap Literal null FieldDeclaration /** Text appearing within the element. */ Modifier private ReferenceType StringBuffer VariableDeclarator characters Literal null FieldDeclaration /** Indicates if the wrapped object has been configured */ Modifier private BasicType boolean VariableDeclarator proxyConfigured Literal false FieldDeclaration /** the polymorphic type */ Modifier private ReferenceType String VariableDeclarator polyType Literal null ConstructorDeclaration Modifier public /**
     * Sole constructor creating a wrapper for the specified object.
     *
     * @param proxy The element to configure. Must not be <code>null</code>.
     * @param elementTag The tag name generating this element.
     *                   Should not be <code>null</code>.
     */ RuntimeConfigurable FormalParameter ReferenceType Object proxy FormalParameter ReferenceType String elementTag StatementExpression Assignment MemberReference wrappedObject MemberReference proxy = StatementExpression Assignment This MemberReference elementTag MemberReference elementTag = StatementExpression Assignment MemberReference proxyConfigured Literal false = IfStatement BinaryOperation instanceof MemberReference proxy ReferenceType Task BlockStatement StatementExpression Cast ReferenceType Task MemberReference proxy End MethodDeclaration /**
     * Sets the element to configure.
     *
     * @param proxy The element to configure. Must not be <code>null</code>.
     */ Modifier public setProxy FormalParameter ReferenceType Object proxy StatementExpression Assignment MemberReference wrappedObject MemberReference proxy = StatementExpression Assignment MemberReference proxyConfigured Literal false = MethodDeclaration /**
     * Sets the creator of the element to be configured
     * used to store the element in the parent;
     *
     * @param creator the creator object
     */ setCreator FormalParameter ReferenceType IntrospectionHelper ReferenceType Creator creator StatementExpression Assignment This MemberReference creator MemberReference creator = MethodDeclaration /**
     * Get the object for which this RuntimeConfigurable holds the configuration
     * information
     *
     * @return the object whose configure is held by this instance.
     */ Modifier public ReferenceType Object getProxy ReturnStatement MemberReference wrappedObject MethodDeclaration /**
     * get the polymorphic type for this element
     * @return the ant component type name, null if not set
     */ Modifier public ReferenceType String getPolyType ReturnStatement MemberReference polyType MethodDeclaration /**
     * set the polymorphic type for this element
     * @param polyType the ant component type name, null if not set
     */ Modifier public setPolyType FormalParameter ReferenceType String polyType StatementExpression Assignment This MemberReference polyType MemberReference polyType = MethodDeclaration /**
     * Sets the attributes for the wrapped element.
     *
     * @deprecated
     * @param attributes List of attributes defined in the XML for this
     *                   element. May be <code>null</code>.
     */ Modifier public setAttributes FormalParameter ReferenceType AttributeList attributes StatementExpression Assignment This MemberReference attributes ClassCreator ReferenceType AttributeListImpl MemberReference attributes = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation attributes getLength MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation attributes MemberReference i getName MethodInvocation attributes MemberReference i getValue setAttribute End MethodDeclaration /**
     * Set an attribute to a given value
     *
     * @param name the name of the attribute.
     * @param value the attribute's value.
     */ Modifier public setAttribute FormalParameter ReferenceType String name FormalParameter ReferenceType String value IfStatement MethodInvocation name MemberReference ANT_TYPE equalsIgnoreCase BlockStatement StatementExpression Assignment This MemberReference polyType MemberReference value = BlockStatement IfStatement BinaryOperation == MemberReference attributeNames Literal null BlockStatement StatementExpression Assignment MemberReference attributeNames ClassCreator ReferenceType ArrayList = StatementExpression Assignment MemberReference attributeMap ClassCreator ReferenceType HashMap = End StatementExpression MethodInvocation attributeNames MemberReference name add StatementExpression MethodInvocation attributeMap MemberReference name MemberReference value put End MethodDeclaration /** Return the attribute map.
     *
     * @return Attribute name to attribute value map
     */ Modifier public ReferenceType Hashtable getAttributeMap IfStatement BinaryOperation != MemberReference attributeMap Literal null BlockStatement ReturnStatement ClassCreator ReferenceType Hashtable MemberReference attributeMap BlockStatement ReturnStatement ClassCreator ReferenceType Hashtable Literal 1 End MethodDeclaration /**
     * Returns the list of attributes for the wrapped element.
     *
     * @deprecated
     * @return An AttributeList representing the attributes defined in the
     *         XML for this element. May be <code>null</code>.
     */ Modifier public ReferenceType AttributeList getAttributes ReturnStatement MemberReference attributes MethodDeclaration /**
     * Adds a child element to the wrapped element.
     *
     * @param child The child element wrapper to add to this one.
     *              Must not be <code>null</code>.
     */ Modifier public addChild FormalParameter ReferenceType RuntimeConfigurable child IfStatement BinaryOperation == MemberReference children Literal null BlockStatement StatementExpression Assignment MemberReference children ClassCreator ReferenceType ArrayList = End StatementExpression MethodInvocation children MemberReference child add MethodDeclaration /**
     * Returns the child wrapper at the specified position within the list.
     *
     * @param index The index of the child to return.
     *
     * @return The child wrapper at position <code>index</code> within the
     *         list.
     */ ReferenceType RuntimeConfigurable getChild FormalParameter BasicType int index ReturnStatement Cast ReferenceType RuntimeConfigurable MethodInvocation children MemberReference index get MethodDeclaration /**
     * Returns an enumeration of all child wrappers.
     * @return an enumeration of the child wrappers.
     * @since Ant 1.5.1
     */ Modifier public ReferenceType Enumeration getChildren IfStatement BinaryOperation != MemberReference children Literal null BlockStatement ReturnStatement MethodInvocation Collections MemberReference children enumeration BlockStatement ReturnStatement ClassCreator ReferenceType CollectionUtils ReferenceType EmptyEnumeration End MethodDeclaration /**
     * Adds characters from #PCDATA areas to the wrapped element.
     *
     * @param data Text to add to the wrapped element.
     *        Should not be <code>null</code>.
     */ Modifier public addText FormalParameter ReferenceType String data IfStatement BinaryOperation == MethodInvocation data length Literal 0 BlockStatement ReturnStatement End IfStatement BinaryOperation != MemberReference characters Literal null BlockStatement StatementExpression MethodInvocation characters MemberReference data append BlockStatement StatementExpression Assignment MemberReference characters ClassCreator ReferenceType StringBuffer MemberReference data = End MethodDeclaration /**
     * Adds characters from #PCDATA areas to the wrapped element.
     *
     * @param buf A character array of the text within the element.
     *            Must not be <code>null</code>.
     * @param start The start element in the array.
     * @param count The number of characters to read from the array.
     *
     */ Modifier public addText FormalParameter BasicType char buf FormalParameter BasicType int start FormalParameter BasicType int count IfStatement BinaryOperation == MemberReference count Literal 0 BlockStatement ReturnStatement End IfStatement BinaryOperation == MemberReference characters Literal null BlockStatement StatementExpression Assignment MemberReference characters ClassCreator ReferenceType StringBuffer MemberReference count = End StatementExpression MethodInvocation characters MemberReference buf MemberReference start MemberReference count append MethodDeclaration /** Get the text content of this element. Various text chunks are
     * concatenated, there is no way ( currently ) of keeping track of
     * multiple fragments.
     *
     * @return the text content of this element.
     */ Modifier public ReferenceType StringBuffer getText IfStatement BinaryOperation != MemberReference characters Literal null BlockStatement ReturnStatement MemberReference characters BlockStatement ReturnStatement ClassCreator ReferenceType StringBuffer Literal 0 End MethodDeclaration /**
     * Returns the tag name of the wrapped element.
     *
     * @return The tag name of the wrapped element. This is unlikely
     *         to be <code>null</code>, but may be.
     */ Modifier public ReferenceType String getElementTag ReturnStatement MemberReference elementTag MethodDeclaration /**
     * Configures the wrapped element and all its children.
     * The attributes and text for the wrapped element are configured,
     * and then each child is configured and added. Each time the
     * wrapper is configured, the attributes and text for it are
     * reset.
     *
     * If the element has an <code>id</code> attribute, a reference
     * is added to the project as well.
     *
     * @param p The project containing the wrapped element.
     *          Must not be <code>null</code>.
     *
     * @exception BuildException if the configuration fails, for instance due
     *            to invalid attributes or children, or text being added to
     *            an element which doesn't accept it.
     */ Modifier public maybeConfigure FormalParameter ReferenceType Project p BuildException StatementExpression MethodInvocation MemberReference p Literal true maybeConfigure MethodDeclaration /**
     * Configures the wrapped element.  The attributes and text for
     * the wrapped element are configured.  Each time the wrapper is
     * configured, the attributes and text for it are reset.
     *
     * If the element has an <code>id</code> attribute, a reference
     * is added to the project as well.
     *
     * @param p The project containing the wrapped element.
     *          Must not be <code>null</code>.
     *
     * @param configureChildren Whether to configure child elements as
     * well.  if true, child elements will be configured after the
     * wrapped element.
     *
     * @exception BuildException if the configuration fails, for instance due
     *            to invalid attributes or children, or text being added to
     *            an element which doesn't accept it.
     */ Modifier public maybeConfigure FormalParameter ReferenceType Project p FormalParameter BasicType boolean configureChildren BuildException LocalVariableDeclaration ReferenceType String VariableDeclarator id Literal null IfStatement MemberReference proxyConfigured BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType Object VariableDeclarator target TernaryExpression BinaryOperation instanceof MemberReference wrappedObject ReferenceType TypeAdapter Cast ReferenceType TypeAdapter MemberReference wrappedObject MemberReference wrappedObject LocalVariableDeclaration ReferenceType IntrospectionHelper VariableDeclarator ih MethodInvocation IntrospectionHelper MemberReference p MethodInvocation target getClass getHelper IfStatement BinaryOperation != MemberReference attributeNames Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation attributeNames size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation attributeNames MemberReference i get LocalVariableDeclaration ReferenceType String VariableDeclarator value Cast ReferenceType String MethodInvocation attributeMap MemberReference name get StatementExpression Assignment MemberReference value MethodInvocation p MemberReference value replaceProperties = TryStatement StatementExpression MethodInvocation ih MemberReference p MemberReference target MethodInvocation name MemberReference Locale US toLowerCase MemberReference value setAttribute CatchClause CatchClauseParameter BuildException be IfStatement MethodInvocation ! name Literal ""id"" equals BlockStatement ThrowStatement MemberReference be End End StatementExpression Assignment MemberReference id Cast ReferenceType String MethodInvocation attributeMap Literal ""id"" get = End IfStatement BinaryOperation != MemberReference characters Literal null BlockStatement StatementExpression MethodInvocation ProjectHelper MemberReference p MemberReference wrappedObject MethodInvocation characters Literal 0 substring addText End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation getChildren WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType RuntimeConfigurable VariableDeclarator child Cast ReferenceType RuntimeConfigurable MethodInvocation e nextElement IfStatement BinaryOperation instanceof MemberReference child wrappedObject ReferenceType Task BlockStatement LocalVariableDeclaration ReferenceType Task VariableDeclarator childTask Cast ReferenceType Task MemberReference child wrappedObject StatementExpression MethodInvocation childTask MemberReference child setRuntimeConfigurableWrapper End IfStatement BinaryOperation && BinaryOperation != MemberReference child creator Literal null MemberReference configureChildren BlockStatement StatementExpression MethodInvocation child MemberReference p maybeConfigure StatementExpression MethodInvocation child.creator store ContinueStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator tag MethodInvocation child MethodInvocation MemberReference Locale US toLowerCase getElementTag IfStatement BinaryOperation && MemberReference configureChildren MethodInvocation ih MemberReference tag supportsNestedElement BlockStatement StatementExpression MethodInvocation child MemberReference p maybeConfigure StatementExpression MethodInvocation ProjectHelper MemberReference p MemberReference target MemberReference child wrappedObject MemberReference tag storeChild End End IfStatement BinaryOperation != MemberReference id Literal null BlockStatement StatementExpression MethodInvocation p MemberReference id MemberReference wrappedObject addReference End StatementExpression Assignment MemberReference proxyConfigured Literal true = MethodDeclaration /**
     * Reconfigure the element, even if it has already been configured.
     *
     * @param p the project instance for this configuration.
     */ Modifier public reconfigure FormalParameter ReferenceType Project p StatementExpression Assignment MemberReference proxyConfigured Literal false = StatementExpression MethodInvocation MemberReference p maybeConfigure MethodDeclaration /**
     * Apply presets, attributes and text are set if not currently set.
     * nested elements are prepended.
     *
     * @param r a <code>RuntimeConfigurable</code> value
     */ Modifier public applyPreSet FormalParameter ReferenceType RuntimeConfigurable r IfStatement BinaryOperation != MemberReference r attributeMap Literal null BlockStatement ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation r.attributeMap MethodInvocation iterator keySet MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation i next IfStatement BinaryOperation || BinaryOperation == MemberReference attributeMap Literal null BinaryOperation == MethodInvocation attributeMap MemberReference name get Literal null BlockStatement StatementExpression MethodInvocation MemberReference name Cast ReferenceType String MethodInvocation r.attributeMap MemberReference name get setAttribute End End End IfStatement BinaryOperation && BinaryOperation != MemberReference r polyType Literal null BinaryOperation == MemberReference polyType Literal null BlockStatement StatementExpression Assignment MemberReference polyType MemberReference r polyType = End IfStatement BinaryOperation != MemberReference r children Literal null BlockStatement LocalVariableDeclaration ReferenceType List VariableDeclarator newChildren ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation newChildren MemberReference r children addAll IfStatement BinaryOperation != MemberReference children Literal null BlockStatement StatementExpression MethodInvocation newChildren MemberReference children addAll End StatementExpression Assignment MemberReference children MemberReference newChildren = End IfStatement BinaryOperation != MemberReference r characters Literal null BlockStatement IfStatement BinaryOperation || BinaryOperation == MemberReference characters Literal null BinaryOperation == MethodInvocation characters MethodInvocation trim MethodInvocation length toString Literal 0 BlockStatement StatementExpression Assignment MemberReference characters ClassCreator ReferenceType StringBuffer MethodInvocation r.characters toString = End End ReferenceType Serializable",0
111,111,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters Import java.io.IOException Import java.io.Reader Import org.apache.tools.ant.util.LineTokenizer Import org.apache.tools.ant.types.Parameter ClassDeclaration Modifier public final /**
 * Reads the first <code>n</code> lines of a stream.
 * (Default is first 10 lines.)
 * <p>
 * Example:
 * <pre>&lt;headfilter lines=&quot;3&quot;/&gt;</pre>
 * Or:
 * <pre>&lt;filterreader classname=&quot;org.apache.tools.ant.filters.HeadFilter&quot;&gt;
 *    &lt;param name=&quot;lines&quot; value=&quot;3&quot;/&gt;
 * &lt;/filterreader&gt;</pre>
 *
 */ HeadFilter FieldDeclaration /** Parameter name for the number of lines to be returned. */ Modifier private final static ReferenceType String VariableDeclarator LINES_KEY Literal ""lines"" FieldDeclaration /** Parameter name for the number of lines to be skipped. */ Modifier private final static ReferenceType String VariableDeclarator SKIP_KEY Literal ""skip"" FieldDeclaration /** Number of lines currently read in. */ Modifier private BasicType long VariableDeclarator linesRead Literal 0 FieldDeclaration /** Default number of lines to show */ Modifier private final static BasicType int VariableDeclarator DEFAULT_NUM_LINES Literal 10 FieldDeclaration /** Number of lines to be returned in the filtered stream. */ Modifier private BasicType long VariableDeclarator lines MemberReference DEFAULT_NUM_LINES FieldDeclaration /** Number of lines to be skipped. */ Modifier private BasicType long VariableDeclarator skip Literal 0 FieldDeclaration /** A line tokenizer */ Modifier private ReferenceType LineTokenizer VariableDeclarator lineTokenizer Literal null FieldDeclaration /** the current line from the input stream */ Modifier private ReferenceType String VariableDeclarator line Literal null FieldDeclaration /** the position in the current line */ Modifier private BasicType int VariableDeclarator linePos Literal 0 ConstructorDeclaration Modifier public /**
     * Constructor for ""dummy"" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */ HeadFilter StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be <code>null</code>.
     */ HeadFilter FormalParameter Modifier final ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in StatementExpression Assignment MemberReference lineTokenizer ClassCreator ReferenceType LineTokenizer = StatementExpression MethodInvocation lineTokenizer Literal true setIncludeDelims MethodDeclaration /**
     * Returns the next character in the filtered stream. If the desired
     * number of lines have already been read, the resulting stream is
     * effectively at an end. Otherwise, the next character from the
     * underlying stream is read and returned.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */ Modifier public final BasicType int read IOException IfStatement MethodInvocation ! getInitialized BlockStatement StatementExpression MethodInvocation initialize StatementExpression MethodInvocation Literal true setInitialized End WhileStatement BinaryOperation || BinaryOperation == MemberReference line Literal null BinaryOperation == MethodInvocation line length Literal 0 BlockStatement StatementExpression Assignment MemberReference line MethodInvocation lineTokenizer MemberReference in getToken = IfStatement BinaryOperation == MemberReference line Literal null BlockStatement ReturnStatement Literal - 1 End StatementExpression Assignment MemberReference line MethodInvocation MemberReference line headFilter = StatementExpression Assignment MemberReference linePos Literal 0 = End LocalVariableDeclaration BasicType int VariableDeclarator ch MethodInvocation line MemberReference linePos charAt StatementExpression MemberReference ++ linePos IfStatement BinaryOperation == MemberReference linePos MethodInvocation line length BlockStatement StatementExpression Assignment MemberReference line Literal null = End ReturnStatement MemberReference ch MethodDeclaration /**
     * Sets the number of lines to be returned in the filtered stream.
     *
     * @param lines the number of lines to be returned in the filtered stream
     */ Modifier public final setLines FormalParameter Modifier final BasicType long lines StatementExpression Assignment This MemberReference lines MemberReference lines = MethodDeclaration /**
     * Returns the number of lines to be returned in the filtered stream.
     *
     * @return the number of lines to be returned in the filtered stream
     */ Modifier private final BasicType long getLines ReturnStatement MemberReference lines MethodDeclaration /**
     * Sets the number of lines to be skipped in the filtered stream.
     *
     * @param skip the number of lines to be skipped in the filtered stream
     */ Modifier public final setSkip FormalParameter Modifier final BasicType long skip StatementExpression Assignment This MemberReference skip MemberReference skip = MethodDeclaration /**
     * Returns the number of lines to be skipped in the filtered stream.
     *
     * @return the number of lines to be skipped in the filtered stream
     */ Modifier private final BasicType long getSkip ReturnStatement MemberReference skip MethodDeclaration /**
     * Creates a new HeadFilter using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be <code>null</code>.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */ Modifier public final ReferenceType Reader chain FormalParameter Modifier final ReferenceType Reader rdr LocalVariableDeclaration ReferenceType HeadFilter VariableDeclarator newFilter ClassCreator ReferenceType HeadFilter MemberReference rdr StatementExpression MethodInvocation newFilter MethodInvocation getLines setLines StatementExpression MethodInvocation newFilter MethodInvocation getSkip setSkip StatementExpression MethodInvocation newFilter Literal true setInitialized ReturnStatement MemberReference newFilter MethodDeclaration /**
     * Scans the parameters list for the ""lines"" parameter and uses
     * it to set the number of lines to be returned in the filtered stream.
     * also scan for skip parameter.
     */ Modifier private final initialize LocalVariableDeclaration ReferenceType Parameter VariableDeclarator params MethodInvocation getParameters IfStatement BinaryOperation != MemberReference params Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference params length MemberReference ++ i BlockStatement IfStatement MethodInvocation LINES_KEY MemberReference ArraySelector MemberReference i MethodInvocation getName params equals BlockStatement StatementExpression Assignment MemberReference lines ClassCreator MethodInvocation longValue ReferenceType Long MemberReference ArraySelector MemberReference i MethodInvocation getValue params = ContinueStatement End IfStatement MethodInvocation SKIP_KEY MemberReference ArraySelector MemberReference i MethodInvocation getName params equals BlockStatement StatementExpression Assignment MemberReference skip ClassCreator MethodInvocation longValue ReferenceType Long MemberReference ArraySelector MemberReference i MethodInvocation getValue params = ContinueStatement End End End MethodDeclaration /**
     * implements a head filter on the input stream
     */ Modifier private ReferenceType String headFilter FormalParameter ReferenceType String line StatementExpression MemberReference ++ linesRead IfStatement BinaryOperation > MemberReference skip Literal 0 BlockStatement IfStatement BinaryOperation < BinaryOperation - MemberReference linesRead Literal 1 MemberReference skip BlockStatement ReturnStatement Literal null End End IfStatement BinaryOperation > MemberReference lines Literal 0 BlockStatement IfStatement BinaryOperation > MemberReference linesRead BinaryOperation + MemberReference lines MemberReference skip BlockStatement ReturnStatement Literal null End End ReturnStatement MemberReference line ReferenceType BaseParamFilterReader ReferenceType ChainableReader",1
56,56,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.depend.constantpool Import java.io.DataInputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * The constant pool entry which stores class information.
 *
 */ ClassCPInfo FieldDeclaration /**
     * The class' name. This will be only valid if the entry has been
     * resolved against the constant pool.
     */ Modifier private ReferenceType String VariableDeclarator className FieldDeclaration /**
     * The index into the constant pool where this class' name is stored. If
     * the class name is changed, this entry is invalid until this entry is
     * connected to a constant pool.
     */ Modifier private BasicType int VariableDeclarator index ConstructorDeclaration Modifier public /**
     * Constructor. Sets the tag value for this entry to type Class
     */ ClassCPInfo StatementExpression SuperConstructorInvocation MemberReference CONSTANT_CLASS Literal 1 MethodDeclaration /**
     * Read the entry from a stream.
     *
     * @param cpStream the stream containing the constant pool entry to be
     *      read.
     * @exception IOException thrown if there is a problem reading the entry
     *      from the stream.
     */ Modifier public read FormalParameter ReferenceType DataInputStream cpStream IOException StatementExpression Assignment MemberReference index MethodInvocation cpStream readUnsignedShort = StatementExpression Assignment MemberReference className Literal ""unresolved"" = MethodDeclaration /**
     * Generate a string readable version of this entry
     *
     * @return string representation of this constant pool entry
     */ Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Class Constant Pool Entry for "" MemberReference className Literal ""["" MemberReference index Literal ""]"" MethodDeclaration /**
     * Resolve this class info against the given constant pool.
     *
     * @param constantPool the constant pool with which to resolve the
     *      class.
     */ Modifier public resolve FormalParameter ReferenceType ConstantPool constantPool StatementExpression Assignment MemberReference className Cast ReferenceType Utf8CPInfo MethodInvocation constantPool MemberReference index getEntry = StatementExpression SuperMethodInvocation MemberReference constantPool resolve MethodDeclaration /**
     * Get the class name of this entry.
     *
     * @return the class' name.
     */ Modifier public ReferenceType String getClassName ReturnStatement MemberReference className ReferenceType ConstantPoolEntry",0
238,238,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.IOException Import java.util.Hashtable Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.AbstractFileSet Import org.apache.tools.ant.types.DirSet Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.FileList Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.Mapper Import org.apache.tools.ant.util.FileNameMapper Import org.apache.tools.ant.util.SourceFileScanner ClassDeclaration Modifier public /**
 * Executes a given command, supplying a set of files as arguments.
 *
 * @since Ant 1.2
 *
 * @ant.task category=""control"" name=""apply""
 */ ExecuteOn ClassDeclaration Modifier private ExtendedDirectoryScanner MethodDeclaration Modifier public BasicType int getIncludedFilesCount IfStatement BinaryOperation == MemberReference filesIncluded Literal null ThrowStatement ClassCreator ReferenceType IllegalStateException End ReturnStatement MethodInvocation filesIncluded size MethodDeclaration Modifier public BasicType int getIncludedDirsCount IfStatement BinaryOperation == MemberReference dirsIncluded Literal null ThrowStatement ClassCreator ReferenceType IllegalStateException End ReturnStatement MethodInvocation dirsIncluded size ReferenceType DirectoryScanner FieldDeclaration Modifier protected ReferenceType Vector VariableDeclarator filesets ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator filelists ClassCreator ReferenceType Vector FieldDeclaration Modifier private BasicType boolean VariableDeclarator relative Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator parallel Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator forwardSlash Literal false FieldDeclaration Modifier protected ReferenceType String VariableDeclarator type Literal ""file"" FieldDeclaration Modifier protected ReferenceType Commandline ReferenceType Marker VariableDeclarator srcFilePos Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator skipEmpty Literal false FieldDeclaration Modifier protected ReferenceType Commandline ReferenceType Marker VariableDeclarator targetFilePos Literal null FieldDeclaration Modifier protected ReferenceType Mapper VariableDeclarator mapperElement Literal null FieldDeclaration Modifier protected ReferenceType FileNameMapper VariableDeclarator mapper Literal null FieldDeclaration Modifier protected ReferenceType File VariableDeclarator destDir Literal null FieldDeclaration Modifier private BasicType int VariableDeclarator maxParallel Literal - 1 FieldDeclaration Modifier private BasicType boolean VariableDeclarator addSourceFile Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator verbose Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator ignoreMissing Literal true FieldDeclaration /**
     * Has &lt;srcfile&gt; been specified before &lt;targetfile&gt;
     */ Modifier protected BasicType boolean VariableDeclarator srcIsFirst Literal true MethodDeclaration /**
     * Source files to operate upon.
     */ Modifier public addFileset FormalParameter ReferenceType FileSet set StatementExpression MethodInvocation filesets MemberReference set addElement MethodDeclaration /**
     * Adds directories to operate on.
     *
     * @param  set the DirSet to add.
     *
     * @since Ant 1.6
     */ Modifier public addDirset FormalParameter ReferenceType DirSet set StatementExpression MethodInvocation filesets MemberReference set addElement MethodDeclaration /**
     * Source files to operate upon.
     */ Modifier public addFilelist FormalParameter ReferenceType FileList list StatementExpression MethodInvocation filelists MemberReference list addElement MethodDeclaration /**
     * Whether the filenames should be passed on the command line as
     * absolute or relative pathnames. Paths are relative to the base
     * directory of the corresponding fileset for source files or the
     * dest attribute for target files.
     */ Modifier public setRelative FormalParameter BasicType boolean relative StatementExpression Assignment This MemberReference relative MemberReference relative = MethodDeclaration /**
     * If true, run the command only once, appending all files as arguments.
     * If false, command will be executed once for every file. Defaults to false.
     */ Modifier public setParallel FormalParameter BasicType boolean parallel StatementExpression Assignment This MemberReference parallel MemberReference parallel = MethodDeclaration /**
     * Whether the command works only on files, directories or both?
     */ Modifier public setType FormalParameter ReferenceType FileDirBoth type StatementExpression Assignment This MemberReference type MethodInvocation type getValue = MethodDeclaration /**
     * If no source files have been found or are newer than their
     * corresponding target files, do not run the command.
     */ Modifier public setSkipEmptyFilesets FormalParameter BasicType boolean skip StatementExpression Assignment MemberReference skipEmpty MemberReference skip = MethodDeclaration /**
     * The directory where target files are to be placed.
     */ Modifier public setDest FormalParameter ReferenceType File destDir StatementExpression Assignment This MemberReference destDir MemberReference destDir = MethodDeclaration /**
     * The source and target file names on Windows and OS/2 must use
     * forward slash as file separator.
     */ Modifier public setForwardslash FormalParameter BasicType boolean forwardSlash StatementExpression Assignment This MemberReference forwardSlash MemberReference forwardSlash = MethodDeclaration /**
     * Limit the command line length by passing at maximum this many
     * sourcefiles at once to the command.
     *
     * <p>Set to &lt;= 0 for unlimited - this is the default.</p>
     *
     * @since Ant 1.6
     */ Modifier public setMaxParallel FormalParameter BasicType int max StatementExpression Assignment MemberReference maxParallel MemberReference max = MethodDeclaration /**
     * Whether to send the source file name on the command line.
     *
     * <p>Defaults to <code>true</code>.
     *
     * @since Ant 1.6
     */ Modifier public setAddsourcefile FormalParameter BasicType boolean b StatementExpression Assignment MemberReference addSourceFile MemberReference b = MethodDeclaration /**
     * Whether to print a verbose summary after execution.
     *
     * @since Ant 1.6
     */ Modifier public setVerbose FormalParameter BasicType boolean b StatementExpression Assignment MemberReference verbose MemberReference b = MethodDeclaration /**
     * Whether to ignore nonexistent files from filelists.
     *
     * @since Ant 1.6.2
     */ Modifier public setIgnoremissing FormalParameter BasicType boolean b StatementExpression Assignment MemberReference ignoreMissing MemberReference b = MethodDeclaration /**
     * Marker that indicates where the name of the source file should
     * be put on the command line.
     */ Modifier public ReferenceType Commandline ReferenceType Marker createSrcfile IfStatement BinaryOperation != MemberReference srcFilePos Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + MethodInvocation getTaskType Literal "" doesn\'t support multiple "" Literal ""srcfile elements."" MethodInvocation getLocation End StatementExpression Assignment MemberReference srcFilePos MethodInvocation cmdl createMarker = ReturnStatement MemberReference srcFilePos MethodDeclaration /**
     * Marker that indicates where the name of the target file should
     * be put on the command line.
     */ Modifier public ReferenceType Commandline ReferenceType Marker createTargetfile IfStatement BinaryOperation != MemberReference targetFilePos Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + MethodInvocation getTaskType Literal "" doesn\'t support multiple "" Literal ""targetfile elements."" MethodInvocation getLocation End StatementExpression Assignment MemberReference targetFilePos MethodInvocation cmdl createMarker = StatementExpression Assignment MemberReference srcIsFirst BinaryOperation != MemberReference srcFilePos Literal null = ReturnStatement MemberReference targetFilePos MethodDeclaration /**
     * Mapper to use for mapping source files to target files.
     */ Modifier public ReferenceType Mapper createMapper BuildException IfStatement BinaryOperation != MemberReference mapperElement Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Cannot define more than one mapper"" MethodInvocation getLocation End StatementExpression Assignment MemberReference mapperElement ClassCreator ReferenceType Mapper MethodInvocation getProject = ReturnStatement MemberReference mapperElement MethodDeclaration /**
     * @todo using taskName here is brittle, as a user could override it.
     *       this should probably be modified to use the classname instead.
     */ Modifier protected checkConfiguration IfStatement Literal MethodInvocation MethodInvocation getTaskName equals ""execon"" BlockStatement StatementExpression MethodInvocation Literal ""!! execon is deprecated. Use apply instead. !!"" log End StatementExpression SuperMethodInvocation checkConfiguration IfStatement BinaryOperation && BinaryOperation == MethodInvocation filesets size Literal 0 BinaryOperation == MethodInvocation filelists size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""no filesets and no filelists specified"" MethodInvocation getLocation End IfStatement BinaryOperation || BinaryOperation || BinaryOperation != MemberReference targetFilePos Literal null BinaryOperation != MemberReference mapperElement Literal null BinaryOperation != MemberReference destDir Literal null BlockStatement IfStatement BinaryOperation == MemberReference mapperElement Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""no mapper specified"" MethodInvocation getLocation End IfStatement BinaryOperation == MemberReference destDir Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""no dest attribute specified"" MethodInvocation getLocation End StatementExpression Assignment MemberReference mapper MethodInvocation mapperElement getImplementation = End MethodDeclaration Modifier protected ReferenceType ExecuteStreamHandler createHandler BuildException ReturnStatement TernaryExpression BinaryOperation == MemberReference redirectorElement Literal null SuperMethodInvocation createHandler ClassCreator ReferenceType PumpStreamHandler MethodDeclaration Modifier protected setupRedirector StatementExpression SuperMethodInvocation setupRedirector StatementExpression MethodInvocation redirector Literal true setAppendProperties MethodDeclaration Modifier protected runExec FormalParameter ReferenceType Execute exe BuildException LocalVariableDeclaration BasicType int VariableDeclarator totalFiles Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator totalDirs Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator haveExecuted Literal false TryStatement LocalVariableDeclaration ReferenceType Vector VariableDeclarator fileNames ClassCreator ReferenceType Vector LocalVariableDeclaration ReferenceType Vector VariableDeclarator baseDirs ClassCreator ReferenceType Vector ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation filesets size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator currentType MemberReference type LocalVariableDeclaration ReferenceType AbstractFileSet VariableDeclarator fs Cast ReferenceType AbstractFileSet MethodInvocation filesets MemberReference i elementAt IfStatement BinaryOperation instanceof MemberReference fs ReferenceType DirSet BlockStatement IfStatement Literal ! MethodInvocation MemberReference type equals ""dir"" BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Found a nested dirset but type is "" MemberReference type Literal "". "" Literal ""Temporarily switching to type=\""dir\"" on the"" Literal "" assumption that you really did mean"" Literal "" <dirset> not <fileset>."" MemberReference Project MSG_DEBUG log StatementExpression Assignment MemberReference currentType Literal ""dir"" = End End LocalVariableDeclaration ReferenceType File VariableDeclarator base MethodInvocation fs MethodInvocation getProject getDir LocalVariableDeclaration ReferenceType ExtendedDirectoryScanner VariableDeclarator ds ClassCreator ReferenceType ExtendedDirectoryScanner StatementExpression MethodInvocation fs MemberReference ds MethodInvocation getProject setupDirectoryScanner StatementExpression MethodInvocation ds MethodInvocation fs isFollowSymlinks setFollowSymlinks StatementExpression MethodInvocation ds scan IfStatement Literal ! MethodInvocation MemberReference currentType equals ""dir"" BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation MemberReference base MemberReference ds getFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference s length MemberReference ++ j BlockStatement StatementExpression MemberReference ++ totalFiles StatementExpression MethodInvocation fileNames MemberReference ArraySelector MemberReference j s addElement StatementExpression MethodInvocation baseDirs MemberReference base addElement End End IfStatement Literal ! MethodInvocation MemberReference currentType equals ""file"" BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation MemberReference base MemberReference ds getDirs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference s length MemberReference ++ j BlockStatement StatementExpression MemberReference ++ totalDirs StatementExpression MethodInvocation fileNames MemberReference ArraySelector MemberReference j s addElement StatementExpression MethodInvocation baseDirs MemberReference base addElement End End IfStatement BinaryOperation && BinaryOperation == MethodInvocation fileNames size Literal 0 MemberReference skipEmpty BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator includedCount BinaryOperation + TernaryExpression Literal ""dir"" MethodInvocation ds getIncludedFilesCount Literal 0 TernaryExpression Literal ""file"" MethodInvocation ds getIncludedDirsCount Literal 0 StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Skipping fileset for directory "" MemberReference base Literal "". It is "" TernaryExpression BinaryOperation > MemberReference includedCount Literal 0 Literal ""up to date."" Literal ""empty."" MemberReference Project MSG_INFO log ContinueStatement End IfStatement MemberReference ! parallel BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s ArrayCreator ReferenceType String MethodInvocation fileNames size StatementExpression MethodInvocation fileNames MemberReference s copyInto ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference s length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator command MethodInvocation MemberReference ArraySelector MemberReference j s MemberReference base getCommandline StatementExpression MethodInvocation MethodInvocation Commandline MemberReference command describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation exe MemberReference command setCommandline IfStatement BinaryOperation != MemberReference redirectorElement Literal null BlockStatement StatementExpression MethodInvocation setupRedirector StatementExpression MethodInvocation redirectorElement MemberReference redirector MemberReference ArraySelector MemberReference j s configure End IfStatement BinaryOperation || BinaryOperation != MemberReference redirectorElement Literal null MemberReference haveExecuted BlockStatement StatementExpression MethodInvocation exe MethodInvocation redirector createHandler setStreamHandler End StatementExpression MethodInvocation MemberReference exe runExecute StatementExpression Assignment MemberReference haveExecuted Literal true = End StatementExpression MethodInvocation fileNames removeAllElements StatementExpression MethodInvocation baseDirs removeAllElements End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation filelists size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FileList VariableDeclarator list Cast ReferenceType FileList MethodInvocation filelists MemberReference i elementAt LocalVariableDeclaration ReferenceType File VariableDeclarator base MethodInvocation list MethodInvocation getProject getDir LocalVariableDeclaration ReferenceType String VariableDeclarator names MethodInvocation MemberReference list getFilesAndDirs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference names length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MemberReference base MemberReference ArraySelector MemberReference j names IfStatement BinaryOperation || BinaryOperation || MemberReference ignoreMissing BinaryOperation && MethodInvocation f isFile Literal ! MethodInvocation MemberReference type equals ""dir"" BinaryOperation && MethodInvocation f isDirectory Literal ! MethodInvocation MemberReference type equals ""file"" BlockStatement IfStatement BinaryOperation || MemberReference ignoreMissing MethodInvocation f isFile BlockStatement StatementExpression MemberReference ++ totalFiles BlockStatement StatementExpression MemberReference ++ totalDirs End StatementExpression MethodInvocation fileNames MemberReference ArraySelector MemberReference j names addElement StatementExpression MethodInvocation baseDirs MemberReference base addElement End End IfStatement BinaryOperation && BinaryOperation == MethodInvocation fileNames size Literal 0 MemberReference skipEmpty BlockStatement LocalVariableDeclaration ReferenceType ExtendedDirectoryScanner VariableDeclarator ds ClassCreator ReferenceType ExtendedDirectoryScanner StatementExpression MethodInvocation ds MemberReference base setBasedir StatementExpression MethodInvocation ds MethodInvocation list MethodInvocation getProject getFiles setIncludes StatementExpression MethodInvocation ds scan LocalVariableDeclaration BasicType int VariableDeclarator includedCount BinaryOperation + MethodInvocation ds getIncludedFilesCount MethodInvocation ds getIncludedDirsCount StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Skipping filelist for directory "" MemberReference base Literal "". It is "" TernaryExpression BinaryOperation > MemberReference includedCount Literal 0 Literal ""up to date."" Literal ""empty."" MemberReference Project MSG_INFO log ContinueStatement End IfStatement MemberReference ! parallel BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s ArrayCreator ReferenceType String MethodInvocation fileNames size StatementExpression MethodInvocation fileNames MemberReference s copyInto ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference s length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator command MethodInvocation MemberReference ArraySelector MemberReference j s MemberReference base getCommandline StatementExpression MethodInvocation MethodInvocation Commandline MemberReference command describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation exe MemberReference command setCommandline IfStatement BinaryOperation != MemberReference redirectorElement Literal null BlockStatement StatementExpression MethodInvocation setupRedirector StatementExpression MethodInvocation redirectorElement MemberReference redirector MemberReference ArraySelector MemberReference j s configure End IfStatement BinaryOperation || BinaryOperation != MemberReference redirectorElement Literal null MemberReference haveExecuted BlockStatement StatementExpression MethodInvocation exe MethodInvocation redirector createHandler setStreamHandler End StatementExpression MethodInvocation MemberReference exe runExecute StatementExpression Assignment MemberReference haveExecuted Literal true = End StatementExpression MethodInvocation fileNames removeAllElements StatementExpression MethodInvocation baseDirs removeAllElements End End IfStatement BinaryOperation && MemberReference parallel BinaryOperation || BinaryOperation > MethodInvocation fileNames size Literal 0 MemberReference ! skipEmpty BlockStatement StatementExpression MethodInvocation MemberReference exe MemberReference fileNames MemberReference baseDirs runParallel StatementExpression Assignment MemberReference haveExecuted Literal true = End IfStatement MemberReference haveExecuted BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Applied "" MethodInvocation cmdl getExecutable Literal "" to "" MemberReference totalFiles Literal "" file"" TernaryExpression BinaryOperation != MemberReference totalFiles Literal 1 Literal ""s"" Literal """" Literal "" and "" MemberReference totalDirs Literal "" director"" TernaryExpression BinaryOperation != MemberReference totalDirs Literal 1 Literal ""ies"" Literal ""y"" Literal ""."" TernaryExpression MemberReference verbose MemberReference Project MSG_INFO MemberReference Project MSG_VERBOSE log End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Execute failed: "" MemberReference e MemberReference e MethodInvocation getLocation StatementExpression MethodInvocation logFlush StatementExpression MethodInvocation redirector Literal false setAppendProperties StatementExpression MethodInvocation redirector setProperties MethodDeclaration /**
     * Construct the command line for parallel execution.
     *
     * @param srcFiles The filenames to add to the commandline
     * @param baseDirs filenames are relative to this dir
     */ Modifier protected ReferenceType String getCommandline FormalParameter ReferenceType String srcFiles FormalParameter ReferenceType File baseDirs LocalVariableDeclaration Modifier final BasicType char VariableDeclarator fileSeparator MemberReference File separatorChar LocalVariableDeclaration ReferenceType Vector VariableDeclarator targets ClassCreator ReferenceType Vector IfStatement BinaryOperation != MemberReference targetFilePos Literal null BlockStatement LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator addedFiles ClassCreator ReferenceType Hashtable ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference srcFiles length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator subTargets MethodInvocation mapper MemberReference ArraySelector MemberReference i srcFiles mapFileName IfStatement BinaryOperation != MemberReference subTargets Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference subTargets length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Literal null IfStatement MemberReference ! relative BlockStatement StatementExpression Assignment MemberReference name ClassCreator MethodInvocation getAbsolutePath ReferenceType File MemberReference destDir MemberReference ArraySelector MemberReference j subTargets = BlockStatement StatementExpression Assignment MemberReference name MemberReference ArraySelector MemberReference j subTargets = End IfStatement BinaryOperation && MemberReference forwardSlash BinaryOperation != MemberReference fileSeparator Literal '/' BlockStatement StatementExpression Assignment MemberReference name MethodInvocation name MemberReference fileSeparator Literal '/' replace = End IfStatement MethodInvocation ! addedFiles MemberReference name contains BlockStatement StatementExpression MethodInvocation targets MemberReference name addElement StatementExpression MethodInvocation addedFiles MemberReference name MemberReference name put End End End End End LocalVariableDeclaration ReferenceType String VariableDeclarator targetFiles ArrayCreator ReferenceType String MethodInvocation targets size StatementExpression MethodInvocation targets MemberReference targetFiles copyInto IfStatement MemberReference ! addSourceFile BlockStatement StatementExpression Assignment MemberReference srcFiles ArrayCreator ReferenceType String Literal 0 = End LocalVariableDeclaration ReferenceType String VariableDeclarator orig MethodInvocation cmdl getCommandline LocalVariableDeclaration ReferenceType String VariableDeclarator result ArrayCreator ReferenceType String BinaryOperation + BinaryOperation + MemberReference orig length MemberReference srcFiles length MemberReference targetFiles length LocalVariableDeclaration BasicType int VariableDeclarator srcIndex MemberReference orig length IfStatement BinaryOperation != MemberReference srcFilePos Literal null BlockStatement StatementExpression Assignment MemberReference srcIndex MethodInvocation srcFilePos getPosition = End IfStatement BinaryOperation != MemberReference targetFilePos Literal null BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator targetIndex MethodInvocation targetFilePos getPosition IfStatement BinaryOperation || BinaryOperation < MemberReference srcIndex MemberReference targetIndex BinaryOperation && BinaryOperation == MemberReference srcIndex MemberReference targetIndex MemberReference srcIsFirst BlockStatement StatementExpression MethodInvocation System MemberReference orig Literal 0 MemberReference result Literal 0 MemberReference srcIndex arraycopy StatementExpression MethodInvocation System MemberReference orig MemberReference srcIndex MemberReference result BinaryOperation + MemberReference srcIndex MemberReference srcFiles length BinaryOperation - MemberReference targetIndex MemberReference srcIndex arraycopy StatementExpression MethodInvocation System MemberReference targetFiles Literal 0 MemberReference result BinaryOperation + MemberReference targetIndex MemberReference srcFiles length MemberReference targetFiles length arraycopy StatementExpression MethodInvocation System MemberReference orig MemberReference targetIndex MemberReference result BinaryOperation + BinaryOperation + MemberReference targetIndex MemberReference srcFiles length MemberReference targetFiles length BinaryOperation - MemberReference orig length MemberReference targetIndex arraycopy BlockStatement StatementExpression MethodInvocation System MemberReference orig Literal 0 MemberReference result Literal 0 MemberReference targetIndex arraycopy StatementExpression MethodInvocation System MemberReference targetFiles Literal 0 MemberReference result MemberReference targetIndex MemberReference targetFiles length arraycopy StatementExpression MethodInvocation System MemberReference orig MemberReference targetIndex MemberReference result BinaryOperation + MemberReference targetIndex MemberReference targetFiles length BinaryOperation - MemberReference srcIndex MemberReference targetIndex arraycopy StatementExpression MethodInvocation System MemberReference orig MemberReference srcIndex MemberReference result BinaryOperation + BinaryOperation + MemberReference srcIndex MemberReference srcFiles length MemberReference targetFiles length BinaryOperation - MemberReference orig length MemberReference srcIndex arraycopy StatementExpression Assignment MemberReference srcIndex MemberReference targetFiles length += End BlockStatement StatementExpression MethodInvocation System MemberReference orig Literal 0 MemberReference result Literal 0 MemberReference srcIndex arraycopy StatementExpression MethodInvocation System MemberReference orig MemberReference srcIndex MemberReference result BinaryOperation + MemberReference srcIndex MemberReference srcFiles length BinaryOperation - MemberReference orig length MemberReference srcIndex arraycopy End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference srcFiles length MemberReference ++ i BlockStatement IfStatement MemberReference ! relative BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference srcIndex MemberReference i result ClassCreator MethodInvocation getAbsolutePath ReferenceType File MemberReference ArraySelector MemberReference i baseDirs MemberReference ArraySelector MemberReference i srcFiles = BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference srcIndex MemberReference i result MemberReference ArraySelector MemberReference i srcFiles = End IfStatement BinaryOperation && MemberReference forwardSlash BinaryOperation != MemberReference fileSeparator Literal '/' BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference srcIndex MemberReference i result MemberReference ArraySelector BinaryOperation + MemberReference srcIndex MemberReference i MethodInvocation MemberReference fileSeparator Literal '/' replace result = End End ReturnStatement MemberReference result MethodDeclaration /**
     * Construct the command line for serial execution.
     *
     * @param srcFile The filename to add to the commandline
     * @param baseDir filename is relative to this dir
     */ Modifier protected ReferenceType String getCommandline FormalParameter ReferenceType String srcFile FormalParameter ReferenceType File baseDir ReturnStatement MethodInvocation ArrayCreator ReferenceType String ArrayInitializer MemberReference srcFile ArrayCreator ReferenceType File ArrayInitializer MemberReference baseDir getCommandline MethodDeclaration /**
     * Return the list of files from this DirectoryScanner that should
     * be included on the command line.
     */ Modifier protected ReferenceType String getFiles FormalParameter ReferenceType File baseDir FormalParameter ReferenceType DirectoryScanner ds IfStatement BinaryOperation != MemberReference mapper Literal null BlockStatement LocalVariableDeclaration ReferenceType SourceFileScanner VariableDeclarator sfs ClassCreator ReferenceType SourceFileScanner This ReturnStatement MethodInvocation sfs MethodInvocation ds getIncludedFiles MemberReference baseDir MemberReference destDir MemberReference mapper restrict BlockStatement ReturnStatement MethodInvocation ds getIncludedFiles End MethodDeclaration /**
     * Return the list of Directories from this DirectoryScanner that
     * should be included on the command line.
     */ Modifier protected ReferenceType String getDirs FormalParameter ReferenceType File baseDir FormalParameter ReferenceType DirectoryScanner ds IfStatement BinaryOperation != MemberReference mapper Literal null BlockStatement LocalVariableDeclaration ReferenceType SourceFileScanner VariableDeclarator sfs ClassCreator ReferenceType SourceFileScanner This ReturnStatement MethodInvocation sfs MethodInvocation ds getIncludedDirectories MemberReference baseDir MemberReference destDir MemberReference mapper restrict BlockStatement ReturnStatement MethodInvocation ds getIncludedDirectories End MethodDeclaration /**
     * Return the list of files or directories from this FileList that
     * should be included on the command line.
     *
     * @since Ant 1.6.2
     */ Modifier protected ReferenceType String getFilesAndDirs FormalParameter ReferenceType FileList list IfStatement BinaryOperation != MemberReference mapper Literal null BlockStatement LocalVariableDeclaration ReferenceType SourceFileScanner VariableDeclarator sfs ClassCreator ReferenceType SourceFileScanner This ReturnStatement MethodInvocation sfs MethodInvocation list MethodInvocation getProject getFiles MethodInvocation list MethodInvocation getProject getDir MemberReference destDir MemberReference mapper restrict BlockStatement ReturnStatement MethodInvocation list MethodInvocation getProject getFiles End MethodDeclaration /**
     * Runs the command in ""parallel"" mode, making sure that at most
     * maxParallel sourcefiles get passed on the command line.
     *
     * @since Ant 1.6
     */ Modifier protected runParallel FormalParameter ReferenceType Execute exe FormalParameter ReferenceType Vector fileNames FormalParameter ReferenceType Vector baseDirs IOException BuildException LocalVariableDeclaration ReferenceType String VariableDeclarator s ArrayCreator ReferenceType String MethodInvocation fileNames size StatementExpression MethodInvocation fileNames MemberReference s copyInto LocalVariableDeclaration ReferenceType File VariableDeclarator b ArrayCreator ReferenceType File MethodInvocation baseDirs size StatementExpression MethodInvocation baseDirs MemberReference b copyInto IfStatement BinaryOperation || BinaryOperation <= MemberReference maxParallel Literal 0 BinaryOperation == MemberReference s length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator command MethodInvocation MemberReference s MemberReference b getCommandline StatementExpression MethodInvocation MethodInvocation Commandline MemberReference command describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation exe MemberReference command setCommandline StatementExpression MethodInvocation MemberReference exe runExecute BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator stillToDo MethodInvocation fileNames size LocalVariableDeclaration BasicType int VariableDeclarator currentOffset Literal 0 WhileStatement BinaryOperation > MemberReference stillToDo Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator currentAmount MethodInvocation Math MemberReference stillToDo MemberReference maxParallel min LocalVariableDeclaration ReferenceType String VariableDeclarator cs ArrayCreator ReferenceType String MemberReference currentAmount StatementExpression MethodInvocation System MemberReference s MemberReference currentOffset MemberReference cs Literal 0 MemberReference currentAmount arraycopy LocalVariableDeclaration ReferenceType File VariableDeclarator cb ArrayCreator ReferenceType File MemberReference currentAmount StatementExpression MethodInvocation System MemberReference b MemberReference currentOffset MemberReference cb Literal 0 MemberReference currentAmount arraycopy LocalVariableDeclaration ReferenceType String VariableDeclarator command MethodInvocation MemberReference cs MemberReference cb getCommandline StatementExpression MethodInvocation MethodInvocation Commandline MemberReference command describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation exe MemberReference command setCommandline IfStatement BinaryOperation != MemberReference redirectorElement Literal null BlockStatement StatementExpression MethodInvocation setupRedirector StatementExpression MethodInvocation redirectorElement MemberReference redirector Literal null configure End IfStatement BinaryOperation || BinaryOperation != MemberReference redirectorElement Literal null BinaryOperation > MemberReference currentOffset Literal 0 BlockStatement StatementExpression MethodInvocation exe MethodInvocation redirector createHandler setStreamHandler End StatementExpression MethodInvocation MemberReference exe runExecute StatementExpression Assignment MemberReference stillToDo MemberReference currentAmount -= StatementExpression Assignment MemberReference currentOffset MemberReference currentAmount += End End ClassDeclaration Modifier public static /**
     * Enumerated attribute with the values ""file"", ""dir"" and ""both""
     * for the type attribute.
     */ FileDirBoth MethodDeclaration /**
         * @see EnumeratedAttribute#getValues
         */ Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""file"" Literal ""dir"" Literal ""both"" ReferenceType EnumeratedAttribute ReferenceType ExecTask",0
416,416,,0
450,450,,0
488,488,,0
645,645,,1
659,659,,0
13,13,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.junit Import java.io.IOException Import java.io.OutputStream Import java.text.NumberFormat Import junit.framework.AssertionFailedError Import junit.framework.Test Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Prints short summary output of the test to Ant's logging system.
 *
 */ SummaryJUnitResultFormatter FieldDeclaration /**
     * Formatter for timings.
     */ Modifier private ReferenceType NumberFormat VariableDeclarator nf MethodInvocation NumberFormat getInstance FieldDeclaration /**
     * OutputStream to write to.
     */ Modifier private ReferenceType OutputStream VariableDeclarator out FieldDeclaration Modifier private BasicType boolean VariableDeclarator withOutAndErr Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator systemOutput Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator systemError Literal null ConstructorDeclaration Modifier public /**
     * Empty
     */ SummaryJUnitResultFormatter MethodDeclaration /**
     * Empty
     */ Modifier public startTestSuite FormalParameter ReferenceType JUnitTest suite MethodDeclaration /**
     * Empty
     */ Modifier public startTest FormalParameter ReferenceType Test t MethodDeclaration /**
     * Empty
     */ Modifier public endTest FormalParameter ReferenceType Test test MethodDeclaration /**
     * Empty
     */ Modifier public addFailure FormalParameter ReferenceType Test test FormalParameter ReferenceType Throwable t MethodDeclaration /**
     * Interface TestListener for JUnit &gt; 3.4.
     *
     * <p>A Test failed.
     */ Modifier public addFailure FormalParameter ReferenceType Test test FormalParameter ReferenceType AssertionFailedError t StatementExpression MethodInvocation MemberReference test Cast ReferenceType Throwable MemberReference t addFailure MethodDeclaration /**
     * Empty
     */ Modifier public addError FormalParameter ReferenceType Test test FormalParameter ReferenceType Throwable t MethodDeclaration Modifier public setOutput FormalParameter ReferenceType OutputStream out StatementExpression Assignment This MemberReference out MemberReference out = MethodDeclaration Modifier public setSystemOutput FormalParameter ReferenceType String out StatementExpression Assignment MemberReference systemOutput MemberReference out = MethodDeclaration Modifier public setSystemError FormalParameter ReferenceType String err StatementExpression Assignment MemberReference systemError MemberReference err = MethodDeclaration /**
     * Should the output to System.out and System.err be written to
     * the summary.
     */ Modifier public setWithOutAndErr FormalParameter BasicType boolean value StatementExpression Assignment MemberReference withOutAndErr MemberReference value = MethodDeclaration /**
     * The whole testsuite ended.
     */ Modifier public endTestSuite FormalParameter ReferenceType JUnitTest suite BuildException LocalVariableDeclaration ReferenceType String VariableDeclarator newLine MethodInvocation System Literal ""line.separator"" getProperty LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer Literal ""Tests run: "" StatementExpression MethodInvocation sb MethodInvocation suite runCount append StatementExpression MethodInvocation sb Literal "", Failures: "" append StatementExpression MethodInvocation sb MethodInvocation suite failureCount append StatementExpression MethodInvocation sb Literal "", Errors: "" append StatementExpression MethodInvocation sb MethodInvocation suite errorCount append StatementExpression MethodInvocation sb Literal "", Time elapsed: "" append StatementExpression MethodInvocation sb MethodInvocation nf BinaryOperation / MethodInvocation suite getRunTime Literal 1000.0 format append StatementExpression MethodInvocation sb Literal "" sec"" append StatementExpression MethodInvocation sb MemberReference newLine append IfStatement MemberReference withOutAndErr BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference systemOutput Literal null BinaryOperation > MethodInvocation systemOutput length Literal 0 BlockStatement StatementExpression MethodInvocation sb MethodInvocation MemberReference newLine append MethodInvocation MemberReference systemOutput append MethodInvocation MemberReference newLine append Literal ""Output:"" append End IfStatement BinaryOperation && BinaryOperation != MemberReference systemError Literal null BinaryOperation > MethodInvocation systemError length Literal 0 BlockStatement StatementExpression MethodInvocation sb MethodInvocation MemberReference newLine append MethodInvocation MemberReference systemError append MethodInvocation MemberReference newLine append Literal ""Error: "" append End End TryStatement StatementExpression MethodInvocation out MethodInvocation sb MethodInvocation getBytes toString write StatementExpression MethodInvocation out flush CatchClause CatchClauseParameter IOException ioex ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unable to write summary output"" MemberReference ioex IfStatement BinaryOperation && BinaryOperation != MemberReference out MemberReference System out BinaryOperation != MemberReference out MemberReference System err BlockStatement TryStatement StatementExpression MethodInvocation out close CatchClause CatchClauseParameter IOException e End ReferenceType JUnitResultFormatter",0
308,308,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.javacc Import java.io.File Import java.io.IOException Import java.util.Enumeration Import java.util.Hashtable Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.CommandlineJava Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.util.JavaEnvUtils ClassDeclaration Modifier public /**
 * Runs the JJTree compiler compiler.
 *
 */ JJTree FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator OUTPUT_FILE Literal ""OUTPUT_FILE"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator BUILD_NODE_FILES Literal ""BUILD_NODE_FILES"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MULTI Literal ""MULTI"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODE_DEFAULT_VOID Literal ""NODE_DEFAULT_VOID"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODE_FACTORY Literal ""NODE_FACTORY"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODE_SCOPE_HOOK Literal ""NODE_SCOPE_HOOK"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODE_USES_PARSER Literal ""NODE_USES_PARSER"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator STATIC Literal ""STATIC"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator VISITOR Literal ""VISITOR"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODE_PACKAGE Literal ""NODE_PACKAGE"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator VISITOR_EXCEPTION Literal ""VISITOR_EXCEPTION"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator NODE_PREFIX Literal ""NODE_PREFIX"" FieldDeclaration Modifier private final ReferenceType Hashtable VariableDeclarator optionalAttrs ClassCreator ReferenceType Hashtable FieldDeclaration Modifier private ReferenceType String VariableDeclarator outputFile Literal null FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DEFAULT_SUFFIX Literal "".jj"" FieldDeclaration Modifier private ReferenceType File VariableDeclarator outputDirectory Literal null FieldDeclaration Modifier private ReferenceType File VariableDeclarator target Literal null FieldDeclaration Modifier private ReferenceType File VariableDeclarator javaccHome Literal null FieldDeclaration Modifier private ReferenceType CommandlineJava VariableDeclarator cmdl ClassCreator ReferenceType CommandlineJava MethodDeclaration /**
     * Sets the BUILD_NODE_FILES grammar option.
     */ Modifier public setBuildnodefiles FormalParameter BasicType boolean buildNodeFiles StatementExpression MethodInvocation optionalAttrs MemberReference BUILD_NODE_FILES ClassCreator ReferenceType Boolean MemberReference buildNodeFiles put MethodDeclaration /**
     * Sets the MULTI grammar option.
     */ Modifier public setMulti FormalParameter BasicType boolean multi StatementExpression MethodInvocation optionalAttrs MemberReference MULTI ClassCreator ReferenceType Boolean MemberReference multi put MethodDeclaration /**
     * Sets the NODE_DEFAULT_VOID grammar option.
     */ Modifier public setNodedefaultvoid FormalParameter BasicType boolean nodeDefaultVoid StatementExpression MethodInvocation optionalAttrs MemberReference NODE_DEFAULT_VOID ClassCreator ReferenceType Boolean MemberReference nodeDefaultVoid put MethodDeclaration /**
     * Sets the NODE_FACTORY grammar option.
     */ Modifier public setNodefactory FormalParameter BasicType boolean nodeFactory StatementExpression MethodInvocation optionalAttrs MemberReference NODE_FACTORY ClassCreator ReferenceType Boolean MemberReference nodeFactory put MethodDeclaration /**
     * Sets the NODE_SCOPE_HOOK grammar option.
     */ Modifier public setNodescopehook FormalParameter BasicType boolean nodeScopeHook StatementExpression MethodInvocation optionalAttrs MemberReference NODE_SCOPE_HOOK ClassCreator ReferenceType Boolean MemberReference nodeScopeHook put MethodDeclaration /**
     * Sets the NODE_USES_PARSER grammar option.
     */ Modifier public setNodeusesparser FormalParameter BasicType boolean nodeUsesParser StatementExpression MethodInvocation optionalAttrs MemberReference NODE_USES_PARSER ClassCreator ReferenceType Boolean MemberReference nodeUsesParser put MethodDeclaration /**
     * Sets the STATIC grammar option.
     */ Modifier public setStatic FormalParameter BasicType boolean staticParser StatementExpression MethodInvocation optionalAttrs MemberReference STATIC ClassCreator ReferenceType Boolean MemberReference staticParser put MethodDeclaration /**
     * Sets the VISITOR grammar option.
     */ Modifier public setVisitor FormalParameter BasicType boolean visitor StatementExpression MethodInvocation optionalAttrs MemberReference VISITOR ClassCreator ReferenceType Boolean MemberReference visitor put MethodDeclaration /**
     * Sets the NODE_PACKAGE grammar option.
     */ Modifier public setNodepackage FormalParameter ReferenceType String nodePackage StatementExpression MethodInvocation optionalAttrs MemberReference NODE_PACKAGE ClassCreator ReferenceType String MemberReference nodePackage put MethodDeclaration /**
     * Sets the VISITOR_EXCEPTION grammar option.
     */ Modifier public setVisitorException FormalParameter ReferenceType String visitorException StatementExpression MethodInvocation optionalAttrs MemberReference VISITOR_EXCEPTION ClassCreator ReferenceType String MemberReference visitorException put MethodDeclaration /**
     * Sets the NODE_PREFIX grammar option.
     */ Modifier public setNodeprefix FormalParameter ReferenceType String nodePrefix StatementExpression MethodInvocation optionalAttrs MemberReference NODE_PREFIX ClassCreator ReferenceType String MemberReference nodePrefix put MethodDeclaration /**
     * The directory to write the generated JavaCC grammar and node files to.
     * If not set, the files are written to the directory
     * containing the grammar file.
     */ Modifier public setOutputdirectory FormalParameter ReferenceType File outputDirectory StatementExpression Assignment This MemberReference outputDirectory MemberReference outputDirectory = MethodDeclaration /**
     * The outputfile to write the generated JavaCC grammar file to.
     * If not set, the file is written with the same name as
     * the JJTree grammar file with a suffix .jj.
     */ Modifier public setOutputfile FormalParameter ReferenceType String outputFile StatementExpression Assignment This MemberReference outputFile MemberReference outputFile = MethodDeclaration /**
     * The jjtree grammar file to process.
     */ Modifier public setTarget FormalParameter ReferenceType File target StatementExpression Assignment This MemberReference target MemberReference target = MethodDeclaration /**
     * The directory containing the JavaCC distribution.
     */ Modifier public setJavacchome FormalParameter ReferenceType File javaccHome StatementExpression Assignment This MemberReference javaccHome MemberReference javaccHome = ConstructorDeclaration Modifier public JJTree StatementExpression MethodInvocation cmdl MethodInvocation JavaEnvUtils Literal ""java"" getJreExecutable setVm MethodDeclaration Modifier public execute BuildException LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator iter MethodInvocation optionalAttrs keys WhileStatement MethodInvocation iter hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation iter nextElement LocalVariableDeclaration ReferenceType Object VariableDeclarator value MethodInvocation optionalAttrs MemberReference name get StatementExpression MethodInvocation cmdl MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""-"" MemberReference name Literal "":"" MethodInvocation value toString setValue createArgument End IfStatement BinaryOperation || BinaryOperation == MemberReference target Literal null MethodInvocation ! target isFile BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Invalid target: "" MemberReference target End LocalVariableDeclaration ReferenceType File VariableDeclarator javaFile Literal null IfStatement BinaryOperation == MemberReference outputDirectory Literal null BlockStatement StatementExpression MethodInvocation cmdl MethodInvocation BinaryOperation + Literal ""-OUTPUT_DIRECTORY:"" MethodInvocation getDefaultOutputDirectory setValue createArgument StatementExpression Assignment MemberReference javaFile ClassCreator ReferenceType File MethodInvocation MemberReference target MemberReference outputFile Literal null createOutputFileName = BlockStatement IfStatement MethodInvocation ! outputDirectory isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""'outputdirectory' "" MemberReference outputDirectory Literal "" is not a directory."" End StatementExpression MethodInvocation cmdl MethodInvocation BinaryOperation + Literal ""-OUTPUT_DIRECTORY:"" MethodInvocation outputDirectory MethodInvocation Literal '\\' Literal '/' replace getAbsolutePath setValue createArgument StatementExpression Assignment MemberReference javaFile ClassCreator ReferenceType File MethodInvocation MemberReference target MemberReference outputFile MethodInvocation outputDirectory getPath createOutputFileName = End IfStatement BinaryOperation && MethodInvocation javaFile exists BinaryOperation < MethodInvocation target lastModified MethodInvocation javaFile lastModified BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Target is already built - skipping ("" MemberReference target Literal "")"" MemberReference Project MSG_VERBOSE log ReturnStatement End IfStatement BinaryOperation != MemberReference outputFile Literal null BlockStatement StatementExpression MethodInvocation cmdl MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""-"" MemberReference OUTPUT_FILE Literal "":"" MethodInvocation outputFile Literal '\\' Literal '/' replace setValue createArgument End StatementExpression MethodInvocation cmdl MethodInvocation MethodInvocation target getAbsolutePath setValue createArgument StatementExpression MethodInvocation cmdl MethodInvocation JavaCC MemberReference javaccHome MemberReference JavaCC TASKDEF_TYPE_JJTREE getMainClass setClassname LocalVariableDeclaration Modifier final ReferenceType Path VariableDeclarator classpath MethodInvocation cmdl MethodInvocation getProject createClasspath LocalVariableDeclaration Modifier final ReferenceType File VariableDeclarator javaccJar MethodInvocation JavaCC MemberReference javaccHome getArchiveFile StatementExpression MethodInvocation classpath MethodInvocation MethodInvocation javaccJar getAbsolutePath setPath createPathElement StatementExpression MethodInvocation classpath addJavaRuntime LocalVariableDeclaration Modifier final ReferenceType Commandline ReferenceType Argument VariableDeclarator arg MethodInvocation cmdl createVmArgument StatementExpression MethodInvocation arg Literal ""-mx140M"" setValue StatementExpression MethodInvocation arg BinaryOperation + Literal ""-Dinstall.root="" MethodInvocation javaccHome getAbsolutePath setValue LocalVariableDeclaration Modifier final ReferenceType Execute VariableDeclarator process ClassCreator ReferenceType Execute ClassCreator ReferenceType LogStreamHandler This MemberReference Project MSG_INFO MemberReference Project MSG_INFO Literal null StatementExpression MethodInvocation MethodInvocation cmdl describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation process MethodInvocation cmdl getCommandline setCommandline TryStatement IfStatement BinaryOperation != MethodInvocation process execute Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""JJTree failed."" End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Failed to launch JJTree"" MemberReference e MethodDeclaration Modifier private ReferenceType String createOutputFileName FormalParameter ReferenceType File target FormalParameter ReferenceType String optionalOutputFile FormalParameter ReferenceType String outputDirectory StatementExpression Assignment MemberReference optionalOutputFile MethodInvocation MemberReference optionalOutputFile MemberReference outputDirectory validateOutputFile = LocalVariableDeclaration ReferenceType String VariableDeclarator jjtreeFile MethodInvocation target MethodInvocation Literal '\\' Literal '/' replace getAbsolutePath IfStatement BinaryOperation || BinaryOperation == MemberReference optionalOutputFile Literal null MethodInvocation optionalOutputFile Literal """" equals BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator filePos MethodInvocation jjtreeFile Literal ""/"" lastIndexOf IfStatement BinaryOperation >= MemberReference filePos Literal 0 BlockStatement StatementExpression Assignment MemberReference jjtreeFile MethodInvocation jjtreeFile BinaryOperation + MemberReference filePos Literal 1 substring = End LocalVariableDeclaration BasicType int VariableDeclarator suffixPos MethodInvocation jjtreeFile Literal '.' lastIndexOf IfStatement BinaryOperation == MemberReference suffixPos Literal - 1 BlockStatement StatementExpression Assignment MemberReference optionalOutputFile BinaryOperation + MemberReference jjtreeFile MemberReference DEFAULT_SUFFIX = BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator currentSuffix MethodInvocation jjtreeFile MemberReference suffixPos substring IfStatement MethodInvocation currentSuffix MemberReference DEFAULT_SUFFIX equals BlockStatement StatementExpression Assignment MemberReference optionalOutputFile BinaryOperation + MemberReference jjtreeFile MemberReference DEFAULT_SUFFIX = BlockStatement StatementExpression Assignment MemberReference optionalOutputFile BinaryOperation + MethodInvocation jjtreeFile Literal 0 MemberReference suffixPos substring MemberReference DEFAULT_SUFFIX = End End End IfStatement BinaryOperation || BinaryOperation == MemberReference outputDirectory Literal null MethodInvocation outputDirectory Literal """" equals BlockStatement StatementExpression Assignment MemberReference outputDirectory MethodInvocation getDefaultOutputDirectory = End ReturnStatement BinaryOperation + BinaryOperation + MemberReference outputDirectory Literal ""/"" MemberReference optionalOutputFile MethodDeclaration /**
     * When running JJTree from an Ant taskdesk the -OUTPUT_DIRECTORY must
     * always be set. But when -OUTPUT_DIRECTORY is set, -OUTPUT_FILE is
     * handled as if relative of this -OUTPUT_DIRECTORY. Thus when the
     * -OUTPUT_FILE is absolute or contains a drive letter we have a problem.
     *
     * @param outputFile
     * @param outputDirectory
     * @return
     * @throws BuildException
     */ Modifier private ReferenceType String validateOutputFile FormalParameter ReferenceType String outputFile FormalParameter ReferenceType String outputDirectory BuildException IfStatement BinaryOperation == MemberReference outputFile Literal null BlockStatement ReturnStatement Literal null End IfStatement BinaryOperation && BinaryOperation == MemberReference outputDirectory Literal null BinaryOperation || MethodInvocation outputFile Literal ""/"" startsWith MethodInvocation outputFile Literal ""\\"" startsWith BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator relativeOutputFile MethodInvocation MemberReference outputFile makeOutputFileRelative StatementExpression MethodInvocation MemberReference relativeOutputFile setOutputfile ReturnStatement MemberReference relativeOutputFile End LocalVariableDeclaration ReferenceType String VariableDeclarator root MethodInvocation MethodInvocation getAbsolutePath ClassCreator ReferenceType File MemberReference outputFile getRoot IfStatement BinaryOperation && BinaryOperation > MethodInvocation root length Literal 1 MethodInvocation outputFile MethodInvocation root Literal 0 BinaryOperation - MethodInvocation root length Literal 1 substring startsWith BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Drive letter in 'outputfile' not "" Literal ""supported: "" MemberReference outputFile End ReturnStatement MemberReference outputFile MethodDeclaration Modifier private ReferenceType String makeOutputFileRelative FormalParameter ReferenceType String outputFile LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator relativePath ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType String VariableDeclarator defaultOutputDirectory MethodInvocation getDefaultOutputDirectory LocalVariableDeclaration BasicType int VariableDeclarator nextPos MethodInvocation defaultOutputDirectory Literal '/' indexOf LocalVariableDeclaration BasicType int VariableDeclarator startPos BinaryOperation + MemberReference nextPos Literal 1 WhileStatement BinaryOperation && BinaryOperation > MemberReference startPos Literal - 1 BinaryOperation < MemberReference startPos MethodInvocation defaultOutputDirectory length BlockStatement StatementExpression MethodInvocation relativePath Literal ""/.."" append StatementExpression Assignment MemberReference nextPos MethodInvocation defaultOutputDirectory Literal '/' MemberReference startPos indexOf = IfStatement BinaryOperation == MemberReference nextPos Literal - 1 BlockStatement StatementExpression Assignment MemberReference startPos MemberReference nextPos = BlockStatement StatementExpression Assignment MemberReference startPos BinaryOperation + MemberReference nextPos Literal 1 = End End StatementExpression MethodInvocation relativePath MemberReference outputFile append ReturnStatement MethodInvocation relativePath toString MethodDeclaration Modifier private ReferenceType String getDefaultOutputDirectory ReturnStatement MethodInvocation MethodInvocation getBaseDir MethodInvocation getAbsolutePath MethodInvocation Literal '\\' Literal '/' replace getProject MethodDeclaration /**
     * Determine root directory for a given file.
     *
     * @param file
     * @return file's root directory
     */ Modifier private ReferenceType File getRoot FormalParameter ReferenceType File file LocalVariableDeclaration ReferenceType File VariableDeclarator root MethodInvocation file getAbsoluteFile WhileStatement BinaryOperation != MethodInvocation root getParent Literal null BlockStatement StatementExpression Assignment MemberReference root MethodInvocation root getParentFile = End ReturnStatement MemberReference root ReferenceType Task",0
467,467,,0
211,211,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters Import java.io.IOException Import java.io.InputStream Import java.io.StringReader Import org.apache.tools.ant.util.ReaderInputStream ClassDeclaration Modifier public /**
 * Wraps a String as an InputStream.
 *
 */ StringInputStream ConstructorDeclaration Modifier public /**
     * Composes a stream from a String
     *
     * @param source The string to read from. Must not be <code>null</code>.
     */ StringInputStream FormalParameter ReferenceType String source StatementExpression SuperConstructorInvocation ClassCreator ReferenceType StringReader MemberReference source ConstructorDeclaration Modifier public /**
     * Composes a stream from a String with the specified encoding
     *
     * @param source The string to read from. Must not be <code>null</code>.
     * @param encoding The encoding scheme.  Also must not be <CODE>null</CODE>.
     */ StringInputStream FormalParameter ReferenceType String source FormalParameter ReferenceType String encoding StatementExpression SuperConstructorInvocation ClassCreator ReferenceType StringReader MemberReference source MemberReference encoding ReferenceType ReaderInputStream",1
198,198,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.perforce Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * Obtains or sets the value of a counter.
 *
 * <p> When used in its base form
 * (where only the counter name is provided), the counter value will be
 * printed to the output stream. When the value is provided, the counter
 * will be set to the value provided. When a property name is provided,
 * the property will be filled with the value of the counter. You may
 * not specify to both get and set the value of the counter in the same
 * Task.
 * </p>
 * <P>
 * The user performing this task must have Perforce &quot;review&quot; permissions
 * as defined by Perforce protections in order for this task to succeed.
</P>

 * Example Usage:<br>
 * &lt;p4counter name=""${p4.counter}"" property=${p4.change}""/&gt;
 *
 * @ant.task category=""scm""
 */ P4Counter FieldDeclaration /**
     * name of the counter
     */ Modifier public ReferenceType String VariableDeclarator counter Literal null FieldDeclaration /**
     * name of an optional property
     */ Modifier public ReferenceType String VariableDeclarator property Literal null FieldDeclaration /**
     * flag telling whether the value of the counter should be set
     */ Modifier public BasicType boolean VariableDeclarator shouldSetValue Literal false FieldDeclaration /**
     * flag telling whether a property should be set
     */ Modifier public BasicType boolean VariableDeclarator shouldSetProperty Literal false FieldDeclaration /**
     * new value for the counter
     */ Modifier public BasicType int VariableDeclarator value Literal 0 MethodDeclaration /**
     * The name of the counter; required
     * @param counter name of the counter
     */ Modifier public setName FormalParameter ReferenceType String counter StatementExpression Assignment This MemberReference counter MemberReference counter = MethodDeclaration /**
     * The new value for the counter; optional.
     * @param value new value for the counter
     */ Modifier public setValue FormalParameter BasicType int value StatementExpression Assignment This MemberReference value MemberReference value = StatementExpression Assignment MemberReference shouldSetValue Literal true = MethodDeclaration /**
     * A property to be set with the value of the counter
     * @param property the name of a property to set with the value
     * of the counter
     */ Modifier public setProperty FormalParameter ReferenceType String property StatementExpression Assignment This MemberReference property MemberReference property = StatementExpression Assignment MemberReference shouldSetProperty Literal true = MethodDeclaration /**
     * again, properties are mutable in this tsk
     * @throws BuildException if the required parameters are not supplied.
     */ Modifier public execute BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference counter Literal null BinaryOperation == MethodInvocation counter length Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No counter specified to retrieve"" End IfStatement BinaryOperation && MemberReference shouldSetValue MemberReference shouldSetProperty BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Cannot both set the value of the property and retrieve the "" Literal ""value of the property."" End LocalVariableDeclaration ReferenceType String VariableDeclarator command BinaryOperation + BinaryOperation + BinaryOperation + Literal ""counter "" MemberReference P4CmdOpts Literal "" "" MemberReference counter IfStatement MemberReference ! shouldSetProperty BlockStatement StatementExpression Assignment MemberReference command BinaryOperation + Literal ""-s "" MemberReference command = End IfStatement MemberReference shouldSetValue BlockStatement StatementExpression Assignment MemberReference command BinaryOperation + Literal "" "" MemberReference value += End IfStatement MemberReference shouldSetProperty BlockStatement LocalVariableDeclaration Modifier final ReferenceType Project VariableDeclarator myProj MethodInvocation getProject LocalVariableDeclaration ReferenceType P4Handler VariableDeclarator handler ClassCreator ReferenceType P4HandlerAdapter MethodDeclaration Modifier public process FormalParameter ReferenceType String line StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""P4Counter retrieved line \"""" MemberReference line Literal ""\"""" MemberReference Project MSG_VERBOSE log TryStatement StatementExpression Assignment MemberReference value MethodInvocation Integer MemberReference line parseInt = StatementExpression MethodInvocation myProj MemberReference property BinaryOperation + Literal """" MemberReference value setProperty CatchClause CatchClauseParameter NumberFormatException nfe ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Perforce error. "" Literal ""Could not retrieve counter value."" StatementExpression MethodInvocation MemberReference command MemberReference handler execP4Command BlockStatement StatementExpression MethodInvocation MemberReference command ClassCreator ReferenceType SimpleP4OutputHandler This execP4Command End ReferenceType P4Base",0
337,337,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters.util Import java.io.ByteArrayInputStream Import java.io.IOException Import org.apache.bcel.classfile.ClassParser Import org.apache.bcel.classfile.ConstantValue Import org.apache.bcel.classfile.Field Import org.apache.bcel.classfile.JavaClass ClassDeclaration Modifier public final /**
 * Helper class that filters constants from a Java Class
 *
 */ JavaClassHelper FieldDeclaration /** System specific line separator. */ Modifier private final static ReferenceType String VariableDeclarator LS MethodInvocation System Literal ""line.separator"" getProperty MethodDeclaration /**
     * Get the constants declared in a file as name=value
     *
     * @param bytes the class as a array of bytes
     * @return a StringBuffer contains the name=value pairs
     * @exception IOException if an error occurs
     */ Modifier public final static ReferenceType StringBuffer getConstants FormalParameter BasicType byte bytes IOException LocalVariableDeclaration Modifier final ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer LocalVariableDeclaration Modifier final ReferenceType ByteArrayInputStream VariableDeclarator bis ClassCreator ReferenceType ByteArrayInputStream MemberReference bytes LocalVariableDeclaration Modifier final ReferenceType ClassParser VariableDeclarator parser ClassCreator ReferenceType ClassParser MemberReference bis Literal """" LocalVariableDeclaration Modifier final ReferenceType JavaClass VariableDeclarator javaClass MethodInvocation parser parse LocalVariableDeclaration Modifier final ReferenceType Field VariableDeclarator fields MethodInvocation javaClass getFields ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference fields length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType Field VariableDeclarator field MemberReference ArraySelector MemberReference i fields IfStatement BinaryOperation != MemberReference field Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType ConstantValue VariableDeclarator cv MethodInvocation field getConstantValue IfStatement BinaryOperation != MemberReference cv Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator cvs MethodInvocation cv toString IfStatement BinaryOperation && MethodInvocation cvs Literal ""\"""" startsWith MethodInvocation cvs Literal ""\"""" endsWith BlockStatement StatementExpression Assignment MemberReference cvs MethodInvocation cvs Literal 1 BinaryOperation - MethodInvocation cvs length Literal 1 substring = End StatementExpression MethodInvocation sb MethodInvocation field getName append StatementExpression MethodInvocation sb Literal '=' append StatementExpression MethodInvocation sb MemberReference cvs append StatementExpression MethodInvocation sb MemberReference LS append End End End ReturnStatement MemberReference sb",0
287,287,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.junit Import java.util.Enumeration Import java.util.Hashtable Import java.util.Properties Import java.util.Vector Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * <p> Run a single JUnit test.
 *
 * <p> The JUnit test is actually run by {@link JUnitTestRunner}.
 * So read the doc comments for that class :)
 *
 * @since Ant 1.2
 *
 * @see JUnitTask
 * @see JUnitTestRunner
 */ JUnitTest FieldDeclaration /** the name of the test case */ Modifier private ReferenceType String VariableDeclarator name Literal null FieldDeclaration /** the name of the result file */ Modifier private ReferenceType String VariableDeclarator outfile Literal null FieldDeclaration Modifier private BasicType long VariableDeclarator runs VariableDeclarator failures VariableDeclarator errors FieldDeclaration Modifier private BasicType long VariableDeclarator runTime FieldDeclaration Modifier private ReferenceType Properties VariableDeclarator props Literal null ConstructorDeclaration Modifier public JUnitTest ConstructorDeclaration Modifier public JUnitTest FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = ConstructorDeclaration Modifier public JUnitTest FormalParameter ReferenceType String name FormalParameter BasicType boolean haltOnError FormalParameter BasicType boolean haltOnFailure FormalParameter BasicType boolean filtertrace StatementExpression Assignment This MemberReference name MemberReference name = StatementExpression Assignment This MemberReference haltOnError MemberReference haltOnError = StatementExpression Assignment This MemberReference haltOnFail MemberReference haltOnFailure = StatementExpression Assignment This MemberReference filtertrace MemberReference filtertrace = MethodDeclaration /**
     * Set the name of the test class.
     */ Modifier public setName FormalParameter ReferenceType String value StatementExpression Assignment MemberReference name MemberReference value = MethodDeclaration /**
     * Set the name of the output file.
     */ Modifier public setOutfile FormalParameter ReferenceType String value StatementExpression Assignment MemberReference outfile MemberReference value = MethodDeclaration /**
     * Get the name of the test class.
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * Get the name of the output file
     *
     * @return the name of the output file.
     */ Modifier public ReferenceType String getOutfile ReturnStatement MemberReference outfile MethodDeclaration Modifier public setCounts FormalParameter BasicType long runs FormalParameter BasicType long failures FormalParameter BasicType long errors StatementExpression Assignment This MemberReference runs MemberReference runs = StatementExpression Assignment This MemberReference failures MemberReference failures = StatementExpression Assignment This MemberReference errors MemberReference errors = MethodDeclaration Modifier public setRunTime FormalParameter BasicType long runTime StatementExpression Assignment This MemberReference runTime MemberReference runTime = MethodDeclaration Modifier public BasicType long runCount ReturnStatement MemberReference runs MethodDeclaration Modifier public BasicType long failureCount ReturnStatement MemberReference failures MethodDeclaration Modifier public BasicType long errorCount ReturnStatement MemberReference errors MethodDeclaration Modifier public BasicType long getRunTime ReturnStatement MemberReference runTime MethodDeclaration Modifier public ReferenceType Properties getProperties ReturnStatement MemberReference props MethodDeclaration Modifier public setProperties FormalParameter ReferenceType Hashtable p StatementExpression Assignment MemberReference props ClassCreator ReferenceType Properties = ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation p keys MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator key MethodInvocation e nextElement StatementExpression MethodInvocation props MemberReference key MethodInvocation p MemberReference key get put End MethodDeclaration Modifier public BasicType boolean shouldRun FormalParameter ReferenceType Project p IfStatement BinaryOperation && BinaryOperation != MemberReference ifProperty Literal null BinaryOperation == MethodInvocation p MemberReference ifProperty getProperty Literal null BlockStatement ReturnStatement Literal false IfStatement BinaryOperation && BinaryOperation != MemberReference unlessProperty Literal null BinaryOperation != MethodInvocation p MemberReference unlessProperty getProperty Literal null BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration Modifier public ReferenceType FormatterElement getFormatters LocalVariableDeclaration ReferenceType FormatterElement VariableDeclarator fes ArrayCreator ReferenceType FormatterElement MethodInvocation formatters size StatementExpression MethodInvocation formatters MemberReference fes copyInto ReturnStatement MemberReference fes MethodDeclaration /**
     * Convenient method to add formatters to a vector
     */ addFormattersTo FormalParameter ReferenceType Vector v LocalVariableDeclaration Modifier final BasicType int VariableDeclarator count MethodInvocation formatters size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement StatementExpression MethodInvocation v MethodInvocation formatters MemberReference i elementAt addElement End MethodDeclaration /**
     * @since Ant 1.5
     */ Modifier public ReferenceType Object clone TryStatement LocalVariableDeclaration ReferenceType JUnitTest VariableDeclarator t Cast ReferenceType JUnitTest SuperMethodInvocation clone StatementExpression Assignment MemberReference t props TernaryExpression BinaryOperation == MemberReference props Literal null Literal null Cast ReferenceType Properties MethodInvocation props clone = StatementExpression Assignment MemberReference t formatters Cast ReferenceType Vector MethodInvocation formatters clone = ReturnStatement MemberReference t CatchClause CatchClauseParameter CloneNotSupportedException e ReturnStatement This ReferenceType BaseTest ReferenceType Cloneable",0
641,641,,0
128,128,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.clearcase Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Performs a ClearCase Update command.
 *
 * <p>
 * The following attributes are interpreted:
 * <table border=""1"">
 *   <tr>
 *     <th>Attribute</th>
 *     <th>Values</th>
 *     <th>Required</th>
 *   </tr>
 *   <tr>
 *      <td>viewpath</td>
 *      <td>Path to the ClearCase view file or directory that the command will operate on</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>graphical</td>
 *      <td>Displays a graphical dialog during the update</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>log</td>
 *      <td>Specifies a log file for ClearCase to write to</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>overwrite</td>
 *      <td>Specifies whether to overwrite hijacked files or not</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>rename</td>
 *      <td>Specifies that hijacked files should be renamed with a .keep extension</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>currenttime</td>
 *      <td>Specifies that modification time should be written as the current
 *          time. Either currenttime or preservetime can be specified.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>preservetime</td>
 *      <td>Specifies that modification time should preserved from the VOB
 *          time. Either currenttime or preservetime can be specified.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>failonerr</td>
 *      <td>Throw an exception if the command fails. Default is true</td>
 *      <td>No</td>
 *   <tr>
 * </table>
 *
 */ CCUpdate FieldDeclaration Modifier private BasicType boolean VariableDeclarator mGraphical Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mOverwrite Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mRename Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mCtime Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mPtime Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator mLog Literal null MethodDeclaration /**
     * Executes the task.
     * <p>
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType Project VariableDeclarator aProj MethodInvocation getProject LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 IfStatement BinaryOperation == MethodInvocation getViewPath Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation aProj MethodInvocation getPath getBaseDir setViewPath End StatementExpression MethodInvocation commandLine MethodInvocation getClearToolCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_UPDATE setValue createArgument StatementExpression MethodInvocation MemberReference commandLine checkOptions StatementExpression MethodInvocation MethodInvocation MethodInvocation commandLine toString MemberReference Project MSG_DEBUG log getProject IfStatement MethodInvocation ! getFailOnErr BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Ignoring any errors that occur for: "" MethodInvocation getViewPathBasename MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine run = IfStatement BinaryOperation && MethodInvocation Execute MemberReference result isFailure MethodInvocation getFailOnErr BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * Check the command line options.
     */ Modifier private checkOptions FormalParameter ReferenceType Commandline cmd IfStatement MethodInvocation getGraphical BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_GRAPHICAL setValue createArgument BlockStatement IfStatement MethodInvocation getOverwrite BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_OVERWRITE setValue createArgument BlockStatement IfStatement MethodInvocation getRename BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_RENAME setValue createArgument BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOVERWRITE setValue createArgument End End IfStatement MethodInvocation getCurrentTime BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_CURRENTTIME setValue createArgument BlockStatement IfStatement MethodInvocation getPreserveTime BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_PRESERVETIME setValue createArgument End End StatementExpression MethodInvocation MemberReference cmd getLogCommand End StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getViewPath setValue createArgument MethodDeclaration /**
     * If true, displays a graphical dialog during the update.
     *
     * @param graphical the status to set the flag to
     */ Modifier public setGraphical FormalParameter BasicType boolean graphical StatementExpression Assignment MemberReference mGraphical MemberReference graphical = MethodDeclaration /**
     * Get graphical flag status
     *
     * @return boolean containing status of graphical flag
     */ Modifier public BasicType boolean getGraphical ReturnStatement MemberReference mGraphical MethodDeclaration /**
     * If true, overwrite hijacked files.
     *
     * @param ow the status to set the flag to
     */ Modifier public setOverwrite FormalParameter BasicType boolean ow StatementExpression Assignment MemberReference mOverwrite MemberReference ow = MethodDeclaration /**
     * Get overwrite hijacked files status
     *
     * @return boolean containing status of overwrite flag
     */ Modifier public BasicType boolean getOverwrite ReturnStatement MemberReference mOverwrite MethodDeclaration /**
     * If true, hijacked files are renamed with a .keep extension.
     *
     * @param ren the status to set the flag to
     */ Modifier public setRename FormalParameter BasicType boolean ren StatementExpression Assignment MemberReference mRename MemberReference ren = MethodDeclaration /**
     * Get rename hijacked files status
     *
     * @return boolean containing status of rename flag
     */ Modifier public BasicType boolean getRename ReturnStatement MemberReference mRename MethodDeclaration /**
     * If true, modification time should be written as the current time.
     * Either currenttime or preservetime can be specified.
     *
     * @param ct the status to set the flag to
     */ Modifier public setCurrentTime FormalParameter BasicType boolean ct StatementExpression Assignment MemberReference mCtime MemberReference ct = MethodDeclaration /**
     * Get current time status
     *
     * @return boolean containing status of current time flag
     */ Modifier public BasicType boolean getCurrentTime ReturnStatement MemberReference mCtime MethodDeclaration /**
     * If true, modification time should be preserved from the VOB time.
     * Either currenttime or preservetime can be specified.
     *
     * @param pt the status to set the flag to
     */ Modifier public setPreserveTime FormalParameter BasicType boolean pt StatementExpression Assignment MemberReference mPtime MemberReference pt = MethodDeclaration /**
     * Get preserve time status
     *
     * @return boolean containing status of preserve time flag
     */ Modifier public BasicType boolean getPreserveTime ReturnStatement MemberReference mPtime MethodDeclaration /**
     * Sets the log file where cleartool records
     * the status of the command.
     *
     * @param log the path to the log file
     */ Modifier public setLog FormalParameter ReferenceType String log StatementExpression Assignment MemberReference mLog MemberReference log = MethodDeclaration /**
     * Get log file
     *
     * @return String containing the path to the log file
     */ Modifier public ReferenceType String getLog ReturnStatement MemberReference mLog MethodDeclaration /**
     * Get the 'log' command
     *
     * @param cmd containing the command line string with or without the log flag and path appended
     */ Modifier private getLogCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation == MethodInvocation getLog Literal null BlockStatement ReturnStatement BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_LOG setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getLog setValue createArgument End FieldDeclaration /**
     *  -graphical flag -- display graphical dialog during update operation
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_GRAPHICAL Literal ""-graphical"" FieldDeclaration /**
     * -log flag -- file to log status to
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_LOG Literal ""-log"" FieldDeclaration /**
     * -overwrite flag -- overwrite hijacked files
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_OVERWRITE Literal ""-overwrite"" FieldDeclaration /**
     * -noverwrite flag -- do not overwrite hijacked files
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOVERWRITE Literal ""-noverwrite"" FieldDeclaration /**
     * -rename flag -- rename hijacked files with .keep extension
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_RENAME Literal ""-rename"" FieldDeclaration /**
     * -ctime flag -- modified time is written as the current time
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_CURRENTTIME Literal ""-ctime"" FieldDeclaration /**
     * -ptime flag -- modified time is written as the VOB time
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_PRESERVETIME Literal ""-ptime"" ReferenceType ClearCase",0
444,444,,0
179,179,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.starteam Import com.starbase.starteam.Folder Import com.starbase.starteam.Label Import com.starbase.starteam.PropertyNames Import com.starbase.starteam.StarTeamFinder Import com.starbase.starteam.View Import com.starbase.starteam.ViewConfiguration Import com.starbase.util.OLEDate Import java.text.ParseException Import java.text.SimpleDateFormat Import java.util.Date Import java.util.Hashtable Import java.util.StringTokenizer Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.util.DateUtils Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project ClassDeclaration Modifier public abstract /**
 * TreeBasedTask.java
 * This abstract class is the base for any tasks that are tree-based, that
 * is, for tasks which iterate over a tree of folders in StarTeam which
 * is reflected in a tree of folder the local machine.
 *
 * This class provides the tree-iteration functionality.  Derived classes
 * will implement their specific task functionality by the visitor pattern,
 * specifically by implementing the method
 * <code>visit(Folder rootStarteamFolder, java.io.File rootLocalFolder)</code>
 *
 * Created: Sat Dec 15 16:55:19 2001
 *
 * @version 1.0
 * @see <A HREF=""http://www.starbase.com/"">StarBase Web Site</A>
 */ TreeBasedTask FieldDeclaration /**
     * This constant sets the filter to include all files. This default has
     * the same result as <CODE>setIncludes(""*"")</CODE>.
     *
     * @see #getIncludes()
     * @see #setIncludes(String includes)
     */ Modifier public final static ReferenceType String VariableDeclarator DEFAULT_INCLUDESETTING Literal ""*"" FieldDeclaration /**
     * This disables the exclude filter by default. In other words, no files
     * are excluded. This setting is equivalent to
     * <CODE>setExcludes(null)</CODE>.
     *
     * @see #getExcludes()
     * @see #setExcludes(String excludes)
     */ Modifier public final static ReferenceType String VariableDeclarator DEFAULT_EXCLUDESETTING Literal null FieldDeclaration /**
     * The root folder of the operation in StarTeam.
     */ Modifier private ReferenceType String VariableDeclarator rootStarteamFolder Literal ""/"" FieldDeclaration /**
     * The local folder corresponding to starteamFolder.  If not specified
     * the Star Team default folder will be used.
     */ Modifier private ReferenceType String VariableDeclarator rootLocalFolder Literal null FieldDeclaration /**
     * All files that fit this pattern are checked out.
     */ Modifier private ReferenceType String VariableDeclarator includes MemberReference DEFAULT_INCLUDESETTING FieldDeclaration /**
     * All files fitting this pattern are ignored.
     */ Modifier private ReferenceType String VariableDeclarator excludes MemberReference DEFAULT_EXCLUDESETTING FieldDeclaration /**
     * StarTeam label on which to perform task.
     */ Modifier private ReferenceType String VariableDeclarator label Literal null FieldDeclaration /**
     * Set recursion to false to check out files in only the given folder
     * and not in its subfolders.
     */ Modifier private BasicType boolean VariableDeclarator recursive Literal true FieldDeclaration /**
     * Set preloadFileInformation to true to load all file information from the server
     * at once.  Increases performance significantly for projects with many files and/or folders.
     */ Modifier private BasicType boolean VariableDeclarator preloadFileInformation Literal true FieldDeclaration /**
     * If forced set to true, files in the target directory will
     * be processed regardless of status in the repository.
     * Usually this should be  true if rootlocalfolder is set
     * because status will be relative to the default folder, not
     * to the one being processed.
     */ Modifier private BasicType boolean VariableDeclarator forced Literal false FieldDeclaration Modifier private ReferenceType Label VariableDeclarator labelInUse Literal null FieldDeclaration /**
     * holder for the asofdate attribute
     */ Modifier private ReferenceType String VariableDeclarator asOfDate Literal null FieldDeclaration /**
     * holder for the asofdateformat attribute
     */ Modifier private ReferenceType String VariableDeclarator asOfDateFormat Literal null MethodDeclaration /**
     * Set the root of the subtree in the StarTeam repository from which to
     * work; optional.  Defaults to the root folder of the view ('/').
     * @param rootStarteamFolder the root folder
     */ Modifier public setRootStarteamFolder FormalParameter ReferenceType String rootStarteamFolder StatementExpression Assignment This MemberReference rootStarteamFolder MemberReference rootStarteamFolder = MethodDeclaration /**
     * returns the root folder in the Starteam repository
     * used for this operation
     * @return the root folder in use
     */ Modifier public ReferenceType String getRootStarteamFolder ReturnStatement This MemberReference rootStarteamFolder MethodDeclaration /**
     * Set the local folder that will be the root of the tree
     * to which files are checked out; optional.
     * If this is not supplied, then the StarTeam ""default folder""
     * associated with <tt>rootstarteamfolder</tt> is used.
     *
     * @param rootLocalFolder
     *               the local folder that will mirror
     *               this.rootStarteamFolder
     *
     * @see rootLocalFolder
     */ Modifier public setRootLocalFolder FormalParameter ReferenceType String rootLocalFolder StatementExpression Assignment This MemberReference rootLocalFolder MemberReference rootLocalFolder = MethodDeclaration /**
     * Returns the local folder specified by the user,
     * corresponding to the starteam folder for this operation
     * or null if not specified.
     *
     * @return the local folder that mirrors this.rootStarteamFolder
     * @see rootLocalFolder
     */ Modifier public ReferenceType String getRootLocalFolder ReturnStatement This MemberReference rootLocalFolder MethodDeclaration /**
     * Declare files to include using standard <tt>includes</tt> patterns; optional.
     * @param includes A string of filter patterns to include. Separate the
     *                 patterns by spaces.
     * @see #getIncludes()
     * @see #setExcludes(String excludes)
     * @see #getExcludes()
     */ Modifier public setIncludes FormalParameter ReferenceType String includes StatementExpression Assignment This MemberReference includes MemberReference includes = MethodDeclaration /**
     * Gets the patterns from the include filter. Rather that duplicate the
     * details of AntStarTeamCheckOut's filtering here, refer to these
     * links:
     *
     * @return A string of filter patterns separated by spaces.
     * @see #setIncludes(String includes)
     * @see #setExcludes(String excludes)
     * @see #getExcludes()
     */ Modifier public ReferenceType String getIncludes ReturnStatement MemberReference includes MethodDeclaration /**
     * if excludes have been specified, emit the list to the log
     */ Modifier protected logIncludes IfStatement BinaryOperation != This MemberReference DEFAULT_INCLUDESETTING This MemberReference includes BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""  Includes specified: "" This MemberReference includes log End MethodDeclaration /**
     * Declare files to exclude using standard <tt>excludes</tt> patterns; optional.
     * When filtering files, AntStarTeamCheckOut
     * uses an unmodified version of <CODE>DirectoryScanner</CODE>'s
     * <CODE>match</CODE> method, so here are the patterns straight from the
     * Ant source code:
     * <BR><BR>
     * Matches a string against a pattern. The pattern contains two special
     * characters:
     * <BR>'*' which means zero or more characters,
     * <BR>'?' which means one and only one character.
     * <BR><BR>
     *  For example, if you want to check out all files except .XML and
     * .HTML files, you would put the following line in your program:
     * <CODE>setExcludes(""*.XML,*.HTML"");</CODE>
     * Finally, note that filters have no effect on the <B>directories</B>
     * that are scanned; you could not skip over all files in directories
     * whose names begin with ""project,"" for instance.
     * <BR><BR>
     * Treatment of overlapping inlcudes and excludes: To give a simplistic
     * example suppose that you set your include filter to ""*.htm *.html""
     * and your exclude filter to ""index.*"". What happens to index.html?
     * AntStarTeamCheckOut will not check out index.html, as it matches an
     * exclude filter (""index.*""), even though it matches the include
     * filter, as well.
     * <BR><BR>
     * Please also read the following sections before using filters:
     *
     * @param excludes A string of filter patterns to exclude. Separate the
     *                 patterns by spaces.
     * @see #setIncludes(String includes)
     * @see #getIncludes()
     * @see #getExcludes()
     */ Modifier public setExcludes FormalParameter ReferenceType String excludes StatementExpression Assignment This MemberReference excludes MemberReference excludes = MethodDeclaration /**
     * Gets the patterns from the exclude filter. Rather that duplicate the
     * details of AntStarTeanCheckOut's filtering here, refer to these
     * links:
     *
     * @return A string of filter patterns separated by spaces.
     * @see #setExcludes(String excludes)
     * @see #setIncludes(String includes)
     * @see #getIncludes()
     */ Modifier public ReferenceType String getExcludes ReturnStatement MemberReference excludes MethodDeclaration /**
     * if excludes have been specified, emit the list to the log
     */ Modifier protected logExcludes IfStatement BinaryOperation != This MemberReference DEFAULT_EXCLUDESETTING This MemberReference excludes BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""  Excludes specified: "" This MemberReference excludes log End MethodDeclaration /**
     * protected function to allow subclasses to set the label (or not).
     * sets the StarTeam label
     *
     * @param label name of the StarTeam label to be set
     */ Modifier protected _setLabel FormalParameter ReferenceType String label IfStatement BinaryOperation != Literal null MemberReference label BlockStatement StatementExpression Assignment MemberReference label MethodInvocation label trim = IfStatement BinaryOperation > MethodInvocation label length Literal 0 BlockStatement StatementExpression Assignment This MemberReference label MemberReference label = End End MethodDeclaration /**
     * non-public method callable only by derived classes that implement
     * setAsOfDate (so that derived tasks that do not accept this
     * parameter will fail if user attempts to use it.
     *
     * @param asOfDate asOfDate entered by user.
     * @since Ant 1.6
     */ Modifier protected _setAsOfDate FormalParameter ReferenceType String asOfDate IfStatement BinaryOperation && BinaryOperation != MemberReference asOfDate Literal null BinaryOperation > MethodInvocation asOfDate length Literal 0 BlockStatement StatementExpression Assignment This MemberReference asOfDate MemberReference asOfDate = End MethodDeclaration /**
     * non-public method callable only by derived classes that implement
     * setAsOfDateFormat (so that derived tasks that do not accept this
     * parameter will fail if user attempts to use it.
     *
     * @param asOfDateFormat asOfDate format entered by user.
     * @since Ant 1.6
     */ Modifier protected _setAsOfDateFormat FormalParameter ReferenceType String asOfDateFormat IfStatement BinaryOperation && BinaryOperation != MemberReference asOfDateFormat Literal null BinaryOperation > MethodInvocation asOfDateFormat length Literal 0 BlockStatement StatementExpression Assignment This MemberReference asOfDateFormat MemberReference asOfDateFormat = End MethodDeclaration /**
     * return the asOfDate entered by the user for internal use by derived
     * classes.
     *
     * @return the asOfDate entered by the user
     * @since Ant 1.6
     */ Modifier protected ReferenceType String getAsOfDate ReturnStatement This MemberReference asOfDate MethodDeclaration /**
     * If an asofDate parameter has been supplied by the user return a
     * StarTeam view based on the configuration of the StarTeam view
     * specified the user as of the date specified in the parameter.
     * If no asofDate has been specified, return null.
     *
     * This method is meant to be called from within implementations of the
     * <code>createSnapshotView</code> abstract method.
     *
     * @param raw    the raw view to be configured as of the supplied date
     *
     * @return the view as configured.
     * @exception BuildException
     *                   thrown if the date is not parsable by the default or
     *                   supplied format patterns.
     * @since Ant 1.6
     */ Modifier protected ReferenceType View getViewConfiguredByDate FormalParameter ReferenceType View raw BuildException IfStatement BinaryOperation == This MemberReference asOfDate Literal null BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType Date VariableDeclarator asOfDate Literal null LocalVariableDeclaration ReferenceType SimpleDateFormat VariableDeclarator fmt Literal null IfStatement BinaryOperation != This MemberReference asOfDateFormat Literal null BlockStatement StatementExpression Assignment MemberReference fmt ClassCreator ReferenceType SimpleDateFormat This MemberReference asOfDateFormat = TryStatement StatementExpression Assignment MemberReference asOfDate MethodInvocation fmt This MemberReference asOfDate parse = CatchClause CatchClauseParameter ParseException px ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""AsOfDate "" This MemberReference asOfDate Literal "" not parsable by supplied format "" This MemberReference asOfDateFormat BlockStatement TryStatement StatementExpression Assignment MemberReference asOfDate MethodInvocation DateUtils This MemberReference asOfDate parseIso8601DateTimeOrDate = CatchClause CatchClauseParameter ParseException px ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""AsOfDate "" This MemberReference asOfDate Literal "" not parsable by default"" Literal "" ISO8601 formats"" End ReturnStatement ClassCreator ReferenceType View MemberReference raw MethodInvocation ViewConfiguration ClassCreator ReferenceType OLEDate MemberReference asOfDate createFromTime MethodDeclaration /**
     * return the label passed to the task by the user as a string
     *
     * @return the label passed to the task by the user as a string
     */ Modifier protected ReferenceType String getLabel ReturnStatement This MemberReference label MethodDeclaration /**
     * Get the value of recursive.
     * @return value of recursive.
     */ Modifier public BasicType boolean isRecursive ReturnStatement This MemberReference recursive MethodDeclaration /**
     * Flag to set to include files in subfolders in the operation; optional,
     * default true.
     * @param v  Value to assign to recursive.
     */ Modifier public setRecursive FormalParameter BasicType boolean v StatementExpression Assignment This MemberReference recursive MemberReference v = MethodDeclaration /**
     * Get the value of preloadFileInformation.
     * @return value of preloadFileInformation.
     */ Modifier public BasicType boolean isPreloadFileInformation ReturnStatement This MemberReference preloadFileInformation MethodDeclaration /**
     * Flag to set to preload file information from the server; optional,
     * default true.
     * Increases performance significantly for projects with many files
     * and/or folders.
     * @param v  Value to assign to preloadFileInformation.
     */ Modifier public setPreloadFileInformation FormalParameter BasicType boolean v StatementExpression Assignment This MemberReference preloadFileInformation MemberReference v = MethodDeclaration /**
     * Get the value of forced.
     * @return value of forced.
     */ Modifier public BasicType boolean isForced ReturnStatement This MemberReference forced MethodDeclaration /**
     * Flag to force actions regardless of the status
     * that StarTeam is maintaining for the file; optional, default false.
     * If <tt>rootlocalfolder</tt> is set then
     * this should be set ""true"" as otherwise the checkout will be based on statuses
     * which do not relate to the target folder.
     * @param v  Value to assign to forced.
     */ Modifier public setForced FormalParameter BasicType boolean v StatementExpression Assignment This MemberReference forced MemberReference v = MethodDeclaration /**
     *  returns true if a label has been specified and it is a view label.
     *
     * @return  true if a label has been specified and it is a view label
     */ Modifier protected BasicType boolean isUsingViewLabel ReturnStatement BinaryOperation && BinaryOperation != Literal null This MemberReference labelInUse This MemberReference labelInUse MethodInvocation isViewLabel MethodDeclaration /**
     *  returns true if a label has been specified and it is a revision label.
     *
     * @return  true if a label has been specified and it is a revision label
     */ Modifier protected BasicType boolean isUsingRevisionLabel ReturnStatement BinaryOperation && BinaryOperation != Literal null This MemberReference labelInUse This MemberReference labelInUse MethodInvocation isRevisionLabel MethodDeclaration /**
     * returns the label being used
     *
     * @return the label being used
     */ Modifier protected ReferenceType Label getLabelInUse ReturnStatement This MemberReference labelInUse MethodDeclaration /**
     * show the label in the log and its type.
     */ Modifier protected logLabel IfStatement This MethodInvocation isUsingViewLabel BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""  Using view label "" MethodInvocation getLabel log IfStatement This MethodInvocation isUsingRevisionLabel BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""  Using revision label "" MethodInvocation getLabel log End End MethodDeclaration /**
     * show the asofDate in the log
     * @since Ant 1.6
     */ Modifier protected logAsOfDate IfStatement BinaryOperation != Literal null This MemberReference asOfDate BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""  Using view as of date "" MethodInvocation getAsOfDate log End MethodDeclaration /**
     * Look if the file should be processed by the task.
     * Don't process it if it fits no include filters or if
     * it fits an exclude filter.
     *
     * @param pName  the item name to look for being included.
     *
     * @return whether the file should be processed or not.
     */ Modifier protected BasicType boolean shouldProcess FormalParameter ReferenceType String pName LocalVariableDeclaration BasicType boolean VariableDeclarator includeIt MethodInvocation MethodInvocation getIncludes MemberReference pName matchPatterns LocalVariableDeclaration BasicType boolean VariableDeclarator excludeIt MethodInvocation MethodInvocation getExcludes MemberReference pName matchPatterns ReturnStatement BinaryOperation && MemberReference includeIt MemberReference ! excludeIt MethodDeclaration /**
     * Convenience method to see if a string match a one pattern
     * in given set of space-separated patterns.
     * @param patterns the space-separated list of patterns.
     * @param pName the name to look for matching.
     * @return whether the name match at least one pattern.
     */ Modifier protected BasicType boolean matchPatterns FormalParameter ReferenceType String patterns FormalParameter ReferenceType String pName IfStatement BinaryOperation == MemberReference patterns Literal null BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator exStr ClassCreator ReferenceType StringTokenizer MemberReference patterns Literal "","" WhileStatement MethodInvocation exStr hasMoreTokens BlockStatement IfStatement MethodInvocation DirectoryScanner MethodInvocation exStr nextToken MemberReference pName match BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * Finds and opens the root starteam folder of the operation specified
     * by this task.  This will be one of the following cases:
     *
     * @return Starteam's root folder for the operation.
     * @exception BuildException
     *                   if the root folder cannot be found in the repository
     */ Modifier private final ReferenceType Folder configureRootStarteamFolder BuildException LocalVariableDeclaration ReferenceType Folder VariableDeclarator starteamrootfolder Literal null TryStatement LocalVariableDeclaration ReferenceType View VariableDeclarator snapshot MethodInvocation openView StatementExpression Assignment MemberReference starteamrootfolder MethodInvocation StarTeamFinder MethodInvocation snapshot getRootFolder This MemberReference rootStarteamFolder findFolder = IfStatement This MethodInvocation isPreloadFileInformation BlockStatement LocalVariableDeclaration ReferenceType PropertyNames VariableDeclarator pn MethodInvocation MethodInvocation getPropertyNames getServer LocalVariableDeclaration ReferenceType String VariableDeclarator props ArrayCreator ReferenceType String ArrayInitializer MemberReference pn FILE_NAME MemberReference pn FILE_PATH MemberReference pn FILE_STATUS MemberReference pn MODIFIED_TIME MemberReference pn FILE_FILE_TIME_AT_CHECKIN MemberReference pn MODIFIED_USER_ID MemberReference pn FILE_SIZE LocalVariableDeclaration BasicType int VariableDeclarator depth TernaryExpression This MethodInvocation isRecursive Literal - 1 Literal 0 StatementExpression MethodInvocation starteamrootfolder MethodInvocation MethodInvocation getTypeNames MemberReference FILE getServer MemberReference props MemberReference depth populateNow End CatchClause CatchClauseParameter BuildException e ThrowStatement MemberReference e CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator msg ClassCreator MethodInvocation This MemberReference rootStarteamFolder append MethodInvocation Literal "" in repository at "" append MethodInvocation MethodInvocation getURL append ReferenceType StringBuffer Literal ""Unable to find root folder "" IfStatement BinaryOperation != This MemberReference label Literal null BlockStatement StatementExpression MethodInvocation msg MethodInvocation This MemberReference label append Literal "" using specified label "" append End IfStatement BinaryOperation != This MemberReference asOfDate Literal null BlockStatement StatementExpression MethodInvocation msg MethodInvocation This MemberReference asOfDate append Literal "" as of specified date "" append End ThrowStatement ClassCreator ReferenceType BuildException MethodInvocation msg toString MemberReference e IfStatement BinaryOperation == Literal null MemberReference starteamrootfolder BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to find root folder "" This MemberReference rootStarteamFolder Literal "" in repository at "" MethodInvocation getURL End ReturnStatement MemberReference starteamrootfolder MethodDeclaration /**
     * Returns the local folder mapped to the given StarTeam root folder
     * of the operation.  There are two cases here, depending on whether
     * <code>rootLocalFolder</code> is defined.
     * If <code>rootLocalFolder</code> is defined, it will be used to
     * establish a root mapping.  Otherwise, the repository's default root
     * folder will be used.
     *
     * @param starteamrootfolder
     *               root Starteam folder initialized for the operation
     *
     * @return the local folder corresponding to the root Starteam folder.
     * @see findRootStarteamFolder
     */ Modifier private final ReferenceType java ReferenceType io ReferenceType File getLocalRootMapping FormalParameter ReferenceType Folder starteamrootfolder LocalVariableDeclaration ReferenceType String VariableDeclarator localrootfolder IfStatement BinaryOperation != Literal null This MemberReference rootLocalFolder BlockStatement StatementExpression Assignment MemberReference localrootfolder MemberReference rootLocalFolder = BlockStatement StatementExpression Assignment MemberReference localrootfolder MethodInvocation starteamrootfolder getPathFragment = End ReturnStatement ClassCreator ReferenceType java ReferenceType io ReferenceType File MemberReference localrootfolder MethodDeclaration /**
     * extenders should emit to the log an entry describing the parameters
     * that will be used by this operation.
     *
     * @param starteamrootFolder
     *               root folder in StarTeam for the operation
     * @param targetrootFolder
     *               root local folder for the operation (whether specified by the user or not.
     */ Modifier protected abstract logOperationDescription FormalParameter ReferenceType Folder starteamrootFolder FormalParameter ReferenceType java ReferenceType io ReferenceType File targetrootFolder MethodDeclaration /**
     * This method does the work of opening the supplied  Starteam view and
     * calling the <code>visit()</code> method to perform the task.
     * Derived classes can customize the called methods
     * <code>testPreconditions()</code> and <code>visit()</code>.
     *
     * @exception BuildException if any error occurs in the processing
     * @see <code>testPreconditions()</code>
     * @see <code>visit()</code>
     */ Modifier public final execute BuildException TryStatement LocalVariableDeclaration ReferenceType Folder VariableDeclarator starteamrootfolder MethodInvocation configureRootStarteamFolder LocalVariableDeclaration ReferenceType java ReferenceType io ReferenceType File VariableDeclarator localrootfolder MethodInvocation MemberReference starteamrootfolder getLocalRootMapping StatementExpression MethodInvocation testPreconditions StatementExpression MethodInvocation MemberReference starteamrootfolder MemberReference localrootfolder logOperationDescription StatementExpression MethodInvocation MemberReference starteamrootfolder MemberReference localrootfolder visit CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e StatementExpression MethodInvocation disconnectFromServer MethodDeclaration Modifier private findLabel FormalParameter ReferenceType View v BuildException LocalVariableDeclaration ReferenceType Label VariableDeclarator allLabels MethodInvocation v getLabels ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference allLabels length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Label VariableDeclarator stLabel MemberReference ArraySelector MemberReference i allLabels StatementExpression MethodInvocation BinaryOperation + Literal ""checking label "" MethodInvocation stLabel getName MemberReference Project MSG_DEBUG log IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference stLabel Literal null MethodInvocation ! stLabel isDeleted MethodInvocation stLabel MethodInvocation This MemberReference label equals getName BlockStatement IfStatement BinaryOperation && MethodInvocation ! stLabel isRevisionLabel MethodInvocation ! stLabel isViewLabel BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unexpected label type."" End StatementExpression MethodInvocation BinaryOperation + Literal ""using label "" MethodInvocation stLabel getName MemberReference Project MSG_VERBOSE log StatementExpression Assignment This MemberReference labelInUse MemberReference stLabel = ReturnStatement End End ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Error: label "" This MemberReference label Literal "" does not exist in view "" MethodInvocation v getFullName MethodDeclaration /**
     * Helper method calls on the StarTeam API to retrieve an ID number
     * for the specified view, corresponding to this.label.
     * @param v the <code>View</code> in which to search for <code>this.label</code>
     * @return the ID number corresponding to <code>this.label</code> or -1 if
     *         no label was provided.
     * @exception BuildException if <code>this.label</code> does not correspond
     *                           to any label in the supplied view
     */ Modifier protected BasicType int getLabelID FormalParameter ReferenceType View v BuildException IfStatement BinaryOperation != Literal null This MemberReference label BlockStatement StatementExpression MethodInvocation MemberReference v findLabel ReturnStatement This MemberReference labelInUse MethodInvocation getID End ReturnStatement Literal - 1 MethodDeclaration Modifier protected BasicType int getIDofLabelInUse IfStatement BinaryOperation != Literal null This MemberReference labelInUse BlockStatement ReturnStatement This MemberReference labelInUse MethodInvocation getID End ReturnStatement Literal - 1 MethodDeclaration /**
     * Derived classes must override this class to define actual processing
     * to be performed on each folder in the tree defined for the task
     *
     * @param rootStarteamFolder
     *               the StarTeam folderto be visited
     * @param rootLocalFolder
     *               the local mapping of rootStarteamFolder
     *
     * @exception BuildException
     */ Modifier protected abstract visit FormalParameter ReferenceType Folder rootStarteamFolder FormalParameter ReferenceType java ReferenceType io ReferenceType File rootLocalFolder BuildException MethodDeclaration /**
     * Derived classes must override this method to define tests for
     * any preconditons required by the task.  This method is called at
     * the beginning of the execute() method.
     *
     * @exception BuildException throw if any fatal error exists in the
     * parameters supplied.  If there is a non-fatal condition, just writing
     * to the log may be appropriate.
     * @see <code>execute()</code>
     */ Modifier protected abstract testPreconditions BuildException MethodDeclaration /**
     * Return the full repository path name of a file.  Surprisingly there's
     * no method in com.starbase.starteam.File to provide this.
     *
     * @param remotefile the Star Team file whose path is to be returned
     *
     * @return the full repository path name of a file.
     */ Modifier public static ReferenceType String getFullRepositoryPath FormalParameter ReferenceType com ReferenceType starbase ReferenceType starteam ReferenceType File remotefile LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation sb MethodInvocation MethodInvocation remotefile getName append MethodInvocation remotefile getParentFolderHierarchy append ReturnStatement MethodInvocation sb toString ClassDeclaration Modifier protected abstract /**
     * This class implements a map of existing local files to possibly
     * existing repository files.  The map is created by a TreeBasedTask
     * upon recursing into a directory.  Each local item is mapped to an
     * unattached StarTeam object of the proper type, File->File and
     * Directory->Folder.
     *
     * As the TreeBased does its work, it deletes from the map all items
     * it has processed.
     *
     * When the TreeBased task processes all the items from the repository,
     * whatever items left in the UnmatchedFileMap are uncontrolled items
     * and can be processed as appropriate to the task.  In the case of
     * Checkouts, they can be optionally deleted from the local tree.  In the
     * case of Checkins they can optionally be added to the repository.
     */ UnmatchedFileMap MethodDeclaration /**
         * initializes the UnmatchedFileMap with entries from the local folder
         * These will be mapped to the corresponding StarTeam entry even though
         * it will not, in fact, exist in the repository.  But through it, it
         * can be added, listed, etc.
         *
         * @param localFolder
         *        the local folder from which the mappings will be made.
         * @param remoteFolder
         *        the corresponding StarTeam folder which will be processed.
         */ ReferenceType UnmatchedFileMap init FormalParameter ReferenceType java ReferenceType io ReferenceType File localFolder FormalParameter ReferenceType Folder remoteFolder IfStatement MethodInvocation ! localFolder exists BlockStatement ReturnStatement This End LocalVariableDeclaration ReferenceType String VariableDeclarator localFiles MethodInvocation localFolder list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference localFiles length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fn MemberReference ArraySelector MemberReference i localFiles LocalVariableDeclaration ReferenceType java ReferenceType io ReferenceType File VariableDeclarator localFile ClassCreator MethodInvocation getAbsoluteFile ReferenceType java ReferenceType io ReferenceType File MemberReference localFolder MemberReference ArraySelector MemberReference i localFiles StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""adding "" MemberReference localFile Literal "" to UnmatchedFileMap"" MemberReference Project MSG_DEBUG log IfStatement MethodInvocation localFile isDirectory BlockStatement StatementExpression This MethodInvocation MemberReference localFile ClassCreator ReferenceType Folder MemberReference remoteFolder MemberReference fn MemberReference fn put BlockStatement LocalVariableDeclaration ReferenceType com ReferenceType starbase ReferenceType starteam ReferenceType File VariableDeclarator remoteFile ClassCreator ReferenceType com ReferenceType starbase ReferenceType starteam ReferenceType File MemberReference remoteFolder StatementExpression MethodInvocation remoteFile MemberReference fn setName StatementExpression This MethodInvocation MemberReference localFile MemberReference remoteFile put End End ReturnStatement This MethodDeclaration /**
         * remove an item found to be controlled from the map.
         *
         * @param localFile the local item found to be controlled.
         */ removeControlledItem FormalParameter ReferenceType java ReferenceType io ReferenceType File localFile IfStatement MethodInvocation isActive BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""removing processed "" MethodInvocation localFile getAbsoluteFile Literal "" from UnmatchedFileMap"" MemberReference Project MSG_DEBUG log StatementExpression This MethodInvocation MethodInvocation localFile getAbsoluteFile remove End MethodDeclaration /**
         * override will perform the action appropriate for its task to perform
         * on items which are on the local tree but not in StarTeam.  It is
         * assumed that this method will not be called until all the items in
         * the corresponding folder have been processed, and that the internal
         * map * will contain only uncontrolled items.
         */ Modifier abstract processUncontrolledItems BuildException MethodDeclaration /**
         * overrides must define this to declare how this method knows if it
         * is active.  This presents extra clock cycles when the functionality
         * is not called for.
         *
         * @return True if this object is to perform its functionality.
         */ Modifier protected abstract BasicType boolean isActive ReferenceType Hashtable ReferenceType StarTeamTask",0
119,119,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.FileOutputStream Import java.io.IOException Import java.util.zip.GZIPOutputStream Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Compresses a file with the GZIP algorithm. Normally used to compress
 * non-compressed archives such as TAR files.
 *
 * @since Ant 1.1
 *
 * @ant.task category=""packaging""
 */ GZip MethodDeclaration /**
     * perform the GZip compression operation.
     */ Modifier protected pack LocalVariableDeclaration ReferenceType GZIPOutputStream VariableDeclarator zOut Literal null TryStatement StatementExpression Assignment MemberReference zOut ClassCreator ReferenceType GZIPOutputStream ClassCreator ReferenceType FileOutputStream MemberReference zipFile = StatementExpression MethodInvocation MemberReference source MemberReference zOut zipFile CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Problem creating gzip "" MethodInvocation ioe getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference ioe MethodInvocation getLocation IfStatement BinaryOperation != MemberReference zOut Literal null BlockStatement TryStatement StatementExpression MethodInvocation zOut close CatchClause CatchClauseParameter IOException e End ReferenceType Pack",1
57,57,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.cvslib Import java.io.ByteArrayOutputStream Import java.io.IOException Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.taskdefs.PumpStreamHandler ClassDeclaration /**
 * A dummy stream handler that just passes stuff to the parser.
 *
 * @version $Revision$ $Date$
 */ RedirectingStreamHandler ConstructorDeclaration RedirectingStreamHandler FormalParameter Modifier final ReferenceType ChangeLogParser parser StatementExpression SuperConstructorInvocation ClassCreator ReferenceType RedirectingOutputStream MemberReference parser ClassCreator ReferenceType ByteArrayOutputStream MethodDeclaration ReferenceType String getErrors TryStatement LocalVariableDeclaration Modifier final ReferenceType ByteArrayOutputStream VariableDeclarator error Cast ReferenceType ByteArrayOutputStream MethodInvocation getErr ReturnStatement MethodInvocation error Literal ""ASCII"" toString CatchClause CatchClauseParameter Exception e ReturnStatement Literal null MethodDeclaration Modifier public stop StatementExpression SuperMethodInvocation stop TryStatement StatementExpression MethodInvocation MethodInvocation close getErr StatementExpression MethodInvocation MethodInvocation close getOut CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e ReferenceType PumpStreamHandler",0
49,49,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Task ClassDeclaration Modifier public /**
 * Sets a property to the base name of a specified file, optionally minus a
 * suffix.
 *
 * This task can accept the following attributes:
 * <ul>
 * <li>file
 * <li>property
 * <li>suffix
 * </ul>
 * The <b>file</b> and <b>property</b> attributes are required. The
 * <b>suffix</b> attribute can be specified either with or without
 * the &quot;.&quot;, and the result will be the same (ie., the
 * returned file name will be minus the .suffix).
 * <p>
 * When this task executes, it will set the specified property to the
 * value of the last element in the specified file. If file is a
 * directory, the basename will be the last directory element. If file
 * is a full-path filename, the basename will be the simple file name.
 * If a suffix is specified, and the specified file ends in that suffix,
 * the basename will be the simple file name without the suffix.
 *
 *
 * @version $Revision$
 *
 * @since Ant 1.5
 *
 * @ant.task category=""property""
 */ Basename FieldDeclaration Modifier private ReferenceType File VariableDeclarator file FieldDeclaration Modifier private ReferenceType String VariableDeclarator property FieldDeclaration Modifier private ReferenceType String VariableDeclarator suffix MethodDeclaration /**
     * file or directory to get base name from
     * @param file file or directory to get base name from
     */ Modifier public setFile FormalParameter ReferenceType File file StatementExpression Assignment This MemberReference file MemberReference file = MethodDeclaration /**
    * Property to set base name to.
     * @param property name of property
    */ Modifier public setProperty FormalParameter ReferenceType String property StatementExpression Assignment This MemberReference property MemberReference property = MethodDeclaration /**
    * Optional suffix to remove from base name.
     * @param suffix suffix to remove from base name
    */ Modifier public setSuffix FormalParameter ReferenceType String suffix StatementExpression Assignment This MemberReference suffix MemberReference suffix = MethodDeclaration /**
     * do the work
     * @throws BuildException if required attributes are not supplied
     * property and attribute are required attributes
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference property Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""property attribute required"" MethodInvocation getLocation End IfStatement BinaryOperation == MemberReference file Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""file attribute required"" MethodInvocation getLocation End LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation file getName IfStatement BinaryOperation && BinaryOperation != MemberReference suffix Literal null MethodInvocation value MemberReference suffix endsWith BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator pos BinaryOperation - MethodInvocation value length MethodInvocation suffix length IfStatement BinaryOperation && BinaryOperation && BinaryOperation > MemberReference pos Literal 0 BinaryOperation != MethodInvocation suffix Literal 0 charAt Literal '.' BinaryOperation == MethodInvocation value BinaryOperation - MemberReference pos Literal 1 charAt Literal '.' BlockStatement StatementExpression MemberReference -- pos End StatementExpression Assignment MemberReference value MethodInvocation value Literal 0 MemberReference pos substring = End StatementExpression MethodInvocation MethodInvocation MemberReference property MemberReference value setNewProperty getProject ReferenceType Task",0
322,322,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.BufferedInputStream Import java.io.ByteArrayInputStream Import java.io.File Import java.io.InputStream Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStreamReader Import java.io.Reader Import java.util.Enumeration Import java.util.Properties Import java.util.Vector Import org.apache.tools.ant.Project Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Task Import org.apache.tools.ant.filters.util.ChainReaderHelper Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference Import org.apache.tools.ant.types.FilterChain ClassDeclaration Modifier public final /**
 * Load a file's contents as Ant properties.
 *
 * @since Ant 1.5
 * @ant.task category=""utility""
 */ LoadProperties FieldDeclaration /**
     * Source file
     */ Modifier private ReferenceType File VariableDeclarator srcFile Literal null FieldDeclaration /**
     * Resource
     */ Modifier private ReferenceType String VariableDeclarator resource Literal null FieldDeclaration /**
     * Classpath
     */ Modifier private ReferenceType Path VariableDeclarator classpath Literal null FieldDeclaration /**
     * Holds filterchains
     */ Modifier private final ReferenceType Vector VariableDeclarator filterChains ClassCreator ReferenceType Vector FieldDeclaration /**
     * Encoding to use for input; defaults to the platform's default encoding.
     */ Modifier private ReferenceType String VariableDeclarator encoding Literal null MethodDeclaration /**
     * Set the file to load.
     *
     * @param srcFile The new SrcFile value
     */ Modifier public final setSrcFile FormalParameter Modifier final ReferenceType File srcFile StatementExpression Assignment This MemberReference srcFile MemberReference srcFile = MethodDeclaration /**
     * Set the resource name of a property file to load.
     *
     * @param resource resource on classpath
     */ Modifier public setResource FormalParameter ReferenceType String resource StatementExpression Assignment This MemberReference resource MemberReference resource = MethodDeclaration /**
     * Encoding to use for input, defaults to the platform's default
     * encoding. <p>
     *
     * For a list of possible values see
     * <a href=""http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html"">
     * http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html
     * </a>.</p>
     *
     * @param encoding The new Encoding value
     */ Modifier public final setEncoding FormalParameter Modifier final ReferenceType String encoding StatementExpression Assignment This MemberReference encoding MemberReference encoding = MethodDeclaration /**
     * Set the classpath to use when looking up a resource.
     * @param classpath to add to any existing classpath
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath MemberReference classpath = BlockStatement StatementExpression This MemberReference classpath MethodInvocation MemberReference classpath append End MethodDeclaration /**
     * Add a classpath to use when looking up a resource.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement This MemberReference classpath MethodInvocation createPath MethodDeclaration /**
     * Set the classpath to use when looking up a resource,
     * given as reference to a &lt;path&gt; defined elsewhere
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration /**
     * get the classpath used by this <CODE>LoadProperties</CODE>.
     */ Modifier public ReferenceType Path getClasspath ReturnStatement MemberReference classpath MethodDeclaration /**
     * load Ant properties from the source file or resource
     *
     * @exception BuildException if something goes wrong with the build
     */ Modifier public final execute BuildException IfStatement BinaryOperation && BinaryOperation == MemberReference srcFile Literal null BinaryOperation == MemberReference resource Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""One of \""srcfile\"" or \""resource\"" is required."" End LocalVariableDeclaration ReferenceType BufferedInputStream VariableDeclarator bis Literal null IfStatement BinaryOperation != MemberReference srcFile Literal null BlockStatement IfStatement MethodInvocation ! srcFile exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Source file does not exist."" End IfStatement MethodInvocation ! srcFile isFile BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Source file is not a file."" End TryStatement StatementExpression Assignment MemberReference bis ClassCreator ReferenceType BufferedInputStream ClassCreator ReferenceType FileInputStream MemberReference srcFile = CatchClause CatchClauseParameter IOException eyeOhEx ThrowStatement ClassCreator ReferenceType BuildException MemberReference eyeOhEx BlockStatement LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator cL TernaryExpression BinaryOperation != MemberReference classpath Literal null MethodInvocation MethodInvocation MemberReference classpath createClassLoader getProject ClassReference MethodInvocation getClassLoader ReferenceType LoadProperties LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is TernaryExpression BinaryOperation == MemberReference cL Literal null MethodInvocation ClassLoader MemberReference resource getSystemResourceAsStream MethodInvocation cL MemberReference resource getResourceAsStream IfStatement BinaryOperation != MemberReference is Literal null BlockStatement StatementExpression Assignment MemberReference bis ClassCreator ReferenceType BufferedInputStream MemberReference is = BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Unable to find resource "" MemberReference resource MemberReference Project MSG_WARN log ReturnStatement End End LocalVariableDeclaration ReferenceType Reader VariableDeclarator instream Literal null LocalVariableDeclaration ReferenceType ByteArrayInputStream VariableDeclarator tis Literal null TryStatement IfStatement BinaryOperation == MemberReference encoding Literal null BlockStatement StatementExpression Assignment MemberReference instream ClassCreator ReferenceType InputStreamReader MemberReference bis = BlockStatement StatementExpression Assignment MemberReference instream ClassCreator ReferenceType InputStreamReader MemberReference bis MemberReference encoding = End LocalVariableDeclaration ReferenceType ChainReaderHelper VariableDeclarator crh ClassCreator ReferenceType ChainReaderHelper StatementExpression MethodInvocation crh MemberReference instream setPrimaryReader StatementExpression MethodInvocation crh MemberReference filterChains setFilterChains StatementExpression MethodInvocation crh MethodInvocation getProject setProject StatementExpression Assignment MemberReference instream MethodInvocation crh getAssembledReader = LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation crh MemberReference instream readFully IfStatement BinaryOperation != MemberReference text Literal null BlockStatement IfStatement MethodInvocation ! text Literal ""\n"" endsWith BlockStatement StatementExpression Assignment MemberReference text BinaryOperation + MemberReference text Literal ""\n"" = End IfStatement BinaryOperation == MemberReference encoding Literal null BlockStatement StatementExpression Assignment MemberReference tis ClassCreator ReferenceType ByteArrayInputStream MethodInvocation text getBytes = BlockStatement StatementExpression Assignment MemberReference tis ClassCreator ReferenceType ByteArrayInputStream MethodInvocation text MemberReference encoding getBytes = End LocalVariableDeclaration Modifier final ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties StatementExpression MethodInvocation props MemberReference tis load LocalVariableDeclaration ReferenceType Property VariableDeclarator propertyTask Cast ReferenceType Property MethodInvocation MethodInvocation Literal ""property"" createTask getProject StatementExpression MethodInvocation propertyTask MethodInvocation getTaskName setTaskName StatementExpression MethodInvocation propertyTask MemberReference props addProperties End CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message BinaryOperation + Literal ""Unable to load file: "" MethodInvocation ioe toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference message MemberReference ioe MethodInvocation getLocation CatchClause CatchClauseParameter BuildException be ThrowStatement MemberReference be TryStatement IfStatement BinaryOperation != MemberReference bis Literal null BlockStatement StatementExpression MethodInvocation bis close End CatchClause CatchClauseParameter IOException ioex TryStatement IfStatement BinaryOperation != MemberReference tis Literal null BlockStatement StatementExpression MethodInvocation tis close End CatchClause CatchClauseParameter IOException ioex MethodDeclaration /**
     * Adds a FilterChain.
     */ Modifier public final addFilterChain FormalParameter ReferenceType FilterChain filter StatementExpression MethodInvocation filterChains MemberReference filter addElement ReferenceType Task",0
457,457,,0
514,514,,0
399,399,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import java.io.File Import java.util.StringTokenizer Import java.util.Vector Import java.util.ArrayList Import java.util.List Import java.util.ListIterator Import java.util.LinkedList Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.ProjectComponent Import org.apache.tools.ant.util.StringUtils ClassDeclaration Modifier public /**
 * Commandline objects help handling command lines specifying processes to
 * execute.
 *
 * The class can be used to define a command line as nested elements or as a
 * helper to define a command line by an application.
 * <p>
 * <code>
 * &lt;someelement&gt;<br>
 * &nbsp;&nbsp;&lt;acommandline executable=""/executable/to/run""&gt;<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;argument value=""argument 1"" /&gt;<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;argument line=""argument_1 argument_2 argument_3"" /&gt;<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;argument value=""argument 4"" /&gt;<br>
 * &nbsp;&nbsp;&lt;/acommandline&gt;<br>
 * &lt;/someelement&gt;<br>
 * </code>
 * The element <code>someelement</code> must provide a method
 * <code>createAcommandline</code> which returns an instance of this class.
 *
 */ Commandline FieldDeclaration /**
     * The arguments of the command
     */ Modifier private ReferenceType Vector VariableDeclarator arguments ClassCreator ReferenceType Vector FieldDeclaration /**
     * the program to execute
     */ Modifier private ReferenceType String VariableDeclarator executable Literal null FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DISCLAIMER BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference StringUtils LINE_SEP Literal ""The \' characters around the executable and arguments are"" MemberReference StringUtils LINE_SEP Literal ""not part of the command."" MemberReference StringUtils LINE_SEP ConstructorDeclaration Modifier public /**
     * create a command line from a string
     * @param toProcess the line: the first element becomes the executable, the rest
     * the arguments
     */ Commandline FormalParameter ReferenceType String toProcess StatementExpression SuperConstructorInvocation LocalVariableDeclaration ReferenceType String VariableDeclarator tmp MethodInvocation MemberReference toProcess translateCommandline IfStatement BinaryOperation && BinaryOperation != MemberReference tmp Literal null BinaryOperation > MemberReference tmp length Literal 0 BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector Literal 0 tmp setExecutable ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference tmp length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i tmp setValue createArgument End End ConstructorDeclaration Modifier public /**
     *  Create an empty command line
     */ Commandline StatementExpression SuperConstructorInvocation ClassDeclaration Modifier public static /**
     * Used for nested xml command line definitions.
     */ Argument FieldDeclaration Modifier private ReferenceType String VariableDeclarator parts MethodDeclaration /**
         * Sets a single commandline argument.
         *
         * @param value a single commandline argument.
         */ Modifier public setValue FormalParameter ReferenceType String value StatementExpression Assignment MemberReference parts ArrayCreator ReferenceType String ArrayInitializer MemberReference value = MethodDeclaration /**
         * Line to split into several commandline arguments.
         *
         * @param line line to split into several commandline arguments
         */ Modifier public setLine FormalParameter ReferenceType String line IfStatement BinaryOperation == MemberReference line Literal null BlockStatement ReturnStatement End StatementExpression Assignment MemberReference parts MethodInvocation MemberReference line translateCommandline = MethodDeclaration /**
         * Sets a single commandline argument and treats it like a
         * PATH - ensures the right separator for the local platform
         * is used.
         *
         * @param value a single commandline argument.
         */ Modifier public setPath FormalParameter ReferenceType Path value StatementExpression Assignment MemberReference parts ArrayCreator ReferenceType String ArrayInitializer MethodInvocation value toString = MethodDeclaration /**
         * Sets a single commandline argument from a reference to a
         * path - ensures the right separator for the local platform
         * is used.
         *
         * @param value a single commandline argument.
         */ Modifier public setPathref FormalParameter ReferenceType Reference value LocalVariableDeclaration ReferenceType Path VariableDeclarator p ClassCreator ReferenceType Path MethodInvocation getProject StatementExpression MethodInvocation p MemberReference value setRefid StatementExpression Assignment MemberReference parts ArrayCreator ReferenceType String ArrayInitializer MethodInvocation p toString = MethodDeclaration /**
         * Sets a single commandline argument to the absolute filename
         * of the given file.
         *
         * @param value a single commandline argument.
         */ Modifier public setFile FormalParameter ReferenceType File value StatementExpression Assignment MemberReference parts ArrayCreator ReferenceType String ArrayInitializer MethodInvocation value getAbsolutePath = MethodDeclaration /**
         * Returns the parts this Argument consists of.
         */ Modifier public ReferenceType String getParts ReturnStatement MemberReference parts ReferenceType ProjectComponent ClassDeclaration Modifier public /**
     * Class to keep track of the position of an Argument.
     <p>This class is there to support the srcfile and targetfile
     elements of &lt;execon&gt; and &lt;transform&gt; - don't know
     whether there might be additional use cases.</p> --SB
     */ Marker FieldDeclaration Modifier private BasicType int VariableDeclarator position FieldDeclaration Modifier private BasicType int VariableDeclarator realPos Literal - 1 ConstructorDeclaration Marker FormalParameter BasicType int position StatementExpression Assignment This MemberReference position MemberReference position = MethodDeclaration /**
         * Return the number of arguments that preceeded this marker.
         *
         * <p>The name of the executable - if set - is counted as the
         * very first argument.</p>
         */ Modifier public BasicType int getPosition IfStatement BinaryOperation == MemberReference realPos Literal - 1 BlockStatement StatementExpression Assignment MemberReference realPos TernaryExpression BinaryOperation == MemberReference executable Literal null Literal 0 Literal 1 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference position MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Argument VariableDeclarator arg Cast ReferenceType Argument MethodInvocation arguments MemberReference i elementAt StatementExpression Assignment MemberReference realPos MethodInvocation arg MemberReference length getParts += End End ReturnStatement MemberReference realPos MethodDeclaration /**
     * Creates an argument object.
     *
     * <p>Each commandline object has at most one instance of the
     * argument class.  This method calls
     * <code>this.createArgument(false)</code>.</p>
     *
     * @see #createArgument(boolean)
     * @return the argument object.
     */ Modifier public ReferenceType Argument createArgument ReturnStatement This MethodInvocation Literal false createArgument MethodDeclaration /**
     * Creates an argument object and adds it to our list of args.
     *
     * <p>Each commandline object has at most one instance of the
     * argument class.</p>
     *
     * @param insertAtStart if true, the argument is inserted at the
     * beginning of the list of args, otherwise it is appended.
     */ Modifier public ReferenceType Argument createArgument FormalParameter BasicType boolean insertAtStart LocalVariableDeclaration ReferenceType Argument VariableDeclarator argument ClassCreator ReferenceType Argument IfStatement MemberReference insertAtStart BlockStatement StatementExpression MethodInvocation arguments MemberReference argument Literal 0 insertElementAt BlockStatement StatementExpression MethodInvocation arguments MemberReference argument addElement End ReturnStatement MemberReference argument MethodDeclaration /**
     * Sets the executable to run. All file separators in the string
     * are converted to the platform specific value
     */ Modifier public setExecutable FormalParameter ReferenceType String executable IfStatement BinaryOperation || BinaryOperation == MemberReference executable Literal null BinaryOperation == MethodInvocation executable length Literal 0 BlockStatement ReturnStatement End StatementExpression Assignment This MemberReference executable MethodInvocation executable MethodInvocation Literal '\\' MemberReference File separatorChar replace Literal '/' MemberReference File separatorChar replace = MethodDeclaration /**
     * get the executable
     * @return the program to run -null if not yet set
     */ Modifier public ReferenceType String getExecutable ReturnStatement MemberReference executable MethodDeclaration /**
     * append the arguments to the existing command
     * @param line an array of arguments to append
     */ Modifier public addArguments FormalParameter ReferenceType String line ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference line length MemberReference ++ i BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference ArraySelector MemberReference i line setValue createArgument End MethodDeclaration /**
     * Returns the executable and all defined arguments.
     */ Modifier public ReferenceType String getCommandline LocalVariableDeclaration ReferenceType List VariableDeclarator commands ClassCreator ReferenceType LinkedList LocalVariableDeclaration ReferenceType ListIterator VariableDeclarator list MethodInvocation commands listIterator StatementExpression MethodInvocation MemberReference list addCommandToList LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator result ArrayCreator ReferenceType String MethodInvocation commands size ReturnStatement Cast ReferenceType String MethodInvocation commands MemberReference result toArray MethodDeclaration /**
     * add the entire command, including (optional) executable to a list
     * @param list
     * @since Ant 1.6
     */ Modifier public addCommandToList FormalParameter ReferenceType ListIterator list IfStatement BinaryOperation != MemberReference executable Literal null BlockStatement StatementExpression MethodInvocation list MemberReference executable add End StatementExpression MethodInvocation MemberReference list addArgumentsToList MethodDeclaration /**
     * Returns all arguments defined by <code>addLine</code>,
     * <code>addValue</code> or the argument object.
     */ Modifier public ReferenceType String getArguments LocalVariableDeclaration ReferenceType List VariableDeclarator result ClassCreator ReferenceType ArrayList BinaryOperation * MethodInvocation arguments size Literal 2 StatementExpression MethodInvocation MethodInvocation result listIterator addArgumentsToList LocalVariableDeclaration ReferenceType String VariableDeclarator res ArrayCreator ReferenceType String MethodInvocation result size ReturnStatement Cast ReferenceType String MethodInvocation result MemberReference res toArray MethodDeclaration /**
     * append all the arguments to the tail of a supplied list
     * @param list
     * @since Ant 1.6
     */ Modifier public addArgumentsToList FormalParameter ReferenceType ListIterator list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation arguments size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Argument VariableDeclarator arg Cast ReferenceType Argument MethodInvocation arguments MemberReference i elementAt LocalVariableDeclaration ReferenceType String VariableDeclarator s MethodInvocation arg getParts IfStatement BinaryOperation != MemberReference s Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference s length MemberReference ++ j BlockStatement StatementExpression MethodInvocation list MemberReference ArraySelector MemberReference j s add End End End MethodDeclaration /**
     * stringify operator returns the command line as a string
     * @return the command line
     */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation MethodInvocation getCommandline toString MethodDeclaration /**
     * Put quotes around the given String if necessary.
     *
     * <p>If the argument doesn't include spaces or quotes, return it
     * as is. If it contains double quotes, use single quotes - else
     * surround the argument by double quotes.</p>
     *
     * @exception BuildException if the argument contains both, single
     *                           and double quotes.
     */ Modifier public static ReferenceType String quoteArgument FormalParameter ReferenceType String argument IfStatement BinaryOperation > MethodInvocation argument Literal ""\"""" indexOf Literal - 1 BlockStatement IfStatement BinaryOperation > MethodInvocation argument Literal ""\'"" indexOf Literal - 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Can\'t handle single and double"" Literal "" quotes in same argument"" BlockStatement ReturnStatement BinaryOperation + BinaryOperation + Literal '\'' MemberReference argument Literal '\'' End IfStatement BinaryOperation || BinaryOperation > MethodInvocation argument Literal ""\'"" indexOf Literal - 1 BinaryOperation > MethodInvocation argument Literal "" "" indexOf Literal - 1 BlockStatement ReturnStatement BinaryOperation + BinaryOperation + Literal '\""' MemberReference argument Literal '\""' BlockStatement ReturnStatement MemberReference argument End End MethodDeclaration /**
     * Quotes the parts of the given array in way that makes them
     * usable as command line arguments.
     * @return empty string for null or no command, else every argument split
     * by spaces and quoted by quoting rules
     */ Modifier public static ReferenceType String toString FormalParameter ReferenceType String line IfStatement BinaryOperation || BinaryOperation == MemberReference line Literal null BinaryOperation == MemberReference line length Literal 0 BlockStatement ReturnStatement Literal """" End LocalVariableDeclaration Modifier final ReferenceType StringBuffer VariableDeclarator result ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference line length MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation result Literal ' ' append End StatementExpression MethodInvocation result MethodInvocation MemberReference ArraySelector MemberReference i line quoteArgument append End ReturnStatement MethodInvocation result toString MethodDeclaration /**
     * crack a command line
     * @param toProcess the command line to process
     * @return the command line broken into strings.
     * An empty or null toProcess parameter results in a zero sized array
     */ Modifier public static ReferenceType String translateCommandline FormalParameter ReferenceType String toProcess IfStatement BinaryOperation || BinaryOperation == MemberReference toProcess Literal null BinaryOperation == MethodInvocation toProcess length Literal 0 BlockStatement ReturnStatement ArrayCreator ReferenceType String Literal 0 End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator normal Literal 0 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator inQuote Literal 1 LocalVariableDeclaration Modifier final BasicType int VariableDeclarator inDoubleQuote Literal 2 LocalVariableDeclaration BasicType int VariableDeclarator state MemberReference normal LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference toProcess Literal ""\""\' "" Literal true LocalVariableDeclaration ReferenceType Vector VariableDeclarator v ClassCreator ReferenceType Vector LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator current ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType boolean VariableDeclarator lastTokenHasBeenQuoted Literal false WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator nextTok MethodInvocation tok nextToken SwitchStatement MemberReference state SwitchStatementCase inQuote IfStatement Literal MethodInvocation MemberReference nextTok equals ""\'"" BlockStatement StatementExpression Assignment MemberReference lastTokenHasBeenQuoted Literal true = StatementExpression Assignment MemberReference state MemberReference normal = BlockStatement StatementExpression MethodInvocation current MemberReference nextTok append End BreakStatement SwitchStatementCase inDoubleQuote IfStatement Literal MethodInvocation MemberReference nextTok equals ""\"""" BlockStatement StatementExpression Assignment MemberReference lastTokenHasBeenQuoted Literal true = StatementExpression Assignment MemberReference state MemberReference normal = BlockStatement StatementExpression MethodInvocation current MemberReference nextTok append End BreakStatement SwitchStatementCase IfStatement Literal MethodInvocation MemberReference nextTok equals ""\'"" BlockStatement StatementExpression Assignment MemberReference state MemberReference inQuote = IfStatement Literal MethodInvocation MemberReference nextTok equals ""\"""" BlockStatement StatementExpression Assignment MemberReference state MemberReference inDoubleQuote = IfStatement Literal MethodInvocation MemberReference nextTok equals "" "" BlockStatement IfStatement BinaryOperation || MemberReference lastTokenHasBeenQuoted BinaryOperation != MethodInvocation current length Literal 0 BlockStatement StatementExpression MethodInvocation v MethodInvocation current toString addElement StatementExpression Assignment MemberReference current ClassCreator ReferenceType StringBuffer = End BlockStatement StatementExpression MethodInvocation current MemberReference nextTok append End End End StatementExpression Assignment MemberReference lastTokenHasBeenQuoted Literal false = BreakStatement End End IfStatement BinaryOperation || MemberReference lastTokenHasBeenQuoted BinaryOperation != MethodInvocation current length Literal 0 BlockStatement StatementExpression MethodInvocation v MethodInvocation current toString addElement End IfStatement BinaryOperation || BinaryOperation == MemberReference state MemberReference inQuote BinaryOperation == MemberReference state MemberReference inDoubleQuote BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""unbalanced quotes in "" MemberReference toProcess End LocalVariableDeclaration ReferenceType String VariableDeclarator args ArrayCreator ReferenceType String MethodInvocation v size StatementExpression MethodInvocation v MemberReference args copyInto ReturnStatement MemberReference args MethodDeclaration /**
     * size operator. This actually creates the command line, so it is not
     * a zero cost operation.
     * @return number of elements in the command, including the executable
     */ Modifier public BasicType int size ReturnStatement MethodInvocation MemberReference length getCommandline MethodDeclaration /**
     * Generate a deep clone of the contained object.
     * @return a clone of the contained object
     */ Modifier public ReferenceType Object clone TryStatement LocalVariableDeclaration ReferenceType Commandline VariableDeclarator c Cast ReferenceType Commandline SuperMethodInvocation clone StatementExpression Assignment MemberReference c arguments Cast ReferenceType Vector MethodInvocation arguments clone = ReturnStatement MemberReference c CatchClause CatchClauseParameter CloneNotSupportedException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * Clear out the whole command line.  */ Modifier public clear StatementExpression Assignment MemberReference executable Literal null = StatementExpression MethodInvocation arguments removeAllElements MethodDeclaration /**
     * Clear out the arguments but leave the executable in place for
     * another operation.
     */ Modifier public clearArgs StatementExpression MethodInvocation arguments removeAllElements MethodDeclaration /**
     * Return a marker.
     *
     * <p>This marker can be used to locate a position on the
     * commandline - to insert something for example - when all
     * parameters have been set.</p>
     */ Modifier public ReferenceType Marker createMarker ReturnStatement ClassCreator ReferenceType Marker MethodInvocation arguments size MethodDeclaration /**
     * Returns a String that describes the command and arguments
     * suitable for verbose output before a call to
     * <code>Runtime.exec(String[])<code>
     *
     * @since Ant 1.5
     */ Modifier public ReferenceType String describeCommand ReturnStatement MethodInvocation This describeCommand MethodDeclaration /**
     * Returns a String that describes the arguments suitable for
     * verbose output before a call to
     * <code>Runtime.exec(String[])<code>
     *
     * @since Ant 1.5
     */ Modifier public ReferenceType String describeArguments ReturnStatement MethodInvocation This describeArguments MethodDeclaration /**
     * Returns a String that describes the command and arguments
     * suitable for verbose output before a call to
     * <code>Runtime.exec(String[])<code>
     *
     * @since Ant 1.5
     */ Modifier public static ReferenceType String describeCommand FormalParameter ReferenceType Commandline line ReturnStatement MethodInvocation MethodInvocation line getCommandline describeCommand MethodDeclaration /**
     * Returns a String that describes the arguments suitable for
     * verbose output before a call to
     * <code>Runtime.exec(String[])<code>
     *
     * @since Ant 1.5
     */ Modifier public static ReferenceType String describeArguments FormalParameter ReferenceType Commandline line ReturnStatement MethodInvocation MethodInvocation line getArguments describeArguments MethodDeclaration /**
     * Returns a String that describes the command and arguments
     * suitable for verbose output before a call to
     * <code>Runtime.exec(String[])<code>.
     *
     * <p>This method assumes that the first entry in the array is the
     * executable to run.</p>
     *
     * @since Ant 1.5
     */ Modifier public static ReferenceType String describeCommand FormalParameter ReferenceType String args IfStatement BinaryOperation || BinaryOperation == MemberReference args Literal null BinaryOperation == MemberReference args length Literal 0 BlockStatement ReturnStatement Literal """" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer Literal ""Executing \'"" StatementExpression MethodInvocation buf MemberReference ArraySelector Literal 0 args append StatementExpression MethodInvocation buf Literal ""\'"" append IfStatement BinaryOperation > MemberReference args length Literal 0 BlockStatement StatementExpression MethodInvocation buf Literal "" with "" append StatementExpression MethodInvocation buf MethodInvocation MemberReference args Literal 1 describeArguments append BlockStatement StatementExpression MethodInvocation buf MemberReference DISCLAIMER append End ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * Returns a String that describes the arguments suitable for
     * verbose output before a call to
     * <code>Runtime.exec(String[])<code>
     *
     * @since Ant 1.5
     */ Modifier public static ReferenceType String describeArguments FormalParameter ReferenceType String args ReturnStatement MethodInvocation MemberReference args Literal 0 describeArguments MethodDeclaration /**
     * Returns a String that describes the arguments suitable for
     * verbose output before a call to
     * <code>Runtime.exec(String[])<code>
     *
     * @param offset ignore entries before this index
     *
     * @since Ant 1.5
     */ Modifier protected static ReferenceType String describeArguments FormalParameter ReferenceType String args FormalParameter BasicType int offset IfStatement BinaryOperation || BinaryOperation == MemberReference args Literal null BinaryOperation <= MemberReference args length MemberReference offset BlockStatement ReturnStatement Literal """" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer Literal ""argument"" IfStatement BinaryOperation > MemberReference args length MemberReference offset BlockStatement StatementExpression MethodInvocation buf Literal ""s"" append End StatementExpression MethodInvocation buf MethodInvocation MemberReference StringUtils LINE_SEP append Literal "":"" append ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference offset BinaryOperation < MemberReference i MemberReference args length MemberReference ++ i BlockStatement StatementExpression MethodInvocation buf MethodInvocation MemberReference ArraySelector MemberReference i args append MethodInvocation Literal ""\'"" append MethodInvocation MemberReference StringUtils LINE_SEP append Literal ""\'"" append End StatementExpression MethodInvocation buf MemberReference DISCLAIMER append ReturnStatement MethodInvocation buf toString ReferenceType Cloneable",0
130,130,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ide ClassDeclaration Modifier public /**
 * This is only there for backward compatibility with the default task list
 * and will be removed soon
 *
 * @ant.task ignore=""true""
 */ VAJLoadProjects ReferenceType VAJLoad",0
204,204,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.net Import java.lang.reflect.InvocationTargetException Import java.lang.reflect.Method Import java.util.Properties Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.util.JavaEnvUtils ClassDeclaration Modifier public /**
 * Sets Java's web proxy properties, so that tasks and code run in
 * the same JVM can have through-the-firewall access to remote web sites,
 * and remote ftp sites.
 * You can nominate an http and ftp proxy, or a socks server, reset the server
 * settings, or do nothing at all.
 * <p>
 * Examples
 * <pre>&lt;setproxy/&gt;</pre>
 * do nothing
 * <pre>&lt;setproxy proxyhost=""firewall""/&gt;</pre>
 * set the proxy to firewall:80
 * <pre>&lt;setproxy proxyhost=""firewall"" proxyport=""81""/&gt;</pre>
 * set the proxy to firewall:81
 * <pre>&lt;setproxy proxyhost=""""/&gt;</pre>
 * stop using the http proxy; don't change the socks settings
 * <pre>&lt;setproxy socksproxyhost=""socksy""/&gt;</pre>
 * use socks via socksy:1080
 * <pre>&lt;setproxy socksproxyhost=""""/&gt;</pre>
 * stop using the socks server.
 * <p>
 * You can set a username and password for http with the <tt>proxyHost</tt>
 * and <tt>proxyPassword</tt> attributes. On Java1.4 and above these can also be
 * used against SOCKS5 servers.
 * </p>
 * @see <a href=""http://java.sun.com/j2se/1.4/docs/guide/net/properties.html"">
 *  java 1.4 network property list</a>
  *@since       Ant 1.5
 * @ant.task category=""network""
 */ SetProxy FieldDeclaration /**
     * proxy details
     */ Modifier protected ReferenceType String VariableDeclarator proxyHost Literal null FieldDeclaration /**
     * name of proxy port
     */ Modifier protected BasicType int VariableDeclarator proxyPort Literal 80 FieldDeclaration /**
     * socks host.
     */ Modifier private ReferenceType String VariableDeclarator socksProxyHost Literal null FieldDeclaration /**
     * Socks proxy port. Default is 1080.
     */ Modifier private BasicType int VariableDeclarator socksProxyPort Literal 1080 FieldDeclaration /**
     * list of non proxy hosts
     */ Modifier private ReferenceType String VariableDeclarator nonProxyHosts Literal null FieldDeclaration /**
     * user for http only
     */ Modifier private ReferenceType String VariableDeclarator proxyUser Literal null FieldDeclaration /**
     * password for http only
     */ Modifier private ReferenceType String VariableDeclarator proxyPassword Literal null MethodDeclaration /**
     * the HTTP/ftp proxy host. Set this to """" for the http proxy
     * option to be disabled
     *
     * @param hostname the new proxy hostname
     */ Modifier public setProxyHost FormalParameter ReferenceType String hostname StatementExpression Assignment MemberReference proxyHost MemberReference hostname = MethodDeclaration /**
     * the HTTP/ftp proxy port number; default is 80
     *
     * @param port port number of the proxy
     */ Modifier public setProxyPort FormalParameter BasicType int port StatementExpression Assignment MemberReference proxyPort MemberReference port = MethodDeclaration /**
     * The name of a Socks server. Set to """" to turn socks
     * proxying off.
     *
     * @param host The new SocksProxyHost value
     */ Modifier public setSocksProxyHost FormalParameter ReferenceType String host StatementExpression Assignment This MemberReference socksProxyHost MemberReference host = MethodDeclaration /**
     * Set the ProxyPort for socks connections. The default value is 1080
     *
     * @param port The new SocksProxyPort value
     */ Modifier public setSocksProxyPort FormalParameter BasicType int port StatementExpression Assignment This MemberReference socksProxyPort MemberReference port = MethodDeclaration /**
     * A list of hosts to bypass the proxy on. These should be separated
     * with the vertical bar character '|'. Only in Java 1.4 does ftp use
     * this list.
     * e.g. fozbot.corp.sun.com|*.eng.sun.com
     * @param nonProxyHosts lists of hosts to talk direct to
     */ Modifier public setNonProxyHosts FormalParameter ReferenceType String nonProxyHosts StatementExpression Assignment This MemberReference nonProxyHosts MemberReference nonProxyHosts = MethodDeclaration /**
     * set the proxy user. Probably requires a password to accompany this
     * setting. Default=""""
     * @param proxyUser username
     * @since Ant1.6
     */ Modifier public setProxyUser FormalParameter ReferenceType String proxyUser StatementExpression Assignment This MemberReference proxyUser MemberReference proxyUser = MethodDeclaration /**
     * Set the password for the proxy. Used only if the proxyUser is set.
     * @param proxyPassword password to go with the username
     * @since Ant1.6
     */ Modifier public setProxyPassword FormalParameter ReferenceType String proxyPassword StatementExpression Assignment This MemberReference proxyPassword MemberReference proxyPassword = MethodDeclaration /**
     * if the proxy port and host settings are not null, then the settings
     * get applied these settings last beyond the life of the object and
     * apply to all network connections
     * Relevant docs: buglist #4183340
     */ Modifier public applyWebProxySettings LocalVariableDeclaration BasicType boolean VariableDeclarator settingsChanged Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator enablingProxy Literal false LocalVariableDeclaration ReferenceType Properties VariableDeclarator sysprops MethodInvocation System getProperties IfStatement BinaryOperation != MemberReference proxyHost Literal null BlockStatement StatementExpression Assignment MemberReference settingsChanged Literal true = IfStatement BinaryOperation != MethodInvocation proxyHost length Literal 0 BlockStatement StatementExpression MethodInvocation traceSettingInfo StatementExpression Assignment MemberReference enablingProxy Literal true = StatementExpression MethodInvocation sysprops Literal ""http.proxyHost"" MemberReference proxyHost put LocalVariableDeclaration ReferenceType String VariableDeclarator portString MethodInvocation Integer MemberReference proxyPort toString StatementExpression MethodInvocation sysprops Literal ""http.proxyPort"" MemberReference portString put StatementExpression MethodInvocation sysprops Literal ""https.proxyHost"" MemberReference proxyHost put StatementExpression MethodInvocation sysprops Literal ""https.proxyPort"" MemberReference portString put StatementExpression MethodInvocation sysprops Literal ""ftp.proxyHost"" MemberReference proxyHost put StatementExpression MethodInvocation sysprops Literal ""ftp.proxyPort"" MemberReference portString put IfStatement BinaryOperation != MemberReference nonProxyHosts Literal null BlockStatement StatementExpression MethodInvocation sysprops Literal ""http.nonProxyHosts"" MemberReference nonProxyHosts put StatementExpression MethodInvocation sysprops Literal ""https.nonProxyHosts"" MemberReference nonProxyHosts put StatementExpression MethodInvocation sysprops Literal ""ftp.nonProxyHosts"" MemberReference nonProxyHosts put End IfStatement BinaryOperation != MemberReference proxyUser Literal null BlockStatement StatementExpression MethodInvocation sysprops Literal ""http.proxyUser"" MemberReference proxyUser put StatementExpression MethodInvocation sysprops Literal ""http.proxyPassword"" MemberReference proxyPassword put End BlockStatement StatementExpression MethodInvocation Literal ""resetting http proxy"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation sysprops Literal ""http.proxyHost"" remove StatementExpression MethodInvocation sysprops Literal ""http.proxyPort"" remove StatementExpression MethodInvocation sysprops Literal ""http.proxyUser"" remove StatementExpression MethodInvocation sysprops Literal ""http.proxyPassword"" remove StatementExpression MethodInvocation sysprops Literal ""https.proxyHost"" remove StatementExpression MethodInvocation sysprops Literal ""https.proxyPort"" remove StatementExpression MethodInvocation sysprops Literal ""ftp.proxyHost"" remove StatementExpression MethodInvocation sysprops Literal ""ftp.proxyPort"" remove End End IfStatement BinaryOperation != MemberReference socksProxyHost Literal null BlockStatement StatementExpression Assignment MemberReference settingsChanged Literal true = IfStatement BinaryOperation != MethodInvocation socksProxyHost length Literal 0 BlockStatement StatementExpression Assignment MemberReference enablingProxy Literal true = StatementExpression MethodInvocation sysprops Literal ""socksProxyHost"" MemberReference socksProxyHost put StatementExpression MethodInvocation sysprops Literal ""socksProxyPort"" MethodInvocation Integer MemberReference socksProxyPort toString put IfStatement BinaryOperation != MemberReference proxyUser Literal null BlockStatement StatementExpression MethodInvocation sysprops Literal ""java.net.socks.username"" MemberReference proxyUser put StatementExpression MethodInvocation sysprops Literal ""java.net.socks.password"" MemberReference proxyPassword put End BlockStatement StatementExpression MethodInvocation Literal ""resetting socks proxy"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation sysprops Literal ""socksProxyHost"" remove StatementExpression MethodInvocation sysprops Literal ""socksProxyPort"" remove StatementExpression MethodInvocation sysprops Literal ""java.net.socks.username"" remove StatementExpression MethodInvocation sysprops Literal ""java.net.socks.password"" remove End End IfStatement BinaryOperation && MemberReference settingsChanged MethodInvocation JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_1 isJavaVersion BlockStatement StatementExpression MethodInvocation MemberReference enablingProxy legacyResetProxySettingsCall End MethodDeclaration /**
     * list out what is going on
     */ Modifier private traceSettingInfo StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Setting proxy to "" TernaryExpression BinaryOperation != MemberReference proxyHost Literal null MemberReference proxyHost Literal ""''"" Literal "":"" MemberReference proxyPort MemberReference Project MSG_VERBOSE log MethodDeclaration /**
     * make a call to sun.net.www.http.HttpClient.resetProperties();
     * this is only needed for java 1.1; reflection is used to stop the compiler
     * whining, and in case cleanroom JVMs dont have the class.
     * @return true if we did something
     */ Modifier protected BasicType boolean legacyResetProxySettingsCall FormalParameter BasicType boolean setProxy StatementExpression MethodInvocation System MethodInvocation Literal ""http.proxySet"" ClassCreator MethodInvocation toString ReferenceType Boolean MemberReference setProxy put getProperties TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator c MethodInvocation Class Literal ""sun.net.www.http.HttpClient"" forName LocalVariableDeclaration ReferenceType Method VariableDeclarator reset MethodInvocation c Literal ""resetProperties"" Literal null getMethod StatementExpression MethodInvocation reset Literal null Literal null invoke ReturnStatement Literal true CatchClause CatchClauseParameter ClassNotFoundException cnfe ReturnStatement Literal false CatchClause CatchClauseParameter NoSuchMethodException e ReturnStatement Literal false CatchClause CatchClauseParameter IllegalAccessException e ReturnStatement Literal false CatchClause CatchClauseParameter InvocationTargetException e ReturnStatement Literal false MethodDeclaration /**
     * Does the work.
     *
     * @exception BuildException thrown in unrecoverable error.
     */ Modifier public execute BuildException StatementExpression MethodInvocation applyWebProxySettings ReferenceType Task",0
112,112,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.FileOutputStream Import java.io.IOException Import java.io.PrintStream Import java.lang.reflect.Method Import java.util.Enumeration Import java.util.Hashtable Import java.util.Iterator Import java.util.Vector Import java.util.Set Import java.util.HashSet Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.BuildListener Import org.apache.tools.ant.DefaultLogger Import org.apache.tools.ant.Project Import org.apache.tools.ant.ProjectComponent Import org.apache.tools.ant.ProjectHelper Import org.apache.tools.ant.Target Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.PropertySet Import org.apache.tools.ant.util.FileUtils ClassDeclaration Modifier public /**
 * Build a sub-project.
 *
 *  <pre>
 *  &lt;target name=&quot;foo&quot; depends=&quot;init&quot;&gt;
 *    &lt;ant antfile=&quot;build.xml&quot; target=&quot;bar&quot; &gt;
 *      &lt;property name=&quot;property1&quot; value=&quot;aaaaa&quot; /&gt;
 *      &lt;property name=&quot;foo&quot; value=&quot;baz&quot; /&gt;
 *    &lt;/ant&gt;</SPAN>
 *  &lt;/target&gt;</SPAN>
 *
 *  &lt;target name=&quot;bar&quot; depends=&quot;init&quot;&gt;
 *    &lt;echo message=&quot;prop is ${property1} ${foo}&quot; /&gt;
 *  &lt;/target&gt;
 * </pre>
 *
 *
 *
 * @since Ant 1.1
 *
 * @ant.task category=""control""
 */ Ant FieldDeclaration /** the basedir where is executed the build file */ Modifier private ReferenceType File VariableDeclarator dir Literal null FieldDeclaration /**
     * the build.xml file (can be absolute) in this case dir will be
     * ignored
     */ Modifier private ReferenceType String VariableDeclarator antFile Literal null FieldDeclaration /** the target to call if any */ Modifier private ReferenceType String VariableDeclarator target Literal null FieldDeclaration /** the output */ Modifier private ReferenceType String VariableDeclarator output Literal null FieldDeclaration /** should we inherit properties from the parent ? */ Modifier private BasicType boolean VariableDeclarator inheritAll Literal true FieldDeclaration /** should we inherit references from the parent ? */ Modifier private BasicType boolean VariableDeclarator inheritRefs Literal false FieldDeclaration /** the properties to pass to the new project */ Modifier private ReferenceType Vector VariableDeclarator properties ClassCreator ReferenceType Vector FieldDeclaration /** the references to pass to the new project */ Modifier private ReferenceType Vector VariableDeclarator references ClassCreator ReferenceType Vector FieldDeclaration /** the temporary project created to run the build file */ Modifier private ReferenceType Project VariableDeclarator newProject FieldDeclaration /** The stream to which output is to be written. */ Modifier private ReferenceType PrintStream VariableDeclarator out Literal null FieldDeclaration /** the sets of properties to pass to the new project */ Modifier private ReferenceType Vector VariableDeclarator propertySets ClassCreator ReferenceType Vector MethodDeclaration /**
     * If true, pass all properties to the new Ant project.
     * Defaults to true.
     * @param value if true pass all properties to the new Ant project.
     */ Modifier public setInheritAll FormalParameter BasicType boolean value StatementExpression Assignment MemberReference inheritAll MemberReference value = MethodDeclaration /**
     * If true, pass all references to the new Ant project.
     * Defaults to false.
     * @param value if true, pass all references to the new Ant project
     */ Modifier public setInheritRefs FormalParameter BasicType boolean value StatementExpression Assignment MemberReference inheritRefs MemberReference value = MethodDeclaration /**
     * Creates a Project instance for the project to call.
     */ Modifier public init StatementExpression Assignment MemberReference newProject ClassCreator ReferenceType Project = StatementExpression MethodInvocation newProject MethodInvocation MethodInvocation getDefaultInputStream getProject setDefaultInputStream StatementExpression MethodInvocation newProject setJavaVersionProperty MethodDeclaration /**
     * Called in execute or createProperty if newProject is null.
     *
     * <p>This can happen if the same instance of this task is run
     * twice as newProject is set to null at the end of execute (to
     * save memory and help the GC).</p>
     * <p>calls init() again</p>
     *
     */ Modifier private reinit StatementExpression MethodInvocation init MethodDeclaration /**
     * Attaches the build listeners of the current project to the new
     * project, configures a possible logfile, transfers task and
     * data-type definitions, transfers properties (either all or just
     * the ones specified as user properties to the current project,
     * depending on inheritall), transfers the input handler.
     */ Modifier private initializeProject StatementExpression MethodInvocation newProject MethodInvocation MethodInvocation getInputHandler getProject setInputHandler LocalVariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation getBuildListeners WhileStatement MethodInvocation iter hasNext BlockStatement StatementExpression MethodInvocation newProject Cast ReferenceType BuildListener MethodInvocation iter next addBuildListener End IfStatement BinaryOperation != MemberReference output Literal null BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator outfile Literal null IfStatement BinaryOperation != MemberReference dir Literal null BlockStatement StatementExpression Assignment MemberReference outfile MethodInvocation FileUtils MethodInvocation MemberReference dir MemberReference output resolveFile newFileUtils = BlockStatement StatementExpression Assignment MemberReference outfile MethodInvocation MethodInvocation MemberReference output resolveFile getProject = End TryStatement StatementExpression Assignment MemberReference out ClassCreator ReferenceType PrintStream ClassCreator ReferenceType FileOutputStream MemberReference outfile = LocalVariableDeclaration ReferenceType DefaultLogger VariableDeclarator logger ClassCreator ReferenceType DefaultLogger StatementExpression MethodInvocation logger MemberReference Project MSG_INFO setMessageOutputLevel StatementExpression MethodInvocation logger MemberReference out setOutputPrintStream StatementExpression MethodInvocation logger MemberReference out setErrorPrintStream StatementExpression MethodInvocation newProject MemberReference logger addBuildListener CatchClause CatchClauseParameter IOException ex StatementExpression MethodInvocation BinaryOperation + Literal ""Ant: Can't set output to "" MemberReference output log End StatementExpression MethodInvocation MethodInvocation MemberReference newProject initSubProject getProject StatementExpression MethodInvocation MethodInvocation MemberReference newProject copyUserProperties getProject IfStatement MemberReference ! inheritAll BlockStatement StatementExpression MethodInvocation newProject setSystemProperties BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation getProperties getProject addAlmostAll End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation propertySets elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType PropertySet VariableDeclarator ps Cast ReferenceType PropertySet MethodInvocation e nextElement StatementExpression MethodInvocation MethodInvocation ps getProperties addAlmostAll End MethodDeclaration /**
     * Pass output sent to System.out to the new project.
     *
     * @param output a line of output
     * @since Ant 1.5
     */ Modifier public handleOutput FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference newProject Literal null BlockStatement StatementExpression MethodInvocation newProject MemberReference output Literal false demuxOutput BlockStatement StatementExpression SuperMethodInvocation MemberReference output handleOutput End MethodDeclaration /**
     * Process input into the ant task
     *
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read
     *
     * @return the number of bytes read
     *
     * @exception IOException if the data cannot be read
     *
     * @see Task#handleInput(byte[], int, int)
     *
     * @since Ant 1.6
     */ Modifier public BasicType int handleInput FormalParameter BasicType byte buffer FormalParameter BasicType int offset FormalParameter BasicType int length IOException IfStatement BinaryOperation != MemberReference newProject Literal null BlockStatement ReturnStatement MethodInvocation newProject MemberReference buffer MemberReference offset MemberReference length demuxInput BlockStatement ReturnStatement SuperMethodInvocation MemberReference buffer MemberReference offset MemberReference length handleInput End MethodDeclaration /**
     * Pass output sent to System.out to the new project.
     *
     * @param output The output to log. Should not be <code>null</code>.
     *
     * @since Ant 1.5.2
     */ Modifier public handleFlush FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference newProject Literal null BlockStatement StatementExpression MethodInvocation newProject MemberReference output Literal false demuxFlush BlockStatement StatementExpression SuperMethodInvocation MemberReference output handleFlush End MethodDeclaration /**
     * Pass output sent to System.err to the new project.
     *
     * @param output The error output to log. Should not be <code>null</code>.
     *
     * @since Ant 1.5
     */ Modifier public handleErrorOutput FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference newProject Literal null BlockStatement StatementExpression MethodInvocation newProject MemberReference output Literal true demuxOutput BlockStatement StatementExpression SuperMethodInvocation MemberReference output handleErrorOutput End MethodDeclaration /**
     * Pass output sent to System.err to the new project.
     *
     * @param output The error output to log. Should not be <code>null</code>.
     *
     * @since Ant 1.5.2
     */ Modifier public handleErrorFlush FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference newProject Literal null BlockStatement StatementExpression MethodInvocation newProject MemberReference output Literal true demuxFlush BlockStatement StatementExpression SuperMethodInvocation MemberReference output handleErrorFlush End MethodDeclaration /**
     * Do the execution.
     * @throws BuildException if a target tries to call itself
     * probably also if a BuildException is thrown by the new project
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType File VariableDeclarator savedDir MemberReference dir LocalVariableDeclaration ReferenceType String VariableDeclarator savedAntFile MemberReference antFile LocalVariableDeclaration ReferenceType String VariableDeclarator savedTarget MemberReference target TryStatement IfStatement BinaryOperation == MemberReference newProject Literal null BlockStatement StatementExpression MethodInvocation reinit End IfStatement BinaryOperation && BinaryOperation == MemberReference dir Literal null MemberReference inheritAll BlockStatement StatementExpression Assignment MemberReference dir MethodInvocation MethodInvocation getBaseDir getProject = End StatementExpression MethodInvocation initializeProject IfStatement BinaryOperation != MemberReference dir Literal null BlockStatement StatementExpression MethodInvocation newProject MemberReference dir setBaseDir IfStatement BinaryOperation != MemberReference savedDir Literal null BlockStatement StatementExpression MethodInvocation newProject Literal ""basedir"" MethodInvocation dir getAbsolutePath setInheritedProperty End BlockStatement StatementExpression Assignment MemberReference dir MethodInvocation MethodInvocation getBaseDir getProject = End StatementExpression MethodInvocation overrideProperties IfStatement BinaryOperation == MemberReference antFile Literal null BlockStatement StatementExpression Assignment MemberReference antFile Literal ""build.xml"" = End LocalVariableDeclaration ReferenceType File VariableDeclarator file MethodInvocation FileUtils MethodInvocation MemberReference dir MemberReference antFile resolveFile newFileUtils StatementExpression Assignment MemberReference antFile MethodInvocation file getAbsolutePath = StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""calling target "" TernaryExpression BinaryOperation != MemberReference target Literal null MemberReference target Literal ""[default]"" Literal "" in build file "" MemberReference antFile MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation newProject Literal ""ant.file"" MemberReference antFile setUserProperty LocalVariableDeclaration ReferenceType String VariableDeclarator thisAntFile MethodInvocation MethodInvocation Literal ""ant.file"" getProperty getProject IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference thisAntFile Literal null MethodInvocation newProject MethodInvocation MethodInvocation MethodInvocation MemberReference thisAntFile resolveFile getProject equals MethodInvocation newProject Literal ""ant.file"" getProperty resolveFile BinaryOperation != MethodInvocation getOwningTarget Literal null BlockStatement IfStatement MethodInvocation MethodInvocation getName MethodInvocation Literal """" equals getOwningTarget BlockStatement IfStatement MethodInvocation MethodInvocation Literal ""antcall"" equals getTaskName BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""antcall must not be used at"" Literal "" the top level."" BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation getTaskName Literal "" task at the"" Literal "" top level must not invoke"" Literal "" its own build file."" End End End TryStatement StatementExpression MethodInvocation ProjectHelper MemberReference newProject ClassCreator ReferenceType File MemberReference antFile configureProject CatchClause CatchClauseParameter BuildException ex ThrowStatement MethodInvocation ProjectHelper MemberReference ex MethodInvocation getLocation addLocationToBuildException IfStatement BinaryOperation == MemberReference target Literal null BlockStatement StatementExpression Assignment MemberReference target MethodInvocation newProject getDefaultTarget = End IfStatement BinaryOperation && MethodInvocation newProject MethodInvocation MethodInvocation MethodInvocation Literal ""ant.file"" getProperty getProject equals Literal ""ant.file"" getProperty BinaryOperation != MethodInvocation getOwningTarget Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator owningTargetName MethodInvocation MethodInvocation getName getOwningTarget IfStatement MethodInvocation owningTargetName MemberReference target equals BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + MethodInvocation getTaskName Literal "" task calling "" Literal ""its own parent target."" BlockStatement LocalVariableDeclaration ReferenceType Target VariableDeclarator other Cast ReferenceType Target MethodInvocation MethodInvocation getTargets MethodInvocation MemberReference target get getProject IfStatement BinaryOperation && BinaryOperation != MemberReference other Literal null MethodInvocation other MemberReference owningTargetName dependsOn BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation getTaskName Literal "" task calling a target"" Literal "" that depends on"" Literal "" its parent target \'"" MemberReference owningTargetName Literal ""\'."" End End End StatementExpression MethodInvocation addReferences IfStatement BinaryOperation && BinaryOperation != MemberReference target Literal null Literal ! MethodInvocation MemberReference target equals """" BlockStatement LocalVariableDeclaration ReferenceType Throwable VariableDeclarator t Literal null TryStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Entering "" MemberReference antFile Literal ""..."" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation newProject fireSubBuildStarted StatementExpression MethodInvocation newProject MemberReference target executeTarget CatchClause CatchClauseParameter BuildException ex StatementExpression Assignment MemberReference t MethodInvocation ProjectHelper MemberReference ex MethodInvocation getLocation addLocationToBuildException = ThrowStatement Cast ReferenceType BuildException MemberReference t StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Exiting "" MemberReference antFile Literal ""."" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation newProject MemberReference t fireSubBuildFinished End StatementExpression Assignment MemberReference newProject Literal null = LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation properties elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator p Cast ReferenceType Property MethodInvocation e nextElement StatementExpression MethodInvocation p Literal null setProject End IfStatement BinaryOperation && BinaryOperation != MemberReference output Literal null BinaryOperation != MemberReference out Literal null BlockStatement TryStatement StatementExpression MethodInvocation out close CatchClause CatchClauseParameter Exception ex End StatementExpression Assignment MemberReference dir MemberReference savedDir = StatementExpression Assignment MemberReference antFile MemberReference savedAntFile = StatementExpression Assignment MemberReference target MemberReference savedTarget = MethodDeclaration /**
     * Override the properties in the new project with the one
     * explicitly defined as nested elements here.
     * @throws BuildException under unknown circumstances
     */ Modifier private overrideProperties BuildException LocalVariableDeclaration ReferenceType Set VariableDeclarator set ClassCreator ReferenceType HashSet ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i BinaryOperation - MethodInvocation properties size Literal 1 BinaryOperation >= MemberReference i Literal 0 MemberReference -- i BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator p Cast ReferenceType Property MethodInvocation properties MemberReference i get IfStatement BinaryOperation && BinaryOperation != MethodInvocation p getName Literal null MethodInvocation ! p MethodInvocation Literal """" equals getName BlockStatement IfStatement MethodInvocation set MethodInvocation p getName contains BlockStatement StatementExpression MethodInvocation properties MemberReference i remove BlockStatement StatementExpression MethodInvocation set MethodInvocation p getName add End End End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation properties elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Property VariableDeclarator p Cast ReferenceType Property MethodInvocation e nextElement StatementExpression MethodInvocation p MemberReference newProject setProject StatementExpression MethodInvocation p execute End StatementExpression MethodInvocation MethodInvocation MemberReference newProject copyInheritedProperties getProject MethodDeclaration /**
     * Add the references explicitly defined as nested elements to the
     * new project.  Also copy over all references that don't override
     * existing references in the new project if inheritrefs has been
     * requested.
     * @throws BuildException if a reference does not have a refid
     */ Modifier private addReferences BuildException LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator thisReferences Cast ReferenceType Hashtable MethodInvocation MethodInvocation getReferences MethodInvocation clone getProject LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator newReferences MethodInvocation newProject getReferences LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e IfStatement BinaryOperation > MethodInvocation references size Literal 0 BlockStatement ForStatement ForControl Assignment MemberReference e MethodInvocation references elements = MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Reference VariableDeclarator ref Cast ReferenceType Reference MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator refid MethodInvocation ref getRefId IfStatement BinaryOperation == MemberReference refid Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""the refid attribute is required"" Literal "" for reference elements"" End IfStatement MethodInvocation ! thisReferences MemberReference refid containsKey BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Parent project doesn't contain any reference '"" MemberReference refid Literal ""'"" MemberReference Project MSG_WARN log ContinueStatement End StatementExpression MethodInvocation thisReferences MemberReference refid remove LocalVariableDeclaration ReferenceType String VariableDeclarator toRefid MethodInvocation ref getToRefid IfStatement BinaryOperation == MemberReference toRefid Literal null BlockStatement StatementExpression Assignment MemberReference toRefid MemberReference refid = End StatementExpression MethodInvocation MemberReference refid MemberReference toRefid copyReference End End IfStatement MemberReference inheritRefs BlockStatement ForStatement ForControl Assignment MemberReference e MethodInvocation thisReferences keys = MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator key Cast ReferenceType String MethodInvocation e nextElement IfStatement MethodInvocation newReferences MemberReference key containsKey BlockStatement ContinueStatement End StatementExpression MethodInvocation MemberReference key MemberReference key copyReference End End MethodDeclaration /**
     * Try to clone and reconfigure the object referenced by oldkey in
     * the parent project and add it to the new project with the key
     * newkey.
     *
     * <p>If we cannot clone it, copy the referenced object itself and
     * keep our fingers crossed.</p>
     */ Modifier private copyReference FormalParameter ReferenceType String oldKey FormalParameter ReferenceType String newKey LocalVariableDeclaration ReferenceType Object VariableDeclarator orig MethodInvocation MethodInvocation MemberReference oldKey getReference getProject IfStatement BinaryOperation == MemberReference orig Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""No object referenced by "" MemberReference oldKey Literal "". Can't copy to "" MemberReference newKey MemberReference Project MSG_WARN log ReturnStatement End LocalVariableDeclaration ReferenceType Class VariableDeclarator c MethodInvocation orig getClass LocalVariableDeclaration ReferenceType Object VariableDeclarator copy MemberReference orig TryStatement LocalVariableDeclaration ReferenceType Method VariableDeclarator cloneM MethodInvocation c Literal ""clone"" ArrayCreator ReferenceType Class Literal 0 getMethod IfStatement BinaryOperation != MemberReference cloneM Literal null BlockStatement StatementExpression Assignment MemberReference copy MethodInvocation cloneM MemberReference orig ArrayCreator ReferenceType Object Literal 0 invoke = StatementExpression MethodInvocation BinaryOperation + Literal ""Adding clone of reference "" MemberReference oldKey MemberReference Project MSG_DEBUG log End CatchClause CatchClauseParameter Exception e IfStatement BinaryOperation instanceof MemberReference copy ReferenceType ProjectComponent BlockStatement StatementExpression Cast ReferenceType ProjectComponent MemberReference copy BlockStatement TryStatement LocalVariableDeclaration ReferenceType Method VariableDeclarator setProjectM MethodInvocation c Literal ""setProject"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType Project getMethod IfStatement BinaryOperation != MemberReference setProjectM Literal null BlockStatement StatementExpression MethodInvocation setProjectM MemberReference copy ArrayCreator ReferenceType Object ArrayInitializer MemberReference newProject invoke End CatchClause CatchClauseParameter NoSuchMethodException e CatchClause CatchClauseParameter Exception e2 LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + Literal ""Error setting new project instance for "" Literal ""reference with id "" MemberReference oldKey ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e2 MethodInvocation getLocation End StatementExpression MethodInvocation newProject MemberReference newKey MemberReference copy addReference MethodDeclaration /**
     * Copies all properties from the given table to the new project -
     * omitting those that have already been set in the new project as
     * well as properties named basedir or ant.file.
     * @param props properties to copy to the new project
     * @since Ant 1.6
     */ Modifier private addAlmostAll FormalParameter ReferenceType Hashtable props LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation props keys WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation e MethodInvocation toString nextElement IfStatement BinaryOperation || Literal MethodInvocation MemberReference key equals ""basedir"" Literal MethodInvocation MemberReference key equals ""ant.file"" BlockStatement ContinueStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation props MethodInvocation toString MemberReference key get IfStatement BinaryOperation == MethodInvocation newProject MemberReference key getProperty Literal null BlockStatement StatementExpression MethodInvocation newProject MemberReference key MemberReference value setNewProperty End End MethodDeclaration /**
     * The directory to use as a base directory for the new Ant project.
     * Defaults to the current project's basedir, unless inheritall
     * has been set to false, in which case it doesn't have a default
     * value. This will override the basedir setting of the called project.
     * @param d new directory
     */ Modifier public setDir FormalParameter ReferenceType File d StatementExpression Assignment This MemberReference dir MemberReference d = MethodDeclaration /**
     * The build file to use.
     * Defaults to ""build.xml"". This file is expected to be a filename relative
     * to the dir attribute given.
     * @param s build file to use
     */ Modifier public setAntfile FormalParameter ReferenceType String s StatementExpression Assignment This MemberReference antFile MemberReference s = MethodDeclaration /**
     * The target of the new Ant project to execute.
     * Defaults to the new project's default target.
     * @param s target to invoke
     */ Modifier public setTarget FormalParameter ReferenceType String s IfStatement MethodInvocation s Literal """" equals BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""target attribute must not be empty"" End StatementExpression Assignment This MemberReference target MemberReference s = MethodDeclaration /**
     * Filename to write the output to.
     * This is relative to the value of the dir attribute
     * if it has been set or to the base directory of the
     * current project otherwise.
     * @param s file to which the output should go to
     */ Modifier public setOutput FormalParameter ReferenceType String s StatementExpression Assignment This MemberReference output MemberReference s = MethodDeclaration /**
     * Property to pass to the new project.
     * The property is passed as a 'user property'
     * @return new property created
     */ Modifier public ReferenceType Property createProperty IfStatement BinaryOperation == MemberReference newProject Literal null BlockStatement StatementExpression MethodInvocation reinit End LocalVariableDeclaration ReferenceType Property VariableDeclarator p ClassCreator ReferenceType Property Literal true MethodInvocation getProject StatementExpression MethodInvocation p MemberReference newProject setProject StatementExpression MethodInvocation p Literal ""property"" setTaskName StatementExpression MethodInvocation properties MemberReference p addElement ReturnStatement MemberReference p MethodDeclaration /**
     * Reference element identifying a data type to carry
     * over to the new project.
     * @param r reference to add
     */ Modifier public addReference FormalParameter ReferenceType Reference r StatementExpression MethodInvocation references MemberReference r addElement MethodDeclaration /**
     * Set of properties to pass to the new project.
     *
     * @param ps property set to add
     * @since Ant 1.6
     */ Modifier public addPropertyset FormalParameter ReferenceType PropertySet ps StatementExpression MethodInvocation propertySets MemberReference ps addElement MethodDeclaration /**
     * @since Ant 1.6.2
     */ Modifier private ReferenceType Iterator getBuildListeners ReturnStatement MethodInvocation MethodInvocation getBuildListeners MethodInvocation iterator getProject ClassDeclaration Modifier public static /**
     * Helper class that implements the nested &lt;reference&gt;
     * element of &lt;ant&gt; and &lt;antcall&gt;.
     */ Reference ConstructorDeclaration Modifier public /** Creates a reference to be configured by Ant */ Reference StatementExpression SuperConstructorInvocation FieldDeclaration Modifier private ReferenceType String VariableDeclarator targetid Literal null MethodDeclaration /**
         * Set the id that this reference to be stored under in the
         * new project.
         *
         * @param targetid the id under which this reference will be passed to
         *        the new project */ Modifier public setToRefid FormalParameter ReferenceType String targetid StatementExpression Assignment This MemberReference targetid MemberReference targetid = MethodDeclaration /**
         * Get the id under which this reference will be stored in the new
         * project
         *
         * @return the id of the reference in the new project.
         */ Modifier public ReferenceType String getToRefid ReturnStatement MemberReference targetid ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType types ReferenceType Reference ReferenceType Task",0
184,184,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.File Import java.util.Hashtable Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * The deployment tool to add the jboss specific deployment descriptor to the ejb jar file.
 * Jboss only requires one additional file jboss.xml and does not require any additional
 * compilation.
 *
 * @version 1.0
 * @see EjbJar#createJboss
 */ JbossDeploymentTool FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator JBOSS_DD Literal ""jboss.xml"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator JBOSS_CMP10D Literal ""jaws.xml"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator JBOSS_CMP20D Literal ""jbosscmp-jdbc.xml"" FieldDeclaration /** Instance variable that stores the suffix for the jboss jarfile. */ Modifier private ReferenceType String VariableDeclarator jarSuffix Literal "".jar"" MethodDeclaration /**
     * Setter used to store the suffix for the generated JBoss jar file.
     * @param inString the string to use as the suffix.
     */ Modifier public setSuffix FormalParameter ReferenceType String inString StatementExpression Assignment MemberReference jarSuffix MemberReference inString = MethodDeclaration /**
     * Add any vendor specific files which should be included in the
     * EJB Jar.
     */ Modifier protected addVendorFiles FormalParameter ReferenceType Hashtable ejbFiles FormalParameter ReferenceType String ddPrefix LocalVariableDeclaration ReferenceType File VariableDeclarator jbossDD ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig BinaryOperation + MemberReference ddPrefix MemberReference JBOSS_DD IfStatement MethodInvocation jbossDD exists BlockStatement StatementExpression MethodInvocation ejbFiles BinaryOperation + MemberReference META_DIR MemberReference JBOSS_DD MemberReference jbossDD put BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Unable to locate jboss deployment descriptor. "" Literal ""It was expected to be in "" MethodInvocation jbossDD getPath MemberReference Project MSG_WARN log ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator descriptorFileName MemberReference JBOSS_CMP10D IfStatement MethodInvocation EjbJar.CMPVersion.CMP2_0 MethodInvocation MethodInvocation getCmpversion getParent equals BlockStatement StatementExpression Assignment MemberReference descriptorFileName MemberReference JBOSS_CMP20D = End LocalVariableDeclaration ReferenceType File VariableDeclarator jbossCMPD ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig BinaryOperation + MemberReference ddPrefix MemberReference descriptorFileName IfStatement MethodInvocation jbossCMPD exists BlockStatement StatementExpression MethodInvocation ejbFiles BinaryOperation + MemberReference META_DIR MemberReference descriptorFileName MemberReference jbossCMPD put BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Unable to locate jboss cmp descriptor. "" Literal ""It was expected to be in "" MethodInvocation jbossCMPD getPath MemberReference Project MSG_VERBOSE log ReturnStatement End MethodDeclaration /**
     * Get the vendor specific name of the Jar that will be output. The modification date
     * of this jar will be checked against the dependent bean classes.
     */ ReferenceType File getVendorOutputJarFile FormalParameter ReferenceType String baseName IfStatement BinaryOperation && BinaryOperation == MethodInvocation getDestDir Literal null BinaryOperation == MethodInvocation MethodInvocation getDestdir getParent Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""DestDir not specified"" End IfStatement BinaryOperation == MethodInvocation getDestDir Literal null BlockStatement ReturnStatement ClassCreator ReferenceType File MethodInvocation MethodInvocation getDestdir getParent BinaryOperation + MemberReference baseName MemberReference jarSuffix BlockStatement ReturnStatement ClassCreator ReferenceType File MethodInvocation getDestDir BinaryOperation + MemberReference baseName MemberReference jarSuffix End MethodDeclaration /**
     * Called to validate that the tool parameters have been configured.
     *
     * @throws BuildException If the Deployment Tool's configuration isn't
     *                        valid
     * @since ant 1.6
     */ Modifier public validateConfigured BuildException MethodDeclaration Modifier private ReferenceType EjbJar getParent ReturnStatement Cast ReferenceType EjbJar This MethodInvocation getTask ReferenceType GenericDeploymentTool",0
662,662,,0
376,376,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.taskdefs.ExecTask Import org.apache.tools.ant.taskdefs.Java Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference ClassDeclaration Modifier public /**
 * Generates a Borland Application Server 4.5 client JAR using as
 * input the EJB JAR file.
 *
 * Two mode are available: java mode (default) and fork mode. With the fork mode,
 * it is impossible to add classpath to the command line.
 *
 *
 * @ant.task name=""blgenclient"" category=""ejb""
 */ BorlandGenerateClient FieldDeclaration Modifier final static ReferenceType String VariableDeclarator JAVA_MODE Literal ""java"" FieldDeclaration Modifier final static ReferenceType String VariableDeclarator FORK_MODE Literal ""fork"" FieldDeclaration /** debug the generateclient task */ BasicType boolean VariableDeclarator debug Literal false FieldDeclaration /** hold the ejbjar file name */ ReferenceType File VariableDeclarator ejbjarfile Literal null FieldDeclaration /** hold the client jar file name */ ReferenceType File VariableDeclarator clientjarfile Literal null FieldDeclaration /** hold the classpath */ ReferenceType Path VariableDeclarator classpath FieldDeclaration /** hold the mode (java|fork) */ ReferenceType String VariableDeclarator mode MemberReference FORK_MODE FieldDeclaration /** hold the version */ BasicType int VariableDeclarator version MemberReference BorlandDeploymentTool BAS MethodDeclaration Modifier public setVersion FormalParameter BasicType int version StatementExpression Assignment This MemberReference version MemberReference version = MethodDeclaration /**
     * Command launching mode: java or fork.
     */ Modifier public setMode FormalParameter ReferenceType String s StatementExpression Assignment MemberReference mode MemberReference s = MethodDeclaration /**
     * If true, turn on the debug mode for each of the Borland tools launched.
     */ Modifier public setDebug FormalParameter BasicType boolean debug StatementExpression Assignment This MemberReference debug MemberReference debug = MethodDeclaration /**
     * EJB JAR file.
     */ Modifier public setEjbjar FormalParameter ReferenceType File ejbfile StatementExpression Assignment MemberReference ejbjarfile MemberReference ejbfile = MethodDeclaration /**
     * Client JAR file name.
     */ Modifier public setClientjar FormalParameter ReferenceType File clientjar StatementExpression Assignment MemberReference clientjarfile MemberReference clientjar = MethodDeclaration /**
     * Path to use for classpath.
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath MemberReference classpath = BlockStatement StatementExpression This MemberReference classpath MethodInvocation MemberReference classpath append End MethodDeclaration /**
     * Adds path to the classpath.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement This MemberReference classpath MethodInvocation createPath MethodDeclaration /**
     * Reference to existing path, to use as a classpath.
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration /**
     * Do the work.
     *
     * The work is actually done by creating a separate JVM to run a java task.
     *
     * @exception BuildException if something goes wrong with the build
     */ Modifier public execute BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference ejbjarfile Literal null MethodInvocation ejbjarfile isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""invalid ejb jar file."" End IfStatement BinaryOperation || BinaryOperation == MemberReference clientjarfile Literal null MethodInvocation clientjarfile isDirectory BlockStatement StatementExpression MethodInvocation Literal ""invalid or missing client jar file."" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType String VariableDeclarator ejbjarname MethodInvocation ejbjarfile getAbsolutePath LocalVariableDeclaration ReferenceType String VariableDeclarator clientname MethodInvocation ejbjarname Literal 0 MethodInvocation ejbjarname Literal ""."" lastIndexOf substring StatementExpression Assignment MemberReference clientname BinaryOperation + MemberReference clientname Literal ""client.jar"" = StatementExpression Assignment MemberReference clientjarfile ClassCreator ReferenceType File MemberReference clientname = End IfStatement BinaryOperation == MemberReference mode Literal null BlockStatement StatementExpression MethodInvocation Literal ""mode is null default mode  is java"" log StatementExpression MethodInvocation MemberReference JAVA_MODE setMode End IfStatement BinaryOperation || BinaryOperation == MemberReference version MemberReference BorlandDeploymentTool BES BinaryOperation == MemberReference version MemberReference BorlandDeploymentTool BAS BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""version "" MemberReference version Literal "" is not supported"" End StatementExpression MethodInvocation BinaryOperation + Literal ""client jar file is "" MemberReference clientjarfile log IfStatement MethodInvocation mode MemberReference FORK_MODE equalsIgnoreCase BlockStatement StatementExpression MethodInvocation executeFork BlockStatement StatementExpression MethodInvocation executeJava End MethodDeclaration /** launch the generate client using java api */ Modifier protected executeJava BuildException TryStatement IfStatement BinaryOperation == MemberReference version MemberReference BorlandDeploymentTool BES BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""java mode is supported only for "" Literal ""previous version <="" MemberReference BorlandDeploymentTool BAS End StatementExpression MethodInvocation Literal ""mode : java"" log LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType Java VariableDeclarator execTask Literal null StatementExpression Assignment MemberReference execTask Cast ReferenceType Java MethodInvocation MethodInvocation Literal ""java"" createTask getProject = StatementExpression MethodInvocation execTask ClassCreator ReferenceType File Literal ""."" setDir StatementExpression MethodInvocation execTask Literal ""com.inprise.server.commandline.EJBUtilities"" setClassname StatementExpression MethodInvocation execTask MethodInvocation classpath concatSystemClasspath setClasspath StatementExpression MethodInvocation execTask Literal true setFork StatementExpression MethodInvocation execTask MethodInvocation Literal ""generateclient"" setValue createArg IfStatement MemberReference debug BlockStatement StatementExpression MethodInvocation execTask MethodInvocation Literal ""-trace"" setValue createArg End StatementExpression MethodInvocation execTask MethodInvocation Literal ""-short"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-jarfile"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation ejbjarfile getAbsolutePath setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-single"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-clientjarfile"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation clientjarfile getAbsolutePath setValue createArg StatementExpression MethodInvocation Literal ""Calling EJBUtilities"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation execTask execute CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Exception while calling generateclient Details: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e MethodDeclaration /** launch the generate client using system api */ Modifier protected executeFork BuildException IfStatement BinaryOperation == MemberReference version MemberReference BorlandDeploymentTool BAS BlockStatement StatementExpression MethodInvocation executeForkV4 End IfStatement BinaryOperation == MemberReference version MemberReference BorlandDeploymentTool BES BlockStatement StatementExpression MethodInvocation executeForkV5 End MethodDeclaration /** launch the generate client using system api */ Modifier protected executeForkV4 BuildException TryStatement StatementExpression MethodInvocation BinaryOperation + Literal ""mode : fork "" MemberReference BorlandDeploymentTool BAS MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType ExecTask VariableDeclarator execTask Literal null StatementExpression Assignment MemberReference execTask Cast ReferenceType ExecTask MethodInvocation MethodInvocation Literal ""exec"" createTask getProject = StatementExpression MethodInvocation execTask ClassCreator ReferenceType File Literal ""."" setDir StatementExpression MethodInvocation execTask Literal ""iastool"" setExecutable StatementExpression MethodInvocation execTask MethodInvocation Literal ""generateclient"" setValue createArg IfStatement MemberReference debug BlockStatement StatementExpression MethodInvocation execTask MethodInvocation Literal ""-trace"" setValue createArg End StatementExpression MethodInvocation execTask MethodInvocation Literal ""-short"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-jarfile"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation ejbjarfile getAbsolutePath setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-single"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-clientjarfile"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation clientjarfile getAbsolutePath setValue createArg StatementExpression MethodInvocation Literal ""Calling iastool"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation execTask execute CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Exception while calling generateclient Details: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e MethodDeclaration /** launch the generate client using system api */ Modifier protected executeForkV5 BuildException TryStatement StatementExpression MethodInvocation BinaryOperation + Literal ""mode : fork "" MemberReference BorlandDeploymentTool BES MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType ExecTask VariableDeclarator execTask Literal null StatementExpression Assignment MemberReference execTask Cast ReferenceType ExecTask MethodInvocation MethodInvocation Literal ""exec"" createTask getProject = StatementExpression MethodInvocation execTask ClassCreator ReferenceType File Literal ""."" setDir StatementExpression MethodInvocation execTask Literal ""iastool"" setExecutable IfStatement MemberReference debug BlockStatement StatementExpression MethodInvocation execTask MethodInvocation Literal ""-debug"" setValue createArg End StatementExpression MethodInvocation execTask MethodInvocation Literal ""-genclient"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-jars"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation ejbjarfile getAbsolutePath setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-target"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation clientjarfile getAbsolutePath setValue createArg StatementExpression MethodInvocation execTask MethodInvocation Literal ""-cp"" setValue createArg StatementExpression MethodInvocation execTask MethodInvocation MethodInvocation classpath toString setValue createArg StatementExpression MethodInvocation Literal ""Calling iastool"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation execTask execute CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Exception while calling generateclient Details: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e ReferenceType Task",0
6,6,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.types.DataType ClassDeclaration Modifier public abstract /**
 * A convenience base class that you can subclass Selectors from. It
 * provides some helpful common behaviour. Note that there is no need
 * for Selectors to inherit from this class, it is only necessary that
 * they implement FileSelector.
 *
 * @since 1.5
 */ BaseSelector FieldDeclaration Modifier private ReferenceType String VariableDeclarator errmsg Literal null ConstructorDeclaration Modifier public /**
     * Do nothing constructor.
     */ BaseSelector MethodDeclaration /**
     * Allows all selectors to indicate a setup error. Note that only
     * the first error message is recorded.
     *
     * @param msg The error message any BuildException should throw.
     */ Modifier public setError FormalParameter ReferenceType String msg IfStatement BinaryOperation == MemberReference errmsg Literal null BlockStatement StatementExpression Assignment MemberReference errmsg MemberReference msg = End MethodDeclaration /**
     * Returns any error messages that have been set.
     *
     * @return the error condition
     */ Modifier public ReferenceType String getError ReturnStatement MemberReference errmsg MethodDeclaration /**
     * <p>Subclasses can override this method to provide checking of their
     * state. So long as they call validate() from isSelected(), this will
     * be called automatically (unless they override validate()).</p>
     * <p>Implementations should check for incorrect settings and call
     * setError() as necessary.</p>
     */ Modifier public verifySettings MethodDeclaration /**
     * Subclasses can use this to throw the requisite exception
     * in isSelected() in the case of an error condition.
     */ Modifier public validate IfStatement BinaryOperation == MethodInvocation getError Literal null BlockStatement StatementExpression MethodInvocation verifySettings End IfStatement BinaryOperation != MethodInvocation getError Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference errmsg End MethodDeclaration /**
     * Method that each selector will implement to create their
     * selection behaviour. If there is a problem with the setup
     * of a selector, it can throw a BuildException to indicate
     * the problem.
     *
     * @param basedir A java.io.File object for the base directory
     * @param filename The name of the file to check
     * @param file A File object for this filename
     * @return whether the file should be selected or not
     */ Modifier public abstract BasicType boolean isSelected FormalParameter ReferenceType File basedir FormalParameter ReferenceType String filename FormalParameter ReferenceType File file ReferenceType DataType ReferenceType FileSelector",1
272,272,"CompilationUnit PackageDeclaration org.apache.tools.ant.input Import java.io.FileInputStream Import java.io.IOException Import java.util.Properties Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Reads input from a property file, the file name is read from the
 * system property ant.input.properties, the prompt is the key for input.
 *
 * @version $Revision$
 * @since Ant 1.5
 */ PropertyFileInputHandler FieldDeclaration Modifier private ReferenceType Properties VariableDeclarator props Literal null FieldDeclaration /**
     * Name of the system property we expect to hold the file name.
     */ Modifier public final static ReferenceType String VariableDeclarator FILE_NAME_KEY Literal ""ant.input.properties"" ConstructorDeclaration Modifier public /**
     * Empty no-arg constructor.
     */ PropertyFileInputHandler MethodDeclaration /**
     * Picks up the input from a property, using the prompt as the
     * name of the property.
     *
     * @exception BuildException if no property of that name can be found.
     */ Modifier public handleInput FormalParameter ReferenceType InputRequest request BuildException StatementExpression MethodInvocation readProps LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation props MethodInvocation request getPrompt get IfStatement BinaryOperation == MemberReference o Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Unable to find input for \'"" MethodInvocation request getPrompt Literal ""\'"" End StatementExpression MethodInvocation request MethodInvocation o toString setInput IfStatement MethodInvocation ! request isInputValid BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Found invalid input "" MemberReference o Literal "" for \'"" MethodInvocation request getPrompt Literal ""\'"" End MethodDeclaration /**
     * Reads the properties file if it hasn't already been read.
     */ Modifier private synchronized readProps BuildException IfStatement BinaryOperation == MemberReference props Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator propsFile MethodInvocation System MemberReference FILE_NAME_KEY getProperty IfStatement BinaryOperation == MemberReference propsFile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""System property "" MemberReference FILE_NAME_KEY Literal "" for PropertyFileInputHandler not"" Literal "" set"" End StatementExpression Assignment MemberReference props ClassCreator ReferenceType Properties = TryStatement StatementExpression MethodInvocation props ClassCreator ReferenceType FileInputStream MemberReference propsFile load CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Couldn't load "" MemberReference propsFile MemberReference e End ReferenceType InputHandler",0
68,68,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.io.OutputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * A simple T-piece to replicate an output stream into two separate streams
 *
 */ TeeOutputStream FieldDeclaration Modifier private ReferenceType OutputStream VariableDeclarator left FieldDeclaration Modifier private ReferenceType OutputStream VariableDeclarator right ConstructorDeclaration Modifier public TeeOutputStream FormalParameter ReferenceType OutputStream left FormalParameter ReferenceType OutputStream right StatementExpression Assignment This MemberReference left MemberReference left = StatementExpression Assignment This MemberReference right MemberReference right = MethodDeclaration Modifier public close IOException StatementExpression MethodInvocation left close StatementExpression MethodInvocation right close MethodDeclaration Modifier public flush IOException StatementExpression MethodInvocation left flush StatementExpression MethodInvocation right flush MethodDeclaration Modifier public write FormalParameter BasicType byte b IOException StatementExpression MethodInvocation left MemberReference b write StatementExpression MethodInvocation right MemberReference b write MethodDeclaration Modifier public write FormalParameter BasicType byte b FormalParameter BasicType int off FormalParameter BasicType int len IOException StatementExpression MethodInvocation left MemberReference b MemberReference off MemberReference len write StatementExpression MethodInvocation right MemberReference b MemberReference off MemberReference len write MethodDeclaration Modifier public write FormalParameter BasicType int b IOException StatementExpression MethodInvocation left MemberReference b write StatementExpression MethodInvocation right MemberReference b write ReferenceType OutputStream",0
299,299,"CompilationUnit PackageDeclaration org.apache.tools.ant Import org.apache.tools.ant.util.StringUtils ClassDeclaration Modifier public /**
 * Extends DefaultLogger to strip out empty targets.
 *
 */ NoBannerLogger FieldDeclaration /**
     * Name of the current target, if it should
     * be displayed on the next message. This is
     * set when a target starts building, and reset
     * to <code>null</code> after the first message for
     * the target is logged.
     */ Modifier protected ReferenceType String VariableDeclarator targetName ConstructorDeclaration Modifier public /** Sole constructor. */ NoBannerLogger MethodDeclaration /**
     * Notes the name of the target so it can be logged
     * if it generates any messages.
     *
     * @param event A BuildEvent containing target information.
     *              Must not be <code>null</code>.
     */ Modifier public targetStarted FormalParameter ReferenceType BuildEvent event StatementExpression Assignment MemberReference targetName MethodInvocation event MethodInvocation getName getTarget = MethodDeclaration /**
     * Resets the current target name to <code>null</code>.
     *
     * @param event Ignored in this implementation.
     */ Modifier public targetFinished FormalParameter ReferenceType BuildEvent event StatementExpression Assignment MemberReference targetName Literal null = MethodDeclaration /**
     * Logs a message for a target if it is of an appropriate
     * priority, also logging the name of the target if this
     * is the first message which needs to be logged for the
     * target.
     *
     * @param event A BuildEvent containing message information.
     *              Must not be <code>null</code>.
     */ Modifier public messageLogged FormalParameter ReferenceType BuildEvent event IfStatement BinaryOperation || BinaryOperation || BinaryOperation > MethodInvocation event getPriority MemberReference msgOutputLevel BinaryOperation == Literal null MethodInvocation event getMessage Literal MethodInvocation MethodInvocation event MethodInvocation trim getMessage equals """" BlockStatement ReturnStatement End IfStatement BinaryOperation != Literal null MemberReference targetName BlockStatement StatementExpression MethodInvocation out BinaryOperation + BinaryOperation + MemberReference StringUtils LINE_SEP MemberReference targetName Literal "":"" println StatementExpression Assignment MemberReference targetName Literal null = End StatementExpression SuperMethodInvocation MemberReference event messageLogged ReferenceType DefaultLogger",0
207,207,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task ClassDeclaration Modifier public /**
 * Sleep, or pause, for a period of time.
 *
 * A task for sleeping a short period of time, useful when a
 * build or deployment process requires an interval between tasks.
 *<p>
 * A negative value can be supplied to any of attributes provided the total sleep time
 * is positive, pending fundamental changes in physics and JVM
 * execution times</p>
 * Note that sleep times are always hints to be interpreted by the OS how it feels
 * small times may either be ignored or rounded up to a minimum timeslice. Note
 * also that the system clocks often have a fairly low granularity too, which complicates
 * measuring how long a sleep actually took.</p>
 *
 * @since Ant 1.4
 * @ant.task category=""utility""
 */ Sleep FieldDeclaration /**
     * failure flag
     */ Modifier private BasicType boolean VariableDeclarator failOnError Literal true FieldDeclaration /**
     * sleep seconds
     */ Modifier private BasicType int VariableDeclarator seconds Literal 0 FieldDeclaration /**
     * sleep hours
     */ Modifier private BasicType int VariableDeclarator hours Literal 0 FieldDeclaration /**
     * sleep minutes
     */ Modifier private BasicType int VariableDeclarator minutes Literal 0 FieldDeclaration /**
     * sleep milliseconds
     */ Modifier private BasicType int VariableDeclarator milliseconds Literal 0 ConstructorDeclaration Modifier public /**
     * Creates new instance
     */ Sleep MethodDeclaration /**
     * seconds to add to the sleep time
     *
     * @param seconds The new Seconds value
     */ Modifier public setSeconds FormalParameter BasicType int seconds StatementExpression Assignment This MemberReference seconds MemberReference seconds = MethodDeclaration /**
     * hours to add to the sleep time.
     *
     * @param hours The new Hours value
     */ Modifier public setHours FormalParameter BasicType int hours StatementExpression Assignment This MemberReference hours MemberReference hours = MethodDeclaration /**
     * minutes to add to the sleep time
     *
     * @param minutes The new Minutes value
     */ Modifier public setMinutes FormalParameter BasicType int minutes StatementExpression Assignment This MemberReference minutes MemberReference minutes = MethodDeclaration /**
     * milliseconds to add to the sleep time
     *
     * @param milliseconds The new Milliseconds value
     */ Modifier public setMilliseconds FormalParameter BasicType int milliseconds StatementExpression Assignment This MemberReference milliseconds MemberReference milliseconds = MethodDeclaration /**
     * sleep for a period of time
     *
     * @param millis time to sleep
     */ Modifier public doSleep FormalParameter BasicType long millis TryStatement StatementExpression MethodInvocation Thread MemberReference millis sleep CatchClause CatchClauseParameter InterruptedException ie MethodDeclaration /**
     * flag controlling whether to break the build on an error.
     *
     * @param failOnError The new FailOnError value
     */ Modifier public setFailOnError FormalParameter BasicType boolean failOnError StatementExpression Assignment This MemberReference failOnError MemberReference failOnError = MethodDeclaration /**
     * return time to sleep
     *
     * @return sleep time. if below 0 then there is an error
     */ Modifier private BasicType long getSleepTime ReturnStatement BinaryOperation + BinaryOperation * BinaryOperation + BinaryOperation * BinaryOperation + BinaryOperation * Cast BasicType long MemberReference hours Literal 60 MemberReference minutes Literal 60 MemberReference seconds Literal 1000 MemberReference milliseconds MethodDeclaration /**
     * verify parameters
     *
     * @throws BuildException if something is invalid
     */ Modifier public validate BuildException IfStatement BinaryOperation < MethodInvocation getSleepTime Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Negative sleep periods are not "" Literal ""supported"" End MethodDeclaration /**
     * Executes this build task. Throws org.apache.tools.ant.BuildException
     * if there is an error during task execution.
     *
     * @exception BuildException Description of Exception
     */ Modifier public execute BuildException TryStatement StatementExpression MethodInvocation validate LocalVariableDeclaration BasicType long VariableDeclarator sleepTime MethodInvocation getSleepTime StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""sleeping for "" MemberReference sleepTime Literal "" milliseconds"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation MemberReference sleepTime doSleep CatchClause CatchClauseParameter Exception e IfStatement MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference e BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator text MethodInvocation e toString StatementExpression MethodInvocation MemberReference text MemberReference Project MSG_ERR log End ReferenceType Task",0
519,519,,1
80,80,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.condition Import java.io.File Import java.io.IOException Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.util.FileUtils ClassDeclaration Modifier public /**
 * Compares two files for bitwise equality based on size and
 * content. Timestamps are not at all looked at.
 *
 * @version $Revision$
 * @since Ant 1.5
 */ FilesMatch FieldDeclaration /**
     * files to compare
     */ Modifier private ReferenceType File VariableDeclarator file1 VariableDeclarator file2 FieldDeclaration /**
     * Helper that provides the file comparison method.
     */ Modifier private ReferenceType FileUtils VariableDeclarator fu MethodInvocation FileUtils newFileUtils MethodDeclaration /**
     * Sets the File1 attribute
     *
     * @param file1 The new File1 value
     */ Modifier public setFile1 FormalParameter ReferenceType File file1 StatementExpression Assignment This MemberReference file1 MemberReference file1 = MethodDeclaration /**
     * Sets the File2 attribute
     *
     * @param file2 The new File2 value
     */ Modifier public setFile2 FormalParameter ReferenceType File file2 StatementExpression Assignment This MemberReference file2 MemberReference file2 = MethodDeclaration /**
     * comparison method of the interface
     *
     * @return true if the files are equal
     * @exception BuildException if it all went pear-shaped
     */ Modifier public BasicType boolean eval BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference file1 Literal null BinaryOperation == MemberReference file2 Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""both file1 and file2 are required in "" Literal ""filesmatch"" End LocalVariableDeclaration BasicType boolean VariableDeclarator matches Literal false TryStatement StatementExpression Assignment MemberReference matches MethodInvocation fu MemberReference file1 MemberReference file2 contentEquals = CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""when comparing files: "" MethodInvocation ioe getMessage MemberReference ioe ReturnStatement MemberReference matches ReferenceType Condition",0
97,97,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.condition Import java.util.Enumeration Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * &lt;or&gt; condition container.
 *
 * <p>Iterates over all conditions and returns true as soon as one
 * evaluates to true.</p>
 *
 * @since Ant 1.4
 * @version $Revision$
 */ Or MethodDeclaration /**
     * @return true if any of the contained conditions evaluate to true
     * @exception BuildException if an error occurs
     */ Modifier public BasicType boolean eval BuildException LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation getConditions WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Condition VariableDeclarator c Cast ReferenceType Condition MethodInvocation e nextElement IfStatement MethodInvocation c eval BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false ReferenceType ConditionBase ReferenceType Condition",0
625,625,,0
516,516,,0
331,331,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.dotnet Import java.io.File Import java.io.IOException Import java.io.FileOutputStream Import java.io.PrintWriter Import java.io.BufferedOutputStream Import java.io.FileNotFoundException Import java.util.Hashtable Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.ExecuteStreamHandler Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 *  This is a helper class to spawn net commands out. In its initial form it
 *  contains no .net specifics, just contains all the command line/exe
 *  construction stuff. However, it may be handy in future to have a means of
 *  setting the path to point to the dotnet bin directory; in which case the
 *  shared code should go in here.
 *
 *@version    0.5
 */ NetCommand FieldDeclaration /**
     *  owner project
     */ Modifier protected ReferenceType Task VariableDeclarator owner FieldDeclaration /**
     *  executable
     */ Modifier protected ReferenceType Execute VariableDeclarator executable FieldDeclaration /**
     *  what is the command line
     */ Modifier protected ReferenceType Commandline VariableDeclarator commandLine FieldDeclaration /**
     *  title of the command
     */ Modifier protected ReferenceType String VariableDeclarator title FieldDeclaration /**
     *  actual program to invoke
     */ Modifier protected ReferenceType String VariableDeclarator program FieldDeclaration /**
     *  trace flag
     */ Modifier protected BasicType boolean VariableDeclarator traceCommandLine Literal false FieldDeclaration /**
     *  flag to control action on execution trouble
     */ Modifier protected BasicType boolean VariableDeclarator failOnError FieldDeclaration /**
     * the directory to execute the command in. When null, the current
     * directory is used.
     */ Modifier private ReferenceType File VariableDeclarator directory FieldDeclaration /**
     * flag to set to to use @file based command cache
     */ Modifier private BasicType boolean VariableDeclarator useResponseFile Literal false FieldDeclaration /**
     * name of a temp file; may be null
     */ Modifier private ReferenceType File VariableDeclarator temporaryCommandFile FieldDeclaration /**
     * internal threshold for auto-switch
     */ Modifier private BasicType int VariableDeclarator automaticResponseFileThreshold Literal 64 ConstructorDeclaration Modifier public /**
     *  constructor
     *
     *@param  title        (for logging/errors)
     *@param  owner        owner task
     *@param  program      app we are to run
     */ NetCommand FormalParameter ReferenceType Task owner FormalParameter ReferenceType String title FormalParameter ReferenceType String program StatementExpression Assignment This MemberReference owner MemberReference owner = StatementExpression Assignment This MemberReference title MemberReference title = StatementExpression Assignment This MemberReference program MemberReference program = StatementExpression Assignment MemberReference commandLine ClassCreator ReferenceType Commandline = StatementExpression MethodInvocation commandLine MemberReference program setExecutable StatementExpression MethodInvocation prepareExecutor MethodDeclaration /**
     *  turn tracing on or off
     *
     *@param  b  trace flag
     */ Modifier public setTraceCommandLine FormalParameter BasicType boolean b StatementExpression Assignment MemberReference traceCommandLine MemberReference b = MethodDeclaration /**
     *  set fail on error flag
     *
     *@param  b  fail flag -set to true to cause an exception to be raised if
     *      the return value != 0
     */ Modifier public setFailOnError FormalParameter BasicType boolean b StatementExpression Assignment MemberReference failOnError MemberReference b = MethodDeclaration /**
     *  query fail on error flag
     *
     *@return    The failFailOnError value
     */ Modifier public BasicType boolean getFailFailOnError ReturnStatement MemberReference failOnError MethodDeclaration /**
     * set the directory to run from, if the default is inadequate
     * @param directory
     */ Modifier public setDirectory FormalParameter ReferenceType File directory StatementExpression Assignment This MemberReference directory MemberReference directory = MethodDeclaration /**
     *  verbose text log
     *
     *@param  msg  string to add to log if verbose is defined for the build
     */ Modifier protected logVerbose FormalParameter ReferenceType String msg StatementExpression MethodInvocation owner MethodInvocation MemberReference msg MemberReference Project MSG_VERBOSE log getProject MethodDeclaration /**
     *  error text log
     *
     *@param  msg  message to display as an error
     */ Modifier protected logError FormalParameter ReferenceType String msg StatementExpression MethodInvocation owner MethodInvocation MemberReference msg MemberReference Project MSG_ERR log getProject MethodDeclaration /**
     *  add an argument to a command line; do nothing if the arg is null or
     *  empty string
     *
     *@param  argument  The feature to be added to the Argument attribute
     */ Modifier public addArgument FormalParameter ReferenceType String argument IfStatement BinaryOperation && BinaryOperation != MemberReference argument Literal null BinaryOperation != MethodInvocation argument length Literal 0 BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MemberReference argument setValue createArgument End MethodDeclaration /**
     *  concatenate two strings together and add them as a single argument,
     *  but only if argument2 is non-null and non-zero length
     *
     *@param  argument1  The first argument
     *@param  argument2  The second argument
     */ Modifier public addArgument FormalParameter ReferenceType String argument1 FormalParameter ReferenceType String argument2 IfStatement BinaryOperation && BinaryOperation != MemberReference argument2 Literal null BinaryOperation != MethodInvocation argument2 length Literal 0 BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + MemberReference argument1 MemberReference argument2 setValue createArgument End MethodDeclaration /**
     * getter
     * @return response file state
     */ Modifier public BasicType boolean isUseResponseFile ReturnStatement MemberReference useResponseFile MethodDeclaration /**
     * set this to true to always use the response file
     * @param useResponseFile
     */ Modifier public setUseResponseFile FormalParameter BasicType boolean useResponseFile StatementExpression Assignment This MemberReference useResponseFile MemberReference useResponseFile = MethodDeclaration /**
     * getter for threshold
     * @return 0 for disabled, or a threshold for enabling response files
     */ Modifier public BasicType int getAutomaticResponseFileThreshold ReturnStatement MemberReference automaticResponseFileThreshold MethodDeclaration /**
     * set threshold for automatically using response files -use 0 for off
     * @param automaticResponseFileThreshold
     */ Modifier public setAutomaticResponseFileThreshold FormalParameter BasicType int automaticResponseFileThreshold StatementExpression Assignment This MemberReference automaticResponseFileThreshold MemberReference automaticResponseFileThreshold = MethodDeclaration /**
     *  set up the command sequence..
     */ Modifier protected prepareExecutor IfStatement BinaryOperation == MemberReference owner Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""no owner"" End IfStatement BinaryOperation == MethodInvocation owner getProject Literal null BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException Literal ""Owner has no project"" End LocalVariableDeclaration ReferenceType File VariableDeclarator dir MethodInvocation owner MethodInvocation getBaseDir getProject IfStatement BinaryOperation != MemberReference directory Literal null BlockStatement StatementExpression Assignment MemberReference dir MemberReference directory = End LocalVariableDeclaration ReferenceType ExecuteStreamHandler VariableDeclarator handler ClassCreator ReferenceType LogStreamHandler MemberReference owner MemberReference Project MSG_INFO MemberReference Project MSG_WARN StatementExpression Assignment MemberReference executable ClassCreator ReferenceType Execute MemberReference handler Literal null = StatementExpression MethodInvocation executable MethodInvocation owner getProject setAntRun StatementExpression MethodInvocation executable MemberReference dir setWorkingDirectory MethodDeclaration /**
     *  Run the command using the given Execute instance.
     *
     *@exception  BuildException  if something goes wrong and the
     *      failOnError flag is true
     */ Modifier public runCommand BuildException LocalVariableDeclaration BasicType int VariableDeclarator err Literal - 1 TryStatement IfStatement MemberReference traceCommandLine BlockStatement StatementExpression MethodInvocation owner MethodInvocation commandLine describeCommand log BlockStatement StatementExpression MethodInvocation MethodInvocation commandLine describeCommand logVerbose End StatementExpression MethodInvocation setExecutableCommandLine StatementExpression Assignment MemberReference err MethodInvocation executable execute = IfStatement MethodInvocation Execute MemberReference err isFailure BlockStatement IfStatement MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + MemberReference title Literal "" returned: "" MemberReference err MethodInvocation owner getLocation BlockStatement StatementExpression MethodInvocation owner BinaryOperation + BinaryOperation + MemberReference title Literal ""  Result: "" MemberReference err MemberReference Project MSG_ERR log End End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + MemberReference title Literal "" failed: "" MemberReference e MemberReference e MethodInvocation owner getLocation IfStatement BinaryOperation != MemberReference temporaryCommandFile Literal null BlockStatement StatementExpression MethodInvocation temporaryCommandFile delete End MethodDeclaration /**
     * set the executable command line
     */ Modifier private setExecutableCommandLine LocalVariableDeclaration ReferenceType String VariableDeclarator commands MethodInvocation commandLine getCommandline IfStatement BinaryOperation && BinaryOperation > MemberReference automaticResponseFileThreshold Literal 0 BinaryOperation > MemberReference commands length MemberReference automaticResponseFileThreshold BlockStatement StatementExpression Assignment MemberReference useResponseFile Literal true = End IfStatement BinaryOperation || MemberReference ! useResponseFile BinaryOperation <= MemberReference commands length Literal 1 BlockStatement StatementExpression MethodInvocation executable MemberReference commands setCommandline BlockStatement LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator fos Literal null LocalVariableDeclaration ReferenceType FileUtils VariableDeclarator fileUtils MethodInvocation FileUtils newFileUtils StatementExpression Assignment MemberReference temporaryCommandFile MethodInvocation fileUtils Literal ""cmd"" Literal "".txt"" Literal null createTempFile = StatementExpression MethodInvocation owner BinaryOperation + Literal ""Using response file"" MemberReference temporaryCommandFile MemberReference Project MSG_VERBOSE log TryStatement StatementExpression Assignment MemberReference fos ClassCreator ReferenceType FileOutputStream MemberReference temporaryCommandFile = LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator out ClassCreator ReferenceType PrintWriter ClassCreator ReferenceType BufferedOutputStream MemberReference fos ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference commands length MemberReference ++ i BlockStatement StatementExpression MethodInvocation out MemberReference ArraySelector MemberReference i commands println End StatementExpression MethodInvocation out flush StatementExpression MethodInvocation out close CatchClause CatchClauseParameter IOException ex ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""saving command stream to "" MemberReference temporaryCommandFile MemberReference ex LocalVariableDeclaration ReferenceType String VariableDeclarator newCommandLine ArrayCreator ReferenceType String Literal 2 StatementExpression Assignment MemberReference ArraySelector Literal 0 newCommandLine MemberReference ArraySelector Literal 0 commands = StatementExpression Assignment MemberReference ArraySelector Literal 1 newCommandLine BinaryOperation + Literal ""@"" MethodInvocation temporaryCommandFile getAbsolutePath = StatementExpression MethodInvocation executable MemberReference newCommandLine setCommandline End MethodDeclaration /**
     * scan through one fileset for files to include
     * @param scanner
     * @param filesToBuild
     * @param outputTimestamp timestamp to compare against
     * @return #of files out of date
     * @todo: should FAT granularity be included here?
     */ Modifier public BasicType int scanOneFileset FormalParameter ReferenceType DirectoryScanner scanner FormalParameter ReferenceType Hashtable filesToBuild FormalParameter BasicType long outputTimestamp LocalVariableDeclaration BasicType int VariableDeclarator filesOutOfDate Literal 0 LocalVariableDeclaration ReferenceType String VariableDeclarator dependencies MethodInvocation scanner getIncludedFiles LocalVariableDeclaration ReferenceType File VariableDeclarator base MethodInvocation scanner getBasedir ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference dependencies length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator targetFile ClassCreator ReferenceType File MemberReference base MemberReference ArraySelector MemberReference i dependencies IfStatement BinaryOperation == MethodInvocation filesToBuild MemberReference targetFile get Literal null BlockStatement StatementExpression MethodInvocation filesToBuild MemberReference targetFile MemberReference targetFile put IfStatement BinaryOperation > MethodInvocation targetFile lastModified MemberReference outputTimestamp BlockStatement StatementExpression MemberReference ++ filesOutOfDate StatementExpression MethodInvocation owner BinaryOperation + MethodInvocation targetFile toString Literal "" is out of date"" MemberReference Project MSG_VERBOSE log BlockStatement StatementExpression MethodInvocation owner MethodInvocation targetFile toString MemberReference Project MSG_VERBOSE log End End End ReturnStatement MemberReference filesOutOfDate",0
312,312,"CompilationUnit PackageDeclaration org.apache.tools.ant.loader Import java.io.File Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import java.io.Reader Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.Project Import java.util.jar.Manifest Import java.util.jar.JarFile Import java.util.zip.ZipFile Import java.util.jar.Attributes Import java.util.jar.Attributes.Name Import java.net.URL Import java.net.MalformedURLException Import java.util.zip.ZipEntry Import java.util.Collections Import java.util.HashMap Import java.util.Map Import java.util.StringTokenizer Import org.apache.tools.ant.util.FileUtils ClassDeclaration Modifier public /**
 * An implementation of the AntClassLoader suitable for use on post JDK 1.1
 * platforms
 *
 */ AntClassLoader2 FieldDeclaration /** Instance of a utility class to use for file operations. */ Modifier private ReferenceType FileUtils VariableDeclarator fileUtils FieldDeclaration /** Static map of jar file/time to manifiest class-path entries */ Modifier private static ReferenceType Map VariableDeclarator pathMap MethodInvocation Collections ClassCreator ReferenceType HashMap synchronizedMap ConstructorDeclaration Modifier public /**
     * Constructor
     */ AntClassLoader2 StatementExpression Assignment MemberReference fileUtils MethodInvocation FileUtils newFileUtils = MethodDeclaration /**
     * Define a class given its bytes
     *
     * @param container the container from which the class data has been read
     *                  may be a directory or a jar/zip file.
     *
     * @param classData the bytecode data for the class
     * @param className the name of the class
     *
     * @return the Class instance created from the given data
     *
     * @throws IOException if the class data cannot be read.
     */ Modifier protected ReferenceType Class defineClassFromData FormalParameter ReferenceType File container FormalParameter BasicType byte classData FormalParameter ReferenceType String className IOException StatementExpression MethodInvocation MemberReference container MemberReference className definePackage ReturnStatement MethodInvocation MemberReference className MemberReference classData Literal 0 MemberReference classData length ClassReference MethodInvocation getProtectionDomain ReferenceType Project defineClass MethodDeclaration /**
     * Get the manifest from the given jar, if it is indeed a jar and it has a
     * manifest
     *
     * @param container the File from which a manifest is required.
     *
     * @return the jar's manifest or null is the container is not a jar or it
     *         has no manifest.
     *
     * @exception IOException if the manifest cannot be read.
     */ Modifier private ReferenceType Manifest getJarManifest FormalParameter ReferenceType File container IOException IfStatement MethodInvocation container isDirectory BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType JarFile VariableDeclarator jarFile Literal null TryStatement StatementExpression Assignment MemberReference jarFile ClassCreator ReferenceType JarFile MemberReference container = ReturnStatement MethodInvocation jarFile getManifest IfStatement BinaryOperation != MemberReference jarFile Literal null BlockStatement StatementExpression MethodInvocation jarFile close End MethodDeclaration /**
     * Define the package information associated with a class.
     *
     * @param container the file containing the class definition.
     * @param className the class name of for which the package information
     *        is to be determined.
     *
     * @exception IOException if the package information cannot be read from the
     *            container.
     */ Modifier protected definePackage FormalParameter ReferenceType File container FormalParameter ReferenceType String className IOException LocalVariableDeclaration BasicType int VariableDeclarator classIndex MethodInvocation className Literal '.' lastIndexOf IfStatement BinaryOperation == MemberReference classIndex Literal - 1 BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator packageName MethodInvocation className Literal 0 MemberReference classIndex substring IfStatement BinaryOperation != MethodInvocation MemberReference packageName getPackage Literal null BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType Manifest VariableDeclarator manifest MethodInvocation MemberReference container getJarManifest IfStatement BinaryOperation == MemberReference manifest Literal null BlockStatement StatementExpression MethodInvocation MemberReference packageName Literal null Literal null Literal null Literal null Literal null Literal null Literal null definePackage BlockStatement StatementExpression MethodInvocation MemberReference container MemberReference packageName MemberReference manifest definePackage End MethodDeclaration /**
     * Define the package information when the class comes from a
     * jar with a manifest
     *
     * @param container the jar file containing the manifest
     * @param packageName the name of the package being defined.
     * @param manifest the jar's manifest
     */ Modifier protected definePackage FormalParameter ReferenceType File container FormalParameter ReferenceType String packageName FormalParameter ReferenceType Manifest manifest LocalVariableDeclaration ReferenceType String VariableDeclarator sectionName BinaryOperation + MethodInvocation packageName Literal '.' Literal '/' replace Literal ""/"" LocalVariableDeclaration ReferenceType String VariableDeclarator specificationTitle Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator specificationVendor Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator specificationVersion Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator implementationTitle Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator implementationVendor Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator implementationVersion Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator sealedString Literal null LocalVariableDeclaration ReferenceType URL VariableDeclarator sealBase Literal null LocalVariableDeclaration ReferenceType Attributes VariableDeclarator sectionAttributes MethodInvocation manifest MemberReference sectionName getAttributes IfStatement BinaryOperation != MemberReference sectionAttributes Literal null BlockStatement StatementExpression Assignment MemberReference specificationTitle MethodInvocation sectionAttributes MemberReference Name SPECIFICATION_TITLE getValue = StatementExpression Assignment MemberReference specificationVendor MethodInvocation sectionAttributes MemberReference Name SPECIFICATION_VENDOR getValue = StatementExpression Assignment MemberReference specificationVersion MethodInvocation sectionAttributes MemberReference Name SPECIFICATION_VERSION getValue = StatementExpression Assignment MemberReference implementationTitle MethodInvocation sectionAttributes MemberReference Name IMPLEMENTATION_TITLE getValue = StatementExpression Assignment MemberReference implementationVendor MethodInvocation sectionAttributes MemberReference Name IMPLEMENTATION_VENDOR getValue = StatementExpression Assignment MemberReference implementationVersion MethodInvocation sectionAttributes MemberReference Name IMPLEMENTATION_VERSION getValue = StatementExpression Assignment MemberReference sealedString MethodInvocation sectionAttributes MemberReference Name SEALED getValue = End LocalVariableDeclaration ReferenceType Attributes VariableDeclarator mainAttributes MethodInvocation manifest getMainAttributes IfStatement BinaryOperation != MemberReference mainAttributes Literal null BlockStatement IfStatement BinaryOperation == MemberReference specificationTitle Literal null BlockStatement StatementExpression Assignment MemberReference specificationTitle MethodInvocation mainAttributes MemberReference Name SPECIFICATION_TITLE getValue = End IfStatement BinaryOperation == MemberReference specificationVendor Literal null BlockStatement StatementExpression Assignment MemberReference specificationVendor MethodInvocation mainAttributes MemberReference Name SPECIFICATION_VENDOR getValue = End IfStatement BinaryOperation == MemberReference specificationVersion Literal null BlockStatement StatementExpression Assignment MemberReference specificationVersion MethodInvocation mainAttributes MemberReference Name SPECIFICATION_VERSION getValue = End IfStatement BinaryOperation == MemberReference implementationTitle Literal null BlockStatement StatementExpression Assignment MemberReference implementationTitle MethodInvocation mainAttributes MemberReference Name IMPLEMENTATION_TITLE getValue = End IfStatement BinaryOperation == MemberReference implementationVendor Literal null BlockStatement StatementExpression Assignment MemberReference implementationVendor MethodInvocation mainAttributes MemberReference Name IMPLEMENTATION_VENDOR getValue = End IfStatement BinaryOperation == MemberReference implementationVersion Literal null BlockStatement StatementExpression Assignment MemberReference implementationVersion MethodInvocation mainAttributes MemberReference Name IMPLEMENTATION_VERSION getValue = End IfStatement BinaryOperation == MemberReference sealedString Literal null BlockStatement StatementExpression Assignment MemberReference sealedString MethodInvocation mainAttributes MemberReference Name SEALED getValue = End End IfStatement BinaryOperation && BinaryOperation != MemberReference sealedString Literal null MethodInvocation sealedString Literal ""true"" equalsIgnoreCase BlockStatement TryStatement StatementExpression Assignment MemberReference sealBase ClassCreator ReferenceType URL BinaryOperation + Literal ""file:"" MethodInvocation container getPath = CatchClause CatchClauseParameter MalformedURLException e End StatementExpression MethodInvocation MemberReference packageName MemberReference specificationTitle MemberReference specificationVersion MemberReference specificationVendor MemberReference implementationTitle MemberReference implementationVersion MemberReference implementationVendor MemberReference sealBase definePackage MethodDeclaration /**
     * Add a file to the path. This classloader reads the manifest, if
     * available, and adds any additional class path jars specified in the
     * manifest.
     *
     * @param pathComponent the file which is to be added to the path for
     *                      this class loader
     *
     * @throws IOException if data needed from the file cannot be read.
     */ Modifier protected addPathFile FormalParameter ReferenceType File pathComponent IOException StatementExpression SuperMethodInvocation MemberReference pathComponent addPathFile IfStatement MethodInvocation pathComponent isDirectory BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType String VariableDeclarator absPathPlusTimeAndLength BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation pathComponent getAbsolutePath MethodInvocation pathComponent lastModified Literal ""-"" MethodInvocation pathComponent length LocalVariableDeclaration ReferenceType String VariableDeclarator classpath Cast ReferenceType String MethodInvocation pathMap MemberReference absPathPlusTimeAndLength get IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement LocalVariableDeclaration ReferenceType ZipFile VariableDeclarator jarFile Literal null LocalVariableDeclaration ReferenceType InputStream VariableDeclarator manifestStream Literal null TryStatement StatementExpression Assignment MemberReference jarFile ClassCreator ReferenceType ZipFile MemberReference pathComponent = StatementExpression Assignment MemberReference manifestStream MethodInvocation jarFile ClassCreator ReferenceType ZipEntry Literal ""META-INF/MANIFEST.MF"" getInputStream = IfStatement BinaryOperation == MemberReference manifestStream Literal null BlockStatement ReturnStatement End LocalVariableDeclaration ReferenceType Reader VariableDeclarator manifestReader ClassCreator ReferenceType InputStreamReader MemberReference manifestStream Literal ""UTF-8"" LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType Manifest VariableDeclarator manifest ClassCreator ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType taskdefs ReferenceType Manifest MemberReference manifestReader StatementExpression Assignment MemberReference classpath MethodInvocation manifest MethodInvocation Literal ""Class-Path"" getAttributeValue getMainSection = CatchClause CatchClauseParameter org.apache.tools.ant.taskdefs.ManifestException e IfStatement BinaryOperation != MemberReference manifestStream Literal null BlockStatement StatementExpression MethodInvocation manifestStream close End IfStatement BinaryOperation != MemberReference jarFile Literal null BlockStatement StatementExpression MethodInvocation jarFile close End IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath Literal """" = End StatementExpression MethodInvocation pathMap MemberReference absPathPlusTimeAndLength MemberReference classpath put End IfStatement Literal ! MethodInvocation MemberReference classpath equals """" BlockStatement LocalVariableDeclaration ReferenceType URL VariableDeclarator baseURL MethodInvocation fileUtils MemberReference pathComponent getFileURL LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference classpath WhileStatement MethodInvocation st hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator classpathElement MethodInvocation st nextToken LocalVariableDeclaration ReferenceType URL VariableDeclarator libraryURL ClassCreator ReferenceType URL MemberReference baseURL MemberReference classpathElement IfStatement MethodInvocation ! libraryURL MethodInvocation Literal ""file"" equals getProtocol BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Skipping jar library "" MemberReference classpathElement Literal "" since only relative URLs are supported by this"" Literal "" loader"" MemberReference Project MSG_VERBOSE log ContinueStatement End LocalVariableDeclaration ReferenceType File VariableDeclarator libraryFile ClassCreator ReferenceType File MethodInvocation libraryURL getFile IfStatement BinaryOperation && MethodInvocation libraryFile exists MethodInvocation ! MemberReference libraryFile isInPath BlockStatement StatementExpression MethodInvocation MemberReference libraryFile addPathFile End End End ReferenceType AntClassLoader",0
624,624,,0
215,215,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.extension Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.types.DataType Import org.apache.tools.ant.types.Reference ClassDeclaration Modifier public /**
 * Simple class that represents an Extension and conforms to Ants
 * patterns.
 *
 * @version $Revision$ $Date$
 * @ant.data-type name=""extension""
 */ ExtensionAdapter FieldDeclaration /**
     * The name of the optional package being made available, or required.
     */ Modifier private ReferenceType String VariableDeclarator extensionName FieldDeclaration /**
     * The version number (dotted decimal notation) of the specification
     * to which this optional package conforms.
     */ Modifier private ReferenceType DeweyDecimal VariableDeclarator specificationVersion FieldDeclaration /**
     * The name of the company or organization that originated the
     * specification to which this optional package conforms.
     */ Modifier private ReferenceType String VariableDeclarator specificationVendor FieldDeclaration /**
     * The unique identifier of the company that produced the optional
     * package contained in this JAR file.
     */ Modifier private ReferenceType String VariableDeclarator implementationVendorID FieldDeclaration /**
     * The name of the company or organization that produced this
     * implementation of this optional package.
     */ Modifier private ReferenceType String VariableDeclarator implementationVendor FieldDeclaration /**
     * The version number (dotted decimal notation) for this implementation
     * of the optional package.
     */ Modifier private ReferenceType DeweyDecimal VariableDeclarator implementationVersion FieldDeclaration /**
     * The URL from which the most recent version of this optional package
     * can be obtained if it is not already installed.
     */ Modifier private ReferenceType String VariableDeclarator implementationURL MethodDeclaration /**
     * Set the name of extension.
     *
     * @param extensionName the name of extension
     */ Modifier public setExtensionName FormalParameter Modifier final ReferenceType String extensionName StatementExpression MethodInvocation verifyNotAReference StatementExpression Assignment This MemberReference extensionName MemberReference extensionName = MethodDeclaration /**
     * Set the specificationVersion of extension.
     *
     * @param specificationVersion the specificationVersion of extension
     */ Modifier public setSpecificationVersion FormalParameter Modifier final ReferenceType String specificationVersion StatementExpression MethodInvocation verifyNotAReference StatementExpression Assignment This MemberReference specificationVersion ClassCreator ReferenceType DeweyDecimal MemberReference specificationVersion = MethodDeclaration /**
     * Set the specificationVendor of extension.
     *
     * @param specificationVendor the specificationVendor of extension
     */ Modifier public setSpecificationVendor FormalParameter Modifier final ReferenceType String specificationVendor StatementExpression MethodInvocation verifyNotAReference StatementExpression Assignment This MemberReference specificationVendor MemberReference specificationVendor = MethodDeclaration /**
     * Set the implementationVendorID of extension.
     *
     * @param implementationVendorID the implementationVendorID of extension
     */ Modifier public setImplementationVendorId FormalParameter Modifier final ReferenceType String implementationVendorID StatementExpression MethodInvocation verifyNotAReference StatementExpression Assignment This MemberReference implementationVendorID MemberReference implementationVendorID = MethodDeclaration /**
     * Set the implementationVendor of extension.
     *
     * @param implementationVendor the implementationVendor of extension
     */ Modifier public setImplementationVendor FormalParameter Modifier final ReferenceType String implementationVendor StatementExpression MethodInvocation verifyNotAReference StatementExpression Assignment This MemberReference implementationVendor MemberReference implementationVendor = MethodDeclaration /**
     * Set the implementationVersion of extension.
     *
     * @param implementationVersion the implementationVersion of extension
     */ Modifier public setImplementationVersion FormalParameter Modifier final ReferenceType String implementationVersion StatementExpression MethodInvocation verifyNotAReference StatementExpression Assignment This MemberReference implementationVersion ClassCreator ReferenceType DeweyDecimal MemberReference implementationVersion = MethodDeclaration /**
     * Set the implementationURL of extension.
     *
     * @param implementationURL the implementationURL of extension
     */ Modifier public setImplementationUrl FormalParameter Modifier final ReferenceType String implementationURL StatementExpression MethodInvocation verifyNotAReference StatementExpression Assignment This MemberReference implementationURL MemberReference implementationURL = MethodDeclaration /**
     * Makes this instance in effect a reference to another ExtensionAdapter
     * instance.
     *
     * <p>You must not set another attribute or nest elements inside
     * this element if you make it a reference.</p>
     *
     * @param reference the reference to which this instance is associated
     * @exception BuildException if this instance already has been configured.
     */ Modifier public setRefid FormalParameter Modifier final ReferenceType Reference reference BuildException IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation != Literal null MemberReference extensionName BinaryOperation != Literal null MemberReference specificationVersion BinaryOperation != Literal null MemberReference specificationVendor BinaryOperation != Literal null MemberReference implementationVersion BinaryOperation != Literal null MemberReference implementationVendorID BinaryOperation != Literal null MemberReference implementationVendor BinaryOperation != Literal null MemberReference implementationURL BlockStatement ThrowStatement MethodInvocation tooManyAttributes End LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation reference MethodInvocation getProject getReferencedObject IfStatement BinaryOperation instanceof MemberReference o ReferenceType ExtensionAdapter BlockStatement LocalVariableDeclaration Modifier final ReferenceType ExtensionAdapter VariableDeclarator other Cast ReferenceType ExtensionAdapter MemberReference o StatementExpression Assignment MemberReference extensionName MemberReference other extensionName = StatementExpression Assignment MemberReference specificationVersion MemberReference other specificationVersion = StatementExpression Assignment MemberReference specificationVendor MemberReference other specificationVendor = StatementExpression Assignment MemberReference implementationVersion MemberReference other implementationVersion = StatementExpression Assignment MemberReference implementationVendorID MemberReference other implementationVendorID = StatementExpression Assignment MemberReference implementationVendor MemberReference other implementationVendor = StatementExpression Assignment MemberReference implementationURL MemberReference other implementationURL = BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message BinaryOperation + MethodInvocation reference getRefId Literal "" doesn\'t refer to a Extension"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End StatementExpression SuperMethodInvocation MemberReference reference setRefid MethodDeclaration Modifier private verifyNotAReference BuildException IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End MethodDeclaration /**
     * Convert this adpater object into an extension object.
     *
     * @return the extension object
     */ ReferenceType Extension toExtension BuildException IfStatement BinaryOperation == Literal null MemberReference extensionName BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message Literal ""Extension is missing name."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End LocalVariableDeclaration ReferenceType String VariableDeclarator specificationVersionString Literal null IfStatement BinaryOperation != Literal null MemberReference specificationVersion BlockStatement StatementExpression Assignment MemberReference specificationVersionString MethodInvocation specificationVersion toString = End LocalVariableDeclaration ReferenceType String VariableDeclarator implementationVersionString Literal null IfStatement BinaryOperation != Literal null MemberReference implementationVersion BlockStatement StatementExpression Assignment MemberReference implementationVersionString MethodInvocation implementationVersion toString = End ReturnStatement ClassCreator ReferenceType Extension MemberReference extensionName MemberReference specificationVersionString MemberReference specificationVendor MemberReference implementationVersionString MemberReference implementationVendor MemberReference implementationVendorID MemberReference implementationURL MethodDeclaration /**
     * @see java.lang.Object#toString()
     */ Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + Literal ""{"" MethodInvocation MethodInvocation toString toExtension Literal ""}"" ReferenceType DataType",1
368,368,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ccm Import java.io.File Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.FileSet ClassDeclaration Modifier public /**
 * Class common to all check commands (checkout, checkin,checkin default task);
 * @ant.task ignore=""true""
 */ CCMCheck FieldDeclaration Modifier private ReferenceType File VariableDeclarator file Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator comment Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator task Literal null FieldDeclaration Modifier protected ReferenceType Vector VariableDeclarator filesets ClassCreator ReferenceType Vector ConstructorDeclaration Modifier public CCMCheck StatementExpression SuperConstructorInvocation MethodDeclaration /**
     * Get the value of file.
     * @return value of file.
     */ Modifier public ReferenceType File getFile ReturnStatement MemberReference file MethodDeclaration /**
     * Sets the path to the file that the command will operate on.
     * @param v  Value to assign to file.
     */ Modifier public setFile FormalParameter ReferenceType File v StatementExpression MethodInvocation BinaryOperation + Literal ""working file "" MemberReference v MemberReference Project MSG_VERBOSE log StatementExpression Assignment This MemberReference file MemberReference v = MethodDeclaration /**
     * Get the value of comment.
     * @return value of comment.
     */ Modifier public ReferenceType String getComment ReturnStatement MemberReference comment MethodDeclaration /**
     * Specifies a comment.
     * @param v  Value to assign to comment.
     */ Modifier public setComment FormalParameter ReferenceType String v StatementExpression Assignment This MemberReference comment MemberReference v = MethodDeclaration /**
     * Get the value of task.
     * @return value of task.
     */ Modifier public ReferenceType String getTask ReturnStatement MemberReference task MethodDeclaration /**
     * Specifies the task number used to check
     * in the file (may use 'default').
     * @param v  Value to assign to task.
     */ Modifier public setTask FormalParameter ReferenceType String v StatementExpression Assignment This MemberReference task MemberReference v = MethodDeclaration /**
     * Adds a set of files to copy.
     */ Modifier public addFileset FormalParameter ReferenceType FileSet set StatementExpression MethodInvocation filesets MemberReference set addElement MethodDeclaration /**
     * Executes the task.
     * <p>
     * Builds a command line to execute ccm and then calls Exec's run method
     * to execute the command line.
     * </p>
     */ Modifier public execute BuildException IfStatement BinaryOperation && BinaryOperation == MemberReference file Literal null BinaryOperation == MethodInvocation filesets size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Specify at least one source - a file or a fileset."" End IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference file Literal null MethodInvocation file exists MethodInvocation file isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""CCMCheck cannot be generated for directories"" End IfStatement BinaryOperation && BinaryOperation != MemberReference file Literal null BinaryOperation > MethodInvocation filesets size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Choose between file and fileset !"" End IfStatement BinaryOperation != MethodInvocation getFile Literal null BlockStatement StatementExpression MethodInvocation doit ReturnStatement End LocalVariableDeclaration BasicType int VariableDeclarator sizeofFileSet MethodInvocation filesets size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sizeofFileSet MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MethodInvocation filesets MemberReference i elementAt LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation fs MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator srcFiles MethodInvocation ds getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference srcFiles length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator src ClassCreator ReferenceType File MethodInvocation fs MethodInvocation getProject getDir MemberReference ArraySelector MemberReference j srcFiles StatementExpression MethodInvocation MemberReference src setFile StatementExpression MethodInvocation doit End End MethodDeclaration /**
     * check the file given by getFile().
     */ Modifier private doit LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline StatementExpression MethodInvocation commandLine MethodInvocation getCcmCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getCcmAction setValue createArgument StatementExpression MethodInvocation MemberReference commandLine checkOptions LocalVariableDeclaration BasicType int VariableDeclarator result MethodInvocation MemberReference commandLine run IfStatement MethodInvocation Execute MemberReference result isFailure BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * Check the command line options.
     */ Modifier private checkOptions FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENT setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getComment setValue createArgument End IfStatement BinaryOperation != MethodInvocation getTask Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_TASK setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getTask setValue createArgument End IfStatement BinaryOperation != MethodInvocation getFile Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation file getAbsolutePath setValue createArgument End FieldDeclaration /**
     * -comment flag -- comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENT Literal ""/comment"" FieldDeclaration /**
     *  -task flag -- associate checkout task with task
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_TASK Literal ""/task"" ReferenceType Continuus",1
600,600,,0
436,436,,0
393,393,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.taskdefs.Java Import org.apache.tools.ant.taskdefs.MatchingTask Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * Builds a serialized deployment descriptor given a text file description of the
 * descriptor in the format supported by WebLogic.
 *
 * This ant task is a front end for the weblogic DDCreator tool.
 *
 */ DDCreator FieldDeclaration /**
     * The root directory of the tree containing the textual deployment descriptors. The actual
     * deployment descriptor files are selected using include and exclude constructs
     * on the EJBC task, as supported by the MatchingTask superclass.
     */ Modifier private ReferenceType File VariableDeclarator descriptorDirectory FieldDeclaration /**
     * The directory where generated serialised deployment descriptors are placed.
     */ Modifier private ReferenceType File VariableDeclarator generatedFilesDirectory FieldDeclaration /**
     * The classpath to be used in the weblogic ejbc calls. It must contain the weblogic
     * classes necessary fro DDCreator <b>and</b> the implementation classes of the
     * home and remote interfaces.
     */ Modifier private ReferenceType String VariableDeclarator classpath MethodDeclaration /**
     * Do the work.
     *
     * The work is actually done by creating a helper task. This approach allows
     * the classpath of the helper task to be set. Since the weblogic tools require
     * the class files of the project's home and remote interfaces to be available in
     * the classpath, this also avoids having to start ant with the class path of the
     * project it is building.
     *
     * @exception BuildException if something goes wrong with the build
     */ Modifier public execute BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference descriptorDirectory Literal null MethodInvocation ! descriptorDirectory isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""descriptors directory "" MethodInvocation descriptorDirectory getPath Literal "" is not valid"" End IfStatement BinaryOperation || BinaryOperation == MemberReference generatedFilesDirectory Literal null MethodInvocation ! generatedFilesDirectory isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""dest directory "" MethodInvocation generatedFilesDirectory getPath Literal "" is not valid"" End LocalVariableDeclaration ReferenceType String VariableDeclarator args BinaryOperation + BinaryOperation + MemberReference descriptorDirectory Literal "" "" MemberReference generatedFilesDirectory LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds SuperMethodInvocation MemberReference descriptorDirectory getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation ds getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference args BinaryOperation + Literal "" "" MemberReference ArraySelector MemberReference i files += End LocalVariableDeclaration ReferenceType String VariableDeclarator systemClassPath MethodInvocation System Literal ""java.class.path"" getProperty LocalVariableDeclaration ReferenceType String VariableDeclarator execClassPath MethodInvocation MethodInvocation BinaryOperation + BinaryOperation + MemberReference systemClassPath Literal "":"" MemberReference classpath translatePath getProject LocalVariableDeclaration ReferenceType Java VariableDeclarator ddCreatorTask Cast ReferenceType Java MethodInvocation MethodInvocation Literal ""java"" createTask getProject StatementExpression MethodInvocation ddCreatorTask MethodInvocation getTaskName setTaskName StatementExpression MethodInvocation ddCreatorTask Literal true setFork StatementExpression MethodInvocation ddCreatorTask Literal ""org.apache.tools.ant.taskdefs.optional.ejb.DDCreatorHelper"" setClassname LocalVariableDeclaration ReferenceType Commandline ReferenceType Argument VariableDeclarator arguments MethodInvocation ddCreatorTask createArg StatementExpression MethodInvocation arguments MemberReference args setLine StatementExpression MethodInvocation ddCreatorTask ClassCreator ReferenceType Path MethodInvocation getProject MemberReference execClassPath setClasspath IfStatement BinaryOperation != MethodInvocation ddCreatorTask executeJava Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Execution of ddcreator helper failed"" End MethodDeclaration /**
     * Set the directory from where the text descriptions of the deployment descriptors are
     * to be read.
     *
     * @param dirName the name of the directory containing the text deployment descriptor files.
     */ Modifier public setDescriptors FormalParameter ReferenceType String dirName StatementExpression Assignment MemberReference descriptorDirectory ClassCreator ReferenceType File MemberReference dirName = MethodDeclaration /**
     * Set the directory into which the serialized deployment descriptors are to
     * be written.
     *
     * @param dirName the name of the directory into which the serialised deployment
     *                descriptors are written.
     */ Modifier public setDest FormalParameter ReferenceType String dirName StatementExpression Assignment MemberReference generatedFilesDirectory ClassCreator ReferenceType File MemberReference dirName = MethodDeclaration /**
     * Set the classpath to be used for this compilation.
     *
     * @param s the classpath to use for the ddcreator tool.
     */ Modifier public setClasspath FormalParameter ReferenceType String s StatementExpression Assignment This MemberReference classpath MethodInvocation MethodInvocation MemberReference s translatePath getProject = ReferenceType MatchingTask",0
34,34,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.extension Import java.text.ParseException Import java.util.ArrayList Import java.util.Arrays Import java.util.Iterator Import java.util.Map Import java.util.jar.Attributes Import java.util.jar.Manifest ClassDeclaration Modifier public final /**
 * <p>Utility class that represents either an available ""Optional Package""
 * (formerly known as ""Standard Extension"") as described in the manifest
 * of a JAR file, or the requirement for such an optional package.</p>
 *
 * <p>For more information about optional packages, see the document
 * <em>Optional Package Versioning</em> in the documentation bundle for your
 * Java2 Standard Edition package, in file
 * <code>guide/extensions/versioning.html</code>.</p>
 *
 * @version $Revision$ $Date$
 */ Specification FieldDeclaration /**
     * Manifest Attribute Name object for SPECIFICATION_TITLE.
     * @see Attributes.Name#SPECIFICATION_TITLE
     */ Modifier public final static ReferenceType Attributes ReferenceType Name VariableDeclarator SPECIFICATION_TITLE MemberReference Attributes.Name SPECIFICATION_TITLE FieldDeclaration /**
     * Manifest Attribute Name object for SPECIFICATION_VERSION.
     * @see Attributes.Name#SPECIFICATION_VERSION
     */ Modifier public final static ReferenceType Attributes ReferenceType Name VariableDeclarator SPECIFICATION_VERSION MemberReference Attributes.Name SPECIFICATION_VERSION FieldDeclaration /**
     * Manifest Attribute Name object for SPECIFICATION_VENDOR.
     * @see Attributes.Name#SPECIFICATION_VENDOR
     */ Modifier public final static ReferenceType Attributes ReferenceType Name VariableDeclarator SPECIFICATION_VENDOR MemberReference Attributes.Name SPECIFICATION_VENDOR FieldDeclaration /**
     * Manifest Attribute Name object for IMPLEMENTATION_TITLE.
     * @see Attributes.Name#IMPLEMENTATION_TITLE
     */ Modifier public final static ReferenceType Attributes ReferenceType Name VariableDeclarator IMPLEMENTATION_TITLE MemberReference Attributes.Name IMPLEMENTATION_TITLE FieldDeclaration /**
     * Manifest Attribute Name object for IMPLEMENTATION_VERSION.
     * @see Attributes.Name#IMPLEMENTATION_VERSION
     */ Modifier public final static ReferenceType Attributes ReferenceType Name VariableDeclarator IMPLEMENTATION_VERSION MemberReference Attributes.Name IMPLEMENTATION_VERSION FieldDeclaration /**
     * Manifest Attribute Name object for IMPLEMENTATION_VENDOR.
     * @see Attributes.Name#IMPLEMENTATION_VENDOR
     */ Modifier public final static ReferenceType Attributes ReferenceType Name VariableDeclarator IMPLEMENTATION_VENDOR MemberReference Attributes.Name IMPLEMENTATION_VENDOR FieldDeclaration /**
     * Enum indicating that extension is compatible with other Package
     * Specification.
     */ Modifier public final static ReferenceType Compatibility VariableDeclarator COMPATIBLE ClassCreator ReferenceType Compatibility Literal ""COMPATIBLE"" FieldDeclaration /**
     * Enum indicating that extension requires an upgrade
     * of specification to be compatible with other Package Specification.
     */ Modifier public final static ReferenceType Compatibility VariableDeclarator REQUIRE_SPECIFICATION_UPGRADE ClassCreator ReferenceType Compatibility Literal ""REQUIRE_SPECIFICATION_UPGRADE"" FieldDeclaration /**
     * Enum indicating that extension requires a vendor
     * switch to be compatible with other Package Specification.
     */ Modifier public final static ReferenceType Compatibility VariableDeclarator REQUIRE_VENDOR_SWITCH ClassCreator ReferenceType Compatibility Literal ""REQUIRE_VENDOR_SWITCH"" FieldDeclaration /**
     * Enum indicating that extension requires an upgrade
     * of implementation to be compatible with other Package Specification.
     */ Modifier public final static ReferenceType Compatibility VariableDeclarator REQUIRE_IMPLEMENTATION_CHANGE ClassCreator ReferenceType Compatibility Literal ""REQUIRE_IMPLEMENTATION_CHANGE"" FieldDeclaration /**
     * This enum indicates that an extension is incompatible with
     * other Package Specification in ways other than other enums
     * indicate. For example, the other Package Specification
     * may have a different ID.
     */ Modifier public final static ReferenceType Compatibility VariableDeclarator INCOMPATIBLE ClassCreator ReferenceType Compatibility Literal ""INCOMPATIBLE"" FieldDeclaration /**
     * The name of the Package Specification.
     */ Modifier private ReferenceType String VariableDeclarator specificationTitle FieldDeclaration /**
     * The version number (dotted decimal notation) of the specification
     * to which this optional package conforms.
     */ Modifier private ReferenceType DeweyDecimal VariableDeclarator specificationVersion FieldDeclaration /**
     * The name of the company or organization that originated the
     * specification to which this specification conforms.
     */ Modifier private ReferenceType String VariableDeclarator specificationVendor FieldDeclaration /**
     * The title of implementation.
     */ Modifier private ReferenceType String VariableDeclarator implementationTitle FieldDeclaration /**
     * The name of the company or organization that produced this
     * implementation of this specification.
     */ Modifier private ReferenceType String VariableDeclarator implementationVendor FieldDeclaration /**
     * The version string for implementation. The version string is
     * opaque.
     */ Modifier private ReferenceType String VariableDeclarator implementationVersion FieldDeclaration /**
     * The sections of jar that the specification applies to.
     */ Modifier private ReferenceType String VariableDeclarator sections MethodDeclaration /**
     * Return an array of <code>Package Specification</code> objects.
     * If there are no such optional packages, a zero-length array is returned.
     *
     * @param manifest Manifest to be parsed
     * @return the Package Specifications extensions in specified manifest
     * @throws ParseException if the attributes of the specifications cannot
     * be parsed according to their expected formats.
     */ Modifier public static ReferenceType Specification getSpecifications FormalParameter Modifier final ReferenceType Manifest manifest ParseException IfStatement BinaryOperation == Literal null MemberReference manifest BlockStatement ReturnStatement ArrayCreator ReferenceType Specification Literal 0 End LocalVariableDeclaration Modifier final ReferenceType ArrayList VariableDeclarator results ClassCreator ReferenceType ArrayList LocalVariableDeclaration Modifier final ReferenceType Map VariableDeclarator entries MethodInvocation manifest getEntries LocalVariableDeclaration Modifier final ReferenceType Iterator VariableDeclarator keys MethodInvocation entries MethodInvocation iterator keySet WhileStatement MethodInvocation keys hasNext BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator key Cast ReferenceType String MethodInvocation keys next LocalVariableDeclaration Modifier final ReferenceType Attributes VariableDeclarator attributes Cast ReferenceType Attributes MethodInvocation entries MemberReference key get LocalVariableDeclaration Modifier final ReferenceType Specification VariableDeclarator specification MethodInvocation MemberReference key MemberReference attributes getSpecification IfStatement BinaryOperation != Literal null MemberReference specification BlockStatement StatementExpression MethodInvocation results MemberReference specification add End End LocalVariableDeclaration Modifier final ReferenceType ArrayList VariableDeclarator trimmedResults MethodInvocation MemberReference results removeDuplicates ReturnStatement Cast ReferenceType Specification MethodInvocation trimmedResults ArrayCreator ReferenceType Specification Literal 0 toArray ConstructorDeclaration Modifier public /**
     * The constructor to create Package Specification object.
     * Note that every component is allowed to be specified
     * but only the specificationTitle is mandatory.
     *
     * @param specificationTitle the name of specification.
     * @param specificationVersion the specification Version.
     * @param specificationVendor the specification Vendor.
     * @param implementationTitle the title of implementation.
     * @param implementationVersion the implementation Version.
     * @param implementationVendor the implementation Vendor.
     */ Specification FormalParameter Modifier final ReferenceType String specificationTitle FormalParameter Modifier final ReferenceType String specificationVersion FormalParameter Modifier final ReferenceType String specificationVendor FormalParameter Modifier final ReferenceType String implementationTitle FormalParameter Modifier final ReferenceType String implementationVersion FormalParameter Modifier final ReferenceType String implementationVendor StatementExpression ExplicitConstructorInvocation MemberReference specificationTitle MemberReference specificationVersion MemberReference specificationVendor MemberReference implementationTitle MemberReference implementationVersion MemberReference implementationVendor Literal null ConstructorDeclaration Modifier public /**
     * The constructor to create Package Specification object.
     * Note that every component is allowed to be specified
     * but only the specificationTitle is mandatory.
     *
     * @param specificationTitle the name of specification.
     * @param specificationVersion the specification Version.
     * @param specificationVendor the specification Vendor.
     * @param implementationTitle the title of implementation.
     * @param implementationVersion the implementation Version.
     * @param implementationVendor the implementation Vendor.
     * @param sections the sections/packages that Specification applies to.
     */ Specification FormalParameter Modifier final ReferenceType String specificationTitle FormalParameter Modifier final ReferenceType String specificationVersion FormalParameter Modifier final ReferenceType String specificationVendor FormalParameter Modifier final ReferenceType String implementationTitle FormalParameter Modifier final ReferenceType String implementationVersion FormalParameter Modifier final ReferenceType String implementationVendor FormalParameter Modifier final ReferenceType String sections StatementExpression Assignment This MemberReference specificationTitle MemberReference specificationTitle = StatementExpression Assignment This MemberReference specificationVendor MemberReference specificationVendor = IfStatement BinaryOperation != Literal null MemberReference specificationVersion BlockStatement TryStatement StatementExpression Assignment This MemberReference specificationVersion ClassCreator ReferenceType DeweyDecimal MemberReference specificationVersion = CatchClause CatchClauseParameter NumberFormatException nfe LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator error BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Bad specification version format '"" MemberReference specificationVersion Literal ""' in '"" MemberReference specificationTitle Literal ""'. (Reason: "" MemberReference nfe Literal "")"" ThrowStatement ClassCreator ReferenceType IllegalArgumentException MemberReference error End StatementExpression Assignment This MemberReference implementationTitle MemberReference implementationTitle = StatementExpression Assignment This MemberReference implementationVendor MemberReference implementationVendor = StatementExpression Assignment This MemberReference implementationVersion MemberReference implementationVersion = IfStatement BinaryOperation == Literal null This MemberReference specificationTitle BlockStatement ThrowStatement ClassCreator ReferenceType NullPointerException Literal ""specificationTitle"" End LocalVariableDeclaration ReferenceType String VariableDeclarator copy Literal null IfStatement BinaryOperation != Literal null MemberReference sections BlockStatement StatementExpression Assignment MemberReference copy ArrayCreator ReferenceType String MemberReference sections length = StatementExpression MethodInvocation System MemberReference sections Literal 0 MemberReference copy Literal 0 MemberReference sections length arraycopy End StatementExpression Assignment This MemberReference sections MemberReference copy = MethodDeclaration /**
     * Get the title of the specification.
     *
     * @return the title of speciication
     */ Modifier public ReferenceType String getSpecificationTitle ReturnStatement MemberReference specificationTitle MethodDeclaration /**
     * Get the vendor of the specification.
     *
     * @return the vendor of the specification.
     */ Modifier public ReferenceType String getSpecificationVendor ReturnStatement MemberReference specificationVendor MethodDeclaration /**
     * Get the title of the specification.
     *
     * @return the title of the specification.
     */ Modifier public ReferenceType String getImplementationTitle ReturnStatement MemberReference implementationTitle MethodDeclaration /**
     * Get the version of the specification.
     *
     * @return the version of the specification.
     */ Modifier public ReferenceType DeweyDecimal getSpecificationVersion ReturnStatement MemberReference specificationVersion MethodDeclaration /**
     * Get the vendor of the extensions implementation.
     *
     * @return the vendor of the extensions implementation.
     */ Modifier public ReferenceType String getImplementationVendor ReturnStatement MemberReference implementationVendor MethodDeclaration /**
     * Get the version of the implementation.
     *
     * @return the version of the implementation.
     */ Modifier public ReferenceType String getImplementationVersion ReturnStatement MemberReference implementationVersion MethodDeclaration /**
     * Return an array containing sections to which specification applies
     * or null if relevent to no sections.
     *
     * @return an array containing sections to which specification applies
     *         or null if relevent to no sections.
     */ Modifier public ReferenceType String getSections IfStatement BinaryOperation == Literal null MemberReference sections BlockStatement ReturnStatement Literal null BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator newSections ArrayCreator ReferenceType String MemberReference sections length StatementExpression MethodInvocation System MemberReference sections Literal 0 MemberReference newSections Literal 0 MemberReference sections length arraycopy ReturnStatement MemberReference newSections End MethodDeclaration /**
     * Return a Compatibility enum indicating the relationship of this
     * <code>Package Specification</code> with the specified
     * <code>Extension</code>.
     *
     * @param other the other specification
     * @return the enum indicating the compatibility (or lack thereof)
     *         of specifed Package Specification
     */ Modifier public ReferenceType Compatibility getCompatibilityWith FormalParameter Modifier final ReferenceType Specification other IfStatement MethodInvocation ! specificationTitle MethodInvocation other getSpecificationTitle equals BlockStatement ReturnStatement MemberReference INCOMPATIBLE End LocalVariableDeclaration Modifier final ReferenceType DeweyDecimal VariableDeclarator specificationVersion MethodInvocation other getSpecificationVersion IfStatement BinaryOperation != Literal null MemberReference specificationVersion BlockStatement IfStatement BinaryOperation || BinaryOperation == Literal null MemberReference specificationVersion MethodInvocation ! MemberReference specificationVersion MemberReference specificationVersion isCompatible BlockStatement ReturnStatement MemberReference REQUIRE_SPECIFICATION_UPGRADE End End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator implementationVendor MethodInvocation other getImplementationVendor IfStatement BinaryOperation != Literal null MemberReference implementationVendor BlockStatement IfStatement BinaryOperation || BinaryOperation == Literal null MemberReference implementationVendor MethodInvocation ! implementationVendor MemberReference implementationVendor equals BlockStatement ReturnStatement MemberReference REQUIRE_VENDOR_SWITCH End End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator implementationVersion MethodInvocation other getImplementationVersion IfStatement BinaryOperation != Literal null MemberReference implementationVersion BlockStatement IfStatement BinaryOperation || BinaryOperation == Literal null MemberReference implementationVersion MethodInvocation ! implementationVersion MemberReference implementationVersion equals BlockStatement ReturnStatement MemberReference REQUIRE_IMPLEMENTATION_CHANGE End End ReturnStatement MemberReference COMPATIBLE MethodDeclaration /**
     * Return <code>true</code> if the specified <code>package</code>
     * is satisfied by this <code>Specification</code>. Otherwise, return
     * <code>false</code>.
     *
     * @param other the specification
     * @return true if the specification is compatible with this specification
     */ Modifier public BasicType boolean isCompatibleWith FormalParameter Modifier final ReferenceType Specification other ReturnStatement BinaryOperation == MemberReference COMPATIBLE MethodInvocation MemberReference other getCompatibilityWith MethodDeclaration /**
     * Return a String representation of this object.
     *
     * @return string representation of object.
     */ Modifier public ReferenceType String toString LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator lineSeparator MethodInvocation System Literal ""line.separator"" getProperty LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator brace Literal "": "" LocalVariableDeclaration Modifier final ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer MethodInvocation SPECIFICATION_TITLE toString StatementExpression MethodInvocation sb MemberReference brace append StatementExpression MethodInvocation sb MemberReference specificationTitle append StatementExpression MethodInvocation sb MemberReference lineSeparator append IfStatement BinaryOperation != Literal null MemberReference specificationVersion BlockStatement StatementExpression MethodInvocation sb MemberReference SPECIFICATION_VERSION append StatementExpression MethodInvocation sb MemberReference brace append StatementExpression MethodInvocation sb MemberReference specificationVersion append StatementExpression MethodInvocation sb MemberReference lineSeparator append End IfStatement BinaryOperation != Literal null MemberReference specificationVendor BlockStatement StatementExpression MethodInvocation sb MemberReference SPECIFICATION_VENDOR append StatementExpression MethodInvocation sb MemberReference brace append StatementExpression MethodInvocation sb MemberReference specificationVendor append StatementExpression MethodInvocation sb MemberReference lineSeparator append End IfStatement BinaryOperation != Literal null MemberReference implementationTitle BlockStatement StatementExpression MethodInvocation sb MemberReference IMPLEMENTATION_TITLE append StatementExpression MethodInvocation sb MemberReference brace append StatementExpression MethodInvocation sb MemberReference implementationTitle append StatementExpression MethodInvocation sb MemberReference lineSeparator append End IfStatement BinaryOperation != Literal null MemberReference implementationVersion BlockStatement StatementExpression MethodInvocation sb MemberReference IMPLEMENTATION_VERSION append StatementExpression MethodInvocation sb MemberReference brace append StatementExpression MethodInvocation sb MemberReference implementationVersion append StatementExpression MethodInvocation sb MemberReference lineSeparator append End IfStatement BinaryOperation != Literal null MemberReference implementationVendor BlockStatement StatementExpression MethodInvocation sb MemberReference IMPLEMENTATION_VENDOR append StatementExpression MethodInvocation sb MemberReference brace append StatementExpression MethodInvocation sb MemberReference implementationVendor append StatementExpression MethodInvocation sb MemberReference lineSeparator append End ReturnStatement MethodInvocation sb toString MethodDeclaration /**
     * Return <code>true</code> if the first version number is greater than
     * or equal to the second; otherwise return <code>false</code>.
     *
     * @param first First version number (dotted decimal)
     * @param second Second version number (dotted decimal)
     */ Modifier private BasicType boolean isCompatible FormalParameter Modifier final ReferenceType DeweyDecimal first FormalParameter Modifier final ReferenceType DeweyDecimal second ReturnStatement MethodInvocation first MemberReference second isGreaterThanOrEqual MethodDeclaration /**
     * Combine all specifications objects that are identical except
     * for the sections.
     *
     * <p>Note this is very inefficent and should probably be fixed
     * in the future.</p>
     *
     * @param list the array of results to trim
     * @return an array list with all duplicates removed
     */ Modifier private static ReferenceType ArrayList removeDuplicates FormalParameter Modifier final ReferenceType ArrayList list LocalVariableDeclaration Modifier final ReferenceType ArrayList VariableDeclarator results ClassCreator ReferenceType ArrayList LocalVariableDeclaration Modifier final ReferenceType ArrayList VariableDeclarator sections ClassCreator ReferenceType ArrayList WhileStatement BinaryOperation > MethodInvocation list size Literal 0 BlockStatement LocalVariableDeclaration Modifier final ReferenceType Specification VariableDeclarator specification Cast ReferenceType Specification MethodInvocation list Literal 0 remove LocalVariableDeclaration Modifier final ReferenceType Iterator VariableDeclarator iterator MethodInvocation list iterator WhileStatement MethodInvocation iterator hasNext BlockStatement LocalVariableDeclaration Modifier final ReferenceType Specification VariableDeclarator other Cast ReferenceType Specification MethodInvocation iterator next IfStatement MethodInvocation MemberReference specification MemberReference other isEqual BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator otherSections MethodInvocation other getSections IfStatement BinaryOperation != Literal null MemberReference sections BlockStatement StatementExpression MethodInvocation sections MethodInvocation Arrays MemberReference otherSections asList addAll End StatementExpression MethodInvocation iterator remove End End LocalVariableDeclaration Modifier final ReferenceType Specification VariableDeclarator merged MethodInvocation MemberReference specification MemberReference sections mergeInSections StatementExpression MethodInvocation results MemberReference merged add StatementExpression MethodInvocation sections clear End ReturnStatement MemberReference results MethodDeclaration /**
     * Test if two specifications are equal except for their sections.
     *
     * @param specification one specificaiton
     * @param other the ohter specification
     * @return true if two specifications are equal except for their
     *         sections, else false
     */ Modifier private static BasicType boolean isEqual FormalParameter Modifier final ReferenceType Specification specification FormalParameter Modifier final ReferenceType Specification other ReturnStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && MethodInvocation specification MethodInvocation MethodInvocation other getSpecificationTitle equals getSpecificationTitle MethodInvocation specification MethodInvocation MethodInvocation other getSpecificationVersion isEqual getSpecificationVersion MethodInvocation specification MethodInvocation MethodInvocation other getSpecificationVendor equals getSpecificationVendor MethodInvocation specification MethodInvocation MethodInvocation other getImplementationTitle equals getImplementationTitle MethodInvocation specification MethodInvocation MethodInvocation other getImplementationVersion equals getImplementationVersion MethodInvocation specification MethodInvocation MethodInvocation other getImplementationVendor equals getImplementationVendor MethodDeclaration /**
     * Merge the specified sections into specified section and return result.
     * If no sections to be added then just return original specification.
     *
     * @param specification the specification
     * @param sectionsToAdd the list of sections to merge
     * @return the merged specification
     */ Modifier private static ReferenceType Specification mergeInSections FormalParameter Modifier final ReferenceType Specification specification FormalParameter Modifier final ReferenceType ArrayList sectionsToAdd IfStatement BinaryOperation == Literal 0 MethodInvocation sectionsToAdd size BlockStatement ReturnStatement MemberReference specification BlockStatement StatementExpression MethodInvocation sectionsToAdd MethodInvocation Arrays MethodInvocation specification getSections asList addAll LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator sections Cast ReferenceType String MethodInvocation sectionsToAdd ArrayCreator ReferenceType String MethodInvocation sectionsToAdd size toArray ReturnStatement ClassCreator ReferenceType Specification MethodInvocation specification getSpecificationTitle MethodInvocation specification MethodInvocation toString getSpecificationVersion MethodInvocation specification getSpecificationVendor MethodInvocation specification getImplementationTitle MethodInvocation specification getImplementationVersion MethodInvocation specification getImplementationVendor MemberReference sections End MethodDeclaration /**
     * Trim the supplied string if the string is non-null
     *
     * @param value the string to trim or null
     * @return the trimmed string or null
     */ Modifier private static ReferenceType String getTrimmedString FormalParameter Modifier final ReferenceType String value IfStatement BinaryOperation == Literal null MemberReference value BlockStatement ReturnStatement Literal null BlockStatement ReturnStatement MethodInvocation value trim End MethodDeclaration /**
     * Extract an Package Specification from Attributes.
     *
     * @param attributes Attributes to searched
     * @return the new Specification object, or null
     */ Modifier private static ReferenceType Specification getSpecification FormalParameter Modifier final ReferenceType String section FormalParameter Modifier final ReferenceType Attributes attributes ParseException LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator name MethodInvocation MethodInvocation attributes MemberReference SPECIFICATION_TITLE getValue getTrimmedString IfStatement BinaryOperation == Literal null MemberReference name BlockStatement ReturnStatement Literal null End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator specVendor MethodInvocation MethodInvocation attributes MemberReference SPECIFICATION_VENDOR getValue getTrimmedString IfStatement BinaryOperation == Literal null MemberReference specVendor BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + Literal ""Missing "" MemberReference SPECIFICATION_VENDOR Literal 0 End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator specVersion MethodInvocation MethodInvocation attributes MemberReference SPECIFICATION_VERSION getValue getTrimmedString IfStatement BinaryOperation == Literal null MemberReference specVersion BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + Literal ""Missing "" MemberReference SPECIFICATION_VERSION Literal 0 End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator impTitle MethodInvocation MethodInvocation attributes MemberReference IMPLEMENTATION_TITLE getValue getTrimmedString IfStatement BinaryOperation == Literal null MemberReference impTitle BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + Literal ""Missing "" MemberReference IMPLEMENTATION_TITLE Literal 0 End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator impVersion MethodInvocation MethodInvocation attributes MemberReference IMPLEMENTATION_VERSION getValue getTrimmedString IfStatement BinaryOperation == Literal null MemberReference impVersion BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + Literal ""Missing "" MemberReference IMPLEMENTATION_VERSION Literal 0 End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator impVendor MethodInvocation MethodInvocation attributes MemberReference IMPLEMENTATION_VENDOR getValue getTrimmedString IfStatement BinaryOperation == Literal null MemberReference impVendor BlockStatement ThrowStatement ClassCreator ReferenceType ParseException BinaryOperation + Literal ""Missing "" MemberReference IMPLEMENTATION_VENDOR Literal 0 End ReturnStatement ClassCreator ReferenceType Specification MemberReference name MemberReference specVersion MemberReference specVendor MemberReference impTitle MemberReference impVersion MemberReference impVendor ArrayCreator ReferenceType String ArrayInitializer MemberReference section",1
518,518,,0
566,566,,0
135,135,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.pvcs Import java.io.BufferedReader Import java.io.BufferedWriter Import java.io.File Import java.io.FileNotFoundException Import java.io.FileOutputStream Import java.io.FileReader Import java.io.FileWriter Import java.io.IOException Import java.text.MessageFormat Import java.text.ParseException Import java.util.Enumeration Import java.util.Random Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.ExecuteStreamHandler Import org.apache.tools.ant.taskdefs.LogOutputStream Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.taskdefs.PumpStreamHandler Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 *
 * Extracts the latest edition of the source code from a PVCS repository.
 * PVCS is a version control system
 * developed by <a href=""http://www.merant.com/products/pvcs"">Merant</a>.
 * <br>
 * Before using this tag, the user running ant must have access to the commands
 * of PVCS (get and pcli) and must have access to the repository. Note that the way to specify
 * the repository is platform dependent so use property to specify location of repository.
 * <br>
 * This version has been tested agains PVCS version 6.5 and 6.6 under Windows and Solaris.

 *
 * <b>19-04-2001</b> <p>The task now has a more robust
 * parser. It allows for platform independant file paths
 * and supports file names with <i>()</i>. Thanks to Erik Husby for
 * bringing the bug to my attention.
 *
 * <b>27-04-2001</b> <p>UNC paths are now handled properly.
 * Fix provided by Don Jeffery. He also added an <i>UpdateOnly</i> flag
 * that, when true, conditions the PVCS get using the -U option to only
 * update those files that have a modification time (in PVCS) that is newer
 * than the existing workfile.
 *
 * <b>25-10-2002</b> <p>Added a revision attribute that currently is a
 * synonym for label, but in a future release the behavior of the label
 * attribute will change to use the -v option of GET.  See bug #13847 for
 * discussion.
 *
 */ Pvcs FieldDeclaration Modifier private ReferenceType String VariableDeclarator pvcsbin FieldDeclaration Modifier private ReferenceType String VariableDeclarator repository FieldDeclaration Modifier private ReferenceType String VariableDeclarator pvcsProject FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator pvcsProjects FieldDeclaration Modifier private ReferenceType String VariableDeclarator workspace FieldDeclaration Modifier private ReferenceType String VariableDeclarator force FieldDeclaration Modifier private ReferenceType String VariableDeclarator promotiongroup FieldDeclaration Modifier private ReferenceType String VariableDeclarator label FieldDeclaration Modifier private ReferenceType String VariableDeclarator revision FieldDeclaration Modifier private BasicType boolean VariableDeclarator ignorerc FieldDeclaration Modifier private BasicType boolean VariableDeclarator updateOnly FieldDeclaration Modifier private ReferenceType String VariableDeclarator filenameFormat FieldDeclaration Modifier private ReferenceType String VariableDeclarator lineStart FieldDeclaration Modifier private ReferenceType String VariableDeclarator userId FieldDeclaration Modifier private ReferenceType String VariableDeclarator config FieldDeclaration /**
     * Constant for the thing to execute
     */ Modifier private final static ReferenceType String VariableDeclarator PCLI_EXE Literal ""pcli"" FieldDeclaration /**
     * Constant for the thing to execute
     */ Modifier private final static ReferenceType String VariableDeclarator GET_EXE Literal ""get"" MethodDeclaration Modifier protected BasicType int runCmd FormalParameter ReferenceType Commandline cmd FormalParameter ReferenceType ExecuteStreamHandler out TryStatement LocalVariableDeclaration ReferenceType Project VariableDeclarator aProj MethodInvocation getProject LocalVariableDeclaration ReferenceType Execute VariableDeclarator exe ClassCreator ReferenceType Execute MemberReference out StatementExpression MethodInvocation exe MemberReference aProj setAntRun StatementExpression MethodInvocation exe MethodInvocation aProj getBaseDir setWorkingDirectory StatementExpression MethodInvocation exe MethodInvocation cmd getCommandline setCommandline ReturnStatement MethodInvocation exe execute CatchClause CatchClauseParameter java.io.IOException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Failed executing: "" MethodInvocation cmd toString Literal "". Exception: "" MethodInvocation e getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation MethodDeclaration Modifier private ReferenceType String getExecutable FormalParameter ReferenceType String exe LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator correctedExe ClassCreator ReferenceType StringBuffer IfStatement BinaryOperation != MethodInvocation getPvcsbin Literal null BlockStatement IfStatement MethodInvocation pvcsbin MemberReference File separator endsWith BlockStatement StatementExpression MethodInvocation correctedExe MemberReference pvcsbin append BlockStatement StatementExpression MethodInvocation correctedExe MethodInvocation MemberReference File separator append MemberReference pvcsbin append End End ReturnStatement MethodInvocation correctedExe MethodInvocation toString MemberReference exe append MethodDeclaration /**
     * @exception org.apache.tools.ant.BuildException Something is stopping the build...
     */ Modifier public execute org.apache.tools.ant.BuildException LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 IfStatement BinaryOperation || BinaryOperation == MemberReference repository Literal null MethodInvocation repository MethodInvocation Literal """" equals trim BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Required argument repository not specified"" End LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline StatementExpression MethodInvocation commandLine MethodInvocation MemberReference PCLI_EXE getExecutable setExecutable StatementExpression MethodInvocation commandLine MethodInvocation Literal ""lvf"" setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation Literal ""-z"" setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation Literal ""-aw"" setValue createArgument IfStatement BinaryOperation != MethodInvocation getWorkspace Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + Literal ""-sp"" MethodInvocation getWorkspace setValue createArgument End StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + Literal ""-pr"" MethodInvocation getRepository setValue createArgument LocalVariableDeclaration ReferenceType String VariableDeclarator uid MethodInvocation getUserId IfStatement BinaryOperation != MemberReference uid Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + Literal ""-id"" MemberReference uid setValue createArgument End IfStatement BinaryOperation && BinaryOperation == MethodInvocation getPvcsproject Literal null MethodInvocation MethodInvocation isEmpty getPvcsprojects BlockStatement StatementExpression Assignment MemberReference pvcsProject Literal ""/"" = End IfStatement BinaryOperation != MethodInvocation getPvcsproject Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getPvcsproject setValue createArgument End IfStatement MethodInvocation ! MethodInvocation isEmpty getPvcsprojects BlockStatement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation MethodInvocation elements getPvcsprojects WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator projectName Cast ReferenceType PvcsProject MethodInvocation e nextElement IfStatement BinaryOperation || BinaryOperation == MemberReference projectName Literal null MethodInvocation projectName MethodInvocation Literal """" equals trim BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""name is a required attribute "" Literal ""of pvcsproject"" End StatementExpression MethodInvocation commandLine MethodInvocation MemberReference projectName setValue createArgument End End LocalVariableDeclaration ReferenceType File VariableDeclarator tmp Literal null LocalVariableDeclaration ReferenceType File VariableDeclarator tmp2 Literal null TryStatement LocalVariableDeclaration ReferenceType Random VariableDeclarator rand ClassCreator ReferenceType Random MethodInvocation System currentTimeMillis StatementExpression Assignment MemberReference tmp ClassCreator ReferenceType File BinaryOperation + BinaryOperation + Literal ""pvcs_ant_"" MethodInvocation rand nextLong Literal "".log"" = LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator fos ClassCreator ReferenceType FileOutputStream MemberReference tmp StatementExpression Assignment MemberReference tmp2 ClassCreator ReferenceType File BinaryOperation + BinaryOperation + Literal ""pvcs_ant_"" MethodInvocation rand nextLong Literal "".log"" = StatementExpression MethodInvocation MethodInvocation commandLine describeCommand MemberReference Project MSG_VERBOSE log TryStatement StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine ClassCreator ReferenceType PumpStreamHandler MemberReference fos ClassCreator ReferenceType LogOutputStream This MemberReference Project MSG_WARN runCmd = StatementExpression MethodInvocation fos close IfStatement BinaryOperation && MethodInvocation Execute MemberReference result isFailure MemberReference ! ignorerc BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End IfStatement MethodInvocation ! tmp exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Communication between ant and pvcs "" Literal ""failed. No output generated from executing PVCS "" Literal ""commandline interface \""pcli\"" and \""get\"""" End StatementExpression MethodInvocation Literal ""Creating folders"" MemberReference Project MSG_INFO log StatementExpression MethodInvocation MemberReference tmp createFolders StatementExpression MethodInvocation MemberReference tmp MemberReference tmp2 massagePCLI StatementExpression MethodInvocation commandLine clearArgs StatementExpression MethodInvocation commandLine MethodInvocation MemberReference GET_EXE getExecutable setExecutable IfStatement BinaryOperation && BinaryOperation != MethodInvocation getConfig Literal null BinaryOperation > MethodInvocation MethodInvocation length getConfig Literal 0 BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + Literal ""-c"" MethodInvocation getConfig setValue createArgument End IfStatement BinaryOperation && BinaryOperation != MethodInvocation getForce Literal null MethodInvocation MethodInvocation Literal ""yes"" equals getForce BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation Literal ""-Y"" setValue createArgument BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation Literal ""-N"" setValue createArgument End IfStatement BinaryOperation != MethodInvocation getPromotiongroup Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + Literal ""-G"" MethodInvocation getPromotiongroup setValue createArgument BlockStatement IfStatement BinaryOperation != MethodInvocation getLabel Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + Literal ""-r"" MethodInvocation getLabel setValue createArgument BlockStatement IfStatement BinaryOperation != MethodInvocation getRevision Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + Literal ""-r"" MethodInvocation getRevision setValue createArgument End End End IfStatement MemberReference updateOnly BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation Literal ""-U"" setValue createArgument End StatementExpression MethodInvocation commandLine MethodInvocation BinaryOperation + Literal ""@"" MethodInvocation tmp2 getAbsolutePath setValue createArgument StatementExpression MethodInvocation Literal ""Getting files"" MemberReference Project MSG_INFO log StatementExpression MethodInvocation BinaryOperation + Literal ""Executing "" MethodInvocation commandLine toString MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine ClassCreator ReferenceType LogStreamHandler This MemberReference Project MSG_INFO MemberReference Project MSG_WARN runCmd = IfStatement BinaryOperation && BinaryOperation != MemberReference result Literal 0 MemberReference ! ignorerc BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString Literal "". Return code was "" MemberReference result ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End CatchClause CatchClauseParameter FileNotFoundException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString Literal "". Exception: "" MethodInvocation e getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation CatchClause CatchClauseParameter IOException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString Literal "". Exception: "" MethodInvocation e getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation CatchClause CatchClauseParameter ParseException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString Literal "". Exception: "" MethodInvocation e getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation IfStatement BinaryOperation != MemberReference tmp Literal null BlockStatement StatementExpression MethodInvocation tmp delete End IfStatement BinaryOperation != MemberReference tmp2 Literal null BlockStatement StatementExpression MethodInvocation tmp2 delete End MethodDeclaration /**
     * Parses the file and creates the folders specified in the output section
     */ Modifier private createFolders FormalParameter ReferenceType File file IOException ParseException LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator in Literal null TryStatement StatementExpression Assignment MemberReference in ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType FileReader MemberReference file = LocalVariableDeclaration ReferenceType MessageFormat VariableDeclarator mf ClassCreator ReferenceType MessageFormat MethodInvocation getFilenameFormat LocalVariableDeclaration ReferenceType String VariableDeclarator line MethodInvocation in readLine WhileStatement BinaryOperation != MemberReference line Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Considering \"""" MemberReference line Literal ""\"""" MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation || BinaryOperation || MethodInvocation line Literal ""\""\\"" startsWith MethodInvocation line Literal ""\""/"" startsWith BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation > MethodInvocation line length Literal 3 MethodInvocation line Literal ""\"""" startsWith MethodInvocation Character MethodInvocation line Literal 1 charAt isLetter MethodInvocation String MethodInvocation Literal "":"" equals MethodInvocation line Literal 2 charAt valueOf MethodInvocation String MethodInvocation Literal ""\\"" equals MethodInvocation line Literal 3 charAt valueOf BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator objs MethodInvocation mf MemberReference line parse LocalVariableDeclaration ReferenceType String VariableDeclarator f Cast ReferenceType String MemberReference ArraySelector Literal 1 objs LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation f MemberReference File separator lastIndexOf IfStatement BinaryOperation > MemberReference index Literal - 1 BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator dir ClassCreator ReferenceType File MethodInvocation f Literal 0 MemberReference index substring IfStatement MethodInvocation ! dir exists BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Creating "" MethodInvocation dir getAbsolutePath MemberReference Project MSG_VERBOSE log IfStatement MethodInvocation dir mkdirs BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Created "" MethodInvocation dir getAbsolutePath MemberReference Project MSG_INFO log BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Failed to create "" MethodInvocation dir getAbsolutePath MemberReference Project MSG_INFO log End BlockStatement StatementExpression MethodInvocation BinaryOperation + MethodInvocation dir getAbsolutePath Literal "" exists. Skipping"" MemberReference Project MSG_VERBOSE log End BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""File separator problem with "" MemberReference line MemberReference Project MSG_WARN log End BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Skipped \"""" MemberReference line Literal ""\"""" MemberReference Project MSG_VERBOSE log End StatementExpression Assignment MemberReference line MethodInvocation in readLine = End IfStatement BinaryOperation != MemberReference in Literal null BlockStatement StatementExpression MethodInvocation in close End MethodDeclaration /**
     * Simple hack to handle the PVCS command-line tools botch when
     * handling UNC notation.
     */ Modifier private massagePCLI FormalParameter ReferenceType File in FormalParameter ReferenceType File out FileNotFoundException IOException LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator inReader Literal null LocalVariableDeclaration ReferenceType BufferedWriter VariableDeclarator outWriter Literal null TryStatement StatementExpression Assignment MemberReference inReader ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType FileReader MemberReference in = StatementExpression Assignment MemberReference outWriter ClassCreator ReferenceType BufferedWriter ClassCreator ReferenceType FileWriter MemberReference out = LocalVariableDeclaration ReferenceType String VariableDeclarator s Literal null WhileStatement BinaryOperation != Assignment MemberReference s MethodInvocation inReader readLine = Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator sNormal MethodInvocation s Literal '\\' Literal '/' replace StatementExpression MethodInvocation outWriter MemberReference sNormal write StatementExpression MethodInvocation outWriter newLine End IfStatement BinaryOperation != MemberReference inReader Literal null BlockStatement StatementExpression MethodInvocation inReader close End IfStatement BinaryOperation != MemberReference outWriter Literal null BlockStatement StatementExpression MethodInvocation outWriter close End MethodDeclaration /**
     * Get network name of the PVCS repository
     * @return String
     */ Modifier public ReferenceType String getRepository ReturnStatement MemberReference repository MethodDeclaration /**
     *  The filenameFormat attribute defines a MessageFormat string used
     *  to parse the output of the pcli command.  It defaults to
     *  <code>{0}-arc({1})</code>.  Repositories where the archive
     *   extension is not  -arc should set this.
     */ Modifier public ReferenceType String getFilenameFormat ReturnStatement MemberReference filenameFormat MethodDeclaration /**
     * The format of the folder names; optional.
     * This must be in a format suitable for
     * <code>java.text.MessageFormat</code>.
     *  Index 1 of the format will be used as the file name.
     *  Defaults to <code>{0}-arc({1})</code>
     */ Modifier public setFilenameFormat FormalParameter ReferenceType String f StatementExpression Assignment MemberReference filenameFormat MemberReference f = MethodDeclaration /**

     * The lineStart attribute is used to parse the output of the pcli
     * command. It defaults to <code>&quot;P:</code>.  The parser already
     * knows about / and \\, this property is useful in cases where the
     * repository is accessed on a Windows platform via a drive letter
     * mapping.
     */ Modifier public ReferenceType String getLineStart ReturnStatement MemberReference lineStart MethodDeclaration /**
     * What a valid return value from PVCS looks like
     *  when it describes a file.  Defaults to <code>&quot;P:</code>.
     * If you are not using an UNC name for your repository and the
     * drive letter <code>P</code> is incorrect for your setup, you may
     * need to change this value, UNC names will always be
     * accepted.
     */ Modifier public setLineStart FormalParameter ReferenceType String l StatementExpression Assignment MemberReference lineStart MemberReference l = MethodDeclaration /**
     * The network name of the PVCS repository; required.
     * @param repo String
     */ Modifier public setRepository FormalParameter ReferenceType String repo StatementExpression Assignment MemberReference repository MemberReference repo = MethodDeclaration /**
     * Get name of the project in the PVCS repository
     * @return String
     */ Modifier public ReferenceType String getPvcsproject ReturnStatement MemberReference pvcsProject MethodDeclaration /**
     * The project within the PVCS repository to extract files from;
     * optional, default &quot;/&quot;
     * @param prj String
     */ Modifier public setPvcsproject FormalParameter ReferenceType String prj StatementExpression Assignment MemberReference pvcsProject MemberReference prj = MethodDeclaration /**
     * Get name of the project in the PVCS repository
     * @return Vector
     */ Modifier public ReferenceType Vector getPvcsprojects ReturnStatement MemberReference pvcsProjects MethodDeclaration /**
     * Get name of the workspace to store the retrieved files
     * @return String
     */ Modifier public ReferenceType String getWorkspace ReturnStatement MemberReference workspace MethodDeclaration /**
     * Workspace to use; optional.
     * By specifying a workspace, the files are extracted to that location.
     * A PVCS workspace is a name for a location of the workfiles and
     * isn't as such the location itself.
     * You define the location for a workspace using the PVCS GUI clients.
     * If this isn't specified the default workspace for the current user is used.
     * @param ws String
     */ Modifier public setWorkspace FormalParameter ReferenceType String ws StatementExpression Assignment MemberReference workspace MemberReference ws = MethodDeclaration /**
     * Get name of the PVCS bin directory
     * @return String
     */ Modifier public ReferenceType String getPvcsbin ReturnStatement MemberReference pvcsbin MethodDeclaration /**
     * Specifies the location of the PVCS bin directory; optional if on the PATH.
     * On some systems the PVCS executables <i>pcli</i>
     * and <i>get</i> are not found in the PATH. In such cases this attribute
     * should be set to the bin directory of the PVCS installation containing
     * the executables mentioned before. If this attribute isn't specified the
     * tag expects the executables to be found using the PATH environment variable.
     * @param bin PVCS bin directory
     * @todo use a File setter and resolve paths.
     */ Modifier public setPvcsbin FormalParameter ReferenceType String bin StatementExpression Assignment MemberReference pvcsbin MemberReference bin = MethodDeclaration /**
     * Get value of force
     * @return String
     */ Modifier public ReferenceType String getForce ReturnStatement MemberReference force MethodDeclaration /**
     * Specifies the value of the force argument; optional.
     * If set to <i>yes</i> all files that exists and are
     * writable are overwritten. Default <i>no</i> causes the files
     * that are writable to be ignored. This stops the PVCS command
     * <i>get</i> to stop asking questions!
     * @todo make a boolean setter
     * @param f String (yes/no)
     */ Modifier public setForce FormalParameter ReferenceType String f IfStatement BinaryOperation && BinaryOperation != MemberReference f Literal null MethodInvocation f Literal ""yes"" equalsIgnoreCase BlockStatement StatementExpression Assignment MemberReference force Literal ""yes"" = BlockStatement StatementExpression Assignment MemberReference force Literal ""no"" = End MethodDeclaration /**
     * Get value of promotiongroup
     * @return String
     */ Modifier public ReferenceType String getPromotiongroup ReturnStatement MemberReference promotiongroup MethodDeclaration /**
     * Specifies the name of the promotiongroup argument
     * @param w String
     */ Modifier public setPromotiongroup FormalParameter ReferenceType String w StatementExpression Assignment MemberReference promotiongroup MemberReference w = MethodDeclaration /**
     * Get value of label
     * @return String
     */ Modifier public ReferenceType String getLabel ReturnStatement MemberReference label MethodDeclaration /**
     * Only files marked with this label are extracted; optional.
     * @param l String
     */ Modifier public setLabel FormalParameter ReferenceType String l StatementExpression Assignment MemberReference label MemberReference l = MethodDeclaration /**
     * Get value of revision
     * @return String
     */ Modifier public ReferenceType String getRevision ReturnStatement MemberReference revision MethodDeclaration /**
     * Only files with this revision are extract; optional.
     * @param r String
     */ Modifier public setRevision FormalParameter ReferenceType String r StatementExpression Assignment MemberReference revision MemberReference r = MethodDeclaration /**
     * Get value of ignorereturncode
     * @return String
     */ Modifier public BasicType boolean getIgnoreReturnCode ReturnStatement MemberReference ignorerc MethodDeclaration /**
     * If set to true the return value from executing the pvcs
     * commands are ignored; optional, default false.
     */ Modifier public setIgnoreReturnCode FormalParameter BasicType boolean b StatementExpression Assignment MemberReference ignorerc MemberReference b = MethodDeclaration /**
     * Specify a project within the PVCS repository to extract files from.
     * @param p
     */ Modifier public addPvcsproject FormalParameter ReferenceType PvcsProject p StatementExpression MethodInvocation pvcsProjects MemberReference p addElement MethodDeclaration Modifier public BasicType boolean getUpdateOnly ReturnStatement MemberReference updateOnly MethodDeclaration /**
     * If set to <i>true</i> files are fetched only if
     * newer than existing local files; optional, default false.
     */ Modifier public setUpdateOnly FormalParameter BasicType boolean l StatementExpression Assignment MemberReference updateOnly MemberReference l = MethodDeclaration /**
     * returns the path of the configuration file to be used
     * @return the path of the config file
     */ Modifier public ReferenceType String getConfig ReturnStatement MemberReference config MethodDeclaration /**
     * Sets a configuration file other than the default to be used.
     * These files have a .cfg extension and are often found in archive or pvcsprop folders.
     * @param f config file - can be given absolute or relative to ant basedir
     */ Modifier public setConfig FormalParameter ReferenceType File f StatementExpression Assignment MemberReference config MethodInvocation f toString = MethodDeclaration Modifier public ReferenceType String getUserId ReturnStatement MemberReference userId MethodDeclaration /**
     * User ID; unused.
     * @ant.attribute ignore=""true""
     */ Modifier public setUserId FormalParameter ReferenceType String u StatementExpression Assignment MemberReference userId MemberReference u = ConstructorDeclaration Modifier public /**
     * Creates a Pvcs object
     */ Pvcs StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference pvcsProject Literal null = StatementExpression Assignment MemberReference pvcsProjects ClassCreator ReferenceType Vector = StatementExpression Assignment MemberReference workspace Literal null = StatementExpression Assignment MemberReference repository Literal null = StatementExpression Assignment MemberReference pvcsbin Literal null = StatementExpression Assignment MemberReference force Literal null = StatementExpression Assignment MemberReference promotiongroup Literal null = StatementExpression Assignment MemberReference label Literal null = StatementExpression Assignment MemberReference ignorerc Literal false = StatementExpression Assignment MemberReference updateOnly Literal false = StatementExpression Assignment MemberReference lineStart Literal ""\""P:"" = StatementExpression Assignment MemberReference filenameFormat Literal ""{0}-arc({1})"" = ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType Task",0
257,257,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.FileOutputStream Import java.io.IOException Import java.io.InputStream Import java.net.HttpURLConnection Import java.net.URL Import java.net.URLConnection Import java.util.Date Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.ant.util.JavaEnvUtils ClassDeclaration Modifier public /**
 * Gets a particular file from a URL source.
 * Options include verbose reporting, timestamp based fetches and controlling
 * actions on failures. NB: access through a firewall only works if the whole
 * Java runtime is correctly configured.
 *
 *
 * @since Ant 1.1
 *
 * @ant.task category=""network""
 */ Get FieldDeclaration Modifier private ReferenceType URL VariableDeclarator source FieldDeclaration Modifier private ReferenceType File VariableDeclarator dest FieldDeclaration Modifier private BasicType boolean VariableDeclarator verbose Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator useTimestamp Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator ignoreErrors Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator uname Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator pword Literal null MethodDeclaration /**
     * Does the work.
     *
     * @exception BuildException Thrown in unrecoverable error.
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference source Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""src attribute is required"" MethodInvocation getLocation End IfStatement BinaryOperation == MemberReference dest Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""dest attribute is required"" MethodInvocation getLocation End IfStatement BinaryOperation && MethodInvocation dest exists MethodInvocation dest isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""The specified destination is a directory"" MethodInvocation getLocation End IfStatement BinaryOperation && MethodInvocation dest exists MethodInvocation ! dest canWrite BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Can't write to "" MethodInvocation dest getAbsolutePath MethodInvocation getLocation End TryStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Getting: "" MemberReference source log LocalVariableDeclaration BasicType long VariableDeclarator timestamp Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator hasTimestamp Literal false IfStatement BinaryOperation && MemberReference useTimestamp MethodInvocation dest exists BlockStatement StatementExpression Assignment MemberReference timestamp MethodInvocation dest lastModified = IfStatement MemberReference verbose BlockStatement LocalVariableDeclaration ReferenceType Date VariableDeclarator t ClassCreator ReferenceType Date MemberReference timestamp StatementExpression MethodInvocation BinaryOperation + Literal ""local file date : "" MethodInvocation t toString log End StatementExpression Assignment MemberReference hasTimestamp Literal true = End LocalVariableDeclaration ReferenceType URLConnection VariableDeclarator connection MethodInvocation source openConnection IfStatement BinaryOperation && MemberReference useTimestamp MemberReference hasTimestamp BlockStatement StatementExpression MethodInvocation connection MemberReference timestamp setIfModifiedSince End IfStatement BinaryOperation || BinaryOperation != MemberReference uname Literal null BinaryOperation != MemberReference pword Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator up BinaryOperation + BinaryOperation + MemberReference uname Literal "":"" MemberReference pword LocalVariableDeclaration ReferenceType String VariableDeclarator encoding TryStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator encoder MethodInvocation Class MethodInvocation newInstance Literal ""sun.misc.BASE64Encoder"" forName StatementExpression Assignment MemberReference encoding Cast ReferenceType String MethodInvocation encoder MethodInvocation Literal ""encode"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference BasicType byte getMethod MethodInvocation MemberReference encoder ArrayCreator ReferenceType Object ArrayInitializer MethodInvocation up getBytes invoke getClass = CatchClause CatchClauseParameter Exception ex LocalVariableDeclaration ReferenceType Base64Converter VariableDeclarator encoder ClassCreator ReferenceType Base64Converter StatementExpression Assignment MemberReference encoding MethodInvocation encoder MethodInvocation up getBytes encode = StatementExpression MethodInvocation connection Literal ""Authorization"" BinaryOperation + Literal ""Basic "" MemberReference encoding setRequestProperty End StatementExpression MethodInvocation connection connect IfStatement BinaryOperation instanceof MemberReference connection ReferenceType HttpURLConnection BlockStatement LocalVariableDeclaration ReferenceType HttpURLConnection VariableDeclarator httpConnection Cast ReferenceType HttpURLConnection MemberReference connection IfStatement BinaryOperation == MethodInvocation httpConnection getResponseCode MemberReference HttpURLConnection HTTP_NOT_MODIFIED BlockStatement StatementExpression MethodInvocation Literal ""Not modified - so not downloaded"" log ReturnStatement End IfStatement BinaryOperation == MethodInvocation httpConnection getResponseCode MemberReference HttpURLConnection HTTP_UNAUTHORIZED BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator message Literal ""HTTP Authorization failure"" IfStatement MemberReference ignoreErrors BlockStatement StatementExpression MethodInvocation MemberReference message MemberReference Project MSG_WARN log ReturnStatement BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End End End LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is Literal null ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 3 MemberReference ++ i BlockStatement TryStatement StatementExpression Assignment MemberReference is MethodInvocation connection getInputStream = BreakStatement CatchClause CatchClauseParameter IOException ex StatementExpression MethodInvocation BinaryOperation + Literal ""Error opening connection "" MemberReference ex log End IfStatement BinaryOperation == MemberReference is Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Can't get "" MemberReference source Literal "" to "" MemberReference dest log IfStatement MemberReference ignoreErrors BlockStatement ReturnStatement End ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Can't get "" MemberReference source Literal "" to "" MemberReference dest MethodInvocation getLocation End LocalVariableDeclaration ReferenceType FileOutputStream VariableDeclarator fos ClassCreator ReferenceType FileOutputStream MemberReference dest LocalVariableDeclaration BasicType boolean VariableDeclarator finished Literal false TryStatement LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte BinaryOperation * Literal 100 Literal 1024 LocalVariableDeclaration BasicType int VariableDeclarator length LocalVariableDeclaration BasicType int VariableDeclarator dots Literal 0 WhileStatement BinaryOperation >= Assignment MemberReference length MethodInvocation is MemberReference buffer read = Literal 0 BlockStatement StatementExpression MethodInvocation fos MemberReference buffer Literal 0 MemberReference length write IfStatement MemberReference verbose BlockStatement StatementExpression MethodInvocation System.out Literal ""."" print IfStatement BinaryOperation > MemberReference ++ dots Literal 50 BlockStatement StatementExpression MethodInvocation System.out flush StatementExpression Assignment MemberReference dots Literal 0 = End End End IfStatement MemberReference verbose BlockStatement StatementExpression MethodInvocation System.out println End StatementExpression Assignment MemberReference finished Literal true = IfStatement BinaryOperation != MemberReference fos Literal null BlockStatement StatementExpression MethodInvocation fos close End StatementExpression MethodInvocation is close IfStatement MemberReference ! finished BlockStatement StatementExpression MethodInvocation dest delete End IfStatement MemberReference useTimestamp BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator remoteTimestamp MethodInvocation connection getLastModified IfStatement MemberReference verbose BlockStatement LocalVariableDeclaration ReferenceType Date VariableDeclarator t ClassCreator ReferenceType Date MemberReference remoteTimestamp StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""last modified = "" MethodInvocation t toString TernaryExpression BinaryOperation == MemberReference remoteTimestamp Literal 0 Literal "" - using current time instead"" Literal """" log End IfStatement BinaryOperation != MemberReference remoteTimestamp Literal 0 BlockStatement StatementExpression MethodInvocation FileUtils MethodInvocation MemberReference dest MemberReference remoteTimestamp setFileLastModified newFileUtils End End CatchClause CatchClauseParameter IOException ioe StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Error getting "" MemberReference source Literal "" to "" MemberReference dest log IfStatement MemberReference ignoreErrors BlockStatement ReturnStatement End ThrowStatement ClassCreator ReferenceType BuildException MemberReference ioe MethodInvocation getLocation MethodDeclaration /**
     * Set the URL to get.
     *
     * @param u URL for the file.
     */ Modifier public setSrc FormalParameter ReferenceType URL u StatementExpression Assignment This MemberReference source MemberReference u = MethodDeclaration /**
     * Where to copy the source file.
     *
     * @param dest Path to file.
     */ Modifier public setDest FormalParameter ReferenceType File dest StatementExpression Assignment This MemberReference dest MemberReference dest = MethodDeclaration /**
     * If true, show verbose progress information.
     *
     * @param v if ""true"" then be verbose
     */ Modifier public setVerbose FormalParameter BasicType boolean v StatementExpression Assignment MemberReference verbose MemberReference v = MethodDeclaration /**
     * If true, log errors but do not treat as fatal.
     *
     * @param v if ""true"" then don't report download errors up to ant
     */ Modifier public setIgnoreErrors FormalParameter BasicType boolean v StatementExpression Assignment MemberReference ignoreErrors MemberReference v = MethodDeclaration /**
     * If true, conditionally download a file based on the timestamp
     * of the local copy.
     *
     * <p>In this situation, the if-modified-since header is set so
     * that the file is only fetched if it is newer than the local
     * file (or there is no local file) This flag is only valid on
     * HTTP connections, it is ignored in other cases.  When the flag
     * is set, the local copy of the downloaded file will also have
     * its timestamp set to the remote file time.</p>
     *
     * <p>Note that remote files of date 1/1/1970 (GMT) are treated as
     * 'no timestamp', and web servers often serve files with a
     * timestamp in the future by replacing their timestamp with that
     * of the current time. Also, inter-computer clock differences can
     * cause no end of grief.</p>
     * @param v ""true"" to enable file time fetching
     */ Modifier public setUseTimestamp FormalParameter BasicType boolean v IfStatement MethodInvocation ! JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_1 isJavaVersion BlockStatement StatementExpression Assignment MemberReference useTimestamp MemberReference v = End MethodDeclaration /**
     * Username for basic auth.
     *
     * @param u username for authentication
     */ Modifier public setUsername FormalParameter ReferenceType String u StatementExpression Assignment This MemberReference uname MemberReference u = MethodDeclaration /**
     * password for the basic authentication.
     *
     * @param p password for authentication
     */ Modifier public setPassword FormalParameter ReferenceType String p StatementExpression Assignment This MemberReference pword MemberReference p = ClassDeclaration Modifier private static /*********************************************************************
    * BASE 64 encoding of a String or an array of bytes.
    *
    * Based on RFC 1421.
    *
    *********************************************************************/ Base64Converter FieldDeclaration Modifier public final BasicType char VariableDeclarator alphabet ArrayInitializer Literal 'A' Literal 'B' Literal 'C' Literal 'D' Literal 'E' Literal 'F' Literal 'G' Literal 'H' Literal 'I' Literal 'J' Literal 'K' Literal 'L' Literal 'M' Literal 'N' Literal 'O' Literal 'P' Literal 'Q' Literal 'R' Literal 'S' Literal 'T' Literal 'U' Literal 'V' Literal 'W' Literal 'X' Literal 'Y' Literal 'Z' Literal 'a' Literal 'b' Literal 'c' Literal 'd' Literal 'e' Literal 'f' Literal 'g' Literal 'h' Literal 'i' Literal 'j' Literal 'k' Literal 'l' Literal 'm' Literal 'n' Literal 'o' Literal 'p' Literal 'q' Literal 'r' Literal 's' Literal 't' Literal 'u' Literal 'v' Literal 'w' Literal 'x' Literal 'y' Literal 'z' Literal '0' Literal '1' Literal '2' Literal '3' Literal '4' Literal '5' Literal '6' Literal '7' Literal '8' Literal '9' Literal '+' Literal '/' MethodDeclaration Modifier public ReferenceType String encode FormalParameter ReferenceType String s ReturnStatement MethodInvocation MethodInvocation s getBytes encode MethodDeclaration Modifier public ReferenceType String encode FormalParameter BasicType byte octetString LocalVariableDeclaration BasicType int VariableDeclarator bits24 LocalVariableDeclaration BasicType int VariableDeclarator bits6 LocalVariableDeclaration BasicType char VariableDeclarator out ArrayCreator BasicType char BinaryOperation * BinaryOperation + BinaryOperation / BinaryOperation - MemberReference octetString length Literal 1 Literal 3 Literal 1 Literal 4 LocalVariableDeclaration BasicType int VariableDeclarator outIndex Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 WhileStatement BinaryOperation <= BinaryOperation + MemberReference i Literal 3 MemberReference octetString length BlockStatement StatementExpression Assignment MemberReference bits24 BinaryOperation << BinaryOperation & MemberReference ArraySelector MemberReference ++ i octetString Literal 0xFF Literal 16 = StatementExpression Assignment MemberReference bits24 BinaryOperation << BinaryOperation & MemberReference ArraySelector MemberReference ++ i octetString Literal 0xFF Literal 8 |= StatementExpression Assignment MemberReference bits6 BinaryOperation >> BinaryOperation & MemberReference bits24 Literal 0x00FC0000 Literal 18 = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = StatementExpression Assignment MemberReference bits6 BinaryOperation >> BinaryOperation & MemberReference bits24 Literal 0x0003F000 Literal 12 = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = StatementExpression Assignment MemberReference bits6 BinaryOperation >> BinaryOperation & MemberReference bits24 Literal 0x00000FC0 Literal 6 = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = StatementExpression Assignment MemberReference bits6 BinaryOperation & MemberReference bits24 Literal 0x0000003F = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = End IfStatement BinaryOperation == BinaryOperation - MemberReference octetString length MemberReference i Literal 2 BlockStatement StatementExpression Assignment MemberReference bits24 BinaryOperation << BinaryOperation & MemberReference ArraySelector MemberReference i octetString Literal 0xFF Literal 16 = StatementExpression Assignment MemberReference bits24 BinaryOperation << BinaryOperation & MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 octetString Literal 0xFF Literal 8 |= StatementExpression Assignment MemberReference bits6 BinaryOperation >> BinaryOperation & MemberReference bits24 Literal 0x00FC0000 Literal 18 = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = StatementExpression Assignment MemberReference bits6 BinaryOperation >> BinaryOperation & MemberReference bits24 Literal 0x0003F000 Literal 12 = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = StatementExpression Assignment MemberReference bits6 BinaryOperation >> BinaryOperation & MemberReference bits24 Literal 0x00000FC0 Literal 6 = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out Literal '=' = IfStatement BinaryOperation == BinaryOperation - MemberReference octetString length MemberReference i Literal 1 BlockStatement StatementExpression Assignment MemberReference bits24 BinaryOperation << BinaryOperation & MemberReference ArraySelector MemberReference i octetString Literal 0xFF Literal 16 = StatementExpression Assignment MemberReference bits6 BinaryOperation >> BinaryOperation & MemberReference bits24 Literal 0x00FC0000 Literal 18 = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = StatementExpression Assignment MemberReference bits6 BinaryOperation >> BinaryOperation & MemberReference bits24 Literal 0x0003F000 Literal 12 = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out MemberReference ArraySelector MemberReference bits6 alphabet = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out Literal '=' = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ outIndex out Literal '=' = End End ReturnStatement ClassCreator ReferenceType String MemberReference out ReferenceType Task",0
604,604,,0
99,99,"CompilationUnit PackageDeclaration org.apache.tools.mail Import java.io.IOException ClassDeclaration Modifier public /**
 * Specialized IOException that get thrown if SMPT's QUIT command fails.
 *
 * <p>This seems to happen with some version of MS Exchange that
 * doesn't respond with a 221 code immediately.  See <a
 * href=""http://nagoya.apache.org/bugzilla/show_bug.cgi?id=5273"">Bug
 * report 5273</a>.</p>
 *
 * @version $Revision$
 */ ErrorInQuitException ConstructorDeclaration Modifier public /**
     * Initialise from an IOException
     *
     * @param e the IO Exception.
     */ ErrorInQuitException FormalParameter ReferenceType IOException e StatementExpression SuperConstructorInvocation MethodInvocation e getMessage ReferenceType IOException",0
220,220,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.jdepend Import java.io.File Import java.io.FileWriter Import java.io.IOException Import java.io.PrintWriter Import java.lang.reflect.Constructor Import java.lang.reflect.Method Import java.util.Vector Import java.util.Enumeration Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.ExecuteWatchdog Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.CommandlineJava Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.PatternSet Import org.apache.tools.ant.types.Reference Import org.apache.tools.ant.util.LoaderUtils ClassDeclaration Modifier public /**
 * Runs JDepend tests.
 *
 * <p>JDepend is a tool to generate design quality metrics for each Java package.
 * It has been initially created by Mike Clark. JDepend can be found at <a
 * href=""http://www.clarkware.com/software/JDepend.html"">http://www.clarkware.com/software/JDepend.html</a>.
 *
 * The current implementation spawn a new Java VM.
 *
 */ JDependTask FieldDeclaration Modifier private ReferenceType Path VariableDeclarator sourcesPath FieldDeclaration Modifier private ReferenceType Path VariableDeclarator classesPath FieldDeclaration Modifier private ReferenceType File VariableDeclarator outputFile FieldDeclaration Modifier private ReferenceType File VariableDeclarator dir FieldDeclaration Modifier private ReferenceType Path VariableDeclarator compileClasspath FieldDeclaration Modifier private BasicType boolean VariableDeclarator haltonerror Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator fork Literal false FieldDeclaration Modifier private ReferenceType Long VariableDeclarator timeout Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator jvm Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator format Literal ""text"" FieldDeclaration Modifier private ReferenceType PatternSet VariableDeclarator defaultPatterns ClassCreator ReferenceType PatternSet FieldDeclaration Modifier private static ReferenceType Constructor VariableDeclarator packageFilterC FieldDeclaration Modifier private static ReferenceType Method VariableDeclarator setFilter FieldDeclaration Modifier private BasicType boolean VariableDeclarator includeRuntime Literal false FieldDeclaration Modifier private ReferenceType Path VariableDeclarator runtimeClasses Literal null TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator packageFilter MethodInvocation Class Literal ""jdepend.framework.PackageFilter"" forName StatementExpression Assignment MemberReference packageFilterC MethodInvocation packageFilter ArrayCreator ReferenceType Class ArrayInitializer ClassReference java.util ReferenceType Collection getConstructor = StatementExpression Assignment MemberReference setFilter ClassReference jdepend.textui MethodInvocation Literal ""setFilter"" ArrayCreator ReferenceType Class ArrayInitializer MemberReference packageFilter getDeclaredMethod ReferenceType JDepend = CatchClause CatchClauseParameter Throwable t IfStatement BinaryOperation == MemberReference setFilter Literal null BlockStatement StatementExpression Assignment MemberReference packageFilterC Literal null = End MethodDeclaration /**
     * If true,
     *  include jdepend.jar in the forked VM.
     *
     * @param b include ant run time yes or no
     * @since Ant 1.6
     */ Modifier public setIncluderuntime FormalParameter BasicType boolean b StatementExpression Assignment MemberReference includeRuntime MemberReference b = MethodDeclaration /**
     * Set the timeout value (in milliseconds).
     *
     * <p>If the operation is running for more than this value, the jdepend
     * will be canceled. (works only when in 'fork' mode).</p>
     * @param value the maximum time (in milliseconds) allowed before
     * declaring the test as 'timed-out'
     * @see #setFork(boolean)
     */ Modifier public setTimeout FormalParameter ReferenceType Long value StatementExpression Assignment MemberReference timeout MemberReference value = MethodDeclaration /**
     * @return the timeout value
     */ Modifier public ReferenceType Long getTimeout ReturnStatement MemberReference timeout MethodDeclaration /**
     * The output file name.
     *
     * @param outputFile the output file name
     */ Modifier public setOutputFile FormalParameter ReferenceType File outputFile StatementExpression Assignment This MemberReference outputFile MemberReference outputFile = MethodDeclaration /**
     * @return the output file name
     */ Modifier public ReferenceType File getOutputFile ReturnStatement MemberReference outputFile MethodDeclaration /**
     * Whether or not to halt on failure. Default: false.
     * @param haltonerror the value to set
     */ Modifier public setHaltonerror FormalParameter BasicType boolean haltonerror StatementExpression Assignment This MemberReference haltonerror MemberReference haltonerror = MethodDeclaration /**
     * @return the value of the haltonerror attribute
     */ Modifier public BasicType boolean getHaltonerror ReturnStatement MemberReference haltonerror MethodDeclaration /**
     * If true, forks into a new JVM. Default: false.
     *
     * @param   value   <tt>true</tt> if a JVM should be forked,
     *                  otherwise <tt>false<tt>
     */ Modifier public setFork FormalParameter BasicType boolean value StatementExpression Assignment MemberReference fork MemberReference value = MethodDeclaration /**
     * @return the value of the fork attribute
     */ Modifier public BasicType boolean getFork ReturnStatement MemberReference fork MethodDeclaration /**
     * The command used to invoke a forked Java Virtual Machine.
     *
     * Default is <tt>java</tt>. Ignored if no JVM is forked.
     * @param   value   the new VM to use instead of <tt>java</tt>
     * @see #setFork(boolean)
     */ Modifier public setJvm FormalParameter ReferenceType String value StatementExpression Assignment MemberReference jvm MemberReference value = MethodDeclaration /**
     * Adds a path to source code to analyze.
     * @return a source path
     * @deprecated
     */ Modifier public ReferenceType Path createSourcespath IfStatement BinaryOperation == MemberReference sourcesPath Literal null BlockStatement StatementExpression Assignment MemberReference sourcesPath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation sourcesPath createPath MethodDeclaration /**
     * Gets the sourcepath.
     * @return the sources path
     * @deprecated
     *
     */ Modifier public ReferenceType Path getSourcespath ReturnStatement MemberReference sourcesPath MethodDeclaration /**
     * Adds a path to class code to analyze.
     * @return a classes path
     */ Modifier public ReferenceType Path createClassespath IfStatement BinaryOperation == MemberReference classesPath Literal null BlockStatement StatementExpression Assignment MemberReference classesPath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation classesPath createPath MethodDeclaration /**
     * Gets the classespath.
     * @return the classes path
     */ Modifier public ReferenceType Path getClassespath ReturnStatement MemberReference classesPath MethodDeclaration /**
     * The directory to invoke the VM in. Ignored if no JVM is forked.
     * @param   dir     the directory to invoke the JVM from.
     * @see #setFork(boolean)
     */ Modifier public setDir FormalParameter ReferenceType File dir StatementExpression Assignment This MemberReference dir MemberReference dir = MethodDeclaration /**
     * @return the dir attribute
     */ Modifier public ReferenceType File getDir ReturnStatement MemberReference dir MethodDeclaration /**
     * Set the classpath to be used for this compilation.
     * @param classpath a class path to be used
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath IfStatement BinaryOperation == MemberReference compileClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compileClasspath MemberReference classpath = BlockStatement StatementExpression MethodInvocation compileClasspath MemberReference classpath append End MethodDeclaration /**
     * Gets the classpath to be used for this compilation.
     * @return the class path used for compilation
     */ Modifier public ReferenceType Path getClasspath ReturnStatement MemberReference compileClasspath MethodDeclaration /**
     * Adds a path to the classpath.
     * @return a classpath
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == MemberReference compileClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compileClasspath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation compileClasspath createPath MethodDeclaration /**
     * Create a new JVM argument. Ignored if no JVM is forked.
     * @param commandline the commandline to create the argument on
     * @return  create a new JVM argument so that any argument can
     *          be passed to the JVM.
     * @see #setFork(boolean)
     */ Modifier public ReferenceType Commandline ReferenceType Argument createJvmarg FormalParameter ReferenceType CommandlineJava commandline ReturnStatement MethodInvocation commandline createVmArgument MethodDeclaration /**
     * Adds a reference to a classpath defined elsewhere.
     * @param r a classpath reference
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration /**
     * add a name entry on the exclude list
     * @return a pattern for the excludes
     */ Modifier public ReferenceType PatternSet ReferenceType NameEntry createExclude ReturnStatement MethodInvocation defaultPatterns createExclude MethodDeclaration /**
     * @return the excludes patterns
     */ Modifier public ReferenceType PatternSet getExcludes ReturnStatement MemberReference defaultPatterns MethodDeclaration /**
     * The format to write the output in, ""xml"" or ""text"".
     *
     * @param ea xml or text
     */ Modifier public setFormat FormalParameter ReferenceType FormatAttribute ea StatementExpression Assignment MemberReference format MethodInvocation ea getValue = ClassDeclaration Modifier public static /**
     * A class for the enumerated attribute format,
     * values are xml and text.
     * @see EnumeratedAttribute
     */ FormatAttribute FieldDeclaration Modifier private ReferenceType String VariableDeclarator formats ArrayCreator ReferenceType String ArrayInitializer Literal ""xml"" Literal ""text"" MethodDeclaration /**
         * @return the enumerated values
         */ Modifier public ReferenceType String getValues ReturnStatement MemberReference formats ReferenceType EnumeratedAttribute FieldDeclaration /**
     * No problems with this test.
     */ Modifier private final static BasicType int VariableDeclarator SUCCESS Literal 0 FieldDeclaration /**
     * An error occurred.
     */ Modifier private final static BasicType int VariableDeclarator ERRORS Literal 1 MethodDeclaration /**
     * Search for the given resource and add the directory or archive
     * that contains it to the classpath.
     *
     * <p>Doesn't work for archives in JDK 1.1 as the URL returned by
     * getResource doesn't contain the name of the archive.</p>
     *
     * @param resource resource that one wants to lookup
     * @since Ant 1.6
     */ Modifier private addClasspathEntry FormalParameter ReferenceType String resource IfStatement MethodInvocation resource Literal ""/"" startsWith BlockStatement StatementExpression Assignment MemberReference resource MethodInvocation resource Literal 1 substring = BlockStatement StatementExpression Assignment MemberReference resource BinaryOperation + Literal ""org/apache/tools/ant/taskdefs/optional/jdepend/"" MemberReference resource = End LocalVariableDeclaration ReferenceType File VariableDeclarator f MethodInvocation LoaderUtils MethodInvocation MethodInvocation getClassLoader getClass MemberReference resource getResourceSource IfStatement BinaryOperation != MemberReference f Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Found "" MethodInvocation f getAbsolutePath MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation runtimeClasses MethodInvocation MemberReference f setLocation createPath BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Couldn\'t find "" MemberReference resource MemberReference Project MSG_DEBUG log End MethodDeclaration /**
     * execute the task
     *
     * @exception BuildException if an error occurs
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType CommandlineJava VariableDeclarator commandline ClassCreator ReferenceType CommandlineJava IfStatement Literal MethodInvocation MemberReference format equals ""text"" BlockStatement StatementExpression MethodInvocation commandline Literal ""jdepend.textui.JDepend"" setClassname IfStatement Literal MethodInvocation MemberReference format equals ""xml"" BlockStatement StatementExpression MethodInvocation commandline Literal ""jdepend.xmlui.JDepend"" setClassname End End IfStatement BinaryOperation != MemberReference jvm Literal null BlockStatement StatementExpression MethodInvocation commandline MemberReference jvm setVm End IfStatement BinaryOperation && BinaryOperation == MethodInvocation getSourcespath Literal null BinaryOperation == MethodInvocation getClassespath Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Missing classespath required argument"" IfStatement BinaryOperation == MethodInvocation getClassespath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""sourcespath is deprecated in JDepend >= 2.5 "" Literal ""- please convert to classespath"" StatementExpression MethodInvocation MemberReference msg log End End LocalVariableDeclaration BasicType int VariableDeclarator exitValue MemberReference JDependTask ERRORS LocalVariableDeclaration BasicType boolean VariableDeclarator wasKilled Literal false IfStatement MethodInvocation ! getFork BlockStatement StatementExpression Assignment MemberReference exitValue MethodInvocation MemberReference commandline executeInVM = BlockStatement LocalVariableDeclaration ReferenceType ExecuteWatchdog VariableDeclarator watchdog MethodInvocation createWatchdog StatementExpression Assignment MemberReference exitValue MethodInvocation MemberReference commandline MemberReference watchdog executeAsForked = IfStatement BinaryOperation != MemberReference watchdog Literal null BlockStatement StatementExpression Assignment MemberReference wasKilled MethodInvocation watchdog killedProcess = End End LocalVariableDeclaration BasicType boolean VariableDeclarator errorOccurred BinaryOperation || BinaryOperation == MemberReference exitValue MemberReference JDependTask ERRORS MemberReference wasKilled IfStatement MemberReference errorOccurred BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator errorMessage BinaryOperation + Literal ""JDepend FAILED"" TernaryExpression MemberReference wasKilled Literal "" - Timed out"" Literal """" IfStatement MethodInvocation getHaltonerror BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference errorMessage MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation MemberReference errorMessage MemberReference Project MSG_ERR log End End MethodDeclaration /**
     * Execute inside VM.
     *
     * @param commandline the command line
     * @return the return value of the mvm
     * @exception BuildException if an error occurs
     */ Modifier public BasicType int executeInVM FormalParameter ReferenceType CommandlineJava commandline BuildException LocalVariableDeclaration ReferenceType jdepend ReferenceType textui ReferenceType JDepend VariableDeclarator jdepend IfStatement Literal MethodInvocation MemberReference format equals ""xml"" BlockStatement StatementExpression Assignment MemberReference jdepend ClassCreator ReferenceType jdepend ReferenceType xmlui ReferenceType JDepend = BlockStatement StatementExpression Assignment MemberReference jdepend ClassCreator ReferenceType jdepend ReferenceType textui ReferenceType JDepend = End LocalVariableDeclaration ReferenceType FileWriter VariableDeclarator fw Literal null IfStatement BinaryOperation != MethodInvocation getOutputFile Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference fw ClassCreator ReferenceType FileWriter MethodInvocation MethodInvocation getPath getOutputFile = CatchClause CatchClauseParameter IOException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""JDepend Failed when creating the output file: "" MethodInvocation e getMessage StatementExpression MethodInvocation MemberReference msg log ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg StatementExpression MethodInvocation jdepend ClassCreator ReferenceType PrintWriter MemberReference fw setWriter StatementExpression MethodInvocation BinaryOperation + Literal ""Output to be stored in "" MethodInvocation MethodInvocation getPath getOutputFile log End TryStatement IfStatement BinaryOperation != MethodInvocation getClassespath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator classesPath MethodInvocation MethodInvocation list getClassespath ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference classesPath length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i classesPath IfStatement BinaryOperation || MethodInvocation ! f exists MethodInvocation ! f isDirectory BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\"""" MethodInvocation f getPath Literal ""\"" does not represent a valid"" Literal "" directory. JDepend would fail."" StatementExpression MethodInvocation MemberReference msg log ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End TryStatement StatementExpression MethodInvocation jdepend MethodInvocation f getPath addDirectory CatchClause CatchClauseParameter IOException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""JDepend Failed when adding a class directory: "" MethodInvocation e getMessage StatementExpression MethodInvocation MemberReference msg log ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End IfStatement BinaryOperation != MethodInvocation getSourcespath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator sourcesPath MethodInvocation MethodInvocation list getSourcespath ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sourcesPath length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i sourcesPath IfStatement BinaryOperation || MethodInvocation ! f exists MethodInvocation ! f isDirectory BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\"""" MethodInvocation f getPath Literal ""\"" does not represent a valid"" Literal "" directory. JDepend would fail."" StatementExpression MethodInvocation MemberReference msg log ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End TryStatement StatementExpression MethodInvocation jdepend MethodInvocation f getPath addDirectory CatchClause CatchClauseParameter IOException e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""JDepend Failed when adding a source directory: "" MethodInvocation e getMessage StatementExpression MethodInvocation MemberReference msg log ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End End End LocalVariableDeclaration ReferenceType String VariableDeclarator patterns MethodInvocation defaultPatterns MethodInvocation getProject getExcludePatterns IfStatement BinaryOperation && BinaryOperation != MemberReference patterns Literal null BinaryOperation > MemberReference patterns length Literal 0 BlockStatement IfStatement BinaryOperation != MemberReference setFilter Literal null BlockStatement LocalVariableDeclaration ReferenceType Vector VariableDeclarator v ClassCreator ReferenceType Vector ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference patterns length MemberReference ++ i BlockStatement StatementExpression MethodInvocation v MemberReference ArraySelector MemberReference i patterns addElement End TryStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation packageFilterC ArrayCreator ReferenceType Object ArrayInitializer MemberReference v newInstance StatementExpression MethodInvocation setFilter MemberReference jdepend ArrayCreator ReferenceType Object ArrayInitializer MemberReference o invoke CatchClause CatchClauseParameter Throwable e StatementExpression MethodInvocation BinaryOperation + Literal ""excludes will be ignored as JDepend doesn't like me: "" MethodInvocation e getMessage MemberReference Project MSG_WARN log BlockStatement StatementExpression MethodInvocation Literal ""Sorry, your version of JDepend doesn't support excludes"" MemberReference Project MSG_WARN log End End StatementExpression MethodInvocation jdepend analyze IfStatement BinaryOperation != MemberReference fw Literal null BlockStatement TryStatement StatementExpression MethodInvocation fw close CatchClause CatchClauseParameter Throwable t End ReturnStatement MemberReference SUCCESS MethodDeclaration /**
     * Execute the task by forking a new JVM. The command will block until
     * it finishes. To know if the process was destroyed or not, use the
     * <tt>killedProcess()</tt> method of the watchdog class.
     * @param commandline the commandline for forked jvm
     * @param  watchdog   the watchdog in charge of cancelling the test if it
     * exceeds a certain amount of time. Can be <tt>null</tt>.
     * @return the result of running the jdepend
     * @throws BuildException in case of error
     */ Modifier public BasicType int executeAsForked FormalParameter ReferenceType CommandlineJava commandline FormalParameter ReferenceType ExecuteWatchdog watchdog BuildException StatementExpression Assignment MemberReference runtimeClasses ClassCreator ReferenceType Path MethodInvocation getProject = StatementExpression MethodInvocation Literal ""/jdepend/textui/JDepend.class"" addClasspathEntry StatementExpression MethodInvocation createClasspath IfStatement BinaryOperation > MethodInvocation MethodInvocation toString MethodInvocation length getClasspath Literal 0 BlockStatement StatementExpression MethodInvocation MethodInvocation Literal ""-classpath"" setValue MemberReference commandline createJvmarg StatementExpression MethodInvocation MethodInvocation MethodInvocation MethodInvocation toString getClasspath setValue MemberReference commandline createJvmarg End IfStatement MemberReference includeRuntime BlockStatement LocalVariableDeclaration ReferenceType Vector VariableDeclarator v MethodInvocation Execute getProcEnvironment LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation v elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator s Cast ReferenceType String MethodInvocation e nextElement IfStatement MethodInvocation s Literal ""CLASSPATH="" startsWith BlockStatement StatementExpression MethodInvocation commandline MethodInvocation createPath MethodInvocation ClassCreator ReferenceType Path MethodInvocation getProject MethodInvocation s Literal MethodInvocation length ""CLASSPATH="" substring append MethodInvocation getProject createClasspath End End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Implicitly adding "" MemberReference runtimeClasses Literal "" to CLASSPATH"" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation commandline MethodInvocation createPath MethodInvocation MemberReference runtimeClasses append MethodInvocation getProject createClasspath End IfStatement BinaryOperation != MethodInvocation getOutputFile Literal null BlockStatement StatementExpression MethodInvocation commandline MethodInvocation Literal ""-file"" setValue createArgument StatementExpression MethodInvocation commandline MethodInvocation MethodInvocation outputFile getPath setValue createArgument End IfStatement BinaryOperation != MethodInvocation getSourcespath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator sourcesPath MethodInvocation MethodInvocation list getSourcespath ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference sourcesPath length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i sourcesPath IfStatement BinaryOperation || MethodInvocation ! f exists MethodInvocation ! f isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\"""" MethodInvocation f getPath Literal ""\"" does not represent a valid"" Literal "" directory. JDepend would"" Literal "" fail."" End StatementExpression MethodInvocation commandline MethodInvocation MethodInvocation f getPath setValue createArgument End End IfStatement BinaryOperation != MethodInvocation getClassespath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator classesPath MethodInvocation MethodInvocation list getClassespath ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference classesPath length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i classesPath IfStatement BinaryOperation || MethodInvocation ! f exists MethodInvocation ! f isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""\"""" MethodInvocation f getPath Literal ""\"" does not represent a valid"" Literal "" directory. JDepend would"" Literal "" fail."" End StatementExpression MethodInvocation commandline MethodInvocation MethodInvocation f getPath setValue createArgument End End LocalVariableDeclaration ReferenceType Execute VariableDeclarator execute ClassCreator ReferenceType Execute ClassCreator ReferenceType LogStreamHandler This MemberReference Project MSG_INFO MemberReference Project MSG_WARN MemberReference watchdog StatementExpression MethodInvocation execute MethodInvocation commandline getCommandline setCommandline IfStatement BinaryOperation != MethodInvocation getDir Literal null BlockStatement StatementExpression MethodInvocation execute MethodInvocation getDir setWorkingDirectory StatementExpression MethodInvocation execute MethodInvocation getProject setAntRun End IfStatement BinaryOperation != MethodInvocation getOutputFile Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Output to be stored in "" MethodInvocation MethodInvocation getPath getOutputFile log End StatementExpression MethodInvocation MethodInvocation commandline describeCommand MemberReference Project MSG_VERBOSE log TryStatement ReturnStatement MethodInvocation execute execute CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Process fork failed."" MemberReference e MethodInvocation getLocation MethodDeclaration /**
     * @return <tt>null</tt> if there is a timeout value, otherwise the
     * watchdog instance.
     * @throws BuildException in case of error
     */ Modifier protected ReferenceType ExecuteWatchdog createWatchdog BuildException IfStatement BinaryOperation == MethodInvocation getTimeout Literal null BlockStatement ReturnStatement Literal null End ReturnStatement ClassCreator ReferenceType ExecuteWatchdog MethodInvocation MethodInvocation longValue getTimeout ReferenceType Task",0
533,533,,1
59,59,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.taskdefs.Java ClassDeclaration Modifier public /**
 * Executes the Apache Stylebook documentation generator.
 * Unlike the commandline version of this tool, all three arguments
 * are required to run stylebook.
 * <p>
 * Being extended from &lt;Java&gt;, all the parent's attributes
 * and options are available. Do not set any apart from the <tt>classpath</tt>
 * as they are not guaranteed to be there in future.
 * @todo stop extending from Java.
 */ StyleBook FieldDeclaration Modifier protected ReferenceType File VariableDeclarator m_targetDirectory FieldDeclaration Modifier protected ReferenceType File VariableDeclarator m_skinDirectory FieldDeclaration Modifier protected ReferenceType String VariableDeclarator m_loaderConfig FieldDeclaration Modifier protected ReferenceType File VariableDeclarator m_book ConstructorDeclaration Modifier public StyleBook StatementExpression MethodInvocation Literal ""org.apache.stylebook.StyleBook"" setClassname StatementExpression MethodInvocation Literal true setFork StatementExpression MethodInvocation Literal true setFailonerror MethodDeclaration /**
     * The book xml file that the documentation generation starts from;
     * required.
     */ Modifier public setBook FormalParameter Modifier final ReferenceType File book StatementExpression Assignment MemberReference m_book MemberReference book = MethodDeclaration /**
     * the directory that contains the stylebook skin;
     * required.
     */ Modifier public setSkinDirectory FormalParameter Modifier final ReferenceType File skinDirectory StatementExpression Assignment MemberReference m_skinDirectory MemberReference skinDirectory = MethodDeclaration /**
     * the destination directory where the documentation is generated;
     * required.
     */ Modifier public setTargetDirectory FormalParameter Modifier final ReferenceType File targetDirectory StatementExpression Assignment MemberReference m_targetDirectory MemberReference targetDirectory = MethodDeclaration /**
     * A loader configuration to send to stylebook; optional.
     */ Modifier public setLoaderConfig FormalParameter Modifier final ReferenceType String loaderConfig StatementExpression Assignment MemberReference m_loaderConfig MemberReference loaderConfig = MethodDeclaration /**
     * call the program
     */ Modifier public execute BuildException IfStatement BinaryOperation == Literal null MemberReference m_targetDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""TargetDirectory attribute not set."" End IfStatement BinaryOperation == Literal null MemberReference m_skinDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""SkinDirectory attribute not set."" End IfStatement BinaryOperation == Literal null MemberReference m_book BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""book attribute not set."" End StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""targetDirectory="" MemberReference m_targetDirectory setValue createArg StatementExpression MethodInvocation MethodInvocation MethodInvocation m_book toString setValue createArg StatementExpression MethodInvocation MethodInvocation MethodInvocation m_skinDirectory toString setValue createArg IfStatement BinaryOperation != Literal null MemberReference m_loaderConfig BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""loaderConfig="" MemberReference m_loaderConfig setValue createArg End StatementExpression SuperMethodInvocation execute ReferenceType Java",1
569,569,,0
25,25,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.facade Import java.util.Enumeration Import java.util.Vector ClassDeclaration Modifier public /**
 * Helper class for facade implementations - encapsulates treatment of
 * explicit implementation choices, magic properties and
 * implementation specific command line arguments.
 *
 * @version $Revision$
 *
 * @since Ant 1.5
 */ FacadeTaskHelper FieldDeclaration /**
     * Command line arguments.
     */ Modifier private ReferenceType Vector VariableDeclarator args ClassCreator ReferenceType Vector FieldDeclaration /**
     * The explicitly chosen implementation.
     */ Modifier private ReferenceType String VariableDeclarator userChoice FieldDeclaration /**
     * The magic property to consult.
     */ Modifier private ReferenceType String VariableDeclarator magicValue FieldDeclaration /**
     * The default value.
     */ Modifier private ReferenceType String VariableDeclarator defaultValue ConstructorDeclaration Modifier public /**
     * @param defaultValue The default value for the implementation.
     * Must not be null.
     */ FacadeTaskHelper FormalParameter ReferenceType String defaultValue StatementExpression ExplicitConstructorInvocation MemberReference defaultValue Literal null ConstructorDeclaration Modifier public /**
     * @param defaultValue The default value for the implementation.
     * Must not be null.
     * @param magicValue the value of a magic property that may hold a user
     * choice.  May be null.
     */ FacadeTaskHelper FormalParameter ReferenceType String defaultValue FormalParameter ReferenceType String magicValue StatementExpression Assignment This MemberReference defaultValue MemberReference defaultValue = StatementExpression Assignment This MemberReference magicValue MemberReference magicValue = MethodDeclaration /**
     * Used to set the value of the magic property.
     */ Modifier public setMagicValue FormalParameter ReferenceType String magicValue StatementExpression Assignment This MemberReference magicValue MemberReference magicValue = MethodDeclaration /**
     * Used for explicit user choices.
     */ Modifier public setImplementation FormalParameter ReferenceType String userChoice StatementExpression Assignment This MemberReference userChoice MemberReference userChoice = MethodDeclaration /**
     * Retrieves the implementation.
     */ Modifier public ReferenceType String getImplementation ReturnStatement TernaryExpression BinaryOperation != MemberReference userChoice Literal null MemberReference userChoice TernaryExpression BinaryOperation != MemberReference magicValue Literal null MemberReference magicValue MemberReference defaultValue MethodDeclaration /**
     * Retrieves the explicit user choice
     */ Modifier public ReferenceType String getExplicitChoice ReturnStatement MemberReference userChoice MethodDeclaration /**
     * Command line argument.
     */ Modifier public addImplementationArgument FormalParameter ReferenceType ImplementationSpecificArgument arg StatementExpression MethodInvocation args MemberReference arg addElement MethodDeclaration /**
     * Retrieves the command line arguments enabled for the current
     * facade implementation.
     */ Modifier public ReferenceType String getArgs LocalVariableDeclaration ReferenceType Vector VariableDeclarator tmp ClassCreator ReferenceType Vector MethodInvocation args size ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation args elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType ImplementationSpecificArgument VariableDeclarator arg Cast ReferenceType ImplementationSpecificArgument MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator curr MethodInvocation arg MethodInvocation getImplementation getParts ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference curr length MemberReference ++ i BlockStatement StatementExpression MethodInvocation tmp MemberReference ArraySelector MemberReference i curr addElement End End LocalVariableDeclaration ReferenceType String VariableDeclarator res ArrayCreator ReferenceType String MethodInvocation tmp size StatementExpression MethodInvocation tmp MemberReference res copyInto ReturnStatement MemberReference res MethodDeclaration /**
     * Tests whether the implementation has been chosen by the user
     * (either via a magic property or explicitly.
     *
     * @since Ant 1.5.2
     */ Modifier public BasicType boolean hasBeenSet ReturnStatement BinaryOperation || BinaryOperation != MemberReference userChoice Literal null BinaryOperation != MemberReference magicValue Literal null",0
587,587,,1
507,507,,1
224,224,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.script Import org.apache.tools.ant.AntTypeDefinition Import org.apache.tools.ant.ComponentHelper Import org.apache.tools.ant.Project Import org.apache.tools.ant.MagicNames Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.ProjectHelper Import org.apache.tools.ant.taskdefs.DefBase Import java.util.Map Import java.util.HashMap Import java.util.List Import java.util.Locale Import java.util.ArrayList Import java.util.Iterator Import java.util.Set Import java.util.HashSet Import java.io.File Import org.apache.tools.ant.util.ScriptRunner ClassDeclaration Modifier public /**
 * Define a task using a script
 *
 * @since Ant 1.6
 */ ScriptDef FieldDeclaration /** Used to run the script */ Modifier private ReferenceType ScriptRunner VariableDeclarator runner ClassCreator ReferenceType ScriptRunner FieldDeclaration /** the name by which this script will be activated */ Modifier private ReferenceType String VariableDeclarator name FieldDeclaration /** Attributes definitions of this script */ Modifier private ReferenceType List VariableDeclarator attributes ClassCreator ReferenceType ArrayList FieldDeclaration /** Nested Element definitions of this script */ Modifier private ReferenceType List VariableDeclarator nestedElements ClassCreator ReferenceType ArrayList FieldDeclaration /** The attribute names as a set */ Modifier private ReferenceType Set VariableDeclarator attributeSet FieldDeclaration /** The nested element definitions indexed by their names */ Modifier private ReferenceType Map VariableDeclarator nestedElementMap MethodDeclaration /**
     * set the name under which this script will be activated in a build
     * file
     *
     * @param name the name of the script
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * Indicates whether the task supports a given attribute name
     *
     * @param attributeName the name of the attribute.
     *
     * @return true if the attribute is supported by the script.
     */ Modifier public BasicType boolean isAttributeSupported FormalParameter ReferenceType String attributeName ReturnStatement MethodInvocation attributeSet MemberReference attributeName contains ClassDeclaration Modifier public static /**
     * Class representing an attribute definition
     */ Attribute FieldDeclaration /** The attribute name */ Modifier private ReferenceType String VariableDeclarator name MethodDeclaration /**
         * Set the attribute name
         *
         * @param name the attribute name
         */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MethodInvocation name MemberReference Locale US toLowerCase = MethodDeclaration /**
     * Add an attribute definition to this script.
     *
     * @param attribute the attribute definition.
     */ Modifier public addAttribute FormalParameter ReferenceType Attribute attribute StatementExpression MethodInvocation attributes MemberReference attribute add ClassDeclaration Modifier public static /**
     * Class to represent a nested element definition
     */ NestedElement FieldDeclaration /** The name of the neseted element */ Modifier private ReferenceType String VariableDeclarator name FieldDeclaration /** The Ant type to which this nested element corresponds. */ Modifier private ReferenceType String VariableDeclarator type FieldDeclaration /** The class to be created for this nested element */ Modifier private ReferenceType String VariableDeclarator className MethodDeclaration /**
         * set the tag name for this nested element
         *
         * @param name the name of this nested element
         */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MethodInvocation name MemberReference Locale US toLowerCase = MethodDeclaration /**
         * Set the type of this element. This is the name of an
         * Ant task or type which is to be used when this element is to be
         * created. This is an alternative to specifying the class name directly
         *
         * @param type the name of an Ant type, or task, to use for this nested
         * element.
         */ Modifier public setType FormalParameter ReferenceType String type StatementExpression Assignment This MemberReference type MemberReference type = MethodDeclaration /**
         * Set the classname of the class to be used for the nested element.
         * This specifies the class directly and is an alternative to specifying
         * the Ant type name.
         *
         * @param className the name of the class to use for this nested
         * element.
         */ Modifier public setClassName FormalParameter ReferenceType String className StatementExpression Assignment This MemberReference className MemberReference className = MethodDeclaration /**
     * Add a nested element definition.
     *
     * @param nestedElement the nested element definition.
     */ Modifier public addElement FormalParameter ReferenceType NestedElement nestedElement StatementExpression MethodInvocation nestedElements MemberReference nestedElement add MethodDeclaration /**
     * Define the script.
     */ Modifier public execute IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""scriptdef requires a name attribute to "" Literal ""name the script"" End IfStatement BinaryOperation == MethodInvocation runner getLanguage Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""<scriptdef> requires a language attribute "" Literal ""to specify the script language"" End StatementExpression Assignment MemberReference attributeSet ClassCreator ReferenceType HashSet = ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation attributes iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType Attribute VariableDeclarator attribute Cast ReferenceType Attribute MethodInvocation i next IfStatement BinaryOperation == MemberReference attribute name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""scriptdef <attribute> elements "" Literal ""must specify an attribute name"" End IfStatement MethodInvocation attributeSet MemberReference attribute name contains BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""scriptdef <"" MemberReference name Literal ""> declares "" Literal ""the "" MemberReference attribute name Literal "" attribute more than once"" End StatementExpression MethodInvocation attributeSet MemberReference attribute name add End StatementExpression Assignment MemberReference nestedElementMap ClassCreator ReferenceType HashMap = ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation nestedElements iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType NestedElement VariableDeclarator nestedElement Cast ReferenceType NestedElement MethodInvocation i next IfStatement BinaryOperation == MemberReference nestedElement name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""scriptdef <element> elements "" Literal ""must specify an element name"" End IfStatement MethodInvocation nestedElementMap MemberReference nestedElement name containsKey BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""scriptdef <"" MemberReference name Literal ""> declares "" Literal ""the "" MemberReference nestedElement name Literal "" nested element more "" Literal ""than once"" End IfStatement BinaryOperation && BinaryOperation == MemberReference nestedElement className Literal null BinaryOperation == MemberReference nestedElement type Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""scriptdef <element> elements "" Literal ""must specify either a classname or type attribute"" End IfStatement BinaryOperation && BinaryOperation != MemberReference nestedElement className Literal null BinaryOperation != MemberReference nestedElement type Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""scriptdef <element> elements "" Literal ""must specify only one of the classname and type "" Literal ""attributes"" End StatementExpression MethodInvocation nestedElementMap MemberReference nestedElement name MemberReference nestedElement put End LocalVariableDeclaration ReferenceType Map VariableDeclarator scriptRepository Literal null LocalVariableDeclaration ReferenceType Project VariableDeclarator project MethodInvocation getProject SynchronizedStatement MemberReference project StatementExpression Assignment MemberReference scriptRepository Cast ReferenceType Map MethodInvocation project MemberReference MagicNames SCRIPT_REPOSITORY getReference = IfStatement BinaryOperation == MemberReference scriptRepository Literal null BlockStatement StatementExpression Assignment MemberReference scriptRepository ClassCreator ReferenceType HashMap = StatementExpression MethodInvocation project MemberReference MagicNames SCRIPT_REPOSITORY MemberReference scriptRepository addReference End StatementExpression Assignment MemberReference name MethodInvocation ProjectHelper MethodInvocation getURI MemberReference name genComponentName = StatementExpression MethodInvocation scriptRepository MemberReference name This put LocalVariableDeclaration ReferenceType AntTypeDefinition VariableDeclarator def ClassCreator ReferenceType AntTypeDefinition StatementExpression MethodInvocation def MemberReference name setName StatementExpression MethodInvocation def ClassReference ReferenceType ScriptDefBase setClass StatementExpression MethodInvocation ComponentHelper MethodInvocation MemberReference def addDataTypeDefinition MethodInvocation getProject getComponentHelper MethodDeclaration /**
     * Create a nested element to be configured.
     *
     * @param elementName the name of the nested element.
     * @return object representing the element name.
     */ Modifier public ReferenceType Object createNestedElement FormalParameter ReferenceType String elementName LocalVariableDeclaration ReferenceType NestedElement VariableDeclarator definition Cast ReferenceType NestedElement MethodInvocation nestedElementMap MemberReference elementName get IfStatement BinaryOperation == MemberReference definition Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<"" MemberReference name Literal ""> does not support "" Literal ""the <"" MemberReference elementName Literal ""> nested element"" End LocalVariableDeclaration ReferenceType Object VariableDeclarator instance Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator classname MemberReference definition className IfStatement BinaryOperation == MemberReference classname Literal null BlockStatement StatementExpression Assignment MemberReference instance MethodInvocation MethodInvocation MemberReference definition type createTask getProject = IfStatement BinaryOperation == MemberReference instance Literal null BlockStatement StatementExpression Assignment MemberReference instance MethodInvocation MethodInvocation MemberReference definition type createDataType getProject = End BlockStatement LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator loader MethodInvocation createLoader LocalVariableDeclaration ReferenceType Class VariableDeclarator instanceClass Literal null TryStatement StatementExpression Assignment MemberReference instanceClass MethodInvocation Class MemberReference classname Literal true MemberReference loader forName = CatchClause CatchClauseParameter Throwable e TryStatement StatementExpression Assignment MemberReference instanceClass MethodInvocation Class MemberReference classname forName = CatchClause CatchClauseParameter Throwable e2 ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""scriptdef: Unable to load "" Literal ""class "" MemberReference classname Literal "" for nested element <"" MemberReference elementName Literal "">"" MemberReference e2 TryStatement StatementExpression Assignment MemberReference instance MethodInvocation instanceClass newInstance = CatchClause CatchClauseParameter Throwable e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""scriptdef: Unable to create "" Literal ""element of class "" MemberReference classname Literal "" for nested "" Literal ""element <"" MemberReference elementName Literal "">"" MemberReference e StatementExpression MethodInvocation MethodInvocation MemberReference instance setProjectReference getProject End IfStatement BinaryOperation == MemberReference instance Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""<"" MemberReference name Literal ""> is unable to create "" Literal ""the <"" MemberReference elementName Literal ""> nested element"" End ReturnStatement MemberReference instance MethodDeclaration /**
     * Execute the script.
     *
     * @param attributes collection of attributes
     *
     * @param elements a list of nested element values.
     */ Modifier public executeScript FormalParameter ReferenceType Map attributes FormalParameter ReferenceType Map elements StatementExpression MethodInvocation runner Literal ""attributes"" MemberReference attributes addBean StatementExpression MethodInvocation runner Literal ""elements"" MemberReference elements addBean StatementExpression MethodInvocation runner Literal ""project"" MethodInvocation getProject addBean StatementExpression MethodInvocation runner BinaryOperation + Literal ""scriptdef_"" MemberReference name executeScript MethodDeclaration /**
     * Defines the language (required).
     *
     * @param language the scripting language name for the script.
     */ Modifier public setLanguage FormalParameter ReferenceType String language StatementExpression MethodInvocation runner MemberReference language setLanguage MethodDeclaration /**
     * Load the script from an external file ; optional.
     *
     * @param file the file containing the script source.
     */ Modifier public setSrc FormalParameter ReferenceType File file StatementExpression MethodInvocation runner MemberReference file setSrc MethodDeclaration /**
     * Set the script text.
     *
     * @param text a component of the script text to be added.
     */ Modifier public addText FormalParameter ReferenceType String text StatementExpression MethodInvocation runner MemberReference text addText ReferenceType DefBase",0
510,510,,0
415,415,,1
58,58,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.vss Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * Performs CheckIn commands to Microsoft Visual SourceSafe.
 *
 *
 * @ant.task name=""vsscheckin"" category=""scm""
 */ MSVSSCHECKIN MethodDeclaration /**
     * Builds a command line to execute ss.
     * @return     The constructed commandline.
     */ Modifier protected ReferenceType Commandline buildCmdLine LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline IfStatement BinaryOperation == MethodInvocation getVsspath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""vsspath attribute must be set!"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End StatementExpression MethodInvocation commandLine MethodInvocation getSSCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_CHECKIN setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getVsspath setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getLocalpath setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getAutoresponse setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getRecursive setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getWritable setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getLogin setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getComment setValue createArgument ReturnStatement MemberReference commandLine MethodDeclaration /**
     * Override the project working directory.
     *
     * @param   localPath   The path on disk.
     */ Modifier public setLocalpath FormalParameter ReferenceType Path localPath StatementExpression SuperMethodInvocation MethodInvocation localPath toString setInternalLocalPath MethodDeclaration /**
     * Check-in files recursively. Defaults to false.
     *
     * @param recursive  The boolean value for recursive.
     */ Modifier public setRecursive FormalParameter BasicType boolean recursive StatementExpression SuperMethodInvocation MemberReference recursive setInternalRecursive MethodDeclaration /**
     * Unset the READ-ONLY flag on local copies of files checked-in to VSS.
     * Defaults to false.
     *
     * @param   writable The boolean value for writable.
     */ Modifier public final setWritable FormalParameter BasicType boolean writable StatementExpression SuperMethodInvocation MemberReference writable setInternalWritable MethodDeclaration /**
     * Autoresponce behaviour. Valid options are Y and N.
     *
     * @param response The auto response value.
     */ Modifier public setAutoresponse FormalParameter ReferenceType String response StatementExpression SuperMethodInvocation MemberReference response setInternalAutoResponse MethodDeclaration /**
     * Comment to apply to files checked-in to SourceSafe.
     *
     * @param comment The comment to apply in SourceSafe
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression SuperMethodInvocation MemberReference comment setInternalComment ReferenceType MSVSS",0
357,357,"CompilationUnit PackageDeclaration org.apache.tools.zip ClassDeclaration Modifier public final /**
 * Utility class that represents a four byte integer with conversion
 * rules for the big endian byte order of ZIP files.
 *
 * @version $Revision$
 */ ZipLong FieldDeclaration Modifier private BasicType long VariableDeclarator value ConstructorDeclaration Modifier public /**
     * Create instance from a number.
     *
     * @since 1.1
     */ ZipLong FormalParameter BasicType long value StatementExpression Assignment This MemberReference value MemberReference value = ConstructorDeclaration Modifier public /**
     * Create instance from bytes.
     *
     * @since 1.1
     */ ZipLong FormalParameter BasicType byte bytes StatementExpression ExplicitConstructorInvocation MemberReference bytes Literal 0 ConstructorDeclaration Modifier public /**
     * Create instance from the four bytes starting at offset.
     *
     * @since 1.1
     */ ZipLong FormalParameter BasicType byte bytes FormalParameter BasicType int offset StatementExpression Assignment MemberReference value BinaryOperation & BinaryOperation << MemberReference ArraySelector BinaryOperation + MemberReference offset Literal 3 bytes Literal 24 Literal 0xFF000000L = StatementExpression Assignment MemberReference value BinaryOperation & BinaryOperation << MemberReference ArraySelector BinaryOperation + MemberReference offset Literal 2 bytes Literal 16 Literal 0xFF0000 += StatementExpression Assignment MemberReference value BinaryOperation & BinaryOperation << MemberReference ArraySelector BinaryOperation + MemberReference offset Literal 1 bytes Literal 8 Literal 0xFF00 += StatementExpression Assignment MemberReference value BinaryOperation & MemberReference ArraySelector MemberReference offset bytes Literal 0xFF += MethodDeclaration /**
     * Get value as two bytes in big endian byte order.
     *
     * @since 1.1
     */ Modifier public BasicType byte getBytes LocalVariableDeclaration BasicType byte VariableDeclarator result ArrayCreator BasicType byte Literal 4 StatementExpression Assignment MemberReference ArraySelector Literal 0 result Cast BasicType byte BinaryOperation & MemberReference value Literal 0xFF = StatementExpression Assignment MemberReference ArraySelector Literal 1 result Cast BasicType byte BinaryOperation >> BinaryOperation & MemberReference value Literal 0xFF00 Literal 8 = StatementExpression Assignment MemberReference ArraySelector Literal 2 result Cast BasicType byte BinaryOperation >> BinaryOperation & MemberReference value Literal 0xFF0000 Literal 16 = StatementExpression Assignment MemberReference ArraySelector Literal 3 result Cast BasicType byte BinaryOperation >> BinaryOperation & MemberReference value Literal 0xFF000000l Literal 24 = ReturnStatement MemberReference result MethodDeclaration /**
     * Get value as Java int.
     *
     * @since 1.1
     */ Modifier public BasicType long getValue ReturnStatement MemberReference value MethodDeclaration /**
     * Override to make two instances with same value equal.
     *
     * @since 1.1
     */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object o IfStatement BinaryOperation || BinaryOperation == MemberReference o Literal null BinaryOperation instanceof MemberReference o ReferenceType ZipLong BlockStatement ReturnStatement Literal false End ReturnStatement BinaryOperation == MemberReference value Cast ReferenceType ZipLong MemberReference o MethodDeclaration /**
     * Override to make two instances with same value equal.
     *
     * @since 1.1
     */ Modifier public BasicType int hashCode ReturnStatement Cast BasicType int MemberReference value ReferenceType Cloneable",0
105,105,"CompilationUnit PackageDeclaration org.apache.tools.bzip2 Import java.io.OutputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * An output stream that compresses into the BZip2 format (without the file
 * header chars) into another stream.
 *
 *
 * TODO:    Update to BZip2 1.0.1
 */ CBZip2OutputStream FieldDeclaration Modifier final protected static BasicType int VariableDeclarator SETMASK BinaryOperation << Literal 1 Literal 21 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator CLEARMASK MemberReference SETMASK FieldDeclaration Modifier final protected static BasicType int VariableDeclarator GREATER_ICOST Literal 15 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator LESSER_ICOST Literal 0 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator SMALL_THRESH Literal 20 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator DEPTH_THRESH Literal 10 FieldDeclaration Modifier final protected static BasicType int VariableDeclarator QSORT_STACK_SIZE Literal 1000 MethodDeclaration Modifier private static panic StatementExpression MethodInvocation System.out Literal ""panic"" println MethodDeclaration Modifier private makeMaps LocalVariableDeclaration BasicType int VariableDeclarator i StatementExpression Assignment MemberReference nInUse Literal 0 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 256 MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i inUse BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference nInUse seqToUnseq Cast BasicType char MemberReference i = StatementExpression Assignment MemberReference ArraySelector MemberReference i unseqToSeq Cast BasicType char MemberReference nInUse = StatementExpression MemberReference ++ nInUse End End MethodDeclaration Modifier protected static hbMakeCodeLengths FormalParameter BasicType char len FormalParameter BasicType int freq FormalParameter BasicType int alphaSize FormalParameter BasicType int maxLen LocalVariableDeclaration BasicType int VariableDeclarator nNodes VariableDeclarator nHeap VariableDeclarator n1 VariableDeclarator n2 VariableDeclarator i VariableDeclarator j VariableDeclarator k LocalVariableDeclaration BasicType boolean VariableDeclarator tooLong LocalVariableDeclaration BasicType int VariableDeclarator heap ArrayCreator BasicType int BinaryOperation + MemberReference MAX_ALPHA_SIZE Literal 2 LocalVariableDeclaration BasicType int VariableDeclarator weight ArrayCreator BasicType int BinaryOperation * MemberReference MAX_ALPHA_SIZE Literal 2 LocalVariableDeclaration BasicType int VariableDeclarator parent ArrayCreator BasicType int BinaryOperation * MemberReference MAX_ALPHA_SIZE Literal 2 ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 weight BinaryOperation << TernaryExpression BinaryOperation == MemberReference ArraySelector MemberReference i freq Literal 0 Literal 1 MemberReference ArraySelector MemberReference i freq Literal 8 = End WhileStatement Literal true BlockStatement StatementExpression Assignment MemberReference nNodes MemberReference alphaSize = StatementExpression Assignment MemberReference nHeap Literal 0 = StatementExpression Assignment MemberReference ArraySelector Literal 0 heap Literal 0 = StatementExpression Assignment MemberReference ArraySelector Literal 0 weight Literal 0 = StatementExpression Assignment MemberReference ArraySelector Literal 0 parent Literal - 2 = ForStatement ForControl Assignment MemberReference i Literal 1 = BinaryOperation <= MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i parent Literal - 1 = StatementExpression MemberReference ++ nHeap StatementExpression Assignment MemberReference ArraySelector MemberReference nHeap heap MemberReference i = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zz VariableDeclarator tmp StatementExpression Assignment MemberReference zz MemberReference nHeap = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference zz heap = WhileStatement BinaryOperation < MemberReference ArraySelector MemberReference tmp weight MemberReference ArraySelector MemberReference ArraySelector BinaryOperation >> MemberReference zz Literal 1 heap weight BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference zz heap MemberReference ArraySelector BinaryOperation >> MemberReference zz Literal 1 heap = StatementExpression Assignment MemberReference zz Literal 1 >>= End StatementExpression Assignment MemberReference ArraySelector MemberReference zz heap MemberReference tmp = End IfStatement BinaryOperation < MemberReference nHeap BinaryOperation + MemberReference MAX_ALPHA_SIZE Literal 2 BlockStatement StatementExpression MethodInvocation panic End WhileStatement BinaryOperation > MemberReference nHeap Literal 1 BlockStatement StatementExpression Assignment MemberReference n1 MemberReference ArraySelector Literal 1 heap = StatementExpression Assignment MemberReference ArraySelector Literal 1 heap MemberReference ArraySelector MemberReference nHeap heap = StatementExpression MemberReference -- nHeap BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zz Literal 0 VariableDeclarator yy Literal 0 VariableDeclarator tmp Literal 0 StatementExpression Assignment MemberReference zz Literal 1 = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference zz heap = WhileStatement Literal true BlockStatement StatementExpression Assignment MemberReference yy BinaryOperation << MemberReference zz Literal 1 = IfStatement BinaryOperation > MemberReference yy MemberReference nHeap BlockStatement BreakStatement End IfStatement BinaryOperation && BinaryOperation < MemberReference yy MemberReference nHeap BinaryOperation < MemberReference ArraySelector MemberReference ArraySelector BinaryOperation + MemberReference yy Literal 1 heap weight MemberReference ArraySelector MemberReference ArraySelector MemberReference yy heap weight BlockStatement StatementExpression MemberReference ++ yy End IfStatement BinaryOperation < MemberReference ArraySelector MemberReference tmp weight MemberReference ArraySelector MemberReference ArraySelector MemberReference yy heap weight BlockStatement BreakStatement End StatementExpression Assignment MemberReference ArraySelector MemberReference zz heap MemberReference ArraySelector MemberReference yy heap = StatementExpression Assignment MemberReference zz MemberReference yy = End StatementExpression Assignment MemberReference ArraySelector MemberReference zz heap MemberReference tmp = StatementExpression Assignment MemberReference n2 MemberReference ArraySelector Literal 1 heap = StatementExpression Assignment MemberReference ArraySelector Literal 1 heap MemberReference ArraySelector MemberReference nHeap heap = StatementExpression MemberReference -- nHeap BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zz Literal 0 VariableDeclarator yy Literal 0 VariableDeclarator tmp Literal 0 StatementExpression Assignment MemberReference zz Literal 1 = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference zz heap = WhileStatement Literal true BlockStatement StatementExpression Assignment MemberReference yy BinaryOperation << MemberReference zz Literal 1 = IfStatement BinaryOperation > MemberReference yy MemberReference nHeap BlockStatement BreakStatement End IfStatement BinaryOperation && BinaryOperation < MemberReference yy MemberReference nHeap BinaryOperation < MemberReference ArraySelector MemberReference ArraySelector BinaryOperation + MemberReference yy Literal 1 heap weight MemberReference ArraySelector MemberReference ArraySelector MemberReference yy heap weight BlockStatement StatementExpression MemberReference ++ yy End IfStatement BinaryOperation < MemberReference ArraySelector MemberReference tmp weight MemberReference ArraySelector MemberReference ArraySelector MemberReference yy heap weight BlockStatement BreakStatement End StatementExpression Assignment MemberReference ArraySelector MemberReference zz heap MemberReference ArraySelector MemberReference yy heap = StatementExpression Assignment MemberReference zz MemberReference yy = End StatementExpression Assignment MemberReference ArraySelector MemberReference zz heap MemberReference tmp = StatementExpression MemberReference ++ nNodes StatementExpression Assignment MemberReference ArraySelector MemberReference n1 parent Assignment MemberReference ArraySelector MemberReference n2 parent MemberReference nNodes = = StatementExpression Assignment MemberReference ArraySelector MemberReference nNodes weight BinaryOperation | BinaryOperation + BinaryOperation & MemberReference ArraySelector MemberReference n1 weight Literal 0xffffff00 BinaryOperation & MemberReference ArraySelector MemberReference n2 weight Literal 0xffffff00 BinaryOperation + Literal 1 TernaryExpression BinaryOperation > BinaryOperation & MemberReference ArraySelector MemberReference n1 weight Literal 0x000000ff BinaryOperation & MemberReference ArraySelector MemberReference n2 weight Literal 0x000000ff BinaryOperation & MemberReference ArraySelector MemberReference n1 weight Literal 0x000000ff BinaryOperation & MemberReference ArraySelector MemberReference n2 weight Literal 0x000000ff = StatementExpression Assignment MemberReference ArraySelector MemberReference nNodes parent Literal - 1 = StatementExpression MemberReference ++ nHeap StatementExpression Assignment MemberReference ArraySelector MemberReference nHeap heap MemberReference nNodes = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator zz Literal 0 VariableDeclarator tmp Literal 0 StatementExpression Assignment MemberReference zz MemberReference nHeap = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference zz heap = WhileStatement BinaryOperation < MemberReference ArraySelector MemberReference tmp weight MemberReference ArraySelector MemberReference ArraySelector BinaryOperation >> MemberReference zz Literal 1 heap weight BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference zz heap MemberReference ArraySelector BinaryOperation >> MemberReference zz Literal 1 heap = StatementExpression Assignment MemberReference zz Literal 1 >>= End StatementExpression Assignment MemberReference ArraySelector MemberReference zz heap MemberReference tmp = End IfStatement BinaryOperation < MemberReference nNodes BinaryOperation * MemberReference MAX_ALPHA_SIZE Literal 2 BlockStatement StatementExpression MethodInvocation panic End StatementExpression Assignment MemberReference tooLong Literal false = ForStatement ForControl Assignment MemberReference i Literal 1 = BinaryOperation <= MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference j Literal 0 = StatementExpression Assignment MemberReference k MemberReference i = WhileStatement BinaryOperation >= MemberReference ArraySelector MemberReference k parent Literal 0 BlockStatement StatementExpression Assignment MemberReference k MemberReference ArraySelector MemberReference k parent = StatementExpression MemberReference ++ j End StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 len Cast BasicType char MemberReference j = IfStatement BinaryOperation > MemberReference j MemberReference maxLen BlockStatement StatementExpression Assignment MemberReference tooLong Literal true = End End IfStatement MemberReference ! tooLong BlockStatement BreakStatement End ForStatement ForControl Assignment MemberReference i Literal 1 = BinaryOperation < MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference j BinaryOperation >> MemberReference ArraySelector MemberReference i weight Literal 8 = StatementExpression Assignment MemberReference j BinaryOperation + Literal 1 BinaryOperation / MemberReference j Literal 2 = StatementExpression Assignment MemberReference ArraySelector MemberReference i weight BinaryOperation << MemberReference j Literal 8 = End End FieldDeclaration BasicType int VariableDeclarator last FieldDeclaration BasicType int VariableDeclarator origPtr FieldDeclaration BasicType int VariableDeclarator blockSize100k FieldDeclaration BasicType boolean VariableDeclarator blockRandomised FieldDeclaration BasicType int VariableDeclarator bytesOut FieldDeclaration BasicType int VariableDeclarator bsBuff FieldDeclaration BasicType int VariableDeclarator bsLive FieldDeclaration ReferenceType CRC VariableDeclarator mCrc ClassCreator ReferenceType CRC FieldDeclaration Modifier private BasicType boolean VariableDeclarator inUse ArrayCreator BasicType boolean Literal 256 FieldDeclaration Modifier private BasicType int VariableDeclarator nInUse FieldDeclaration Modifier private BasicType char VariableDeclarator seqToUnseq ArrayCreator BasicType char Literal 256 FieldDeclaration Modifier private BasicType char VariableDeclarator unseqToSeq ArrayCreator BasicType char Literal 256 FieldDeclaration Modifier private BasicType char VariableDeclarator selector ArrayCreator BasicType char MemberReference MAX_SELECTORS FieldDeclaration Modifier private BasicType char VariableDeclarator selectorMtf ArrayCreator BasicType char MemberReference MAX_SELECTORS FieldDeclaration Modifier private BasicType char VariableDeclarator block FieldDeclaration Modifier private BasicType int VariableDeclarator quadrant FieldDeclaration Modifier private BasicType int VariableDeclarator zptr FieldDeclaration Modifier private BasicType short VariableDeclarator szptr FieldDeclaration Modifier private BasicType int VariableDeclarator ftab FieldDeclaration Modifier private BasicType int VariableDeclarator nMTF FieldDeclaration Modifier private BasicType int VariableDeclarator mtfFreq ArrayCreator BasicType int MemberReference MAX_ALPHA_SIZE FieldDeclaration Modifier private BasicType int VariableDeclarator workFactor FieldDeclaration Modifier private BasicType int VariableDeclarator workDone FieldDeclaration Modifier private BasicType int VariableDeclarator workLimit FieldDeclaration Modifier private BasicType boolean VariableDeclarator firstAttempt FieldDeclaration Modifier private BasicType int VariableDeclarator nBlocksRandomised FieldDeclaration Modifier private BasicType int VariableDeclarator currentChar Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator runLength Literal 0 ConstructorDeclaration Modifier public CBZip2OutputStream FormalParameter ReferenceType OutputStream inStream IOException StatementExpression ExplicitConstructorInvocation MemberReference inStream Literal 9 ConstructorDeclaration Modifier public CBZip2OutputStream FormalParameter ReferenceType OutputStream inStream FormalParameter BasicType int inBlockSize IOException StatementExpression Assignment MemberReference block Literal null = StatementExpression Assignment MemberReference quadrant Literal null = StatementExpression Assignment MemberReference zptr Literal null = StatementExpression Assignment MemberReference ftab Literal null = StatementExpression MethodInvocation MemberReference inStream bsSetStream StatementExpression Assignment MemberReference workFactor Literal 50 = IfStatement BinaryOperation > MemberReference inBlockSize Literal 9 BlockStatement StatementExpression Assignment MemberReference inBlockSize Literal 9 = End IfStatement BinaryOperation < MemberReference inBlockSize Literal 1 BlockStatement StatementExpression Assignment MemberReference inBlockSize Literal 1 = End StatementExpression Assignment MemberReference blockSize100k MemberReference inBlockSize = StatementExpression MethodInvocation allocateCompressStructures StatementExpression MethodInvocation initialize StatementExpression MethodInvocation initBlock MethodDeclaration /**
     *
     * modified by Oliver Merkel, 010128
     *
     */ Modifier public write FormalParameter BasicType int bv IOException LocalVariableDeclaration BasicType int VariableDeclarator b BinaryOperation % BinaryOperation + Literal 256 MemberReference bv Literal 256 IfStatement BinaryOperation != MemberReference currentChar Literal - 1 BlockStatement IfStatement BinaryOperation == MemberReference currentChar MemberReference b BlockStatement StatementExpression MemberReference ++ runLength IfStatement BinaryOperation > MemberReference runLength Literal 254 BlockStatement StatementExpression MethodInvocation writeRun StatementExpression Assignment MemberReference currentChar Literal - 1 = StatementExpression Assignment MemberReference runLength Literal 0 = End BlockStatement StatementExpression MethodInvocation writeRun StatementExpression Assignment MemberReference runLength Literal 1 = StatementExpression Assignment MemberReference currentChar MemberReference b = End BlockStatement StatementExpression Assignment MemberReference currentChar MemberReference b = StatementExpression MemberReference ++ runLength End MethodDeclaration Modifier private writeRun IOException IfStatement BinaryOperation < MemberReference last MemberReference allowableBlockSize BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference currentChar inUse Literal true = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference runLength MemberReference ++ i BlockStatement StatementExpression MethodInvocation mCrc Cast BasicType char MemberReference currentChar updateCRC End SwitchStatement MemberReference runLength SwitchStatementCase Literal 1 StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = BreakStatement SwitchStatementCase Literal 2 StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = BreakStatement SwitchStatementCase Literal 3 StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = BreakStatement SwitchStatementCase StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference runLength Literal 4 inUse Literal true = StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char MemberReference currentChar = StatementExpression MemberReference ++ last StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference last Literal 1 block Cast BasicType char BinaryOperation - MemberReference runLength Literal 4 = BreakStatement End BlockStatement StatementExpression MethodInvocation endBlock StatementExpression MethodInvocation initBlock StatementExpression MethodInvocation writeRun End FieldDeclaration BasicType boolean VariableDeclarator closed Literal false MethodDeclaration Modifier protected finalize Throwable StatementExpression MethodInvocation close StatementExpression SuperMethodInvocation finalize MethodDeclaration Modifier public close IOException IfStatement MemberReference closed BlockStatement ReturnStatement End IfStatement BinaryOperation > MemberReference runLength Literal 0 BlockStatement StatementExpression MethodInvocation writeRun End StatementExpression Assignment MemberReference currentChar Literal - 1 = StatementExpression MethodInvocation endBlock StatementExpression MethodInvocation endCompression StatementExpression Assignment MemberReference closed Literal true = StatementExpression SuperMethodInvocation close StatementExpression MethodInvocation bsStream close MethodDeclaration Modifier public flush IOException StatementExpression SuperMethodInvocation flush StatementExpression MethodInvocation bsStream flush FieldDeclaration Modifier private BasicType int VariableDeclarator blockCRC VariableDeclarator combinedCRC MethodDeclaration Modifier private initialize IOException StatementExpression Assignment MemberReference bytesOut Literal 0 = StatementExpression Assignment MemberReference nBlocksRandomised Literal 0 = StatementExpression MethodInvocation Literal 'h' bsPutUChar StatementExpression MethodInvocation BinaryOperation + Literal '0' MemberReference blockSize100k bsPutUChar StatementExpression Assignment MemberReference combinedCRC Literal 0 = FieldDeclaration Modifier private BasicType int VariableDeclarator allowableBlockSize MethodDeclaration Modifier private initBlock StatementExpression MethodInvocation mCrc initialiseCRC StatementExpression Assignment MemberReference last Literal - 1 = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i Literal 256 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i inUse Literal false = End StatementExpression Assignment MemberReference allowableBlockSize BinaryOperation - BinaryOperation * MemberReference baseBlockSize MemberReference blockSize100k Literal 20 = MethodDeclaration Modifier private endBlock IOException StatementExpression Assignment MemberReference blockCRC MethodInvocation mCrc getFinalCRC = StatementExpression Assignment MemberReference combinedCRC BinaryOperation | BinaryOperation << MemberReference combinedCRC Literal 1 BinaryOperation >>> MemberReference combinedCRC Literal 31 = StatementExpression Assignment MemberReference combinedCRC MemberReference blockCRC ^= StatementExpression MethodInvocation doReversibleTransformation StatementExpression MethodInvocation Literal 0x31 bsPutUChar StatementExpression MethodInvocation Literal 0x41 bsPutUChar StatementExpression MethodInvocation Literal 0x59 bsPutUChar StatementExpression MethodInvocation Literal 0x26 bsPutUChar StatementExpression MethodInvocation Literal 0x53 bsPutUChar StatementExpression MethodInvocation Literal 0x59 bsPutUChar StatementExpression MethodInvocation MemberReference blockCRC bsPutint IfStatement MemberReference blockRandomised BlockStatement StatementExpression MethodInvocation Literal 1 Literal 1 bsW StatementExpression MemberReference ++ nBlocksRandomised BlockStatement StatementExpression MethodInvocation Literal 1 Literal 0 bsW End StatementExpression MethodInvocation moveToFrontCodeAndSend MethodDeclaration Modifier private endCompression IOException StatementExpression MethodInvocation Literal 0x17 bsPutUChar StatementExpression MethodInvocation Literal 0x72 bsPutUChar StatementExpression MethodInvocation Literal 0x45 bsPutUChar StatementExpression MethodInvocation Literal 0x38 bsPutUChar StatementExpression MethodInvocation Literal 0x50 bsPutUChar StatementExpression MethodInvocation Literal 0x90 bsPutUChar StatementExpression MethodInvocation MemberReference combinedCRC bsPutint StatementExpression MethodInvocation bsFinishedWithStream MethodDeclaration Modifier private hbAssignCodes FormalParameter BasicType int code FormalParameter BasicType char length FormalParameter BasicType int minLen FormalParameter BasicType int maxLen FormalParameter BasicType int alphaSize LocalVariableDeclaration BasicType int VariableDeclarator n VariableDeclarator vec VariableDeclarator i StatementExpression Assignment MemberReference vec Literal 0 = ForStatement ForControl Assignment MemberReference n MemberReference minLen = BinaryOperation <= MemberReference n MemberReference maxLen MemberReference ++ n BlockStatement ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i length MemberReference n BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i code MemberReference vec = StatementExpression MemberReference ++ vec End End Statement StatementExpression Assignment MemberReference vec Literal 1 <<= End MethodDeclaration Modifier private bsSetStream FormalParameter ReferenceType OutputStream f StatementExpression Assignment MemberReference bsStream MemberReference f = StatementExpression Assignment MemberReference bsLive Literal 0 = StatementExpression Assignment MemberReference bsBuff Literal 0 = StatementExpression Assignment MemberReference bytesOut Literal 0 = MethodDeclaration Modifier private bsFinishedWithStream IOException WhileStatement BinaryOperation > MemberReference bsLive Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator ch BinaryOperation >> MemberReference bsBuff Literal 24 TryStatement StatementExpression MethodInvocation bsStream MemberReference ch write CatchClause CatchClauseParameter IOException e ThrowStatement MemberReference e StatementExpression Assignment MemberReference bsBuff Literal 8 <<= StatementExpression Assignment MemberReference bsLive Literal 8 -= StatementExpression MemberReference ++ bytesOut End MethodDeclaration Modifier private bsW FormalParameter BasicType int n FormalParameter BasicType int v IOException WhileStatement BinaryOperation >= MemberReference bsLive Literal 8 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator ch BinaryOperation >> MemberReference bsBuff Literal 24 TryStatement StatementExpression MethodInvocation bsStream MemberReference ch write CatchClause CatchClauseParameter IOException e ThrowStatement MemberReference e StatementExpression Assignment MemberReference bsBuff Literal 8 <<= StatementExpression Assignment MemberReference bsLive Literal 8 -= StatementExpression MemberReference ++ bytesOut End StatementExpression Assignment MemberReference bsBuff BinaryOperation << MemberReference v BinaryOperation - BinaryOperation - Literal 32 MemberReference bsLive MemberReference n |= StatementExpression Assignment MemberReference bsLive MemberReference n += MethodDeclaration Modifier private bsPutUChar FormalParameter BasicType int c IOException StatementExpression MethodInvocation Literal 8 MemberReference c bsW MethodDeclaration Modifier private bsPutint FormalParameter BasicType int u IOException StatementExpression MethodInvocation Literal 8 BinaryOperation & BinaryOperation >> MemberReference u Literal 24 Literal 0xff bsW StatementExpression MethodInvocation Literal 8 BinaryOperation & BinaryOperation >> MemberReference u Literal 16 Literal 0xff bsW StatementExpression MethodInvocation Literal 8 BinaryOperation & BinaryOperation >> MemberReference u Literal 8 Literal 0xff bsW StatementExpression MethodInvocation Literal 8 BinaryOperation & MemberReference u Literal 0xff bsW MethodDeclaration Modifier private bsPutIntVS FormalParameter BasicType int numBits FormalParameter BasicType int c IOException StatementExpression MethodInvocation MemberReference numBits MemberReference c bsW MethodDeclaration Modifier private sendMTFValues IOException LocalVariableDeclaration BasicType char VariableDeclarator len ArrayCreator BasicType char MemberReference N_GROUPS MemberReference MAX_ALPHA_SIZE LocalVariableDeclaration BasicType int VariableDeclarator v VariableDeclarator t VariableDeclarator i VariableDeclarator j VariableDeclarator gs VariableDeclarator ge VariableDeclarator totc VariableDeclarator bt VariableDeclarator bc VariableDeclarator iter LocalVariableDeclaration BasicType int VariableDeclarator nSelectors Literal 0 VariableDeclarator alphaSize VariableDeclarator minLen VariableDeclarator maxLen VariableDeclarator selCtr LocalVariableDeclaration BasicType int VariableDeclarator nGroups VariableDeclarator nBytes StatementExpression Assignment MemberReference alphaSize BinaryOperation + MemberReference nInUse Literal 2 = ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference N_GROUPS MemberReference ++ t BlockStatement ForStatement ForControl Assignment MemberReference v Literal 0 = BinaryOperation < MemberReference v MemberReference alphaSize MemberReference ++ v BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference t ArraySelector MemberReference v len Cast BasicType char MemberReference GREATER_ICOST = End End IfStatement BinaryOperation <= MemberReference nMTF Literal 0 BlockStatement StatementExpression MethodInvocation panic End IfStatement BinaryOperation < MemberReference nMTF Literal 200 BlockStatement StatementExpression Assignment MemberReference nGroups Literal 2 = IfStatement BinaryOperation < MemberReference nMTF Literal 600 BlockStatement StatementExpression Assignment MemberReference nGroups Literal 3 = IfStatement BinaryOperation < MemberReference nMTF Literal 1200 BlockStatement StatementExpression Assignment MemberReference nGroups Literal 4 = IfStatement BinaryOperation < MemberReference nMTF Literal 2400 BlockStatement StatementExpression Assignment MemberReference nGroups Literal 5 = BlockStatement StatementExpression Assignment MemberReference nGroups Literal 6 = End End End End BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator nPart VariableDeclarator remF VariableDeclarator tFreq VariableDeclarator aFreq StatementExpression Assignment MemberReference nPart MemberReference nGroups = StatementExpression Assignment MemberReference remF MemberReference nMTF = StatementExpression Assignment MemberReference gs Literal 0 = WhileStatement BinaryOperation > MemberReference nPart Literal 0 BlockStatement StatementExpression Assignment MemberReference tFreq BinaryOperation / MemberReference remF MemberReference nPart = StatementExpression Assignment MemberReference ge BinaryOperation - MemberReference gs Literal 1 = StatementExpression Assignment MemberReference aFreq Literal 0 = WhileStatement BinaryOperation && BinaryOperation < MemberReference aFreq MemberReference tFreq BinaryOperation < MemberReference ge BinaryOperation - MemberReference alphaSize Literal 1 BlockStatement StatementExpression MemberReference ++ ge StatementExpression Assignment MemberReference aFreq MemberReference ArraySelector MemberReference ge mtfFreq += End IfStatement BinaryOperation && BinaryOperation && BinaryOperation && BinaryOperation > MemberReference ge MemberReference gs BinaryOperation != MemberReference nPart MemberReference nGroups BinaryOperation != MemberReference nPart Literal 1 BinaryOperation == BinaryOperation % BinaryOperation - MemberReference nGroups MemberReference nPart Literal 2 Literal 1 BlockStatement StatementExpression Assignment MemberReference aFreq MemberReference ArraySelector MemberReference ge mtfFreq -= StatementExpression MemberReference -- ge End ForStatement ForControl Assignment MemberReference v Literal 0 = BinaryOperation < MemberReference v MemberReference alphaSize MemberReference ++ v BlockStatement IfStatement BinaryOperation && BinaryOperation >= MemberReference v MemberReference gs BinaryOperation <= MemberReference v MemberReference ge BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference nPart Literal 1 ArraySelector MemberReference v len Cast BasicType char MemberReference LESSER_ICOST = BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference nPart Literal 1 ArraySelector MemberReference v len Cast BasicType char MemberReference GREATER_ICOST = End End StatementExpression MemberReference -- nPart StatementExpression Assignment MemberReference gs BinaryOperation + MemberReference ge Literal 1 = StatementExpression Assignment MemberReference remF MemberReference aFreq -= End LocalVariableDeclaration BasicType int VariableDeclarator rfreq ArrayCreator BasicType int MemberReference N_GROUPS MemberReference MAX_ALPHA_SIZE LocalVariableDeclaration BasicType int VariableDeclarator fave ArrayCreator BasicType int MemberReference N_GROUPS LocalVariableDeclaration BasicType short VariableDeclarator cost ArrayCreator BasicType short MemberReference N_GROUPS ForStatement ForControl Assignment MemberReference iter Literal 0 = BinaryOperation < MemberReference iter MemberReference N_ITERS MemberReference ++ iter BlockStatement ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference t fave Literal 0 = End ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement ForStatement ForControl Assignment MemberReference v Literal 0 = BinaryOperation < MemberReference v MemberReference alphaSize MemberReference ++ v BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference t ArraySelector MemberReference v rfreq Literal 0 = End End StatementExpression Assignment MemberReference nSelectors Literal 0 = StatementExpression Assignment MemberReference totc Literal 0 = StatementExpression Assignment MemberReference gs Literal 0 = WhileStatement Literal true BlockStatement IfStatement BinaryOperation >= MemberReference gs MemberReference nMTF BlockStatement BreakStatement End StatementExpression Assignment MemberReference ge BinaryOperation - BinaryOperation + MemberReference gs MemberReference G_SIZE Literal 1 = IfStatement BinaryOperation >= MemberReference ge MemberReference nMTF BlockStatement StatementExpression Assignment MemberReference ge BinaryOperation - MemberReference nMTF Literal 1 = End ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference t cost Literal 0 = End IfStatement BinaryOperation == MemberReference nGroups Literal 6 BlockStatement LocalVariableDeclaration BasicType short VariableDeclarator cost0 VariableDeclarator cost1 VariableDeclarator cost2 VariableDeclarator cost3 VariableDeclarator cost4 VariableDeclarator cost5 StatementExpression Assignment MemberReference cost0 Assignment MemberReference cost1 Assignment MemberReference cost2 Assignment MemberReference cost3 Assignment MemberReference cost4 Assignment MemberReference cost5 Literal 0 = = = = = = ForStatement ForControl Assignment MemberReference i MemberReference gs = BinaryOperation <= MemberReference i MemberReference ge MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType short VariableDeclarator icv MemberReference ArraySelector MemberReference i szptr StatementExpression Assignment MemberReference cost0 MemberReference ArraySelector Literal 0 ArraySelector MemberReference icv len += StatementExpression Assignment MemberReference cost1 MemberReference ArraySelector Literal 1 ArraySelector MemberReference icv len += StatementExpression Assignment MemberReference cost2 MemberReference ArraySelector Literal 2 ArraySelector MemberReference icv len += StatementExpression Assignment MemberReference cost3 MemberReference ArraySelector Literal 3 ArraySelector MemberReference icv len += StatementExpression Assignment MemberReference cost4 MemberReference ArraySelector Literal 4 ArraySelector MemberReference icv len += StatementExpression Assignment MemberReference cost5 MemberReference ArraySelector Literal 5 ArraySelector MemberReference icv len += End StatementExpression Assignment MemberReference ArraySelector Literal 0 cost MemberReference cost0 = StatementExpression Assignment MemberReference ArraySelector Literal 1 cost MemberReference cost1 = StatementExpression Assignment MemberReference ArraySelector Literal 2 cost MemberReference cost2 = StatementExpression Assignment MemberReference ArraySelector Literal 3 cost MemberReference cost3 = StatementExpression Assignment MemberReference ArraySelector Literal 4 cost MemberReference cost4 = StatementExpression Assignment MemberReference ArraySelector Literal 5 cost MemberReference cost5 = BlockStatement ForStatement ForControl Assignment MemberReference i MemberReference gs = BinaryOperation <= MemberReference i MemberReference ge MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType short VariableDeclarator icv MemberReference ArraySelector MemberReference i szptr ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference t cost MemberReference ArraySelector MemberReference t ArraySelector MemberReference icv len += End End End StatementExpression Assignment MemberReference bc Literal 999999999 = StatementExpression Assignment MemberReference bt Literal - 1 = ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement IfStatement BinaryOperation < MemberReference ArraySelector MemberReference t cost MemberReference bc BlockStatement StatementExpression Assignment MemberReference bc MemberReference ArraySelector MemberReference t cost = StatementExpression Assignment MemberReference bt MemberReference t = End End Statement StatementExpression Assignment MemberReference totc MemberReference bc += StatementExpression MemberReference ++ ArraySelector MemberReference bt fave StatementExpression Assignment MemberReference ArraySelector MemberReference nSelectors selector Cast BasicType char MemberReference bt = StatementExpression MemberReference ++ nSelectors ForStatement ForControl Assignment MemberReference i MemberReference gs = BinaryOperation <= MemberReference i MemberReference ge MemberReference ++ i BlockStatement StatementExpression MemberReference ++ ArraySelector MemberReference bt ArraySelector MemberReference ArraySelector MemberReference i szptr rfreq End StatementExpression Assignment MemberReference gs BinaryOperation + MemberReference ge Literal 1 = End ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference t len MemberReference ArraySelector MemberReference t rfreq MemberReference alphaSize Literal 20 hbMakeCodeLengths End End StatementExpression Assignment MemberReference rfreq Literal null = StatementExpression Assignment MemberReference fave Literal null = StatementExpression Assignment MemberReference cost Literal null = IfStatement BinaryOperation < MemberReference nGroups Literal 8 BlockStatement StatementExpression MethodInvocation panic End IfStatement BinaryOperation && BinaryOperation < MemberReference nSelectors Literal 32768 BinaryOperation <= MemberReference nSelectors BinaryOperation + Literal 2 BinaryOperation / Literal 900000 MemberReference G_SIZE BlockStatement StatementExpression MethodInvocation panic End BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator pos ArrayCreator BasicType char MemberReference N_GROUPS LocalVariableDeclaration BasicType char VariableDeclarator ll_i VariableDeclarator tmp2 VariableDeclarator tmp ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference nGroups MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i pos Cast BasicType char MemberReference i = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference nSelectors MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ll_i MemberReference ArraySelector MemberReference i selector = StatementExpression Assignment MemberReference j Literal 0 = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference j pos = WhileStatement BinaryOperation != MemberReference ll_i MemberReference tmp BlockStatement StatementExpression MemberReference ++ j StatementExpression Assignment MemberReference tmp2 MemberReference tmp = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference j pos = StatementExpression Assignment MemberReference ArraySelector MemberReference j pos MemberReference tmp2 = End StatementExpression Assignment MemberReference ArraySelector Literal 0 pos MemberReference tmp = StatementExpression Assignment MemberReference ArraySelector MemberReference i selectorMtf Cast BasicType char MemberReference j = End LocalVariableDeclaration BasicType int VariableDeclarator code ArrayCreator BasicType int MemberReference N_GROUPS MemberReference MAX_ALPHA_SIZE ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement StatementExpression Assignment MemberReference minLen Literal 32 = StatementExpression Assignment MemberReference maxLen Literal 0 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len MemberReference maxLen BlockStatement StatementExpression Assignment MemberReference maxLen MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len = End IfStatement BinaryOperation < MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len MemberReference minLen BlockStatement StatementExpression Assignment MemberReference minLen MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len = End End IfStatement BinaryOperation > MemberReference maxLen Literal 20 BlockStatement StatementExpression MethodInvocation panic End IfStatement BinaryOperation < MemberReference minLen Literal 1 BlockStatement StatementExpression MethodInvocation panic End StatementExpression MethodInvocation MemberReference ArraySelector MemberReference t code MemberReference ArraySelector MemberReference t len MemberReference minLen MemberReference maxLen MemberReference alphaSize hbAssignCodes End BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator inUse16 ArrayCreator BasicType boolean Literal 16 ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 16 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i inUse16 Literal false = ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation < MemberReference j Literal 16 MemberReference ++ j BlockStatement IfStatement MemberReference ArraySelector BinaryOperation + BinaryOperation * MemberReference i Literal 16 MemberReference j inUse BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i inUse16 Literal true = End End End StatementExpression Assignment MemberReference nBytes MemberReference bytesOut = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 16 MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i inUse16 BlockStatement StatementExpression MethodInvocation Literal 1 Literal 1 bsW BlockStatement StatementExpression MethodInvocation Literal 1 Literal 0 bsW End End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 16 MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i inUse16 BlockStatement ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation < MemberReference j Literal 16 MemberReference ++ j BlockStatement IfStatement MemberReference ArraySelector BinaryOperation + BinaryOperation * MemberReference i Literal 16 MemberReference j inUse BlockStatement StatementExpression MethodInvocation Literal 1 Literal 1 bsW BlockStatement StatementExpression MethodInvocation Literal 1 Literal 0 bsW End End End End StatementExpression Assignment MemberReference nBytes MemberReference bytesOut = StatementExpression MethodInvocation Literal 3 MemberReference nGroups bsW StatementExpression MethodInvocation Literal 15 MemberReference nSelectors bsW ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference nSelectors MemberReference ++ i BlockStatement ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation < MemberReference j MemberReference ArraySelector MemberReference i selectorMtf MemberReference ++ j BlockStatement StatementExpression MethodInvocation Literal 1 Literal 1 bsW End StatementExpression MethodInvocation Literal 1 Literal 0 bsW End StatementExpression Assignment MemberReference nBytes MemberReference bytesOut = ForStatement ForControl Assignment MemberReference t Literal 0 = BinaryOperation < MemberReference t MemberReference nGroups MemberReference ++ t BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator curr MemberReference ArraySelector MemberReference t ArraySelector Literal 0 len StatementExpression MethodInvocation Literal 5 MemberReference curr bsW ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference alphaSize MemberReference ++ i BlockStatement WhileStatement BinaryOperation < MemberReference curr MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len BlockStatement StatementExpression MethodInvocation Literal 2 Literal 2 bsW StatementExpression MemberReference ++ curr End WhileStatement BinaryOperation > MemberReference curr MemberReference ArraySelector MemberReference t ArraySelector MemberReference i len BlockStatement StatementExpression MethodInvocation Literal 2 Literal 3 bsW StatementExpression MemberReference -- curr End StatementExpression MethodInvocation Literal 1 Literal 0 bsW End End StatementExpression Assignment MemberReference nBytes MemberReference bytesOut = StatementExpression Assignment MemberReference selCtr Literal 0 = StatementExpression Assignment MemberReference gs Literal 0 = WhileStatement Literal true BlockStatement IfStatement BinaryOperation >= MemberReference gs MemberReference nMTF BlockStatement BreakStatement End StatementExpression Assignment MemberReference ge BinaryOperation - BinaryOperation + MemberReference gs MemberReference G_SIZE Literal 1 = IfStatement BinaryOperation >= MemberReference ge MemberReference nMTF BlockStatement StatementExpression Assignment MemberReference ge BinaryOperation - MemberReference nMTF Literal 1 = End ForStatement ForControl Assignment MemberReference i MemberReference gs = BinaryOperation <= MemberReference i MemberReference ge MemberReference ++ i BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference ArraySelector MemberReference selCtr selector ArraySelector MemberReference ArraySelector MemberReference i szptr len MemberReference ArraySelector MemberReference ArraySelector MemberReference selCtr selector ArraySelector MemberReference ArraySelector MemberReference i szptr code bsW End StatementExpression Assignment MemberReference gs BinaryOperation + MemberReference ge Literal 1 = StatementExpression MemberReference ++ selCtr End IfStatement BinaryOperation == MemberReference selCtr MemberReference nSelectors BlockStatement StatementExpression MethodInvocation panic End MethodDeclaration Modifier private moveToFrontCodeAndSend IOException StatementExpression MethodInvocation Literal 24 MemberReference origPtr bsPutIntVS StatementExpression MethodInvocation generateMTFValues StatementExpression MethodInvocation sendMTFValues FieldDeclaration Modifier private ReferenceType OutputStream VariableDeclarator bsStream MethodDeclaration Modifier private simpleSort FormalParameter BasicType int lo FormalParameter BasicType int hi FormalParameter BasicType int d LocalVariableDeclaration BasicType int VariableDeclarator i VariableDeclarator j VariableDeclarator h VariableDeclarator bigN VariableDeclarator hp LocalVariableDeclaration BasicType int VariableDeclarator v StatementExpression Assignment MemberReference bigN BinaryOperation + BinaryOperation - MemberReference hi MemberReference lo Literal 1 = IfStatement BinaryOperation < MemberReference bigN Literal 2 BlockStatement ReturnStatement End StatementExpression Assignment MemberReference hp Literal 0 = WhileStatement BinaryOperation < MemberReference ArraySelector MemberReference hp incs MemberReference bigN BlockStatement StatementExpression MemberReference ++ hp End StatementExpression MemberReference -- hp ForStatement ForControl BinaryOperation >= MemberReference hp Literal 0 MemberReference -- hp BlockStatement StatementExpression Assignment MemberReference h MemberReference ArraySelector MemberReference hp incs = StatementExpression Assignment MemberReference i BinaryOperation + MemberReference lo MemberReference h = WhileStatement Literal true BlockStatement IfStatement BinaryOperation > MemberReference i MemberReference hi BlockStatement BreakStatement End StatementExpression Assignment MemberReference v MemberReference ArraySelector MemberReference i zptr = StatementExpression Assignment MemberReference j MemberReference i = WhileStatement MethodInvocation BinaryOperation + MemberReference ArraySelector BinaryOperation - MemberReference j MemberReference h zptr MemberReference d BinaryOperation + MemberReference v MemberReference d fullGtU BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j zptr MemberReference ArraySelector BinaryOperation - MemberReference j MemberReference h zptr = StatementExpression Assignment MemberReference j BinaryOperation - MemberReference j MemberReference h = IfStatement BinaryOperation <= MemberReference j BinaryOperation - BinaryOperation + MemberReference lo MemberReference h Literal 1 BlockStatement BreakStatement End End StatementExpression Assignment MemberReference ArraySelector MemberReference j zptr MemberReference v = StatementExpression MemberReference ++ i IfStatement BinaryOperation > MemberReference i MemberReference hi BlockStatement BreakStatement End StatementExpression Assignment MemberReference v MemberReference ArraySelector MemberReference i zptr = StatementExpression Assignment MemberReference j MemberReference i = WhileStatement MethodInvocation BinaryOperation + MemberReference ArraySelector BinaryOperation - MemberReference j MemberReference h zptr MemberReference d BinaryOperation + MemberReference v MemberReference d fullGtU BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j zptr MemberReference ArraySelector BinaryOperation - MemberReference j MemberReference h zptr = StatementExpression Assignment MemberReference j BinaryOperation - MemberReference j MemberReference h = IfStatement BinaryOperation <= MemberReference j BinaryOperation - BinaryOperation + MemberReference lo MemberReference h Literal 1 BlockStatement BreakStatement End End StatementExpression Assignment MemberReference ArraySelector MemberReference j zptr MemberReference v = StatementExpression MemberReference ++ i IfStatement BinaryOperation > MemberReference i MemberReference hi BlockStatement BreakStatement End StatementExpression Assignment MemberReference v MemberReference ArraySelector MemberReference i zptr = StatementExpression Assignment MemberReference j MemberReference i = WhileStatement MethodInvocation BinaryOperation + MemberReference ArraySelector BinaryOperation - MemberReference j MemberReference h zptr MemberReference d BinaryOperation + MemberReference v MemberReference d fullGtU BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j zptr MemberReference ArraySelector BinaryOperation - MemberReference j MemberReference h zptr = StatementExpression Assignment MemberReference j BinaryOperation - MemberReference j MemberReference h = IfStatement BinaryOperation <= MemberReference j BinaryOperation - BinaryOperation + MemberReference lo MemberReference h Literal 1 BlockStatement BreakStatement End End StatementExpression Assignment MemberReference ArraySelector MemberReference j zptr MemberReference v = StatementExpression MemberReference ++ i IfStatement BinaryOperation && BinaryOperation > MemberReference workDone MemberReference workLimit MemberReference firstAttempt BlockStatement ReturnStatement End End End MethodDeclaration Modifier private vswap FormalParameter BasicType int p1 FormalParameter BasicType int p2 FormalParameter BasicType int n LocalVariableDeclaration BasicType int VariableDeclarator temp Literal 0 WhileStatement BinaryOperation > MemberReference n Literal 0 BlockStatement StatementExpression Assignment MemberReference temp MemberReference ArraySelector MemberReference p1 zptr = StatementExpression Assignment MemberReference ArraySelector MemberReference p1 zptr MemberReference ArraySelector MemberReference p2 zptr = StatementExpression Assignment MemberReference ArraySelector MemberReference p2 zptr MemberReference temp = StatementExpression MemberReference ++ p1 StatementExpression MemberReference ++ p2 StatementExpression MemberReference -- n End MethodDeclaration Modifier private BasicType char med3 FormalParameter BasicType char a FormalParameter BasicType char b FormalParameter BasicType char c LocalVariableDeclaration BasicType char VariableDeclarator t IfStatement BinaryOperation > MemberReference a MemberReference b BlockStatement StatementExpression Assignment MemberReference t MemberReference a = StatementExpression Assignment MemberReference a MemberReference b = StatementExpression Assignment MemberReference b MemberReference t = End IfStatement BinaryOperation > MemberReference b MemberReference c BlockStatement StatementExpression Assignment MemberReference t MemberReference b = StatementExpression Assignment MemberReference b MemberReference c = StatementExpression Assignment MemberReference c MemberReference t = End IfStatement BinaryOperation > MemberReference a MemberReference b BlockStatement StatementExpression Assignment MemberReference b MemberReference a = End ReturnStatement MemberReference b ClassDeclaration Modifier private static StackElem FieldDeclaration BasicType int VariableDeclarator ll FieldDeclaration BasicType int VariableDeclarator hh FieldDeclaration BasicType int VariableDeclarator dd MethodDeclaration Modifier private qSort3 FormalParameter BasicType int loSt FormalParameter BasicType int hiSt FormalParameter BasicType int dSt LocalVariableDeclaration BasicType int VariableDeclarator unLo VariableDeclarator unHi VariableDeclarator ltLo VariableDeclarator gtHi VariableDeclarator med VariableDeclarator n VariableDeclarator m LocalVariableDeclaration BasicType int VariableDeclarator sp VariableDeclarator lo VariableDeclarator hi VariableDeclarator d LocalVariableDeclaration ReferenceType StackElem VariableDeclarator stack ArrayCreator ReferenceType StackElem MemberReference QSORT_STACK_SIZE ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator count Literal 0 BinaryOperation < MemberReference count MemberReference QSORT_STACK_SIZE MemberReference ++ count BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference count stack ClassCreator ReferenceType StackElem = End StatementExpression Assignment MemberReference sp Literal 0 = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference ll stack MemberReference loSt = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference hh stack MemberReference hiSt = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference dd stack MemberReference dSt = StatementExpression MemberReference ++ sp WhileStatement BinaryOperation > MemberReference sp Literal 0 BlockStatement IfStatement BinaryOperation >= MemberReference sp MemberReference QSORT_STACK_SIZE BlockStatement StatementExpression MethodInvocation panic End StatementExpression MemberReference -- sp StatementExpression Assignment MemberReference lo MemberReference ArraySelector MemberReference sp MemberReference ll stack = StatementExpression Assignment MemberReference hi MemberReference ArraySelector MemberReference sp MemberReference hh stack = StatementExpression Assignment MemberReference d MemberReference ArraySelector MemberReference sp MemberReference dd stack = IfStatement BinaryOperation || BinaryOperation < BinaryOperation - MemberReference hi MemberReference lo MemberReference SMALL_THRESH BinaryOperation > MemberReference d MemberReference DEPTH_THRESH BlockStatement StatementExpression MethodInvocation MemberReference lo MemberReference hi MemberReference d simpleSort IfStatement BinaryOperation && BinaryOperation > MemberReference workDone MemberReference workLimit MemberReference firstAttempt BlockStatement ReturnStatement End ContinueStatement End StatementExpression Assignment MemberReference med MethodInvocation MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference ArraySelector MemberReference lo zptr MemberReference d Literal 1 block MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference ArraySelector MemberReference hi zptr MemberReference d Literal 1 block MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference ArraySelector BinaryOperation >> BinaryOperation + MemberReference lo MemberReference hi Literal 1 zptr MemberReference d Literal 1 block med3 = StatementExpression Assignment MemberReference unLo Assignment MemberReference ltLo MemberReference lo = = StatementExpression Assignment MemberReference unHi Assignment MemberReference gtHi MemberReference hi = = WhileStatement Literal true BlockStatement WhileStatement Literal true BlockStatement IfStatement BinaryOperation > MemberReference unLo MemberReference unHi BlockStatement BreakStatement End StatementExpression Assignment MemberReference n BinaryOperation - Cast BasicType int MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference ArraySelector MemberReference unLo zptr MemberReference d Literal 1 block MemberReference med = IfStatement BinaryOperation == MemberReference n Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator temp Literal 0 StatementExpression Assignment MemberReference temp MemberReference ArraySelector MemberReference unLo zptr = StatementExpression Assignment MemberReference ArraySelector MemberReference unLo zptr MemberReference ArraySelector MemberReference ltLo zptr = StatementExpression Assignment MemberReference ArraySelector MemberReference ltLo zptr MemberReference temp = StatementExpression MemberReference ++ ltLo StatementExpression MemberReference ++ unLo ContinueStatement End Statement IfStatement BinaryOperation > MemberReference n Literal 0 BlockStatement BreakStatement End StatementExpression MemberReference ++ unLo End WhileStatement Literal true BlockStatement IfStatement BinaryOperation > MemberReference unLo MemberReference unHi BlockStatement BreakStatement End StatementExpression Assignment MemberReference n BinaryOperation - Cast BasicType int MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference ArraySelector MemberReference unHi zptr MemberReference d Literal 1 block MemberReference med = IfStatement BinaryOperation == MemberReference n Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator temp Literal 0 StatementExpression Assignment MemberReference temp MemberReference ArraySelector MemberReference unHi zptr = StatementExpression Assignment MemberReference ArraySelector MemberReference unHi zptr MemberReference ArraySelector MemberReference gtHi zptr = StatementExpression Assignment MemberReference ArraySelector MemberReference gtHi zptr MemberReference temp = StatementExpression MemberReference -- gtHi StatementExpression MemberReference -- unHi ContinueStatement End Statement IfStatement BinaryOperation < MemberReference n Literal 0 BlockStatement BreakStatement End StatementExpression MemberReference -- unHi End IfStatement BinaryOperation > MemberReference unLo MemberReference unHi BlockStatement BreakStatement End LocalVariableDeclaration BasicType int VariableDeclarator temp Literal 0 StatementExpression Assignment MemberReference temp MemberReference ArraySelector MemberReference unLo zptr = StatementExpression Assignment MemberReference ArraySelector MemberReference unLo zptr MemberReference ArraySelector MemberReference unHi zptr = StatementExpression Assignment MemberReference ArraySelector MemberReference unHi zptr MemberReference temp = StatementExpression MemberReference ++ unLo StatementExpression MemberReference -- unHi End IfStatement BinaryOperation < MemberReference gtHi MemberReference ltLo BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference ll stack MemberReference lo = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference hh stack MemberReference hi = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference dd stack BinaryOperation + MemberReference d Literal 1 = StatementExpression MemberReference ++ sp ContinueStatement End StatementExpression Assignment MemberReference n TernaryExpression BinaryOperation < BinaryOperation - MemberReference ltLo MemberReference lo BinaryOperation - MemberReference unLo MemberReference ltLo BinaryOperation - MemberReference ltLo MemberReference lo BinaryOperation - MemberReference unLo MemberReference ltLo = StatementExpression MethodInvocation MemberReference lo BinaryOperation - MemberReference unLo MemberReference n MemberReference n vswap StatementExpression Assignment MemberReference m TernaryExpression BinaryOperation < BinaryOperation - MemberReference hi MemberReference gtHi BinaryOperation - MemberReference gtHi MemberReference unHi BinaryOperation - MemberReference hi MemberReference gtHi BinaryOperation - MemberReference gtHi MemberReference unHi = StatementExpression MethodInvocation MemberReference unLo BinaryOperation + BinaryOperation - MemberReference hi MemberReference m Literal 1 MemberReference m vswap StatementExpression Assignment MemberReference n BinaryOperation - BinaryOperation - BinaryOperation + MemberReference lo MemberReference unLo MemberReference ltLo Literal 1 = StatementExpression Assignment MemberReference m BinaryOperation + BinaryOperation - MemberReference hi BinaryOperation - MemberReference gtHi MemberReference unHi Literal 1 = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference ll stack MemberReference lo = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference hh stack MemberReference n = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference dd stack MemberReference d = StatementExpression MemberReference ++ sp StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference ll stack BinaryOperation + MemberReference n Literal 1 = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference hh stack BinaryOperation - MemberReference m Literal 1 = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference dd stack BinaryOperation + MemberReference d Literal 1 = StatementExpression MemberReference ++ sp StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference ll stack MemberReference m = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference hh stack MemberReference hi = StatementExpression Assignment MemberReference ArraySelector MemberReference sp MemberReference dd stack MemberReference d = StatementExpression MemberReference ++ sp End MethodDeclaration Modifier private mainSort LocalVariableDeclaration BasicType int VariableDeclarator i VariableDeclarator j VariableDeclarator ss VariableDeclarator sb LocalVariableDeclaration BasicType int VariableDeclarator runningOrder ArrayCreator BasicType int Literal 256 LocalVariableDeclaration BasicType int VariableDeclarator copy ArrayCreator BasicType int Literal 256 LocalVariableDeclaration BasicType boolean VariableDeclarator bigDone ArrayCreator BasicType boolean Literal 256 LocalVariableDeclaration BasicType int VariableDeclarator c1 VariableDeclarator c2 LocalVariableDeclaration BasicType int VariableDeclarator numQSorted ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference NUM_OVERSHOOT_BYTES MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference last MemberReference i Literal 2 block MemberReference ArraySelector BinaryOperation + BinaryOperation % MemberReference i BinaryOperation + MemberReference last Literal 1 Literal 1 block = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i BinaryOperation + MemberReference last MemberReference NUM_OVERSHOOT_BYTES MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i quadrant Literal 0 = End StatementExpression Assignment MemberReference ArraySelector Literal 0 block Cast BasicType char MemberReference block = IfStatement BinaryOperation < MemberReference last Literal 4000 BlockStatement ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i MemberReference last MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i zptr MemberReference i = End StatementExpression Assignment MemberReference firstAttempt Literal false = StatementExpression Assignment MemberReference workDone Assignment MemberReference workLimit Literal 0 = = StatementExpression MethodInvocation Literal 0 MemberReference last Literal 0 simpleSort BlockStatement StatementExpression Assignment MemberReference numQSorted Literal 0 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i Literal 255 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i bigDone Literal false = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i Literal 65536 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i ftab Literal 0 = End StatementExpression Assignment MemberReference c1 MemberReference ArraySelector Literal 0 block = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i MemberReference last MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 block = StatementExpression MemberReference ++ ArraySelector BinaryOperation + BinaryOperation << MemberReference c1 Literal 8 MemberReference c2 ftab StatementExpression Assignment MemberReference c1 MemberReference c2 = End ForStatement ForControl Assignment MemberReference i Literal 1 = BinaryOperation <= MemberReference i Literal 65536 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i ftab MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 ftab += End StatementExpression Assignment MemberReference c1 MemberReference ArraySelector Literal 1 block = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference last MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i Literal 2 block = StatementExpression Assignment MemberReference j BinaryOperation + BinaryOperation << MemberReference c1 Literal 8 MemberReference c2 = StatementExpression Assignment MemberReference c1 MemberReference c2 = StatementExpression MemberReference -- ArraySelector MemberReference j ftab StatementExpression Assignment MemberReference ArraySelector MemberReference ArraySelector MemberReference j ftab zptr MemberReference i = End StatementExpression Assignment MemberReference j BinaryOperation + BinaryOperation << MemberReference block Literal 8 MemberReference block = StatementExpression MemberReference -- ArraySelector MemberReference j ftab StatementExpression Assignment MemberReference ArraySelector MemberReference ArraySelector MemberReference j ftab zptr MemberReference last = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i Literal 255 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i runningOrder MemberReference i = End BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator vv LocalVariableDeclaration BasicType int VariableDeclarator h Literal 1 DoStatement BinaryOperation <= MemberReference h Literal 256 BlockStatement StatementExpression Assignment MemberReference h BinaryOperation + BinaryOperation * Literal 3 MemberReference h Literal 1 = End DoStatement BinaryOperation != MemberReference h Literal 1 BlockStatement StatementExpression Assignment MemberReference h BinaryOperation / MemberReference h Literal 3 = ForStatement ForControl Assignment MemberReference i MemberReference h = BinaryOperation <= MemberReference i Literal 255 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference vv MemberReference ArraySelector MemberReference i runningOrder = StatementExpression Assignment MemberReference j MemberReference i = WhileStatement BinaryOperation > BinaryOperation - MemberReference ArraySelector BinaryOperation << BinaryOperation + MemberReference runningOrder Literal 1 Literal 8 ftab MemberReference ArraySelector BinaryOperation << MemberReference runningOrder Literal 8 ftab BinaryOperation - MemberReference ArraySelector BinaryOperation << Cast ReferenceType vv Literal + 1 Literal 8 ftab MemberReference ArraySelector BinaryOperation << MemberReference vv Literal 8 ftab BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j runningOrder MemberReference ArraySelector BinaryOperation - MemberReference j MemberReference h runningOrder = StatementExpression Assignment MemberReference j BinaryOperation - MemberReference j MemberReference h = IfStatement BinaryOperation <= MemberReference j BinaryOperation - MemberReference h Literal 1 BlockStatement BreakStatement End End StatementExpression Assignment MemberReference ArraySelector MemberReference j runningOrder MemberReference vv = End End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i Literal 255 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ss MemberReference ArraySelector MemberReference i runningOrder = ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation <= MemberReference j Literal 255 MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference sb BinaryOperation + BinaryOperation << MemberReference ss Literal 8 MemberReference j = IfStatement BinaryOperation == BinaryOperation & MemberReference ArraySelector MemberReference sb ftab MemberReference SETMASK MemberReference SETMASK BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator lo BinaryOperation & MemberReference ArraySelector MemberReference sb ftab MemberReference CLEARMASK LocalVariableDeclaration BasicType int VariableDeclarator hi BinaryOperation - BinaryOperation & MemberReference ArraySelector BinaryOperation + MemberReference sb Literal 1 ftab MemberReference CLEARMASK Literal 1 IfStatement BinaryOperation > MemberReference hi MemberReference lo BlockStatement StatementExpression MethodInvocation MemberReference lo MemberReference hi Literal 2 qSort3 StatementExpression Assignment MemberReference numQSorted BinaryOperation + BinaryOperation - MemberReference hi MemberReference lo Literal 1 += IfStatement BinaryOperation && BinaryOperation > MemberReference workDone MemberReference workLimit MemberReference firstAttempt BlockStatement ReturnStatement End End StatementExpression Assignment MemberReference ArraySelector MemberReference sb ftab MemberReference SETMASK |= End End StatementExpression Assignment MemberReference ArraySelector MemberReference ss bigDone Literal true = IfStatement BinaryOperation < MemberReference i Literal 255 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator bbStart BinaryOperation & MemberReference ArraySelector BinaryOperation << MemberReference ss Literal 8 ftab MemberReference CLEARMASK LocalVariableDeclaration BasicType int VariableDeclarator bbSize BinaryOperation - BinaryOperation & MemberReference ArraySelector BinaryOperation << BinaryOperation + MemberReference ss Literal 1 Literal 8 ftab MemberReference CLEARMASK MemberReference bbStart LocalVariableDeclaration BasicType int VariableDeclarator shifts Literal 0 WhileStatement BinaryOperation > BinaryOperation >> MemberReference bbSize MemberReference shifts Literal 65534 BlockStatement StatementExpression MemberReference ++ shifts End ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation < MemberReference j MemberReference bbSize MemberReference ++ j BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator a2update MemberReference ArraySelector BinaryOperation + MemberReference bbStart MemberReference j zptr LocalVariableDeclaration BasicType int VariableDeclarator qVal BinaryOperation >> MemberReference j MemberReference shifts StatementExpression Assignment MemberReference ArraySelector MemberReference a2update quadrant MemberReference qVal = IfStatement BinaryOperation < MemberReference a2update MemberReference NUM_OVERSHOOT_BYTES BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + BinaryOperation + MemberReference a2update MemberReference last Literal 1 quadrant MemberReference qVal = End End IfStatement BinaryOperation <= BinaryOperation >> BinaryOperation - MemberReference bbSize Literal 1 MemberReference shifts Literal 65535 BlockStatement StatementExpression MethodInvocation panic End End ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation <= MemberReference j Literal 255 MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference j copy BinaryOperation & MemberReference ArraySelector BinaryOperation + BinaryOperation << MemberReference j Literal 8 MemberReference ss ftab MemberReference CLEARMASK = End ForStatement ForControl Assignment MemberReference j BinaryOperation & MemberReference ArraySelector BinaryOperation << MemberReference ss Literal 8 ftab MemberReference CLEARMASK = BinaryOperation < MemberReference j BinaryOperation & MemberReference ArraySelector BinaryOperation << BinaryOperation + MemberReference ss Literal 1 Literal 8 ftab MemberReference CLEARMASK MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference c1 MemberReference ArraySelector MemberReference ArraySelector MemberReference j zptr block = IfStatement MemberReference ! ArraySelector MemberReference c1 bigDone BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference ArraySelector MemberReference c1 copy zptr TernaryExpression BinaryOperation == MemberReference ArraySelector MemberReference j zptr Literal 0 MemberReference last BinaryOperation - MemberReference ArraySelector MemberReference j zptr Literal 1 = StatementExpression MemberReference ++ ArraySelector MemberReference c1 copy End End ForStatement ForControl Assignment MemberReference j Literal 0 = BinaryOperation <= MemberReference j Literal 255 MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + BinaryOperation << MemberReference j Literal 8 MemberReference ss ftab MemberReference SETMASK |= End End End MethodDeclaration Modifier private randomiseBlock LocalVariableDeclaration BasicType int VariableDeclarator i LocalVariableDeclaration BasicType int VariableDeclarator rNToGo Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator rTPos Literal 0 ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i Literal 256 MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i inUse Literal false = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i MemberReference last MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference rNToGo Literal 0 BlockStatement StatementExpression Assignment MemberReference rNToGo Cast BasicType char MemberReference ArraySelector MemberReference rTPos rNums = StatementExpression MemberReference ++ rTPos IfStatement BinaryOperation == MemberReference rTPos Literal 512 BlockStatement StatementExpression Assignment MemberReference rTPos Literal 0 = End End StatementExpression MemberReference -- rNToGo StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 block TernaryExpression BinaryOperation == MemberReference rNToGo Literal 1 Literal 1 Literal 0 ^= StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 block Literal 0xFF &= StatementExpression Assignment MemberReference ArraySelector MemberReference ArraySelector BinaryOperation + MemberReference i Literal 1 block inUse Literal true = End MethodDeclaration Modifier private doReversibleTransformation LocalVariableDeclaration BasicType int VariableDeclarator i StatementExpression Assignment MemberReference workLimit BinaryOperation * MemberReference workFactor MemberReference last = StatementExpression Assignment MemberReference workDone Literal 0 = StatementExpression Assignment MemberReference blockRandomised Literal false = StatementExpression Assignment MemberReference firstAttempt Literal true = StatementExpression MethodInvocation mainSort IfStatement BinaryOperation && BinaryOperation > MemberReference workDone MemberReference workLimit MemberReference firstAttempt BlockStatement StatementExpression MethodInvocation randomiseBlock StatementExpression Assignment MemberReference workLimit Assignment MemberReference workDone Literal 0 = = StatementExpression Assignment MemberReference blockRandomised Literal true = StatementExpression Assignment MemberReference firstAttempt Literal false = StatementExpression MethodInvocation mainSort End StatementExpression Assignment MemberReference origPtr Literal - 1 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i MemberReference last MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i zptr Literal 0 BlockStatement StatementExpression Assignment MemberReference origPtr MemberReference i = BreakStatement End End Statement IfStatement BinaryOperation == MemberReference origPtr Literal - 1 BlockStatement StatementExpression MethodInvocation panic End MethodDeclaration Modifier private BasicType boolean fullGtU FormalParameter BasicType int i1 FormalParameter BasicType int i2 LocalVariableDeclaration BasicType int VariableDeclarator k LocalVariableDeclaration BasicType char VariableDeclarator c1 VariableDeclarator c2 LocalVariableDeclaration BasicType int VariableDeclarator s1 VariableDeclarator s2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference k BinaryOperation + MemberReference last Literal 1 = DoStatement BinaryOperation >= MemberReference k Literal 0 BlockStatement StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression Assignment MemberReference s1 MemberReference ArraySelector MemberReference i1 quadrant = StatementExpression Assignment MemberReference s2 MemberReference ArraySelector MemberReference i2 quadrant = IfStatement BinaryOperation != MemberReference s1 MemberReference s2 BlockStatement ReturnStatement BinaryOperation > MemberReference s1 MemberReference s2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression Assignment MemberReference s1 MemberReference ArraySelector MemberReference i1 quadrant = StatementExpression Assignment MemberReference s2 MemberReference ArraySelector MemberReference i2 quadrant = IfStatement BinaryOperation != MemberReference s1 MemberReference s2 BlockStatement ReturnStatement BinaryOperation > MemberReference s1 MemberReference s2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression Assignment MemberReference s1 MemberReference ArraySelector MemberReference i1 quadrant = StatementExpression Assignment MemberReference s2 MemberReference ArraySelector MemberReference i2 quadrant = IfStatement BinaryOperation != MemberReference s1 MemberReference s2 BlockStatement ReturnStatement BinaryOperation > MemberReference s1 MemberReference s2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 StatementExpression Assignment MemberReference c1 MemberReference ArraySelector BinaryOperation + MemberReference i1 Literal 1 block = StatementExpression Assignment MemberReference c2 MemberReference ArraySelector BinaryOperation + MemberReference i2 Literal 1 block = IfStatement BinaryOperation != MemberReference c1 MemberReference c2 BlockStatement ReturnStatement BinaryOperation > MemberReference c1 MemberReference c2 End StatementExpression Assignment MemberReference s1 MemberReference ArraySelector MemberReference i1 quadrant = StatementExpression Assignment MemberReference s2 MemberReference ArraySelector MemberReference i2 quadrant = IfStatement BinaryOperation != MemberReference s1 MemberReference s2 BlockStatement ReturnStatement BinaryOperation > MemberReference s1 MemberReference s2 End StatementExpression MemberReference ++ i1 StatementExpression MemberReference ++ i2 IfStatement BinaryOperation > MemberReference i1 MemberReference last BlockStatement StatementExpression Assignment MemberReference i1 MemberReference last -= StatementExpression MemberReference -- i1 End Statement IfStatement BinaryOperation > MemberReference i2 MemberReference last BlockStatement StatementExpression Assignment MemberReference i2 MemberReference last -= StatementExpression MemberReference -- i2 End Statement StatementExpression Assignment MemberReference k Literal 4 -= StatementExpression MemberReference ++ workDone End ReturnStatement Literal false FieldDeclaration Modifier private BasicType int VariableDeclarator incs ArrayInitializer Literal 1 Literal 4 Literal 13 Literal 40 Literal 121 Literal 364 Literal 1093 Literal 3280 Literal 9841 Literal 29524 Literal 88573 Literal 265720 Literal 797161 Literal 2391484 MethodDeclaration Modifier private allocateCompressStructures LocalVariableDeclaration BasicType int VariableDeclarator n BinaryOperation * MemberReference baseBlockSize MemberReference blockSize100k StatementExpression Assignment MemberReference block ArrayCreator BasicType char BinaryOperation + BinaryOperation + MemberReference n Literal 1 MemberReference NUM_OVERSHOOT_BYTES = StatementExpression Assignment MemberReference quadrant ArrayCreator BasicType int BinaryOperation + MemberReference n MemberReference NUM_OVERSHOOT_BYTES = StatementExpression Assignment MemberReference zptr ArrayCreator BasicType int MemberReference n = StatementExpression Assignment MemberReference ftab ArrayCreator BasicType int Literal 65537 = IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation == MemberReference block Literal null BinaryOperation == MemberReference quadrant Literal null BinaryOperation == MemberReference zptr Literal null BinaryOperation == MemberReference ftab Literal null BlockStatement End StatementExpression Assignment MemberReference szptr ArrayCreator BasicType short BinaryOperation * Literal 2 MemberReference n = MethodDeclaration Modifier private generateMTFValues LocalVariableDeclaration BasicType char VariableDeclarator yy ArrayCreator BasicType char Literal 256 LocalVariableDeclaration BasicType int VariableDeclarator i VariableDeclarator j LocalVariableDeclaration BasicType char VariableDeclarator tmp LocalVariableDeclaration BasicType char VariableDeclarator tmp2 LocalVariableDeclaration BasicType int VariableDeclarator zPend LocalVariableDeclaration BasicType int VariableDeclarator wr LocalVariableDeclaration BasicType int VariableDeclarator EOB StatementExpression MethodInvocation makeMaps StatementExpression Assignment MemberReference EOB BinaryOperation + MemberReference nInUse Literal 1 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i MemberReference EOB MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i mtfFreq Literal 0 = End StatementExpression Assignment MemberReference wr Literal 0 = StatementExpression Assignment MemberReference zPend Literal 0 = ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference nInUse MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i yy Cast BasicType char MemberReference i = End ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation <= MemberReference i MemberReference last MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator ll_i StatementExpression Assignment MemberReference ll_i MemberReference ArraySelector MemberReference ArraySelector MemberReference ArraySelector MemberReference i zptr block unseqToSeq = StatementExpression Assignment MemberReference j Literal 0 = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference j yy = WhileStatement BinaryOperation != MemberReference ll_i MemberReference tmp BlockStatement StatementExpression MemberReference ++ j StatementExpression Assignment MemberReference tmp2 MemberReference tmp = StatementExpression Assignment MemberReference tmp MemberReference ArraySelector MemberReference j yy = StatementExpression Assignment MemberReference ArraySelector MemberReference j yy MemberReference tmp2 = End Statement StatementExpression Assignment MemberReference ArraySelector Literal 0 yy MemberReference tmp = IfStatement BinaryOperation == MemberReference j Literal 0 BlockStatement StatementExpression MemberReference ++ zPend BlockStatement IfStatement BinaryOperation > MemberReference zPend Literal 0 BlockStatement StatementExpression MemberReference -- zPend WhileStatement Literal true BlockStatement SwitchStatement BinaryOperation % MemberReference zPend Literal 2 SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference wr szptr Cast BasicType short MemberReference RUNA = StatementExpression MemberReference ++ wr StatementExpression MemberReference ++ ArraySelector MemberReference RUNA mtfFreq BreakStatement SwitchStatementCase Literal 1 StatementExpression Assignment MemberReference ArraySelector MemberReference wr szptr Cast BasicType short MemberReference RUNB = StatementExpression MemberReference ++ wr StatementExpression MemberReference ++ ArraySelector MemberReference RUNB mtfFreq BreakStatement End Statement IfStatement BinaryOperation < MemberReference zPend Literal 2 BlockStatement BreakStatement End StatementExpression Assignment MemberReference zPend BinaryOperation / BinaryOperation - MemberReference zPend Literal 2 Literal 2 = End Statement StatementExpression Assignment MemberReference zPend Literal 0 = End StatementExpression Assignment MemberReference ArraySelector MemberReference wr szptr Cast BasicType short BinaryOperation + MemberReference j Literal 1 = StatementExpression MemberReference ++ wr StatementExpression MemberReference ++ ArraySelector BinaryOperation + MemberReference j Literal 1 mtfFreq End End IfStatement BinaryOperation > MemberReference zPend Literal 0 BlockStatement StatementExpression MemberReference -- zPend WhileStatement Literal true BlockStatement SwitchStatement BinaryOperation % MemberReference zPend Literal 2 SwitchStatementCase Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference wr szptr Cast BasicType short MemberReference RUNA = StatementExpression MemberReference ++ wr StatementExpression MemberReference ++ ArraySelector MemberReference RUNA mtfFreq BreakStatement SwitchStatementCase Literal 1 StatementExpression Assignment MemberReference ArraySelector MemberReference wr szptr Cast BasicType short MemberReference RUNB = StatementExpression MemberReference ++ wr StatementExpression MemberReference ++ ArraySelector MemberReference RUNB mtfFreq BreakStatement End IfStatement BinaryOperation < MemberReference zPend Literal 2 BlockStatement BreakStatement End StatementExpression Assignment MemberReference zPend BinaryOperation / BinaryOperation - MemberReference zPend Literal 2 Literal 2 = End End StatementExpression Assignment MemberReference ArraySelector MemberReference wr szptr Cast BasicType short MemberReference EOB = StatementExpression MemberReference ++ wr StatementExpression MemberReference ++ ArraySelector MemberReference EOB mtfFreq StatementExpression Assignment MemberReference nMTF MemberReference wr = ReferenceType OutputStream ReferenceType BZip2Constants",0
370,370,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.util.Hashtable Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.util.FileNameMapper Import org.apache.tools.ant.util.IdentityMapper ClassDeclaration Modifier public /**
 * Synchronize a local target directory from the files defined
 * in one or more filesets.
 *
 * <p>Uses a &lt;copy&gt; task internally, but forbidding the use of
 * mappers and filter chains. Files of the destination directory not
 * present in any of the source fileset are removed.</p>
 *
 * @version $Revision$
 * @since Ant 1.6
 *
 * revised by <a href=""mailto:daniel.armbrust@mayo.edu"">Dan Armbrust</a>
 * to remove orphaned directories.
 *
 * @ant.task category=""filesystem""
 */ Sync FieldDeclaration Modifier private ReferenceType MyCopy VariableDeclarator _copy MethodDeclaration Modifier public init BuildException StatementExpression Assignment MemberReference _copy ClassCreator ReferenceType MyCopy = StatementExpression MethodInvocation MemberReference _copy configureTask StatementExpression MethodInvocation _copy Literal false setFiltering StatementExpression MethodInvocation _copy Literal false setIncludeEmptyDirs StatementExpression MethodInvocation _copy Literal true setPreserveLastModified MethodDeclaration Modifier private configureTask FormalParameter ReferenceType Task helper StatementExpression MethodInvocation helper MethodInvocation getProject setProject StatementExpression MethodInvocation helper MethodInvocation getTaskName setTaskName StatementExpression MethodInvocation helper MethodInvocation getOwningTarget setOwningTarget StatementExpression MethodInvocation helper init MethodDeclaration Modifier public execute BuildException LocalVariableDeclaration ReferenceType File VariableDeclarator toDir MethodInvocation _copy getToDir LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator allFiles MemberReference _copy _dest2src LocalVariableDeclaration BasicType boolean VariableDeclarator noRemovalNecessary BinaryOperation || MethodInvocation ! toDir exists BinaryOperation < MethodInvocation toDir MemberReference length list Literal 1 StatementExpression MethodInvocation BinaryOperation + Literal ""PASS#1: Copying files to "" MemberReference toDir MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation _copy execute IfStatement MemberReference noRemovalNecessary BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""NO removing necessary in "" MemberReference toDir MemberReference Project MSG_DEBUG log ReturnStatement End StatementExpression MethodInvocation BinaryOperation + Literal ""PASS#2: Removing orphan files from "" MemberReference toDir MemberReference Project MSG_DEBUG log LocalVariableDeclaration BasicType int VariableDeclarator removedFileCount MethodInvocation MemberReference allFiles MemberReference toDir removeOrphanFiles StatementExpression MethodInvocation MemberReference ArraySelector Literal 0 removedFileCount Literal ""dangling director"" Literal ""y"" Literal ""ies"" logRemovedCount StatementExpression MethodInvocation MemberReference ArraySelector Literal 1 removedFileCount Literal ""dangling file"" Literal """" Literal ""s"" logRemovedCount IfStatement MethodInvocation ! _copy getIncludeEmptyDirs BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""PASS#3: Removing empty directories from "" MemberReference toDir MemberReference Project MSG_DEBUG log LocalVariableDeclaration BasicType int VariableDeclarator removedDirCount MethodInvocation MemberReference toDir Literal false removeEmptyDirectories StatementExpression MethodInvocation MemberReference removedDirCount Literal ""empty director"" Literal ""y"" Literal ""ies"" logRemovedCount End MethodDeclaration Modifier private logRemovedCount FormalParameter BasicType int count FormalParameter ReferenceType String prefix FormalParameter ReferenceType String singularSuffix FormalParameter ReferenceType String pluralSuffix LocalVariableDeclaration ReferenceType File VariableDeclarator toDir MethodInvocation _copy getToDir LocalVariableDeclaration ReferenceType String VariableDeclarator what TernaryExpression BinaryOperation == MemberReference prefix Literal null Literal """" MemberReference prefix StatementExpression Assignment MemberReference what TernaryExpression BinaryOperation < MemberReference count Literal 2 MemberReference singularSuffix MemberReference pluralSuffix += IfStatement BinaryOperation > MemberReference count Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Removed "" MemberReference count Literal "" "" MemberReference what Literal "" from "" MemberReference toDir MemberReference Project MSG_INFO log BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""NO "" MemberReference what Literal "" to remove from "" MemberReference toDir MemberReference Project MSG_VERBOSE log End MethodDeclaration /**
     * Removes all files and folders not found as keys of a table
     * (used as a set!).
     *
     * <p>If the provided file is a directory, it is recursively
     * scanned for orphaned files which will be removed as well.</p>
     *
     * <p>If the directory is an orphan, it will also be removed.</p>
     *
     * @param  nonOrphans the table of all non-orphan <code>File</code>s.
     * @param  file the initial file or directory to scan or test.
     * @return the number of orphaned files and directories actually removed.
     * Position 0 of the array is the number of orphaned directories.
     * Position 1 of the array is the number or orphaned files.
     * Position 2 is meaningless.
     */ Modifier private BasicType int removeOrphanFiles FormalParameter ReferenceType Hashtable nonOrphans FormalParameter ReferenceType File file LocalVariableDeclaration BasicType int VariableDeclarator removedCount ArrayCreator BasicType int ArrayInitializer Literal 0 Literal 0 Literal 0 IfStatement MethodInvocation file isDirectory BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator children MethodInvocation file listFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference children length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator temp MethodInvocation MemberReference nonOrphans MemberReference ArraySelector MemberReference i children removeOrphanFiles StatementExpression Assignment MemberReference ArraySelector Literal 0 removedCount MemberReference ArraySelector Literal 0 temp += StatementExpression Assignment MemberReference ArraySelector Literal 1 removedCount MemberReference ArraySelector Literal 1 temp += StatementExpression Assignment MemberReference ArraySelector Literal 2 removedCount MemberReference ArraySelector Literal 2 temp += End IfStatement BinaryOperation && BinaryOperation == MethodInvocation nonOrphans MemberReference file get Literal null BinaryOperation == MemberReference ArraySelector Literal 2 removedCount Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Removing orphan directory: "" MemberReference file MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation file delete StatementExpression MemberReference ++ ArraySelector Literal 0 removedCount BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 2 removedCount Literal 1 = End BlockStatement IfStatement BinaryOperation == MethodInvocation nonOrphans MemberReference file get Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Removing orphan file: "" MemberReference file MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation file delete StatementExpression MemberReference ++ ArraySelector Literal 1 removedCount BlockStatement StatementExpression Assignment MemberReference ArraySelector Literal 2 removedCount Literal 1 = End End ReturnStatement MemberReference removedCount MethodDeclaration /**
     * Removes all empty directories from a directory.
     *
     * <p><em>Note that a directory that contains only empty
     * directories, directly or not, will be removed!</em></p>
     *
     * <p>Recurses depth-first to find the leaf directories
     * which are empty and removes them, then unwinds the
     * recursion stack, removing directories which have
     * become empty themselves, etc...</p>
     *
     * @param  dir the root directory to scan for empty directories.
     * @param  removeIfEmpty whether to remove the root directory
     *         itself if it becomes empty.
     * @return the number of empty directories actually removed.
     */ Modifier private BasicType int removeEmptyDirectories FormalParameter ReferenceType File dir FormalParameter BasicType boolean removeIfEmpty LocalVariableDeclaration BasicType int VariableDeclarator removedCount Literal 0 IfStatement MethodInvocation dir isDirectory BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator children MethodInvocation dir listFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference children length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator file MemberReference ArraySelector MemberReference i children IfStatement MethodInvocation file isDirectory BlockStatement StatementExpression Assignment MemberReference removedCount MethodInvocation MemberReference file Literal true removeEmptyDirectories += End End IfStatement BinaryOperation > MemberReference children length Literal 0 BlockStatement StatementExpression Assignment MemberReference children MethodInvocation dir listFiles = End IfStatement BinaryOperation && BinaryOperation < MemberReference children length Literal 1 MemberReference removeIfEmpty BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Removing empty directory: "" MemberReference dir MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation dir delete StatementExpression MemberReference ++ removedCount End End ReturnStatement MemberReference removedCount MethodDeclaration /**
     * Sets the destination directory.
     */ Modifier public setTodir FormalParameter ReferenceType File destDir StatementExpression MethodInvocation _copy MemberReference destDir setTodir MethodDeclaration /**
     * Used to force listing of all names of copied files.
     */ Modifier public setVerbose FormalParameter BasicType boolean verbose StatementExpression MethodInvocation _copy MemberReference verbose setVerbose MethodDeclaration /**
     * Overwrite any existing destination file(s).
     */ Modifier public setOverwrite FormalParameter BasicType boolean overwrite StatementExpression MethodInvocation _copy MemberReference overwrite setOverwrite MethodDeclaration /**
     * Used to copy empty directories.
     */ Modifier public setIncludeEmptyDirs FormalParameter BasicType boolean includeEmpty StatementExpression MethodInvocation _copy MemberReference includeEmpty setIncludeEmptyDirs MethodDeclaration /**
     * If false, note errors to the output but keep going.
     * @param failonerror true or false
     */ Modifier public setFailOnError FormalParameter BasicType boolean failonerror StatementExpression MethodInvocation _copy MemberReference failonerror setFailOnError MethodDeclaration /**
     * Adds a set of files to copy.
     */ Modifier public addFileset FormalParameter ReferenceType FileSet set StatementExpression MethodInvocation _copy MemberReference set addFileset MethodDeclaration /**
     * The number of milliseconds leeway to give before deciding a
     * target is out of date.
     *
     * <p>Default is 0 milliseconds, or 2 seconds on DOS systems.</p>
     *
     * @since Ant 1.6.2
     */ Modifier public setGranularity FormalParameter BasicType long granularity StatementExpression MethodInvocation _copy MemberReference granularity setGranularity ClassDeclaration Modifier public static /**
     * Subclass Copy in order to access it's file/dir maps.
     */ MyCopy FieldDeclaration Modifier private ReferenceType Hashtable VariableDeclarator _dest2src ClassCreator ReferenceType Hashtable ConstructorDeclaration Modifier public MyCopy MethodDeclaration Modifier protected buildMap FormalParameter ReferenceType File fromDir FormalParameter ReferenceType File toDir FormalParameter ReferenceType String names FormalParameter ReferenceType FileNameMapper mapper FormalParameter ReferenceType Hashtable map StatementExpression MethodInvocation Literal ""No mapper"" BinaryOperation instanceof MemberReference mapper ReferenceType IdentityMapper assertTrue StatementExpression SuperMethodInvocation MemberReference fromDir MemberReference toDir MemberReference names MemberReference mapper MemberReference map buildMap ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference names length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MemberReference ArraySelector MemberReference i names LocalVariableDeclaration ReferenceType File VariableDeclarator dest ClassCreator ReferenceType File MemberReference toDir MemberReference name StatementExpression MethodInvocation _dest2src MemberReference dest MemberReference fromDir put End MethodDeclaration Modifier public ReferenceType File getToDir ReturnStatement MemberReference destDir MethodDeclaration Modifier public BasicType boolean getIncludeEmptyDirs ReturnStatement MemberReference includeEmpty ReferenceType Copy MethodDeclaration /**
     * Pseudo-assert method.
     */ Modifier private static assertTrue FormalParameter ReferenceType String message FormalParameter BasicType boolean condition IfStatement MemberReference ! condition BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Assertion Error: "" MemberReference message End ReferenceType Task",0
239,239,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters Import java.io.IOException Import java.io.Reader Import org.apache.tools.ant.types.Parameter ClassDeclaration Modifier public final /**
 * Converts tabs to spaces.
 *
 * Example:
 *
 * <pre>&lt;tabtospaces tablength=&quot;8&quot;/&gt;</pre>
 *
 * Or:
 *
 * <pre>&lt;filterreader classname=&quot;org.apache.tools.ant.filters.TabsToSpaces&quot;&gt;
 *   &lt;param name=&quot;tablength&quot; value=&quot;8&quot;/&gt;
 * &lt;/filterreader&gt;</pre>
 *
 */ TabsToSpaces FieldDeclaration /** The default tab length. */ Modifier private final static BasicType int VariableDeclarator DEFAULT_TAB_LENGTH Literal 8 FieldDeclaration /** Parameter name for the length of a tab. */ Modifier private final static ReferenceType String VariableDeclarator TAB_LENGTH_KEY Literal ""tablength"" FieldDeclaration /** Tab length in this filter. */ Modifier private BasicType int VariableDeclarator tabLength MemberReference DEFAULT_TAB_LENGTH FieldDeclaration /** The number of spaces still to be read to represent the last-read tab. */ Modifier private BasicType int VariableDeclarator spacesRemaining Literal 0 ConstructorDeclaration Modifier public /**
     * Constructor for ""dummy"" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */ TabsToSpaces StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be <code>null</code>.
     */ TabsToSpaces FormalParameter Modifier final ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in MethodDeclaration /**
     * Returns the next character in the filtered stream, converting tabs
     * to the specified number of spaces.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */ Modifier public final BasicType int read IOException IfStatement MethodInvocation ! getInitialized BlockStatement StatementExpression MethodInvocation initialize StatementExpression MethodInvocation Literal true setInitialized End LocalVariableDeclaration BasicType int VariableDeclarator ch Literal - 1 IfStatement BinaryOperation > MemberReference spacesRemaining Literal 0 BlockStatement StatementExpression MemberReference -- spacesRemaining StatementExpression Assignment MemberReference ch Literal ' ' = BlockStatement StatementExpression Assignment MemberReference ch MethodInvocation in read = IfStatement BinaryOperation == MemberReference ch Literal '\t' BlockStatement StatementExpression Assignment MemberReference spacesRemaining BinaryOperation - MemberReference tabLength Literal 1 = StatementExpression Assignment MemberReference ch Literal ' ' = End End ReturnStatement MemberReference ch MethodDeclaration /**
     * Sets the tab length.
     *
     * @param tabLength the number of spaces to be used when converting a tab.
     */ Modifier public final setTablength FormalParameter Modifier final BasicType int tabLength StatementExpression Assignment This MemberReference tabLength MemberReference tabLength = MethodDeclaration /**
     * Returns the tab length.
     *
     * @return the number of spaces used when converting a tab
     */ Modifier private final BasicType int getTablength ReturnStatement MemberReference tabLength MethodDeclaration /**
     * Creates a new TabsToSpaces using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be <code>null</code>.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */ Modifier public final ReferenceType Reader chain FormalParameter Modifier final ReferenceType Reader rdr LocalVariableDeclaration ReferenceType TabsToSpaces VariableDeclarator newFilter ClassCreator ReferenceType TabsToSpaces MemberReference rdr StatementExpression MethodInvocation newFilter MethodInvocation getTablength setTablength StatementExpression MethodInvocation newFilter Literal true setInitialized ReturnStatement MemberReference newFilter MethodDeclaration /**
     * Parses the parameters to set the tab length.
     */ Modifier private final initialize LocalVariableDeclaration ReferenceType Parameter VariableDeclarator params MethodInvocation getParameters IfStatement BinaryOperation != MemberReference params Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference params length MemberReference ++ i BlockStatement IfStatement BinaryOperation != MemberReference ArraySelector MemberReference i params Literal null BlockStatement IfStatement MethodInvocation TAB_LENGTH_KEY MemberReference ArraySelector MemberReference i MethodInvocation getName params equals BlockStatement StatementExpression Assignment MemberReference tabLength ClassCreator MethodInvocation intValue ReferenceType Integer MemberReference ArraySelector MemberReference i MethodInvocation getValue params = BreakStatement End End End End ReferenceType BaseParamFilterReader ReferenceType ChainableReader",0
545,545,,0
273,273,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.dotnet Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Compile J# source down to a managed .NET application.
 * <p>
 * J# is not Java. But it is the language closest to Java in the .NET framework.
 * This task compiles jsharp source (.java files), and
 * generates a .NET managed exe or dll.
 * <p>
 *
 * @see <A=ref=""http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dv_vjsharp/html/vjoriMicrosoftVisualJ.asp"">
 * Visual J++ online documentation</a>
 *
 * @since ant1.6
 * @ant.task category=""dotnet"" name=""jsharpc""
 */ JSharp FieldDeclaration /**
     * hex base address
     */ ReferenceType String VariableDeclarator baseAddress FieldDeclaration /** /x option to disable J++ and J# lang extensions
     *
     */ BasicType boolean VariableDeclarator pureJava Literal true FieldDeclaration /**
     * whether to make package scoped stuff public or assembly scoped
     */ BasicType boolean VariableDeclarator secureScoping Literal false ConstructorDeclaration Modifier public JSharp StatementExpression MethodInvocation Literal ""vjc"" setExecutable MethodDeclaration Modifier public setBaseAddress FormalParameter ReferenceType String baseAddress StatementExpression Assignment This MemberReference baseAddress MemberReference baseAddress = MethodDeclaration /**
     * do we want pure java (default, true) or corrupted J#?
     * @param pureJava
     */ Modifier public setPureJava FormalParameter BasicType boolean pureJava StatementExpression Assignment This MemberReference pureJava MemberReference pureJava = MethodDeclaration /**
     * Make package scoped code visible to the current assembly only (default: false)
     * .NET does not have package scoping. Instead it has assembly, private and public.
     * By default, package content is public to all.
     * @param secureScoping
     */ Modifier public setSecureScoping FormalParameter BasicType boolean secureScoping StatementExpression Assignment This MemberReference secureScoping MemberReference secureScoping = MethodDeclaration /**
     * Get the delimiter that the compiler uses between references.
     * For example, c# will return "";""; VB.NET will return "",""
     * @return The string delimiter for the reference string.
     */ Modifier public ReferenceType String getReferenceDelimiter ReturnStatement Literal "";"" MethodDeclaration /**
     * Get the extension of filenames to compile.
     * @return The string extension of files to compile.
     */ Modifier public ReferenceType String getFileExtension ReturnStatement Literal "".java"" MethodDeclaration /**
     * add jvc specific commands
     * @param command
     */ Modifier protected addCompilerSpecificOptions FormalParameter ReferenceType NetCommand command IfStatement MemberReference pureJava BlockStatement StatementExpression MethodInvocation command Literal ""/x:all"" addArgument End IfStatement MemberReference secureScoping BlockStatement StatementExpression MethodInvocation command Literal ""/securescoping"" addArgument End MethodDeclaration /**
     * from a resource, get the resource param
     * @param resource
     * @return a string containing the resource param, or a null string
     * to conditionally exclude a resource.
     */ Modifier protected ReferenceType String createResourceParameter FormalParameter ReferenceType DotnetResource resource ReturnStatement MethodInvocation resource getCSharpStyleParameter MethodDeclaration /**
     * validation code
     * @throws  org.apache.tools.ant.BuildException  if validation failed
     */ Modifier protected validate BuildException StatementExpression SuperMethodInvocation validate IfStatement BinaryOperation == MethodInvocation getDestFile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""DestFile was not specified"" End ReferenceType DotnetCompile",0
77,77,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.File Import java.io.FileInputStream Import java.io.FileWriter Import java.io.IOException Import java.io.ObjectInputStream Import java.io.PrintWriter Import java.util.Vector Import javax.ejb.deployment.DeploymentDescriptor Import javax.ejb.deployment.EntityDescriptor ClassDeclaration Modifier public /**
 * A helper class which performs the actual work of the ejbc task.
 *
 * This class is run with a classpath which includes the weblogic tools and the home and remote
 * interface class files referenced in the deployment descriptors being processed.
 *
 */ EjbcHelper FieldDeclaration /**
     * The root directory of the tree containing the serialised deployment desciptors.
     */ Modifier private ReferenceType File VariableDeclarator descriptorDirectory FieldDeclaration /**
     * The directory where generated files are placed.
     */ Modifier private ReferenceType File VariableDeclarator generatedFilesDirectory FieldDeclaration /**
     * The name of the manifest file generated for the EJB jar.
     */ Modifier private ReferenceType File VariableDeclarator manifestFile FieldDeclaration /**
     * The source directory for the home and remote interfaces. This is used to determine if
     * the generated deployment classes are out of date.
     */ Modifier private ReferenceType File VariableDeclarator sourceDirectory FieldDeclaration /**
     * The names of the serialised deployment descriptors
     */ ReferenceType String VariableDeclarator descriptors FieldDeclaration Modifier private BasicType boolean VariableDeclarator keepGenerated MethodDeclaration /**
     * Command line interface for the ejbc helper task.
     */ Modifier public static main FormalParameter ReferenceType String args Exception LocalVariableDeclaration ReferenceType EjbcHelper VariableDeclarator helper ClassCreator ReferenceType EjbcHelper MemberReference args StatementExpression MethodInvocation helper process ConstructorDeclaration Modifier private /**
     * Initialise the EjbcHelper by reading the command arguments.
     */ EjbcHelper FormalParameter ReferenceType String args LocalVariableDeclaration BasicType int VariableDeclarator index Literal 0 StatementExpression Assignment MemberReference descriptorDirectory ClassCreator ReferenceType File MemberReference ArraySelector MemberReference ++ index args = StatementExpression Assignment MemberReference generatedFilesDirectory ClassCreator ReferenceType File MemberReference ArraySelector MemberReference ++ index args = StatementExpression Assignment MemberReference sourceDirectory ClassCreator ReferenceType File MemberReference ArraySelector MemberReference ++ index args = StatementExpression Assignment MemberReference manifestFile ClassCreator ReferenceType File MemberReference ArraySelector MemberReference ++ index args = StatementExpression Assignment MemberReference keepGenerated MethodInvocation Boolean MethodInvocation booleanValue MemberReference ArraySelector MemberReference ++ index args valueOf = StatementExpression Assignment MemberReference descriptors ArrayCreator ReferenceType String BinaryOperation - MemberReference args length MemberReference index = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference index MemberReference args length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i descriptors MemberReference ArraySelector MemberReference ++ index args = End MethodDeclaration Modifier private ReferenceType String getCommandLine FormalParameter BasicType boolean debug FormalParameter ReferenceType File descriptorFile LocalVariableDeclaration ReferenceType Vector VariableDeclarator v ClassCreator ReferenceType Vector IfStatement MemberReference ! debug BlockStatement StatementExpression MethodInvocation v Literal ""-noexit"" addElement End IfStatement MemberReference keepGenerated BlockStatement StatementExpression MethodInvocation v Literal ""-keepgenerated"" addElement End StatementExpression MethodInvocation v Literal ""-d"" addElement StatementExpression MethodInvocation v MethodInvocation generatedFilesDirectory getPath addElement StatementExpression MethodInvocation v MethodInvocation descriptorFile getPath addElement LocalVariableDeclaration ReferenceType String VariableDeclarator args ArrayCreator ReferenceType String MethodInvocation v size StatementExpression MethodInvocation v MemberReference args copyInto ReturnStatement MemberReference args MethodDeclaration /**
     * Determine if the weblogic EJB support classes need to be regenerated
     * for a given deployment descriptor.
     *
     * This process attempts to determine if the support classes need to be
     * rebuilt. It does this by examining only some of the support classes
     * which are typically generated. If the ejbc task is interrupted generating
     * the support classes for a bean, all of the support classes should be removed
     * to force regeneration of the support classes.
     *
     * @param descriptorFile the serialised deployment descriptor
     *
     * @return true if the support classes need to be regenerated.
     *
     * @throws IOException if the descriptor file cannot be closed.
     */ Modifier private BasicType boolean isRegenRequired FormalParameter ReferenceType File descriptorFile IOException LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fis Literal null TryStatement StatementExpression Assignment MemberReference fis ClassCreator ReferenceType FileInputStream MemberReference descriptorFile = LocalVariableDeclaration ReferenceType ObjectInputStream VariableDeclarator ois ClassCreator ReferenceType ObjectInputStream MemberReference fis LocalVariableDeclaration ReferenceType DeploymentDescriptor VariableDeclarator dd Cast ReferenceType DeploymentDescriptor MethodInvocation ois readObject StatementExpression MethodInvocation fis close LocalVariableDeclaration ReferenceType String VariableDeclarator homeInterfacePath BinaryOperation + MethodInvocation dd MethodInvocation Literal '.' Literal '/' replace getHomeInterfaceClassName Literal "".java"" LocalVariableDeclaration ReferenceType String VariableDeclarator remoteInterfacePath BinaryOperation + MethodInvocation dd MethodInvocation Literal '.' Literal '/' replace getRemoteInterfaceClassName Literal "".java"" LocalVariableDeclaration ReferenceType String VariableDeclarator primaryKeyClassPath Literal null IfStatement BinaryOperation instanceof MemberReference dd ReferenceType EntityDescriptor BlockStatement StatementExpression Assignment MemberReference primaryKeyClassPath Cast ReferenceType EntityDescriptor MemberReference dd = StatementExpression Assignment MemberReference primaryKeyClassPath BinaryOperation + MethodInvocation primaryKeyClassPath Literal '.' Literal '/' replace Literal "".java"" = Statement End LocalVariableDeclaration ReferenceType File VariableDeclarator homeInterfaceSource ClassCreator ReferenceType File MemberReference sourceDirectory MemberReference homeInterfacePath LocalVariableDeclaration ReferenceType File VariableDeclarator remoteInterfaceSource ClassCreator ReferenceType File MemberReference sourceDirectory MemberReference remoteInterfacePath LocalVariableDeclaration ReferenceType File VariableDeclarator primaryKeyClassSource Literal null IfStatement BinaryOperation != MemberReference primaryKeyClassPath Literal null BlockStatement StatementExpression Assignment MemberReference primaryKeyClassSource ClassCreator ReferenceType File MemberReference sourceDirectory MemberReference remoteInterfacePath = End LocalVariableDeclaration ReferenceType String VariableDeclarator beanClassBase MethodInvocation dd MethodInvocation Literal '.' Literal '/' replace getEnterpriseBeanClassName LocalVariableDeclaration ReferenceType File VariableDeclarator ejbImplentationClass ClassCreator ReferenceType File MemberReference generatedFilesDirectory BinaryOperation + MemberReference beanClassBase Literal ""EOImpl.class"" LocalVariableDeclaration ReferenceType File VariableDeclarator homeImplementationClass ClassCreator ReferenceType File MemberReference generatedFilesDirectory BinaryOperation + MemberReference beanClassBase Literal ""HomeImpl.class"" LocalVariableDeclaration ReferenceType File VariableDeclarator beanStubClass ClassCreator ReferenceType File MemberReference generatedFilesDirectory BinaryOperation + MemberReference beanClassBase Literal ""EOImpl_WLStub.class"" IfStatement BinaryOperation || BinaryOperation || MethodInvocation ! ejbImplentationClass exists MethodInvocation ! homeImplementationClass exists MethodInvocation ! beanStubClass exists BlockStatement ReturnStatement Literal true End LocalVariableDeclaration BasicType long VariableDeclarator classModificationTime MethodInvocation ejbImplentationClass lastModified IfStatement BinaryOperation < MethodInvocation homeImplementationClass lastModified MemberReference classModificationTime BlockStatement StatementExpression Assignment MemberReference classModificationTime MethodInvocation homeImplementationClass lastModified = End IfStatement BinaryOperation < MethodInvocation beanStubClass lastModified MemberReference classModificationTime BlockStatement StatementExpression Assignment MemberReference classModificationTime MethodInvocation beanStubClass lastModified = End IfStatement BinaryOperation || BinaryOperation || BinaryOperation > MethodInvocation descriptorFile lastModified MemberReference classModificationTime BinaryOperation > MethodInvocation homeInterfaceSource lastModified MemberReference classModificationTime BinaryOperation > MethodInvocation remoteInterfaceSource lastModified MemberReference classModificationTime BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation && BinaryOperation != MemberReference primaryKeyClassSource Literal null BinaryOperation > MethodInvocation primaryKeyClassSource lastModified MemberReference classModificationTime BlockStatement ReturnStatement Literal true End CatchClause CatchClauseParameter Throwable descriptorLoadException StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""Exception occurred reading "" MethodInvocation descriptorFile getName Literal "" - continuing"" println ReturnStatement Literal true IfStatement BinaryOperation != MemberReference fis Literal null BlockStatement StatementExpression MethodInvocation fis close End ReturnStatement Literal false MethodDeclaration /**
     * Process the descriptors in turn generating support classes for each and a manifest
     * file for all of the beans.
     */ Modifier private process Exception LocalVariableDeclaration ReferenceType String VariableDeclarator manifest Literal ""Manifest-Version: 1.0\n\n"" ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference descriptors length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator descriptorName MemberReference ArraySelector MemberReference i descriptors LocalVariableDeclaration ReferenceType File VariableDeclarator descriptorFile ClassCreator ReferenceType File MemberReference descriptorDirectory MemberReference descriptorName IfStatement MethodInvocation MemberReference descriptorFile isRegenRequired BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + Literal ""Running ejbc for "" MethodInvocation descriptorFile getName println StatementExpression MethodInvocation MemberReference descriptorFile regenerateSupportClasses BlockStatement StatementExpression MethodInvocation System.out BinaryOperation + MethodInvocation descriptorFile getName Literal "" is up to date"" println End StatementExpression Assignment MemberReference manifest BinaryOperation + BinaryOperation + Literal ""Name: "" MethodInvocation descriptorName Literal '\\' Literal '/' replace Literal ""\nEnterprise-Bean: True\n\n"" += End LocalVariableDeclaration ReferenceType FileWriter VariableDeclarator fw ClassCreator ReferenceType FileWriter MemberReference manifestFile LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator pw ClassCreator ReferenceType PrintWriter MemberReference fw StatementExpression MethodInvocation pw MemberReference manifest print StatementExpression MethodInvocation fw flush StatementExpression MethodInvocation fw close MethodDeclaration /**
     * Perform the weblogic.ejbc call to regenerate the support classes.
     *
     * Note that this method relies on an undocumented -noexit option to the
     * ejbc tool to stop the ejbc tool exiting the VM altogether.
     */ Modifier private regenerateSupportClasses FormalParameter ReferenceType File descriptorFile Exception LocalVariableDeclaration ReferenceType String VariableDeclarator args MethodInvocation Literal false MemberReference descriptorFile getCommandLine TryStatement StatementExpression MethodInvocation weblogic.ejbc MemberReference args main CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator newArgs MethodInvocation Literal true MemberReference descriptorFile getCommandLine StatementExpression MethodInvocation weblogic.ejbc MemberReference newArgs main",1
570,570,,0
14,14,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.extension Import java.io.File Import java.util.Iterator Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.FileSet ClassDeclaration Modifier public /**
 * Displays the ""Optional Package"" and ""Package Specification"" information
 * contained within the specified JARs.
 *
 * <p>Prior to JDK1.3, an ""Optional Package"" was known as an Extension.
 * The specification for this mechanism is available in the JDK1.3
 * documentation in the directory
 * $JDK_HOME/docs/guide/extensions/versioning.html. Alternatively it is
 * available online at <a href=""http://java.sun.com/j2se/1.3/docs/guide/extensions/versioning.html"">
 * http://java.sun.com/j2se/1.3/docs/guide/extensions/versioning.html</a>.</p>
 *
 * @ant.task name=""jarlib-display""
 */ JarLibDisplayTask FieldDeclaration /**
     * The library to display information about.
     */ Modifier private ReferenceType File VariableDeclarator libraryFile FieldDeclaration /**
     * Filesets specifying all the librarys
     * to display information about.
     */ Modifier private final ReferenceType Vector VariableDeclarator libraryFileSets ClassCreator ReferenceType Vector MethodDeclaration /**
     * The JAR library to display information for.
     *
     * @param file The jar library to display information for.
     */ Modifier public setFile FormalParameter Modifier final ReferenceType File file StatementExpression Assignment This MemberReference libraryFile MemberReference file = MethodDeclaration /**
     * Adds a set of files about which library data will be displayed.
     *
     * @param fileSet a set of files about which library data will be displayed.
     */ Modifier public addFileset FormalParameter Modifier final ReferenceType FileSet fileSet StatementExpression MethodInvocation libraryFileSets MemberReference fileSet addElement MethodDeclaration /**
     * Execute the task.
     *
     * @throws BuildException if the task fails.
     */ Modifier public execute BuildException StatementExpression MethodInvocation validate LocalVariableDeclaration Modifier final ReferenceType LibraryDisplayer VariableDeclarator displayer ClassCreator ReferenceType LibraryDisplayer IfStatement MethodInvocation ! libraryFileSets isEmpty BlockStatement LocalVariableDeclaration Modifier final ReferenceType Iterator VariableDeclarator iterator MethodInvocation libraryFileSets iterator WhileStatement MethodInvocation iterator hasNext BlockStatement LocalVariableDeclaration Modifier final ReferenceType FileSet VariableDeclarator fileSet Cast ReferenceType FileSet MethodInvocation iterator next LocalVariableDeclaration Modifier final ReferenceType DirectoryScanner VariableDeclarator scanner MethodInvocation fileSet MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration Modifier final ReferenceType File VariableDeclarator basedir MethodInvocation scanner getBasedir LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator files MethodInvocation scanner getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType File VariableDeclarator file ClassCreator ReferenceType File MemberReference basedir MemberReference ArraySelector MemberReference i files StatementExpression MethodInvocation displayer MemberReference file displayLibrary End End BlockStatement StatementExpression MethodInvocation displayer MemberReference libraryFile displayLibrary End MethodDeclaration /**
     * Validate the tasks parameters.
     *
     * @throws BuildException if invalid parameters found
     */ Modifier private validate BuildException IfStatement BinaryOperation && BinaryOperation == Literal null MemberReference libraryFile MethodInvocation libraryFileSets isEmpty BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message Literal ""File attribute not specified."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End IfStatement BinaryOperation && BinaryOperation != Literal null MemberReference libraryFile MethodInvocation ! libraryFile exists BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message BinaryOperation + BinaryOperation + Literal ""File '"" MemberReference libraryFile Literal ""' does not exist."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End IfStatement BinaryOperation && BinaryOperation != Literal null MemberReference libraryFile MethodInvocation ! libraryFile isFile BlockStatement LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator message BinaryOperation + BinaryOperation + Literal ""\'"" MemberReference libraryFile Literal ""\' is not a file."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference message End ReferenceType Task",0
591,591,,0
377,377,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import java.util.ArrayList Import java.util.Iterator Import java.util.List Import java.util.ListIterator ClassDeclaration Modifier public /**
 * The assertion datatype. This type describes
 * assertion settings for the &lt;java&gt; task and others.
 * One can set the system assertions, and enable/disable those in
 * packages and classes.
 * Assertions can only be enabled or disabled when forking Java.
 *
 * Example: set system assertions and all org.apache packages except
 * for ant, and the class org.apache.tools.ant.Main.
 * <pre>
 * &lt;assertions enableSystemAssertions=""true"" &gt;
 *   &lt;enable package=""org.apache"" /&gt;
 *   &lt;disable package=""org.apache.ant"" /&gt;
 *   &lt;enable class=""org.apache.tools.ant.Main""/&gt;
 * &lt;/assertions&gt;
 *</pre>
 * Disable system assertions; enable those in the anonymous package
 * <pre>
 * &lt;assertions enableSystemAssertions=""false"" &gt;
 *   &lt;enable package=""..."" /&gt;
 * &lt;/assertions&gt;
 * </pre>
 * enable assertions in a class called Test
 * <pre>
 * &lt;assertions &gt;
 *   &lt;enable class=""Test"" /&gt;
 * &lt;/assertions&gt;
 * </pre>
 * This type is a datatype, so you can declare assertions and use them later
 *
 * <pre>
 * &lt;assertions id=""project.assertions"" &gt;
 *   &lt;enable project=""org.apache.test"" /&gt;
 * &lt;/assertions&gt;
 *
 * &lt;assertions refid=""project.assertions"" /&gt;
 *
 * </pre>
 * @since Ant 1.6
 */ Assertions FieldDeclaration /**
     * enable/disable sys assertions; null means undefined
     */ Modifier private ReferenceType Boolean VariableDeclarator enableSystemAssertions FieldDeclaration /**
     * list of type BaseAssertion
     */ Modifier private ReferenceType ArrayList VariableDeclarator assertionList ClassCreator ReferenceType ArrayList MethodDeclaration /**
     * enable assertions
     * @param assertion
     */ Modifier public addEnable FormalParameter ReferenceType EnabledAssertion assertion StatementExpression MethodInvocation checkChildrenAllowed StatementExpression MethodInvocation assertionList MemberReference assertion add MethodDeclaration /**
     * disable assertions
     * @param assertion
     */ Modifier public addDisable FormalParameter ReferenceType DisabledAssertion assertion StatementExpression MethodInvocation checkChildrenAllowed StatementExpression MethodInvocation assertionList MemberReference assertion add MethodDeclaration /**
     * enable or disable system assertions
     * @param enableSystemAssertions
     */ Modifier public setEnableSystemAssertions FormalParameter ReferenceType Boolean enableSystemAssertions StatementExpression MethodInvocation checkAttributesAllowed StatementExpression Assignment This MemberReference enableSystemAssertions MemberReference enableSystemAssertions = MethodDeclaration /**
     * Set the value of the refid attribute.
     *
     * <p>Subclasses may need to check whether any other attributes
     * have been set as well or child elements have been created and
     * thus override this method. if they do the must call
     * <code>super.setRefid</code>.</p>
     */ Modifier public setRefid FormalParameter ReferenceType Reference ref IfStatement BinaryOperation || BinaryOperation > MethodInvocation assertionList size Literal 0 BinaryOperation != MemberReference enableSystemAssertions Literal null BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression SuperMethodInvocation MemberReference ref setRefid MethodDeclaration /**
     * get whatever we are referencing to. This could be ourself.
     * @return the object that contains the assertion info
     */ Modifier private ReferenceType Assertions getFinalReference IfStatement BinaryOperation == MethodInvocation getRefid Literal null BlockStatement ReturnStatement This BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation MethodInvocation MethodInvocation getProject getReferencedObject getRefid IfStatement BinaryOperation instanceof MemberReference o ReferenceType Assertions BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""reference is of wrong type"" End ReturnStatement Cast ReferenceType Assertions MemberReference o End MethodDeclaration /**
     * how many assertions are made...will resolve references before returning
     * @return total # of commands to make
     */ Modifier public BasicType int size LocalVariableDeclaration ReferenceType Assertions VariableDeclarator clause MethodInvocation getFinalReference ReturnStatement MethodInvocation clause getFinalSize MethodDeclaration /**
     * what is the final size of this object
     * @return
     */ Modifier private BasicType int getFinalSize ReturnStatement BinaryOperation + MethodInvocation assertionList size TernaryExpression BinaryOperation != MemberReference enableSystemAssertions Literal null Literal 1 Literal 0 MethodDeclaration /**
     * add the assertions to a list in a format suitable
     * for adding to a command line
     * @param commandList
     */ Modifier public applyAssertions FormalParameter ReferenceType List commandList StatementExpression MethodInvocation MethodInvocation Literal ""Applying assertions"" MemberReference Project MSG_DEBUG log getProject LocalVariableDeclaration ReferenceType Assertions VariableDeclarator clause MethodInvocation getFinalReference IfStatement MethodInvocation Boolean.TRUE MemberReference clause enableSystemAssertions equals BlockStatement StatementExpression MethodInvocation MethodInvocation Literal ""Enabling system assertions"" MemberReference Project MSG_DEBUG log getProject StatementExpression MethodInvocation commandList Literal ""-enablesystemassertions"" add IfStatement MethodInvocation Boolean.FALSE MemberReference clause enableSystemAssertions equals BlockStatement StatementExpression MethodInvocation MethodInvocation Literal ""disabling system assertions"" MemberReference Project MSG_DEBUG log getProject StatementExpression MethodInvocation commandList Literal ""-disablesystemassertions"" add End End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation clause.assertionList iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType BaseAssertion VariableDeclarator assertion Cast ReferenceType BaseAssertion MethodInvocation it next LocalVariableDeclaration ReferenceType String VariableDeclarator arg MethodInvocation assertion toCommand StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""adding assertion "" MemberReference arg MemberReference Project MSG_DEBUG log getProject StatementExpression MethodInvocation commandList MemberReference arg add End MethodDeclaration /**
     * apply all the assertions to the command.
     * @param command
     */ Modifier public applyAssertions FormalParameter ReferenceType CommandlineJava command LocalVariableDeclaration ReferenceType Assertions VariableDeclarator clause MethodInvocation getFinalReference IfStatement MethodInvocation Boolean.TRUE MemberReference clause enableSystemAssertions equals BlockStatement StatementExpression MethodInvocation MemberReference command Literal ""-enablesystemassertions"" addVmArgument IfStatement MethodInvocation Boolean.FALSE MemberReference clause enableSystemAssertions equals BlockStatement StatementExpression MethodInvocation MemberReference command Literal ""-disablesystemassertions"" addVmArgument End End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation clause.assertionList iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType BaseAssertion VariableDeclarator assertion Cast ReferenceType BaseAssertion MethodInvocation it next LocalVariableDeclaration ReferenceType String VariableDeclarator arg MethodInvocation assertion toCommand StatementExpression MethodInvocation MemberReference command MemberReference arg addVmArgument End MethodDeclaration /**
     * add the assertions to a list in a format suitable
     * for adding to a command line
     * @param commandList
     */ Modifier public applyAssertions FormalParameter Modifier final ReferenceType ListIterator commandIterator StatementExpression MethodInvocation MethodInvocation Literal ""Applying assertions"" MemberReference Project MSG_DEBUG log getProject LocalVariableDeclaration ReferenceType Assertions VariableDeclarator clause MethodInvocation getFinalReference IfStatement MethodInvocation Boolean.TRUE MemberReference clause enableSystemAssertions equals BlockStatement StatementExpression MethodInvocation MethodInvocation Literal ""Enabling system assertions"" MemberReference Project MSG_DEBUG log getProject StatementExpression MethodInvocation commandIterator Literal ""-enablesystemassertions"" add IfStatement MethodInvocation Boolean.FALSE MemberReference clause enableSystemAssertions equals BlockStatement StatementExpression MethodInvocation MethodInvocation Literal ""disabling system assertions"" MemberReference Project MSG_DEBUG log getProject StatementExpression MethodInvocation commandIterator Literal ""-disablesystemassertions"" add End End LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation clause.assertionList iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType BaseAssertion VariableDeclarator assertion Cast ReferenceType BaseAssertion MethodInvocation it next LocalVariableDeclaration ReferenceType String VariableDeclarator arg MethodInvocation assertion toCommand StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""adding assertion "" MemberReference arg MemberReference Project MSG_DEBUG log getProject StatementExpression MethodInvocation commandIterator MemberReference arg add End MethodDeclaration /**
     * helper method to add a string JVM argument to a command
     * @param command
     * @param arg
     */ Modifier private static addVmArgument FormalParameter ReferenceType CommandlineJava command FormalParameter ReferenceType String arg LocalVariableDeclaration ReferenceType Commandline ReferenceType Argument VariableDeclarator argument StatementExpression Assignment MemberReference argument MethodInvocation command createVmArgument = StatementExpression MethodInvocation argument MemberReference arg setValue MethodDeclaration /**
     * clone the objects.
     * This is not a full depth clone; the list of assertions is cloned,
     * but it does not clone the underlying assertions.
     * @return a cli
     * @throws CloneNotSupportedException
     */ Modifier public ReferenceType Object clone CloneNotSupportedException LocalVariableDeclaration ReferenceType Assertions VariableDeclarator that Cast ReferenceType Assertions SuperMethodInvocation clone StatementExpression Assignment MemberReference that assertionList Cast ReferenceType ArrayList MethodInvocation assertionList clone = ReturnStatement MemberReference that ClassDeclaration Modifier public static abstract /**
     * base class for our assertion elements.
     */ BaseAssertion FieldDeclaration Modifier private ReferenceType String VariableDeclarator packageName FieldDeclaration Modifier private ReferenceType String VariableDeclarator className MethodDeclaration /**
         * name a class
         * @param className
         */ Modifier public setClass FormalParameter ReferenceType String className StatementExpression Assignment This MemberReference className MemberReference className = MethodDeclaration /**
         * name a package
         * @param packageName
         */ Modifier public setPackage FormalParameter ReferenceType String packageName StatementExpression Assignment This MemberReference packageName MemberReference packageName = MethodDeclaration /**
         * what is the class name?
         * @return classname or null
         * @see #setClass
         */ Modifier protected ReferenceType String getClassName ReturnStatement MemberReference className MethodDeclaration /**
         * what is the package name?
         * @return package name or null
         * @see #setPackage
         */ Modifier protected ReferenceType String getPackageName ReturnStatement MemberReference packageName MethodDeclaration /**
         * get the prefix used to begin the command; -ea or -da.
         * @return prefix
         */ Modifier public abstract ReferenceType String getCommandPrefix MethodDeclaration /**
         * create a full command string from this class
         * @throws BuildException in case of trouble
         * @return The command string
         */ Modifier public ReferenceType String toCommand IfStatement BinaryOperation && BinaryOperation != MethodInvocation getPackageName Literal null BinaryOperation != MethodInvocation getClassName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Both package and class have been set"" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator command ClassCreator ReferenceType StringBuffer MethodInvocation getCommandPrefix IfStatement BinaryOperation != MethodInvocation getPackageName Literal null BlockStatement StatementExpression MethodInvocation command Literal ':' append StatementExpression MethodInvocation command MethodInvocation getPackageName append IfStatement MethodInvocation ! command MethodInvocation Literal ""..."" endsWith toString BlockStatement StatementExpression MethodInvocation command Literal ""..."" append End IfStatement BinaryOperation != MethodInvocation getClassName Literal null BlockStatement StatementExpression MethodInvocation command Literal ':' append StatementExpression MethodInvocation command MethodInvocation getClassName append End End ReturnStatement MethodInvocation command toString ClassDeclaration Modifier public static /**
     * an enabled assertion enables things
     */ EnabledAssertion MethodDeclaration /**
         * get the prefix used to begin the command; -ea or -da.
         * @return prefix
         */ Modifier public ReferenceType String getCommandPrefix ReturnStatement Literal ""-ea"" ReferenceType BaseAssertion ClassDeclaration Modifier public static /**
     * A disabled assertion disables things
     */ DisabledAssertion MethodDeclaration /**
         * get the prefix used to begin the command; -ea or -da.
         * @return prefix
         */ Modifier public ReferenceType String getCommandPrefix ReturnStatement Literal ""-da"" ReferenceType BaseAssertion ReferenceType DataType ReferenceType Cloneable",0
227,227,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.io.BufferedReader Import java.io.File Import java.io.InputStream Import java.io.InputStreamReader Import java.util.Hashtable Import java.util.Locale Import java.util.Vector Import org.apache.tools.ant.helper.ProjectHelper2 Import org.apache.tools.ant.util.LoaderUtils Import org.xml.sax.AttributeList ClassDeclaration Modifier public /**
 * Configures a Project (complete with Targets and Tasks) based on
 * a XML build file. It'll rely on a plugin to do the actual processing
 * of the xml file.
 *
 * This class also provide static wrappers for common introspection.
 *
 * All helper plugins must provide backward compatibility with the
 * original ant patterns, unless a different behavior is explicitly
 * specified. For example, if namespace is used on the &lt;project&gt; tag
 * the helper can expect the entire build file to be namespace-enabled.
 * Namespaces or helper-specific tags can provide meta-information to
 * the helper, allowing it to use new ( or different policies ).
 *
 * However, if no namespace is used the behavior should be exactly
 * identical with the default helper.
 *
 */ ProjectHelper FieldDeclaration /** The URI for ant name space */ Modifier public final static ReferenceType String VariableDeclarator ANT_CORE_URI Literal ""antlib:org.apache.tools.ant"" FieldDeclaration /** The URI for antlib current definitions */ Modifier public final static ReferenceType String VariableDeclarator ANT_CURRENT_URI Literal ""ant:current"" FieldDeclaration /** The URI for defined types/tasks - the format is antlib:<package> */ Modifier public final static ReferenceType String VariableDeclarator ANTLIB_URI Literal ""antlib:"" FieldDeclaration /** Polymorphic attribute  */ Modifier public final static ReferenceType String VariableDeclarator ANT_TYPE Literal ""ant-type"" FieldDeclaration /**
     * Name of JVM system property which provides the name of the
     * ProjectHelper class to use.
     */ Modifier public final static ReferenceType String VariableDeclarator HELPER_PROPERTY Literal ""org.apache.tools.ant.ProjectHelper"" FieldDeclaration /**
     * The service identifier in jars which provide Project Helper
     * implementations.
     */ Modifier public final static ReferenceType String VariableDeclarator SERVICE_ID Literal ""META-INF/services/org.apache.tools.ant.ProjectHelper"" MethodDeclaration /**
     * Configures the project with the contents of the specified XML file.
     *
     * @param project The project to configure. Must not be <code>null</code>.
     * @param buildFile An XML file giving the project's configuration.
     *                  Must not be <code>null</code>.
     *
     * @deprecated Use the non-static parse method
     * @exception BuildException if the configuration is invalid or cannot
     *                           be read
     */ Modifier public static configureProject FormalParameter ReferenceType Project project FormalParameter ReferenceType File buildFile BuildException LocalVariableDeclaration ReferenceType ProjectHelper VariableDeclarator helper MethodInvocation ProjectHelper getProjectHelper StatementExpression MethodInvocation project Literal ""ant.projectHelper"" MemberReference helper addReference StatementExpression MethodInvocation helper MemberReference project MemberReference buildFile parse ConstructorDeclaration Modifier public /** Default constructor */ ProjectHelper FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator importStack ClassCreator ReferenceType Vector MethodDeclaration /** EXPERIMENTAL WILL_CHANGE
     *  Import stack.
     *  Used to keep track of imported files. Error reporting should
     *  display the import path.
     *
     * @return the stack of import source objects.
     */ Modifier public ReferenceType Vector getImportStack ReturnStatement MemberReference importStack MethodDeclaration /**
     * Parses the project file, configuring the project as it goes.
     *
     * @param project The project for the resulting ProjectHelper to configure.
     *                Must not be <code>null</code>.
     * @param source The source for XML configuration. A helper must support
     *               at least File, for backward compatibility. Helpers may
     *               support URL, InputStream, etc or specialized types.
     *
     * @since Ant1.5
     * @exception BuildException if the configuration is invalid or cannot
     *                           be read
     */ Modifier public parse FormalParameter ReferenceType Project project FormalParameter ReferenceType Object source BuildException ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""ProjectHelper.parse() must be implemented "" Literal ""in a helper plugin "" This MethodInvocation getClass MethodInvocation getName MethodDeclaration /**
     * Discovers a project helper instance. Uses the same patterns
     * as JAXP, commons-logging, etc: a system property, a JDK1.3
     * service discovery, default.
     *
     * @return a ProjectHelper, either a custom implementation
     * if one is available and configured, or the default implementation
     * otherwise.
     *
     * @exception BuildException if a specified helper class cannot
     * be loaded/instantiated.
     */ Modifier public static ReferenceType ProjectHelper getProjectHelper BuildException LocalVariableDeclaration ReferenceType ProjectHelper VariableDeclarator helper Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator helperClass MethodInvocation System MemberReference HELPER_PROPERTY getProperty TryStatement IfStatement BinaryOperation != MemberReference helperClass Literal null BlockStatement StatementExpression Assignment MemberReference helper MethodInvocation MemberReference helperClass newHelper = End CatchClause CatchClauseParameter SecurityException e StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to load ProjectHelper class \"""" MemberReference helperClass Literal "" specified in system property "" MemberReference HELPER_PROPERTY println IfStatement BinaryOperation == MemberReference helper Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator classLoader MethodInvocation LoaderUtils getContextClassLoader LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is Literal null IfStatement BinaryOperation != MemberReference classLoader Literal null BlockStatement StatementExpression Assignment MemberReference is MethodInvocation classLoader MemberReference SERVICE_ID getResourceAsStream = End IfStatement BinaryOperation == MemberReference is Literal null BlockStatement StatementExpression Assignment MemberReference is MethodInvocation ClassLoader MemberReference SERVICE_ID getSystemResourceAsStream = End IfStatement BinaryOperation != MemberReference is Literal null BlockStatement LocalVariableDeclaration ReferenceType InputStreamReader VariableDeclarator isr TryStatement StatementExpression Assignment MemberReference isr ClassCreator ReferenceType InputStreamReader MemberReference is Literal ""UTF-8"" = CatchClause CatchClauseParameter java.io.UnsupportedEncodingException e StatementExpression Assignment MemberReference isr ClassCreator ReferenceType InputStreamReader MemberReference is = LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator rd ClassCreator ReferenceType BufferedReader MemberReference isr LocalVariableDeclaration ReferenceType String VariableDeclarator helperClassName MethodInvocation rd readLine StatementExpression MethodInvocation rd close IfStatement BinaryOperation && BinaryOperation != MemberReference helperClassName Literal null Literal ! MethodInvocation MemberReference helperClassName equals """" BlockStatement StatementExpression Assignment MemberReference helper MethodInvocation MemberReference helperClassName newHelper = End End CatchClause CatchClauseParameter Exception ex StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""Unable to load ProjectHelper "" Literal ""from service \"""" MemberReference SERVICE_ID println End IfStatement BinaryOperation != MemberReference helper Literal null BlockStatement ReturnStatement MemberReference helper BlockStatement TryStatement ReturnStatement ClassCreator ReferenceType ProjectHelper2 CatchClause CatchClauseParameter Throwable e LocalVariableDeclaration ReferenceType String VariableDeclarator message BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to load default ProjectHelper due to "" MethodInvocation e MethodInvocation getName getClass Literal "": "" MethodInvocation e getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference message MemberReference e End MethodDeclaration /**
     * Creates a new helper instance from the name of the class.
     * It'll first try the thread class loader, then Class.forName()
     * will load from the same loader that loaded this class.
     *
     * @param helperClass The name of the class to create an instance
     *                    of. Must not be <code>null</code>.
     *
     * @return a new instance of the specified class.
     *
     * @exception BuildException if the class cannot be found or
     * cannot be appropriate instantiated.
     */ Modifier private static ReferenceType ProjectHelper newHelper FormalParameter ReferenceType String helperClass BuildException LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator classLoader MethodInvocation LoaderUtils getContextClassLoader TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator clazz Literal null IfStatement BinaryOperation != MemberReference classLoader Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference clazz MethodInvocation classLoader MemberReference helperClass loadClass = CatchClause CatchClauseParameter ClassNotFoundException ex End IfStatement BinaryOperation == MemberReference clazz Literal null BlockStatement StatementExpression Assignment MemberReference clazz MethodInvocation Class MemberReference helperClass forName = End ReturnStatement Cast ReferenceType ProjectHelper MethodInvocation clazz newInstance CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * JDK1.1 compatible access to the context class loader.
     * Cut&paste from JAXP.
     *
     * @deprecated Use LoaderUtils.getContextClassLoader()
     * @return the current context class loader, or <code>null</code>
     * if the context class loader is unavailable.
     */ Modifier public static ReferenceType ClassLoader getContextClassLoader IfStatement MethodInvocation ! LoaderUtils isContextLoaderAvailable BlockStatement ReturnStatement Literal null End ReturnStatement MethodInvocation LoaderUtils getContextClassLoader MethodDeclaration /**
     * Configures an object using an introspection handler.
     *
     * @param target The target object to be configured.
     *               Must not be <code>null</code>.
     * @param attrs  A list of attributes to configure within the target.
     *               Must not be <code>null</code>.
     * @param project The project containing the target.
     *                Must not be <code>null</code>.
     *
     * @deprecated Use IntrospectionHelper for each property
     * @exception BuildException if any of the attributes can't be handled by
     *                           the target
     */ Modifier public static configure FormalParameter ReferenceType Object target FormalParameter ReferenceType AttributeList attrs FormalParameter ReferenceType Project project BuildException IfStatement BinaryOperation instanceof MemberReference target ReferenceType TypeAdapter BlockStatement StatementExpression Assignment MemberReference target Cast ReferenceType TypeAdapter MemberReference target = End LocalVariableDeclaration ReferenceType IntrospectionHelper VariableDeclarator ih MethodInvocation IntrospectionHelper MethodInvocation target getClass getHelper StatementExpression MethodInvocation project MemberReference ih addBuildListener ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation attrs getLength MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation MemberReference project MethodInvocation attrs MemberReference i getValue MethodInvocation project getProperties replaceProperties TryStatement StatementExpression MethodInvocation ih MemberReference project MemberReference target MethodInvocation attrs MethodInvocation MemberReference Locale US toLowerCase MemberReference i getName MemberReference value setAttribute CatchClause CatchClauseParameter BuildException be IfStatement MethodInvocation ! attrs MethodInvocation Literal ""id"" equals MemberReference i getName BlockStatement ThrowStatement MemberReference be End End MethodDeclaration /**
     * Adds the content of #PCDATA sections to an element.
     *
     * @param project The project containing the target.
     *                Must not be <code>null</code>.
     * @param target  The target object to be configured.
     *                Must not be <code>null</code>.
     * @param buf A character array of the text within the element.
     *            Will not be <code>null</code>.
     * @param start The start element in the array.
     * @param count The number of characters to read from the array.
     *
     * @exception BuildException if the target object doesn't accept text
     */ Modifier public static addText FormalParameter ReferenceType Project project FormalParameter ReferenceType Object target FormalParameter BasicType char buf FormalParameter BasicType int start FormalParameter BasicType int count BuildException StatementExpression MethodInvocation MemberReference project MemberReference target ClassCreator ReferenceType String MemberReference buf MemberReference start MemberReference count addText MethodDeclaration /**
     * Adds the content of #PCDATA sections to an element.
     *
     * @param project The project containing the target.
     *                Must not be <code>null</code>.
     * @param target  The target object to be configured.
     *                Must not be <code>null</code>.
     * @param text    Text to add to the target.
     *                May be <code>null</code>, in which case this
     *                method call is a no-op.
     *
     * @exception BuildException if the target object doesn't accept text
     */ Modifier public static addText FormalParameter ReferenceType Project project FormalParameter ReferenceType Object target FormalParameter ReferenceType String text BuildException IfStatement BinaryOperation == MemberReference text Literal null BlockStatement ReturnStatement End IfStatement BinaryOperation instanceof MemberReference target ReferenceType TypeAdapter BlockStatement StatementExpression Assignment MemberReference target Cast ReferenceType TypeAdapter MemberReference target = End StatementExpression MethodInvocation IntrospectionHelper MethodInvocation MemberReference project MemberReference target MemberReference text addText MethodInvocation target getClass getHelper MethodDeclaration /**
     * Stores a configured child element within its parent object.
     *
     * @param project Project containing the objects.
     *                May be <code>null</code>.
     * @param parent  Parent object to add child to.
     *                Must not be <code>null</code>.
     * @param child   Child object to store in parent.
     *                Should not be <code>null</code>.
     * @param tag     Name of element which generated the child.
     *                May be <code>null</code>, in which case
     *                the child is not stored.
     */ Modifier public static storeChild FormalParameter ReferenceType Project project FormalParameter ReferenceType Object parent FormalParameter ReferenceType Object child FormalParameter ReferenceType String tag LocalVariableDeclaration ReferenceType IntrospectionHelper VariableDeclarator ih MethodInvocation IntrospectionHelper MethodInvocation parent getClass getHelper StatementExpression MethodInvocation ih MemberReference project MemberReference parent MemberReference child MemberReference tag storeElement MethodDeclaration /**
     * Replaces <code>${xxx}</code> style constructions in the given value with
     * the string value of the corresponding properties.
     *
     * @param project The project containing the properties to replace.
     *                Must not be <code>null</code>.
     *
     * @param value The string to be scanned for property references.
     *              May be <code>null</code>.
     *
     * @exception BuildException if the string contains an opening
     *                           <code>${</code> without a closing
     *                           <code>}</code>
     * @return the original string with the properties replaced, or
     *         <code>null</code> if the original string is <code>null</code>.
     *
     * @deprecated Use project.replaceProperties()
     * @since 1.5
     */ Modifier public static ReferenceType String replaceProperties FormalParameter ReferenceType Project project FormalParameter ReferenceType String value BuildException ReturnStatement MethodInvocation project MemberReference value replaceProperties MethodDeclaration /**
     * Replaces <code>${xxx}</code> style constructions in the given value
     * with the string value of the corresponding data types.
     *
     * @param project The container project. This is used solely for
     *                logging purposes. Must not be <code>null</code>.
     * @param value The string to be scanned for property references.
     *              May be <code>null</code>, in which case this
     *              method returns immediately with no effect.
     * @param keys  Mapping (String to String) of property names to their
     *              values. Must not be <code>null</code>.
     *
     * @exception BuildException if the string contains an opening
     *                           <code>${</code> without a closing
     *                           <code>}</code>
     * @return the original string with the properties replaced, or
     *         <code>null</code> if the original string is <code>null</code>.
     * @deprecated Use PropertyHelper
     */ Modifier public static ReferenceType String replaceProperties FormalParameter ReferenceType Project project FormalParameter ReferenceType String value FormalParameter ReferenceType Hashtable keys BuildException LocalVariableDeclaration ReferenceType PropertyHelper VariableDeclarator ph MethodInvocation PropertyHelper MemberReference project getPropertyHelper ReturnStatement MethodInvocation ph Literal null MemberReference value MemberReference keys replaceProperties MethodDeclaration /**
     * Parses a string containing <code>${xxx}</code> style property
     * references into two lists. The first list is a collection
     * of text fragments, while the other is a set of string property names.
     * <code>null</code> entries in the first list indicate a property
     * reference from the second list.
     *
     * @param value     Text to parse. Must not be <code>null</code>.
     * @param fragments List to add text fragments to.
     *                  Must not be <code>null</code>.
     * @param propertyRefs List to add property names to.
     *                     Must not be <code>null</code>.
     *
     * @deprecated Use PropertyHelper
     * @exception BuildException if the string contains an opening
     *                           <code>${</code> without a closing
     *                           <code>}</code>
     */ Modifier public static parsePropertyString FormalParameter ReferenceType String value FormalParameter ReferenceType Vector fragments FormalParameter ReferenceType Vector propertyRefs BuildException StatementExpression MethodInvocation PropertyHelper MemberReference value MemberReference fragments MemberReference propertyRefs parsePropertyStringDefault MethodDeclaration /**
     * Map a namespaced {uri,name} to an internal string format.
     * For BC purposes the names from the ant core uri will be
     * mapped to ""name"", other names will be mapped to
     * uri + "":"" + name.
     * @param uri   The namepace URI
     * @param name  The localname
     * @return      The stringified form of the ns name
     */ Modifier public static ReferenceType String genComponentName FormalParameter ReferenceType String uri FormalParameter ReferenceType String name IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MemberReference uri Literal null MethodInvocation uri Literal """" equals MethodInvocation uri MemberReference ANT_CORE_URI equals BlockStatement ReturnStatement MemberReference name End ReturnStatement BinaryOperation + BinaryOperation + MemberReference uri Literal "":"" MemberReference name MethodDeclaration /**
     * extract a uri from a component name
     *
     * @param componentName  The stringified form for {uri, name}
     * @return               The uri or """" if not present
     */ Modifier public static ReferenceType String extractUriFromComponentName FormalParameter ReferenceType String componentName IfStatement BinaryOperation == MemberReference componentName Literal null BlockStatement ReturnStatement Literal """" End LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation componentName Literal ':' lastIndexOf IfStatement BinaryOperation == MemberReference index Literal - 1 BlockStatement ReturnStatement Literal """" End ReturnStatement MethodInvocation componentName Literal 0 MemberReference index substring MethodDeclaration /**
     * extract the element name from a component name
     *
     * @param componentName  The stringified form for {uri, name}
     * @return               The element name of the component
     */ Modifier public static ReferenceType String extractNameFromComponentName FormalParameter ReferenceType String componentName LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation componentName Literal ':' lastIndexOf IfStatement BinaryOperation == MemberReference index Literal - 1 BlockStatement ReturnStatement MemberReference componentName End ReturnStatement MethodInvocation componentName BinaryOperation + MemberReference index Literal 1 substring MethodDeclaration /**
     * Add location to build exception.
     * @param ex the build exception, if the build exception
     *           does not include
     * @param newLocation the location of the calling task (may be null)
     * @return a new build exception based in the build exception with
     *         location set to newLocation. If the original exception
     *         did not have a location, just return the build exception
     */ Modifier public static ReferenceType BuildException addLocationToBuildException FormalParameter ReferenceType BuildException ex FormalParameter ReferenceType Location newLocation IfStatement BinaryOperation || BinaryOperation == MethodInvocation ex getLocation Literal null BinaryOperation == MethodInvocation ex getMessage Literal null BlockStatement ReturnStatement MemberReference ex End LocalVariableDeclaration ReferenceType String VariableDeclarator errorMessage BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The following error occurred while executing this line:"" MethodInvocation System Literal ""line.separator"" getProperty MethodInvocation ex MethodInvocation toString getLocation MethodInvocation ex getMessage IfStatement BinaryOperation == MemberReference newLocation Literal null BlockStatement ReturnStatement ClassCreator ReferenceType BuildException MemberReference errorMessage MemberReference ex BlockStatement ReturnStatement ClassCreator ReferenceType BuildException MemberReference errorMessage MemberReference ex MemberReference newLocation End",0
315,315,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.util.List Import java.util.Iterator Import java.util.ArrayList Import java.util.Collections Import org.apache.tools.ant.types.Mapper ClassDeclaration Modifier public abstract /**
 * A <code>FileNameMapper</code> that contains
 * other <CODE>FileNameMapper</CODE>s.
 * @see FileNameMapper
 */ ContainerMapper FieldDeclaration Modifier private ReferenceType List VariableDeclarator mappers ClassCreator ReferenceType ArrayList MethodDeclaration /**
     * Add a <code>Mapper</code>.
     * @param mapper the <code>Mapper</code> to add.
     */ Modifier public addConfiguredMapper FormalParameter ReferenceType Mapper mapper StatementExpression MethodInvocation MethodInvocation mapper getImplementation add MethodDeclaration /**
     * Add a <code>FileNameMapper</code>.
     * @param fileNameMapper a <CODE>FileNameMapper</CODE>.
     * @throws <CODE>IllegalArgumentException</CODE> if attempting to add this
     *         <CODE>ContainerMapper</CODE> to itself, or if the specified
     *         <CODE>FileNameMapper</CODE> is itself a <CODE>ContainerMapper</CODE>
     *         that contains this <CODE>ContainerMapper</CODE>.
     */ Modifier public synchronized add FormalParameter ReferenceType FileNameMapper fileNameMapper IfStatement BinaryOperation || BinaryOperation == This MemberReference fileNameMapper BinaryOperation && BinaryOperation instanceof MemberReference fileNameMapper ReferenceType ContainerMapper Cast ReferenceType ContainerMapper MemberReference fileNameMapper BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Circular mapper containment condition detected"" BlockStatement StatementExpression MethodInvocation mappers MemberReference fileNameMapper add End MethodDeclaration /**
     * Return <CODE>true</CODE> if this <CODE>ContainerMapper</CODE> or any of
     * its sub-elements contains the specified <CODE>FileNameMapper</CODE>.
     * @param fileNameMapper   the <CODE>FileNameMapper</CODE> to search for.
     * @return <CODE>boolean</CODE>.
     */ Modifier protected synchronized BasicType boolean contains FormalParameter ReferenceType FileNameMapper fileNameMapper LocalVariableDeclaration BasicType boolean VariableDeclarator foundit Literal false ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation mappers iterator BinaryOperation && MethodInvocation iter hasNext MemberReference ! foundit BlockStatement LocalVariableDeclaration ReferenceType FileNameMapper VariableDeclarator next Cast ReferenceType FileNameMapper MethodInvocation iter next StatementExpression Assignment MemberReference foundit BinaryOperation || BinaryOperation == MemberReference next MemberReference fileNameMapper BinaryOperation && BinaryOperation instanceof MemberReference next ReferenceType ContainerMapper Cast ReferenceType ContainerMapper MemberReference next |= End ReturnStatement MemberReference foundit MethodDeclaration /**
     * Get the <CODE>List</CODE> of <CODE>FileNameMapper</CODE>s.
     * @return <CODE>List</CODE>.
     */ Modifier public synchronized ReferenceType List getMappers ReturnStatement MethodInvocation Collections MemberReference mappers unmodifiableList MethodDeclaration /**
     * Empty implementation.
     */ Modifier public setFrom FormalParameter ReferenceType String ignore MethodDeclaration /**
     * Empty implementation.
     */ Modifier public setTo FormalParameter ReferenceType String ignore ReferenceType FileNameMapper",0
319,319,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ejb Import java.io.File Import java.io.FileInputStream Import java.io.FileOutputStream Import java.io.IOException Import java.io.InputStream Import java.util.Enumeration Import java.util.Hashtable Import java.util.Iterator Import java.util.Vector Import java.util.jar.JarEntry Import java.util.jar.JarFile Import java.util.jar.JarOutputStream Import javax.xml.parsers.SAXParser Import javax.xml.parsers.SAXParserFactory Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Java Import org.apache.tools.ant.types.Environment Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.util.FileUtils Import org.xml.sax.InputSource ClassDeclaration Modifier public /**
    The weblogic element is used to control the weblogic.ejbc compiler for
    generating weblogic EJB jars. Prior to Ant 1.3, the method of locating CMP
    descriptors was to use the ejbjar naming convention. So if your ejb-jar was
    called, Customer-ejb-jar.xml, your weblogic descriptor was called Customer-
    weblogic-ejb-jar.xml and your CMP descriptor had to be Customer-weblogic-cmp-
    rdbms-jar.xml. In addition, the &lt;type-storage&gt; element in the weblogic
    descriptor had to be set to the standard name META-INF/weblogic-cmp-rdbms-
    jar.xml, as that is where the CMP descriptor was mapped to in the generated
    jar.
*/ WeblogicDeploymentTool FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PUBLICID_EJB11 Literal ""-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PUBLICID_EJB20 Literal ""-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PUBLICID_WEBLOGIC_EJB510 Literal ""-//BEA Systems, Inc.//DTD WebLogic 5.1.0 EJB//EN"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PUBLICID_WEBLOGIC_EJB600 Literal ""-//BEA Systems, Inc.//DTD WebLogic 6.0.0 EJB//EN"" FieldDeclaration Modifier public final static ReferenceType String VariableDeclarator PUBLICID_WEBLOGIC_EJB700 Literal ""-//BEA Systems, Inc.//DTD WebLogic 7.0.0 EJB//EN"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_WL51_EJB11_DTD_LOCATION Literal ""/weblogic/ejb/deployment/xml/ejb-jar.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_WL60_EJB11_DTD_LOCATION Literal ""/weblogic/ejb20/dd/xml/ejb11-jar.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_WL60_EJB20_DTD_LOCATION Literal ""/weblogic/ejb20/dd/xml/ejb20-jar.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_WL51_DTD_LOCATION Literal ""/weblogic/ejb/deployment/xml/weblogic-ejb-jar.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_WL60_51_DTD_LOCATION Literal ""/weblogic/ejb20/dd/xml/weblogic510-ejb-jar.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_WL60_DTD_LOCATION Literal ""/weblogic/ejb20/dd/xml/weblogic600-ejb-jar.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_WL70_DTD_LOCATION Literal ""/weblogic/ejb20/dd/xml/weblogic700-ejb-jar.dtd"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator DEFAULT_COMPILER Literal ""default"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator WL_DD Literal ""weblogic-ejb-jar.xml"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator WL_CMP_DD Literal ""weblogic-cmp-rdbms-jar.xml"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator COMPILER_EJB11 Literal ""weblogic.ejbc"" FieldDeclaration Modifier final protected static ReferenceType String VariableDeclarator COMPILER_EJB20 Literal ""weblogic.ejbc20"" FieldDeclaration /** Instance variable that stores the suffix for the weblogic jarfile. */ Modifier private ReferenceType String VariableDeclarator jarSuffix Literal "".jar"" FieldDeclaration /** Instance variable that stores the location of the weblogic DTD file. */ Modifier private ReferenceType String VariableDeclarator weblogicDTD FieldDeclaration /** Instance variable that stores the location of the ejb 1.1 DTD file. */ Modifier private ReferenceType String VariableDeclarator ejb11DTD FieldDeclaration /** Instance variable that determines whether generic ejb jars are kept. */ Modifier private BasicType boolean VariableDeclarator keepgenerated Literal false FieldDeclaration /**
     * Instance variable that stores the fully qualified classname of the
     * weblogic EJBC compiler
     */ Modifier private ReferenceType String VariableDeclarator ejbcClass Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator additionalArgs Literal """" FieldDeclaration /**
     * additional args to pass to the spawned jvm
     */ Modifier private ReferenceType String VariableDeclarator additionalJvmArgs Literal """" FieldDeclaration Modifier private BasicType boolean VariableDeclarator keepGeneric Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator compiler Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator alwaysRebuild Literal true FieldDeclaration /** controls whether ejbc is run on the generated jar */ Modifier private BasicType boolean VariableDeclarator noEJBC Literal false FieldDeclaration /** Indicates if the old CMP location convention is to be used.  */ Modifier private BasicType boolean VariableDeclarator newCMP Literal false FieldDeclaration /** The classpath to the weblogic classes. */ Modifier private ReferenceType Path VariableDeclarator wlClasspath Literal null FieldDeclaration /** System properties for the JVM. */ Modifier private ReferenceType Vector VariableDeclarator sysprops ClassCreator ReferenceType Vector FieldDeclaration /**
     * The weblogic.StdoutSeverityLevel to use when running the JVM that
     * executes ejbc. Set to 16 to avoid the warnings about EJB Home and
     * Remotes being in the classpath
     */ Modifier private ReferenceType Integer VariableDeclarator jvmDebugLevel Literal null FieldDeclaration /** File utilities instance for copying jars */ Modifier private ReferenceType FileUtils VariableDeclarator fileUtils MethodInvocation FileUtils newFileUtils FieldDeclaration Modifier private ReferenceType File VariableDeclarator outputDir MethodDeclaration /**
     * Add a nested sysproperty element.
     */ Modifier public addSysproperty FormalParameter ReferenceType Environment ReferenceType Variable sysp StatementExpression MethodInvocation sysprops MemberReference sysp add MethodDeclaration /** Get the classpath to the weblogic classpaths  */ Modifier public ReferenceType Path createWLClasspath IfStatement BinaryOperation == MemberReference wlClasspath Literal null BlockStatement StatementExpression Assignment MemberReference wlClasspath ClassCreator ReferenceType Path MethodInvocation MethodInvocation getProject getTask = End ReturnStatement MethodInvocation wlClasspath createPath MethodDeclaration /**
     * If set ejbc will use this directory as the output
     * destination rather than a jar file. This allows for the
     * generation of &quot;exploded&quot; jars.
     */ Modifier public setOutputDir FormalParameter ReferenceType File outputDir StatementExpression Assignment This MemberReference outputDir MemberReference outputDir = MethodDeclaration /**
     * Optional classpath to WL6.0.
     * Weblogic 6.0 will give a warning if the home and remote interfaces
     * of a bean are on the system classpath used to run weblogic.ejbc.
     * In that case, the standard weblogic classes should be set with
     * this attribute (or equivalent nested element) and the
     * home and remote interfaces located with the standard classpath
     * attribute
     */ Modifier public setWLClasspath FormalParameter ReferenceType Path wlClasspath StatementExpression Assignment This MemberReference wlClasspath MemberReference wlClasspath = MethodDeclaration /**
     * The compiler (switch <code>-compiler</code>) to use; optional.
     * This allows for the selection of a different compiler
     * to be used for the compilation of the generated Java
     * files. This could be set, for example, to Jikes to
     * compile with the Jikes compiler. If this is not set
     * and the <code>build.compiler</code> property is set
     * to jikes, the Jikes compiler will be used. If this
     * is not desired, the value &quot;<code>default</code>&quot;
     * may be given to use the default compiler
     */ Modifier public setCompiler FormalParameter ReferenceType String compiler StatementExpression Assignment This MemberReference compiler MemberReference compiler = MethodDeclaration /**
     * Set the rebuild flag to false to only update changes in the jar rather
     * than rerunning ejbc; optional, default true.
     * This flag controls whether weblogic.ejbc is always
     * invoked to build the jar file. In certain circumstances,
     * such as when only a bean class has been changed, the jar
     * can be generated by merely replacing the changed classes
     * and not rerunning ejbc. Setting this to false will reduce
     * the time to run ejbjar.
     */ Modifier public setRebuild FormalParameter BasicType boolean rebuild StatementExpression Assignment This MemberReference alwaysRebuild MemberReference rebuild = MethodDeclaration /**
     * Sets the weblogic.StdoutSeverityLevel to use when running the JVM that
     * executes ejbc; optional. Set to 16 to avoid the warnings about EJB Home and
     * Remotes being in the classpath
     */ Modifier public setJvmDebugLevel FormalParameter ReferenceType Integer jvmDebugLevel StatementExpression Assignment This MemberReference jvmDebugLevel MemberReference jvmDebugLevel = MethodDeclaration Modifier public ReferenceType Integer getJvmDebugLevel ReturnStatement MemberReference jvmDebugLevel MethodDeclaration /**
     * Setter used to store the suffix for the generated weblogic jar file.
     *
     * @param inString the string to use as the suffix.
     */ Modifier public setSuffix FormalParameter ReferenceType String inString StatementExpression Assignment This MemberReference jarSuffix MemberReference inString = MethodDeclaration /**
     * controls whether the generic file used as input to
     * ejbc is retained; defaults to false
     *
     * @param inValue true for keep generic
     */ Modifier public setKeepgeneric FormalParameter BasicType boolean inValue StatementExpression Assignment This MemberReference keepGeneric MemberReference inValue = MethodDeclaration /**
     * Controls whether weblogic will keep the generated Java
     * files used to build the class files added to the
     * jar. This can be useful when debugging; default is false.
     *
     * @param inValue either 'true' or 'false'
     */ Modifier public setKeepgenerated FormalParameter ReferenceType String inValue StatementExpression Assignment This MemberReference keepgenerated MethodInvocation Boolean MethodInvocation booleanValue MemberReference inValue valueOf = MethodDeclaration /**
     * Any optional extra arguments pass to the weblogic.ejbc
     * tool.
     */ Modifier public setArgs FormalParameter ReferenceType String args StatementExpression Assignment This MemberReference additionalArgs MemberReference args = MethodDeclaration /**
     * Set any additional arguments to pass to the weblogic JVM; optional.
     * @param args the arguments to be passed to the JVM
     */ Modifier public setJvmargs FormalParameter ReferenceType String args StatementExpression Assignment This MemberReference additionalJvmArgs MemberReference args = MethodDeclaration /**
     * Set the classname of the ejbc compiler;  optional
     * Normally ejbjar determines
     * the appropriate class based on the DTD used for the EJB. The EJB 2.0 compiler
     * featured in weblogic 6 has, however, been deprecated in version 7. When
     * using with version 7 this attribute should be set to
     * &quot;weblogic.ejbc&quot; to avoid the deprecation warning.
     */ Modifier public setEjbcClass FormalParameter ReferenceType String ejbcClass StatementExpression Assignment This MemberReference ejbcClass MemberReference ejbcClass = MethodDeclaration /** Get the ejbc compiler class  */ Modifier public ReferenceType String getEjbcClass ReturnStatement MemberReference ejbcClass MethodDeclaration /**
     * <b>Deprecated</b>. Defines the location of the ejb-jar DTD in
     *  the weblogic class hierarchy. Should not be needed, and the
     * nested &lt;dtd&gt; element is recommended when it is.
     *
     * @param inString the string to use as the DTD location.
     */ Modifier public setWeblogicdtd FormalParameter ReferenceType String inString StatementExpression MethodInvocation MemberReference inString setEJBdtd MethodDeclaration /**
     * <b>Deprecated</b>. Defines the location of weblogic DTD in
     *  the weblogic class hierarchy. Should not be needed, and the
     * nested &lt;dtd&gt; element is recommended when it is.
     *
     * @param inString the string to use as the DTD location.
     */ Modifier public setWLdtd FormalParameter ReferenceType String inString StatementExpression Assignment This MemberReference weblogicDTD MemberReference inString = MethodDeclaration /**
     * <b>Deprecated</b>. Defines the location of Sun's EJB DTD in
     *  the weblogic class hierarchy. Should not be needed, and the
     * nested &lt;dtd&gt; element is recommended when it is.
     *
     * @param inString the string to use as the DTD location.
     */ Modifier public setEJBdtd FormalParameter ReferenceType String inString StatementExpression Assignment This MemberReference ejb11DTD MemberReference inString = MethodDeclaration /**
     * Set the value of the oldCMP scheme. This is an antonym for newCMP
     * @ant.attribute ignore=""true'
     */ Modifier public setOldCMP FormalParameter BasicType boolean oldCMP StatementExpression Assignment This MemberReference newCMP MemberReference ! oldCMP = MethodDeclaration /**
     * If this is set to true, the new method for locating
     * CMP descriptors will be used; optional, default false.
     * <P>
     * The old CMP scheme locates the
     * weblogic CMP descriptor based on the naming convention where the
     * weblogic CMP file is expected to be named with the bean name as the
     * prefix. Under this scheme the name of the CMP descriptor does not match
     * the name actually used in the main weblogic EJB descriptor. Also,
     * descriptors which contain multiple CMP references could not be used.
     */ Modifier public setNewCMP FormalParameter BasicType boolean newCMP StatementExpression Assignment This MemberReference newCMP MemberReference newCMP = MethodDeclaration /**
     * Do not EJBC the jar after it has been put together;
     * optional, default false
     */ Modifier public setNoEJBC FormalParameter BasicType boolean noEJBC StatementExpression Assignment This MemberReference noEJBC MemberReference noEJBC = MethodDeclaration Modifier protected registerKnownDTDs FormalParameter ReferenceType DescriptorHandler handler StatementExpression MethodInvocation handler MemberReference PUBLICID_EJB11 MemberReference DEFAULT_WL51_EJB11_DTD_LOCATION registerDTD StatementExpression MethodInvocation handler MemberReference PUBLICID_EJB11 MemberReference DEFAULT_WL60_EJB11_DTD_LOCATION registerDTD StatementExpression MethodInvocation handler MemberReference PUBLICID_EJB11 MemberReference ejb11DTD registerDTD StatementExpression MethodInvocation handler MemberReference PUBLICID_EJB20 MemberReference DEFAULT_WL60_EJB20_DTD_LOCATION registerDTD MethodDeclaration Modifier protected ReferenceType DescriptorHandler getWeblogicDescriptorHandler FormalParameter Modifier final ReferenceType File srcDir LocalVariableDeclaration ReferenceType DescriptorHandler VariableDeclarator handler ClassCreator ReferenceType DescriptorHandler MethodInvocation getTask MemberReference srcDir MethodDeclaration Modifier protected processElement IfStatement MethodInvocation currentElement Literal ""type-storage"" equals BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator fileNameWithMETA MemberReference currentText LocalVariableDeclaration ReferenceType String VariableDeclarator fileName MethodInvocation fileNameWithMETA MethodInvocation META_DIR length MethodInvocation fileNameWithMETA length substring LocalVariableDeclaration ReferenceType File VariableDeclarator descriptorFile ClassCreator ReferenceType File MemberReference srcDir MemberReference fileName StatementExpression MethodInvocation ejbFiles MemberReference fileNameWithMETA MemberReference descriptorFile put End StatementExpression MethodInvocation handler MemberReference PUBLICID_WEBLOGIC_EJB510 MemberReference DEFAULT_WL51_DTD_LOCATION registerDTD StatementExpression MethodInvocation handler MemberReference PUBLICID_WEBLOGIC_EJB510 MemberReference DEFAULT_WL60_51_DTD_LOCATION registerDTD StatementExpression MethodInvocation handler MemberReference PUBLICID_WEBLOGIC_EJB600 MemberReference DEFAULT_WL60_DTD_LOCATION registerDTD StatementExpression MethodInvocation handler MemberReference PUBLICID_WEBLOGIC_EJB700 MemberReference DEFAULT_WL70_DTD_LOCATION registerDTD StatementExpression MethodInvocation handler MemberReference PUBLICID_WEBLOGIC_EJB510 MemberReference weblogicDTD registerDTD StatementExpression MethodInvocation handler MemberReference PUBLICID_WEBLOGIC_EJB600 MemberReference weblogicDTD registerDTD ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation MemberReference dtdLocations MethodInvocation iterator getConfig MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType EjbJar ReferenceType DTDLocation VariableDeclarator dtdLocation Cast ReferenceType EjbJar ReferenceType DTDLocation MethodInvocation i next StatementExpression MethodInvocation handler MethodInvocation dtdLocation getPublicId MethodInvocation dtdLocation getLocation registerDTD End ReturnStatement MemberReference handler MethodDeclaration /**
     * Add any vendor specific files which should be included in the EJB Jar.
     */ Modifier protected addVendorFiles FormalParameter ReferenceType Hashtable ejbFiles FormalParameter ReferenceType String ddPrefix LocalVariableDeclaration ReferenceType File VariableDeclarator weblogicDD ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig BinaryOperation + MemberReference ddPrefix MemberReference WL_DD IfStatement MethodInvocation weblogicDD exists BlockStatement StatementExpression MethodInvocation ejbFiles BinaryOperation + MemberReference META_DIR MemberReference WL_DD MemberReference weblogicDD put BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Unable to locate weblogic deployment descriptor. "" Literal ""It was expected to be in "" MethodInvocation weblogicDD getPath MemberReference Project MSG_WARN log ReturnStatement End IfStatement MemberReference ! newCMP BlockStatement StatementExpression MethodInvocation Literal ""The old method for locating CMP files has been DEPRECATED."" MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Please adjust your weblogic descriptor and set "" Literal ""newCMP=\""true\"" to use the new CMP descriptor "" Literal ""inclusion mechanism. "" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType File VariableDeclarator weblogicCMPDD ClassCreator ReferenceType File MethodInvocation MemberReference descriptorDir getConfig BinaryOperation + MemberReference ddPrefix MemberReference WL_CMP_DD IfStatement MethodInvocation weblogicCMPDD exists BlockStatement StatementExpression MethodInvocation ejbFiles BinaryOperation + MemberReference META_DIR MemberReference WL_CMP_DD MemberReference weblogicCMPDD put End BlockStatement TryStatement LocalVariableDeclaration ReferenceType File VariableDeclarator ejbDescriptor Cast ReferenceType File MethodInvocation ejbFiles BinaryOperation + MemberReference META_DIR MemberReference EJB_DD get LocalVariableDeclaration ReferenceType SAXParserFactory VariableDeclarator saxParserFactory MethodInvocation SAXParserFactory newInstance StatementExpression MethodInvocation saxParserFactory Literal true setValidating LocalVariableDeclaration ReferenceType SAXParser VariableDeclarator saxParser MethodInvocation saxParserFactory newSAXParser LocalVariableDeclaration ReferenceType DescriptorHandler VariableDeclarator handler MethodInvocation MethodInvocation ejbDescriptor getParentFile getWeblogicDescriptorHandler StatementExpression MethodInvocation saxParser ClassCreator ReferenceType InputSource ClassCreator ReferenceType FileInputStream MemberReference weblogicDD MemberReference handler parse LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator ht MethodInvocation handler getFiles LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation ht keys WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator key Cast ReferenceType String MethodInvocation e nextElement StatementExpression MethodInvocation ejbFiles MemberReference key MethodInvocation ht MemberReference key get put End CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Exception while adding Vendor specific files: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e End MethodDeclaration /**
     * Get the vendor specific name of the Jar that will be output. The
     * modification date of this jar will be checked against the dependent
     * bean classes.
     */ ReferenceType File getVendorOutputJarFile FormalParameter ReferenceType String baseName ReturnStatement ClassCreator ReferenceType File MethodInvocation getDestDir BinaryOperation + MemberReference baseName MemberReference jarSuffix MethodDeclaration /**
     * Helper method invoked by execute() for each WebLogic jar to be built.
     * Encapsulates the logic of constructing a java task for calling
     * weblogic.ejbc and executing it.
     *
     * @param sourceJar java.io.File representing the source (EJB1.1) jarfile.
     * @param destJar java.io.File representing the destination, WebLogic
     *      jarfile.
     */ Modifier private buildWeblogicJar FormalParameter ReferenceType File sourceJar FormalParameter ReferenceType File destJar FormalParameter ReferenceType String publicId LocalVariableDeclaration ReferenceType Java VariableDeclarator javaTask Literal null IfStatement MemberReference noEJBC BlockStatement TryStatement StatementExpression MethodInvocation fileUtils MemberReference sourceJar MemberReference destJar copyFile IfStatement MemberReference ! keepgenerated BlockStatement StatementExpression MethodInvocation sourceJar delete End ReturnStatement CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unable to write EJB jar"" MemberReference e End LocalVariableDeclaration ReferenceType String VariableDeclarator ejbcClassName MemberReference ejbcClass TryStatement StatementExpression Assignment MemberReference javaTask Cast ReferenceType Java MethodInvocation MethodInvocation getProject MethodInvocation Literal ""java"" createTask getTask = StatementExpression MethodInvocation javaTask Literal ""ejbc"" setTaskName StatementExpression MethodInvocation javaTask MethodInvocation MemberReference additionalJvmArgs setLine createJvmarg IfStatement MethodInvocation ! sysprops isEmpty BlockStatement ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator en MethodInvocation sysprops elements MethodInvocation en hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Environment ReferenceType Variable VariableDeclarator entry Cast ReferenceType Environment ReferenceType Variable MethodInvocation en nextElement StatementExpression MethodInvocation javaTask MemberReference entry addSysproperty End End IfStatement BinaryOperation != MethodInvocation getJvmDebugLevel Literal null BlockStatement StatementExpression MethodInvocation javaTask MethodInvocation BinaryOperation + Literal "" -Dweblogic.StdoutSeverityLevel="" MemberReference jvmDebugLevel setLine createJvmarg End IfStatement BinaryOperation == MemberReference ejbcClassName Literal null BlockStatement IfStatement MethodInvocation PUBLICID_EJB11 MemberReference publicId equals BlockStatement StatementExpression Assignment MemberReference ejbcClassName MemberReference COMPILER_EJB11 = IfStatement MethodInvocation PUBLICID_EJB20 MemberReference publicId equals BlockStatement StatementExpression Assignment MemberReference ejbcClassName MemberReference COMPILER_EJB20 = BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Unrecognized publicId "" MemberReference publicId Literal "" - using EJB 1.1 compiler"" MemberReference Project MSG_WARN log StatementExpression Assignment MemberReference ejbcClassName MemberReference COMPILER_EJB11 = End End End StatementExpression MethodInvocation javaTask MemberReference ejbcClassName setClassname StatementExpression MethodInvocation javaTask MethodInvocation MemberReference additionalArgs setLine createArg IfStatement MemberReference keepgenerated BlockStatement StatementExpression MethodInvocation javaTask MethodInvocation Literal ""-keepgenerated"" setValue createArg End IfStatement BinaryOperation == MemberReference compiler Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator buildCompiler MethodInvocation MethodInvocation getProject MethodInvocation Literal ""build.compiler"" getProperty getTask IfStatement BinaryOperation && BinaryOperation != MemberReference buildCompiler Literal null MethodInvocation buildCompiler Literal ""jikes"" equals BlockStatement StatementExpression MethodInvocation javaTask MethodInvocation Literal ""-compiler"" setValue createArg StatementExpression MethodInvocation javaTask MethodInvocation Literal ""jikes"" setValue createArg End BlockStatement IfStatement MethodInvocation ! compiler MemberReference DEFAULT_COMPILER equals BlockStatement StatementExpression MethodInvocation javaTask MethodInvocation Literal ""-compiler"" setValue createArg StatementExpression MethodInvocation javaTask MethodInvocation MemberReference compiler setLine createArg End End LocalVariableDeclaration ReferenceType Path VariableDeclarator combinedClasspath MethodInvocation getCombinedClasspath IfStatement BinaryOperation && BinaryOperation && BinaryOperation != MemberReference wlClasspath Literal null BinaryOperation != MemberReference combinedClasspath Literal null BinaryOperation > MethodInvocation combinedClasspath MethodInvocation trim MethodInvocation length toString Literal 0 BlockStatement StatementExpression MethodInvocation javaTask MethodInvocation Literal ""-classpath"" setValue createArg StatementExpression MethodInvocation javaTask MethodInvocation MemberReference combinedClasspath setPath createArg End StatementExpression MethodInvocation javaTask MethodInvocation MethodInvocation sourceJar getPath setValue createArg IfStatement BinaryOperation == MemberReference outputDir Literal null BlockStatement StatementExpression MethodInvocation javaTask MethodInvocation MethodInvocation destJar getPath setValue createArg BlockStatement StatementExpression MethodInvocation javaTask MethodInvocation MethodInvocation outputDir getPath setValue createArg End LocalVariableDeclaration ReferenceType Path VariableDeclarator classpath MemberReference wlClasspath IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath MethodInvocation getCombinedClasspath = End StatementExpression MethodInvocation javaTask Literal true setFork IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement StatementExpression MethodInvocation javaTask MemberReference classpath setClasspath End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Calling "" MemberReference ejbcClassName Literal "" for "" MethodInvocation sourceJar toString MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation != MethodInvocation javaTask executeJava Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Ejbc reported an error"" End CatchClause CatchClauseParameter Exception e LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Exception while calling "" MemberReference ejbcClassName Literal "". Details: "" MethodInvocation e toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference e MethodDeclaration /**
     * Method used to encapsulate the writing of the JAR file. Iterates over
     * the filenames/java.io.Files in the Hashtable stored on the instance
     * variable ejbFiles.
     */ Modifier protected writeJar FormalParameter ReferenceType String baseName FormalParameter ReferenceType File jarFile FormalParameter ReferenceType Hashtable files FormalParameter ReferenceType String publicId BuildException LocalVariableDeclaration ReferenceType File VariableDeclarator genericJarFile SuperMethodInvocation MemberReference baseName getVendorOutputJarFile StatementExpression SuperMethodInvocation MemberReference baseName MemberReference genericJarFile MemberReference files MemberReference publicId writeJar IfStatement BinaryOperation || MemberReference alwaysRebuild MethodInvocation MemberReference genericJarFile MemberReference jarFile isRebuildRequired BlockStatement StatementExpression MethodInvocation MemberReference genericJarFile MemberReference jarFile MemberReference publicId buildWeblogicJar End IfStatement MemberReference ! keepGeneric BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""deleting generic jar "" MethodInvocation genericJarFile toString MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation genericJarFile delete End MethodDeclaration /**
     * Called to validate that the tool parameters have been configured.
     */ Modifier public validateConfigured BuildException StatementExpression SuperMethodInvocation validateConfigured MethodDeclaration /**
     * Helper method to check to see if a weblogic EBJ1.1 jar needs to be
     * rebuilt using ejbc. Called from writeJar it sees if the ""Bean"" classes
     * are the only thing that needs to be updated and either updates the Jar
     * with the Bean classfile or returns true, saying that the whole weblogic
     * jar needs to be regened with ejbc. This allows faster build times for
     * working developers. <p>
     *
     * The way weblogic ejbc works is it creates wrappers for the publicly
     * defined methods as they are exposed in the remote interface. If the
     * actual bean changes without changing the the method signatures then
     * only the bean classfile needs to be updated and the rest of the
     * weblogic jar file can remain the same. If the Interfaces, ie. the
     * method signatures change or if the xml deployment descriptors changed,
     * the whole jar needs to be rebuilt with ejbc. This is not strictly true
     * for the xml files. If the JNDI name changes then the jar doesnt have to
     * be rebuild, but if the resources references change then it does. At
     * this point the weblogic jar gets rebuilt if the xml files change at
     * all.
     *
     * @param genericJarFile java.io.File The generic jar file.
     * @param weblogicJarFile java.io.File The weblogic jar file to check to
     *      see if it needs to be rebuilt.
     */ Modifier protected BasicType boolean isRebuildRequired FormalParameter ReferenceType File genericJarFile FormalParameter ReferenceType File weblogicJarFile LocalVariableDeclaration BasicType boolean VariableDeclarator rebuild Literal false LocalVariableDeclaration ReferenceType JarFile VariableDeclarator genericJar Literal null LocalVariableDeclaration ReferenceType JarFile VariableDeclarator wlJar Literal null LocalVariableDeclaration ReferenceType File VariableDeclarator newWLJarFile Literal null LocalVariableDeclaration ReferenceType JarOutputStream VariableDeclarator newJarStream Literal null TryStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Checking if weblogic Jar needs to be rebuilt for jar "" MethodInvocation weblogicJarFile getName MemberReference Project MSG_VERBOSE log IfStatement BinaryOperation && BinaryOperation && BinaryOperation && MethodInvocation genericJarFile exists MethodInvocation genericJarFile isFile MethodInvocation weblogicJarFile exists MethodInvocation weblogicJarFile isFile BlockStatement StatementExpression Assignment MemberReference genericJar ClassCreator ReferenceType JarFile MemberReference genericJarFile = StatementExpression Assignment MemberReference wlJar ClassCreator ReferenceType JarFile MemberReference weblogicJarFile = LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator genericEntries ClassCreator ReferenceType Hashtable LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator wlEntries ClassCreator ReferenceType Hashtable LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator replaceEntries ClassCreator ReferenceType Hashtable ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation genericJar entries MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType JarEntry VariableDeclarator je Cast ReferenceType JarEntry MethodInvocation e nextElement StatementExpression MethodInvocation genericEntries MethodInvocation je MethodInvocation Literal '\\' Literal '/' replace getName MemberReference je put End ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation wlJar entries MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType JarEntry VariableDeclarator je Cast ReferenceType JarEntry MethodInvocation e nextElement StatementExpression MethodInvocation wlEntries MethodInvocation je getName MemberReference je put End LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator genericLoader MethodInvocation MemberReference genericJarFile getClassLoaderFromJar ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation genericEntries keys MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator filepath Cast ReferenceType String MethodInvocation e nextElement IfStatement MethodInvocation wlEntries MemberReference filepath containsKey BlockStatement LocalVariableDeclaration ReferenceType JarEntry VariableDeclarator genericEntry Cast ReferenceType JarEntry MethodInvocation genericEntries MemberReference filepath get LocalVariableDeclaration ReferenceType JarEntry VariableDeclarator wlEntry Cast ReferenceType JarEntry MethodInvocation wlEntries MemberReference filepath get IfStatement BinaryOperation || BinaryOperation != MethodInvocation genericEntry getCrc MethodInvocation wlEntry getCrc BinaryOperation != MethodInvocation genericEntry getSize MethodInvocation wlEntry getSize BlockStatement IfStatement MethodInvocation genericEntry MethodInvocation Literal "".class"" endsWith getName BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator classname MethodInvocation genericEntry MethodInvocation MemberReference File separatorChar Literal '.' replace getName StatementExpression Assignment MemberReference classname MethodInvocation classname Literal 0 MethodInvocation classname Literal "".class"" lastIndexOf substring = LocalVariableDeclaration ReferenceType Class VariableDeclarator genclass MethodInvocation genericLoader MemberReference classname loadClass IfStatement MethodInvocation genclass isInterface BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Interface "" MethodInvocation genclass getName Literal "" has changed"" MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference rebuild Literal true = BreakStatement BlockStatement StatementExpression MethodInvocation replaceEntries MemberReference filepath MemberReference genericEntry put End BlockStatement IfStatement MethodInvocation ! genericEntry MethodInvocation Literal ""META-INF/MANIFEST.MF"" equals getName BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Non class file "" MethodInvocation genericEntry getName Literal "" has changed"" MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference rebuild Literal true = BreakStatement End End End BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""File "" MemberReference filepath Literal "" not present in weblogic jar"" MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference rebuild Literal true = BreakStatement End End IfStatement MemberReference ! rebuild BlockStatement StatementExpression MethodInvocation Literal ""No rebuild needed - updating jar"" MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference newWLJarFile ClassCreator ReferenceType File BinaryOperation + MethodInvocation weblogicJarFile getAbsolutePath Literal "".temp"" = IfStatement MethodInvocation newWLJarFile exists BlockStatement StatementExpression MethodInvocation newWLJarFile delete End StatementExpression Assignment MemberReference newJarStream ClassCreator ReferenceType JarOutputStream ClassCreator ReferenceType FileOutputStream MemberReference newWLJarFile = StatementExpression MethodInvocation newJarStream Literal 0 setLevel ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation wlEntries elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte Literal 1024 LocalVariableDeclaration BasicType int VariableDeclarator bytesRead LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is LocalVariableDeclaration ReferenceType JarEntry VariableDeclarator je Cast ReferenceType JarEntry MethodInvocation e nextElement IfStatement BinaryOperation || BinaryOperation == MethodInvocation je getCompressedSize Literal - 1 BinaryOperation == MethodInvocation je getCompressedSize MethodInvocation je getSize BlockStatement StatementExpression MethodInvocation newJarStream Literal 0 setLevel BlockStatement StatementExpression MethodInvocation newJarStream Literal 9 setLevel End IfStatement MethodInvocation replaceEntries MethodInvocation je getName containsKey BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Updating Bean class from generic Jar "" MethodInvocation je getName MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference je Cast ReferenceType JarEntry MethodInvocation replaceEntries MethodInvocation je getName get = StatementExpression Assignment MemberReference is MethodInvocation genericJar MemberReference je getInputStream = BlockStatement StatementExpression Assignment MemberReference is MethodInvocation wlJar MemberReference je getInputStream = End StatementExpression MethodInvocation newJarStream ClassCreator ReferenceType JarEntry MethodInvocation je getName putNextEntry WhileStatement BinaryOperation != Assignment MemberReference bytesRead MethodInvocation is MemberReference buffer read = Literal - 1 BlockStatement StatementExpression MethodInvocation newJarStream MemberReference buffer Literal 0 MemberReference bytesRead write End StatementExpression MethodInvocation is close End BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Weblogic Jar rebuild needed due to changed "" Literal ""interface or XML"" MemberReference Project MSG_VERBOSE log End IfStatement BinaryOperation instanceof MemberReference genericLoader ReferenceType AntClassLoader BlockStatement LocalVariableDeclaration ReferenceType AntClassLoader VariableDeclarator loader Cast ReferenceType AntClassLoader MemberReference genericLoader StatementExpression MethodInvocation loader cleanup End BlockStatement StatementExpression Assignment MemberReference rebuild Literal true = End CatchClause CatchClauseParameter ClassNotFoundException cnfe LocalVariableDeclaration ReferenceType String VariableDeclarator cnfmsg BinaryOperation + BinaryOperation + Literal ""ClassNotFoundException while processing ejb-jar file"" Literal "". Details: "" MethodInvocation cnfe getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference cnfmsg MemberReference cnfe CatchClause CatchClauseParameter IOException ioe LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + BinaryOperation + Literal ""IOException while processing ejb-jar file "" Literal "". Details: "" MethodInvocation ioe getMessage ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MemberReference ioe IfStatement BinaryOperation != MemberReference genericJar Literal null BlockStatement TryStatement StatementExpression MethodInvocation genericJar close CatchClause CatchClauseParameter IOException closeException End IfStatement BinaryOperation != MemberReference wlJar Literal null BlockStatement TryStatement StatementExpression MethodInvocation wlJar close CatchClause CatchClauseParameter IOException closeException End IfStatement BinaryOperation != MemberReference newJarStream Literal null BlockStatement TryStatement StatementExpression MethodInvocation newJarStream close CatchClause CatchClauseParameter IOException closeException TryStatement StatementExpression MethodInvocation fileUtils MemberReference newWLJarFile MemberReference weblogicJarFile rename CatchClause CatchClauseParameter IOException renameException StatementExpression MethodInvocation MethodInvocation renameException getMessage MemberReference Project MSG_WARN log StatementExpression Assignment MemberReference rebuild Literal true = End ReturnStatement MemberReference rebuild MethodDeclaration /**
     * Helper method invoked by isRebuildRequired to get a ClassLoader for a
     * Jar File passed to it.
     *
     * @param classjar java.io.File representing jar file to get classes from.
     */ Modifier protected ReferenceType ClassLoader getClassLoaderFromJar FormalParameter ReferenceType File classjar IOException LocalVariableDeclaration ReferenceType Path VariableDeclarator lookupPath ClassCreator ReferenceType Path MethodInvocation MethodInvocation getProject getTask StatementExpression MethodInvocation lookupPath MemberReference classjar setLocation LocalVariableDeclaration ReferenceType Path VariableDeclarator classpath MethodInvocation getCombinedClasspath IfStatement BinaryOperation != MemberReference classpath Literal null BlockStatement StatementExpression MethodInvocation lookupPath MemberReference classpath append End ReturnStatement MethodInvocation MethodInvocation getProject MethodInvocation MemberReference lookupPath createClassLoader getTask ReferenceType GenericDeploymentTool",0
100,100,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.depend.bcel Import java.io.File Import java.io.IOException Import java.util.Enumeration Import java.util.Hashtable Import java.util.Vector Import org.apache.bcel.classfile.ClassParser Import org.apache.bcel.classfile.JavaClass Import org.apache.tools.ant.util.depend.AbstractAnalyzer ClassDeclaration Modifier public /**
 * A dependency analyzer which returns superclass and superinterface
 * dependencies.
 *
 */ AncestorAnalyzer ConstructorDeclaration Modifier public /**
     * Default constructor
     *
     * Causes the BCEL classes to load to ensure BCEL dependencies can
     * be satisfied
     */ AncestorAnalyzer TryStatement StatementExpression ClassCreator ReferenceType ClassParser Literal ""force"" CatchClause CatchClauseParameter IOException e MethodDeclaration /**
     * Determine the dependencies of the configured root classes.
     *
     * @param files a vector to be populated with the files which contain
     *      the dependency classes
     * @param classes a vector to be populated with the names of the
     *      depencency classes.
     */ Modifier protected determineDependencies FormalParameter ReferenceType Vector files FormalParameter ReferenceType Vector classes LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator dependencies ClassCreator ReferenceType Hashtable LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator containers ClassCreator ReferenceType Hashtable LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator toAnalyze ClassCreator ReferenceType Hashtable LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator nextAnalyze ClassCreator ReferenceType Hashtable ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation getRootClasses MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator classname Cast ReferenceType String MethodInvocation e nextElement StatementExpression MethodInvocation toAnalyze MemberReference classname MemberReference classname put End LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator maxCount TernaryExpression MethodInvocation isClosureRequired MemberReference MAX_LOOPS Literal 2 WhileStatement BinaryOperation && BinaryOperation != MethodInvocation toAnalyze size Literal 0 BinaryOperation < MemberReference ++ count MemberReference maxCount BlockStatement StatementExpression MethodInvocation nextAnalyze clear ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation toAnalyze keys MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator classname Cast ReferenceType String MethodInvocation e nextElement StatementExpression MethodInvocation dependencies MemberReference classname MemberReference classname put TryStatement LocalVariableDeclaration ReferenceType File VariableDeclarator container MethodInvocation MemberReference classname getClassContainer IfStatement BinaryOperation == MemberReference container Literal null BlockStatement ContinueStatement End StatementExpression MethodInvocation containers MemberReference container MemberReference container put LocalVariableDeclaration ReferenceType ClassParser VariableDeclarator parser Literal null IfStatement MethodInvocation container MethodInvocation Literal "".class"" endsWith getName BlockStatement StatementExpression Assignment MemberReference parser ClassCreator ReferenceType ClassParser MethodInvocation container getPath = BlockStatement StatementExpression Assignment MemberReference parser ClassCreator ReferenceType ClassParser MethodInvocation container getPath BinaryOperation + MethodInvocation classname Literal '.' Literal '/' replace Literal "".class"" = End LocalVariableDeclaration ReferenceType JavaClass VariableDeclarator javaClass MethodInvocation parser parse LocalVariableDeclaration ReferenceType String VariableDeclarator interfaces MethodInvocation javaClass getInterfaceNames ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference interfaces length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator interfaceName MemberReference ArraySelector MemberReference i interfaces IfStatement MethodInvocation ! dependencies MemberReference interfaceName containsKey BlockStatement StatementExpression MethodInvocation nextAnalyze MemberReference interfaceName MemberReference interfaceName put End End IfStatement MethodInvocation javaClass isClass BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator superClass MethodInvocation javaClass getSuperclassName IfStatement MethodInvocation ! dependencies MemberReference superClass containsKey BlockStatement StatementExpression MethodInvocation nextAnalyze MemberReference superClass MemberReference superClass put End End CatchClause CatchClauseParameter IOException ioe End LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator temp MemberReference toAnalyze StatementExpression Assignment MemberReference toAnalyze MemberReference nextAnalyze = StatementExpression Assignment MemberReference nextAnalyze MemberReference temp = End StatementExpression MethodInvocation files removeAllElements ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation containers keys MethodInvocation e hasMoreElements BlockStatement StatementExpression MethodInvocation files Cast ReferenceType File MethodInvocation e nextElement addElement End StatementExpression MethodInvocation classes removeAllElements ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation dependencies keys MethodInvocation e hasMoreElements BlockStatement StatementExpression MethodInvocation classes Cast ReferenceType String MethodInvocation e nextElement addElement End MethodDeclaration /**
     * Indicate if this analyzer can determine dependent files.
     *
     * @return true if the analyzer provides dependency file information.
     */ Modifier protected BasicType boolean supportsFileDependencies ReturnStatement Literal true ReferenceType AbstractAnalyzer",0
427,427,,0
133,133,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.metamata Import java.io.File Import java.io.FileWriter Import java.io.IOException Import java.io.PrintWriter Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.taskdefs.ExecuteStreamHandler Import org.apache.tools.ant.taskdefs.LogStreamHandler Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.util.JavaEnvUtils ClassDeclaration Modifier public /**
 * Simple Metamata MParse task.
 * Based on the original written by
 * <a href=""mailto:thomas.haas@softwired-inc.com"">Thomas Haas</a>.
 *
 * This version was written for Metamata 2.0 available at
 * <a href=""http://www.metamata.com"">http://www.metamata.com</a>
 *
 * @todo make a subclass of AbstractMetaMataTask
 */ MParse FieldDeclaration Modifier private ReferenceType File VariableDeclarator target Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator verbose Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator debugparser Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator debugscanner Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator cleanup Literal false MethodDeclaration /** The .jj file to process; required. */ Modifier public setTarget FormalParameter ReferenceType File target StatementExpression Assignment This MemberReference target MemberReference target = MethodDeclaration /** set verbose mode */ Modifier public setVerbose FormalParameter BasicType boolean flag StatementExpression Assignment MemberReference verbose MemberReference flag = MethodDeclaration /** set scanner debug mode; optional, default false */ Modifier public setDebugscanner FormalParameter BasicType boolean flag StatementExpression Assignment MemberReference debugscanner MemberReference flag = MethodDeclaration /** set parser debug mode; optional, default false */ Modifier public setDebugparser FormalParameter BasicType boolean flag StatementExpression Assignment MemberReference debugparser MemberReference flag = MethodDeclaration /** Remove the intermediate Sun JavaCC file
     * ; optional, default false.
     */ Modifier public setCleanup FormalParameter BasicType boolean value StatementExpression Assignment MemberReference cleanup MemberReference value = ConstructorDeclaration Modifier public MParse StatementExpression MethodInvocation cmdl MethodInvocation JavaEnvUtils Literal ""java"" getJreExecutable setVm StatementExpression MethodInvocation cmdl Literal ""com.metamata.jj.MParse"" setClassname MethodDeclaration /** execute the command line */ Modifier public execute BuildException TryStatement StatementExpression MethodInvocation setUp LocalVariableDeclaration ReferenceType ExecuteStreamHandler VariableDeclarator handler MethodInvocation createStreamHandler StatementExpression MethodInvocation MemberReference handler _execute StatementExpression MethodInvocation cleanUp MethodDeclaration /** return the default stream handler for this task */ Modifier protected ReferenceType ExecuteStreamHandler createStreamHandler ReturnStatement ClassCreator ReferenceType LogStreamHandler This MemberReference Project MSG_INFO MemberReference Project MSG_INFO MethodDeclaration /**
     * check the options and build the command line
     */ Modifier protected setUp BuildException StatementExpression MethodInvocation checkOptions LocalVariableDeclaration ReferenceType File VariableDeclarator jars MethodInvocation getMetamataLibs LocalVariableDeclaration Modifier final ReferenceType Path VariableDeclarator classPath MethodInvocation cmdl MethodInvocation getProject createClasspath ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jars length MemberReference ++ i BlockStatement StatementExpression MethodInvocation classPath MethodInvocation MemberReference ArraySelector MemberReference i jars setLocation createPathElement End LocalVariableDeclaration Modifier final ReferenceType Commandline ReferenceType Argument VariableDeclarator vmArgs MethodInvocation cmdl createVmArgument StatementExpression MethodInvocation vmArgs BinaryOperation + Literal ""-Dmetamata.home="" MethodInvocation metamataHome getAbsolutePath setValue LocalVariableDeclaration ReferenceType Vector VariableDeclarator opts MethodInvocation getOptions LocalVariableDeclaration ReferenceType String VariableDeclarator options ArrayCreator ReferenceType String MethodInvocation opts size StatementExpression MethodInvocation opts MemberReference options copyInto StatementExpression Assignment MemberReference optionsFile MethodInvocation createTmpFile = StatementExpression MethodInvocation MemberReference optionsFile MemberReference options generateOptionsFile LocalVariableDeclaration ReferenceType Commandline ReferenceType Argument VariableDeclarator args MethodInvocation cmdl createArgument StatementExpression MethodInvocation args BinaryOperation + Literal ""-arguments "" MethodInvocation optionsFile getAbsolutePath setLine MethodDeclaration /** execute the process with a specific handler */ Modifier protected _execute FormalParameter ReferenceType ExecuteStreamHandler handler BuildException LocalVariableDeclaration ReferenceType String VariableDeclarator pathname MethodInvocation target getAbsolutePath LocalVariableDeclaration BasicType int VariableDeclarator pos BinaryOperation - MethodInvocation pathname length Literal MethodInvocation length "".jj"" StatementExpression Assignment MemberReference pathname BinaryOperation + MethodInvocation pathname Literal 0 MemberReference pos substring Literal "".java"" = LocalVariableDeclaration ReferenceType File VariableDeclarator javaFile ClassCreator ReferenceType File MemberReference pathname IfStatement BinaryOperation && MethodInvocation javaFile exists BinaryOperation < MethodInvocation target lastModified MethodInvocation javaFile lastModified BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + BinaryOperation + Literal ""Target is already build - skipping ("" MemberReference target Literal "")"" log getProject ReturnStatement End LocalVariableDeclaration Modifier final ReferenceType Execute VariableDeclarator process ClassCreator ReferenceType Execute MemberReference handler StatementExpression MethodInvocation MethodInvocation cmdl describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation process MethodInvocation cmdl getCommandline setCommandline TryStatement IfStatement BinaryOperation != MethodInvocation process execute Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Metamata task failed."" End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""Failed to launch Metamata task: "" MemberReference e MethodDeclaration /** clean up all the mess that we did with temporary objects */ Modifier protected cleanUp IfStatement BinaryOperation != MemberReference optionsFile Literal null BlockStatement StatementExpression MethodInvocation optionsFile delete StatementExpression Assignment MemberReference optionsFile Literal null = End IfStatement MemberReference cleanup BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation target getName LocalVariableDeclaration BasicType int VariableDeclarator pos BinaryOperation - MethodInvocation name length Literal MethodInvocation length "".jj"" StatementExpression Assignment MemberReference name BinaryOperation + BinaryOperation + Literal ""__jj"" MethodInvocation name Literal 0 MemberReference pos substring Literal "".sunjj"" = LocalVariableDeclaration Modifier final ReferenceType File VariableDeclarator sunjj ClassCreator ReferenceType File MethodInvocation target getParent MemberReference name IfStatement MethodInvocation sunjj exists BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Removing stale file: "" MethodInvocation sunjj getName log getProject StatementExpression MethodInvocation sunjj delete End End MethodDeclaration /**
     * return an array of files containing the path to the needed
     * libraries to run metamata. The file are not checked for
     * existence. You should do this yourself if needed or simply let the
     * forked process do it for you.
     * @return array of jars/zips needed to run metamata.
     */ Modifier protected ReferenceType File getMetamataLibs LocalVariableDeclaration ReferenceType Vector VariableDeclarator files ClassCreator ReferenceType Vector StatementExpression MethodInvocation files ClassCreator ReferenceType File MemberReference metamataHome Literal ""lib/metamata.jar"" addElement StatementExpression MethodInvocation files ClassCreator ReferenceType File MemberReference metamataHome Literal ""bin/lib/JavaCC.zip"" addElement LocalVariableDeclaration ReferenceType File VariableDeclarator array ArrayCreator ReferenceType File MethodInvocation files size StatementExpression MethodInvocation files MemberReference array copyInto ReturnStatement MemberReference array MethodDeclaration /**
     * validate options set and resolve files and paths
     * @throws BuildException thrown if an option has an incorrect state.
     */ Modifier protected checkOptions BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference metamataHome Literal null MethodInvocation ! metamataHome exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""'metamatahome' must point to Metamata home directory."" End StatementExpression Assignment MemberReference metamataHome MethodInvocation MethodInvocation MethodInvocation metamataHome getPath resolveFile getProject = LocalVariableDeclaration ReferenceType File VariableDeclarator jars MethodInvocation getMetamataLibs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference jars length MemberReference ++ i BlockStatement IfStatement MemberReference ! ArraySelector MemberReference i MethodInvocation exists jars BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MemberReference ArraySelector MemberReference i jars Literal "" does not exist. Check your metamata installation."" End End IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MemberReference target Literal null MethodInvocation ! target isFile MethodInvocation ! target MethodInvocation Literal "".jj"" endsWith getName BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Invalid target: "" MemberReference target End StatementExpression Assignment MemberReference target MethodInvocation MethodInvocation MethodInvocation target getPath resolveFile getProject = MethodDeclaration /**
     * return all options of the command line as string elements
     * @return an array of options corresponding to the setted options.
     */ Modifier protected ReferenceType Vector getOptions LocalVariableDeclaration ReferenceType Vector VariableDeclarator options ClassCreator ReferenceType Vector IfStatement MemberReference verbose BlockStatement StatementExpression MethodInvocation options Literal ""-verbose"" addElement End IfStatement MemberReference debugscanner BlockStatement StatementExpression MethodInvocation options Literal ""-ds"" addElement End IfStatement MemberReference debugparser BlockStatement StatementExpression MethodInvocation options Literal ""-dp"" addElement End IfStatement BinaryOperation != MemberReference classPath Literal null BlockStatement StatementExpression MethodInvocation options Literal ""-classpath"" addElement StatementExpression MethodInvocation options MethodInvocation classPath toString addElement End IfStatement BinaryOperation != MemberReference sourcePath Literal null BlockStatement StatementExpression MethodInvocation options Literal ""-sourcepath"" addElement StatementExpression MethodInvocation options MethodInvocation sourcePath toString addElement End StatementExpression MethodInvocation options MethodInvocation target getAbsolutePath addElement ReturnStatement MemberReference options MethodDeclaration /**
     * write all options to a file with one option / line
     * @param tofile the file to write the options to.
     * @param options the array of options element to write to the file.
     * @throws BuildException thrown if there is a problem while writing
     * to the file.
     */ Modifier protected generateOptionsFile FormalParameter ReferenceType File tofile FormalParameter ReferenceType String options BuildException LocalVariableDeclaration ReferenceType FileWriter VariableDeclarator fw Literal null TryStatement StatementExpression Assignment MemberReference fw ClassCreator ReferenceType FileWriter MemberReference tofile = LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator pw ClassCreator ReferenceType PrintWriter MemberReference fw ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference options length MemberReference ++ i BlockStatement StatementExpression MethodInvocation pw MemberReference ArraySelector MemberReference i options println End StatementExpression MethodInvocation pw flush CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Error while writing options file "" MemberReference tofile MemberReference e IfStatement BinaryOperation != MemberReference fw Literal null BlockStatement TryStatement StatementExpression MethodInvocation fw close CatchClause CatchClauseParameter IOException ignored End ReferenceType AbstractMetamataTask",1
195,195,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.util.ArrayList Import java.util.List Import java.util.Map Import java.util.Locale Import java.util.HashMap Import java.util.Iterator Import org.apache.tools.ant.AntTypeDefinition Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.ComponentHelper Import org.apache.tools.ant.Project Import org.apache.tools.ant.ProjectHelper Import org.apache.tools.ant.RuntimeConfigurable Import org.apache.tools.ant.Task Import org.apache.tools.ant.TaskContainer Import org.apache.tools.ant.UnknownElement ClassDeclaration Modifier public /**
 * Describe class <code>MacroDef</code> here.
 *
 * @since Ant 1.6
 */ MacroDef FieldDeclaration Modifier private ReferenceType NestedSequential VariableDeclarator nestedSequential FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType List VariableDeclarator attributes ClassCreator ReferenceType ArrayList FieldDeclaration Modifier private ReferenceType Map VariableDeclarator elements ClassCreator ReferenceType HashMap FieldDeclaration Modifier private ReferenceType String VariableDeclarator textName Literal null FieldDeclaration Modifier private ReferenceType Text VariableDeclarator text Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator hasImplicitElement Literal false MethodDeclaration /**
     * Name of the definition
     * @param name the name of the definition
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * Add the text element.
     * @param text the nested text element to add
     * @since ant 1.6.1
     */ Modifier public addConfiguredText FormalParameter ReferenceType Text text IfStatement BinaryOperation != This MemberReference text Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one nested text element allowed"" End IfStatement BinaryOperation == MethodInvocation text getName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""the text nested element needed a \""name\"" attribute"" End ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator i MethodInvocation attributes iterator MethodInvocation i hasNext BlockStatement LocalVariableDeclaration ReferenceType Attribute VariableDeclarator attribute Cast ReferenceType Attribute MethodInvocation i next IfStatement MethodInvocation text MethodInvocation MethodInvocation attribute getName equals getName BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""the name \"""" MethodInvocation text getName Literal ""\"" is already used as an attribute"" End End StatementExpression Assignment This MemberReference text MemberReference text = StatementExpression Assignment This MemberReference textName MethodInvocation text getName = MethodDeclaration /**
     * @return the nested text element
     * @since ant 1.6.1
     */ Modifier public ReferenceType Text getText ReturnStatement MemberReference text MethodDeclaration /**
     * This is the sequential nested element of the macrodef.
     *
     * @return a sequential element to be configured.
     */ Modifier public ReferenceType NestedSequential createSequential IfStatement BinaryOperation != This MemberReference nestedSequential Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one sequential allowed"" End StatementExpression Assignment This MemberReference nestedSequential ClassCreator ReferenceType NestedSequential = ReturnStatement This MemberReference nestedSequential ClassDeclaration Modifier public static /**
     * The class corresponding to the sequential nested element.
     * This is a simple task container.
     */ NestedSequential FieldDeclaration Modifier private ReferenceType List VariableDeclarator nested ClassCreator ReferenceType ArrayList MethodDeclaration /**
         * Add a task or type to the container.
         *
         * @param task an unknown element.
         */ Modifier public addTask FormalParameter ReferenceType Task task StatementExpression MethodInvocation nested MemberReference task add MethodDeclaration /**
         * @return the list of unknown elements
         */ Modifier public ReferenceType List getNested ReturnStatement MemberReference nested MethodDeclaration /**
         * A compare function to compare this with another
         * NestedSequential.
         * It calls similar on the nested unknown elements.
         *
         * @param other the nested sequential to compare with.
         * @return true if they are similar, false otherwise
         */ Modifier public BasicType boolean similar FormalParameter ReferenceType NestedSequential other IfStatement BinaryOperation != MethodInvocation nested size MethodInvocation other.nested size BlockStatement ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nested size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType UnknownElement VariableDeclarator me Cast ReferenceType UnknownElement MethodInvocation nested MemberReference i get LocalVariableDeclaration ReferenceType UnknownElement VariableDeclarator o Cast ReferenceType UnknownElement MethodInvocation other.nested MemberReference i get IfStatement MethodInvocation ! me MemberReference o similar BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true ReferenceType TaskContainer MethodDeclaration /**
     * Convert the nested sequential to an unknown element
     * @return the nested sequential as an unknown element.
     */ Modifier public ReferenceType UnknownElement getNestedTask LocalVariableDeclaration ReferenceType UnknownElement VariableDeclarator ret ClassCreator ReferenceType UnknownElement Literal ""sequential"" StatementExpression MethodInvocation ret Literal ""sequential"" setTaskName StatementExpression MethodInvocation ret Literal """" setNamespace StatementExpression MethodInvocation ret Literal ""sequential"" setQName StatementExpression ClassCreator ReferenceType RuntimeConfigurable MemberReference ret Literal ""sequential"" ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation nestedSequential MethodInvocation size getNested MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType UnknownElement VariableDeclarator e Cast ReferenceType UnknownElement MethodInvocation nestedSequential MethodInvocation MemberReference i get getNested StatementExpression MethodInvocation ret MemberReference e addChild StatementExpression MethodInvocation ret MethodInvocation MethodInvocation e getWrapper addChild getWrapper End ReturnStatement MemberReference ret MethodDeclaration /**
     * @return the nested Attributes
     */ Modifier public ReferenceType List getAttributes ReturnStatement MemberReference attributes MethodDeclaration /**
     * @return the nested elements
     */ Modifier public ReferenceType Map getElements ReturnStatement MemberReference elements MethodDeclaration /**
     * Check if a character is a valid character for an element or
     * attribute name
     * @param c the character to check
     * @return true if the character is a letter or digit or '.' or '-'
     *         attribute name
     */ Modifier public static BasicType boolean isValidNameCharacter FormalParameter BasicType char c ReturnStatement BinaryOperation || BinaryOperation || MethodInvocation Character MemberReference c isLetterOrDigit BinaryOperation == MemberReference c Literal '.' BinaryOperation == MemberReference c Literal '-' MethodDeclaration /**
     * Check if a string is a valid name for an element or
     * attribute
     * @param name the string to check
     * @return true if the name consists of valid name characters
     */ Modifier private static BasicType boolean isValidName FormalParameter ReferenceType String name IfStatement BinaryOperation == MethodInvocation name length Literal 0 BlockStatement ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation name length MemberReference ++ i BlockStatement IfStatement MethodInvocation ! MethodInvocation name MemberReference i charAt isValidNameCharacter BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration /**
     * Add an attribute element.
     *
     * @param attribute an attribute nested element.
     */ Modifier public addConfiguredAttribute FormalParameter ReferenceType Attribute attribute IfStatement BinaryOperation == MethodInvocation attribute getName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""the attribute nested element needed a \""name\"" attribute"" End IfStatement MethodInvocation attribute MethodInvocation MemberReference textName equals getName BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""the attribute name \"""" MethodInvocation attribute getName Literal ""\"" has already been used by the text element"" End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation attributes size MemberReference ++ i BlockStatement IfStatement Cast ReferenceType Attribute MethodInvocation attributes MemberReference i get BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""the attribute "" MethodInvocation attribute getName Literal "" has already been specified"" End End StatementExpression MethodInvocation attributes MemberReference attribute add MethodDeclaration /**
     * Add an element element.
     *
     * @param element an element nested element.
     */ Modifier public addConfiguredElement FormalParameter ReferenceType TemplateElement element IfStatement BinaryOperation == MethodInvocation element getName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""the element nested element needed a \""name\"" attribute"" End IfStatement BinaryOperation != MethodInvocation elements MethodInvocation element getName get Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""the element "" MethodInvocation element getName Literal "" has already been specified"" End IfStatement BinaryOperation || MemberReference hasImplicitElement BinaryOperation && MethodInvocation element isImplicit BinaryOperation != MethodInvocation elements size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one element allowed when using implicit elements"" End StatementExpression Assignment MemberReference hasImplicitElement MethodInvocation element isImplicit = StatementExpression MethodInvocation elements MethodInvocation element getName MemberReference element put MethodDeclaration /**
     * Create a new ant type based on the embedded tasks and types.
     *
     */ Modifier public execute IfStatement BinaryOperation == MemberReference nestedSequential Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Missing sequential element"" End IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Name not specified"" End StatementExpression Assignment MemberReference name MethodInvocation ProjectHelper MethodInvocation getURI MemberReference name genComponentName = LocalVariableDeclaration ReferenceType MyAntTypeDefinition VariableDeclarator def ClassCreator ReferenceType MyAntTypeDefinition This StatementExpression MethodInvocation def MemberReference name setName StatementExpression MethodInvocation def ClassReference ReferenceType MacroInstance setClass LocalVariableDeclaration ReferenceType ComponentHelper VariableDeclarator helper MethodInvocation ComponentHelper MethodInvocation getProject getComponentHelper StatementExpression MethodInvocation helper MemberReference def addDataTypeDefinition ClassDeclaration Modifier public static /**
     * A nested element for the MacroDef task.
     *
     */ Attribute FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType String VariableDeclarator defaultValue FieldDeclaration Modifier private ReferenceType String VariableDeclarator description MethodDeclaration /**
         * The name of the attribute.
         *
         * @param name the name of the attribute
         */ Modifier public setName FormalParameter ReferenceType String name IfStatement MethodInvocation ! MemberReference name isValidName BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Illegal name ["" MemberReference name Literal ""] for attribute"" End StatementExpression Assignment This MemberReference name MethodInvocation name MemberReference Locale US toLowerCase = MethodDeclaration /**
         * @return the name of the attribute
         */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
         * The default value to use if the parameter is not
         * used in the templated instance.
         *
         * @param defaultValue the default value
         */ Modifier public setDefault FormalParameter ReferenceType String defaultValue StatementExpression Assignment This MemberReference defaultValue MemberReference defaultValue = MethodDeclaration /**
         * @return the default value, null if not set
         */ Modifier public ReferenceType String getDefault ReturnStatement MemberReference defaultValue MethodDeclaration /**
         * @param desc Description of the element.
         * @since ant 1.6.1
         */ Modifier public setDescription FormalParameter ReferenceType String desc StatementExpression Assignment MemberReference description MemberReference desc = MethodDeclaration /**
         * @return the description of the element, or <code>null</code> if
         *         no description is available.
         * @since ant 1.6.1
         */ Modifier public ReferenceType String getDescription ReturnStatement MemberReference description MethodDeclaration /**
         * equality method
         *
         * @param obj an <code>Object</code> value
         * @return a <code>boolean</code> value
         */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj Literal null BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation obj getClass MethodInvocation getClass BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType Attribute VariableDeclarator other Cast ReferenceType Attribute MemberReference obj IfStatement BinaryOperation == MemberReference name Literal null BlockStatement IfStatement BinaryOperation != MemberReference other name Literal null BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! name MemberReference other name equals BlockStatement ReturnStatement Literal false End End IfStatement BinaryOperation == MemberReference defaultValue Literal null BlockStatement IfStatement BinaryOperation != MemberReference other defaultValue Literal null BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! defaultValue MemberReference other defaultValue equals BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true MethodDeclaration /**
         * @return a hash code value for this object.
         */ Modifier public BasicType int hashCode ReturnStatement BinaryOperation + MethodInvocation MemberReference defaultValue objectHashCode MethodInvocation MemberReference name objectHashCode ClassDeclaration Modifier public static /**
     * A nested text element for the MacroDef task.
     * @since ant 1.6.1
     */ Text FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private BasicType boolean VariableDeclarator optional FieldDeclaration Modifier private BasicType boolean VariableDeclarator trim FieldDeclaration Modifier private ReferenceType String VariableDeclarator description MethodDeclaration /**
         * The name of the attribute.
         *
         * @param name the name of the attribute
         */ Modifier public setName FormalParameter ReferenceType String name IfStatement MethodInvocation ! MemberReference name isValidName BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Illegal name ["" MemberReference name Literal ""] for attribute"" End StatementExpression Assignment This MemberReference name MethodInvocation name MemberReference Locale US toLowerCase = MethodDeclaration /**
         * @return the name of the attribute
         */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
         * The optional attribute of the text element.
         *
         * @param optional if true this is optional
         */ Modifier public setOptional FormalParameter BasicType boolean optional StatementExpression Assignment This MemberReference optional MemberReference optional = MethodDeclaration /**
         * @return true if the text is optional
         */ Modifier public BasicType boolean getOptional ReturnStatement MemberReference optional MethodDeclaration /**
         * The trim attribute of the text element.
         *
         * @param trim if true this String.trim() is called on
         *             the contents of the text element.
         */ Modifier public setTrim FormalParameter BasicType boolean trim StatementExpression Assignment This MemberReference trim MemberReference trim = MethodDeclaration /**
         * @return true if the text is trim
         */ Modifier public BasicType boolean getTrim ReturnStatement MemberReference trim MethodDeclaration /**
         * @param desc Description of the text.
         */ Modifier public setDescription FormalParameter ReferenceType String desc StatementExpression Assignment MemberReference description MemberReference desc = MethodDeclaration /**
         * @return the description of the text, or <code>null</code> if
         *         no description is available.
         */ Modifier public ReferenceType String getDescription ReturnStatement MemberReference description MethodDeclaration /**
         * equality method
         *
         * @param obj an <code>Object</code> value
         * @return a <code>boolean</code> value
         */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj Literal null BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation obj getClass MethodInvocation getClass BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType Text VariableDeclarator other Cast ReferenceType Text MemberReference obj IfStatement BinaryOperation == MemberReference name Literal null BlockStatement IfStatement BinaryOperation != MemberReference other name Literal null BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! name MemberReference other name equals BlockStatement ReturnStatement Literal false End End IfStatement BinaryOperation != MemberReference optional MemberReference other optional BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation != MemberReference trim MemberReference other trim BlockStatement ReturnStatement Literal false End ReturnStatement Literal true MethodDeclaration /**
         * @return a hash code value for this object.
         */ Modifier public BasicType int hashCode ReturnStatement MethodInvocation MemberReference name objectHashCode ClassDeclaration Modifier public static /**
     * A nested element for the MacroDef task.
     *
     */ TemplateElement FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private BasicType boolean VariableDeclarator optional Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator implicit Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator description MethodDeclaration /**
         * The name of the element.
         *
         * @param name the name of the element.
         */ Modifier public setName FormalParameter ReferenceType String name IfStatement MethodInvocation ! MemberReference name isValidName BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Illegal name ["" MemberReference name Literal ""] for attribute"" End StatementExpression Assignment This MemberReference name MethodInvocation name MemberReference Locale US toLowerCase = MethodDeclaration /**
         * @return the name of the element.
         */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
         * is this element optional ?
         *
         * @param optional if true this element may be left out, default
         *                 is false.
         */ Modifier public setOptional FormalParameter BasicType boolean optional StatementExpression Assignment This MemberReference optional MemberReference optional = MethodDeclaration /**
         * @return the optional attribute
         */ Modifier public BasicType boolean isOptional ReturnStatement MemberReference optional MethodDeclaration /**
         * is this element implicit ?
         *
         * @param implicit if true this element may be left out, default
         *                 is false.
         */ Modifier public setImplicit FormalParameter BasicType boolean implicit StatementExpression Assignment This MemberReference implicit MemberReference implicit = MethodDeclaration /**
         * @return the implicit attribute
         */ Modifier public BasicType boolean isImplicit ReturnStatement MemberReference implicit MethodDeclaration /**
         * @param desc Description of the element.
         * @since ant 1.6.1
         */ Modifier public setDescription FormalParameter ReferenceType String desc StatementExpression Assignment MemberReference description MemberReference desc = MethodDeclaration /**
         * @return the description of the element, or <code>null</code> if
         *         no description is available.
         * @since ant 1.6.1
         */ Modifier public ReferenceType String getDescription ReturnStatement MemberReference description MethodDeclaration /**
         * equality method
         *
         * @param obj an <code>Object</code> value
         * @return a <code>boolean</code> value
         */ Modifier public BasicType boolean equals FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj Literal null BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation != MethodInvocation obj getClass MethodInvocation getClass BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType TemplateElement VariableDeclarator other Cast ReferenceType TemplateElement MemberReference obj IfStatement BinaryOperation == MemberReference name Literal null BlockStatement IfStatement BinaryOperation != MemberReference other name Literal null BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! name MemberReference other name equals BlockStatement ReturnStatement Literal false End End ReturnStatement BinaryOperation && BinaryOperation == MemberReference optional MemberReference other optional BinaryOperation == MemberReference implicit MemberReference other implicit MethodDeclaration /**
         * @return a hash code value for this object.
         */ Modifier public BasicType int hashCode ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation MemberReference name objectHashCode TernaryExpression MemberReference optional Literal 1 Literal 0 TernaryExpression MemberReference implicit Literal 1 Literal 0 MethodDeclaration /**
     * similar equality method for macrodef, ignores project and
     * runtime info.
     *
     * @param obj an <code>Object</code> value
     * @return a <code>boolean</code> value
     */ Modifier public BasicType boolean similar FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference obj This BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference obj Literal null BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! obj MethodInvocation MethodInvocation getClass equals getClass BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType MacroDef VariableDeclarator other Cast ReferenceType MacroDef MemberReference obj IfStatement BinaryOperation == MemberReference name Literal null BlockStatement ReturnStatement BinaryOperation == MemberReference other name Literal null End IfStatement MethodInvocation ! name MemberReference other name equals BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation == MemberReference text Literal null BlockStatement IfStatement BinaryOperation != MemberReference other text Literal null BlockStatement ReturnStatement Literal false End BlockStatement IfStatement MethodInvocation ! text MemberReference other text equals BlockStatement ReturnStatement Literal false End End IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MethodInvocation getURI Literal null MethodInvocation MethodInvocation Literal """" equals getURI MethodInvocation MethodInvocation MemberReference ProjectHelper ANT_CORE_URI equals getURI BlockStatement IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MethodInvocation other getURI Literal null MethodInvocation other MethodInvocation Literal """" equals getURI MethodInvocation other MethodInvocation MemberReference ProjectHelper ANT_CORE_URI equals getURI BlockStatement ReturnStatement Literal false End BlockStatement IfStatement MethodInvocation ! MethodInvocation MethodInvocation other getURI equals getURI BlockStatement ReturnStatement Literal false End End IfStatement MethodInvocation ! nestedSequential MemberReference other nestedSequential similar BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! attributes MemberReference other attributes equals BlockStatement ReturnStatement Literal false End IfStatement MethodInvocation ! elements MemberReference other elements equals BlockStatement ReturnStatement Literal false End ReturnStatement Literal true ClassDeclaration Modifier private static /**
     * extends AntTypeDefinition, on create
     * of the object, the template macro definition
     * is given.
     */ MyAntTypeDefinition FieldDeclaration Modifier private ReferenceType MacroDef VariableDeclarator macroDef ConstructorDeclaration Modifier public /**
         * Creates a new <code>MyAntTypeDefinition</code> instance.
         *
         * @param macroDef a <code>MacroDef</code> value
         */ MyAntTypeDefinition FormalParameter ReferenceType MacroDef macroDef StatementExpression Assignment This MemberReference macroDef MemberReference macroDef = MethodDeclaration /**
         * create an instance of the definition.
         * The instance may be wrapped in a proxy class.
         * @param project the current project
         * @return the created object
         */ Modifier public ReferenceType Object create FormalParameter ReferenceType Project project LocalVariableDeclaration ReferenceType Object VariableDeclarator o SuperMethodInvocation MemberReference project create IfStatement BinaryOperation == MemberReference o Literal null BlockStatement ReturnStatement Literal null End StatementExpression Cast ReferenceType MacroInstance MemberReference o ReturnStatement MemberReference o MethodDeclaration /**
         * Equality method for this definition
         *
         * @param other another definition
         * @param project the current project
         * @return true if the definitions are the same
         */ Modifier public BasicType boolean sameDefinition FormalParameter ReferenceType AntTypeDefinition other FormalParameter ReferenceType Project project IfStatement SuperMethodInvocation ! MemberReference other MemberReference project sameDefinition BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType MyAntTypeDefinition VariableDeclarator otherDef Cast ReferenceType MyAntTypeDefinition MemberReference other ReturnStatement MethodInvocation macroDef MemberReference otherDef macroDef similar MethodDeclaration /**
         * Similar method for this definition
         *
         * @param other another definition
         * @param project the current project
         * @return true if the definitions are the same
         */ Modifier public BasicType boolean similarDefinition FormalParameter ReferenceType AntTypeDefinition other FormalParameter ReferenceType Project project IfStatement SuperMethodInvocation ! MemberReference other MemberReference project similarDefinition BlockStatement ReturnStatement Literal false End LocalVariableDeclaration ReferenceType MyAntTypeDefinition VariableDeclarator otherDef Cast ReferenceType MyAntTypeDefinition MemberReference other ReturnStatement MethodInvocation macroDef MemberReference otherDef macroDef similar ReferenceType AntTypeDefinition MethodDeclaration Modifier private static BasicType int objectHashCode FormalParameter ReferenceType Object o IfStatement BinaryOperation == MemberReference o Literal null BlockStatement ReturnStatement Literal 0 BlockStatement ReturnStatement MethodInvocation o hashCode End ReferenceType AntlibDefinition",0
494,494,,0
313,313,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors ClassDeclaration Modifier public /**
 * This selector has one other selectors whose meaning it inverts. It
 * actually relies on NoneSelector for its implementation of the
 * isSelected() method, but it adds a check to ensure there is only one
 * other selector contained within.
 *
 * @since 1.5
 */ NotSelector ConstructorDeclaration Modifier public /**
     * Default constructor.
     */ NotSelector MethodDeclaration /**
     * @return a string representation of the selector
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer IfStatement MethodInvocation hasSelectors BlockStatement StatementExpression MethodInvocation buf Literal ""{notselect: "" append StatementExpression MethodInvocation buf SuperMethodInvocation toString append StatementExpression MethodInvocation buf Literal ""}"" append End ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * Makes sure that there is only one entry, sets an error message if
     * not.
     */ Modifier public verifySettings IfStatement BinaryOperation != MethodInvocation selectorCount Literal 1 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""One and only one selector is allowed within the "" Literal ""<not> tag"" setError End ReferenceType NoneSelector",0
471,471,,0
27,27,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.dotnet Import org.apache.tools.ant.BuildException Import java.io.File ClassDeclaration Modifier public /**
 * class used by DotnetCompile to name resources, could be upgraded to a datatype
 * in the distant future.
 * a resource maps to /res:file,name
 */ DotnetResource FieldDeclaration /**
     * name of resource
     */ Modifier private ReferenceType File VariableDeclarator file FieldDeclaration /**
     * embed (default) or link the resource
     */ Modifier private BasicType boolean VariableDeclarator embed Literal true FieldDeclaration /**
     * this is used in VBC and JSC
     */ Modifier private ReferenceType Boolean VariableDeclarator isPublic Literal null FieldDeclaration /**
     * name of the object
     */ Modifier private ReferenceType String VariableDeclarator name Literal null MethodDeclaration Modifier public BasicType boolean isEmbed ReturnStatement MemberReference embed MethodDeclaration /**
     * embed the resource in the assembly (default, true) or just link to it.
     * @param embed
     */ Modifier public setEmbed FormalParameter BasicType boolean embed StatementExpression Assignment This MemberReference embed MemberReference embed = MethodDeclaration Modifier public ReferenceType File getFile ReturnStatement MemberReference file MethodDeclaration /**
     * name the resource
     * @param file
     */ Modifier public setFile FormalParameter ReferenceType File file StatementExpression Assignment This MemberReference file MemberReference file = MethodDeclaration Modifier public ReferenceType Boolean getPublic ReturnStatement MemberReference isPublic MethodDeclaration /**
     * VB and J# only: is a resource public or not?
     * @param aPublic
     */ Modifier public setPublic FormalParameter ReferenceType Boolean aPublic StatementExpression Assignment MemberReference isPublic MemberReference aPublic = MethodDeclaration Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * should the resource have a name?
     * @param name
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * build the C# style parameter (which has no public/private option)
     * @return the built C# style parameter
     */ Modifier public ReferenceType String getCSharpStyleParameter LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buffer ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation buffer TernaryExpression MethodInvocation isEmbed Literal ""/resource"" Literal ""/linkresource"" append StatementExpression MethodInvocation buffer Literal ':' append StatementExpression MethodInvocation buffer MethodInvocation MethodInvocation toString getFile append IfStatement BinaryOperation != MethodInvocation getName Literal null BlockStatement StatementExpression MethodInvocation buffer Literal ',' append StatementExpression MethodInvocation buffer MethodInvocation getName append End IfStatement BinaryOperation != MethodInvocation getPublic Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""This compiler does not support the "" Literal ""public/private option."" End ReturnStatement MethodInvocation buffer toString MethodDeclaration /**
     * This method gets the style of param used by VB and javascript
     * @return The style VB parameter being used.
     */ Modifier public ReferenceType String getVbStyleParameter LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buffer ClassCreator ReferenceType StringBuffer StatementExpression MethodInvocation buffer TernaryExpression MethodInvocation isEmbed Literal ""/resource"" Literal ""/linkresource"" append StatementExpression MethodInvocation buffer Literal ':' append StatementExpression MethodInvocation buffer MethodInvocation MethodInvocation toString getFile append IfStatement BinaryOperation != MethodInvocation getName Literal null BlockStatement StatementExpression MethodInvocation buffer Literal ',' append StatementExpression MethodInvocation buffer MethodInvocation getName append IfStatement BinaryOperation != MethodInvocation getPublic Literal null BlockStatement StatementExpression MethodInvocation buffer Literal ',' append StatementExpression MethodInvocation buffer TernaryExpression MethodInvocation MethodInvocation booleanValue getPublic Literal ""public"" Literal ""private"" append End IfStatement BinaryOperation != MethodInvocation getPublic Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You cannot have a public or private "" Literal ""option without naming the resource"" End End ReturnStatement MethodInvocation buffer toString",1
103,103,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.compilers Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * The implementation of the gcj compiler.
 * This is primarily a cut-and-paste from the jikes.
 *
 * @since Ant 1.4
 */ Gcj MethodDeclaration /**
     * Performs a compile using the gcj compiler.
     */ Modifier public BasicType boolean execute BuildException LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmd StatementExpression MethodInvocation attributes Literal ""Using gcj compiler"" MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference cmd MethodInvocation setupGCJCommand = LocalVariableDeclaration BasicType int VariableDeclarator firstFileName MethodInvocation cmd size StatementExpression MethodInvocation MemberReference cmd logAndAddFilesToCompile ReturnStatement BinaryOperation == MethodInvocation MethodInvocation cmd getCommandline MemberReference firstFileName executeExternalCompile Literal 0 MethodDeclaration Modifier protected ReferenceType Commandline setupGCJCommand LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmd ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType Path VariableDeclarator classpath ClassCreator ReferenceType Path MemberReference project IfStatement BinaryOperation != MemberReference bootclasspath Literal null BlockStatement StatementExpression MethodInvocation classpath MemberReference bootclasspath append End StatementExpression MethodInvocation classpath MemberReference extdirs addExtdirs IfStatement BinaryOperation || BinaryOperation == MemberReference bootclasspath Literal null BinaryOperation == MethodInvocation bootclasspath size Literal 0 BlockStatement StatementExpression Assignment MemberReference includeJavaRuntime Literal true = End StatementExpression MethodInvocation classpath MethodInvocation getCompileClasspath append IfStatement BinaryOperation != MemberReference compileSourcepath Literal null BlockStatement StatementExpression MethodInvocation classpath MemberReference compileSourcepath append BlockStatement StatementExpression MethodInvocation classpath MemberReference src append End LocalVariableDeclaration ReferenceType String VariableDeclarator exec MethodInvocation MethodInvocation getExecutable getJavac StatementExpression MethodInvocation cmd TernaryExpression BinaryOperation == MemberReference exec Literal null Literal ""gcj"" MemberReference exec setExecutable IfStatement BinaryOperation != MemberReference destDir Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-d"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference destDir setFile createArgument IfStatement BinaryOperation && MethodInvocation ! destDir exists MethodInvocation ! destDir mkdirs BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Can't make output directories. "" Literal ""Maybe permission is wrong. "" End End StatementExpression MethodInvocation cmd MethodInvocation Literal ""-classpath"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference classpath setPath createArgument IfStatement BinaryOperation != MemberReference encoding Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation BinaryOperation + Literal ""--encoding="" MemberReference encoding setValue createArgument End IfStatement MemberReference debug BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-g1"" setValue createArgument End IfStatement MemberReference optimize BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-O"" setValue createArgument End IfStatement MethodInvocation ! isNativeBuild BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-C"" setValue createArgument End StatementExpression MethodInvocation MemberReference cmd addCurrentCompilerArgs ReturnStatement MemberReference cmd MethodDeclaration /**
     * Whether any of the arguments given via &lt;compilerarg&gt;
     * implies that compilation to native code is requested.
     *
     * @since Ant 1.6.2
     */ Modifier public BasicType boolean isNativeBuild LocalVariableDeclaration BasicType boolean VariableDeclarator nativeBuild Literal false LocalVariableDeclaration ReferenceType String VariableDeclarator additionalArguments MethodInvocation MethodInvocation getCurrentCompilerArgs getJavac LocalVariableDeclaration BasicType int VariableDeclarator argsLength Literal 0 WhileStatement BinaryOperation && MemberReference ! nativeBuild BinaryOperation < MemberReference argsLength MemberReference additionalArguments length BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator conflictLength Literal 0 WhileStatement BinaryOperation && MemberReference ! nativeBuild BinaryOperation < MemberReference conflictLength MemberReference CONFLICT_WITH_DASH_C length BlockStatement StatementExpression Assignment MemberReference nativeBuild MemberReference additionalArguments = StatementExpression MemberReference ++ conflictLength End StatementExpression MemberReference ++ argsLength End ReturnStatement MemberReference nativeBuild FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator CONFLICT_WITH_DASH_C ArrayInitializer Literal ""-o"" Literal ""--main="" Literal ""-D"" Literal ""-fjni"" Literal ""-L"" ReferenceType DefaultCompilerAdapter",1
73,73,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.FileWriter Import java.io.FilenameFilter Import java.io.IOException Import java.io.PrintWriter Import java.io.BufferedReader Import java.io.FileReader Import java.net.MalformedURLException Import java.net.URL Import java.util.Enumeration Import java.util.Locale Import java.util.StringTokenizer Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.ProjectComponent Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.DirSet Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.PatternSet Import org.apache.tools.ant.types.Reference Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.ant.util.JavaEnvUtils ClassDeclaration Modifier public /**
 * Generates Javadoc documentation for a collection
 * of source code.
 *
 * <P>Current known limitations are:
 *
 * <P><UL>
 *    <LI>patterns must be of the form ""xxx.*"", every other pattern doesn't
 *        work.
 *    <LI>there is no control on arguments sanity since they are left
 *        to the javadoc implementation.
 *    <LI>argument J in javadoc1 is not supported (what is that for anyway?)
 * </UL>
 *
 * <P>If no <CODE>doclet</CODE> is set, then the <CODE>version</CODE> and
 * <CODE>author</CODE> are by default <CODE>""yes""</CODE>.
 *
 * <P>Note: This task is run on another VM because the Javadoc code calls
 * <CODE>System.exit()</CODE> which would break Ant functionality.
 *
 *
 * @since Ant 1.1
 *
 * @ant.task category=""java""
 */ Javadoc ClassDeclaration Modifier public /**
     * Inner class used to manage doclet parameters.
     */ DocletParam FieldDeclaration /** The parameter name */ Modifier private ReferenceType String VariableDeclarator name FieldDeclaration /** The parameter value */ Modifier private ReferenceType String VariableDeclarator value MethodDeclaration /**
         * Set the name of the parameter.
         *
         * @param name the name of the doclet parameter
         */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
         * Get the parameter name.
         *
         * @return the parameter's name.
         */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
         * Set the parameter value.
         *
         * Note that only string values are supported. No resolution of file
         * paths is performed.
         *
         * @param value the parameter value.
         */ Modifier public setValue FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
         * Get the parameter value.
         *
         * @return the parameter value.
         */ Modifier public ReferenceType String getValue ReturnStatement MemberReference value ClassDeclaration Modifier public static /**
     * A project aware class used for Javadoc extensions which take a name
     * and a path such as doclet and taglet arguments.
     *
     */ ExtensionInfo FieldDeclaration /** The name of the extension */ Modifier private ReferenceType String VariableDeclarator name FieldDeclaration /** The optional path to use to load the extension */ Modifier private ReferenceType Path VariableDeclarator path MethodDeclaration /**
         * Set the name of the extension
         *
         * @param name the extension's name.
         */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
         * Get the name of the extension.
         *
         * @return the extension's name.
         */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
         * Set the path to use when loading the component.
         *
         * @param path a Path instance containing the classpath to use.
         */ Modifier public setPath FormalParameter ReferenceType Path path IfStatement BinaryOperation == This MemberReference path Literal null BlockStatement StatementExpression Assignment This MemberReference path MemberReference path = BlockStatement StatementExpression This MemberReference path MethodInvocation MemberReference path append End MethodDeclaration /**
         * Get the extension's path.
         *
         * @return the path to be used to load the extension.
         * May be <code>null</code>
         */ Modifier public ReferenceType Path getPath ReturnStatement MemberReference path MethodDeclaration /**
         * Create an empty nested path to be configured by Ant with the
         * classpath for the extension.
         *
         * @return a new Path instance to be configured.
         */ Modifier public ReferenceType Path createPath IfStatement BinaryOperation == MemberReference path Literal null BlockStatement StatementExpression Assignment MemberReference path ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation path createPath MethodDeclaration /**
         * Adds a reference to a CLASSPATH defined elsewhere.
         *
         * @param r the reference containing the path.
         */ Modifier public setPathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createPath ReferenceType ProjectComponent ClassDeclaration Modifier public /**
     * This class stores info about doclets.
     *
     */ DocletInfo FieldDeclaration /** Collection of doclet parameters. */ Modifier private ReferenceType Vector VariableDeclarator params ClassCreator ReferenceType Vector MethodDeclaration /**
         * Create a doclet parameter to be configured by Ant.
         *
         * @return a new DocletParam instance to be configured.
         */ Modifier public ReferenceType DocletParam createParam LocalVariableDeclaration ReferenceType DocletParam VariableDeclarator param ClassCreator ReferenceType DocletParam StatementExpression MethodInvocation params MemberReference param addElement ReturnStatement MemberReference param MethodDeclaration /**
         * Get the doclet's parameters.
         *
         * @return an Enumeration of DocletParam instances.
         */ Modifier public ReferenceType Enumeration getParams ReturnStatement MethodInvocation params elements ReferenceType ExtensionInfo ClassDeclaration Modifier public static /**
     * Used to track info about the packages to be javadoc'd
     */ PackageName FieldDeclaration /** The package name */ Modifier private ReferenceType String VariableDeclarator name MethodDeclaration /**
         * Set the name of the package
         *
         * @param name the package name.
         */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MethodInvocation name trim = MethodDeclaration /**
         * Get the package name.
         *
         * @return the package's name.
         */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
         * @see java.lang.Object#toString
         */ Modifier public ReferenceType String toString ReturnStatement MethodInvocation getName ClassDeclaration Modifier public static /**
     * This class is used to manage the source files to be processed.
     */ SourceFile FieldDeclaration /** The source file */ Modifier private ReferenceType File VariableDeclarator file ConstructorDeclaration Modifier public /**
         * Default constructor
         */ SourceFile ConstructorDeclaration Modifier public /**
         * Constructor specifying the source file directly
         *
         * @param file the source file
         */ SourceFile FormalParameter ReferenceType File file StatementExpression Assignment This MemberReference file MemberReference file = MethodDeclaration /**
         * Set the source file.
         *
         * @param file the source file.
         */ Modifier public setFile FormalParameter ReferenceType File file StatementExpression Assignment This MemberReference file MemberReference file = MethodDeclaration /**
         * Get the source file.
         *
         * @return the source file.
         */ Modifier public ReferenceType File getFile ReturnStatement MemberReference file ClassDeclaration Modifier public static /**
     * An HTML element in the javadoc.
     *
     * This class is used for those javadoc elements which contain HTML such as
     * footers, headers, etc.
     */ Html FieldDeclaration /** The text for the element */ Modifier private ReferenceType StringBuffer VariableDeclarator text ClassCreator ReferenceType StringBuffer MethodDeclaration /**
         * Add text to the element.
         *
         * @param t the text to be added.
         */ Modifier public addText FormalParameter ReferenceType String t StatementExpression MethodInvocation text MemberReference t append MethodDeclaration /**
         * Get the current text for the element.
         *
         * @return the current text.
         */ Modifier public ReferenceType String getText ReturnStatement MethodInvocation text Literal 0 substring ClassDeclaration Modifier public static /**
     * EnumeratedAttribute implementation supporting the javadoc scoping
     * values.
     */ AccessType MethodDeclaration /**
         * @see EnumeratedAttribute#getValues().
         */ Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""protected"" Literal ""public"" Literal ""package"" Literal ""private"" ReferenceType EnumeratedAttribute FieldDeclaration /** The command line built to execute Javadoc. */ Modifier private ReferenceType Commandline VariableDeclarator cmd ClassCreator ReferenceType Commandline FieldDeclaration /** Flag which indicates if javadoc from JDK 1.1 is to be used. */ Modifier private static BasicType boolean VariableDeclarator javadoc1 MethodInvocation JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_1 isJavaVersion FieldDeclaration /** Flag which indicates if javadoc from JDK 1.4 is available */ Modifier private static BasicType boolean VariableDeclarator javadoc4 BinaryOperation && BinaryOperation && MethodInvocation ! JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_1 isJavaVersion MethodInvocation ! JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_2 isJavaVersion MethodInvocation ! JavaEnvUtils MemberReference JavaEnvUtils JAVA_1_3 isJavaVersion MethodDeclaration /**
     * Utility method to add an argument to the command line conditionally
     * based on the given flag.
     *
     * @param b the flag which controls if the argument is added.
     * @param arg the argument value.
     */ Modifier private addArgIf FormalParameter BasicType boolean b FormalParameter ReferenceType String arg IfStatement MemberReference b BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference arg setValue createArgument End MethodDeclaration /**
     * Utility method to add a non JDK1.1 javadoc argument.
     *
     * @param key the argument name.
     * @param value the argument value.
     */ Modifier private add12ArgIfNotEmpty FormalParameter ReferenceType String key FormalParameter ReferenceType String value IfStatement MemberReference ! javadoc1 BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference value Literal null BinaryOperation != MethodInvocation value length Literal 0 BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference key setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference value setValue createArgument BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Warning: Leaving out empty argument '"" MemberReference key Literal ""'"" MemberReference Project MSG_WARN log End End MethodDeclaration /**
     * Utility method to add a non-JDK1.1 argument to the command line
     * conditionally based on the given flag.
     *
     * @param b the flag which controls if the argument is added.
     * @param arg the argument value.
     */ Modifier private add12ArgIf FormalParameter BasicType boolean b FormalParameter ReferenceType String arg IfStatement BinaryOperation && MemberReference ! javadoc1 MemberReference b BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference arg setValue createArgument End FieldDeclaration /**
     * Flag which indicates if the task should fail if there is a
     * javadoc error.
     */ Modifier private BasicType boolean VariableDeclarator failOnError Literal false FieldDeclaration Modifier private ReferenceType Path VariableDeclarator sourcePath Literal null FieldDeclaration Modifier private ReferenceType File VariableDeclarator destDir Literal null FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator sourceFiles ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator packageNames ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator excludePackageNames ClassCreator ReferenceType Vector Literal 1 FieldDeclaration Modifier private BasicType boolean VariableDeclarator author Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator version Literal true FieldDeclaration Modifier private ReferenceType DocletInfo VariableDeclarator doclet Literal null FieldDeclaration Modifier private ReferenceType Path VariableDeclarator classpath Literal null FieldDeclaration Modifier private ReferenceType Path VariableDeclarator bootclasspath Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator group Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator packageList Literal null FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator links ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator groups ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator tags ClassCreator ReferenceType Vector FieldDeclaration Modifier private BasicType boolean VariableDeclarator useDefaultExcludes Literal true FieldDeclaration Modifier private ReferenceType Html VariableDeclarator doctitle Literal null FieldDeclaration Modifier private ReferenceType Html VariableDeclarator header Literal null FieldDeclaration Modifier private ReferenceType Html VariableDeclarator footer Literal null FieldDeclaration Modifier private ReferenceType Html VariableDeclarator bottom Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator useExternalFile Literal false FieldDeclaration Modifier private ReferenceType FileUtils VariableDeclarator fileUtils MethodInvocation FileUtils newFileUtils FieldDeclaration Modifier private ReferenceType String VariableDeclarator source Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator linksource Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator breakiterator Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator noqualifier FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator fileSets ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator packageSets ClassCreator ReferenceType Vector MethodDeclaration /**
     * Work around command line length limit by using an external file
     * for the sourcefiles.
     *
     * @param b true if an external file is to be used.
     */ Modifier public setUseExternalFile FormalParameter BasicType boolean b IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression Assignment MemberReference useExternalFile MemberReference b = End MethodDeclaration /**
     * Sets whether default exclusions should be used or not.
     *
     * @param useDefaultExcludes ""true""|""on""|""yes"" when default exclusions
     *                           should be used, ""false""|""off""|""no"" when they
     *                           shouldn't be used.
     */ Modifier public setDefaultexcludes FormalParameter BasicType boolean useDefaultExcludes StatementExpression Assignment This MemberReference useDefaultExcludes MemberReference useDefaultExcludes = MethodDeclaration /**
     * Set the maximum memory to be used by the javadoc process
     *
     * @param max a string indicating the maximum memory according to the
     *        JVM conventions (e.g. 128m is 128 Megabytes)
     */ Modifier public setMaxmemory FormalParameter ReferenceType String max IfStatement MemberReference javadoc1 BlockStatement StatementExpression MethodInvocation cmd MethodInvocation BinaryOperation + Literal ""-J-mx"" MemberReference max setValue createArgument BlockStatement StatementExpression MethodInvocation cmd MethodInvocation BinaryOperation + Literal ""-J-Xmx"" MemberReference max setValue createArgument End MethodDeclaration /**
     * Set an additional parameter on the command line
     *
     * @param add the additional command line parameter for the javadoc task.
     */ Modifier public setAdditionalparam FormalParameter ReferenceType String add StatementExpression MethodInvocation cmd MethodInvocation MemberReference add setLine createArgument MethodDeclaration /**
     * Adds a command-line argument.
     * @since Ant 1.6
     */ Modifier public ReferenceType Commandline ReferenceType Argument createArg ReturnStatement MethodInvocation cmd createArgument MethodDeclaration /**
     * Specify where to find source file
     *
     * @param src a Path instance containing the various source directories.
     */ Modifier public setSourcepath FormalParameter ReferenceType Path src IfStatement BinaryOperation == MemberReference sourcePath Literal null BlockStatement StatementExpression Assignment MemberReference sourcePath MemberReference src = BlockStatement StatementExpression MethodInvocation sourcePath MemberReference src append End MethodDeclaration /**
     * Create a path to be configured with the locations of the source
     * files.
     *
     * @return a new Path instance to be configured by the Ant core.
     */ Modifier public ReferenceType Path createSourcepath IfStatement BinaryOperation == MemberReference sourcePath Literal null BlockStatement StatementExpression Assignment MemberReference sourcePath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation sourcePath createPath MethodDeclaration /**
     * Adds a reference to a CLASSPATH defined elsewhere.
     *
     * @param r the reference containing the source path definition.
     */ Modifier public setSourcepathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createSourcepath MethodDeclaration /**
     * Set the directory where the Javadoc output will be generated.
     *
     * @param dir the destination directory.
     */ Modifier public setDestdir FormalParameter ReferenceType File dir StatementExpression Assignment MemberReference destDir MemberReference dir = StatementExpression MethodInvocation cmd MethodInvocation Literal ""-d"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference destDir setFile createArgument MethodDeclaration /**
     * Set the list of source files to process.
     *
     * @param src a comma separated list of source files.
     */ Modifier public setSourcefiles FormalParameter ReferenceType String src LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference src Literal "","" WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator f MethodInvocation tok nextToken LocalVariableDeclaration ReferenceType SourceFile VariableDeclarator sf ClassCreator ReferenceType SourceFile StatementExpression MethodInvocation sf MethodInvocation MethodInvocation MethodInvocation f trim resolveFile getProject setFile StatementExpression MethodInvocation MemberReference sf addSource End MethodDeclaration /**
     * Add a single source file.
     *
     * @param sf the source file to be processed.
     */ Modifier public addSource FormalParameter ReferenceType SourceFile sf StatementExpression MethodInvocation sourceFiles MemberReference sf addElement MethodDeclaration /**
     * Set the package names to be processed.
     *
     * @param packages a comma separated list of packages specs
     *        (may be wildcarded).
     *
     * @see #addPackage for wildcard information.
     */ Modifier public setPackagenames FormalParameter ReferenceType String packages LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference packages Literal "","" WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator p MethodInvocation tok nextToken LocalVariableDeclaration ReferenceType PackageName VariableDeclarator pn ClassCreator ReferenceType PackageName StatementExpression MethodInvocation pn MemberReference p setName StatementExpression MethodInvocation MemberReference pn addPackage End MethodDeclaration /**
     * Add a single package to be processed.
     *
     * If the package name ends with &quot;.*&quot; the Javadoc task
     * will find and process all subpackages.
     *
     * @param pn the package name, possibly wildcarded.
     */ Modifier public addPackage FormalParameter ReferenceType PackageName pn StatementExpression MethodInvocation packageNames MemberReference pn addElement MethodDeclaration /**
     * Set the list of packages to be excluded.
     *
     * @param packages a comma separated list of packages to be excluded.
     *        This may not include wildcards.
     */ Modifier public setExcludePackageNames FormalParameter ReferenceType String packages LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference packages Literal "","" WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator p MethodInvocation tok nextToken LocalVariableDeclaration ReferenceType PackageName VariableDeclarator pn ClassCreator ReferenceType PackageName StatementExpression MethodInvocation pn MemberReference p setName StatementExpression MethodInvocation MemberReference pn addExcludePackage End MethodDeclaration /**
     * Add a package to be excluded from the javadoc run.
     *
     * @param pn the name of the package (wildcards are not permitted).
     */ Modifier public addExcludePackage FormalParameter ReferenceType PackageName pn StatementExpression MethodInvocation excludePackageNames MemberReference pn addElement MethodDeclaration /**
     * Specify the file containing the overview to be included in the generated
     * documentation.
     *
     * @param f the file containing the overview.
     */ Modifier public setOverview FormalParameter ReferenceType File f IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-overview"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference f setFile createArgument End MethodDeclaration /**
     * Indicate whether only public classes and members are to be included in
     * the scope processed
     *
     * @param b true if scope is to be public.
     */ Modifier public setPublic FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-public"" addArgIf MethodDeclaration /**
     * Indicate whether only protected and public classes and members are to
     * be included in the scope processed
     *
     * @param b true if scope is to be protected.
     */ Modifier public setProtected FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-protected"" addArgIf MethodDeclaration /**
     * Indicate whether only package, protected and public classes and
     * members are to be included in the scope processed
     *
     * @param b true if scope is to be package level.
     */ Modifier public setPackage FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-package"" addArgIf MethodDeclaration /**
     * Indicate whether all classes and
     * members are to be included in the scope processed
     *
     * @param b true if scope is to be private level.
     */ Modifier public setPrivate FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-private"" addArgIf MethodDeclaration /**
     * Set the scope to be processed. This is an alternative to the
     * use of the setPublic, setPrivate, etc methods. It gives better build
     * file control over what scope is processed.
     *
     * @param at the scope to be processed.
     */ Modifier public setAccess FormalParameter ReferenceType AccessType at StatementExpression MethodInvocation cmd MethodInvocation BinaryOperation + Literal ""-"" MethodInvocation at getValue setValue createArgument MethodDeclaration /**
     * Set the class that starts the doclet used in generating the
     * documentation.
     *
     * @param docletName the name of the doclet class.
     */ Modifier public setDoclet FormalParameter ReferenceType String docletName IfStatement BinaryOperation == MemberReference doclet Literal null BlockStatement StatementExpression Assignment MemberReference doclet ClassCreator ReferenceType DocletInfo = StatementExpression MethodInvocation doclet MethodInvocation getProject setProject End StatementExpression MethodInvocation doclet MemberReference docletName setName MethodDeclaration /**
     * Set the classpath used to find the doclet class.
     *
     * @param docletPath the doclet classpath.
     */ Modifier public setDocletPath FormalParameter ReferenceType Path docletPath IfStatement BinaryOperation == MemberReference doclet Literal null BlockStatement StatementExpression Assignment MemberReference doclet ClassCreator ReferenceType DocletInfo = StatementExpression MethodInvocation doclet MethodInvocation getProject setProject End StatementExpression MethodInvocation doclet MemberReference docletPath setPath MethodDeclaration /**
     * Set the classpath used to find the doclet class by reference.
     *
     * @param r the reference to the Path instance to use as the doclet
     *        classpath.
     */ Modifier public setDocletPathRef FormalParameter ReferenceType Reference r IfStatement BinaryOperation == MemberReference doclet Literal null BlockStatement StatementExpression Assignment MemberReference doclet ClassCreator ReferenceType DocletInfo = StatementExpression MethodInvocation doclet MethodInvocation getProject setProject End StatementExpression MethodInvocation doclet MethodInvocation MemberReference r setRefid createPath MethodDeclaration /**
     * Create a doclet to be used in the documentation generation.
     *
     * @return a new DocletInfo instance to be configured.
     */ Modifier public ReferenceType DocletInfo createDoclet StatementExpression Assignment MemberReference doclet ClassCreator ReferenceType DocletInfo = ReturnStatement MemberReference doclet MethodDeclaration /**
     * Add a taglet
     *
     * @param tagletInfo information about the taglet.
     */ Modifier public addTaglet FormalParameter ReferenceType ExtensionInfo tagletInfo StatementExpression MethodInvocation tags MemberReference tagletInfo addElement MethodDeclaration /**
     * Indicate whether Javadoc should produce old style (JDK 1.1)
     * documentation.
     *
     * This is not supported by JDK 1.1 and has been phased out in JDK 1.4
     *
     * @param b if true attempt to generate old style documentation.
     */ Modifier public setOld FormalParameter BasicType boolean b IfStatement MemberReference b BlockStatement IfStatement MemberReference javadoc1 BlockStatement StatementExpression MethodInvocation Literal ""Javadoc 1.1 doesn't support the -1.1 switch"" MemberReference Project MSG_WARN log IfStatement MemberReference javadoc4 BlockStatement StatementExpression MethodInvocation Literal ""Javadoc 1.4 doesn't support the -1.1 switch anymore"" MemberReference Project MSG_WARN log BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-1.1"" setValue createArgument End End End MethodDeclaration /**
     * Set the classpath to be used for this javadoc run.
     *
     * @param path an Ant Path object containing the compilation
     *        classpath.
     */ Modifier public setClasspath FormalParameter ReferenceType Path path IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath MemberReference path = BlockStatement StatementExpression MethodInvocation classpath MemberReference path append End MethodDeclaration /**
     * Create a Path to be configured with the classpath to use
     *
     * @return a new Path instance to be configured with the classpath.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation classpath createPath MethodDeclaration /**
     * Adds a reference to a CLASSPATH defined elsewhere.
     *
     * @param r the reference to an instance defining the classpath.
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration /**
     * Set the boot classpath to use.
     *
     * @param path the boot classpath.
     */ Modifier public setBootclasspath FormalParameter ReferenceType Path path IfStatement BinaryOperation == MemberReference bootclasspath Literal null BlockStatement StatementExpression Assignment MemberReference bootclasspath MemberReference path = BlockStatement StatementExpression MethodInvocation bootclasspath MemberReference path append End MethodDeclaration /**
     * Create a Path to be configured with the boot classpath
     *
     * @return a new Path instance to be configured with the boot classpath.
     */ Modifier public ReferenceType Path createBootclasspath IfStatement BinaryOperation == MemberReference bootclasspath Literal null BlockStatement StatementExpression Assignment MemberReference bootclasspath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MethodInvocation bootclasspath createPath MethodDeclaration /**
     * Adds a reference to a CLASSPATH defined elsewhere.
     *
     * @param r the reference to an instance defining the bootclasspath.
     */ Modifier public setBootClasspathRef FormalParameter ReferenceType Reference r StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createBootclasspath MethodDeclaration /**
     * Set the location of the extensions directories.
     *
     * @param path the string version of the path.
     * @deprecated Use the {@link #setExtdirs(Path)} version.
     */ Modifier public setExtdirs FormalParameter ReferenceType String path IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-extdirs"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference path setValue createArgument End MethodDeclaration /**
     * Set the location of the extensions directories.
     *
     * @param path a path containing the extension directories.
     */ Modifier public setExtdirs FormalParameter ReferenceType Path path IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-extdirs"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference path setPath createArgument End MethodDeclaration /**
     * Run javadoc in verbose mode
     *
     * @param b true if operation is to be verbose.
     */ Modifier public setVerbose FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-verbose"" add12ArgIf MethodDeclaration /**
     * Set the local to use in documentation generation.
     *
     * @param locale the locale to use.
     */ Modifier public setLocale FormalParameter ReferenceType String locale IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference locale setValue Literal true createArgument StatementExpression MethodInvocation cmd MethodInvocation Literal ""-locale"" setValue Literal true createArgument End MethodDeclaration /**
     * Set the encoding name of the source files,
     *
     * @param enc the name of the encoding for the source files.
     */ Modifier public setEncoding FormalParameter ReferenceType String enc StatementExpression MethodInvocation cmd MethodInvocation Literal ""-encoding"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference enc setValue createArgument MethodDeclaration /**
     * Include the version tag in the generated documentation.
     *
     * @param b true if the version tag should be included.
     */ Modifier public setVersion FormalParameter BasicType boolean b StatementExpression Assignment This MemberReference version MemberReference b = MethodDeclaration /**
     * Generate the &quot;use&quot page for each package.
     *
     * @param b true if the use page should be generated.
     */ Modifier public setUse FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-use"" add12ArgIf MethodDeclaration /**
     * Include the author tag in the generated documentation.
     *
     * @param b true if the author tag should be included.
     */ Modifier public setAuthor FormalParameter BasicType boolean b StatementExpression Assignment MemberReference author MemberReference b = MethodDeclaration /**
     * Generate a split index
     *
     * @param b true if the index should be split into a file per letter.
     */ Modifier public setSplitindex FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-splitindex"" add12ArgIf MethodDeclaration /**
     * Set the title to be placed in the HTML &lt;title&gt; tag of the
     * generated documentation.
     *
     * @param title the window title to use.
     */ Modifier public setWindowtitle FormalParameter ReferenceType String title StatementExpression MethodInvocation Literal ""-windowtitle"" MemberReference title add12ArgIfNotEmpty MethodDeclaration /**
     * Set the title of the generated overview page.
     *
     * @param doctitle the Document title.
     */ Modifier public setDoctitle FormalParameter ReferenceType String doctitle LocalVariableDeclaration ReferenceType Html VariableDeclarator h ClassCreator ReferenceType Html StatementExpression MethodInvocation h MemberReference doctitle addText StatementExpression MethodInvocation MemberReference h addDoctitle MethodDeclaration /**
     * Add a document title to use for the overview page.
     *
     * @param text the HTML element containing the document title.
     */ Modifier public addDoctitle FormalParameter ReferenceType Html text IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression Assignment MemberReference doctitle MemberReference text = End MethodDeclaration /**
     * Set the header text to be placed at the top of each output file.
     *
     * @param header the header text
     */ Modifier public setHeader FormalParameter ReferenceType String header LocalVariableDeclaration ReferenceType Html VariableDeclarator h ClassCreator ReferenceType Html StatementExpression MethodInvocation h MemberReference header addText StatementExpression MethodInvocation MemberReference h addHeader MethodDeclaration /**
     * Set the header text to be placed at the top of each output file.
     *
     * @param text the header text
     */ Modifier public addHeader FormalParameter ReferenceType Html text IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression Assignment MemberReference header MemberReference text = End MethodDeclaration /**
     * Set the footer text to be placed at the bottom of each output file.
     *
     * @param footer the footer text.
     */ Modifier public setFooter FormalParameter ReferenceType String footer LocalVariableDeclaration ReferenceType Html VariableDeclarator h ClassCreator ReferenceType Html StatementExpression MethodInvocation h MemberReference footer addText StatementExpression MethodInvocation MemberReference h addFooter MethodDeclaration /**
     * Set the footer text to be placed at the bottom of each output file.
     *
     * @param text the footer text.
     */ Modifier public addFooter FormalParameter ReferenceType Html text IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression Assignment MemberReference footer MemberReference text = End MethodDeclaration /**
     * Set the text to be placed at the bottom of each output file.
     *
     * @param bottom the bottom text.
     */ Modifier public setBottom FormalParameter ReferenceType String bottom LocalVariableDeclaration ReferenceType Html VariableDeclarator h ClassCreator ReferenceType Html StatementExpression MethodInvocation h MemberReference bottom addText StatementExpression MethodInvocation MemberReference h addBottom MethodDeclaration /**
     * Set the text to be placed at the bottom of each output file.
     *
     * @param text the bottom text.
     */ Modifier public addBottom FormalParameter ReferenceType Html text IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression Assignment MemberReference bottom MemberReference text = End MethodDeclaration /**
     * Link to docs at ""url"" using package list at ""url2""
     * - separate the URLs by using a space character.
     *
     * @param src the offline link specification (url and package list)
     */ Modifier public setLinkoffline FormalParameter ReferenceType String src IfStatement MemberReference ! javadoc1 BlockStatement LocalVariableDeclaration ReferenceType LinkArgument VariableDeclarator le MethodInvocation createLink StatementExpression MethodInvocation le Literal true setOffline LocalVariableDeclaration ReferenceType String VariableDeclarator linkOfflineError BinaryOperation + BinaryOperation + Literal ""The linkoffline attribute must include"" Literal "" a URL and a package-list file location separated by a"" Literal "" space"" IfStatement BinaryOperation == MethodInvocation src MethodInvocation length trim Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference linkOfflineError End LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference src Literal "" "" Literal false StatementExpression MethodInvocation le MethodInvocation tok nextToken setHref IfStatement MethodInvocation ! tok hasMoreTokens BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference linkOfflineError End StatementExpression MethodInvocation le MethodInvocation MethodInvocation MethodInvocation tok nextToken resolveFile getProject setPackagelistLoc End MethodDeclaration /**
     * Group specified packages together in overview page.
     *
     * @param src the group packages - a command separated list of group specs,
     *        each one being a group name and package specification separated
     *        by a space.
     */ Modifier public setGroup FormalParameter ReferenceType String src StatementExpression Assignment MemberReference group MemberReference src = MethodDeclaration /**
     * Create links to javadoc output at the given URL.
     */ Modifier public setLink FormalParameter ReferenceType String src IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference src setHref createLink End MethodDeclaration /**
     * Control deprecation infromation
     *
     * @param b If true, do not include deprecated information.
     */ Modifier public setNodeprecated FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-nodeprecated"" addArgIf MethodDeclaration /**
     * Control deprecated list generation
     *
     * @param b if true, do not generate deprecated list.
     */ Modifier public setNodeprecatedlist FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-nodeprecatedlist"" add12ArgIf MethodDeclaration /**
     * Control class tree generation.
     *
     * @param b if true, do not generate class hierarchy.
     */ Modifier public setNotree FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-notree"" addArgIf MethodDeclaration /**
     * Control generation of index.
     *
     * @param b if true, do not generate index.
     */ Modifier public setNoindex FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-noindex"" addArgIf MethodDeclaration /**
     * Control generation of help link.
     *
     * @param b if true, do not generate help link
     */ Modifier public setNohelp FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-nohelp"" add12ArgIf MethodDeclaration /**
     * Control generation of the navigation bar.
     *
     * @param b if true, do not generate navigation bar.
     */ Modifier public setNonavbar FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-nonavbar"" add12ArgIf MethodDeclaration /**
     * Control warnings about serial tag.
     *
     * @param b if true, generate warning about the serial tag.
     */ Modifier public setSerialwarn FormalParameter BasicType boolean b StatementExpression MethodInvocation MemberReference b Literal ""-serialwarn"" add12ArgIf MethodDeclaration /**
     * Specifies the CSS stylesheet file to use.
     *
     * @param f the file with the CSS to use.
     */ Modifier public setStylesheetfile FormalParameter ReferenceType File f IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-stylesheetfile"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference f setFile createArgument End MethodDeclaration /**
     * Specifies the HTML help file to use.
     *
     * @param f the file containing help content.
     */ Modifier public setHelpfile FormalParameter ReferenceType File f IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression MethodInvocation cmd MethodInvocation Literal ""-helpfile"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference f setFile createArgument End MethodDeclaration /**
     * Output file encoding name.
     *
     * @param enc name of the encoding to use.
     */ Modifier public setDocencoding FormalParameter ReferenceType String enc StatementExpression MethodInvocation cmd MethodInvocation Literal ""-docencoding"" setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MemberReference enc setValue createArgument MethodDeclaration /**
     * The name of a file containing the packages to process.
     *
     * @param src the file containing the package list.
     */ Modifier public setPackageList FormalParameter ReferenceType String src IfStatement MemberReference ! javadoc1 BlockStatement StatementExpression Assignment MemberReference packageList MemberReference src = End MethodDeclaration /**
     * Create link to javadoc output at the given URL.
     *
     * @return link argument to configure
     */ Modifier public ReferenceType LinkArgument createLink LocalVariableDeclaration ReferenceType LinkArgument VariableDeclarator la ClassCreator ReferenceType LinkArgument StatementExpression MethodInvocation links MemberReference la addElement ReturnStatement MemberReference la ClassDeclaration Modifier public /**
     * Represents a link triplet (href, whether link is offline, location of the
     * package list if off line)
     */ LinkArgument FieldDeclaration Modifier private ReferenceType String VariableDeclarator href FieldDeclaration Modifier private BasicType boolean VariableDeclarator offline Literal false FieldDeclaration Modifier private ReferenceType File VariableDeclarator packagelistLoc ConstructorDeclaration Modifier public LinkArgument MethodDeclaration Modifier public setHref FormalParameter ReferenceType String hr StatementExpression Assignment MemberReference href MemberReference hr = MethodDeclaration Modifier public ReferenceType String getHref ReturnStatement MemberReference href MethodDeclaration Modifier public setPackagelistLoc FormalParameter ReferenceType File src StatementExpression Assignment MemberReference packagelistLoc MemberReference src = MethodDeclaration Modifier public ReferenceType File getPackagelistLoc ReturnStatement MemberReference packagelistLoc MethodDeclaration Modifier public setOffline FormalParameter BasicType boolean offline StatementExpression Assignment This MemberReference offline MemberReference offline = MethodDeclaration Modifier public BasicType boolean isLinkOffline ReturnStatement MemberReference offline MethodDeclaration /**
     * Creates and adds a -tag argument. This is used to specify
     * custom tags. This argument is only available for JavaDoc 1.4,
     * and will generate a verbose message (and then be ignored)
     * when run on Java versions below 1.4.
     */ Modifier public ReferenceType TagArgument createTag IfStatement MemberReference ! javadoc4 BlockStatement StatementExpression MethodInvocation Literal ""-tag option not supported on JavaDoc < 1.4"" MemberReference Project MSG_VERBOSE log End LocalVariableDeclaration ReferenceType TagArgument VariableDeclarator ta ClassCreator ReferenceType TagArgument StatementExpression MethodInvocation tags MemberReference ta addElement ReturnStatement MemberReference ta FieldDeclaration /**
     * Scope element verbose names. (Defined here as fields
     * cannot be static in inner classes.) The first letter
     * from each element is used to build up the scope string.
     */ Modifier final static ReferenceType String VariableDeclarator SCOPE_ELEMENTS ArrayInitializer Literal ""overview"" Literal ""packages"" Literal ""types"" Literal ""constructors"" Literal ""methods"" Literal ""fields"" ClassDeclaration Modifier public /**
     * Class representing a -tag argument.
     */ TagArgument FieldDeclaration /** Name of the tag. */ Modifier private ReferenceType String VariableDeclarator name Literal null FieldDeclaration /** Description of the tag to place in the JavaDocs. */ Modifier private ReferenceType String VariableDeclarator description Literal null FieldDeclaration /** Whether or not the tag is enabled. */ Modifier private BasicType boolean VariableDeclarator enabled Literal true FieldDeclaration /**
         * Scope string of the tag. This will form the middle
         * argument of the -tag parameter when the tag is enabled
         * (with an X prepended for and is parsed from human-readable form.
         */ Modifier private ReferenceType String VariableDeclarator scope Literal ""a"" ConstructorDeclaration Modifier public /** Sole constructor. */ TagArgument MethodDeclaration /**
         * Sets the name of the tag.
         *
         * @param name The name of the tag.
         *             Must not be <code>null</code> or empty.
         */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
         * Sets the description of the tag. This is what appears in
         * the JavaDoc.
         *
         * @param description The description of the tag.
         *                    Must not be <code>null</code> or empty.
         */ Modifier public setDescription FormalParameter ReferenceType String description StatementExpression Assignment This MemberReference description MemberReference description = MethodDeclaration /**
         * Sets the scope of the tag. This is in comma-separated
         * form, with each element being one of ""all"" (the default),
         * ""overview"", ""packages"", ""types"", ""constructors"", ""methods"",
         * ""fields"". The elements are treated in a case-insensitive
         * manner.
         *
         * @param verboseScope The scope of the tag.
         *                     Must not be <code>null</code>,
         *                     should not be empty.
         *
         * @exception BuildException if all is specified along with
         * other elements, if any elements are repeated, if no
         * elements are specified, or if any unrecognised elements are
         * specified.
         */ Modifier public setScope FormalParameter ReferenceType String verboseScope BuildException StatementExpression Assignment MemberReference verboseScope MethodInvocation verboseScope MemberReference Locale US toLowerCase = LocalVariableDeclaration BasicType boolean VariableDeclarator elements ArrayCreator BasicType boolean MemberReference SCOPE_ELEMENTS length LocalVariableDeclaration BasicType boolean VariableDeclarator gotAll Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator gotNotAll Literal false LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference verboseScope Literal "","" WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator next MethodInvocation tok MethodInvocation trim nextToken IfStatement MethodInvocation next Literal ""all"" equals BlockStatement IfStatement MemberReference gotAll BlockStatement StatementExpression MethodInvocation MethodInvocation Literal ""Repeated tag scope element: all"" MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference gotAll Literal true = BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator i ForStatement ForControl Assignment MemberReference i Literal 0 = BinaryOperation < MemberReference i MemberReference SCOPE_ELEMENTS length MemberReference ++ i BlockStatement IfStatement MethodInvocation next MemberReference ArraySelector MemberReference i SCOPE_ELEMENTS equals BlockStatement BreakStatement End End IfStatement BinaryOperation == MemberReference i MemberReference SCOPE_ELEMENTS length BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Unrecognised scope element: "" MemberReference next BlockStatement IfStatement MemberReference ArraySelector MemberReference i elements BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Repeated tag scope element: "" MemberReference next MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference ArraySelector MemberReference i elements Literal true = StatementExpression Assignment MemberReference gotNotAll Literal true = End End End IfStatement BinaryOperation && MemberReference gotNotAll MemberReference gotAll BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Mixture of \""all\"" and other scope "" Literal ""elements in tag parameter."" End IfStatement BinaryOperation && MemberReference ! gotNotAll MemberReference ! gotAll BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""No scope elements specified in tag "" Literal ""parameter."" End IfStatement MemberReference gotAll BlockStatement StatementExpression Assignment This MemberReference scope Literal ""a"" = BlockStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buff ClassCreator ReferenceType StringBuffer MemberReference elements length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference elements length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i elements BlockStatement StatementExpression MethodInvocation buff MemberReference ArraySelector MemberReference i MethodInvocation Literal 0 charAt SCOPE_ELEMENTS append End End StatementExpression Assignment This MemberReference scope MethodInvocation buff toString = End MethodDeclaration /**
         * Sets whether or not the tag is enabled.
         *
         * @param enabled Whether or not this tag is enabled.
         */ Modifier public setEnabled FormalParameter BasicType boolean enabled StatementExpression Assignment This MemberReference enabled MemberReference enabled = MethodDeclaration /**
         * Returns the -tag parameter this argument represented.
         *
         * @exception BuildException if either the name or description
         *                           is <code>null</code> or empty.
         */ Modifier public ReferenceType String getParameter BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference name Literal null MethodInvocation name Literal """" equals BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No name specified for custom tag."" End IfStatement BinaryOperation != MemberReference description Literal null BlockStatement ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference name Literal "":"" TernaryExpression MemberReference enabled Literal """" Literal ""X"" MemberReference scope Literal "":"" MemberReference description BlockStatement ReturnStatement MemberReference name End ReferenceType FileSet MethodDeclaration /**
     * Separates packages on the overview page into whatever
     * groups you specify, one group per table.
     */ Modifier public ReferenceType GroupArgument createGroup LocalVariableDeclaration ReferenceType GroupArgument VariableDeclarator ga ClassCreator ReferenceType GroupArgument StatementExpression MethodInvocation groups MemberReference ga addElement ReturnStatement MemberReference ga ClassDeclaration Modifier public GroupArgument FieldDeclaration Modifier private ReferenceType Html VariableDeclarator title FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator packages ClassCreator ReferenceType Vector ConstructorDeclaration Modifier public GroupArgument MethodDeclaration Modifier public setTitle FormalParameter ReferenceType String src LocalVariableDeclaration ReferenceType Html VariableDeclarator h ClassCreator ReferenceType Html StatementExpression MethodInvocation h MemberReference src addText StatementExpression MethodInvocation MemberReference h addTitle MethodDeclaration Modifier public addTitle FormalParameter ReferenceType Html text StatementExpression Assignment MemberReference title MemberReference text = MethodDeclaration Modifier public ReferenceType String getTitle ReturnStatement TernaryExpression BinaryOperation != MemberReference title Literal null MethodInvocation title getText Literal null MethodDeclaration Modifier public setPackages FormalParameter ReferenceType String src LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference src Literal "","" WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator p MethodInvocation tok nextToken LocalVariableDeclaration ReferenceType PackageName VariableDeclarator pn ClassCreator ReferenceType PackageName StatementExpression MethodInvocation pn MemberReference p setName StatementExpression MethodInvocation MemberReference pn addPackage End MethodDeclaration Modifier public addPackage FormalParameter ReferenceType PackageName pn StatementExpression MethodInvocation packages MemberReference pn addElement MethodDeclaration Modifier public ReferenceType String getPackages LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator p ClassCreator ReferenceType StringBuffer ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation packages size MemberReference ++ i BlockStatement IfStatement BinaryOperation > MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation p Literal "":"" append End StatementExpression MethodInvocation p MethodInvocation packages MethodInvocation toString MemberReference i elementAt append End ReturnStatement MethodInvocation p toString MethodDeclaration /**
     * Charset for cross-platform viewing of generated documentation.
     */ Modifier public setCharset FormalParameter ReferenceType String src StatementExpression This MethodInvocation Literal ""-charset"" MemberReference src add12ArgIfNotEmpty MethodDeclaration /**
     * Should the build process fail if javadoc fails (as indicated by
     * a non zero return code)?
     *
     * <p>Default is false.</p>
     */ Modifier public setFailonerror FormalParameter BasicType boolean b StatementExpression Assignment MemberReference failOnError MemberReference b = MethodDeclaration /**
     * Enables the -source switch, will be ignored if javadoc is not
     * the 1.4 version.
     *
     * @since Ant 1.5
     */ Modifier public setSource FormalParameter ReferenceType String source IfStatement MemberReference ! javadoc4 BlockStatement StatementExpression MethodInvocation Literal ""-source option not supported on JavaDoc < 1.4"" MemberReference Project MSG_VERBOSE log End StatementExpression Assignment This MemberReference source MemberReference source = MethodDeclaration /**
     * Adds a packageset.
     *
     * <p>All included directories will be translated into package
     * names be converting the directory separator into dots.</p>
     *
     * @since 1.5
     */ Modifier public addPackageset FormalParameter ReferenceType DirSet packageSet StatementExpression MethodInvocation packageSets MemberReference packageSet addElement MethodDeclaration /**
     * Adds a fileset.
     *
     * <p>All included files will be added as sourcefiles.  The task
     * will automatically add
     * <code>includes=&quot;**&#47;*.java&quot;</code> to the
     * fileset.</p>
     *
     * @since 1.5
     */ Modifier public addFileset FormalParameter ReferenceType FileSet fs StatementExpression MethodInvocation fileSets MemberReference fs addElement MethodDeclaration /**
     * Enables the -linksource switch, will be ignored if javadoc is not
     * the 1.4 version. Default is false
     *
     * @since Ant 1.6
     */ Modifier public setLinksource FormalParameter BasicType boolean b IfStatement MemberReference ! javadoc4 BlockStatement StatementExpression MethodInvocation Literal ""-linksource option not supported on JavaDoc < 1.4"" MemberReference Project MSG_VERBOSE log End StatementExpression Assignment This MemberReference linksource MemberReference b = MethodDeclaration /**
     * Enables the -linksource switch, will be ignored if javadoc is not
     * the 1.4 version. Default is false
     *
     * @since Ant 1.6
     */ Modifier public setBreakiterator FormalParameter BasicType boolean b IfStatement MemberReference ! javadoc4 BlockStatement StatementExpression MethodInvocation Literal ""-breakiterator option not supported on JavaDoc < 1.4"" MemberReference Project MSG_VERBOSE log End StatementExpression Assignment This MemberReference breakiterator MemberReference b = MethodDeclaration /**
     * Enables the -noqualifier switch, will be ignored if javadoc is not
     * the 1.4 version.
     *
     * @since Ant 1.6
     */ Modifier public setNoqualifier FormalParameter ReferenceType String noqualifier IfStatement MemberReference ! javadoc4 BlockStatement StatementExpression MethodInvocation Literal ""-noqualifier option not supported on JavaDoc < 1.4"" MemberReference Project MSG_VERBOSE log End StatementExpression Assignment This MemberReference noqualifier MemberReference noqualifier = MethodDeclaration Modifier public execute BuildException IfStatement Literal MethodInvocation MethodInvocation getTaskType equals ""javadoc2"" BlockStatement StatementExpression MethodInvocation Literal ""!! javadoc2 is deprecated. Use javadoc instead. !!"" log End LocalVariableDeclaration ReferenceType Vector VariableDeclarator packagesToDoc ClassCreator ReferenceType Vector LocalVariableDeclaration ReferenceType Path VariableDeclarator sourceDirs ClassCreator ReferenceType Path MethodInvocation getProject IfStatement BinaryOperation && BinaryOperation != MemberReference packageList Literal null BinaryOperation == MemberReference sourcePath Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""sourcePath attribute must be set when "" Literal ""specifying packagelist."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End IfStatement BinaryOperation != MemberReference sourcePath Literal null BlockStatement StatementExpression MethodInvocation sourceDirs MemberReference sourcePath addExisting End StatementExpression MethodInvocation MemberReference packagesToDoc MemberReference sourceDirs parsePackages IfStatement BinaryOperation && BinaryOperation != MethodInvocation packagesToDoc size Literal 0 BinaryOperation == MethodInvocation sourceDirs size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""sourcePath attribute must be set when "" Literal ""specifying package names."" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End LocalVariableDeclaration ReferenceType Vector VariableDeclarator sourceFilesToDoc Cast ReferenceType Vector MethodInvocation sourceFiles clone StatementExpression MethodInvocation MemberReference sourceFilesToDoc addFileSets IfStatement BinaryOperation && BinaryOperation && BinaryOperation == MemberReference packageList Literal null BinaryOperation == MethodInvocation packagesToDoc size Literal 0 BinaryOperation == MethodInvocation sourceFilesToDoc size Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""No source files and no packages have "" Literal ""been specified."" End StatementExpression MethodInvocation Literal ""Generating Javadoc"" MemberReference Project MSG_INFO log LocalVariableDeclaration ReferenceType Commandline VariableDeclarator toExecute Cast ReferenceType Commandline MethodInvocation cmd clone StatementExpression MethodInvocation toExecute MethodInvocation JavaEnvUtils Literal ""javadoc"" getJdkExecutable setExecutable IfStatement BinaryOperation != MemberReference doctitle Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-doctitle"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation MethodInvocation doctitle getText expand setValue createArgument End IfStatement BinaryOperation != MemberReference header Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-header"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation MethodInvocation header getText expand setValue createArgument End IfStatement BinaryOperation != MemberReference footer Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-footer"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation MethodInvocation footer getText expand setValue createArgument End IfStatement BinaryOperation != MemberReference bottom Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-bottom"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation MethodInvocation bottom getText expand setValue createArgument End IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference classpath ClassCreator MethodInvocation Literal ""last"" concatSystemClasspath ReferenceType Path MethodInvocation getProject = BlockStatement StatementExpression Assignment MemberReference classpath MethodInvocation classpath Literal ""ignore"" concatSystemClasspath = End IfStatement MemberReference ! javadoc1 BlockStatement IfStatement BinaryOperation > MethodInvocation classpath size Literal 0 BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-classpath"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference classpath setPath createArgument End IfStatement BinaryOperation > MethodInvocation sourceDirs size Literal 0 BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-sourcepath"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference sourceDirs setPath createArgument End BlockStatement StatementExpression MethodInvocation sourceDirs MemberReference classpath append IfStatement BinaryOperation > MethodInvocation sourceDirs size Literal 0 BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-classpath"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference sourceDirs setPath createArgument End End IfStatement BinaryOperation && MemberReference version BinaryOperation == MemberReference doclet Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-version"" setValue createArgument End IfStatement BinaryOperation && MemberReference author BinaryOperation == MemberReference doclet Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-author"" setValue createArgument End IfStatement BinaryOperation || MemberReference javadoc1 BinaryOperation == MemberReference doclet Literal null BlockStatement IfStatement BinaryOperation == MemberReference destDir Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg Literal ""destDir attribute must be set!"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg End End IfStatement MemberReference ! javadoc1 BlockStatement IfStatement BinaryOperation != MemberReference doclet Literal null BlockStatement IfStatement BinaryOperation == MethodInvocation doclet getName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""The doclet name must be "" Literal ""specified."" MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-doclet"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation doclet getName setValue createArgument IfStatement BinaryOperation != MethodInvocation doclet getPath Literal null BlockStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator docletPath MethodInvocation doclet MethodInvocation Literal ""ignore"" concatSystemClasspath getPath IfStatement BinaryOperation != MethodInvocation docletPath size Literal 0 BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-docletpath"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference docletPath setPath createArgument End End ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation doclet getParams MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType DocletParam VariableDeclarator param Cast ReferenceType DocletParam MethodInvocation e nextElement IfStatement BinaryOperation == MethodInvocation param getName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Doclet parameters must "" Literal ""have a name"" End StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation param getName setValue createArgument IfStatement BinaryOperation != MethodInvocation param getValue Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation param getValue setValue createArgument End End End End IfStatement BinaryOperation && BinaryOperation != MemberReference bootclasspath Literal null BinaryOperation > MethodInvocation bootclasspath size Literal 0 BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-bootclasspath"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference bootclasspath setPath createArgument End IfStatement BinaryOperation != MethodInvocation links size Literal 0 BlockStatement ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation links elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType LinkArgument VariableDeclarator la Cast ReferenceType LinkArgument MethodInvocation e nextElement IfStatement BinaryOperation || BinaryOperation == MethodInvocation la getHref Literal null BinaryOperation == MethodInvocation la MethodInvocation length getHref Literal 0 BlockStatement StatementExpression MethodInvocation Literal ""No href was given for the link - skipping"" MemberReference Project MSG_VERBOSE log ContinueStatement BlockStatement TryStatement LocalVariableDeclaration ReferenceType URL VariableDeclarator base ClassCreator ReferenceType URL Literal ""file://."" StatementExpression ClassCreator ReferenceType URL MemberReference base MethodInvocation la getHref CatchClause CatchClauseParameter MalformedURLException mue StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Link href \"""" MethodInvocation la getHref Literal ""\"" is not a valid url - skipping link"" MemberReference Project MSG_WARN log ContinueStatement End IfStatement MethodInvocation la isLinkOffline BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator packageListLocation MethodInvocation la getPackagelistLoc IfStatement BinaryOperation == MemberReference packageListLocation Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""The package list "" Literal "" location for link "" MethodInvocation la getHref Literal "" must be provided because the link is "" Literal ""offline"" End LocalVariableDeclaration ReferenceType File VariableDeclarator packageListFile ClassCreator ReferenceType File MemberReference packageListLocation Literal ""package-list"" IfStatement MethodInvocation packageListFile exists BlockStatement TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator packageListURL MethodInvocation fileUtils MethodInvocation toExternalForm MemberReference packageListLocation getFileURL StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-linkoffline"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation la getHref setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference packageListURL setValue createArgument CatchClause CatchClauseParameter MalformedURLException ex StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Warning: Package list location was "" Literal ""invalid "" MemberReference packageListLocation MemberReference Project MSG_WARN log BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Warning: No package list was found at "" MemberReference packageListLocation MemberReference Project MSG_VERBOSE log End BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-link"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation la getHref setValue createArgument End End End IfStatement BinaryOperation != MemberReference group Literal null BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference group Literal "","" Literal false WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator grp MethodInvocation tok MethodInvocation trim nextToken LocalVariableDeclaration BasicType int VariableDeclarator space MethodInvocation grp Literal "" "" indexOf IfStatement BinaryOperation > MemberReference space Literal 0 BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation grp Literal 0 MemberReference space substring LocalVariableDeclaration ReferenceType String VariableDeclarator pkgList MethodInvocation grp BinaryOperation + MemberReference space Literal 1 substring StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-group"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference name setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference pkgList setValue createArgument End End End IfStatement BinaryOperation != MethodInvocation groups size Literal 0 BlockStatement ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation groups elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType GroupArgument VariableDeclarator ga Cast ReferenceType GroupArgument MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator title MethodInvocation ga getTitle LocalVariableDeclaration ReferenceType String VariableDeclarator packages MethodInvocation ga getPackages IfStatement BinaryOperation || BinaryOperation == MemberReference title Literal null BinaryOperation == MemberReference packages Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""The title and packages must "" Literal ""be specified for group "" Literal ""elements."" End StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-group"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation MemberReference title expand setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference packages setValue createArgument End End IfStatement MemberReference javadoc4 BlockStatement ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation tags elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator element MethodInvocation e nextElement IfStatement BinaryOperation instanceof MemberReference element ReferenceType TagArgument BlockStatement LocalVariableDeclaration ReferenceType TagArgument VariableDeclarator ta Cast ReferenceType TagArgument MemberReference element LocalVariableDeclaration ReferenceType File VariableDeclarator tagDir MethodInvocation ta MethodInvocation getProject getDir IfStatement BinaryOperation == MemberReference tagDir Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-tag"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation ta getParameter setValue createArgument BlockStatement LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator tagDefScanner MethodInvocation ta MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation tagDefScanner getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator tagDefFile ClassCreator ReferenceType File MemberReference tagDir MemberReference ArraySelector MemberReference i files TryStatement LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator in ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType FileReader MemberReference tagDefFile LocalVariableDeclaration ReferenceType String VariableDeclarator line Literal null WhileStatement BinaryOperation != Assignment MemberReference line MethodInvocation in readLine = Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-tag"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference line setValue createArgument End StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Couldn't read "" Literal "" tag file from "" MethodInvocation tagDefFile getAbsolutePath MemberReference ioe End End BlockStatement LocalVariableDeclaration ReferenceType ExtensionInfo VariableDeclarator tagletInfo Cast ReferenceType ExtensionInfo MemberReference element StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-taglet"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MethodInvocation tagletInfo getName setValue createArgument IfStatement BinaryOperation != MethodInvocation tagletInfo getPath Literal null BlockStatement LocalVariableDeclaration ReferenceType Path VariableDeclarator tagletPath MethodInvocation tagletInfo MethodInvocation Literal ""ignore"" concatSystemClasspath getPath IfStatement BinaryOperation != MethodInvocation tagletPath size Literal 0 BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-tagletpath"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference tagletPath setPath createArgument End End End End IfStatement BinaryOperation != MemberReference source Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-source"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference source setValue createArgument End IfStatement BinaryOperation && MemberReference linksource BinaryOperation == MemberReference doclet Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-linksource"" setValue createArgument End IfStatement BinaryOperation && MemberReference breakiterator BinaryOperation == MemberReference doclet Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-breakiterator"" setValue createArgument End IfStatement BinaryOperation && BinaryOperation != MemberReference noqualifier Literal null BinaryOperation == MemberReference doclet Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation Literal ""-noqualifier"" setValue createArgument StatementExpression MethodInvocation toExecute MethodInvocation MemberReference noqualifier setValue createArgument End End End LocalVariableDeclaration ReferenceType File VariableDeclarator tmpList Literal null LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator srcListWriter Literal null TryStatement IfStatement MemberReference useExternalFile BlockStatement IfStatement BinaryOperation == MemberReference tmpList Literal null BlockStatement StatementExpression Assignment MemberReference tmpList MethodInvocation fileUtils Literal ""javadoc"" Literal """" Literal null createTempFile = StatementExpression MethodInvocation tmpList deleteOnExit StatementExpression MethodInvocation toExecute MethodInvocation BinaryOperation + Literal ""@"" MethodInvocation tmpList getAbsolutePath setValue createArgument End StatementExpression Assignment MemberReference srcListWriter ClassCreator ReferenceType PrintWriter ClassCreator ReferenceType FileWriter MethodInvocation tmpList getAbsolutePath Literal true = End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation packagesToDoc elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator packageName Cast ReferenceType String MethodInvocation e nextElement IfStatement MemberReference useExternalFile BlockStatement StatementExpression MethodInvocation srcListWriter MemberReference packageName println BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation MemberReference packageName setValue createArgument End End StatementExpression Assignment MemberReference e MethodInvocation sourceFilesToDoc elements = WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType SourceFile VariableDeclarator sf Cast ReferenceType SourceFile MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator sourceFileName MethodInvocation sf MethodInvocation getAbsolutePath getFile IfStatement MemberReference useExternalFile BlockStatement IfStatement BinaryOperation && MemberReference javadoc4 BinaryOperation > MethodInvocation sourceFileName Literal "" "" indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation srcListWriter BinaryOperation + BinaryOperation + Literal ""\"""" MemberReference sourceFileName Literal ""\"""" println BlockStatement StatementExpression MethodInvocation srcListWriter MemberReference sourceFileName println End BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation MemberReference sourceFileName setValue createArgument End End CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation tmpList delete ThrowStatement ClassCreator ReferenceType BuildException Literal ""Error creating temporary file"" MemberReference e MethodInvocation getLocation IfStatement BinaryOperation != MemberReference srcListWriter Literal null BlockStatement StatementExpression MethodInvocation srcListWriter close End IfStatement BinaryOperation != MemberReference packageList Literal null BlockStatement StatementExpression MethodInvocation toExecute MethodInvocation BinaryOperation + Literal ""@"" MemberReference packageList setValue createArgument End StatementExpression MethodInvocation MethodInvocation toExecute describeCommand MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation Literal ""Javadoc execution"" MemberReference Project MSG_INFO log LocalVariableDeclaration ReferenceType JavadocOutputStream VariableDeclarator out ClassCreator ReferenceType JavadocOutputStream MemberReference Project MSG_INFO LocalVariableDeclaration ReferenceType JavadocOutputStream VariableDeclarator err ClassCreator ReferenceType JavadocOutputStream MemberReference Project MSG_WARN LocalVariableDeclaration ReferenceType Execute VariableDeclarator exe ClassCreator ReferenceType Execute ClassCreator ReferenceType PumpStreamHandler MemberReference out MemberReference err StatementExpression MethodInvocation exe MethodInvocation getProject setAntRun StatementExpression MethodInvocation exe Literal null setWorkingDirectory TryStatement StatementExpression MethodInvocation exe MethodInvocation toExecute getCommandline setCommandline LocalVariableDeclaration BasicType int VariableDeclarator ret MethodInvocation exe execute IfStatement BinaryOperation && BinaryOperation != MemberReference ret Literal 0 MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Javadoc returned "" MemberReference ret MethodInvocation getLocation End CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Javadoc failed: "" MemberReference e MemberReference e MethodInvocation getLocation IfStatement BinaryOperation != MemberReference tmpList Literal null BlockStatement StatementExpression MethodInvocation tmpList delete StatementExpression Assignment MemberReference tmpList Literal null = End StatementExpression MethodInvocation out logFlush StatementExpression MethodInvocation err logFlush TryStatement StatementExpression MethodInvocation out close StatementExpression MethodInvocation err close CatchClause CatchClauseParameter IOException e MethodDeclaration /**
     * Add the files matched by the nested filesets to the Vector as
     * SourceFile instances.
     *
     * @since 1.5
     */ Modifier private addFileSets FormalParameter ReferenceType Vector sf LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation fileSets elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MethodInvocation e nextElement IfStatement BinaryOperation && MethodInvocation ! fs hasPatterns MethodInvocation ! fs hasSelectors BlockStatement StatementExpression Assignment MemberReference fs Cast ReferenceType FileSet MethodInvocation fs clone = StatementExpression MethodInvocation fs MethodInvocation Literal ""**/*.java"" setName createInclude End LocalVariableDeclaration ReferenceType File VariableDeclarator baseDir MethodInvocation fs MethodInvocation getProject getDir LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation fs MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation ds getIncludedFiles ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement StatementExpression MethodInvocation sf ClassCreator ReferenceType SourceFile ClassCreator ReferenceType File MemberReference baseDir MemberReference ArraySelector MemberReference i files addElement End End MethodDeclaration /**
     * Add the directories matched by the nested dirsets to the Vector
     * and the base directories of the dirsets to the Path.  It also
     * handles the packages and excludepackages attributes and
     * elements.
     *
     * @since 1.5
     */ Modifier private parsePackages FormalParameter ReferenceType Vector pn FormalParameter ReferenceType Path sp LocalVariableDeclaration ReferenceType Vector VariableDeclarator addedPackages ClassCreator ReferenceType Vector LocalVariableDeclaration ReferenceType Vector VariableDeclarator dirSets Cast ReferenceType Vector MethodInvocation packageSets clone IfStatement BinaryOperation && BinaryOperation != MemberReference sourcePath Literal null BinaryOperation > MethodInvocation packageNames size Literal 0 BlockStatement LocalVariableDeclaration ReferenceType PatternSet VariableDeclarator ps ClassCreator ReferenceType PatternSet LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation packageNames elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType PackageName VariableDeclarator p Cast ReferenceType PackageName MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator pkg MethodInvocation p MethodInvocation Literal '.' Literal '/' replace getName IfStatement MethodInvocation pkg Literal ""*"" endsWith BlockStatement StatementExpression Assignment MemberReference pkg Literal ""*"" += End StatementExpression MethodInvocation ps MethodInvocation MemberReference pkg setName createInclude End StatementExpression Assignment MemberReference e MethodInvocation excludePackageNames elements = WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType PackageName VariableDeclarator p Cast ReferenceType PackageName MethodInvocation e nextElement LocalVariableDeclaration ReferenceType String VariableDeclarator pkg MethodInvocation p MethodInvocation Literal '.' Literal '/' replace getName IfStatement MethodInvocation pkg Literal ""*"" endsWith BlockStatement StatementExpression Assignment MemberReference pkg Literal ""*"" += End StatementExpression MethodInvocation ps MethodInvocation MemberReference pkg setName createExclude End LocalVariableDeclaration ReferenceType String VariableDeclarator pathElements MethodInvocation sourcePath list ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference pathElements length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType DirSet VariableDeclarator ds ClassCreator ReferenceType DirSet StatementExpression MethodInvocation ds MemberReference useDefaultExcludes setDefaultexcludes StatementExpression MethodInvocation ds ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i pathElements setDir StatementExpression MethodInvocation ds MethodInvocation MemberReference ps addConfiguredPatternset createPatternSet StatementExpression MethodInvocation dirSets MemberReference ds addElement End End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation dirSets elements WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType DirSet VariableDeclarator ds Cast ReferenceType DirSet MethodInvocation e nextElement LocalVariableDeclaration ReferenceType File VariableDeclarator baseDir MethodInvocation ds MethodInvocation getProject getDir StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""scanning "" MemberReference baseDir Literal "" for packages."" MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator dsc MethodInvocation ds MethodInvocation getProject getDirectoryScanner LocalVariableDeclaration ReferenceType String VariableDeclarator dirs MethodInvocation dsc getIncludedDirectories LocalVariableDeclaration BasicType boolean VariableDeclarator containsPackages Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference dirs length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator pd ClassCreator ReferenceType File MemberReference baseDir MemberReference ArraySelector MemberReference i dirs LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation pd ClassCreator ReferenceType FilenameFilter MethodDeclaration Modifier public BasicType boolean accept FormalParameter ReferenceType File dir1 FormalParameter ReferenceType String name IfStatement MethodInvocation name Literal "".java"" endsWith BlockStatement ReturnStatement Literal true End ReturnStatement Literal false list IfStatement BinaryOperation > MemberReference files length Literal 0 BlockStatement StatementExpression Assignment MemberReference containsPackages Literal true = LocalVariableDeclaration ReferenceType String VariableDeclarator packageName MemberReference ArraySelector MemberReference i MethodInvocation MemberReference File separatorChar Literal '.' replace dirs IfStatement MethodInvocation ! addedPackages MemberReference packageName contains BlockStatement StatementExpression MethodInvocation addedPackages MemberReference packageName addElement StatementExpression MethodInvocation pn MemberReference packageName addElement End End End IfStatement MemberReference containsPackages BlockStatement StatementExpression MethodInvocation sp MethodInvocation MemberReference baseDir setLocation createPathElement BlockStatement StatementExpression MethodInvocation BinaryOperation + MemberReference baseDir Literal "" doesn\'t contain any packages, dropping it."" MemberReference Project MSG_VERBOSE log End End ClassDeclaration Modifier private JavadocOutputStream ConstructorDeclaration JavadocOutputStream FormalParameter BasicType int level StatementExpression SuperConstructorInvocation This Javadoc MemberReference level FieldDeclaration Modifier private ReferenceType String VariableDeclarator queuedLine Literal null MethodDeclaration Modifier protected processLine FormalParameter ReferenceType String line FormalParameter BasicType int messageLevel IfStatement BinaryOperation && BinaryOperation == MemberReference messageLevel MemberReference Project MSG_INFO MethodInvocation line Literal ""Generating "" startsWith BlockStatement IfStatement BinaryOperation != MemberReference queuedLine Literal null BlockStatement StatementExpression SuperMethodInvocation MemberReference queuedLine MemberReference Project MSG_VERBOSE processLine End StatementExpression Assignment MemberReference queuedLine MemberReference line = BlockStatement IfStatement BinaryOperation != MemberReference queuedLine Literal null BlockStatement IfStatement MethodInvocation line Literal ""Building "" startsWith BlockStatement StatementExpression SuperMethodInvocation MemberReference queuedLine MemberReference Project MSG_VERBOSE processLine BlockStatement StatementExpression SuperMethodInvocation MemberReference queuedLine MemberReference Project MSG_INFO processLine End StatementExpression Assignment MemberReference queuedLine Literal null = End StatementExpression SuperMethodInvocation MemberReference line MemberReference messageLevel processLine End MethodDeclaration Modifier protected logFlush IfStatement BinaryOperation != MemberReference queuedLine Literal null BlockStatement StatementExpression SuperMethodInvocation MemberReference queuedLine MemberReference Project MSG_VERBOSE processLine StatementExpression Assignment MemberReference queuedLine Literal null = End ReferenceType LogOutputStream MethodDeclaration /**
     * Convenience method to expand properties.
     */ Modifier protected ReferenceType String expand FormalParameter ReferenceType String content ReturnStatement MethodInvocation MethodInvocation MemberReference content replaceProperties getProject ReferenceType Task",0
598,598,,0
300,300,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.ProjectComponent Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference ClassDeclaration Modifier public /**
 * Offers some helper methods on the Path structure in ant.
 *
 * <p>Basic idea behind this utility class is to use it from inside the
 * different ant objects (and user defined objects) that need classLoading
 * for their operation.
 * Normally those would have a setClasspathRef() {for the @classpathref}
 * and/or a createClasspath() {for the nested &lt;classpath&gt;}
 * Typically one would have in your Ant Task or DataType</p>
 *
 * <pre><code>
 * ClasspathUtils.Delegate cpDelegate;
 *
 * public void init() {
 *     this.cpDelegate = ClasspathUtils.getDelegate(this);
 *     super.init();
 * }
 *
 * public void setClasspathRef(Reference r) {
 *     this.cpDelegate.setClasspathRef(r);
 * }
 *
 * public Path createClasspath() {
 *     return this.cpDelegate.createClasspath();
 * }
 *
 * public void setClassname(String fqcn) {
 *     this.cpDelegate.setClassname(fqcn);
 * }
 * </code></pre>
 *
 * <p>At execution time, when you actually need the classloading
 * you can just:</p>
 *
 * <pre><code>
 *     Object o = this.cpDelegate.newInstance();
 * </code></pre>
 *
 * @since Ant 1.6
 */ ClasspathUtils FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator LOADER_ID_PREFIX Literal ""ant.loader."" FieldDeclaration /**
     * Name of the magic property that controls classloader reuse in Ant 1.4.
     */ Modifier public final static ReferenceType String VariableDeclarator REUSE_LOADER_REF Literal ""ant.reuse.loader"" MethodDeclaration /**
     * Convenience overloaded version of {@link
     * #getClassLoaderForPath(Project, Reference, boolean)}.
     *
     * <p>Assumes the logical 'false' for the reverseLoader.</p>
     *
     * @param p
     * @param ref
     * @return The class loader
     */ Modifier public static ReferenceType ClassLoader getClassLoaderForPath FormalParameter ReferenceType Project p FormalParameter ReferenceType Reference ref ReturnStatement MethodInvocation MemberReference p MemberReference ref Literal false getClassLoaderForPath MethodDeclaration /**
     * Convenience overloaded version of {@link #getClassLoaderForPath(Project, Path,
     * String, boolean)}.
     *
     * <p>Delegates to the other one after extracting the referenced
     * Path from the Project This checks also that the passed
     * Reference is pointing to a Path all right.</p>
     * @param p current ant project
     * @param ref Reference to Path structure
     * @param reverseLoader if set to true this new loader will take
     * precedence over it's parent (which is contra the regular
     * classloader behaviour)
     * @return The class loader
     */ Modifier public static ReferenceType ClassLoader getClassLoaderForPath FormalParameter ReferenceType Project p FormalParameter ReferenceType Reference ref FormalParameter BasicType boolean reverseLoader LocalVariableDeclaration ReferenceType String VariableDeclarator pathId MethodInvocation ref getRefId LocalVariableDeclaration ReferenceType Object VariableDeclarator path MethodInvocation p MemberReference pathId getReference IfStatement BinaryOperation instanceof MemberReference path ReferenceType Path BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""The specified classpathref "" MemberReference pathId Literal "" does not reference a Path."" End LocalVariableDeclaration ReferenceType String VariableDeclarator loaderId BinaryOperation + MemberReference LOADER_ID_PREFIX MemberReference pathId ReturnStatement MethodInvocation MemberReference p Cast ReferenceType Path MemberReference path MemberReference loaderId MemberReference reverseLoader getClassLoaderForPath MethodDeclaration /**
     * Convenience overloaded version of {@link
     * #getClassLoaderForPath(Project, Path, String, boolean)}.
     *
     * <p>Assumes the logical 'false' for the reverseLoader.</p>
     *
     * @param path
     * @param loaderId
     * @return The class loader
     */ Modifier public static ReferenceType ClassLoader getClassLoaderForPath FormalParameter ReferenceType Project p FormalParameter ReferenceType Path path FormalParameter ReferenceType String loaderId ReturnStatement MethodInvocation MemberReference p MemberReference path MemberReference loaderId Literal false getClassLoaderForPath MethodDeclaration /**
     * Convenience overloaded version of {@link
     * #getClassLoaderForPath(Project, Path, String, boolean, boolean)}.
     *
     * <p>Sets value for 'reuseLoader' to true if the magic property
     * has been set.</p>
     *
     * @param path
     * @param loaderId
     * @return The class loader
     */ Modifier public static ReferenceType ClassLoader getClassLoaderForPath FormalParameter ReferenceType Project p FormalParameter ReferenceType Path path FormalParameter ReferenceType String loaderId FormalParameter BasicType boolean reverseLoader ReturnStatement MethodInvocation MemberReference p MemberReference path MemberReference loaderId MemberReference reverseLoader MethodInvocation MemberReference p isMagicPropertySet getClassLoaderForPath MethodDeclaration /**
     * Gets a classloader that loads classes from the classpath
     * defined in the path argument.
     *
     * <p>Based on the setting of the magic property
     * 'ant.reuse.loader' this will try to reuse the perviously
     * created loader with that id, and of course store it there upon
     * creation.</p>
     * @param path Path object to be used as classpath for this classloader
     * @param loaderId identification for this Loader,
     * @param reverseLoader if set to true this new loader will take
     * precedence over it's parent (which is contra the regular
     * @param p Ant Project where the handled components are living in.
     * classloader behaviour)
     * @return ClassLoader that uses the Path as its classpath.
     */ Modifier public static ReferenceType ClassLoader getClassLoaderForPath FormalParameter ReferenceType Project p FormalParameter ReferenceType Path path FormalParameter ReferenceType String loaderId FormalParameter BasicType boolean reverseLoader FormalParameter BasicType boolean reuseLoader LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator cl Literal null IfStatement BinaryOperation && BinaryOperation != MemberReference loaderId Literal null MemberReference reuseLoader BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator reusedLoader MethodInvocation p MemberReference loaderId getReference IfStatement BinaryOperation && BinaryOperation != MemberReference reusedLoader Literal null BinaryOperation instanceof MemberReference reusedLoader ReferenceType ClassLoader BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""The specified loader id "" MemberReference loaderId Literal "" does not reference a class loader"" End StatementExpression Assignment MemberReference cl Cast ReferenceType ClassLoader MemberReference reusedLoader = End IfStatement BinaryOperation == MemberReference cl Literal null BlockStatement StatementExpression Assignment MemberReference cl MethodInvocation MemberReference p MemberReference path MemberReference reverseLoader getUniqueClassLoaderForPath = IfStatement BinaryOperation && BinaryOperation != MemberReference loaderId Literal null MemberReference reuseLoader BlockStatement StatementExpression MethodInvocation p MemberReference loaderId MemberReference cl addReference End End ReturnStatement MemberReference cl MethodDeclaration /**
     * Gets a fresh, different, not used before classloader that uses the
     * passed path as it's classpath.
     *
     * <p>This method completely ignores the ant.reuse.loader magic
     * property and should be used with caution.</p>
     * @param path the classpath for this loader
     * @param reverseLoader
     * @return The fresh, different, not used before class loader.
     */ Modifier public static ReferenceType ClassLoader getUniqueClassLoaderForPath FormalParameter ReferenceType Project p FormalParameter ReferenceType Path path FormalParameter BasicType boolean reverseLoader LocalVariableDeclaration ReferenceType AntClassLoader VariableDeclarator acl MethodInvocation p TernaryExpression BinaryOperation != MemberReference path Literal null MemberReference path MemberReference Path systemClasspath createClassLoader IfStatement MemberReference reverseLoader BlockStatement StatementExpression MethodInvocation acl Literal false setParentFirst StatementExpression MethodInvocation acl addJavaLibraries End ReturnStatement MemberReference acl MethodDeclaration /**
     * Creates a fresh object instance of the specified classname.
     *
     * <p> This uses the userDefinedLoader to load the specified class,
     * and then makes an instance using the default no-argument constructor
     * </p>
     *
     * @param className the full qualified class name to load.
     * @param userDefinedLoader the classloader to use.
     * @return The fresh object instance
     * @throws BuildException when loading or instantiation failed.
     */ Modifier public static ReferenceType Object newInstance FormalParameter ReferenceType String className FormalParameter ReferenceType ClassLoader userDefinedLoader TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator clazz MethodInvocation userDefinedLoader MemberReference className loadClass LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation clazz newInstance ReturnStatement MemberReference o CatchClause CatchClauseParameter ClassNotFoundException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Class "" MemberReference className Literal "" not found by the specific classLoader."" MemberReference e CatchClause CatchClauseParameter InstantiationException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Could not instantiate "" MemberReference className Literal "". Specified class should have a no "" Literal ""argument constructor."" MemberReference e CatchClause CatchClauseParameter IllegalAccessException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Could not instantiate "" MemberReference className Literal "". Specified class should have a "" Literal ""public constructor."" MemberReference e MethodDeclaration /**
     * Obtains a delegate that helps out with classic classpath configuration.
     *
     * @param component your projectComponent that needs the assistence
     * @return the helper, delegate.
     * @see ClasspathUtils.Delegate
     */ Modifier public static ReferenceType Delegate getDelegate FormalParameter ReferenceType ProjectComponent component ReturnStatement ClassCreator ReferenceType Delegate MemberReference component MethodDeclaration /**
     * Checks for the magic property that enables class loader reuse
     * for <taskdef> and <typedef> in Ant 1.5 and earlier.
     */ Modifier private static BasicType boolean isMagicPropertySet FormalParameter ReferenceType Project p ReturnStatement BinaryOperation != MethodInvocation p MemberReference REUSE_LOADER_REF getProperty Literal null ClassDeclaration Modifier public static /**
     * Delegate that helps out any specific ProjectComponent that needs
     * dynamic classloading.
     *
     * <p>Ant ProjectComponents that need a to be able to dynamically load
     * Classes and instantiate them often expose the following ant syntax
     * sugar: </p>
     *
     * <ul><li> nested &lt;classpath&gt; </li>
     * <li> attribute @classpathref </li>
     * <li> attribute @classname </li></ul>
     *
     * <p> This class functions as a delegate handling the configuration
     * issues for this recuring pattern.  Its usage pattern, as the name
     * suggests is delegation, not inheritance. </p>
     *
     * @since Ant 1.6
     */ Delegate FieldDeclaration Modifier private final ReferenceType ProjectComponent VariableDeclarator component FieldDeclaration Modifier private ReferenceType Path VariableDeclarator classpath FieldDeclaration Modifier private ReferenceType String VariableDeclarator classpathId FieldDeclaration Modifier private ReferenceType String VariableDeclarator className FieldDeclaration Modifier private ReferenceType String VariableDeclarator loaderId FieldDeclaration Modifier private BasicType boolean VariableDeclarator reverseLoader Literal false ConstructorDeclaration /**
         * Constructs Delegate
         * @param component
         */ Delegate FormalParameter ReferenceType ProjectComponent component StatementExpression Assignment This MemberReference component MemberReference component = MethodDeclaration /**
         * This method is a Delegate method handling the @classpath attribute.
         *
         * <p>This attribute can set a path to add to the classpath</p>
         *
         * @param classpath
         */ Modifier public setClasspath FormalParameter ReferenceType Path classpath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath MemberReference classpath = BlockStatement StatementExpression This MemberReference classpath MethodInvocation MemberReference classpath append End MethodDeclaration /**
         * Delegate method handling the &lt;classpath&gt; tag.
         *
         * <p>This nested path-like structure can set a path to add to the
         * classpath</p>
         *
         * @return the created path
         */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == This MemberReference classpath Literal null BlockStatement StatementExpression Assignment This MemberReference classpath ClassCreator ReferenceType Path MethodInvocation component getProject = End ReturnStatement This MemberReference classpath MethodInvocation createPath MethodDeclaration /**
         * Delegate method handling the @classname attribute.
         *
         * <p>This attribute sets the full qualified class name of the class
         * to lad and instantiate</p>
         *
         * @param fcqn
         */ Modifier public setClassname FormalParameter ReferenceType String fcqn StatementExpression Assignment This MemberReference className MemberReference fcqn = MethodDeclaration /**
         * Delegate method handling the @classpathref attribute.
         *
         * <p>This attribute can add a referenced path-like structure to the
         * classpath</p>
         *
         * @param r
         */ Modifier public setClasspathref FormalParameter ReferenceType Reference r StatementExpression Assignment This MemberReference classpathId MethodInvocation r getRefId = StatementExpression MethodInvocation MethodInvocation MemberReference r setRefid createClasspath MethodDeclaration /**
         * Delegate method handling the @reverseLoader attribute.
         *
         * <p>This attribute can set a boolean indicating that the used
         * classloader should NOT follow the classical parent-first scheme.
         * </p>
         *
         * <p>By default this is supposed to be false</p>
         *
         * <p>Caution: this behaviour is contradictory to the normal way
         * classloaders work.  Do not let your ProjectComponent use it if
         * you are not really sure</p>
         *
         * @param reverseLoader
         */ Modifier public setReverseLoader FormalParameter BasicType boolean reverseLoader StatementExpression Assignment This MemberReference reverseLoader MemberReference reverseLoader = MethodDeclaration /**
         * Sets the loaderRef
         * @param r
         */ Modifier public setLoaderRef FormalParameter ReferenceType Reference r StatementExpression Assignment This MemberReference loaderId MethodInvocation r getRefId = MethodDeclaration /**
         * Finds or creates the classloader for this
         * @return The class loader
         */ Modifier public ReferenceType ClassLoader getClassLoader LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator cl StatementExpression Assignment MemberReference cl MethodInvocation ClasspathUtils MethodInvocation getContextProject This MemberReference classpath MethodInvocation getClassLoadId This MemberReference reverseLoader BinaryOperation || BinaryOperation != MemberReference loaderId Literal null MethodInvocation MethodInvocation getContextProject isMagicPropertySet getClassLoaderForPath = ReturnStatement MemberReference cl MethodDeclaration /**
         * The project of the ProjectComponent we are working for.
         */ Modifier private ReferenceType Project getContextProject ReturnStatement This MemberReference component MethodInvocation getProject MethodDeclaration /**
         * Computes the loaderId based on the configuration of the component.
         */ Modifier public ReferenceType String getClassLoadId IfStatement BinaryOperation && BinaryOperation == This MemberReference loaderId Literal null BinaryOperation != This MemberReference classpathId Literal null BlockStatement ReturnStatement BinaryOperation + MemberReference ClasspathUtils LOADER_ID_PREFIX This MemberReference classpathId BlockStatement ReturnStatement This MemberReference loaderId End MethodDeclaration /**
         * Helper method obtaining a fresh instance of the class specified
         * in the @classname and using the specified classpath.
         *
         * @return the fresh instantiated object.
         */ Modifier public ReferenceType Object newInstance LocalVariableDeclaration ReferenceType ClassLoader VariableDeclarator cl MethodInvocation getClassLoader ReturnStatement MethodInvocation ClasspathUtils This MemberReference className MemberReference cl newInstance MethodDeclaration /**
         * The classpath.
         */ Modifier public ReferenceType Path getClasspath ReturnStatement MemberReference classpath MethodDeclaration Modifier public BasicType boolean isReverseLoader ReturnStatement MemberReference reverseLoader",1
145,145,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors Import java.io.BufferedReader Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStreamReader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.types.Parameter Import org.apache.tools.ant.types.RegularExpression Import org.apache.tools.ant.util.regexp.Regexp ClassDeclaration Modifier public /**
 * Selector that filters files based on a regular expression.
 *
 * @since Ant 1.6
 */ ContainsRegexpSelector FieldDeclaration Modifier private ReferenceType String VariableDeclarator userProvidedExpression Literal null FieldDeclaration Modifier private ReferenceType RegularExpression VariableDeclarator myRegExp Literal null FieldDeclaration Modifier private ReferenceType Regexp VariableDeclarator myExpression Literal null FieldDeclaration /** Key to used for parameterized custom selector */ Modifier public final static ReferenceType String VariableDeclarator EXPRESSION_KEY Literal ""expression"" ConstructorDeclaration Modifier public /**
     * Creates a new <code>ContainsRegexpSelector</code> instance.
     */ ContainsRegexpSelector MethodDeclaration /**
     * @return a string describing this object
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer Literal ""{containsregexpselector expression: "" StatementExpression MethodInvocation buf MemberReference userProvidedExpression append StatementExpression MethodInvocation buf Literal ""}"" append ReturnStatement MethodInvocation buf toString MethodDeclaration /**
     * The regular expression used to search the file.
     *
     * @param theexpression this must match a line in the file to be selected.
     */ Modifier public setExpression FormalParameter ReferenceType String theexpression StatementExpression Assignment This MemberReference userProvidedExpression MemberReference theexpression = MethodDeclaration /**
     * When using this as a custom selector, this method will be called.
     * It translates each parameter into the appropriate setXXX() call.
     *
     * @param parameters the complete set of parameters for this selector
     */ Modifier public setParameters FormalParameter ReferenceType Parameter parameters StatementExpression SuperMethodInvocation MemberReference parameters setParameters IfStatement BinaryOperation != MemberReference parameters Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference parameters length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator paramname MemberReference ArraySelector MemberReference i MethodInvocation getName parameters IfStatement MethodInvocation EXPRESSION_KEY MemberReference paramname equalsIgnoreCase BlockStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i MethodInvocation getValue parameters setExpression BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Invalid parameter "" MemberReference paramname setError End End End MethodDeclaration /**
     * Checks that an expression was specified.
     *
     */ Modifier public verifySettings IfStatement BinaryOperation == MemberReference userProvidedExpression Literal null BlockStatement StatementExpression MethodInvocation Literal ""The expression attribute is required"" setError End MethodDeclaration /**
     * Tests a regular expression against each line of text in the file.
     *
     * @param basedir the base directory the scan is being done from
     * @param filename is the name of the file to check
     * @param file is a java.io.File object the selector can use
     * @return whether the file should be selected or not
     */ Modifier public BasicType boolean isSelected FormalParameter ReferenceType File basedir FormalParameter ReferenceType String filename FormalParameter ReferenceType File file LocalVariableDeclaration ReferenceType String VariableDeclarator teststr Literal null LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator in Literal null StatementExpression MethodInvocation validate IfStatement MethodInvocation file isDirectory BlockStatement ReturnStatement Literal true End IfStatement BinaryOperation == MemberReference myRegExp Literal null BlockStatement StatementExpression Assignment MemberReference myRegExp ClassCreator ReferenceType RegularExpression = StatementExpression MethodInvocation myRegExp MemberReference userProvidedExpression setPattern StatementExpression Assignment MemberReference myExpression MethodInvocation myRegExp MethodInvocation getProject getRegexp = End TryStatement StatementExpression Assignment MemberReference in ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader ClassCreator ReferenceType FileInputStream MemberReference file = StatementExpression Assignment MemberReference teststr MethodInvocation in readLine = WhileStatement BinaryOperation != MemberReference teststr Literal null BlockStatement IfStatement MethodInvocation myExpression MemberReference teststr matches BlockStatement ReturnStatement Literal true End StatementExpression Assignment MemberReference teststr MethodInvocation in readLine = End ReturnStatement Literal false CatchClause CatchClauseParameter IOException ioe ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Could not read file "" MemberReference filename IfStatement BinaryOperation != MemberReference in Literal null BlockStatement TryStatement StatementExpression MethodInvocation in close CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Could not close file "" MemberReference filename End ReferenceType BaseExtendSelector",0
28,28,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters Import java.io.IOException Import java.io.Reader Import org.apache.tools.ant.types.Parameter ClassDeclaration Modifier public final /**
 * Filter to flatten the stream to a single line.
 *
 * Example:
 *
 * <pre>&lt;striplinebreaks/&gt;</pre>
 *
 * Or:
 *
 * <pre>&lt;filterreader
 *   classname=&quot;org.apache.tools.ant.filters.StripLineBreaks&quot;/&gt;</pre>
 *
 */ StripLineBreaks FieldDeclaration /**
     * Line-breaking characters.
     * What should we do on funny IBM mainframes with odd line endings?
     */ Modifier private final static ReferenceType String VariableDeclarator DEFAULT_LINE_BREAKS Literal ""\r\n"" FieldDeclaration /** Parameter name for the line-breaking characters parameter. */ Modifier private final static ReferenceType String VariableDeclarator LINE_BREAKS_KEY Literal ""linebreaks"" FieldDeclaration /** The characters that are recognized as line breaks. */ Modifier private ReferenceType String VariableDeclarator lineBreaks MemberReference DEFAULT_LINE_BREAKS ConstructorDeclaration Modifier public /**
     * Constructor for ""dummy"" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */ StripLineBreaks StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be <code>null</code>.
     */ StripLineBreaks FormalParameter Modifier final ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in MethodDeclaration /**
     * Returns the next character in the filtered stream, only including
     * characters not in the set of line-breaking characters.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */ Modifier public final BasicType int read IOException IfStatement MethodInvocation ! getInitialized BlockStatement StatementExpression MethodInvocation initialize StatementExpression MethodInvocation Literal true setInitialized End LocalVariableDeclaration BasicType int VariableDeclarator ch MethodInvocation in read WhileStatement BinaryOperation != MemberReference ch Literal - 1 BlockStatement IfStatement BinaryOperation == MethodInvocation lineBreaks MemberReference ch indexOf Literal - 1 BlockStatement BreakStatement BlockStatement StatementExpression Assignment MemberReference ch MethodInvocation in read = End End ReturnStatement MemberReference ch MethodDeclaration /**
     * Sets the line-breaking characters.
     *
     * @param lineBreaks A String containing all the characters to be
     *                   considered as line-breaking.
     */ Modifier public final setLineBreaks FormalParameter Modifier final ReferenceType String lineBreaks StatementExpression Assignment This MemberReference lineBreaks MemberReference lineBreaks = MethodDeclaration /**
     * Returns the line-breaking characters as a String.
     *
     * @return a String containing all the characters considered as
     *         line-breaking
     */ Modifier private final ReferenceType String getLineBreaks ReturnStatement MemberReference lineBreaks MethodDeclaration /**
     * Creates a new StripLineBreaks using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be <code>null</code>.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */ Modifier public final ReferenceType Reader chain FormalParameter Modifier final ReferenceType Reader rdr LocalVariableDeclaration ReferenceType StripLineBreaks VariableDeclarator newFilter ClassCreator ReferenceType StripLineBreaks MemberReference rdr StatementExpression MethodInvocation newFilter MethodInvocation getLineBreaks setLineBreaks StatementExpression MethodInvocation newFilter Literal true setInitialized ReturnStatement MemberReference newFilter MethodDeclaration /**
     * Parses the parameters to set the line-breaking characters.
     */ Modifier private final initialize LocalVariableDeclaration ReferenceType String VariableDeclarator userDefinedLineBreaks Literal null LocalVariableDeclaration ReferenceType Parameter VariableDeclarator params MethodInvocation getParameters IfStatement BinaryOperation != MemberReference params Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference params length MemberReference ++ i BlockStatement IfStatement MethodInvocation LINE_BREAKS_KEY MemberReference ArraySelector MemberReference i MethodInvocation getName params equals BlockStatement StatementExpression Assignment MemberReference userDefinedLineBreaks MemberReference ArraySelector MemberReference i MethodInvocation getValue params = BreakStatement End End End IfStatement BinaryOperation != MemberReference userDefinedLineBreaks Literal null BlockStatement StatementExpression Assignment MemberReference lineBreaks MemberReference userDefinedLineBreaks = End ReferenceType BaseParamFilterReader ReferenceType ChainableReader",0
332,332,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Task ClassDeclaration Modifier public abstract /**
 * Abstract Base class for pack tasks.
 *
 *
 * @since Ant 1.5
 */ Pack FieldDeclaration Modifier protected ReferenceType File VariableDeclarator zipFile FieldDeclaration Modifier protected ReferenceType File VariableDeclarator source MethodDeclaration /**
     * the required destination file.
     * @param zipFile
     */ Modifier public setZipfile FormalParameter ReferenceType File zipFile StatementExpression Assignment This MemberReference zipFile MemberReference zipFile = MethodDeclaration /**
     * the required destination file.
     * @param zipFile
     */ Modifier public setDestfile FormalParameter ReferenceType File zipFile StatementExpression MethodInvocation MemberReference zipFile setZipfile MethodDeclaration /**
     * the file to compress; required.
     * @param src
     */ Modifier public setSrc FormalParameter ReferenceType File src StatementExpression Assignment MemberReference source MemberReference src = MethodDeclaration /**
     * validation routine
     * @throws BuildException if anything is invalid
     */ Modifier private validate BuildException IfStatement BinaryOperation == MemberReference zipFile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""zipfile attribute is required"" MethodInvocation getLocation End IfStatement MethodInvocation zipFile isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""zipfile attribute must not "" Literal ""represent a directory!"" MethodInvocation getLocation End IfStatement BinaryOperation == MemberReference source Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""src attribute is required"" MethodInvocation getLocation End IfStatement MethodInvocation source isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Src attribute must not "" Literal ""represent a directory!"" MethodInvocation getLocation End MethodDeclaration /**
     * validate, then hand off to the subclass
     * @throws BuildException
     */ Modifier public execute BuildException StatementExpression MethodInvocation validate IfStatement MethodInvocation ! source exists BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Nothing to do: "" MethodInvocation source getAbsolutePath Literal "" doesn't exist."" log IfStatement BinaryOperation < MethodInvocation zipFile lastModified MethodInvocation source lastModified BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Building: "" MethodInvocation zipFile getAbsolutePath log StatementExpression MethodInvocation pack BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Nothing to do: "" MethodInvocation zipFile getAbsolutePath Literal "" is up to date."" log End End MethodDeclaration /**
     * zip a stream to an output stream
     * @param in
     * @param zOut
     * @throws IOException
     */ Modifier private zipFile FormalParameter ReferenceType InputStream in FormalParameter ReferenceType OutputStream zOut IOException LocalVariableDeclaration BasicType byte VariableDeclarator buffer ArrayCreator BasicType byte BinaryOperation * Literal 8 Literal 1024 LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 DoStatement BinaryOperation != MemberReference count Literal - 1 BlockStatement StatementExpression MethodInvocation zOut MemberReference buffer Literal 0 MemberReference count write StatementExpression Assignment MemberReference count MethodInvocation in MemberReference buffer Literal 0 MemberReference buffer length read = End MethodDeclaration /**
     * zip a file to an output stream
     * @param file
     * @param zOut
     * @throws IOException
     */ Modifier protected zipFile FormalParameter ReferenceType File file FormalParameter ReferenceType OutputStream zOut IOException LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator fIn ClassCreator ReferenceType FileInputStream MemberReference file TryStatement StatementExpression MethodInvocation MemberReference fIn MemberReference zOut zipFile StatementExpression MethodInvocation fIn close MethodDeclaration /**
     * subclasses must implement this method to do their compression
     */ Modifier protected abstract pack ReferenceType Task",0
383,383,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.io.File Import java.util.Vector Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.ResourceFactory Import org.apache.tools.ant.types.Resource ClassDeclaration Modifier public /**
 * Utility class that collects the functionality of the various
 * scanDir methods that have been scattered in several tasks before.
 *
 * <p>The only method returns an array of source files. The array is a
 * subset of the files given as a parameter and holds only those that
 * are newer than their corresponding target files.</p>
 *
 */ SourceFileScanner FieldDeclaration Modifier protected ReferenceType Task VariableDeclarator task FieldDeclaration Modifier private ReferenceType FileUtils VariableDeclarator fileUtils FieldDeclaration Modifier private ReferenceType File VariableDeclarator destDir ConstructorDeclaration Modifier public /**
     * @param task The task we should log messages through
     */ SourceFileScanner FormalParameter ReferenceType Task task StatementExpression Assignment This MemberReference task MemberReference task = StatementExpression Assignment MemberReference fileUtils MethodInvocation FileUtils newFileUtils = MethodDeclaration /**
     * Restrict the given set of files to those that are newer than
     * their corresponding target files.
     *
     * @param files   the original set of files
     * @param srcDir  all files are relative to this directory
     * @param destDir target files live here. if null file names
     *                returned by the mapper are assumed to be absolute.
     * @param mapper  knows how to construct a target file names from
     *                source file names.
     */ Modifier public ReferenceType String restrict FormalParameter ReferenceType String files FormalParameter ReferenceType File srcDir FormalParameter ReferenceType File destDir FormalParameter ReferenceType FileNameMapper mapper ReturnStatement MethodInvocation MemberReference files MemberReference srcDir MemberReference destDir MemberReference mapper MethodInvocation fileUtils getFileTimestampGranularity restrict MethodDeclaration /**
     * Restrict the given set of files to those that are newer than
     * their corresponding target files.
     *
     * @param files   the original set of files
     * @param srcDir  all files are relative to this directory
     * @param destDir target files live here. if null file names
     *                returned by the mapper are assumed to be absolute.
     * @param mapper  knows how to construct a target file names from
     *                source file names.
     * @param granularity The number of milliseconds leeway to give
     *                    before deciding a target is out of date.
     *
     * @since Ant 1.6.2
     */ Modifier public ReferenceType String restrict FormalParameter ReferenceType String files FormalParameter ReferenceType File srcDir FormalParameter ReferenceType File destDir FormalParameter ReferenceType FileNameMapper mapper FormalParameter BasicType long granularity StatementExpression Assignment This MemberReference destDir MemberReference destDir = LocalVariableDeclaration ReferenceType Vector VariableDeclarator v ClassCreator ReferenceType Vector ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator src MethodInvocation fileUtils MemberReference srcDir MemberReference ArraySelector MemberReference i files resolveFile StatementExpression MethodInvocation v ClassCreator ReferenceType Resource MemberReference ArraySelector MemberReference i files MethodInvocation src exists MethodInvocation src lastModified MethodInvocation src isDirectory addElement End LocalVariableDeclaration ReferenceType Resource VariableDeclarator sourceresources ArrayCreator ReferenceType Resource MethodInvocation v size StatementExpression MethodInvocation v MemberReference sourceresources copyInto LocalVariableDeclaration ReferenceType Resource VariableDeclarator outofdate MethodInvocation ResourceUtils MemberReference task MemberReference sourceresources MemberReference mapper This MemberReference granularity selectOutOfDateSources LocalVariableDeclaration ReferenceType String VariableDeclarator result ArrayCreator ReferenceType String MemberReference outofdate length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator counter Literal 0 BinaryOperation < MemberReference counter MemberReference outofdate length MemberReference ++ counter BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference counter result MemberReference ArraySelector MemberReference counter MethodInvocation getName outofdate = End ReturnStatement MemberReference result MethodDeclaration /**
     * Convinience layer on top of restrict that returns the source
     * files as File objects (containing absolute paths if srcDir is
     * absolute).
     */ Modifier public ReferenceType File restrictAsFiles FormalParameter ReferenceType String files FormalParameter ReferenceType File srcDir FormalParameter ReferenceType File destDir FormalParameter ReferenceType FileNameMapper mapper ReturnStatement MethodInvocation MemberReference files MemberReference srcDir MemberReference destDir MemberReference mapper MethodInvocation fileUtils getFileTimestampGranularity restrictAsFiles MethodDeclaration /**
     * Convinience layer on top of restrict that returns the source
     * files as File objects (containing absolute paths if srcDir is
     * absolute).
     *
     * @since Ant 1.6.2
     */ Modifier public ReferenceType File restrictAsFiles FormalParameter ReferenceType String files FormalParameter ReferenceType File srcDir FormalParameter ReferenceType File destDir FormalParameter ReferenceType FileNameMapper mapper FormalParameter BasicType long granularity LocalVariableDeclaration ReferenceType String VariableDeclarator res MethodInvocation MemberReference files MemberReference srcDir MemberReference destDir MemberReference mapper MemberReference granularity restrict LocalVariableDeclaration ReferenceType File VariableDeclarator result ArrayCreator ReferenceType File MemberReference res length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference res length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i result ClassCreator ReferenceType File MemberReference srcDir MemberReference ArraySelector MemberReference i res = End ReturnStatement MemberReference result MethodDeclaration /**
     * returns resource information for a file at destination
     * @param name relative path of file at destination
     * @return data concerning a file whose relative path to destDir is name
     *
     * @since Ant 1.5.2
     */ Modifier public ReferenceType Resource getResource FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType File VariableDeclarator src MethodInvocation fileUtils MemberReference destDir MemberReference name resolveFile ReturnStatement ClassCreator ReferenceType Resource MemberReference name MethodInvocation src exists MethodInvocation src lastModified MethodInvocation src isDirectory ReferenceType ResourceFactory",0
409,409,,0
60,60,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.compilers Import java.io.IOException Import java.io.OutputStream Import java.lang.reflect.Constructor Import java.lang.reflect.Method Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.LogOutputStream Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * The implementation of the javac compiler for JDK 1.2
 * This is primarily a cut-and-paste from the original javac task before it
 * was refactored.
 *
 * @since Ant 1.3
 */ Javac12 MethodDeclaration /**
     * Run the compilation.
     *
     * @exception BuildException if the compilation has problems.
     */ Modifier public BasicType boolean execute BuildException StatementExpression MethodInvocation attributes Literal ""Using classic compiler"" MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cmd MethodInvocation Literal true setupJavacCommand LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator logstr ClassCreator ReferenceType LogOutputStream MemberReference attributes MemberReference Project MSG_WARN TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator c MethodInvocation Class Literal ""sun.tools.javac.Main"" forName LocalVariableDeclaration ReferenceType Constructor VariableDeclarator cons MethodInvocation c ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType OutputStream ClassReference ReferenceType String getConstructor LocalVariableDeclaration ReferenceType Object VariableDeclarator compiler MethodInvocation cons ArrayCreator ReferenceType Object ArrayInitializer MemberReference logstr Literal ""javac"" newInstance LocalVariableDeclaration ReferenceType Method VariableDeclarator compile MethodInvocation c Literal ""compile"" ArrayCreator ReferenceType Class ArrayInitializer ClassReference ReferenceType String getMethod LocalVariableDeclaration ReferenceType Boolean VariableDeclarator ok Cast ReferenceType Boolean MethodInvocation compile MemberReference compiler ArrayCreator ReferenceType Object ArrayInitializer MethodInvocation cmd getArguments invoke ReturnStatement MethodInvocation ok booleanValue CatchClause CatchClauseParameter ClassNotFoundException ex ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Cannot use classic compiler, as it is "" Literal ""not available.  A common solution is "" Literal ""to set the environment variable"" Literal "" JAVA_HOME to your jdk directory."" MemberReference location CatchClause CatchClauseParameter Exception ex IfStatement BinaryOperation instanceof MemberReference ex ReferenceType BuildException BlockStatement ThrowStatement Cast ReferenceType BuildException MemberReference ex BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Error starting classic compiler: "" MemberReference ex MemberReference location End TryStatement StatementExpression MethodInvocation logstr close CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e ReferenceType DefaultCompilerAdapter",0
51,51,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.ide Import com.ibm.ivj.util.base.IvjException Import com.ibm.ivj.util.base.Package Import com.ibm.ivj.util.base.Project Import java.io.File Import java.util.Enumeration Import java.util.StringTokenizer Import java.util.Vector Import org.apache.tools.ant.DirectoryScanner ClassDeclaration /**
 * Class for scanning a Visual Age for Java workspace for packages matching
 * a certain criteria.
 * <p>
 * These criteria consist of a set of include and exclude patterns. With these
 * patterns, you can select which packages you want to have included, and which
 * packages you want to have excluded.  You can add patterns to be excluded by
 * default with the addDefaultExcludes method.  The patters that are excluded
 * by default include
 * <ul>
 *   <li>IBM*\**</li>
 *   <li>Java class libraries\**</li>
 *   <li>Sun class libraries*\**</li>
 *   <li>JSP Page Compile Generated Code\**</li>
 *   <li>VisualAge*\**</li>
 * </ul>
 * <p>
 * This class works like DirectoryScanner.
 *
 * @see org.apache.tools.ant.DirectoryScanner
 *
 */ VAJWorkspaceScanner FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DEFAULTEXCLUDES ArrayInitializer Literal ""IBM*/**"" Literal ""Java class libraries/**"" Literal ""Sun class libraries*/**"" Literal ""JSP Page Compile Generated Code/**"" Literal ""VisualAge*/**"" FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator packagesIncluded ClassCreator ReferenceType Vector MethodDeclaration /**
     * Adds the array with default exclusions to the current exclusions set.
     */ Modifier public addDefaultExcludes LocalVariableDeclaration BasicType int VariableDeclarator excludesLength TernaryExpression BinaryOperation == MemberReference excludes Literal null Literal 0 MemberReference excludes length LocalVariableDeclaration ReferenceType String VariableDeclarator newExcludes StatementExpression Assignment MemberReference newExcludes ArrayCreator ReferenceType String BinaryOperation + MemberReference excludesLength MemberReference DEFAULTEXCLUDES length = IfStatement BinaryOperation > MemberReference excludesLength Literal 0 BlockStatement StatementExpression MethodInvocation System MemberReference excludes Literal 0 MemberReference newExcludes Literal 0 MemberReference excludesLength arraycopy End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference DEFAULTEXCLUDES length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference i MemberReference excludesLength newExcludes MemberReference ArraySelector MemberReference i MethodInvocation Literal '/' MemberReference File separatorChar replace MethodInvocation Literal '\\' MemberReference File separatorChar replace DEFAULTEXCLUDES = End StatementExpression Assignment MemberReference excludes MemberReference newExcludes = MethodDeclaration /**
     * Finds all Projects specified in include patterns.
     *
     * @return the projects
     */ Modifier public ReferenceType Vector findMatchingProjects LocalVariableDeclaration ReferenceType Project VariableDeclarator projects MethodInvocation VAJLocalUtil MethodInvocation getProjects getWorkspace LocalVariableDeclaration ReferenceType Vector VariableDeclarator matchingProjects ClassCreator ReferenceType Vector LocalVariableDeclaration BasicType boolean VariableDeclarator allProjectsMatch Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference projects length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Project VariableDeclarator project MemberReference ArraySelector MemberReference i projects ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation && BinaryOperation < MemberReference j MemberReference includes length MemberReference ! allProjectsMatch MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference ArraySelector MemberReference j includes MemberReference File separator LocalVariableDeclaration ReferenceType String VariableDeclarator projectNamePattern MethodInvocation tok nextToken IfStatement MethodInvocation projectNamePattern Literal ""**"" equals BlockStatement StatementExpression Assignment MemberReference allProjectsMatch Literal true = IfStatement MethodInvocation MemberReference projectNamePattern MethodInvocation project getName match BlockStatement StatementExpression MethodInvocation matchingProjects MemberReference project addElement BreakStatement End End End End IfStatement MemberReference allProjectsMatch BlockStatement StatementExpression Assignment MemberReference matchingProjects ClassCreator ReferenceType Vector = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference projects length MemberReference ++ i BlockStatement StatementExpression MethodInvocation matchingProjects MemberReference ArraySelector MemberReference i projects addElement End End ReturnStatement MemberReference matchingProjects MethodDeclaration /**
     * Get the names of the packages that matched at least one of the include
     * patterns, and didn't match one of the exclude patterns.
     *
     * @return the matching packages
     */ Modifier public ReferenceType Package getIncludedPackages LocalVariableDeclaration BasicType int VariableDeclarator count MethodInvocation packagesIncluded size LocalVariableDeclaration ReferenceType Package VariableDeclarator packages ArrayCreator ReferenceType Package MemberReference count ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference count MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i packages Cast ReferenceType Package MethodInvocation packagesIncluded MemberReference i elementAt = End ReturnStatement MemberReference packages MethodDeclaration /**
     * Scans the workspace for packages that match at least one include
     * pattern, and don't match any exclude patterns.
     *
     */ Modifier public scan IfStatement BinaryOperation == MemberReference includes Literal null BlockStatement StatementExpression Assignment MemberReference includes ArrayCreator ReferenceType String Literal 1 = StatementExpression Assignment MemberReference ArraySelector Literal 0 includes Literal ""**"" = End IfStatement BinaryOperation == MemberReference excludes Literal null BlockStatement StatementExpression Assignment MemberReference excludes ArrayCreator ReferenceType String Literal 0 = End LocalVariableDeclaration ReferenceType Vector VariableDeclarator matchingProjects MethodInvocation findMatchingProjects ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation matchingProjects elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Project VariableDeclarator project Cast ReferenceType Project MethodInvocation e nextElement StatementExpression MethodInvocation MemberReference project scanProject End MethodDeclaration /**
     * Scans a project for packages that match at least one include
     * pattern, and don't match any exclude patterns.
     *
     */ Modifier public scanProject FormalParameter ReferenceType Project project TryStatement LocalVariableDeclaration ReferenceType Package VariableDeclarator packages MethodInvocation project getPackages IfStatement BinaryOperation != MemberReference packages Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference packages length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Package VariableDeclarator item MemberReference ArraySelector MemberReference i packages LocalVariableDeclaration ReferenceType String VariableDeclarator name BinaryOperation + BinaryOperation + MethodInvocation project getName MemberReference File separator MethodInvocation item MethodInvocation Literal '.' MemberReference File separatorChar replace getName IfStatement BinaryOperation && MethodInvocation MemberReference name isIncluded MethodInvocation ! MemberReference name isExcluded BlockStatement StatementExpression MethodInvocation packagesIncluded MemberReference item addElement End End End CatchClause CatchClauseParameter IvjException e ThrowStatement MethodInvocation VAJLocalUtil Literal ""VA Exception occurred: "" MemberReference e createBuildException ReferenceType DirectoryScanner",0
643,643,,0
75,75,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.depend.constantpool Import java.io.DataInputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * A Float CP Info
 *
 */ FloatCPInfo ConstructorDeclaration Modifier public /** Constructor.  */ FloatCPInfo StatementExpression SuperConstructorInvocation MemberReference CONSTANT_FLOAT Literal 1 MethodDeclaration /**
     * read a constant pool entry from a class stream.
     *
     * @param cpStream the DataInputStream which contains the constant pool
     *      entry to be read.
     * @exception IOException if there is a problem reading the entry from
     *      the stream.
     */ Modifier public read FormalParameter ReferenceType DataInputStream cpStream IOException StatementExpression MethodInvocation ClassCreator ReferenceType Float MethodInvocation cpStream readFloat setValue MethodDeclaration /**
     * Print a readable version of the constant pool entry.
     *
     * @return the string representation of this constant pool entry.
     */ Modifier public ReferenceType String toString ReturnStatement BinaryOperation + Literal ""Float Constant Pool Entry: "" MethodInvocation getValue ReferenceType ConstantCPInfo",0
0,0,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.jlink Import java.io.File Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.MatchingTask Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * This class defines objects that can link together various jar and
 * zip files.
 *
 * <p>It is basically a wrapper for the jlink code written originally
 * by <a href=""mailto:beard@netscape.com"">Patrick Beard</a>.  The
 * classes org.apache.tools.ant.taskdefs.optional.jlink.Jlink and
 * org.apache.tools.ant.taskdefs.optional.jlink.ClassNameReader
 * support this class.</p>
 *
 * <p>For example:
 * <code>
 * <pre>
 * &lt;jlink compress=&quot;false&quot; outfile=&quot;out.jar&quot;/&gt;
 *   &lt;mergefiles&gt;
 *     &lt;pathelement path=&quot;${build.dir}/mergefoo.jar&quot;/&gt;
 *     &lt;pathelement path=&quot;${build.dir}/mergebar.jar&quot;/&gt;
 *   &lt;/mergefiles&gt;
 *   &lt;addfiles&gt;
 *     &lt;pathelement path=&quot;${build.dir}/mac.jar&quot;/&gt;
 *     &lt;pathelement path=&quot;${build.dir}/pc.zip&quot;/&gt;
 *   &lt;/addfiles&gt;
 * &lt;/jlink&gt;
 * </pre>
 * </code>
 *
 * @ant.task ignore=""true""
 */ JlinkTask MethodDeclaration /**
     * The output file for this run of jlink. Usually a jar or zip file.
     */ Modifier public setOutfile FormalParameter ReferenceType File outfile StatementExpression Assignment This MemberReference outfile MemberReference outfile = MethodDeclaration /**
     * Establishes the object that contains the files to
     * be merged into the output.
     */ Modifier public ReferenceType Path createMergefiles IfStatement BinaryOperation == This MemberReference mergefiles Literal null BlockStatement StatementExpression Assignment This MemberReference mergefiles ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement This MemberReference mergefiles MethodInvocation createPath MethodDeclaration /**
     * Sets the files to be merged into the output.
     */ Modifier public setMergefiles FormalParameter ReferenceType Path mergefiles IfStatement BinaryOperation == This MemberReference mergefiles Literal null BlockStatement StatementExpression Assignment This MemberReference mergefiles MemberReference mergefiles = BlockStatement StatementExpression This MemberReference mergefiles MethodInvocation MemberReference mergefiles append End MethodDeclaration /**
     * Establishes the object that contains the files to
     * be added to the output.
     */ Modifier public ReferenceType Path createAddfiles IfStatement BinaryOperation == This MemberReference addfiles Literal null BlockStatement StatementExpression Assignment This MemberReference addfiles ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement This MemberReference addfiles MethodInvocation createPath MethodDeclaration /**
     * Sets the files to be added into the output.
     */ Modifier public setAddfiles FormalParameter ReferenceType Path addfiles IfStatement BinaryOperation == This MemberReference addfiles Literal null BlockStatement StatementExpression Assignment This MemberReference addfiles MemberReference addfiles = BlockStatement StatementExpression This MemberReference addfiles MethodInvocation MemberReference addfiles append End MethodDeclaration /**
     * Defines whether or not the output should be compacted.
     */ Modifier public setCompress FormalParameter BasicType boolean compress StatementExpression Assignment This MemberReference compress MemberReference compress = MethodDeclaration /**
     * Does the adding and merging.
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference outfile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""outfile attribute is required! "" Literal ""Please set."" End IfStatement BinaryOperation && MethodInvocation ! haveAddFiles MethodInvocation ! haveMergeFiles BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""addfiles or mergefiles required! "" Literal ""Please set."" End StatementExpression MethodInvocation BinaryOperation + Literal ""linking:     "" MethodInvocation outfile getPath log StatementExpression MethodInvocation BinaryOperation + Literal ""compression: "" MemberReference compress MemberReference Project MSG_VERBOSE log LocalVariableDeclaration ReferenceType jlink VariableDeclarator linker ClassCreator ReferenceType jlink StatementExpression MethodInvocation linker MethodInvocation outfile getPath setOutfile StatementExpression MethodInvocation linker MemberReference compress setCompression IfStatement MethodInvocation haveMergeFiles BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""merge files: "" MethodInvocation mergefiles toString MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation linker MethodInvocation mergefiles list addMergeFiles End IfStatement MethodInvocation haveAddFiles BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""add files: "" MethodInvocation addfiles toString MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation linker MethodInvocation addfiles list addAddFiles End TryStatement StatementExpression MethodInvocation linker link CatchClause CatchClauseParameter Exception ex ThrowStatement ClassCreator ReferenceType BuildException MemberReference ex MethodInvocation getLocation MethodDeclaration Modifier private BasicType boolean haveAddFiles ReturnStatement MethodInvocation MemberReference addfiles haveEntries MethodDeclaration Modifier private BasicType boolean haveMergeFiles ReturnStatement MethodInvocation MemberReference mergefiles haveEntries MethodDeclaration Modifier private BasicType boolean haveEntries FormalParameter ReferenceType Path p IfStatement BinaryOperation == MemberReference p Literal null BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation > MethodInvocation p size Literal 0 BlockStatement ReturnStatement Literal true End ReturnStatement Literal false FieldDeclaration Modifier private ReferenceType File VariableDeclarator outfile Literal null FieldDeclaration Modifier private ReferenceType Path VariableDeclarator mergefiles Literal null FieldDeclaration Modifier private ReferenceType Path VariableDeclarator addfiles Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator compress Literal false ReferenceType MatchingTask",1
635,635,,0
642,642,,0
233,233,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.dotnet Import java.io.File Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.FileSet ClassDeclaration Modifier public /**
 * Assembles .NET Intermediate Language files.
 * ilasm.exe must be on the execute path, unless another executable
 * or the full path to that executable is specified in the <tt>executable</tt>
 * parameter
 *  <p>
 *
 *  <p>
 *
 *  All parameters are optional: &lt;il/&gt; should suffice to produce a debug
 *  build of all *.il files. The option set is roughly compatible with the
 *  CSharp class; even though the command line options are only vaguely
 *  equivalent. [The low level commands take things like /OUT=file, csc wants
 *  /out:file ... /verbose is used some places; /quiet here in ildasm... etc.]
 *  It would be nice if someone made all the command line tools consistent (and
 *  not as brittle as the java cmdline tools) <p>
 *  <p>
 *  The task is a directory based task, so attributes like <b>includes=""*.il""
 *  </b> and <b>excludes=""broken.il""</b> can be used to control the files pulled
 *  in. You can also use nested &lt;src&gt filesets to refer to source.
 * <p>
 *
 * @ant.task    name=""ilasm"" category=""dotnet""
 */ Ilasm FieldDeclaration /**
     *  Name of the executable. The .exe suffix is deliberately not included in
     *  anticipation of the unix version
     */ Modifier final protected static ReferenceType String VariableDeclarator exe_name Literal ""ilasm"" FieldDeclaration /**
     *  what is the file extension we search on?
     */ Modifier final protected static ReferenceType String VariableDeclarator file_ext Literal ""il"" FieldDeclaration /**
     *  and now derive the search pattern from the extension
     */ Modifier final protected static ReferenceType String VariableDeclarator file_pattern BinaryOperation + Literal ""**/*."" MemberReference file_ext FieldDeclaration /**
     *  title of task for external presentation
     */ Modifier final protected static ReferenceType String VariableDeclarator exe_title Literal ""ilasm"" FieldDeclaration /**
     *  type of target. Should be one of exe|library|module|winexe|(null)
     *  default is exe; the actual value (if not null) is fed to the command
     *  line. <br>
     *  See /target
     */ Modifier protected ReferenceType String VariableDeclarator targetType FieldDeclaration /**
     *  verbose flag
     */ Modifier protected BasicType boolean VariableDeclarator verbose FieldDeclaration /**
     *  listing flag
     */ Modifier protected BasicType boolean VariableDeclarator listing FieldDeclaration /**
     *  resource file (.res format) to include in the app.
     */ Modifier protected ReferenceType File VariableDeclarator resourceFile FieldDeclaration /**
     *  flag to control action on execution trouble
     */ Modifier protected BasicType boolean VariableDeclarator failOnError FieldDeclaration /**
     *  debug flag. Controls generation of debug information.
     */ Modifier protected BasicType boolean VariableDeclarator debug FieldDeclaration /**
     *  file containing private key
     */ Modifier private ReferenceType File VariableDeclarator keyfile FieldDeclaration /**
     *  any extra command options?
     */ Modifier protected ReferenceType String VariableDeclarator extraOptions FieldDeclaration /**
     * filesets of references
     */ Modifier protected ReferenceType Vector VariableDeclarator referenceFilesets ClassCreator ReferenceType Vector ConstructorDeclaration Modifier public /**
     *  constructor inits everything and set up the search pattern
     */ Ilasm StatementExpression MethodInvocation Clear StatementExpression MethodInvocation MemberReference file_pattern setIncludes MethodDeclaration /**
     *  reset all contents.
     */ Modifier public Clear StatementExpression Assignment MemberReference targetType Literal null = StatementExpression Assignment MemberReference srcDir Literal null = StatementExpression Assignment MemberReference listing Literal false = StatementExpression Assignment MemberReference verbose Literal false = StatementExpression Assignment MemberReference debug Literal true = StatementExpression Assignment MemberReference outputFile Literal null = StatementExpression Assignment MemberReference failOnError Literal true = StatementExpression Assignment MemberReference resourceFile Literal null = StatementExpression Assignment MemberReference extraOptions Literal null = MethodDeclaration /**
     * Sets the type of target, either ""exe"" or ""library"".
     *
     *@param  targetType          one of exe|library|
     *@exception  BuildException  if target is not one of
     *      exe|library
     */ Modifier public setTargetType FormalParameter ReferenceType String targetType BuildException StatementExpression Assignment This MemberReference targetType MethodInvocation targetType toLowerCase = IfStatement BinaryOperation && MethodInvocation ! targetType Literal ""exe"" equals MethodInvocation ! targetType Literal ""library"" equals BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""targetType "" MemberReference targetType Literal "" is not a valid type"" End MethodDeclaration /**
     *  accessor method for target type
     *
     *@return    the current target option
     */ Modifier public ReferenceType String getTargetType ReturnStatement MemberReference targetType MethodDeclaration /**
     *  g get the target type or null for no argument needed
     *
     *@return    The TargetTypeParameter value
     */ Modifier protected ReferenceType String getTargetTypeParameter IfStatement MethodInvocation ! MemberReference targetType notEmpty BlockStatement ReturnStatement Literal null End IfStatement MethodInvocation targetType Literal ""exe"" equals BlockStatement ReturnStatement Literal ""/exe"" IfStatement MethodInvocation targetType Literal ""library"" equals BlockStatement ReturnStatement Literal ""/dll"" BlockStatement ReturnStatement Literal null End End MethodDeclaration /**
     * Sets the Owner attribute.
     *
     * @param  s  The new Owner value
     * @ant.attribute ignore=""true""
     */ Modifier public setOwner FormalParameter ReferenceType String s StatementExpression MethodInvocation BinaryOperation + Literal ""This option is not supported by ILASM as of Beta-2, "" Literal ""and will be ignored"" MemberReference Project MSG_WARN log MethodDeclaration /**
     *  test for a string containing something useful
     *
     *@param  s       any string
     *@return         true if the argument is not null or empty
     */ Modifier protected BasicType boolean notEmpty FormalParameter ReferenceType String s ReturnStatement BinaryOperation && BinaryOperation != MemberReference s Literal null BinaryOperation != MethodInvocation s length Literal 0 MethodDeclaration /**
     *  If true, enable verbose ILASM output.
     *
     *@param  b  flag set to true for verbose on
     */ Modifier public setVerbose FormalParameter BasicType boolean b StatementExpression Assignment MemberReference verbose MemberReference b = MethodDeclaration /**
     *  turn the verbose flag into a parameter for ILASM
     *
     *@return    null or the appropriate command line string
     */ Modifier protected ReferenceType String getVerboseParameter ReturnStatement TernaryExpression MemberReference verbose Literal null Literal ""/quiet"" MethodDeclaration /**
     * If true, produce a listing (off by default).
     *
     *@param  b  flag set to true for listing on
     */ Modifier public setListing FormalParameter BasicType boolean b StatementExpression Assignment MemberReference listing MemberReference b = MethodDeclaration /**
     *  turn the listing flag into a parameter for ILASM
     *
     *@return    the appropriate string from the state of the listing flag
     */ Modifier protected ReferenceType String getListingParameter ReturnStatement TernaryExpression MemberReference listing Literal ""/listing"" Literal ""/nolisting"" MethodDeclaration /**
     * Set the output file; identical to setDestFile
     * @see DotnetBaseMatchingTask#setDestFile
     *@param  params  The new outputFile value
     */ Modifier public setOutputFile FormalParameter ReferenceType File params StatementExpression Assignment MemberReference outputFile MemberReference params = MethodDeclaration /**
     *  get the output file
     *
     *@return    the argument string or null for no argument
     */ Modifier protected ReferenceType String getOutputFileParameter IfStatement BinaryOperation == MemberReference outputFile Literal null BlockStatement ReturnStatement Literal null End ReturnStatement BinaryOperation + Literal ""/output="" MethodInvocation outputFile toString MethodDeclaration /**
     * name of resource file to include.
     *
     * @param  fileName  path to the file. Can be relative, absolute, whatever.
     */ Modifier public setResourceFile FormalParameter ReferenceType File fileName StatementExpression Assignment MemberReference resourceFile MemberReference fileName = MethodDeclaration /**
     *  Gets the resourceFileParameter attribute of the Ilasm task
     *
     *@return    The resourceFileParameter value
     */ Modifier protected ReferenceType String getResourceFileParameter IfStatement BinaryOperation != MemberReference resourceFile Literal null BlockStatement ReturnStatement BinaryOperation + Literal ""/resource="" MethodInvocation resourceFile toString BlockStatement ReturnStatement Literal null End MethodDeclaration /**
     * If true, fails if ilasm tool fails.
     *
     *@param  b  The new failOnError value
     */ Modifier public setFailOnError FormalParameter BasicType boolean b StatementExpression Assignment MemberReference failOnError MemberReference b = MethodDeclaration /**
     *  query fail on error flag
     *
     *@return    The failFailOnError value
     */ Modifier public BasicType boolean getFailOnError ReturnStatement MemberReference failOnError MethodDeclaration /**
     *  set the debug flag on or off.
     *
     *@param  f  on/off flag
     */ Modifier public setDebug FormalParameter BasicType boolean f StatementExpression Assignment MemberReference debug MemberReference f = MethodDeclaration /**
     *  query the debug flag
     *
     *@return    true if debug is turned on
     */ Modifier public BasicType boolean getDebug ReturnStatement MemberReference debug MethodDeclaration /**
     *  get the argument or null for no argument needed
     *
     *@return    The debugParameter value
     */ Modifier protected ReferenceType String getDebugParameter ReturnStatement TernaryExpression MemberReference debug Literal ""/debug"" Literal null MethodDeclaration /**
     * the name of a file containing a private key.
     *
     *@param  keyfile  The new keyfile value
     */ Modifier public setKeyfile FormalParameter ReferenceType File keyfile StatementExpression Assignment This MemberReference keyfile MemberReference keyfile = MethodDeclaration /**
     *  get the argument or null for no argument needed
     *
     *@return    The keyfileParameter value
     */ Modifier protected ReferenceType String getKeyfileParameter IfStatement BinaryOperation != MemberReference keyfile Literal null BlockStatement ReturnStatement BinaryOperation + Literal ""/keyfile:"" MethodInvocation keyfile toString BlockStatement ReturnStatement Literal null End MethodDeclaration /**
     * Any extra options which are not explicitly
     * supported by this task.
     *
     *@param  extraOptions  The new ExtraOptions value
     */ Modifier public setExtraOptions FormalParameter ReferenceType String extraOptions StatementExpression Assignment This MemberReference extraOptions MemberReference extraOptions = MethodDeclaration /**
     *  Gets the ExtraOptions attribute
     *
     *@return    The ExtraOptions value
     */ Modifier public ReferenceType String getExtraOptions ReturnStatement This MemberReference extraOptions MethodDeclaration /**
     *  get any extra options or null for no argument needed
     *
     *@return    The ExtraOptions Parameter to CSC
     */ Modifier protected ReferenceType String getExtraOptionsParameter IfStatement BinaryOperation && BinaryOperation != MemberReference extraOptions Literal null BinaryOperation != MethodInvocation extraOptions length Literal 0 BlockStatement ReturnStatement MemberReference extraOptions BlockStatement ReturnStatement Literal null End MethodDeclaration /**
     * set the target type to one of exe|library
     * @param targetType
     */ Modifier public setTargetType FormalParameter ReferenceType TargetTypes targetType StatementExpression Assignment This MemberReference targetType MethodInvocation targetType getValue = MethodDeclaration /**
     *  This is the execution entry point. Build a list of files and call ilasm
     *  on each of them.
     *
     *@throws  BuildException  if the assembly failed and FailOnError is true
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType NetCommand VariableDeclarator command MethodInvocation buildIlasmCommand StatementExpression MethodInvocation MemberReference command Literal false addFilesAndExecute MethodDeclaration /**
     * build up our ilasm command
     * @return
     */ Modifier private ReferenceType NetCommand buildIlasmCommand LocalVariableDeclaration ReferenceType NetCommand VariableDeclarator command ClassCreator ReferenceType NetCommand This MemberReference exe_title MemberReference exe_name StatementExpression MethodInvocation command MethodInvocation getFailOnError setFailOnError StatementExpression MethodInvocation command MethodInvocation getDebugParameter addArgument StatementExpression MethodInvocation command MethodInvocation getTargetTypeParameter addArgument StatementExpression MethodInvocation command MethodInvocation getListingParameter addArgument StatementExpression MethodInvocation command MethodInvocation getOutputFileParameter addArgument StatementExpression MethodInvocation command MethodInvocation getResourceFileParameter addArgument StatementExpression MethodInvocation command MethodInvocation getVerboseParameter addArgument StatementExpression MethodInvocation command MethodInvocation getKeyfileParameter addArgument StatementExpression MethodInvocation command MethodInvocation getExtraOptionsParameter addArgument ReturnStatement MemberReference command MethodDeclaration /**
     * add a new reference fileset to the compilation
     * @param reference
     */ Modifier public addReference FormalParameter ReferenceType FileSet reference StatementExpression MethodInvocation referenceFilesets MemberReference reference add MethodDeclaration /**
     * test for a file being managed or not
     * @return true if we think this is a managed executable, and thus OK
     * for linking
     * @todo look at the PE header of the exe and see if it is managed or not.
     */ Modifier protected static BasicType boolean isFileManagedBinary FormalParameter ReferenceType File file LocalVariableDeclaration ReferenceType String VariableDeclarator filename MethodInvocation file MethodInvocation toLowerCase toString ReturnStatement BinaryOperation || BinaryOperation || MethodInvocation filename Literal "".exe"" endsWith MethodInvocation filename Literal "".dll"" endsWith MethodInvocation filename Literal "".netmodule"" endsWith ClassDeclaration Modifier public static /**
     * Target types to build.
     * valid build types are exe|library|module|winexe
     */ TargetTypes MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""exe"" Literal ""library"" ReferenceType EnumeratedAttribute ReferenceType DotnetBaseMatchingTask",1
500,500,,1
580,580,,0
48,48,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import java.util.Enumeration Import java.util.Iterator Import java.util.HashSet Import java.util.Set Import java.util.Hashtable Import java.util.Properties Import java.util.Stack Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.PropertyHelper Import org.apache.tools.ant.util.FileNameMapper Import org.apache.tools.ant.util.regexp.RegexpMatcher Import org.apache.tools.ant.util.regexp.RegexpMatcherFactory ClassDeclaration Modifier public /**
 * A set of properties.
 *
 * @since Ant 1.6
 */ PropertySet FieldDeclaration Modifier private BasicType boolean VariableDeclarator dynamic Literal true FieldDeclaration Modifier private BasicType boolean VariableDeclarator negate Literal false FieldDeclaration Modifier private ReferenceType Set VariableDeclarator cachedNames FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator ptyRefs ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator setRefs ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType Mapper VariableDeclarator _mapper ClassDeclaration Modifier public static PropertyRef FieldDeclaration Modifier private BasicType int VariableDeclarator count FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType String VariableDeclarator regex FieldDeclaration Modifier private ReferenceType String VariableDeclarator prefix FieldDeclaration Modifier private ReferenceType String VariableDeclarator builtin MethodDeclaration Modifier public setName FormalParameter ReferenceType String name StatementExpression MethodInvocation Literal ""name"" MemberReference name assertValid StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration Modifier public setRegex FormalParameter ReferenceType String regex StatementExpression MethodInvocation Literal ""regex"" MemberReference regex assertValid StatementExpression Assignment This MemberReference regex MemberReference regex = MethodDeclaration Modifier public setPrefix FormalParameter ReferenceType String prefix StatementExpression MethodInvocation Literal ""prefix"" MemberReference prefix assertValid StatementExpression Assignment This MemberReference prefix MemberReference prefix = MethodDeclaration Modifier public setBuiltin FormalParameter ReferenceType BuiltinPropertySetName b LocalVariableDeclaration ReferenceType String VariableDeclarator builtin MethodInvocation b getValue StatementExpression MethodInvocation Literal ""builtin"" MemberReference builtin assertValid StatementExpression Assignment This MemberReference builtin MemberReference builtin = MethodDeclaration Modifier private assertValid FormalParameter ReferenceType String attr FormalParameter ReferenceType String value IfStatement BinaryOperation || BinaryOperation == MemberReference value Literal null BinaryOperation < MethodInvocation value length Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Invalid attribute: "" MemberReference attr End IfStatement BinaryOperation != MemberReference ++ count Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Attributes name, regex, and "" Literal ""prefix are mutually exclusive"" End MethodDeclaration Modifier public ReferenceType String toString ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""name="" MemberReference name Literal "", regex="" MemberReference regex Literal "", prefix="" MemberReference prefix Literal "", builtin="" MemberReference builtin MethodDeclaration Modifier public appendName FormalParameter ReferenceType String name LocalVariableDeclaration ReferenceType PropertyRef VariableDeclarator ref ClassCreator ReferenceType PropertyRef StatementExpression MethodInvocation ref MemberReference name setName StatementExpression MethodInvocation MemberReference ref addPropertyref MethodDeclaration Modifier public appendRegex FormalParameter ReferenceType String regex LocalVariableDeclaration ReferenceType PropertyRef VariableDeclarator ref ClassCreator ReferenceType PropertyRef StatementExpression MethodInvocation ref MemberReference regex setRegex StatementExpression MethodInvocation MemberReference ref addPropertyref MethodDeclaration Modifier public appendPrefix FormalParameter ReferenceType String prefix LocalVariableDeclaration ReferenceType PropertyRef VariableDeclarator ref ClassCreator ReferenceType PropertyRef StatementExpression MethodInvocation ref MemberReference prefix setPrefix StatementExpression MethodInvocation MemberReference ref addPropertyref MethodDeclaration Modifier public appendBuiltin FormalParameter ReferenceType BuiltinPropertySetName b LocalVariableDeclaration ReferenceType PropertyRef VariableDeclarator ref ClassCreator ReferenceType PropertyRef StatementExpression MethodInvocation ref MemberReference b setBuiltin StatementExpression MethodInvocation MemberReference ref addPropertyref MethodDeclaration Modifier public setMapper FormalParameter ReferenceType String type FormalParameter ReferenceType String from FormalParameter ReferenceType String to LocalVariableDeclaration ReferenceType Mapper VariableDeclarator mapper MethodInvocation createMapper LocalVariableDeclaration ReferenceType Mapper ReferenceType MapperType VariableDeclarator mapperType ClassCreator ReferenceType Mapper ReferenceType MapperType StatementExpression MethodInvocation mapperType MemberReference type setValue StatementExpression MethodInvocation mapper MemberReference from setFrom StatementExpression MethodInvocation mapper MemberReference to setTo MethodDeclaration Modifier public addPropertyref FormalParameter ReferenceType PropertyRef ref StatementExpression MethodInvocation assertNotReference StatementExpression MethodInvocation ptyRefs MemberReference ref addElement MethodDeclaration Modifier public addPropertyset FormalParameter ReferenceType PropertySet ref StatementExpression MethodInvocation assertNotReference StatementExpression MethodInvocation setRefs MemberReference ref addElement MethodDeclaration Modifier public ReferenceType Mapper createMapper StatementExpression MethodInvocation assertNotReference IfStatement BinaryOperation != MemberReference _mapper Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Too many <mapper>s!"" End StatementExpression Assignment MemberReference _mapper ClassCreator ReferenceType Mapper MethodInvocation getProject = ReturnStatement MemberReference _mapper MethodDeclaration Modifier public setDynamic FormalParameter BasicType boolean dynamic StatementExpression MethodInvocation assertNotReference StatementExpression Assignment This MemberReference dynamic MemberReference dynamic = MethodDeclaration Modifier public setNegate FormalParameter BasicType boolean negate StatementExpression MethodInvocation assertNotReference StatementExpression Assignment This MemberReference negate MemberReference negate = MethodDeclaration Modifier public BasicType boolean getDynamic ReturnStatement TernaryExpression MethodInvocation isReference MethodInvocation MemberReference dynamic getRef MemberReference dynamic MethodDeclaration Modifier public ReferenceType Mapper getMapper ReturnStatement TernaryExpression MethodInvocation isReference MethodInvocation MemberReference _mapper getRef MemberReference _mapper MethodDeclaration Modifier public ReferenceType Properties getProperties LocalVariableDeclaration ReferenceType Set VariableDeclarator names Literal null LocalVariableDeclaration ReferenceType Project VariableDeclarator prj MethodInvocation getProject LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator props TernaryExpression BinaryOperation == MemberReference prj Literal null MethodInvocation System getProperties MethodInvocation prj getProperties IfStatement BinaryOperation || MethodInvocation getDynamic BinaryOperation == MemberReference cachedNames Literal null BlockStatement StatementExpression Assignment MemberReference names ClassCreator ReferenceType HashSet = IfStatement MethodInvocation isReference BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference names MemberReference props addPropertyNames getRef BlockStatement StatementExpression MethodInvocation MemberReference names MemberReference props addPropertyNames End ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation setRefs elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType PropertySet VariableDeclarator set Cast ReferenceType PropertySet MethodInvocation e nextElement StatementExpression MethodInvocation names MethodInvocation set MethodInvocation keySet getProperties addAll End IfStatement MemberReference negate BlockStatement LocalVariableDeclaration ReferenceType HashSet VariableDeclarator complement ClassCreator ReferenceType HashSet MethodInvocation props keySet StatementExpression MethodInvocation complement MemberReference names removeAll StatementExpression Assignment MemberReference names MemberReference complement = End IfStatement MethodInvocation ! getDynamic BlockStatement StatementExpression Assignment MemberReference cachedNames MemberReference names = End BlockStatement StatementExpression Assignment MemberReference names MemberReference cachedNames = End LocalVariableDeclaration ReferenceType FileNameMapper VariableDeclarator mapper Literal null LocalVariableDeclaration ReferenceType Mapper VariableDeclarator myMapper MethodInvocation getMapper IfStatement BinaryOperation != MemberReference myMapper Literal null BlockStatement StatementExpression Assignment MemberReference mapper MethodInvocation myMapper getImplementation = End LocalVariableDeclaration ReferenceType Properties VariableDeclarator properties ClassCreator ReferenceType Properties ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator iter MethodInvocation names iterator MethodInvocation iter hasNext BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation iter next LocalVariableDeclaration ReferenceType String VariableDeclarator value Cast ReferenceType String MethodInvocation props MemberReference name get IfStatement BinaryOperation != MemberReference mapper Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator newname MethodInvocation mapper MemberReference name mapFileName IfStatement BinaryOperation != MemberReference newname Literal null BlockStatement StatementExpression Assignment MemberReference name MemberReference ArraySelector Literal 0 newname = End End StatementExpression MethodInvocation properties MemberReference name MemberReference value setProperty End ReturnStatement MemberReference properties MethodDeclaration /**
     * @param  names the output Set to fill with the property names
     *         matching this PropertySet selection criteria.
     * @param  properties the current Project properties, passed in to
     *         avoid needless duplication of the Hashtable during recursion.
     */ Modifier private addPropertyNames FormalParameter ReferenceType Set names FormalParameter ReferenceType Hashtable properties LocalVariableDeclaration ReferenceType Project VariableDeclarator prj MethodInvocation getProject ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation ptyRefs elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType PropertyRef VariableDeclarator ref Cast ReferenceType PropertyRef MethodInvocation e nextElement IfStatement BinaryOperation != MemberReference ref name Literal null BlockStatement IfStatement BinaryOperation && BinaryOperation != MemberReference prj Literal null BinaryOperation != MethodInvocation prj MemberReference ref name getProperty Literal null BlockStatement StatementExpression MethodInvocation names MemberReference ref name add End IfStatement BinaryOperation != MemberReference ref prefix Literal null BlockStatement ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator p MethodInvocation properties keys MethodInvocation p hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation p nextElement IfStatement MethodInvocation name MemberReference ref prefix startsWith BlockStatement StatementExpression MethodInvocation names MemberReference name add End End IfStatement BinaryOperation != MemberReference ref regex Literal null BlockStatement LocalVariableDeclaration ReferenceType RegexpMatcherFactory VariableDeclarator matchMaker ClassCreator ReferenceType RegexpMatcherFactory LocalVariableDeclaration ReferenceType RegexpMatcher VariableDeclarator matcher MethodInvocation matchMaker newRegexpMatcher StatementExpression MethodInvocation matcher MemberReference ref regex setPattern ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator p MethodInvocation properties keys MethodInvocation p hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name Cast ReferenceType String MethodInvocation p nextElement IfStatement MethodInvocation matcher MemberReference name matches BlockStatement StatementExpression MethodInvocation names MemberReference name add End End IfStatement BinaryOperation != MemberReference ref builtin Literal null BlockStatement IfStatement MethodInvocation ref.builtin MemberReference BuiltinPropertySetName ALL equals BlockStatement StatementExpression MethodInvocation names MethodInvocation properties keySet addAll IfStatement MethodInvocation ref.builtin MemberReference BuiltinPropertySetName SYSTEM equals BlockStatement StatementExpression MethodInvocation names MethodInvocation System MethodInvocation keySet getProperties addAll IfStatement MethodInvocation ref.builtin MemberReference BuiltinPropertySetName COMMANDLINE equals BlockStatement StatementExpression MethodInvocation names MethodInvocation MethodInvocation getUserProperties MethodInvocation keySet getProject addAll BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Impossible: Invalid builtin "" Literal ""attribute!"" End End End BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Impossible: Invalid PropertyRef!"" End End End End End MethodDeclaration /**
     * Performs the check for circular references and returns the
     * referenced FileList.
     */ Modifier protected ReferenceType PropertySet getRef IfStatement MethodInvocation ! isChecked BlockStatement LocalVariableDeclaration ReferenceType Stack VariableDeclarator stk ClassCreator ReferenceType Stack StatementExpression MethodInvocation stk This push StatementExpression MethodInvocation MemberReference stk MethodInvocation getProject dieOnCircularReference End LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation MethodInvocation MethodInvocation getProject getReferencedObject getRefid IfStatement BinaryOperation instanceof MemberReference o ReferenceType PropertySet BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + MethodInvocation MethodInvocation getRefId getRefid Literal "" doesn\'t denote a propertyset"" ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg BlockStatement ReturnStatement Cast ReferenceType PropertySet MemberReference o End MethodDeclaration /**
     * Sets the value of the refid attribute.
     *
     * @param  r the reference this datatype should point to.
     * @throws BuildException if another attribute was set, since
     *         refid and all other attributes are mutually exclusive.
     */ Modifier public final setRefid FormalParameter ReferenceType Reference r IfStatement MemberReference ! noAttributeSet BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression SuperMethodInvocation MemberReference r setRefid MethodDeclaration /**
     * Ensures this data type is not a reference.
     *
     * <p>Calling this method as the first line of every bean method of
     * this data type (setXyz, addXyz, createXyz) ensure proper handling
     * of the refid attribute.</p>
     *
     * @throws BuildException if the refid attribute was already set, since
     *         refid and all other attributes are mutually exclusive.
     */ Modifier final protected assertNotReference IfStatement MethodInvocation isReference BlockStatement ThrowStatement MethodInvocation tooManyAttributes End StatementExpression Assignment MemberReference noAttributeSet Literal false = FieldDeclaration Modifier private BasicType boolean VariableDeclarator noAttributeSet Literal true ClassDeclaration Modifier public static /**
     * Used for propertyref's builtin attribute.
     */ BuiltinPropertySetName FieldDeclaration Modifier final static ReferenceType String VariableDeclarator ALL Literal ""all"" FieldDeclaration Modifier final static ReferenceType String VariableDeclarator SYSTEM Literal ""system"" FieldDeclaration Modifier final static ReferenceType String VariableDeclarator COMMANDLINE Literal ""commandline"" MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer MemberReference ALL MemberReference SYSTEM MemberReference COMMANDLINE ReferenceType EnumeratedAttribute ReferenceType DataType",0
623,623,,1
264,264,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.BufferedReader Import java.io.IOException Import java.io.InputStream Import java.io.InputStreamReader Import java.io.OutputStream Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task ClassDeclaration Modifier public /**
 * Parses output from jikes and
 * passes errors and warnings
 * into the right logging channels of Project.
 *
 * <p><strong>As of Ant 1.2, this class is considered to be dead code
 * by the Ant developers and is unmaintained.  Don't use
 * it.</strong></p>
 *
 * @deprecated use Jikes' exit value to detect compilation failure.
 */ JikesOutputParser FieldDeclaration Modifier protected ReferenceType Task VariableDeclarator task FieldDeclaration Modifier protected BasicType boolean VariableDeclarator errorFlag Literal false FieldDeclaration Modifier protected BasicType int VariableDeclarator errors FieldDeclaration Modifier protected BasicType int VariableDeclarator warnings FieldDeclaration Modifier protected BasicType boolean VariableDeclarator error Literal false FieldDeclaration Modifier protected BasicType boolean VariableDeclarator emacsMode FieldDeclaration Modifier protected ReferenceType BufferedReader VariableDeclarator br MethodDeclaration /**
     * Ignore.
     */ Modifier public setProcessInputStream FormalParameter ReferenceType OutputStream os MethodDeclaration /**
     * Ignore.
     */ Modifier public setProcessErrorStream FormalParameter ReferenceType InputStream is MethodDeclaration /**
     * Set the inputstream
     */ Modifier public setProcessOutputStream FormalParameter ReferenceType InputStream is IOException StatementExpression Assignment MemberReference br ClassCreator ReferenceType BufferedReader ClassCreator ReferenceType InputStreamReader MemberReference is = MethodDeclaration /**
     * Invokes parseOutput.
     */ Modifier public start IOException StatementExpression MethodInvocation MemberReference br parseOutput MethodDeclaration /**
     * Ignore.
     */ Modifier public stop ConstructorDeclaration Modifier protected /**
     * Construct a new Parser object
     * @param task - task in which context we are called
     */ JikesOutputParser FormalParameter ReferenceType Task task FormalParameter BasicType boolean emacsMode StatementExpression SuperConstructorInvocation StatementExpression MethodInvocation System.err BinaryOperation + Literal ""As of Ant 1.2 released in October 2000, the "" Literal ""JikesOutputParser class"" println StatementExpression MethodInvocation System.err BinaryOperation + Literal ""is considered to be dead code by the Ant "" Literal ""developers and is unmaintained."" println StatementExpression MethodInvocation System.err Literal ""Don\'t use it!"" println StatementExpression Assignment This MemberReference task MemberReference task = StatementExpression Assignment This MemberReference emacsMode MemberReference emacsMode = MethodDeclaration /**
     * Parse the output of a jikes compiler
     * @param reader - Reader used to read jikes's output
     */ Modifier protected parseOutput FormalParameter ReferenceType BufferedReader reader IOException IfStatement MemberReference emacsMode BlockStatement StatementExpression MethodInvocation MemberReference reader parseEmacsOutput BlockStatement StatementExpression MethodInvocation MemberReference reader parseStandardOutput End MethodDeclaration Modifier private parseStandardOutput FormalParameter ReferenceType BufferedReader reader IOException LocalVariableDeclaration ReferenceType String VariableDeclarator line LocalVariableDeclaration ReferenceType String VariableDeclarator lower WhileStatement BinaryOperation != Assignment MemberReference line MethodInvocation reader readLine = Literal null BlockStatement StatementExpression Assignment MemberReference lower MethodInvocation line toLowerCase = IfStatement MethodInvocation line MethodInvocation Literal """" equals trim BlockStatement ContinueStatement End IfStatement BinaryOperation != MethodInvocation lower Literal ""error"" indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation Literal true setError IfStatement BinaryOperation != MethodInvocation lower Literal ""warning"" indexOf Literal - 1 BlockStatement StatementExpression MethodInvocation Literal false setError BlockStatement IfStatement MemberReference emacsMode BlockStatement StatementExpression MethodInvocation Literal true setError End End End StatementExpression MethodInvocation MemberReference line log End MethodDeclaration Modifier private parseEmacsOutput FormalParameter ReferenceType BufferedReader reader IOException StatementExpression MethodInvocation MemberReference reader parseStandardOutput MethodDeclaration Modifier private setError FormalParameter BasicType boolean err StatementExpression Assignment MemberReference error MemberReference err = IfStatement MemberReference error BlockStatement StatementExpression Assignment MemberReference errorFlag Literal true = End MethodDeclaration Modifier private log FormalParameter ReferenceType String line IfStatement MemberReference ! emacsMode BlockStatement StatementExpression MethodInvocation task Literal """" TernaryExpression MemberReference error MemberReference Project MSG_ERR MemberReference Project MSG_WARN log End StatementExpression MethodInvocation task MemberReference line TernaryExpression MemberReference error MemberReference Project MSG_ERR MemberReference Project MSG_WARN log MethodDeclaration /**
     * Indicate if there were errors during the compile
     * @return if errors occurred
     */ Modifier protected BasicType boolean getErrorFlag ReturnStatement MemberReference errorFlag ReferenceType ExecuteStreamHandler",0
553,553,,0
123,123,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import org.apache.tools.ant.taskdefs.email.EmailTask ClassDeclaration Modifier public /**
 * A task to send SMTP email.
 * This task can send mail using either plain
 * text, UU encoding or Mime format mail depending on what is available.
 * Attachments may be sent using nested FileSet
 * elements.

 *
 * @since Ant 1.2
 *
 * @ant.task name=""mail"" category=""network""
 */ SendEmail MethodDeclaration /**
     * Sets the mailport parameter of this build task.
     * @param value mail port name.
     *
     * @deprecated Use {@link #setMailport(int)} instead.
     */ Modifier public setMailport FormalParameter ReferenceType Integer value StatementExpression MethodInvocation MethodInvocation value intValue setMailport ReferenceType EmailTask",0
140,140,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors.modifiedselector Import java.util.Comparator Import java.util.Vector Import java.util.Iterator Import java.io.File Import org.apache.tools.ant.Project Import org.apache.tools.ant.IntrospectionHelper Import org.apache.tools.ant.types.EnumeratedAttribute Import org.apache.tools.ant.types.Parameter Import org.apache.tools.ant.types.selectors.BaseExtendSelector ClassDeclaration Modifier public /**
 * <p>Selector class that uses <i>Algorithm</i>, <i>Cache</i> and <i>Comparator</i>
 * for its work.
 * The <i>Algorithm</i> is used for computing a hashvalue for a file.
 * The <i>Comparator</i> decides whether to select or not.
 * The <i>Cache</i> stores the other value for comparison by the <i>Comparator</i>
 * in a persistent manner.</p>
 *
 * <p>The ModifiedSelector is implemented as a <b>CoreSelector</b> and uses default
 * values for all its attributes therefore the simpliest example is <pre>
 *   <copy todir=""dest"">
 *       <filelist dir=""src"">
 *           <modified/>
 *       </filelist>
 *   </copy>
 * </pre></p>
 *
 * <p>The same example rewritten as CoreSelector with setting the all values
 * (same as defaults are) would be <pre>
 *   <copy todir=""dest"">
 *       <filelist dir=""src"">
 *           <modified update=""true""
 *                     cache=""propertyfile""
 *                     algorithm=""digest""
 *                     comparator=""equal"">
 *               <param name=""cache.cachefile""     value=""cache.properties""/>
 *               <param name=""algorithm.algorithm"" value=""MD5""/>
 *           </modified>
 *       </filelist>
 *   </copy>
 * </pre></p>
 *
 * <p>And the same rewritten as CustomSelector would be<pre>
 *   <copy todir=""dest"">
 *       <filelist dir=""src"">
 *           <custom class=""org.apache.tools.ant.type.selectors.ModifiedSelector"">
 *               <param name=""update""     value=""true""/>
 *               <param name=""cache""      value=""propertyfile""/>
 *               <param name=""algorithm""  value=""digest""/>
 *               <param name=""comparator"" value=""equal""/>
 *               <param name=""cache.cachefile""     value=""cache.properties""/>
 *               <param name=""algorithm.algorithm"" value=""MD5""/>
 *           </custom>
 *       </filelist>
 *   </copy>
 * </pre></p>
 *
 * <p>All these three examples copy the files from <i>src</i> to <i>dest</i>
 * using the ModifiedSelector. The ModifiedSelector uses the <i>PropertyfileCache
 * </i>, the <i>DigestAlgorithm</i> and the <i>EqualComparator</i> for its
 * work. The PropertyfileCache stores key-value-pairs in a simple java
 * properties file. The filename is <i>cache.properties</i>. The <i>update</i>
 * flag lets the selector update the values in the cache (and on first call
 * creates the cache). The <i>DigestAlgorithm</i> computes a hashvalue using the
 * java.security.MessageDigest class with its MD5-Algorithm and its standard
 * provider. The new computed hashvalue and the stored one are compared by
 * the <i>EqualComparator</i> which returns 'true' (more correct a value not
 * equals zero (1)) if the values are not the same using simple String
 * comparison.</p>
 *
 * <p>A useful scenario for this selector is inside a build environment
 * for homepage generation (e.g. with <a href=""http://xml.apache.org/forrest/"">
 * Apache Forrest</a>). <pre>
 * <target name=""generate-and-upload-site"">
 *     <echo> generate the site using forrest </echo>
 *     <antcall target=""site""/>
 *
 *     <echo> upload the changed files </echo>
 *     <ftp server=""${ftp.server}"" userid=""${ftp.user}"" password=""${ftp.pwd}"">
 *         <fileset dir=""htdocs/manual"">
 *             <modified/>
 *         </fileset>
 *     </ftp>
 * </target>
 * </pre> Here all <b>changed</b> files are uploaded to the server. The
 * ModifiedSelector saves therefore much upload time.</p>
 *
 * <p>This selector supports the following nested param's:
 * <table>
 * <tr><th>name</th><th>values</th><th>description</th><th>required</th></tr>
 * <tr>
 *     <td> cache </td>
 *     <td> propertyfile </td>
 *     <td> which cache implementation should be used <ul>
 *          <li><b>propertyfile</b> - using java.util.Properties </li>
 *     </td>
 *     <td> no, defaults to 'propertyfile' </td>
 * </tr>
 * <tr>
 *     <td> algorithm </td>
 *     <td> hashvalue | digest </td>
 *     <td> which algorithm implementation should be used
 *          <li><b>hashvalue</b> - loads the file content into a String and
 *                                 uses its hashValue() method </li>
 *          <li><b>digest</b> - uses java.security.MessageDigest class </i>
 *     </td>
 *     <td> no, defaults to digest </td>
 * </tr>
 * <tr>
 *     <td> comparator </td>
 *     <td> equal | role </td>
 *     <td> which comparator implementation should be used
 *          <li><b>equal</b> - simple comparison using String.equals() </li>
 *          <li><b>role</b> - uses java.text.RuleBasedCollator class </i>
 *     </td>
 *     <td> no, defaults to equal </td>
 * </tr>
 * <tr>
 *     <td> update </td>
 *     <td> true | false </td>
 *     <td> If set to <i>true</i>, the cache will be stored, otherwise the values
 *          will be lost. </td>
 *     <td> no, defaults to true </td>
 * </tr>
 * <tr>
 *     <td> seldirs </td>
 *     <td> true | false </td>
 *     <td> If set to <i>true</i>, directories will be selected otherwise not </td>
 *     <td> no, defaults to true </td>
 * </tr>
 * <tr>
 *     <td> cache.* </td>
 *     <td> depends on used cache </td>
 *     <td> value is stored and given to the Cache-Object for initialisation </td>
 *     <td> depends on used cache </td>
 * </tr>
 * <tr>
 *     <td> algorithm.* </td>
 *     <td> depends on used algorithm </td>
 *     <td> value is stored and given to the Algorithm-Object for initialisation </td>
 *     <td> depends on used algorithm </td>
 * </tr>
 * <tr>
 *     <td> comparator.* </td>
 *     <td> depends on used comparator </td>
 *     <td> value is stored and given to the Comparator-Object for initialisation </td>
 *     <td> depends on used comparator </td>
 * </tr>
 * </table>
 * If another name is used a BuildException ""Invalid parameter"" is thrown. </p>
 *
 * <p>This selector uses reflection for setting the values of its three interfaces
 * (using org.apache.tools.ant.IntrospectionHelper) therefore no special
 * 'configuration interfaces' has to be implemented by new caches, algorithms or
 * comparators. All present <i>set</i>XX methods can be used. E.g. the DigestAlgorithm
 * can use a specified provider for computing its value. For selecting this
 * there is a <i>setProvider(String providername)</i> method. So you can use
 * a nested <i><param name=""algorithm.provider"" value=""MyProvider""/></i>.
 *
 *
 * @version 2003-09-13
 * @since  Ant 1.6
*/ ModifiedSelector FieldDeclaration /** The Cache containing the old values. */ Modifier private ReferenceType Cache VariableDeclarator cache Literal null FieldDeclaration /** Algorithm for computing new values and updating the cache. */ Modifier private ReferenceType Algorithm VariableDeclarator algorithm Literal null FieldDeclaration /** How should the cached value and the new one compared? */ Modifier private ReferenceType Comparator VariableDeclarator comparator Literal null FieldDeclaration /** Should the cache be updated? */ Modifier private BasicType boolean VariableDeclarator update Literal true FieldDeclaration /** Are directories selected? */ Modifier private BasicType boolean VariableDeclarator selectDirectories Literal true FieldDeclaration /** Flag whether this object is configured. Configuration is only done once. */ Modifier private BasicType boolean VariableDeclarator isConfigured Literal false FieldDeclaration /** Algorithm name for later instantiation. */ Modifier private ReferenceType AlgorithmName VariableDeclarator algoName Literal null FieldDeclaration /** Cache name for later instantiation. */ Modifier private ReferenceType CacheName VariableDeclarator cacheName Literal null FieldDeclaration /** Comparator name for later instantiation. */ Modifier private ReferenceType ComparatorName VariableDeclarator compName Literal null FieldDeclaration /**
     * Parameter vector with parameters for later initialization.
     * @see #configure
     */ Modifier private ReferenceType Vector VariableDeclarator configParameter ClassCreator ReferenceType Vector FieldDeclaration /**
     * Parameter vector with special parameters for later initialization.
     * The names have the pattern '*.*', e.g. 'cache.cachefile'.
     * These parameters are used <b>after</b> the parameters with the pattern '*'.
     * @see #configure
     */ Modifier private ReferenceType Vector VariableDeclarator specialParameter ClassCreator ReferenceType Vector ConstructorDeclaration Modifier public /** Bean-Constructor. */ ModifiedSelector MethodDeclaration /** Overrides BaseSelector.verifySettings(). */ Modifier public verifySettings StatementExpression MethodInvocation configure IfStatement BinaryOperation == MemberReference cache Literal null BlockStatement StatementExpression MethodInvocation Literal ""Cache must be set."" setError IfStatement BinaryOperation == MemberReference algorithm Literal null BlockStatement StatementExpression MethodInvocation Literal ""Algorithm must be set."" setError IfStatement MethodInvocation ! cache isValid BlockStatement StatementExpression MethodInvocation Literal ""Cache must be proper configured."" setError IfStatement MethodInvocation ! algorithm isValid BlockStatement StatementExpression MethodInvocation Literal ""Algorithm must be proper configured."" setError End End End End MethodDeclaration /**
     * Configures this Selector.
     * Does this work only once per Selector object.
     * <p>Because some problems while configuring from <custom>Selector
     * the configuration is done in the following order:<ol>
     * <li> collect the configuration data </li>
     * <li> wait for the first isSelected() call </li>
     * <li> set the default values </li>
     * <li> set values for name pattern '*': update, cache, algorithm, comparator </li>
     * <li> set values for name pattern '*.*: cache.cachefile, ... </li>
     * </ol></p>
     * <p>This configuration algorithm is needed because you don't know
     * the order of arriving config-data. E.g. if you first set the
     * <i>cache.cachefilename</i> and after that the <i>cache</i> itself,
     * the default value for cachefilename is used, because setting the
     * cache implies creating a new Cache instance - with its defaults.</p>
     */ Modifier public configure IfStatement MemberReference isConfigured BlockStatement ReturnStatement End StatementExpression Assignment MemberReference isConfigured Literal true = LocalVariableDeclaration ReferenceType org ReferenceType apache ReferenceType tools ReferenceType ant ReferenceType Project VariableDeclarator project MethodInvocation getProject LocalVariableDeclaration ReferenceType String VariableDeclarator filename Literal ""cache.properties"" LocalVariableDeclaration ReferenceType File VariableDeclarator cachefile Literal null IfStatement BinaryOperation != MemberReference project Literal null BlockStatement StatementExpression Assignment MemberReference cachefile ClassCreator ReferenceType File MethodInvocation project getBaseDir MemberReference filename = BlockStatement StatementExpression Assignment MemberReference cachefile ClassCreator ReferenceType File MemberReference filename = End StatementExpression Assignment MemberReference cache ClassCreator ReferenceType PropertiesfileCache MemberReference cachefile = StatementExpression Assignment MemberReference algorithm ClassCreator ReferenceType DigestAlgorithm = StatementExpression Assignment MemberReference comparator ClassCreator ReferenceType EqualComparator = StatementExpression Assignment MemberReference update Literal true = StatementExpression Assignment MemberReference selectDirectories Literal true = ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator itConfig MethodInvocation configParameter iterator MethodInvocation itConfig hasNext BlockStatement LocalVariableDeclaration ReferenceType Parameter VariableDeclarator par Cast ReferenceType Parameter MethodInvocation itConfig next IfStatement BinaryOperation > MethodInvocation par MethodInvocation Literal ""."" indexOf getName Literal 0 BlockStatement StatementExpression MethodInvocation specialParameter MemberReference par add BlockStatement StatementExpression MethodInvocation MemberReference par useParameter End End StatementExpression Assignment MemberReference configParameter ClassCreator ReferenceType Vector = LocalVariableDeclaration ReferenceType String VariableDeclarator className Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator pkg Literal ""org.apache.tools.ant.types.selectors.cacheselector"" IfStatement BinaryOperation == MemberReference algorithm Literal null BlockStatement IfStatement Literal MethodInvocation MethodInvocation algoName getValue equals ""hashvalue"" BlockStatement StatementExpression Assignment MemberReference className BinaryOperation + MemberReference pkg Literal "".HashvalueAlgorithm"" = IfStatement Literal MethodInvocation MethodInvocation algoName getValue equals ""digest"" BlockStatement StatementExpression Assignment MemberReference className BinaryOperation + MemberReference pkg Literal "".DigestAlgorithm"" = End End IfStatement BinaryOperation != MemberReference className Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference algorithm Cast ReferenceType Algorithm MethodInvocation Class MethodInvocation newInstance MemberReference className forName = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace End End IfStatement BinaryOperation == MemberReference cache Literal null BlockStatement IfStatement Literal MethodInvocation MethodInvocation cacheName getValue equals ""propertyfile"" BlockStatement StatementExpression Assignment MemberReference className BinaryOperation + MemberReference pkg Literal "".PropertiesfileCache"" = End IfStatement BinaryOperation != MemberReference className Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference cache Cast ReferenceType Cache MethodInvocation Class MethodInvocation newInstance MemberReference className forName = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace End End IfStatement BinaryOperation == MemberReference comparator Literal null BlockStatement IfStatement Literal MethodInvocation MethodInvocation compName getValue equals ""equal"" BlockStatement StatementExpression Assignment MemberReference className BinaryOperation + MemberReference pkg Literal "".EqualComparator"" = IfStatement Literal MethodInvocation MethodInvocation compName getValue equals ""role"" BlockStatement StatementExpression Assignment MemberReference className Literal ""java.text.RuleBasedCollator"" = End End IfStatement BinaryOperation != MemberReference className Literal null BlockStatement TryStatement StatementExpression Assignment MemberReference comparator Cast ReferenceType Comparator MethodInvocation Class MethodInvocation newInstance MemberReference className forName = CatchClause CatchClauseParameter Exception e StatementExpression MethodInvocation e printStackTrace End End ForStatement ForControl VariableDeclaration ReferenceType Iterator VariableDeclarator itSpecial MethodInvocation specialParameter iterator MethodInvocation itSpecial hasNext BlockStatement LocalVariableDeclaration ReferenceType Parameter VariableDeclarator par Cast ReferenceType Parameter MethodInvocation itSpecial next StatementExpression MethodInvocation MemberReference par useParameter End StatementExpression Assignment MemberReference specialParameter ClassCreator ReferenceType Vector = MethodDeclaration /**
     * Implementation of BaseExtendSelector.isSelected().
     * @param basedir as described in BaseExtendSelector
     * @param filename as described in BaseExtendSelector
     * @param file as described in BaseExtendSelector
     * @return as described in BaseExtendSelector
     */ Modifier public BasicType boolean isSelected FormalParameter ReferenceType File basedir FormalParameter ReferenceType String filename FormalParameter ReferenceType File file StatementExpression MethodInvocation validate LocalVariableDeclaration ReferenceType File VariableDeclarator f ClassCreator ReferenceType File MemberReference basedir MemberReference filename IfStatement MethodInvocation f isDirectory BlockStatement ReturnStatement MemberReference selectDirectories End LocalVariableDeclaration ReferenceType String VariableDeclarator cachedValue MethodInvocation String MethodInvocation cache MethodInvocation f getAbsolutePath get valueOf LocalVariableDeclaration ReferenceType String VariableDeclarator newValue MethodInvocation algorithm MemberReference f getValue LocalVariableDeclaration BasicType boolean VariableDeclarator rv BinaryOperation != MethodInvocation comparator MemberReference cachedValue MemberReference newValue compare Literal 0 IfStatement BinaryOperation && MemberReference update MethodInvocation ! cachedValue MemberReference newValue equals BlockStatement StatementExpression MethodInvocation cache MethodInvocation f getAbsolutePath MemberReference newValue put StatementExpression MethodInvocation cache save End ReturnStatement MemberReference rv MethodDeclaration /**
     * Support for <i>update</i> attribute.
     * @param update new value
     */ Modifier public setUpdate FormalParameter BasicType boolean update StatementExpression Assignment This MemberReference update MemberReference update = MethodDeclaration /**
     * Support for <i>seldirs</i> attribute.
     * @param seldirs new value
     */ Modifier public setSeldirs FormalParameter BasicType boolean seldirs StatementExpression Assignment MemberReference selectDirectories MemberReference seldirs = MethodDeclaration /**
     * Support for nested &lt;param&gt; tags.
     * @param key the key of the parameter
     * @param value the value of the parameter
     */ Modifier public addParam FormalParameter ReferenceType String key FormalParameter ReferenceType Object value LocalVariableDeclaration ReferenceType Parameter VariableDeclarator par ClassCreator ReferenceType Parameter StatementExpression MethodInvocation par MemberReference key setName StatementExpression MethodInvocation par MethodInvocation String MemberReference value valueOf setValue StatementExpression MethodInvocation configParameter MemberReference par add MethodDeclaration /**
     * Support for nested &lt;param&gt; tags.
     * @param parameter the parameter object
     */ Modifier public addParam FormalParameter ReferenceType Parameter parameter StatementExpression MethodInvocation configParameter MemberReference parameter add MethodDeclaration /**
     * Defined in org.apache.tools.ant.types.Parameterizable.
     * Overwrite implementation in superclass because only special
     * parameters are valid.
     * @see #addParam(String,String).
     */ Modifier public setParameters FormalParameter ReferenceType Parameter parameters IfStatement BinaryOperation != MemberReference parameters Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference parameters length MemberReference ++ i BlockStatement StatementExpression MethodInvocation configParameter MemberReference ArraySelector MemberReference i parameters add End End MethodDeclaration /**
     * Support for nested <param name="""" value=""""/> tags.
     * Parameter named <i>cache</i>, <i>algorithm</i>,
     * <i>comparator</i> or <i>update</i> are mapped to
     * the respective set-Method.
     * Parameter which names starts with <i>cache.</i> or
     * <i>algorithm.</i> or <i>comparator.</i> are tried
     * to set on the appropriate object via its set-methods.
     * Other parameters are invalid and an BuildException will
     * be thrown.
     *
     * @param parameter  Key and value as parameter object
     */ Modifier public useParameter FormalParameter ReferenceType Parameter parameter LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation parameter getName LocalVariableDeclaration ReferenceType String VariableDeclarator value MethodInvocation parameter getValue IfStatement Literal MethodInvocation MemberReference key equals ""cache"" BlockStatement LocalVariableDeclaration ReferenceType CacheName VariableDeclarator cn ClassCreator ReferenceType CacheName StatementExpression MethodInvocation cn MemberReference value setValue StatementExpression MethodInvocation MemberReference cn setCache IfStatement Literal MethodInvocation MemberReference key equals ""algorithm"" BlockStatement LocalVariableDeclaration ReferenceType AlgorithmName VariableDeclarator an ClassCreator ReferenceType AlgorithmName StatementExpression MethodInvocation an MemberReference value setValue StatementExpression MethodInvocation MemberReference an setAlgorithm IfStatement Literal MethodInvocation MemberReference key equals ""comparator"" BlockStatement LocalVariableDeclaration ReferenceType ComparatorName VariableDeclarator cn ClassCreator ReferenceType ComparatorName StatementExpression MethodInvocation cn MemberReference value setValue StatementExpression MethodInvocation MemberReference cn setComparator IfStatement Literal MethodInvocation MemberReference key equals ""update"" BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator updateValue TernaryExpression Literal ""true"" Literal true Literal false StatementExpression MethodInvocation MemberReference updateValue setUpdate IfStatement Literal MethodInvocation MemberReference key equals ""seldirs"" BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator sdValue TernaryExpression Literal ""true"" Literal true Literal false StatementExpression MethodInvocation MemberReference sdValue setSeldirs IfStatement MethodInvocation key Literal ""cache."" startsWith BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation key Literal 6 substring StatementExpression MethodInvocation MemberReference cache MemberReference name MemberReference value tryToSetAParameter IfStatement MethodInvocation key Literal ""algorithm."" startsWith BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation key Literal 10 substring StatementExpression MethodInvocation MemberReference algorithm MemberReference name MemberReference value tryToSetAParameter IfStatement MethodInvocation key Literal ""comparator."" startsWith BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation key Literal 11 substring StatementExpression MethodInvocation MemberReference comparator MemberReference name MemberReference value tryToSetAParameter BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Invalid parameter "" MemberReference key setError End End End End End End End End MethodDeclaration /**
     * Try to set a value on an object using reflection.
     * Helper method for easier access to IntrospectionHelper.setAttribute().
     * @param obj the object on which the attribute should be set
     * @param name the attributename
     * @param value the new value
     */ Modifier protected tryToSetAParameter FormalParameter ReferenceType Object obj FormalParameter ReferenceType String name FormalParameter ReferenceType String value LocalVariableDeclaration ReferenceType Project VariableDeclarator prj TernaryExpression BinaryOperation != MethodInvocation getProject Literal null MethodInvocation getProject ClassCreator ReferenceType Project LocalVariableDeclaration ReferenceType IntrospectionHelper VariableDeclarator iHelper MethodInvocation IntrospectionHelper MemberReference prj MethodInvocation obj getClass getHelper TryStatement StatementExpression MethodInvocation iHelper MemberReference prj MemberReference obj MemberReference name MemberReference value setAttribute CatchClause CatchClauseParameter org.apache.tools.ant.BuildException e MethodDeclaration /**
     * Override Object.toString().
     * @return information about this selector
     */ Modifier public ReferenceType String toString LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer Literal ""{modifiedselector"" StatementExpression MethodInvocation buf MethodInvocation MemberReference update append Literal "" update="" append StatementExpression MethodInvocation buf MethodInvocation MemberReference selectDirectories append Literal "" seldirs="" append StatementExpression MethodInvocation buf MethodInvocation MemberReference cache append Literal "" cache="" append StatementExpression MethodInvocation buf MethodInvocation MemberReference algorithm append Literal "" algorithm="" append StatementExpression MethodInvocation buf MethodInvocation MemberReference comparator append Literal "" comparator="" append StatementExpression MethodInvocation buf Literal ""}"" append ReturnStatement MethodInvocation buf toString MethodDeclaration Modifier public ReferenceType Cache getCache ReturnStatement MemberReference cache MethodDeclaration Modifier public setCache FormalParameter ReferenceType CacheName name StatementExpression Assignment MemberReference cacheName MemberReference name = ClassDeclaration Modifier public static CacheName MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""propertyfile"" ReferenceType EnumeratedAttribute MethodDeclaration Modifier public ReferenceType Algorithm getAlgorithm ReturnStatement MemberReference algorithm MethodDeclaration Modifier public setAlgorithm FormalParameter ReferenceType AlgorithmName name StatementExpression Assignment MemberReference algoName MemberReference name = ClassDeclaration Modifier public static AlgorithmName MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""hashvalue"" Literal ""digest"" ReferenceType EnumeratedAttribute MethodDeclaration Modifier public ReferenceType Comparator getComparator ReturnStatement MemberReference comparator MethodDeclaration Modifier public setComparator FormalParameter ReferenceType ComparatorName name StatementExpression Assignment MemberReference compName MemberReference name = ClassDeclaration Modifier public static ComparatorName MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement ArrayCreator ReferenceType String ArrayInitializer Literal ""equal"" Literal ""rule"" ReferenceType EnumeratedAttribute ReferenceType BaseExtendSelector",0
297,297,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters.util Import java.io.FilterReader Import java.io.IOException Import java.io.Reader Import java.lang.reflect.Constructor Import java.lang.reflect.InvocationTargetException Import java.util.Vector Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.filters.BaseFilterReader Import org.apache.tools.ant.filters.ChainableReader Import org.apache.tools.ant.types.AntFilterReader Import org.apache.tools.ant.types.FilterChain Import org.apache.tools.ant.types.Parameter Import org.apache.tools.ant.types.Parameterizable Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.util.FileUtils ClassDeclaration Modifier public final /**
 * Process a FilterReader chain.
 *
 */ ChainReaderHelper FieldDeclaration Modifier private final static BasicType int VariableDeclarator DEFAULT_BUFFER_SIZE Literal 8192 FieldDeclaration /**
     * The primary reader to which the reader chain is to be attached.
     */ Modifier public ReferenceType Reader VariableDeclarator primaryReader FieldDeclaration /**
     * The size of the buffer to be used.
     */ Modifier public BasicType int VariableDeclarator bufferSize MemberReference DEFAULT_BUFFER_SIZE FieldDeclaration /**
     * Chain of filters
     */ Modifier public ReferenceType Vector VariableDeclarator filterChains ClassCreator ReferenceType Vector FieldDeclaration /** The Ant project */ Modifier private ReferenceType Project VariableDeclarator project Literal null MethodDeclaration /**
     * Sets the primary reader
     * @param rdr the reader object
     */ Modifier public final setPrimaryReader FormalParameter ReferenceType Reader rdr StatementExpression Assignment MemberReference primaryReader MemberReference rdr = MethodDeclaration /**
     * Set the project to work with
     * @param project the current project
     */ Modifier public final setProject FormalParameter Modifier final ReferenceType Project project StatementExpression Assignment This MemberReference project MemberReference project = MethodDeclaration /**
     * Get the project
     *
     * @return the current project
     */ Modifier public final ReferenceType Project getProject ReturnStatement MemberReference project MethodDeclaration /**
     * Sets the buffer size to be used.  Defaults to 4096,
     * if this method is not invoked.
     * @param size the buffer size to use
     */ Modifier public final setBufferSize FormalParameter BasicType int size StatementExpression Assignment MemberReference bufferSize MemberReference size = MethodDeclaration /**
     * Sets the collection of filter reader sets
     *
     * @param fchain the filter chains collection
     */ Modifier public final setFilterChains FormalParameter ReferenceType Vector fchain StatementExpression Assignment MemberReference filterChains MemberReference fchain = MethodDeclaration /**
     * Assemble the reader
     * @return the assembled reader
     * @exception BuildException if an error occurs
     */ Modifier public final ReferenceType Reader getAssembledReader BuildException IfStatement BinaryOperation == MemberReference primaryReader Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""primaryReader must not be null."" End LocalVariableDeclaration ReferenceType Reader VariableDeclarator instream MemberReference primaryReader LocalVariableDeclaration Modifier final BasicType int VariableDeclarator filterReadersCount MethodInvocation filterChains size LocalVariableDeclaration Modifier final ReferenceType Vector VariableDeclarator finalFilters ClassCreator ReferenceType Vector ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference filterReadersCount MemberReference ++ i BlockStatement LocalVariableDeclaration Modifier final ReferenceType FilterChain VariableDeclarator filterchain Cast ReferenceType FilterChain MethodInvocation filterChains MemberReference i elementAt LocalVariableDeclaration Modifier final ReferenceType Vector VariableDeclarator filterReaders MethodInvocation filterchain getFilterReaders LocalVariableDeclaration Modifier final BasicType int VariableDeclarator readerCount MethodInvocation filterReaders size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MemberReference readerCount MemberReference ++ j BlockStatement StatementExpression MethodInvocation finalFilters MethodInvocation filterReaders MemberReference j elementAt addElement End End LocalVariableDeclaration Modifier final BasicType int VariableDeclarator filtersCount MethodInvocation finalFilters size IfStatement BinaryOperation > MemberReference filtersCount Literal 0 BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference filtersCount MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation finalFilters MemberReference i elementAt IfStatement BinaryOperation instanceof MemberReference o ReferenceType AntFilterReader BlockStatement LocalVariableDeclaration Modifier final ReferenceType AntFilterReader VariableDeclarator filter Cast ReferenceType AntFilterReader MethodInvocation finalFilters MemberReference i elementAt LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator className MethodInvocation filter getClassName LocalVariableDeclaration Modifier final ReferenceType Path VariableDeclarator classpath MethodInvocation filter getClasspath LocalVariableDeclaration Modifier final ReferenceType Project VariableDeclarator project MethodInvocation filter getProject IfStatement BinaryOperation != MemberReference className Literal null BlockStatement TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator clazz Literal null IfStatement BinaryOperation == MemberReference classpath Literal null BlockStatement StatementExpression Assignment MemberReference clazz MethodInvocation Class MemberReference className forName = BlockStatement LocalVariableDeclaration ReferenceType AntClassLoader VariableDeclarator al MethodInvocation project MemberReference classpath createClassLoader StatementExpression Assignment MemberReference clazz MethodInvocation Class MemberReference className Literal true MemberReference al forName = End IfStatement BinaryOperation != MemberReference clazz Literal null BlockStatement IfStatement ClassReference ! MethodInvocation MemberReference clazz isAssignableFrom ReferenceType FilterReader BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MemberReference className Literal "" does not extend java.io.FilterReader"" End LocalVariableDeclaration Modifier final ReferenceType Constructor VariableDeclarator constructors MethodInvocation clazz getConstructors LocalVariableDeclaration BasicType int VariableDeclarator j Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator consPresent Literal false ForStatement ForControl BinaryOperation < MemberReference j MemberReference constructors length MemberReference ++ j BlockStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator types MemberReference ArraySelector MemberReference j MethodInvocation getParameterTypes constructors IfStatement BinaryOperation && BinaryOperation == MemberReference types length Literal 1 MemberReference ArraySelector Literal 0 MethodInvocation ClassReference ReferenceType Reader isAssignableFrom types BlockStatement StatementExpression Assignment MemberReference consPresent Literal true = BreakStatement End End IfStatement MemberReference ! consPresent BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + MemberReference className Literal "" does not define a public constructor"" Literal "" that takes in a Reader as its "" Literal ""single argument."" End LocalVariableDeclaration Modifier final ReferenceType Reader VariableDeclarator rdr ArrayInitializer MemberReference instream StatementExpression Assignment MemberReference instream Cast ReferenceType Reader MemberReference ArraySelector MemberReference j MethodInvocation MemberReference rdr newInstance constructors = StatementExpression MethodInvocation MemberReference instream setProjectOnObject IfStatement ClassReference MethodInvocation MemberReference clazz isAssignableFrom ReferenceType Parameterizable BlockStatement LocalVariableDeclaration Modifier final ReferenceType Parameter VariableDeclarator params MethodInvocation filter getParams StatementExpression Cast ReferenceType Parameterizable MemberReference instream End End CatchClause CatchClauseParameter ClassNotFoundException cnfe ThrowStatement ClassCreator ReferenceType BuildException MemberReference cnfe CatchClause CatchClauseParameter InstantiationException ie ThrowStatement ClassCreator ReferenceType BuildException MemberReference ie CatchClause CatchClauseParameter IllegalAccessException iae ThrowStatement ClassCreator ReferenceType BuildException MemberReference iae CatchClause CatchClauseParameter InvocationTargetException ite ThrowStatement ClassCreator ReferenceType BuildException MemberReference ite End IfStatement BinaryOperation instanceof MemberReference o ReferenceType ChainableReader BlockStatement StatementExpression MethodInvocation MemberReference o setProjectOnObject StatementExpression Assignment MemberReference instream Cast ReferenceType ChainableReader MemberReference o = StatementExpression MethodInvocation MemberReference instream setProjectOnObject End End End End ReturnStatement MemberReference instream MethodDeclaration /**
     * helper method to set the project on an object.
     * the reflection setProject does not work for anonymous/protected/private
     * classes, even if they have public methods.
     */ Modifier private setProjectOnObject FormalParameter ReferenceType Object obj IfStatement BinaryOperation == MemberReference project Literal null BlockStatement ReturnStatement End IfStatement BinaryOperation instanceof MemberReference obj ReferenceType BaseFilterReader BlockStatement StatementExpression Cast ReferenceType BaseFilterReader MemberReference obj ReturnStatement End StatementExpression MethodInvocation project MemberReference obj setProjectReference MethodDeclaration /**
     * Read data from the reader and return the
     * contents as a string.
     * @param rdr the reader object
     * @return the contents of the file as a string
     * @exception IOException if an error occurs
     */ Modifier public final ReferenceType String readFully FormalParameter ReferenceType Reader rdr IOException ReturnStatement MethodInvocation FileUtils MemberReference rdr MemberReference bufferSize readFully",0
67,67,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.util.Enumeration Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.taskdefs.condition.Condition Import org.apache.tools.ant.types.FileSet Import org.apache.tools.ant.types.Mapper Import org.apache.tools.ant.util.FileNameMapper Import org.apache.tools.ant.util.MergingMapper Import org.apache.tools.ant.util.SourceFileScanner ClassDeclaration Modifier public /**
 * Sets the given property if the specified target has a timestamp
 * greater than all of the source files.
 *
 * @since Ant 1.2
 *
 * @ant.task category=""control""
 */ UpToDate FieldDeclaration Modifier private ReferenceType String VariableDeclarator _property FieldDeclaration Modifier private ReferenceType String VariableDeclarator _value FieldDeclaration Modifier private ReferenceType File VariableDeclarator _sourceFile FieldDeclaration Modifier private ReferenceType File VariableDeclarator _targetFile FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator sourceFileSets ClassCreator ReferenceType Vector FieldDeclaration Modifier protected ReferenceType Mapper VariableDeclarator mapperElement Literal null MethodDeclaration /**
     * The property to set if the target file is more up-to-date than
     * (each of) the source file(s).
     *
     * @param property the name of the property to set if Target is up-to-date.
     */ Modifier public setProperty FormalParameter ReferenceType String property StatementExpression Assignment MemberReference _property MemberReference property = MethodDeclaration /**
     * The value to set the named property to if the target file is more
     * up-to-date than (each of) the source file(s). Defaults to 'true'.
     *
     * @param value the value to set the property to if Target is up-to-date
     */ Modifier public setValue FormalParameter ReferenceType String value StatementExpression Assignment MemberReference _value MemberReference value = MethodDeclaration /**
     * Returns the value, or ""true"" if a specific value wasn't provided.
     */ Modifier private ReferenceType String getValue ReturnStatement TernaryExpression BinaryOperation != MemberReference _value Literal null MemberReference _value Literal ""true"" MethodDeclaration /**
     * The file which must be more up-to-date than (each of) the source file(s)
     * if the property is to be set.
     *
     * @param file the file we are checking against.
     */ Modifier public setTargetFile FormalParameter ReferenceType File file StatementExpression Assignment MemberReference _targetFile MemberReference file = MethodDeclaration /**
     * The file that must be older than the target file
     * if the property is to be set.
     *
     * @param file the file we are checking against the target file.
     */ Modifier public setSrcfile FormalParameter ReferenceType File file StatementExpression Assignment MemberReference _sourceFile MemberReference file = MethodDeclaration /**
     * Nested &lt;srcfiles&gt; element.
     */ Modifier public addSrcfiles FormalParameter ReferenceType FileSet fs StatementExpression MethodInvocation sourceFileSets MemberReference fs addElement MethodDeclaration /**
     * Defines the FileNameMapper to use (nested mapper element).
     */ Modifier public ReferenceType Mapper createMapper BuildException IfStatement BinaryOperation != MemberReference mapperElement Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Cannot define more than one mapper"" MethodInvocation getLocation End StatementExpression Assignment MemberReference mapperElement ClassCreator ReferenceType Mapper MethodInvocation getProject = ReturnStatement MemberReference mapperElement MethodDeclaration /**
     * Evaluate (all) target and source file(s) to
     * see if the target(s) is/are up-to-date.
     */ Modifier public BasicType boolean eval IfStatement BinaryOperation && BinaryOperation == MethodInvocation sourceFileSets size Literal 0 BinaryOperation == MemberReference _sourceFile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""At least one srcfile or a nested "" Literal ""<srcfiles> element must be set."" End IfStatement BinaryOperation && BinaryOperation > MethodInvocation sourceFileSets size Literal 0 BinaryOperation != MemberReference _sourceFile Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Cannot specify both the srcfile "" Literal ""attribute and a nested <srcfiles> "" Literal ""element."" End IfStatement BinaryOperation && BinaryOperation == MemberReference _targetFile Literal null BinaryOperation == MemberReference mapperElement Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""The targetfile attribute or a nested "" Literal ""mapper element must be set."" End IfStatement BinaryOperation && BinaryOperation != MemberReference _targetFile Literal null MethodInvocation ! _targetFile exists BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""The targetfile \"""" MethodInvocation _targetFile getAbsolutePath Literal ""\"" does not exist."" MemberReference Project MSG_VERBOSE log ReturnStatement Literal false End IfStatement BinaryOperation && BinaryOperation != MemberReference _sourceFile Literal null MethodInvocation ! _sourceFile exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MethodInvocation _sourceFile getAbsolutePath Literal "" not found."" End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation sourceFileSets elements LocalVariableDeclaration BasicType boolean VariableDeclarator upToDate Literal true WhileStatement BinaryOperation && MemberReference upToDate MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType FileSet VariableDeclarator fs Cast ReferenceType FileSet MethodInvocation e nextElement LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds MethodInvocation fs MethodInvocation getProject getDirectoryScanner StatementExpression Assignment MemberReference upToDate BinaryOperation && MemberReference upToDate MethodInvocation MethodInvocation fs MethodInvocation getProject getDir MethodInvocation ds getIncludedFiles scanDir = End IfStatement BinaryOperation != MemberReference _sourceFile Literal null BlockStatement IfStatement BinaryOperation == MemberReference mapperElement Literal null BlockStatement StatementExpression Assignment MemberReference upToDate BinaryOperation && MemberReference upToDate BinaryOperation >= MethodInvocation _targetFile lastModified MethodInvocation _sourceFile lastModified = BlockStatement LocalVariableDeclaration ReferenceType SourceFileScanner VariableDeclarator sfs ClassCreator ReferenceType SourceFileScanner This StatementExpression Assignment MemberReference upToDate BinaryOperation && MemberReference upToDate BinaryOperation == MethodInvocation sfs MemberReference length ArrayCreator ReferenceType String ArrayInitializer MethodInvocation _sourceFile getAbsolutePath Literal null Literal null MethodInvocation mapperElement getImplementation restrict Literal 0 = End End ReturnStatement MemberReference upToDate MethodDeclaration /**
     * Sets property to true if target file(s) have a more recent timestamp
     * than (each of) the corresponding source file(s).
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference _property Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""property attribute is required."" MethodInvocation getLocation End LocalVariableDeclaration BasicType boolean VariableDeclarator upToDate MethodInvocation eval IfStatement MemberReference upToDate BlockStatement StatementExpression This MethodInvocation getProject MethodInvocation MemberReference _property MethodInvocation getValue setNewProperty IfStatement BinaryOperation == MemberReference mapperElement Literal null BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""File \"""" MethodInvocation _targetFile getAbsolutePath Literal ""\"" is up-to-date."" MemberReference Project MSG_VERBOSE log BlockStatement StatementExpression MethodInvocation Literal ""All target files are up-to-date."" MemberReference Project MSG_VERBOSE log End End MethodDeclaration Modifier protected BasicType boolean scanDir FormalParameter ReferenceType File srcDir FormalParameter ReferenceType String files LocalVariableDeclaration ReferenceType SourceFileScanner VariableDeclarator sfs ClassCreator ReferenceType SourceFileScanner This LocalVariableDeclaration ReferenceType FileNameMapper VariableDeclarator mapper Literal null LocalVariableDeclaration ReferenceType File VariableDeclarator dir MemberReference srcDir IfStatement BinaryOperation == MemberReference mapperElement Literal null BlockStatement LocalVariableDeclaration ReferenceType MergingMapper VariableDeclarator mm ClassCreator ReferenceType MergingMapper StatementExpression MethodInvocation mm MethodInvocation _targetFile getAbsolutePath setTo StatementExpression Assignment MemberReference mapper MemberReference mm = StatementExpression Assignment MemberReference dir Literal null = BlockStatement StatementExpression Assignment MemberReference mapper MethodInvocation mapperElement getImplementation = End ReturnStatement BinaryOperation == MethodInvocation sfs MemberReference length MemberReference files MemberReference srcDir MemberReference dir MemberReference mapper restrict Literal 0 ReferenceType Task ReferenceType Condition",0
392,392,"CompilationUnit PackageDeclaration org.apache.tools.tar Import java.io.FilterOutputStream Import java.io.OutputStream Import java.io.IOException ClassDeclaration Modifier public /**
 * The TarOutputStream writes a UNIX tar archive as an OutputStream.
 * Methods are provided to put entries, and then write their contents
 * by writing to this stream using write().
 *
 */ TarOutputStream FieldDeclaration /** Fail if a long file name is required in the archive. */ Modifier public final static BasicType int VariableDeclarator LONGFILE_ERROR Literal 0 FieldDeclaration /** Long paths will be truncated in the archive. */ Modifier public final static BasicType int VariableDeclarator LONGFILE_TRUNCATE Literal 1 FieldDeclaration /** GNU tar extensions are used to store long file names in the archive. */ Modifier public final static BasicType int VariableDeclarator LONGFILE_GNU Literal 2 FieldDeclaration Modifier protected BasicType boolean VariableDeclarator debug FieldDeclaration Modifier protected BasicType int VariableDeclarator currSize FieldDeclaration Modifier protected BasicType int VariableDeclarator currBytes FieldDeclaration Modifier protected BasicType byte VariableDeclarator oneBuf FieldDeclaration Modifier protected BasicType byte VariableDeclarator recordBuf FieldDeclaration Modifier protected BasicType int VariableDeclarator assemLen FieldDeclaration Modifier protected BasicType byte VariableDeclarator assemBuf FieldDeclaration Modifier protected ReferenceType TarBuffer VariableDeclarator buffer FieldDeclaration Modifier protected BasicType int VariableDeclarator longFileMode MemberReference LONGFILE_ERROR ConstructorDeclaration Modifier public TarOutputStream FormalParameter ReferenceType OutputStream os StatementExpression ExplicitConstructorInvocation MemberReference os MemberReference TarBuffer DEFAULT_BLKSIZE MemberReference TarBuffer DEFAULT_RCDSIZE ConstructorDeclaration Modifier public TarOutputStream FormalParameter ReferenceType OutputStream os FormalParameter BasicType int blockSize StatementExpression ExplicitConstructorInvocation MemberReference os MemberReference blockSize MemberReference TarBuffer DEFAULT_RCDSIZE ConstructorDeclaration Modifier public TarOutputStream FormalParameter ReferenceType OutputStream os FormalParameter BasicType int blockSize FormalParameter BasicType int recordSize StatementExpression SuperConstructorInvocation MemberReference os StatementExpression Assignment This MemberReference buffer ClassCreator ReferenceType TarBuffer MemberReference os MemberReference blockSize MemberReference recordSize = StatementExpression Assignment This MemberReference debug Literal false = StatementExpression Assignment This MemberReference assemLen Literal 0 = StatementExpression Assignment This MemberReference assemBuf ArrayCreator BasicType byte MemberReference recordSize = StatementExpression Assignment This MemberReference recordBuf ArrayCreator BasicType byte MemberReference recordSize = StatementExpression Assignment This MemberReference oneBuf ArrayCreator BasicType byte Literal 1 = MethodDeclaration Modifier public setLongFileMode FormalParameter BasicType int longFileMode StatementExpression Assignment This MemberReference longFileMode MemberReference longFileMode = MethodDeclaration /**
     * Sets the debugging flag.
     *
     * @param debugF True to turn on debugging.
     */ Modifier public setDebug FormalParameter BasicType boolean debugF StatementExpression Assignment This MemberReference debug MemberReference debugF = MethodDeclaration /**
     * Sets the debugging flag in this stream's TarBuffer.
     *
     * @param debug True to turn on debugging.
     */ Modifier public setBufferDebug FormalParameter BasicType boolean debug StatementExpression This MemberReference buffer MethodInvocation MemberReference debug setDebug MethodDeclaration /**
     * Ends the TAR archive without closing the underlying OutputStream.
     * The result is that the EOF record of nulls is written.
     */ Modifier public finish IOException StatementExpression This MethodInvocation writeEOFRecord MethodDeclaration /**
     * Ends the TAR archive and closes the underlying OutputStream.
     * This means that finish() is called followed by calling the
     * TarBuffer's close().
     */ Modifier public close IOException StatementExpression This MethodInvocation finish StatementExpression This MemberReference buffer MethodInvocation close MethodDeclaration /**
     * Get the record size being used by this stream's TarBuffer.
     *
     * @return The TarBuffer record size.
     */ Modifier public BasicType int getRecordSize ReturnStatement This MemberReference buffer MethodInvocation getRecordSize MethodDeclaration /**
     * Put an entry on the output stream. This writes the entry's
     * header record and positions the output stream for writing
     * the contents of the entry. Once this method is called, the
     * stream is ready for calls to write() to write the entry's
     * contents. Once the contents are written, closeEntry()
     * <B>MUST</B> be called to ensure that all buffered data
     * is completely written to the output stream.
     *
     * @param entry The TarEntry to be written to the archive.
     */ Modifier public putNextEntry FormalParameter ReferenceType TarEntry entry IOException IfStatement BinaryOperation >= MethodInvocation entry MethodInvocation length getName MemberReference TarConstants NAMELEN BlockStatement IfStatement BinaryOperation == MemberReference longFileMode MemberReference LONGFILE_GNU BlockStatement LocalVariableDeclaration ReferenceType TarEntry VariableDeclarator longLinkEntry ClassCreator ReferenceType TarEntry MemberReference TarConstants GNU_LONGLINK MemberReference TarConstants LF_GNUTYPE_LONGNAME StatementExpression MethodInvocation longLinkEntry BinaryOperation + MethodInvocation entry MethodInvocation length getName Literal 1 setSize StatementExpression MethodInvocation MemberReference longLinkEntry putNextEntry StatementExpression MethodInvocation MethodInvocation entry MethodInvocation getBytes getName write StatementExpression MethodInvocation Literal 0 write StatementExpression MethodInvocation closeEntry IfStatement BinaryOperation != MemberReference longFileMode MemberReference LONGFILE_TRUNCATE BlockStatement ThrowStatement ClassCreator ReferenceType RuntimeException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""file name '"" MethodInvocation entry getName Literal ""' is too long ( > "" MemberReference TarConstants NAMELEN Literal "" bytes)"" End End End StatementExpression MethodInvocation entry This MemberReference recordBuf writeEntryHeader StatementExpression This MemberReference buffer MethodInvocation This MemberReference recordBuf writeRecord StatementExpression Assignment This MemberReference currBytes Literal 0 = IfStatement MethodInvocation entry isDirectory BlockStatement StatementExpression Assignment This MemberReference currSize Literal 0 = BlockStatement StatementExpression Assignment This MemberReference currSize Cast BasicType int MethodInvocation entry getSize = End MethodDeclaration /**
     * Close an entry. This method MUST be called for all file
     * entries that contain data. The reason is that we must
     * buffer data written to the stream in order to satisfy
     * the buffer's record based writes. Thus, there may be
     * data fragments still being assembled that must be written
     * to the output stream before this entry is closed and the
     * next entry written.
     */ Modifier public closeEntry IOException IfStatement BinaryOperation > This MemberReference assemLen Literal 0 BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i This MemberReference assemLen BinaryOperation < MemberReference i This MemberReference assemBuf MemberReference length MemberReference ++ i BlockStatement StatementExpression Assignment This MemberReference assemBuf ArraySelector MemberReference i Literal 0 = End StatementExpression This MemberReference buffer MethodInvocation This MemberReference assemBuf writeRecord StatementExpression Assignment This MemberReference currBytes This MemberReference assemLen += StatementExpression Assignment This MemberReference assemLen Literal 0 = End IfStatement BinaryOperation < This MemberReference currBytes This MemberReference currSize BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""entry closed at '"" This MemberReference currBytes Literal ""' before the '"" This MemberReference currSize Literal ""' bytes specified in the header were written"" End MethodDeclaration /**
     * Writes a byte to the current tar archive entry.
     *
     * This method simply calls read( byte[], int, int ).
     *
     * @param b The byte written.
     */ Modifier public write FormalParameter BasicType int b IOException StatementExpression Assignment This MemberReference oneBuf ArraySelector Literal 0 Cast BasicType byte MemberReference b = StatementExpression This MethodInvocation This MemberReference oneBuf Literal 0 Literal 1 write MethodDeclaration /**
     * Writes bytes to the current tar archive entry.
     *
     * This method simply calls write( byte[], int, int ).
     *
     * @param wBuf The buffer to write to the archive.
     */ Modifier public write FormalParameter BasicType byte wBuf IOException StatementExpression This MethodInvocation MemberReference wBuf Literal 0 MemberReference wBuf length write MethodDeclaration /**
     * Writes bytes to the current tar archive entry. This method
     * is aware of the current entry and will throw an exception if
     * you attempt to write bytes past the length specified for the
     * current entry. The method is also (painfully) aware of the
     * record buffering required by TarBuffer, and manages buffers
     * that are not a multiple of recordsize in length, including
     * assembling records from small buffers.
     *
     * @param wBuf The buffer to write to the archive.
     * @param wOffset The offset in the buffer from which to get bytes.
     * @param numToWrite The number of bytes to write.
     */ Modifier public write FormalParameter BasicType byte wBuf FormalParameter BasicType int wOffset FormalParameter BasicType int numToWrite IOException IfStatement BinaryOperation > BinaryOperation + This MemberReference currBytes MemberReference numToWrite This MemberReference currSize BlockStatement ThrowStatement ClassCreator ReferenceType IOException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""request to write '"" MemberReference numToWrite Literal ""' bytes exceeds size in header of '"" This MemberReference currSize Literal ""' bytes"" End IfStatement BinaryOperation > This MemberReference assemLen Literal 0 BlockStatement IfStatement BinaryOperation >= BinaryOperation + This MemberReference assemLen MemberReference numToWrite This MemberReference recordBuf MemberReference length BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator aLen BinaryOperation - This MemberReference recordBuf MemberReference length This MemberReference assemLen StatementExpression MethodInvocation System This MemberReference assemBuf Literal 0 This MemberReference recordBuf Literal 0 This MemberReference assemLen arraycopy StatementExpression MethodInvocation System MemberReference wBuf MemberReference wOffset This MemberReference recordBuf This MemberReference assemLen MemberReference aLen arraycopy StatementExpression This MemberReference buffer MethodInvocation This MemberReference recordBuf writeRecord StatementExpression Assignment This MemberReference currBytes This MemberReference recordBuf MemberReference length += StatementExpression Assignment MemberReference wOffset MemberReference aLen += StatementExpression Assignment MemberReference numToWrite MemberReference aLen -= StatementExpression Assignment This MemberReference assemLen Literal 0 = BlockStatement StatementExpression MethodInvocation System MemberReference wBuf MemberReference wOffset This MemberReference assemBuf This MemberReference assemLen MemberReference numToWrite arraycopy StatementExpression Assignment MemberReference wOffset MemberReference numToWrite += StatementExpression Assignment This MemberReference assemLen MemberReference numToWrite += StatementExpression Assignment MemberReference numToWrite MemberReference numToWrite -= End End WhileStatement BinaryOperation > MemberReference numToWrite Literal 0 BlockStatement IfStatement BinaryOperation < MemberReference numToWrite This MemberReference recordBuf MemberReference length BlockStatement StatementExpression MethodInvocation System MemberReference wBuf MemberReference wOffset This MemberReference assemBuf This MemberReference assemLen MemberReference numToWrite arraycopy StatementExpression Assignment This MemberReference assemLen MemberReference numToWrite += BreakStatement End StatementExpression This MemberReference buffer MethodInvocation MemberReference wBuf MemberReference wOffset writeRecord LocalVariableDeclaration BasicType int VariableDeclarator num This MemberReference recordBuf MemberReference length StatementExpression Assignment This MemberReference currBytes MemberReference num += StatementExpression Assignment MemberReference numToWrite MemberReference num -= StatementExpression Assignment MemberReference wOffset MemberReference num += End MethodDeclaration /**
     * Write an EOF (end of archive) record to the tar archive.
     * An EOF record consists of a record of all zeros.
     */ Modifier private writeEOFRecord IOException ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i This MemberReference recordBuf MemberReference length MemberReference ++ i BlockStatement StatementExpression Assignment This MemberReference recordBuf ArraySelector MemberReference i Literal 0 = End StatementExpression This MemberReference buffer MethodInvocation This MemberReference recordBuf writeRecord ReferenceType FilterOutputStream",1
543,543,,0
664,664,,1
230,230,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.text.SimpleDateFormat Import java.util.Calendar Import java.util.Date Import java.util.Enumeration Import java.util.Hashtable Import java.util.Locale Import java.util.NoSuchElementException Import java.util.StringTokenizer Import java.util.TimeZone Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Location Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.EnumeratedAttribute ClassDeclaration Modifier public /**
 * Sets properties to the current time, or offsets from the current time.
 * The default properties are TSTAMP, DSTAMP and TODAY;
 *
 * @since Ant 1.1
 * @ant.task category=""utility""
 */ Tstamp FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator customFormats ClassCreator ReferenceType Vector FieldDeclaration Modifier private ReferenceType String VariableDeclarator prefix Literal """" MethodDeclaration /**
     * Set a prefix for the properties. If the prefix does not end with a "".""
     * one is automatically added
     * @since Ant 1.5
     */ Modifier public setPrefix FormalParameter ReferenceType String prefix StatementExpression Assignment This MemberReference prefix MemberReference prefix = IfStatement This ! MemberReference prefix MethodInvocation Literal ""."" endsWith BlockStatement StatementExpression Assignment This MemberReference prefix Literal ""."" += End MethodDeclaration /**
     * create the timestamps. Custom ones are done before
     * the standard ones, to get their retaliation in early.
     * @throws BuildException
     */ Modifier public execute BuildException TryStatement LocalVariableDeclaration ReferenceType Date VariableDeclarator d ClassCreator ReferenceType Date LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator i MethodInvocation customFormats elements WhileStatement MethodInvocation i hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType CustomFormat VariableDeclarator cts Cast ReferenceType CustomFormat MethodInvocation i nextElement StatementExpression MethodInvocation cts MethodInvocation getProject MemberReference d MethodInvocation getLocation execute End LocalVariableDeclaration ReferenceType SimpleDateFormat VariableDeclarator dstamp ClassCreator ReferenceType SimpleDateFormat Literal ""yyyyMMdd"" StatementExpression MethodInvocation Literal ""DSTAMP"" MethodInvocation dstamp MemberReference d format setProperty LocalVariableDeclaration ReferenceType SimpleDateFormat VariableDeclarator tstamp ClassCreator ReferenceType SimpleDateFormat Literal ""HHmm"" StatementExpression MethodInvocation Literal ""TSTAMP"" MethodInvocation tstamp MemberReference d format setProperty LocalVariableDeclaration ReferenceType SimpleDateFormat VariableDeclarator today ClassCreator ReferenceType SimpleDateFormat Literal ""MMMM d yyyy"" MemberReference Locale US StatementExpression MethodInvocation Literal ""TODAY"" MethodInvocation today MemberReference d format setProperty CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodDeclaration /**
     * create a custom format with the current prefix.
     * @return a ready to fill-in format
     */ Modifier public ReferenceType CustomFormat createFormat LocalVariableDeclaration ReferenceType CustomFormat VariableDeclarator cts ClassCreator ReferenceType CustomFormat StatementExpression MethodInvocation customFormats MemberReference cts addElement ReturnStatement MemberReference cts MethodDeclaration /**
     * helper that encapsulates prefix logic and property setting
     * policy (i.e. we use setNewProperty instead of setProperty).
     */ Modifier private setProperty FormalParameter ReferenceType String name FormalParameter ReferenceType String value StatementExpression MethodInvocation MethodInvocation BinaryOperation + MemberReference prefix MemberReference name MemberReference value setNewProperty getProject ClassDeclaration Modifier public /**
     * This nested element that allows a property to be set
     * to the current date and time in a given format.
     * The date/time patterns are as defined in the
     * Java SimpleDateFormat class.
     * The format element also allows offsets to be applied to
     * the time to generate different time values.
     * @todo consider refactoring out into a re-usable element.
     */ CustomFormat FieldDeclaration Modifier private ReferenceType TimeZone VariableDeclarator timeZone FieldDeclaration Modifier private ReferenceType String VariableDeclarator propertyName FieldDeclaration Modifier private ReferenceType String VariableDeclarator pattern FieldDeclaration Modifier private ReferenceType String VariableDeclarator language FieldDeclaration Modifier private ReferenceType String VariableDeclarator country FieldDeclaration Modifier private ReferenceType String VariableDeclarator variant FieldDeclaration Modifier private BasicType int VariableDeclarator offset Literal 0 FieldDeclaration Modifier private BasicType int VariableDeclarator field MemberReference Calendar DATE ConstructorDeclaration Modifier public /**
         * Create a format
         */ CustomFormat MethodDeclaration /**
         *  The property to receive the date/time string in the given pattern
         * @param propertyName
         */ Modifier public setProperty FormalParameter ReferenceType String propertyName StatementExpression Assignment This MemberReference propertyName MemberReference propertyName = MethodDeclaration /**
         * The date/time pattern to be used. The values are as
         * defined by the Java SimpleDateFormat class.
         * @param pattern
         * @see java.text.SimpleDateFormat
         */ Modifier public setPattern FormalParameter ReferenceType String pattern StatementExpression Assignment This MemberReference pattern MemberReference pattern = MethodDeclaration /**
         * The locale used to create date/time string.
         * The general form is ""language, country, variant"" but
         * either variant or variant and country may be omitted.
         * For more information please refer to documentation
         * for the java.util.Locale  class.
         * @param locale
         * @see java.util.Locale
         */ Modifier public setLocale FormalParameter ReferenceType String locale LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference locale Literal "" \t\n\r\f,"" TryStatement StatementExpression Assignment MemberReference language MethodInvocation st nextToken = IfStatement MethodInvocation st hasMoreElements BlockStatement StatementExpression Assignment MemberReference country MethodInvocation st nextToken = IfStatement MethodInvocation st hasMoreElements BlockStatement StatementExpression Assignment MemberReference variant MethodInvocation st nextToken = IfStatement MethodInvocation st hasMoreElements BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""bad locale format"" MethodInvocation getLocation End End BlockStatement StatementExpression Assignment MemberReference country Literal """" = End CatchClause CatchClauseParameter NoSuchElementException e ThrowStatement ClassCreator ReferenceType BuildException Literal ""bad locale format"" MemberReference e MethodInvocation getLocation MethodDeclaration /**
         * The timezone to use for displaying time.
         * The values are as defined by the Java TimeZone class.
         * @param id
         * @see java.util.TimeZone
         */ Modifier public setTimezone FormalParameter ReferenceType String id StatementExpression Assignment MemberReference timeZone MethodInvocation TimeZone MemberReference id getTimeZone = MethodDeclaration /**
         * The numeric offset to the current time.
         * @param offset
         */ Modifier public setOffset FormalParameter BasicType int offset StatementExpression Assignment This MemberReference offset MemberReference offset = MethodDeclaration /**
         * @deprecated setUnit(String) is deprecated and is replaced with
         *             setUnit(Tstamp.Unit) to make Ant's
         *             Introspection mechanism do the work and also to
         *             encapsulate operations on the unit in its own
         *             class.
         */ Modifier public setUnit FormalParameter ReferenceType String unit StatementExpression MethodInvocation BinaryOperation + Literal ""DEPRECATED - The setUnit(String) method has been deprecated."" Literal "" Use setUnit(Tstamp.Unit) instead."" log LocalVariableDeclaration ReferenceType Unit VariableDeclarator u ClassCreator ReferenceType Unit StatementExpression MethodInvocation u MemberReference unit setValue StatementExpression Assignment MemberReference field MethodInvocation u getCalendarField = MethodDeclaration /**
         * The unit of the offset to be applied to the current time.
         * Valid Values are
         * <ul>
         *    <li>millisecond</li>
         *    <li>second</li>
         *    <li>minute</li>
         *    <li>hour</li>
         *    <li>day</li>
         *    <li>week</li>
         *    <li>month</li>
         *    <li>year</li>
         * </ul>
         * The default unit is day.
         * @param unit
         */ Modifier public setUnit FormalParameter ReferenceType Unit unit StatementExpression Assignment MemberReference field MethodInvocation unit getCalendarField = MethodDeclaration /**
         * validate parameter and execute the format
         * @param project project to set property in
         * @param date date to use as a starting point
         * @param location line in file (for errors)
         */ Modifier public execute FormalParameter ReferenceType Project project FormalParameter ReferenceType Date date FormalParameter ReferenceType Location location IfStatement BinaryOperation == MemberReference propertyName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""property attribute must be provided"" MemberReference location End IfStatement BinaryOperation == MemberReference pattern Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""pattern attribute must be provided"" MemberReference location End LocalVariableDeclaration ReferenceType SimpleDateFormat VariableDeclarator sdf IfStatement BinaryOperation == MemberReference language Literal null BlockStatement StatementExpression Assignment MemberReference sdf ClassCreator ReferenceType SimpleDateFormat MemberReference pattern = IfStatement BinaryOperation == MemberReference variant Literal null BlockStatement StatementExpression Assignment MemberReference sdf ClassCreator ReferenceType SimpleDateFormat MemberReference pattern ClassCreator ReferenceType Locale MemberReference language MemberReference country = BlockStatement StatementExpression Assignment MemberReference sdf ClassCreator ReferenceType SimpleDateFormat MemberReference pattern ClassCreator ReferenceType Locale MemberReference language MemberReference country MemberReference variant = End End IfStatement BinaryOperation != MemberReference offset Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Calendar VariableDeclarator calendar MethodInvocation Calendar getInstance StatementExpression MethodInvocation calendar MemberReference date setTime StatementExpression MethodInvocation calendar MemberReference field MemberReference offset add StatementExpression Assignment MemberReference date MethodInvocation calendar getTime = End IfStatement BinaryOperation != MemberReference timeZone Literal null BlockStatement StatementExpression MethodInvocation sdf MemberReference timeZone setTimeZone End StatementExpression This Tstamp MethodInvocation MemberReference propertyName MethodInvocation sdf MemberReference date format setProperty ClassDeclaration Modifier public static /**
     * set of valid units to use for time offsets.
     */ Unit FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MILLISECOND Literal ""millisecond"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator SECOND Literal ""second"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MINUTE Literal ""minute"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator HOUR Literal ""hour"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DAY Literal ""day"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator WEEK Literal ""week"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator MONTH Literal ""month"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator YEAR Literal ""year"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator units ArrayInitializer MemberReference MILLISECOND MemberReference SECOND MemberReference MINUTE MemberReference HOUR MemberReference DAY MemberReference WEEK MemberReference MONTH MemberReference YEAR FieldDeclaration Modifier private ReferenceType Hashtable VariableDeclarator calendarFields ClassCreator ReferenceType Hashtable ConstructorDeclaration Modifier public Unit StatementExpression MethodInvocation calendarFields MemberReference MILLISECOND ClassCreator ReferenceType Integer MemberReference Calendar MILLISECOND put StatementExpression MethodInvocation calendarFields MemberReference SECOND ClassCreator ReferenceType Integer MemberReference Calendar SECOND put StatementExpression MethodInvocation calendarFields MemberReference MINUTE ClassCreator ReferenceType Integer MemberReference Calendar MINUTE put StatementExpression MethodInvocation calendarFields MemberReference HOUR ClassCreator ReferenceType Integer MemberReference Calendar HOUR_OF_DAY put StatementExpression MethodInvocation calendarFields MemberReference DAY ClassCreator ReferenceType Integer MemberReference Calendar DATE put StatementExpression MethodInvocation calendarFields MemberReference WEEK ClassCreator ReferenceType Integer MemberReference Calendar WEEK_OF_YEAR put StatementExpression MethodInvocation calendarFields MemberReference MONTH ClassCreator ReferenceType Integer MemberReference Calendar MONTH put StatementExpression MethodInvocation calendarFields MemberReference YEAR ClassCreator ReferenceType Integer MemberReference Calendar YEAR put MethodDeclaration Modifier public BasicType int getCalendarField LocalVariableDeclaration ReferenceType String VariableDeclarator key MethodInvocation MethodInvocation toLowerCase getValue LocalVariableDeclaration ReferenceType Integer VariableDeclarator i Cast ReferenceType Integer MethodInvocation calendarFields MemberReference key get ReturnStatement MethodInvocation i intValue MethodDeclaration Modifier public ReferenceType String getValues ReturnStatement MemberReference units ReferenceType EnumeratedAttribute ReferenceType Task",0
39,39,"CompilationUnit PackageDeclaration org.apache.tools.ant ClassDeclaration Modifier public /**
 * BuildException + exit status.
 *
 * @since Ant 1.7
 */ ExitStatusException FieldDeclaration /** Status code */ Modifier private BasicType int VariableDeclarator status ConstructorDeclaration Modifier public /**
     * Constructs an <CODE>ExitStatusException</CODE>.
     * @param status the associated status code
     */ ExitStatusException FormalParameter BasicType int status StatementExpression SuperConstructorInvocation StatementExpression Assignment This MemberReference status MemberReference status = ConstructorDeclaration Modifier public /**
     * Constructs an <CODE>ExitStatusException</CODE>.
     * @param msg the associated message
     * @param status the associated status code
     */ ExitStatusException FormalParameter ReferenceType String msg FormalParameter BasicType int status StatementExpression SuperConstructorInvocation MemberReference msg StatementExpression Assignment This MemberReference status MemberReference status = MethodDeclaration /**
     * Get the status code.
     * @return <CODE>int</CODE>
     */ Modifier public BasicType int getStatus ReturnStatement MemberReference status ReferenceType BuildException",0
294,294,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import org.apache.tools.ant.AntClassLoader Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.Path Import org.apache.tools.ant.types.Reference Import org.apache.tools.ant.util.ClasspathUtils ClassDeclaration Modifier public abstract /**
 * Base class for Definitions
 * handling uri and class loading.
 * (This was part of Definer)
 *
 * @since Ant 1.6
 */ DefBase FieldDeclaration Modifier private ReferenceType ClassLoader VariableDeclarator createdLoader FieldDeclaration Modifier private ReferenceType ClasspathUtils ReferenceType Delegate VariableDeclarator cpDelegate MethodDeclaration /**
     * @param reverseLoader if true a delegated loader will take precedence over
     *                      the parent
     * @deprecated stop using this attribute
     * @ant.attribute ignore=""true""
     */ Modifier public setReverseLoader FormalParameter BasicType boolean reverseLoader StatementExpression This MemberReference cpDelegate MethodInvocation MemberReference reverseLoader setReverseLoader StatementExpression MethodInvocation Literal ""The reverseloader attribute is DEPRECATED. It will be removed"" MemberReference Project MSG_WARN log MethodDeclaration /**
     * @return the classpath for this definition
     */ Modifier public ReferenceType Path getClasspath ReturnStatement MethodInvocation cpDelegate getClasspath MethodDeclaration /**
     * @return the reverse loader attribute of the classpath delegate.
     */ Modifier public BasicType boolean isReverseLoader ReturnStatement MethodInvocation cpDelegate isReverseLoader MethodDeclaration /**
     * Returns the loader id of the class path Delegate.
     * @return the loader id
     */ Modifier public ReferenceType String getLoaderId ReturnStatement MethodInvocation cpDelegate getClassLoadId MethodDeclaration /**
     * Returns the class path id of the class path delegate.
     * @return the class path id
     */ Modifier public ReferenceType String getClasspathId ReturnStatement MethodInvocation cpDelegate getClassLoadId MethodDeclaration /**
     * Set the classpath to be used when searching for component being defined
     *
     * @param classpath an Ant Path object containing the classpath.
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath StatementExpression This MemberReference cpDelegate MethodInvocation MemberReference classpath setClasspath MethodDeclaration /**
     * Create the classpath to be used when searching for component being
     * defined
     * @return the classpath of the this definition
     */ Modifier public ReferenceType Path createClasspath ReturnStatement This MemberReference cpDelegate MethodInvocation createClasspath MethodDeclaration /**
     * reference to a classpath to use when loading the files.
     * To actually share the same loader, set loaderref as well
     * @param r the reference to the classpath
     */ Modifier public setClasspathRef FormalParameter ReferenceType Reference r StatementExpression This MemberReference cpDelegate MethodInvocation MemberReference r setClasspathref MethodDeclaration /**
     * Use the reference to locate the loader. If the loader is not
     * found, taskdef will use the specified classpath and register it
     * with the specified name.
     *
     * This allow multiple taskdef/typedef to use the same class loader,
     * so they can be used together. It eliminate the need to
     * put them in the CLASSPATH.
     *
     * @param r the reference to locate the loader.
     * @since Ant 1.5
     */ Modifier public setLoaderRef FormalParameter ReferenceType Reference r StatementExpression This MemberReference cpDelegate MethodInvocation MemberReference r setLoaderRef MethodDeclaration /**
     * create a classloader for this definition
     * @return the classloader from the cpDelegate
     */ Modifier protected ReferenceType ClassLoader createLoader IfStatement BinaryOperation != MethodInvocation getAntlibClassLoader Literal null BlockStatement ReturnStatement MethodInvocation getAntlibClassLoader End IfStatement BinaryOperation == MemberReference createdLoader Literal null BlockStatement StatementExpression Assignment MemberReference createdLoader This MemberReference cpDelegate MethodInvocation getClassLoader = StatementExpression Cast ReferenceType AntClassLoader MemberReference createdLoader End ReturnStatement MemberReference createdLoader MethodDeclaration /**
     * @see org.apache.tools.ant.Task#init()
     * @since Ant 1.6
     */ Modifier public init BuildException StatementExpression Assignment This MemberReference cpDelegate MethodInvocation ClasspathUtils This getDelegate = StatementExpression SuperMethodInvocation init ReferenceType AntlibDefinition",0
595,595,,1
151,151,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.IOException Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.util.FileUtils ClassDeclaration Modifier public /**
 * Renames a file.
 *
 *
 * @deprecated The rename task is deprecated since Ant 1.2.  Use move instead.
 * @since Ant 1.1
 */ Rename FieldDeclaration Modifier private ReferenceType File VariableDeclarator src FieldDeclaration Modifier private ReferenceType File VariableDeclarator dest FieldDeclaration Modifier private BasicType boolean VariableDeclarator replace Literal true MethodDeclaration /**
     * Sets the file to be renamed.
     * @param src the file to rename
     */ Modifier public setSrc FormalParameter ReferenceType File src StatementExpression Assignment This MemberReference src MemberReference src = MethodDeclaration /**
     * Sets the new name of the file.
     * @param dest the new name of the file.
     */ Modifier public setDest FormalParameter ReferenceType File dest StatementExpression Assignment This MemberReference dest MemberReference dest = MethodDeclaration /**
     * Sets whether an existing file should be replaced.
     * @param replace <code>on</code>, if an existing file should be replaced.
     */ Modifier public setReplace FormalParameter ReferenceType String replace StatementExpression Assignment This MemberReference replace MethodInvocation Project MemberReference replace toBoolean = MethodDeclaration /**
     * Renames the file <code>src</code> to <code>dest</code>
     * @exception org.apache.tools.ant.BuildException The exception is
     * thrown, if the rename operation fails.
     */ Modifier public execute BuildException StatementExpression MethodInvocation Literal ""DEPRECATED - The rename task is deprecated.  Use move instead."" log IfStatement BinaryOperation == MemberReference dest Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""dest attribute is required"" MethodInvocation getLocation End IfStatement BinaryOperation == MemberReference src Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""src attribute is required"" MethodInvocation getLocation End IfStatement BinaryOperation && MemberReference ! replace MethodInvocation dest exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + MemberReference dest Literal "" already exists."" End TryStatement StatementExpression MethodInvocation FileUtils MethodInvocation MemberReference src MemberReference dest rename newFileUtils CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Unable to rename "" MemberReference src Literal "" to "" MemberReference dest MemberReference e MethodInvocation getLocation ReferenceType Task",0
74,74,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.starteam Import com.starbase.starteam.BuildNumber Import com.starbase.starteam.Server Import com.starbase.starteam.StarTeamFinder Import com.starbase.starteam.TypeNames Import com.starbase.starteam.User Import com.starbase.starteam.View Import java.util.StringTokenizer Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task ClassDeclaration Modifier public abstract /**
 * Common super class for all StarTeam tasks.
 * At this level of the hierarchy we are concerned only with obtaining a
 * connection to the StarTeam server.  The subclass <code>TreeBasedTask</code>,
 * also abstract defines the tree-walking behavior common to many subtasks.
 *
 * @see TreeBasedTask
 * @version 1.1
 */ StarTeamTask FieldDeclaration /**
     * The username of the connection
     */ Modifier private ReferenceType String VariableDeclarator userName FieldDeclaration /**
     * The username of the connection
     */ Modifier private ReferenceType String VariableDeclarator password FieldDeclaration /**
     * name of Starteam server to connect to
     */ Modifier private ReferenceType String VariableDeclarator servername FieldDeclaration /**
     * port of Starteam server to connect to
     */ Modifier private ReferenceType String VariableDeclarator serverport FieldDeclaration /**
     * name of Starteam project to connect to
     */ Modifier private ReferenceType String VariableDeclarator projectname FieldDeclaration /**
     * name of Starteam view to connect to
     */ Modifier private ReferenceType String VariableDeclarator viewname FieldDeclaration /**
     *The starteam server through which all activities will be done.
     */ Modifier private ReferenceType Server VariableDeclarator server Literal null MethodDeclaration Modifier private logStarteamVersion StatementExpression MethodInvocation BinaryOperation + Literal ""StarTeam version: "" MethodInvocation BuildNumber getDisplayString MemberReference Project MSG_VERBOSE log MethodDeclaration /**
     * Set the name of StarTeamServer;
     * required if <tt>URL</tt> is not set.
     * @param servername a <code>String</code> value
     * @see #setURL(String)
     */ Modifier public final setServername FormalParameter ReferenceType String servername StatementExpression Assignment This MemberReference servername MemberReference servername = MethodDeclaration /**
     * returns the name of the StarTeamServer
     *
     * @return the name of the StarTeam server
     * @see #getURL()
     */ Modifier public final ReferenceType String getServername ReturnStatement This MemberReference servername MethodDeclaration /**
     * set the port number of the StarTeam connection;
     * required if <tt>URL</tt> is not set.
     * @param serverport port number to be set
     * @see #setURL(String)
     */ Modifier public final setServerport FormalParameter ReferenceType String serverport StatementExpression Assignment This MemberReference serverport MemberReference serverport = MethodDeclaration /**
     * returns the port number of the StarTeam connection
     *
     * @return the port number of the StarTeam connection
     * @see #getURL()
     */ Modifier public final ReferenceType String getServerport ReturnStatement This MemberReference serverport MethodDeclaration /**
     * set the name of the StarTeam project to be acted on;
     * required if <tt>URL</tt> is not set.
     *
     * @param projectname the name of the StarTeam project to be acted on
     * @see #setURL(String)
     */ Modifier public final setProjectname FormalParameter ReferenceType String projectname StatementExpression Assignment This MemberReference projectname MemberReference projectname = MethodDeclaration /**
     * returns the name of the StarTeam project to be acted on
     *
     * @return the name of the StarTeam project to be acted on
     * @see #getURL()
     */ Modifier public final ReferenceType String getProjectname ReturnStatement This MemberReference projectname MethodDeclaration /**
     * set the name of the StarTeam view to be acted on;
     * required if <tt>URL</tt> is not set.
     *
     * @param viewname the name of the StarTeam view to be acted on
     * @see #setURL(String)
     */ Modifier public final setViewname FormalParameter ReferenceType String viewname StatementExpression Assignment This MemberReference viewname MemberReference viewname = MethodDeclaration /**
     * returns the name of the StarTeam view to be acted on
     *
     * @return the name of the StarTeam view to be acted on
     * @see #getURL()
     */ Modifier public final ReferenceType String getViewname ReturnStatement This MemberReference viewname MethodDeclaration /**
     * Set the server name, server port,
     * project name and project folder in one shot;
     * optional, but the server connection must be specified somehow.
     *
     * @param url a <code>String</code> of the form
     *             ""servername:portnum/project/view""
     * @see #setServername(String)
     * @see #setServerport(String)
     * @see #setProjectname(String)
     * @see #setViewname(String)
     */ Modifier public final setURL FormalParameter ReferenceType String url LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator t ClassCreator ReferenceType StringTokenizer MemberReference url Literal ""/"" IfStatement MethodInvocation t hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator unpw MethodInvocation t nextToken LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation unpw Literal "":"" indexOf IfStatement BinaryOperation > MemberReference pos Literal 0 BlockStatement StatementExpression Assignment This MemberReference servername MethodInvocation unpw Literal 0 MemberReference pos substring = StatementExpression Assignment This MemberReference serverport MethodInvocation unpw BinaryOperation + MemberReference pos Literal 1 substring = IfStatement MethodInvocation t hasMoreTokens BlockStatement StatementExpression Assignment This MemberReference projectname MethodInvocation t nextToken = IfStatement MethodInvocation t hasMoreTokens BlockStatement StatementExpression Assignment This MemberReference viewname MethodInvocation t nextToken = End End End End MethodDeclaration /**
     * a convenience method which returns the whole StarTeam
     * connection information as a single URL string of
     *
     * @return a <code>String</code> of the form
     *         ""servername:portnum/project/view""
     * @see #getServername()
     * @see #getServerport()
     * @see #getProjectname()
     * @see #getViewname()
     */ Modifier public final ReferenceType String getURL ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + This MemberReference servername Literal "":"" This MemberReference serverport Literal ""/"" This MemberReference projectname Literal ""/"" TernaryExpression BinaryOperation == Literal null This MemberReference viewname Literal """" This MemberReference viewname MethodDeclaration /**
     * returns an URL string useful for interacting with many StarTeamFinder
     * methods.
     *
     * @return the URL string for this task.
     */ Modifier final protected ReferenceType String getViewURL ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation getUserName Literal "":"" MethodInvocation getPassword Literal ""@"" MethodInvocation getURL MethodDeclaration /**
     * set the name of the StarTeam user, needed for the connection
     *
     * @param userName name of the user to be logged in
     */ Modifier public final setUserName FormalParameter ReferenceType String userName StatementExpression Assignment This MemberReference userName MemberReference userName = MethodDeclaration /**
     * returns the name of the StarTeam user
     *
     * @return the name of the StarTeam user
     */ Modifier public final ReferenceType String getUserName ReturnStatement This MemberReference userName MethodDeclaration /**
     * set the password to be used for login; required.
     *
     * @param password the password to be used for login
     */ Modifier public final setPassword FormalParameter ReferenceType String password StatementExpression Assignment This MemberReference password MemberReference password = MethodDeclaration /**
     * returns the password used for login
     *
     * @return the password used for login
     */ Modifier public final ReferenceType String getPassword ReturnStatement This MemberReference password MethodDeclaration /**
     * returns a reference to the server which may be used for informational
     * purposes by subclasses.
     *
     * @return a reference to the server
     */ Modifier final protected ReferenceType Server getServer ReturnStatement This MemberReference server MethodDeclaration /**
     * disconnects from the StarTeam server.  Should be called from the
     * finally clause of every StarTeamTask-based execute method.
     */ Modifier final protected disconnectFromServer IfStatement BinaryOperation != Literal null This MemberReference server BlockStatement StatementExpression This MemberReference server MethodInvocation disconnect StatementExpression MethodInvocation BinaryOperation + Literal ""successful disconnect from StarTeam Server "" MemberReference servername MemberReference Project MSG_VERBOSE log End MethodDeclaration /**
     * returns a list of TypeNames known to the server.
     *
     * @return a reference to the server's TypeNames
     */ Modifier final protected ReferenceType TypeNames getTypeNames ReturnStatement This MemberReference server MethodInvocation getTypeNames MethodDeclaration /**
     * Derived classes must override <code>createSnapshotView</code>
     * defining the kind of configured view appropriate to its task.
     *
     * @param rawview the unconfigured <code>View</code>
     * @return the snapshot <code>View</code> appropriately configured.
     */ Modifier protected abstract ReferenceType View createSnapshotView FormalParameter ReferenceType View rawview BuildException MethodDeclaration /**
     * All subclasses will call on this method to open the view needed for
     * processing.  This method also saves a reference to the
     * <code>Server</code> that may be accessed for information at various
     * points in the process.
     *
     * @return the <code>View</code> that will be used for processing.
     * @see #createSnapshotView(View)
     * @see #getServer()
     */ Modifier protected ReferenceType View openView BuildException StatementExpression MethodInvocation logStarteamVersion LocalVariableDeclaration ReferenceType View VariableDeclarator view Literal null TryStatement StatementExpression Assignment MemberReference view MethodInvocation StarTeamFinder MethodInvocation getViewURL openView = CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Failed to connect to "" MethodInvocation getURL MemberReference e IfStatement BinaryOperation == Literal null MemberReference view BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Cannot find view"" MethodInvocation getURL Literal "" in repository()"" End LocalVariableDeclaration ReferenceType View VariableDeclarator snapshot MethodInvocation MemberReference view createSnapshotView StatementExpression MethodInvocation BinaryOperation + Literal ""Connected to StarTeam view "" MethodInvocation getURL MemberReference Project MSG_VERBOSE log StatementExpression Assignment This MemberReference server MethodInvocation snapshot getServer = ReturnStatement MemberReference snapshot MethodDeclaration /**
     * Returns the name of the user with the supplied ID or a blank string
     * if user not found.
     *
     * @param userID a user's ID
     * @return the name of the user with ID userID
     */ Modifier final protected ReferenceType String getUserName FormalParameter BasicType int userID LocalVariableDeclaration ReferenceType User VariableDeclarator u This MemberReference server MethodInvocation MemberReference userID getUser IfStatement BinaryOperation == Literal null MemberReference u BlockStatement ReturnStatement Literal """" End ReturnStatement MethodInvocation u getName ReferenceType Task",0
329,329,"CompilationUnit PackageDeclaration org.apache.tools.ant.listener Import java.io.FileInputStream Import java.io.IOException Import java.io.InputStream Import java.io.PrintStream Import java.util.Properties Import org.apache.tools.ant.DefaultLogger Import org.apache.tools.ant.Project ClassDeclaration Modifier public final /**
 * Uses ANSI Color Code Sequences to colorize messages
 * sent to the console.
 *
 * If used with the -logfile option, the output file
 * will contain all the necessary escape codes to
 * display the text in colorized mode when displayed
 * in the console using applications like cat, more,
 * etc.
 *
 * This is designed to work on terminals that support ANSI
 * color codes.  It works on XTerm, ETerm, Mindterm, etc.
 * It also works on Win9x (with ANSI.SYS loaded.)
 *
 * NOTE:
 * It doesn't work on WinNT's COMMAND.COM even with
 * ANSI.SYS loaded.
 *
 * The default colors used for differentiating
 * the message levels can be changed by editing the
 * /org/apache/tools/ant/listener/defaults.properties
 * file.
 * This file contains 5 key/value pairs:
 * AnsiColorLogger.ERROR_COLOR=2;31
 * AnsiColorLogger.WARNING_COLOR=2;35
 * AnsiColorLogger.INFO_COLOR=2;36
 * AnsiColorLogger.VERBOSE_COLOR=2;32
 * AnsiColorLogger.DEBUG_COLOR=2;34
 *
 * Another option is to pass a system variable named
 * ant.logger.defaults, with value set to the path of
 * the file that contains user defined Ansi Color
 * Codes, to the <B>java</B> command using -D option.
 *
 * To change these colors use the following chart:
 *
 *      <B>ANSI COLOR LOGGER CONFIGURATION</B>
 *
 * Format for AnsiColorLogger.*=
 *  Attribute;Foreground;Background
 *
 *  Attribute is one of the following:
 *  0 -> Reset All Attributes (return to normal mode)
 *  1 -> Bright (Usually turns on BOLD)
 *  2 -> Dim
 *  3 -> Underline
 *  5 -> link
 *  7 -> Reverse
 *  8 -> Hidden
 *
 *  Foreground is one of the following:
 *  30 -> Black
 *  31 -> Red
 *  32 -> Green
 *  33 -> Yellow
 *  34 -> Blue
 *  35 -> Magenta
 *  36 -> Cyan
 *  37 -> White
 *
 *  Background is one of the following:
 *  40 -> Black
 *  41 -> Red
 *  42 -> Green
 *  43 -> Yellow
 *  44 -> Blue
 *  45 -> Magenta
 *  46 -> Cyan
 *  47 -> White
 *
 */ AnsiColorLogger FieldDeclaration Modifier private final static BasicType int VariableDeclarator ATTR_DIM Literal 2 FieldDeclaration Modifier private final static BasicType int VariableDeclarator FG_RED Literal 31 FieldDeclaration Modifier private final static BasicType int VariableDeclarator FG_GREEN Literal 32 FieldDeclaration Modifier private final static BasicType int VariableDeclarator FG_BLUE Literal 34 FieldDeclaration Modifier private final static BasicType int VariableDeclarator FG_MAGENTA Literal 35 FieldDeclaration Modifier private final static BasicType int VariableDeclarator FG_CYAN Literal 36 FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator PREFIX Literal ""["" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator SUFFIX Literal ""m"" FieldDeclaration Modifier private final static BasicType char VariableDeclarator SEPARATOR Literal ';' FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator END_COLOR BinaryOperation + MemberReference PREFIX MemberReference SUFFIX FieldDeclaration Modifier private ReferenceType String VariableDeclarator errColor BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference ATTR_DIM MemberReference SEPARATOR MemberReference FG_RED MemberReference SUFFIX FieldDeclaration Modifier private ReferenceType String VariableDeclarator warnColor BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference ATTR_DIM MemberReference SEPARATOR MemberReference FG_MAGENTA MemberReference SUFFIX FieldDeclaration Modifier private ReferenceType String VariableDeclarator infoColor BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference ATTR_DIM MemberReference SEPARATOR MemberReference FG_CYAN MemberReference SUFFIX FieldDeclaration Modifier private ReferenceType String VariableDeclarator verboseColor BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference ATTR_DIM MemberReference SEPARATOR MemberReference FG_GREEN MemberReference SUFFIX FieldDeclaration Modifier private ReferenceType String VariableDeclarator debugColor BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference ATTR_DIM MemberReference SEPARATOR MemberReference FG_BLUE MemberReference SUFFIX FieldDeclaration Modifier private BasicType boolean VariableDeclarator colorsSet Literal false MethodDeclaration /**
     * Set the colors to use from a property file specified by the
     * special ant property ant.logger.defaults
     */ Modifier private final setColors LocalVariableDeclaration ReferenceType String VariableDeclarator userColorFile MethodInvocation System Literal ""ant.logger.defaults"" getProperty LocalVariableDeclaration ReferenceType String VariableDeclarator systemColorFile Literal ""/org/apache/tools/ant/listener/defaults.properties"" LocalVariableDeclaration ReferenceType InputStream VariableDeclarator in Literal null TryStatement LocalVariableDeclaration ReferenceType Properties VariableDeclarator prop ClassCreator ReferenceType Properties IfStatement BinaryOperation != MemberReference userColorFile Literal null BlockStatement StatementExpression Assignment MemberReference in ClassCreator ReferenceType FileInputStream MemberReference userColorFile = BlockStatement StatementExpression Assignment MemberReference in MethodInvocation MethodInvocation MemberReference systemColorFile getResourceAsStream getClass = End IfStatement BinaryOperation != MemberReference in Literal null BlockStatement StatementExpression MethodInvocation prop MemberReference in load End LocalVariableDeclaration ReferenceType String VariableDeclarator err MethodInvocation prop Literal ""AnsiColorLogger.ERROR_COLOR"" getProperty LocalVariableDeclaration ReferenceType String VariableDeclarator warn MethodInvocation prop Literal ""AnsiColorLogger.WARNING_COLOR"" getProperty LocalVariableDeclaration ReferenceType String VariableDeclarator info MethodInvocation prop Literal ""AnsiColorLogger.INFO_COLOR"" getProperty LocalVariableDeclaration ReferenceType String VariableDeclarator verbose MethodInvocation prop Literal ""AnsiColorLogger.VERBOSE_COLOR"" getProperty LocalVariableDeclaration ReferenceType String VariableDeclarator debug MethodInvocation prop Literal ""AnsiColorLogger.DEBUG_COLOR"" getProperty IfStatement BinaryOperation != MemberReference err Literal null BlockStatement StatementExpression Assignment MemberReference errColor BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference err MemberReference SUFFIX = End IfStatement BinaryOperation != MemberReference warn Literal null BlockStatement StatementExpression Assignment MemberReference warnColor BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference warn MemberReference SUFFIX = End IfStatement BinaryOperation != MemberReference info Literal null BlockStatement StatementExpression Assignment MemberReference infoColor BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference info MemberReference SUFFIX = End IfStatement BinaryOperation != MemberReference verbose Literal null BlockStatement StatementExpression Assignment MemberReference verboseColor BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference verbose MemberReference SUFFIX = End IfStatement BinaryOperation != MemberReference debug Literal null BlockStatement StatementExpression Assignment MemberReference debugColor BinaryOperation + BinaryOperation + MemberReference PREFIX MemberReference debug MemberReference SUFFIX = End CatchClause CatchClauseParameter IOException ioe IfStatement BinaryOperation != MemberReference in Literal null BlockStatement TryStatement StatementExpression MethodInvocation in close CatchClause CatchClauseParameter IOException e End MethodDeclaration /**
     * @see DefaultLogger#printMessage
     */ Modifier final protected printMessage FormalParameter Modifier final ReferenceType String message FormalParameter Modifier final ReferenceType PrintStream stream FormalParameter Modifier final BasicType int priority IfStatement BinaryOperation && BinaryOperation != MemberReference message Literal null BinaryOperation != MemberReference stream Literal null BlockStatement IfStatement MemberReference ! colorsSet BlockStatement StatementExpression MethodInvocation setColors StatementExpression Assignment MemberReference colorsSet Literal true = End LocalVariableDeclaration Modifier final ReferenceType StringBuffer VariableDeclarator msg ClassCreator ReferenceType StringBuffer MemberReference message SwitchStatement MemberReference priority SwitchStatementCase MemberReference Project MSG_ERR StatementExpression MethodInvocation msg Literal 0 MemberReference errColor insert StatementExpression MethodInvocation msg MemberReference END_COLOR append BreakStatement SwitchStatementCase MemberReference Project MSG_WARN StatementExpression MethodInvocation msg Literal 0 MemberReference warnColor insert StatementExpression MethodInvocation msg MemberReference END_COLOR append BreakStatement SwitchStatementCase MemberReference Project MSG_INFO StatementExpression MethodInvocation msg Literal 0 MemberReference infoColor insert StatementExpression MethodInvocation msg MemberReference END_COLOR append BreakStatement SwitchStatementCase MemberReference Project MSG_VERBOSE StatementExpression MethodInvocation msg Literal 0 MemberReference verboseColor insert StatementExpression MethodInvocation msg MemberReference END_COLOR append BreakStatement SwitchStatementCase MemberReference Project MSG_DEBUG StatementExpression MethodInvocation msg Literal 0 MemberReference debugColor insert StatementExpression MethodInvocation msg MemberReference END_COLOR append BreakStatement End LocalVariableDeclaration Modifier final ReferenceType String VariableDeclarator strmessage MethodInvocation msg toString StatementExpression MethodInvocation stream MemberReference strmessage println End ReferenceType DefaultLogger",0
36,36,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.util.ArrayList Import java.util.Collections Import java.util.Enumeration Import java.util.Iterator Import java.util.List Import java.util.StringTokenizer Import org.apache.tools.ant.util.CollectionUtils ClassDeclaration Modifier public /**
 * Class to implement a target object with required parameters.
 *
 */ Target FieldDeclaration /** Name of this target. */ Modifier private ReferenceType String VariableDeclarator name FieldDeclaration /** The ""if"" condition to test on execution. */ Modifier private ReferenceType String VariableDeclarator ifCondition Literal """" FieldDeclaration /** The ""unless"" condition to test on execution. */ Modifier private ReferenceType String VariableDeclarator unlessCondition Literal """" FieldDeclaration /** List of targets this target is dependent on. */ Modifier private ReferenceType List VariableDeclarator dependencies Literal null FieldDeclaration /** Children of this target (tasks and data types). */ Modifier private ReferenceType List VariableDeclarator children ClassCreator ReferenceType ArrayList FieldDeclaration /** Since Ant 1.6.2 */ Modifier private ReferenceType Location VariableDeclarator location MemberReference Location UNKNOWN_LOCATION FieldDeclaration /** Project this target belongs to. */ Modifier private ReferenceType Project VariableDeclarator project FieldDeclaration /** Description of this target, if any. */ Modifier private ReferenceType String VariableDeclarator description Literal null ConstructorDeclaration Modifier public /** Sole constructor. */ Target MethodDeclaration /**
     * Sets the project this target belongs to.
     *
     * @param project The project this target belongs to.
     *                Must not be <code>null</code>.
     */ Modifier public setProject FormalParameter ReferenceType Project project StatementExpression Assignment This MemberReference project MemberReference project = MethodDeclaration /**
     * Returns the project this target belongs to.
     *
     * @return The project this target belongs to, or <code>null</code> if
     *         the project has not been set yet.
     */ Modifier public ReferenceType Project getProject ReturnStatement MemberReference project MethodDeclaration /**
     * Sets the location of this target's definition.
     *
     * @param location   <CODE>Location</CODE>
     */ Modifier public setLocation FormalParameter ReferenceType Location location StatementExpression Assignment This MemberReference location MemberReference location = MethodDeclaration /**
     * Get the location of this target's definition.
     *
     * @return <CODE>Location</CODE>
     */ Modifier public ReferenceType Location getLocation ReturnStatement MemberReference location MethodDeclaration /**
     * Sets the list of targets this target is dependent on.
     * The targets themselves are not resolved at this time.
     *
     * @param depS A comma-separated list of targets this target
     *             depends on. Must not be <code>null</code>.
     */ Modifier public setDepends FormalParameter ReferenceType String depS IfStatement BinaryOperation > MethodInvocation depS length Literal 0 BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator tok ClassCreator ReferenceType StringTokenizer MemberReference depS Literal "","" Literal true WhileStatement MethodInvocation tok hasMoreTokens BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator token MethodInvocation tok MethodInvocation trim nextToken IfStatement BinaryOperation || MethodInvocation token Literal """" equals MethodInvocation token Literal "","" equals BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Syntax Error: Depend "" Literal ""attribute for target \"""" MethodInvocation getName Literal ""\"" has an empty string for dependency."" End StatementExpression MethodInvocation MemberReference token addDependency IfStatement MethodInvocation tok hasMoreTokens BlockStatement StatementExpression Assignment MemberReference token MethodInvocation tok nextToken = IfStatement BinaryOperation || MethodInvocation ! tok hasMoreTokens MethodInvocation ! token Literal "","" equals BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Syntax Error: Depend "" Literal ""attribute for target \"""" MethodInvocation getName Literal ""\"" ends with a , character"" End End End End MethodDeclaration /**
     * Sets the name of this target.
     *
     * @param name The name of this target. Should not be <code>null</code>.
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MemberReference name = MethodDeclaration /**
     * Returns the name of this target.
     *
     * @return the name of this target, or <code>null</code> if the
     *         name has not been set yet.
     */ Modifier public ReferenceType String getName ReturnStatement MemberReference name MethodDeclaration /**
     * Adds a task to this target.
     *
     * @param task The task to be added. Must not be <code>null</code>.
     */ Modifier public addTask FormalParameter ReferenceType Task task StatementExpression MethodInvocation children MemberReference task add MethodDeclaration /**
     * Adds the wrapper for a data type element to this target.
     *
     * @param r The wrapper for the data type element to be added.
     *          Must not be <code>null</code>.
     */ Modifier public addDataType FormalParameter ReferenceType RuntimeConfigurable r StatementExpression MethodInvocation children MemberReference r add MethodDeclaration /**
     * Returns the current set of tasks to be executed by this target.
     *
     * @return an array of the tasks currently within this target
     */ Modifier public ReferenceType Task getTasks LocalVariableDeclaration ReferenceType List VariableDeclarator tasks ClassCreator ReferenceType ArrayList MethodInvocation children size LocalVariableDeclaration ReferenceType Iterator VariableDeclarator it MethodInvocation children iterator WhileStatement MethodInvocation it hasNext BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation it next IfStatement BinaryOperation instanceof MemberReference o ReferenceType Task BlockStatement StatementExpression MethodInvocation tasks MemberReference o add End End ReturnStatement Cast ReferenceType Task MethodInvocation tasks ArrayCreator ReferenceType Task MethodInvocation tasks size toArray MethodDeclaration /**
     * Adds a dependency to this target.
     *
     * @param dependency The name of a target this target is dependent on.
     *                   Must not be <code>null</code>.
     */ Modifier public addDependency FormalParameter ReferenceType String dependency IfStatement BinaryOperation == MemberReference dependencies Literal null BlockStatement StatementExpression Assignment MemberReference dependencies ClassCreator ReferenceType ArrayList Literal 2 = End StatementExpression MethodInvocation dependencies MemberReference dependency add MethodDeclaration /**
     * Returns an enumeration of the dependencies of this target.
     *
     * @return an enumeration of the dependencies of this target
     */ Modifier public ReferenceType Enumeration getDependencies IfStatement BinaryOperation != MemberReference dependencies Literal null BlockStatement ReturnStatement MethodInvocation Collections MemberReference dependencies enumeration BlockStatement ReturnStatement ClassCreator ReferenceType CollectionUtils ReferenceType EmptyEnumeration End MethodDeclaration /**
     * Does this target depend on the named target?
     * @param other the other named target.
     * @return true if the target does depend on the named target
     * @since Ant 1.6
     */ Modifier public BasicType boolean dependsOn FormalParameter ReferenceType String other IfStatement BinaryOperation != MethodInvocation getProject Literal null BlockStatement LocalVariableDeclaration ReferenceType List VariableDeclarator l MethodInvocation MethodInvocation MethodInvocation getName MethodInvocation MethodInvocation getTargets getProject topoSort getProject LocalVariableDeclaration BasicType int VariableDeclarator myIdx MethodInvocation l This indexOf LocalVariableDeclaration BasicType int VariableDeclarator otherIdx MethodInvocation l MethodInvocation MethodInvocation getTargets MethodInvocation MemberReference other get getProject indexOf ReturnStatement BinaryOperation >= MemberReference myIdx MemberReference otherIdx End ReturnStatement Literal false MethodDeclaration /**
     * Sets the ""if"" condition to test on execution. This is the
     * name of a property to test for existence - if the property
     * is not set, the task will not execute. The property goes
     * through property substitution once before testing, so if
     * property <code>foo</code> has value <code>bar</code>, setting
     * the ""if"" condition to <code>${foo}_x</code> will mean that the
     * task will only execute if property <code>bar_x</code> is set.
     *
     * @param property The property condition to test on execution.
     *                 May be <code>null</code>, in which case
     *                 no ""if"" test is performed.
     */ Modifier public setIf FormalParameter ReferenceType String property StatementExpression Assignment This MemberReference ifCondition TernaryExpression BinaryOperation == MemberReference property Literal null Literal """" MemberReference property = MethodDeclaration /**
     * Returns the ""if"" property condition of this target.
     *
     * @return the ""if"" property condition or <code>null</code> if no
     *         ""if"" condition had been defined.
     */ Modifier public ReferenceType String getIf ReturnStatement TernaryExpression Literal MethodInvocation MemberReference ifCondition equals """" Literal null MemberReference ifCondition MethodDeclaration /**
     * Sets the ""unless"" condition to test on execution. This is the
     * name of a property to test for existence - if the property
     * is set, the task will not execute. The property goes
     * through property substitution once before testing, so if
     * property <code>foo</code> has value <code>bar</code>, setting
     * the ""unless"" condition to <code>${foo}_x</code> will mean that the
     * task will only execute if property <code>bar_x</code> isn't set.
     *
     * @param property The property condition to test on execution.
     *                 May be <code>null</code>, in which case
     *                 no ""unless"" test is performed.
     */ Modifier public setUnless FormalParameter ReferenceType String property StatementExpression Assignment This MemberReference unlessCondition TernaryExpression BinaryOperation == MemberReference property Literal null Literal """" MemberReference property = MethodDeclaration /**
     * Returns the ""unless"" property condition of this target.
     *
     * @return the ""unless"" property condition or <code>null</code>
     *         if no ""unless"" condition had been defined.
     */ Modifier public ReferenceType String getUnless ReturnStatement TernaryExpression Literal MethodInvocation MemberReference unlessCondition equals """" Literal null MemberReference unlessCondition MethodDeclaration /**
     * Sets the description of this target.
     *
     * @param description The description for this target.
     *                    May be <code>null</code>, indicating that no
     *                    description is available.
     */ Modifier public setDescription FormalParameter ReferenceType String description StatementExpression Assignment This MemberReference description MemberReference description = MethodDeclaration /**
     * Returns the description of this target.
     *
     * @return the description of this target, or <code>null</code> if no
     *         description is available.
     */ Modifier public ReferenceType String getDescription ReturnStatement MemberReference description MethodDeclaration /**
     * Returns the name of this target.
     *
     * @return the name of this target, or <code>null</code> if the
     *         name has not been set yet.
     */ Modifier public ReferenceType String toString ReturnStatement MemberReference name MethodDeclaration /**
     * Executes the target if the ""if"" and ""unless"" conditions are
     * satisfied. Dependency checking should be done before calling this
     * method, as it does no checking of its own. If either the ""if""
     * or ""unless"" test prevents this target from being executed, a verbose
     * message is logged giving the reason. It is recommended that clients
     * of this class call performTasks rather than this method so that
     * appropriate build events are fired.
     *
     * @exception BuildException if any of the tasks fail or if a data type
     *                           configuration fails.
     *
     * @see #performTasks()
     * @see #setIf(String)
     * @see #setUnless(String)
     */ Modifier public execute BuildException IfStatement BinaryOperation && MethodInvocation testIfCondition MethodInvocation testUnlessCondition BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator taskPosition Literal 0 BinaryOperation < MemberReference taskPosition MethodInvocation children size MemberReference ++ taskPosition BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator o MethodInvocation children MemberReference taskPosition get IfStatement BinaryOperation instanceof MemberReference o ReferenceType Task BlockStatement LocalVariableDeclaration ReferenceType Task VariableDeclarator task Cast ReferenceType Task MemberReference o StatementExpression MethodInvocation task perform BlockStatement LocalVariableDeclaration ReferenceType RuntimeConfigurable VariableDeclarator r Cast ReferenceType RuntimeConfigurable MemberReference o StatementExpression MethodInvocation r MemberReference project maybeConfigure End End IfStatement MethodInvocation ! testIfCondition BlockStatement StatementExpression MethodInvocation project This BinaryOperation + BinaryOperation + Literal ""Skipped because property '"" MethodInvocation project This MemberReference ifCondition replaceProperties Literal ""' not set."" MemberReference Project MSG_VERBOSE log BlockStatement StatementExpression MethodInvocation project This BinaryOperation + BinaryOperation + Literal ""Skipped because property '"" MethodInvocation project This MemberReference unlessCondition replaceProperties Literal ""' set."" MemberReference Project MSG_VERBOSE log End End MethodDeclaration /**
     * Performs the tasks within this target (if the conditions are met),
     * firing target started/target finished messages around a call to
     * execute.
     *
     * @see #execute()
     */ Modifier public final performTasks LocalVariableDeclaration ReferenceType RuntimeException VariableDeclarator thrown Literal null StatementExpression MethodInvocation project This fireTargetStarted TryStatement StatementExpression MethodInvocation execute CatchClause CatchClauseParameter RuntimeException exc StatementExpression Assignment MemberReference thrown MemberReference exc = ThrowStatement MemberReference exc StatementExpression MethodInvocation project This MemberReference thrown fireTargetFinished MethodDeclaration /**
     * Replaces all occurrences of the given task in the list
     * of children with the replacement data type wrapper.
     *
     * @param el The task to replace.
     *           Must not be <code>null</code>.
     * @param o  The data type wrapper to replace <code>el</code> with.
     */ replaceChild FormalParameter ReferenceType Task el FormalParameter ReferenceType RuntimeConfigurable o LocalVariableDeclaration BasicType int VariableDeclarator index WhileStatement BinaryOperation >= Assignment MemberReference index MethodInvocation children MemberReference el indexOf = Literal 0 BlockStatement StatementExpression MethodInvocation children MemberReference index MemberReference o set End MethodDeclaration /**
     * Replaces all occurrences of the given task in the list
     * of children with the replacement task.
     *
     * @param el The task to replace.
     *           Must not be <code>null</code>.
     * @param o  The task to replace <code>el</code> with.
     */ replaceChild FormalParameter ReferenceType Task el FormalParameter ReferenceType Task o LocalVariableDeclaration BasicType int VariableDeclarator index WhileStatement BinaryOperation >= Assignment MemberReference index MethodInvocation children MemberReference el indexOf = Literal 0 BlockStatement StatementExpression MethodInvocation children MemberReference index MemberReference o set End MethodDeclaration /**
     * Tests whether or not the ""if"" condition is satisfied.
     *
     * @return whether or not the ""if"" condition is satisfied. If no
     *         condition (or an empty condition) has been set,
     *         <code>true</code> is returned.
     *
     * @see #setIf(String)
     */ Modifier private BasicType boolean testIfCondition IfStatement Literal MethodInvocation MemberReference ifCondition equals """" BlockStatement ReturnStatement Literal true End LocalVariableDeclaration ReferenceType String VariableDeclarator test MethodInvocation project MemberReference ifCondition replaceProperties ReturnStatement BinaryOperation != MethodInvocation project MemberReference test getProperty Literal null MethodDeclaration /**
     * Tests whether or not the ""unless"" condition is satisfied.
     *
     * @return whether or not the ""unless"" condition is satisfied. If no
     *         condition (or an empty condition) has been set,
     *         <code>true</code> is returned.
     *
     * @see #setUnless(String)
     */ Modifier private BasicType boolean testUnlessCondition IfStatement Literal MethodInvocation MemberReference unlessCondition equals """" BlockStatement ReturnStatement Literal true End LocalVariableDeclaration ReferenceType String VariableDeclarator test MethodInvocation project MemberReference unlessCondition replaceProperties ReturnStatement BinaryOperation == MethodInvocation project MemberReference test getProperty Literal null ReferenceType TaskContainer",0
31,31,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.clearcase Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Execute Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Task to perform mklabel command to ClearCase.
 * <p>
 * The following attributes are interpreted:
 * <table border=""1"">
 *   <tr>
 *     <th>Attribute</th>
 *     <th>Values</th>
 *     <th>Required</th>
 *   </tr>
 *   <tr>
 *      <td>viewpath</td>
 *      <td>Path to the ClearCase view file or directory that the command will operate on</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>replace</td>
 *      <td>Replace a label of the same type on the same branch</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>recurse</td>
 *      <td>Process each subdirectory under viewpath</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>version</td>
 *      <td>Identify a specific version to attach the label to</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>typename</td>
 *      <td>Name of the label type</td>
 *      <td>Yes</td>
 *   <tr>
 *   <tr>
 *      <td>vob</td>
 *      <td>Name of the VOB</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>comment</td>
 *      <td>Specify a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>commentfile</td>
 *      <td>Specify a file containing a comment. Only one of comment or cfile may be used.</td>
 *      <td>No</td>
 *   <tr>
 *   <tr>
 *      <td>failonerr</td>
 *      <td>Throw an exception if the command fails. Default is true</td>
 *      <td>No</td>
 *   <tr>
 * </table>
 *
 */ CCMklabel FieldDeclaration Modifier private BasicType boolean VariableDeclarator mReplace Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator mRecurse Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator mVersion Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mTypeName Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mVOB Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mComment Literal null FieldDeclaration Modifier private ReferenceType String VariableDeclarator mCfile Literal null MethodDeclaration /**
     * Executes the task.
     * <p>
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType Commandline VariableDeclarator commandLine ClassCreator ReferenceType Commandline LocalVariableDeclaration ReferenceType Project VariableDeclarator aProj MethodInvocation getProject LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 IfStatement BinaryOperation == MethodInvocation getTypeName Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Required attribute TypeName not specified"" End IfStatement BinaryOperation == MethodInvocation getViewPath Literal null BlockStatement StatementExpression MethodInvocation MethodInvocation aProj MethodInvocation getPath getBaseDir setViewPath End StatementExpression MethodInvocation commandLine MethodInvocation getClearToolCommand setExecutable StatementExpression MethodInvocation commandLine MethodInvocation MemberReference COMMAND_MKLABEL setValue createArgument StatementExpression MethodInvocation MemberReference commandLine checkOptions IfStatement MethodInvocation ! getFailOnErr BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation + Literal ""Ignoring any errors that occur for: "" MethodInvocation getViewPathBasename MemberReference Project MSG_VERBOSE log getProject End StatementExpression Assignment MemberReference result MethodInvocation MemberReference commandLine run = IfStatement BinaryOperation && MethodInvocation Execute MemberReference result isFailure MethodInvocation getFailOnErr BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator msg BinaryOperation + Literal ""Failed executing: "" MethodInvocation commandLine toString ThrowStatement ClassCreator ReferenceType BuildException MemberReference msg MethodInvocation getLocation End MethodDeclaration /**
     * Check the command line options.
     */ Modifier private checkOptions FormalParameter ReferenceType Commandline cmd IfStatement MethodInvocation getReplace BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_REPLACE setValue createArgument End IfStatement MethodInvocation getRecurse BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_RECURSE setValue createArgument End IfStatement BinaryOperation != MethodInvocation getVersion Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getVersionCommand End IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentCommand BlockStatement IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getCommentFileCommand BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_NOCOMMENT setValue createArgument End End IfStatement BinaryOperation != MethodInvocation getTypeName Literal null BlockStatement StatementExpression MethodInvocation MemberReference cmd getTypeCommand End StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getViewPath setValue createArgument MethodDeclaration /**
     * Set the replace flag
     *
     * @param replace the status to set the flag to
     */ Modifier public setReplace FormalParameter BasicType boolean replace StatementExpression Assignment MemberReference mReplace MemberReference replace = MethodDeclaration /**
     * Get replace flag status
     *
     * @return boolean containing status of replace flag
     */ Modifier public BasicType boolean getReplace ReturnStatement MemberReference mReplace MethodDeclaration /**
     * Set recurse flag
     *
     * @param recurse the status to set the flag to
     */ Modifier public setRecurse FormalParameter BasicType boolean recurse StatementExpression Assignment MemberReference mRecurse MemberReference recurse = MethodDeclaration /**
     * Get recurse flag status
     *
     * @return boolean containing status of recurse flag
     */ Modifier public BasicType boolean getRecurse ReturnStatement MemberReference mRecurse MethodDeclaration /**
     * Set the version flag
     *
     * @param version the status to set the flag to
     */ Modifier public setVersion FormalParameter ReferenceType String version StatementExpression Assignment MemberReference mVersion MemberReference version = MethodDeclaration /**
     * Get version flag status
     *
     * @return boolean containing status of version flag
     */ Modifier public ReferenceType String getVersion ReturnStatement MemberReference mVersion MethodDeclaration /**
     * Set comment string
     *
     * @param comment the comment string
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression Assignment MemberReference mComment MemberReference comment = MethodDeclaration /**
     * Get comment string
     *
     * @return String containing the comment
     */ Modifier public ReferenceType String getComment ReturnStatement MemberReference mComment MethodDeclaration /**
     * Set comment file
     *
     * @param cfile the path to the comment file
     */ Modifier public setCommentFile FormalParameter ReferenceType String cfile StatementExpression Assignment MemberReference mCfile MemberReference cfile = MethodDeclaration /**
     * Get comment file
     *
     * @return String containing the path to the comment file
     */ Modifier public ReferenceType String getCommentFile ReturnStatement MemberReference mCfile MethodDeclaration /**
     * Set the type-name
     *
     * @param tn the type name
     */ Modifier public setTypeName FormalParameter ReferenceType String tn StatementExpression Assignment MemberReference mTypeName MemberReference tn = MethodDeclaration /**
     * Get type-name
     *
     * @return String containing type name
     */ Modifier public ReferenceType String getTypeName ReturnStatement MemberReference mTypeName MethodDeclaration /**
     * Set the VOB name
     *
     * @param vob the VOB name
     */ Modifier public setVOB FormalParameter ReferenceType String vob StatementExpression Assignment MemberReference mVOB MemberReference vob = MethodDeclaration /**
     * Get VOB name
     *
     * @return String containing VOB name
     */ Modifier public ReferenceType String getVOB ReturnStatement MemberReference mVOB MethodDeclaration /**
     * Get the 'version' command
     *
     * @param cmd CommandLine containing the command line string with or
     *                    without the version flag and string appended
     */ Modifier private getVersionCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getVersion Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_VERSION setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getVersion setValue createArgument End MethodDeclaration /**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or
     *        without the comment flag and string appended
     */ Modifier private getCommentCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENT setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getComment setValue createArgument End MethodDeclaration /**
     * Get the 'commentfile' command
     *
     * @param cmd         containing the command line string with or
     *                    without the commentfile flag and file appended
     */ Modifier private getCommentFileCommand FormalParameter ReferenceType Commandline cmd IfStatement BinaryOperation != MethodInvocation getCommentFile Literal null BlockStatement StatementExpression MethodInvocation cmd MethodInvocation MemberReference FLAG_COMMENTFILE setValue createArgument StatementExpression MethodInvocation cmd MethodInvocation MethodInvocation getCommentFile setValue createArgument End MethodDeclaration /**
     * Get the type-name
     *
     * @param cmd containing the command line string with or
     *        without the type-name
     */ Modifier private getTypeCommand FormalParameter ReferenceType Commandline cmd LocalVariableDeclaration ReferenceType String VariableDeclarator typenm Literal null IfStatement BinaryOperation != MethodInvocation getTypeName Literal null BlockStatement StatementExpression Assignment MemberReference typenm MethodInvocation getTypeName = IfStatement BinaryOperation != MethodInvocation getVOB Literal null BlockStatement StatementExpression Assignment MemberReference typenm BinaryOperation + Literal ""@"" MethodInvocation getVOB += End StatementExpression MethodInvocation cmd MethodInvocation MemberReference typenm setValue createArgument End FieldDeclaration /**
     * -replace flag -- replace another label of the same type
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_REPLACE Literal ""-replace"" FieldDeclaration /**
     * -recurse flag -- process all subdirectories
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_RECURSE Literal ""-recurse"" FieldDeclaration /**
     * -version flag -- attach label to specified version
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_VERSION Literal ""-version"" FieldDeclaration /**
     * -c flag -- comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENT Literal ""-c"" FieldDeclaration /**
     * -cfile flag -- file containing a comment to attach to the file
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_COMMENTFILE Literal ""-cfile"" FieldDeclaration /**
     * -nc flag -- no comment is specified
     */ Modifier public final static ReferenceType String VariableDeclarator FLAG_NOCOMMENT Literal ""-nc"" ReferenceType ClearCase",1
597,597,,0
249,249,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.condition Import java.util.Locale Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Condition that tests the OS type.
 *
 * @since Ant 1.4
 * @version $Revision$
 */ Os FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator OS_NAME MethodInvocation System MethodInvocation MemberReference Locale US toLowerCase Literal ""os.name"" getProperty FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator OS_ARCH MethodInvocation System MethodInvocation MemberReference Locale US toLowerCase Literal ""os.arch"" getProperty FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator OS_VERSION MethodInvocation System MethodInvocation MemberReference Locale US toLowerCase Literal ""os.version"" getProperty FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator PATH_SEP MethodInvocation System Literal ""path.separator"" getProperty FieldDeclaration Modifier private ReferenceType String VariableDeclarator family FieldDeclaration Modifier private ReferenceType String VariableDeclarator name FieldDeclaration Modifier private ReferenceType String VariableDeclarator version FieldDeclaration Modifier private ReferenceType String VariableDeclarator arch ConstructorDeclaration Modifier public /**
     * Default constructor
     *
     */ Os ConstructorDeclaration Modifier public /**
     * Constructor that sets the family attribute
     *
     * @param family a String value
     */ Os FormalParameter ReferenceType String family StatementExpression MethodInvocation MemberReference family setFamily MethodDeclaration /**
     * Sets the desired OS family type
     *
     * @param f      The OS family type desired<br />
     *               Possible values:<br />
     *               <ul>
     *               <li>dos</li>
     *               <li>mac</li>
     *               <li>netware</li>
     *               <li>os/2</li>
     *               <li>tandem</li>
     *               <li>unix</li>
     *               <li>windows</li>
     *               <li>win9x</li>
     *               <li>z/os</li>
     *               <li>os/400</li>
     *               </ul>
     */ Modifier public setFamily FormalParameter ReferenceType String f StatementExpression Assignment MemberReference family MethodInvocation f MemberReference Locale US toLowerCase = MethodDeclaration /**
     * Sets the desired OS name
     *
     * @param name   The OS name
     */ Modifier public setName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference name MethodInvocation name MemberReference Locale US toLowerCase = MethodDeclaration /**
     * Sets the desired OS architecture
     *
     * @param arch   The OS architecture
     */ Modifier public setArch FormalParameter ReferenceType String arch StatementExpression Assignment This MemberReference arch MethodInvocation arch MemberReference Locale US toLowerCase = MethodDeclaration /**
     * Sets the desired OS version
     *
     * @param version   The OS version
     */ Modifier public setVersion FormalParameter ReferenceType String version StatementExpression Assignment This MemberReference version MethodInvocation version MemberReference Locale US toLowerCase = MethodDeclaration /**
     * Determines if the OS on which Ant is executing matches the type of
     * that set in setFamily.
     * @see Os#setFamily(String)
     */ Modifier public BasicType boolean eval BuildException ReturnStatement MethodInvocation MemberReference family MemberReference name MemberReference arch MemberReference version isOs MethodDeclaration /**
     * Determines if the OS on which Ant is executing matches the
     * given OS family.
     * @param family the family to check for
     * @return true if the OS matches
     * @since 1.5
     */ Modifier public static BasicType boolean isFamily FormalParameter ReferenceType String family ReturnStatement MethodInvocation MemberReference family Literal null Literal null Literal null isOs MethodDeclaration /**
     * Determines if the OS on which Ant is executing matches the
     * given OS name.
     *
     * @param name the OS name to check for
     * @return true if the OS matches
     * @since 1.7
     */ Modifier public static BasicType boolean isName FormalParameter ReferenceType String name ReturnStatement MethodInvocation Literal null MemberReference name Literal null Literal null isOs MethodDeclaration /**
     * Determines if the OS on which Ant is executing matches the
     * given OS architecture.
     *
     * @param arch the OS architecture to check for
     * @return true if the OS matches
     * @since 1.7
     */ Modifier public static BasicType boolean isArch FormalParameter ReferenceType String arch ReturnStatement MethodInvocation Literal null Literal null MemberReference arch Literal null isOs MethodDeclaration /**
     * Determines if the OS on which Ant is executing matches the
     * given OS version.
     *
     * @param version the OS version to check for
     * @return true if the OS matches
     * @since 1.7
     */ Modifier public static BasicType boolean isVersion FormalParameter ReferenceType String version ReturnStatement MethodInvocation Literal null Literal null Literal null MemberReference version isOs MethodDeclaration /**
     * Determines if the OS on which Ant is executing matches the
     * given OS family, name, architecture and version
     *
     * @param family   The OS family
     * @param name   The OS name
     * @param arch   The OS architecture
     * @param version   The OS version
     * @return true if the OS matches
     * @since 1.7
     */ Modifier public static BasicType boolean isOs FormalParameter ReferenceType String family FormalParameter ReferenceType String name FormalParameter ReferenceType String arch FormalParameter ReferenceType String version LocalVariableDeclaration BasicType boolean VariableDeclarator retValue Literal false IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation != MemberReference family Literal null BinaryOperation != MemberReference name Literal null BinaryOperation != MemberReference arch Literal null BinaryOperation != MemberReference version Literal null BlockStatement LocalVariableDeclaration BasicType boolean VariableDeclarator isFamily Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator isName Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator isArch Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator isVersion Literal true IfStatement BinaryOperation != MemberReference family Literal null BlockStatement IfStatement MethodInvocation family Literal ""windows"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation > MethodInvocation OS_NAME Literal ""windows"" indexOf Literal - 1 = IfStatement MethodInvocation family Literal ""os/2"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation > MethodInvocation OS_NAME Literal ""os/2"" indexOf Literal - 1 = IfStatement MethodInvocation family Literal ""netware"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation > MethodInvocation OS_NAME Literal ""netware"" indexOf Literal - 1 = IfStatement MethodInvocation family Literal ""dos"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation && MethodInvocation PATH_SEP Literal "";"" equals MethodInvocation ! Literal ""netware"" isFamily = IfStatement MethodInvocation family Literal ""mac"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation > MethodInvocation OS_NAME Literal ""mac"" indexOf Literal - 1 = IfStatement MethodInvocation family Literal ""tandem"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation > MethodInvocation OS_NAME Literal ""nonstop_kernel"" indexOf Literal - 1 = IfStatement MethodInvocation family Literal ""unix"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation && BinaryOperation && MethodInvocation PATH_SEP Literal "":"" equals MethodInvocation ! Literal ""openvms"" isFamily BinaryOperation || MethodInvocation ! Literal ""mac"" isFamily MethodInvocation OS_NAME Literal ""x"" endsWith = IfStatement MethodInvocation family Literal ""win9x"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation && MethodInvocation Literal ""windows"" isFamily BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation >= MethodInvocation OS_NAME Literal ""95"" indexOf Literal 0 BinaryOperation >= MethodInvocation OS_NAME Literal ""98"" indexOf Literal 0 BinaryOperation >= MethodInvocation OS_NAME Literal ""me"" indexOf Literal 0 BinaryOperation >= MethodInvocation OS_NAME Literal ""ce"" indexOf Literal 0 = IfStatement MethodInvocation family Literal ""z/os"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation || BinaryOperation > MethodInvocation OS_NAME Literal ""z/os"" indexOf Literal - 1 BinaryOperation > MethodInvocation OS_NAME Literal ""os/390"" indexOf Literal - 1 = IfStatement MethodInvocation family Literal ""os/400"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation > MethodInvocation OS_NAME Literal ""os/400"" indexOf Literal - 1 = IfStatement MethodInvocation family Literal ""openvms"" equals BlockStatement StatementExpression Assignment MemberReference isFamily BinaryOperation > MethodInvocation OS_NAME Literal ""openvms"" indexOf Literal - 1 = BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Don\'t know how to detect os family \"""" MemberReference family Literal ""\"""" End End End End End End End End End End End End IfStatement BinaryOperation != MemberReference name Literal null BlockStatement StatementExpression Assignment MemberReference isName MethodInvocation name MemberReference OS_NAME equals = End IfStatement BinaryOperation != MemberReference arch Literal null BlockStatement StatementExpression Assignment MemberReference isArch MethodInvocation arch MemberReference OS_ARCH equals = End IfStatement BinaryOperation != MemberReference version Literal null BlockStatement StatementExpression Assignment MemberReference isVersion MethodInvocation version MemberReference OS_VERSION equals = End StatementExpression Assignment MemberReference retValue BinaryOperation && BinaryOperation && BinaryOperation && MemberReference isFamily MemberReference isName MemberReference isArch MemberReference isVersion = End ReturnStatement MemberReference retValue ReferenceType Condition",0
391,391,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.condition Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * &lt;not&gt; condition.
 *
 * Evaluates to true if the single condition nested into it is false
 * and vice versa.
 *
 * @since Ant 1.4
 * @version $Revision$
 */ Not MethodDeclaration /**
     * Evaluate condition
     *
     * @return true if the condition is true.
     * @throws BuildException if the condition is not configured correctly.
     */ Modifier public BasicType boolean eval BuildException IfStatement BinaryOperation > MethodInvocation countConditions Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""You must not nest more than one "" Literal ""condition into <not>"" End IfStatement BinaryOperation < MethodInvocation countConditions Literal 1 BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""You must nest a condition into <not>"" End ReturnStatement Cast ReferenceType Condition MethodInvocation MethodInvocation nextElement getConditions ReferenceType ConditionBase ReferenceType Condition",0
166,166,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.condition Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.ProjectComponent ClassDeclaration Modifier public /**
 * Condition that tests whether a given string evals to false
 *
 * @since Ant 1.5
 */ IsFalse FieldDeclaration /**
     * what we eval
     */ Modifier private ReferenceType Boolean VariableDeclarator value Literal null MethodDeclaration /**
     * set the value to be tested; let ant eval it to true/false
     * @param value the value to test
     */ Modifier public setValue FormalParameter BasicType boolean value StatementExpression Assignment This MemberReference value TernaryExpression MemberReference value MemberReference Boolean TRUE MemberReference Boolean FALSE = MethodDeclaration /**
     * @return the inverted value;
     * @throws BuildException if someone forgot to spec a value
     */ Modifier public BasicType boolean eval BuildException IfStatement BinaryOperation == MemberReference value Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Nothing to test for falsehood"" End ReturnStatement MethodInvocation ! value booleanValue ReferenceType ProjectComponent ReferenceType Condition",1
439,439,,0
631,631,,0
665,665,,1
8,8,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.BufferedOutputStream Import java.io.File Import java.io.FileOutputStream Import java.io.IOException Import java.io.OutputStream Import java.io.PrintStream Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task Import org.apache.tools.ant.types.Commandline Import org.apache.tools.ant.types.Environment Import org.apache.tools.ant.util.StringUtils ClassDeclaration Modifier public abstract /**
 * original Cvs.java 1.20
 *
 *  NOTE: This implementation has been moved here from Cvs.java with
 *  the addition of some accessors for extensibility.  Another task
 *  can extend this with some customized output processing.
 *
 * @since Ant 1.5
 */ AbstractCvsTask FieldDeclaration /**
     * Default compression level to use, if compression is enabled via
     * setCompression( true ).
     */ Modifier public final static BasicType int VariableDeclarator DEFAULT_COMPRESSION_LEVEL Literal 3 FieldDeclaration Modifier private final static BasicType int VariableDeclarator MAXIMUM_COMRESSION_LEVEL Literal 9 FieldDeclaration Modifier private ReferenceType Commandline VariableDeclarator cmd ClassCreator ReferenceType Commandline FieldDeclaration /** list of Commandline children */ Modifier private ReferenceType Vector VariableDeclarator vecCommandlines ClassCreator ReferenceType Vector FieldDeclaration /**
     * the CVSROOT variable.
     */ Modifier private ReferenceType String VariableDeclarator cvsRoot FieldDeclaration /**
     * the CVS_RSH variable.
     */ Modifier private ReferenceType String VariableDeclarator cvsRsh FieldDeclaration /**
     * the package/module to check out.
     */ Modifier private ReferenceType String VariableDeclarator cvsPackage FieldDeclaration /**
     * the tag
     */ Modifier private ReferenceType String VariableDeclarator tag FieldDeclaration /**
     * the default command.
     */ Modifier private final static ReferenceType String VariableDeclarator DEFAULT_COMMAND Literal ""checkout"" FieldDeclaration /**
     * the CVS command to execute.
     */ Modifier private ReferenceType String VariableDeclarator command Literal null FieldDeclaration /**
     * suppress information messages.
     */ Modifier private BasicType boolean VariableDeclarator quiet Literal false FieldDeclaration /**
     * suppress all messages.
     */ Modifier private BasicType boolean VariableDeclarator reallyquiet Literal false FieldDeclaration /**
     * compression level to use.
     */ Modifier private BasicType int VariableDeclarator compression Literal 0 FieldDeclaration /**
     * report only, don't change any files.
     */ Modifier private BasicType boolean VariableDeclarator noexec Literal false FieldDeclaration /**
     * CVS port
     */ Modifier private BasicType int VariableDeclarator port Literal 0 FieldDeclaration /**
     * CVS password file
     */ Modifier private ReferenceType File VariableDeclarator passFile Literal null FieldDeclaration /**
     * the directory where the checked out files should be placed.
     */ Modifier private ReferenceType File VariableDeclarator dest FieldDeclaration /** whether or not to append stdout/stderr to existing files */ Modifier private BasicType boolean VariableDeclarator append Literal false FieldDeclaration /**
     * the file to direct standard output from the command.
     */ Modifier private ReferenceType File VariableDeclarator output FieldDeclaration /**
     * the file to direct standard error from the command.
     */ Modifier private ReferenceType File VariableDeclarator error FieldDeclaration /**
     * If true it will stop the build if cvs exits with error.
     * Default is false. (Iulian)
     */ Modifier private BasicType boolean VariableDeclarator failOnError Literal false FieldDeclaration /**
     * Create accessors for the following, to allow different handling of
     * the output.
     */ Modifier private ReferenceType ExecuteStreamHandler VariableDeclarator executeStreamHandler FieldDeclaration Modifier private ReferenceType OutputStream VariableDeclarator outputStream FieldDeclaration Modifier private ReferenceType OutputStream VariableDeclarator errorStream ConstructorDeclaration Modifier public /** empty no-arg constructor*/ AbstractCvsTask StatementExpression SuperConstructorInvocation MethodDeclaration /**
     * sets the handler
     * @param handler a handler able of processing the output and error streams from the cvs exe
     */ Modifier public setExecuteStreamHandler FormalParameter ReferenceType ExecuteStreamHandler handler StatementExpression Assignment This MemberReference executeStreamHandler MemberReference handler = MethodDeclaration /**
     * find the handler and instantiate it if it does not exist yet
     * @return handler for output and error streams
     */ Modifier protected ReferenceType ExecuteStreamHandler getExecuteStreamHandler IfStatement BinaryOperation == This MemberReference executeStreamHandler Literal null BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType PumpStreamHandler MethodInvocation getOutputStream MethodInvocation getErrorStream setExecuteStreamHandler End ReturnStatement This MemberReference executeStreamHandler MethodDeclaration /**
     * sets a stream to which the output from the cvs executable should be sent
     * @param outputStream stream to which the stdout from cvs should go
     */ Modifier protected setOutputStream FormalParameter ReferenceType OutputStream outputStream StatementExpression Assignment This MemberReference outputStream MemberReference outputStream = MethodDeclaration /**
     * access the stream to which the stdout from cvs should go
     * if this stream has already been set, it will be returned
     * if the stream has not yet been set, if the attribute output
     * has been set, the output stream will go to the output file
     * otherwise the output will go to ant's logging system
     * @return output stream to which cvs' stdout should go to
     */ Modifier protected ReferenceType OutputStream getOutputStream IfStatement BinaryOperation == This MemberReference outputStream Literal null BlockStatement IfStatement BinaryOperation != MemberReference output Literal null BlockStatement TryStatement StatementExpression MethodInvocation ClassCreator ReferenceType PrintStream ClassCreator ReferenceType BufferedOutputStream ClassCreator ReferenceType FileOutputStream MethodInvocation output getPath MemberReference append setOutputStream CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType LogOutputStream This MemberReference Project MSG_INFO setOutputStream End End ReturnStatement This MemberReference outputStream MethodDeclaration /**
     * sets a stream to which the stderr from the cvs exe should go
     * @param errorStream an output stream willing to process stderr
     */ Modifier protected setErrorStream FormalParameter ReferenceType OutputStream errorStream StatementExpression Assignment This MemberReference errorStream MemberReference errorStream = MethodDeclaration /**
     * access the stream to which the stderr from cvs should go
     * if this stream has already been set, it will be returned
     * if the stream has not yet been set, if the attribute error
     * has been set, the output stream will go to the file denoted by the error attribute
     * otherwise the stderr output will go to ant's logging system
     * @return output stream to which cvs' stderr should go to
     */ Modifier protected ReferenceType OutputStream getErrorStream IfStatement BinaryOperation == This MemberReference errorStream Literal null BlockStatement IfStatement BinaryOperation != MemberReference error Literal null BlockStatement TryStatement StatementExpression MethodInvocation ClassCreator ReferenceType PrintStream ClassCreator ReferenceType BufferedOutputStream ClassCreator ReferenceType FileOutputStream MethodInvocation error getPath MemberReference append setErrorStream CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation ClassCreator ReferenceType LogOutputStream This MemberReference Project MSG_WARN setErrorStream End End ReturnStatement This MemberReference errorStream MethodDeclaration /**
     * Sets up the environment for toExecute and then runs it.
     * @param toExecute the command line to execute
     * @throws BuildException if failonError is set to true and the cvs command fails
     */ Modifier protected runCommand FormalParameter ReferenceType Commandline toExecute BuildException LocalVariableDeclaration ReferenceType Environment VariableDeclarator env ClassCreator ReferenceType Environment IfStatement BinaryOperation > MemberReference port Literal 0 BlockStatement LocalVariableDeclaration ReferenceType Environment ReferenceType Variable VariableDeclarator var ClassCreator ReferenceType Environment ReferenceType Variable StatementExpression MethodInvocation var Literal ""CVS_CLIENT_PORT"" setKey StatementExpression MethodInvocation var MethodInvocation String MemberReference port valueOf setValue StatementExpression MethodInvocation env MemberReference var addVariable End IfStatement BinaryOperation == MemberReference passFile Literal null BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator defaultPassFile ClassCreator ReferenceType File BinaryOperation + BinaryOperation + MethodInvocation System Literal ""cygwin.user.home"" MethodInvocation System Literal ""user.home"" getProperty getProperty MemberReference File separatorChar Literal "".cvspass"" IfStatement MethodInvocation defaultPassFile exists BlockStatement StatementExpression This MethodInvocation MemberReference defaultPassFile setPassfile End End IfStatement BinaryOperation != MemberReference passFile Literal null BlockStatement IfStatement BinaryOperation && MethodInvocation passFile isFile MethodInvocation passFile canRead BlockStatement LocalVariableDeclaration ReferenceType Environment ReferenceType Variable VariableDeclarator var ClassCreator ReferenceType Environment ReferenceType Variable StatementExpression MethodInvocation var Literal ""CVS_PASSFILE"" setKey StatementExpression MethodInvocation var MethodInvocation String MemberReference passFile valueOf setValue StatementExpression MethodInvocation env MemberReference var addVariable StatementExpression MethodInvocation BinaryOperation + Literal ""Using cvs passfile: "" MethodInvocation String MemberReference passFile valueOf MemberReference Project MSG_INFO log IfStatement MethodInvocation ! passFile canRead BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""cvs passfile: "" MethodInvocation String MemberReference passFile valueOf Literal "" ignored as it is not readable"" MemberReference Project MSG_WARN log BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""cvs passfile: "" MethodInvocation String MemberReference passFile valueOf Literal "" ignored as it is not a file"" MemberReference Project MSG_WARN log End End End IfStatement BinaryOperation != MemberReference cvsRsh Literal null BlockStatement LocalVariableDeclaration ReferenceType Environment ReferenceType Variable VariableDeclarator var ClassCreator ReferenceType Environment ReferenceType Variable StatementExpression MethodInvocation var Literal ""CVS_RSH"" setKey StatementExpression MethodInvocation var MethodInvocation String MemberReference cvsRsh valueOf setValue StatementExpression MethodInvocation env MemberReference var addVariable End LocalVariableDeclaration ReferenceType Execute VariableDeclarator exe ClassCreator ReferenceType Execute MethodInvocation getExecuteStreamHandler Literal null StatementExpression MethodInvocation exe MethodInvocation getProject setAntRun IfStatement BinaryOperation == MemberReference dest Literal null BlockStatement StatementExpression Assignment MemberReference dest MethodInvocation MethodInvocation getBaseDir getProject = End IfStatement MethodInvocation ! dest exists BlockStatement StatementExpression MethodInvocation dest mkdirs End StatementExpression MethodInvocation exe MemberReference dest setWorkingDirectory StatementExpression MethodInvocation exe MethodInvocation toExecute getCommandline setCommandline StatementExpression MethodInvocation exe MethodInvocation env getVariables setEnvironment TryStatement LocalVariableDeclaration ReferenceType String VariableDeclarator actualCommandLine MethodInvocation MemberReference exe executeToString StatementExpression MethodInvocation MemberReference actualCommandLine MemberReference Project MSG_VERBOSE log LocalVariableDeclaration BasicType int VariableDeclarator retCode MethodInvocation exe execute StatementExpression MethodInvocation BinaryOperation + Literal ""retCode="" MemberReference retCode MemberReference Project MSG_DEBUG log IfStatement BinaryOperation && MemberReference failOnError MethodInvocation Execute MemberReference retCode isFailure BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""cvs exited with error code "" MemberReference retCode MemberReference StringUtils LINE_SEP Literal ""Command line was ["" MemberReference actualCommandLine Literal ""]"" MethodInvocation getLocation End CatchClause CatchClauseParameter IOException e IfStatement MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Caught exception: "" MethodInvocation e getMessage MemberReference Project MSG_WARN log End CatchClause CatchClauseParameter BuildException e IfStatement MemberReference failOnError BlockStatement ThrowStatement MemberReference e BlockStatement LocalVariableDeclaration ReferenceType Throwable VariableDeclarator t MethodInvocation e getException IfStatement BinaryOperation == MemberReference t Literal null BlockStatement StatementExpression Assignment MemberReference t MemberReference e = End StatementExpression MethodInvocation BinaryOperation + Literal ""Caught exception: "" MethodInvocation t getMessage MemberReference Project MSG_WARN log End CatchClause CatchClauseParameter Exception e IfStatement MemberReference failOnError BlockStatement ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Caught exception: "" MethodInvocation e getMessage MemberReference Project MSG_WARN log End IfStatement BinaryOperation != MemberReference outputStream Literal null BlockStatement TryStatement StatementExpression MethodInvocation outputStream close CatchClause CatchClauseParameter IOException e End IfStatement BinaryOperation != MemberReference errorStream Literal null BlockStatement TryStatement StatementExpression MethodInvocation errorStream close CatchClause CatchClauseParameter IOException e End MethodDeclaration /**
     * do the work
     * @throws BuildException if failonerror is set to true and the cvs command fails.
     */ Modifier public execute BuildException LocalVariableDeclaration ReferenceType String VariableDeclarator savedCommand MethodInvocation getCommand IfStatement BinaryOperation && BinaryOperation == This MethodInvocation getCommand Literal null BinaryOperation == MethodInvocation vecCommandlines size Literal 0 BlockStatement StatementExpression This MethodInvocation MemberReference AbstractCvsTask DEFAULT_COMMAND setCommand End LocalVariableDeclaration ReferenceType String VariableDeclarator c This MethodInvocation getCommand LocalVariableDeclaration ReferenceType Commandline VariableDeclarator cloned Literal null IfStatement BinaryOperation != MemberReference c Literal null BlockStatement StatementExpression Assignment MemberReference cloned Cast ReferenceType Commandline MethodInvocation cmd clone = StatementExpression MethodInvocation cloned MethodInvocation MemberReference c setLine Literal true createArgument StatementExpression This MethodInvocation MemberReference cloned Literal true addConfiguredCommandline End TryStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation vecCommandlines size MemberReference ++ i BlockStatement StatementExpression This MethodInvocation Cast ReferenceType Commandline MethodInvocation vecCommandlines MemberReference i elementAt runCommand End IfStatement BinaryOperation != MemberReference cloned Literal null BlockStatement StatementExpression MethodInvocation MemberReference cloned removeCommandline End StatementExpression MethodInvocation MemberReference savedCommand setCommand MethodDeclaration Modifier private ReferenceType String executeToString FormalParameter ReferenceType Execute execute LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator stringBuffer ClassCreator ReferenceType StringBuffer MethodInvocation Commandline MethodInvocation execute getCommandline describeCommand LocalVariableDeclaration ReferenceType String VariableDeclarator newLine MemberReference StringUtils LINE_SEP LocalVariableDeclaration ReferenceType String VariableDeclarator variableArray MethodInvocation execute getEnvironment IfStatement BinaryOperation != MemberReference variableArray Literal null BlockStatement StatementExpression MethodInvocation stringBuffer MemberReference newLine append StatementExpression MethodInvocation stringBuffer MemberReference newLine append StatementExpression MethodInvocation stringBuffer Literal ""environment:"" append StatementExpression MethodInvocation stringBuffer MemberReference newLine append ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator z Literal 0 BinaryOperation < MemberReference z MemberReference variableArray length MemberReference ++ z BlockStatement StatementExpression MethodInvocation stringBuffer MemberReference newLine append StatementExpression MethodInvocation stringBuffer Literal ""\t"" append StatementExpression MethodInvocation stringBuffer MemberReference ArraySelector MemberReference z variableArray append End End ReturnStatement MethodInvocation stringBuffer toString MethodDeclaration /**
     * The CVSROOT variable.
     *
     * @param root the CVSROOT variable
     */ Modifier public setCvsRoot FormalParameter ReferenceType String root IfStatement BinaryOperation != MemberReference root Literal null BlockStatement IfStatement MethodInvocation root MethodInvocation Literal """" equals trim BlockStatement StatementExpression Assignment MemberReference root Literal null = End End StatementExpression Assignment This MemberReference cvsRoot MemberReference root = MethodDeclaration /**
     * access the CVSROOT variable
     * @return CVSROOT
     */ Modifier public ReferenceType String getCvsRoot ReturnStatement This MemberReference cvsRoot MethodDeclaration /**
     * The CVS_RSH variable.
     *
     * @param rsh the CVS_RSH variable
     */ Modifier public setCvsRsh FormalParameter ReferenceType String rsh IfStatement BinaryOperation != MemberReference rsh Literal null BlockStatement IfStatement MethodInvocation rsh MethodInvocation Literal """" equals trim BlockStatement StatementExpression Assignment MemberReference rsh Literal null = End End StatementExpression Assignment This MemberReference cvsRsh MemberReference rsh = MethodDeclaration /**
     * access the CVS_RSH variable
     * @return the CVS_RSH variable
     */ Modifier public ReferenceType String getCvsRsh ReturnStatement This MemberReference cvsRsh MethodDeclaration /**
     * Port used by CVS to communicate with the server.
     *
     * @param port port of CVS
     */ Modifier public setPort FormalParameter BasicType int port StatementExpression Assignment This MemberReference port MemberReference port = MethodDeclaration /**
     * access the port of CVS
     * @return the port of CVS
     */ Modifier public BasicType int getPort ReturnStatement This MemberReference port MethodDeclaration /**
     * Password file to read passwords from.
     *
     * @param passFile password file to read passwords from
     */ Modifier public setPassfile FormalParameter ReferenceType File passFile StatementExpression Assignment This MemberReference passFile MemberReference passFile = MethodDeclaration /**
     * find the password file
     * @return password file
     */ Modifier public ReferenceType File getPassFile ReturnStatement This MemberReference passFile MethodDeclaration /**
     * The directory where the checked out files should be placed.
     *
     * <p>Note that this is different from CVS's -d command line
     * switch as Ant will never shorten pathnames to avoid empty
     * directories.</p>
     *
     * @param dest directory where the checked out files should be placed
     */ Modifier public setDest FormalParameter ReferenceType File dest StatementExpression Assignment This MemberReference dest MemberReference dest = MethodDeclaration /**
     * get the file where the checked out files should be placed
     *
     * @return directory where the checked out files should be placed
     */ Modifier public ReferenceType File getDest ReturnStatement This MemberReference dest MethodDeclaration /**
     * The package/module to operate upon.
     *
     * @param p package or module to operate upon
     */ Modifier public setPackage FormalParameter ReferenceType String p StatementExpression Assignment This MemberReference cvsPackage MemberReference p = MethodDeclaration /**
     * access the package or module to operate upon
     *
     * @return package/module
     */ Modifier public ReferenceType String getPackage ReturnStatement This MemberReference cvsPackage MethodDeclaration /**
     * tag or branch
     * @return tag or branch
     * @since ant 1.6.1
     */ Modifier public ReferenceType String getTag ReturnStatement MemberReference tag MethodDeclaration /**
     * The tag of the package/module to operate upon.
     * @param p tag
     */ Modifier public setTag FormalParameter ReferenceType String p IfStatement BinaryOperation && BinaryOperation != MemberReference p Literal null BinaryOperation > MethodInvocation p MethodInvocation length trim Literal 0 BlockStatement StatementExpression Assignment MemberReference tag MemberReference p = StatementExpression MethodInvocation BinaryOperation + Literal ""-r"" MemberReference p addCommandArgument End MethodDeclaration /**
     * This needs to be public to allow configuration
     *      of commands externally.
     * @param arg command argument
     */ Modifier public addCommandArgument FormalParameter ReferenceType String arg StatementExpression This MethodInvocation MemberReference cmd MemberReference arg addCommandArgument MethodDeclaration /**
     * This method adds a command line argument to an external command.
     *
     * I do not understand what this method does in this class ???
     * particularly not why it is public ????
     * AntoineLL July 23d 2003
     *
     * @param c  command line to which one argument should be added
     * @param arg argument to add
     */ Modifier public addCommandArgument FormalParameter ReferenceType Commandline c FormalParameter ReferenceType String arg StatementExpression MethodInvocation c MethodInvocation MemberReference arg setValue createArgument MethodDeclaration /**
     * Use the most recent revision no later than the given date.
     * @param p a date as string in a format that the CVS executable can understand
     * see man cvs
     */ Modifier public setDate FormalParameter ReferenceType String p IfStatement BinaryOperation && BinaryOperation != MemberReference p Literal null BinaryOperation > MethodInvocation p MethodInvocation length trim Literal 0 BlockStatement StatementExpression MethodInvocation Literal ""-D"" addCommandArgument StatementExpression MethodInvocation MemberReference p addCommandArgument End MethodDeclaration /**
     * The CVS command to execute.
     *
     * This should be deprecated, it is better to use the Commandline class ?
     * AntoineLL July 23d 2003
     *
     * @param c a command as string
     */ Modifier public setCommand FormalParameter ReferenceType String c StatementExpression Assignment This MemberReference command MemberReference c = MethodDeclaration /**
     * accessor to a command line as string
     *
     * This should be deprecated
     * AntoineLL July 23d 2003
     *
     * @return command line as string
     */ Modifier public ReferenceType String getCommand ReturnStatement This MemberReference command MethodDeclaration /**
     * If true, suppress informational messages.
     * @param q  if true, suppress informational messages
     */ Modifier public setQuiet FormalParameter BasicType boolean q StatementExpression Assignment MemberReference quiet MemberReference q = MethodDeclaration /**
     * If true, suppress all messages.
     * @param q  if true, suppress all messages
     * @since Ant 1.6
     */ Modifier public setReallyquiet FormalParameter BasicType boolean q StatementExpression Assignment MemberReference reallyquiet MemberReference q = MethodDeclaration /**
     * If true, report only and don't change any files.
     *
     * @param ne if true, report only and do not change any files.
     */ Modifier public setNoexec FormalParameter BasicType boolean ne StatementExpression Assignment MemberReference noexec MemberReference ne = MethodDeclaration /**
     * The file to direct standard output from the command.
     * @param output a file to which stdout should go
     */ Modifier public setOutput FormalParameter ReferenceType File output StatementExpression Assignment This MemberReference output MemberReference output = MethodDeclaration /**
     * The file to direct standard error from the command.
     *
     * @param error a file to which stderr should go
     */ Modifier public setError FormalParameter ReferenceType File error StatementExpression Assignment This MemberReference error MemberReference error = MethodDeclaration /**
     * Whether to append output/error when redirecting to a file.
     * @param value true indicated you want to append
     */ Modifier public setAppend FormalParameter BasicType boolean value StatementExpression Assignment This MemberReference append MemberReference value = MethodDeclaration /**
     * Stop the build process if the command exits with
     * a return code other than 0.
     * Defaults to false.
     * @param failOnError stop the build process if the command exits with
     * a return code other than 0
     */ Modifier public setFailOnError FormalParameter BasicType boolean failOnError StatementExpression Assignment This MemberReference failOnError MemberReference failOnError = MethodDeclaration /**
     * Configure a commandline element for things like cvsRoot, quiet, etc.
     * @param c the command line which will be configured
     * if the commandline is initially null, the function is a noop
     * otherwise the function append to the commandline arguments concerning
     * <ul>
     * <li>
     * cvs package
     * </li>
     * <li>
     * compression
     * </li>
     * <li>
     * quiet or reallyquiet
     * </li>
     * <li>cvsroot</li>
     * <li>noexec</li>
     * </ul>
     */ Modifier protected configureCommandline FormalParameter ReferenceType Commandline c IfStatement BinaryOperation == MemberReference c Literal null BlockStatement ReturnStatement End StatementExpression MethodInvocation c Literal ""cvs"" setExecutable IfStatement BinaryOperation != MemberReference cvsPackage Literal null BlockStatement StatementExpression MethodInvocation c MethodInvocation MemberReference cvsPackage setLine createArgument End IfStatement BinaryOperation && BinaryOperation > This MemberReference compression Literal 0 BinaryOperation <= This MemberReference compression MemberReference MAXIMUM_COMRESSION_LEVEL BlockStatement StatementExpression MethodInvocation c MethodInvocation BinaryOperation + Literal ""-z"" This MemberReference compression setValue Literal true createArgument End IfStatement BinaryOperation && MemberReference quiet MemberReference ! reallyquiet BlockStatement StatementExpression MethodInvocation c MethodInvocation Literal ""-q"" setValue Literal true createArgument End IfStatement MemberReference reallyquiet BlockStatement StatementExpression MethodInvocation c MethodInvocation Literal ""-Q"" setValue Literal true createArgument End IfStatement MemberReference noexec BlockStatement StatementExpression MethodInvocation c MethodInvocation Literal ""-n"" setValue Literal true createArgument End IfStatement BinaryOperation != MemberReference cvsRoot Literal null BlockStatement StatementExpression MethodInvocation c MethodInvocation BinaryOperation + Literal ""-d"" MemberReference cvsRoot setLine Literal true createArgument End MethodDeclaration /**
     * remove a particular command from a vector of command lines
     * @param c command line which should be removed
     */ Modifier protected removeCommandline FormalParameter ReferenceType Commandline c StatementExpression MethodInvocation vecCommandlines MemberReference c removeElement MethodDeclaration /**
     * Adds direct command-line to execute.
     * @param c command line to execute
     */ Modifier public addConfiguredCommandline FormalParameter ReferenceType Commandline c StatementExpression This MethodInvocation MemberReference c Literal false addConfiguredCommandline MethodDeclaration /**
     * Configures and adds the given Commandline.
     * @param c commandline to insert
     * @param insertAtStart If true, c is
     * inserted at the beginning of the vector of command lines
    */ Modifier public addConfiguredCommandline FormalParameter ReferenceType Commandline c FormalParameter BasicType boolean insertAtStart IfStatement BinaryOperation == MemberReference c Literal null BlockStatement ReturnStatement End StatementExpression This MethodInvocation MemberReference c configureCommandline IfStatement MemberReference insertAtStart BlockStatement StatementExpression MethodInvocation vecCommandlines MemberReference c Literal 0 insertElementAt BlockStatement StatementExpression MethodInvocation vecCommandlines MemberReference c addElement End MethodDeclaration /**
    * If set to a value 1-9 it adds -zN to the cvs command line, else
    * it disables compression.
     * @param level compression level 1 to 9
    */ Modifier public setCompressionLevel FormalParameter BasicType int level StatementExpression Assignment This MemberReference compression MemberReference level = MethodDeclaration /**
     * If true, this is the same as compressionlevel=""3"".
     *
     * @param usecomp If true, turns on compression using default
     * level, AbstractCvsTask.DEFAULT_COMPRESSION_LEVEL.
     */ Modifier public setCompression FormalParameter BasicType boolean usecomp StatementExpression MethodInvocation TernaryExpression MemberReference usecomp MemberReference AbstractCvsTask DEFAULT_COMPRESSION_LEVEL Literal 0 setCompressionLevel ReferenceType Task",0
144,144,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.io.File Import java.io.InputStream Import java.io.BufferedInputStream Import java.io.IOException Import java.io.FileInputStream Import org.apache.tools.ant.Task Import org.apache.tools.ant.Project ClassDeclaration Modifier public /**
 * Special <CODE>InputStream</CODE> that will
 * concatenate the contents of an array of files.
 */ ConcatFileInputStream FieldDeclaration Modifier private final static BasicType int VariableDeclarator EOF Literal - 1 FieldDeclaration Modifier private BasicType int VariableDeclarator currentIndex Literal 0 FieldDeclaration Modifier private BasicType boolean VariableDeclarator eof Literal false FieldDeclaration Modifier private ReferenceType File VariableDeclarator file FieldDeclaration Modifier private ReferenceType InputStream VariableDeclarator currentStream FieldDeclaration Modifier private ReferenceType Task VariableDeclarator managingTask ConstructorDeclaration Modifier public /**
   * Construct a new <CODE>ConcatFileInputStream</CODE>
   * with the specified <CODE>File[]</CODE>.
   * @param file   <CODE>File[]</CODE>.
   * @throws <CODE>IOException</CODE> if I/O errors occur.
   */ ConcatFileInputStream FormalParameter ReferenceType File file IOException StatementExpression Assignment This MemberReference file MemberReference file = StatementExpression MethodInvocation MemberReference currentIndex openFile MethodDeclaration Modifier public close IOException StatementExpression MethodInvocation closeCurrent StatementExpression Assignment MemberReference eof Literal true = MethodDeclaration Modifier public BasicType int read IOException LocalVariableDeclaration BasicType int VariableDeclarator result MethodInvocation readCurrent IfStatement BinaryOperation && BinaryOperation == MemberReference result MemberReference EOF MemberReference ! eof BlockStatement StatementExpression MethodInvocation MemberReference ++ currentIndex openFile StatementExpression Assignment MemberReference result MethodInvocation readCurrent = End ReturnStatement MemberReference result MethodDeclaration /**
     * Set a managing <CODE>Task</CODE> for
     * this <CODE>ConcatFileInputStream</CODE>.
     * @param task   the managing <CODE>Task</CODE>.
     */ Modifier public setManagingTask FormalParameter ReferenceType Task task StatementExpression Assignment This MemberReference managingTask MemberReference task = MethodDeclaration /**
     * Log a message with the specified logging level.
     * @param message    the <CODE>String</CODE> message.
     * @param loglevel   the <CODE>int</CODE> logging level.
     */ Modifier public log FormalParameter ReferenceType String message FormalParameter BasicType int loglevel IfStatement BinaryOperation != MemberReference managingTask Literal null BlockStatement StatementExpression MethodInvocation managingTask MemberReference message MemberReference loglevel log BlockStatement IfStatement BinaryOperation > MemberReference loglevel MemberReference Project MSG_WARN BlockStatement StatementExpression MethodInvocation System.out MemberReference message println BlockStatement StatementExpression MethodInvocation System.err MemberReference message println End End MethodDeclaration Modifier private BasicType int readCurrent IOException ReturnStatement TernaryExpression BinaryOperation || MemberReference eof BinaryOperation == MemberReference currentStream Literal null MemberReference EOF MethodInvocation currentStream read MethodDeclaration Modifier private openFile FormalParameter BasicType int index IOException StatementExpression MethodInvocation closeCurrent IfStatement BinaryOperation && BinaryOperation != MemberReference file Literal null BinaryOperation < MemberReference index MemberReference file length BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Opening "" MemberReference ArraySelector MemberReference index file MemberReference Project MSG_VERBOSE log StatementExpression Assignment MemberReference currentStream ClassCreator ReferenceType BufferedInputStream ClassCreator ReferenceType FileInputStream MemberReference ArraySelector MemberReference index file = BlockStatement StatementExpression Assignment MemberReference eof Literal true = End MethodDeclaration Modifier private closeCurrent IfStatement BinaryOperation != MemberReference currentStream Literal null BlockStatement TryStatement StatementExpression MethodInvocation currentStream close CatchClause CatchClauseParameter IOException eyeOhEx StatementExpression Assignment MemberReference currentStream Literal null = End ReferenceType InputStream",0
304,304,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.net Import org.apache.commons.net.telnet.TelnetClient Import java.io.IOException Import java.io.InputStream Import java.io.OutputStream Import java.util.Calendar Import java.util.Enumeration Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.Task ClassDeclaration Modifier public /**
 * Automates the telnet protocol.
 *
 * @version $Revision$
 */ TelnetTask FieldDeclaration /**
     *  The userid to login with, if automated login is used
     */ Modifier private ReferenceType String VariableDeclarator userid Literal null FieldDeclaration /**
     *  The password to login with, if automated login is used
     */ Modifier private ReferenceType String VariableDeclarator password Literal null FieldDeclaration /**
     *  The server to connect to.
     */ Modifier private ReferenceType String VariableDeclarator server Literal null FieldDeclaration /**
     *  The tcp port to connect to.
     */ Modifier private BasicType int VariableDeclarator port Literal 23 FieldDeclaration /**
     *  The list of read/write commands for this session
     */ Modifier private ReferenceType Vector VariableDeclarator telnetTasks ClassCreator ReferenceType Vector FieldDeclaration /**
     *  If true, adds a CR to beginning of login script
     */ Modifier private BasicType boolean VariableDeclarator addCarriageReturn Literal false FieldDeclaration /**
     *  Default time allowed for waiting for a valid response
     *  for all child reads.  A value of 0 means no limit.
     */ Modifier private ReferenceType Integer VariableDeclarator defaultTimeout Literal null MethodDeclaration /**
     *  Verify that all parameters are included.
     *  Connect and possibly login
     *  Iterate through the list of Reads and writes
     */ Modifier public execute BuildException IfStatement BinaryOperation == MemberReference server Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No Server Specified"" End IfStatement BinaryOperation && BinaryOperation == MemberReference userid Literal null BinaryOperation != MemberReference password Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No Userid Specified"" End IfStatement BinaryOperation && BinaryOperation == MemberReference password Literal null BinaryOperation != MemberReference userid Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""No Password Specified"" End LocalVariableDeclaration ReferenceType AntTelnetClient VariableDeclarator telnet Literal null TryStatement StatementExpression Assignment MemberReference telnet ClassCreator ReferenceType AntTelnetClient = TryStatement StatementExpression MethodInvocation telnet MemberReference server MemberReference port connect CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Can't connect to "" MemberReference server IfStatement BinaryOperation && BinaryOperation != MemberReference userid Literal null BinaryOperation != MemberReference password Literal null BlockStatement StatementExpression MethodInvocation MemberReference telnet login End LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator tasksToRun MethodInvocation telnetTasks elements WhileStatement BinaryOperation && BinaryOperation != MemberReference tasksToRun Literal null MethodInvocation tasksToRun hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType TelnetSubTask VariableDeclarator task Cast ReferenceType TelnetSubTask MethodInvocation tasksToRun nextElement IfStatement BinaryOperation && BinaryOperation instanceof MemberReference task ReferenceType TelnetRead BinaryOperation != MemberReference defaultTimeout Literal null BlockStatement StatementExpression Cast ReferenceType TelnetRead MemberReference task End StatementExpression MethodInvocation task MemberReference telnet execute End IfStatement BinaryOperation != MemberReference telnet Literal null BlockStatement TryStatement StatementExpression MethodInvocation telnet disconnect CatchClause CatchClauseParameter IOException e ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""Error disconnecting from "" MemberReference server End MethodDeclaration /**
     *  Process a 'typical' login.  If it differs, use the read
     *  and write tasks explicitely
     */ Modifier private login FormalParameter ReferenceType AntTelnetClient telnet IfStatement MemberReference addCarriageReturn BlockStatement StatementExpression MethodInvocation telnet Literal ""\n"" Literal true sendString End StatementExpression MethodInvocation telnet Literal ""ogin:"" waitForString StatementExpression MethodInvocation telnet MemberReference userid Literal true sendString StatementExpression MethodInvocation telnet Literal ""assword:"" waitForString StatementExpression MethodInvocation telnet MemberReference password Literal false sendString MethodDeclaration /**
     * Set the the login id to use on the server;
     * required if <tt>password</tt> is set.
     */ Modifier public setUserid FormalParameter ReferenceType String u StatementExpression Assignment This MemberReference userid MemberReference u = MethodDeclaration /**
     *  Set the the login password to use
     * required if <tt>userid</tt> is set.
     */ Modifier public setPassword FormalParameter ReferenceType String p StatementExpression Assignment This MemberReference password MemberReference p = MethodDeclaration /**
     *  Set the hostname or address of the remote server.
     */ Modifier public setServer FormalParameter ReferenceType String m StatementExpression Assignment This MemberReference server MemberReference m = MethodDeclaration /**
     *  Set the tcp port to connect to; default is 23.
     */ Modifier public setPort FormalParameter BasicType int p StatementExpression Assignment This MemberReference port MemberReference p = MethodDeclaration /**
     *  send a carriage return after connecting; optional, defaults to false.
     */ Modifier public setInitialCR FormalParameter BasicType boolean b StatementExpression Assignment This MemberReference addCarriageReturn MemberReference b = MethodDeclaration /**
     * set a default timeout in seconds to wait for a response,
     * zero means forever (the default)
     */ Modifier public setTimeout FormalParameter ReferenceType Integer i StatementExpression Assignment This MemberReference defaultTimeout MemberReference i = MethodDeclaration /**
     *  A string to wait for from the server.
     *  A subTask &lt;read&gt; tag was found.  Create the object,
     *  Save it in our list, and return it.
     */ Modifier public ReferenceType TelnetSubTask createRead LocalVariableDeclaration ReferenceType TelnetSubTask VariableDeclarator task Cast ReferenceType TelnetSubTask ClassCreator ReferenceType TelnetRead StatementExpression MethodInvocation telnetTasks MemberReference task addElement ReturnStatement MemberReference task MethodDeclaration /**
     *  Add text to send to the server
     *  A subTask &lt;write&gt; tag was found.  Create the object,
     *  Save it in our list, and return it.
     */ Modifier public ReferenceType TelnetSubTask createWrite LocalVariableDeclaration ReferenceType TelnetSubTask VariableDeclarator task Cast ReferenceType TelnetSubTask ClassCreator ReferenceType TelnetWrite StatementExpression MethodInvocation telnetTasks MemberReference task addElement ReturnStatement MemberReference task ClassDeclaration Modifier public /**
     *  This class is the parent of the Read and Write tasks.
     *  It handles the common attributes for both.
     */ TelnetSubTask FieldDeclaration Modifier protected ReferenceType String VariableDeclarator taskString Literal """" MethodDeclaration Modifier public execute FormalParameter ReferenceType AntTelnetClient telnet BuildException ThrowStatement ClassCreator ReferenceType BuildException Literal ""Shouldn't be able instantiate a SubTask directly"" MethodDeclaration /**
         *  the message as nested text
         */ Modifier public addText FormalParameter ReferenceType String s StatementExpression MethodInvocation MethodInvocation MethodInvocation MemberReference s replaceProperties getProject setString MethodDeclaration /**
         * the message as an attribute
         */ Modifier public setString FormalParameter ReferenceType String s StatementExpression Assignment MemberReference taskString MemberReference s += ClassDeclaration Modifier public /**
     *  Sends text to the connected server
     */ TelnetWrite FieldDeclaration Modifier private BasicType boolean VariableDeclarator echoString Literal true MethodDeclaration Modifier public execute FormalParameter ReferenceType AntTelnetClient telnet BuildException StatementExpression MethodInvocation telnet MemberReference taskString MemberReference echoString sendString MethodDeclaration /**
         * Whether or not the message should be echoed to the log.
         * Defaults to <code>true</code>.
         */ Modifier public setEcho FormalParameter BasicType boolean b StatementExpression Assignment MemberReference echoString MemberReference b = ReferenceType TelnetSubTask ClassDeclaration Modifier public /**
     *  Reads the output from the connected server
     *  until the required string is found or we time out.
     */ TelnetRead FieldDeclaration Modifier private ReferenceType Integer VariableDeclarator timeout Literal null MethodDeclaration Modifier public execute FormalParameter ReferenceType AntTelnetClient telnet BuildException StatementExpression MethodInvocation telnet MemberReference taskString MemberReference timeout waitForString MethodDeclaration /**
         *  a timeout value that overrides any task wide timeout.
         */ Modifier public setTimeout FormalParameter ReferenceType Integer i StatementExpression Assignment This MemberReference timeout MemberReference i = MethodDeclaration /**
         * Sets the default timeout if none has been set already
         * @ant.attribute ignore=""true""
         */ Modifier public setDefaultTimeout FormalParameter ReferenceType Integer defaultTimeout IfStatement BinaryOperation == MemberReference timeout Literal null BlockStatement StatementExpression Assignment MemberReference timeout MemberReference defaultTimeout = End ReferenceType TelnetSubTask ClassDeclaration Modifier public /**
     *  This class handles the abstraction of the telnet protocol.
     *  Currently it is a wrapper around <a
     *  href=""http://jakarta.apache.org/commons/net/index.html"">Jakarta
     *  Commons Net</a>.
     */ AntTelnetClient MethodDeclaration /**
         * Read from the telnet session until the string we are
         * waiting for is found
         * @param s The string to wait on
         */ Modifier public waitForString FormalParameter ReferenceType String s StatementExpression MethodInvocation MemberReference s Literal null waitForString MethodDeclaration /**
         * Read from the telnet session until the string we are
         * waiting for is found or the timeout has been reached
         * @param s The string to wait on
         * @param timeout The maximum number of seconds to wait
         */ Modifier public waitForString FormalParameter ReferenceType String s FormalParameter ReferenceType Integer timeout LocalVariableDeclaration ReferenceType InputStream VariableDeclarator is This MethodInvocation getInputStream TryStatement LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer IfStatement BinaryOperation || BinaryOperation == MemberReference timeout Literal null BinaryOperation == MethodInvocation timeout intValue Literal 0 BlockStatement WhileStatement BinaryOperation == MethodInvocation sb MethodInvocation MemberReference s indexOf toString Literal - 1 BlockStatement StatementExpression MethodInvocation sb Cast BasicType char MethodInvocation is read append End BlockStatement LocalVariableDeclaration ReferenceType Calendar VariableDeclarator endTime MethodInvocation Calendar getInstance StatementExpression MethodInvocation endTime MemberReference Calendar SECOND MethodInvocation timeout intValue add WhileStatement BinaryOperation == MethodInvocation sb MethodInvocation MemberReference s indexOf toString Literal - 1 BlockStatement WhileStatement BinaryOperation && MethodInvocation Calendar MethodInvocation MemberReference endTime before getInstance BinaryOperation == MethodInvocation is available Literal 0 BlockStatement StatementExpression MethodInvocation Thread Literal 250 sleep End IfStatement BinaryOperation == MethodInvocation is available Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Read before running into timeout: "" MethodInvocation sb toString MemberReference Project MSG_DEBUG log ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Response timed-out waiting for \"""" MemberReference s Literal '\""' MethodInvocation getLocation End StatementExpression MethodInvocation sb Cast BasicType char MethodInvocation is read append End End StatementExpression MethodInvocation MethodInvocation sb toString MemberReference Project MSG_INFO log CatchClause CatchClauseParameter BuildException be ThrowStatement MemberReference be CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation MethodDeclaration /**
        * Write this string to the telnet session.
        * @param echoString  Logs string sent
        */ Modifier public sendString FormalParameter ReferenceType String s FormalParameter BasicType boolean echoString LocalVariableDeclaration ReferenceType OutputStream VariableDeclarator os This MethodInvocation getOutputStream TryStatement StatementExpression MethodInvocation os BinaryOperation + MemberReference s Literal ""\n"" write IfStatement MemberReference echoString BlockStatement StatementExpression MethodInvocation MemberReference s MemberReference Project MSG_INFO log End StatementExpression MethodInvocation os flush CatchClause CatchClauseParameter Exception e ThrowStatement ClassCreator ReferenceType BuildException MemberReference e MethodInvocation getLocation ReferenceType TelnetClient ReferenceType Task",0
504,504,,0
644,644,,0
139,139,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.perforce Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * @ant.task category=""scm""
 */ P4Resolve FieldDeclaration Modifier private ReferenceType String VariableDeclarator resolvemode Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator redoall FieldDeclaration Modifier private BasicType boolean VariableDeclarator simulationmode FieldDeclaration Modifier private BasicType boolean VariableDeclarator forcetextmode FieldDeclaration Modifier private BasicType boolean VariableDeclarator markersforall FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator AUTOMATIC Literal ""automatic"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator FORCE Literal ""force"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator SAFE Literal ""safe"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator THEIRS Literal ""theirs"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator YOURS Literal ""yours"" FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator RESOLVE_MODES ArrayInitializer MemberReference AUTOMATIC MemberReference FORCE MemberReference SAFE MemberReference THEIRS MemberReference YOURS MethodDeclaration /**
    * returns the resolve mode
    * @return  returns the resolve mode
    */ Modifier public ReferenceType String getResolvemode ReturnStatement MemberReference resolvemode MethodDeclaration /**
     * values for resolvemode
     * <ul>
     * <li> automatic -am</li>
     * <li> force -af </li>
     * <li> safe -as </li>
     * <li> theirs -at </li>
     * <li> yours -ay </li>
     * </ul>
     * @param resolvemode one of automatic, force, safe, theirs, yours
     */ Modifier public setResolvemode FormalParameter ReferenceType String resolvemode LocalVariableDeclaration BasicType boolean VariableDeclarator found Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator counter Literal 0 BinaryOperation < MemberReference counter MemberReference RESOLVE_MODES length MemberReference ++ counter BlockStatement IfStatement MethodInvocation resolvemode MemberReference ArraySelector MemberReference counter RESOLVE_MODES equals BlockStatement StatementExpression Assignment MemberReference found Literal true = BreakStatement End End IfStatement BinaryOperation == MemberReference found Literal false BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Unacceptable value for resolve mode"" End StatementExpression Assignment This MemberReference resolvemode MemberReference resolvemode = MethodDeclaration /**
     * allows previously resolved files to be resolved again
     * @return flag indicating whether one wants to
     * allow previously resolved files to be resolved again
     */ Modifier public BasicType boolean isRedoall ReturnStatement MemberReference redoall MethodDeclaration /**
     * set the redoall flag
     * @param redoall flag indicating whether one want to
     * allow previously resolved files to be resolved again
     */ Modifier public setRedoall FormalParameter BasicType boolean redoall StatementExpression Assignment This MemberReference redoall MemberReference redoall = MethodDeclaration /**
     * read the simulation mode flag
     * @return flag indicating whether one wants just to simulate
     * the p4 resolve operation whithout actually doing it
     */ Modifier public BasicType boolean isSimulationmode ReturnStatement MemberReference simulationmode MethodDeclaration /**
     * sets a flag
     * @param simulationmode set to true, lists the integrations which would be performed,
     * without actually doing them.
     */ Modifier public setSimulationmode FormalParameter BasicType boolean simulationmode StatementExpression Assignment This MemberReference simulationmode MemberReference simulationmode = MethodDeclaration /**
     * If set to true, attempts a textual merge, even for binary files
     * @return flag value
     */ Modifier public BasicType boolean isForcetextmode ReturnStatement MemberReference forcetextmode MethodDeclaration /**
     * If set to true, attempts a textual merge, even for binary files
     * @param forcetextmode set the flag value
     */ Modifier public setForcetextmode FormalParameter BasicType boolean forcetextmode StatementExpression Assignment This MemberReference forcetextmode MemberReference forcetextmode = MethodDeclaration /**
     * If set to true, puts in markers for all changes, conflicting or not
     * @return  flag markersforall value
     */ Modifier public BasicType boolean isMarkersforall ReturnStatement MemberReference markersforall MethodDeclaration /**
      * If set to true, puts in markers for all changes, conflicting or not
     * @param markersforall flag true or false
     */ Modifier public setMarkersforall FormalParameter BasicType boolean markersforall StatementExpression Assignment This MemberReference markersforall MemberReference markersforall = MethodDeclaration /**
     *  execute the p4 resolve
     * @throws BuildException if there is a wrong resolve mode specified
     *  or no view specified
     */ Modifier public execute BuildException IfStatement This MemberReference resolvemode MethodInvocation MemberReference AUTOMATIC equals BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -am"" = IfStatement This MemberReference resolvemode MethodInvocation MemberReference FORCE equals BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -af"" = IfStatement This MemberReference resolvemode MethodInvocation MemberReference SAFE equals BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -as"" = IfStatement This MemberReference resolvemode MethodInvocation MemberReference THEIRS equals BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -at"" = IfStatement This MemberReference resolvemode MethodInvocation MemberReference YOURS equals BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -ay"" = BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""unsupported or absent resolve mode"" End End End End End IfStatement BinaryOperation == MemberReference P4View Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""please specify a view"" End IfStatement This MethodInvocation isRedoall BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -f"" = End IfStatement This MethodInvocation isSimulationmode BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -n"" = End IfStatement This MethodInvocation isForcetextmode BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -t"" = End IfStatement This MethodInvocation isMarkersforall BlockStatement StatementExpression Assignment MemberReference P4CmdOpts BinaryOperation + MemberReference P4CmdOpts Literal "" -v"" = End StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + Literal ""-s resolve "" MemberReference P4CmdOpts Literal "" "" MemberReference P4View ClassCreator ReferenceType SimpleP4OutputHandler This execP4Command ReferenceType P4Base",0
477,477,,0
261,261,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.sos Import org.apache.tools.ant.types.Commandline ClassDeclaration Modifier public /**
 * Commits and unlocks files in Visual SourceSafe via a SourceOffSite server.
 *
 *
 * @ant.task name=""soscheckin"" category=""scm""
 */ SOSCheckin MethodDeclaration /**
     * The filename to act upon.
     * If no file is specified then the task
     * acts upon the project.
     *
     * @param  filename  The new file value
     */ Modifier public final setFile FormalParameter ReferenceType String filename StatementExpression SuperMethodInvocation MemberReference filename setInternalFilename MethodDeclaration /**
     * Flag to recursively apply the action. Defaults to false.
     *
     * @param  recursive  True for recursive operation.
     */ Modifier public setRecursive FormalParameter BasicType boolean recursive StatementExpression SuperMethodInvocation MemberReference recursive setInternalRecursive MethodDeclaration /**
     * The comment to apply to all files being labelled.
     *
     * @param  comment  The new comment value
     */ Modifier public setComment FormalParameter ReferenceType String comment StatementExpression SuperMethodInvocation MemberReference comment setInternalComment MethodDeclaration /**
     * Build the command line. <p>
     *
     * CheckInFile required parameters: -server -name -password -database -project
     *  -file<br>
     * CheckInFile optional parameters: -workdir -log -verbose -nocache -nocompression
     *  -soshome<br>
     * CheckInProject required parameters: -server -name -password -database
     *  -project<br>
     * CheckInProject optional parameters: workdir -recursive -log -verbose
     *  -nocache -nocompression -soshome<br>
     *
     * @return    Commandline the generated command to be executed
     */ Modifier protected ReferenceType Commandline buildCmdLine StatementExpression Assignment MemberReference commandLine ClassCreator ReferenceType Commandline = IfStatement BinaryOperation != MethodInvocation getFilename Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_COMMAND setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd COMMAND_CHECKIN_FILE setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_FILE setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getFilename setValue createArgument BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_COMMAND setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd COMMAND_CHECKIN_PROJECT setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getRecursive setValue createArgument End StatementExpression MethodInvocation getRequiredAttributes StatementExpression MethodInvocation getOptionalAttributes IfStatement BinaryOperation != MethodInvocation getComment Literal null BlockStatement StatementExpression MethodInvocation commandLine MethodInvocation MemberReference SOSCmd FLAG_COMMENT setValue createArgument StatementExpression MethodInvocation commandLine MethodInvocation MethodInvocation getComment setValue createArgument End ReturnStatement MemberReference commandLine ReferenceType SOS",0
126,126,"CompilationUnit PackageDeclaration org.apache.tools.ant.types.selectors InterfaceDeclaration Modifier public /**
 * An interface used to describe the actions required by any type of
 * directory scanner that supports Selecters.
 *
 * @since 1.5
 */ SelectorScanner MethodDeclaration /**
     * Sets the selectors the scanner should use.
     *
     * @param selectors the list of selectors
     */ setSelectors FormalParameter ReferenceType FileSelector selectors MethodDeclaration /**
     * Directories which were selected out of a scan.
     *
     * @return list of directories not selected
     */ ReferenceType String getDeselectedDirectories MethodDeclaration /**
     * Files which were selected out of a scan.
     *
     * @return list of files not selected
     */ ReferenceType String getDeselectedFiles",1
615,615,,0
307,307,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.File Import java.io.IOException Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.ZipFileSet Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.zip.ZipOutputStream ClassDeclaration Modifier public /**
 * Creates a EAR archive. Based on WAR task
 *
 *
 * @since Ant 1.4
 *
 * @ant.task category=""packaging""
 */ Ear FieldDeclaration Modifier private ReferenceType File VariableDeclarator deploymentDescriptor FieldDeclaration Modifier private BasicType boolean VariableDeclarator descriptorAdded FieldDeclaration Modifier private final static ReferenceType FileUtils VariableDeclarator fu MethodInvocation FileUtils newFileUtils ConstructorDeclaration Modifier public /**
     * Create an Ear task.
     */ Ear StatementExpression SuperConstructorInvocation StatementExpression Assignment MemberReference archiveType Literal ""ear"" = StatementExpression Assignment MemberReference emptyBehavior Literal ""create"" = MethodDeclaration /**
     * @deprecated Use setDestFile(destfile) instead
     */ Modifier public setEarfile FormalParameter ReferenceType File earFile StatementExpression MethodInvocation MemberReference earFile setDestFile MethodDeclaration /**
     * File to incorporate as application.xml.
     */ Modifier public setAppxml FormalParameter ReferenceType File descr StatementExpression Assignment MemberReference deploymentDescriptor MemberReference descr = IfStatement MethodInvocation ! deploymentDescriptor exists BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""Deployment descriptor: "" MemberReference deploymentDescriptor Literal "" does not exist."" End LocalVariableDeclaration ReferenceType ZipFileSet VariableDeclarator fs ClassCreator ReferenceType ZipFileSet StatementExpression MethodInvocation fs MemberReference deploymentDescriptor setFile StatementExpression MethodInvocation fs Literal ""META-INF/application.xml"" setFullpath StatementExpression SuperMethodInvocation MemberReference fs addFileset MethodDeclaration /**
     * Adds zipfileset.
     *
     * @param fs zipfileset to add
     */ Modifier public addArchives FormalParameter ReferenceType ZipFileSet fs StatementExpression MethodInvocation fs Literal ""/"" setPrefix StatementExpression SuperMethodInvocation MemberReference fs addFileset MethodDeclaration Modifier protected initZipOutputStream FormalParameter ReferenceType ZipOutputStream zOut IOException BuildException IfStatement BinaryOperation && BinaryOperation == MemberReference deploymentDescriptor Literal null MethodInvocation ! isInUpdateMode BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""appxml attribute is required"" MethodInvocation getLocation End StatementExpression SuperMethodInvocation MemberReference zOut initZipOutputStream MethodDeclaration /**
     * Overridden from Zip class to deal with application.xml
     */ Modifier protected zipFile FormalParameter ReferenceType File file FormalParameter ReferenceType ZipOutputStream zOut FormalParameter ReferenceType String vPath FormalParameter BasicType int mode IOException IfStatement MethodInvocation vPath Literal ""META-INF/application.xml"" equalsIgnoreCase BlockStatement IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MemberReference deploymentDescriptor Literal null MethodInvocation ! fu MemberReference deploymentDescriptor MemberReference file fileNameEquals MemberReference descriptorAdded BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + Literal ""Warning: selected "" MemberReference archiveType Literal "" files include a META-INF/application.xml which will"" Literal "" be ignored (please use appxml attribute to "" MemberReference archiveType Literal "" task)"" MemberReference Project MSG_WARN log BlockStatement StatementExpression SuperMethodInvocation MemberReference file MemberReference zOut MemberReference vPath MemberReference mode zipFile StatementExpression Assignment MemberReference descriptorAdded Literal true = End BlockStatement StatementExpression SuperMethodInvocation MemberReference file MemberReference zOut MemberReference vPath MemberReference mode zipFile End MethodDeclaration /**
     * Make sure we don't think we already have a application.xml next
     * time this task gets executed.
     */ Modifier protected cleanUp StatementExpression Assignment MemberReference descriptorAdded Literal false = StatementExpression SuperMethodInvocation cleanUp ReferenceType Jar",0
411,411,,1
154,154,"CompilationUnit PackageDeclaration org.apache.tools.ant.util.regexp Import org.apache.tools.ant.BuildException InterfaceDeclaration Modifier public /***
 * Interface which represents a regular expression, and the operations
 * that can be performed on it.
 *
 */ Regexp ConstantDeclaration /**
     * Replace only the first occurance of the regular expression
     */ BasicType int VariableDeclarator REPLACE_FIRST Literal 0x00000001 ConstantDeclaration /**
     * Replace all occurances of the regular expression
     */ BasicType int VariableDeclarator REPLACE_ALL Literal 0x00000010 MethodDeclaration /**
     * Perform a substitution on the regular expression.
     * @param input The string to substitute on
     * @param argument The string which defines the substitution
     * @param options The list of options for the match and replace. See the
     *                MATCH_ and REPLACE_ constants above.
     */ ReferenceType String substitute FormalParameter ReferenceType String input FormalParameter ReferenceType String argument FormalParameter BasicType int options BuildException ReferenceType RegexpMatcher",1
148,148,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.attributes InterfaceDeclaration Modifier public /**
 * Attribute info structure that provides base methods
 *
 */ AttributeInfo ConstantDeclaration ReferenceType String VariableDeclarator SOURCE_FILE Literal ""SourceFile"" ConstantDeclaration ReferenceType String VariableDeclarator CONSTANT_VALUE Literal ""ConstantValue"" ConstantDeclaration ReferenceType String VariableDeclarator CODE Literal ""Code"" ConstantDeclaration ReferenceType String VariableDeclarator EXCEPTIONS Literal ""Exceptions"" ConstantDeclaration ReferenceType String VariableDeclarator LINE_NUMBER_TABLE Literal ""LineNumberTable"" ConstantDeclaration ReferenceType String VariableDeclarator LOCAL_VARIABLE_TABLE Literal ""LocalVariableTable"" ConstantDeclaration ReferenceType String VariableDeclarator INNER_CLASSES Literal ""InnerClasses"" ConstantDeclaration ReferenceType String VariableDeclarator SOURCE_DIR Literal ""SourceDir"" ConstantDeclaration ReferenceType String VariableDeclarator SYNTHETIC Literal ""Synthetic"" ConstantDeclaration ReferenceType String VariableDeclarator DEPRECATED Literal ""Deprecated"" ConstantDeclaration ReferenceType String VariableDeclarator UNKNOWN Literal ""Unknown""",1
142,142,"CompilationUnit PackageDeclaration org.apache.tools.ant.util Import java.io.FilterOutputStream Import java.io.IOException Import java.io.OutputStream ClassDeclaration Modifier public /**
 * Class that can be used to wrap <tt>System.out</tt> and <tt>System.err</tt>
 * without getting anxious about any client closing the stream.
 *
 * <p>
 * In code-language it means that it is not necessary to do:
 * <pre>
 * if (out != System.out && out!= System.err) {
 *   out.close();
 * }
 * </pre>
 * </p>
 *
 */ KeepAliveOutputStream ConstructorDeclaration Modifier public KeepAliveOutputStream FormalParameter ReferenceType OutputStream out StatementExpression SuperConstructorInvocation MemberReference out MethodDeclaration /** this method does nothing */ Modifier public close IOException ReferenceType FilterOutputStream",0
288,288,"CompilationUnit PackageDeclaration org.apache.tools.ant Import java.util.Enumeration Import java.io.IOException ClassDeclaration Modifier public abstract /**
 * Base class for all tasks.
 *
 * Use Project.createTask to create a new task instance rather than
 * using this class directly for construction.
 *
 * @see Project#createTask
 */ Task FieldDeclaration /**
     * Target this task belongs to, if any.
     * @deprecated You should not be accessing this variable directly.
     *   Please use the {@link #getOwningTarget()} method.
     */ Modifier protected ReferenceType Target VariableDeclarator target FieldDeclaration /**
     * Description of this task, if any.
     * @deprecated You should not be accessing this variable directly.
     */ Modifier protected ReferenceType String VariableDeclarator description FieldDeclaration /**
     * Location within the build file of this task definition.
     * @deprecated You should not be accessing this variable directly.
     *   Please use the {@link #getLocation()} method.
     */ Modifier protected ReferenceType Location VariableDeclarator location MemberReference Location UNKNOWN_LOCATION FieldDeclaration /**
     * Name of this task to be used for logging purposes.
     * This defaults to the same as the type, but may be
     * overridden by the user. For instance, the name ""java""
     * isn't terribly descriptive for a task used within
     * another task - the outer task code can probably
     * provide a better one.
     * @deprecated You should not be accessing this variable directly.
     *   Please use the {@link #getTaskName()} method.
     */ Modifier protected ReferenceType String VariableDeclarator taskName FieldDeclaration /**
     * Type of this task.
     *
     * @deprecated You should not be accessing this variable directly.
     *   Please use the {@link #getTaskType()} method.
     */ Modifier protected ReferenceType String VariableDeclarator taskType FieldDeclaration /**
     * Wrapper for this object, used to configure it at runtime.
     *
     * @deprecated You should not be accessing this variable directly.
     *   Please use the {@link #getWrapper()} method.
     */ Modifier protected ReferenceType RuntimeConfigurable VariableDeclarator wrapper FieldDeclaration /**
     * Whether or not this task is invalid. A task becomes invalid
     * if a conflicting class is specified as the implementation for
     * its type.
     */ Modifier private BasicType boolean VariableDeclarator invalid ConstructorDeclaration Modifier public /** Sole constructor. */ Task MethodDeclaration /**
     * Sets the target container of this task.
     *
     * @param target Target in whose scope this task belongs.
     *               May be <code>null</code>, indicating a top-level task.
     */ Modifier public setOwningTarget FormalParameter ReferenceType Target target StatementExpression Assignment This MemberReference target MemberReference target = MethodDeclaration /**
     * Returns the container target of this task.
     *
     * @return The target containing this task, or <code>null</code> if
     *         this task is a top-level task.
     */ Modifier public ReferenceType Target getOwningTarget ReturnStatement MemberReference target MethodDeclaration /**
     * Sets the name to use in logging messages.
     *
     * @param name The name to use in logging messages.
     *             Should not be <code>null</code>.
     */ Modifier public setTaskName FormalParameter ReferenceType String name StatementExpression Assignment This MemberReference taskName MemberReference name = MethodDeclaration /**
     * Returns the name to use in logging messages.
     *
     * @return the name to use in logging messages.
     */ Modifier public ReferenceType String getTaskName ReturnStatement MemberReference taskName MethodDeclaration /**
     * Sets the name with which the task has been invoked.
     *
     * @param type The name the task has been invoked as.
     *             Should not be <code>null</code>.
     */ Modifier public setTaskType FormalParameter ReferenceType String type StatementExpression Assignment This MemberReference taskType MemberReference type = MethodDeclaration /**
     * Sets a description of the current action. This may be used for logging
     * purposes.
     *
     * @param desc Description of the current action.
     *             May be <code>null</code>, indicating that no description is
     *             available.
     *
     */ Modifier public setDescription FormalParameter ReferenceType String desc StatementExpression Assignment MemberReference description MemberReference desc = MethodDeclaration /**
     * Returns the description of the current action.
     *
     * @return the description of the current action, or <code>null</code> if
     *         no description is available.
     */ Modifier public ReferenceType String getDescription ReturnStatement MemberReference description MethodDeclaration /**
     * Called by the project to let the task initialize properly.
     * The default implementation is a no-op.
     *
     * @exception BuildException if something goes wrong with the build
     */ Modifier public init BuildException MethodDeclaration /**
     * Called by the project to let the task do its work. This method may be
     * called more than once, if the task is invoked more than once.
     * For example,
     * if target1 and target2 both depend on target3, then running
     * ""ant target1 target2"" will run all tasks in target3 twice.
     *
     * @exception BuildException if something goes wrong with the build
     */ Modifier public execute BuildException MethodDeclaration /**
     * Returns the file/location where this task was defined.
     *
     * @return the file/location where this task was defined.
     *         Should not return <code>null</code>. Location.UNKNOWN_LOCATION
     *         is used for unknown locations.
     *
     * @see Location#UNKNOWN_LOCATION
     */ Modifier public ReferenceType Location getLocation ReturnStatement MemberReference location MethodDeclaration /**
     * Sets the file/location where this task was defined.
     *
     * @param location The file/location where this task was defined.
     *                 Should not be <code>null</code> - use
     *                 Location.UNKNOWN_LOCATION if the location isn't known.
     *
     * @see Location#UNKNOWN_LOCATION
     */ Modifier public setLocation FormalParameter ReferenceType Location location StatementExpression Assignment This MemberReference location MemberReference location = MethodDeclaration /**
     * Returns the wrapper used for runtime configuration.
     *
     * @return the wrapper used for runtime configuration. This
     *         method will generate a new wrapper (and cache it)
     *         if one isn't set already.
     */ Modifier public ReferenceType RuntimeConfigurable getRuntimeConfigurableWrapper IfStatement BinaryOperation == MemberReference wrapper Literal null BlockStatement StatementExpression Assignment MemberReference wrapper ClassCreator ReferenceType RuntimeConfigurable This MethodInvocation getTaskName = End ReturnStatement MemberReference wrapper MethodDeclaration /**
     * Sets the wrapper to be used for runtime configuration.
     *
     * This method should be used only by the ProjectHelper and ant internals.
     * It is public to allow helper plugins to operate on tasks, normal tasks
     * should never use it.
     *
     * @param wrapper The wrapper to be used for runtime configuration.
     *                May be <code>null</code>, in which case the next call
     *                to getRuntimeConfigurableWrapper will generate a new
     *                wrapper.
     */ Modifier public setRuntimeConfigurableWrapper FormalParameter ReferenceType RuntimeConfigurable wrapper StatementExpression Assignment This MemberReference wrapper MemberReference wrapper = MethodDeclaration /**
     * Configures this task - if it hasn't been done already.
     * If the task has been invalidated, it is replaced with an
     * UnknownElement task which uses the new definition in the project.
     *
     * @exception BuildException if the task cannot be configured.
     */ Modifier public maybeConfigure BuildException IfStatement MemberReference ! invalid BlockStatement IfStatement BinaryOperation != MemberReference wrapper Literal null BlockStatement StatementExpression MethodInvocation wrapper MethodInvocation getProject maybeConfigure End BlockStatement StatementExpression MethodInvocation getReplacement End MethodDeclaration /**
     * Force the task to be reconfigured from it's RuntimeConfigurable
     *
     */ Modifier public reconfigure IfStatement BinaryOperation != MemberReference wrapper Literal null BlockStatement StatementExpression MethodInvocation wrapper MethodInvocation getProject reconfigure End MethodDeclaration /**
     * Handles output by logging it with the INFO priority.
     *
     * @param output The output to log. Should not be <code>null</code>.
     */ Modifier protected handleOutput FormalParameter ReferenceType String output StatementExpression MethodInvocation MemberReference output MemberReference Project MSG_INFO log MethodDeclaration /**
     * Handles output by logging it with the INFO priority.
     *
     * @param output The output to log. Should not be <code>null</code>.
     *
     * @since Ant 1.5.2
     */ Modifier protected handleFlush FormalParameter ReferenceType String output StatementExpression MethodInvocation MemberReference output handleOutput MethodDeclaration /**
     * Handle an input request by this task
     *
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read
     *
     * @return the number of bytes read
     *
     * @exception IOException if the data cannot be read
     * @since Ant 1.6
     */ Modifier protected BasicType int handleInput FormalParameter BasicType byte buffer FormalParameter BasicType int offset FormalParameter BasicType int length IOException ReturnStatement MethodInvocation MethodInvocation MemberReference buffer MemberReference offset MemberReference length defaultInput getProject MethodDeclaration /**
     * Handles an error output by logging it with the WARN priority.
     *
     * @param output The error output to log. Should not be <code>null</code>.
     */ Modifier protected handleErrorOutput FormalParameter ReferenceType String output StatementExpression MethodInvocation MemberReference output MemberReference Project MSG_WARN log MethodDeclaration /**
     * Handles an error line by logging it with the ERR priority.
     *
     * @param output The error output to log. Should not be <code>null</code>.
     *
     * @since Ant 1.5.2
     */ Modifier protected handleErrorFlush FormalParameter ReferenceType String output StatementExpression MethodInvocation MemberReference output handleErrorOutput MethodDeclaration /**
     * Logs a message with the default (INFO) priority.
     *
     * @param msg The message to be logged. Should not be <code>null</code>.
     */ Modifier public log FormalParameter ReferenceType String msg StatementExpression MethodInvocation MemberReference msg MemberReference Project MSG_INFO log MethodDeclaration /**
     * Logs a message with the given priority. This delegates
     * the actual logging to the project.
     *
     * @param msg The message to be logged. Should not be <code>null</code>.
     * @param msgLevel The message priority at which this message is to
     *                 be logged.
     */ Modifier public log FormalParameter ReferenceType String msg FormalParameter BasicType int msgLevel StatementExpression MethodInvocation MethodInvocation This MemberReference msg MemberReference msgLevel log getProject MethodDeclaration /**
     * Performs this task if it's still valid, or gets a replacement
     * version and performs that otherwise.
     *
     * Performing a task consists of firing a task started event,
     * configuring the task, executing it, and then firing task finished
     * event. If a runtime exception is thrown, the task finished event
     * is still fired, but with the exception as the cause.
     */ Modifier public final perform IfStatement MemberReference ! invalid BlockStatement StatementExpression MethodInvocation MethodInvocation This fireTaskStarted getProject LocalVariableDeclaration ReferenceType Throwable VariableDeclarator reason Literal null TryStatement StatementExpression MethodInvocation maybeConfigure StatementExpression MethodInvocation execute CatchClause CatchClauseParameter BuildException ex IfStatement BinaryOperation == MethodInvocation ex getLocation MemberReference Location UNKNOWN_LOCATION BlockStatement StatementExpression MethodInvocation ex MethodInvocation getLocation setLocation End StatementExpression Assignment MemberReference reason MemberReference ex = ThrowStatement MemberReference ex CatchClause CatchClauseParameter Exception ex StatementExpression Assignment MemberReference reason MemberReference ex = LocalVariableDeclaration ReferenceType BuildException VariableDeclarator be ClassCreator ReferenceType BuildException MemberReference ex StatementExpression MethodInvocation be MethodInvocation getLocation setLocation ThrowStatement MemberReference be CatchClause CatchClauseParameter Error ex StatementExpression Assignment MemberReference reason MemberReference ex = ThrowStatement MemberReference ex StatementExpression MethodInvocation MethodInvocation This MemberReference reason fireTaskFinished getProject BlockStatement LocalVariableDeclaration ReferenceType UnknownElement VariableDeclarator ue MethodInvocation getReplacement LocalVariableDeclaration ReferenceType Task VariableDeclarator task MethodInvocation ue getTask StatementExpression MethodInvocation task perform End MethodDeclaration /**
     * Marks this task as invalid. Any further use of this task
     * will go through a replacement with the updated definition.
     */ Modifier final markInvalid StatementExpression Assignment MemberReference invalid Literal true = MethodDeclaration /**
     * Has this task been marked invalid?
     *
     * @return true if this task is no longer valid. A new task should be
     * configured in this case.
     *
     * @since Ant 1.5
     */ Modifier final protected BasicType boolean isInvalid ReturnStatement MemberReference invalid FieldDeclaration /**
     * Replacement element used if this task is invalidated.
     */ Modifier private ReferenceType UnknownElement VariableDeclarator replacement MethodDeclaration /**
     * Creates an UnknownElement that can be used to replace this task.
     * Once this has been created once, it is cached and returned by
     * future calls.
     *
     * @return the UnknownElement instance for the new definition of this task.
     */ Modifier private ReferenceType UnknownElement getReplacement IfStatement BinaryOperation == MemberReference replacement Literal null BlockStatement StatementExpression Assignment MemberReference replacement ClassCreator ReferenceType UnknownElement MemberReference taskType = StatementExpression MethodInvocation replacement MethodInvocation getProject setProject StatementExpression MethodInvocation replacement MemberReference taskType setTaskType StatementExpression MethodInvocation replacement MemberReference taskName setTaskName StatementExpression MethodInvocation replacement MemberReference location setLocation StatementExpression MethodInvocation replacement MemberReference target setOwningTarget StatementExpression MethodInvocation replacement MemberReference wrapper setRuntimeConfigurableWrapper StatementExpression MethodInvocation wrapper MemberReference replacement setProxy StatementExpression MethodInvocation MemberReference wrapper MemberReference replacement replaceChildren StatementExpression MethodInvocation target This MemberReference replacement replaceChild StatementExpression MethodInvocation replacement maybeConfigure End ReturnStatement MemberReference replacement MethodDeclaration /**
     * Recursively adds an UnknownElement instance for each child
     * element of replacement.
     *
     * @since Ant 1.5.1
     */ Modifier private replaceChildren FormalParameter ReferenceType RuntimeConfigurable wrapper FormalParameter ReferenceType UnknownElement parentElement LocalVariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation wrapper getChildren WhileStatement MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType RuntimeConfigurable VariableDeclarator childWrapper Cast ReferenceType RuntimeConfigurable MethodInvocation e nextElement LocalVariableDeclaration ReferenceType UnknownElement VariableDeclarator childElement ClassCreator ReferenceType UnknownElement MethodInvocation childWrapper getElementTag StatementExpression MethodInvocation parentElement MemberReference childElement addChild StatementExpression MethodInvocation childElement MethodInvocation getProject setProject StatementExpression MethodInvocation childElement MemberReference childWrapper setRuntimeConfigurableWrapper StatementExpression MethodInvocation childWrapper MemberReference childElement setProxy StatementExpression MethodInvocation MemberReference childWrapper MemberReference childElement replaceChildren End MethodDeclaration /**
     * Return the type of task
     *
     * @return the type of task
     */ Modifier public ReferenceType String getTaskType ReturnStatement MemberReference taskType MethodDeclaration /**
     * Return the runtime configurable structure for this task
     *
     * @return the runtime structure for this task
     */ Modifier protected ReferenceType RuntimeConfigurable getWrapper ReturnStatement MemberReference wrapper ReferenceType ProjectComponent",0
460,460,,0
209,209,"CompilationUnit PackageDeclaration org.apache.tools.ant.types Import java.util.Vector Import org.apache.tools.ant.BuildException ClassDeclaration Modifier public /**
 * Wrapper for environment variables.
 *
 */ Environment FieldDeclaration /**
     * a vector of type Enviromment.Variable
     * @see Variable
     */ Modifier protected ReferenceType Vector VariableDeclarator variables ClassDeclaration Modifier public static /**
     * representation of a single env value
     */ Variable FieldDeclaration /**
         * env key and value pair; everything gets expanded to a string
         * during assignment
         */ Modifier private ReferenceType String VariableDeclarator key VariableDeclarator value ConstructorDeclaration Modifier public /**
         * Constructor for variable
         *
         */ Variable StatementExpression SuperConstructorInvocation MethodDeclaration /**
         * set the key
         * @param key string
         */ Modifier public setKey FormalParameter ReferenceType String key StatementExpression Assignment This MemberReference key MemberReference key = MethodDeclaration /**
         * set the value
         * @param value string value
         */ Modifier public setValue FormalParameter ReferenceType String value StatementExpression Assignment This MemberReference value MemberReference value = MethodDeclaration /**
         * key accessor
         * @return key
         */ Modifier public ReferenceType String getKey ReturnStatement This MemberReference key MethodDeclaration /**
         * value accessor
         * @return value
         */ Modifier public ReferenceType String getValue ReturnStatement This MemberReference value MethodDeclaration /**
         * stringify path and assign to the value.
         * The value will contain all path elements separated by the appropriate
         * separator
         * @param path path
         */ Modifier public setPath FormalParameter ReferenceType Path path StatementExpression Assignment This MemberReference value MethodInvocation path toString = MethodDeclaration /**
         * get the absolute path of a file and assign it to the value
         * @param file file to use as the value
         */ Modifier public setFile FormalParameter ReferenceType java ReferenceType io ReferenceType File file StatementExpression Assignment This MemberReference value MethodInvocation file getAbsolutePath = MethodDeclaration /**
         * get the assigment string
         * This is not ready for insertion into a property file without following
         * the escaping rules of the properties class.
         * @return a string of the form key=value.
         * @throws BuildException if key or value are unassigned
         */ Modifier public ReferenceType String getContent BuildException IfStatement BinaryOperation || BinaryOperation == MemberReference key Literal null BinaryOperation == MemberReference value Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + Literal ""key and value must be specified "" Literal ""for environment variables."" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator sb ClassCreator ReferenceType StringBuffer MethodInvocation key trim StatementExpression MethodInvocation sb MethodInvocation MethodInvocation value trim append Literal ""="" append ReturnStatement MethodInvocation sb toString ConstructorDeclaration Modifier public /**
     * constructor
     */ Environment StatementExpression Assignment MemberReference variables ClassCreator ReferenceType Vector = MethodDeclaration /**
     * add a variable.
     * Validity checking is <i>not</i> performed at this point. Duplicates
     * are not caught either.
     * @param var new variable.
     */ Modifier public addVariable FormalParameter ReferenceType Variable var StatementExpression MethodInvocation variables MemberReference var addElement MethodDeclaration /**
     * get the variable list as an array
     * @return array of key=value assignment strings
     * @throws BuildException if any variable is misconfigured
     */ Modifier public ReferenceType String getVariables BuildException IfStatement BinaryOperation == MethodInvocation variables size Literal 0 BlockStatement ReturnStatement Literal null End LocalVariableDeclaration ReferenceType String VariableDeclarator result ArrayCreator ReferenceType String MethodInvocation variables size ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference result length MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector MemberReference i result Cast ReferenceType Variable MethodInvocation variables MemberReference i elementAt = End ReturnStatement MemberReference result",0
655,655,,0
305,305,"CompilationUnit PackageDeclaration org.apache.tools.ant.filters Import java.io.IOException Import java.io.Reader Import java.util.Vector Import java.util.Enumeration Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.ProjectComponent Import org.apache.tools.ant.types.RegularExpression Import org.apache.tools.ant.types.Substitution Import org.apache.tools.ant.util.FileUtils Import org.apache.tools.ant.util.Tokenizer Import org.apache.tools.ant.util.LineTokenizer Import org.apache.tools.ant.util.regexp.Regexp ClassDeclaration Modifier public /**
 * This splits up input into tokens and passes
 * the tokens to a sequence of filters.
 *
 * @since Ant 1.6
 * @see BaseFilterReader
 * @see ChainableReader
 * @see org.apache.tools.ant.DynamicConfigurator
 */ TokenFilter InterfaceDeclaration Modifier public /**
     * string filters implement this interface
     */ Filter MethodDeclaration /**
         * filter and/of modify a string
         *
         * @param string the string to filter
         * @return the modified string or null if the
         *         string did not pass the filter
         */ ReferenceType String filter FormalParameter ReferenceType String string FieldDeclaration /** string filters */ Modifier private ReferenceType Vector VariableDeclarator filters ClassCreator ReferenceType Vector FieldDeclaration /** the tokenizer to use on the input stream */ Modifier private ReferenceType Tokenizer VariableDeclarator tokenizer Literal null FieldDeclaration /** the output token termination */ Modifier private ReferenceType String VariableDeclarator delimOutput Literal null FieldDeclaration /** the current string token from the input stream */ Modifier private ReferenceType String VariableDeclarator line Literal null FieldDeclaration /** the position in the current string token */ Modifier private BasicType int VariableDeclarator linePos Literal 0 ConstructorDeclaration Modifier public /**
     * Constructor for ""dummy"" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */ TokenFilter StatementExpression SuperConstructorInvocation ConstructorDeclaration Modifier public /**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be <code>null</code>.
     */ TokenFilter FormalParameter Modifier final ReferenceType Reader in StatementExpression SuperConstructorInvocation MemberReference in MethodDeclaration /**
     * Returns the next character in the filtered stream, only including
     * lines from the original stream which match all of the specified
     * regular expressions.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */ Modifier public BasicType int read IOException IfStatement BinaryOperation == MemberReference tokenizer Literal null BlockStatement StatementExpression Assignment MemberReference tokenizer ClassCreator ReferenceType LineTokenizer = End WhileStatement BinaryOperation || BinaryOperation == MemberReference line Literal null BinaryOperation == MethodInvocation line length Literal 0 BlockStatement StatementExpression Assignment MemberReference line MethodInvocation tokenizer MemberReference in getToken = IfStatement BinaryOperation == MemberReference line Literal null BlockStatement ReturnStatement Literal - 1 End ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation filters elements MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Filter VariableDeclarator filter Cast ReferenceType Filter MethodInvocation e nextElement StatementExpression Assignment MemberReference line MethodInvocation filter MemberReference line filter = IfStatement BinaryOperation == MemberReference line Literal null BlockStatement BreakStatement End End StatementExpression Assignment MemberReference linePos Literal 0 = IfStatement BinaryOperation != MemberReference line Literal null BlockStatement IfStatement BinaryOperation != MethodInvocation tokenizer MethodInvocation length getPostToken Literal 0 BlockStatement IfStatement BinaryOperation != MemberReference delimOutput Literal null BlockStatement StatementExpression Assignment MemberReference line BinaryOperation + MemberReference line MemberReference delimOutput = BlockStatement StatementExpression Assignment MemberReference line BinaryOperation + MemberReference line MethodInvocation tokenizer getPostToken = End End End End LocalVariableDeclaration BasicType int VariableDeclarator ch MethodInvocation line MemberReference linePos charAt StatementExpression MemberReference ++ linePos IfStatement BinaryOperation == MemberReference linePos MethodInvocation line length BlockStatement StatementExpression Assignment MemberReference line Literal null = End ReturnStatement MemberReference ch MethodDeclaration /**
     * Creates a new TokenFilter using the passed in
     * Reader for instantiation.
     *
     * @param reader A Reader object providing the underlying stream.
     *
     * @return a new filter based on this configuration
     */ Modifier public final ReferenceType Reader chain FormalParameter Modifier final ReferenceType Reader reader LocalVariableDeclaration ReferenceType TokenFilter VariableDeclarator newFilter ClassCreator ReferenceType TokenFilter MemberReference reader StatementExpression Assignment MemberReference newFilter filters MemberReference filters = StatementExpression Assignment MemberReference newFilter tokenizer MemberReference tokenizer = StatementExpression Assignment MemberReference newFilter delimOutput MemberReference delimOutput = StatementExpression MethodInvocation newFilter MethodInvocation getProject setProject ReturnStatement MemberReference newFilter MethodDeclaration /**
     * set the output delimiter.
     * @param delimOutput replaces the delim string returned by the
     *                    tokenizer, if present.
     */ Modifier public setDelimOutput FormalParameter ReferenceType String delimOutput StatementExpression Assignment This MemberReference delimOutput MethodInvocation MemberReference delimOutput resolveBackSlash = MethodDeclaration /**
     * add a line tokenizer - this is the default.
     * @param tokenizer the line tokenizer
     */ Modifier public addLineTokenizer FormalParameter ReferenceType LineTokenizer tokenizer StatementExpression MethodInvocation MemberReference tokenizer add MethodDeclaration /**
     * add a string tokenizer
     * @param tokenizer the string tokenizer
     */ Modifier public addStringTokenizer FormalParameter ReferenceType StringTokenizer tokenizer StatementExpression MethodInvocation MemberReference tokenizer add MethodDeclaration /**
     * add a file tokenizer
     * @param tokenizer the file tokenizer
     */ Modifier public addFileTokenizer FormalParameter ReferenceType FileTokenizer tokenizer StatementExpression MethodInvocation MemberReference tokenizer add MethodDeclaration /**
     * add an arbitrary tokenizer
     * @param tokenizer the tokenizer to all, only one allowed
     */ Modifier public add FormalParameter ReferenceType Tokenizer tokenizer IfStatement BinaryOperation != This MemberReference tokenizer Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Only one tokenizer allowed"" End StatementExpression Assignment This MemberReference tokenizer MemberReference tokenizer = MethodDeclaration /**
     * replace string filter
     * @param filter the replace string filter
     */ Modifier public addReplaceString FormalParameter ReferenceType ReplaceString filter StatementExpression MethodInvocation filters MemberReference filter addElement MethodDeclaration /**
     * contains string filter
     * @param filter the contains string filter
     */ Modifier public addContainsString FormalParameter ReferenceType ContainsString filter StatementExpression MethodInvocation filters MemberReference filter addElement MethodDeclaration /**
     * replace regex filter
     * @param filter the replace regex filter
     */ Modifier public addReplaceRegex FormalParameter ReferenceType ReplaceRegex filter StatementExpression MethodInvocation filters MemberReference filter addElement MethodDeclaration /**
     * contains regex filter
     * @param filter the contains regex filter
     */ Modifier public addContainsRegex FormalParameter ReferenceType ContainsRegex filter StatementExpression MethodInvocation filters MemberReference filter addElement MethodDeclaration /**
     * trim filter
     * @param filter the trim filter
     */ Modifier public addTrim FormalParameter ReferenceType Trim filter StatementExpression MethodInvocation filters MemberReference filter addElement MethodDeclaration /**
     * ignore blank filter
     * @param filter the ignore blank filter
     */ Modifier public addIgnoreBlank FormalParameter ReferenceType IgnoreBlank filter StatementExpression MethodInvocation filters MemberReference filter addElement MethodDeclaration /**
     * delete chars
     * @param filter the delete characters filter
     */ Modifier public addDeleteCharacters FormalParameter ReferenceType DeleteCharacters filter StatementExpression MethodInvocation filters MemberReference filter addElement MethodDeclaration /**
     * Add an arbitrary filter
     * @param filter the filter to add
     */ Modifier public add FormalParameter ReferenceType Filter filter StatementExpression MethodInvocation filters MemberReference filter addElement ClassDeclaration Modifier public static /**
     * class to read the complete input into a string
     */ FileTokenizer MethodDeclaration /**
         * Get the complete input as a string
         * @param in the reader object
         * @return the complete input
         * @throws IOException if error reading
         */ Modifier public ReferenceType String getToken FormalParameter ReferenceType Reader in IOException ReturnStatement MethodInvocation FileUtils MemberReference in readFully MethodDeclaration /**
         * Return the intra-token string
         * @return an empty string always
         */ Modifier public ReferenceType String getPostToken ReturnStatement Literal """" ReferenceType ProjectComponent ReferenceType Tokenizer ClassDeclaration Modifier public static /**
     * class to tokenize the input as areas separated
     * by white space, or by a specified list of
     * delim characters. Behaves like java.util.StringTokenizer.
     * if the stream starts with delim characters, the first
     * token will be an empty string (unless the treat tokens
     * as delims flag is set).
     */ StringTokenizer FieldDeclaration Modifier private ReferenceType String VariableDeclarator intraString Literal """" FieldDeclaration Modifier private BasicType int VariableDeclarator pushed Literal - 2 FieldDeclaration Modifier private BasicType char VariableDeclarator delims Literal null FieldDeclaration Modifier private BasicType boolean VariableDeclarator delimsAreTokens Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator suppressDelims Literal false FieldDeclaration Modifier private BasicType boolean VariableDeclarator includeDelims Literal false MethodDeclaration /**
         * attribute delims - the delimiter characters
         * @param delims a string containing the delimiter characters
         */ Modifier public setDelims FormalParameter ReferenceType String delims StatementExpression Assignment This MemberReference delims MethodInvocation MethodInvocation toCharArray MemberReference delims resolveBackSlash = MethodDeclaration /**
         * attribute delimsaretokens - treat delimiters as
         * separate tokens.
         * @param delimsAreTokens true if delimiters are to be separate
         */ Modifier public setDelimsAreTokens FormalParameter BasicType boolean delimsAreTokens StatementExpression Assignment This MemberReference delimsAreTokens MemberReference delimsAreTokens = MethodDeclaration /**
         * attribute suppressdelims - suppress delimiters.
         * default - false
         * @param suppressDelims if true do not report delimiters
         */ Modifier public setSuppressDelims FormalParameter BasicType boolean suppressDelims StatementExpression Assignment This MemberReference suppressDelims MemberReference suppressDelims = MethodDeclaration /**
         * attribute includedelims - treat delimiters as part
         * of the token.
         * default - false
         * @param includeDelims if true add delimiters to the token
         */ Modifier public setIncludeDelims FormalParameter BasicType boolean includeDelims StatementExpression Assignment This MemberReference includeDelims MemberReference includeDelims = MethodDeclaration /**
         * find and return the next token
         *
         * @param in the input stream
         * @return the token
         * @exception IOException if an error occurs reading
         */ Modifier public ReferenceType String getToken FormalParameter ReferenceType Reader in IOException LocalVariableDeclaration BasicType int VariableDeclarator ch Literal - 1 IfStatement BinaryOperation != MemberReference pushed Literal - 2 BlockStatement StatementExpression Assignment MemberReference ch MemberReference pushed = StatementExpression Assignment MemberReference pushed Literal - 2 = BlockStatement StatementExpression Assignment MemberReference ch MethodInvocation in read = End IfStatement BinaryOperation == MemberReference ch Literal - 1 BlockStatement ReturnStatement Literal null End LocalVariableDeclaration BasicType boolean VariableDeclarator inToken Literal true StatementExpression Assignment MemberReference intraString Literal """" = LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator word ClassCreator ReferenceType StringBuffer LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator padding ClassCreator ReferenceType StringBuffer WhileStatement BinaryOperation != MemberReference ch Literal - 1 BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c Cast BasicType char MemberReference ch LocalVariableDeclaration BasicType boolean VariableDeclarator isDelim MethodInvocation MemberReference c isDelim IfStatement MemberReference inToken BlockStatement IfStatement MemberReference isDelim BlockStatement IfStatement MemberReference delimsAreTokens BlockStatement IfStatement BinaryOperation == MethodInvocation word length Literal 0 BlockStatement StatementExpression MethodInvocation word MemberReference c append BlockStatement StatementExpression Assignment MemberReference pushed MemberReference ch = End BreakStatement End StatementExpression MethodInvocation padding MemberReference c append StatementExpression Assignment MemberReference inToken Literal false = BlockStatement StatementExpression MethodInvocation word MemberReference c append End BlockStatement IfStatement MemberReference isDelim BlockStatement StatementExpression MethodInvocation padding MemberReference c append BlockStatement StatementExpression Assignment MemberReference pushed MemberReference ch = BreakStatement End End StatementExpression Assignment MemberReference ch MethodInvocation in read = End StatementExpression Assignment MemberReference intraString MethodInvocation padding toString = IfStatement MemberReference includeDelims BlockStatement StatementExpression MethodInvocation word MemberReference intraString append End ReturnStatement MethodInvocation word toString MethodDeclaration /**
         * @return the intratoken string
         */ Modifier public ReferenceType String getPostToken IfStatement BinaryOperation || MemberReference suppressDelims MemberReference includeDelims BlockStatement ReturnStatement Literal """" End ReturnStatement MemberReference intraString MethodDeclaration Modifier private BasicType boolean isDelim FormalParameter BasicType char ch IfStatement BinaryOperation == MemberReference delims Literal null BlockStatement ReturnStatement MethodInvocation Character MemberReference ch isWhitespace End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference delims length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MemberReference ArraySelector MemberReference i delims MemberReference ch BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false ReferenceType ProjectComponent ReferenceType Tokenizer ClassDeclaration Modifier public static abstract /**
     * Abstract class that converts derived filter classes into
     * ChainableReaderFilter's
     */ ChainableReaderFilter FieldDeclaration Modifier private BasicType boolean VariableDeclarator byLine Literal true MethodDeclaration /**
         * set whether to use filetokenizer or line tokenizer
         * @param byLine if true use a linetokenizer (default) otherwise
         *               use a filetokenizer
         */ Modifier public setByLine FormalParameter BasicType boolean byLine StatementExpression Assignment This MemberReference byLine MemberReference byLine = MethodDeclaration /**
         * Chain a tokenfilter reader to a reader,
         *
         * @param reader the input reader object
         * @return the chained reader object
         */ Modifier public ReferenceType Reader chain FormalParameter ReferenceType Reader reader LocalVariableDeclaration ReferenceType TokenFilter VariableDeclarator tokenFilter ClassCreator ReferenceType TokenFilter MemberReference reader IfStatement MemberReference ! byLine BlockStatement StatementExpression MethodInvocation tokenFilter ClassCreator ReferenceType FileTokenizer add End StatementExpression MethodInvocation tokenFilter This add ReturnStatement MemberReference tokenFilter ReferenceType ProjectComponent ReferenceType ChainableReader ReferenceType Filter ClassDeclaration Modifier public static /**
     * Simple replace string filter.
     */ ReplaceString FieldDeclaration Modifier private ReferenceType String VariableDeclarator from FieldDeclaration Modifier private ReferenceType String VariableDeclarator to MethodDeclaration /**
         * the from attribute
         *
         * @param from the string to replace
         */ Modifier public setFrom FormalParameter ReferenceType String from StatementExpression Assignment This MemberReference from MemberReference from = MethodDeclaration /**
         * the to attribute
         *
         * @param to the string to replace 'from' with
         */ Modifier public setTo FormalParameter ReferenceType String to StatementExpression Assignment This MemberReference to MemberReference to = MethodDeclaration /**
         * Filter a string 'line' replacing from with to
         * (C&P from the Replace task)
         * @param line the string to be filtered
         * @return the filtered line
         */ Modifier public ReferenceType String filter FormalParameter ReferenceType String line IfStatement BinaryOperation == MemberReference from Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Missing from in stringreplace"" End LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator ret ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType int VariableDeclarator start Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator found MethodInvocation line MemberReference from indexOf WhileStatement BinaryOperation >= MemberReference found Literal 0 BlockStatement IfStatement BinaryOperation > MemberReference found MemberReference start BlockStatement StatementExpression MethodInvocation ret MethodInvocation line MemberReference start MemberReference found substring append End IfStatement BinaryOperation != MemberReference to Literal null BlockStatement StatementExpression MethodInvocation ret MemberReference to append End StatementExpression Assignment MemberReference start BinaryOperation + MemberReference found MethodInvocation from length = StatementExpression Assignment MemberReference found MethodInvocation line MemberReference from MemberReference start indexOf = End IfStatement BinaryOperation > MethodInvocation line length MemberReference start BlockStatement StatementExpression MethodInvocation ret MethodInvocation line MemberReference start MethodInvocation line length substring append End ReturnStatement MethodInvocation ret toString ReferenceType ChainableReaderFilter ClassDeclaration Modifier public static /**
     * Simple filter to filter lines contains strings
     */ ContainsString FieldDeclaration Modifier private ReferenceType String VariableDeclarator contains MethodDeclaration /**
         * the contains attribute
         * @param contains the string that the token should contain
         */ Modifier public setContains FormalParameter ReferenceType String contains StatementExpression Assignment This MemberReference contains MemberReference contains = MethodDeclaration /**
         * Filter strings that contain the contains attribute
         *
         * @param string the string to be filtered
         * @return null if the string does not contain ""contains"",
         *              string otherwise
         */ Modifier public ReferenceType String filter FormalParameter ReferenceType String string IfStatement BinaryOperation == MemberReference contains Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Missing contains in containsstring"" End IfStatement BinaryOperation > MethodInvocation string MemberReference contains indexOf Literal - 1 BlockStatement ReturnStatement MemberReference string End ReturnStatement Literal null ReferenceType ProjectComponent ReferenceType Filter ClassDeclaration Modifier public static /**
     * filter to replace regex.
     */ ReplaceRegex FieldDeclaration Modifier private ReferenceType String VariableDeclarator from FieldDeclaration Modifier private ReferenceType String VariableDeclarator to FieldDeclaration Modifier private ReferenceType RegularExpression VariableDeclarator regularExpression FieldDeclaration Modifier private ReferenceType Substitution VariableDeclarator substitution FieldDeclaration Modifier private BasicType boolean VariableDeclarator initialized Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator flags Literal """" FieldDeclaration Modifier private BasicType int VariableDeclarator options FieldDeclaration Modifier private ReferenceType Regexp VariableDeclarator regexp MethodDeclaration /**
         * the from attribute
         * @param from the regex string
         */ Modifier public setPattern FormalParameter ReferenceType String from StatementExpression Assignment This MemberReference from MemberReference from = MethodDeclaration /**
         * the to attribute
         * @param to the replacement string
         */ Modifier public setReplace FormalParameter ReferenceType String to StatementExpression Assignment This MemberReference to MemberReference to = MethodDeclaration /**
         * @param flags the regex flags
         */ Modifier public setFlags FormalParameter ReferenceType String flags StatementExpression Assignment This MemberReference flags MemberReference flags = MethodDeclaration Modifier private initialize IfStatement MemberReference initialized BlockStatement ReturnStatement End StatementExpression Assignment MemberReference options MethodInvocation MemberReference flags convertRegexOptions = IfStatement BinaryOperation == MemberReference from Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Missing pattern in replaceregex"" End StatementExpression Assignment MemberReference regularExpression ClassCreator ReferenceType RegularExpression = StatementExpression MethodInvocation regularExpression MemberReference from setPattern StatementExpression Assignment MemberReference regexp MethodInvocation regularExpression MethodInvocation getProject getRegexp = IfStatement BinaryOperation == MemberReference to Literal null BlockStatement StatementExpression Assignment MemberReference to Literal """" = End StatementExpression Assignment MemberReference substitution ClassCreator ReferenceType Substitution = StatementExpression MethodInvocation substitution MemberReference to setExpression MethodDeclaration /**
         * @param line the string to modify
         * @return the modified string
         */ Modifier public ReferenceType String filter FormalParameter ReferenceType String line StatementExpression MethodInvocation initialize IfStatement MethodInvocation ! regexp MemberReference line MemberReference options matches BlockStatement ReturnStatement MemberReference line End ReturnStatement MethodInvocation regexp MemberReference line MethodInvocation substitution MethodInvocation getProject getExpression MemberReference options substitute ReferenceType ChainableReaderFilter ClassDeclaration Modifier public static /**
     * filter to filter tokens matching regular expressions.
     */ ContainsRegex FieldDeclaration Modifier private ReferenceType String VariableDeclarator from FieldDeclaration Modifier private ReferenceType String VariableDeclarator to FieldDeclaration Modifier private ReferenceType Project VariableDeclarator project FieldDeclaration Modifier private ReferenceType RegularExpression VariableDeclarator regularExpression FieldDeclaration Modifier private ReferenceType Substitution VariableDeclarator substitution FieldDeclaration Modifier private BasicType boolean VariableDeclarator initialized Literal false FieldDeclaration Modifier private ReferenceType String VariableDeclarator flags Literal """" FieldDeclaration Modifier private BasicType int VariableDeclarator options FieldDeclaration Modifier private ReferenceType Regexp VariableDeclarator regexp MethodDeclaration /**
         * @param from the regex pattern
         */ Modifier public setPattern FormalParameter ReferenceType String from StatementExpression Assignment This MemberReference from MemberReference from = MethodDeclaration /**
         * @param to the replacement string
         */ Modifier public setReplace FormalParameter ReferenceType String to StatementExpression Assignment This MemberReference to MemberReference to = MethodDeclaration /**
         * @param flags the regex flags
         */ Modifier public setFlags FormalParameter ReferenceType String flags StatementExpression Assignment This MemberReference flags MemberReference flags = MethodDeclaration Modifier private initialize IfStatement MemberReference initialized BlockStatement ReturnStatement End StatementExpression Assignment MemberReference options MethodInvocation MemberReference flags convertRegexOptions = IfStatement BinaryOperation == MemberReference from Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""Missing from in containsregex"" End StatementExpression Assignment MemberReference regularExpression ClassCreator ReferenceType RegularExpression = StatementExpression MethodInvocation regularExpression MemberReference from setPattern StatementExpression Assignment MemberReference regexp MethodInvocation regularExpression MemberReference project getRegexp = IfStatement BinaryOperation == MemberReference to Literal null BlockStatement ReturnStatement End StatementExpression Assignment MemberReference substitution ClassCreator ReferenceType Substitution = StatementExpression MethodInvocation substitution MemberReference to setExpression MethodDeclaration /**
         * apply regex and substitution on a string
         * @param string the string to apply filter on
         * @return the filtered string
         */ Modifier public ReferenceType String filter FormalParameter ReferenceType String string StatementExpression MethodInvocation initialize IfStatement MethodInvocation ! regexp MemberReference string MemberReference options matches BlockStatement ReturnStatement Literal null End IfStatement BinaryOperation == MemberReference substitution Literal null BlockStatement ReturnStatement MemberReference string End ReturnStatement MethodInvocation regexp MemberReference string MethodInvocation substitution MethodInvocation getProject getExpression MemberReference options substitute ReferenceType ChainableReaderFilter ClassDeclaration Modifier public static /** Filter to trim white space */ Trim MethodDeclaration /**
         * @param line the string to be trimmed
         * @return the trimmed string
         */ Modifier public ReferenceType String filter FormalParameter ReferenceType String line ReturnStatement MethodInvocation line trim ReferenceType ChainableReaderFilter ClassDeclaration Modifier public static /** Filter remove empty tokens */ IgnoreBlank MethodDeclaration /**
         * @param line the line to modify
         * @return the trimmed line
         */ Modifier public ReferenceType String filter FormalParameter ReferenceType String line IfStatement BinaryOperation == MethodInvocation line MethodInvocation length trim Literal 0 BlockStatement ReturnStatement Literal null End ReturnStatement MemberReference line ReferenceType ChainableReaderFilter ClassDeclaration Modifier public static /**
     * Filter to delete characters
     */ DeleteCharacters FieldDeclaration /** the list of characters to remove from the input */ Modifier private ReferenceType String VariableDeclarator deleteChars Literal """" MethodDeclaration /**
         * Set the list of characters to delete
         * @param deleteChars the list of characters
         */ Modifier public setChars FormalParameter ReferenceType String deleteChars StatementExpression Assignment This MemberReference deleteChars MethodInvocation MemberReference deleteChars resolveBackSlash = MethodDeclaration /**
         * remove characters from a string
         * @param string the string to remove the characters from
         * @return the converted string
         */ Modifier public ReferenceType String filter FormalParameter ReferenceType String string LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator output ClassCreator ReferenceType StringBuffer MethodInvocation string length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation string length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator ch MethodInvocation string MemberReference i charAt IfStatement MethodInvocation ! MemberReference ch isDeleteCharacter BlockStatement StatementExpression MethodInvocation output MemberReference ch append End End ReturnStatement MethodInvocation output toString MethodDeclaration /**
         * factory method to provide a reader that removes
         * the characters from a reader as part of a filter
         * chain
         * @param reader the reader object
         * @return the chained reader object
         */ Modifier public ReferenceType Reader chain FormalParameter ReferenceType Reader reader ReturnStatement ClassCreator ReferenceType BaseFilterReader MemberReference reader MethodDeclaration /**
                 * @return the next non delete character
                 */ Modifier public BasicType int read IOException WhileStatement Literal true BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator c MethodInvocation in read IfStatement BinaryOperation == MemberReference c Literal - 1 BlockStatement ReturnStatement MemberReference c End IfStatement MethodInvocation ! Cast BasicType char MemberReference c isDeleteCharacter BlockStatement ReturnStatement MemberReference c End End MethodDeclaration /** check if the character c is to be deleted */ Modifier private BasicType boolean isDeleteCharacter FormalParameter BasicType char c ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator d Literal 0 BinaryOperation < MemberReference d MethodInvocation deleteChars length MemberReference ++ d BlockStatement IfStatement BinaryOperation == MethodInvocation deleteChars MemberReference d charAt MemberReference c BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false ReferenceType ProjectComponent ReferenceType Filter ReferenceType ChainableReader MethodDeclaration /**
     * xml does not do ""c"" like interpretation of strings.
     * i.e. \n\r\t etc.
     * this method processes \n, \r, \t, \f, \\
     * also subs \s -> "" \n\r\t\f""
     * a trailing '\' will be ignored
     *
     * @param input raw string with possible embedded '\'s
     * @return converted string
     */ Modifier public static ReferenceType String resolveBackSlash FormalParameter ReferenceType String input LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator b ClassCreator ReferenceType StringBuffer LocalVariableDeclaration BasicType boolean VariableDeclarator backSlashSeen Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation input length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation input MemberReference i charAt IfStatement MemberReference ! backSlashSeen BlockStatement IfStatement BinaryOperation == MemberReference c Literal '\\' BlockStatement StatementExpression Assignment MemberReference backSlashSeen Literal true = BlockStatement StatementExpression MethodInvocation b MemberReference c append End BlockStatement SwitchStatement MemberReference c SwitchStatementCase Literal '\\' StatementExpression MethodInvocation b Cast BasicType char Literal '\\' append BreakStatement SwitchStatementCase Literal 'n' StatementExpression MethodInvocation b Cast BasicType char Literal '\n' append BreakStatement SwitchStatementCase Literal 'r' StatementExpression MethodInvocation b Cast BasicType char Literal '\r' append BreakStatement SwitchStatementCase Literal 't' StatementExpression MethodInvocation b Cast BasicType char Literal '\t' append BreakStatement SwitchStatementCase Literal 'f' StatementExpression MethodInvocation b Cast BasicType char Literal '\f' append BreakStatement SwitchStatementCase Literal 's' StatementExpression MethodInvocation b Literal "" \t\n\r\f"" append BreakStatement SwitchStatementCase StatementExpression MethodInvocation b MemberReference c append End StatementExpression Assignment MemberReference backSlashSeen Literal false = End End ReturnStatement MethodInvocation b toString MethodDeclaration /**
     * convert regex option flag characters to regex options
     * <dl>
     *   <li>g -  Regexp.REPLACE_ALL</li>
     *   <li>i -  Regexp.MATCH_CASE_INSENSITIVE</li>
     *   <li>m -  Regexp.MATCH_MULTILINE</li>
     *   <li>s -  Regexp.MATCH_SINGLELINE</li>
     * </dl>
     * @param flags the string containing the flags
     * @return the Regexp option bits
     */ Modifier public static BasicType int convertRegexOptions FormalParameter ReferenceType String flags IfStatement BinaryOperation == MemberReference flags Literal null BlockStatement ReturnStatement Literal 0 End LocalVariableDeclaration BasicType int VariableDeclarator options Literal 0 IfStatement BinaryOperation != MethodInvocation flags Literal 'g' indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference options MemberReference Regexp REPLACE_ALL |= End IfStatement BinaryOperation != MethodInvocation flags Literal 'i' indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference options MemberReference Regexp MATCH_CASE_INSENSITIVE |= End IfStatement BinaryOperation != MethodInvocation flags Literal 'm' indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference options MemberReference Regexp MATCH_MULTILINE |= End IfStatement BinaryOperation != MethodInvocation flags Literal 's' indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference options MemberReference Regexp MATCH_SINGLELINE |= End ReturnStatement MemberReference options ReferenceType BaseFilterReader ReferenceType ChainableReader",0
394,394,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.junit Import java.io.BufferedReader Import java.io.ByteArrayOutputStream Import java.io.File Import java.io.FileInputStream Import java.io.IOException Import java.io.PrintStream Import java.io.PrintWriter Import java.io.StringReader Import java.io.StringWriter Import java.lang.reflect.Method Import java.util.Enumeration Import java.util.Hashtable Import java.util.Properties Import java.util.StringTokenizer Import java.util.Vector Import junit.framework.AssertionFailedError Import junit.framework.Test Import junit.framework.TestListener Import junit.framework.TestResult Import junit.framework.TestSuite Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.Project Import org.apache.tools.ant.types.Permissions Import org.apache.tools.ant.util.StringUtils Import org.apache.tools.ant.util.TeeOutputStream ClassDeclaration Modifier public /**
 * Simple Testrunner for JUnit that runs all tests of a testsuite.
 *
 * <p>This TestRunner expects a name of a TestCase class as its
 * argument. If this class provides a static suite() method it will be
 * called and the resulting Test will be run. So, the signature should be
 * <pre><code>
 *     public static junit.framework.Test suite()
 * </code></pre>
 *
 * <p> If no such method exists, all public methods starting with
 * ""test"" and taking no argument will be run.
 *
 * <p> Summary output is generated at the end.
 *
 * @since Ant 1.2
 */ JUnitTestRunner FieldDeclaration /**
     * No problems with this test.
     */ Modifier public final static BasicType int VariableDeclarator SUCCESS Literal 0 FieldDeclaration /**
     * Some tests failed.
     */ Modifier public final static BasicType int VariableDeclarator FAILURES Literal 1 FieldDeclaration /**
     * An error occurred.
     */ Modifier public final static BasicType int VariableDeclarator ERRORS Literal 2 FieldDeclaration /**
     * Holds the registered formatters.
     */ Modifier private ReferenceType Vector VariableDeclarator formatters ClassCreator ReferenceType Vector FieldDeclaration /**
     * Collects TestResults.
     */ Modifier private ReferenceType TestResult VariableDeclarator res FieldDeclaration /**
     * Do we filter junit.*.* stack frames out of failure and error exceptions.
     */ Modifier private static BasicType boolean VariableDeclarator filtertrace Literal true FieldDeclaration /**
     * Do we send output to System.out/.err in addition to the formatters?
     */ Modifier private BasicType boolean VariableDeclarator showOutput Literal false FieldDeclaration /**
     * The permissions set for the test to run.
     */ Modifier private ReferenceType Permissions VariableDeclarator perm Literal null FieldDeclaration Modifier private final static ReferenceType String VariableDeclarator DEFAULT_TRACE_FILTERS ArrayCreator ReferenceType String ArrayInitializer Literal ""junit.framework.TestCase"" Literal ""junit.framework.TestResult"" Literal ""junit.framework.TestSuite"" Literal ""junit.framework.Assert."" Literal ""junit.swingui.TestRunner"" Literal ""junit.awtui.TestRunner"" Literal ""junit.textui.TestRunner"" Literal ""java.lang.reflect.Method.invoke("" Literal ""org.apache.tools.ant."" FieldDeclaration /**
     * Do we stop on errors.
     */ Modifier private BasicType boolean VariableDeclarator haltOnError Literal false FieldDeclaration /**
     * Do we stop on test failures.
     */ Modifier private BasicType boolean VariableDeclarator haltOnFailure Literal false FieldDeclaration /**
     * The corresponding testsuite.
     */ Modifier private ReferenceType Test VariableDeclarator suite Literal null FieldDeclaration /**
     * Exception caught in constructor.
     */ Modifier private ReferenceType Exception VariableDeclarator exception FieldDeclaration /**
     * Returncode
     */ Modifier private BasicType int VariableDeclarator retCode MemberReference SUCCESS FieldDeclaration /**
     * The TestSuite we are currently running.
     */ Modifier private ReferenceType JUnitTest VariableDeclarator junitTest FieldDeclaration /** output written during the test */ Modifier private ReferenceType PrintStream VariableDeclarator systemError FieldDeclaration /** Error output during the test */ Modifier private ReferenceType PrintStream VariableDeclarator systemOut FieldDeclaration /** is this runner running in forked mode? */ Modifier private BasicType boolean VariableDeclarator forked Literal false FieldDeclaration /** Running more than one test suite? */ Modifier private static BasicType boolean VariableDeclarator multipleTests Literal false ConstructorDeclaration Modifier public /**
     * Constructor for fork=true or when the user hasn't specified a
     * classpath.
     */ JUnitTestRunner FormalParameter ReferenceType JUnitTest test FormalParameter BasicType boolean haltOnError FormalParameter BasicType boolean filtertrace FormalParameter BasicType boolean haltOnFailure StatementExpression ExplicitConstructorInvocation MemberReference test MemberReference haltOnError MemberReference filtertrace MemberReference haltOnFailure Literal false ConstructorDeclaration Modifier public /**
     * Constructor for fork=true or when the user hasn't specified a
     * classpath.
     */ JUnitTestRunner FormalParameter ReferenceType JUnitTest test FormalParameter BasicType boolean haltOnError FormalParameter BasicType boolean filtertrace FormalParameter BasicType boolean haltOnFailure FormalParameter BasicType boolean showOutput StatementExpression ExplicitConstructorInvocation MemberReference test MemberReference haltOnError MemberReference filtertrace MemberReference haltOnFailure MemberReference showOutput Literal null ConstructorDeclaration Modifier public /**
     * Constructor to use when the user has specified a classpath.
     */ JUnitTestRunner FormalParameter ReferenceType JUnitTest test FormalParameter BasicType boolean haltOnError FormalParameter BasicType boolean filtertrace FormalParameter BasicType boolean haltOnFailure FormalParameter ReferenceType ClassLoader loader StatementExpression ExplicitConstructorInvocation MemberReference test MemberReference haltOnError MemberReference filtertrace MemberReference haltOnFailure Literal false MemberReference loader ConstructorDeclaration Modifier public /**
     * Constructor to use when the user has specified a classpath.
     */ JUnitTestRunner FormalParameter ReferenceType JUnitTest test FormalParameter BasicType boolean haltOnError FormalParameter BasicType boolean filtertrace FormalParameter BasicType boolean haltOnFailure FormalParameter BasicType boolean showOutput FormalParameter ReferenceType ClassLoader loader StatementExpression Assignment This MemberReference filtertrace MemberReference filtertrace = StatementExpression Assignment This MemberReference junitTest MemberReference test = StatementExpression Assignment This MemberReference haltOnError MemberReference haltOnError = StatementExpression Assignment This MemberReference haltOnFailure MemberReference haltOnFailure = StatementExpression Assignment This MemberReference showOutput MemberReference showOutput = TryStatement LocalVariableDeclaration ReferenceType Class VariableDeclarator testClass Literal null IfStatement BinaryOperation == MemberReference loader Literal null BlockStatement StatementExpression Assignment MemberReference testClass MethodInvocation Class MethodInvocation test getName forName = BlockStatement StatementExpression Assignment MemberReference testClass MethodInvocation Class MethodInvocation test getName Literal true MemberReference loader forName = End LocalVariableDeclaration ReferenceType Method VariableDeclarator suiteMethod Literal null TryStatement StatementExpression Assignment MemberReference suiteMethod MethodInvocation testClass Literal ""suite"" ArrayCreator ReferenceType Class Literal 0 getMethod = CatchClause CatchClauseParameter NoSuchMethodException e IfStatement BinaryOperation != MemberReference suiteMethod Literal null BlockStatement StatementExpression Assignment MemberReference suite Cast ReferenceType Test MethodInvocation suiteMethod Literal null ArrayCreator ReferenceType Class Literal 0 invoke = BlockStatement StatementExpression Assignment MemberReference suite ClassCreator ReferenceType TestSuite MemberReference testClass = End CatchClause CatchClauseParameter Exception e StatementExpression Assignment MemberReference retCode MemberReference ERRORS = StatementExpression Assignment MemberReference exception MemberReference e = MethodDeclaration Modifier public run StatementExpression Assignment MemberReference res ClassCreator ReferenceType TestResult = StatementExpression MethodInvocation res This addListener ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation formatters size MemberReference ++ i BlockStatement StatementExpression MethodInvocation res Cast ReferenceType TestListener MethodInvocation formatters MemberReference i elementAt addListener End LocalVariableDeclaration BasicType long VariableDeclarator start MethodInvocation System currentTimeMillis StatementExpression MethodInvocation fireStartTestSuite IfStatement BinaryOperation != MemberReference exception Literal null BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation formatters size MemberReference ++ i BlockStatement StatementExpression Cast ReferenceType TestListener MethodInvocation formatters MemberReference i elementAt End StatementExpression MethodInvocation junitTest Literal 1 Literal 0 Literal 1 setCounts StatementExpression MethodInvocation junitTest Literal 0 setRunTime BlockStatement LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator errStrm ClassCreator ReferenceType ByteArrayOutputStream StatementExpression Assignment MemberReference systemError ClassCreator ReferenceType PrintStream MemberReference errStrm = LocalVariableDeclaration ReferenceType ByteArrayOutputStream VariableDeclarator outStrm ClassCreator ReferenceType ByteArrayOutputStream StatementExpression Assignment MemberReference systemOut ClassCreator ReferenceType PrintStream MemberReference outStrm = LocalVariableDeclaration ReferenceType PrintStream VariableDeclarator savedOut Literal null LocalVariableDeclaration ReferenceType PrintStream VariableDeclarator savedErr Literal null IfStatement MemberReference forked BlockStatement StatementExpression Assignment MemberReference savedOut MemberReference System out = StatementExpression Assignment MemberReference savedErr MemberReference System err = IfStatement MemberReference ! showOutput BlockStatement StatementExpression MethodInvocation System MemberReference systemOut setOut StatementExpression MethodInvocation System MemberReference systemError setErr BlockStatement StatementExpression MethodInvocation System ClassCreator ReferenceType PrintStream ClassCreator ReferenceType TeeOutputStream MemberReference savedOut MemberReference systemOut setOut StatementExpression MethodInvocation System ClassCreator ReferenceType PrintStream ClassCreator ReferenceType TeeOutputStream MemberReference savedErr MemberReference systemError setErr End StatementExpression Assignment MemberReference perm Literal null = BlockStatement IfStatement BinaryOperation != MemberReference perm Literal null BlockStatement StatementExpression MethodInvocation perm setSecurityManager End End TryStatement StatementExpression MethodInvocation suite MemberReference res run IfStatement BinaryOperation != MemberReference perm Literal null BlockStatement StatementExpression MethodInvocation perm restoreSecurityManager End IfStatement BinaryOperation != MemberReference savedOut Literal null BlockStatement StatementExpression MethodInvocation System MemberReference savedOut setOut End IfStatement BinaryOperation != MemberReference savedErr Literal null BlockStatement StatementExpression MethodInvocation System MemberReference savedErr setErr End StatementExpression MethodInvocation systemError close StatementExpression Assignment MemberReference systemError Literal null = StatementExpression MethodInvocation systemOut close StatementExpression Assignment MemberReference systemOut Literal null = StatementExpression MethodInvocation ClassCreator ReferenceType String MethodInvocation outStrm toByteArray ClassCreator ReferenceType String MethodInvocation errStrm toByteArray sendOutAndErr StatementExpression MethodInvocation junitTest MethodInvocation res runCount MethodInvocation res failureCount MethodInvocation res errorCount setCounts StatementExpression MethodInvocation junitTest BinaryOperation - MethodInvocation System currentTimeMillis MemberReference start setRunTime End StatementExpression MethodInvocation fireEndTestSuite IfStatement BinaryOperation || BinaryOperation != MemberReference retCode MemberReference SUCCESS BinaryOperation != MethodInvocation res errorCount Literal 0 BlockStatement StatementExpression Assignment MemberReference retCode MemberReference ERRORS = IfStatement BinaryOperation != MethodInvocation res failureCount Literal 0 BlockStatement StatementExpression Assignment MemberReference retCode MemberReference FAILURES = End End MethodDeclaration /**
     * Returns what System.exit() would return in the standalone version.
     *
     * @return 2 if errors occurred, 1 if tests failed else 0.
     */ Modifier public BasicType int getRetCode ReturnStatement MemberReference retCode MethodDeclaration /**
     * Interface TestListener.
     *
     * <p>A new Test is started.
     */ Modifier public startTest FormalParameter ReferenceType Test t MethodDeclaration /**
     * Interface TestListener.
     *
     * <p>A Test is finished.
     */ Modifier public endTest FormalParameter ReferenceType Test test MethodDeclaration /**
     * Interface TestListener for JUnit &lt;= 3.4.
     *
     * <p>A Test failed.
     */ Modifier public addFailure FormalParameter ReferenceType Test test FormalParameter ReferenceType Throwable t IfStatement MemberReference haltOnFailure BlockStatement StatementExpression MethodInvocation res stop End MethodDeclaration /**
     * Interface TestListener for JUnit &gt; 3.4.
     *
     * <p>A Test failed.
     */ Modifier public addFailure FormalParameter ReferenceType Test test FormalParameter ReferenceType AssertionFailedError t StatementExpression MethodInvocation MemberReference test Cast ReferenceType Throwable MemberReference t addFailure MethodDeclaration /**
     * Interface TestListener.
     *
     * <p>An error occurred while running the test.
     */ Modifier public addError FormalParameter ReferenceType Test test FormalParameter ReferenceType Throwable t IfStatement MemberReference haltOnError BlockStatement StatementExpression MethodInvocation res stop End MethodDeclaration /**
     * Permissions for the test run.
     * @since Ant 1.6
     * @param permissions
     */ Modifier public setPermissions FormalParameter ReferenceType Permissions permissions StatementExpression Assignment MemberReference perm MemberReference permissions = MethodDeclaration Modifier protected handleOutput FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference systemOut Literal null BlockStatement StatementExpression MethodInvocation systemOut MemberReference output print End MethodDeclaration /**
     * @see Task#handleInput(byte[], int, int)
     *
     * @since Ant 1.6
     */ Modifier protected BasicType int handleInput FormalParameter BasicType byte buffer FormalParameter BasicType int offset FormalParameter BasicType int length IOException ReturnStatement Literal - 1 MethodDeclaration Modifier protected handleErrorOutput FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference systemError Literal null BlockStatement StatementExpression MethodInvocation systemError MemberReference output print End MethodDeclaration Modifier protected handleFlush FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference systemOut Literal null BlockStatement StatementExpression MethodInvocation systemOut MemberReference output print End MethodDeclaration Modifier protected handleErrorFlush FormalParameter ReferenceType String output IfStatement BinaryOperation != MemberReference systemError Literal null BlockStatement StatementExpression MethodInvocation systemError MemberReference output print End MethodDeclaration Modifier private sendOutAndErr FormalParameter ReferenceType String out FormalParameter ReferenceType String err ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation formatters size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType JUnitResultFormatter VariableDeclarator formatter Cast ReferenceType JUnitResultFormatter MethodInvocation formatters MemberReference i elementAt StatementExpression MethodInvocation formatter MemberReference out setSystemOutput StatementExpression MethodInvocation formatter MemberReference err setSystemError End MethodDeclaration Modifier private fireStartTestSuite ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation formatters size MemberReference ++ i BlockStatement StatementExpression Cast ReferenceType JUnitResultFormatter MethodInvocation formatters MemberReference i elementAt End MethodDeclaration Modifier private fireEndTestSuite ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation formatters size MemberReference ++ i BlockStatement StatementExpression Cast ReferenceType JUnitResultFormatter MethodInvocation formatters MemberReference i elementAt End MethodDeclaration Modifier public addFormatter FormalParameter ReferenceType JUnitResultFormatter f StatementExpression MethodInvocation formatters MemberReference f addElement MethodDeclaration /**
     * Entry point for standalone (forked) mode.
     *
     * Parameters: testcaseclassname plus parameters in the format
     * key=value, none of which is required.
     *
     * <table cols=""4"" border=""1"">
     * <tr><th>key</th><th>description</th><th>default value</th></tr>
     *
     * <tr><td>haltOnError</td><td>halt test on
     * errors?</td><td>false</td></tr>
     *
     * <tr><td>haltOnFailure</td><td>halt test on
     * failures?</td><td>false</td></tr>
     *
     * <tr><td>formatter</td><td>A JUnitResultFormatter given as
     * classname,filename. If filename is ommitted, System.out is
     * assumed.</td><td>none</td></tr>
     *
     * <tr><td>showoutput</td><td>send output to System.err/.out as
     * well as to the formatters?</td><td>false</td></tr>
     *
     * </table>
     */ Modifier public static main FormalParameter ReferenceType String args IOException LocalVariableDeclaration BasicType boolean VariableDeclarator haltError Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator haltFail Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator stackfilter Literal true LocalVariableDeclaration ReferenceType Properties VariableDeclarator props ClassCreator ReferenceType Properties LocalVariableDeclaration BasicType boolean VariableDeclarator showOut Literal false IfStatement BinaryOperation == MemberReference args length Literal 0 BlockStatement StatementExpression MethodInvocation System.err Literal ""required argument TestClassName missing"" println StatementExpression MethodInvocation System MemberReference ERRORS exit End IfStatement MemberReference ArraySelector Literal 0 MethodInvocation Literal ""testsfile="" startsWith args BlockStatement StatementExpression Assignment MemberReference multipleTests Literal true = StatementExpression Assignment MemberReference ArraySelector Literal 0 args MemberReference ArraySelector Literal 0 MethodInvocation Literal 10 substring args = End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference args length MemberReference ++ i BlockStatement IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""haltOnError="" startsWith args BlockStatement StatementExpression Assignment MemberReference haltError MethodInvocation Project MemberReference ArraySelector MemberReference i MethodInvocation Literal 12 substring args toBoolean = IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""haltOnFailure="" startsWith args BlockStatement StatementExpression Assignment MemberReference haltFail MethodInvocation Project MemberReference ArraySelector MemberReference i MethodInvocation Literal 14 substring args toBoolean = IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""filtertrace="" startsWith args BlockStatement StatementExpression Assignment MemberReference stackfilter MethodInvocation Project MemberReference ArraySelector MemberReference i MethodInvocation Literal 12 substring args toBoolean = IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""formatter="" startsWith args BlockStatement TryStatement StatementExpression MethodInvocation MemberReference ArraySelector MemberReference i MethodInvocation Literal 10 substring args createAndStoreFormatter CatchClause CatchClauseParameter BuildException be StatementExpression MethodInvocation System.err MethodInvocation be getMessage println StatementExpression MethodInvocation System MemberReference ERRORS exit IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""propsfile="" startsWith args BlockStatement LocalVariableDeclaration ReferenceType FileInputStream VariableDeclarator in ClassCreator ReferenceType FileInputStream MemberReference ArraySelector MemberReference i MethodInvocation Literal 10 substring args StatementExpression MethodInvocation props MemberReference in load StatementExpression MethodInvocation in close IfStatement MemberReference ArraySelector MemberReference i MethodInvocation Literal ""showoutput="" startsWith args BlockStatement StatementExpression Assignment MemberReference showOut MethodInvocation Project MemberReference ArraySelector MemberReference i MethodInvocation Literal 11 substring args toBoolean = End End End End End End End LocalVariableDeclaration ReferenceType Hashtable VariableDeclarator p MethodInvocation System getProperties ForStatement ForControl VariableDeclaration ReferenceType Enumeration VariableDeclarator e MethodInvocation p keys MethodInvocation e hasMoreElements BlockStatement LocalVariableDeclaration ReferenceType Object VariableDeclarator key MethodInvocation e nextElement StatementExpression MethodInvocation props MemberReference key MethodInvocation p MemberReference key get put End LocalVariableDeclaration BasicType int VariableDeclarator returnCode MemberReference SUCCESS IfStatement MemberReference multipleTests BlockStatement TryStatement LocalVariableDeclaration ReferenceType java ReferenceType io ReferenceType BufferedReader VariableDeclarator reader ClassCreator ReferenceType java ReferenceType io ReferenceType BufferedReader ClassCreator ReferenceType java ReferenceType io ReferenceType FileReader MemberReference ArraySelector Literal 0 args LocalVariableDeclaration ReferenceType String VariableDeclarator testCaseName LocalVariableDeclaration BasicType int VariableDeclarator code Literal 0 LocalVariableDeclaration BasicType boolean VariableDeclarator errorOccured Literal false LocalVariableDeclaration BasicType boolean VariableDeclarator failureOccured Literal false LocalVariableDeclaration ReferenceType String VariableDeclarator line Literal null WhileStatement BinaryOperation != Assignment MemberReference line MethodInvocation reader readLine = Literal null BlockStatement LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference line Literal "","" StatementExpression Assignment MemberReference testCaseName MethodInvocation st nextToken = LocalVariableDeclaration ReferenceType JUnitTest VariableDeclarator t ClassCreator ReferenceType JUnitTest MemberReference testCaseName StatementExpression MethodInvocation t ClassCreator ReferenceType File MethodInvocation st nextToken setTodir StatementExpression MethodInvocation t MethodInvocation st nextToken setOutfile StatementExpression Assignment MemberReference code MethodInvocation MemberReference t MemberReference haltError MemberReference stackfilter MemberReference haltFail MemberReference showOut MemberReference props launch = StatementExpression Assignment MemberReference errorOccured BinaryOperation == MemberReference code MemberReference ERRORS = StatementExpression Assignment MemberReference failureOccured BinaryOperation != MemberReference code MemberReference SUCCESS = IfStatement BinaryOperation || MemberReference errorOccured MemberReference failureOccured BlockStatement IfStatement BinaryOperation || BinaryOperation && MemberReference errorOccured MemberReference haltError BinaryOperation && MemberReference failureOccured MemberReference haltFail BlockStatement StatementExpression MethodInvocation System MemberReference code exit BlockStatement IfStatement BinaryOperation > MemberReference code MemberReference returnCode BlockStatement StatementExpression Assignment MemberReference returnCode MemberReference code = End StatementExpression MethodInvocation System.out BinaryOperation + BinaryOperation + Literal ""TEST "" MethodInvocation t getName Literal "" FAILED"" println End End End CatchClause CatchClauseParameter IOException e StatementExpression MethodInvocation e printStackTrace BlockStatement StatementExpression Assignment MemberReference returnCode MethodInvocation ClassCreator ReferenceType JUnitTest MemberReference ArraySelector Literal 0 args MemberReference haltError MemberReference stackfilter MemberReference haltFail MemberReference showOut MemberReference props launch = End StatementExpression MethodInvocation System MemberReference returnCode exit FieldDeclaration Modifier private static ReferenceType Vector VariableDeclarator fromCmdLine ClassCreator ReferenceType Vector MethodDeclaration Modifier private static transferFormatters FormalParameter ReferenceType JUnitTestRunner runner FormalParameter ReferenceType JUnitTest test ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation fromCmdLine size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType FormatterElement VariableDeclarator fe Cast ReferenceType FormatterElement MethodInvocation fromCmdLine MemberReference i elementAt IfStatement BinaryOperation && MemberReference multipleTests MethodInvocation fe getUseFile BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator destFile ClassCreator ReferenceType File MethodInvocation test getTodir BinaryOperation + MethodInvocation test getOutfile MethodInvocation fe getExtension StatementExpression MethodInvocation fe MemberReference destFile setOutfile End StatementExpression MethodInvocation runner MethodInvocation fe createFormatter addFormatter End MethodDeclaration /**
     * Line format is: formatter=<classname>(,<pathname>)?
     */ Modifier private static createAndStoreFormatter FormalParameter ReferenceType String line BuildException LocalVariableDeclaration ReferenceType FormatterElement VariableDeclarator fe ClassCreator ReferenceType FormatterElement LocalVariableDeclaration BasicType int VariableDeclarator pos MethodInvocation line Literal ',' indexOf IfStatement BinaryOperation == MemberReference pos Literal - 1 BlockStatement StatementExpression MethodInvocation fe MemberReference line setClassname StatementExpression MethodInvocation fe Literal false setUseFile BlockStatement StatementExpression MethodInvocation fe MethodInvocation line Literal 0 MemberReference pos substring setClassname StatementExpression MethodInvocation fe Literal true setUseFile IfStatement MemberReference ! multipleTests BlockStatement StatementExpression MethodInvocation fe ClassCreator ReferenceType File MethodInvocation line BinaryOperation + MemberReference pos Literal 1 substring setOutfile End End StatementExpression MethodInvocation fromCmdLine MemberReference fe addElement MethodDeclaration /**
     * Returns a filtered stack trace.
     * This is ripped out of junit.runner.BaseTestRunner.
     */ Modifier public static ReferenceType String getFilteredTrace FormalParameter ReferenceType Throwable t LocalVariableDeclaration ReferenceType String VariableDeclarator trace MethodInvocation StringUtils MemberReference t getStackTrace ReturnStatement MethodInvocation JUnitTestRunner MemberReference trace filterStack MethodDeclaration /**
     * Filters stack frames from internal JUnit and Ant classes
     */ Modifier public static ReferenceType String filterStack FormalParameter ReferenceType String stack IfStatement MemberReference ! filtertrace BlockStatement ReturnStatement MemberReference stack End LocalVariableDeclaration ReferenceType StringWriter VariableDeclarator sw ClassCreator ReferenceType StringWriter LocalVariableDeclaration ReferenceType PrintWriter VariableDeclarator pw ClassCreator ReferenceType PrintWriter MemberReference sw LocalVariableDeclaration ReferenceType StringReader VariableDeclarator sr ClassCreator ReferenceType StringReader MemberReference stack LocalVariableDeclaration ReferenceType BufferedReader VariableDeclarator br ClassCreator ReferenceType BufferedReader MemberReference sr LocalVariableDeclaration ReferenceType String VariableDeclarator line TryStatement WhileStatement BinaryOperation != Assignment MemberReference line MethodInvocation br readLine = Literal null BlockStatement IfStatement MethodInvocation ! MemberReference line filterLine BlockStatement StatementExpression MethodInvocation pw MemberReference line println End End CatchClause CatchClauseParameter Exception IOException ReturnStatement MemberReference stack ReturnStatement MethodInvocation sw toString MethodDeclaration Modifier private static BasicType boolean filterLine FormalParameter ReferenceType String line ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference DEFAULT_TRACE_FILTERS length MemberReference ++ i BlockStatement IfStatement BinaryOperation > MethodInvocation line MemberReference ArraySelector MemberReference i DEFAULT_TRACE_FILTERS indexOf Literal 0 BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false MethodDeclaration /**
     * @since Ant 1.6.2
     */ Modifier private static BasicType int launch FormalParameter ReferenceType JUnitTest t FormalParameter BasicType boolean haltError FormalParameter BasicType boolean stackfilter FormalParameter BasicType boolean haltFail FormalParameter BasicType boolean showOut FormalParameter ReferenceType Properties props StatementExpression MethodInvocation t MemberReference props setProperties LocalVariableDeclaration ReferenceType JUnitTestRunner VariableDeclarator runner ClassCreator ReferenceType JUnitTestRunner MemberReference t MemberReference haltError MemberReference stackfilter MemberReference haltFail MemberReference showOut StatementExpression Assignment MemberReference runner forked Literal true = StatementExpression MethodInvocation MemberReference runner MemberReference t transferFormatters StatementExpression MethodInvocation runner run ReturnStatement MethodInvocation runner getRetCode ReferenceType TestListener",1
386,386,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs Import java.io.PrintStream Import org.apache.tools.ant.BuildEvent Import org.apache.tools.ant.BuildLogger Import org.apache.tools.ant.DefaultLogger Import org.apache.tools.ant.Project Import org.apache.tools.ant.SubBuildListener Import org.apache.tools.ant.util.StringUtils ClassDeclaration Modifier public /**
 * This is a class that represents a recorder. This is the listener to the
 * build process.
 *
 * @version 0.5
 * @since Ant 1.4
 */ RecorderEntry FieldDeclaration /** The name of the file associated with this recorder entry.  */ Modifier private ReferenceType String VariableDeclarator filename Literal null FieldDeclaration /** The state of the recorder (recorder on or off).  */ Modifier private BasicType boolean VariableDeclarator record Literal true FieldDeclaration /** The current verbosity level to record at.  */ Modifier private BasicType int VariableDeclarator loglevel MemberReference Project MSG_INFO FieldDeclaration /** The output PrintStream to record to.  */ Modifier private ReferenceType PrintStream VariableDeclarator out Literal null FieldDeclaration /** The start time of the last know target.  */ Modifier private BasicType long VariableDeclarator targetStartTime Literal 0L FieldDeclaration /** Strip task banners if true.  */ Modifier private BasicType boolean VariableDeclarator emacsMode Literal false FieldDeclaration /** project instance the recorder is associated with */ Modifier private ReferenceType Project VariableDeclarator project ConstructorDeclaration Modifier protected /**
     * @param name The name of this recorder (used as the filename).
     */ RecorderEntry FormalParameter ReferenceType String name StatementExpression Assignment MemberReference targetStartTime MethodInvocation System currentTimeMillis = StatementExpression Assignment MemberReference filename MemberReference name = MethodDeclaration /**
     * @return the name of the file the output is sent to.
     */ Modifier public ReferenceType String getFilename ReturnStatement MemberReference filename MethodDeclaration /**
     * Turns off or on this recorder.
     *
     * @param state true for on, false for off, null for no change.
     */ Modifier public setRecordState FormalParameter ReferenceType Boolean state IfStatement BinaryOperation != MemberReference state Literal null BlockStatement StatementExpression Assignment MemberReference record MethodInvocation state booleanValue = End MethodDeclaration Modifier public buildStarted FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation Literal ""> BUILD STARTED"" MemberReference Project MSG_DEBUG log MethodDeclaration Modifier public buildFinished FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation Literal ""< BUILD FINISHED"" MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType Throwable VariableDeclarator error MethodInvocation event getException IfStatement BinaryOperation == MemberReference error Literal null BlockStatement StatementExpression MethodInvocation out BinaryOperation + MemberReference StringUtils LINE_SEP Literal ""BUILD SUCCESSFUL"" println BlockStatement StatementExpression MethodInvocation out BinaryOperation + BinaryOperation + MemberReference StringUtils LINE_SEP Literal ""BUILD FAILED"" MemberReference StringUtils LINE_SEP println StatementExpression MethodInvocation error MemberReference out printStackTrace End StatementExpression MethodInvocation cleanup MethodDeclaration /**
     * Cleans up any resources held by this recorder entry at the end
     * of a subbuild if it has been created for the subbuild's project
     * instance.
     *
     * @param event the buildFinished event
     *
     * @since Ant 1.6.2
     */ Modifier public subBuildFinished FormalParameter ReferenceType BuildEvent event IfStatement BinaryOperation == MethodInvocation event getProject MemberReference project BlockStatement StatementExpression MethodInvocation cleanup End MethodDeclaration /**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the buildStarted event
     *
     * @since Ant 1.6.2
     */ Modifier public subBuildStarted FormalParameter ReferenceType BuildEvent event MethodDeclaration Modifier public targetStarted FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation BinaryOperation + Literal "">> TARGET STARTED -- "" MethodInvocation event getTarget MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation BinaryOperation + BinaryOperation + MemberReference StringUtils LINE_SEP MethodInvocation event MethodInvocation getName getTarget Literal "":"" MemberReference Project MSG_INFO log StatementExpression Assignment MemberReference targetStartTime MethodInvocation System currentTimeMillis = MethodDeclaration Modifier public targetFinished FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation BinaryOperation + Literal ""<< TARGET FINISHED -- "" MethodInvocation event getTarget MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType String VariableDeclarator time MethodInvocation BinaryOperation - MethodInvocation System currentTimeMillis MemberReference targetStartTime formatTime StatementExpression MethodInvocation BinaryOperation + BinaryOperation + MethodInvocation event getTarget Literal "":  duration "" MemberReference time MemberReference Project MSG_VERBOSE log StatementExpression MethodInvocation out flush MethodDeclaration Modifier public taskStarted FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation BinaryOperation + Literal "">>> TASK STARTED -- "" MethodInvocation event getTask MemberReference Project MSG_DEBUG log MethodDeclaration Modifier public taskFinished FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation BinaryOperation + Literal ""<<< TASK FINISHED -- "" MethodInvocation event getTask MemberReference Project MSG_DEBUG log StatementExpression MethodInvocation out flush MethodDeclaration Modifier public messageLogged FormalParameter ReferenceType BuildEvent event StatementExpression MethodInvocation Literal ""--- MESSAGE LOGGED"" MemberReference Project MSG_DEBUG log LocalVariableDeclaration ReferenceType StringBuffer VariableDeclarator buf ClassCreator ReferenceType StringBuffer IfStatement BinaryOperation != MethodInvocation event getTask Literal null BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator name MethodInvocation event MethodInvocation getTaskName getTask IfStatement MemberReference ! emacsMode BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator label BinaryOperation + BinaryOperation + Literal ""["" MemberReference name Literal ""] "" LocalVariableDeclaration BasicType int VariableDeclarator size BinaryOperation - MemberReference DefaultLogger LEFT_COLUMN_SIZE MethodInvocation label length ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference size MemberReference ++ i BlockStatement StatementExpression MethodInvocation buf Literal "" "" append End StatementExpression MethodInvocation buf MemberReference label append End End StatementExpression MethodInvocation buf MethodInvocation event getMessage append StatementExpression MethodInvocation MethodInvocation buf toString MethodInvocation event getPriority log MethodDeclaration /**
     * The thing that actually sends the information to the output.
     *
     * @param mesg The message to log.
     * @param level The verbosity level of the message.
     */ Modifier private log FormalParameter ReferenceType String mesg FormalParameter BasicType int level IfStatement BinaryOperation && MemberReference record BinaryOperation <= MemberReference level MemberReference loglevel BlockStatement StatementExpression MethodInvocation out MemberReference mesg println End MethodDeclaration Modifier public setMessageOutputLevel FormalParameter BasicType int level IfStatement BinaryOperation && BinaryOperation >= MemberReference level MemberReference Project MSG_ERR BinaryOperation <= MemberReference level MemberReference Project MSG_DEBUG BlockStatement StatementExpression Assignment MemberReference loglevel MemberReference level = End MethodDeclaration Modifier public setOutputPrintStream FormalParameter ReferenceType PrintStream output StatementExpression Assignment MemberReference out MemberReference output = MethodDeclaration Modifier public setEmacsMode FormalParameter BasicType boolean emacsMode StatementExpression Assignment This MemberReference emacsMode MemberReference emacsMode = MethodDeclaration Modifier public setErrorPrintStream FormalParameter ReferenceType PrintStream err StatementExpression Assignment MemberReference out MemberReference err = MethodDeclaration Modifier private static ReferenceType String formatTime FormalParameter BasicType long millis LocalVariableDeclaration BasicType long VariableDeclarator seconds BinaryOperation / MemberReference millis Literal 1000 LocalVariableDeclaration BasicType long VariableDeclarator minutes BinaryOperation / MemberReference seconds Literal 60 IfStatement BinaryOperation > MemberReference minutes Literal 0 BlockStatement ReturnStatement BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation Long MemberReference minutes toString Literal "" minute"" TernaryExpression BinaryOperation == MemberReference minutes Literal 1 Literal "" "" Literal ""s "" MethodInvocation Long BinaryOperation % MemberReference seconds Literal 60 toString Literal "" second"" TernaryExpression BinaryOperation == BinaryOperation % MemberReference seconds Literal 60 Literal 1 Literal """" Literal ""s"" BlockStatement ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation Long MemberReference seconds toString Literal "" second"" TernaryExpression BinaryOperation == BinaryOperation % MemberReference seconds Literal 60 Literal 1 Literal """" Literal ""s"" End MethodDeclaration /**
     * Set the project associated with this recorder entry.
     *
     * @param project the project instance
     *
     * @since 1.6.2
     */ Modifier public setProject FormalParameter ReferenceType Project project StatementExpression Assignment This MemberReference project MemberReference project = IfStatement BinaryOperation != MemberReference project Literal null BlockStatement StatementExpression MethodInvocation project This addBuildListener End MethodDeclaration /**
     * @since 1.6.2
     */ Modifier public cleanup StatementExpression MethodInvocation out flush StatementExpression MethodInvocation out close IfStatement BinaryOperation != MemberReference project Literal null BlockStatement StatementExpression MethodInvocation project This removeBuildListener End StatementExpression Assignment MemberReference project Literal null = ReferenceType BuildLogger ReferenceType SubBuildListener",0
493,493,,0
501,501,,1
194,194,"CompilationUnit PackageDeclaration org.apache.tools.ant.taskdefs.optional.jsp Import java.io.File Import java.util.Date Import java.util.StringTokenizer Import java.util.Vector Import org.apache.tools.ant.BuildException Import org.apache.tools.ant.DirectoryScanner Import org.apache.tools.ant.Project Import org.apache.tools.ant.taskdefs.Java Import org.apache.tools.ant.taskdefs.MatchingTask Import org.apache.tools.ant.types.Path ClassDeclaration Modifier public /**
 * Precompiles JSP's using WebLogic's JSP compiler (weblogic.jspc).
 *
 *
 * Tested only on Weblogic 4.5.1 - NT4.0 and Solaris 5.7
 *
 * required attributes
 *      src : root of source tree for JSP, ie, the document root for your weblogic server
 *      dest : root of destination directory, what you have set as
 *             WorkingDir in the weblogic properties
 *      package : start package name under which your JSP's would be compiled
 *
 * other attributes
 *     classpath
 *
 * A classpath should be set which contains the weblogic classes as well as all
 * application classes referenced by the JSP. The system classpath is also
 * appended when the jspc is called, so you may choose to put everything in
 * the classpath while calling Ant. However, since presumably the JSP's will
 * reference classes being build by Ant, it would be better to explicitly add
 * the classpath in the task
 *
 * The task checks timestamps on the JSP's and the generated classes, and compiles
 * only those files that have changed.
 *
 * It follows the weblogic naming convention of putting classes in
 *  <b> _dirName/_fileName.class for dirname/fileName.jsp   </b>
 *
 * Limitation: It compiles the files thru the Classic compiler only.
 * Limitation: Since it is my experience that weblogic jspc throws out of
 *             memory error on being given too many files at one go, it is
 *             called multiple times with one jsp file each.
 *
 * <pre>
 * example
 * &lt;target name=""jspcompile"" depends=""compile""&gt;
 *   &lt;wljspc src=""c:\\weblogic\\myserver\\public_html""
 *           dest=""c:\\weblogic\\myserver\\serverclasses"" package=""myapp.jsp""&gt;
 *   &lt;classpath&gt;
 *          &lt;pathelement location=""${weblogic.classpath}"" /&gt;
 *           &lt;pathelement path=""${compile.dest}"" /&gt;
 *      &lt;/classpath&gt;
 *
 *   &lt;/wljspc&gt;
 * &lt;/target&gt;
 * </pre>
 *
 */ WLJspc FieldDeclaration /** root of compiled files tree */ Modifier private ReferenceType File VariableDeclarator destinationDirectory FieldDeclaration /** root of source files tree */ Modifier private ReferenceType File VariableDeclarator sourceDirectory FieldDeclaration /** package under which resultant classes will reside */ Modifier private ReferenceType String VariableDeclarator destinationPackage FieldDeclaration /** classpath used to compile the jsp files. */ Modifier private ReferenceType Path VariableDeclarator compileClasspath FieldDeclaration Modifier private ReferenceType String VariableDeclarator pathToPackage Literal """" FieldDeclaration Modifier private ReferenceType Vector VariableDeclarator filesToDo ClassCreator ReferenceType Vector MethodDeclaration Modifier public execute BuildException IfStatement MethodInvocation ! destinationDirectory isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""destination directory "" MethodInvocation destinationDirectory getPath Literal "" is not valid"" End IfStatement MethodInvocation ! sourceDirectory isDirectory BlockStatement ThrowStatement ClassCreator ReferenceType BuildException BinaryOperation + BinaryOperation + Literal ""src directory "" MethodInvocation sourceDirectory getPath Literal "" is not valid"" End IfStatement BinaryOperation == MemberReference destinationPackage Literal null BlockStatement ThrowStatement ClassCreator ReferenceType BuildException Literal ""package attribute must be present."" MethodInvocation getLocation End StatementExpression Assignment MemberReference pathToPackage This MemberReference destinationPackage MethodInvocation Literal '.' MemberReference File separatorChar replace = LocalVariableDeclaration ReferenceType DirectoryScanner VariableDeclarator ds SuperMethodInvocation MemberReference sourceDirectory getDirectoryScanner IfStatement BinaryOperation == MemberReference compileClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compileClasspath ClassCreator ReferenceType Path MethodInvocation getProject = End StatementExpression Assignment MemberReference compileClasspath MethodInvocation compileClasspath concatSystemClasspath = LocalVariableDeclaration ReferenceType String VariableDeclarator files MethodInvocation ds getIncludedFiles LocalVariableDeclaration ReferenceType Java VariableDeclarator helperTask Cast ReferenceType Java MethodInvocation MethodInvocation Literal ""java"" createTask getProject StatementExpression MethodInvocation helperTask Literal true setFork StatementExpression MethodInvocation helperTask Literal ""weblogic.jspc"" setClassname StatementExpression MethodInvocation helperTask MethodInvocation getTaskName setTaskName LocalVariableDeclaration ReferenceType String VariableDeclarator args ArrayCreator ReferenceType String Literal 12 LocalVariableDeclaration ReferenceType File VariableDeclarator jspFile Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator parents Literal """" LocalVariableDeclaration BasicType int VariableDeclarator j Literal 0 StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args Literal ""-d"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args MethodInvocation destinationDirectory MethodInvocation trim getAbsolutePath = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args Literal ""-docroot"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args MethodInvocation sourceDirectory MethodInvocation trim getAbsolutePath = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args Literal ""-keepgenerated"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args Literal ""-compilerclass"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args Literal ""sun.tools.javac.Main"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args Literal ""-classpath"" = StatementExpression Assignment MemberReference ArraySelector MemberReference ++ j args MethodInvocation compileClasspath toString = StatementExpression This MethodInvocation MemberReference files scanDir StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Compiling "" MethodInvocation filesToDo size Literal "" JSP files"" log ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation filesToDo size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator filename Cast ReferenceType String MethodInvocation filesToDo MemberReference i elementAt StatementExpression Assignment MemberReference jspFile ClassCreator ReferenceType File MemberReference filename = StatementExpression Assignment MemberReference ArraySelector MemberReference j args Literal ""-package"" = StatementExpression Assignment MemberReference parents MethodInvocation jspFile getParent = IfStatement BinaryOperation && BinaryOperation != MemberReference parents Literal null Literal """" BlockStatement StatementExpression Assignment MemberReference parents This MethodInvocation MemberReference parents MemberReference File separator Literal ""_."" replaceString = StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference j Literal 1 args BinaryOperation + BinaryOperation + BinaryOperation + MemberReference destinationPackage Literal ""."" Literal ""_"" MemberReference parents = BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference j Literal 1 args MemberReference destinationPackage = End StatementExpression Assignment MemberReference ArraySelector BinaryOperation + MemberReference j Literal 2 args BinaryOperation + BinaryOperation + MemberReference sourceDirectory MemberReference File separator MemberReference filename = StatementExpression MethodInvocation helperTask clearArgs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator x Literal 0 BinaryOperation < MemberReference x BinaryOperation + MemberReference j Literal 3 MemberReference ++ x BlockStatement StatementExpression MethodInvocation helperTask MethodInvocation MemberReference ArraySelector MemberReference x args setValue createArg End StatementExpression MethodInvocation helperTask MemberReference compileClasspath setClasspath IfStatement BinaryOperation != MethodInvocation helperTask executeJava Literal 0 BlockStatement StatementExpression MethodInvocation BinaryOperation + MemberReference filename Literal "" failed to compile"" MemberReference Project MSG_WARN log End End MethodDeclaration /**
     * Set the classpath to be used for this compilation.
     *
     */ Modifier public setClasspath FormalParameter ReferenceType Path classpath IfStatement BinaryOperation == MemberReference compileClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compileClasspath MemberReference classpath = BlockStatement StatementExpression MethodInvocation compileClasspath MemberReference classpath append End MethodDeclaration /**
     * Maybe creates a nested classpath element.
     */ Modifier public ReferenceType Path createClasspath IfStatement BinaryOperation == MemberReference compileClasspath Literal null BlockStatement StatementExpression Assignment MemberReference compileClasspath ClassCreator ReferenceType Path MethodInvocation getProject = End ReturnStatement MemberReference compileClasspath MethodDeclaration /**
     * Set the directory containing the source jsp's
     *
     *
     * @param dirName the directory containg the source jsp's
     */ Modifier public setSrc FormalParameter ReferenceType File dirName StatementExpression Assignment MemberReference sourceDirectory MemberReference dirName = MethodDeclaration /**
     * Set the directory containing the source jsp's
     *
     *
     * @param dirName the directory containg the source jsp's
     */ Modifier public setDest FormalParameter ReferenceType File dirName StatementExpression Assignment MemberReference destinationDirectory MemberReference dirName = MethodDeclaration /**
     * Set the package under which the compiled classes go
     *
     * @param packageName the package name for the clases
     */ Modifier public setPackage FormalParameter ReferenceType String packageName StatementExpression Assignment MemberReference destinationPackage MemberReference packageName = MethodDeclaration Modifier protected scanDir FormalParameter ReferenceType String files LocalVariableDeclaration BasicType long VariableDeclarator now ClassCreator MethodInvocation getTime ReferenceType Date LocalVariableDeclaration ReferenceType File VariableDeclarator jspFile Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator parents Literal null LocalVariableDeclaration ReferenceType String VariableDeclarator pack Literal """" ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference files length MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType File VariableDeclarator srcFile ClassCreator ReferenceType File This MemberReference sourceDirectory MemberReference ArraySelector MemberReference i files StatementExpression Assignment MemberReference jspFile ClassCreator ReferenceType File MemberReference ArraySelector MemberReference i files = StatementExpression Assignment MemberReference parents MethodInvocation jspFile getParent = IfStatement BinaryOperation && BinaryOperation != MemberReference parents Literal null Literal """" BlockStatement StatementExpression Assignment MemberReference parents This MethodInvocation MemberReference parents MemberReference File separator Literal ""_/"" replaceString = StatementExpression Assignment MemberReference pack BinaryOperation + BinaryOperation + BinaryOperation + MemberReference pathToPackage MemberReference File separator Literal ""_"" MemberReference parents = BlockStatement StatementExpression Assignment MemberReference pack MemberReference pathToPackage = End LocalVariableDeclaration ReferenceType String VariableDeclarator filePath BinaryOperation + BinaryOperation + MemberReference pack MemberReference File separator Literal ""_"" LocalVariableDeclaration BasicType int VariableDeclarator startingIndex TernaryExpression BinaryOperation != MemberReference ArraySelector MemberReference i MethodInvocation MemberReference File separator lastIndexOf files Literal - 1 BinaryOperation + MemberReference ArraySelector MemberReference i MethodInvocation MemberReference File separator lastIndexOf files Literal 1 Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator endingIndex MemberReference ArraySelector MemberReference i MethodInvocation Literal "".jsp"" indexOf files IfStatement BinaryOperation == MemberReference endingIndex Literal - 1 BlockStatement StatementExpression MethodInvocation BinaryOperation + BinaryOperation + Literal ""Skipping "" MemberReference ArraySelector MemberReference i files Literal "". Not a JSP"" MemberReference Project MSG_VERBOSE log ContinueStatement End StatementExpression Assignment MemberReference filePath MemberReference ArraySelector MemberReference i MethodInvocation MemberReference startingIndex MemberReference endingIndex substring files += StatementExpression Assignment MemberReference filePath Literal "".class"" += LocalVariableDeclaration ReferenceType File VariableDeclarator classFile ClassCreator ReferenceType File This MemberReference destinationDirectory MemberReference filePath IfStatement BinaryOperation > MethodInvocation srcFile lastModified MemberReference now BlockStatement StatementExpression MethodInvocation BinaryOperation + Literal ""Warning: file modified in the future: "" MemberReference ArraySelector MemberReference i files MemberReference Project MSG_WARN log End IfStatement BinaryOperation > MethodInvocation srcFile lastModified MethodInvocation classFile lastModified BlockStatement StatementExpression MethodInvocation filesToDo MemberReference ArraySelector MemberReference i files addElement StatementExpression MethodInvocation BinaryOperation + Literal ""Recompiling File "" MemberReference ArraySelector MemberReference i files MemberReference Project MSG_VERBOSE log End End MethodDeclaration Modifier protected ReferenceType String replaceString FormalParameter ReferenceType String inpString FormalParameter ReferenceType String escapeChars FormalParameter ReferenceType String replaceChars LocalVariableDeclaration ReferenceType String VariableDeclarator localString Literal """" LocalVariableDeclaration BasicType int VariableDeclarator numTokens Literal 0 LocalVariableDeclaration ReferenceType StringTokenizer VariableDeclarator st ClassCreator ReferenceType StringTokenizer MemberReference inpString MemberReference escapeChars Literal true StatementExpression Assignment MemberReference numTokens MethodInvocation st countTokens = ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MemberReference numTokens MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator test MethodInvocation st nextToken StatementExpression Assignment MemberReference test TernaryExpression MethodInvocation test MemberReference escapeChars equals MemberReference replaceChars MemberReference test = StatementExpression Assignment MemberReference localString MemberReference test += End ReturnStatement MemberReference localString ReferenceType MatchingTask",1
505,505,,1
